
base_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001935c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ee8  08019500  08019500  00029500  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a3e8  0801a3e8  000300d4  2**0
                  CONTENTS
  4 .ARM          00000008  0801a3e8  0801a3e8  0002a3e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a3f0  0801a3f0  000300d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a3f0  0801a3f0  0002a3f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a3f4  0801a3f4  0002a3f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  0801a3f8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e778  200000d8  0801a4cc  000300d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000e850  0801a4cc  0003e850  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300d4  2**0
                  CONTENTS, READONLY
 12 .comment      0000009c  00000000  00000000  00030104  2**0
                  CONTENTS, READONLY
 13 .debug_info   000e4509  00000000  00000000  000301a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00017c0a  00000000  00000000  001146a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00004158  00000000  00000000  0012c2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001577  00000000  00000000  00130410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000c39c  00000000  00000000  00131987  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0006ac15  00000000  00000000  0013dd23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b802e  00000000  00000000  001a8938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000102f8  00000000  00000000  00260968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00270c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00057b45  00000000  00000000  00270cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00009b50  00000000  00000000  002c880d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000d8 	.word	0x200000d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080194e4 	.word	0x080194e4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000dc 	.word	0x200000dc
 80001dc:	080194e4 	.word	0x080194e4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_ldivmod>:
 8000aec:	b97b      	cbnz	r3, 8000b0e <__aeabi_ldivmod+0x22>
 8000aee:	b972      	cbnz	r2, 8000b0e <__aeabi_ldivmod+0x22>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bfbe      	ittt	lt
 8000af4:	2000      	movlt	r0, #0
 8000af6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000afa:	e006      	blt.n	8000b0a <__aeabi_ldivmod+0x1e>
 8000afc:	bf08      	it	eq
 8000afe:	2800      	cmpeq	r0, #0
 8000b00:	bf1c      	itt	ne
 8000b02:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000b06:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b0a:	f000 b9bb 	b.w	8000e84 <__aeabi_idiv0>
 8000b0e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b12:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b16:	2900      	cmp	r1, #0
 8000b18:	db09      	blt.n	8000b2e <__aeabi_ldivmod+0x42>
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	db1a      	blt.n	8000b54 <__aeabi_ldivmod+0x68>
 8000b1e:	f000 f84d 	bl	8000bbc <__udivmoddi4>
 8000b22:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b2a:	b004      	add	sp, #16
 8000b2c:	4770      	bx	lr
 8000b2e:	4240      	negs	r0, r0
 8000b30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	db1b      	blt.n	8000b70 <__aeabi_ldivmod+0x84>
 8000b38:	f000 f840 	bl	8000bbc <__udivmoddi4>
 8000b3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b44:	b004      	add	sp, #16
 8000b46:	4240      	negs	r0, r0
 8000b48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b4c:	4252      	negs	r2, r2
 8000b4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b52:	4770      	bx	lr
 8000b54:	4252      	negs	r2, r2
 8000b56:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b5a:	f000 f82f 	bl	8000bbc <__udivmoddi4>
 8000b5e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b66:	b004      	add	sp, #16
 8000b68:	4240      	negs	r0, r0
 8000b6a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b6e:	4770      	bx	lr
 8000b70:	4252      	negs	r2, r2
 8000b72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b76:	f000 f821 	bl	8000bbc <__udivmoddi4>
 8000b7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b82:	b004      	add	sp, #16
 8000b84:	4252      	negs	r2, r2
 8000b86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b8a:	4770      	bx	lr

08000b8c <__aeabi_uldivmod>:
 8000b8c:	b953      	cbnz	r3, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b8e:	b94a      	cbnz	r2, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b90:	2900      	cmp	r1, #0
 8000b92:	bf08      	it	eq
 8000b94:	2800      	cmpeq	r0, #0
 8000b96:	bf1c      	itt	ne
 8000b98:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b9c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ba0:	f000 b970 	b.w	8000e84 <__aeabi_idiv0>
 8000ba4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bac:	f000 f806 	bl	8000bbc <__udivmoddi4>
 8000bb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb8:	b004      	add	sp, #16
 8000bba:	4770      	bx	lr

08000bbc <__udivmoddi4>:
 8000bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc0:	9e08      	ldr	r6, [sp, #32]
 8000bc2:	460d      	mov	r5, r1
 8000bc4:	4604      	mov	r4, r0
 8000bc6:	460f      	mov	r7, r1
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d14a      	bne.n	8000c62 <__udivmoddi4+0xa6>
 8000bcc:	428a      	cmp	r2, r1
 8000bce:	4694      	mov	ip, r2
 8000bd0:	d965      	bls.n	8000c9e <__udivmoddi4+0xe2>
 8000bd2:	fab2 f382 	clz	r3, r2
 8000bd6:	b143      	cbz	r3, 8000bea <__udivmoddi4+0x2e>
 8000bd8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bdc:	f1c3 0220 	rsb	r2, r3, #32
 8000be0:	409f      	lsls	r7, r3
 8000be2:	fa20 f202 	lsr.w	r2, r0, r2
 8000be6:	4317      	orrs	r7, r2
 8000be8:	409c      	lsls	r4, r3
 8000bea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bee:	fa1f f58c 	uxth.w	r5, ip
 8000bf2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bf6:	0c22      	lsrs	r2, r4, #16
 8000bf8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bfc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c00:	fb01 f005 	mul.w	r0, r1, r5
 8000c04:	4290      	cmp	r0, r2
 8000c06:	d90a      	bls.n	8000c1e <__udivmoddi4+0x62>
 8000c08:	eb1c 0202 	adds.w	r2, ip, r2
 8000c0c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c10:	f080 811c 	bcs.w	8000e4c <__udivmoddi4+0x290>
 8000c14:	4290      	cmp	r0, r2
 8000c16:	f240 8119 	bls.w	8000e4c <__udivmoddi4+0x290>
 8000c1a:	3902      	subs	r1, #2
 8000c1c:	4462      	add	r2, ip
 8000c1e:	1a12      	subs	r2, r2, r0
 8000c20:	b2a4      	uxth	r4, r4
 8000c22:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c26:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c2a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c2e:	fb00 f505 	mul.w	r5, r0, r5
 8000c32:	42a5      	cmp	r5, r4
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x90>
 8000c36:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c3e:	f080 8107 	bcs.w	8000e50 <__udivmoddi4+0x294>
 8000c42:	42a5      	cmp	r5, r4
 8000c44:	f240 8104 	bls.w	8000e50 <__udivmoddi4+0x294>
 8000c48:	4464      	add	r4, ip
 8000c4a:	3802      	subs	r0, #2
 8000c4c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c50:	1b64      	subs	r4, r4, r5
 8000c52:	2100      	movs	r1, #0
 8000c54:	b11e      	cbz	r6, 8000c5e <__udivmoddi4+0xa2>
 8000c56:	40dc      	lsrs	r4, r3
 8000c58:	2300      	movs	r3, #0
 8000c5a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d908      	bls.n	8000c78 <__udivmoddi4+0xbc>
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	f000 80ed 	beq.w	8000e46 <__udivmoddi4+0x28a>
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c72:	4608      	mov	r0, r1
 8000c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c78:	fab3 f183 	clz	r1, r3
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	d149      	bne.n	8000d14 <__udivmoddi4+0x158>
 8000c80:	42ab      	cmp	r3, r5
 8000c82:	d302      	bcc.n	8000c8a <__udivmoddi4+0xce>
 8000c84:	4282      	cmp	r2, r0
 8000c86:	f200 80f8 	bhi.w	8000e7a <__udivmoddi4+0x2be>
 8000c8a:	1a84      	subs	r4, r0, r2
 8000c8c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c90:	2001      	movs	r0, #1
 8000c92:	4617      	mov	r7, r2
 8000c94:	2e00      	cmp	r6, #0
 8000c96:	d0e2      	beq.n	8000c5e <__udivmoddi4+0xa2>
 8000c98:	e9c6 4700 	strd	r4, r7, [r6]
 8000c9c:	e7df      	b.n	8000c5e <__udivmoddi4+0xa2>
 8000c9e:	b902      	cbnz	r2, 8000ca2 <__udivmoddi4+0xe6>
 8000ca0:	deff      	udf	#255	; 0xff
 8000ca2:	fab2 f382 	clz	r3, r2
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	f040 8090 	bne.w	8000dcc <__udivmoddi4+0x210>
 8000cac:	1a8a      	subs	r2, r1, r2
 8000cae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb2:	fa1f fe8c 	uxth.w	lr, ip
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cbc:	fb07 2015 	mls	r0, r7, r5, r2
 8000cc0:	0c22      	lsrs	r2, r4, #16
 8000cc2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cc6:	fb0e f005 	mul.w	r0, lr, r5
 8000cca:	4290      	cmp	r0, r2
 8000ccc:	d908      	bls.n	8000ce0 <__udivmoddi4+0x124>
 8000cce:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0x122>
 8000cd8:	4290      	cmp	r0, r2
 8000cda:	f200 80cb 	bhi.w	8000e74 <__udivmoddi4+0x2b8>
 8000cde:	4645      	mov	r5, r8
 8000ce0:	1a12      	subs	r2, r2, r0
 8000ce2:	b2a4      	uxth	r4, r4
 8000ce4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ce8:	fb07 2210 	mls	r2, r7, r0, r2
 8000cec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cf0:	fb0e fe00 	mul.w	lr, lr, r0
 8000cf4:	45a6      	cmp	lr, r4
 8000cf6:	d908      	bls.n	8000d0a <__udivmoddi4+0x14e>
 8000cf8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cfc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d00:	d202      	bcs.n	8000d08 <__udivmoddi4+0x14c>
 8000d02:	45a6      	cmp	lr, r4
 8000d04:	f200 80bb 	bhi.w	8000e7e <__udivmoddi4+0x2c2>
 8000d08:	4610      	mov	r0, r2
 8000d0a:	eba4 040e 	sub.w	r4, r4, lr
 8000d0e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d12:	e79f      	b.n	8000c54 <__udivmoddi4+0x98>
 8000d14:	f1c1 0720 	rsb	r7, r1, #32
 8000d18:	408b      	lsls	r3, r1
 8000d1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d22:	fa05 f401 	lsl.w	r4, r5, r1
 8000d26:	fa20 f307 	lsr.w	r3, r0, r7
 8000d2a:	40fd      	lsrs	r5, r7
 8000d2c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d30:	4323      	orrs	r3, r4
 8000d32:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d36:	fa1f fe8c 	uxth.w	lr, ip
 8000d3a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d3e:	0c1c      	lsrs	r4, r3, #16
 8000d40:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d44:	fb08 f50e 	mul.w	r5, r8, lr
 8000d48:	42a5      	cmp	r5, r4
 8000d4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d4e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d52:	d90b      	bls.n	8000d6c <__udivmoddi4+0x1b0>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d5c:	f080 8088 	bcs.w	8000e70 <__udivmoddi4+0x2b4>
 8000d60:	42a5      	cmp	r5, r4
 8000d62:	f240 8085 	bls.w	8000e70 <__udivmoddi4+0x2b4>
 8000d66:	f1a8 0802 	sub.w	r8, r8, #2
 8000d6a:	4464      	add	r4, ip
 8000d6c:	1b64      	subs	r4, r4, r5
 8000d6e:	b29d      	uxth	r5, r3
 8000d70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d74:	fb09 4413 	mls	r4, r9, r3, r4
 8000d78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d7c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d80:	45a6      	cmp	lr, r4
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x1da>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000d8c:	d26c      	bcs.n	8000e68 <__udivmoddi4+0x2ac>
 8000d8e:	45a6      	cmp	lr, r4
 8000d90:	d96a      	bls.n	8000e68 <__udivmoddi4+0x2ac>
 8000d92:	3b02      	subs	r3, #2
 8000d94:	4464      	add	r4, ip
 8000d96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d9a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d9e:	eba4 040e 	sub.w	r4, r4, lr
 8000da2:	42ac      	cmp	r4, r5
 8000da4:	46c8      	mov	r8, r9
 8000da6:	46ae      	mov	lr, r5
 8000da8:	d356      	bcc.n	8000e58 <__udivmoddi4+0x29c>
 8000daa:	d053      	beq.n	8000e54 <__udivmoddi4+0x298>
 8000dac:	b156      	cbz	r6, 8000dc4 <__udivmoddi4+0x208>
 8000dae:	ebb0 0208 	subs.w	r2, r0, r8
 8000db2:	eb64 040e 	sbc.w	r4, r4, lr
 8000db6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dba:	40ca      	lsrs	r2, r1
 8000dbc:	40cc      	lsrs	r4, r1
 8000dbe:	4317      	orrs	r7, r2
 8000dc0:	e9c6 7400 	strd	r7, r4, [r6]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dcc:	f1c3 0120 	rsb	r1, r3, #32
 8000dd0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dd4:	fa20 f201 	lsr.w	r2, r0, r1
 8000dd8:	fa25 f101 	lsr.w	r1, r5, r1
 8000ddc:	409d      	lsls	r5, r3
 8000dde:	432a      	orrs	r2, r5
 8000de0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de4:	fa1f fe8c 	uxth.w	lr, ip
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1510 	mls	r5, r7, r0, r1
 8000df0:	0c11      	lsrs	r1, r2, #16
 8000df2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000df6:	fb00 f50e 	mul.w	r5, r0, lr
 8000dfa:	428d      	cmp	r5, r1
 8000dfc:	fa04 f403 	lsl.w	r4, r4, r3
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x258>
 8000e02:	eb1c 0101 	adds.w	r1, ip, r1
 8000e06:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e0a:	d22f      	bcs.n	8000e6c <__udivmoddi4+0x2b0>
 8000e0c:	428d      	cmp	r5, r1
 8000e0e:	d92d      	bls.n	8000e6c <__udivmoddi4+0x2b0>
 8000e10:	3802      	subs	r0, #2
 8000e12:	4461      	add	r1, ip
 8000e14:	1b49      	subs	r1, r1, r5
 8000e16:	b292      	uxth	r2, r2
 8000e18:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e1c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e24:	fb05 f10e 	mul.w	r1, r5, lr
 8000e28:	4291      	cmp	r1, r2
 8000e2a:	d908      	bls.n	8000e3e <__udivmoddi4+0x282>
 8000e2c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e30:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e34:	d216      	bcs.n	8000e64 <__udivmoddi4+0x2a8>
 8000e36:	4291      	cmp	r1, r2
 8000e38:	d914      	bls.n	8000e64 <__udivmoddi4+0x2a8>
 8000e3a:	3d02      	subs	r5, #2
 8000e3c:	4462      	add	r2, ip
 8000e3e:	1a52      	subs	r2, r2, r1
 8000e40:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e44:	e738      	b.n	8000cb8 <__udivmoddi4+0xfc>
 8000e46:	4631      	mov	r1, r6
 8000e48:	4630      	mov	r0, r6
 8000e4a:	e708      	b.n	8000c5e <__udivmoddi4+0xa2>
 8000e4c:	4639      	mov	r1, r7
 8000e4e:	e6e6      	b.n	8000c1e <__udivmoddi4+0x62>
 8000e50:	4610      	mov	r0, r2
 8000e52:	e6fb      	b.n	8000c4c <__udivmoddi4+0x90>
 8000e54:	4548      	cmp	r0, r9
 8000e56:	d2a9      	bcs.n	8000dac <__udivmoddi4+0x1f0>
 8000e58:	ebb9 0802 	subs.w	r8, r9, r2
 8000e5c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e60:	3b01      	subs	r3, #1
 8000e62:	e7a3      	b.n	8000dac <__udivmoddi4+0x1f0>
 8000e64:	4645      	mov	r5, r8
 8000e66:	e7ea      	b.n	8000e3e <__udivmoddi4+0x282>
 8000e68:	462b      	mov	r3, r5
 8000e6a:	e794      	b.n	8000d96 <__udivmoddi4+0x1da>
 8000e6c:	4640      	mov	r0, r8
 8000e6e:	e7d1      	b.n	8000e14 <__udivmoddi4+0x258>
 8000e70:	46d0      	mov	r8, sl
 8000e72:	e77b      	b.n	8000d6c <__udivmoddi4+0x1b0>
 8000e74:	3d02      	subs	r5, #2
 8000e76:	4462      	add	r2, ip
 8000e78:	e732      	b.n	8000ce0 <__udivmoddi4+0x124>
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	e70a      	b.n	8000c94 <__udivmoddi4+0xd8>
 8000e7e:	4464      	add	r4, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e742      	b.n	8000d0a <__udivmoddi4+0x14e>

08000e84 <__aeabi_idiv0>:
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop

08000e88 <captDistIR_Init>:
//=================================================================
//			ADC INIT FOR IR SENSOR SHARP GP2D12
//=================================================================

void  captDistIR_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
	adcHandle.Instance		= ADC1;
 8000e8c:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000e8e:	4a16      	ldr	r2, [pc, #88]	; (8000ee8 <captDistIR_Init+0x60>)
 8000e90:	601a      	str	r2, [r3, #0]

	adcHandle.Init.ClockPrescaler = ADC_CLOCKPRESCALER_PCLK_DIV2;
 8000e92:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	605a      	str	r2, [r3, #4]
	adcHandle.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	60da      	str	r2, [r3, #12]
	adcHandle.Init.Resolution = ADC_RESOLUTION12b;
 8000e9e:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
	// Don't do continuous conversions - do them on demand
	adcHandle.Init.ContinuousConvMode    = DISABLE;  // Continuous mode disabled to have only 1 conversion at each conversion trig
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	619a      	str	r2, [r3, #24]
	// Disable the scan conversion so we do one at a time */
	adcHandle.Init.ScanConvMode = DISABLE;
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	611a      	str	r2, [r3, #16]
	//Say how many channels would be used by the sequencer
	adcHandle.Init.NbrOfConversion = 2;
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	621a      	str	r2, [r3, #32]
	adcHandle.Init.DiscontinuousConvMode = DISABLE;  // Parameter discarded because sequencer is disabled
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	625a      	str	r2, [r3, #36]	; 0x24
	adcHandle.Init.NbrOfDiscConversion = 2;
 8000ebc:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	629a      	str	r2, [r3, #40]	; 0x28
	adcHandle.Init.ExternalTrigConvEdge =  ADC_EXTERNALTRIGCONVEDGE_NONE ;
 8000ec2:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	62da      	str	r2, [r3, #44]	; 0x2c
	//Start conversion by software, not an external trigger
	adcHandle.Init.ExternalTrigConv = 0;
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	631a      	str	r2, [r3, #48]	; 0x30
	adcHandle.Init.DMAContinuousRequests = DISABLE;
 8000ece:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	61da      	str	r2, [r3, #28]
	adcHandle.Init.EOCSelection = DISABLE;
 8000ed4:	4b03      	ldr	r3, [pc, #12]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	615a      	str	r2, [r3, #20]

	HAL_ADC_Init(&adcHandle);
 8000eda:	4802      	ldr	r0, [pc, #8]	; (8000ee4 <captDistIR_Init+0x5c>)
 8000edc:	f002 fe54 	bl	8003b88 <HAL_ADC_Init>
}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	200000f4 	.word	0x200000f4
 8000ee8:	40012000 	.word	0x40012000

08000eec <captDistIR_Get>:
//=================================================================
//			IR GET (POLL METHOD)
//=================================================================

int  captDistIR_Get(int* tab)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	sConfig.Channel      = ADC_CHANNEL_4;
 8000ef4:	4b1d      	ldr	r3, [pc, #116]	; (8000f6c <captDistIR_Get+0x80>)
 8000ef6:	2204      	movs	r2, #4
 8000ef8:	601a      	str	r2, [r3, #0]
	sConfig.Rank         = 1;
 8000efa:	4b1c      	ldr	r3, [pc, #112]	; (8000f6c <captDistIR_Get+0x80>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000f00:	4b1a      	ldr	r3, [pc, #104]	; (8000f6c <captDistIR_Get+0x80>)
 8000f02:	2203      	movs	r2, #3
 8000f04:	609a      	str	r2, [r3, #8]
	HAL_ADC_ConfigChannel(&adcHandle, &sConfig);
 8000f06:	4919      	ldr	r1, [pc, #100]	; (8000f6c <captDistIR_Get+0x80>)
 8000f08:	4819      	ldr	r0, [pc, #100]	; (8000f70 <captDistIR_Get+0x84>)
 8000f0a:	f002 ff29 	bl	8003d60 <HAL_ADC_ConfigChannel>

	HAL_ADC_Start(&adcHandle);					//Start the conversion
 8000f0e:	4818      	ldr	r0, [pc, #96]	; (8000f70 <captDistIR_Get+0x84>)
 8000f10:	f002 fe6e 	bl	8003bf0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&adcHandle,10);	//Processing the conversion
 8000f14:	210a      	movs	r1, #10
 8000f16:	4816      	ldr	r0, [pc, #88]	; (8000f70 <captDistIR_Get+0x84>)
 8000f18:	f002 fed6 	bl	8003cc8 <HAL_ADC_PollForConversion>
	tab[0]=HAL_ADC_GetValue(&adcHandle); 		//Return the converted data
 8000f1c:	4814      	ldr	r0, [pc, #80]	; (8000f70 <captDistIR_Get+0x84>)
 8000f1e:	f002 ff12 	bl	8003d46 <HAL_ADC_GetValue>
 8000f22:	4603      	mov	r3, r0
 8000f24:	461a      	mov	r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	601a      	str	r2, [r3, #0]

	sConfig.Channel      = ADC_CHANNEL_8;
 8000f2a:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <captDistIR_Get+0x80>)
 8000f2c:	2208      	movs	r2, #8
 8000f2e:	601a      	str	r2, [r3, #0]
	sConfig.Rank         = 1;
 8000f30:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <captDistIR_Get+0x80>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000f36:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <captDistIR_Get+0x80>)
 8000f38:	2203      	movs	r2, #3
 8000f3a:	609a      	str	r2, [r3, #8]
	HAL_ADC_ConfigChannel(&adcHandle, &sConfig);
 8000f3c:	490b      	ldr	r1, [pc, #44]	; (8000f6c <captDistIR_Get+0x80>)
 8000f3e:	480c      	ldr	r0, [pc, #48]	; (8000f70 <captDistIR_Get+0x84>)
 8000f40:	f002 ff0e 	bl	8003d60 <HAL_ADC_ConfigChannel>

	HAL_ADC_Start(&adcHandle);						//Start the conversion
 8000f44:	480a      	ldr	r0, [pc, #40]	; (8000f70 <captDistIR_Get+0x84>)
 8000f46:	f002 fe53 	bl	8003bf0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&adcHandle,10);		//Processing the conversion
 8000f4a:	210a      	movs	r1, #10
 8000f4c:	4808      	ldr	r0, [pc, #32]	; (8000f70 <captDistIR_Get+0x84>)
 8000f4e:	f002 febb 	bl	8003cc8 <HAL_ADC_PollForConversion>
	tab[1]=HAL_ADC_GetValue(&adcHandle); 			//Return the converted data
 8000f52:	4807      	ldr	r0, [pc, #28]	; (8000f70 <captDistIR_Get+0x84>)
 8000f54:	f002 fef7 	bl	8003d46 <HAL_ADC_GetValue>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	3304      	adds	r3, #4
 8000f5e:	601a      	str	r2, [r3, #0]

	return 0;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000138 	.word	0x20000138
 8000f70:	200000f4 	.word	0x200000f4

08000f74 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	; 0x28
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000f80:	f009 ff84 	bl	800ae8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000f84:	4b58      	ldr	r3, [pc, #352]	; (80010e8 <pvPortMallocMicroROS+0x174>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d101      	bne.n	8000f90 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000f8c:	f000 f98c 	bl	80012a8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000f90:	4b56      	ldr	r3, [pc, #344]	; (80010ec <pvPortMallocMicroROS+0x178>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4013      	ands	r3, r2
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	f040 808e 	bne.w	80010ba <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d01d      	beq.n	8000fe0 <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8000fa4:	2208      	movs	r2, #8
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4413      	add	r3, r2
 8000faa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d014      	beq.n	8000fe0 <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f023 0307 	bic.w	r3, r3, #7
 8000fbc:	3308      	adds	r3, #8
 8000fbe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d00a      	beq.n	8000fe0 <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fce:	f383 8811 	msr	BASEPRI, r3
 8000fd2:	f3bf 8f6f 	isb	sy
 8000fd6:	f3bf 8f4f 	dsb	sy
 8000fda:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000fdc:	bf00      	nop
 8000fde:	e7fe      	b.n	8000fde <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d069      	beq.n	80010ba <pvPortMallocMicroROS+0x146>
 8000fe6:	4b42      	ldr	r3, [pc, #264]	; (80010f0 <pvPortMallocMicroROS+0x17c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d864      	bhi.n	80010ba <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000ff0:	4b40      	ldr	r3, [pc, #256]	; (80010f4 <pvPortMallocMicroROS+0x180>)
 8000ff2:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000ff4:	4b3f      	ldr	r3, [pc, #252]	; (80010f4 <pvPortMallocMicroROS+0x180>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000ffa:	e004      	b.n	8001006 <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 8000ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffe:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	429a      	cmp	r2, r3
 800100e:	d903      	bls.n	8001018 <pvPortMallocMicroROS+0xa4>
 8001010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d1f1      	bne.n	8000ffc <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001018:	4b33      	ldr	r3, [pc, #204]	; (80010e8 <pvPortMallocMicroROS+0x174>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800101e:	429a      	cmp	r2, r3
 8001020:	d04b      	beq.n	80010ba <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001022:	6a3b      	ldr	r3, [r7, #32]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2208      	movs	r2, #8
 8001028:	4413      	add	r3, r2
 800102a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800102c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	6a3b      	ldr	r3, [r7, #32]
 8001032:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001036:	685a      	ldr	r2, [r3, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	1ad2      	subs	r2, r2, r3
 800103c:	2308      	movs	r3, #8
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	429a      	cmp	r2, r3
 8001042:	d91f      	bls.n	8001084 <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4413      	add	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	2b00      	cmp	r3, #0
 8001054:	d00a      	beq.n	800106c <pvPortMallocMicroROS+0xf8>
	__asm volatile
 8001056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800105a:	f383 8811 	msr	BASEPRI, r3
 800105e:	f3bf 8f6f 	isb	sy
 8001062:	f3bf 8f4f 	dsb	sy
 8001066:	613b      	str	r3, [r7, #16]
}
 8001068:	bf00      	nop
 800106a:	e7fe      	b.n	800106a <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800106c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106e:	685a      	ldr	r2, [r3, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	1ad2      	subs	r2, r2, r3
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800107e:	69b8      	ldr	r0, [r7, #24]
 8001080:	f000 f974 	bl	800136c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001084:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <pvPortMallocMicroROS+0x17c>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	4a18      	ldr	r2, [pc, #96]	; (80010f0 <pvPortMallocMicroROS+0x17c>)
 8001090:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001092:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <pvPortMallocMicroROS+0x17c>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <pvPortMallocMicroROS+0x184>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	429a      	cmp	r2, r3
 800109c:	d203      	bcs.n	80010a6 <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800109e:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <pvPortMallocMicroROS+0x17c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a15      	ldr	r2, [pc, #84]	; (80010f8 <pvPortMallocMicroROS+0x184>)
 80010a4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80010a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a8:	685a      	ldr	r2, [r3, #4]
 80010aa:	4b10      	ldr	r3, [pc, #64]	; (80010ec <pvPortMallocMicroROS+0x178>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	431a      	orrs	r2, r3
 80010b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80010b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80010ba:	f009 fef5 	bl	800aea8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	f003 0307 	and.w	r3, r3, #7
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d00a      	beq.n	80010de <pvPortMallocMicroROS+0x16a>
	__asm volatile
 80010c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010cc:	f383 8811 	msr	BASEPRI, r3
 80010d0:	f3bf 8f6f 	isb	sy
 80010d4:	f3bf 8f4f 	dsb	sy
 80010d8:	60fb      	str	r3, [r7, #12]
}
 80010da:	bf00      	nop
 80010dc:	e7fe      	b.n	80010dc <pvPortMallocMicroROS+0x168>
	return pvReturn;
 80010de:	69fb      	ldr	r3, [r7, #28]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3728      	adds	r7, #40	; 0x28
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20004150 	.word	0x20004150
 80010ec:	2000415c 	.word	0x2000415c
 80010f0:	20004154 	.word	0x20004154
 80010f4:	20004148 	.word	0x20004148
 80010f8:	20004158 	.word	0x20004158

080010fc <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d048      	beq.n	80011a0 <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800110e:	2308      	movs	r3, #8
 8001110:	425b      	negs	r3, r3
 8001112:	697a      	ldr	r2, [r7, #20]
 8001114:	4413      	add	r3, r2
 8001116:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	685a      	ldr	r2, [r3, #4]
 8001120:	4b21      	ldr	r3, [pc, #132]	; (80011a8 <vPortFreeMicroROS+0xac>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4013      	ands	r3, r2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d10a      	bne.n	8001140 <vPortFreeMicroROS+0x44>
	__asm volatile
 800112a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800112e:	f383 8811 	msr	BASEPRI, r3
 8001132:	f3bf 8f6f 	isb	sy
 8001136:	f3bf 8f4f 	dsb	sy
 800113a:	60fb      	str	r3, [r7, #12]
}
 800113c:	bf00      	nop
 800113e:	e7fe      	b.n	800113e <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d00a      	beq.n	800115e <vPortFreeMicroROS+0x62>
	__asm volatile
 8001148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800114c:	f383 8811 	msr	BASEPRI, r3
 8001150:	f3bf 8f6f 	isb	sy
 8001154:	f3bf 8f4f 	dsb	sy
 8001158:	60bb      	str	r3, [r7, #8]
}
 800115a:	bf00      	nop
 800115c:	e7fe      	b.n	800115c <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	685a      	ldr	r2, [r3, #4]
 8001162:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <vPortFreeMicroROS+0xac>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4013      	ands	r3, r2
 8001168:	2b00      	cmp	r3, #0
 800116a:	d019      	beq.n	80011a0 <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d115      	bne.n	80011a0 <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	685a      	ldr	r2, [r3, #4]
 8001178:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <vPortFreeMicroROS+0xac>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	43db      	mvns	r3, r3
 800117e:	401a      	ands	r2, r3
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001184:	f009 fe82 	bl	800ae8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	685a      	ldr	r2, [r3, #4]
 800118c:	4b07      	ldr	r3, [pc, #28]	; (80011ac <vPortFreeMicroROS+0xb0>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4413      	add	r3, r2
 8001192:	4a06      	ldr	r2, [pc, #24]	; (80011ac <vPortFreeMicroROS+0xb0>)
 8001194:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001196:	6938      	ldr	r0, [r7, #16]
 8001198:	f000 f8e8 	bl	800136c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800119c:	f009 fe84 	bl	800aea8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80011a0:	bf00      	nop
 80011a2:	3718      	adds	r7, #24
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	2000415c 	.word	0x2000415c
 80011ac:	20004154 	.word	0x20004154

080011b0 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80011b0:	b480      	push	{r7}
 80011b2:	b087      	sub	sp, #28
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80011bc:	2308      	movs	r3, #8
 80011be:	425b      	negs	r3, r3
 80011c0:	697a      	ldr	r2, [r7, #20]
 80011c2:	4413      	add	r3, r2
 80011c4:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	685a      	ldr	r2, [r3, #4]
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <getBlockSize+0x38>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	43db      	mvns	r3, r3
 80011d4:	4013      	ands	r3, r2
 80011d6:	60fb      	str	r3, [r7, #12]

	return count;
 80011d8:	68fb      	ldr	r3, [r7, #12]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	371c      	adds	r7, #28
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	2000415c 	.word	0x2000415c

080011ec <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b088      	sub	sp, #32
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80011f6:	f009 fe49 	bl	800ae8c <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80011fa:	6838      	ldr	r0, [r7, #0]
 80011fc:	f7ff feba 	bl	8000f74 <pvPortMallocMicroROS>
 8001200:	6138      	str	r0, [r7, #16]

	uint8_t *puc = ( uint8_t * ) pv;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	60fb      	str	r3, [r7, #12]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001206:	2308      	movs	r3, #8
 8001208:	425b      	negs	r3, r3
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	4413      	add	r3, r2
 800120e:	60fb      	str	r3, [r7, #12]
	pxLink = ( void * ) puc;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	60bb      	str	r3, [r7, #8]


	char *in_src = (char*)pv;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	61fb      	str	r3, [r7, #28]
  	char *in_dest = (char*)newmem;
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	61bb      	str	r3, [r7, #24]
	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	685a      	ldr	r2, [r3, #4]
 8001220:	4b0e      	ldr	r3, [pc, #56]	; (800125c <pvPortReallocMicroROS+0x70>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	43db      	mvns	r3, r3
 8001226:	4013      	ands	r3, r2
 8001228:	617b      	str	r3, [r7, #20]

  	while(count--)
 800122a:	e007      	b.n	800123c <pvPortReallocMicroROS+0x50>
    	*in_dest++ = *in_src++;
 800122c:	69fa      	ldr	r2, [r7, #28]
 800122e:	1c53      	adds	r3, r2, #1
 8001230:	61fb      	str	r3, [r7, #28]
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	1c59      	adds	r1, r3, #1
 8001236:	61b9      	str	r1, [r7, #24]
 8001238:	7812      	ldrb	r2, [r2, #0]
 800123a:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	1e5a      	subs	r2, r3, #1
 8001240:	617a      	str	r2, [r7, #20]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d1f2      	bne.n	800122c <pvPortReallocMicroROS+0x40>

	vPortFreeMicroROS(pv);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff ff58 	bl	80010fc <vPortFreeMicroROS>

	( void ) xTaskResumeAll();
 800124c:	f009 fe2c 	bl	800aea8 <xTaskResumeAll>

	return newmem;
 8001250:	693b      	ldr	r3, [r7, #16]
}
 8001252:	4618      	mov	r0, r3
 8001254:	3720      	adds	r7, #32
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	2000415c 	.word	0x2000415c

08001260 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800126a:	f009 fe0f 	bl	800ae8c <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	fb02 f303 	mul.w	r3, r2, r3
 8001276:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001278:	6978      	ldr	r0, [r7, #20]
 800127a:	f7ff fe7b 	bl	8000f74 <pvPortMallocMicroROS>
 800127e:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	613b      	str	r3, [r7, #16]

  	while(count--)
 8001284:	e004      	b.n	8001290 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	1c5a      	adds	r2, r3, #1
 800128a:	613a      	str	r2, [r7, #16]
 800128c:	2200      	movs	r2, #0
 800128e:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	1e5a      	subs	r2, r3, #1
 8001294:	617a      	str	r2, [r7, #20]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f5      	bne.n	8001286 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 800129a:	f009 fe05 	bl	800aea8 <xTaskResumeAll>
  	return mem;
 800129e:	68fb      	ldr	r3, [r7, #12]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3718      	adds	r7, #24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80012ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012b2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80012b4:	4b27      	ldr	r3, [pc, #156]	; (8001354 <prvHeapInit+0xac>)
 80012b6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d00c      	beq.n	80012dc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	3307      	adds	r3, #7
 80012c6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f023 0307 	bic.w	r3, r3, #7
 80012ce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80012d0:	68ba      	ldr	r2, [r7, #8]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	4a1f      	ldr	r2, [pc, #124]	; (8001354 <prvHeapInit+0xac>)
 80012d8:	4413      	add	r3, r2
 80012da:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80012e0:	4a1d      	ldr	r2, [pc, #116]	; (8001358 <prvHeapInit+0xb0>)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80012e6:	4b1c      	ldr	r3, [pc, #112]	; (8001358 <prvHeapInit+0xb0>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	68ba      	ldr	r2, [r7, #8]
 80012f0:	4413      	add	r3, r2
 80012f2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80012f4:	2208      	movs	r2, #8
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	1a9b      	subs	r3, r3, r2
 80012fa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f023 0307 	bic.w	r3, r3, #7
 8001302:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	4a15      	ldr	r2, [pc, #84]	; (800135c <prvHeapInit+0xb4>)
 8001308:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800130a:	4b14      	ldr	r3, [pc, #80]	; (800135c <prvHeapInit+0xb4>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2200      	movs	r2, #0
 8001310:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001312:	4b12      	ldr	r3, [pc, #72]	; (800135c <prvHeapInit+0xb4>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	68fa      	ldr	r2, [r7, #12]
 8001322:	1ad2      	subs	r2, r2, r3
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <prvHeapInit+0xb4>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	4a0a      	ldr	r2, [pc, #40]	; (8001360 <prvHeapInit+0xb8>)
 8001336:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	4a09      	ldr	r2, [pc, #36]	; (8001364 <prvHeapInit+0xbc>)
 800133e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001340:	4b09      	ldr	r3, [pc, #36]	; (8001368 <prvHeapInit+0xc0>)
 8001342:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001346:	601a      	str	r2, [r3, #0]
}
 8001348:	bf00      	nop
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	20000148 	.word	0x20000148
 8001358:	20004148 	.word	0x20004148
 800135c:	20004150 	.word	0x20004150
 8001360:	20004158 	.word	0x20004158
 8001364:	20004154 	.word	0x20004154
 8001368:	2000415c 	.word	0x2000415c

0800136c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001374:	4b28      	ldr	r3, [pc, #160]	; (8001418 <prvInsertBlockIntoFreeList+0xac>)
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	e002      	b.n	8001380 <prvInsertBlockIntoFreeList+0x14>
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	429a      	cmp	r2, r3
 8001388:	d8f7      	bhi.n	800137a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	4413      	add	r3, r2
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	429a      	cmp	r2, r3
 800139a:	d108      	bne.n	80013ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	685a      	ldr	r2, [r3, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	441a      	add	r2, r3
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	68ba      	ldr	r2, [r7, #8]
 80013b8:	441a      	add	r2, r3
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d118      	bne.n	80013f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	4b15      	ldr	r3, [pc, #84]	; (800141c <prvInsertBlockIntoFreeList+0xb0>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d00d      	beq.n	80013ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685a      	ldr	r2, [r3, #4]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	441a      	add	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	e008      	b.n	80013fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80013ea:	4b0c      	ldr	r3, [pc, #48]	; (800141c <prvInsertBlockIntoFreeList+0xb0>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	e003      	b.n	80013fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80013fc:	68fa      	ldr	r2, [r7, #12]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	429a      	cmp	r2, r3
 8001402:	d002      	beq.n	800140a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
 800140a:	bf00      	nop
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	20004148 	.word	0x20004148
 800141c:	20004150 	.word	0x20004150

08001420 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800142e:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001430:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001434:	4904      	ldr	r1, [pc, #16]	; (8001448 <cubemx_transport_open+0x28>)
 8001436:	68f8      	ldr	r0, [r7, #12]
 8001438:	f007 f8c0 	bl	80085bc <HAL_UART_Receive_DMA>
    return true;
 800143c:	2301      	movs	r3, #1
}
 800143e:	4618      	mov	r0, r3
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20004160 	.word	0x20004160

0800144c <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800145a:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 800145c:	68f8      	ldr	r0, [r7, #12]
 800145e:	f007 f8dd 	bl	800861c <HAL_UART_DMAStop>
    return true;
 8001462:	2301      	movs	r3, #1
}
 8001464:	4618      	mov	r0, r3
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
 8001478:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001480:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b20      	cmp	r3, #32
 800148c:	d11c      	bne.n	80014c8 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	b29b      	uxth	r3, r3
 8001492:	461a      	mov	r2, r3
 8001494:	68b9      	ldr	r1, [r7, #8]
 8001496:	6978      	ldr	r0, [r7, #20]
 8001498:	f007 f812 	bl	80084c0 <HAL_UART_Transmit_DMA>
 800149c:	4603      	mov	r3, r0
 800149e:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80014a0:	e002      	b.n	80014a8 <cubemx_transport_write+0x3c>
            osDelay(1);
 80014a2:	2001      	movs	r0, #1
 80014a4:	f008 fb2a 	bl	8009afc <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80014a8:	7cfb      	ldrb	r3, [r7, #19]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d105      	bne.n	80014ba <cubemx_transport_write+0x4e>
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b20      	cmp	r3, #32
 80014b8:	d1f3      	bne.n	80014a2 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 80014ba:	7cfb      	ldrb	r3, [r7, #19]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d101      	bne.n	80014c4 <cubemx_transport_write+0x58>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	e002      	b.n	80014ca <cubemx_transport_write+0x5e>
 80014c4:	2300      	movs	r3, #0
 80014c6:	e000      	b.n	80014ca <cubemx_transport_write+0x5e>
    }else{
        return 0;
 80014c8:	2300      	movs	r3, #0
    }
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b088      	sub	sp, #32
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
 80014e0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80014e8:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014ee:	b672      	cpsid	i
}
 80014f0:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80014fe:	4a1c      	ldr	r2, [pc, #112]	; (8001570 <cubemx_transport_read+0x9c>)
 8001500:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001502:	b662      	cpsie	i
}
 8001504:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3301      	adds	r3, #1
 800150a:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 800150c:	2001      	movs	r0, #1
 800150e:	f008 faf5 	bl	8009afc <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001512:	4b18      	ldr	r3, [pc, #96]	; (8001574 <cubemx_transport_read+0xa0>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	4b16      	ldr	r3, [pc, #88]	; (8001570 <cubemx_transport_read+0x9c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	429a      	cmp	r2, r3
 800151c:	d103      	bne.n	8001526 <cubemx_transport_read+0x52>
 800151e:	69fa      	ldr	r2, [r7, #28]
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	429a      	cmp	r2, r3
 8001524:	dbe3      	blt.n	80014ee <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 800152a:	e011      	b.n	8001550 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 800152c:	4b11      	ldr	r3, [pc, #68]	; (8001574 <cubemx_transport_read+0xa0>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	68b9      	ldr	r1, [r7, #8]
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	440b      	add	r3, r1
 8001536:	4910      	ldr	r1, [pc, #64]	; (8001578 <cubemx_transport_read+0xa4>)
 8001538:	5c8a      	ldrb	r2, [r1, r2]
 800153a:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 800153c:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <cubemx_transport_read+0xa0>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	3301      	adds	r3, #1
 8001542:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001546:	4a0b      	ldr	r2, [pc, #44]	; (8001574 <cubemx_transport_read+0xa0>)
 8001548:	6013      	str	r3, [r2, #0]
        wrote++;
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	3301      	adds	r3, #1
 800154e:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001550:	4b08      	ldr	r3, [pc, #32]	; (8001574 <cubemx_transport_read+0xa0>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <cubemx_transport_read+0x9c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	429a      	cmp	r2, r3
 800155a:	d003      	beq.n	8001564 <cubemx_transport_read+0x90>
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	429a      	cmp	r2, r3
 8001562:	d3e3      	bcc.n	800152c <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001564:	69bb      	ldr	r3, [r7, #24]
}
 8001566:	4618      	mov	r0, r3
 8001568:	3720      	adds	r7, #32
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20004964 	.word	0x20004964
 8001574:	20004960 	.word	0x20004960
 8001578:	20004160 	.word	0x20004160

0800157c <MX_GPIO_Init>:
#include "main.h"
#include "drv_gpio.h"

void MX_GPIO_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08a      	sub	sp, #40	; 0x28
 8001580:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
 8001590:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
 8001596:	4b2d      	ldr	r3, [pc, #180]	; (800164c <MX_GPIO_Init+0xd0>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a2c      	ldr	r2, [pc, #176]	; (800164c <MX_GPIO_Init+0xd0>)
 800159c:	f043 0304 	orr.w	r3, r3, #4
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b2a      	ldr	r3, [pc, #168]	; (800164c <MX_GPIO_Init+0xd0>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0304 	and.w	r3, r3, #4
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	4b26      	ldr	r3, [pc, #152]	; (800164c <MX_GPIO_Init+0xd0>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a25      	ldr	r2, [pc, #148]	; (800164c <MX_GPIO_Init+0xd0>)
 80015b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b23      	ldr	r3, [pc, #140]	; (800164c <MX_GPIO_Init+0xd0>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	4b1f      	ldr	r3, [pc, #124]	; (800164c <MX_GPIO_Init+0xd0>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4a1e      	ldr	r2, [pc, #120]	; (800164c <MX_GPIO_Init+0xd0>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4b1c      	ldr	r3, [pc, #112]	; (800164c <MX_GPIO_Init+0xd0>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	607b      	str	r3, [r7, #4]
 80015ea:	4b18      	ldr	r3, [pc, #96]	; (800164c <MX_GPIO_Init+0xd0>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a17      	ldr	r2, [pc, #92]	; (800164c <MX_GPIO_Init+0xd0>)
 80015f0:	f043 0302 	orr.w	r3, r3, #2
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b15      	ldr	r3, [pc, #84]	; (800164c <MX_GPIO_Init+0xd0>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001602:	2200      	movs	r2, #0
 8001604:	2120      	movs	r1, #32
 8001606:	4812      	ldr	r0, [pc, #72]	; (8001650 <MX_GPIO_Init+0xd4>)
 8001608:	f003 fc04 	bl	8004e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800160c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001612:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001616:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	4619      	mov	r1, r3
 8001622:	480c      	ldr	r0, [pc, #48]	; (8001654 <MX_GPIO_Init+0xd8>)
 8001624:	f003 fa72 	bl	8004b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001628:	2320      	movs	r3, #32
 800162a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162c:	2301      	movs	r3, #1
 800162e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001634:	2300      	movs	r3, #0
 8001636:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	4619      	mov	r1, r3
 800163e:	4804      	ldr	r0, [pc, #16]	; (8001650 <MX_GPIO_Init+0xd4>)
 8001640:	f003 fa64 	bl	8004b0c <HAL_GPIO_Init>

}
 8001644:	bf00      	nop
 8001646:	3728      	adds	r7, #40	; 0x28
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40023800 	.word	0x40023800
 8001650:	40020000 	.word	0x40020000
 8001654:	40020800 	.word	0x40020800

08001658 <HAL_GPIO_EXTI_Callback>:

extern void quadEncoder_CallbackIndexL(void);
extern void quadEncoder_CallbackIndexR(void);

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 8001662:	88fb      	ldrh	r3, [r7, #6]
 8001664:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001668:	d017      	beq.n	800169a <HAL_GPIO_EXTI_Callback+0x42>
 800166a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800166e:	dc16      	bgt.n	800169e <HAL_GPIO_EXTI_Callback+0x46>
 8001670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001674:	d00e      	beq.n	8001694 <HAL_GPIO_EXTI_Callback+0x3c>
 8001676:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800167a:	dc10      	bgt.n	800169e <HAL_GPIO_EXTI_Callback+0x46>
 800167c:	2b08      	cmp	r3, #8
 800167e:	d010      	beq.n	80016a2 <HAL_GPIO_EXTI_Callback+0x4a>
 8001680:	2b08      	cmp	r3, #8
 8001682:	dc0c      	bgt.n	800169e <HAL_GPIO_EXTI_Callback+0x46>
 8001684:	2b01      	cmp	r3, #1
 8001686:	d002      	beq.n	800168e <HAL_GPIO_EXTI_Callback+0x36>
 8001688:	2b02      	cmp	r3, #2
 800168a:	d00c      	beq.n	80016a6 <HAL_GPIO_EXTI_Callback+0x4e>
					break;

	case GPIO_PIN_13 :		// USER BUTTON
					break;

	default : 		break;
 800168c:	e007      	b.n	800169e <HAL_GPIO_EXTI_Callback+0x46>
		quadEncoder_CallbackIndexR();
 800168e:	f001 fbf7 	bl	8002e80 <quadEncoder_CallbackIndexR>
					break;
 8001692:	e009      	b.n	80016a8 <HAL_GPIO_EXTI_Callback+0x50>
		quadEncoder_CallbackIndexL();
 8001694:	f001 fbce 	bl	8002e34 <quadEncoder_CallbackIndexL>
					break;
 8001698:	e006      	b.n	80016a8 <HAL_GPIO_EXTI_Callback+0x50>
					break;
 800169a:	bf00      	nop
 800169c:	e004      	b.n	80016a8 <HAL_GPIO_EXTI_Callback+0x50>
	default : 		break;
 800169e:	bf00      	nop
 80016a0:	e002      	b.n	80016a8 <HAL_GPIO_EXTI_Callback+0x50>
					break;
 80016a2:	bf00      	nop
 80016a4:	e000      	b.n	80016a8 <HAL_GPIO_EXTI_Callback+0x50>
					break;
 80016a6:	bf00      	nop


	}
}
 80016a8:	bf00      	nop
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <MX_I2C1_Init>:


I2C_HandleTypeDef hi2c1;

void MX_I2C1_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <MX_I2C1_Init+0x50>)
 80016b6:	4a13      	ldr	r2, [pc, #76]	; (8001704 <MX_I2C1_Init+0x54>)
 80016b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016ba:	4b11      	ldr	r3, [pc, #68]	; (8001700 <MX_I2C1_Init+0x50>)
 80016bc:	4a12      	ldr	r2, [pc, #72]	; (8001708 <MX_I2C1_Init+0x58>)
 80016be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016c0:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <MX_I2C1_Init+0x50>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016c6:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <MX_I2C1_Init+0x50>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016cc:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <MX_I2C1_Init+0x50>)
 80016ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016d4:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <MX_I2C1_Init+0x50>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <MX_I2C1_Init+0x50>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016e0:	4b07      	ldr	r3, [pc, #28]	; (8001700 <MX_I2C1_Init+0x50>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <MX_I2C1_Init+0x50>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016ec:	4804      	ldr	r0, [pc, #16]	; (8001700 <MX_I2C1_Init+0x50>)
 80016ee:	f003 fbc3 	bl	8004e78 <HAL_I2C_Init>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016f8:	f001 f818 	bl	800272c <Error_Handler>
  }

}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20004968 	.word	0x20004968
 8001704:	40005400 	.word	0x40005400
 8001708:	000186a0 	.word	0x000186a0

0800170c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;
DMA_HandleTypeDef hdma_usart2_tx;


void MX_USART1_UART_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8001710:	4b11      	ldr	r3, [pc, #68]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001712:	4a12      	ldr	r2, [pc, #72]	; (800175c <MX_USART1_UART_Init+0x50>)
 8001714:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001716:	4b10      	ldr	r3, [pc, #64]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001718:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800171c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001726:	2200      	movs	r2, #0
 8001728:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800172a:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 800172c:	2200      	movs	r2, #0
 800172e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001730:	4b09      	ldr	r3, [pc, #36]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001732:	220c      	movs	r2, #12
 8001734:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001736:	4b08      	ldr	r3, [pc, #32]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001738:	2200      	movs	r2, #0
 800173a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 800173e:	2200      	movs	r2, #0
 8001740:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001742:	4805      	ldr	r0, [pc, #20]	; (8001758 <MX_USART1_UART_Init+0x4c>)
 8001744:	f006 fd3b 	bl	80081be <HAL_UART_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800174e:	f000 ffed 	bl	800272c <Error_Handler>
  }
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	200049bc 	.word	0x200049bc
 800175c:	40011000 	.word	0x40011000

08001760 <MX_USART2_UART_Init>:


void MX_USART2_UART_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8001764:	4b11      	ldr	r3, [pc, #68]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001766:	4a12      	ldr	r2, [pc, #72]	; (80017b0 <MX_USART2_UART_Init+0x50>)
 8001768:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 800176c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001770:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001772:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001774:	2200      	movs	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 800177a:	2200      	movs	r2, #0
 800177c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800177e:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001780:	2200      	movs	r2, #0
 8001782:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001786:	220c      	movs	r2, #12
 8001788:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800178a:	4b08      	ldr	r3, [pc, #32]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001792:	2200      	movs	r2, #0
 8001794:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001796:	4805      	ldr	r0, [pc, #20]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001798:	f006 fd11 	bl	80081be <HAL_UART_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017a2:	f000 ffc3 	bl	800272c <Error_Handler>
  }
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20004a00 	.word	0x20004a00
 80017b0:	40004400 	.word	0x40004400

080017b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	607b      	str	r3, [r7, #4]
 80017be:	4b1f      	ldr	r3, [pc, #124]	; (800183c <MX_DMA_Init+0x88>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	4a1e      	ldr	r2, [pc, #120]	; (800183c <MX_DMA_Init+0x88>)
 80017c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017c8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ca:	4b1c      	ldr	r3, [pc, #112]	; (800183c <MX_DMA_Init+0x88>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017d2:	607b      	str	r3, [r7, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	603b      	str	r3, [r7, #0]
 80017da:	4b18      	ldr	r3, [pc, #96]	; (800183c <MX_DMA_Init+0x88>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	4a17      	ldr	r2, [pc, #92]	; (800183c <MX_DMA_Init+0x88>)
 80017e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017e4:	6313      	str	r3, [r2, #48]	; 0x30
 80017e6:	4b15      	ldr	r3, [pc, #84]	; (800183c <MX_DMA_Init+0x88>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ee:	603b      	str	r3, [r7, #0]
 80017f0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2105      	movs	r1, #5
 80017f6:	2010      	movs	r0, #16
 80017f8:	f002 fd4e 	bl	8004298 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80017fc:	2010      	movs	r0, #16
 80017fe:	f002 fd67 	bl	80042d0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001802:	2200      	movs	r2, #0
 8001804:	2105      	movs	r1, #5
 8001806:	2011      	movs	r0, #17
 8001808:	f002 fd46 	bl	8004298 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800180c:	2011      	movs	r0, #17
 800180e:	f002 fd5f 	bl	80042d0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001812:	2200      	movs	r2, #0
 8001814:	2105      	movs	r1, #5
 8001816:	203a      	movs	r0, #58	; 0x3a
 8001818:	f002 fd3e 	bl	8004298 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800181c:	203a      	movs	r0, #58	; 0x3a
 800181e:	f002 fd57 	bl	80042d0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8001822:	2200      	movs	r2, #0
 8001824:	2105      	movs	r1, #5
 8001826:	2046      	movs	r0, #70	; 0x46
 8001828:	f002 fd36 	bl	8004298 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800182c:	2046      	movs	r0, #70	; 0x46
 800182e:	f002 fd4f 	bl	80042d0 <HAL_NVIC_EnableIRQ>

}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40023800 	.word	0x40023800

08001840 <CHECKMRRET>:
void microros_deallocate(void * pointer, void * state);
void * microros_reallocate(void * pointer, size_t size, void * state);
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);


void CHECKMRRET(rcl_ret_t ret, char* msg){
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
	if (ret != RCL_RET_OK){ printf("Error : %d\r\nMsg : %s\r\n", (int)ret, msg); }
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d004      	beq.n	800185a <CHECKMRRET+0x1a>
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	4803      	ldr	r0, [pc, #12]	; (8001864 <CHECKMRRET+0x24>)
 8001856:	f016 fcbb 	bl	80181d0 <iprintf>
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	0801950c 	.word	0x0801950c

08001868 <SubscriberCallbackFunction>:

void SubscriberCallbackFunction(const void *msgin){
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
#if SYNCHRO_EX == EXTEST_MICROROS
	std_msgs__msg__String * msg = (std_msgs__msg__String * )msgin;
	printf("\r\nMessage recue : %s\r\n", msg->data->data);
#elif SYNCHRO_EX == EXFINAL
	std_msgs__msg__Int32 * msg = (std_msgs__msg__Int32 * )msgin;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	60fb      	str	r3, [r7, #12]
	printf("\r\nMessage recue : %ld\r\n", msg->data);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4619      	mov	r1, r3
 800187a:	4803      	ldr	r0, [pc, #12]	; (8001888 <SubscriberCallbackFunction+0x20>)
 800187c:	f016 fca8 	bl	80181d0 <iprintf>
#endif //SYNCHRO_EX
}
 8001880:	bf00      	nop
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	08019524 	.word	0x08019524

0800188c <microros_task>:



void microros_task(void *argument)
{
 800188c:	b5b0      	push	{r4, r5, r7, lr}
 800188e:	b0e6      	sub	sp, #408	; 0x198
 8001890:	af02      	add	r7, sp, #8
 8001892:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001896:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800189a:	6018      	str	r0, [r3, #0]
	rcl_allocator_t allocator;
	rcl_node_t node;
	rclc_executor_t executor;

	// micro-ROS configuration
	rmw_uros_set_custom_transport(
 800189c:	4bd5      	ldr	r3, [pc, #852]	; (8001bf4 <microros_task+0x368>)
 800189e:	9301      	str	r3, [sp, #4]
 80018a0:	4bd5      	ldr	r3, [pc, #852]	; (8001bf8 <microros_task+0x36c>)
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	4bd5      	ldr	r3, [pc, #852]	; (8001bfc <microros_task+0x370>)
 80018a6:	4ad6      	ldr	r2, [pc, #856]	; (8001c00 <microros_task+0x374>)
 80018a8:	49d6      	ldr	r1, [pc, #856]	; (8001c04 <microros_task+0x378>)
 80018aa:	2001      	movs	r0, #1
 80018ac:	f00c fa06 	bl	800dcbc <rmw_uros_set_custom_transport>
		cubemx_transport_open,
		cubemx_transport_close,
		cubemx_transport_write,
		cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80018b0:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80018b4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80018b8:	4618      	mov	r0, r3
 80018ba:	f00b ff69 	bl	800d790 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 80018be:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80018c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80018c6:	4ad0      	ldr	r2, [pc, #832]	; (8001c08 <microros_task+0x37c>)
 80018c8:	601a      	str	r2, [r3, #0]
	freeRTOS_allocator.deallocate = microros_deallocate;
 80018ca:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80018ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80018d2:	4ace      	ldr	r2, [pc, #824]	; (8001c0c <microros_task+0x380>)
 80018d4:	605a      	str	r2, [r3, #4]
	freeRTOS_allocator.reallocate = microros_reallocate;
 80018d6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80018da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80018de:	4acc      	ldr	r2, [pc, #816]	; (8001c10 <microros_task+0x384>)
 80018e0:	609a      	str	r2, [r3, #8]
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80018e2:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80018e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80018ea:	4aca      	ldr	r2, [pc, #808]	; (8001c14 <microros_task+0x388>)
 80018ec:	60da      	str	r2, [r3, #12]

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80018ee:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80018f2:	4618      	mov	r0, r3
 80018f4:	f00b ff5a 	bl	800d7ac <rcutils_set_default_allocator>
 80018f8:	4603      	mov	r3, r0
 80018fa:	f083 0301 	eor.w	r3, r3, #1
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <microros_task+0x80>
		printf("Error on default allocators (line %d)\r\n", __LINE__);
 8001904:	21ab      	movs	r1, #171	; 0xab
 8001906:	48c4      	ldr	r0, [pc, #784]	; (8001c18 <microros_task+0x38c>)
 8001908:	f016 fc62 	bl	80181d0 <iprintf>
	}

	allocator = rcl_get_default_allocator();
 800190c:	463b      	mov	r3, r7
 800190e:	4618      	mov	r0, r3
 8001910:	f00b ff6c 	bl	800d7ec <rcutils_get_default_allocator>
 8001914:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001918:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800191c:	f507 7492 	add.w	r4, r7, #292	; 0x124
 8001920:	461d      	mov	r5, r3
 8001922:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001924:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001926:	682b      	ldr	r3, [r5, #0]
 8001928:	6023      	str	r3, [r4, #0]
	//create init_options
	CHECKMRRET(rclc_support_init(&support, 0, NULL, &allocator), "error on init support");
 800192a:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800192e:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8001932:	2200      	movs	r2, #0
 8001934:	2100      	movs	r1, #0
 8001936:	f00b fe31 	bl	800d59c <rclc_support_init>
 800193a:	4603      	mov	r3, r0
 800193c:	49b7      	ldr	r1, [pc, #732]	; (8001c1c <microros_task+0x390>)
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff ff7e 	bl	8001840 <CHECKMRRET>
	// create node
	CHECKMRRET(rclc_node_init_default(&node, "STM32_node", "", &support), "error on init node");
 8001944:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001948:	f507 708e 	add.w	r0, r7, #284	; 0x11c
 800194c:	4ab4      	ldr	r2, [pc, #720]	; (8001c20 <microros_task+0x394>)
 800194e:	49b5      	ldr	r1, [pc, #724]	; (8001c24 <microros_task+0x398>)
 8001950:	f00b fe72 	bl	800d638 <rclc_node_init_default>
 8001954:	4603      	mov	r3, r0
 8001956:	49b4      	ldr	r1, [pc, #720]	; (8001c28 <microros_task+0x39c>)
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ff71 	bl	8001840 <CHECKMRRET>
	{
		ret = rclc_executor_spin_some(&executor, 100*1000*1000);
		vTaskDelay(SAMPLING_PERIOD_ms);
	}
#elif SYNCHRO_EX == EXFINAL
	MicroRosPubMsg MsgToPub = {'N', 0, 0};
 800195e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001962:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001966:	224e      	movs	r2, #78	; 0x4e
 8001968:	701a      	strb	r2, [r3, #0]
 800196a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800196e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001972:	2200      	movs	r2, #0
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800197a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800197e:	2200      	movs	r2, #0
 8001980:	609a      	str	r2, [r3, #8]
	MicroRosSubMsg SubToMsg = {STOP, 0, 0, MODE_OBS, LOW};
 8001982:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001986:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800198a:	4aa8      	ldr	r2, [pc, #672]	; (8001c2c <microros_task+0x3a0>)
 800198c:	461c      	mov	r4, r3
 800198e:	4615      	mov	r5, r2
 8001990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001992:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001994:	682b      	ldr	r3, [r5, #0]
 8001996:	6023      	str	r3, [r4, #0]
	/* PUBLISHER */
	//Use to publish the direction of robot in sensor mode
	rcl_publisher_t capteur_dir_pub;
	char* capteur_dir_topic = "capteur/dir";
 8001998:	4ba5      	ldr	r3, [pc, #660]	; (8001c30 <microros_task+0x3a4>)
 800199a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	std_msgs__msg__Int32 capteur_dir_msg;
	//Use to publish the actual mode of the robot
	rcl_publisher_t etat_mode_pub;
	char* etat_mode_topic = "etat/mode";
 800199e:	4ba5      	ldr	r3, [pc, #660]	; (8001c34 <microros_task+0x3a8>)
 80019a0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	std_msgs__msg__Int32 etat_mode_msg;
	//Use to publish the actual speed of the robot
	rcl_publisher_t etat_speed_pub;
	char* etat_speed_topic = "etat/speed";
 80019a4:	4ba4      	ldr	r3, [pc, #656]	; (8001c38 <microros_task+0x3ac>)
 80019a6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
	std_msgs__msg__Int32 etat_speed_msg;

	/* SUBSCRIBER */
	//Use to receive the x position of object see by the camera
	rcl_subscription_t camera_x_sub;
	char* camera_x_topic = "camera/x";
 80019aa:	4ba4      	ldr	r3, [pc, #656]	; (8001c3c <microros_task+0x3b0>)
 80019ac:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
	std_msgs__msg__Int32 camera_x_msg;
	//Use to receive the y position of object see by the camera
	rcl_subscription_t camera_y_sub;
	char* camera_y_topic = "camera/y";
 80019b0:	4ba3      	ldr	r3, [pc, #652]	; (8001c40 <microros_task+0x3b4>)
 80019b2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
	std_msgs__msg__Int32 camera_y_msg;
	//Use to receive the remote control in remote mode
	rcl_subscription_t telecommande_dir_sub;
	char* telecommande_dir_topic = "telecommande/dir";
 80019b6:	4ba3      	ldr	r3, [pc, #652]	; (8001c44 <microros_task+0x3b8>)
 80019b8:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
	std_msgs__msg__Int32 telecommande_dir_msg;
	//Use to receive the mode config
	rcl_subscription_t config_mode_sub;
	char* config_mode_topic = "config/mode";
 80019bc:	4ba2      	ldr	r3, [pc, #648]	; (8001c48 <microros_task+0x3bc>)
 80019be:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
	std_msgs__msg__Int32 config_mode_msg;
	//Use to receive the speed config
	rcl_subscription_t config_speed_sub;
	char* config_speed_topic = "config/speed";
 80019c2:	4ba2      	ldr	r3, [pc, #648]	; (8001c4c <microros_task+0x3c0>)
 80019c4:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
	std_msgs__msg__Int32 config_speed_msg;

	// create publisher
	createPublisher(&capteur_dir_pub, &node,
 80019c8:	f00c ffe8 	bl	800e99c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 80019cc:	4602      	mov	r2, r0
 80019ce:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 80019d2:	f107 0060 	add.w	r0, r7, #96	; 0x60
 80019d6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80019e0:	f000 feaa 	bl	8002738 <createPublisher>
		ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
		capteur_dir_topic, &capteur_dir_msg);

	createPublisher(&etat_mode_pub, &node,
 80019e4:	f00c ffda 	bl	800e99c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 80019e8:	4602      	mov	r2, r0
 80019ea:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 80019ee:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80019f2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80019fc:	f000 fe9c 	bl	8002738 <createPublisher>
		ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
		etat_mode_topic, &etat_mode_msg);

	createPublisher(&etat_speed_pub, &node,
 8001a00:	f00c ffcc 	bl	800e99c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001a04:	4602      	mov	r2, r0
 8001a06:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8001a0a:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8001a0e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001a18:	f000 fe8e 	bl	8002738 <createPublisher>
		ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
		etat_speed_topic, &etat_speed_msg);

	//create subscriber
	createSubscriber(&camera_x_sub,&node,
 8001a1c:	f00c ffbe 	bl	800e99c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001a20:	4602      	mov	r2, r0
 8001a22:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8001a26:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8001a2a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001a34:	f000 fe9c 	bl	8002770 <createSubscriber>
		ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
		camera_x_topic, &camera_x_msg);

	createSubscriber(&camera_y_sub,&node,
 8001a38:	f00c ffb0 	bl	800e99c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8001a42:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8001a46:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8001a50:	f000 fe8e 	bl	8002770 <createSubscriber>
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			camera_y_topic, &camera_y_msg);

	createSubscriber(&telecommande_dir_sub,&node,
 8001a54:	f00c ffa2 	bl	800e99c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8001a5e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001a62:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8001a6c:	f000 fe80 	bl	8002770 <createSubscriber>
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			telecommande_dir_topic, &telecommande_dir_msg);

	createSubscriber(&config_mode_sub,&node,
 8001a70:	f00c ff94 	bl	800e99c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001a74:	4602      	mov	r2, r0
 8001a76:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8001a7a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001a7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001a88:	f000 fe72 	bl	8002770 <createSubscriber>
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			config_mode_topic, &config_mode_msg);

	createSubscriber(&config_speed_sub,&node,
 8001a8c:	f00c ff86 	bl	800e99c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001a90:	4602      	mov	r2, r0
 8001a92:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8001a96:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001aa4:	f000 fe64 	bl	8002770 <createSubscriber>
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			config_speed_topic, &config_speed_msg);

	CHECKMRRET(rclc_executor_init(&executor, &support.context, 5, &allocator), "Error on init executor");
 8001aa8:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8001aac:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001ab0:	1d19      	adds	r1, r3, #4
 8001ab2:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	2205      	movs	r2, #5
 8001aba:	f00b fb11 	bl	800d0e0 <rclc_executor_init>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	4963      	ldr	r1, [pc, #396]	; (8001c50 <microros_task+0x3c4>)
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff febc 	bl	8001840 <CHECKMRRET>
	CHECKMRRET(rclc_executor_add_subscription(&executor, &camera_x_sub, &camera_x_msg, &SubscriberCallbackFunction, ON_NEW_DATA), "error add camera_x_sub");
 8001ac8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001acc:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001ad0:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	4b5e      	ldr	r3, [pc, #376]	; (8001c54 <microros_task+0x3c8>)
 8001ada:	f00b fb75 	bl	800d1c8 <rclc_executor_add_subscription>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	495d      	ldr	r1, [pc, #372]	; (8001c58 <microros_task+0x3cc>)
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff feac 	bl	8001840 <CHECKMRRET>
	CHECKMRRET(rclc_executor_add_subscription(&executor, &camera_y_sub, &camera_y_msg, &SubscriberCallbackFunction, ON_NEW_DATA), "error add camera_y_sub");
 8001ae8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001aec:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001af0:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8001af4:	2300      	movs	r3, #0
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	4b56      	ldr	r3, [pc, #344]	; (8001c54 <microros_task+0x3c8>)
 8001afa:	f00b fb65 	bl	800d1c8 <rclc_executor_add_subscription>
 8001afe:	4603      	mov	r3, r0
 8001b00:	4956      	ldr	r1, [pc, #344]	; (8001c5c <microros_task+0x3d0>)
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff fe9c 	bl	8001840 <CHECKMRRET>
	CHECKMRRET(rclc_executor_add_subscription(&executor, &telecommande_dir_sub, &telecommande_dir_msg, &SubscriberCallbackFunction, ON_NEW_DATA), "error add telecommande_dir_sub");
 8001b08:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001b0c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001b10:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8001b14:	2300      	movs	r3, #0
 8001b16:	9300      	str	r3, [sp, #0]
 8001b18:	4b4e      	ldr	r3, [pc, #312]	; (8001c54 <microros_task+0x3c8>)
 8001b1a:	f00b fb55 	bl	800d1c8 <rclc_executor_add_subscription>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	494f      	ldr	r1, [pc, #316]	; (8001c60 <microros_task+0x3d4>)
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff fe8c 	bl	8001840 <CHECKMRRET>
	CHECKMRRET(rclc_executor_add_subscription(&executor, &config_mode_sub, &config_mode_msg, &SubscriberCallbackFunction, ON_NEW_DATA), "error add config_mode_sub");
 8001b28:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001b2c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001b30:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8001b34:	2300      	movs	r3, #0
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	4b46      	ldr	r3, [pc, #280]	; (8001c54 <microros_task+0x3c8>)
 8001b3a:	f00b fb45 	bl	800d1c8 <rclc_executor_add_subscription>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	4948      	ldr	r1, [pc, #288]	; (8001c64 <microros_task+0x3d8>)
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff fe7c 	bl	8001840 <CHECKMRRET>
	CHECKMRRET(rclc_executor_add_subscription(&executor, &config_speed_sub, &config_speed_msg, &SubscriberCallbackFunction, ON_NEW_DATA), "error add config_speed_sub");
 8001b48:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001b4c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001b50:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8001b54:	2300      	movs	r3, #0
 8001b56:	9300      	str	r3, [sp, #0]
 8001b58:	4b3e      	ldr	r3, [pc, #248]	; (8001c54 <microros_task+0x3c8>)
 8001b5a:	f00b fb35 	bl	800d1c8 <rclc_executor_add_subscription>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	4941      	ldr	r1, [pc, #260]	; (8001c68 <microros_task+0x3dc>)
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff fe6c 	bl	8001840 <CHECKMRRET>

	for(;;)
	{
		if (!uxQueueMessagesWaiting(qhMR_sub))
 8001b68:	4b40      	ldr	r3, [pc, #256]	; (8001c6c <microros_task+0x3e0>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f008 fd8d 	bl	800a68c <uxQueueMessagesWaiting>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d108      	bne.n	8001b8a <microros_task+0x2fe>
			xQueueSend(qhMR_sub, ( void * ) &SubToMsg, portMAX_DELAY);
 8001b78:	4b3c      	ldr	r3, [pc, #240]	; (8001c6c <microros_task+0x3e0>)
 8001b7a:	6818      	ldr	r0, [r3, #0]
 8001b7c:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8001b80:	2300      	movs	r3, #0
 8001b82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b86:	f008 f9fb 	bl	8009f80 <xQueueGenericSend>
		rclc_executor_spin_some(&executor, 1*1000*1000);
 8001b8a:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8001b8e:	4a38      	ldr	r2, [pc, #224]	; (8001c70 <microros_task+0x3e4>)
 8001b90:	f04f 0300 	mov.w	r3, #0
 8001b94:	4608      	mov	r0, r1
 8001b96:	f00b fccb 	bl	800d530 <rclc_executor_spin_some>
		SubToMsg.dir = telecommande_dir_msg.data;
 8001b9a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001b9e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001ba8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001bac:	601a      	str	r2, [r3, #0]
		SubToMsg.x = camera_x_msg.data;
 8001bae:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001bb2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001bbc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001bc0:	605a      	str	r2, [r3, #4]
		SubToMsg.y = camera_y_msg.data;
 8001bc2:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001bc6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001bd0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001bd4:	609a      	str	r2, [r3, #8]
		SubToMsg.mode = config_mode_msg.data;
 8001bd6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001bda:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001be4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001be8:	60da      	str	r2, [r3, #12]
		SubToMsg.speed = config_speed_msg.data;
 8001bea:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001bee:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001bf2:	e03f      	b.n	8001c74 <microros_task+0x3e8>
 8001bf4:	080014d5 	.word	0x080014d5
 8001bf8:	0800146d 	.word	0x0800146d
 8001bfc:	0800144d 	.word	0x0800144d
 8001c00:	08001421 	.word	0x08001421
 8001c04:	200049bc 	.word	0x200049bc
 8001c08:	080027b5 	.word	0x080027b5
 8001c0c:	080027f9 	.word	0x080027f9
 8001c10:	08002831 	.word	0x08002831
 8001c14:	0800289d 	.word	0x0800289d
 8001c18:	0801953c 	.word	0x0801953c
 8001c1c:	08019564 	.word	0x08019564
 8001c20:	0801957c 	.word	0x0801957c
 8001c24:	08019580 	.word	0x08019580
 8001c28:	0801958c 	.word	0x0801958c
 8001c2c:	0801970c 	.word	0x0801970c
 8001c30:	080195a0 	.word	0x080195a0
 8001c34:	080195ac 	.word	0x080195ac
 8001c38:	080195b8 	.word	0x080195b8
 8001c3c:	080195c4 	.word	0x080195c4
 8001c40:	080195d0 	.word	0x080195d0
 8001c44:	080195dc 	.word	0x080195dc
 8001c48:	080195f0 	.word	0x080195f0
 8001c4c:	080195fc 	.word	0x080195fc
 8001c50:	0801960c 	.word	0x0801960c
 8001c54:	08001869 	.word	0x08001869
 8001c58:	08019624 	.word	0x08019624
 8001c5c:	0801963c 	.word	0x0801963c
 8001c60:	08019654 	.word	0x08019654
 8001c64:	08019674 	.word	0x08019674
 8001c68:	08019690 	.word	0x08019690
 8001c6c:	20004bd0 	.word	0x20004bd0
 8001c70:	000f4240 	.word	0x000f4240
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001c7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001c7e:	611a      	str	r2, [r3, #16]

		if (uxQueueMessagesWaiting(qhMR_pub))
 8001c80:	4b2d      	ldr	r3, [pc, #180]	; (8001d38 <microros_task+0x4ac>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f008 fd01 	bl	800a68c <uxQueueMessagesWaiting>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d04e      	beq.n	8001d2e <microros_task+0x4a2>
		{
			xQueueReceive(qhMR_pub, &MsgToPub, portMAX_DELAY);
 8001c90:	4b29      	ldr	r3, [pc, #164]	; (8001d38 <microros_task+0x4ac>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001c98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f008 fb09 	bl	800a2b4 <xQueueReceive>
			capteur_dir_msg.data = (int)MsgToPub.dir;
 8001ca2:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001ca6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	461a      	mov	r2, r3
 8001cae:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001cb2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001cb6:	601a      	str	r2, [r3, #0]
			etat_mode_msg.data = MsgToPub.mode;
 8001cb8:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001cbc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001cc0:	685a      	ldr	r2, [r3, #4]
 8001cc2:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001cc6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001cca:	601a      	str	r2, [r3, #0]
			etat_speed_msg.data = MsgToPub.speed;
 8001ccc:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001cd0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001cd4:	689a      	ldr	r2, [r3, #8]
 8001cd6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001cda:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001cde:	601a      	str	r2, [r3, #0]
			CHECKMRRET(rcl_publish(&capteur_dir_pub, &capteur_dir_msg, NULL), "erreur publish capteur_dir_pub");
 8001ce0:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8001ce4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001ce8:	2200      	movs	r2, #0
 8001cea:	4618      	mov	r0, r3
 8001cec:	f00a ff64 	bl	800cbb8 <rcl_publish>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	4912      	ldr	r1, [pc, #72]	; (8001d3c <microros_task+0x4b0>)
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff fda3 	bl	8001840 <CHECKMRRET>
			CHECKMRRET(rcl_publish(&etat_mode_pub, &etat_mode_msg, NULL), "erreur publish etat_mode_pub");
 8001cfa:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8001cfe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d02:	2200      	movs	r2, #0
 8001d04:	4618      	mov	r0, r3
 8001d06:	f00a ff57 	bl	800cbb8 <rcl_publish>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	490c      	ldr	r1, [pc, #48]	; (8001d40 <microros_task+0x4b4>)
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff fd96 	bl	8001840 <CHECKMRRET>
			CHECKMRRET(rcl_publish(&etat_speed_pub, &etat_speed_msg, NULL), "erreur publish etat_speed_pub");
 8001d14:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001d18:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f00a ff4a 	bl	800cbb8 <rcl_publish>
 8001d24:	4603      	mov	r3, r0
 8001d26:	4907      	ldr	r1, [pc, #28]	; (8001d44 <microros_task+0x4b8>)
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff fd89 	bl	8001840 <CHECKMRRET>
			#if DEBUG_PRINTF
			printf("\r\nReceive from decision :\r\nDirection : %d\r\nMode : %d\r\nSpeed : %d\r\n", capteur_dir_msg.data, etat_mode_msg.data, etat_speed_msg.data);
			#endif //DEBUG_PRINTF
		}
		vTaskDelay(SAMPLING_PERIOD_ms);
 8001d2e:	2005      	movs	r0, #5
 8001d30:	f009 f808 	bl	800ad44 <vTaskDelay>
		if (!uxQueueMessagesWaiting(qhMR_sub))
 8001d34:	e718      	b.n	8001b68 <microros_task+0x2dc>
 8001d36:	bf00      	nop
 8001d38:	20004bd4 	.word	0x20004bd4
 8001d3c:	080196ac 	.word	0x080196ac
 8001d40:	080196cc 	.word	0x080196cc
 8001d44:	080196ec 	.word	0x080196ec

08001d48 <task_Motor_Left>:
	}
#endif //SYNCHRO_EX
}
//========================================================================
static void task_Motor_Left(void *pvParameters)
{
 8001d48:	b5b0      	push	{r4, r5, r7, lr}
 8001d4a:	b088      	sub	sp, #32
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
	int16_t consigne = 0;
 8001d50:	2300      	movs	r3, #0
 8001d52:	817b      	strh	r3, [r7, #10]

	float ui = 0.0;
 8001d54:	f04f 0300 	mov.w	r3, #0
 8001d58:	61fb      	str	r3, [r7, #28]
	float up = 0.0;
 8001d5a:	f04f 0300 	mov.w	r3, #0
 8001d5e:	61bb      	str	r3, [r7, #24]
	int err = 0;
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]
	int speed = 0;
 8001d64:	2300      	movs	r3, #0
 8001d66:	613b      	str	r3, [r7, #16]

	int state = 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60fb      	str	r3, [r7, #12]

	for (;;)
	{
		xQueueReceive(q_mot_L, &consigne, portMAX_DELAY);
 8001d6c:	4b36      	ldr	r3, [pc, #216]	; (8001e48 <task_Motor_Left+0x100>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f107 010a 	add.w	r1, r7, #10
 8001d74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f008 fa9b 	bl	800a2b4 <xQueueReceive>

		speed = quadEncoder_GetSpeedL();
 8001d7e:	f000 ffb5 	bl	8002cec <quadEncoder_GetSpeedL>
 8001d82:	4603      	mov	r3, r0
 8001d84:	613b      	str	r3, [r7, #16]
		err=consigne-speed;
 8001d86:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	617b      	str	r3, [r7, #20]
		up=LKp*(float)err;
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	ee07 3a90 	vmov	s15, r3
 8001d98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d9c:	ee17 0a90 	vmov	r0, s15
 8001da0:	f7fe fbea 	bl	8000578 <__aeabi_f2d>
 8001da4:	a324      	add	r3, pc, #144	; (adr r3, 8001e38 <task_Motor_Left+0xf0>)
 8001da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001daa:	f7fe fc3d 	bl	8000628 <__aeabi_dmul>
 8001dae:	4602      	mov	r2, r0
 8001db0:	460b      	mov	r3, r1
 8001db2:	4610      	mov	r0, r2
 8001db4:	4619      	mov	r1, r3
 8001db6:	f7fe fe49 	bl	8000a4c <__aeabi_d2f>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	61bb      	str	r3, [r7, #24]
		ui=ui+LKp*LKi*(float)err;
 8001dbe:	69f8      	ldr	r0, [r7, #28]
 8001dc0:	f7fe fbda 	bl	8000578 <__aeabi_f2d>
 8001dc4:	4604      	mov	r4, r0
 8001dc6:	460d      	mov	r5, r1
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	ee07 3a90 	vmov	s15, r3
 8001dce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dd2:	ee17 0a90 	vmov	r0, s15
 8001dd6:	f7fe fbcf 	bl	8000578 <__aeabi_f2d>
 8001dda:	a319      	add	r3, pc, #100	; (adr r3, 8001e40 <task_Motor_Left+0xf8>)
 8001ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de0:	f7fe fc22 	bl	8000628 <__aeabi_dmul>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	4620      	mov	r0, r4
 8001dea:	4629      	mov	r1, r5
 8001dec:	f7fe fa66 	bl	80002bc <__adddf3>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	4610      	mov	r0, r2
 8001df6:	4619      	mov	r1, r3
 8001df8:	f7fe fe28 	bl	8000a4c <__aeabi_d2f>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	61fb      	str	r3, [r7, #28]

		motorLeft_SetDuty(100+(int)(up+ui));
 8001e00:	ed97 7a06 	vldr	s14, [r7, #24]
 8001e04:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e10:	ee17 3a90 	vmov	r3, s15
 8001e14:	3364      	adds	r3, #100	; 0x64
 8001e16:	4618      	mov	r0, r3
 8001e18:	f000 fe8c 	bl	8002b34 <motorLeft_SetDuty>

		xSemaphoreGive(xSem_Supervision);
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <task_Motor_Left+0x104>)
 8001e1e:	6818      	ldr	r0, [r3, #0]
 8001e20:	2300      	movs	r3, #0
 8001e22:	2200      	movs	r2, #0
 8001e24:	2100      	movs	r1, #0
 8001e26:	f008 f8ab 	bl	8009f80 <xQueueGenericSend>
		vTaskDelay(SAMPLING_PERIOD_ms);
 8001e2a:	2005      	movs	r0, #5
 8001e2c:	f008 ff8a 	bl	800ad44 <vTaskDelay>
		xQueueReceive(q_mot_L, &consigne, portMAX_DELAY);
 8001e30:	e79c      	b.n	8001d6c <task_Motor_Left+0x24>
 8001e32:	bf00      	nop
 8001e34:	f3af 8000 	nop.w
 8001e38:	d2f1a9fc 	.word	0xd2f1a9fc
 8001e3c:	3f50624d 	.word	0x3f50624d
 8001e40:	47ae147b 	.word	0x47ae147b
 8001e44:	3f547ae1 	.word	0x3f547ae1
 8001e48:	20004bc8 	.word	0x20004bc8
 8001e4c:	20004bc4 	.word	0x20004bc4

08001e50 <task_Motor_Right>:
	}
}

//=========================================================================
static void task_Motor_Right(void *pvParameters)
{
 8001e50:	b5b0      	push	{r4, r5, r7, lr}
 8001e52:	b088      	sub	sp, #32
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
	int16_t consigne = 0;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	81fb      	strh	r3, [r7, #14]

	float ui= 0.0;
 8001e5c:	f04f 0300 	mov.w	r3, #0
 8001e60:	61fb      	str	r3, [r7, #28]
	float up = 0.0;
 8001e62:	f04f 0300 	mov.w	r3, #0
 8001e66:	61bb      	str	r3, [r7, #24]
	int err = 0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
	int speed = 0;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	613b      	str	r3, [r7, #16]

	for (;;)
	{
		xQueueReceive(q_mot_R, &consigne, portMAX_DELAY);
 8001e70:	4b35      	ldr	r3, [pc, #212]	; (8001f48 <task_Motor_Right+0xf8>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f107 010e 	add.w	r1, r7, #14
 8001e78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f008 fa19 	bl	800a2b4 <xQueueReceive>

		speed = quadEncoder_GetSpeedR();
 8001e82:	f000 ff85 	bl	8002d90 <quadEncoder_GetSpeedR>
 8001e86:	4603      	mov	r3, r0
 8001e88:	613b      	str	r3, [r7, #16]
		err=consigne-speed;
 8001e8a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	617b      	str	r3, [r7, #20]
		up=RKp*(float)err;
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	ee07 3a90 	vmov	s15, r3
 8001e9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ea0:	ee17 0a90 	vmov	r0, s15
 8001ea4:	f7fe fb68 	bl	8000578 <__aeabi_f2d>
 8001ea8:	a323      	add	r3, pc, #140	; (adr r3, 8001f38 <task_Motor_Right+0xe8>)
 8001eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eae:	f7fe fbbb 	bl	8000628 <__aeabi_dmul>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	4610      	mov	r0, r2
 8001eb8:	4619      	mov	r1, r3
 8001eba:	f7fe fdc7 	bl	8000a4c <__aeabi_d2f>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	61bb      	str	r3, [r7, #24]
		ui=ui+RKp*RKi*(float)err;
 8001ec2:	69f8      	ldr	r0, [r7, #28]
 8001ec4:	f7fe fb58 	bl	8000578 <__aeabi_f2d>
 8001ec8:	4604      	mov	r4, r0
 8001eca:	460d      	mov	r5, r1
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	ee07 3a90 	vmov	s15, r3
 8001ed2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ed6:	ee17 0a90 	vmov	r0, s15
 8001eda:	f7fe fb4d 	bl	8000578 <__aeabi_f2d>
 8001ede:	a318      	add	r3, pc, #96	; (adr r3, 8001f40 <task_Motor_Right+0xf0>)
 8001ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee4:	f7fe fba0 	bl	8000628 <__aeabi_dmul>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	460b      	mov	r3, r1
 8001eec:	4620      	mov	r0, r4
 8001eee:	4629      	mov	r1, r5
 8001ef0:	f7fe f9e4 	bl	80002bc <__adddf3>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4610      	mov	r0, r2
 8001efa:	4619      	mov	r1, r3
 8001efc:	f7fe fda6 	bl	8000a4c <__aeabi_d2f>
 8001f00:	4603      	mov	r3, r0
 8001f02:	61fb      	str	r3, [r7, #28]

		motorRight_SetDuty(100+(int)(up+ui));
 8001f04:	ed97 7a06 	vldr	s14, [r7, #24]
 8001f08:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f14:	ee17 3a90 	vmov	r3, s15
 8001f18:	3364      	adds	r3, #100	; 0x64
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f000 fe1a 	bl	8002b54 <motorRight_SetDuty>

		xSemaphoreGive(xSem_Supervision);
 8001f20:	4b0a      	ldr	r3, [pc, #40]	; (8001f4c <task_Motor_Right+0xfc>)
 8001f22:	6818      	ldr	r0, [r3, #0]
 8001f24:	2300      	movs	r3, #0
 8001f26:	2200      	movs	r2, #0
 8001f28:	2100      	movs	r1, #0
 8001f2a:	f008 f829 	bl	8009f80 <xQueueGenericSend>
		vTaskDelay(SAMPLING_PERIOD_ms);
 8001f2e:	2005      	movs	r0, #5
 8001f30:	f008 ff08 	bl	800ad44 <vTaskDelay>
		xQueueReceive(q_mot_R, &consigne, portMAX_DELAY);
 8001f34:	e79c      	b.n	8001e70 <task_Motor_Right+0x20>
 8001f36:	bf00      	nop
 8001f38:	d2f1a9fc 	.word	0xd2f1a9fc
 8001f3c:	3f50624d 	.word	0x3f50624d
 8001f40:	47ae147b 	.word	0x47ae147b
 8001f44:	3f547ae1 	.word	0x3f547ae1
 8001f48:	20004bcc 	.word	0x20004bcc
 8001f4c:	20004bc4 	.word	0x20004bc4

08001f50 <task_Supervision>:
}
#endif

//=========================================================================
static void task_Supervision(void *pvParameters)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08e      	sub	sp, #56	; 0x38
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
#elif SYNCHRO_EX == EXFINAL
	int16_t speedLeft;
	int16_t speedRight;

	int table[2];
	int vl53 = 0;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	637b      	str	r3, [r7, #52]	; 0x34
#endif //MICROROS

	for (;;)
	{
		#if MICROROS
		if (uxQueueMessagesWaiting(qhMR_sub))
 8001f5c:	4b9c      	ldr	r3, [pc, #624]	; (80021d0 <task_Supervision+0x280>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f008 fb93 	bl	800a68c <uxQueueMessagesWaiting>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d029      	beq.n	8001fc0 <task_Supervision+0x70>
		{
			xQueueReceive(qhMR_sub, &SubToMsg, portMAX_DELAY);
 8001f6c:	4b98      	ldr	r3, [pc, #608]	; (80021d0 <task_Supervision+0x280>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f107 0114 	add.w	r1, r7, #20
 8001f74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f008 f99b 	bl	800a2b4 <xQueueReceive>
			if (SubToMsg.mode >= 0 && SubToMsg.mode < LAST_MODE)
 8001f7e:	6a3b      	ldr	r3, [r7, #32]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	db05      	blt.n	8001f90 <task_Supervision+0x40>
 8001f84:	6a3b      	ldr	r3, [r7, #32]
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	dc02      	bgt.n	8001f90 <task_Supervision+0x40>
				mode = SubToMsg.mode;
 8001f8a:	6a3b      	ldr	r3, [r7, #32]
 8001f8c:	4a91      	ldr	r2, [pc, #580]	; (80021d4 <task_Supervision+0x284>)
 8001f8e:	6013      	str	r3, [r2, #0]
			if (SubToMsg.dir >= 0 && SubToMsg.dir < LAST_DIR)
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	db05      	blt.n	8001fa2 <task_Supervision+0x52>
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	2b08      	cmp	r3, #8
 8001f9a:	dc02      	bgt.n	8001fa2 <task_Supervision+0x52>
				direction = SubToMsg.dir;
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	4a8e      	ldr	r2, [pc, #568]	; (80021d8 <task_Supervision+0x288>)
 8001fa0:	6013      	str	r3, [r2, #0]
			if (SubToMsg.speed > 0 && SubToMsg.speed < LAST_SPEED)
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	dd05      	ble.n	8001fb4 <task_Supervision+0x64>
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001faa:	2b03      	cmp	r3, #3
 8001fac:	dc02      	bgt.n	8001fb4 <task_Supervision+0x64>
				speed = SubToMsg.speed;
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	4a8a      	ldr	r2, [pc, #552]	; (80021dc <task_Supervision+0x28c>)
 8001fb2:	6013      	str	r3, [r2, #0]
			x = SubToMsg.x;
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	4a8a      	ldr	r2, [pc, #552]	; (80021e0 <task_Supervision+0x290>)
 8001fb8:	6013      	str	r3, [r2, #0]
			y = SubToMsg.y;
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	4a89      	ldr	r2, [pc, #548]	; (80021e4 <task_Supervision+0x294>)
 8001fbe:	6013      	str	r3, [r2, #0]
			printf("%cc%c[2J%c[0;0HVariable to make decision : \n\rDirection : %d\r\nMode: %d\r\nSpeed : %d\r\nX: %d\r\nY : %d\r\n", 0x1b, 0x1b, 0x1b, direction, mode, speed, x, y);
			#endif //DEBUG_PRINTF
		}
		#endif //MICROROS

		if (mode == MODE_ZIG)
 8001fc0:	4b84      	ldr	r3, [pc, #528]	; (80021d4 <task_Supervision+0x284>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	f040 8113 	bne.w	80021f0 <task_Supervision+0x2a0>
		{
			dir = 'N';
 8001fca:	4b87      	ldr	r3, [pc, #540]	; (80021e8 <task_Supervision+0x298>)
 8001fcc:	224e      	movs	r2, #78	; 0x4e
 8001fce:	701a      	strb	r2, [r3, #0]
			obs = 0;
 8001fd0:	4b86      	ldr	r3, [pc, #536]	; (80021ec <task_Supervision+0x29c>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]
			switch(direction)
 8001fd6:	4b80      	ldr	r3, [pc, #512]	; (80021d8 <task_Supervision+0x288>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2b08      	cmp	r3, #8
 8001fdc:	f200 80f3 	bhi.w	80021c6 <task_Supervision+0x276>
 8001fe0:	a201      	add	r2, pc, #4	; (adr r2, 8001fe8 <task_Supervision+0x98>)
 8001fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe6:	bf00      	nop
 8001fe8:	08002017 	.word	0x08002017
 8001fec:	080020b9 	.word	0x080020b9
 8001ff0:	08002049 	.word	0x08002049
 8001ff4:	08002083 	.word	0x08002083
 8001ff8:	0800200d 	.word	0x0800200d
 8001ffc:	080020ef 	.word	0x080020ef
 8002000:	08002121 	.word	0x08002121
 8002004:	08002153 	.word	0x08002153
 8002008:	0800218d 	.word	0x0800218d
			{
				case STOP:
					speedLeft = 0;
 800200c:	2300      	movs	r3, #0
 800200e:	867b      	strh	r3, [r7, #50]	; 0x32
					speedRight = 0;
 8002010:	2300      	movs	r3, #0
 8002012:	863b      	strh	r3, [r7, #48]	; 0x30
					break;
 8002014:	e269      	b.n	80024ea <task_Supervision+0x59a>
				case AVANT:
					speedLeft = VITESSE_KART*speed;
 8002016:	4b71      	ldr	r3, [pc, #452]	; (80021dc <task_Supervision+0x28c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	b29b      	uxth	r3, r3
 800201c:	461a      	mov	r2, r3
 800201e:	0152      	lsls	r2, r2, #5
 8002020:	1ad2      	subs	r2, r2, r3
 8002022:	0092      	lsls	r2, r2, #2
 8002024:	4413      	add	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	b29b      	uxth	r3, r3
 800202a:	b21b      	sxth	r3, r3
 800202c:	867b      	strh	r3, [r7, #50]	; 0x32
					speedRight = VITESSE_KART*speed;
 800202e:	4b6b      	ldr	r3, [pc, #428]	; (80021dc <task_Supervision+0x28c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	b29b      	uxth	r3, r3
 8002034:	461a      	mov	r2, r3
 8002036:	0152      	lsls	r2, r2, #5
 8002038:	1ad2      	subs	r2, r2, r3
 800203a:	0092      	lsls	r2, r2, #2
 800203c:	4413      	add	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	b29b      	uxth	r3, r3
 8002042:	b21b      	sxth	r3, r3
 8002044:	863b      	strh	r3, [r7, #48]	; 0x30
					break;
 8002046:	e250      	b.n	80024ea <task_Supervision+0x59a>
				case RECULE:
					speedLeft = -VITESSE_KART*speed;
 8002048:	4b64      	ldr	r3, [pc, #400]	; (80021dc <task_Supervision+0x28c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	b29b      	uxth	r3, r3
 800204e:	461a      	mov	r2, r3
 8002050:	01d2      	lsls	r2, r2, #7
 8002052:	1ad2      	subs	r2, r2, r3
 8002054:	0192      	lsls	r2, r2, #6
 8002056:	441a      	add	r2, r3
 8002058:	0052      	lsls	r2, r2, #1
 800205a:	4413      	add	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	b29b      	uxth	r3, r3
 8002060:	b21b      	sxth	r3, r3
 8002062:	867b      	strh	r3, [r7, #50]	; 0x32
					speedRight = -VITESSE_KART*speed;
 8002064:	4b5d      	ldr	r3, [pc, #372]	; (80021dc <task_Supervision+0x28c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	b29b      	uxth	r3, r3
 800206a:	461a      	mov	r2, r3
 800206c:	01d2      	lsls	r2, r2, #7
 800206e:	1ad2      	subs	r2, r2, r3
 8002070:	0192      	lsls	r2, r2, #6
 8002072:	441a      	add	r2, r3
 8002074:	0052      	lsls	r2, r2, #1
 8002076:	4413      	add	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	b29b      	uxth	r3, r3
 800207c:	b21b      	sxth	r3, r3
 800207e:	863b      	strh	r3, [r7, #48]	; 0x30
					break;
 8002080:	e233      	b.n	80024ea <task_Supervision+0x59a>
				case DROITE:
					speedLeft = VITESSE_KART*speed;
 8002082:	4b56      	ldr	r3, [pc, #344]	; (80021dc <task_Supervision+0x28c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	b29b      	uxth	r3, r3
 8002088:	461a      	mov	r2, r3
 800208a:	0152      	lsls	r2, r2, #5
 800208c:	1ad2      	subs	r2, r2, r3
 800208e:	0092      	lsls	r2, r2, #2
 8002090:	4413      	add	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	b29b      	uxth	r3, r3
 8002096:	b21b      	sxth	r3, r3
 8002098:	867b      	strh	r3, [r7, #50]	; 0x32
					speedRight = -VITESSE_KART*speed;
 800209a:	4b50      	ldr	r3, [pc, #320]	; (80021dc <task_Supervision+0x28c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	b29b      	uxth	r3, r3
 80020a0:	461a      	mov	r2, r3
 80020a2:	01d2      	lsls	r2, r2, #7
 80020a4:	1ad2      	subs	r2, r2, r3
 80020a6:	0192      	lsls	r2, r2, #6
 80020a8:	441a      	add	r2, r3
 80020aa:	0052      	lsls	r2, r2, #1
 80020ac:	4413      	add	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	b21b      	sxth	r3, r3
 80020b4:	863b      	strh	r3, [r7, #48]	; 0x30
					break;
 80020b6:	e218      	b.n	80024ea <task_Supervision+0x59a>
				case GAUCHE:
					speedLeft = -VITESSE_KART*speed;
 80020b8:	4b48      	ldr	r3, [pc, #288]	; (80021dc <task_Supervision+0x28c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	b29b      	uxth	r3, r3
 80020be:	461a      	mov	r2, r3
 80020c0:	01d2      	lsls	r2, r2, #7
 80020c2:	1ad2      	subs	r2, r2, r3
 80020c4:	0192      	lsls	r2, r2, #6
 80020c6:	441a      	add	r2, r3
 80020c8:	0052      	lsls	r2, r2, #1
 80020ca:	4413      	add	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	b21b      	sxth	r3, r3
 80020d2:	867b      	strh	r3, [r7, #50]	; 0x32
					speedRight = VITESSE_KART*speed;
 80020d4:	4b41      	ldr	r3, [pc, #260]	; (80021dc <task_Supervision+0x28c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	b29b      	uxth	r3, r3
 80020da:	461a      	mov	r2, r3
 80020dc:	0152      	lsls	r2, r2, #5
 80020de:	1ad2      	subs	r2, r2, r3
 80020e0:	0092      	lsls	r2, r2, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	b21b      	sxth	r3, r3
 80020ea:	863b      	strh	r3, [r7, #48]	; 0x30
					break;
 80020ec:	e1fd      	b.n	80024ea <task_Supervision+0x59a>
				case AVANT_GAUCHE:
					speedLeft = (VITESSE_KART/2)*speed;
 80020ee:	4b3b      	ldr	r3, [pc, #236]	; (80021dc <task_Supervision+0x28c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	461a      	mov	r2, r3
 80020f6:	0152      	lsls	r2, r2, #5
 80020f8:	1ad2      	subs	r2, r2, r3
 80020fa:	0092      	lsls	r2, r2, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	b29b      	uxth	r3, r3
 8002102:	b21b      	sxth	r3, r3
 8002104:	867b      	strh	r3, [r7, #50]	; 0x32
					speedRight = VITESSE_KART*speed;
 8002106:	4b35      	ldr	r3, [pc, #212]	; (80021dc <task_Supervision+0x28c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	b29b      	uxth	r3, r3
 800210c:	461a      	mov	r2, r3
 800210e:	0152      	lsls	r2, r2, #5
 8002110:	1ad2      	subs	r2, r2, r3
 8002112:	0092      	lsls	r2, r2, #2
 8002114:	4413      	add	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	b29b      	uxth	r3, r3
 800211a:	b21b      	sxth	r3, r3
 800211c:	863b      	strh	r3, [r7, #48]	; 0x30
					break;
 800211e:	e1e4      	b.n	80024ea <task_Supervision+0x59a>
				case AVANT_DROITE:
					speedLeft = VITESSE_KART*speed;
 8002120:	4b2e      	ldr	r3, [pc, #184]	; (80021dc <task_Supervision+0x28c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	b29b      	uxth	r3, r3
 8002126:	461a      	mov	r2, r3
 8002128:	0152      	lsls	r2, r2, #5
 800212a:	1ad2      	subs	r2, r2, r3
 800212c:	0092      	lsls	r2, r2, #2
 800212e:	4413      	add	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	b29b      	uxth	r3, r3
 8002134:	b21b      	sxth	r3, r3
 8002136:	867b      	strh	r3, [r7, #50]	; 0x32
					speedRight = (VITESSE_KART/2)*speed;
 8002138:	4b28      	ldr	r3, [pc, #160]	; (80021dc <task_Supervision+0x28c>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	b29b      	uxth	r3, r3
 800213e:	461a      	mov	r2, r3
 8002140:	0152      	lsls	r2, r2, #5
 8002142:	1ad2      	subs	r2, r2, r3
 8002144:	0092      	lsls	r2, r2, #2
 8002146:	4413      	add	r3, r2
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	b29b      	uxth	r3, r3
 800214c:	b21b      	sxth	r3, r3
 800214e:	863b      	strh	r3, [r7, #48]	; 0x30
					break;
 8002150:	e1cb      	b.n	80024ea <task_Supervision+0x59a>
				case RECULE_GAUCHE:
					speedLeft = -VITESSE_KART*speed;
 8002152:	4b22      	ldr	r3, [pc, #136]	; (80021dc <task_Supervision+0x28c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	b29b      	uxth	r3, r3
 8002158:	461a      	mov	r2, r3
 800215a:	01d2      	lsls	r2, r2, #7
 800215c:	1ad2      	subs	r2, r2, r3
 800215e:	0192      	lsls	r2, r2, #6
 8002160:	441a      	add	r2, r3
 8002162:	0052      	lsls	r2, r2, #1
 8002164:	4413      	add	r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	b29b      	uxth	r3, r3
 800216a:	b21b      	sxth	r3, r3
 800216c:	867b      	strh	r3, [r7, #50]	; 0x32
					speedRight = (-VITESSE_KART/2)*speed;
 800216e:	4b1b      	ldr	r3, [pc, #108]	; (80021dc <task_Supervision+0x28c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	b29b      	uxth	r3, r3
 8002174:	461a      	mov	r2, r3
 8002176:	0212      	lsls	r2, r2, #8
 8002178:	1ad2      	subs	r2, r2, r3
 800217a:	0192      	lsls	r2, r2, #6
 800217c:	441a      	add	r2, r3
 800217e:	0052      	lsls	r2, r2, #1
 8002180:	4413      	add	r3, r2
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	b29b      	uxth	r3, r3
 8002186:	b21b      	sxth	r3, r3
 8002188:	863b      	strh	r3, [r7, #48]	; 0x30
					break;
 800218a:	e1ae      	b.n	80024ea <task_Supervision+0x59a>
				case RECULE_DROITE:
					speedLeft = (-VITESSE_KART/2)*speed;
 800218c:	4b13      	ldr	r3, [pc, #76]	; (80021dc <task_Supervision+0x28c>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	b29b      	uxth	r3, r3
 8002192:	461a      	mov	r2, r3
 8002194:	0212      	lsls	r2, r2, #8
 8002196:	1ad2      	subs	r2, r2, r3
 8002198:	0192      	lsls	r2, r2, #6
 800219a:	441a      	add	r2, r3
 800219c:	0052      	lsls	r2, r2, #1
 800219e:	4413      	add	r3, r2
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	b21b      	sxth	r3, r3
 80021a6:	867b      	strh	r3, [r7, #50]	; 0x32
					speedRight = -VITESSE_KART*speed;
 80021a8:	4b0c      	ldr	r3, [pc, #48]	; (80021dc <task_Supervision+0x28c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	461a      	mov	r2, r3
 80021b0:	01d2      	lsls	r2, r2, #7
 80021b2:	1ad2      	subs	r2, r2, r3
 80021b4:	0192      	lsls	r2, r2, #6
 80021b6:	441a      	add	r2, r3
 80021b8:	0052      	lsls	r2, r2, #1
 80021ba:	4413      	add	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	b29b      	uxth	r3, r3
 80021c0:	b21b      	sxth	r3, r3
 80021c2:	863b      	strh	r3, [r7, #48]	; 0x30
					break;
 80021c4:	e191      	b.n	80024ea <task_Supervision+0x59a>
				default:
					speedLeft = 0;
 80021c6:	2300      	movs	r3, #0
 80021c8:	867b      	strh	r3, [r7, #50]	; 0x32
					speedRight = 0;
 80021ca:	2300      	movs	r3, #0
 80021cc:	863b      	strh	r3, [r7, #48]	; 0x30
					break;
 80021ce:	e18c      	b.n	80024ea <task_Supervision+0x59a>
 80021d0:	20004bd0 	.word	0x20004bd0
 80021d4:	20004be0 	.word	0x20004be0
 80021d8:	20000000 	.word	0x20000000
 80021dc:	20000004 	.word	0x20000004
 80021e0:	20004be4 	.word	0x20004be4
 80021e4:	20004be8 	.word	0x20004be8
 80021e8:	20000008 	.word	0x20000008
 80021ec:	20004bec 	.word	0x20004bec
			}
		}
		else if (mode == MODE_OBS)
 80021f0:	4b8d      	ldr	r3, [pc, #564]	; (8002428 <task_Supervision+0x4d8>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d16c      	bne.n	80022d2 <task_Supervision+0x382>
		{
			captDistIR_Get(table);
 80021f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7fe fe75 	bl	8000eec <captDistIR_Get>
				dir = 'S';
				obs = 1;
			}
			else
			#endif //VL53
			if (table[0] > 1000 || table[1] > 1000)
 8002202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002204:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002208:	dc03      	bgt.n	8002212 <task_Supervision+0x2c2>
 800220a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800220c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002210:	dd52      	ble.n	80022b8 <task_Supervision+0x368>
			{
				if (obs > 10)
 8002212:	4b86      	ldr	r3, [pc, #536]	; (800242c <task_Supervision+0x4dc>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2b0a      	cmp	r3, #10
 8002218:	dd09      	ble.n	800222e <task_Supervision+0x2de>
				{
					speedLeft = VITESSE_OBS;
 800221a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800221e:	867b      	strh	r3, [r7, #50]	; 0x32
					speedRight = -VITESSE_OBS/2;
 8002220:	f64f 630c 	movw	r3, #65036	; 0xfe0c
 8002224:	863b      	strh	r3, [r7, #48]	; 0x30
					dir = 'G';
 8002226:	4b82      	ldr	r3, [pc, #520]	; (8002430 <task_Supervision+0x4e0>)
 8002228:	2247      	movs	r2, #71	; 0x47
 800222a:	701a      	strb	r2, [r3, #0]
				if (obs > 10)
 800222c:	e15c      	b.n	80024e8 <task_Supervision+0x598>
				}
				else
				{
					speedLeft = 0;
 800222e:	2300      	movs	r3, #0
 8002230:	867b      	strh	r3, [r7, #50]	; 0x32
					speedRight = 0;
 8002232:	2300      	movs	r3, #0
 8002234:	863b      	strh	r3, [r7, #48]	; 0x30

					if (table[0] > table[1] && table[0] > 1000)
 8002236:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800223a:	429a      	cmp	r2, r3
 800223c:	dd18      	ble.n	8002270 <task_Supervision+0x320>
 800223e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002240:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002244:	dd14      	ble.n	8002270 <task_Supervision+0x320>
					{
						dir = 'G';
 8002246:	4b7a      	ldr	r3, [pc, #488]	; (8002430 <task_Supervision+0x4e0>)
 8002248:	2247      	movs	r2, #71	; 0x47
 800224a:	701a      	strb	r2, [r3, #0]
						speedLeft = VITESSE_OBS/2;
 800224c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002250:	867b      	strh	r3, [r7, #50]	; 0x32
						speedRight = -VITESSE_OBS/2;
 8002252:	f64f 630c 	movw	r3, #65036	; 0xfe0c
 8002256:	863b      	strh	r3, [r7, #48]	; 0x30
						if (obs%2 == 0)
 8002258:	4b74      	ldr	r3, [pc, #464]	; (800242c <task_Supervision+0x4dc>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	2b00      	cmp	r3, #0
 8002262:	d128      	bne.n	80022b6 <task_Supervision+0x366>
							obs++;
 8002264:	4b71      	ldr	r3, [pc, #452]	; (800242c <task_Supervision+0x4dc>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	3301      	adds	r3, #1
 800226a:	4a70      	ldr	r2, [pc, #448]	; (800242c <task_Supervision+0x4dc>)
 800226c:	6013      	str	r3, [r2, #0]
						if (obs%2 == 0)
 800226e:	e022      	b.n	80022b6 <task_Supervision+0x366>
					}
					else if (table[0] < table[1] && table[1] > 1000)
 8002270:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002274:	429a      	cmp	r2, r3
 8002276:	f280 8137 	bge.w	80024e8 <task_Supervision+0x598>
 800227a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800227c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002280:	f340 8132 	ble.w	80024e8 <task_Supervision+0x598>
					{
						dir = 'D';
 8002284:	4b6a      	ldr	r3, [pc, #424]	; (8002430 <task_Supervision+0x4e0>)
 8002286:	2244      	movs	r2, #68	; 0x44
 8002288:	701a      	strb	r2, [r3, #0]
						speedLeft = -VITESSE_OBS/2;
 800228a:	f64f 630c 	movw	r3, #65036	; 0xfe0c
 800228e:	867b      	strh	r3, [r7, #50]	; 0x32
						speedRight = VITESSE_OBS/2;
 8002290:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002294:	863b      	strh	r3, [r7, #48]	; 0x30
						if (obs%2 == 1)
 8002296:	4b65      	ldr	r3, [pc, #404]	; (800242c <task_Supervision+0x4dc>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	bfb8      	it	lt
 80022a2:	425b      	neglt	r3, r3
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	f040 811f 	bne.w	80024e8 <task_Supervision+0x598>
							obs++;
 80022aa:	4b60      	ldr	r3, [pc, #384]	; (800242c <task_Supervision+0x4dc>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	3301      	adds	r3, #1
 80022b0:	4a5e      	ldr	r2, [pc, #376]	; (800242c <task_Supervision+0x4dc>)
 80022b2:	6013      	str	r3, [r2, #0]
				if (obs > 10)
 80022b4:	e118      	b.n	80024e8 <task_Supervision+0x598>
 80022b6:	e117      	b.n	80024e8 <task_Supervision+0x598>
					}
				}
			}
			else
			{
				speedLeft = VITESSE_OBS;
 80022b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022bc:	867b      	strh	r3, [r7, #50]	; 0x32
				speedRight = VITESSE_OBS;
 80022be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022c2:	863b      	strh	r3, [r7, #48]	; 0x30
				dir = 'F';
 80022c4:	4b5a      	ldr	r3, [pc, #360]	; (8002430 <task_Supervision+0x4e0>)
 80022c6:	2246      	movs	r2, #70	; 0x46
 80022c8:	701a      	strb	r2, [r3, #0]
				obs = 0;
 80022ca:	4b58      	ldr	r3, [pc, #352]	; (800242c <task_Supervision+0x4dc>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	e10b      	b.n	80024ea <task_Supervision+0x59a>
			}
		}
		else if (mode == MODE_CAM)
 80022d2:	4b55      	ldr	r3, [pc, #340]	; (8002428 <task_Supervision+0x4d8>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	f040 8107 	bne.w	80024ea <task_Supervision+0x59a>
		{
			dir = 'N';
 80022dc:	4b54      	ldr	r3, [pc, #336]	; (8002430 <task_Supervision+0x4e0>)
 80022de:	224e      	movs	r2, #78	; 0x4e
 80022e0:	701a      	strb	r2, [r3, #0]
			obs = 0;
 80022e2:	4b52      	ldr	r3, [pc, #328]	; (800242c <task_Supervision+0x4dc>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]

			if (x > CAMERA_X_MIN+CAMERA_X_TIER && x < CAMERA_X_MAX-CAMERA_X_TIER && y > CAMERA_Y_MIN && y <CAMERA_Y_MIN+CAMERA_Y_TIER) //AVANT
 80022e8:	4b52      	ldr	r3, [pc, #328]	; (8002434 <task_Supervision+0x4e4>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f5b3 7fab 	cmp.w	r3, #342	; 0x156
 80022f0:	db15      	blt.n	800231e <task_Supervision+0x3ce>
 80022f2:	4b50      	ldr	r3, [pc, #320]	; (8002434 <task_Supervision+0x4e4>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f240 22aa 	movw	r2, #682	; 0x2aa
 80022fa:	4293      	cmp	r3, r2
 80022fc:	dc0f      	bgt.n	800231e <task_Supervision+0x3ce>
 80022fe:	4b4e      	ldr	r3, [pc, #312]	; (8002438 <task_Supervision+0x4e8>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2b00      	cmp	r3, #0
 8002304:	dd0b      	ble.n	800231e <task_Supervision+0x3ce>
 8002306:	4b4c      	ldr	r3, [pc, #304]	; (8002438 <task_Supervision+0x4e8>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800230e:	dc06      	bgt.n	800231e <task_Supervision+0x3ce>
			{
				speedLeft = VITESSE_CAM;
 8002310:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002314:	867b      	strh	r3, [r7, #50]	; 0x32
				speedRight = VITESSE_CAM;
 8002316:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800231a:	863b      	strh	r3, [r7, #48]	; 0x30
 800231c:	e0e5      	b.n	80024ea <task_Supervision+0x59a>
			}
			else if (x > CAMERA_X_MAX-CAMERA_X_TIER && x < CAMERA_X_MAX && y > CAMERA_Y_MIN && y < CAMERA_Y_MIN+CAMERA_Y_TIER) //AVANT_DROITE:
 800231e:	4b45      	ldr	r3, [pc, #276]	; (8002434 <task_Supervision+0x4e4>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f5b3 7f2b 	cmp.w	r3, #684	; 0x2ac
 8002326:	db14      	blt.n	8002352 <task_Supervision+0x402>
 8002328:	4b42      	ldr	r3, [pc, #264]	; (8002434 <task_Supervision+0x4e4>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002330:	da0f      	bge.n	8002352 <task_Supervision+0x402>
 8002332:	4b41      	ldr	r3, [pc, #260]	; (8002438 <task_Supervision+0x4e8>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2b00      	cmp	r3, #0
 8002338:	dd0b      	ble.n	8002352 <task_Supervision+0x402>
 800233a:	4b3f      	ldr	r3, [pc, #252]	; (8002438 <task_Supervision+0x4e8>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8002342:	dc06      	bgt.n	8002352 <task_Supervision+0x402>
			{
				speedLeft = VITESSE_CAM;
 8002344:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002348:	867b      	strh	r3, [r7, #50]	; 0x32
				speedRight = VITESSE_CAM/2;
 800234a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800234e:	863b      	strh	r3, [r7, #48]	; 0x30
 8002350:	e0cb      	b.n	80024ea <task_Supervision+0x59a>
			}
			else if (x > CAMERA_X_MIN && x < CAMERA_X_MIN+CAMERA_X_TIER && y > CAMERA_Y_MIN && y < CAMERA_Y_MIN+CAMERA_Y_TIER) //AVANT_GAUCHE:
 8002352:	4b38      	ldr	r3, [pc, #224]	; (8002434 <task_Supervision+0x4e4>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	dd14      	ble.n	8002384 <task_Supervision+0x434>
 800235a:	4b36      	ldr	r3, [pc, #216]	; (8002434 <task_Supervision+0x4e4>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8002362:	dc0f      	bgt.n	8002384 <task_Supervision+0x434>
 8002364:	4b34      	ldr	r3, [pc, #208]	; (8002438 <task_Supervision+0x4e8>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2b00      	cmp	r3, #0
 800236a:	dd0b      	ble.n	8002384 <task_Supervision+0x434>
 800236c:	4b32      	ldr	r3, [pc, #200]	; (8002438 <task_Supervision+0x4e8>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8002374:	dc06      	bgt.n	8002384 <task_Supervision+0x434>
			{
				speedLeft = VITESSE_CAM/2;
 8002376:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800237a:	867b      	strh	r3, [r7, #50]	; 0x32
				speedRight = VITESSE_CAM;
 800237c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002380:	863b      	strh	r3, [r7, #48]	; 0x30
 8002382:	e0b2      	b.n	80024ea <task_Supervision+0x59a>
			}
			else if (x > CAMERA_X_MIN+CAMERA_X_TIER && x < CAMERA_X_MAX-CAMERA_X_TIER && y > CAMERA_Y_MIN+CAMERA_Y_TIER && y <CAMERA_Y_MAX-CAMERA_Y_TIER) //STOP
 8002384:	4b2b      	ldr	r3, [pc, #172]	; (8002434 <task_Supervision+0x4e4>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f5b3 7fab 	cmp.w	r3, #342	; 0x156
 800238c:	db15      	blt.n	80023ba <task_Supervision+0x46a>
 800238e:	4b29      	ldr	r3, [pc, #164]	; (8002434 <task_Supervision+0x4e4>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f240 22aa 	movw	r2, #682	; 0x2aa
 8002396:	4293      	cmp	r3, r2
 8002398:	dc0f      	bgt.n	80023ba <task_Supervision+0x46a>
 800239a:	4b27      	ldr	r3, [pc, #156]	; (8002438 <task_Supervision+0x4e8>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f5b3 7fab 	cmp.w	r3, #342	; 0x156
 80023a2:	db0a      	blt.n	80023ba <task_Supervision+0x46a>
 80023a4:	4b24      	ldr	r3, [pc, #144]	; (8002438 <task_Supervision+0x4e8>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f240 22aa 	movw	r2, #682	; 0x2aa
 80023ac:	4293      	cmp	r3, r2
 80023ae:	dc04      	bgt.n	80023ba <task_Supervision+0x46a>
			{
				speedLeft = 0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	867b      	strh	r3, [r7, #50]	; 0x32
				speedRight = 0;
 80023b4:	2300      	movs	r3, #0
 80023b6:	863b      	strh	r3, [r7, #48]	; 0x30
 80023b8:	e097      	b.n	80024ea <task_Supervision+0x59a>
			}
			else if (x > CAMERA_X_MAX-CAMERA_X_TIER && x < CAMERA_X_MAX && y > CAMERA_Y_MIN+CAMERA_Y_TIER && y <CAMERA_Y_MAX-CAMERA_Y_TIER) //DROITE
 80023ba:	4b1e      	ldr	r3, [pc, #120]	; (8002434 <task_Supervision+0x4e4>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f5b3 7f2b 	cmp.w	r3, #684	; 0x2ac
 80023c2:	db16      	blt.n	80023f2 <task_Supervision+0x4a2>
 80023c4:	4b1b      	ldr	r3, [pc, #108]	; (8002434 <task_Supervision+0x4e4>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023cc:	da11      	bge.n	80023f2 <task_Supervision+0x4a2>
 80023ce:	4b1a      	ldr	r3, [pc, #104]	; (8002438 <task_Supervision+0x4e8>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f5b3 7fab 	cmp.w	r3, #342	; 0x156
 80023d6:	db0c      	blt.n	80023f2 <task_Supervision+0x4a2>
 80023d8:	4b17      	ldr	r3, [pc, #92]	; (8002438 <task_Supervision+0x4e8>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f240 22aa 	movw	r2, #682	; 0x2aa
 80023e0:	4293      	cmp	r3, r2
 80023e2:	dc06      	bgt.n	80023f2 <task_Supervision+0x4a2>
			{
				speedLeft = VITESSE_CAM;
 80023e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023e8:	867b      	strh	r3, [r7, #50]	; 0x32
				speedRight = -VITESSE_CAM;
 80023ea:	f64f 4318 	movw	r3, #64536	; 0xfc18
 80023ee:	863b      	strh	r3, [r7, #48]	; 0x30
 80023f0:	e07b      	b.n	80024ea <task_Supervision+0x59a>
			}
			else if (x > CAMERA_X_MIN && x < CAMERA_X_MIN+CAMERA_X_TIER && y > CAMERA_Y_MIN+CAMERA_Y_TIER && y <CAMERA_Y_MAX-CAMERA_Y_TIER) //GAUCHE
 80023f2:	4b10      	ldr	r3, [pc, #64]	; (8002434 <task_Supervision+0x4e4>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	dd20      	ble.n	800243c <task_Supervision+0x4ec>
 80023fa:	4b0e      	ldr	r3, [pc, #56]	; (8002434 <task_Supervision+0x4e4>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8002402:	dc1b      	bgt.n	800243c <task_Supervision+0x4ec>
 8002404:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <task_Supervision+0x4e8>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f5b3 7fab 	cmp.w	r3, #342	; 0x156
 800240c:	db16      	blt.n	800243c <task_Supervision+0x4ec>
 800240e:	4b0a      	ldr	r3, [pc, #40]	; (8002438 <task_Supervision+0x4e8>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f240 22aa 	movw	r2, #682	; 0x2aa
 8002416:	4293      	cmp	r3, r2
 8002418:	dc10      	bgt.n	800243c <task_Supervision+0x4ec>
			{
				speedLeft = -VITESSE_CAM;
 800241a:	f64f 4318 	movw	r3, #64536	; 0xfc18
 800241e:	867b      	strh	r3, [r7, #50]	; 0x32
				speedRight = VITESSE_CAM;
 8002420:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002424:	863b      	strh	r3, [r7, #48]	; 0x30
 8002426:	e060      	b.n	80024ea <task_Supervision+0x59a>
 8002428:	20004be0 	.word	0x20004be0
 800242c:	20004bec 	.word	0x20004bec
 8002430:	20000008 	.word	0x20000008
 8002434:	20004be4 	.word	0x20004be4
 8002438:	20004be8 	.word	0x20004be8
			}
			else if (x > CAMERA_X_MIN+CAMERA_X_TIER && x < CAMERA_X_MAX-CAMERA_X_TIER && y > CAMERA_Y_MAX-CAMERA_Y_TIER && y < CAMERA_Y_MAX) //RECULE:
 800243c:	4b4a      	ldr	r3, [pc, #296]	; (8002568 <task_Supervision+0x618>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f5b3 7fab 	cmp.w	r3, #342	; 0x156
 8002444:	db16      	blt.n	8002474 <task_Supervision+0x524>
 8002446:	4b48      	ldr	r3, [pc, #288]	; (8002568 <task_Supervision+0x618>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f240 22aa 	movw	r2, #682	; 0x2aa
 800244e:	4293      	cmp	r3, r2
 8002450:	dc10      	bgt.n	8002474 <task_Supervision+0x524>
 8002452:	4b46      	ldr	r3, [pc, #280]	; (800256c <task_Supervision+0x61c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f5b3 7f2b 	cmp.w	r3, #684	; 0x2ac
 800245a:	db0b      	blt.n	8002474 <task_Supervision+0x524>
 800245c:	4b43      	ldr	r3, [pc, #268]	; (800256c <task_Supervision+0x61c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002464:	da06      	bge.n	8002474 <task_Supervision+0x524>
			{
				speedLeft = -VITESSE_CAM;
 8002466:	f64f 4318 	movw	r3, #64536	; 0xfc18
 800246a:	867b      	strh	r3, [r7, #50]	; 0x32
				speedRight = -VITESSE_CAM;
 800246c:	f64f 4318 	movw	r3, #64536	; 0xfc18
 8002470:	863b      	strh	r3, [r7, #48]	; 0x30
 8002472:	e03a      	b.n	80024ea <task_Supervision+0x59a>
			}
			else if (x > CAMERA_X_MAX-CAMERA_X_TIER && x < CAMERA_X_MAX && y > CAMERA_Y_MAX-CAMERA_Y_TIER && y < CAMERA_Y_MAX) //RECULE_DROITE:
 8002474:	4b3c      	ldr	r3, [pc, #240]	; (8002568 <task_Supervision+0x618>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f5b3 7f2b 	cmp.w	r3, #684	; 0x2ac
 800247c:	db15      	blt.n	80024aa <task_Supervision+0x55a>
 800247e:	4b3a      	ldr	r3, [pc, #232]	; (8002568 <task_Supervision+0x618>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002486:	da10      	bge.n	80024aa <task_Supervision+0x55a>
 8002488:	4b38      	ldr	r3, [pc, #224]	; (800256c <task_Supervision+0x61c>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f5b3 7f2b 	cmp.w	r3, #684	; 0x2ac
 8002490:	db0b      	blt.n	80024aa <task_Supervision+0x55a>
 8002492:	4b36      	ldr	r3, [pc, #216]	; (800256c <task_Supervision+0x61c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800249a:	da06      	bge.n	80024aa <task_Supervision+0x55a>
			{
				speedLeft = -VITESSE_CAM/2;
 800249c:	f64f 630c 	movw	r3, #65036	; 0xfe0c
 80024a0:	867b      	strh	r3, [r7, #50]	; 0x32
				speedRight = -VITESSE_CAM;
 80024a2:	f64f 4318 	movw	r3, #64536	; 0xfc18
 80024a6:	863b      	strh	r3, [r7, #48]	; 0x30
 80024a8:	e01f      	b.n	80024ea <task_Supervision+0x59a>
			}
			else if (x > CAMERA_X_MIN && x < CAMERA_X_MIN+CAMERA_X_TIER && y > CAMERA_Y_MAX-CAMERA_Y_TIER && y < CAMERA_Y_MAX) //RECULE_GAUCHE:
 80024aa:	4b2f      	ldr	r3, [pc, #188]	; (8002568 <task_Supervision+0x618>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	dd15      	ble.n	80024de <task_Supervision+0x58e>
 80024b2:	4b2d      	ldr	r3, [pc, #180]	; (8002568 <task_Supervision+0x618>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80024ba:	dc10      	bgt.n	80024de <task_Supervision+0x58e>
 80024bc:	4b2b      	ldr	r3, [pc, #172]	; (800256c <task_Supervision+0x61c>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f5b3 7f2b 	cmp.w	r3, #684	; 0x2ac
 80024c4:	db0b      	blt.n	80024de <task_Supervision+0x58e>
 80024c6:	4b29      	ldr	r3, [pc, #164]	; (800256c <task_Supervision+0x61c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ce:	da06      	bge.n	80024de <task_Supervision+0x58e>
			{
				speedLeft = -VITESSE_CAM;
 80024d0:	f64f 4318 	movw	r3, #64536	; 0xfc18
 80024d4:	867b      	strh	r3, [r7, #50]	; 0x32
				speedRight = -VITESSE_CAM/2;
 80024d6:	f64f 630c 	movw	r3, #65036	; 0xfe0c
 80024da:	863b      	strh	r3, [r7, #48]	; 0x30
 80024dc:	e005      	b.n	80024ea <task_Supervision+0x59a>
			}
			else
			{
				speedLeft = 0;
 80024de:	2300      	movs	r3, #0
 80024e0:	867b      	strh	r3, [r7, #50]	; 0x32
				speedRight = 0;
 80024e2:	2300      	movs	r3, #0
 80024e4:	863b      	strh	r3, [r7, #48]	; 0x30
 80024e6:	e000      	b.n	80024ea <task_Supervision+0x59a>
				if (obs > 10)
 80024e8:	bf00      	nop

		#if DEBUG_MOTOR
		printf("Motor L : %d || R : %d\r\n", speedLeft, speedRight);
		#endif

		xQueueSend( q_mot_L, ( void * ) &speedLeft,  portMAX_DELAY );
 80024ea:	4b21      	ldr	r3, [pc, #132]	; (8002570 <task_Supervision+0x620>)
 80024ec:	6818      	ldr	r0, [r3, #0]
 80024ee:	f107 0132 	add.w	r1, r7, #50	; 0x32
 80024f2:	2300      	movs	r3, #0
 80024f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024f8:	f007 fd42 	bl	8009f80 <xQueueGenericSend>
		xSemaphoreTake( xSem_Supervision, portMAX_DELAY );
 80024fc:	4b1d      	ldr	r3, [pc, #116]	; (8002574 <task_Supervision+0x624>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002504:	4618      	mov	r0, r3
 8002506:	f007 ffb5 	bl	800a474 <xQueueSemaphoreTake>

		xQueueSend( q_mot_R, ( void * ) &speedRight,  portMAX_DELAY );
 800250a:	4b1b      	ldr	r3, [pc, #108]	; (8002578 <task_Supervision+0x628>)
 800250c:	6818      	ldr	r0, [r3, #0]
 800250e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002512:	2300      	movs	r3, #0
 8002514:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002518:	f007 fd32 	bl	8009f80 <xQueueGenericSend>
		xSemaphoreTake( xSem_Supervision, portMAX_DELAY );
 800251c:	4b15      	ldr	r3, [pc, #84]	; (8002574 <task_Supervision+0x624>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002524:	4618      	mov	r0, r3
 8002526:	f007 ffa5 	bl	800a474 <xQueueSemaphoreTake>

	#if MICROROS
		MsgToPub.dir = dir;
 800252a:	4b14      	ldr	r3, [pc, #80]	; (800257c <task_Supervision+0x62c>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	723b      	strb	r3, [r7, #8]
		MsgToPub.mode = mode;
 8002530:	4b13      	ldr	r3, [pc, #76]	; (8002580 <task_Supervision+0x630>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	60fb      	str	r3, [r7, #12]
		MsgToPub.speed = speed;
 8002536:	4b13      	ldr	r3, [pc, #76]	; (8002584 <task_Supervision+0x634>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	613b      	str	r3, [r7, #16]
		if (!uxQueueMessagesWaiting(qhMR_pub))
 800253c:	4b12      	ldr	r3, [pc, #72]	; (8002588 <task_Supervision+0x638>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f008 f8a3 	bl	800a68c <uxQueueMessagesWaiting>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d108      	bne.n	800255e <task_Supervision+0x60e>
			xQueueSend(qhMR_pub, ( void * ) &MsgToPub, portMAX_DELAY);
 800254c:	4b0e      	ldr	r3, [pc, #56]	; (8002588 <task_Supervision+0x638>)
 800254e:	6818      	ldr	r0, [r3, #0]
 8002550:	f107 0108 	add.w	r1, r7, #8
 8002554:	2300      	movs	r3, #0
 8002556:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800255a:	f007 fd11 	bl	8009f80 <xQueueGenericSend>
			pxMessage.command=dir;
			xQueueSend( qhLCD, ( void * ) &pxMessage, portMAX_DELAY);
		}
	#endif //LCD

		vTaskDelay(SAMPLING_PERIOD_ms);
 800255e:	2005      	movs	r0, #5
 8002560:	f008 fbf0 	bl	800ad44 <vTaskDelay>
		if (uxQueueMessagesWaiting(qhMR_sub))
 8002564:	e4fa      	b.n	8001f5c <task_Supervision+0xc>
 8002566:	bf00      	nop
 8002568:	20004be4 	.word	0x20004be4
 800256c:	20004be8 	.word	0x20004be8
 8002570:	20004bc8 	.word	0x20004bc8
 8002574:	20004bc4 	.word	0x20004bc4
 8002578:	20004bcc 	.word	0x20004bcc
 800257c:	20000008 	.word	0x20000008
 8002580:	20004be0 	.word	0x20004be0
 8002584:	20000004 	.word	0x20000004
 8002588:	20004bd4 	.word	0x20004bd4

0800258c <main>:
#endif //SYNCHRO_EX
}

//=========================================================================
int main(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af02      	add	r7, sp, #8
  HAL_Init();
 8002592:	f001 fa93 	bl	8003abc <HAL_Init>
  SystemClock_Config();
 8002596:	f001 f9fd 	bl	8003994 <SystemClock_Config>
  MX_GPIO_Init();
 800259a:	f7fe ffef 	bl	800157c <MX_GPIO_Init>
  MX_DMA_Init();
 800259e:	f7ff f909 	bl	80017b4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80025a2:	f7ff f8dd 	bl	8001760 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80025a6:	f7ff f883 	bl	80016b0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80025aa:	f7ff f8af 	bl	800170c <MX_USART1_UART_Init>

  RetargetInit(&huart2); //make printf and scanf work with uart2
 80025ae:	4845      	ldr	r0, [pc, #276]	; (80026c4 <main+0x138>)
 80025b0:	f000 fc8c 	bl	8002ecc <RetargetInit>
  printf("%cc%c[2J%c[0;0HTitouan//Jeremy//Louanne\r\n", 0x1b, 0x1b, 0x1b);
 80025b4:	231b      	movs	r3, #27
 80025b6:	221b      	movs	r2, #27
 80025b8:	211b      	movs	r1, #27
 80025ba:	4843      	ldr	r0, [pc, #268]	; (80026c8 <main+0x13c>)
 80025bc:	f015 fe08 	bl	80181d0 <iprintf>

  motorCommand_Init();
 80025c0:	f000 fa5e 	bl	8002a80 <motorCommand_Init>
  quadEncoder_Init();
 80025c4:	f000 fad6 	bl	8002b74 <quadEncoder_Init>
  captDistIR_Init();
 80025c8:	f7fe fc5e 	bl	8000e88 <captDistIR_Init>

  HAL_Delay(500);
 80025cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025d0:	f001 fab6 	bl	8003b40 <HAL_Delay>
  groveLCD_setColor(1);
  groveLCD_term_printf("Titouan//Jeremy//Louanne");
  HAL_Delay(1000);
#endif

  osKernelInitialize();
 80025d4:	f007 fa48 	bl	8009a68 <osKernelInitialize>
	xTaskCreate(test_vl53, ( const portCHAR * ) "test_vl53", 128 /* stack size */, NULL, tskIDLE_PRIORITY, NULL);
#elif SYNCHRO_EX == EXTEST_MICROROS
    xTaskCreate(microros_task, ( const portCHAR * ) "microros_task", 3000 /* stack size */, NULL, tskIDLE_PRIORITY, NULL);
#elif SYNCHRO_EX == EXFINAL
	#if MICROROS
    xTaskCreate(microros_task, ( const portCHAR * ) "microros_task", 3000 /* stack size */, NULL, 24, NULL);
 80025d8:	2300      	movs	r3, #0
 80025da:	9301      	str	r3, [sp, #4]
 80025dc:	2318      	movs	r3, #24
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	2300      	movs	r3, #0
 80025e2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80025e6:	4939      	ldr	r1, [pc, #228]	; (80026cc <main+0x140>)
 80025e8:	4839      	ldr	r0, [pc, #228]	; (80026d0 <main+0x144>)
 80025ea:	f008 fa50 	bl	800aa8e <xTaskCreate>
	#endif //MICROROS
    xTaskCreate(task_Supervision, ( const portCHAR * ) "task Supervision", 128 /* stack size */, NULL, 27, NULL);
 80025ee:	2300      	movs	r3, #0
 80025f0:	9301      	str	r3, [sp, #4]
 80025f2:	231b      	movs	r3, #27
 80025f4:	9300      	str	r3, [sp, #0]
 80025f6:	2300      	movs	r3, #0
 80025f8:	2280      	movs	r2, #128	; 0x80
 80025fa:	4936      	ldr	r1, [pc, #216]	; (80026d4 <main+0x148>)
 80025fc:	4836      	ldr	r0, [pc, #216]	; (80026d8 <main+0x14c>)
 80025fe:	f008 fa46 	bl	800aa8e <xTaskCreate>
	xTaskCreate(task_Motor_Left, ( const portCHAR * ) "task Motor Left", 128 /* stack size */, NULL, 25, NULL);
 8002602:	2300      	movs	r3, #0
 8002604:	9301      	str	r3, [sp, #4]
 8002606:	2319      	movs	r3, #25
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	2300      	movs	r3, #0
 800260c:	2280      	movs	r2, #128	; 0x80
 800260e:	4933      	ldr	r1, [pc, #204]	; (80026dc <main+0x150>)
 8002610:	4833      	ldr	r0, [pc, #204]	; (80026e0 <main+0x154>)
 8002612:	f008 fa3c 	bl	800aa8e <xTaskCreate>
	xTaskCreate(task_Motor_Right, ( const portCHAR * ) "task Motor Right", 128 /* stack size */, NULL, 26, NULL);
 8002616:	2300      	movs	r3, #0
 8002618:	9301      	str	r3, [sp, #4]
 800261a:	231a      	movs	r3, #26
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	2300      	movs	r3, #0
 8002620:	2280      	movs	r2, #128	; 0x80
 8002622:	4930      	ldr	r1, [pc, #192]	; (80026e4 <main+0x158>)
 8002624:	4830      	ldr	r0, [pc, #192]	; (80026e8 <main+0x15c>)
 8002626:	f008 fa32 	bl	800aa8e <xTaskCreate>
	#if LCD
	xTaskCreate(task_Grove_LCD, ( const portCHAR * ) "task LCD", 128 /* stack size */, NULL, 23, NULL);
	#endif
#endif

    vSemaphoreCreateBinary(xSem_Supervision);
 800262a:	2203      	movs	r2, #3
 800262c:	2100      	movs	r1, #0
 800262e:	2001      	movs	r0, #1
 8002630:	f007 fc48 	bl	8009ec4 <xQueueGenericCreate>
 8002634:	4603      	mov	r3, r0
 8002636:	4a2d      	ldr	r2, [pc, #180]	; (80026ec <main+0x160>)
 8002638:	6013      	str	r3, [r2, #0]
 800263a:	4b2c      	ldr	r3, [pc, #176]	; (80026ec <main+0x160>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d006      	beq.n	8002650 <main+0xc4>
 8002642:	4b2a      	ldr	r3, [pc, #168]	; (80026ec <main+0x160>)
 8002644:	6818      	ldr	r0, [r3, #0]
 8002646:	2300      	movs	r3, #0
 8002648:	2200      	movs	r2, #0
 800264a:	2100      	movs	r1, #0
 800264c:	f007 fc98 	bl	8009f80 <xQueueGenericSend>
    xSemaphoreTake( xSem_Supervision, portMAX_DELAY );
 8002650:	4b26      	ldr	r3, [pc, #152]	; (80026ec <main+0x160>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002658:	4618      	mov	r0, r3
 800265a:	f007 ff0b 	bl	800a474 <xQueueSemaphoreTake>

    q_mot_L = xQueueCreate(1, sizeof(int16_t));
 800265e:	2200      	movs	r2, #0
 8002660:	2102      	movs	r1, #2
 8002662:	2001      	movs	r0, #1
 8002664:	f007 fc2e 	bl	8009ec4 <xQueueGenericCreate>
 8002668:	4603      	mov	r3, r0
 800266a:	4a21      	ldr	r2, [pc, #132]	; (80026f0 <main+0x164>)
 800266c:	6013      	str	r3, [r2, #0]
    q_mot_R = xQueueCreate(1, sizeof(int16_t));
 800266e:	2200      	movs	r2, #0
 8002670:	2102      	movs	r1, #2
 8002672:	2001      	movs	r0, #1
 8002674:	f007 fc26 	bl	8009ec4 <xQueueGenericCreate>
 8002678:	4603      	mov	r3, r0
 800267a:	4a1e      	ldr	r2, [pc, #120]	; (80026f4 <main+0x168>)
 800267c:	6013      	str	r3, [r2, #0]
    qhVl53 = xQueueCreate(1, sizeof(int));
 800267e:	2200      	movs	r2, #0
 8002680:	2104      	movs	r1, #4
 8002682:	2001      	movs	r0, #1
 8002684:	f007 fc1e 	bl	8009ec4 <xQueueGenericCreate>
 8002688:	4603      	mov	r3, r0
 800268a:	4a1b      	ldr	r2, [pc, #108]	; (80026f8 <main+0x16c>)
 800268c:	6013      	str	r3, [r2, #0]

    qhMR_sub = xQueueCreate(1, sizeof(MicroRosSubMsg));
 800268e:	2200      	movs	r2, #0
 8002690:	2114      	movs	r1, #20
 8002692:	2001      	movs	r0, #1
 8002694:	f007 fc16 	bl	8009ec4 <xQueueGenericCreate>
 8002698:	4603      	mov	r3, r0
 800269a:	4a18      	ldr	r2, [pc, #96]	; (80026fc <main+0x170>)
 800269c:	6013      	str	r3, [r2, #0]
    qhMR_pub = xQueueCreate(1, sizeof(MicroRosPubMsg));
 800269e:	2200      	movs	r2, #0
 80026a0:	210c      	movs	r1, #12
 80026a2:	2001      	movs	r0, #1
 80026a4:	f007 fc0e 	bl	8009ec4 <xQueueGenericCreate>
 80026a8:	4603      	mov	r3, r0
 80026aa:	4a15      	ldr	r2, [pc, #84]	; (8002700 <main+0x174>)
 80026ac:	6013      	str	r3, [r2, #0]
    qhLCD = xQueueCreate(1, sizeof(AMessage));
 80026ae:	2200      	movs	r2, #0
 80026b0:	2108      	movs	r1, #8
 80026b2:	2001      	movs	r0, #1
 80026b4:	f007 fc06 	bl	8009ec4 <xQueueGenericCreate>
 80026b8:	4603      	mov	r3, r0
 80026ba:	4a12      	ldr	r2, [pc, #72]	; (8002704 <main+0x178>)
 80026bc:	6013      	str	r3, [r2, #0]

  osKernelStart();
 80026be:	f007 f9f7 	bl	8009ab0 <osKernelStart>
  while(1)
 80026c2:	e7fe      	b.n	80026c2 <main+0x136>
 80026c4:	20004a00 	.word	0x20004a00
 80026c8:	08019720 	.word	0x08019720
 80026cc:	0801974c 	.word	0x0801974c
 80026d0:	0800188d 	.word	0x0800188d
 80026d4:	0801975c 	.word	0x0801975c
 80026d8:	08001f51 	.word	0x08001f51
 80026dc:	08019770 	.word	0x08019770
 80026e0:	08001d49 	.word	0x08001d49
 80026e4:	08019780 	.word	0x08019780
 80026e8:	08001e51 	.word	0x08001e51
 80026ec:	20004bc4 	.word	0x20004bc4
 80026f0:	20004bc8 	.word	0x20004bc8
 80026f4:	20004bcc 	.word	0x20004bcc
 80026f8:	20004bdc 	.word	0x20004bdc
 80026fc:	20004bd0 	.word	0x20004bd0
 8002700:	20004bd4 	.word	0x20004bd4
 8002704:	20004bd8 	.word	0x20004bd8

08002708 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM4)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a04      	ldr	r2, [pc, #16]	; (8002728 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d101      	bne.n	800271e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800271a:	f001 f9f1 	bl	8003b00 <HAL_IncTick>
  }
}
 800271e:	bf00      	nop
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	40000800 	.word	0x40000800

0800272c <Error_Handler>:
//=========================================================================
void Error_Handler(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002730:	b672      	cpsid	i
}
 8002732:	bf00      	nop
  __disable_irq();
  while (1)
 8002734:	e7fe      	b.n	8002734 <Error_Handler+0x8>
	...

08002738 <createPublisher>:
void createPublisher(rcl_publisher_t* publisher,
	const rcl_node_t* node,
	const rosidl_message_type_support_t* type_support,
	const char* topic_name,
	std_msgs__msg__Int32* msg)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
 8002744:	603b      	str	r3, [r7, #0]
	rcl_ret_t ret = rclc_publisher_init_default(publisher, node, type_support, topic_name);
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	68b9      	ldr	r1, [r7, #8]
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	f00a ffaf 	bl	800d6b0 <rclc_publisher_init_default>
 8002752:	6178      	str	r0, [r7, #20]
	printf("Publisher %s is created with result %d\r\n", topic_name, (int)ret);
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	6839      	ldr	r1, [r7, #0]
 8002758:	4804      	ldr	r0, [pc, #16]	; (800276c <createPublisher+0x34>)
 800275a:	f015 fd39 	bl	80181d0 <iprintf>
#if STRING == 1
	(*msg).data.data = (char * ) malloc(ARRAY_LEN * sizeof(char));
	(*msg).data.size = 0;
	(*msg).data.capacity = ARRAY_LEN;
#else
	(*msg).data = 0;
 800275e:	6a3b      	ldr	r3, [r7, #32]
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
#endif

}
 8002764:	bf00      	nop
 8002766:	3718      	adds	r7, #24
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	080197fc 	.word	0x080197fc

08002770 <createSubscriber>:
void createSubscriber(rcl_subscription_t* subscription,
	const rcl_node_t* node,
	const rosidl_message_type_support_t* type_support,
	const char* topic_name,
	std_msgs__msg__Int32* msg)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
 800277c:	603b      	str	r3, [r7, #0]
	*subscription = rcl_get_zero_initialized_subscription();
 800277e:	f00a fa3f 	bl	800cc00 <rcl_get_zero_initialized_subscription>
 8002782:	4602      	mov	r2, r0
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	601a      	str	r2, [r3, #0]

	rcl_ret_t ret = rclc_subscription_init_default(subscription, node,
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	68b9      	ldr	r1, [r7, #8]
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f00a ffc2 	bl	800d718 <rclc_subscription_init_default>
 8002794:	6178      	str	r0, [r7, #20]
		type_support, topic_name);
	printf("Subscription %s is created with result %d\r\n", topic_name, (int)ret);
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	6839      	ldr	r1, [r7, #0]
 800279a:	4805      	ldr	r0, [pc, #20]	; (80027b0 <createSubscriber+0x40>)
 800279c:	f015 fd18 	bl	80181d0 <iprintf>
#if STRING == 1
	(*msg).data.data = (char * ) malloc(ARRAY_LEN * sizeof(char));
	(*msg).data.size = 0;
	(*msg).data.capacity = ARRAY_LEN;
#else
	(*msg).data = 0;
 80027a0:	6a3b      	ldr	r3, [r7, #32]
 80027a2:	2200      	movs	r2, #0
 80027a4:	601a      	str	r2, [r3, #0]
#endif
}
 80027a6:	bf00      	nop
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	08019828 	.word	0x08019828

080027b4 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80027be:	4b0c      	ldr	r3, [pc, #48]	; (80027f0 <microros_allocate+0x3c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	461a      	mov	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4413      	add	r3, r2
 80027c8:	461a      	mov	r2, r3
 80027ca:	4b09      	ldr	r3, [pc, #36]	; (80027f0 <microros_allocate+0x3c>)
 80027cc:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80027ce:	4b09      	ldr	r3, [pc, #36]	; (80027f4 <microros_allocate+0x40>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	461a      	mov	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4413      	add	r3, r2
 80027d8:	461a      	mov	r2, r3
 80027da:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <microros_allocate+0x40>)
 80027dc:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7fe fbc8 	bl	8000f74 <pvPortMallocMicroROS>
 80027e4:	4603      	mov	r3, r0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	20004bf0 	.word	0x20004bf0
 80027f4:	20004bf4 	.word	0x20004bf4

080027f8 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00c      	beq.n	8002822 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f7fe fcd1 	bl	80011b0 <getBlockSize>
 800280e:	4603      	mov	r3, r0
 8002810:	4a06      	ldr	r2, [pc, #24]	; (800282c <microros_deallocate+0x34>)
 8002812:	6812      	ldr	r2, [r2, #0]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	461a      	mov	r2, r3
 8002818:	4b04      	ldr	r3, [pc, #16]	; (800282c <microros_deallocate+0x34>)
 800281a:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f7fe fc6d 	bl	80010fc <vPortFreeMicroROS>
  }
}
 8002822:	bf00      	nop
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	20004bf4 	.word	0x20004bf4

08002830 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800283c:	4b15      	ldr	r3, [pc, #84]	; (8002894 <microros_reallocate+0x64>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	461a      	mov	r2, r3
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	4413      	add	r3, r2
 8002846:	461a      	mov	r2, r3
 8002848:	4b12      	ldr	r3, [pc, #72]	; (8002894 <microros_reallocate+0x64>)
 800284a:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800284c:	4b12      	ldr	r3, [pc, #72]	; (8002898 <microros_reallocate+0x68>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	461a      	mov	r2, r3
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	4413      	add	r3, r2
 8002856:	461a      	mov	r2, r3
 8002858:	4b0f      	ldr	r3, [pc, #60]	; (8002898 <microros_reallocate+0x68>)
 800285a:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d104      	bne.n	800286c <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8002862:	68b8      	ldr	r0, [r7, #8]
 8002864:	f7fe fb86 	bl	8000f74 <pvPortMallocMicroROS>
 8002868:	4603      	mov	r3, r0
 800286a:	e00e      	b.n	800288a <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f7fe fc9f 	bl	80011b0 <getBlockSize>
 8002872:	4603      	mov	r3, r0
 8002874:	4a08      	ldr	r2, [pc, #32]	; (8002898 <microros_reallocate+0x68>)
 8002876:	6812      	ldr	r2, [r2, #0]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	461a      	mov	r2, r3
 800287c:	4b06      	ldr	r3, [pc, #24]	; (8002898 <microros_reallocate+0x68>)
 800287e:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8002880:	68b9      	ldr	r1, [r7, #8]
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f7fe fcb2 	bl	80011ec <pvPortReallocMicroROS>
 8002888:	4603      	mov	r3, r0
  }
}
 800288a:	4618      	mov	r0, r3
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	20004bf0 	.word	0x20004bf0
 8002898:	20004bf4 	.word	0x20004bf4

0800289c <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	68ba      	ldr	r2, [r7, #8]
 80028ac:	fb02 f303 	mul.w	r3, r2, r3
 80028b0:	4a0c      	ldr	r2, [pc, #48]	; (80028e4 <microros_zero_allocate+0x48>)
 80028b2:	6812      	ldr	r2, [r2, #0]
 80028b4:	4413      	add	r3, r2
 80028b6:	461a      	mov	r2, r3
 80028b8:	4b0a      	ldr	r3, [pc, #40]	; (80028e4 <microros_zero_allocate+0x48>)
 80028ba:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	68ba      	ldr	r2, [r7, #8]
 80028c0:	fb02 f303 	mul.w	r3, r2, r3
 80028c4:	4a08      	ldr	r2, [pc, #32]	; (80028e8 <microros_zero_allocate+0x4c>)
 80028c6:	6812      	ldr	r2, [r2, #0]
 80028c8:	4413      	add	r3, r2
 80028ca:	461a      	mov	r2, r3
 80028cc:	4b06      	ldr	r3, [pc, #24]	; (80028e8 <microros_zero_allocate+0x4c>)
 80028ce:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80028d0:	68b9      	ldr	r1, [r7, #8]
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f7fe fcc4 	bl	8001260 <pvPortCallocMicroROS>
 80028d8:	4603      	mov	r3, r0
 80028da:	4618      	mov	r0, r3
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	20004bf0 	.word	0x20004bf0
 80028e8:	20004bf4 	.word	0x20004bf4
 80028ec:	00000000 	.word	0x00000000

080028f0 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80028f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80028f4:	b086      	sub	sp, #24
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80028fc:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80028fe:	2300      	movs	r3, #0
 8002900:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8002902:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002906:	a320      	add	r3, pc, #128	; (adr r3, 8002988 <UTILS_NanosecondsToTimespec+0x98>)
 8002908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800290c:	f7fe f8ee 	bl	8000aec <__aeabi_ldivmod>
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	6879      	ldr	r1, [r7, #4]
 8002916:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800291a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800291e:	a31a      	add	r3, pc, #104	; (adr r3, 8002988 <UTILS_NanosecondsToTimespec+0x98>)
 8002920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002924:	f7fe f8e2 	bl	8000aec <__aeabi_ldivmod>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	2b00      	cmp	r3, #0
 8002932:	da20      	bge.n	8002976 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	4a11      	ldr	r2, [pc, #68]	; (8002980 <UTILS_NanosecondsToTimespec+0x90>)
 800293a:	fb82 1203 	smull	r1, r2, r2, r3
 800293e:	1712      	asrs	r2, r2, #28
 8002940:	17db      	asrs	r3, r3, #31
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	3301      	adds	r3, #1
 8002946:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800294e:	6979      	ldr	r1, [r7, #20]
 8002950:	17c8      	asrs	r0, r1, #31
 8002952:	460c      	mov	r4, r1
 8002954:	4605      	mov	r5, r0
 8002956:	ebb2 0804 	subs.w	r8, r2, r4
 800295a:	eb63 0905 	sbc.w	r9, r3, r5
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	4906      	ldr	r1, [pc, #24]	; (8002984 <UTILS_NanosecondsToTimespec+0x94>)
 800296c:	fb01 f303 	mul.w	r3, r1, r3
 8002970:	441a      	add	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	609a      	str	r2, [r3, #8]
    }
}
 8002976:	bf00      	nop
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002980:	44b82fa1 	.word	0x44b82fa1
 8002984:	3b9aca00 	.word	0x3b9aca00
 8002988:	3b9aca00 	.word	0x3b9aca00
 800298c:	00000000 	.word	0x00000000

08002990 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002990:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002994:	b08e      	sub	sp, #56	; 0x38
 8002996:	af00      	add	r7, sp, #0
 8002998:	6278      	str	r0, [r7, #36]	; 0x24
 800299a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 800299c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80029a0:	2300      	movs	r3, #0
 80029a2:	6013      	str	r3, [r2, #0]
 80029a4:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80029a6:	f04f 0200 	mov.w	r2, #0
 80029aa:	f04f 0300 	mov.w	r3, #0
 80029ae:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80029b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029b6:	4618      	mov	r0, r3
 80029b8:	f008 fcf6 	bl	800b3a8 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80029bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029be:	17da      	asrs	r2, r3, #31
 80029c0:	61bb      	str	r3, [r7, #24]
 80029c2:	61fa      	str	r2, [r7, #28]
 80029c4:	f04f 0200 	mov.w	r2, #0
 80029c8:	f04f 0300 	mov.w	r3, #0
 80029cc:	69b9      	ldr	r1, [r7, #24]
 80029ce:	000b      	movs	r3, r1
 80029d0:	2200      	movs	r2, #0
 80029d2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80029d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d8:	2200      	movs	r2, #0
 80029da:	461c      	mov	r4, r3
 80029dc:	4615      	mov	r5, r2
 80029de:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80029e2:	1911      	adds	r1, r2, r4
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	416b      	adcs	r3, r5
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80029ee:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80029f2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80029f6:	4602      	mov	r2, r0
 80029f8:	460b      	mov	r3, r1
 80029fa:	f04f 0400 	mov.w	r4, #0
 80029fe:	f04f 0500 	mov.w	r5, #0
 8002a02:	015d      	lsls	r5, r3, #5
 8002a04:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002a08:	0154      	lsls	r4, r2, #5
 8002a0a:	4622      	mov	r2, r4
 8002a0c:	462b      	mov	r3, r5
 8002a0e:	ebb2 0800 	subs.w	r8, r2, r0
 8002a12:	eb63 0901 	sbc.w	r9, r3, r1
 8002a16:	f04f 0200 	mov.w	r2, #0
 8002a1a:	f04f 0300 	mov.w	r3, #0
 8002a1e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002a22:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002a26:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8002a2a:	4690      	mov	r8, r2
 8002a2c:	4699      	mov	r9, r3
 8002a2e:	eb18 0a00 	adds.w	sl, r8, r0
 8002a32:	eb49 0b01 	adc.w	fp, r9, r1
 8002a36:	f04f 0200 	mov.w	r2, #0
 8002a3a:	f04f 0300 	mov.w	r3, #0
 8002a3e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a42:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a46:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a4a:	ebb2 040a 	subs.w	r4, r2, sl
 8002a4e:	603c      	str	r4, [r7, #0]
 8002a50:	eb63 030b 	sbc.w	r3, r3, fp
 8002a54:	607b      	str	r3, [r7, #4]
 8002a56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a5a:	4623      	mov	r3, r4
 8002a5c:	181b      	adds	r3, r3, r0
 8002a5e:	613b      	str	r3, [r7, #16]
 8002a60:	462b      	mov	r3, r5
 8002a62:	eb41 0303 	adc.w	r3, r1, r3
 8002a66:	617b      	str	r3, [r7, #20]
 8002a68:	6a3a      	ldr	r2, [r7, #32]
 8002a6a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002a6e:	f7ff ff3f 	bl	80028f0 <UTILS_NanosecondsToTimespec>

    return 0;
 8002a72:	2300      	movs	r3, #0
 8002a74:	4618      	mov	r0, r3
 8002a76:	3738      	adds	r7, #56	; 0x38
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002a80 <motorCommand_Init>:
// TIMER 3 (PWM)  : CH1 et CH2
// ENABLE : Sortie Logique (GPIO) PA7
//=================================================================

void motorCommand_Init(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
	unsigned int uwPrescalerValue = 0;
 8002a86:	2300      	movs	r3, #0
 8002a88:	607b      	str	r3, [r7, #4]

	/* Compute the prescaler value to have TIM4 counter clock equal to 10MHz */
	  uwPrescalerValue = (unsigned int) ((SystemCoreClock / 10000000) - 1);
 8002a8a:	4b24      	ldr	r3, [pc, #144]	; (8002b1c <motorCommand_Init+0x9c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a24      	ldr	r2, [pc, #144]	; (8002b20 <motorCommand_Init+0xa0>)
 8002a90:	fba2 2303 	umull	r2, r3, r2, r3
 8002a94:	0d9b      	lsrs	r3, r3, #22
 8002a96:	3b01      	subs	r3, #1
 8002a98:	607b      	str	r3, [r7, #4]
	  TimHandle.Instance = TIM3;
 8002a9a:	4b22      	ldr	r3, [pc, #136]	; (8002b24 <motorCommand_Init+0xa4>)
 8002a9c:	4a22      	ldr	r2, [pc, #136]	; (8002b28 <motorCommand_Init+0xa8>)
 8002a9e:	601a      	str	r2, [r3, #0]
	  TimHandle.Init.Period = 200 - 1; // 100MHz/200=50kHz
 8002aa0:	4b20      	ldr	r3, [pc, #128]	; (8002b24 <motorCommand_Init+0xa4>)
 8002aa2:	22c7      	movs	r2, #199	; 0xc7
 8002aa4:	60da      	str	r2, [r3, #12]
	  TimHandle.Init.Prescaler = uwPrescalerValue;
 8002aa6:	4a1f      	ldr	r2, [pc, #124]	; (8002b24 <motorCommand_Init+0xa4>)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6053      	str	r3, [r2, #4]
	  TimHandle.Init.ClockDivision = 0;
 8002aac:	4b1d      	ldr	r3, [pc, #116]	; (8002b24 <motorCommand_Init+0xa4>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	611a      	str	r2, [r3, #16]
	  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ab2:	4b1c      	ldr	r3, [pc, #112]	; (8002b24 <motorCommand_Init+0xa4>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	609a      	str	r2, [r3, #8]

	  HAL_TIM_Base_Init(&TimHandle);
 8002ab8:	481a      	ldr	r0, [pc, #104]	; (8002b24 <motorCommand_Init+0xa4>)
 8002aba:	f004 fc9f 	bl	80073fc <HAL_TIM_Base_Init>

	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002abe:	4b1b      	ldr	r3, [pc, #108]	; (8002b2c <motorCommand_Init+0xac>)
 8002ac0:	2260      	movs	r2, #96	; 0x60
 8002ac2:	601a      	str	r2, [r3, #0]
	  sConfigOC.Pulse = 0x5;// Specifies the pulse value to be loaded into the Capture Compare Register. This parameter can be a number between Min_Data = 0x0000 and Max_Data = 0xFFFF */
 8002ac4:	4b19      	ldr	r3, [pc, #100]	; (8002b2c <motorCommand_Init+0xac>)
 8002ac6:	2205      	movs	r2, #5
 8002ac8:	605a      	str	r2, [r3, #4]

	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002aca:	4b18      	ldr	r3, [pc, #96]	; (8002b2c <motorCommand_Init+0xac>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	609a      	str	r2, [r3, #8]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ad0:	4b16      	ldr	r3, [pc, #88]	; (8002b2c <motorCommand_Init+0xac>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	611a      	str	r2, [r3, #16]

	 HAL_TIM_PWM_ConfigChannel(&TimHandle, &sConfigOC, TIM_CHANNEL_1);
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	4914      	ldr	r1, [pc, #80]	; (8002b2c <motorCommand_Init+0xac>)
 8002ada:	4812      	ldr	r0, [pc, #72]	; (8002b24 <motorCommand_Init+0xa4>)
 8002adc:	f005 f840 	bl	8007b60 <HAL_TIM_PWM_ConfigChannel>
	 HAL_TIM_PWM_ConfigChannel(&TimHandle, &sConfigOC, TIM_CHANNEL_2);
 8002ae0:	2204      	movs	r2, #4
 8002ae2:	4912      	ldr	r1, [pc, #72]	; (8002b2c <motorCommand_Init+0xac>)
 8002ae4:	480f      	ldr	r0, [pc, #60]	; (8002b24 <motorCommand_Init+0xa4>)
 8002ae6:	f005 f83b 	bl	8007b60 <HAL_TIM_PWM_ConfigChannel>

	 // CHANGEMENT DU RAPPORT CYCLIQUE
	 __HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_1, 100);	// 100 : moteurs au repos
 8002aea:	4b0e      	ldr	r3, [pc, #56]	; (8002b24 <motorCommand_Init+0xa4>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2264      	movs	r2, #100	; 0x64
 8002af0:	635a      	str	r2, [r3, #52]	; 0x34
	 __HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_2, 100);
 8002af2:	4b0c      	ldr	r3, [pc, #48]	; (8002b24 <motorCommand_Init+0xa4>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2264      	movs	r2, #100	; 0x64
 8002af8:	639a      	str	r2, [r3, #56]	; 0x38

	  HAL_TIM_PWM_Start(&TimHandle, TIM_CHANNEL_1);	// MOTOR RIGHT
 8002afa:	2100      	movs	r1, #0
 8002afc:	4809      	ldr	r0, [pc, #36]	; (8002b24 <motorCommand_Init+0xa4>)
 8002afe:	f004 fd39 	bl	8007574 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&TimHandle, TIM_CHANNEL_2); // MOTOR LEFT
 8002b02:	2104      	movs	r1, #4
 8002b04:	4807      	ldr	r0, [pc, #28]	; (8002b24 <motorCommand_Init+0xa4>)
 8002b06:	f004 fd35 	bl	8007574 <HAL_TIM_PWM_Start>

	  // ENABLE MOTEUR (SI INVERSEUR)
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	2108      	movs	r1, #8
 8002b0e:	4808      	ldr	r0, [pc, #32]	; (8002b30 <motorCommand_Init+0xb0>)
 8002b10:	f002 f980 	bl	8004e14 <HAL_GPIO_WritePin>
}
 8002b14:	bf00      	nop
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	2000000c 	.word	0x2000000c
 8002b20:	6b5fca6b 	.word	0x6b5fca6b
 8002b24:	20004bf8 	.word	0x20004bf8
 8002b28:	40000400 	.word	0x40000400
 8002b2c:	20004c40 	.word	0x20004c40
 8002b30:	40020400 	.word	0x40020400

08002b34 <motorLeft_SetDuty>:

//=================================================================
//			SET DUTY CYCLE LEFT
//=================================================================
void motorLeft_SetDuty(int duty)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_1, duty);
 8002b3c:	4b04      	ldr	r3, [pc, #16]	; (8002b50 <motorLeft_SetDuty+0x1c>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	20004bf8 	.word	0x20004bf8

08002b54 <motorRight_SetDuty>:
//=================================================================
//			SET DUTY CYCLE RIGHT
//=================================================================
void motorRight_SetDuty(int duty)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_2, duty);
 8002b5c:	4b04      	ldr	r3, [pc, #16]	; (8002b70 <motorRight_SetDuty+0x1c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	20004bf8 	.word	0x20004bf8

08002b74 <quadEncoder_Init>:
//================================================================
//		TIMER INIT
//================================================================

void quadEncoder_Init(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b08a      	sub	sp, #40	; 0x28
 8002b78:	af00      	add	r7, sp, #0
	TIM_Encoder_InitTypeDef sConfig;
	//--------------------------------------------------
	// TIMER 1
	//--------------------------------------------------
	TimEncoderHandleLeft.Instance = TIM1;
 8002b7a:	4b35      	ldr	r3, [pc, #212]	; (8002c50 <quadEncoder_Init+0xdc>)
 8002b7c:	4a35      	ldr	r2, [pc, #212]	; (8002c54 <quadEncoder_Init+0xe0>)
 8002b7e:	601a      	str	r2, [r3, #0]
	TimEncoderHandleLeft.Init.Prescaler = 0;
 8002b80:	4b33      	ldr	r3, [pc, #204]	; (8002c50 <quadEncoder_Init+0xdc>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	605a      	str	r2, [r3, #4]
	TimEncoderHandleLeft.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b86:	4b32      	ldr	r3, [pc, #200]	; (8002c50 <quadEncoder_Init+0xdc>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	609a      	str	r2, [r3, #8]
	TimEncoderHandleLeft.Init.Period = COUNT_PER_ROUND*4;
 8002b8c:	4b30      	ldr	r3, [pc, #192]	; (8002c50 <quadEncoder_Init+0xdc>)
 8002b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b92:	60da      	str	r2, [r3, #12]
	TimEncoderHandleLeft.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b94:	4b2e      	ldr	r3, [pc, #184]	; (8002c50 <quadEncoder_Init+0xdc>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	611a      	str	r2, [r3, #16]

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	607b      	str	r3, [r7, #4]
	sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60bb      	str	r3, [r7, #8]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 8002ba6:	2308      	movs	r3, #8
 8002ba8:	613b      	str	r3, [r7, #16]
	sConfig.IC1Filter = 0x0F;
 8002baa:	230f      	movs	r3, #15
 8002bac:	617b      	str	r3, [r7, #20]
	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61bb      	str	r3, [r7, #24]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;//TIM_ICSELECTION_DIRECTTI; //TIM_TI1SELECTION_XORCOMBINATION
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 8002bb6:	2308      	movs	r3, #8
 8002bb8:	623b      	str	r3, [r7, #32]
	sConfig.IC2Filter = 0x0F;
 8002bba:	230f      	movs	r3, #15
 8002bbc:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_TIM_Encoder_Init(&TimEncoderHandleLeft, &sConfig);
 8002bbe:	1d3b      	adds	r3, r7, #4
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	4823      	ldr	r0, [pc, #140]	; (8002c50 <quadEncoder_Init+0xdc>)
 8002bc4:	f004 fd86 	bl	80076d4 <HAL_TIM_Encoder_Init>

	__HAL_TIM_SetCounter(&TimEncoderHandleLeft, 0);
 8002bc8:	4b21      	ldr	r3, [pc, #132]	; (8002c50 <quadEncoder_Init+0xdc>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_1);
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	481f      	ldr	r0, [pc, #124]	; (8002c50 <quadEncoder_Init+0xdc>)
 8002bd4:	f004 fe2e 	bl	8007834 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_2);
 8002bd8:	2104      	movs	r1, #4
 8002bda:	481d      	ldr	r0, [pc, #116]	; (8002c50 <quadEncoder_Init+0xdc>)
 8002bdc:	f004 fe2a 	bl	8007834 <HAL_TIM_Encoder_Start>

	//--------------------------------------------------
	// TIMER 2
	//--------------------------------------------------
	TimEncoderHandleRight.Instance = TIM2;
 8002be0:	4b1d      	ldr	r3, [pc, #116]	; (8002c58 <quadEncoder_Init+0xe4>)
 8002be2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002be6:	601a      	str	r2, [r3, #0]
	TimEncoderHandleRight.Init.Prescaler = 0;
 8002be8:	4b1b      	ldr	r3, [pc, #108]	; (8002c58 <quadEncoder_Init+0xe4>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	605a      	str	r2, [r3, #4]
	TimEncoderHandleRight.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bee:	4b1a      	ldr	r3, [pc, #104]	; (8002c58 <quadEncoder_Init+0xe4>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	609a      	str	r2, [r3, #8]
	TimEncoderHandleRight.Init.Period = COUNT_PER_ROUND*4;
 8002bf4:	4b18      	ldr	r3, [pc, #96]	; (8002c58 <quadEncoder_Init+0xe4>)
 8002bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bfa:	60da      	str	r2, [r3, #12]
	TimEncoderHandleRight.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bfc:	4b16      	ldr	r3, [pc, #88]	; (8002c58 <quadEncoder_Init+0xe4>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	611a      	str	r2, [r3, #16]

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002c02:	2303      	movs	r3, #3
 8002c04:	607b      	str	r3, [r7, #4]
	sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002c06:	2300      	movs	r3, #0
 8002c08:	60bb      	str	r3, [r7, #8]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 8002c0e:	2308      	movs	r3, #8
 8002c10:	613b      	str	r3, [r7, #16]
	sConfig.IC1Filter = 0x0F;
 8002c12:	230f      	movs	r3, #15
 8002c14:	617b      	str	r3, [r7, #20]
	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002c16:	2300      	movs	r3, #0
 8002c18:	61bb      	str	r3, [r7, #24]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;//TIM_ICSELECTION_DIRECTTI; //TIM_TI1SELECTION_XORCOMBINATION
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 8002c1e:	2308      	movs	r3, #8
 8002c20:	623b      	str	r3, [r7, #32]
	sConfig.IC2Filter = 0x0F;
 8002c22:	230f      	movs	r3, #15
 8002c24:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_TIM_Encoder_Init(&TimEncoderHandleRight, &sConfig);
 8002c26:	1d3b      	adds	r3, r7, #4
 8002c28:	4619      	mov	r1, r3
 8002c2a:	480b      	ldr	r0, [pc, #44]	; (8002c58 <quadEncoder_Init+0xe4>)
 8002c2c:	f004 fd52 	bl	80076d4 <HAL_TIM_Encoder_Init>

	__HAL_TIM_SetCounter(&TimEncoderHandleRight, 0);
 8002c30:	4b09      	ldr	r3, [pc, #36]	; (8002c58 <quadEncoder_Init+0xe4>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2200      	movs	r2, #0
 8002c36:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_1);
 8002c38:	2100      	movs	r1, #0
 8002c3a:	4807      	ldr	r0, [pc, #28]	; (8002c58 <quadEncoder_Init+0xe4>)
 8002c3c:	f004 fdfa 	bl	8007834 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_2);
 8002c40:	2104      	movs	r1, #4
 8002c42:	4805      	ldr	r0, [pc, #20]	; (8002c58 <quadEncoder_Init+0xe4>)
 8002c44:	f004 fdf6 	bl	8007834 <HAL_TIM_Encoder_Start>
}
 8002c48:	bf00      	nop
 8002c4a:	3728      	adds	r7, #40	; 0x28
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	20004c5c 	.word	0x20004c5c
 8002c54:	40010000 	.word	0x40010000
 8002c58:	20004ca4 	.word	0x20004ca4

08002c5c <quadEncoder_PosCalcL>:
//================================================================
//		POSITION LEFT CALC
//================================================================

void quadEncoder_PosCalcL(int* AngPos)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]

int POSCNTcopy = 0;
 8002c64:	2300      	movs	r3, #0
 8002c66:	60fb      	str	r3, [r7, #12]
POSCNTcopy = (int)TIM1->CNT;
 8002c68:	4b0c      	ldr	r3, [pc, #48]	; (8002c9c <quadEncoder_PosCalcL+0x40>)
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6c:	60fb      	str	r3, [r7, #12]
AngPos[1] = AngPos[0];
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	3304      	adds	r3, #4
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	6812      	ldr	r2, [r2, #0]
 8002c76:	601a      	str	r2, [r3, #0]
AngPos[0] = (unsigned int)(((unsigned long)POSCNTcopy * COEFF)/1000); // 0 <= POSCNT <= 4999 to 0 <= AngPos <= 32767
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f641 129b 	movw	r2, #6555	; 0x199b
 8002c7e:	fb02 f303 	mul.w	r3, r2, r3
 8002c82:	4a07      	ldr	r2, [pc, #28]	; (8002ca0 <quadEncoder_PosCalcL+0x44>)
 8002c84:	fba2 2303 	umull	r2, r3, r2, r3
 8002c88:	099b      	lsrs	r3, r3, #6
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	601a      	str	r2, [r3, #0]
}
 8002c90:	bf00      	nop
 8002c92:	3714      	adds	r7, #20
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	40010000 	.word	0x40010000
 8002ca0:	10624dd3 	.word	0x10624dd3

08002ca4 <quadEncoder_PosCalcR>:
//================================================================
//		POSITION RIGHT CALC
//================================================================

void quadEncoder_PosCalcR(int* AngPos)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]

int POSCNTcopy = 0;
 8002cac:	2300      	movs	r3, #0
 8002cae:	60fb      	str	r3, [r7, #12]
POSCNTcopy = (int)TIM2->CNT;
 8002cb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb6:	60fb      	str	r3, [r7, #12]
AngPos[1] = AngPos[0];
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	3304      	adds	r3, #4
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	6812      	ldr	r2, [r2, #0]
 8002cc0:	601a      	str	r2, [r3, #0]
AngPos[0] = (unsigned int)(((unsigned long)POSCNTcopy * COEFF)/1000); // 0 <= POSCNT <= 4999 to 0 <= AngPos <= 32767
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f641 129b 	movw	r2, #6555	; 0x199b
 8002cc8:	fb02 f303 	mul.w	r3, r2, r3
 8002ccc:	4a06      	ldr	r2, [pc, #24]	; (8002ce8 <quadEncoder_PosCalcR+0x44>)
 8002cce:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd2:	099b      	lsrs	r3, r3, #6
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	601a      	str	r2, [r3, #0]
}
 8002cda:	bf00      	nop
 8002cdc:	3714      	adds	r7, #20
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	10624dd3 	.word	0x10624dd3

08002cec <quadEncoder_GetSpeedL>:
//		SPEED LEFT
//--> must be called every Te
//================================================================

int16_t quadEncoder_GetSpeedL(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
	static int AngPos[2] = {0,0};
	static int16_t SpeedL=0;

	quadEncoder_PosCalcL(AngPos);
 8002cf0:	4824      	ldr	r0, [pc, #144]	; (8002d84 <quadEncoder_GetSpeedL+0x98>)
 8002cf2:	f7ff ffb3 	bl	8002c5c <quadEncoder_PosCalcL>
	SpeedL = AngPos[0] - AngPos[1];
 8002cf6:	4b23      	ldr	r3, [pc, #140]	; (8002d84 <quadEncoder_GetSpeedL+0x98>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	4b21      	ldr	r3, [pc, #132]	; (8002d84 <quadEncoder_GetSpeedL+0x98>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	b21a      	sxth	r2, r3
 8002d08:	4b1f      	ldr	r3, [pc, #124]	; (8002d88 <quadEncoder_GetSpeedL+0x9c>)
 8002d0a:	801a      	strh	r2, [r3, #0]
	if (SpeedL >= 0)
 8002d0c:	4b1e      	ldr	r3, [pc, #120]	; (8002d88 <quadEncoder_GetSpeedL+0x9c>)
 8002d0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	db10      	blt.n	8002d38 <quadEncoder_GetSpeedL+0x4c>
	{
		if (SpeedL >= HALF_MAX_COUNT)
 8002d16:	4b1c      	ldr	r3, [pc, #112]	; (8002d88 <quadEncoder_GetSpeedL+0x9c>)
 8002d18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d20:	db1a      	blt.n	8002d58 <quadEncoder_GetSpeedL+0x6c>
			{
			SpeedL = SpeedL - MAX_COUNT;
 8002d22:	4b19      	ldr	r3, [pc, #100]	; (8002d88 <quadEncoder_GetSpeedL+0x9c>)
 8002d24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	b21a      	sxth	r2, r3
 8002d32:	4b15      	ldr	r3, [pc, #84]	; (8002d88 <quadEncoder_GetSpeedL+0x9c>)
 8002d34:	801a      	strh	r2, [r3, #0]
 8002d36:	e00f      	b.n	8002d58 <quadEncoder_GetSpeedL+0x6c>
			}
	}
	else
	{
		if (SpeedL < -HALF_MAX_COUNT)
 8002d38:	4b13      	ldr	r3, [pc, #76]	; (8002d88 <quadEncoder_GetSpeedL+0x9c>)
 8002d3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d3e:	f513 4f80 	cmn.w	r3, #16384	; 0x4000
 8002d42:	da09      	bge.n	8002d58 <quadEncoder_GetSpeedL+0x6c>
			{
			SpeedL = SpeedL + MAX_COUNT;
 8002d44:	4b10      	ldr	r3, [pc, #64]	; (8002d88 <quadEncoder_GetSpeedL+0x9c>)
 8002d46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	b21a      	sxth	r2, r3
 8002d54:	4b0c      	ldr	r3, [pc, #48]	; (8002d88 <quadEncoder_GetSpeedL+0x9c>)
 8002d56:	801a      	strh	r2, [r3, #0]
	// 1 tour = 32767
	// Nbre de Tours pendant Te: DELTA_pos/32767
	// Nbre de Tours pendant 1s (Te en ms) : (DELTA_pos/32767)*(1000/Te)
	// Nbre de Tours par minute : : (DELTA_pos/32767)*((60*1000)/Te)

	SpeedL=(SpeedL*60*1000)/(32767*TE_ms);
 8002d58:	4b0b      	ldr	r3, [pc, #44]	; (8002d88 <quadEncoder_GetSpeedL+0x9c>)
 8002d5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002d64:	fb02 f303 	mul.w	r3, r2, r3
 8002d68:	4a08      	ldr	r2, [pc, #32]	; (8002d8c <quadEncoder_GetSpeedL+0xa0>)
 8002d6a:	fb82 1203 	smull	r1, r2, r2, r3
 8002d6e:	1412      	asrs	r2, r2, #16
 8002d70:	17db      	asrs	r3, r3, #31
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	b21a      	sxth	r2, r3
 8002d76:	4b04      	ldr	r3, [pc, #16]	; (8002d88 <quadEncoder_GetSpeedL+0x9c>)
 8002d78:	801a      	strh	r2, [r3, #0]
	return SpeedL;
 8002d7a:	4b03      	ldr	r3, [pc, #12]	; (8002d88 <quadEncoder_GetSpeedL+0x9c>)
 8002d7c:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	20004cf4 	.word	0x20004cf4
 8002d88:	20004cfc 	.word	0x20004cfc
 8002d8c:	66673335 	.word	0x66673335

08002d90 <quadEncoder_GetSpeedR>:
//		SPEED RIGHT
//-->  must be called every Te
//================================================================

int16_t quadEncoder_GetSpeedR(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
	static int AngPos[2] = {0,0};
	static int16_t SpeedR=0;


	quadEncoder_PosCalcR(AngPos);
 8002d94:	4824      	ldr	r0, [pc, #144]	; (8002e28 <quadEncoder_GetSpeedR+0x98>)
 8002d96:	f7ff ff85 	bl	8002ca4 <quadEncoder_PosCalcR>
	SpeedR = AngPos[0] - AngPos[1];
 8002d9a:	4b23      	ldr	r3, [pc, #140]	; (8002e28 <quadEncoder_GetSpeedR+0x98>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	4b21      	ldr	r3, [pc, #132]	; (8002e28 <quadEncoder_GetSpeedR+0x98>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	b21a      	sxth	r2, r3
 8002dac:	4b1f      	ldr	r3, [pc, #124]	; (8002e2c <quadEncoder_GetSpeedR+0x9c>)
 8002dae:	801a      	strh	r2, [r3, #0]
	if (SpeedR >= 0)
 8002db0:	4b1e      	ldr	r3, [pc, #120]	; (8002e2c <quadEncoder_GetSpeedR+0x9c>)
 8002db2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	db10      	blt.n	8002ddc <quadEncoder_GetSpeedR+0x4c>
	{
		if (SpeedR >= HALF_MAX_COUNT)
 8002dba:	4b1c      	ldr	r3, [pc, #112]	; (8002e2c <quadEncoder_GetSpeedR+0x9c>)
 8002dbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dc4:	db1a      	blt.n	8002dfc <quadEncoder_GetSpeedR+0x6c>
			{
			SpeedR = SpeedR - MAX_COUNT;
 8002dc6:	4b19      	ldr	r3, [pc, #100]	; (8002e2c <quadEncoder_GetSpeedR+0x9c>)
 8002dc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	b21a      	sxth	r2, r3
 8002dd6:	4b15      	ldr	r3, [pc, #84]	; (8002e2c <quadEncoder_GetSpeedR+0x9c>)
 8002dd8:	801a      	strh	r2, [r3, #0]
 8002dda:	e00f      	b.n	8002dfc <quadEncoder_GetSpeedR+0x6c>
			}
	}
	else
	{
		if (SpeedR < -HALF_MAX_COUNT)
 8002ddc:	4b13      	ldr	r3, [pc, #76]	; (8002e2c <quadEncoder_GetSpeedR+0x9c>)
 8002dde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002de2:	f513 4f80 	cmn.w	r3, #16384	; 0x4000
 8002de6:	da09      	bge.n	8002dfc <quadEncoder_GetSpeedR+0x6c>
			{
			SpeedR = SpeedR + MAX_COUNT;
 8002de8:	4b10      	ldr	r3, [pc, #64]	; (8002e2c <quadEncoder_GetSpeedR+0x9c>)
 8002dea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	b21a      	sxth	r2, r3
 8002df8:	4b0c      	ldr	r3, [pc, #48]	; (8002e2c <quadEncoder_GetSpeedR+0x9c>)
 8002dfa:	801a      	strh	r2, [r3, #0]
	// 1 tour = 32767
	// Nbre de Tours pendant Te: DELTA_pos/32767
	// Nbre de Tours pendant 1s (Te en ms) : (DELTA_pos/32767)*(1000/Te)
	// Nbre de Tours par minute : : (DELTA_pos/32767)*((60*1000)/Te)

	SpeedR=(SpeedR*60*1000)/(32767*TE_ms);
 8002dfc:	4b0b      	ldr	r3, [pc, #44]	; (8002e2c <quadEncoder_GetSpeedR+0x9c>)
 8002dfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e02:	461a      	mov	r2, r3
 8002e04:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002e08:	fb02 f303 	mul.w	r3, r2, r3
 8002e0c:	4a08      	ldr	r2, [pc, #32]	; (8002e30 <quadEncoder_GetSpeedR+0xa0>)
 8002e0e:	fb82 1203 	smull	r1, r2, r2, r3
 8002e12:	1412      	asrs	r2, r2, #16
 8002e14:	17db      	asrs	r3, r3, #31
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	b21a      	sxth	r2, r3
 8002e1a:	4b04      	ldr	r3, [pc, #16]	; (8002e2c <quadEncoder_GetSpeedR+0x9c>)
 8002e1c:	801a      	strh	r2, [r3, #0]
	return SpeedR;
 8002e1e:	4b03      	ldr	r3, [pc, #12]	; (8002e2c <quadEncoder_GetSpeedR+0x9c>)
 8002e20:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	20004d00 	.word	0x20004d00
 8002e2c:	20004d08 	.word	0x20004d08
 8002e30:	66673335 	.word	0x66673335

08002e34 <quadEncoder_CallbackIndexL>:
//================================================================
//		MAJ index Left
//================================================================

void quadEncoder_CallbackIndexL()
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
				if (__HAL_TIM_DIRECTION_STATUS(&TimEncoderHandleLeft)==1)
 8002e38:	4b0f      	ldr	r3, [pc, #60]	; (8002e78 <quadEncoder_CallbackIndexL+0x44>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0310 	and.w	r3, r3, #16
 8002e42:	2b10      	cmp	r3, #16
 8002e44:	d105      	bne.n	8002e52 <quadEncoder_CallbackIndexL+0x1e>
				{
					indexL--;
 8002e46:	4b0d      	ldr	r3, [pc, #52]	; (8002e7c <quadEncoder_CallbackIndexL+0x48>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	4a0b      	ldr	r2, [pc, #44]	; (8002e7c <quadEncoder_CallbackIndexL+0x48>)
 8002e4e:	6013      	str	r3, [r2, #0]
 8002e50:	e004      	b.n	8002e5c <quadEncoder_CallbackIndexL+0x28>
				}
				else
				{
					indexL++;
 8002e52:	4b0a      	ldr	r3, [pc, #40]	; (8002e7c <quadEncoder_CallbackIndexL+0x48>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	3301      	adds	r3, #1
 8002e58:	4a08      	ldr	r2, [pc, #32]	; (8002e7c <quadEncoder_CallbackIndexL+0x48>)
 8002e5a:	6013      	str	r3, [r2, #0]
				}


				__HAL_TIM_SetCounter(&TimEncoderHandleLeft, 0);		// RAZ Counter
 8002e5c:	4b06      	ldr	r3, [pc, #24]	; (8002e78 <quadEncoder_CallbackIndexL+0x44>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2200      	movs	r2, #0
 8002e62:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_1);
 8002e64:	2100      	movs	r1, #0
 8002e66:	4804      	ldr	r0, [pc, #16]	; (8002e78 <quadEncoder_CallbackIndexL+0x44>)
 8002e68:	f004 fce4 	bl	8007834 <HAL_TIM_Encoder_Start>
				HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_2);
 8002e6c:	2104      	movs	r1, #4
 8002e6e:	4802      	ldr	r0, [pc, #8]	; (8002e78 <quadEncoder_CallbackIndexL+0x44>)
 8002e70:	f004 fce0 	bl	8007834 <HAL_TIM_Encoder_Start>

}
 8002e74:	bf00      	nop
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	20004c5c 	.word	0x20004c5c
 8002e7c:	20004cec 	.word	0x20004cec

08002e80 <quadEncoder_CallbackIndexR>:
//================================================================
//		MAJ index Right
//================================================================

void quadEncoder_CallbackIndexR()
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
				if (__HAL_TIM_DIRECTION_STATUS(&TimEncoderHandleRight)==1)
 8002e84:	4b0f      	ldr	r3, [pc, #60]	; (8002ec4 <quadEncoder_CallbackIndexR+0x44>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0310 	and.w	r3, r3, #16
 8002e8e:	2b10      	cmp	r3, #16
 8002e90:	d105      	bne.n	8002e9e <quadEncoder_CallbackIndexR+0x1e>
				{
					indexR--;
 8002e92:	4b0d      	ldr	r3, [pc, #52]	; (8002ec8 <quadEncoder_CallbackIndexR+0x48>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	3b01      	subs	r3, #1
 8002e98:	4a0b      	ldr	r2, [pc, #44]	; (8002ec8 <quadEncoder_CallbackIndexR+0x48>)
 8002e9a:	6013      	str	r3, [r2, #0]
 8002e9c:	e004      	b.n	8002ea8 <quadEncoder_CallbackIndexR+0x28>

				}
				else
				{
					indexR++;
 8002e9e:	4b0a      	ldr	r3, [pc, #40]	; (8002ec8 <quadEncoder_CallbackIndexR+0x48>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	4a08      	ldr	r2, [pc, #32]	; (8002ec8 <quadEncoder_CallbackIndexR+0x48>)
 8002ea6:	6013      	str	r3, [r2, #0]
				}

				__HAL_TIM_SetCounter(&TimEncoderHandleRight, 0);			// RAZ Counter
 8002ea8:	4b06      	ldr	r3, [pc, #24]	; (8002ec4 <quadEncoder_CallbackIndexR+0x44>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2200      	movs	r2, #0
 8002eae:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_1);
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	4804      	ldr	r0, [pc, #16]	; (8002ec4 <quadEncoder_CallbackIndexR+0x44>)
 8002eb4:	f004 fcbe 	bl	8007834 <HAL_TIM_Encoder_Start>
				HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_2);
 8002eb8:	2104      	movs	r1, #4
 8002eba:	4802      	ldr	r0, [pc, #8]	; (8002ec4 <quadEncoder_CallbackIndexR+0x44>)
 8002ebc:	f004 fcba 	bl	8007834 <HAL_TIM_Encoder_Start>

}
 8002ec0:	bf00      	nop
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	20004ca4 	.word	0x20004ca4
 8002ec8:	20004cf0 	.word	0x20004cf0

08002ecc <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8002ed4:	4a07      	ldr	r2, [pc, #28]	; (8002ef4 <RetargetInit+0x28>)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8002eda:	4b07      	ldr	r3, [pc, #28]	; (8002ef8 <RetargetInit+0x2c>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6898      	ldr	r0, [r3, #8]
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	f015 f985 	bl	80181f4 <setvbuf>
}
 8002eea:	bf00      	nop
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	20004d0c 	.word	0x20004d0c
 8002ef8:	200000cc 	.word	0x200000cc

08002efc <_isatty>:

int _isatty(int fd) {
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	db04      	blt.n	8002f14 <_isatty+0x18>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	dc01      	bgt.n	8002f14 <_isatty+0x18>
    return 1;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e005      	b.n	8002f20 <_isatty+0x24>

  errno = EBADF;
 8002f14:	f015 fc66 	bl	80187e4 <__errno>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2209      	movs	r2, #9
 8002f1c:	601a      	str	r2, [r3, #0]
  return 0;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <_write>:

int _write(int fd, char* ptr, int len) {
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d002      	beq.n	8002f40 <_write+0x18>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d111      	bne.n	8002f64 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8002f40:	4b0e      	ldr	r3, [pc, #56]	; (8002f7c <_write+0x54>)
 8002f42:	6818      	ldr	r0, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f4c:	68b9      	ldr	r1, [r7, #8]
 8002f4e:	f005 f983 	bl	8008258 <HAL_UART_Transmit>
 8002f52:	4603      	mov	r3, r0
 8002f54:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002f56:	7dfb      	ldrb	r3, [r7, #23]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d101      	bne.n	8002f60 <_write+0x38>
      return len;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	e008      	b.n	8002f72 <_write+0x4a>
    else
      return EIO;
 8002f60:	2305      	movs	r3, #5
 8002f62:	e006      	b.n	8002f72 <_write+0x4a>
  }
  errno = EBADF;
 8002f64:	f015 fc3e 	bl	80187e4 <__errno>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2209      	movs	r2, #9
 8002f6c:	601a      	str	r2, [r3, #0]
  return -1;
 8002f6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	20004d0c 	.word	0x20004d0c

08002f80 <_close>:

int _close(int fd) {
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	db04      	blt.n	8002f98 <_close+0x18>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	dc01      	bgt.n	8002f98 <_close+0x18>
    return 0;
 8002f94:	2300      	movs	r3, #0
 8002f96:	e006      	b.n	8002fa6 <_close+0x26>

  errno = EBADF;
 8002f98:	f015 fc24 	bl	80187e4 <__errno>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2209      	movs	r2, #9
 8002fa0:	601a      	str	r2, [r3, #0]
  return -1;
 8002fa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b084      	sub	sp, #16
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	60f8      	str	r0, [r7, #12]
 8002fb6:	60b9      	str	r1, [r7, #8]
 8002fb8:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8002fba:	f015 fc13 	bl	80187e4 <__errno>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2209      	movs	r2, #9
 8002fc2:	601a      	str	r2, [r3, #0]
  return -1;
 8002fc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <_read>:

int _read(int fd, char* ptr, int len) {
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d110      	bne.n	8003004 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8002fe2:	4b0e      	ldr	r3, [pc, #56]	; (800301c <_read+0x4c>)
 8002fe4:	6818      	ldr	r0, [r3, #0]
 8002fe6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002fea:	2201      	movs	r2, #1
 8002fec:	68b9      	ldr	r1, [r7, #8]
 8002fee:	f005 f9c5 	bl	800837c <HAL_UART_Receive>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002ff6:	7dfb      	ldrb	r3, [r7, #23]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <_read+0x30>
      return 1;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e008      	b.n	8003012 <_read+0x42>
    else
      return EIO;
 8003000:	2305      	movs	r3, #5
 8003002:	e006      	b.n	8003012 <_read+0x42>
  }
  errno = EBADF;
 8003004:	f015 fbee 	bl	80187e4 <__errno>
 8003008:	4603      	mov	r3, r0
 800300a:	2209      	movs	r2, #9
 800300c:	601a      	str	r2, [r3, #0]
  return -1;
 800300e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003012:	4618      	mov	r0, r3
 8003014:	3718      	adds	r7, #24
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	20004d0c 	.word	0x20004d0c

08003020 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	db08      	blt.n	8003042 <_fstat+0x22>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b02      	cmp	r3, #2
 8003034:	dc05      	bgt.n	8003042 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800303c:	605a      	str	r2, [r3, #4]
    return 0;
 800303e:	2300      	movs	r3, #0
 8003040:	e005      	b.n	800304e <_fstat+0x2e>
  }

  errno = EBADF;
 8003042:	f015 fbcf 	bl	80187e4 <__errno>
 8003046:	4603      	mov	r3, r0
 8003048:	2209      	movs	r2, #9
 800304a:	601a      	str	r2, [r3, #0]
  return 0;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <_getpid>:

int _getpid(void)
{
 8003056:	b480      	push	{r7}
 8003058:	af00      	add	r7, sp, #0
	return 1;
 800305a:	2301      	movs	r3, #1
}
 800305c:	4618      	mov	r0, r3
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr

08003066 <_kill>:

int _kill(int pid, int sig)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b082      	sub	sp, #8
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
 800306e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003070:	f015 fbb8 	bl	80187e4 <__errno>
 8003074:	4603      	mov	r3, r0
 8003076:	2216      	movs	r2, #22
 8003078:	601a      	str	r2, [r3, #0]
	return -1;
 800307a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800307e:	4618      	mov	r0, r3
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
	...

08003088 <HAL_MspInit>:
void HAL_Encoder_Timer1_MspInit(void);
void HAL_Encoder_Timer2_MspInit(void);
void HAL_adcir_MspInit(void);

void HAL_MspInit(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800308e:	2300      	movs	r3, #0
 8003090:	617b      	str	r3, [r7, #20]
 8003092:	4b33      	ldr	r3, [pc, #204]	; (8003160 <HAL_MspInit+0xd8>)
 8003094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003096:	4a32      	ldr	r2, [pc, #200]	; (8003160 <HAL_MspInit+0xd8>)
 8003098:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800309c:	6453      	str	r3, [r2, #68]	; 0x44
 800309e:	4b30      	ldr	r3, [pc, #192]	; (8003160 <HAL_MspInit+0xd8>)
 80030a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030a6:	617b      	str	r3, [r7, #20]
 80030a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030aa:	2300      	movs	r3, #0
 80030ac:	613b      	str	r3, [r7, #16]
 80030ae:	4b2c      	ldr	r3, [pc, #176]	; (8003160 <HAL_MspInit+0xd8>)
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	4a2b      	ldr	r2, [pc, #172]	; (8003160 <HAL_MspInit+0xd8>)
 80030b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030b8:	6413      	str	r3, [r2, #64]	; 0x40
 80030ba:	4b29      	ldr	r3, [pc, #164]	; (8003160 <HAL_MspInit+0xd8>)
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c2:	613b      	str	r3, [r7, #16]
 80030c4:	693b      	ldr	r3, [r7, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030c6:	2300      	movs	r3, #0
 80030c8:	60fb      	str	r3, [r7, #12]
 80030ca:	4b25      	ldr	r3, [pc, #148]	; (8003160 <HAL_MspInit+0xd8>)
 80030cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ce:	4a24      	ldr	r2, [pc, #144]	; (8003160 <HAL_MspInit+0xd8>)
 80030d0:	f043 0304 	orr.w	r3, r3, #4
 80030d4:	6313      	str	r3, [r2, #48]	; 0x30
 80030d6:	4b22      	ldr	r3, [pc, #136]	; (8003160 <HAL_MspInit+0xd8>)
 80030d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030da:	f003 0304 	and.w	r3, r3, #4
 80030de:	60fb      	str	r3, [r7, #12]
 80030e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80030e2:	2300      	movs	r3, #0
 80030e4:	60bb      	str	r3, [r7, #8]
 80030e6:	4b1e      	ldr	r3, [pc, #120]	; (8003160 <HAL_MspInit+0xd8>)
 80030e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ea:	4a1d      	ldr	r2, [pc, #116]	; (8003160 <HAL_MspInit+0xd8>)
 80030ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030f0:	6313      	str	r3, [r2, #48]	; 0x30
 80030f2:	4b1b      	ldr	r3, [pc, #108]	; (8003160 <HAL_MspInit+0xd8>)
 80030f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030fa:	60bb      	str	r3, [r7, #8]
 80030fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030fe:	2300      	movs	r3, #0
 8003100:	607b      	str	r3, [r7, #4]
 8003102:	4b17      	ldr	r3, [pc, #92]	; (8003160 <HAL_MspInit+0xd8>)
 8003104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003106:	4a16      	ldr	r2, [pc, #88]	; (8003160 <HAL_MspInit+0xd8>)
 8003108:	f043 0301 	orr.w	r3, r3, #1
 800310c:	6313      	str	r3, [r2, #48]	; 0x30
 800310e:	4b14      	ldr	r3, [pc, #80]	; (8003160 <HAL_MspInit+0xd8>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	607b      	str	r3, [r7, #4]
 8003118:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800311a:	2300      	movs	r3, #0
 800311c:	603b      	str	r3, [r7, #0]
 800311e:	4b10      	ldr	r3, [pc, #64]	; (8003160 <HAL_MspInit+0xd8>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003122:	4a0f      	ldr	r2, [pc, #60]	; (8003160 <HAL_MspInit+0xd8>)
 8003124:	f043 0302 	orr.w	r3, r3, #2
 8003128:	6313      	str	r3, [r2, #48]	; 0x30
 800312a:	4b0d      	ldr	r3, [pc, #52]	; (8003160 <HAL_MspInit+0xd8>)
 800312c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	603b      	str	r3, [r7, #0]
 8003134:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003136:	2200      	movs	r2, #0
 8003138:	210f      	movs	r1, #15
 800313a:	f06f 0001 	mvn.w	r0, #1
 800313e:	f001 f8ab 	bl	8004298 <HAL_NVIC_SetPriority>

  HAL_PWM_Timer3_MspInit();
 8003142:	f000 f895 	bl	8003270 <HAL_PWM_Timer3_MspInit>
  HAL_Encoder_Timer1_MspInit();
 8003146:	f000 f815 	bl	8003174 <HAL_Encoder_Timer1_MspInit>
  HAL_Encoder_Timer2_MspInit();
 800314a:	f000 f853 	bl	80031f4 <HAL_Encoder_Timer2_MspInit>
  HAL_adcir_MspInit();
 800314e:	f000 f8ed 	bl	800332c <HAL_adcir_MspInit>
  HAL_GPIO_MspInit();
 8003152:	f000 f807 	bl	8003164 <HAL_GPIO_MspInit>

}
 8003156:	bf00      	nop
 8003158:	3718      	adds	r7, #24
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40023800 	.word	0x40023800

08003164 <HAL_GPIO_MspInit>:
/******************************************************************
			GPIO : contrôle période d'échantillonage
GPIO OUTPUT	-->	PB4
******************************************************************/
void HAL_GPIO_MspInit(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
	  //GPIO_InitStruct.Pull = GPIO_NOPULL;
	  //GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;

	  //HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}
 8003168:	bf00      	nop
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
	...

08003174 <HAL_Encoder_Timer1_MspInit>:
PWM1/1	-->	PA8		-- Encodeur Voie A
PWM1/2	--> PA9		-- Encodeur Voie B
EXTI1	--> PB10		-- Index encodeur
******************************************************************/
void HAL_Encoder_Timer1_MspInit(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __TIM1_CLK_ENABLE();
 800317a:	2300      	movs	r3, #0
 800317c:	603b      	str	r3, [r7, #0]
 800317e:	4b1a      	ldr	r3, [pc, #104]	; (80031e8 <HAL_Encoder_Timer1_MspInit+0x74>)
 8003180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003182:	4a19      	ldr	r2, [pc, #100]	; (80031e8 <HAL_Encoder_Timer1_MspInit+0x74>)
 8003184:	f043 0301 	orr.w	r3, r3, #1
 8003188:	6453      	str	r3, [r2, #68]	; 0x44
 800318a:	4b17      	ldr	r3, [pc, #92]	; (80031e8 <HAL_Encoder_Timer1_MspInit+0x74>)
 800318c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	603b      	str	r3, [r7, #0]
 8003194:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8003196:	f44f 7340 	mov.w	r3, #768	; 0x300
 800319a:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP; // hal_gpio.h
 800319c:	2302      	movs	r3, #2
 800319e:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031a0:	2301      	movs	r3, #1
 80031a2:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80031a4:	2301      	movs	r3, #1
 80031a6:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF1_TIM1 ; // hal_gpio_ex.h
 80031a8:	2301      	movs	r3, #1
 80031aa:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ac:	1d3b      	adds	r3, r7, #4
 80031ae:	4619      	mov	r1, r3
 80031b0:	480e      	ldr	r0, [pc, #56]	; (80031ec <HAL_Encoder_Timer1_MspInit+0x78>)
 80031b2:	f001 fcab 	bl	8004b0c <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80031b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031ba:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80031bc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80031c0:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c2:	2300      	movs	r3, #0
 80031c4:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031c6:	1d3b      	adds	r3, r7, #4
 80031c8:	4619      	mov	r1, r3
 80031ca:	4809      	ldr	r0, [pc, #36]	; (80031f0 <HAL_Encoder_Timer1_MspInit+0x7c>)
 80031cc:	f001 fc9e 	bl	8004b0c <HAL_GPIO_Init>

	  /* Enable and set EXTI Line0 Interrupt to the lowest priority */
	  HAL_NVIC_SetPriority(EXTI15_10_IRQn, EXTI15_10_IRQ_PRIO, 0);
 80031d0:	2200      	movs	r2, #0
 80031d2:	2107      	movs	r1, #7
 80031d4:	2028      	movs	r0, #40	; 0x28
 80031d6:	f001 f85f 	bl	8004298 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80031da:	2028      	movs	r0, #40	; 0x28
 80031dc:	f001 f878 	bl	80042d0 <HAL_NVIC_EnableIRQ>
}
 80031e0:	bf00      	nop
 80031e2:	3718      	adds	r7, #24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40023800 	.word	0x40023800
 80031ec:	40020000 	.word	0x40020000
 80031f0:	40020400 	.word	0x40020400

080031f4 <HAL_Encoder_Timer2_MspInit>:
PWM2/1	-->	PA0		-- Encodeur Voie A
PWM2/2	--> PA1		-- Encodeur Voie B
EXTI 	--> PC0		-- Index Moteur
******************************************************************/
void HAL_Encoder_Timer2_MspInit(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __TIM2_CLK_ENABLE();
 80031fa:	2300      	movs	r3, #0
 80031fc:	603b      	str	r3, [r7, #0]
 80031fe:	4b19      	ldr	r3, [pc, #100]	; (8003264 <HAL_Encoder_Timer2_MspInit+0x70>)
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	4a18      	ldr	r2, [pc, #96]	; (8003264 <HAL_Encoder_Timer2_MspInit+0x70>)
 8003204:	f043 0301 	orr.w	r3, r3, #1
 8003208:	6413      	str	r3, [r2, #64]	; 0x40
 800320a:	4b16      	ldr	r3, [pc, #88]	; (8003264 <HAL_Encoder_Timer2_MspInit+0x70>)
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	603b      	str	r3, [r7, #0]
 8003214:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8003216:	2303      	movs	r3, #3
 8003218:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP; // hal_gpio.h
 800321a:	2302      	movs	r3, #2
 800321c:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800321e:	2301      	movs	r3, #1
 8003220:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003222:	2301      	movs	r3, #1
 8003224:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF1_TIM2 ; // hal_gpio_ex.h
 8003226:	2301      	movs	r3, #1
 8003228:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800322a:	1d3b      	adds	r3, r7, #4
 800322c:	4619      	mov	r1, r3
 800322e:	480e      	ldr	r0, [pc, #56]	; (8003268 <HAL_Encoder_Timer2_MspInit+0x74>)
 8003230:	f001 fc6c 	bl	8004b0c <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003234:	2301      	movs	r3, #1
 8003236:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003238:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800323c:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323e:	2300      	movs	r3, #0
 8003240:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003242:	1d3b      	adds	r3, r7, #4
 8003244:	4619      	mov	r1, r3
 8003246:	4809      	ldr	r0, [pc, #36]	; (800326c <HAL_Encoder_Timer2_MspInit+0x78>)
 8003248:	f001 fc60 	bl	8004b0c <HAL_GPIO_Init>

	  /* Enable and set EXTI Line0 Interrupt to the lowest priority */
	  HAL_NVIC_SetPriority(EXTI0_IRQn, EXTI0_IRQ_PRIO, 0);
 800324c:	2200      	movs	r2, #0
 800324e:	2106      	movs	r1, #6
 8003250:	2006      	movs	r0, #6
 8003252:	f001 f821 	bl	8004298 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003256:	2006      	movs	r0, #6
 8003258:	f001 f83a 	bl	80042d0 <HAL_NVIC_EnableIRQ>
}
 800325c:	bf00      	nop
 800325e:	3718      	adds	r7, #24
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	40023800 	.word	0x40023800
 8003268:	40020000 	.word	0x40020000
 800326c:	40020800 	.word	0x40020800

08003270 <HAL_PWM_Timer3_MspInit>:
PA6 --> PWM3/1
PC7 --> PWM3/2
PB3 --> ENABLE MOTEUR (actif état Bas)
******************************************************************/
void HAL_PWM_Timer3_MspInit(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __TIM3_CLK_ENABLE();
 8003276:	2300      	movs	r3, #0
 8003278:	603b      	str	r3, [r7, #0]
 800327a:	4b28      	ldr	r3, [pc, #160]	; (800331c <HAL_PWM_Timer3_MspInit+0xac>)
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	4a27      	ldr	r2, [pc, #156]	; (800331c <HAL_PWM_Timer3_MspInit+0xac>)
 8003280:	f043 0302 	orr.w	r3, r3, #2
 8003284:	6413      	str	r3, [r2, #64]	; 0x40
 8003286:	4b25      	ldr	r3, [pc, #148]	; (800331c <HAL_PWM_Timer3_MspInit+0xac>)
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	603b      	str	r3, [r7, #0]
 8003290:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003292:	2340      	movs	r3, #64	; 0x40
 8003294:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003296:	2302      	movs	r3, #2
 8003298:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800329a:	2301      	movs	r3, #1
 800329c:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 800329e:	2301      	movs	r3, #1
 80032a0:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF2_TIM3 ; // hal_gpio_ex.h
 80032a2:	2302      	movs	r3, #2
 80032a4:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032a6:	1d3b      	adds	r3, r7, #4
 80032a8:	4619      	mov	r1, r3
 80032aa:	481d      	ldr	r0, [pc, #116]	; (8003320 <HAL_PWM_Timer3_MspInit+0xb0>)
 80032ac:	f001 fc2e 	bl	8004b0c <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80032b0:	2380      	movs	r3, #128	; 0x80
 80032b2:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b4:	2302      	movs	r3, #2
 80032b6:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032b8:	2301      	movs	r3, #1
 80032ba:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80032bc:	2301      	movs	r3, #1
 80032be:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF2_TIM3 ; // hal_gpio_ex.h
 80032c0:	2302      	movs	r3, #2
 80032c2:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032c4:	1d3b      	adds	r3, r7, #4
 80032c6:	4619      	mov	r1, r3
 80032c8:	4816      	ldr	r0, [pc, #88]	; (8003324 <HAL_PWM_Timer3_MspInit+0xb4>)
 80032ca:	f001 fc1f 	bl	8004b0c <HAL_GPIO_Init>

	  // ENABLE MOTEUR : SORTIE LOGIQUE PB3
	  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80032ce:	2380      	movs	r3, #128	; 0x80
 80032d0:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032d2:	2300      	movs	r3, #0
 80032d4:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d6:	2300      	movs	r3, #0
 80032d8:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032da:	1d3b      	adds	r3, r7, #4
 80032dc:	4619      	mov	r1, r3
 80032de:	4810      	ldr	r0, [pc, #64]	; (8003320 <HAL_PWM_Timer3_MspInit+0xb0>)
 80032e0:	f001 fc14 	bl	8004b0c <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 80032e4:	2201      	movs	r2, #1
 80032e6:	2180      	movs	r1, #128	; 0x80
 80032e8:	480d      	ldr	r0, [pc, #52]	; (8003320 <HAL_PWM_Timer3_MspInit+0xb0>)
 80032ea:	f001 fd93 	bl	8004e14 <HAL_GPIO_WritePin>

	  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80032ee:	2308      	movs	r3, #8
 80032f0:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032f2:	2301      	movs	r3, #1
 80032f4:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032f6:	2301      	movs	r3, #1
 80032f8:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80032fa:	2302      	movs	r3, #2
 80032fc:	613b      	str	r3, [r7, #16]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032fe:	1d3b      	adds	r3, r7, #4
 8003300:	4619      	mov	r1, r3
 8003302:	4809      	ldr	r0, [pc, #36]	; (8003328 <HAL_PWM_Timer3_MspInit+0xb8>)
 8003304:	f001 fc02 	bl	8004b0c <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8003308:	2201      	movs	r2, #1
 800330a:	2108      	movs	r1, #8
 800330c:	4806      	ldr	r0, [pc, #24]	; (8003328 <HAL_PWM_Timer3_MspInit+0xb8>)
 800330e:	f001 fd81 	bl	8004e14 <HAL_GPIO_WritePin>




}
 8003312:	bf00      	nop
 8003314:	3718      	adds	r7, #24
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	40023800 	.word	0x40023800
 8003320:	40020000 	.word	0x40020000
 8003324:	40020800 	.word	0x40020800
 8003328:	40020400 	.word	0x40020400

0800332c <HAL_adcir_MspInit>:
ADC1_4	--> PA4
ADC1_8	--> PB0
http://stm32f4-discovery.com/2014/04/library-06-ad-converter-on-stm32f4xx/
******************************************************************/
void HAL_adcir_MspInit(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;
	  /* Peripheral clock enable */
	  __ADC1_CLK_ENABLE();
 8003332:	2300      	movs	r3, #0
 8003334:	603b      	str	r3, [r7, #0]
 8003336:	4b13      	ldr	r3, [pc, #76]	; (8003384 <HAL_adcir_MspInit+0x58>)
 8003338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333a:	4a12      	ldr	r2, [pc, #72]	; (8003384 <HAL_adcir_MspInit+0x58>)
 800333c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003340:	6453      	str	r3, [r2, #68]	; 0x44
 8003342:	4b10      	ldr	r3, [pc, #64]	; (8003384 <HAL_adcir_MspInit+0x58>)
 8003344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800334a:	603b      	str	r3, [r7, #0]
 800334c:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_4 ;
 800334e:	2310      	movs	r3, #16
 8003350:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003352:	2303      	movs	r3, #3
 8003354:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003356:	2300      	movs	r3, #0
 8003358:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800335a:	1d3b      	adds	r3, r7, #4
 800335c:	4619      	mov	r1, r3
 800335e:	480a      	ldr	r0, [pc, #40]	; (8003388 <HAL_adcir_MspInit+0x5c>)
 8003360:	f001 fbd4 	bl	8004b0c <HAL_GPIO_Init>


	  GPIO_InitStruct.Pin = GPIO_PIN_0 ;
 8003364:	2301      	movs	r3, #1
 8003366:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003368:	2303      	movs	r3, #3
 800336a:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336c:	2300      	movs	r3, #0
 800336e:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003370:	1d3b      	adds	r3, r7, #4
 8003372:	4619      	mov	r1, r3
 8003374:	4805      	ldr	r0, [pc, #20]	; (800338c <HAL_adcir_MspInit+0x60>)
 8003376:	f001 fbc9 	bl	8004b0c <HAL_GPIO_Init>

}
 800337a:	bf00      	nop
 800337c:	3718      	adds	r7, #24
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	40023800 	.word	0x40023800
 8003388:	40020000 	.word	0x40020000
 800338c:	40020400 	.word	0x40020400

08003390 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
******************************************************************/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b08a      	sub	sp, #40	; 0x28
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003398:	f107 0314 	add.w	r3, r7, #20
 800339c:	2200      	movs	r2, #0
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	605a      	str	r2, [r3, #4]
 80033a2:	609a      	str	r2, [r3, #8]
 80033a4:	60da      	str	r2, [r3, #12]
 80033a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a21      	ldr	r2, [pc, #132]	; (8003434 <HAL_I2C_MspInit+0xa4>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d13c      	bne.n	800342c <HAL_I2C_MspInit+0x9c>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033b2:	2300      	movs	r3, #0
 80033b4:	613b      	str	r3, [r7, #16]
 80033b6:	4b20      	ldr	r3, [pc, #128]	; (8003438 <HAL_I2C_MspInit+0xa8>)
 80033b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ba:	4a1f      	ldr	r2, [pc, #124]	; (8003438 <HAL_I2C_MspInit+0xa8>)
 80033bc:	f043 0302 	orr.w	r3, r3, #2
 80033c0:	6313      	str	r3, [r2, #48]	; 0x30
 80033c2:	4b1d      	ldr	r3, [pc, #116]	; (8003438 <HAL_I2C_MspInit+0xa8>)
 80033c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	613b      	str	r3, [r7, #16]
 80033cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80033ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80033d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033d4:	2312      	movs	r3, #18
 80033d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d8:	2300      	movs	r3, #0
 80033da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033dc:	2303      	movs	r3, #3
 80033de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80033e0:	2304      	movs	r3, #4
 80033e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033e4:	f107 0314 	add.w	r3, r7, #20
 80033e8:	4619      	mov	r1, r3
 80033ea:	4814      	ldr	r0, [pc, #80]	; (800343c <HAL_I2C_MspInit+0xac>)
 80033ec:	f001 fb8e 	bl	8004b0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80033f0:	2300      	movs	r3, #0
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	4b10      	ldr	r3, [pc, #64]	; (8003438 <HAL_I2C_MspInit+0xa8>)
 80033f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f8:	4a0f      	ldr	r2, [pc, #60]	; (8003438 <HAL_I2C_MspInit+0xa8>)
 80033fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80033fe:	6413      	str	r3, [r2, #64]	; 0x40
 8003400:	4b0d      	ldr	r3, [pc, #52]	; (8003438 <HAL_I2C_MspInit+0xa8>)
 8003402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003404:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003408:	60fb      	str	r3, [r7, #12]
 800340a:	68fb      	ldr	r3, [r7, #12]

	  HAL_NVIC_SetPriority(I2C1_ER_IRQn, I2C1_ER_IRQ_PRIO, 0);
 800340c:	2200      	movs	r2, #0
 800340e:	2102      	movs	r1, #2
 8003410:	2020      	movs	r0, #32
 8003412:	f000 ff41 	bl	8004298 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003416:	2020      	movs	r0, #32
 8003418:	f000 ff5a 	bl	80042d0 <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_SetPriority(I2C1_EV_IRQn, I2C1_EV_IRQ_PRIO, 0);
 800341c:	2200      	movs	r2, #0
 800341e:	210b      	movs	r1, #11
 8003420:	201f      	movs	r0, #31
 8003422:	f000 ff39 	bl	8004298 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003426:	201f      	movs	r0, #31
 8003428:	f000 ff52 	bl	80042d0 <HAL_NVIC_EnableIRQ>



  }

}
 800342c:	bf00      	nop
 800342e:	3728      	adds	r7, #40	; 0x28
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40005400 	.word	0x40005400
 8003438:	40023800 	.word	0x40023800
 800343c:	40020400 	.word	0x40020400

08003440 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
******************************************************************/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b08c      	sub	sp, #48	; 0x30
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003448:	f107 031c 	add.w	r3, r7, #28
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	605a      	str	r2, [r3, #4]
 8003452:	609a      	str	r2, [r3, #8]
 8003454:	60da      	str	r2, [r3, #12]
 8003456:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4aa2      	ldr	r2, [pc, #648]	; (80036e8 <HAL_UART_MspInit+0x2a8>)
 800345e:	4293      	cmp	r3, r2
 8003460:	f040 80a5 	bne.w	80035ae <HAL_UART_MspInit+0x16e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003464:	2300      	movs	r3, #0
 8003466:	61bb      	str	r3, [r7, #24]
 8003468:	4ba0      	ldr	r3, [pc, #640]	; (80036ec <HAL_UART_MspInit+0x2ac>)
 800346a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346c:	4a9f      	ldr	r2, [pc, #636]	; (80036ec <HAL_UART_MspInit+0x2ac>)
 800346e:	f043 0310 	orr.w	r3, r3, #16
 8003472:	6453      	str	r3, [r2, #68]	; 0x44
 8003474:	4b9d      	ldr	r3, [pc, #628]	; (80036ec <HAL_UART_MspInit+0x2ac>)
 8003476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003478:	f003 0310 	and.w	r3, r3, #16
 800347c:	61bb      	str	r3, [r7, #24]
 800347e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003480:	2300      	movs	r3, #0
 8003482:	617b      	str	r3, [r7, #20]
 8003484:	4b99      	ldr	r3, [pc, #612]	; (80036ec <HAL_UART_MspInit+0x2ac>)
 8003486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003488:	4a98      	ldr	r2, [pc, #608]	; (80036ec <HAL_UART_MspInit+0x2ac>)
 800348a:	f043 0301 	orr.w	r3, r3, #1
 800348e:	6313      	str	r3, [r2, #48]	; 0x30
 8003490:	4b96      	ldr	r3, [pc, #600]	; (80036ec <HAL_UART_MspInit+0x2ac>)
 8003492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	617b      	str	r3, [r7, #20]
 800349a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800349c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a2:	2302      	movs	r3, #2
 80034a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a6:	2300      	movs	r3, #0
 80034a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034aa:	2303      	movs	r3, #3
 80034ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80034ae:	2307      	movs	r3, #7
 80034b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034b2:	f107 031c 	add.w	r3, r7, #28
 80034b6:	4619      	mov	r1, r3
 80034b8:	488d      	ldr	r0, [pc, #564]	; (80036f0 <HAL_UART_MspInit+0x2b0>)
 80034ba:	f001 fb27 	bl	8004b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80034be:	2340      	movs	r3, #64	; 0x40
 80034c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c2:	2302      	movs	r3, #2
 80034c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c6:	2300      	movs	r3, #0
 80034c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ca:	2303      	movs	r3, #3
 80034cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80034ce:	2307      	movs	r3, #7
 80034d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034d2:	f107 031c 	add.w	r3, r7, #28
 80034d6:	4619      	mov	r1, r3
 80034d8:	4886      	ldr	r0, [pc, #536]	; (80036f4 <HAL_UART_MspInit+0x2b4>)
 80034da:	f001 fb17 	bl	8004b0c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80034de:	4b86      	ldr	r3, [pc, #536]	; (80036f8 <HAL_UART_MspInit+0x2b8>)
 80034e0:	4a86      	ldr	r2, [pc, #536]	; (80036fc <HAL_UART_MspInit+0x2bc>)
 80034e2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80034e4:	4b84      	ldr	r3, [pc, #528]	; (80036f8 <HAL_UART_MspInit+0x2b8>)
 80034e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80034ea:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034ec:	4b82      	ldr	r3, [pc, #520]	; (80036f8 <HAL_UART_MspInit+0x2b8>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034f2:	4b81      	ldr	r3, [pc, #516]	; (80036f8 <HAL_UART_MspInit+0x2b8>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80034f8:	4b7f      	ldr	r3, [pc, #508]	; (80036f8 <HAL_UART_MspInit+0x2b8>)
 80034fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034fe:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003500:	4b7d      	ldr	r3, [pc, #500]	; (80036f8 <HAL_UART_MspInit+0x2b8>)
 8003502:	2200      	movs	r2, #0
 8003504:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003506:	4b7c      	ldr	r3, [pc, #496]	; (80036f8 <HAL_UART_MspInit+0x2b8>)
 8003508:	2200      	movs	r2, #0
 800350a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800350c:	4b7a      	ldr	r3, [pc, #488]	; (80036f8 <HAL_UART_MspInit+0x2b8>)
 800350e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003512:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003514:	4b78      	ldr	r3, [pc, #480]	; (80036f8 <HAL_UART_MspInit+0x2b8>)
 8003516:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800351a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800351c:	4b76      	ldr	r3, [pc, #472]	; (80036f8 <HAL_UART_MspInit+0x2b8>)
 800351e:	2200      	movs	r2, #0
 8003520:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003522:	4875      	ldr	r0, [pc, #468]	; (80036f8 <HAL_UART_MspInit+0x2b8>)
 8003524:	f000 fee2 	bl	80042ec <HAL_DMA_Init>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 800352e:	f7ff f8fd 	bl	800272c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a70      	ldr	r2, [pc, #448]	; (80036f8 <HAL_UART_MspInit+0x2b8>)
 8003536:	639a      	str	r2, [r3, #56]	; 0x38
 8003538:	4a6f      	ldr	r2, [pc, #444]	; (80036f8 <HAL_UART_MspInit+0x2b8>)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800353e:	4b70      	ldr	r3, [pc, #448]	; (8003700 <HAL_UART_MspInit+0x2c0>)
 8003540:	4a70      	ldr	r2, [pc, #448]	; (8003704 <HAL_UART_MspInit+0x2c4>)
 8003542:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8003544:	4b6e      	ldr	r3, [pc, #440]	; (8003700 <HAL_UART_MspInit+0x2c0>)
 8003546:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800354a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800354c:	4b6c      	ldr	r3, [pc, #432]	; (8003700 <HAL_UART_MspInit+0x2c0>)
 800354e:	2240      	movs	r2, #64	; 0x40
 8003550:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003552:	4b6b      	ldr	r3, [pc, #428]	; (8003700 <HAL_UART_MspInit+0x2c0>)
 8003554:	2200      	movs	r2, #0
 8003556:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003558:	4b69      	ldr	r3, [pc, #420]	; (8003700 <HAL_UART_MspInit+0x2c0>)
 800355a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800355e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003560:	4b67      	ldr	r3, [pc, #412]	; (8003700 <HAL_UART_MspInit+0x2c0>)
 8003562:	2200      	movs	r2, #0
 8003564:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003566:	4b66      	ldr	r3, [pc, #408]	; (8003700 <HAL_UART_MspInit+0x2c0>)
 8003568:	2200      	movs	r2, #0
 800356a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800356c:	4b64      	ldr	r3, [pc, #400]	; (8003700 <HAL_UART_MspInit+0x2c0>)
 800356e:	2200      	movs	r2, #0
 8003570:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003572:	4b63      	ldr	r3, [pc, #396]	; (8003700 <HAL_UART_MspInit+0x2c0>)
 8003574:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003578:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800357a:	4b61      	ldr	r3, [pc, #388]	; (8003700 <HAL_UART_MspInit+0x2c0>)
 800357c:	2200      	movs	r2, #0
 800357e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003580:	485f      	ldr	r0, [pc, #380]	; (8003700 <HAL_UART_MspInit+0x2c0>)
 8003582:	f000 feb3 	bl	80042ec <HAL_DMA_Init>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <HAL_UART_MspInit+0x150>
    {
      Error_Handler();
 800358c:	f7ff f8ce 	bl	800272c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a5b      	ldr	r2, [pc, #364]	; (8003700 <HAL_UART_MspInit+0x2c0>)
 8003594:	635a      	str	r2, [r3, #52]	; 0x34
 8003596:	4a5a      	ldr	r2, [pc, #360]	; (8003700 <HAL_UART_MspInit+0x2c0>)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800359c:	2200      	movs	r2, #0
 800359e:	2105      	movs	r1, #5
 80035a0:	2025      	movs	r0, #37	; 0x25
 80035a2:	f000 fe79 	bl	8004298 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80035a6:	2025      	movs	r0, #37	; 0x25
 80035a8:	f000 fe92 	bl	80042d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80035ac:	e098      	b.n	80036e0 <HAL_UART_MspInit+0x2a0>
  else if(huart->Instance==USART2)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a55      	ldr	r2, [pc, #340]	; (8003708 <HAL_UART_MspInit+0x2c8>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	f040 8093 	bne.w	80036e0 <HAL_UART_MspInit+0x2a0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80035ba:	2300      	movs	r3, #0
 80035bc:	613b      	str	r3, [r7, #16]
 80035be:	4b4b      	ldr	r3, [pc, #300]	; (80036ec <HAL_UART_MspInit+0x2ac>)
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	4a4a      	ldr	r2, [pc, #296]	; (80036ec <HAL_UART_MspInit+0x2ac>)
 80035c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035c8:	6413      	str	r3, [r2, #64]	; 0x40
 80035ca:	4b48      	ldr	r3, [pc, #288]	; (80036ec <HAL_UART_MspInit+0x2ac>)
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d2:	613b      	str	r3, [r7, #16]
 80035d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035d6:	2300      	movs	r3, #0
 80035d8:	60fb      	str	r3, [r7, #12]
 80035da:	4b44      	ldr	r3, [pc, #272]	; (80036ec <HAL_UART_MspInit+0x2ac>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035de:	4a43      	ldr	r2, [pc, #268]	; (80036ec <HAL_UART_MspInit+0x2ac>)
 80035e0:	f043 0301 	orr.w	r3, r3, #1
 80035e4:	6313      	str	r3, [r2, #48]	; 0x30
 80035e6:	4b41      	ldr	r3, [pc, #260]	; (80036ec <HAL_UART_MspInit+0x2ac>)
 80035e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	60fb      	str	r3, [r7, #12]
 80035f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80035f2:	230c      	movs	r3, #12
 80035f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f6:	2302      	movs	r3, #2
 80035f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fa:	2300      	movs	r3, #0
 80035fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035fe:	2303      	movs	r3, #3
 8003600:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003602:	2307      	movs	r3, #7
 8003604:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003606:	f107 031c 	add.w	r3, r7, #28
 800360a:	4619      	mov	r1, r3
 800360c:	4838      	ldr	r0, [pc, #224]	; (80036f0 <HAL_UART_MspInit+0x2b0>)
 800360e:	f001 fa7d 	bl	8004b0c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003612:	4b3e      	ldr	r3, [pc, #248]	; (800370c <HAL_UART_MspInit+0x2cc>)
 8003614:	4a3e      	ldr	r2, [pc, #248]	; (8003710 <HAL_UART_MspInit+0x2d0>)
 8003616:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003618:	4b3c      	ldr	r3, [pc, #240]	; (800370c <HAL_UART_MspInit+0x2cc>)
 800361a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800361e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003620:	4b3a      	ldr	r3, [pc, #232]	; (800370c <HAL_UART_MspInit+0x2cc>)
 8003622:	2200      	movs	r2, #0
 8003624:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003626:	4b39      	ldr	r3, [pc, #228]	; (800370c <HAL_UART_MspInit+0x2cc>)
 8003628:	2200      	movs	r2, #0
 800362a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800362c:	4b37      	ldr	r3, [pc, #220]	; (800370c <HAL_UART_MspInit+0x2cc>)
 800362e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003632:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003634:	4b35      	ldr	r3, [pc, #212]	; (800370c <HAL_UART_MspInit+0x2cc>)
 8003636:	2200      	movs	r2, #0
 8003638:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800363a:	4b34      	ldr	r3, [pc, #208]	; (800370c <HAL_UART_MspInit+0x2cc>)
 800363c:	2200      	movs	r2, #0
 800363e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003640:	4b32      	ldr	r3, [pc, #200]	; (800370c <HAL_UART_MspInit+0x2cc>)
 8003642:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003646:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003648:	4b30      	ldr	r3, [pc, #192]	; (800370c <HAL_UART_MspInit+0x2cc>)
 800364a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800364e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003650:	4b2e      	ldr	r3, [pc, #184]	; (800370c <HAL_UART_MspInit+0x2cc>)
 8003652:	2200      	movs	r2, #0
 8003654:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003656:	482d      	ldr	r0, [pc, #180]	; (800370c <HAL_UART_MspInit+0x2cc>)
 8003658:	f000 fe48 	bl	80042ec <HAL_DMA_Init>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <HAL_UART_MspInit+0x226>
      Error_Handler();
 8003662:	f7ff f863 	bl	800272c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a28      	ldr	r2, [pc, #160]	; (800370c <HAL_UART_MspInit+0x2cc>)
 800366a:	639a      	str	r2, [r3, #56]	; 0x38
 800366c:	4a27      	ldr	r2, [pc, #156]	; (800370c <HAL_UART_MspInit+0x2cc>)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003672:	4b28      	ldr	r3, [pc, #160]	; (8003714 <HAL_UART_MspInit+0x2d4>)
 8003674:	4a28      	ldr	r2, [pc, #160]	; (8003718 <HAL_UART_MspInit+0x2d8>)
 8003676:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003678:	4b26      	ldr	r3, [pc, #152]	; (8003714 <HAL_UART_MspInit+0x2d4>)
 800367a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800367e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003680:	4b24      	ldr	r3, [pc, #144]	; (8003714 <HAL_UART_MspInit+0x2d4>)
 8003682:	2240      	movs	r2, #64	; 0x40
 8003684:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003686:	4b23      	ldr	r3, [pc, #140]	; (8003714 <HAL_UART_MspInit+0x2d4>)
 8003688:	2200      	movs	r2, #0
 800368a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800368c:	4b21      	ldr	r3, [pc, #132]	; (8003714 <HAL_UART_MspInit+0x2d4>)
 800368e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003692:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003694:	4b1f      	ldr	r3, [pc, #124]	; (8003714 <HAL_UART_MspInit+0x2d4>)
 8003696:	2200      	movs	r2, #0
 8003698:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800369a:	4b1e      	ldr	r3, [pc, #120]	; (8003714 <HAL_UART_MspInit+0x2d4>)
 800369c:	2200      	movs	r2, #0
 800369e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80036a0:	4b1c      	ldr	r3, [pc, #112]	; (8003714 <HAL_UART_MspInit+0x2d4>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80036a6:	4b1b      	ldr	r3, [pc, #108]	; (8003714 <HAL_UART_MspInit+0x2d4>)
 80036a8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80036ac:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036ae:	4b19      	ldr	r3, [pc, #100]	; (8003714 <HAL_UART_MspInit+0x2d4>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80036b4:	4817      	ldr	r0, [pc, #92]	; (8003714 <HAL_UART_MspInit+0x2d4>)
 80036b6:	f000 fe19 	bl	80042ec <HAL_DMA_Init>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <HAL_UART_MspInit+0x284>
      Error_Handler();
 80036c0:	f7ff f834 	bl	800272c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a13      	ldr	r2, [pc, #76]	; (8003714 <HAL_UART_MspInit+0x2d4>)
 80036c8:	635a      	str	r2, [r3, #52]	; 0x34
 80036ca:	4a12      	ldr	r2, [pc, #72]	; (8003714 <HAL_UART_MspInit+0x2d4>)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80036d0:	2200      	movs	r2, #0
 80036d2:	2105      	movs	r1, #5
 80036d4:	2026      	movs	r0, #38	; 0x26
 80036d6:	f000 fddf 	bl	8004298 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80036da:	2026      	movs	r0, #38	; 0x26
 80036dc:	f000 fdf8 	bl	80042d0 <HAL_NVIC_EnableIRQ>
}
 80036e0:	bf00      	nop
 80036e2:	3730      	adds	r7, #48	; 0x30
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	40011000 	.word	0x40011000
 80036ec:	40023800 	.word	0x40023800
 80036f0:	40020000 	.word	0x40020000
 80036f4:	40020400 	.word	0x40020400
 80036f8:	20004a44 	.word	0x20004a44
 80036fc:	40026440 	.word	0x40026440
 8003700:	20004aa4 	.word	0x20004aa4
 8003704:	400264b8 	.word	0x400264b8
 8003708:	40004400 	.word	0x40004400
 800370c:	20004b04 	.word	0x20004b04
 8003710:	40026088 	.word	0x40026088
 8003714:	20004b64 	.word	0x20004b64
 8003718:	400260a0 	.word	0x400260a0

0800371c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b08c      	sub	sp, #48	; 0x30
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003724:	2300      	movs	r3, #0
 8003726:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003728:	2300      	movs	r3, #0
 800372a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800372c:	2300      	movs	r3, #0
 800372e:	60bb      	str	r3, [r7, #8]
 8003730:	4b2f      	ldr	r3, [pc, #188]	; (80037f0 <HAL_InitTick+0xd4>)
 8003732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003734:	4a2e      	ldr	r2, [pc, #184]	; (80037f0 <HAL_InitTick+0xd4>)
 8003736:	f043 0304 	orr.w	r3, r3, #4
 800373a:	6413      	str	r3, [r2, #64]	; 0x40
 800373c:	4b2c      	ldr	r3, [pc, #176]	; (80037f0 <HAL_InitTick+0xd4>)
 800373e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	60bb      	str	r3, [r7, #8]
 8003746:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003748:	f107 020c 	add.w	r2, r7, #12
 800374c:	f107 0310 	add.w	r3, r7, #16
 8003750:	4611      	mov	r1, r2
 8003752:	4618      	mov	r0, r3
 8003754:	f003 fe20 	bl	8007398 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003758:	f003 fe0a 	bl	8007370 <HAL_RCC_GetPCLK2Freq>
 800375c:	4603      	mov	r3, r0
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003764:	4a23      	ldr	r2, [pc, #140]	; (80037f4 <HAL_InitTick+0xd8>)
 8003766:	fba2 2303 	umull	r2, r3, r2, r3
 800376a:	0c9b      	lsrs	r3, r3, #18
 800376c:	3b01      	subs	r3, #1
 800376e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim4.Instance = TIM4;
 8003770:	4b21      	ldr	r3, [pc, #132]	; (80037f8 <HAL_InitTick+0xdc>)
 8003772:	4a22      	ldr	r2, [pc, #136]	; (80037fc <HAL_InitTick+0xe0>)
 8003774:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8003776:	4b20      	ldr	r3, [pc, #128]	; (80037f8 <HAL_InitTick+0xdc>)
 8003778:	f240 32e7 	movw	r2, #999	; 0x3e7
 800377c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800377e:	4a1e      	ldr	r2, [pc, #120]	; (80037f8 <HAL_InitTick+0xdc>)
 8003780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003782:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8003784:	4b1c      	ldr	r3, [pc, #112]	; (80037f8 <HAL_InitTick+0xdc>)
 8003786:	2200      	movs	r2, #0
 8003788:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800378a:	4b1b      	ldr	r3, [pc, #108]	; (80037f8 <HAL_InitTick+0xdc>)
 800378c:	2200      	movs	r2, #0
 800378e:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003790:	4b19      	ldr	r3, [pc, #100]	; (80037f8 <HAL_InitTick+0xdc>)
 8003792:	2200      	movs	r2, #0
 8003794:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8003796:	4818      	ldr	r0, [pc, #96]	; (80037f8 <HAL_InitTick+0xdc>)
 8003798:	f003 fe30 	bl	80073fc <HAL_TIM_Base_Init>
 800379c:	4603      	mov	r3, r0
 800379e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80037a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d11b      	bne.n	80037e2 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80037aa:	4813      	ldr	r0, [pc, #76]	; (80037f8 <HAL_InitTick+0xdc>)
 80037ac:	f003 fe80 	bl	80074b0 <HAL_TIM_Base_Start_IT>
 80037b0:	4603      	mov	r3, r0
 80037b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80037b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d111      	bne.n	80037e2 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80037be:	201e      	movs	r0, #30
 80037c0:	f000 fd86 	bl	80042d0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b0f      	cmp	r3, #15
 80037c8:	d808      	bhi.n	80037dc <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80037ca:	2200      	movs	r2, #0
 80037cc:	6879      	ldr	r1, [r7, #4]
 80037ce:	201e      	movs	r0, #30
 80037d0:	f000 fd62 	bl	8004298 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80037d4:	4a0a      	ldr	r2, [pc, #40]	; (8003800 <HAL_InitTick+0xe4>)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6013      	str	r3, [r2, #0]
 80037da:	e002      	b.n	80037e2 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80037e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3730      	adds	r7, #48	; 0x30
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	40023800 	.word	0x40023800
 80037f4:	431bde83 	.word	0x431bde83
 80037f8:	20004d10 	.word	0x20004d10
 80037fc:	40000800 	.word	0x40000800
 8003800:	20000010 	.word	0x20000010

08003804 <NMI_Handler>:
extern TIM_HandleTypeDef htim4;
extern I2C_HandleTypeDef hi2c1;


void NMI_Handler(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  while (1)
 8003808:	e7fe      	b.n	8003808 <NMI_Handler+0x4>

0800380a <HardFault_Handler>:
  {
  }
}

void HardFault_Handler(void)
{
 800380a:	b480      	push	{r7}
 800380c:	af00      	add	r7, sp, #0

  while (1)
 800380e:	e7fe      	b.n	800380e <HardFault_Handler+0x4>

08003810 <MemManage_Handler>:
  {
  }
}

void MemManage_Handler(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
  while (1)
 8003814:	e7fe      	b.n	8003814 <MemManage_Handler+0x4>

08003816 <BusFault_Handler>:
  }
}


void BusFault_Handler(void)
{
 8003816:	b480      	push	{r7}
 8003818:	af00      	add	r7, sp, #0
  while (1)
 800381a:	e7fe      	b.n	800381a <BusFault_Handler+0x4>

0800381c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
  while (1)
 8003820:	e7fe      	b.n	8003820 <UsageFault_Handler+0x4>

08003822 <DebugMon_Handler>:
  {
  }
}

void DebugMon_Handler(void)
{
 8003822:	b480      	push	{r7}
 8003824:	af00      	add	r7, sp, #0
}
 8003826:	bf00      	nop
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <DMA1_Stream5_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/

void DMA1_Stream5_IRQHandler(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003834:	4802      	ldr	r0, [pc, #8]	; (8003840 <DMA1_Stream5_IRQHandler+0x10>)
 8003836:	f000 fef1 	bl	800461c <HAL_DMA_IRQHandler>
}
 800383a:	bf00      	nop
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	20004b04 	.word	0x20004b04

08003844 <DMA1_Stream6_IRQHandler>:


void DMA1_Stream6_IRQHandler(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003848:	4802      	ldr	r0, [pc, #8]	; (8003854 <DMA1_Stream6_IRQHandler+0x10>)
 800384a:	f000 fee7 	bl	800461c <HAL_DMA_IRQHandler>
}
 800384e:	bf00      	nop
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	20004b64 	.word	0x20004b64

08003858 <TIM4_IRQHandler>:
{
  HAL_TIM_IRQHandler(&htim1);
}*/

void TIM4_IRQHandler(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim4);
 800385c:	4802      	ldr	r0, [pc, #8]	; (8003868 <TIM4_IRQHandler+0x10>)
 800385e:	f004 f877 	bl	8007950 <HAL_TIM_IRQHandler>
}
 8003862:	bf00      	nop
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	20004d10 	.word	0x20004d10

0800386c <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart1);
 8003870:	4802      	ldr	r0, [pc, #8]	; (800387c <USART1_IRQHandler+0x10>)
 8003872:	f004 ff53 	bl	800871c <HAL_UART_IRQHandler>
}
 8003876:	bf00      	nop
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	200049bc 	.word	0x200049bc

08003880 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart2);
 8003884:	4802      	ldr	r0, [pc, #8]	; (8003890 <USART2_IRQHandler+0x10>)
 8003886:	f004 ff49 	bl	800871c <HAL_UART_IRQHandler>
}
 800388a:	bf00      	nop
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	20004a00 	.word	0x20004a00

08003894 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003898:	4802      	ldr	r0, [pc, #8]	; (80038a4 <DMA2_Stream2_IRQHandler+0x10>)
 800389a:	f000 febf 	bl	800461c <HAL_DMA_IRQHandler>
}
 800389e:	bf00      	nop
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	20004a44 	.word	0x20004a44

080038a8 <DMA2_Stream7_IRQHandler>:

void DMA2_Stream7_IRQHandler(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80038ac:	4802      	ldr	r0, [pc, #8]	; (80038b8 <DMA2_Stream7_IRQHandler+0x10>)
 80038ae:	f000 feb5 	bl	800461c <HAL_DMA_IRQHandler>
}
 80038b2:	bf00      	nop
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	20004aa4 	.word	0x20004aa4

080038bc <EXTI15_10_IRQHandler>:

//=======================================================
//		ENCODER INDEX LEFT
//=======================================================
void EXTI15_10_IRQHandler(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80038c0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80038c4:	f001 fac0 	bl	8004e48 <HAL_GPIO_EXTI_IRQHandler>
}
 80038c8:	bf00      	nop
 80038ca:	bd80      	pop	{r7, pc}

080038cc <EXTI0_IRQHandler>:
//=======================================================
//		ENCODER INDEX RIGHT
//=======================================================

void EXTI0_IRQHandler(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80038d0:	2001      	movs	r0, #1
 80038d2:	f001 fab9 	bl	8004e48 <HAL_GPIO_EXTI_IRQHandler>
}
 80038d6:	bf00      	nop
 80038d8:	bd80      	pop	{r7, pc}
	...

080038dc <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
	  HAL_I2C_EV_IRQHandler(&hi2c1);
 80038e0:	4802      	ldr	r0, [pc, #8]	; (80038ec <I2C1_EV_IRQHandler+0x10>)
 80038e2:	f001 fc0d 	bl	8005100 <HAL_I2C_EV_IRQHandler>
}
 80038e6:	bf00      	nop
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	20004968 	.word	0x20004968

080038f0 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
	  HAL_I2C_ER_IRQHandler(&hi2c1);
 80038f4:	4802      	ldr	r0, [pc, #8]	; (8003900 <I2C1_ER_IRQHandler+0x10>)
 80038f6:	f001 fd56 	bl	80053a6 <HAL_I2C_ER_IRQHandler>
}
 80038fa:	bf00      	nop
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	20004968 	.word	0x20004968

08003904 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800390c:	4a14      	ldr	r2, [pc, #80]	; (8003960 <_sbrk+0x5c>)
 800390e:	4b15      	ldr	r3, [pc, #84]	; (8003964 <_sbrk+0x60>)
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003918:	4b13      	ldr	r3, [pc, #76]	; (8003968 <_sbrk+0x64>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d102      	bne.n	8003926 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003920:	4b11      	ldr	r3, [pc, #68]	; (8003968 <_sbrk+0x64>)
 8003922:	4a12      	ldr	r2, [pc, #72]	; (800396c <_sbrk+0x68>)
 8003924:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003926:	4b10      	ldr	r3, [pc, #64]	; (8003968 <_sbrk+0x64>)
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4413      	add	r3, r2
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	429a      	cmp	r2, r3
 8003932:	d207      	bcs.n	8003944 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003934:	f014 ff56 	bl	80187e4 <__errno>
 8003938:	4603      	mov	r3, r0
 800393a:	220c      	movs	r2, #12
 800393c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800393e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003942:	e009      	b.n	8003958 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003944:	4b08      	ldr	r3, [pc, #32]	; (8003968 <_sbrk+0x64>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800394a:	4b07      	ldr	r3, [pc, #28]	; (8003968 <_sbrk+0x64>)
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4413      	add	r3, r2
 8003952:	4a05      	ldr	r2, [pc, #20]	; (8003968 <_sbrk+0x64>)
 8003954:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003956:	68fb      	ldr	r3, [r7, #12]
}
 8003958:	4618      	mov	r0, r3
 800395a:	3718      	adds	r7, #24
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	20020000 	.word	0x20020000
 8003964:	00000400 	.word	0x00000400
 8003968:	20004d58 	.word	0x20004d58
 800396c:	2000e850 	.word	0x2000e850

08003970 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003974:	4b06      	ldr	r3, [pc, #24]	; (8003990 <SystemInit+0x20>)
 8003976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397a:	4a05      	ldr	r2, [pc, #20]	; (8003990 <SystemInit+0x20>)
 800397c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003980:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003984:	bf00      	nop
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	e000ed00 	.word	0xe000ed00

08003994 <SystemClock_Config>:


#include "main.h"

void SystemClock_Config(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b094      	sub	sp, #80	; 0x50
 8003998:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800399a:	f107 0320 	add.w	r3, r7, #32
 800399e:	2230      	movs	r2, #48	; 0x30
 80039a0:	2100      	movs	r1, #0
 80039a2:	4618      	mov	r0, r3
 80039a4:	f014 fe34 	bl	8018610 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80039a8:	f107 030c 	add.w	r3, r7, #12
 80039ac:	2200      	movs	r2, #0
 80039ae:	601a      	str	r2, [r3, #0]
 80039b0:	605a      	str	r2, [r3, #4]
 80039b2:	609a      	str	r2, [r3, #8]
 80039b4:	60da      	str	r2, [r3, #12]
 80039b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80039b8:	2300      	movs	r3, #0
 80039ba:	60bb      	str	r3, [r7, #8]
 80039bc:	4b28      	ldr	r3, [pc, #160]	; (8003a60 <SystemClock_Config+0xcc>)
 80039be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c0:	4a27      	ldr	r2, [pc, #156]	; (8003a60 <SystemClock_Config+0xcc>)
 80039c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039c6:	6413      	str	r3, [r2, #64]	; 0x40
 80039c8:	4b25      	ldr	r3, [pc, #148]	; (8003a60 <SystemClock_Config+0xcc>)
 80039ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d0:	60bb      	str	r3, [r7, #8]
 80039d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80039d4:	2300      	movs	r3, #0
 80039d6:	607b      	str	r3, [r7, #4]
 80039d8:	4b22      	ldr	r3, [pc, #136]	; (8003a64 <SystemClock_Config+0xd0>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a21      	ldr	r2, [pc, #132]	; (8003a64 <SystemClock_Config+0xd0>)
 80039de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039e2:	6013      	str	r3, [r2, #0]
 80039e4:	4b1f      	ldr	r3, [pc, #124]	; (8003a64 <SystemClock_Config+0xd0>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80039ec:	607b      	str	r3, [r7, #4]
 80039ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80039f0:	2301      	movs	r3, #1
 80039f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80039f4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80039f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039fa:	2302      	movs	r3, #2
 80039fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80039fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003a02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003a04:	2308      	movs	r3, #8
 8003a06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8003a08:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8003a0c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8003a0e:	2306      	movs	r3, #6
 8003a10:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003a12:	2304      	movs	r3, #4
 8003a14:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a16:	f107 0320 	add.w	r3, r7, #32
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f003 f824 	bl	8006a68 <HAL_RCC_OscConfig>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8003a26:	f7fe fe81 	bl	800272c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a2a:	230f      	movs	r3, #15
 8003a2c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a2e:	2302      	movs	r3, #2
 8003a30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a32:	2300      	movs	r3, #0
 8003a34:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003a36:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003a3a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8003a3c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003a40:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003a42:	f107 030c 	add.w	r3, r7, #12
 8003a46:	2102      	movs	r1, #2
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f003 fa85 	bl	8006f58 <HAL_RCC_ClockConfig>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d001      	beq.n	8003a58 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003a54:	f7fe fe6a 	bl	800272c <Error_Handler>
  }
}
 8003a58:	bf00      	nop
 8003a5a:	3750      	adds	r7, #80	; 0x50
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40023800 	.word	0x40023800
 8003a64:	40007000 	.word	0x40007000

08003a68 <Reset_Handler>:
 8003a68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003aa0 <LoopFillZerobss+0x12>
 8003a6c:	480d      	ldr	r0, [pc, #52]	; (8003aa4 <LoopFillZerobss+0x16>)
 8003a6e:	490e      	ldr	r1, [pc, #56]	; (8003aa8 <LoopFillZerobss+0x1a>)
 8003a70:	4a0e      	ldr	r2, [pc, #56]	; (8003aac <LoopFillZerobss+0x1e>)
 8003a72:	2300      	movs	r3, #0
 8003a74:	e002      	b.n	8003a7c <LoopCopyDataInit>

08003a76 <CopyDataInit>:
 8003a76:	58d4      	ldr	r4, [r2, r3]
 8003a78:	50c4      	str	r4, [r0, r3]
 8003a7a:	3304      	adds	r3, #4

08003a7c <LoopCopyDataInit>:
 8003a7c:	18c4      	adds	r4, r0, r3
 8003a7e:	428c      	cmp	r4, r1
 8003a80:	d3f9      	bcc.n	8003a76 <CopyDataInit>
 8003a82:	4a0b      	ldr	r2, [pc, #44]	; (8003ab0 <LoopFillZerobss+0x22>)
 8003a84:	4c0b      	ldr	r4, [pc, #44]	; (8003ab4 <LoopFillZerobss+0x26>)
 8003a86:	2300      	movs	r3, #0
 8003a88:	e001      	b.n	8003a8e <LoopFillZerobss>

08003a8a <FillZerobss>:
 8003a8a:	6013      	str	r3, [r2, #0]
 8003a8c:	3204      	adds	r2, #4

08003a8e <LoopFillZerobss>:
 8003a8e:	42a2      	cmp	r2, r4
 8003a90:	d3fb      	bcc.n	8003a8a <FillZerobss>
 8003a92:	f7ff ff6d 	bl	8003970 <SystemInit>
 8003a96:	f014 feab 	bl	80187f0 <__libc_init_array>
 8003a9a:	f7fe fd77 	bl	800258c <main>
 8003a9e:	4770      	bx	lr
 8003aa0:	20020000 	.word	0x20020000
 8003aa4:	20000000 	.word	0x20000000
 8003aa8:	200000d4 	.word	0x200000d4
 8003aac:	0801a3f8 	.word	0x0801a3f8
 8003ab0:	200000d8 	.word	0x200000d8
 8003ab4:	2000e850 	.word	0x2000e850

08003ab8 <ADC_IRQHandler>:
 8003ab8:	e7fe      	b.n	8003ab8 <ADC_IRQHandler>
	...

08003abc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ac0:	4b0e      	ldr	r3, [pc, #56]	; (8003afc <HAL_Init+0x40>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a0d      	ldr	r2, [pc, #52]	; (8003afc <HAL_Init+0x40>)
 8003ac6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003aca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003acc:	4b0b      	ldr	r3, [pc, #44]	; (8003afc <HAL_Init+0x40>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a0a      	ldr	r2, [pc, #40]	; (8003afc <HAL_Init+0x40>)
 8003ad2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ad6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ad8:	4b08      	ldr	r3, [pc, #32]	; (8003afc <HAL_Init+0x40>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a07      	ldr	r2, [pc, #28]	; (8003afc <HAL_Init+0x40>)
 8003ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ae2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ae4:	2003      	movs	r0, #3
 8003ae6:	f000 fbcc 	bl	8004282 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003aea:	200f      	movs	r0, #15
 8003aec:	f7ff fe16 	bl	800371c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003af0:	f7ff faca 	bl	8003088 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	40023c00 	.word	0x40023c00

08003b00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b00:	b480      	push	{r7}
 8003b02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b04:	4b06      	ldr	r3, [pc, #24]	; (8003b20 <HAL_IncTick+0x20>)
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	461a      	mov	r2, r3
 8003b0a:	4b06      	ldr	r3, [pc, #24]	; (8003b24 <HAL_IncTick+0x24>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4413      	add	r3, r2
 8003b10:	4a04      	ldr	r2, [pc, #16]	; (8003b24 <HAL_IncTick+0x24>)
 8003b12:	6013      	str	r3, [r2, #0]
}
 8003b14:	bf00      	nop
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	20000014 	.word	0x20000014
 8003b24:	20004d5c 	.word	0x20004d5c

08003b28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	af00      	add	r7, sp, #0
  return uwTick;
 8003b2c:	4b03      	ldr	r3, [pc, #12]	; (8003b3c <HAL_GetTick+0x14>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	20004d5c 	.word	0x20004d5c

08003b40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b48:	f7ff ffee 	bl	8003b28 <HAL_GetTick>
 8003b4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b58:	d005      	beq.n	8003b66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b5a:	4b0a      	ldr	r3, [pc, #40]	; (8003b84 <HAL_Delay+0x44>)
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	461a      	mov	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	4413      	add	r3, r2
 8003b64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b66:	bf00      	nop
 8003b68:	f7ff ffde 	bl	8003b28 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d8f7      	bhi.n	8003b68 <HAL_Delay+0x28>
  {
  }
}
 8003b78:	bf00      	nop
 8003b7a:	bf00      	nop
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	20000014 	.word	0x20000014

08003b88 <HAL_ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Check ADC handle */
  if(hadc == NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d101      	bne.n	8003b9a <HAL_ADC_Init+0x12>
  {
     return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e01b      	b.n	8003bd2 <HAL_ADC_Init+0x4a>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d102      	bne.n	8003bac <HAL_ADC_Init+0x24>
  {
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f817 	bl	8003bda <HAL_ADC_MspInit>
  }
  
  /* Initialize the ADC state */
  hadc->State = HAL_ADC_STATE_BUSY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2202      	movs	r2, #2
 8003bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set ADC parameters */
  ADC_Init(hadc);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 f9d7 	bl	8003f68 <ADC_Init>
  
  /* Set ADC error code to none */
  hadc->ErrorCode = HAL_ADC_ERROR_NONE;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Initialize the ADC state */
  hadc->State = HAL_ADC_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <HAL_ADC_MspInit>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b083      	sub	sp, #12
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */ 
}
 8003be2:	bf00      	nop
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
	...

08003bf0 <HAL_ADC_Start>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint16_t i = 0;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d101      	bne.n	8003c0a <HAL_ADC_Start+0x1a>
 8003c06:	2302      	movs	r3, #2
 8003c08:	e053      	b.n	8003cb2 <HAL_ADC_Start+0xc2>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Check if an injected conversion is ongoing */
  if(hadc->State == HAL_ADC_STATE_BUSY_INJ)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b22      	cmp	r3, #34	; 0x22
 8003c1c:	d104      	bne.n	8003c28 <HAL_ADC_Start+0x38>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_BUSY_INJ_REG;  
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2232      	movs	r2, #50	; 0x32
 8003c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003c26:	e003      	b.n	8003c30 <HAL_ADC_Start+0x40>
  }
  else
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_BUSY_REG;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2212      	movs	r2, #18
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  } 
    
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d010      	beq.n	8003c60 <HAL_ADC_Start+0x70>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	689a      	ldr	r2, [r3, #8]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f042 0201 	orr.w	r2, r2, #1
 8003c4c:	609a      	str	r2, [r3, #8]
    
    /* Delay inserted to wait during Tstab time the ADC's stabilization */
    for(; i <= 540; i++)
 8003c4e:	e003      	b.n	8003c58 <HAL_ADC_Start+0x68>
    {
      __NOP();
 8003c50:	bf00      	nop
    for(; i <= 540; i++)
 8003c52:	89fb      	ldrh	r3, [r7, #14]
 8003c54:	3301      	adds	r3, #1
 8003c56:	81fb      	strh	r3, [r7, #14]
 8003c58:	89fb      	ldrh	r3, [r7, #14]
 8003c5a:	f5b3 7f07 	cmp.w	r3, #540	; 0x21c
 8003c5e:	d9f7      	bls.n	8003c50 <HAL_ADC_Start+0x60>
    }
  }

  /* Check if Multimode enabled */
  if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003c60:	4b17      	ldr	r3, [pc, #92]	; (8003cc0 <HAL_ADC_Start+0xd0>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f003 031f 	and.w	r3, r3, #31
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d10c      	bne.n	8003c86 <HAL_ADC_Start+0x96>
  {
    /* if no external trigger present enable software conversion of regular channels */
    if(hadc->Init.ExternalTrigConvEdge == ADC_EXTERNALTRIGCONVEDGE_NONE)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d119      	bne.n	8003ca8 <HAL_ADC_Start+0xb8>
    {
      /* Enable the selected ADC software conversion for regular group */
      hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689a      	ldr	r2, [r3, #8]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003c82:	609a      	str	r2, [r3, #8]
 8003c84:	e010      	b.n	8003ca8 <HAL_ADC_Start+0xb8>
    }
  }
  else
  {
    /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
    if((hadc->Instance == ADC1) && (hadc->Init.ExternalTrigConvEdge == ADC_EXTERNALTRIGCONVEDGE_NONE))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a0e      	ldr	r2, [pc, #56]	; (8003cc4 <HAL_ADC_Start+0xd4>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d10b      	bne.n	8003ca8 <HAL_ADC_Start+0xb8>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d107      	bne.n	8003ca8 <HAL_ADC_Start+0xb8>
    {
      /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689a      	ldr	r2, [r3, #8]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003ca6:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3714      	adds	r7, #20
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	40012300 	.word	0x40012300
 8003cc4:	40012000 	.word	0x40012000

08003cc8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout: Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60fb      	str	r3, [r7, #12]
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003cd6:	f7ff ff27 	bl	8003b28 <HAL_GetTick>
 8003cda:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003cdc:	e018      	b.n	8003d10 <HAL_ADC_PollForConversion+0x48>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ce4:	d014      	beq.n	8003d10 <HAL_ADC_PollForConversion+0x48>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d007      	beq.n	8003cfc <HAL_ADC_PollForConversion+0x34>
 8003cec:	f7ff ff1c 	bl	8003b28 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d209      	bcs.n	8003d10 <HAL_ADC_PollForConversion+0x48>
      {
        hadc->State= HAL_ADC_STATE_TIMEOUT;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2203      	movs	r2, #3
 8003d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e016      	b.n	8003d3e <HAL_ADC_PollForConversion+0x76>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d1df      	bne.n	8003cde <HAL_ADC_PollForConversion+0x16>
      }
    }
  }
  
  /* Check if an injected conversion is ready */
  if(hadc->State == HAL_ADC_STATE_EOC_INJ)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b25      	cmp	r3, #37	; 0x25
 8003d28:	d104      	bne.n	8003d34 <HAL_ADC_PollForConversion+0x6c>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_EOC_INJ_REG;  
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2235      	movs	r2, #53	; 0x35
 8003d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003d32:	e003      	b.n	8003d3c <HAL_ADC_PollForConversion+0x74>
  }
  else
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_EOC_REG;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2215      	movs	r2, #21
 8003d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <HAL_ADC_GetValue>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003d46:	b480      	push	{r7}
 8003d48:	b083      	sub	sp, #12
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig: ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d101      	bne.n	8003d78 <HAL_ADC_ConfigChannel+0x18>
 8003d74:	2302      	movs	r3, #2
 8003d76:	e0ed      	b.n	8003f54 <HAL_ADC_ConfigChannel+0x1f4>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2b09      	cmp	r3, #9
 8003d86:	d925      	bls.n	8003dd4 <HAL_ADC_ConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68d9      	ldr	r1, [r3, #12]
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	461a      	mov	r2, r3
 8003d96:	4613      	mov	r3, r2
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	4413      	add	r3, r2
 8003d9c:	3b1e      	subs	r3, #30
 8003d9e:	2207      	movs	r2, #7
 8003da0:	fa02 f303 	lsl.w	r3, r2, r3
 8003da4:	43da      	mvns	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	400a      	ands	r2, r1
 8003dac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68d9      	ldr	r1, [r3, #12]
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	005b      	lsls	r3, r3, #1
 8003dc4:	4403      	add	r3, r0
 8003dc6:	3b1e      	subs	r3, #30
 8003dc8:	409a      	lsls	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	60da      	str	r2, [r3, #12]
 8003dd2:	e022      	b.n	8003e1a <HAL_ADC_ConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6919      	ldr	r1, [r3, #16]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	461a      	mov	r2, r3
 8003de2:	4613      	mov	r3, r2
 8003de4:	005b      	lsls	r3, r3, #1
 8003de6:	4413      	add	r3, r2
 8003de8:	2207      	movs	r2, #7
 8003dea:	fa02 f303 	lsl.w	r3, r2, r3
 8003dee:	43da      	mvns	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	400a      	ands	r2, r1
 8003df6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6919      	ldr	r1, [r3, #16]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	689a      	ldr	r2, [r3, #8]
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	4618      	mov	r0, r3
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	4403      	add	r3, r0
 8003e10:	409a      	lsls	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	2b06      	cmp	r3, #6
 8003e20:	d824      	bhi.n	8003e6c <HAL_ADC_ConfigChannel+0x10c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4413      	add	r3, r2
 8003e32:	3b05      	subs	r3, #5
 8003e34:	221f      	movs	r2, #31
 8003e36:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3a:	43da      	mvns	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	400a      	ands	r2, r1
 8003e42:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	4618      	mov	r0, r3
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	4613      	mov	r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	4413      	add	r3, r2
 8003e5c:	3b05      	subs	r3, #5
 8003e5e:	fa00 f203 	lsl.w	r2, r0, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	635a      	str	r2, [r3, #52]	; 0x34
 8003e6a:	e04c      	b.n	8003f06 <HAL_ADC_ConfigChannel+0x1a6>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	2b0c      	cmp	r3, #12
 8003e72:	d824      	bhi.n	8003ebe <HAL_ADC_ConfigChannel+0x15e>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685a      	ldr	r2, [r3, #4]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	4413      	add	r3, r2
 8003e84:	3b23      	subs	r3, #35	; 0x23
 8003e86:	221f      	movs	r2, #31
 8003e88:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8c:	43da      	mvns	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	400a      	ands	r2, r1
 8003e94:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	4413      	add	r3, r2
 8003eae:	3b23      	subs	r3, #35	; 0x23
 8003eb0:	fa00 f203 	lsl.w	r2, r0, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	631a      	str	r2, [r3, #48]	; 0x30
 8003ebc:	e023      	b.n	8003f06 <HAL_ADC_ConfigChannel+0x1a6>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685a      	ldr	r2, [r3, #4]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	4413      	add	r3, r2
 8003ece:	3b41      	subs	r3, #65	; 0x41
 8003ed0:	221f      	movs	r2, #31
 8003ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed6:	43da      	mvns	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	400a      	ands	r2, r1
 8003ede:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	4618      	mov	r0, r3
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685a      	ldr	r2, [r3, #4]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	4413      	add	r3, r2
 8003ef8:	3b41      	subs	r3, #65	; 0x41
 8003efa:	fa00 f203 	lsl.w	r2, r0, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a15      	ldr	r2, [pc, #84]	; (8003f60 <HAL_ADC_ConfigChannel+0x200>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d109      	bne.n	8003f24 <HAL_ADC_ConfigChannel+0x1c4>
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2b12      	cmp	r3, #18
 8003f16:	d105      	bne.n	8003f24 <HAL_ADC_ConfigChannel+0x1c4>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003f18:	4b12      	ldr	r3, [pc, #72]	; (8003f64 <HAL_ADC_ConfigChannel+0x204>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	4a11      	ldr	r2, [pc, #68]	; (8003f64 <HAL_ADC_ConfigChannel+0x204>)
 8003f1e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f22:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a0d      	ldr	r2, [pc, #52]	; (8003f60 <HAL_ADC_ConfigChannel+0x200>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d10d      	bne.n	8003f4a <HAL_ADC_ConfigChannel+0x1ea>
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2b10      	cmp	r3, #16
 8003f34:	d003      	beq.n	8003f3e <HAL_ADC_ConfigChannel+0x1de>
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2b11      	cmp	r3, #17
 8003f3c:	d105      	bne.n	8003f4a <HAL_ADC_ConfigChannel+0x1ea>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003f3e:	4b09      	ldr	r3, [pc, #36]	; (8003f64 <HAL_ADC_ConfigChannel+0x204>)
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	4a08      	ldr	r2, [pc, #32]	; (8003f64 <HAL_ADC_ConfigChannel+0x204>)
 8003f44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f48:	6053      	str	r3, [r2, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr
 8003f60:	40012000 	.word	0x40012000
 8003f64:	40012300 	.word	0x40012300

08003f68 <ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003f70:	4b6c      	ldr	r3, [pc, #432]	; (8004124 <ADC_Init+0x1bc>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	4a6b      	ldr	r2, [pc, #428]	; (8004124 <ADC_Init+0x1bc>)
 8003f76:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003f7a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003f7c:	4b69      	ldr	r3, [pc, #420]	; (8004124 <ADC_Init+0x1bc>)
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	4967      	ldr	r1, [pc, #412]	; (8004124 <ADC_Init+0x1bc>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	6859      	ldr	r1, [r3, #4]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	021a      	lsls	r2, r3, #8
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	685a      	ldr	r2, [r3, #4]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003fbc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6859      	ldr	r1, [r3, #4]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689a      	ldr	r2, [r3, #8]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689a      	ldr	r2, [r3, #8]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fde:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6899      	ldr	r1, [r3, #8]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	68da      	ldr	r2, [r3, #12]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	609a      	str	r2, [r3, #8]
  
  /* Select external trigger to start conversion */
  hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	689a      	ldr	r2, [r3, #8]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004000:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	6899      	ldr	r1, [r3, #8]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	430a      	orrs	r2, r1
 8004012:	609a      	str	r2, [r3, #8]

  /* Select external trigger polarity */
  hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689a      	ldr	r2, [r3, #8]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004022:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6899      	ldr	r1, [r3, #8]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	430a      	orrs	r2, r1
 8004034:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f022 0202 	bic.w	r2, r2, #2
 8004044:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6899      	ldr	r1, [r3, #8]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	005a      	lsls	r2, r3, #1
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	430a      	orrs	r2, r1
 8004058:	609a      	str	r2, [r3, #8]
  
  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405e:	2b00      	cmp	r3, #0
 8004060:	d01b      	beq.n	800409a <ADC_Init+0x132>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004070:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004080:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	6859      	ldr	r1, [r3, #4]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408c:	3b01      	subs	r3, #1
 800408e:	035a      	lsls	r2, r3, #13
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	430a      	orrs	r2, r1
 8004096:	605a      	str	r2, [r3, #4]
 8004098:	e007      	b.n	80040aa <ADC_Init+0x142>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	685a      	ldr	r2, [r3, #4]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040a8:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80040b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a1b      	ldr	r3, [r3, #32]
 80040c4:	3b01      	subs	r3, #1
 80040c6:	051a      	lsls	r2, r3, #20
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	689a      	ldr	r2, [r3, #8]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80040de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6899      	ldr	r1, [r3, #8]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	025a      	lsls	r2, r3, #9
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	430a      	orrs	r2, r1
 80040f2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	689a      	ldr	r2, [r3, #8]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004102:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6899      	ldr	r1, [r3, #8]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	029a      	lsls	r2, r3, #10
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	430a      	orrs	r2, r1
 8004116:	609a      	str	r2, [r3, #8]
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr
 8004124:	40012300 	.word	0x40012300

08004128 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f003 0307 	and.w	r3, r3, #7
 8004136:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004138:	4b0c      	ldr	r3, [pc, #48]	; (800416c <__NVIC_SetPriorityGrouping+0x44>)
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800413e:	68ba      	ldr	r2, [r7, #8]
 8004140:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004144:	4013      	ands	r3, r2
 8004146:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004150:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004154:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004158:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800415a:	4a04      	ldr	r2, [pc, #16]	; (800416c <__NVIC_SetPriorityGrouping+0x44>)
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	60d3      	str	r3, [r2, #12]
}
 8004160:	bf00      	nop
 8004162:	3714      	adds	r7, #20
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr
 800416c:	e000ed00 	.word	0xe000ed00

08004170 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004174:	4b04      	ldr	r3, [pc, #16]	; (8004188 <__NVIC_GetPriorityGrouping+0x18>)
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	0a1b      	lsrs	r3, r3, #8
 800417a:	f003 0307 	and.w	r3, r3, #7
}
 800417e:	4618      	mov	r0, r3
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr
 8004188:	e000ed00 	.word	0xe000ed00

0800418c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	4603      	mov	r3, r0
 8004194:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800419a:	2b00      	cmp	r3, #0
 800419c:	db0b      	blt.n	80041b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800419e:	79fb      	ldrb	r3, [r7, #7]
 80041a0:	f003 021f 	and.w	r2, r3, #31
 80041a4:	4907      	ldr	r1, [pc, #28]	; (80041c4 <__NVIC_EnableIRQ+0x38>)
 80041a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041aa:	095b      	lsrs	r3, r3, #5
 80041ac:	2001      	movs	r0, #1
 80041ae:	fa00 f202 	lsl.w	r2, r0, r2
 80041b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80041b6:	bf00      	nop
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	e000e100 	.word	0xe000e100

080041c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	4603      	mov	r3, r0
 80041d0:	6039      	str	r1, [r7, #0]
 80041d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	db0a      	blt.n	80041f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	b2da      	uxtb	r2, r3
 80041e0:	490c      	ldr	r1, [pc, #48]	; (8004214 <__NVIC_SetPriority+0x4c>)
 80041e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041e6:	0112      	lsls	r2, r2, #4
 80041e8:	b2d2      	uxtb	r2, r2
 80041ea:	440b      	add	r3, r1
 80041ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041f0:	e00a      	b.n	8004208 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	b2da      	uxtb	r2, r3
 80041f6:	4908      	ldr	r1, [pc, #32]	; (8004218 <__NVIC_SetPriority+0x50>)
 80041f8:	79fb      	ldrb	r3, [r7, #7]
 80041fa:	f003 030f 	and.w	r3, r3, #15
 80041fe:	3b04      	subs	r3, #4
 8004200:	0112      	lsls	r2, r2, #4
 8004202:	b2d2      	uxtb	r2, r2
 8004204:	440b      	add	r3, r1
 8004206:	761a      	strb	r2, [r3, #24]
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	e000e100 	.word	0xe000e100
 8004218:	e000ed00 	.word	0xe000ed00

0800421c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800421c:	b480      	push	{r7}
 800421e:	b089      	sub	sp, #36	; 0x24
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f003 0307 	and.w	r3, r3, #7
 800422e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	f1c3 0307 	rsb	r3, r3, #7
 8004236:	2b04      	cmp	r3, #4
 8004238:	bf28      	it	cs
 800423a:	2304      	movcs	r3, #4
 800423c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	3304      	adds	r3, #4
 8004242:	2b06      	cmp	r3, #6
 8004244:	d902      	bls.n	800424c <NVIC_EncodePriority+0x30>
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	3b03      	subs	r3, #3
 800424a:	e000      	b.n	800424e <NVIC_EncodePriority+0x32>
 800424c:	2300      	movs	r3, #0
 800424e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004250:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	fa02 f303 	lsl.w	r3, r2, r3
 800425a:	43da      	mvns	r2, r3
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	401a      	ands	r2, r3
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004264:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	fa01 f303 	lsl.w	r3, r1, r3
 800426e:	43d9      	mvns	r1, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004274:	4313      	orrs	r3, r2
         );
}
 8004276:	4618      	mov	r0, r3
 8004278:	3724      	adds	r7, #36	; 0x24
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004282:	b580      	push	{r7, lr}
 8004284:	b082      	sub	sp, #8
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f7ff ff4c 	bl	8004128 <__NVIC_SetPriorityGrouping>
}
 8004290:	bf00      	nop
 8004292:	3708      	adds	r7, #8
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004298:	b580      	push	{r7, lr}
 800429a:	b086      	sub	sp, #24
 800429c:	af00      	add	r7, sp, #0
 800429e:	4603      	mov	r3, r0
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
 80042a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80042a6:	2300      	movs	r3, #0
 80042a8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80042aa:	f7ff ff61 	bl	8004170 <__NVIC_GetPriorityGrouping>
 80042ae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	68b9      	ldr	r1, [r7, #8]
 80042b4:	6978      	ldr	r0, [r7, #20]
 80042b6:	f7ff ffb1 	bl	800421c <NVIC_EncodePriority>
 80042ba:	4602      	mov	r2, r0
 80042bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042c0:	4611      	mov	r1, r2
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7ff ff80 	bl	80041c8 <__NVIC_SetPriority>
}
 80042c8:	bf00      	nop
 80042ca:	3718      	adds	r7, #24
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	4603      	mov	r3, r0
 80042d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042de:	4618      	mov	r0, r3
 80042e0:	f7ff ff54 	bl	800418c <__NVIC_EnableIRQ>
}
 80042e4:	bf00      	nop
 80042e6:	3708      	adds	r7, #8
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80042f4:	2300      	movs	r3, #0
 80042f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80042f8:	f7ff fc16 	bl	8003b28 <HAL_GetTick>
 80042fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d101      	bne.n	8004308 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e099      	b.n	800443c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2202      	movs	r2, #2
 800430c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f022 0201 	bic.w	r2, r2, #1
 8004326:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004328:	e00f      	b.n	800434a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800432a:	f7ff fbfd 	bl	8003b28 <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	2b05      	cmp	r3, #5
 8004336:	d908      	bls.n	800434a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2220      	movs	r2, #32
 800433c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2203      	movs	r2, #3
 8004342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e078      	b.n	800443c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0301 	and.w	r3, r3, #1
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1e8      	bne.n	800432a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	4b38      	ldr	r3, [pc, #224]	; (8004444 <HAL_DMA_Init+0x158>)
 8004364:	4013      	ands	r3, r2
 8004366:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685a      	ldr	r2, [r3, #4]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004376:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004382:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800438e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a1b      	ldr	r3, [r3, #32]
 8004394:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	4313      	orrs	r3, r2
 800439a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a0:	2b04      	cmp	r3, #4
 80043a2:	d107      	bne.n	80043b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ac:	4313      	orrs	r3, r2
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	f023 0307 	bic.w	r3, r3, #7
 80043ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043da:	2b04      	cmp	r3, #4
 80043dc:	d117      	bne.n	800440e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00e      	beq.n	800440e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 fb0f 	bl	8004a14 <DMA_CheckFifoParam>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d008      	beq.n	800440e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2240      	movs	r2, #64	; 0x40
 8004400:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800440a:	2301      	movs	r3, #1
 800440c:	e016      	b.n	800443c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 fac6 	bl	80049a8 <DMA_CalcBaseAndBitshift>
 800441c:	4603      	mov	r3, r0
 800441e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004424:	223f      	movs	r2, #63	; 0x3f
 8004426:	409a      	lsls	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3718      	adds	r7, #24
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	f010803f 	.word	0xf010803f

08004448 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
 8004454:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004456:	2300      	movs	r3, #0
 8004458:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800445e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004466:	2b01      	cmp	r3, #1
 8004468:	d101      	bne.n	800446e <HAL_DMA_Start_IT+0x26>
 800446a:	2302      	movs	r3, #2
 800446c:	e040      	b.n	80044f0 <HAL_DMA_Start_IT+0xa8>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b01      	cmp	r3, #1
 8004480:	d12f      	bne.n	80044e2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2202      	movs	r2, #2
 8004486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	68b9      	ldr	r1, [r7, #8]
 8004496:	68f8      	ldr	r0, [r7, #12]
 8004498:	f000 fa58 	bl	800494c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044a0:	223f      	movs	r2, #63	; 0x3f
 80044a2:	409a      	lsls	r2, r3
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f042 0216 	orr.w	r2, r2, #22
 80044b6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d007      	beq.n	80044d0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f042 0208 	orr.w	r2, r2, #8
 80044ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f042 0201 	orr.w	r2, r2, #1
 80044de:	601a      	str	r2, [r3, #0]
 80044e0:	e005      	b.n	80044ee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80044ea:	2302      	movs	r3, #2
 80044ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80044ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3718      	adds	r7, #24
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004504:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004506:	f7ff fb0f 	bl	8003b28 <HAL_GetTick>
 800450a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004512:	b2db      	uxtb	r3, r3
 8004514:	2b02      	cmp	r3, #2
 8004516:	d008      	beq.n	800452a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2280      	movs	r2, #128	; 0x80
 800451c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e052      	b.n	80045d0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 0216 	bic.w	r2, r2, #22
 8004538:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	695a      	ldr	r2, [r3, #20]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004548:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454e:	2b00      	cmp	r3, #0
 8004550:	d103      	bne.n	800455a <HAL_DMA_Abort+0x62>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004556:	2b00      	cmp	r3, #0
 8004558:	d007      	beq.n	800456a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f022 0208 	bic.w	r2, r2, #8
 8004568:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f022 0201 	bic.w	r2, r2, #1
 8004578:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800457a:	e013      	b.n	80045a4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800457c:	f7ff fad4 	bl	8003b28 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b05      	cmp	r3, #5
 8004588:	d90c      	bls.n	80045a4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2220      	movs	r2, #32
 800458e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2203      	movs	r2, #3
 8004594:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e015      	b.n	80045d0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1e4      	bne.n	800457c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045b6:	223f      	movs	r2, #63	; 0x3f
 80045b8:	409a      	lsls	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2201      	movs	r2, #1
 80045c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d004      	beq.n	80045f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2280      	movs	r2, #128	; 0x80
 80045f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e00c      	b.n	8004610 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2205      	movs	r2, #5
 80045fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 0201 	bic.w	r2, r2, #1
 800460c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004624:	2300      	movs	r3, #0
 8004626:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004628:	4b8e      	ldr	r3, [pc, #568]	; (8004864 <HAL_DMA_IRQHandler+0x248>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a8e      	ldr	r2, [pc, #568]	; (8004868 <HAL_DMA_IRQHandler+0x24c>)
 800462e:	fba2 2303 	umull	r2, r3, r2, r3
 8004632:	0a9b      	lsrs	r3, r3, #10
 8004634:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800463a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004646:	2208      	movs	r2, #8
 8004648:	409a      	lsls	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	4013      	ands	r3, r2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d01a      	beq.n	8004688 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0304 	and.w	r3, r3, #4
 800465c:	2b00      	cmp	r3, #0
 800465e:	d013      	beq.n	8004688 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f022 0204 	bic.w	r2, r2, #4
 800466e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004674:	2208      	movs	r2, #8
 8004676:	409a      	lsls	r2, r3
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004680:	f043 0201 	orr.w	r2, r3, #1
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800468c:	2201      	movs	r2, #1
 800468e:	409a      	lsls	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	4013      	ands	r3, r2
 8004694:	2b00      	cmp	r3, #0
 8004696:	d012      	beq.n	80046be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00b      	beq.n	80046be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046aa:	2201      	movs	r2, #1
 80046ac:	409a      	lsls	r2, r3
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b6:	f043 0202 	orr.w	r2, r3, #2
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c2:	2204      	movs	r2, #4
 80046c4:	409a      	lsls	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	4013      	ands	r3, r2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d012      	beq.n	80046f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00b      	beq.n	80046f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046e0:	2204      	movs	r2, #4
 80046e2:	409a      	lsls	r2, r3
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ec:	f043 0204 	orr.w	r2, r3, #4
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046f8:	2210      	movs	r2, #16
 80046fa:	409a      	lsls	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4013      	ands	r3, r2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d043      	beq.n	800478c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0308 	and.w	r3, r3, #8
 800470e:	2b00      	cmp	r3, #0
 8004710:	d03c      	beq.n	800478c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004716:	2210      	movs	r2, #16
 8004718:	409a      	lsls	r2, r3
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d018      	beq.n	800475e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d108      	bne.n	800474c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473e:	2b00      	cmp	r3, #0
 8004740:	d024      	beq.n	800478c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	4798      	blx	r3
 800474a:	e01f      	b.n	800478c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004750:	2b00      	cmp	r3, #0
 8004752:	d01b      	beq.n	800478c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	4798      	blx	r3
 800475c:	e016      	b.n	800478c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004768:	2b00      	cmp	r3, #0
 800476a:	d107      	bne.n	800477c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f022 0208 	bic.w	r2, r2, #8
 800477a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004780:	2b00      	cmp	r3, #0
 8004782:	d003      	beq.n	800478c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004790:	2220      	movs	r2, #32
 8004792:	409a      	lsls	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4013      	ands	r3, r2
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 808f 	beq.w	80048bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0310 	and.w	r3, r3, #16
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f000 8087 	beq.w	80048bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b2:	2220      	movs	r2, #32
 80047b4:	409a      	lsls	r2, r3
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b05      	cmp	r3, #5
 80047c4:	d136      	bne.n	8004834 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f022 0216 	bic.w	r2, r2, #22
 80047d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	695a      	ldr	r2, [r3, #20]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d103      	bne.n	80047f6 <HAL_DMA_IRQHandler+0x1da>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d007      	beq.n	8004806 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 0208 	bic.w	r2, r2, #8
 8004804:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800480a:	223f      	movs	r2, #63	; 0x3f
 800480c:	409a      	lsls	r2, r3
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004826:	2b00      	cmp	r3, #0
 8004828:	d07e      	beq.n	8004928 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	4798      	blx	r3
        }
        return;
 8004832:	e079      	b.n	8004928 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d01d      	beq.n	800487e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d10d      	bne.n	800486c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004854:	2b00      	cmp	r3, #0
 8004856:	d031      	beq.n	80048bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	4798      	blx	r3
 8004860:	e02c      	b.n	80048bc <HAL_DMA_IRQHandler+0x2a0>
 8004862:	bf00      	nop
 8004864:	2000000c 	.word	0x2000000c
 8004868:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004870:	2b00      	cmp	r3, #0
 8004872:	d023      	beq.n	80048bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	4798      	blx	r3
 800487c:	e01e      	b.n	80048bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004888:	2b00      	cmp	r3, #0
 800488a:	d10f      	bne.n	80048ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f022 0210 	bic.w	r2, r2, #16
 800489a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d003      	beq.n	80048bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d032      	beq.n	800492a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d022      	beq.n	8004916 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2205      	movs	r2, #5
 80048d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f022 0201 	bic.w	r2, r2, #1
 80048e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	3301      	adds	r3, #1
 80048ec:	60bb      	str	r3, [r7, #8]
 80048ee:	697a      	ldr	r2, [r7, #20]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d307      	bcc.n	8004904 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1f2      	bne.n	80048e8 <HAL_DMA_IRQHandler+0x2cc>
 8004902:	e000      	b.n	8004906 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004904:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800491a:	2b00      	cmp	r3, #0
 800491c:	d005      	beq.n	800492a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	4798      	blx	r3
 8004926:	e000      	b.n	800492a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004928:	bf00      	nop
    }
  }
}
 800492a:	3718      	adds	r7, #24
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800493e:	b2db      	uxtb	r3, r3
}
 8004940:	4618      	mov	r0, r3
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
 8004958:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004968:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	683a      	ldr	r2, [r7, #0]
 8004970:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	2b40      	cmp	r3, #64	; 0x40
 8004978:	d108      	bne.n	800498c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68ba      	ldr	r2, [r7, #8]
 8004988:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800498a:	e007      	b.n	800499c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68ba      	ldr	r2, [r7, #8]
 8004992:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	60da      	str	r2, [r3, #12]
}
 800499c:	bf00      	nop
 800499e:	3714      	adds	r7, #20
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	3b10      	subs	r3, #16
 80049b8:	4a14      	ldr	r2, [pc, #80]	; (8004a0c <DMA_CalcBaseAndBitshift+0x64>)
 80049ba:	fba2 2303 	umull	r2, r3, r2, r3
 80049be:	091b      	lsrs	r3, r3, #4
 80049c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80049c2:	4a13      	ldr	r2, [pc, #76]	; (8004a10 <DMA_CalcBaseAndBitshift+0x68>)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4413      	add	r3, r2
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	461a      	mov	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2b03      	cmp	r3, #3
 80049d4:	d909      	bls.n	80049ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80049de:	f023 0303 	bic.w	r3, r3, #3
 80049e2:	1d1a      	adds	r2, r3, #4
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	659a      	str	r2, [r3, #88]	; 0x58
 80049e8:	e007      	b.n	80049fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80049f2:	f023 0303 	bic.w	r3, r3, #3
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3714      	adds	r7, #20
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	aaaaaaab 	.word	0xaaaaaaab
 8004a10:	080198c4 	.word	0x080198c4

08004a14 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a24:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d11f      	bne.n	8004a6e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	2b03      	cmp	r3, #3
 8004a32:	d856      	bhi.n	8004ae2 <DMA_CheckFifoParam+0xce>
 8004a34:	a201      	add	r2, pc, #4	; (adr r2, 8004a3c <DMA_CheckFifoParam+0x28>)
 8004a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a3a:	bf00      	nop
 8004a3c:	08004a4d 	.word	0x08004a4d
 8004a40:	08004a5f 	.word	0x08004a5f
 8004a44:	08004a4d 	.word	0x08004a4d
 8004a48:	08004ae3 	.word	0x08004ae3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d046      	beq.n	8004ae6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a5c:	e043      	b.n	8004ae6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a62:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a66:	d140      	bne.n	8004aea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a6c:	e03d      	b.n	8004aea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a76:	d121      	bne.n	8004abc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	2b03      	cmp	r3, #3
 8004a7c:	d837      	bhi.n	8004aee <DMA_CheckFifoParam+0xda>
 8004a7e:	a201      	add	r2, pc, #4	; (adr r2, 8004a84 <DMA_CheckFifoParam+0x70>)
 8004a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a84:	08004a95 	.word	0x08004a95
 8004a88:	08004a9b 	.word	0x08004a9b
 8004a8c:	08004a95 	.word	0x08004a95
 8004a90:	08004aad 	.word	0x08004aad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	73fb      	strb	r3, [r7, #15]
      break;
 8004a98:	e030      	b.n	8004afc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d025      	beq.n	8004af2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004aaa:	e022      	b.n	8004af2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ab4:	d11f      	bne.n	8004af6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004aba:	e01c      	b.n	8004af6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d903      	bls.n	8004aca <DMA_CheckFifoParam+0xb6>
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	2b03      	cmp	r3, #3
 8004ac6:	d003      	beq.n	8004ad0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004ac8:	e018      	b.n	8004afc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	73fb      	strb	r3, [r7, #15]
      break;
 8004ace:	e015      	b.n	8004afc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00e      	beq.n	8004afa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	73fb      	strb	r3, [r7, #15]
      break;
 8004ae0:	e00b      	b.n	8004afa <DMA_CheckFifoParam+0xe6>
      break;
 8004ae2:	bf00      	nop
 8004ae4:	e00a      	b.n	8004afc <DMA_CheckFifoParam+0xe8>
      break;
 8004ae6:	bf00      	nop
 8004ae8:	e008      	b.n	8004afc <DMA_CheckFifoParam+0xe8>
      break;
 8004aea:	bf00      	nop
 8004aec:	e006      	b.n	8004afc <DMA_CheckFifoParam+0xe8>
      break;
 8004aee:	bf00      	nop
 8004af0:	e004      	b.n	8004afc <DMA_CheckFifoParam+0xe8>
      break;
 8004af2:	bf00      	nop
 8004af4:	e002      	b.n	8004afc <DMA_CheckFifoParam+0xe8>
      break;   
 8004af6:	bf00      	nop
 8004af8:	e000      	b.n	8004afc <DMA_CheckFifoParam+0xe8>
      break;
 8004afa:	bf00      	nop
    }
  } 
  
  return status; 
 8004afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3714      	adds	r7, #20
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop

08004b0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b089      	sub	sp, #36	; 0x24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004b16:	2300      	movs	r3, #0
 8004b18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b22:	2300      	movs	r3, #0
 8004b24:	61fb      	str	r3, [r7, #28]
 8004b26:	e159      	b.n	8004ddc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004b28:	2201      	movs	r2, #1
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	4013      	ands	r3, r2
 8004b3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004b3c:	693a      	ldr	r2, [r7, #16]
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	f040 8148 	bne.w	8004dd6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f003 0303 	and.w	r3, r3, #3
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d005      	beq.n	8004b5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d130      	bne.n	8004bc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	2203      	movs	r2, #3
 8004b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6e:	43db      	mvns	r3, r3
 8004b70:	69ba      	ldr	r2, [r7, #24]
 8004b72:	4013      	ands	r3, r2
 8004b74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	68da      	ldr	r2, [r3, #12]
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b82:	69ba      	ldr	r2, [r7, #24]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	69ba      	ldr	r2, [r7, #24]
 8004b8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b94:	2201      	movs	r2, #1
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9c:	43db      	mvns	r3, r3
 8004b9e:	69ba      	ldr	r2, [r7, #24]
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	091b      	lsrs	r3, r3, #4
 8004baa:	f003 0201 	and.w	r2, r3, #1
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb4:	69ba      	ldr	r2, [r7, #24]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	69ba      	ldr	r2, [r7, #24]
 8004bbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f003 0303 	and.w	r3, r3, #3
 8004bc8:	2b03      	cmp	r3, #3
 8004bca:	d017      	beq.n	8004bfc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	005b      	lsls	r3, r3, #1
 8004bd6:	2203      	movs	r2, #3
 8004bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bdc:	43db      	mvns	r3, r3
 8004bde:	69ba      	ldr	r2, [r7, #24]
 8004be0:	4013      	ands	r3, r2
 8004be2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	689a      	ldr	r2, [r3, #8]
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	005b      	lsls	r3, r3, #1
 8004bec:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf0:	69ba      	ldr	r2, [r7, #24]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f003 0303 	and.w	r3, r3, #3
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d123      	bne.n	8004c50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	08da      	lsrs	r2, r3, #3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	3208      	adds	r2, #8
 8004c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	f003 0307 	and.w	r3, r3, #7
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	220f      	movs	r2, #15
 8004c20:	fa02 f303 	lsl.w	r3, r2, r3
 8004c24:	43db      	mvns	r3, r3
 8004c26:	69ba      	ldr	r2, [r7, #24]
 8004c28:	4013      	ands	r3, r2
 8004c2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	691a      	ldr	r2, [r3, #16]
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	f003 0307 	and.w	r3, r3, #7
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3c:	69ba      	ldr	r2, [r7, #24]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	08da      	lsrs	r2, r3, #3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	3208      	adds	r2, #8
 8004c4a:	69b9      	ldr	r1, [r7, #24]
 8004c4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	005b      	lsls	r3, r3, #1
 8004c5a:	2203      	movs	r2, #3
 8004c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c60:	43db      	mvns	r3, r3
 8004c62:	69ba      	ldr	r2, [r7, #24]
 8004c64:	4013      	ands	r3, r2
 8004c66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f003 0203 	and.w	r2, r3, #3
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	005b      	lsls	r3, r3, #1
 8004c74:	fa02 f303 	lsl.w	r3, r2, r3
 8004c78:	69ba      	ldr	r2, [r7, #24]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	69ba      	ldr	r2, [r7, #24]
 8004c82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f000 80a2 	beq.w	8004dd6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c92:	2300      	movs	r3, #0
 8004c94:	60fb      	str	r3, [r7, #12]
 8004c96:	4b57      	ldr	r3, [pc, #348]	; (8004df4 <HAL_GPIO_Init+0x2e8>)
 8004c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c9a:	4a56      	ldr	r2, [pc, #344]	; (8004df4 <HAL_GPIO_Init+0x2e8>)
 8004c9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8004ca2:	4b54      	ldr	r3, [pc, #336]	; (8004df4 <HAL_GPIO_Init+0x2e8>)
 8004ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004caa:	60fb      	str	r3, [r7, #12]
 8004cac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004cae:	4a52      	ldr	r2, [pc, #328]	; (8004df8 <HAL_GPIO_Init+0x2ec>)
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	089b      	lsrs	r3, r3, #2
 8004cb4:	3302      	adds	r3, #2
 8004cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	f003 0303 	and.w	r3, r3, #3
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	220f      	movs	r2, #15
 8004cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cca:	43db      	mvns	r3, r3
 8004ccc:	69ba      	ldr	r2, [r7, #24]
 8004cce:	4013      	ands	r3, r2
 8004cd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a49      	ldr	r2, [pc, #292]	; (8004dfc <HAL_GPIO_Init+0x2f0>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d019      	beq.n	8004d0e <HAL_GPIO_Init+0x202>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a48      	ldr	r2, [pc, #288]	; (8004e00 <HAL_GPIO_Init+0x2f4>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d013      	beq.n	8004d0a <HAL_GPIO_Init+0x1fe>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a47      	ldr	r2, [pc, #284]	; (8004e04 <HAL_GPIO_Init+0x2f8>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d00d      	beq.n	8004d06 <HAL_GPIO_Init+0x1fa>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a46      	ldr	r2, [pc, #280]	; (8004e08 <HAL_GPIO_Init+0x2fc>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d007      	beq.n	8004d02 <HAL_GPIO_Init+0x1f6>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a45      	ldr	r2, [pc, #276]	; (8004e0c <HAL_GPIO_Init+0x300>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d101      	bne.n	8004cfe <HAL_GPIO_Init+0x1f2>
 8004cfa:	2304      	movs	r3, #4
 8004cfc:	e008      	b.n	8004d10 <HAL_GPIO_Init+0x204>
 8004cfe:	2307      	movs	r3, #7
 8004d00:	e006      	b.n	8004d10 <HAL_GPIO_Init+0x204>
 8004d02:	2303      	movs	r3, #3
 8004d04:	e004      	b.n	8004d10 <HAL_GPIO_Init+0x204>
 8004d06:	2302      	movs	r3, #2
 8004d08:	e002      	b.n	8004d10 <HAL_GPIO_Init+0x204>
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e000      	b.n	8004d10 <HAL_GPIO_Init+0x204>
 8004d0e:	2300      	movs	r3, #0
 8004d10:	69fa      	ldr	r2, [r7, #28]
 8004d12:	f002 0203 	and.w	r2, r2, #3
 8004d16:	0092      	lsls	r2, r2, #2
 8004d18:	4093      	lsls	r3, r2
 8004d1a:	69ba      	ldr	r2, [r7, #24]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d20:	4935      	ldr	r1, [pc, #212]	; (8004df8 <HAL_GPIO_Init+0x2ec>)
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	089b      	lsrs	r3, r3, #2
 8004d26:	3302      	adds	r3, #2
 8004d28:	69ba      	ldr	r2, [r7, #24]
 8004d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d2e:	4b38      	ldr	r3, [pc, #224]	; (8004e10 <HAL_GPIO_Init+0x304>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	43db      	mvns	r3, r3
 8004d38:	69ba      	ldr	r2, [r7, #24]
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d003      	beq.n	8004d52 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004d4a:	69ba      	ldr	r2, [r7, #24]
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d52:	4a2f      	ldr	r2, [pc, #188]	; (8004e10 <HAL_GPIO_Init+0x304>)
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d58:	4b2d      	ldr	r3, [pc, #180]	; (8004e10 <HAL_GPIO_Init+0x304>)
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	43db      	mvns	r3, r3
 8004d62:	69ba      	ldr	r2, [r7, #24]
 8004d64:	4013      	ands	r3, r2
 8004d66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d003      	beq.n	8004d7c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d7c:	4a24      	ldr	r2, [pc, #144]	; (8004e10 <HAL_GPIO_Init+0x304>)
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004d82:	4b23      	ldr	r3, [pc, #140]	; (8004e10 <HAL_GPIO_Init+0x304>)
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	43db      	mvns	r3, r3
 8004d8c:	69ba      	ldr	r2, [r7, #24]
 8004d8e:	4013      	ands	r3, r2
 8004d90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d003      	beq.n	8004da6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004d9e:	69ba      	ldr	r2, [r7, #24]
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004da6:	4a1a      	ldr	r2, [pc, #104]	; (8004e10 <HAL_GPIO_Init+0x304>)
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004dac:	4b18      	ldr	r3, [pc, #96]	; (8004e10 <HAL_GPIO_Init+0x304>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	43db      	mvns	r3, r3
 8004db6:	69ba      	ldr	r2, [r7, #24]
 8004db8:	4013      	ands	r3, r2
 8004dba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d003      	beq.n	8004dd0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004dc8:	69ba      	ldr	r2, [r7, #24]
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004dd0:	4a0f      	ldr	r2, [pc, #60]	; (8004e10 <HAL_GPIO_Init+0x304>)
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	61fb      	str	r3, [r7, #28]
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	2b0f      	cmp	r3, #15
 8004de0:	f67f aea2 	bls.w	8004b28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004de4:	bf00      	nop
 8004de6:	bf00      	nop
 8004de8:	3724      	adds	r7, #36	; 0x24
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	40023800 	.word	0x40023800
 8004df8:	40013800 	.word	0x40013800
 8004dfc:	40020000 	.word	0x40020000
 8004e00:	40020400 	.word	0x40020400
 8004e04:	40020800 	.word	0x40020800
 8004e08:	40020c00 	.word	0x40020c00
 8004e0c:	40021000 	.word	0x40021000
 8004e10:	40013c00 	.word	0x40013c00

08004e14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	807b      	strh	r3, [r7, #2]
 8004e20:	4613      	mov	r3, r2
 8004e22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e24:	787b      	ldrb	r3, [r7, #1]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e2a:	887a      	ldrh	r2, [r7, #2]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004e30:	e003      	b.n	8004e3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004e32:	887b      	ldrh	r3, [r7, #2]
 8004e34:	041a      	lsls	r2, r3, #16
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	619a      	str	r2, [r3, #24]
}
 8004e3a:	bf00      	nop
 8004e3c:	370c      	adds	r7, #12
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
	...

08004e48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	4603      	mov	r3, r0
 8004e50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004e52:	4b08      	ldr	r3, [pc, #32]	; (8004e74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e54:	695a      	ldr	r2, [r3, #20]
 8004e56:	88fb      	ldrh	r3, [r7, #6]
 8004e58:	4013      	ands	r3, r2
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d006      	beq.n	8004e6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e5e:	4a05      	ldr	r2, [pc, #20]	; (8004e74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e60:	88fb      	ldrh	r3, [r7, #6]
 8004e62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e64:	88fb      	ldrh	r3, [r7, #6]
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7fc fbf6 	bl	8001658 <HAL_GPIO_EXTI_Callback>
  }
}
 8004e6c:	bf00      	nop
 8004e6e:	3708      	adds	r7, #8
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	40013c00 	.word	0x40013c00

08004e78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d101      	bne.n	8004e8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e12b      	b.n	80050e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d106      	bne.n	8004ea4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f7fe fa76 	bl	8003390 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2224      	movs	r2, #36	; 0x24
 8004ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f022 0201 	bic.w	r2, r2, #1
 8004eba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004eca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004eda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004edc:	f002 fa34 	bl	8007348 <HAL_RCC_GetPCLK1Freq>
 8004ee0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	4a81      	ldr	r2, [pc, #516]	; (80050ec <HAL_I2C_Init+0x274>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d807      	bhi.n	8004efc <HAL_I2C_Init+0x84>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	4a80      	ldr	r2, [pc, #512]	; (80050f0 <HAL_I2C_Init+0x278>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	bf94      	ite	ls
 8004ef4:	2301      	movls	r3, #1
 8004ef6:	2300      	movhi	r3, #0
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	e006      	b.n	8004f0a <HAL_I2C_Init+0x92>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	4a7d      	ldr	r2, [pc, #500]	; (80050f4 <HAL_I2C_Init+0x27c>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	bf94      	ite	ls
 8004f04:	2301      	movls	r3, #1
 8004f06:	2300      	movhi	r3, #0
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d001      	beq.n	8004f12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e0e7      	b.n	80050e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	4a78      	ldr	r2, [pc, #480]	; (80050f8 <HAL_I2C_Init+0x280>)
 8004f16:	fba2 2303 	umull	r2, r3, r2, r3
 8004f1a:	0c9b      	lsrs	r3, r3, #18
 8004f1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68ba      	ldr	r2, [r7, #8]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	6a1b      	ldr	r3, [r3, #32]
 8004f38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	4a6a      	ldr	r2, [pc, #424]	; (80050ec <HAL_I2C_Init+0x274>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d802      	bhi.n	8004f4c <HAL_I2C_Init+0xd4>
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	3301      	adds	r3, #1
 8004f4a:	e009      	b.n	8004f60 <HAL_I2C_Init+0xe8>
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004f52:	fb02 f303 	mul.w	r3, r2, r3
 8004f56:	4a69      	ldr	r2, [pc, #420]	; (80050fc <HAL_I2C_Init+0x284>)
 8004f58:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5c:	099b      	lsrs	r3, r3, #6
 8004f5e:	3301      	adds	r3, #1
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	6812      	ldr	r2, [r2, #0]
 8004f64:	430b      	orrs	r3, r1
 8004f66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	69db      	ldr	r3, [r3, #28]
 8004f6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004f72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	495c      	ldr	r1, [pc, #368]	; (80050ec <HAL_I2C_Init+0x274>)
 8004f7c:	428b      	cmp	r3, r1
 8004f7e:	d819      	bhi.n	8004fb4 <HAL_I2C_Init+0x13c>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	1e59      	subs	r1, r3, #1
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	005b      	lsls	r3, r3, #1
 8004f8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f8e:	1c59      	adds	r1, r3, #1
 8004f90:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004f94:	400b      	ands	r3, r1
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00a      	beq.n	8004fb0 <HAL_I2C_Init+0x138>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	1e59      	subs	r1, r3, #1
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	005b      	lsls	r3, r3, #1
 8004fa4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fa8:	3301      	adds	r3, #1
 8004faa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fae:	e051      	b.n	8005054 <HAL_I2C_Init+0x1dc>
 8004fb0:	2304      	movs	r3, #4
 8004fb2:	e04f      	b.n	8005054 <HAL_I2C_Init+0x1dc>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d111      	bne.n	8004fe0 <HAL_I2C_Init+0x168>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	1e58      	subs	r0, r3, #1
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6859      	ldr	r1, [r3, #4]
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	005b      	lsls	r3, r3, #1
 8004fc8:	440b      	add	r3, r1
 8004fca:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fce:	3301      	adds	r3, #1
 8004fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	bf0c      	ite	eq
 8004fd8:	2301      	moveq	r3, #1
 8004fda:	2300      	movne	r3, #0
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	e012      	b.n	8005006 <HAL_I2C_Init+0x18e>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	1e58      	subs	r0, r3, #1
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6859      	ldr	r1, [r3, #4]
 8004fe8:	460b      	mov	r3, r1
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	440b      	add	r3, r1
 8004fee:	0099      	lsls	r1, r3, #2
 8004ff0:	440b      	add	r3, r1
 8004ff2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	bf0c      	ite	eq
 8005000:	2301      	moveq	r3, #1
 8005002:	2300      	movne	r3, #0
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d001      	beq.n	800500e <HAL_I2C_Init+0x196>
 800500a:	2301      	movs	r3, #1
 800500c:	e022      	b.n	8005054 <HAL_I2C_Init+0x1dc>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10e      	bne.n	8005034 <HAL_I2C_Init+0x1bc>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	1e58      	subs	r0, r3, #1
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6859      	ldr	r1, [r3, #4]
 800501e:	460b      	mov	r3, r1
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	440b      	add	r3, r1
 8005024:	fbb0 f3f3 	udiv	r3, r0, r3
 8005028:	3301      	adds	r3, #1
 800502a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800502e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005032:	e00f      	b.n	8005054 <HAL_I2C_Init+0x1dc>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	1e58      	subs	r0, r3, #1
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6859      	ldr	r1, [r3, #4]
 800503c:	460b      	mov	r3, r1
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	440b      	add	r3, r1
 8005042:	0099      	lsls	r1, r3, #2
 8005044:	440b      	add	r3, r1
 8005046:	fbb0 f3f3 	udiv	r3, r0, r3
 800504a:	3301      	adds	r3, #1
 800504c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005050:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005054:	6879      	ldr	r1, [r7, #4]
 8005056:	6809      	ldr	r1, [r1, #0]
 8005058:	4313      	orrs	r3, r2
 800505a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	69da      	ldr	r2, [r3, #28]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	431a      	orrs	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	430a      	orrs	r2, r1
 8005076:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005082:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	6911      	ldr	r1, [r2, #16]
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	68d2      	ldr	r2, [r2, #12]
 800508e:	4311      	orrs	r1, r2
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	6812      	ldr	r2, [r2, #0]
 8005094:	430b      	orrs	r3, r1
 8005096:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	695a      	ldr	r2, [r3, #20]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	431a      	orrs	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	430a      	orrs	r2, r1
 80050b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f042 0201 	orr.w	r2, r2, #1
 80050c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2220      	movs	r2, #32
 80050ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	000186a0 	.word	0x000186a0
 80050f0:	001e847f 	.word	0x001e847f
 80050f4:	003d08ff 	.word	0x003d08ff
 80050f8:	431bde83 	.word	0x431bde83
 80050fc:	10624dd3 	.word	0x10624dd3

08005100 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b088      	sub	sp, #32
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005108:	2300      	movs	r3, #0
 800510a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005118:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005120:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005128:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800512a:	7bfb      	ldrb	r3, [r7, #15]
 800512c:	2b10      	cmp	r3, #16
 800512e:	d003      	beq.n	8005138 <HAL_I2C_EV_IRQHandler+0x38>
 8005130:	7bfb      	ldrb	r3, [r7, #15]
 8005132:	2b40      	cmp	r3, #64	; 0x40
 8005134:	f040 80b1 	bne.w	800529a <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	699b      	ldr	r3, [r3, #24]
 800513e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b00      	cmp	r3, #0
 8005150:	d10d      	bne.n	800516e <HAL_I2C_EV_IRQHandler+0x6e>
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005158:	d003      	beq.n	8005162 <HAL_I2C_EV_IRQHandler+0x62>
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005160:	d101      	bne.n	8005166 <HAL_I2C_EV_IRQHandler+0x66>
 8005162:	2301      	movs	r3, #1
 8005164:	e000      	b.n	8005168 <HAL_I2C_EV_IRQHandler+0x68>
 8005166:	2300      	movs	r3, #0
 8005168:	2b01      	cmp	r3, #1
 800516a:	f000 8114 	beq.w	8005396 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	f003 0301 	and.w	r3, r3, #1
 8005174:	2b00      	cmp	r3, #0
 8005176:	d00b      	beq.n	8005190 <HAL_I2C_EV_IRQHandler+0x90>
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800517e:	2b00      	cmp	r3, #0
 8005180:	d006      	beq.n	8005190 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f001 fc54 	bl	8006a30 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 fd5e 	bl	8005c4a <I2C_Master_SB>
 800518e:	e083      	b.n	8005298 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	f003 0308 	and.w	r3, r3, #8
 8005196:	2b00      	cmp	r3, #0
 8005198:	d008      	beq.n	80051ac <HAL_I2C_EV_IRQHandler+0xac>
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d003      	beq.n	80051ac <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 fdd6 	bl	8005d56 <I2C_Master_ADD10>
 80051aa:	e075      	b.n	8005298 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	f003 0302 	and.w	r3, r3, #2
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d008      	beq.n	80051c8 <HAL_I2C_EV_IRQHandler+0xc8>
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d003      	beq.n	80051c8 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 fdf2 	bl	8005daa <I2C_Master_ADDR>
 80051c6:	e067      	b.n	8005298 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	f003 0304 	and.w	r3, r3, #4
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d036      	beq.n	8005240 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051e0:	f000 80db 	beq.w	800539a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00d      	beq.n	800520a <HAL_I2C_EV_IRQHandler+0x10a>
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d008      	beq.n	800520a <HAL_I2C_EV_IRQHandler+0x10a>
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	f003 0304 	and.w	r3, r3, #4
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d103      	bne.n	800520a <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f9d6 	bl	80055b4 <I2C_MasterTransmit_TXE>
 8005208:	e046      	b.n	8005298 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	f003 0304 	and.w	r3, r3, #4
 8005210:	2b00      	cmp	r3, #0
 8005212:	f000 80c2 	beq.w	800539a <HAL_I2C_EV_IRQHandler+0x29a>
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800521c:	2b00      	cmp	r3, #0
 800521e:	f000 80bc 	beq.w	800539a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005222:	7bbb      	ldrb	r3, [r7, #14]
 8005224:	2b21      	cmp	r3, #33	; 0x21
 8005226:	d103      	bne.n	8005230 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 fa5f 	bl	80056ec <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800522e:	e0b4      	b.n	800539a <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005230:	7bfb      	ldrb	r3, [r7, #15]
 8005232:	2b40      	cmp	r3, #64	; 0x40
 8005234:	f040 80b1 	bne.w	800539a <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 facd 	bl	80057d8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800523e:	e0ac      	b.n	800539a <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800524a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800524e:	f000 80a4 	beq.w	800539a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00d      	beq.n	8005278 <HAL_I2C_EV_IRQHandler+0x178>
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005262:	2b00      	cmp	r3, #0
 8005264:	d008      	beq.n	8005278 <HAL_I2C_EV_IRQHandler+0x178>
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	f003 0304 	and.w	r3, r3, #4
 800526c:	2b00      	cmp	r3, #0
 800526e:	d103      	bne.n	8005278 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 fb45 	bl	8005900 <I2C_MasterReceive_RXNE>
 8005276:	e00f      	b.n	8005298 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	f003 0304 	and.w	r3, r3, #4
 800527e:	2b00      	cmp	r3, #0
 8005280:	f000 808b 	beq.w	800539a <HAL_I2C_EV_IRQHandler+0x29a>
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800528a:	2b00      	cmp	r3, #0
 800528c:	f000 8085 	beq.w	800539a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 fbf0 	bl	8005a76 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005296:	e080      	b.n	800539a <HAL_I2C_EV_IRQHandler+0x29a>
 8005298:	e07f      	b.n	800539a <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d004      	beq.n	80052ac <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	695b      	ldr	r3, [r3, #20]
 80052a8:	61fb      	str	r3, [r7, #28]
 80052aa:	e007      	b.n	80052bc <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	f003 0302 	and.w	r3, r3, #2
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d011      	beq.n	80052ea <HAL_I2C_EV_IRQHandler+0x1ea>
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00c      	beq.n	80052ea <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d003      	beq.n	80052e0 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80052e0:	69b9      	ldr	r1, [r7, #24]
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 ffb0 	bl	8006248 <I2C_Slave_ADDR>
 80052e8:	e05a      	b.n	80053a0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	f003 0310 	and.w	r3, r3, #16
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d008      	beq.n	8005306 <HAL_I2C_EV_IRQHandler+0x206>
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d003      	beq.n	8005306 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 ffea 	bl	80062d8 <I2C_Slave_STOPF>
 8005304:	e04c      	b.n	80053a0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005306:	7bbb      	ldrb	r3, [r7, #14]
 8005308:	2b21      	cmp	r3, #33	; 0x21
 800530a:	d002      	beq.n	8005312 <HAL_I2C_EV_IRQHandler+0x212>
 800530c:	7bbb      	ldrb	r3, [r7, #14]
 800530e:	2b29      	cmp	r3, #41	; 0x29
 8005310:	d120      	bne.n	8005354 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00d      	beq.n	8005338 <HAL_I2C_EV_IRQHandler+0x238>
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005322:	2b00      	cmp	r3, #0
 8005324:	d008      	beq.n	8005338 <HAL_I2C_EV_IRQHandler+0x238>
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	f003 0304 	and.w	r3, r3, #4
 800532c:	2b00      	cmp	r3, #0
 800532e:	d103      	bne.n	8005338 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 fecb 	bl	80060cc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005336:	e032      	b.n	800539e <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	f003 0304 	and.w	r3, r3, #4
 800533e:	2b00      	cmp	r3, #0
 8005340:	d02d      	beq.n	800539e <HAL_I2C_EV_IRQHandler+0x29e>
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005348:	2b00      	cmp	r3, #0
 800534a:	d028      	beq.n	800539e <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 fefa 	bl	8006146 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005352:	e024      	b.n	800539e <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00d      	beq.n	800537a <HAL_I2C_EV_IRQHandler+0x27a>
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005364:	2b00      	cmp	r3, #0
 8005366:	d008      	beq.n	800537a <HAL_I2C_EV_IRQHandler+0x27a>
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	f003 0304 	and.w	r3, r3, #4
 800536e:	2b00      	cmp	r3, #0
 8005370:	d103      	bne.n	800537a <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 ff08 	bl	8006188 <I2C_SlaveReceive_RXNE>
 8005378:	e012      	b.n	80053a0 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	f003 0304 	and.w	r3, r3, #4
 8005380:	2b00      	cmp	r3, #0
 8005382:	d00d      	beq.n	80053a0 <HAL_I2C_EV_IRQHandler+0x2a0>
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800538a:	2b00      	cmp	r3, #0
 800538c:	d008      	beq.n	80053a0 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 ff38 	bl	8006204 <I2C_SlaveReceive_BTF>
 8005394:	e004      	b.n	80053a0 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8005396:	bf00      	nop
 8005398:	e002      	b.n	80053a0 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800539a:	bf00      	nop
 800539c:	e000      	b.n	80053a0 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800539e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80053a0:	3720      	adds	r7, #32
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}

080053a6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80053a6:	b580      	push	{r7, lr}
 80053a8:	b08a      	sub	sp, #40	; 0x28
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	695b      	ldr	r3, [r3, #20]
 80053b4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80053be:	2300      	movs	r3, #0
 80053c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053c8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80053ca:	6a3b      	ldr	r3, [r7, #32]
 80053cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00d      	beq.n	80053f0 <HAL_I2C_ER_IRQHandler+0x4a>
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d008      	beq.n	80053f0 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80053de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e0:	f043 0301 	orr.w	r3, r3, #1
 80053e4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80053ee:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80053f0:	6a3b      	ldr	r3, [r7, #32]
 80053f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00d      	beq.n	8005416 <HAL_I2C_ER_IRQHandler+0x70>
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005400:	2b00      	cmp	r3, #0
 8005402:	d008      	beq.n	8005416 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005406:	f043 0302 	orr.w	r3, r3, #2
 800540a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005414:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005416:	6a3b      	ldr	r3, [r7, #32]
 8005418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800541c:	2b00      	cmp	r3, #0
 800541e:	d03e      	beq.n	800549e <HAL_I2C_ER_IRQHandler+0xf8>
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005426:	2b00      	cmp	r3, #0
 8005428:	d039      	beq.n	800549e <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800542a:	7efb      	ldrb	r3, [r7, #27]
 800542c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005432:	b29b      	uxth	r3, r3
 8005434:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800543c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005442:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005444:	7ebb      	ldrb	r3, [r7, #26]
 8005446:	2b20      	cmp	r3, #32
 8005448:	d112      	bne.n	8005470 <HAL_I2C_ER_IRQHandler+0xca>
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d10f      	bne.n	8005470 <HAL_I2C_ER_IRQHandler+0xca>
 8005450:	7cfb      	ldrb	r3, [r7, #19]
 8005452:	2b21      	cmp	r3, #33	; 0x21
 8005454:	d008      	beq.n	8005468 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005456:	7cfb      	ldrb	r3, [r7, #19]
 8005458:	2b29      	cmp	r3, #41	; 0x29
 800545a:	d005      	beq.n	8005468 <HAL_I2C_ER_IRQHandler+0xc2>
 800545c:	7cfb      	ldrb	r3, [r7, #19]
 800545e:	2b28      	cmp	r3, #40	; 0x28
 8005460:	d106      	bne.n	8005470 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2b21      	cmp	r3, #33	; 0x21
 8005466:	d103      	bne.n	8005470 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f001 f865 	bl	8006538 <I2C_Slave_AF>
 800546e:	e016      	b.n	800549e <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005478:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800547a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547c:	f043 0304 	orr.w	r3, r3, #4
 8005480:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005482:	7efb      	ldrb	r3, [r7, #27]
 8005484:	2b10      	cmp	r3, #16
 8005486:	d002      	beq.n	800548e <HAL_I2C_ER_IRQHandler+0xe8>
 8005488:	7efb      	ldrb	r3, [r7, #27]
 800548a:	2b40      	cmp	r3, #64	; 0x40
 800548c:	d107      	bne.n	800549e <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800549c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800549e:	6a3b      	ldr	r3, [r7, #32]
 80054a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00d      	beq.n	80054c4 <HAL_I2C_ER_IRQHandler+0x11e>
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d008      	beq.n	80054c4 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80054b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b4:	f043 0308 	orr.w	r3, r3, #8
 80054b8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80054c2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80054c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d008      	beq.n	80054dc <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d0:	431a      	orrs	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f001 f89e 	bl	8006618 <I2C_ITError>
  }
}
 80054dc:	bf00      	nop
 80054de:	3728      	adds	r7, #40	; 0x28
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	460b      	mov	r3, r1
 800553e:	70fb      	strb	r3, [r7, #3]
 8005540:	4613      	mov	r3, r2
 8005542:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80055a8:	bf00      	nop
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055c2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055ca:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d150      	bne.n	800567c <I2C_MasterTransmit_TXE+0xc8>
 80055da:	7bfb      	ldrb	r3, [r7, #15]
 80055dc:	2b21      	cmp	r3, #33	; 0x21
 80055de:	d14d      	bne.n	800567c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	2b08      	cmp	r3, #8
 80055e4:	d01d      	beq.n	8005622 <I2C_MasterTransmit_TXE+0x6e>
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	2b20      	cmp	r3, #32
 80055ea:	d01a      	beq.n	8005622 <I2C_MasterTransmit_TXE+0x6e>
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80055f2:	d016      	beq.n	8005622 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	685a      	ldr	r2, [r3, #4]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005602:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2211      	movs	r2, #17
 8005608:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2220      	movs	r2, #32
 8005616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f7ff ff62 	bl	80054e4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005620:	e060      	b.n	80056e4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	685a      	ldr	r2, [r3, #4]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005630:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005640:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2220      	movs	r2, #32
 800564c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005656:	b2db      	uxtb	r3, r3
 8005658:	2b40      	cmp	r3, #64	; 0x40
 800565a:	d107      	bne.n	800566c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f7ff ff7d 	bl	8005564 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800566a:	e03b      	b.n	80056e4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f7ff ff35 	bl	80054e4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800567a:	e033      	b.n	80056e4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800567c:	7bfb      	ldrb	r3, [r7, #15]
 800567e:	2b21      	cmp	r3, #33	; 0x21
 8005680:	d005      	beq.n	800568e <I2C_MasterTransmit_TXE+0xda>
 8005682:	7bbb      	ldrb	r3, [r7, #14]
 8005684:	2b40      	cmp	r3, #64	; 0x40
 8005686:	d12d      	bne.n	80056e4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005688:	7bfb      	ldrb	r3, [r7, #15]
 800568a:	2b22      	cmp	r3, #34	; 0x22
 800568c:	d12a      	bne.n	80056e4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005692:	b29b      	uxth	r3, r3
 8005694:	2b00      	cmp	r3, #0
 8005696:	d108      	bne.n	80056aa <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	685a      	ldr	r2, [r3, #4]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056a6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80056a8:	e01c      	b.n	80056e4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	2b40      	cmp	r3, #64	; 0x40
 80056b4:	d103      	bne.n	80056be <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f88e 	bl	80057d8 <I2C_MemoryTransmit_TXE_BTF>
}
 80056bc:	e012      	b.n	80056e4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c2:	781a      	ldrb	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ce:	1c5a      	adds	r2, r3, #1
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056d8:	b29b      	uxth	r3, r3
 80056da:	3b01      	subs	r3, #1
 80056dc:	b29a      	uxth	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80056e2:	e7ff      	b.n	80056e4 <I2C_MasterTransmit_TXE+0x130>
 80056e4:	bf00      	nop
 80056e6:	3710      	adds	r7, #16
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005700:	b2db      	uxtb	r3, r3
 8005702:	2b21      	cmp	r3, #33	; 0x21
 8005704:	d164      	bne.n	80057d0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800570a:	b29b      	uxth	r3, r3
 800570c:	2b00      	cmp	r3, #0
 800570e:	d012      	beq.n	8005736 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005714:	781a      	ldrb	r2, [r3, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005720:	1c5a      	adds	r2, r3, #1
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800572a:	b29b      	uxth	r3, r3
 800572c:	3b01      	subs	r3, #1
 800572e:	b29a      	uxth	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005734:	e04c      	b.n	80057d0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2b08      	cmp	r3, #8
 800573a:	d01d      	beq.n	8005778 <I2C_MasterTransmit_BTF+0x8c>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2b20      	cmp	r3, #32
 8005740:	d01a      	beq.n	8005778 <I2C_MasterTransmit_BTF+0x8c>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005748:	d016      	beq.n	8005778 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	685a      	ldr	r2, [r3, #4]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005758:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2211      	movs	r2, #17
 800575e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2220      	movs	r2, #32
 800576c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f7ff feb7 	bl	80054e4 <HAL_I2C_MasterTxCpltCallback>
}
 8005776:	e02b      	b.n	80057d0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	685a      	ldr	r2, [r3, #4]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005786:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005796:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2220      	movs	r2, #32
 80057a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	2b40      	cmp	r3, #64	; 0x40
 80057b0:	d107      	bne.n	80057c2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f7ff fed2 	bl	8005564 <HAL_I2C_MemTxCpltCallback>
}
 80057c0:	e006      	b.n	80057d0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f7ff fe8a 	bl	80054e4 <HAL_I2C_MasterTxCpltCallback>
}
 80057d0:	bf00      	nop
 80057d2:	3710      	adds	r7, #16
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057e6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d11d      	bne.n	800582c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d10b      	bne.n	8005810 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057fc:	b2da      	uxtb	r2, r3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005808:	1c9a      	adds	r2, r3, #2
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800580e:	e073      	b.n	80058f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005814:	b29b      	uxth	r3, r3
 8005816:	121b      	asrs	r3, r3, #8
 8005818:	b2da      	uxtb	r2, r3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005824:	1c5a      	adds	r2, r3, #1
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	651a      	str	r2, [r3, #80]	; 0x50
}
 800582a:	e065      	b.n	80058f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005830:	2b01      	cmp	r3, #1
 8005832:	d10b      	bne.n	800584c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005838:	b2da      	uxtb	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005844:	1c5a      	adds	r2, r3, #1
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	651a      	str	r2, [r3, #80]	; 0x50
}
 800584a:	e055      	b.n	80058f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005850:	2b02      	cmp	r3, #2
 8005852:	d151      	bne.n	80058f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005854:	7bfb      	ldrb	r3, [r7, #15]
 8005856:	2b22      	cmp	r3, #34	; 0x22
 8005858:	d10d      	bne.n	8005876 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005868:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800586e:	1c5a      	adds	r2, r3, #1
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005874:	e040      	b.n	80058f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800587a:	b29b      	uxth	r3, r3
 800587c:	2b00      	cmp	r3, #0
 800587e:	d015      	beq.n	80058ac <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005880:	7bfb      	ldrb	r3, [r7, #15]
 8005882:	2b21      	cmp	r3, #33	; 0x21
 8005884:	d112      	bne.n	80058ac <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588a:	781a      	ldrb	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005896:	1c5a      	adds	r2, r3, #1
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	3b01      	subs	r3, #1
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80058aa:	e025      	b.n	80058f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d120      	bne.n	80058f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80058b6:	7bfb      	ldrb	r3, [r7, #15]
 80058b8:	2b21      	cmp	r3, #33	; 0x21
 80058ba:	d11d      	bne.n	80058f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685a      	ldr	r2, [r3, #4]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80058ca:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058da:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2220      	movs	r2, #32
 80058e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f7ff fe36 	bl	8005564 <HAL_I2C_MemTxCpltCallback>
}
 80058f8:	bf00      	nop
 80058fa:	3710      	adds	r7, #16
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800590e:	b2db      	uxtb	r3, r3
 8005910:	2b22      	cmp	r3, #34	; 0x22
 8005912:	f040 80ac 	bne.w	8005a6e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800591a:	b29b      	uxth	r3, r3
 800591c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2b03      	cmp	r3, #3
 8005922:	d921      	bls.n	8005968 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	691a      	ldr	r2, [r3, #16]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592e:	b2d2      	uxtb	r2, r2
 8005930:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005936:	1c5a      	adds	r2, r3, #1
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005940:	b29b      	uxth	r3, r3
 8005942:	3b01      	subs	r3, #1
 8005944:	b29a      	uxth	r2, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800594e:	b29b      	uxth	r3, r3
 8005950:	2b03      	cmp	r3, #3
 8005952:	f040 808c 	bne.w	8005a6e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	685a      	ldr	r2, [r3, #4]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005964:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005966:	e082      	b.n	8005a6e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596c:	2b02      	cmp	r3, #2
 800596e:	d075      	beq.n	8005a5c <I2C_MasterReceive_RXNE+0x15c>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2b01      	cmp	r3, #1
 8005974:	d002      	beq.n	800597c <I2C_MasterReceive_RXNE+0x7c>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d16f      	bne.n	8005a5c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f001 f825 	bl	80069cc <I2C_WaitOnSTOPRequestThroughIT>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d142      	bne.n	8005a0e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005996:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	685a      	ldr	r2, [r3, #4]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80059a6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	691a      	ldr	r2, [r3, #16]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b2:	b2d2      	uxtb	r2, r2
 80059b4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ba:	1c5a      	adds	r2, r3, #1
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	3b01      	subs	r3, #1
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2220      	movs	r2, #32
 80059d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b40      	cmp	r3, #64	; 0x40
 80059e0:	d10a      	bne.n	80059f8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f7ff fdc1 	bl	8005578 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80059f6:	e03a      	b.n	8005a6e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2212      	movs	r2, #18
 8005a04:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f7ff fd76 	bl	80054f8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005a0c:	e02f      	b.n	8005a6e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	685a      	ldr	r2, [r3, #4]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a1c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	691a      	ldr	r2, [r3, #16]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a28:	b2d2      	uxtb	r2, r2
 8005a2a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a30:	1c5a      	adds	r2, r3, #1
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	3b01      	subs	r3, #1
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2220      	movs	r2, #32
 8005a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f7ff fd99 	bl	800558c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005a5a:	e008      	b.n	8005a6e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	685a      	ldr	r2, [r3, #4]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a6a:	605a      	str	r2, [r3, #4]
}
 8005a6c:	e7ff      	b.n	8005a6e <I2C_MasterReceive_RXNE+0x16e>
 8005a6e:	bf00      	nop
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005a76:	b580      	push	{r7, lr}
 8005a78:	b084      	sub	sp, #16
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a82:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	2b04      	cmp	r3, #4
 8005a8c:	d11b      	bne.n	8005ac6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	685a      	ldr	r2, [r3, #4]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a9c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	691a      	ldr	r2, [r3, #16]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa8:	b2d2      	uxtb	r2, r2
 8005aaa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab0:	1c5a      	adds	r2, r3, #1
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	3b01      	subs	r3, #1
 8005abe:	b29a      	uxth	r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005ac4:	e0bd      	b.n	8005c42 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	2b03      	cmp	r3, #3
 8005ace:	d129      	bne.n	8005b24 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	685a      	ldr	r2, [r3, #4]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ade:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2b04      	cmp	r3, #4
 8005ae4:	d00a      	beq.n	8005afc <I2C_MasterReceive_BTF+0x86>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d007      	beq.n	8005afc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005afa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	691a      	ldr	r2, [r3, #16]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b06:	b2d2      	uxtb	r2, r2
 8005b08:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0e:	1c5a      	adds	r2, r3, #1
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005b22:	e08e      	b.n	8005c42 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	2b02      	cmp	r3, #2
 8005b2c:	d176      	bne.n	8005c1c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d002      	beq.n	8005b3a <I2C_MasterReceive_BTF+0xc4>
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2b10      	cmp	r3, #16
 8005b38:	d108      	bne.n	8005b4c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b48:	601a      	str	r2, [r3, #0]
 8005b4a:	e019      	b.n	8005b80 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2b04      	cmp	r3, #4
 8005b50:	d002      	beq.n	8005b58 <I2C_MasterReceive_BTF+0xe2>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d108      	bne.n	8005b6a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b66:	601a      	str	r2, [r3, #0]
 8005b68:	e00a      	b.n	8005b80 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2b10      	cmp	r3, #16
 8005b6e:	d007      	beq.n	8005b80 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b7e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	691a      	ldr	r2, [r3, #16]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8a:	b2d2      	uxtb	r2, r2
 8005b8c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b92:	1c5a      	adds	r2, r3, #1
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	691a      	ldr	r2, [r3, #16]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb0:	b2d2      	uxtb	r2, r2
 8005bb2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb8:	1c5a      	adds	r2, r3, #1
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	685a      	ldr	r2, [r3, #4]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005bda:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2220      	movs	r2, #32
 8005be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	2b40      	cmp	r3, #64	; 0x40
 8005bee:	d10a      	bne.n	8005c06 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f7ff fcba 	bl	8005578 <HAL_I2C_MemRxCpltCallback>
}
 8005c04:	e01d      	b.n	8005c42 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2212      	movs	r2, #18
 8005c12:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f7ff fc6f 	bl	80054f8 <HAL_I2C_MasterRxCpltCallback>
}
 8005c1a:	e012      	b.n	8005c42 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	691a      	ldr	r2, [r3, #16]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c26:	b2d2      	uxtb	r2, r2
 8005c28:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2e:	1c5a      	adds	r2, r3, #1
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005c42:	bf00      	nop
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	b083      	sub	sp, #12
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b40      	cmp	r3, #64	; 0x40
 8005c5c:	d117      	bne.n	8005c8e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d109      	bne.n	8005c7a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c76:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005c78:	e067      	b.n	8005d4a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	f043 0301 	orr.w	r3, r3, #1
 8005c84:	b2da      	uxtb	r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	611a      	str	r2, [r3, #16]
}
 8005c8c:	e05d      	b.n	8005d4a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c96:	d133      	bne.n	8005d00 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	2b21      	cmp	r3, #33	; 0x21
 8005ca2:	d109      	bne.n	8005cb8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	461a      	mov	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005cb4:	611a      	str	r2, [r3, #16]
 8005cb6:	e008      	b.n	8005cca <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	f043 0301 	orr.w	r3, r3, #1
 8005cc2:	b2da      	uxtb	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d004      	beq.n	8005cdc <I2C_Master_SB+0x92>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d108      	bne.n	8005cee <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d032      	beq.n	8005d4a <I2C_Master_SB+0x100>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d02d      	beq.n	8005d4a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	685a      	ldr	r2, [r3, #4]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cfc:	605a      	str	r2, [r3, #4]
}
 8005cfe:	e024      	b.n	8005d4a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d10e      	bne.n	8005d26 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	11db      	asrs	r3, r3, #7
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	f003 0306 	and.w	r3, r3, #6
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	f063 030f 	orn	r3, r3, #15
 8005d1c:	b2da      	uxtb	r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	611a      	str	r2, [r3, #16]
}
 8005d24:	e011      	b.n	8005d4a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d10d      	bne.n	8005d4a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	11db      	asrs	r3, r3, #7
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	f003 0306 	and.w	r3, r3, #6
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	f063 030e 	orn	r3, r3, #14
 8005d42:	b2da      	uxtb	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	611a      	str	r2, [r3, #16]
}
 8005d4a:	bf00      	nop
 8005d4c:	370c      	adds	r7, #12
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005d56:	b480      	push	{r7}
 8005d58:	b083      	sub	sp, #12
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d62:	b2da      	uxtb	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d004      	beq.n	8005d7c <I2C_Master_ADD10+0x26>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d108      	bne.n	8005d8e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d00c      	beq.n	8005d9e <I2C_Master_ADD10+0x48>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d007      	beq.n	8005d9e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	685a      	ldr	r2, [r3, #4]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d9c:	605a      	str	r2, [r3, #4]
  }
}
 8005d9e:	bf00      	nop
 8005da0:	370c      	adds	r7, #12
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr

08005daa <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005daa:	b480      	push	{r7}
 8005dac:	b091      	sub	sp, #68	; 0x44
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005db8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	2b22      	cmp	r3, #34	; 0x22
 8005dd2:	f040 8169 	bne.w	80060a8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d10f      	bne.n	8005dfe <I2C_Master_ADDR+0x54>
 8005dde:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005de2:	2b40      	cmp	r3, #64	; 0x40
 8005de4:	d10b      	bne.n	8005dfe <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005de6:	2300      	movs	r3, #0
 8005de8:	633b      	str	r3, [r7, #48]	; 0x30
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	695b      	ldr	r3, [r3, #20]
 8005df0:	633b      	str	r3, [r7, #48]	; 0x30
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	699b      	ldr	r3, [r3, #24]
 8005df8:	633b      	str	r3, [r7, #48]	; 0x30
 8005dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfc:	e160      	b.n	80060c0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d11d      	bne.n	8005e42 <I2C_Master_ADDR+0x98>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005e0e:	d118      	bne.n	8005e42 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e10:	2300      	movs	r3, #0
 8005e12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	695b      	ldr	r3, [r3, #20]
 8005e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	699b      	ldr	r3, [r3, #24]
 8005e22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e34:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e3a:	1c5a      	adds	r2, r3, #1
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	651a      	str	r2, [r3, #80]	; 0x50
 8005e40:	e13e      	b.n	80060c0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d113      	bne.n	8005e74 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	699b      	ldr	r3, [r3, #24]
 8005e5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e60:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e70:	601a      	str	r2, [r3, #0]
 8005e72:	e115      	b.n	80060a0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	f040 808a 	bne.w	8005f94 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e82:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e86:	d137      	bne.n	8005ef8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e96:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ea2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ea6:	d113      	bne.n	8005ed0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005eb6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005eb8:	2300      	movs	r3, #0
 8005eba:	627b      	str	r3, [r7, #36]	; 0x24
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	695b      	ldr	r3, [r3, #20]
 8005ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	627b      	str	r3, [r7, #36]	; 0x24
 8005ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ece:	e0e7      	b.n	80060a0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	623b      	str	r3, [r7, #32]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	623b      	str	r3, [r7, #32]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	623b      	str	r3, [r7, #32]
 8005ee4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ef4:	601a      	str	r2, [r3, #0]
 8005ef6:	e0d3      	b.n	80060a0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efa:	2b08      	cmp	r3, #8
 8005efc:	d02e      	beq.n	8005f5c <I2C_Master_ADDR+0x1b2>
 8005efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f00:	2b20      	cmp	r3, #32
 8005f02:	d02b      	beq.n	8005f5c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f06:	2b12      	cmp	r3, #18
 8005f08:	d102      	bne.n	8005f10 <I2C_Master_ADDR+0x166>
 8005f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d125      	bne.n	8005f5c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f12:	2b04      	cmp	r3, #4
 8005f14:	d00e      	beq.n	8005f34 <I2C_Master_ADDR+0x18a>
 8005f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d00b      	beq.n	8005f34 <I2C_Master_ADDR+0x18a>
 8005f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1e:	2b10      	cmp	r3, #16
 8005f20:	d008      	beq.n	8005f34 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f30:	601a      	str	r2, [r3, #0]
 8005f32:	e007      	b.n	8005f44 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f42:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f44:	2300      	movs	r3, #0
 8005f46:	61fb      	str	r3, [r7, #28]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	695b      	ldr	r3, [r3, #20]
 8005f4e:	61fb      	str	r3, [r7, #28]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	61fb      	str	r3, [r7, #28]
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	e0a1      	b.n	80060a0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f6a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	61bb      	str	r3, [r7, #24]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	695b      	ldr	r3, [r3, #20]
 8005f76:	61bb      	str	r3, [r7, #24]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	699b      	ldr	r3, [r3, #24]
 8005f7e:	61bb      	str	r3, [r7, #24]
 8005f80:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f90:	601a      	str	r2, [r3, #0]
 8005f92:	e085      	b.n	80060a0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d14d      	bne.n	800603a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa0:	2b04      	cmp	r3, #4
 8005fa2:	d016      	beq.n	8005fd2 <I2C_Master_ADDR+0x228>
 8005fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d013      	beq.n	8005fd2 <I2C_Master_ADDR+0x228>
 8005faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fac:	2b10      	cmp	r3, #16
 8005fae:	d010      	beq.n	8005fd2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fbe:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fce:	601a      	str	r2, [r3, #0]
 8005fd0:	e007      	b.n	8005fe2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005fe0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ff0:	d117      	bne.n	8006022 <I2C_Master_ADDR+0x278>
 8005ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ff8:	d00b      	beq.n	8006012 <I2C_Master_ADDR+0x268>
 8005ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d008      	beq.n	8006012 <I2C_Master_ADDR+0x268>
 8006000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006002:	2b08      	cmp	r3, #8
 8006004:	d005      	beq.n	8006012 <I2C_Master_ADDR+0x268>
 8006006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006008:	2b10      	cmp	r3, #16
 800600a:	d002      	beq.n	8006012 <I2C_Master_ADDR+0x268>
 800600c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800600e:	2b20      	cmp	r3, #32
 8006010:	d107      	bne.n	8006022 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	685a      	ldr	r2, [r3, #4]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006020:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006022:	2300      	movs	r3, #0
 8006024:	617b      	str	r3, [r7, #20]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	695b      	ldr	r3, [r3, #20]
 800602c:	617b      	str	r3, [r7, #20]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	617b      	str	r3, [r7, #20]
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	e032      	b.n	80060a0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006048:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006054:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006058:	d117      	bne.n	800608a <I2C_Master_ADDR+0x2e0>
 800605a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800605c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006060:	d00b      	beq.n	800607a <I2C_Master_ADDR+0x2d0>
 8006062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006064:	2b01      	cmp	r3, #1
 8006066:	d008      	beq.n	800607a <I2C_Master_ADDR+0x2d0>
 8006068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800606a:	2b08      	cmp	r3, #8
 800606c:	d005      	beq.n	800607a <I2C_Master_ADDR+0x2d0>
 800606e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006070:	2b10      	cmp	r3, #16
 8006072:	d002      	beq.n	800607a <I2C_Master_ADDR+0x2d0>
 8006074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006076:	2b20      	cmp	r3, #32
 8006078:	d107      	bne.n	800608a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	685a      	ldr	r2, [r3, #4]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006088:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800608a:	2300      	movs	r3, #0
 800608c:	613b      	str	r3, [r7, #16]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	695b      	ldr	r3, [r3, #20]
 8006094:	613b      	str	r3, [r7, #16]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	613b      	str	r3, [r7, #16]
 800609e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80060a6:	e00b      	b.n	80060c0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060a8:	2300      	movs	r3, #0
 80060aa:	60fb      	str	r3, [r7, #12]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	695b      	ldr	r3, [r3, #20]
 80060b2:	60fb      	str	r3, [r7, #12]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	699b      	ldr	r3, [r3, #24]
 80060ba:	60fb      	str	r3, [r7, #12]
 80060bc:	68fb      	ldr	r3, [r7, #12]
}
 80060be:	e7ff      	b.n	80060c0 <I2C_Master_ADDR+0x316>
 80060c0:	bf00      	nop
 80060c2:	3744      	adds	r7, #68	; 0x44
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060da:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d02b      	beq.n	800613e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ea:	781a      	ldrb	r2, [r3, #0]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f6:	1c5a      	adds	r2, r3, #1
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006100:	b29b      	uxth	r3, r3
 8006102:	3b01      	subs	r3, #1
 8006104:	b29a      	uxth	r2, r3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800610e:	b29b      	uxth	r3, r3
 8006110:	2b00      	cmp	r3, #0
 8006112:	d114      	bne.n	800613e <I2C_SlaveTransmit_TXE+0x72>
 8006114:	7bfb      	ldrb	r3, [r7, #15]
 8006116:	2b29      	cmp	r3, #41	; 0x29
 8006118:	d111      	bne.n	800613e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	685a      	ldr	r2, [r3, #4]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006128:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2221      	movs	r2, #33	; 0x21
 800612e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2228      	movs	r2, #40	; 0x28
 8006134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f7ff f9e7 	bl	800550c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800613e:	bf00      	nop
 8006140:	3710      	adds	r7, #16
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}

08006146 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006146:	b480      	push	{r7}
 8006148:	b083      	sub	sp, #12
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006152:	b29b      	uxth	r3, r3
 8006154:	2b00      	cmp	r3, #0
 8006156:	d011      	beq.n	800617c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615c:	781a      	ldrb	r2, [r3, #0]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006168:	1c5a      	adds	r2, r3, #1
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006172:	b29b      	uxth	r3, r3
 8006174:	3b01      	subs	r3, #1
 8006176:	b29a      	uxth	r2, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800617c:	bf00      	nop
 800617e:	370c      	adds	r7, #12
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006196:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800619c:	b29b      	uxth	r3, r3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d02c      	beq.n	80061fc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	691a      	ldr	r2, [r3, #16]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ac:	b2d2      	uxtb	r2, r2
 80061ae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b4:	1c5a      	adds	r2, r3, #1
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061be:	b29b      	uxth	r3, r3
 80061c0:	3b01      	subs	r3, #1
 80061c2:	b29a      	uxth	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d114      	bne.n	80061fc <I2C_SlaveReceive_RXNE+0x74>
 80061d2:	7bfb      	ldrb	r3, [r7, #15]
 80061d4:	2b2a      	cmp	r3, #42	; 0x2a
 80061d6:	d111      	bne.n	80061fc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	685a      	ldr	r2, [r3, #4]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061e6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2222      	movs	r2, #34	; 0x22
 80061ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2228      	movs	r2, #40	; 0x28
 80061f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f7ff f992 	bl	8005520 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80061fc:	bf00      	nop
 80061fe:	3710      	adds	r7, #16
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006210:	b29b      	uxth	r3, r3
 8006212:	2b00      	cmp	r3, #0
 8006214:	d012      	beq.n	800623c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	691a      	ldr	r2, [r3, #16]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006220:	b2d2      	uxtb	r2, r2
 8006222:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006228:	1c5a      	adds	r2, r3, #1
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006232:	b29b      	uxth	r3, r3
 8006234:	3b01      	subs	r3, #1
 8006236:	b29a      	uxth	r2, r3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800623c:	bf00      	nop
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006252:	2300      	movs	r3, #0
 8006254:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800625c:	b2db      	uxtb	r3, r3
 800625e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006262:	2b28      	cmp	r3, #40	; 0x28
 8006264:	d125      	bne.n	80062b2 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	685a      	ldr	r2, [r3, #4]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006274:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	f003 0304 	and.w	r3, r3, #4
 800627c:	2b00      	cmp	r3, #0
 800627e:	d101      	bne.n	8006284 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006280:	2301      	movs	r3, #1
 8006282:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800628a:	2b00      	cmp	r3, #0
 800628c:	d103      	bne.n	8006296 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	81bb      	strh	r3, [r7, #12]
 8006294:	e002      	b.n	800629c <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80062a4:	89ba      	ldrh	r2, [r7, #12]
 80062a6:	7bfb      	ldrb	r3, [r7, #15]
 80062a8:	4619      	mov	r1, r3
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f7ff f942 	bl	8005534 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80062b0:	e00e      	b.n	80062d0 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062b2:	2300      	movs	r3, #0
 80062b4:	60bb      	str	r3, [r7, #8]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	695b      	ldr	r3, [r3, #20]
 80062bc:	60bb      	str	r3, [r7, #8]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	699b      	ldr	r3, [r3, #24]
 80062c4:	60bb      	str	r3, [r7, #8]
 80062c6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80062d0:	bf00      	nop
 80062d2:	3710      	adds	r7, #16
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062e6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	685a      	ldr	r2, [r3, #4]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80062f6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80062f8:	2300      	movs	r3, #0
 80062fa:	60bb      	str	r3, [r7, #8]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	695b      	ldr	r3, [r3, #20]
 8006302:	60bb      	str	r3, [r7, #8]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f042 0201 	orr.w	r2, r2, #1
 8006312:	601a      	str	r2, [r3, #0]
 8006314:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006324:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006330:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006334:	d172      	bne.n	800641c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006336:	7bfb      	ldrb	r3, [r7, #15]
 8006338:	2b22      	cmp	r3, #34	; 0x22
 800633a:	d002      	beq.n	8006342 <I2C_Slave_STOPF+0x6a>
 800633c:	7bfb      	ldrb	r3, [r7, #15]
 800633e:	2b2a      	cmp	r3, #42	; 0x2a
 8006340:	d135      	bne.n	80063ae <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	b29a      	uxth	r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006354:	b29b      	uxth	r3, r3
 8006356:	2b00      	cmp	r3, #0
 8006358:	d005      	beq.n	8006366 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635e:	f043 0204 	orr.w	r2, r3, #4
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	685a      	ldr	r2, [r3, #4]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006374:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800637a:	4618      	mov	r0, r3
 800637c:	f7fe fad8 	bl	8004930 <HAL_DMA_GetState>
 8006380:	4603      	mov	r3, r0
 8006382:	2b01      	cmp	r3, #1
 8006384:	d049      	beq.n	800641a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638a:	4a69      	ldr	r2, [pc, #420]	; (8006530 <I2C_Slave_STOPF+0x258>)
 800638c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006392:	4618      	mov	r0, r3
 8006394:	f7fe f920 	bl	80045d8 <HAL_DMA_Abort_IT>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d03d      	beq.n	800641a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80063a8:	4610      	mov	r0, r2
 80063aa:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80063ac:	e035      	b.n	800641a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	b29a      	uxth	r2, r3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d005      	beq.n	80063d2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ca:	f043 0204 	orr.w	r2, r3, #4
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	685a      	ldr	r2, [r3, #4]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063e0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063e6:	4618      	mov	r0, r3
 80063e8:	f7fe faa2 	bl	8004930 <HAL_DMA_GetState>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d014      	beq.n	800641c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063f6:	4a4e      	ldr	r2, [pc, #312]	; (8006530 <I2C_Slave_STOPF+0x258>)
 80063f8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063fe:	4618      	mov	r0, r3
 8006400:	f7fe f8ea 	bl	80045d8 <HAL_DMA_Abort_IT>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d008      	beq.n	800641c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800640e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006414:	4610      	mov	r0, r2
 8006416:	4798      	blx	r3
 8006418:	e000      	b.n	800641c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800641a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006420:	b29b      	uxth	r3, r3
 8006422:	2b00      	cmp	r3, #0
 8006424:	d03e      	beq.n	80064a4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	695b      	ldr	r3, [r3, #20]
 800642c:	f003 0304 	and.w	r3, r3, #4
 8006430:	2b04      	cmp	r3, #4
 8006432:	d112      	bne.n	800645a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	691a      	ldr	r2, [r3, #16]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643e:	b2d2      	uxtb	r2, r2
 8006440:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006446:	1c5a      	adds	r2, r3, #1
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006450:	b29b      	uxth	r3, r3
 8006452:	3b01      	subs	r3, #1
 8006454:	b29a      	uxth	r2, r3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	695b      	ldr	r3, [r3, #20]
 8006460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006464:	2b40      	cmp	r3, #64	; 0x40
 8006466:	d112      	bne.n	800648e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	691a      	ldr	r2, [r3, #16]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006472:	b2d2      	uxtb	r2, r2
 8006474:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647a:	1c5a      	adds	r2, r3, #1
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006484:	b29b      	uxth	r3, r3
 8006486:	3b01      	subs	r3, #1
 8006488:	b29a      	uxth	r2, r3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006492:	b29b      	uxth	r3, r3
 8006494:	2b00      	cmp	r3, #0
 8006496:	d005      	beq.n	80064a4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649c:	f043 0204 	orr.w	r2, r3, #4
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d003      	beq.n	80064b4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 f8b3 	bl	8006618 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80064b2:	e039      	b.n	8006528 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80064b4:	7bfb      	ldrb	r3, [r7, #15]
 80064b6:	2b2a      	cmp	r3, #42	; 0x2a
 80064b8:	d109      	bne.n	80064ce <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2228      	movs	r2, #40	; 0x28
 80064c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f7ff f829 	bl	8005520 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	2b28      	cmp	r3, #40	; 0x28
 80064d8:	d111      	bne.n	80064fe <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a15      	ldr	r2, [pc, #84]	; (8006534 <I2C_Slave_STOPF+0x25c>)
 80064de:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2220      	movs	r2, #32
 80064ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f7ff f82a 	bl	8005550 <HAL_I2C_ListenCpltCallback>
}
 80064fc:	e014      	b.n	8006528 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006502:	2b22      	cmp	r3, #34	; 0x22
 8006504:	d002      	beq.n	800650c <I2C_Slave_STOPF+0x234>
 8006506:	7bfb      	ldrb	r3, [r7, #15]
 8006508:	2b22      	cmp	r3, #34	; 0x22
 800650a:	d10d      	bne.n	8006528 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2220      	movs	r2, #32
 8006516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f7fe fffc 	bl	8005520 <HAL_I2C_SlaveRxCpltCallback>
}
 8006528:	bf00      	nop
 800652a:	3710      	adds	r7, #16
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}
 8006530:	0800687d 	.word	0x0800687d
 8006534:	ffff0000 	.word	0xffff0000

08006538 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006546:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800654c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	2b08      	cmp	r3, #8
 8006552:	d002      	beq.n	800655a <I2C_Slave_AF+0x22>
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	2b20      	cmp	r3, #32
 8006558:	d129      	bne.n	80065ae <I2C_Slave_AF+0x76>
 800655a:	7bfb      	ldrb	r3, [r7, #15]
 800655c:	2b28      	cmp	r3, #40	; 0x28
 800655e:	d126      	bne.n	80065ae <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a2c      	ldr	r2, [pc, #176]	; (8006614 <I2C_Slave_AF+0xdc>)
 8006564:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	685a      	ldr	r2, [r3, #4]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006574:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800657e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800658e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2220      	movs	r2, #32
 800659a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f7fe ffd2 	bl	8005550 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80065ac:	e02e      	b.n	800660c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80065ae:	7bfb      	ldrb	r3, [r7, #15]
 80065b0:	2b21      	cmp	r3, #33	; 0x21
 80065b2:	d126      	bne.n	8006602 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a17      	ldr	r2, [pc, #92]	; (8006614 <I2C_Slave_AF+0xdc>)
 80065b8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2221      	movs	r2, #33	; 0x21
 80065be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2220      	movs	r2, #32
 80065c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	685a      	ldr	r2, [r3, #4]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80065de:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80065e8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065f8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7fe ff86 	bl	800550c <HAL_I2C_SlaveTxCpltCallback>
}
 8006600:	e004      	b.n	800660c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800660a:	615a      	str	r2, [r3, #20]
}
 800660c:	bf00      	nop
 800660e:	3710      	adds	r7, #16
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}
 8006614:	ffff0000 	.word	0xffff0000

08006618 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006626:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800662e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006630:	7bbb      	ldrb	r3, [r7, #14]
 8006632:	2b10      	cmp	r3, #16
 8006634:	d002      	beq.n	800663c <I2C_ITError+0x24>
 8006636:	7bbb      	ldrb	r3, [r7, #14]
 8006638:	2b40      	cmp	r3, #64	; 0x40
 800663a:	d10a      	bne.n	8006652 <I2C_ITError+0x3a>
 800663c:	7bfb      	ldrb	r3, [r7, #15]
 800663e:	2b22      	cmp	r3, #34	; 0x22
 8006640:	d107      	bne.n	8006652 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006650:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006652:	7bfb      	ldrb	r3, [r7, #15]
 8006654:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006658:	2b28      	cmp	r3, #40	; 0x28
 800665a:	d107      	bne.n	800666c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2228      	movs	r2, #40	; 0x28
 8006666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800666a:	e015      	b.n	8006698 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006676:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800667a:	d00a      	beq.n	8006692 <I2C_ITError+0x7a>
 800667c:	7bfb      	ldrb	r3, [r7, #15]
 800667e:	2b60      	cmp	r3, #96	; 0x60
 8006680:	d007      	beq.n	8006692 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2220      	movs	r2, #32
 8006686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066a6:	d162      	bne.n	800676e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	685a      	ldr	r2, [r3, #4]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066b6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d020      	beq.n	8006708 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ca:	4a6a      	ldr	r2, [pc, #424]	; (8006874 <I2C_ITError+0x25c>)
 80066cc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066d2:	4618      	mov	r0, r3
 80066d4:	f7fd ff80 	bl	80045d8 <HAL_DMA_Abort_IT>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	f000 8089 	beq.w	80067f2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f022 0201 	bic.w	r2, r2, #1
 80066ee:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2220      	movs	r2, #32
 80066f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006702:	4610      	mov	r0, r2
 8006704:	4798      	blx	r3
 8006706:	e074      	b.n	80067f2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800670c:	4a59      	ldr	r2, [pc, #356]	; (8006874 <I2C_ITError+0x25c>)
 800670e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006714:	4618      	mov	r0, r3
 8006716:	f7fd ff5f 	bl	80045d8 <HAL_DMA_Abort_IT>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d068      	beq.n	80067f2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	695b      	ldr	r3, [r3, #20]
 8006726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800672a:	2b40      	cmp	r3, #64	; 0x40
 800672c:	d10b      	bne.n	8006746 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	691a      	ldr	r2, [r3, #16]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006738:	b2d2      	uxtb	r2, r2
 800673a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006740:	1c5a      	adds	r2, r3, #1
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f022 0201 	bic.w	r2, r2, #1
 8006754:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2220      	movs	r2, #32
 800675a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006768:	4610      	mov	r0, r2
 800676a:	4798      	blx	r3
 800676c:	e041      	b.n	80067f2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006774:	b2db      	uxtb	r3, r3
 8006776:	2b60      	cmp	r3, #96	; 0x60
 8006778:	d125      	bne.n	80067c6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2220      	movs	r2, #32
 800677e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	695b      	ldr	r3, [r3, #20]
 800678e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006792:	2b40      	cmp	r3, #64	; 0x40
 8006794:	d10b      	bne.n	80067ae <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	691a      	ldr	r2, [r3, #16]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a0:	b2d2      	uxtb	r2, r2
 80067a2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a8:	1c5a      	adds	r2, r3, #1
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f022 0201 	bic.w	r2, r2, #1
 80067bc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f7fe feee 	bl	80055a0 <HAL_I2C_AbortCpltCallback>
 80067c4:	e015      	b.n	80067f2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	695b      	ldr	r3, [r3, #20]
 80067cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067d0:	2b40      	cmp	r3, #64	; 0x40
 80067d2:	d10b      	bne.n	80067ec <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	691a      	ldr	r2, [r3, #16]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067de:	b2d2      	uxtb	r2, r2
 80067e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e6:	1c5a      	adds	r2, r3, #1
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f7fe fecd 	bl	800558c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d10e      	bne.n	8006820 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006808:	2b00      	cmp	r3, #0
 800680a:	d109      	bne.n	8006820 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006812:	2b00      	cmp	r3, #0
 8006814:	d104      	bne.n	8006820 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800681c:	2b00      	cmp	r3, #0
 800681e:	d007      	beq.n	8006830 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	685a      	ldr	r2, [r3, #4]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800682e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006836:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683c:	f003 0304 	and.w	r3, r3, #4
 8006840:	2b04      	cmp	r3, #4
 8006842:	d113      	bne.n	800686c <I2C_ITError+0x254>
 8006844:	7bfb      	ldrb	r3, [r7, #15]
 8006846:	2b28      	cmp	r3, #40	; 0x28
 8006848:	d110      	bne.n	800686c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a0a      	ldr	r2, [pc, #40]	; (8006878 <I2C_ITError+0x260>)
 800684e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2220      	movs	r2, #32
 800685a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f7fe fe72 	bl	8005550 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800686c:	bf00      	nop
 800686e:	3710      	adds	r7, #16
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}
 8006874:	0800687d 	.word	0x0800687d
 8006878:	ffff0000 	.word	0xffff0000

0800687c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b086      	sub	sp, #24
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006884:	2300      	movs	r3, #0
 8006886:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800688c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006894:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006896:	4b4b      	ldr	r3, [pc, #300]	; (80069c4 <I2C_DMAAbort+0x148>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	08db      	lsrs	r3, r3, #3
 800689c:	4a4a      	ldr	r2, [pc, #296]	; (80069c8 <I2C_DMAAbort+0x14c>)
 800689e:	fba2 2303 	umull	r2, r3, r2, r3
 80068a2:	0a1a      	lsrs	r2, r3, #8
 80068a4:	4613      	mov	r3, r2
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	4413      	add	r3, r2
 80068aa:	00da      	lsls	r2, r3, #3
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d106      	bne.n	80068c4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ba:	f043 0220 	orr.w	r2, r3, #32
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80068c2:	e00a      	b.n	80068da <I2C_DMAAbort+0x5e>
    }
    count--;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	3b01      	subs	r3, #1
 80068c8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068d8:	d0ea      	beq.n	80068b0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d003      	beq.n	80068ea <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068e6:	2200      	movs	r2, #0
 80068e8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d003      	beq.n	80068fa <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f6:	2200      	movs	r2, #0
 80068f8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006908:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	2200      	movs	r2, #0
 800690e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006914:	2b00      	cmp	r3, #0
 8006916:	d003      	beq.n	8006920 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800691c:	2200      	movs	r2, #0
 800691e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006924:	2b00      	cmp	r3, #0
 8006926:	d003      	beq.n	8006930 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692c:	2200      	movs	r2, #0
 800692e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f022 0201 	bic.w	r2, r2, #1
 800693e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006946:	b2db      	uxtb	r3, r3
 8006948:	2b60      	cmp	r3, #96	; 0x60
 800694a:	d10e      	bne.n	800696a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	2220      	movs	r2, #32
 8006950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	2200      	movs	r2, #0
 8006960:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006962:	6978      	ldr	r0, [r7, #20]
 8006964:	f7fe fe1c 	bl	80055a0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006968:	e027      	b.n	80069ba <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800696a:	7cfb      	ldrb	r3, [r7, #19]
 800696c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006970:	2b28      	cmp	r3, #40	; 0x28
 8006972:	d117      	bne.n	80069a4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f042 0201 	orr.w	r2, r2, #1
 8006982:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006992:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	2200      	movs	r2, #0
 8006998:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	2228      	movs	r2, #40	; 0x28
 800699e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80069a2:	e007      	b.n	80069b4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	2220      	movs	r2, #32
 80069a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80069b4:	6978      	ldr	r0, [r7, #20]
 80069b6:	f7fe fde9 	bl	800558c <HAL_I2C_ErrorCallback>
}
 80069ba:	bf00      	nop
 80069bc:	3718      	adds	r7, #24
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	2000000c 	.word	0x2000000c
 80069c8:	14f8b589 	.word	0x14f8b589

080069cc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b085      	sub	sp, #20
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069d4:	2300      	movs	r3, #0
 80069d6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80069d8:	4b13      	ldr	r3, [pc, #76]	; (8006a28 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	08db      	lsrs	r3, r3, #3
 80069de:	4a13      	ldr	r2, [pc, #76]	; (8006a2c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80069e0:	fba2 2303 	umull	r2, r3, r2, r3
 80069e4:	0a1a      	lsrs	r2, r3, #8
 80069e6:	4613      	mov	r3, r2
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	4413      	add	r3, r2
 80069ec:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	3b01      	subs	r3, #1
 80069f2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d107      	bne.n	8006a0a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fe:	f043 0220 	orr.w	r2, r3, #32
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	e008      	b.n	8006a1c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a18:	d0e9      	beq.n	80069ee <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006a1a:	2300      	movs	r3, #0
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3714      	adds	r7, #20
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr
 8006a28:	2000000c 	.word	0x2000000c
 8006a2c:	14f8b589 	.word	0x14f8b589

08006a30 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a3c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006a40:	d103      	bne.n	8006a4a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2201      	movs	r2, #1
 8006a46:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006a48:	e007      	b.n	8006a5a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a4e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006a52:	d102      	bne.n	8006a5a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2208      	movs	r2, #8
 8006a58:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006a5a:	bf00      	nop
 8006a5c:	370c      	adds	r7, #12
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr
	...

08006a68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b086      	sub	sp, #24
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d101      	bne.n	8006a7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e267      	b.n	8006f4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0301 	and.w	r3, r3, #1
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d075      	beq.n	8006b72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a86:	4b88      	ldr	r3, [pc, #544]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	f003 030c 	and.w	r3, r3, #12
 8006a8e:	2b04      	cmp	r3, #4
 8006a90:	d00c      	beq.n	8006aac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a92:	4b85      	ldr	r3, [pc, #532]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a9a:	2b08      	cmp	r3, #8
 8006a9c:	d112      	bne.n	8006ac4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a9e:	4b82      	ldr	r3, [pc, #520]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006aa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006aaa:	d10b      	bne.n	8006ac4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006aac:	4b7e      	ldr	r3, [pc, #504]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d05b      	beq.n	8006b70 <HAL_RCC_OscConfig+0x108>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d157      	bne.n	8006b70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e242      	b.n	8006f4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006acc:	d106      	bne.n	8006adc <HAL_RCC_OscConfig+0x74>
 8006ace:	4b76      	ldr	r3, [pc, #472]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a75      	ldr	r2, [pc, #468]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ad8:	6013      	str	r3, [r2, #0]
 8006ada:	e01d      	b.n	8006b18 <HAL_RCC_OscConfig+0xb0>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ae4:	d10c      	bne.n	8006b00 <HAL_RCC_OscConfig+0x98>
 8006ae6:	4b70      	ldr	r3, [pc, #448]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a6f      	ldr	r2, [pc, #444]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006aec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006af0:	6013      	str	r3, [r2, #0]
 8006af2:	4b6d      	ldr	r3, [pc, #436]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a6c      	ldr	r2, [pc, #432]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006afc:	6013      	str	r3, [r2, #0]
 8006afe:	e00b      	b.n	8006b18 <HAL_RCC_OscConfig+0xb0>
 8006b00:	4b69      	ldr	r3, [pc, #420]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a68      	ldr	r2, [pc, #416]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006b06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b0a:	6013      	str	r3, [r2, #0]
 8006b0c:	4b66      	ldr	r3, [pc, #408]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a65      	ldr	r2, [pc, #404]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006b12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d013      	beq.n	8006b48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b20:	f7fd f802 	bl	8003b28 <HAL_GetTick>
 8006b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b26:	e008      	b.n	8006b3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b28:	f7fc fffe 	bl	8003b28 <HAL_GetTick>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	1ad3      	subs	r3, r2, r3
 8006b32:	2b64      	cmp	r3, #100	; 0x64
 8006b34:	d901      	bls.n	8006b3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b36:	2303      	movs	r3, #3
 8006b38:	e207      	b.n	8006f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b3a:	4b5b      	ldr	r3, [pc, #364]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d0f0      	beq.n	8006b28 <HAL_RCC_OscConfig+0xc0>
 8006b46:	e014      	b.n	8006b72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b48:	f7fc ffee 	bl	8003b28 <HAL_GetTick>
 8006b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b4e:	e008      	b.n	8006b62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b50:	f7fc ffea 	bl	8003b28 <HAL_GetTick>
 8006b54:	4602      	mov	r2, r0
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	2b64      	cmp	r3, #100	; 0x64
 8006b5c:	d901      	bls.n	8006b62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e1f3      	b.n	8006f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b62:	4b51      	ldr	r3, [pc, #324]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1f0      	bne.n	8006b50 <HAL_RCC_OscConfig+0xe8>
 8006b6e:	e000      	b.n	8006b72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 0302 	and.w	r3, r3, #2
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d063      	beq.n	8006c46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b7e:	4b4a      	ldr	r3, [pc, #296]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	f003 030c 	and.w	r3, r3, #12
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00b      	beq.n	8006ba2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b8a:	4b47      	ldr	r3, [pc, #284]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b92:	2b08      	cmp	r3, #8
 8006b94:	d11c      	bne.n	8006bd0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b96:	4b44      	ldr	r3, [pc, #272]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d116      	bne.n	8006bd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ba2:	4b41      	ldr	r3, [pc, #260]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 0302 	and.w	r3, r3, #2
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d005      	beq.n	8006bba <HAL_RCC_OscConfig+0x152>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d001      	beq.n	8006bba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e1c7      	b.n	8006f4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bba:	4b3b      	ldr	r3, [pc, #236]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	00db      	lsls	r3, r3, #3
 8006bc8:	4937      	ldr	r1, [pc, #220]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bce:	e03a      	b.n	8006c46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d020      	beq.n	8006c1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006bd8:	4b34      	ldr	r3, [pc, #208]	; (8006cac <HAL_RCC_OscConfig+0x244>)
 8006bda:	2201      	movs	r2, #1
 8006bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bde:	f7fc ffa3 	bl	8003b28 <HAL_GetTick>
 8006be2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006be4:	e008      	b.n	8006bf8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006be6:	f7fc ff9f 	bl	8003b28 <HAL_GetTick>
 8006bea:	4602      	mov	r2, r0
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d901      	bls.n	8006bf8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	e1a8      	b.n	8006f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bf8:	4b2b      	ldr	r3, [pc, #172]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 0302 	and.w	r3, r3, #2
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d0f0      	beq.n	8006be6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c04:	4b28      	ldr	r3, [pc, #160]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	00db      	lsls	r3, r3, #3
 8006c12:	4925      	ldr	r1, [pc, #148]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006c14:	4313      	orrs	r3, r2
 8006c16:	600b      	str	r3, [r1, #0]
 8006c18:	e015      	b.n	8006c46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c1a:	4b24      	ldr	r3, [pc, #144]	; (8006cac <HAL_RCC_OscConfig+0x244>)
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c20:	f7fc ff82 	bl	8003b28 <HAL_GetTick>
 8006c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c26:	e008      	b.n	8006c3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c28:	f7fc ff7e 	bl	8003b28 <HAL_GetTick>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	2b02      	cmp	r3, #2
 8006c34:	d901      	bls.n	8006c3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006c36:	2303      	movs	r3, #3
 8006c38:	e187      	b.n	8006f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c3a:	4b1b      	ldr	r3, [pc, #108]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 0302 	and.w	r3, r3, #2
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d1f0      	bne.n	8006c28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 0308 	and.w	r3, r3, #8
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d036      	beq.n	8006cc0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	695b      	ldr	r3, [r3, #20]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d016      	beq.n	8006c88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c5a:	4b15      	ldr	r3, [pc, #84]	; (8006cb0 <HAL_RCC_OscConfig+0x248>)
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c60:	f7fc ff62 	bl	8003b28 <HAL_GetTick>
 8006c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c66:	e008      	b.n	8006c7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c68:	f7fc ff5e 	bl	8003b28 <HAL_GetTick>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d901      	bls.n	8006c7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006c76:	2303      	movs	r3, #3
 8006c78:	e167      	b.n	8006f4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c7a:	4b0b      	ldr	r3, [pc, #44]	; (8006ca8 <HAL_RCC_OscConfig+0x240>)
 8006c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c7e:	f003 0302 	and.w	r3, r3, #2
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d0f0      	beq.n	8006c68 <HAL_RCC_OscConfig+0x200>
 8006c86:	e01b      	b.n	8006cc0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c88:	4b09      	ldr	r3, [pc, #36]	; (8006cb0 <HAL_RCC_OscConfig+0x248>)
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c8e:	f7fc ff4b 	bl	8003b28 <HAL_GetTick>
 8006c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c94:	e00e      	b.n	8006cb4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c96:	f7fc ff47 	bl	8003b28 <HAL_GetTick>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	1ad3      	subs	r3, r2, r3
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	d907      	bls.n	8006cb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006ca4:	2303      	movs	r3, #3
 8006ca6:	e150      	b.n	8006f4a <HAL_RCC_OscConfig+0x4e2>
 8006ca8:	40023800 	.word	0x40023800
 8006cac:	42470000 	.word	0x42470000
 8006cb0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cb4:	4b88      	ldr	r3, [pc, #544]	; (8006ed8 <HAL_RCC_OscConfig+0x470>)
 8006cb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cb8:	f003 0302 	and.w	r3, r3, #2
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d1ea      	bne.n	8006c96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 0304 	and.w	r3, r3, #4
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f000 8097 	beq.w	8006dfc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cd2:	4b81      	ldr	r3, [pc, #516]	; (8006ed8 <HAL_RCC_OscConfig+0x470>)
 8006cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d10f      	bne.n	8006cfe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cde:	2300      	movs	r3, #0
 8006ce0:	60bb      	str	r3, [r7, #8]
 8006ce2:	4b7d      	ldr	r3, [pc, #500]	; (8006ed8 <HAL_RCC_OscConfig+0x470>)
 8006ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce6:	4a7c      	ldr	r2, [pc, #496]	; (8006ed8 <HAL_RCC_OscConfig+0x470>)
 8006ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cec:	6413      	str	r3, [r2, #64]	; 0x40
 8006cee:	4b7a      	ldr	r3, [pc, #488]	; (8006ed8 <HAL_RCC_OscConfig+0x470>)
 8006cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cf6:	60bb      	str	r3, [r7, #8]
 8006cf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cfe:	4b77      	ldr	r3, [pc, #476]	; (8006edc <HAL_RCC_OscConfig+0x474>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d118      	bne.n	8006d3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d0a:	4b74      	ldr	r3, [pc, #464]	; (8006edc <HAL_RCC_OscConfig+0x474>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a73      	ldr	r2, [pc, #460]	; (8006edc <HAL_RCC_OscConfig+0x474>)
 8006d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d16:	f7fc ff07 	bl	8003b28 <HAL_GetTick>
 8006d1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d1c:	e008      	b.n	8006d30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d1e:	f7fc ff03 	bl	8003b28 <HAL_GetTick>
 8006d22:	4602      	mov	r2, r0
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	1ad3      	subs	r3, r2, r3
 8006d28:	2b02      	cmp	r3, #2
 8006d2a:	d901      	bls.n	8006d30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006d2c:	2303      	movs	r3, #3
 8006d2e:	e10c      	b.n	8006f4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d30:	4b6a      	ldr	r3, [pc, #424]	; (8006edc <HAL_RCC_OscConfig+0x474>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d0f0      	beq.n	8006d1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d106      	bne.n	8006d52 <HAL_RCC_OscConfig+0x2ea>
 8006d44:	4b64      	ldr	r3, [pc, #400]	; (8006ed8 <HAL_RCC_OscConfig+0x470>)
 8006d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d48:	4a63      	ldr	r2, [pc, #396]	; (8006ed8 <HAL_RCC_OscConfig+0x470>)
 8006d4a:	f043 0301 	orr.w	r3, r3, #1
 8006d4e:	6713      	str	r3, [r2, #112]	; 0x70
 8006d50:	e01c      	b.n	8006d8c <HAL_RCC_OscConfig+0x324>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	2b05      	cmp	r3, #5
 8006d58:	d10c      	bne.n	8006d74 <HAL_RCC_OscConfig+0x30c>
 8006d5a:	4b5f      	ldr	r3, [pc, #380]	; (8006ed8 <HAL_RCC_OscConfig+0x470>)
 8006d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d5e:	4a5e      	ldr	r2, [pc, #376]	; (8006ed8 <HAL_RCC_OscConfig+0x470>)
 8006d60:	f043 0304 	orr.w	r3, r3, #4
 8006d64:	6713      	str	r3, [r2, #112]	; 0x70
 8006d66:	4b5c      	ldr	r3, [pc, #368]	; (8006ed8 <HAL_RCC_OscConfig+0x470>)
 8006d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d6a:	4a5b      	ldr	r2, [pc, #364]	; (8006ed8 <HAL_RCC_OscConfig+0x470>)
 8006d6c:	f043 0301 	orr.w	r3, r3, #1
 8006d70:	6713      	str	r3, [r2, #112]	; 0x70
 8006d72:	e00b      	b.n	8006d8c <HAL_RCC_OscConfig+0x324>
 8006d74:	4b58      	ldr	r3, [pc, #352]	; (8006ed8 <HAL_RCC_OscConfig+0x470>)
 8006d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d78:	4a57      	ldr	r2, [pc, #348]	; (8006ed8 <HAL_RCC_OscConfig+0x470>)
 8006d7a:	f023 0301 	bic.w	r3, r3, #1
 8006d7e:	6713      	str	r3, [r2, #112]	; 0x70
 8006d80:	4b55      	ldr	r3, [pc, #340]	; (8006ed8 <HAL_RCC_OscConfig+0x470>)
 8006d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d84:	4a54      	ldr	r2, [pc, #336]	; (8006ed8 <HAL_RCC_OscConfig+0x470>)
 8006d86:	f023 0304 	bic.w	r3, r3, #4
 8006d8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d015      	beq.n	8006dc0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d94:	f7fc fec8 	bl	8003b28 <HAL_GetTick>
 8006d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d9a:	e00a      	b.n	8006db2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d9c:	f7fc fec4 	bl	8003b28 <HAL_GetTick>
 8006da0:	4602      	mov	r2, r0
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	1ad3      	subs	r3, r2, r3
 8006da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d901      	bls.n	8006db2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006dae:	2303      	movs	r3, #3
 8006db0:	e0cb      	b.n	8006f4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006db2:	4b49      	ldr	r3, [pc, #292]	; (8006ed8 <HAL_RCC_OscConfig+0x470>)
 8006db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006db6:	f003 0302 	and.w	r3, r3, #2
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d0ee      	beq.n	8006d9c <HAL_RCC_OscConfig+0x334>
 8006dbe:	e014      	b.n	8006dea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006dc0:	f7fc feb2 	bl	8003b28 <HAL_GetTick>
 8006dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006dc6:	e00a      	b.n	8006dde <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006dc8:	f7fc feae 	bl	8003b28 <HAL_GetTick>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d901      	bls.n	8006dde <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006dda:	2303      	movs	r3, #3
 8006ddc:	e0b5      	b.n	8006f4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006dde:	4b3e      	ldr	r3, [pc, #248]	; (8006ed8 <HAL_RCC_OscConfig+0x470>)
 8006de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006de2:	f003 0302 	and.w	r3, r3, #2
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d1ee      	bne.n	8006dc8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006dea:	7dfb      	ldrb	r3, [r7, #23]
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d105      	bne.n	8006dfc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006df0:	4b39      	ldr	r3, [pc, #228]	; (8006ed8 <HAL_RCC_OscConfig+0x470>)
 8006df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df4:	4a38      	ldr	r2, [pc, #224]	; (8006ed8 <HAL_RCC_OscConfig+0x470>)
 8006df6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006dfa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	699b      	ldr	r3, [r3, #24]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f000 80a1 	beq.w	8006f48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e06:	4b34      	ldr	r3, [pc, #208]	; (8006ed8 <HAL_RCC_OscConfig+0x470>)
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	f003 030c 	and.w	r3, r3, #12
 8006e0e:	2b08      	cmp	r3, #8
 8006e10:	d05c      	beq.n	8006ecc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	699b      	ldr	r3, [r3, #24]
 8006e16:	2b02      	cmp	r3, #2
 8006e18:	d141      	bne.n	8006e9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e1a:	4b31      	ldr	r3, [pc, #196]	; (8006ee0 <HAL_RCC_OscConfig+0x478>)
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e20:	f7fc fe82 	bl	8003b28 <HAL_GetTick>
 8006e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e26:	e008      	b.n	8006e3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e28:	f7fc fe7e 	bl	8003b28 <HAL_GetTick>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	d901      	bls.n	8006e3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006e36:	2303      	movs	r3, #3
 8006e38:	e087      	b.n	8006f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e3a:	4b27      	ldr	r3, [pc, #156]	; (8006ed8 <HAL_RCC_OscConfig+0x470>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d1f0      	bne.n	8006e28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	69da      	ldr	r2, [r3, #28]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a1b      	ldr	r3, [r3, #32]
 8006e4e:	431a      	orrs	r2, r3
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e54:	019b      	lsls	r3, r3, #6
 8006e56:	431a      	orrs	r2, r3
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e5c:	085b      	lsrs	r3, r3, #1
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	041b      	lsls	r3, r3, #16
 8006e62:	431a      	orrs	r2, r3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e68:	061b      	lsls	r3, r3, #24
 8006e6a:	491b      	ldr	r1, [pc, #108]	; (8006ed8 <HAL_RCC_OscConfig+0x470>)
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e70:	4b1b      	ldr	r3, [pc, #108]	; (8006ee0 <HAL_RCC_OscConfig+0x478>)
 8006e72:	2201      	movs	r2, #1
 8006e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e76:	f7fc fe57 	bl	8003b28 <HAL_GetTick>
 8006e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e7c:	e008      	b.n	8006e90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e7e:	f7fc fe53 	bl	8003b28 <HAL_GetTick>
 8006e82:	4602      	mov	r2, r0
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	1ad3      	subs	r3, r2, r3
 8006e88:	2b02      	cmp	r3, #2
 8006e8a:	d901      	bls.n	8006e90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	e05c      	b.n	8006f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e90:	4b11      	ldr	r3, [pc, #68]	; (8006ed8 <HAL_RCC_OscConfig+0x470>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d0f0      	beq.n	8006e7e <HAL_RCC_OscConfig+0x416>
 8006e9c:	e054      	b.n	8006f48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e9e:	4b10      	ldr	r3, [pc, #64]	; (8006ee0 <HAL_RCC_OscConfig+0x478>)
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ea4:	f7fc fe40 	bl	8003b28 <HAL_GetTick>
 8006ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006eaa:	e008      	b.n	8006ebe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006eac:	f7fc fe3c 	bl	8003b28 <HAL_GetTick>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	1ad3      	subs	r3, r2, r3
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	d901      	bls.n	8006ebe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	e045      	b.n	8006f4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ebe:	4b06      	ldr	r3, [pc, #24]	; (8006ed8 <HAL_RCC_OscConfig+0x470>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1f0      	bne.n	8006eac <HAL_RCC_OscConfig+0x444>
 8006eca:	e03d      	b.n	8006f48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	699b      	ldr	r3, [r3, #24]
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d107      	bne.n	8006ee4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e038      	b.n	8006f4a <HAL_RCC_OscConfig+0x4e2>
 8006ed8:	40023800 	.word	0x40023800
 8006edc:	40007000 	.word	0x40007000
 8006ee0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ee4:	4b1b      	ldr	r3, [pc, #108]	; (8006f54 <HAL_RCC_OscConfig+0x4ec>)
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	699b      	ldr	r3, [r3, #24]
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d028      	beq.n	8006f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d121      	bne.n	8006f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d11a      	bne.n	8006f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006f14:	4013      	ands	r3, r2
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006f1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d111      	bne.n	8006f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f2a:	085b      	lsrs	r3, r3, #1
 8006f2c:	3b01      	subs	r3, #1
 8006f2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d107      	bne.n	8006f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d001      	beq.n	8006f48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006f44:	2301      	movs	r3, #1
 8006f46:	e000      	b.n	8006f4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3718      	adds	r7, #24
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	40023800 	.word	0x40023800

08006f58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b084      	sub	sp, #16
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d101      	bne.n	8006f6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e0cc      	b.n	8007106 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006f6c:	4b68      	ldr	r3, [pc, #416]	; (8007110 <HAL_RCC_ClockConfig+0x1b8>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f003 0307 	and.w	r3, r3, #7
 8006f74:	683a      	ldr	r2, [r7, #0]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d90c      	bls.n	8006f94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f7a:	4b65      	ldr	r3, [pc, #404]	; (8007110 <HAL_RCC_ClockConfig+0x1b8>)
 8006f7c:	683a      	ldr	r2, [r7, #0]
 8006f7e:	b2d2      	uxtb	r2, r2
 8006f80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f82:	4b63      	ldr	r3, [pc, #396]	; (8007110 <HAL_RCC_ClockConfig+0x1b8>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f003 0307 	and.w	r3, r3, #7
 8006f8a:	683a      	ldr	r2, [r7, #0]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d001      	beq.n	8006f94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	e0b8      	b.n	8007106 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 0302 	and.w	r3, r3, #2
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d020      	beq.n	8006fe2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 0304 	and.w	r3, r3, #4
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d005      	beq.n	8006fb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006fac:	4b59      	ldr	r3, [pc, #356]	; (8007114 <HAL_RCC_ClockConfig+0x1bc>)
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	4a58      	ldr	r2, [pc, #352]	; (8007114 <HAL_RCC_ClockConfig+0x1bc>)
 8006fb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006fb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 0308 	and.w	r3, r3, #8
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d005      	beq.n	8006fd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006fc4:	4b53      	ldr	r3, [pc, #332]	; (8007114 <HAL_RCC_ClockConfig+0x1bc>)
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	4a52      	ldr	r2, [pc, #328]	; (8007114 <HAL_RCC_ClockConfig+0x1bc>)
 8006fca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006fce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006fd0:	4b50      	ldr	r3, [pc, #320]	; (8007114 <HAL_RCC_ClockConfig+0x1bc>)
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	494d      	ldr	r1, [pc, #308]	; (8007114 <HAL_RCC_ClockConfig+0x1bc>)
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f003 0301 	and.w	r3, r3, #1
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d044      	beq.n	8007078 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d107      	bne.n	8007006 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ff6:	4b47      	ldr	r3, [pc, #284]	; (8007114 <HAL_RCC_ClockConfig+0x1bc>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d119      	bne.n	8007036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	e07f      	b.n	8007106 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	2b02      	cmp	r3, #2
 800700c:	d003      	beq.n	8007016 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007012:	2b03      	cmp	r3, #3
 8007014:	d107      	bne.n	8007026 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007016:	4b3f      	ldr	r3, [pc, #252]	; (8007114 <HAL_RCC_ClockConfig+0x1bc>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800701e:	2b00      	cmp	r3, #0
 8007020:	d109      	bne.n	8007036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	e06f      	b.n	8007106 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007026:	4b3b      	ldr	r3, [pc, #236]	; (8007114 <HAL_RCC_ClockConfig+0x1bc>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 0302 	and.w	r3, r3, #2
 800702e:	2b00      	cmp	r3, #0
 8007030:	d101      	bne.n	8007036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	e067      	b.n	8007106 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007036:	4b37      	ldr	r3, [pc, #220]	; (8007114 <HAL_RCC_ClockConfig+0x1bc>)
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	f023 0203 	bic.w	r2, r3, #3
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	4934      	ldr	r1, [pc, #208]	; (8007114 <HAL_RCC_ClockConfig+0x1bc>)
 8007044:	4313      	orrs	r3, r2
 8007046:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007048:	f7fc fd6e 	bl	8003b28 <HAL_GetTick>
 800704c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800704e:	e00a      	b.n	8007066 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007050:	f7fc fd6a 	bl	8003b28 <HAL_GetTick>
 8007054:	4602      	mov	r2, r0
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	f241 3288 	movw	r2, #5000	; 0x1388
 800705e:	4293      	cmp	r3, r2
 8007060:	d901      	bls.n	8007066 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007062:	2303      	movs	r3, #3
 8007064:	e04f      	b.n	8007106 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007066:	4b2b      	ldr	r3, [pc, #172]	; (8007114 <HAL_RCC_ClockConfig+0x1bc>)
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	f003 020c 	and.w	r2, r3, #12
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	429a      	cmp	r2, r3
 8007076:	d1eb      	bne.n	8007050 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007078:	4b25      	ldr	r3, [pc, #148]	; (8007110 <HAL_RCC_ClockConfig+0x1b8>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f003 0307 	and.w	r3, r3, #7
 8007080:	683a      	ldr	r2, [r7, #0]
 8007082:	429a      	cmp	r2, r3
 8007084:	d20c      	bcs.n	80070a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007086:	4b22      	ldr	r3, [pc, #136]	; (8007110 <HAL_RCC_ClockConfig+0x1b8>)
 8007088:	683a      	ldr	r2, [r7, #0]
 800708a:	b2d2      	uxtb	r2, r2
 800708c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800708e:	4b20      	ldr	r3, [pc, #128]	; (8007110 <HAL_RCC_ClockConfig+0x1b8>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f003 0307 	and.w	r3, r3, #7
 8007096:	683a      	ldr	r2, [r7, #0]
 8007098:	429a      	cmp	r2, r3
 800709a:	d001      	beq.n	80070a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	e032      	b.n	8007106 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 0304 	and.w	r3, r3, #4
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d008      	beq.n	80070be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070ac:	4b19      	ldr	r3, [pc, #100]	; (8007114 <HAL_RCC_ClockConfig+0x1bc>)
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	4916      	ldr	r1, [pc, #88]	; (8007114 <HAL_RCC_ClockConfig+0x1bc>)
 80070ba:	4313      	orrs	r3, r2
 80070bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 0308 	and.w	r3, r3, #8
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d009      	beq.n	80070de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80070ca:	4b12      	ldr	r3, [pc, #72]	; (8007114 <HAL_RCC_ClockConfig+0x1bc>)
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	691b      	ldr	r3, [r3, #16]
 80070d6:	00db      	lsls	r3, r3, #3
 80070d8:	490e      	ldr	r1, [pc, #56]	; (8007114 <HAL_RCC_ClockConfig+0x1bc>)
 80070da:	4313      	orrs	r3, r2
 80070dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80070de:	f000 f821 	bl	8007124 <HAL_RCC_GetSysClockFreq>
 80070e2:	4602      	mov	r2, r0
 80070e4:	4b0b      	ldr	r3, [pc, #44]	; (8007114 <HAL_RCC_ClockConfig+0x1bc>)
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	091b      	lsrs	r3, r3, #4
 80070ea:	f003 030f 	and.w	r3, r3, #15
 80070ee:	490a      	ldr	r1, [pc, #40]	; (8007118 <HAL_RCC_ClockConfig+0x1c0>)
 80070f0:	5ccb      	ldrb	r3, [r1, r3]
 80070f2:	fa22 f303 	lsr.w	r3, r2, r3
 80070f6:	4a09      	ldr	r2, [pc, #36]	; (800711c <HAL_RCC_ClockConfig+0x1c4>)
 80070f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80070fa:	4b09      	ldr	r3, [pc, #36]	; (8007120 <HAL_RCC_ClockConfig+0x1c8>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4618      	mov	r0, r3
 8007100:	f7fc fb0c 	bl	800371c <HAL_InitTick>

  return HAL_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3710      	adds	r7, #16
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	40023c00 	.word	0x40023c00
 8007114:	40023800 	.word	0x40023800
 8007118:	080198ac 	.word	0x080198ac
 800711c:	2000000c 	.word	0x2000000c
 8007120:	20000010 	.word	0x20000010

08007124 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007124:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007128:	b094      	sub	sp, #80	; 0x50
 800712a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800712c:	2300      	movs	r3, #0
 800712e:	647b      	str	r3, [r7, #68]	; 0x44
 8007130:	2300      	movs	r3, #0
 8007132:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007134:	2300      	movs	r3, #0
 8007136:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007138:	2300      	movs	r3, #0
 800713a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800713c:	4b79      	ldr	r3, [pc, #484]	; (8007324 <HAL_RCC_GetSysClockFreq+0x200>)
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	f003 030c 	and.w	r3, r3, #12
 8007144:	2b08      	cmp	r3, #8
 8007146:	d00d      	beq.n	8007164 <HAL_RCC_GetSysClockFreq+0x40>
 8007148:	2b08      	cmp	r3, #8
 800714a:	f200 80e1 	bhi.w	8007310 <HAL_RCC_GetSysClockFreq+0x1ec>
 800714e:	2b00      	cmp	r3, #0
 8007150:	d002      	beq.n	8007158 <HAL_RCC_GetSysClockFreq+0x34>
 8007152:	2b04      	cmp	r3, #4
 8007154:	d003      	beq.n	800715e <HAL_RCC_GetSysClockFreq+0x3a>
 8007156:	e0db      	b.n	8007310 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007158:	4b73      	ldr	r3, [pc, #460]	; (8007328 <HAL_RCC_GetSysClockFreq+0x204>)
 800715a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800715c:	e0db      	b.n	8007316 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800715e:	4b73      	ldr	r3, [pc, #460]	; (800732c <HAL_RCC_GetSysClockFreq+0x208>)
 8007160:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007162:	e0d8      	b.n	8007316 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007164:	4b6f      	ldr	r3, [pc, #444]	; (8007324 <HAL_RCC_GetSysClockFreq+0x200>)
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800716c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800716e:	4b6d      	ldr	r3, [pc, #436]	; (8007324 <HAL_RCC_GetSysClockFreq+0x200>)
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007176:	2b00      	cmp	r3, #0
 8007178:	d063      	beq.n	8007242 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800717a:	4b6a      	ldr	r3, [pc, #424]	; (8007324 <HAL_RCC_GetSysClockFreq+0x200>)
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	099b      	lsrs	r3, r3, #6
 8007180:	2200      	movs	r2, #0
 8007182:	63bb      	str	r3, [r7, #56]	; 0x38
 8007184:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800718c:	633b      	str	r3, [r7, #48]	; 0x30
 800718e:	2300      	movs	r3, #0
 8007190:	637b      	str	r3, [r7, #52]	; 0x34
 8007192:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007196:	4622      	mov	r2, r4
 8007198:	462b      	mov	r3, r5
 800719a:	f04f 0000 	mov.w	r0, #0
 800719e:	f04f 0100 	mov.w	r1, #0
 80071a2:	0159      	lsls	r1, r3, #5
 80071a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80071a8:	0150      	lsls	r0, r2, #5
 80071aa:	4602      	mov	r2, r0
 80071ac:	460b      	mov	r3, r1
 80071ae:	4621      	mov	r1, r4
 80071b0:	1a51      	subs	r1, r2, r1
 80071b2:	6139      	str	r1, [r7, #16]
 80071b4:	4629      	mov	r1, r5
 80071b6:	eb63 0301 	sbc.w	r3, r3, r1
 80071ba:	617b      	str	r3, [r7, #20]
 80071bc:	f04f 0200 	mov.w	r2, #0
 80071c0:	f04f 0300 	mov.w	r3, #0
 80071c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80071c8:	4659      	mov	r1, fp
 80071ca:	018b      	lsls	r3, r1, #6
 80071cc:	4651      	mov	r1, sl
 80071ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80071d2:	4651      	mov	r1, sl
 80071d4:	018a      	lsls	r2, r1, #6
 80071d6:	4651      	mov	r1, sl
 80071d8:	ebb2 0801 	subs.w	r8, r2, r1
 80071dc:	4659      	mov	r1, fp
 80071de:	eb63 0901 	sbc.w	r9, r3, r1
 80071e2:	f04f 0200 	mov.w	r2, #0
 80071e6:	f04f 0300 	mov.w	r3, #0
 80071ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80071ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80071f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80071f6:	4690      	mov	r8, r2
 80071f8:	4699      	mov	r9, r3
 80071fa:	4623      	mov	r3, r4
 80071fc:	eb18 0303 	adds.w	r3, r8, r3
 8007200:	60bb      	str	r3, [r7, #8]
 8007202:	462b      	mov	r3, r5
 8007204:	eb49 0303 	adc.w	r3, r9, r3
 8007208:	60fb      	str	r3, [r7, #12]
 800720a:	f04f 0200 	mov.w	r2, #0
 800720e:	f04f 0300 	mov.w	r3, #0
 8007212:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007216:	4629      	mov	r1, r5
 8007218:	024b      	lsls	r3, r1, #9
 800721a:	4621      	mov	r1, r4
 800721c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007220:	4621      	mov	r1, r4
 8007222:	024a      	lsls	r2, r1, #9
 8007224:	4610      	mov	r0, r2
 8007226:	4619      	mov	r1, r3
 8007228:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800722a:	2200      	movs	r2, #0
 800722c:	62bb      	str	r3, [r7, #40]	; 0x28
 800722e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007230:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007234:	f7f9 fcaa 	bl	8000b8c <__aeabi_uldivmod>
 8007238:	4602      	mov	r2, r0
 800723a:	460b      	mov	r3, r1
 800723c:	4613      	mov	r3, r2
 800723e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007240:	e058      	b.n	80072f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007242:	4b38      	ldr	r3, [pc, #224]	; (8007324 <HAL_RCC_GetSysClockFreq+0x200>)
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	099b      	lsrs	r3, r3, #6
 8007248:	2200      	movs	r2, #0
 800724a:	4618      	mov	r0, r3
 800724c:	4611      	mov	r1, r2
 800724e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007252:	623b      	str	r3, [r7, #32]
 8007254:	2300      	movs	r3, #0
 8007256:	627b      	str	r3, [r7, #36]	; 0x24
 8007258:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800725c:	4642      	mov	r2, r8
 800725e:	464b      	mov	r3, r9
 8007260:	f04f 0000 	mov.w	r0, #0
 8007264:	f04f 0100 	mov.w	r1, #0
 8007268:	0159      	lsls	r1, r3, #5
 800726a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800726e:	0150      	lsls	r0, r2, #5
 8007270:	4602      	mov	r2, r0
 8007272:	460b      	mov	r3, r1
 8007274:	4641      	mov	r1, r8
 8007276:	ebb2 0a01 	subs.w	sl, r2, r1
 800727a:	4649      	mov	r1, r9
 800727c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007280:	f04f 0200 	mov.w	r2, #0
 8007284:	f04f 0300 	mov.w	r3, #0
 8007288:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800728c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007290:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007294:	ebb2 040a 	subs.w	r4, r2, sl
 8007298:	eb63 050b 	sbc.w	r5, r3, fp
 800729c:	f04f 0200 	mov.w	r2, #0
 80072a0:	f04f 0300 	mov.w	r3, #0
 80072a4:	00eb      	lsls	r3, r5, #3
 80072a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80072aa:	00e2      	lsls	r2, r4, #3
 80072ac:	4614      	mov	r4, r2
 80072ae:	461d      	mov	r5, r3
 80072b0:	4643      	mov	r3, r8
 80072b2:	18e3      	adds	r3, r4, r3
 80072b4:	603b      	str	r3, [r7, #0]
 80072b6:	464b      	mov	r3, r9
 80072b8:	eb45 0303 	adc.w	r3, r5, r3
 80072bc:	607b      	str	r3, [r7, #4]
 80072be:	f04f 0200 	mov.w	r2, #0
 80072c2:	f04f 0300 	mov.w	r3, #0
 80072c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80072ca:	4629      	mov	r1, r5
 80072cc:	028b      	lsls	r3, r1, #10
 80072ce:	4621      	mov	r1, r4
 80072d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80072d4:	4621      	mov	r1, r4
 80072d6:	028a      	lsls	r2, r1, #10
 80072d8:	4610      	mov	r0, r2
 80072da:	4619      	mov	r1, r3
 80072dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072de:	2200      	movs	r2, #0
 80072e0:	61bb      	str	r3, [r7, #24]
 80072e2:	61fa      	str	r2, [r7, #28]
 80072e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80072e8:	f7f9 fc50 	bl	8000b8c <__aeabi_uldivmod>
 80072ec:	4602      	mov	r2, r0
 80072ee:	460b      	mov	r3, r1
 80072f0:	4613      	mov	r3, r2
 80072f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80072f4:	4b0b      	ldr	r3, [pc, #44]	; (8007324 <HAL_RCC_GetSysClockFreq+0x200>)
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	0c1b      	lsrs	r3, r3, #16
 80072fa:	f003 0303 	and.w	r3, r3, #3
 80072fe:	3301      	adds	r3, #1
 8007300:	005b      	lsls	r3, r3, #1
 8007302:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007304:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007308:	fbb2 f3f3 	udiv	r3, r2, r3
 800730c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800730e:	e002      	b.n	8007316 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007310:	4b05      	ldr	r3, [pc, #20]	; (8007328 <HAL_RCC_GetSysClockFreq+0x204>)
 8007312:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007314:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007316:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007318:	4618      	mov	r0, r3
 800731a:	3750      	adds	r7, #80	; 0x50
 800731c:	46bd      	mov	sp, r7
 800731e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007322:	bf00      	nop
 8007324:	40023800 	.word	0x40023800
 8007328:	00f42400 	.word	0x00f42400
 800732c:	007a1200 	.word	0x007a1200

08007330 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007330:	b480      	push	{r7}
 8007332:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007334:	4b03      	ldr	r3, [pc, #12]	; (8007344 <HAL_RCC_GetHCLKFreq+0x14>)
 8007336:	681b      	ldr	r3, [r3, #0]
}
 8007338:	4618      	mov	r0, r3
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr
 8007342:	bf00      	nop
 8007344:	2000000c 	.word	0x2000000c

08007348 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800734c:	f7ff fff0 	bl	8007330 <HAL_RCC_GetHCLKFreq>
 8007350:	4602      	mov	r2, r0
 8007352:	4b05      	ldr	r3, [pc, #20]	; (8007368 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	0a9b      	lsrs	r3, r3, #10
 8007358:	f003 0307 	and.w	r3, r3, #7
 800735c:	4903      	ldr	r1, [pc, #12]	; (800736c <HAL_RCC_GetPCLK1Freq+0x24>)
 800735e:	5ccb      	ldrb	r3, [r1, r3]
 8007360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007364:	4618      	mov	r0, r3
 8007366:	bd80      	pop	{r7, pc}
 8007368:	40023800 	.word	0x40023800
 800736c:	080198bc 	.word	0x080198bc

08007370 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007374:	f7ff ffdc 	bl	8007330 <HAL_RCC_GetHCLKFreq>
 8007378:	4602      	mov	r2, r0
 800737a:	4b05      	ldr	r3, [pc, #20]	; (8007390 <HAL_RCC_GetPCLK2Freq+0x20>)
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	0b5b      	lsrs	r3, r3, #13
 8007380:	f003 0307 	and.w	r3, r3, #7
 8007384:	4903      	ldr	r1, [pc, #12]	; (8007394 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007386:	5ccb      	ldrb	r3, [r1, r3]
 8007388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800738c:	4618      	mov	r0, r3
 800738e:	bd80      	pop	{r7, pc}
 8007390:	40023800 	.word	0x40023800
 8007394:	080198bc 	.word	0x080198bc

08007398 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	220f      	movs	r2, #15
 80073a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80073a8:	4b12      	ldr	r3, [pc, #72]	; (80073f4 <HAL_RCC_GetClockConfig+0x5c>)
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	f003 0203 	and.w	r2, r3, #3
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80073b4:	4b0f      	ldr	r3, [pc, #60]	; (80073f4 <HAL_RCC_GetClockConfig+0x5c>)
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80073c0:	4b0c      	ldr	r3, [pc, #48]	; (80073f4 <HAL_RCC_GetClockConfig+0x5c>)
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80073cc:	4b09      	ldr	r3, [pc, #36]	; (80073f4 <HAL_RCC_GetClockConfig+0x5c>)
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	08db      	lsrs	r3, r3, #3
 80073d2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80073da:	4b07      	ldr	r3, [pc, #28]	; (80073f8 <HAL_RCC_GetClockConfig+0x60>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f003 0207 	and.w	r2, r3, #7
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	601a      	str	r2, [r3, #0]
}
 80073e6:	bf00      	nop
 80073e8:	370c      	adds	r7, #12
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr
 80073f2:	bf00      	nop
 80073f4:	40023800 	.word	0x40023800
 80073f8:	40023c00 	.word	0x40023c00

080073fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d101      	bne.n	800740e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	e041      	b.n	8007492 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007414:	b2db      	uxtb	r3, r3
 8007416:	2b00      	cmp	r3, #0
 8007418:	d106      	bne.n	8007428 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 f839 	bl	800749a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2202      	movs	r2, #2
 800742c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	3304      	adds	r3, #4
 8007438:	4619      	mov	r1, r3
 800743a:	4610      	mov	r0, r2
 800743c:	f000 fc7a 	bl	8007d34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2201      	movs	r2, #1
 8007454:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2201      	movs	r2, #1
 800745c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	3708      	adds	r7, #8
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}

0800749a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800749a:	b480      	push	{r7}
 800749c:	b083      	sub	sp, #12
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80074a2:	bf00      	nop
 80074a4:	370c      	adds	r7, #12
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr
	...

080074b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b085      	sub	sp, #20
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d001      	beq.n	80074c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	e044      	b.n	8007552 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2202      	movs	r2, #2
 80074cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68da      	ldr	r2, [r3, #12]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f042 0201 	orr.w	r2, r2, #1
 80074de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a1e      	ldr	r2, [pc, #120]	; (8007560 <HAL_TIM_Base_Start_IT+0xb0>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d018      	beq.n	800751c <HAL_TIM_Base_Start_IT+0x6c>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074f2:	d013      	beq.n	800751c <HAL_TIM_Base_Start_IT+0x6c>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a1a      	ldr	r2, [pc, #104]	; (8007564 <HAL_TIM_Base_Start_IT+0xb4>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d00e      	beq.n	800751c <HAL_TIM_Base_Start_IT+0x6c>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a19      	ldr	r2, [pc, #100]	; (8007568 <HAL_TIM_Base_Start_IT+0xb8>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d009      	beq.n	800751c <HAL_TIM_Base_Start_IT+0x6c>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a17      	ldr	r2, [pc, #92]	; (800756c <HAL_TIM_Base_Start_IT+0xbc>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d004      	beq.n	800751c <HAL_TIM_Base_Start_IT+0x6c>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a16      	ldr	r2, [pc, #88]	; (8007570 <HAL_TIM_Base_Start_IT+0xc0>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d111      	bne.n	8007540 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	f003 0307 	and.w	r3, r3, #7
 8007526:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2b06      	cmp	r3, #6
 800752c:	d010      	beq.n	8007550 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f042 0201 	orr.w	r2, r2, #1
 800753c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800753e:	e007      	b.n	8007550 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f042 0201 	orr.w	r2, r2, #1
 800754e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007550:	2300      	movs	r3, #0
}
 8007552:	4618      	mov	r0, r3
 8007554:	3714      	adds	r7, #20
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr
 800755e:	bf00      	nop
 8007560:	40010000 	.word	0x40010000
 8007564:	40000400 	.word	0x40000400
 8007568:	40000800 	.word	0x40000800
 800756c:	40000c00 	.word	0x40000c00
 8007570:	40014000 	.word	0x40014000

08007574 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d109      	bne.n	8007598 <HAL_TIM_PWM_Start+0x24>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800758a:	b2db      	uxtb	r3, r3
 800758c:	2b01      	cmp	r3, #1
 800758e:	bf14      	ite	ne
 8007590:	2301      	movne	r3, #1
 8007592:	2300      	moveq	r3, #0
 8007594:	b2db      	uxtb	r3, r3
 8007596:	e022      	b.n	80075de <HAL_TIM_PWM_Start+0x6a>
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	2b04      	cmp	r3, #4
 800759c:	d109      	bne.n	80075b2 <HAL_TIM_PWM_Start+0x3e>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	bf14      	ite	ne
 80075aa:	2301      	movne	r3, #1
 80075ac:	2300      	moveq	r3, #0
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	e015      	b.n	80075de <HAL_TIM_PWM_Start+0x6a>
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	2b08      	cmp	r3, #8
 80075b6:	d109      	bne.n	80075cc <HAL_TIM_PWM_Start+0x58>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	bf14      	ite	ne
 80075c4:	2301      	movne	r3, #1
 80075c6:	2300      	moveq	r3, #0
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	e008      	b.n	80075de <HAL_TIM_PWM_Start+0x6a>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	bf14      	ite	ne
 80075d8:	2301      	movne	r3, #1
 80075da:	2300      	moveq	r3, #0
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d001      	beq.n	80075e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	e068      	b.n	80076b8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d104      	bne.n	80075f6 <HAL_TIM_PWM_Start+0x82>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2202      	movs	r2, #2
 80075f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075f4:	e013      	b.n	800761e <HAL_TIM_PWM_Start+0xaa>
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	2b04      	cmp	r3, #4
 80075fa:	d104      	bne.n	8007606 <HAL_TIM_PWM_Start+0x92>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2202      	movs	r2, #2
 8007600:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007604:	e00b      	b.n	800761e <HAL_TIM_PWM_Start+0xaa>
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	2b08      	cmp	r3, #8
 800760a:	d104      	bne.n	8007616 <HAL_TIM_PWM_Start+0xa2>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2202      	movs	r2, #2
 8007610:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007614:	e003      	b.n	800761e <HAL_TIM_PWM_Start+0xaa>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2202      	movs	r2, #2
 800761a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	2201      	movs	r2, #1
 8007624:	6839      	ldr	r1, [r7, #0]
 8007626:	4618      	mov	r0, r3
 8007628:	f000 fd90 	bl	800814c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a23      	ldr	r2, [pc, #140]	; (80076c0 <HAL_TIM_PWM_Start+0x14c>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d107      	bne.n	8007646 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007644:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a1d      	ldr	r2, [pc, #116]	; (80076c0 <HAL_TIM_PWM_Start+0x14c>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d018      	beq.n	8007682 <HAL_TIM_PWM_Start+0x10e>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007658:	d013      	beq.n	8007682 <HAL_TIM_PWM_Start+0x10e>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a19      	ldr	r2, [pc, #100]	; (80076c4 <HAL_TIM_PWM_Start+0x150>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d00e      	beq.n	8007682 <HAL_TIM_PWM_Start+0x10e>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a17      	ldr	r2, [pc, #92]	; (80076c8 <HAL_TIM_PWM_Start+0x154>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d009      	beq.n	8007682 <HAL_TIM_PWM_Start+0x10e>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a16      	ldr	r2, [pc, #88]	; (80076cc <HAL_TIM_PWM_Start+0x158>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d004      	beq.n	8007682 <HAL_TIM_PWM_Start+0x10e>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a14      	ldr	r2, [pc, #80]	; (80076d0 <HAL_TIM_PWM_Start+0x15c>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d111      	bne.n	80076a6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	f003 0307 	and.w	r3, r3, #7
 800768c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2b06      	cmp	r3, #6
 8007692:	d010      	beq.n	80076b6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f042 0201 	orr.w	r2, r2, #1
 80076a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076a4:	e007      	b.n	80076b6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f042 0201 	orr.w	r2, r2, #1
 80076b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076b6:	2300      	movs	r3, #0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3710      	adds	r7, #16
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}
 80076c0:	40010000 	.word	0x40010000
 80076c4:	40000400 	.word	0x40000400
 80076c8:	40000800 	.word	0x40000800
 80076cc:	40000c00 	.word	0x40000c00
 80076d0:	40014000 	.word	0x40014000

080076d4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b086      	sub	sp, #24
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d101      	bne.n	80076e8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	e097      	b.n	8007818 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d106      	bne.n	8007702 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 f88f 	bl	8007820 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2202      	movs	r2, #2
 8007706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	6812      	ldr	r2, [r2, #0]
 8007714:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007718:	f023 0307 	bic.w	r3, r3, #7
 800771c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	3304      	adds	r3, #4
 8007726:	4619      	mov	r1, r3
 8007728:	4610      	mov	r0, r2
 800772a:	f000 fb03 	bl	8007d34 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	699b      	ldr	r3, [r3, #24]
 800773c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	6a1b      	ldr	r3, [r3, #32]
 8007744:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	697a      	ldr	r2, [r7, #20]
 800774c:	4313      	orrs	r3, r2
 800774e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007756:	f023 0303 	bic.w	r3, r3, #3
 800775a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	689a      	ldr	r2, [r3, #8]
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	699b      	ldr	r3, [r3, #24]
 8007764:	021b      	lsls	r3, r3, #8
 8007766:	4313      	orrs	r3, r2
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	4313      	orrs	r3, r2
 800776c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007774:	f023 030c 	bic.w	r3, r3, #12
 8007778:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007780:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007784:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	68da      	ldr	r2, [r3, #12]
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	69db      	ldr	r3, [r3, #28]
 800778e:	021b      	lsls	r3, r3, #8
 8007790:	4313      	orrs	r3, r2
 8007792:	693a      	ldr	r2, [r7, #16]
 8007794:	4313      	orrs	r3, r2
 8007796:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	691b      	ldr	r3, [r3, #16]
 800779c:	011a      	lsls	r2, r3, #4
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	6a1b      	ldr	r3, [r3, #32]
 80077a2:	031b      	lsls	r3, r3, #12
 80077a4:	4313      	orrs	r3, r2
 80077a6:	693a      	ldr	r2, [r7, #16]
 80077a8:	4313      	orrs	r3, r2
 80077aa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80077b2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80077ba:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	685a      	ldr	r2, [r3, #4]
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	695b      	ldr	r3, [r3, #20]
 80077c4:	011b      	lsls	r3, r3, #4
 80077c6:	4313      	orrs	r3, r2
 80077c8:	68fa      	ldr	r2, [r7, #12]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	697a      	ldr	r2, [r7, #20]
 80077d4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	693a      	ldr	r2, [r7, #16]
 80077dc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68fa      	ldr	r2, [r7, #12]
 80077e4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2201      	movs	r2, #1
 80077ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2201      	movs	r2, #1
 80077f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2201      	movs	r2, #1
 80077fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2201      	movs	r2, #1
 8007802:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2201      	movs	r2, #1
 800780a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2201      	movs	r2, #1
 8007812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007816:	2300      	movs	r3, #0
}
 8007818:	4618      	mov	r0, r3
 800781a:	3718      	adds	r7, #24
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 8007828:	bf00      	nop
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007844:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800784c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007854:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800785c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d110      	bne.n	8007886 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007864:	7bfb      	ldrb	r3, [r7, #15]
 8007866:	2b01      	cmp	r3, #1
 8007868:	d102      	bne.n	8007870 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800786a:	7b7b      	ldrb	r3, [r7, #13]
 800786c:	2b01      	cmp	r3, #1
 800786e:	d001      	beq.n	8007874 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	e069      	b.n	8007948 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2202      	movs	r2, #2
 8007878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2202      	movs	r2, #2
 8007880:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007884:	e031      	b.n	80078ea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	2b04      	cmp	r3, #4
 800788a:	d110      	bne.n	80078ae <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800788c:	7bbb      	ldrb	r3, [r7, #14]
 800788e:	2b01      	cmp	r3, #1
 8007890:	d102      	bne.n	8007898 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007892:	7b3b      	ldrb	r3, [r7, #12]
 8007894:	2b01      	cmp	r3, #1
 8007896:	d001      	beq.n	800789c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007898:	2301      	movs	r3, #1
 800789a:	e055      	b.n	8007948 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2202      	movs	r2, #2
 80078a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2202      	movs	r2, #2
 80078a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80078ac:	e01d      	b.n	80078ea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80078ae:	7bfb      	ldrb	r3, [r7, #15]
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d108      	bne.n	80078c6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80078b4:	7bbb      	ldrb	r3, [r7, #14]
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d105      	bne.n	80078c6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80078ba:	7b7b      	ldrb	r3, [r7, #13]
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d102      	bne.n	80078c6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80078c0:	7b3b      	ldrb	r3, [r7, #12]
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d001      	beq.n	80078ca <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e03e      	b.n	8007948 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2202      	movs	r2, #2
 80078ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2202      	movs	r2, #2
 80078d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2202      	movs	r2, #2
 80078de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2202      	movs	r2, #2
 80078e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d003      	beq.n	80078f8 <HAL_TIM_Encoder_Start+0xc4>
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	2b04      	cmp	r3, #4
 80078f4:	d008      	beq.n	8007908 <HAL_TIM_Encoder_Start+0xd4>
 80078f6:	e00f      	b.n	8007918 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2201      	movs	r2, #1
 80078fe:	2100      	movs	r1, #0
 8007900:	4618      	mov	r0, r3
 8007902:	f000 fc23 	bl	800814c <TIM_CCxChannelCmd>
      break;
 8007906:	e016      	b.n	8007936 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2201      	movs	r2, #1
 800790e:	2104      	movs	r1, #4
 8007910:	4618      	mov	r0, r3
 8007912:	f000 fc1b 	bl	800814c <TIM_CCxChannelCmd>
      break;
 8007916:	e00e      	b.n	8007936 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2201      	movs	r2, #1
 800791e:	2100      	movs	r1, #0
 8007920:	4618      	mov	r0, r3
 8007922:	f000 fc13 	bl	800814c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2201      	movs	r2, #1
 800792c:	2104      	movs	r1, #4
 800792e:	4618      	mov	r0, r3
 8007930:	f000 fc0c 	bl	800814c <TIM_CCxChannelCmd>
      break;
 8007934:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f042 0201 	orr.w	r2, r2, #1
 8007944:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007946:	2300      	movs	r3, #0
}
 8007948:	4618      	mov	r0, r3
 800794a:	3710      	adds	r7, #16
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b082      	sub	sp, #8
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	f003 0302 	and.w	r3, r3, #2
 8007962:	2b02      	cmp	r3, #2
 8007964:	d122      	bne.n	80079ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	f003 0302 	and.w	r3, r3, #2
 8007970:	2b02      	cmp	r3, #2
 8007972:	d11b      	bne.n	80079ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f06f 0202 	mvn.w	r2, #2
 800797c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2201      	movs	r2, #1
 8007982:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	699b      	ldr	r3, [r3, #24]
 800798a:	f003 0303 	and.w	r3, r3, #3
 800798e:	2b00      	cmp	r3, #0
 8007990:	d003      	beq.n	800799a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 f9b0 	bl	8007cf8 <HAL_TIM_IC_CaptureCallback>
 8007998:	e005      	b.n	80079a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 f9a2 	bl	8007ce4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 f9b3 	bl	8007d0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	691b      	ldr	r3, [r3, #16]
 80079b2:	f003 0304 	and.w	r3, r3, #4
 80079b6:	2b04      	cmp	r3, #4
 80079b8:	d122      	bne.n	8007a00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	f003 0304 	and.w	r3, r3, #4
 80079c4:	2b04      	cmp	r3, #4
 80079c6:	d11b      	bne.n	8007a00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f06f 0204 	mvn.w	r2, #4
 80079d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2202      	movs	r2, #2
 80079d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	699b      	ldr	r3, [r3, #24]
 80079de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d003      	beq.n	80079ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 f986 	bl	8007cf8 <HAL_TIM_IC_CaptureCallback>
 80079ec:	e005      	b.n	80079fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 f978 	bl	8007ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 f989 	bl	8007d0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	f003 0308 	and.w	r3, r3, #8
 8007a0a:	2b08      	cmp	r3, #8
 8007a0c:	d122      	bne.n	8007a54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	f003 0308 	and.w	r3, r3, #8
 8007a18:	2b08      	cmp	r3, #8
 8007a1a:	d11b      	bne.n	8007a54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f06f 0208 	mvn.w	r2, #8
 8007a24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2204      	movs	r2, #4
 8007a2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	69db      	ldr	r3, [r3, #28]
 8007a32:	f003 0303 	and.w	r3, r3, #3
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d003      	beq.n	8007a42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 f95c 	bl	8007cf8 <HAL_TIM_IC_CaptureCallback>
 8007a40:	e005      	b.n	8007a4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 f94e 	bl	8007ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 f95f 	bl	8007d0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	691b      	ldr	r3, [r3, #16]
 8007a5a:	f003 0310 	and.w	r3, r3, #16
 8007a5e:	2b10      	cmp	r3, #16
 8007a60:	d122      	bne.n	8007aa8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	f003 0310 	and.w	r3, r3, #16
 8007a6c:	2b10      	cmp	r3, #16
 8007a6e:	d11b      	bne.n	8007aa8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f06f 0210 	mvn.w	r2, #16
 8007a78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2208      	movs	r2, #8
 8007a7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	69db      	ldr	r3, [r3, #28]
 8007a86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d003      	beq.n	8007a96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 f932 	bl	8007cf8 <HAL_TIM_IC_CaptureCallback>
 8007a94:	e005      	b.n	8007aa2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 f924 	bl	8007ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 f935 	bl	8007d0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	691b      	ldr	r3, [r3, #16]
 8007aae:	f003 0301 	and.w	r3, r3, #1
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d10e      	bne.n	8007ad4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	68db      	ldr	r3, [r3, #12]
 8007abc:	f003 0301 	and.w	r3, r3, #1
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d107      	bne.n	8007ad4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f06f 0201 	mvn.w	r2, #1
 8007acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f7fa fe1a 	bl	8002708 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ade:	2b80      	cmp	r3, #128	; 0x80
 8007ae0:	d10e      	bne.n	8007b00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	68db      	ldr	r3, [r3, #12]
 8007ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aec:	2b80      	cmp	r3, #128	; 0x80
 8007aee:	d107      	bne.n	8007b00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 fb55 	bl	80081aa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b0a:	2b40      	cmp	r3, #64	; 0x40
 8007b0c:	d10e      	bne.n	8007b2c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b18:	2b40      	cmp	r3, #64	; 0x40
 8007b1a:	d107      	bne.n	8007b2c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 f8fa 	bl	8007d20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	691b      	ldr	r3, [r3, #16]
 8007b32:	f003 0320 	and.w	r3, r3, #32
 8007b36:	2b20      	cmp	r3, #32
 8007b38:	d10e      	bne.n	8007b58 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	68db      	ldr	r3, [r3, #12]
 8007b40:	f003 0320 	and.w	r3, r3, #32
 8007b44:	2b20      	cmp	r3, #32
 8007b46:	d107      	bne.n	8007b58 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f06f 0220 	mvn.w	r2, #32
 8007b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 fb1f 	bl	8008196 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b58:	bf00      	nop
 8007b5a:	3708      	adds	r7, #8
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b086      	sub	sp, #24
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d101      	bne.n	8007b7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007b7a:	2302      	movs	r3, #2
 8007b7c:	e0ae      	b.n	8007cdc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2201      	movs	r2, #1
 8007b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2b0c      	cmp	r3, #12
 8007b8a:	f200 809f 	bhi.w	8007ccc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007b8e:	a201      	add	r2, pc, #4	; (adr r2, 8007b94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b94:	08007bc9 	.word	0x08007bc9
 8007b98:	08007ccd 	.word	0x08007ccd
 8007b9c:	08007ccd 	.word	0x08007ccd
 8007ba0:	08007ccd 	.word	0x08007ccd
 8007ba4:	08007c09 	.word	0x08007c09
 8007ba8:	08007ccd 	.word	0x08007ccd
 8007bac:	08007ccd 	.word	0x08007ccd
 8007bb0:	08007ccd 	.word	0x08007ccd
 8007bb4:	08007c4b 	.word	0x08007c4b
 8007bb8:	08007ccd 	.word	0x08007ccd
 8007bbc:	08007ccd 	.word	0x08007ccd
 8007bc0:	08007ccd 	.word	0x08007ccd
 8007bc4:	08007c8b 	.word	0x08007c8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	68b9      	ldr	r1, [r7, #8]
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f000 f930 	bl	8007e34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	699a      	ldr	r2, [r3, #24]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f042 0208 	orr.w	r2, r2, #8
 8007be2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	699a      	ldr	r2, [r3, #24]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f022 0204 	bic.w	r2, r2, #4
 8007bf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	6999      	ldr	r1, [r3, #24]
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	691a      	ldr	r2, [r3, #16]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	430a      	orrs	r2, r1
 8007c04:	619a      	str	r2, [r3, #24]
      break;
 8007c06:	e064      	b.n	8007cd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	68b9      	ldr	r1, [r7, #8]
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f000 f976 	bl	8007f00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	699a      	ldr	r2, [r3, #24]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	699a      	ldr	r2, [r3, #24]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	6999      	ldr	r1, [r3, #24]
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	691b      	ldr	r3, [r3, #16]
 8007c3e:	021a      	lsls	r2, r3, #8
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	430a      	orrs	r2, r1
 8007c46:	619a      	str	r2, [r3, #24]
      break;
 8007c48:	e043      	b.n	8007cd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	68b9      	ldr	r1, [r7, #8]
 8007c50:	4618      	mov	r0, r3
 8007c52:	f000 f9c1 	bl	8007fd8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	69da      	ldr	r2, [r3, #28]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f042 0208 	orr.w	r2, r2, #8
 8007c64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	69da      	ldr	r2, [r3, #28]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f022 0204 	bic.w	r2, r2, #4
 8007c74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	69d9      	ldr	r1, [r3, #28]
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	691a      	ldr	r2, [r3, #16]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	430a      	orrs	r2, r1
 8007c86:	61da      	str	r2, [r3, #28]
      break;
 8007c88:	e023      	b.n	8007cd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	68b9      	ldr	r1, [r7, #8]
 8007c90:	4618      	mov	r0, r3
 8007c92:	f000 fa0b 	bl	80080ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	69da      	ldr	r2, [r3, #28]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ca4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	69da      	ldr	r2, [r3, #28]
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	69d9      	ldr	r1, [r3, #28]
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	691b      	ldr	r3, [r3, #16]
 8007cc0:	021a      	lsls	r2, r3, #8
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	430a      	orrs	r2, r1
 8007cc8:	61da      	str	r2, [r3, #28]
      break;
 8007cca:	e002      	b.n	8007cd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	75fb      	strb	r3, [r7, #23]
      break;
 8007cd0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007cda:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3718      	adds	r7, #24
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b083      	sub	sp, #12
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007cec:	bf00      	nop
 8007cee:	370c      	adds	r7, #12
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b083      	sub	sp, #12
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d00:	bf00      	nop
 8007d02:	370c      	adds	r7, #12
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr

08007d0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d14:	bf00      	nop
 8007d16:	370c      	adds	r7, #12
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b083      	sub	sp, #12
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d28:	bf00      	nop
 8007d2a:	370c      	adds	r7, #12
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b085      	sub	sp, #20
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	4a34      	ldr	r2, [pc, #208]	; (8007e18 <TIM_Base_SetConfig+0xe4>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d00f      	beq.n	8007d6c <TIM_Base_SetConfig+0x38>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d52:	d00b      	beq.n	8007d6c <TIM_Base_SetConfig+0x38>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4a31      	ldr	r2, [pc, #196]	; (8007e1c <TIM_Base_SetConfig+0xe8>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d007      	beq.n	8007d6c <TIM_Base_SetConfig+0x38>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	4a30      	ldr	r2, [pc, #192]	; (8007e20 <TIM_Base_SetConfig+0xec>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d003      	beq.n	8007d6c <TIM_Base_SetConfig+0x38>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	4a2f      	ldr	r2, [pc, #188]	; (8007e24 <TIM_Base_SetConfig+0xf0>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d108      	bne.n	8007d7e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	68fa      	ldr	r2, [r7, #12]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	4a25      	ldr	r2, [pc, #148]	; (8007e18 <TIM_Base_SetConfig+0xe4>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d01b      	beq.n	8007dbe <TIM_Base_SetConfig+0x8a>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d8c:	d017      	beq.n	8007dbe <TIM_Base_SetConfig+0x8a>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4a22      	ldr	r2, [pc, #136]	; (8007e1c <TIM_Base_SetConfig+0xe8>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d013      	beq.n	8007dbe <TIM_Base_SetConfig+0x8a>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	4a21      	ldr	r2, [pc, #132]	; (8007e20 <TIM_Base_SetConfig+0xec>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d00f      	beq.n	8007dbe <TIM_Base_SetConfig+0x8a>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	4a20      	ldr	r2, [pc, #128]	; (8007e24 <TIM_Base_SetConfig+0xf0>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d00b      	beq.n	8007dbe <TIM_Base_SetConfig+0x8a>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4a1f      	ldr	r2, [pc, #124]	; (8007e28 <TIM_Base_SetConfig+0xf4>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d007      	beq.n	8007dbe <TIM_Base_SetConfig+0x8a>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4a1e      	ldr	r2, [pc, #120]	; (8007e2c <TIM_Base_SetConfig+0xf8>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d003      	beq.n	8007dbe <TIM_Base_SetConfig+0x8a>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	4a1d      	ldr	r2, [pc, #116]	; (8007e30 <TIM_Base_SetConfig+0xfc>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d108      	bne.n	8007dd0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	68fa      	ldr	r2, [r7, #12]
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	695b      	ldr	r3, [r3, #20]
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	68fa      	ldr	r2, [r7, #12]
 8007de2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	689a      	ldr	r2, [r3, #8]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	4a08      	ldr	r2, [pc, #32]	; (8007e18 <TIM_Base_SetConfig+0xe4>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d103      	bne.n	8007e04 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	691a      	ldr	r2, [r3, #16]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2201      	movs	r2, #1
 8007e08:	615a      	str	r2, [r3, #20]
}
 8007e0a:	bf00      	nop
 8007e0c:	3714      	adds	r7, #20
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr
 8007e16:	bf00      	nop
 8007e18:	40010000 	.word	0x40010000
 8007e1c:	40000400 	.word	0x40000400
 8007e20:	40000800 	.word	0x40000800
 8007e24:	40000c00 	.word	0x40000c00
 8007e28:	40014000 	.word	0x40014000
 8007e2c:	40014400 	.word	0x40014400
 8007e30:	40014800 	.word	0x40014800

08007e34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b087      	sub	sp, #28
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6a1b      	ldr	r3, [r3, #32]
 8007e42:	f023 0201 	bic.w	r2, r3, #1
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6a1b      	ldr	r3, [r3, #32]
 8007e4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	699b      	ldr	r3, [r3, #24]
 8007e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f023 0303 	bic.w	r3, r3, #3
 8007e6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	68fa      	ldr	r2, [r7, #12]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	f023 0302 	bic.w	r3, r3, #2
 8007e7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	697a      	ldr	r2, [r7, #20]
 8007e84:	4313      	orrs	r3, r2
 8007e86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	4a1c      	ldr	r2, [pc, #112]	; (8007efc <TIM_OC1_SetConfig+0xc8>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d10c      	bne.n	8007eaa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	f023 0308 	bic.w	r3, r3, #8
 8007e96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	68db      	ldr	r3, [r3, #12]
 8007e9c:	697a      	ldr	r2, [r7, #20]
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	f023 0304 	bic.w	r3, r3, #4
 8007ea8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	4a13      	ldr	r2, [pc, #76]	; (8007efc <TIM_OC1_SetConfig+0xc8>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d111      	bne.n	8007ed6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007eb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ec0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	695b      	ldr	r3, [r3, #20]
 8007ec6:	693a      	ldr	r2, [r7, #16]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	699b      	ldr	r3, [r3, #24]
 8007ed0:	693a      	ldr	r2, [r7, #16]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	693a      	ldr	r2, [r7, #16]
 8007eda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	685a      	ldr	r2, [r3, #4]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	697a      	ldr	r2, [r7, #20]
 8007eee:	621a      	str	r2, [r3, #32]
}
 8007ef0:	bf00      	nop
 8007ef2:	371c      	adds	r7, #28
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr
 8007efc:	40010000 	.word	0x40010000

08007f00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b087      	sub	sp, #28
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6a1b      	ldr	r3, [r3, #32]
 8007f0e:	f023 0210 	bic.w	r2, r3, #16
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6a1b      	ldr	r3, [r3, #32]
 8007f1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	699b      	ldr	r3, [r3, #24]
 8007f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	021b      	lsls	r3, r3, #8
 8007f3e:	68fa      	ldr	r2, [r7, #12]
 8007f40:	4313      	orrs	r3, r2
 8007f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	f023 0320 	bic.w	r3, r3, #32
 8007f4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	011b      	lsls	r3, r3, #4
 8007f52:	697a      	ldr	r2, [r7, #20]
 8007f54:	4313      	orrs	r3, r2
 8007f56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	4a1e      	ldr	r2, [pc, #120]	; (8007fd4 <TIM_OC2_SetConfig+0xd4>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d10d      	bne.n	8007f7c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	011b      	lsls	r3, r3, #4
 8007f6e:	697a      	ldr	r2, [r7, #20]
 8007f70:	4313      	orrs	r3, r2
 8007f72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	4a15      	ldr	r2, [pc, #84]	; (8007fd4 <TIM_OC2_SetConfig+0xd4>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d113      	bne.n	8007fac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	695b      	ldr	r3, [r3, #20]
 8007f98:	009b      	lsls	r3, r3, #2
 8007f9a:	693a      	ldr	r2, [r7, #16]
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	699b      	ldr	r3, [r3, #24]
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	693a      	ldr	r2, [r7, #16]
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	693a      	ldr	r2, [r7, #16]
 8007fb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	68fa      	ldr	r2, [r7, #12]
 8007fb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	685a      	ldr	r2, [r3, #4]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	697a      	ldr	r2, [r7, #20]
 8007fc4:	621a      	str	r2, [r3, #32]
}
 8007fc6:	bf00      	nop
 8007fc8:	371c      	adds	r7, #28
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr
 8007fd2:	bf00      	nop
 8007fd4:	40010000 	.word	0x40010000

08007fd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b087      	sub	sp, #28
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6a1b      	ldr	r3, [r3, #32]
 8007fe6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6a1b      	ldr	r3, [r3, #32]
 8007ff2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	69db      	ldr	r3, [r3, #28]
 8007ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f023 0303 	bic.w	r3, r3, #3
 800800e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	68fa      	ldr	r2, [r7, #12]
 8008016:	4313      	orrs	r3, r2
 8008018:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008020:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	021b      	lsls	r3, r3, #8
 8008028:	697a      	ldr	r2, [r7, #20]
 800802a:	4313      	orrs	r3, r2
 800802c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	4a1d      	ldr	r2, [pc, #116]	; (80080a8 <TIM_OC3_SetConfig+0xd0>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d10d      	bne.n	8008052 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800803c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	021b      	lsls	r3, r3, #8
 8008044:	697a      	ldr	r2, [r7, #20]
 8008046:	4313      	orrs	r3, r2
 8008048:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008050:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	4a14      	ldr	r2, [pc, #80]	; (80080a8 <TIM_OC3_SetConfig+0xd0>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d113      	bne.n	8008082 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008060:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008068:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	695b      	ldr	r3, [r3, #20]
 800806e:	011b      	lsls	r3, r3, #4
 8008070:	693a      	ldr	r2, [r7, #16]
 8008072:	4313      	orrs	r3, r2
 8008074:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	699b      	ldr	r3, [r3, #24]
 800807a:	011b      	lsls	r3, r3, #4
 800807c:	693a      	ldr	r2, [r7, #16]
 800807e:	4313      	orrs	r3, r2
 8008080:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	693a      	ldr	r2, [r7, #16]
 8008086:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	68fa      	ldr	r2, [r7, #12]
 800808c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	685a      	ldr	r2, [r3, #4]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	697a      	ldr	r2, [r7, #20]
 800809a:	621a      	str	r2, [r3, #32]
}
 800809c:	bf00      	nop
 800809e:	371c      	adds	r7, #28
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr
 80080a8:	40010000 	.word	0x40010000

080080ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b087      	sub	sp, #28
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6a1b      	ldr	r3, [r3, #32]
 80080ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6a1b      	ldr	r3, [r3, #32]
 80080c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	69db      	ldr	r3, [r3, #28]
 80080d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	021b      	lsls	r3, r3, #8
 80080ea:	68fa      	ldr	r2, [r7, #12]
 80080ec:	4313      	orrs	r3, r2
 80080ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80080f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	031b      	lsls	r3, r3, #12
 80080fe:	693a      	ldr	r2, [r7, #16]
 8008100:	4313      	orrs	r3, r2
 8008102:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	4a10      	ldr	r2, [pc, #64]	; (8008148 <TIM_OC4_SetConfig+0x9c>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d109      	bne.n	8008120 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008112:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	695b      	ldr	r3, [r3, #20]
 8008118:	019b      	lsls	r3, r3, #6
 800811a:	697a      	ldr	r2, [r7, #20]
 800811c:	4313      	orrs	r3, r2
 800811e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	697a      	ldr	r2, [r7, #20]
 8008124:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	68fa      	ldr	r2, [r7, #12]
 800812a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	685a      	ldr	r2, [r3, #4]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	693a      	ldr	r2, [r7, #16]
 8008138:	621a      	str	r2, [r3, #32]
}
 800813a:	bf00      	nop
 800813c:	371c      	adds	r7, #28
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr
 8008146:	bf00      	nop
 8008148:	40010000 	.word	0x40010000

0800814c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800814c:	b480      	push	{r7}
 800814e:	b087      	sub	sp, #28
 8008150:	af00      	add	r7, sp, #0
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	f003 031f 	and.w	r3, r3, #31
 800815e:	2201      	movs	r2, #1
 8008160:	fa02 f303 	lsl.w	r3, r2, r3
 8008164:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	6a1a      	ldr	r2, [r3, #32]
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	43db      	mvns	r3, r3
 800816e:	401a      	ands	r2, r3
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	6a1a      	ldr	r2, [r3, #32]
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	f003 031f 	and.w	r3, r3, #31
 800817e:	6879      	ldr	r1, [r7, #4]
 8008180:	fa01 f303 	lsl.w	r3, r1, r3
 8008184:	431a      	orrs	r2, r3
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	621a      	str	r2, [r3, #32]
}
 800818a:	bf00      	nop
 800818c:	371c      	adds	r7, #28
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr

08008196 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008196:	b480      	push	{r7}
 8008198:	b083      	sub	sp, #12
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800819e:	bf00      	nop
 80081a0:	370c      	adds	r7, #12
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr

080081aa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80081aa:	b480      	push	{r7}
 80081ac:	b083      	sub	sp, #12
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80081b2:	bf00      	nop
 80081b4:	370c      	adds	r7, #12
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr

080081be <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081be:	b580      	push	{r7, lr}
 80081c0:	b082      	sub	sp, #8
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d101      	bne.n	80081d0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081cc:	2301      	movs	r3, #1
 80081ce:	e03f      	b.n	8008250 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081d6:	b2db      	uxtb	r3, r3
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d106      	bne.n	80081ea <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f7fb f92b 	bl	8003440 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2224      	movs	r2, #36	; 0x24
 80081ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	68da      	ldr	r2, [r3, #12]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008200:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f001 f978 	bl	80094f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	691a      	ldr	r2, [r3, #16]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008216:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	695a      	ldr	r2, [r3, #20]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008226:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	68da      	ldr	r2, [r3, #12]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008236:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2200      	movs	r2, #0
 800823c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2220      	movs	r2, #32
 8008242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2220      	movs	r2, #32
 800824a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800824e:	2300      	movs	r3, #0
}
 8008250:	4618      	mov	r0, r3
 8008252:	3708      	adds	r7, #8
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b08a      	sub	sp, #40	; 0x28
 800825c:	af02      	add	r7, sp, #8
 800825e:	60f8      	str	r0, [r7, #12]
 8008260:	60b9      	str	r1, [r7, #8]
 8008262:	603b      	str	r3, [r7, #0]
 8008264:	4613      	mov	r3, r2
 8008266:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008268:	2300      	movs	r3, #0
 800826a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008272:	b2db      	uxtb	r3, r3
 8008274:	2b20      	cmp	r3, #32
 8008276:	d17c      	bne.n	8008372 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d002      	beq.n	8008284 <HAL_UART_Transmit+0x2c>
 800827e:	88fb      	ldrh	r3, [r7, #6]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d101      	bne.n	8008288 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008284:	2301      	movs	r3, #1
 8008286:	e075      	b.n	8008374 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800828e:	2b01      	cmp	r3, #1
 8008290:	d101      	bne.n	8008296 <HAL_UART_Transmit+0x3e>
 8008292:	2302      	movs	r3, #2
 8008294:	e06e      	b.n	8008374 <HAL_UART_Transmit+0x11c>
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2201      	movs	r2, #1
 800829a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2200      	movs	r2, #0
 80082a2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2221      	movs	r2, #33	; 0x21
 80082a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80082ac:	f7fb fc3c 	bl	8003b28 <HAL_GetTick>
 80082b0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	88fa      	ldrh	r2, [r7, #6]
 80082b6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	88fa      	ldrh	r2, [r7, #6]
 80082bc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	689b      	ldr	r3, [r3, #8]
 80082c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082c6:	d108      	bne.n	80082da <HAL_UART_Transmit+0x82>
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	691b      	ldr	r3, [r3, #16]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d104      	bne.n	80082da <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80082d0:	2300      	movs	r3, #0
 80082d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	61bb      	str	r3, [r7, #24]
 80082d8:	e003      	b.n	80082e2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80082de:	2300      	movs	r3, #0
 80082e0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2200      	movs	r2, #0
 80082e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80082ea:	e02a      	b.n	8008342 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	9300      	str	r3, [sp, #0]
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	2200      	movs	r2, #0
 80082f4:	2180      	movs	r1, #128	; 0x80
 80082f6:	68f8      	ldr	r0, [r7, #12]
 80082f8:	f000 fe2f 	bl	8008f5a <UART_WaitOnFlagUntilTimeout>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d001      	beq.n	8008306 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008302:	2303      	movs	r3, #3
 8008304:	e036      	b.n	8008374 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008306:	69fb      	ldr	r3, [r7, #28]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d10b      	bne.n	8008324 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800830c:	69bb      	ldr	r3, [r7, #24]
 800830e:	881b      	ldrh	r3, [r3, #0]
 8008310:	461a      	mov	r2, r3
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800831a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800831c:	69bb      	ldr	r3, [r7, #24]
 800831e:	3302      	adds	r3, #2
 8008320:	61bb      	str	r3, [r7, #24]
 8008322:	e007      	b.n	8008334 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	781a      	ldrb	r2, [r3, #0]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800832e:	69fb      	ldr	r3, [r7, #28]
 8008330:	3301      	adds	r3, #1
 8008332:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008338:	b29b      	uxth	r3, r3
 800833a:	3b01      	subs	r3, #1
 800833c:	b29a      	uxth	r2, r3
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008346:	b29b      	uxth	r3, r3
 8008348:	2b00      	cmp	r3, #0
 800834a:	d1cf      	bne.n	80082ec <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	9300      	str	r3, [sp, #0]
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	2200      	movs	r2, #0
 8008354:	2140      	movs	r1, #64	; 0x40
 8008356:	68f8      	ldr	r0, [r7, #12]
 8008358:	f000 fdff 	bl	8008f5a <UART_WaitOnFlagUntilTimeout>
 800835c:	4603      	mov	r3, r0
 800835e:	2b00      	cmp	r3, #0
 8008360:	d001      	beq.n	8008366 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008362:	2303      	movs	r3, #3
 8008364:	e006      	b.n	8008374 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2220      	movs	r2, #32
 800836a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800836e:	2300      	movs	r3, #0
 8008370:	e000      	b.n	8008374 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008372:	2302      	movs	r3, #2
  }
}
 8008374:	4618      	mov	r0, r3
 8008376:	3720      	adds	r7, #32
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b08a      	sub	sp, #40	; 0x28
 8008380:	af02      	add	r7, sp, #8
 8008382:	60f8      	str	r0, [r7, #12]
 8008384:	60b9      	str	r1, [r7, #8]
 8008386:	603b      	str	r3, [r7, #0]
 8008388:	4613      	mov	r3, r2
 800838a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800838c:	2300      	movs	r3, #0
 800838e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008396:	b2db      	uxtb	r3, r3
 8008398:	2b20      	cmp	r3, #32
 800839a:	f040 808c 	bne.w	80084b6 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d002      	beq.n	80083aa <HAL_UART_Receive+0x2e>
 80083a4:	88fb      	ldrh	r3, [r7, #6]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d101      	bne.n	80083ae <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80083aa:	2301      	movs	r3, #1
 80083ac:	e084      	b.n	80084b8 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d101      	bne.n	80083bc <HAL_UART_Receive+0x40>
 80083b8:	2302      	movs	r3, #2
 80083ba:	e07d      	b.n	80084b8 <HAL_UART_Receive+0x13c>
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2201      	movs	r2, #1
 80083c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2200      	movs	r2, #0
 80083c8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2222      	movs	r2, #34	; 0x22
 80083ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2200      	movs	r2, #0
 80083d6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80083d8:	f7fb fba6 	bl	8003b28 <HAL_GetTick>
 80083dc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	88fa      	ldrh	r2, [r7, #6]
 80083e2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	88fa      	ldrh	r2, [r7, #6]
 80083e8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	689b      	ldr	r3, [r3, #8]
 80083ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083f2:	d108      	bne.n	8008406 <HAL_UART_Receive+0x8a>
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	691b      	ldr	r3, [r3, #16]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d104      	bne.n	8008406 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80083fc:	2300      	movs	r3, #0
 80083fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	61bb      	str	r3, [r7, #24]
 8008404:	e003      	b.n	800840e <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800840a:	2300      	movs	r3, #0
 800840c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2200      	movs	r2, #0
 8008412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008416:	e043      	b.n	80084a0 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	9300      	str	r3, [sp, #0]
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	2200      	movs	r2, #0
 8008420:	2120      	movs	r1, #32
 8008422:	68f8      	ldr	r0, [r7, #12]
 8008424:	f000 fd99 	bl	8008f5a <UART_WaitOnFlagUntilTimeout>
 8008428:	4603      	mov	r3, r0
 800842a:	2b00      	cmp	r3, #0
 800842c:	d001      	beq.n	8008432 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800842e:	2303      	movs	r3, #3
 8008430:	e042      	b.n	80084b8 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8008432:	69fb      	ldr	r3, [r7, #28]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d10c      	bne.n	8008452 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	b29b      	uxth	r3, r3
 8008440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008444:	b29a      	uxth	r2, r3
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800844a:	69bb      	ldr	r3, [r7, #24]
 800844c:	3302      	adds	r3, #2
 800844e:	61bb      	str	r3, [r7, #24]
 8008450:	e01f      	b.n	8008492 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800845a:	d007      	beq.n	800846c <HAL_UART_Receive+0xf0>
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d10a      	bne.n	800847a <HAL_UART_Receive+0xfe>
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	691b      	ldr	r3, [r3, #16]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d106      	bne.n	800847a <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	b2da      	uxtb	r2, r3
 8008474:	69fb      	ldr	r3, [r7, #28]
 8008476:	701a      	strb	r2, [r3, #0]
 8008478:	e008      	b.n	800848c <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	b2db      	uxtb	r3, r3
 8008482:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008486:	b2da      	uxtb	r2, r3
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800848c:	69fb      	ldr	r3, [r7, #28]
 800848e:	3301      	adds	r3, #1
 8008490:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008496:	b29b      	uxth	r3, r3
 8008498:	3b01      	subs	r3, #1
 800849a:	b29a      	uxth	r2, r3
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d1b6      	bne.n	8008418 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2220      	movs	r2, #32
 80084ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80084b2:	2300      	movs	r3, #0
 80084b4:	e000      	b.n	80084b8 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80084b6:	2302      	movs	r3, #2
  }
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3720      	adds	r7, #32
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b08c      	sub	sp, #48	; 0x30
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	4613      	mov	r3, r2
 80084cc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084d4:	b2db      	uxtb	r3, r3
 80084d6:	2b20      	cmp	r3, #32
 80084d8:	d165      	bne.n	80085a6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d002      	beq.n	80084e6 <HAL_UART_Transmit_DMA+0x26>
 80084e0:	88fb      	ldrh	r3, [r7, #6]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d101      	bne.n	80084ea <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80084e6:	2301      	movs	r3, #1
 80084e8:	e05e      	b.n	80085a8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d101      	bne.n	80084f8 <HAL_UART_Transmit_DMA+0x38>
 80084f4:	2302      	movs	r3, #2
 80084f6:	e057      	b.n	80085a8 <HAL_UART_Transmit_DMA+0xe8>
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2201      	movs	r2, #1
 80084fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008500:	68ba      	ldr	r2, [r7, #8]
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	88fa      	ldrh	r2, [r7, #6]
 800850a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	88fa      	ldrh	r2, [r7, #6]
 8008510:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2200      	movs	r2, #0
 8008516:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2221      	movs	r2, #33	; 0x21
 800851c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008524:	4a22      	ldr	r2, [pc, #136]	; (80085b0 <HAL_UART_Transmit_DMA+0xf0>)
 8008526:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800852c:	4a21      	ldr	r2, [pc, #132]	; (80085b4 <HAL_UART_Transmit_DMA+0xf4>)
 800852e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008534:	4a20      	ldr	r2, [pc, #128]	; (80085b8 <HAL_UART_Transmit_DMA+0xf8>)
 8008536:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800853c:	2200      	movs	r2, #0
 800853e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008540:	f107 0308 	add.w	r3, r7, #8
 8008544:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800854a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800854c:	6819      	ldr	r1, [r3, #0]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	3304      	adds	r3, #4
 8008554:	461a      	mov	r2, r3
 8008556:	88fb      	ldrh	r3, [r7, #6]
 8008558:	f7fb ff76 	bl	8004448 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008564:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2200      	movs	r2, #0
 800856a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	3314      	adds	r3, #20
 8008574:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008576:	69bb      	ldr	r3, [r7, #24]
 8008578:	e853 3f00 	ldrex	r3, [r3]
 800857c:	617b      	str	r3, [r7, #20]
   return(result);
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008584:	62bb      	str	r3, [r7, #40]	; 0x28
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	3314      	adds	r3, #20
 800858c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800858e:	627a      	str	r2, [r7, #36]	; 0x24
 8008590:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008592:	6a39      	ldr	r1, [r7, #32]
 8008594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008596:	e841 2300 	strex	r3, r2, [r1]
 800859a:	61fb      	str	r3, [r7, #28]
   return(result);
 800859c:	69fb      	ldr	r3, [r7, #28]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d1e5      	bne.n	800856e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80085a2:	2300      	movs	r3, #0
 80085a4:	e000      	b.n	80085a8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80085a6:	2302      	movs	r3, #2
  }
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3730      	adds	r7, #48	; 0x30
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}
 80085b0:	08008cb5 	.word	0x08008cb5
 80085b4:	08008d4f 	.word	0x08008d4f
 80085b8:	08008ec7 	.word	0x08008ec7

080085bc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	4613      	mov	r3, r2
 80085c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80085d0:	b2db      	uxtb	r3, r3
 80085d2:	2b20      	cmp	r3, #32
 80085d4:	d11d      	bne.n	8008612 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d002      	beq.n	80085e2 <HAL_UART_Receive_DMA+0x26>
 80085dc:	88fb      	ldrh	r3, [r7, #6]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d101      	bne.n	80085e6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80085e2:	2301      	movs	r3, #1
 80085e4:	e016      	b.n	8008614 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d101      	bne.n	80085f4 <HAL_UART_Receive_DMA+0x38>
 80085f0:	2302      	movs	r3, #2
 80085f2:	e00f      	b.n	8008614 <HAL_UART_Receive_DMA+0x58>
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2200      	movs	r2, #0
 8008600:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008602:	88fb      	ldrh	r3, [r7, #6]
 8008604:	461a      	mov	r2, r3
 8008606:	68b9      	ldr	r1, [r7, #8]
 8008608:	68f8      	ldr	r0, [r7, #12]
 800860a:	f000 fd15 	bl	8009038 <UART_Start_Receive_DMA>
 800860e:	4603      	mov	r3, r0
 8008610:	e000      	b.n	8008614 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008612:	2302      	movs	r3, #2
  }
}
 8008614:	4618      	mov	r0, r3
 8008616:	3710      	adds	r7, #16
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b090      	sub	sp, #64	; 0x40
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008624:	2300      	movs	r3, #0
 8008626:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	695b      	ldr	r3, [r3, #20]
 800862e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008632:	2b80      	cmp	r3, #128	; 0x80
 8008634:	bf0c      	ite	eq
 8008636:	2301      	moveq	r3, #1
 8008638:	2300      	movne	r3, #0
 800863a:	b2db      	uxtb	r3, r3
 800863c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008644:	b2db      	uxtb	r3, r3
 8008646:	2b21      	cmp	r3, #33	; 0x21
 8008648:	d128      	bne.n	800869c <HAL_UART_DMAStop+0x80>
 800864a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800864c:	2b00      	cmp	r3, #0
 800864e:	d025      	beq.n	800869c <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	3314      	adds	r3, #20
 8008656:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865a:	e853 3f00 	ldrex	r3, [r3]
 800865e:	623b      	str	r3, [r7, #32]
   return(result);
 8008660:	6a3b      	ldr	r3, [r7, #32]
 8008662:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008666:	63bb      	str	r3, [r7, #56]	; 0x38
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	3314      	adds	r3, #20
 800866e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008670:	633a      	str	r2, [r7, #48]	; 0x30
 8008672:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008674:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008676:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008678:	e841 2300 	strex	r3, r2, [r1]
 800867c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800867e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008680:	2b00      	cmp	r3, #0
 8008682:	d1e5      	bne.n	8008650 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008688:	2b00      	cmp	r3, #0
 800868a:	d004      	beq.n	8008696 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008690:	4618      	mov	r0, r3
 8008692:	f7fb ff31 	bl	80044f8 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 fd6c 	bl	8009174 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	695b      	ldr	r3, [r3, #20]
 80086a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086a6:	2b40      	cmp	r3, #64	; 0x40
 80086a8:	bf0c      	ite	eq
 80086aa:	2301      	moveq	r3, #1
 80086ac:	2300      	movne	r3, #0
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	2b22      	cmp	r3, #34	; 0x22
 80086bc:	d128      	bne.n	8008710 <HAL_UART_DMAStop+0xf4>
 80086be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d025      	beq.n	8008710 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	3314      	adds	r3, #20
 80086ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	e853 3f00 	ldrex	r3, [r3]
 80086d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086da:	637b      	str	r3, [r7, #52]	; 0x34
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	3314      	adds	r3, #20
 80086e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086e4:	61fa      	str	r2, [r7, #28]
 80086e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e8:	69b9      	ldr	r1, [r7, #24]
 80086ea:	69fa      	ldr	r2, [r7, #28]
 80086ec:	e841 2300 	strex	r3, r2, [r1]
 80086f0:	617b      	str	r3, [r7, #20]
   return(result);
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d1e5      	bne.n	80086c4 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d004      	beq.n	800870a <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008704:	4618      	mov	r0, r3
 8008706:	f7fb fef7 	bl	80044f8 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 fd5a 	bl	80091c4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	3740      	adds	r7, #64	; 0x40
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
	...

0800871c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b0ba      	sub	sp, #232	; 0xe8
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	68db      	ldr	r3, [r3, #12]
 8008734:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	695b      	ldr	r3, [r3, #20]
 800873e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008742:	2300      	movs	r3, #0
 8008744:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008748:	2300      	movs	r3, #0
 800874a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800874e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008752:	f003 030f 	and.w	r3, r3, #15
 8008756:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800875a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800875e:	2b00      	cmp	r3, #0
 8008760:	d10f      	bne.n	8008782 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008766:	f003 0320 	and.w	r3, r3, #32
 800876a:	2b00      	cmp	r3, #0
 800876c:	d009      	beq.n	8008782 <HAL_UART_IRQHandler+0x66>
 800876e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008772:	f003 0320 	and.w	r3, r3, #32
 8008776:	2b00      	cmp	r3, #0
 8008778:	d003      	beq.n	8008782 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 fe01 	bl	8009382 <UART_Receive_IT>
      return;
 8008780:	e256      	b.n	8008c30 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008782:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008786:	2b00      	cmp	r3, #0
 8008788:	f000 80de 	beq.w	8008948 <HAL_UART_IRQHandler+0x22c>
 800878c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008790:	f003 0301 	and.w	r3, r3, #1
 8008794:	2b00      	cmp	r3, #0
 8008796:	d106      	bne.n	80087a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800879c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	f000 80d1 	beq.w	8008948 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80087a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087aa:	f003 0301 	and.w	r3, r3, #1
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d00b      	beq.n	80087ca <HAL_UART_IRQHandler+0xae>
 80087b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d005      	beq.n	80087ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087c2:	f043 0201 	orr.w	r2, r3, #1
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80087ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087ce:	f003 0304 	and.w	r3, r3, #4
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d00b      	beq.n	80087ee <HAL_UART_IRQHandler+0xd2>
 80087d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087da:	f003 0301 	and.w	r3, r3, #1
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d005      	beq.n	80087ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087e6:	f043 0202 	orr.w	r2, r3, #2
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80087ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087f2:	f003 0302 	and.w	r3, r3, #2
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d00b      	beq.n	8008812 <HAL_UART_IRQHandler+0xf6>
 80087fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087fe:	f003 0301 	and.w	r3, r3, #1
 8008802:	2b00      	cmp	r3, #0
 8008804:	d005      	beq.n	8008812 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800880a:	f043 0204 	orr.w	r2, r3, #4
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008816:	f003 0308 	and.w	r3, r3, #8
 800881a:	2b00      	cmp	r3, #0
 800881c:	d011      	beq.n	8008842 <HAL_UART_IRQHandler+0x126>
 800881e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008822:	f003 0320 	and.w	r3, r3, #32
 8008826:	2b00      	cmp	r3, #0
 8008828:	d105      	bne.n	8008836 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800882a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800882e:	f003 0301 	and.w	r3, r3, #1
 8008832:	2b00      	cmp	r3, #0
 8008834:	d005      	beq.n	8008842 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800883a:	f043 0208 	orr.w	r2, r3, #8
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008846:	2b00      	cmp	r3, #0
 8008848:	f000 81ed 	beq.w	8008c26 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800884c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008850:	f003 0320 	and.w	r3, r3, #32
 8008854:	2b00      	cmp	r3, #0
 8008856:	d008      	beq.n	800886a <HAL_UART_IRQHandler+0x14e>
 8008858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800885c:	f003 0320 	and.w	r3, r3, #32
 8008860:	2b00      	cmp	r3, #0
 8008862:	d002      	beq.n	800886a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 fd8c 	bl	8009382 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	695b      	ldr	r3, [r3, #20]
 8008870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008874:	2b40      	cmp	r3, #64	; 0x40
 8008876:	bf0c      	ite	eq
 8008878:	2301      	moveq	r3, #1
 800887a:	2300      	movne	r3, #0
 800887c:	b2db      	uxtb	r3, r3
 800887e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008886:	f003 0308 	and.w	r3, r3, #8
 800888a:	2b00      	cmp	r3, #0
 800888c:	d103      	bne.n	8008896 <HAL_UART_IRQHandler+0x17a>
 800888e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008892:	2b00      	cmp	r3, #0
 8008894:	d04f      	beq.n	8008936 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 fc94 	bl	80091c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	695b      	ldr	r3, [r3, #20]
 80088a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088a6:	2b40      	cmp	r3, #64	; 0x40
 80088a8:	d141      	bne.n	800892e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	3314      	adds	r3, #20
 80088b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80088b8:	e853 3f00 	ldrex	r3, [r3]
 80088bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80088c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80088c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	3314      	adds	r3, #20
 80088d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80088d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80088da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80088e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80088e6:	e841 2300 	strex	r3, r2, [r1]
 80088ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80088ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d1d9      	bne.n	80088aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d013      	beq.n	8008926 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008902:	4a7d      	ldr	r2, [pc, #500]	; (8008af8 <HAL_UART_IRQHandler+0x3dc>)
 8008904:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800890a:	4618      	mov	r0, r3
 800890c:	f7fb fe64 	bl	80045d8 <HAL_DMA_Abort_IT>
 8008910:	4603      	mov	r3, r0
 8008912:	2b00      	cmp	r3, #0
 8008914:	d016      	beq.n	8008944 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800891a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800891c:	687a      	ldr	r2, [r7, #4]
 800891e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008920:	4610      	mov	r0, r2
 8008922:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008924:	e00e      	b.n	8008944 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 f9ae 	bl	8008c88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800892c:	e00a      	b.n	8008944 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 f9aa 	bl	8008c88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008934:	e006      	b.n	8008944 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 f9a6 	bl	8008c88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2200      	movs	r2, #0
 8008940:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008942:	e170      	b.n	8008c26 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008944:	bf00      	nop
    return;
 8008946:	e16e      	b.n	8008c26 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800894c:	2b01      	cmp	r3, #1
 800894e:	f040 814a 	bne.w	8008be6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008956:	f003 0310 	and.w	r3, r3, #16
 800895a:	2b00      	cmp	r3, #0
 800895c:	f000 8143 	beq.w	8008be6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008964:	f003 0310 	and.w	r3, r3, #16
 8008968:	2b00      	cmp	r3, #0
 800896a:	f000 813c 	beq.w	8008be6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800896e:	2300      	movs	r3, #0
 8008970:	60bb      	str	r3, [r7, #8]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	60bb      	str	r3, [r7, #8]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	60bb      	str	r3, [r7, #8]
 8008982:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	695b      	ldr	r3, [r3, #20]
 800898a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800898e:	2b40      	cmp	r3, #64	; 0x40
 8008990:	f040 80b4 	bne.w	8008afc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80089a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	f000 8140 	beq.w	8008c2a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80089ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80089b2:	429a      	cmp	r2, r3
 80089b4:	f080 8139 	bcs.w	8008c2a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80089be:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089c4:	69db      	ldr	r3, [r3, #28]
 80089c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089ca:	f000 8088 	beq.w	8008ade <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	330c      	adds	r3, #12
 80089d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80089dc:	e853 3f00 	ldrex	r3, [r3]
 80089e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80089e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80089e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	330c      	adds	r3, #12
 80089f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80089fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80089fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a02:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008a06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008a0a:	e841 2300 	strex	r3, r2, [r1]
 8008a0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008a12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d1d9      	bne.n	80089ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	3314      	adds	r3, #20
 8008a20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a24:	e853 3f00 	ldrex	r3, [r3]
 8008a28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008a2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a2c:	f023 0301 	bic.w	r3, r3, #1
 8008a30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	3314      	adds	r3, #20
 8008a3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008a3e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008a42:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008a46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008a4a:	e841 2300 	strex	r3, r2, [r1]
 8008a4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008a50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d1e1      	bne.n	8008a1a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	3314      	adds	r3, #20
 8008a5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a60:	e853 3f00 	ldrex	r3, [r3]
 8008a64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008a66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	3314      	adds	r3, #20
 8008a76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008a7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008a7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008a80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008a82:	e841 2300 	strex	r3, r2, [r1]
 8008a86:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008a88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d1e3      	bne.n	8008a56 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2220      	movs	r2, #32
 8008a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	330c      	adds	r3, #12
 8008aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008aa6:	e853 3f00 	ldrex	r3, [r3]
 8008aaa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008aac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008aae:	f023 0310 	bic.w	r3, r3, #16
 8008ab2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	330c      	adds	r3, #12
 8008abc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008ac0:	65ba      	str	r2, [r7, #88]	; 0x58
 8008ac2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008ac6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008ac8:	e841 2300 	strex	r3, r2, [r1]
 8008acc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008ace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d1e3      	bne.n	8008a9c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f7fb fd0d 	bl	80044f8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	1ad3      	subs	r3, r2, r3
 8008aea:	b29b      	uxth	r3, r3
 8008aec:	4619      	mov	r1, r3
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 f8d4 	bl	8008c9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008af4:	e099      	b.n	8008c2a <HAL_UART_IRQHandler+0x50e>
 8008af6:	bf00      	nop
 8008af8:	0800928b 	.word	0x0800928b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	1ad3      	subs	r3, r2, r3
 8008b08:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	f000 808b 	beq.w	8008c2e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008b18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	f000 8086 	beq.w	8008c2e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	330c      	adds	r3, #12
 8008b28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b2c:	e853 3f00 	ldrex	r3, [r3]
 8008b30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	330c      	adds	r3, #12
 8008b42:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008b46:	647a      	str	r2, [r7, #68]	; 0x44
 8008b48:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008b4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b4e:	e841 2300 	strex	r3, r2, [r1]
 8008b52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d1e3      	bne.n	8008b22 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	3314      	adds	r3, #20
 8008b60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b64:	e853 3f00 	ldrex	r3, [r3]
 8008b68:	623b      	str	r3, [r7, #32]
   return(result);
 8008b6a:	6a3b      	ldr	r3, [r7, #32]
 8008b6c:	f023 0301 	bic.w	r3, r3, #1
 8008b70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	3314      	adds	r3, #20
 8008b7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008b7e:	633a      	str	r2, [r7, #48]	; 0x30
 8008b80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b86:	e841 2300 	strex	r3, r2, [r1]
 8008b8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d1e3      	bne.n	8008b5a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2220      	movs	r2, #32
 8008b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	330c      	adds	r3, #12
 8008ba6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	e853 3f00 	ldrex	r3, [r3]
 8008bae:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f023 0310 	bic.w	r3, r3, #16
 8008bb6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	330c      	adds	r3, #12
 8008bc0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008bc4:	61fa      	str	r2, [r7, #28]
 8008bc6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc8:	69b9      	ldr	r1, [r7, #24]
 8008bca:	69fa      	ldr	r2, [r7, #28]
 8008bcc:	e841 2300 	strex	r3, r2, [r1]
 8008bd0:	617b      	str	r3, [r7, #20]
   return(result);
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d1e3      	bne.n	8008ba0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008bd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008bdc:	4619      	mov	r1, r3
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 f85c 	bl	8008c9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008be4:	e023      	b.n	8008c2e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d009      	beq.n	8008c06 <HAL_UART_IRQHandler+0x4ea>
 8008bf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d003      	beq.n	8008c06 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 fb57 	bl	80092b2 <UART_Transmit_IT>
    return;
 8008c04:	e014      	b.n	8008c30 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d00e      	beq.n	8008c30 <HAL_UART_IRQHandler+0x514>
 8008c12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d008      	beq.n	8008c30 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 fb97 	bl	8009352 <UART_EndTransmit_IT>
    return;
 8008c24:	e004      	b.n	8008c30 <HAL_UART_IRQHandler+0x514>
    return;
 8008c26:	bf00      	nop
 8008c28:	e002      	b.n	8008c30 <HAL_UART_IRQHandler+0x514>
      return;
 8008c2a:	bf00      	nop
 8008c2c:	e000      	b.n	8008c30 <HAL_UART_IRQHandler+0x514>
      return;
 8008c2e:	bf00      	nop
  }
}
 8008c30:	37e8      	adds	r7, #232	; 0xe8
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop

08008c38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b083      	sub	sp, #12
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008c40:	bf00      	nop
 8008c42:	370c      	adds	r7, #12
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr

08008c4c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b083      	sub	sp, #12
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008c54:	bf00      	nop
 8008c56:	370c      	adds	r7, #12
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr

08008c60 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b083      	sub	sp, #12
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008c68:	bf00      	nop
 8008c6a:	370c      	adds	r7, #12
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008c7c:	bf00      	nop
 8008c7e:	370c      	adds	r7, #12
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008c90:	bf00      	nop
 8008c92:	370c      	adds	r7, #12
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr

08008c9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b083      	sub	sp, #12
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	460b      	mov	r3, r1
 8008ca6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008ca8:	bf00      	nop
 8008caa:	370c      	adds	r7, #12
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr

08008cb4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b090      	sub	sp, #64	; 0x40
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d137      	bne.n	8008d40 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	3314      	adds	r3, #20
 8008cdc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce0:	e853 3f00 	ldrex	r3, [r3]
 8008ce4:	623b      	str	r3, [r7, #32]
   return(result);
 8008ce6:	6a3b      	ldr	r3, [r7, #32]
 8008ce8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008cec:	63bb      	str	r3, [r7, #56]	; 0x38
 8008cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	3314      	adds	r3, #20
 8008cf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008cf6:	633a      	str	r2, [r7, #48]	; 0x30
 8008cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008cfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cfe:	e841 2300 	strex	r3, r2, [r1]
 8008d02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d1e5      	bne.n	8008cd6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	330c      	adds	r3, #12
 8008d10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	e853 3f00 	ldrex	r3, [r3]
 8008d18:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d20:	637b      	str	r3, [r7, #52]	; 0x34
 8008d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	330c      	adds	r3, #12
 8008d28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d2a:	61fa      	str	r2, [r7, #28]
 8008d2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d2e:	69b9      	ldr	r1, [r7, #24]
 8008d30:	69fa      	ldr	r2, [r7, #28]
 8008d32:	e841 2300 	strex	r3, r2, [r1]
 8008d36:	617b      	str	r3, [r7, #20]
   return(result);
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d1e5      	bne.n	8008d0a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008d3e:	e002      	b.n	8008d46 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008d40:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008d42:	f7ff ff79 	bl	8008c38 <HAL_UART_TxCpltCallback>
}
 8008d46:	bf00      	nop
 8008d48:	3740      	adds	r7, #64	; 0x40
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}

08008d4e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008d4e:	b580      	push	{r7, lr}
 8008d50:	b084      	sub	sp, #16
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d5a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008d5c:	68f8      	ldr	r0, [r7, #12]
 8008d5e:	f7ff ff75 	bl	8008c4c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d62:	bf00      	nop
 8008d64:	3710      	adds	r7, #16
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}

08008d6a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008d6a:	b580      	push	{r7, lr}
 8008d6c:	b09c      	sub	sp, #112	; 0x70
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d76:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d172      	bne.n	8008e6c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008d86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d88:	2200      	movs	r2, #0
 8008d8a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	330c      	adds	r3, #12
 8008d92:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d96:	e853 3f00 	ldrex	r3, [r3]
 8008d9a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008d9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008da2:	66bb      	str	r3, [r7, #104]	; 0x68
 8008da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	330c      	adds	r3, #12
 8008daa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008dac:	65ba      	str	r2, [r7, #88]	; 0x58
 8008dae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008db2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008db4:	e841 2300 	strex	r3, r2, [r1]
 8008db8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008dba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d1e5      	bne.n	8008d8c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	3314      	adds	r3, #20
 8008dc6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dca:	e853 3f00 	ldrex	r3, [r3]
 8008dce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dd2:	f023 0301 	bic.w	r3, r3, #1
 8008dd6:	667b      	str	r3, [r7, #100]	; 0x64
 8008dd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	3314      	adds	r3, #20
 8008dde:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008de0:	647a      	str	r2, [r7, #68]	; 0x44
 8008de2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008de6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008de8:	e841 2300 	strex	r3, r2, [r1]
 8008dec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d1e5      	bne.n	8008dc0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	3314      	adds	r3, #20
 8008dfa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dfe:	e853 3f00 	ldrex	r3, [r3]
 8008e02:	623b      	str	r3, [r7, #32]
   return(result);
 8008e04:	6a3b      	ldr	r3, [r7, #32]
 8008e06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e0a:	663b      	str	r3, [r7, #96]	; 0x60
 8008e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	3314      	adds	r3, #20
 8008e12:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008e14:	633a      	str	r2, [r7, #48]	; 0x30
 8008e16:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e1c:	e841 2300 	strex	r3, r2, [r1]
 8008e20:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d1e5      	bne.n	8008df4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e2a:	2220      	movs	r2, #32
 8008e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d119      	bne.n	8008e6c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	330c      	adds	r3, #12
 8008e3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	e853 3f00 	ldrex	r3, [r3]
 8008e46:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f023 0310 	bic.w	r3, r3, #16
 8008e4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	330c      	adds	r3, #12
 8008e56:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008e58:	61fa      	str	r2, [r7, #28]
 8008e5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e5c:	69b9      	ldr	r1, [r7, #24]
 8008e5e:	69fa      	ldr	r2, [r7, #28]
 8008e60:	e841 2300 	strex	r3, r2, [r1]
 8008e64:	617b      	str	r3, [r7, #20]
   return(result);
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d1e5      	bne.n	8008e38 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d106      	bne.n	8008e82 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e76:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008e78:	4619      	mov	r1, r3
 8008e7a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008e7c:	f7ff ff0e 	bl	8008c9c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008e80:	e002      	b.n	8008e88 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008e82:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008e84:	f7ff feec 	bl	8008c60 <HAL_UART_RxCpltCallback>
}
 8008e88:	bf00      	nop
 8008e8a:	3770      	adds	r7, #112	; 0x70
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b084      	sub	sp, #16
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e9c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ea2:	2b01      	cmp	r3, #1
 8008ea4:	d108      	bne.n	8008eb8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008eaa:	085b      	lsrs	r3, r3, #1
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	4619      	mov	r1, r3
 8008eb0:	68f8      	ldr	r0, [r7, #12]
 8008eb2:	f7ff fef3 	bl	8008c9c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008eb6:	e002      	b.n	8008ebe <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008eb8:	68f8      	ldr	r0, [r7, #12]
 8008eba:	f7ff fedb 	bl	8008c74 <HAL_UART_RxHalfCpltCallback>
}
 8008ebe:	bf00      	nop
 8008ec0:	3710      	adds	r7, #16
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}

08008ec6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008ec6:	b580      	push	{r7, lr}
 8008ec8:	b084      	sub	sp, #16
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ed6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	695b      	ldr	r3, [r3, #20]
 8008ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ee2:	2b80      	cmp	r3, #128	; 0x80
 8008ee4:	bf0c      	ite	eq
 8008ee6:	2301      	moveq	r3, #1
 8008ee8:	2300      	movne	r3, #0
 8008eea:	b2db      	uxtb	r3, r3
 8008eec:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	2b21      	cmp	r3, #33	; 0x21
 8008ef8:	d108      	bne.n	8008f0c <UART_DMAError+0x46>
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d005      	beq.n	8008f0c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	2200      	movs	r2, #0
 8008f04:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008f06:	68b8      	ldr	r0, [r7, #8]
 8008f08:	f000 f934 	bl	8009174 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	695b      	ldr	r3, [r3, #20]
 8008f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f16:	2b40      	cmp	r3, #64	; 0x40
 8008f18:	bf0c      	ite	eq
 8008f1a:	2301      	moveq	r3, #1
 8008f1c:	2300      	movne	r3, #0
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f28:	b2db      	uxtb	r3, r3
 8008f2a:	2b22      	cmp	r3, #34	; 0x22
 8008f2c:	d108      	bne.n	8008f40 <UART_DMAError+0x7a>
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d005      	beq.n	8008f40 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	2200      	movs	r2, #0
 8008f38:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008f3a:	68b8      	ldr	r0, [r7, #8]
 8008f3c:	f000 f942 	bl	80091c4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f44:	f043 0210 	orr.w	r2, r3, #16
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f4c:	68b8      	ldr	r0, [r7, #8]
 8008f4e:	f7ff fe9b 	bl	8008c88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f52:	bf00      	nop
 8008f54:	3710      	adds	r7, #16
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}

08008f5a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008f5a:	b580      	push	{r7, lr}
 8008f5c:	b090      	sub	sp, #64	; 0x40
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	60f8      	str	r0, [r7, #12]
 8008f62:	60b9      	str	r1, [r7, #8]
 8008f64:	603b      	str	r3, [r7, #0]
 8008f66:	4613      	mov	r3, r2
 8008f68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f6a:	e050      	b.n	800900e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f72:	d04c      	beq.n	800900e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008f74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d007      	beq.n	8008f8a <UART_WaitOnFlagUntilTimeout+0x30>
 8008f7a:	f7fa fdd5 	bl	8003b28 <HAL_GetTick>
 8008f7e:	4602      	mov	r2, r0
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	1ad3      	subs	r3, r2, r3
 8008f84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d241      	bcs.n	800900e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	330c      	adds	r3, #12
 8008f90:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f94:	e853 3f00 	ldrex	r3, [r3]
 8008f98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	330c      	adds	r3, #12
 8008fa8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008faa:	637a      	str	r2, [r7, #52]	; 0x34
 8008fac:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008fb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fb2:	e841 2300 	strex	r3, r2, [r1]
 8008fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d1e5      	bne.n	8008f8a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	3314      	adds	r3, #20
 8008fc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	e853 3f00 	ldrex	r3, [r3]
 8008fcc:	613b      	str	r3, [r7, #16]
   return(result);
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	f023 0301 	bic.w	r3, r3, #1
 8008fd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	3314      	adds	r3, #20
 8008fdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008fde:	623a      	str	r2, [r7, #32]
 8008fe0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe2:	69f9      	ldr	r1, [r7, #28]
 8008fe4:	6a3a      	ldr	r2, [r7, #32]
 8008fe6:	e841 2300 	strex	r3, r2, [r1]
 8008fea:	61bb      	str	r3, [r7, #24]
   return(result);
 8008fec:	69bb      	ldr	r3, [r7, #24]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d1e5      	bne.n	8008fbe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2220      	movs	r2, #32
 8008ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2220      	movs	r2, #32
 8008ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2200      	movs	r2, #0
 8009006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800900a:	2303      	movs	r3, #3
 800900c:	e00f      	b.n	800902e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	681a      	ldr	r2, [r3, #0]
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	4013      	ands	r3, r2
 8009018:	68ba      	ldr	r2, [r7, #8]
 800901a:	429a      	cmp	r2, r3
 800901c:	bf0c      	ite	eq
 800901e:	2301      	moveq	r3, #1
 8009020:	2300      	movne	r3, #0
 8009022:	b2db      	uxtb	r3, r3
 8009024:	461a      	mov	r2, r3
 8009026:	79fb      	ldrb	r3, [r7, #7]
 8009028:	429a      	cmp	r2, r3
 800902a:	d09f      	beq.n	8008f6c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800902c:	2300      	movs	r3, #0
}
 800902e:	4618      	mov	r0, r3
 8009030:	3740      	adds	r7, #64	; 0x40
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
	...

08009038 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b098      	sub	sp, #96	; 0x60
 800903c:	af00      	add	r7, sp, #0
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	60b9      	str	r1, [r7, #8]
 8009042:	4613      	mov	r3, r2
 8009044:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009046:	68ba      	ldr	r2, [r7, #8]
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	88fa      	ldrh	r2, [r7, #6]
 8009050:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2200      	movs	r2, #0
 8009056:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2222      	movs	r2, #34	; 0x22
 800905c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009064:	4a40      	ldr	r2, [pc, #256]	; (8009168 <UART_Start_Receive_DMA+0x130>)
 8009066:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800906c:	4a3f      	ldr	r2, [pc, #252]	; (800916c <UART_Start_Receive_DMA+0x134>)
 800906e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009074:	4a3e      	ldr	r2, [pc, #248]	; (8009170 <UART_Start_Receive_DMA+0x138>)
 8009076:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800907c:	2200      	movs	r2, #0
 800907e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009080:	f107 0308 	add.w	r3, r7, #8
 8009084:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	3304      	adds	r3, #4
 8009090:	4619      	mov	r1, r3
 8009092:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009094:	681a      	ldr	r2, [r3, #0]
 8009096:	88fb      	ldrh	r3, [r7, #6]
 8009098:	f7fb f9d6 	bl	8004448 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800909c:	2300      	movs	r3, #0
 800909e:	613b      	str	r3, [r7, #16]
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	613b      	str	r3, [r7, #16]
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	613b      	str	r3, [r7, #16]
 80090b0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	2200      	movs	r2, #0
 80090b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	691b      	ldr	r3, [r3, #16]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d019      	beq.n	80090f6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	330c      	adds	r3, #12
 80090c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090cc:	e853 3f00 	ldrex	r3, [r3]
 80090d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80090d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	330c      	adds	r3, #12
 80090e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80090e2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80090e4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80090e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80090ea:	e841 2300 	strex	r3, r2, [r1]
 80090ee:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80090f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d1e5      	bne.n	80090c2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	3314      	adds	r3, #20
 80090fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009100:	e853 3f00 	ldrex	r3, [r3]
 8009104:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009108:	f043 0301 	orr.w	r3, r3, #1
 800910c:	657b      	str	r3, [r7, #84]	; 0x54
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	3314      	adds	r3, #20
 8009114:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009116:	63ba      	str	r2, [r7, #56]	; 0x38
 8009118:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800911a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800911c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800911e:	e841 2300 	strex	r3, r2, [r1]
 8009122:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009126:	2b00      	cmp	r3, #0
 8009128:	d1e5      	bne.n	80090f6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	3314      	adds	r3, #20
 8009130:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009132:	69bb      	ldr	r3, [r7, #24]
 8009134:	e853 3f00 	ldrex	r3, [r3]
 8009138:	617b      	str	r3, [r7, #20]
   return(result);
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009140:	653b      	str	r3, [r7, #80]	; 0x50
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	3314      	adds	r3, #20
 8009148:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800914a:	627a      	str	r2, [r7, #36]	; 0x24
 800914c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800914e:	6a39      	ldr	r1, [r7, #32]
 8009150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009152:	e841 2300 	strex	r3, r2, [r1]
 8009156:	61fb      	str	r3, [r7, #28]
   return(result);
 8009158:	69fb      	ldr	r3, [r7, #28]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d1e5      	bne.n	800912a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800915e:	2300      	movs	r3, #0
}
 8009160:	4618      	mov	r0, r3
 8009162:	3760      	adds	r7, #96	; 0x60
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}
 8009168:	08008d6b 	.word	0x08008d6b
 800916c:	08008e91 	.word	0x08008e91
 8009170:	08008ec7 	.word	0x08008ec7

08009174 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009174:	b480      	push	{r7}
 8009176:	b089      	sub	sp, #36	; 0x24
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	330c      	adds	r3, #12
 8009182:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	e853 3f00 	ldrex	r3, [r3]
 800918a:	60bb      	str	r3, [r7, #8]
   return(result);
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009192:	61fb      	str	r3, [r7, #28]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	330c      	adds	r3, #12
 800919a:	69fa      	ldr	r2, [r7, #28]
 800919c:	61ba      	str	r2, [r7, #24]
 800919e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a0:	6979      	ldr	r1, [r7, #20]
 80091a2:	69ba      	ldr	r2, [r7, #24]
 80091a4:	e841 2300 	strex	r3, r2, [r1]
 80091a8:	613b      	str	r3, [r7, #16]
   return(result);
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d1e5      	bne.n	800917c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2220      	movs	r2, #32
 80091b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80091b8:	bf00      	nop
 80091ba:	3724      	adds	r7, #36	; 0x24
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr

080091c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b095      	sub	sp, #84	; 0x54
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	330c      	adds	r3, #12
 80091d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091d6:	e853 3f00 	ldrex	r3, [r3]
 80091da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80091dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80091e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	330c      	adds	r3, #12
 80091ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80091ec:	643a      	str	r2, [r7, #64]	; 0x40
 80091ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80091f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80091f4:	e841 2300 	strex	r3, r2, [r1]
 80091f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80091fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d1e5      	bne.n	80091cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	3314      	adds	r3, #20
 8009206:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009208:	6a3b      	ldr	r3, [r7, #32]
 800920a:	e853 3f00 	ldrex	r3, [r3]
 800920e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009210:	69fb      	ldr	r3, [r7, #28]
 8009212:	f023 0301 	bic.w	r3, r3, #1
 8009216:	64bb      	str	r3, [r7, #72]	; 0x48
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	3314      	adds	r3, #20
 800921e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009220:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009222:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009224:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009226:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009228:	e841 2300 	strex	r3, r2, [r1]
 800922c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800922e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009230:	2b00      	cmp	r3, #0
 8009232:	d1e5      	bne.n	8009200 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009238:	2b01      	cmp	r3, #1
 800923a:	d119      	bne.n	8009270 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	330c      	adds	r3, #12
 8009242:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	e853 3f00 	ldrex	r3, [r3]
 800924a:	60bb      	str	r3, [r7, #8]
   return(result);
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	f023 0310 	bic.w	r3, r3, #16
 8009252:	647b      	str	r3, [r7, #68]	; 0x44
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	330c      	adds	r3, #12
 800925a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800925c:	61ba      	str	r2, [r7, #24]
 800925e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009260:	6979      	ldr	r1, [r7, #20]
 8009262:	69ba      	ldr	r2, [r7, #24]
 8009264:	e841 2300 	strex	r3, r2, [r1]
 8009268:	613b      	str	r3, [r7, #16]
   return(result);
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d1e5      	bne.n	800923c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2220      	movs	r2, #32
 8009274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2200      	movs	r2, #0
 800927c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800927e:	bf00      	nop
 8009280:	3754      	adds	r7, #84	; 0x54
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr

0800928a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800928a:	b580      	push	{r7, lr}
 800928c:	b084      	sub	sp, #16
 800928e:	af00      	add	r7, sp, #0
 8009290:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009296:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2200      	movs	r2, #0
 800929c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2200      	movs	r2, #0
 80092a2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80092a4:	68f8      	ldr	r0, [r7, #12]
 80092a6:	f7ff fcef 	bl	8008c88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092aa:	bf00      	nop
 80092ac:	3710      	adds	r7, #16
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}

080092b2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80092b2:	b480      	push	{r7}
 80092b4:	b085      	sub	sp, #20
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092c0:	b2db      	uxtb	r3, r3
 80092c2:	2b21      	cmp	r3, #33	; 0x21
 80092c4:	d13e      	bne.n	8009344 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092ce:	d114      	bne.n	80092fa <UART_Transmit_IT+0x48>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	691b      	ldr	r3, [r3, #16]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d110      	bne.n	80092fa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6a1b      	ldr	r3, [r3, #32]
 80092dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	881b      	ldrh	r3, [r3, #0]
 80092e2:	461a      	mov	r2, r3
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80092ec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6a1b      	ldr	r3, [r3, #32]
 80092f2:	1c9a      	adds	r2, r3, #2
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	621a      	str	r2, [r3, #32]
 80092f8:	e008      	b.n	800930c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6a1b      	ldr	r3, [r3, #32]
 80092fe:	1c59      	adds	r1, r3, #1
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	6211      	str	r1, [r2, #32]
 8009304:	781a      	ldrb	r2, [r3, #0]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009310:	b29b      	uxth	r3, r3
 8009312:	3b01      	subs	r3, #1
 8009314:	b29b      	uxth	r3, r3
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	4619      	mov	r1, r3
 800931a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800931c:	2b00      	cmp	r3, #0
 800931e:	d10f      	bne.n	8009340 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	68da      	ldr	r2, [r3, #12]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800932e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	68da      	ldr	r2, [r3, #12]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800933e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009340:	2300      	movs	r3, #0
 8009342:	e000      	b.n	8009346 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009344:	2302      	movs	r3, #2
  }
}
 8009346:	4618      	mov	r0, r3
 8009348:	3714      	adds	r7, #20
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr

08009352 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009352:	b580      	push	{r7, lr}
 8009354:	b082      	sub	sp, #8
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	68da      	ldr	r2, [r3, #12]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009368:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2220      	movs	r2, #32
 800936e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f7ff fc60 	bl	8008c38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009378:	2300      	movs	r3, #0
}
 800937a:	4618      	mov	r0, r3
 800937c:	3708      	adds	r7, #8
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}

08009382 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009382:	b580      	push	{r7, lr}
 8009384:	b08c      	sub	sp, #48	; 0x30
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009390:	b2db      	uxtb	r3, r3
 8009392:	2b22      	cmp	r3, #34	; 0x22
 8009394:	f040 80ab 	bne.w	80094ee <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	689b      	ldr	r3, [r3, #8]
 800939c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093a0:	d117      	bne.n	80093d2 <UART_Receive_IT+0x50>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	691b      	ldr	r3, [r3, #16]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d113      	bne.n	80093d2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80093aa:	2300      	movs	r3, #0
 80093ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093b2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093c0:	b29a      	uxth	r2, r3
 80093c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ca:	1c9a      	adds	r2, r3, #2
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	629a      	str	r2, [r3, #40]	; 0x28
 80093d0:	e026      	b.n	8009420 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80093d8:	2300      	movs	r3, #0
 80093da:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	689b      	ldr	r3, [r3, #8]
 80093e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093e4:	d007      	beq.n	80093f6 <UART_Receive_IT+0x74>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	689b      	ldr	r3, [r3, #8]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d10a      	bne.n	8009404 <UART_Receive_IT+0x82>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	691b      	ldr	r3, [r3, #16]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d106      	bne.n	8009404 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	b2da      	uxtb	r2, r3
 80093fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009400:	701a      	strb	r2, [r3, #0]
 8009402:	e008      	b.n	8009416 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	b2db      	uxtb	r3, r3
 800940c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009410:	b2da      	uxtb	r2, r3
 8009412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009414:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800941a:	1c5a      	adds	r2, r3, #1
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009424:	b29b      	uxth	r3, r3
 8009426:	3b01      	subs	r3, #1
 8009428:	b29b      	uxth	r3, r3
 800942a:	687a      	ldr	r2, [r7, #4]
 800942c:	4619      	mov	r1, r3
 800942e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009430:	2b00      	cmp	r3, #0
 8009432:	d15a      	bne.n	80094ea <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	68da      	ldr	r2, [r3, #12]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f022 0220 	bic.w	r2, r2, #32
 8009442:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	68da      	ldr	r2, [r3, #12]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009452:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	695a      	ldr	r2, [r3, #20]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f022 0201 	bic.w	r2, r2, #1
 8009462:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2220      	movs	r2, #32
 8009468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009470:	2b01      	cmp	r3, #1
 8009472:	d135      	bne.n	80094e0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2200      	movs	r2, #0
 8009478:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	330c      	adds	r3, #12
 8009480:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	e853 3f00 	ldrex	r3, [r3]
 8009488:	613b      	str	r3, [r7, #16]
   return(result);
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	f023 0310 	bic.w	r3, r3, #16
 8009490:	627b      	str	r3, [r7, #36]	; 0x24
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	330c      	adds	r3, #12
 8009498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800949a:	623a      	str	r2, [r7, #32]
 800949c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800949e:	69f9      	ldr	r1, [r7, #28]
 80094a0:	6a3a      	ldr	r2, [r7, #32]
 80094a2:	e841 2300 	strex	r3, r2, [r1]
 80094a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80094a8:	69bb      	ldr	r3, [r7, #24]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d1e5      	bne.n	800947a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f003 0310 	and.w	r3, r3, #16
 80094b8:	2b10      	cmp	r3, #16
 80094ba:	d10a      	bne.n	80094d2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80094bc:	2300      	movs	r3, #0
 80094be:	60fb      	str	r3, [r7, #12]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	60fb      	str	r3, [r7, #12]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	60fb      	str	r3, [r7, #12]
 80094d0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80094d6:	4619      	mov	r1, r3
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f7ff fbdf 	bl	8008c9c <HAL_UARTEx_RxEventCallback>
 80094de:	e002      	b.n	80094e6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f7ff fbbd 	bl	8008c60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80094e6:	2300      	movs	r3, #0
 80094e8:	e002      	b.n	80094f0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80094ea:	2300      	movs	r3, #0
 80094ec:	e000      	b.n	80094f0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80094ee:	2302      	movs	r3, #2
  }
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3730      	adds	r7, #48	; 0x30
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80094f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80094fc:	b0c0      	sub	sp, #256	; 0x100
 80094fe:	af00      	add	r7, sp, #0
 8009500:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	691b      	ldr	r3, [r3, #16]
 800950c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009514:	68d9      	ldr	r1, [r3, #12]
 8009516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800951a:	681a      	ldr	r2, [r3, #0]
 800951c:	ea40 0301 	orr.w	r3, r0, r1
 8009520:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009526:	689a      	ldr	r2, [r3, #8]
 8009528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800952c:	691b      	ldr	r3, [r3, #16]
 800952e:	431a      	orrs	r2, r3
 8009530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009534:	695b      	ldr	r3, [r3, #20]
 8009536:	431a      	orrs	r2, r3
 8009538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800953c:	69db      	ldr	r3, [r3, #28]
 800953e:	4313      	orrs	r3, r2
 8009540:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	68db      	ldr	r3, [r3, #12]
 800954c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009550:	f021 010c 	bic.w	r1, r1, #12
 8009554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800955e:	430b      	orrs	r3, r1
 8009560:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	695b      	ldr	r3, [r3, #20]
 800956a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800956e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009572:	6999      	ldr	r1, [r3, #24]
 8009574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009578:	681a      	ldr	r2, [r3, #0]
 800957a:	ea40 0301 	orr.w	r3, r0, r1
 800957e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	4b8f      	ldr	r3, [pc, #572]	; (80097c4 <UART_SetConfig+0x2cc>)
 8009588:	429a      	cmp	r2, r3
 800958a:	d005      	beq.n	8009598 <UART_SetConfig+0xa0>
 800958c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	4b8d      	ldr	r3, [pc, #564]	; (80097c8 <UART_SetConfig+0x2d0>)
 8009594:	429a      	cmp	r2, r3
 8009596:	d104      	bne.n	80095a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009598:	f7fd feea 	bl	8007370 <HAL_RCC_GetPCLK2Freq>
 800959c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80095a0:	e003      	b.n	80095aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80095a2:	f7fd fed1 	bl	8007348 <HAL_RCC_GetPCLK1Freq>
 80095a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80095aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095ae:	69db      	ldr	r3, [r3, #28]
 80095b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095b4:	f040 810c 	bne.w	80097d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80095b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095bc:	2200      	movs	r2, #0
 80095be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80095c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80095c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80095ca:	4622      	mov	r2, r4
 80095cc:	462b      	mov	r3, r5
 80095ce:	1891      	adds	r1, r2, r2
 80095d0:	65b9      	str	r1, [r7, #88]	; 0x58
 80095d2:	415b      	adcs	r3, r3
 80095d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80095d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80095da:	4621      	mov	r1, r4
 80095dc:	eb12 0801 	adds.w	r8, r2, r1
 80095e0:	4629      	mov	r1, r5
 80095e2:	eb43 0901 	adc.w	r9, r3, r1
 80095e6:	f04f 0200 	mov.w	r2, #0
 80095ea:	f04f 0300 	mov.w	r3, #0
 80095ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80095f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80095f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80095fa:	4690      	mov	r8, r2
 80095fc:	4699      	mov	r9, r3
 80095fe:	4623      	mov	r3, r4
 8009600:	eb18 0303 	adds.w	r3, r8, r3
 8009604:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009608:	462b      	mov	r3, r5
 800960a:	eb49 0303 	adc.w	r3, r9, r3
 800960e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	2200      	movs	r2, #0
 800961a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800961e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009622:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009626:	460b      	mov	r3, r1
 8009628:	18db      	adds	r3, r3, r3
 800962a:	653b      	str	r3, [r7, #80]	; 0x50
 800962c:	4613      	mov	r3, r2
 800962e:	eb42 0303 	adc.w	r3, r2, r3
 8009632:	657b      	str	r3, [r7, #84]	; 0x54
 8009634:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009638:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800963c:	f7f7 faa6 	bl	8000b8c <__aeabi_uldivmod>
 8009640:	4602      	mov	r2, r0
 8009642:	460b      	mov	r3, r1
 8009644:	4b61      	ldr	r3, [pc, #388]	; (80097cc <UART_SetConfig+0x2d4>)
 8009646:	fba3 2302 	umull	r2, r3, r3, r2
 800964a:	095b      	lsrs	r3, r3, #5
 800964c:	011c      	lsls	r4, r3, #4
 800964e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009652:	2200      	movs	r2, #0
 8009654:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009658:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800965c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009660:	4642      	mov	r2, r8
 8009662:	464b      	mov	r3, r9
 8009664:	1891      	adds	r1, r2, r2
 8009666:	64b9      	str	r1, [r7, #72]	; 0x48
 8009668:	415b      	adcs	r3, r3
 800966a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800966c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009670:	4641      	mov	r1, r8
 8009672:	eb12 0a01 	adds.w	sl, r2, r1
 8009676:	4649      	mov	r1, r9
 8009678:	eb43 0b01 	adc.w	fp, r3, r1
 800967c:	f04f 0200 	mov.w	r2, #0
 8009680:	f04f 0300 	mov.w	r3, #0
 8009684:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009688:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800968c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009690:	4692      	mov	sl, r2
 8009692:	469b      	mov	fp, r3
 8009694:	4643      	mov	r3, r8
 8009696:	eb1a 0303 	adds.w	r3, sl, r3
 800969a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800969e:	464b      	mov	r3, r9
 80096a0:	eb4b 0303 	adc.w	r3, fp, r3
 80096a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80096a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096ac:	685b      	ldr	r3, [r3, #4]
 80096ae:	2200      	movs	r2, #0
 80096b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80096b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80096b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80096bc:	460b      	mov	r3, r1
 80096be:	18db      	adds	r3, r3, r3
 80096c0:	643b      	str	r3, [r7, #64]	; 0x40
 80096c2:	4613      	mov	r3, r2
 80096c4:	eb42 0303 	adc.w	r3, r2, r3
 80096c8:	647b      	str	r3, [r7, #68]	; 0x44
 80096ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80096ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80096d2:	f7f7 fa5b 	bl	8000b8c <__aeabi_uldivmod>
 80096d6:	4602      	mov	r2, r0
 80096d8:	460b      	mov	r3, r1
 80096da:	4611      	mov	r1, r2
 80096dc:	4b3b      	ldr	r3, [pc, #236]	; (80097cc <UART_SetConfig+0x2d4>)
 80096de:	fba3 2301 	umull	r2, r3, r3, r1
 80096e2:	095b      	lsrs	r3, r3, #5
 80096e4:	2264      	movs	r2, #100	; 0x64
 80096e6:	fb02 f303 	mul.w	r3, r2, r3
 80096ea:	1acb      	subs	r3, r1, r3
 80096ec:	00db      	lsls	r3, r3, #3
 80096ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80096f2:	4b36      	ldr	r3, [pc, #216]	; (80097cc <UART_SetConfig+0x2d4>)
 80096f4:	fba3 2302 	umull	r2, r3, r3, r2
 80096f8:	095b      	lsrs	r3, r3, #5
 80096fa:	005b      	lsls	r3, r3, #1
 80096fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009700:	441c      	add	r4, r3
 8009702:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009706:	2200      	movs	r2, #0
 8009708:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800970c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009710:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009714:	4642      	mov	r2, r8
 8009716:	464b      	mov	r3, r9
 8009718:	1891      	adds	r1, r2, r2
 800971a:	63b9      	str	r1, [r7, #56]	; 0x38
 800971c:	415b      	adcs	r3, r3
 800971e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009720:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009724:	4641      	mov	r1, r8
 8009726:	1851      	adds	r1, r2, r1
 8009728:	6339      	str	r1, [r7, #48]	; 0x30
 800972a:	4649      	mov	r1, r9
 800972c:	414b      	adcs	r3, r1
 800972e:	637b      	str	r3, [r7, #52]	; 0x34
 8009730:	f04f 0200 	mov.w	r2, #0
 8009734:	f04f 0300 	mov.w	r3, #0
 8009738:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800973c:	4659      	mov	r1, fp
 800973e:	00cb      	lsls	r3, r1, #3
 8009740:	4651      	mov	r1, sl
 8009742:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009746:	4651      	mov	r1, sl
 8009748:	00ca      	lsls	r2, r1, #3
 800974a:	4610      	mov	r0, r2
 800974c:	4619      	mov	r1, r3
 800974e:	4603      	mov	r3, r0
 8009750:	4642      	mov	r2, r8
 8009752:	189b      	adds	r3, r3, r2
 8009754:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009758:	464b      	mov	r3, r9
 800975a:	460a      	mov	r2, r1
 800975c:	eb42 0303 	adc.w	r3, r2, r3
 8009760:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009768:	685b      	ldr	r3, [r3, #4]
 800976a:	2200      	movs	r2, #0
 800976c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009770:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009774:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009778:	460b      	mov	r3, r1
 800977a:	18db      	adds	r3, r3, r3
 800977c:	62bb      	str	r3, [r7, #40]	; 0x28
 800977e:	4613      	mov	r3, r2
 8009780:	eb42 0303 	adc.w	r3, r2, r3
 8009784:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009786:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800978a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800978e:	f7f7 f9fd 	bl	8000b8c <__aeabi_uldivmod>
 8009792:	4602      	mov	r2, r0
 8009794:	460b      	mov	r3, r1
 8009796:	4b0d      	ldr	r3, [pc, #52]	; (80097cc <UART_SetConfig+0x2d4>)
 8009798:	fba3 1302 	umull	r1, r3, r3, r2
 800979c:	095b      	lsrs	r3, r3, #5
 800979e:	2164      	movs	r1, #100	; 0x64
 80097a0:	fb01 f303 	mul.w	r3, r1, r3
 80097a4:	1ad3      	subs	r3, r2, r3
 80097a6:	00db      	lsls	r3, r3, #3
 80097a8:	3332      	adds	r3, #50	; 0x32
 80097aa:	4a08      	ldr	r2, [pc, #32]	; (80097cc <UART_SetConfig+0x2d4>)
 80097ac:	fba2 2303 	umull	r2, r3, r2, r3
 80097b0:	095b      	lsrs	r3, r3, #5
 80097b2:	f003 0207 	and.w	r2, r3, #7
 80097b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4422      	add	r2, r4
 80097be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80097c0:	e106      	b.n	80099d0 <UART_SetConfig+0x4d8>
 80097c2:	bf00      	nop
 80097c4:	40011000 	.word	0x40011000
 80097c8:	40011400 	.word	0x40011400
 80097cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80097d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097d4:	2200      	movs	r2, #0
 80097d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80097da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80097de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80097e2:	4642      	mov	r2, r8
 80097e4:	464b      	mov	r3, r9
 80097e6:	1891      	adds	r1, r2, r2
 80097e8:	6239      	str	r1, [r7, #32]
 80097ea:	415b      	adcs	r3, r3
 80097ec:	627b      	str	r3, [r7, #36]	; 0x24
 80097ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80097f2:	4641      	mov	r1, r8
 80097f4:	1854      	adds	r4, r2, r1
 80097f6:	4649      	mov	r1, r9
 80097f8:	eb43 0501 	adc.w	r5, r3, r1
 80097fc:	f04f 0200 	mov.w	r2, #0
 8009800:	f04f 0300 	mov.w	r3, #0
 8009804:	00eb      	lsls	r3, r5, #3
 8009806:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800980a:	00e2      	lsls	r2, r4, #3
 800980c:	4614      	mov	r4, r2
 800980e:	461d      	mov	r5, r3
 8009810:	4643      	mov	r3, r8
 8009812:	18e3      	adds	r3, r4, r3
 8009814:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009818:	464b      	mov	r3, r9
 800981a:	eb45 0303 	adc.w	r3, r5, r3
 800981e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	2200      	movs	r2, #0
 800982a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800982e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009832:	f04f 0200 	mov.w	r2, #0
 8009836:	f04f 0300 	mov.w	r3, #0
 800983a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800983e:	4629      	mov	r1, r5
 8009840:	008b      	lsls	r3, r1, #2
 8009842:	4621      	mov	r1, r4
 8009844:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009848:	4621      	mov	r1, r4
 800984a:	008a      	lsls	r2, r1, #2
 800984c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009850:	f7f7 f99c 	bl	8000b8c <__aeabi_uldivmod>
 8009854:	4602      	mov	r2, r0
 8009856:	460b      	mov	r3, r1
 8009858:	4b60      	ldr	r3, [pc, #384]	; (80099dc <UART_SetConfig+0x4e4>)
 800985a:	fba3 2302 	umull	r2, r3, r3, r2
 800985e:	095b      	lsrs	r3, r3, #5
 8009860:	011c      	lsls	r4, r3, #4
 8009862:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009866:	2200      	movs	r2, #0
 8009868:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800986c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009870:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009874:	4642      	mov	r2, r8
 8009876:	464b      	mov	r3, r9
 8009878:	1891      	adds	r1, r2, r2
 800987a:	61b9      	str	r1, [r7, #24]
 800987c:	415b      	adcs	r3, r3
 800987e:	61fb      	str	r3, [r7, #28]
 8009880:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009884:	4641      	mov	r1, r8
 8009886:	1851      	adds	r1, r2, r1
 8009888:	6139      	str	r1, [r7, #16]
 800988a:	4649      	mov	r1, r9
 800988c:	414b      	adcs	r3, r1
 800988e:	617b      	str	r3, [r7, #20]
 8009890:	f04f 0200 	mov.w	r2, #0
 8009894:	f04f 0300 	mov.w	r3, #0
 8009898:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800989c:	4659      	mov	r1, fp
 800989e:	00cb      	lsls	r3, r1, #3
 80098a0:	4651      	mov	r1, sl
 80098a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80098a6:	4651      	mov	r1, sl
 80098a8:	00ca      	lsls	r2, r1, #3
 80098aa:	4610      	mov	r0, r2
 80098ac:	4619      	mov	r1, r3
 80098ae:	4603      	mov	r3, r0
 80098b0:	4642      	mov	r2, r8
 80098b2:	189b      	adds	r3, r3, r2
 80098b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80098b8:	464b      	mov	r3, r9
 80098ba:	460a      	mov	r2, r1
 80098bc:	eb42 0303 	adc.w	r3, r2, r3
 80098c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80098c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098c8:	685b      	ldr	r3, [r3, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80098ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80098d0:	f04f 0200 	mov.w	r2, #0
 80098d4:	f04f 0300 	mov.w	r3, #0
 80098d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80098dc:	4649      	mov	r1, r9
 80098de:	008b      	lsls	r3, r1, #2
 80098e0:	4641      	mov	r1, r8
 80098e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80098e6:	4641      	mov	r1, r8
 80098e8:	008a      	lsls	r2, r1, #2
 80098ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80098ee:	f7f7 f94d 	bl	8000b8c <__aeabi_uldivmod>
 80098f2:	4602      	mov	r2, r0
 80098f4:	460b      	mov	r3, r1
 80098f6:	4611      	mov	r1, r2
 80098f8:	4b38      	ldr	r3, [pc, #224]	; (80099dc <UART_SetConfig+0x4e4>)
 80098fa:	fba3 2301 	umull	r2, r3, r3, r1
 80098fe:	095b      	lsrs	r3, r3, #5
 8009900:	2264      	movs	r2, #100	; 0x64
 8009902:	fb02 f303 	mul.w	r3, r2, r3
 8009906:	1acb      	subs	r3, r1, r3
 8009908:	011b      	lsls	r3, r3, #4
 800990a:	3332      	adds	r3, #50	; 0x32
 800990c:	4a33      	ldr	r2, [pc, #204]	; (80099dc <UART_SetConfig+0x4e4>)
 800990e:	fba2 2303 	umull	r2, r3, r2, r3
 8009912:	095b      	lsrs	r3, r3, #5
 8009914:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009918:	441c      	add	r4, r3
 800991a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800991e:	2200      	movs	r2, #0
 8009920:	673b      	str	r3, [r7, #112]	; 0x70
 8009922:	677a      	str	r2, [r7, #116]	; 0x74
 8009924:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009928:	4642      	mov	r2, r8
 800992a:	464b      	mov	r3, r9
 800992c:	1891      	adds	r1, r2, r2
 800992e:	60b9      	str	r1, [r7, #8]
 8009930:	415b      	adcs	r3, r3
 8009932:	60fb      	str	r3, [r7, #12]
 8009934:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009938:	4641      	mov	r1, r8
 800993a:	1851      	adds	r1, r2, r1
 800993c:	6039      	str	r1, [r7, #0]
 800993e:	4649      	mov	r1, r9
 8009940:	414b      	adcs	r3, r1
 8009942:	607b      	str	r3, [r7, #4]
 8009944:	f04f 0200 	mov.w	r2, #0
 8009948:	f04f 0300 	mov.w	r3, #0
 800994c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009950:	4659      	mov	r1, fp
 8009952:	00cb      	lsls	r3, r1, #3
 8009954:	4651      	mov	r1, sl
 8009956:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800995a:	4651      	mov	r1, sl
 800995c:	00ca      	lsls	r2, r1, #3
 800995e:	4610      	mov	r0, r2
 8009960:	4619      	mov	r1, r3
 8009962:	4603      	mov	r3, r0
 8009964:	4642      	mov	r2, r8
 8009966:	189b      	adds	r3, r3, r2
 8009968:	66bb      	str	r3, [r7, #104]	; 0x68
 800996a:	464b      	mov	r3, r9
 800996c:	460a      	mov	r2, r1
 800996e:	eb42 0303 	adc.w	r3, r2, r3
 8009972:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009978:	685b      	ldr	r3, [r3, #4]
 800997a:	2200      	movs	r2, #0
 800997c:	663b      	str	r3, [r7, #96]	; 0x60
 800997e:	667a      	str	r2, [r7, #100]	; 0x64
 8009980:	f04f 0200 	mov.w	r2, #0
 8009984:	f04f 0300 	mov.w	r3, #0
 8009988:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800998c:	4649      	mov	r1, r9
 800998e:	008b      	lsls	r3, r1, #2
 8009990:	4641      	mov	r1, r8
 8009992:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009996:	4641      	mov	r1, r8
 8009998:	008a      	lsls	r2, r1, #2
 800999a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800999e:	f7f7 f8f5 	bl	8000b8c <__aeabi_uldivmod>
 80099a2:	4602      	mov	r2, r0
 80099a4:	460b      	mov	r3, r1
 80099a6:	4b0d      	ldr	r3, [pc, #52]	; (80099dc <UART_SetConfig+0x4e4>)
 80099a8:	fba3 1302 	umull	r1, r3, r3, r2
 80099ac:	095b      	lsrs	r3, r3, #5
 80099ae:	2164      	movs	r1, #100	; 0x64
 80099b0:	fb01 f303 	mul.w	r3, r1, r3
 80099b4:	1ad3      	subs	r3, r2, r3
 80099b6:	011b      	lsls	r3, r3, #4
 80099b8:	3332      	adds	r3, #50	; 0x32
 80099ba:	4a08      	ldr	r2, [pc, #32]	; (80099dc <UART_SetConfig+0x4e4>)
 80099bc:	fba2 2303 	umull	r2, r3, r2, r3
 80099c0:	095b      	lsrs	r3, r3, #5
 80099c2:	f003 020f 	and.w	r2, r3, #15
 80099c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4422      	add	r2, r4
 80099ce:	609a      	str	r2, [r3, #8]
}
 80099d0:	bf00      	nop
 80099d2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80099d6:	46bd      	mov	sp, r7
 80099d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80099dc:	51eb851f 	.word	0x51eb851f

080099e0 <__NVIC_SetPriority>:
{
 80099e0:	b480      	push	{r7}
 80099e2:	b083      	sub	sp, #12
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	4603      	mov	r3, r0
 80099e8:	6039      	str	r1, [r7, #0]
 80099ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80099ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	db0a      	blt.n	8009a0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	b2da      	uxtb	r2, r3
 80099f8:	490c      	ldr	r1, [pc, #48]	; (8009a2c <__NVIC_SetPriority+0x4c>)
 80099fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099fe:	0112      	lsls	r2, r2, #4
 8009a00:	b2d2      	uxtb	r2, r2
 8009a02:	440b      	add	r3, r1
 8009a04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009a08:	e00a      	b.n	8009a20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	b2da      	uxtb	r2, r3
 8009a0e:	4908      	ldr	r1, [pc, #32]	; (8009a30 <__NVIC_SetPriority+0x50>)
 8009a10:	79fb      	ldrb	r3, [r7, #7]
 8009a12:	f003 030f 	and.w	r3, r3, #15
 8009a16:	3b04      	subs	r3, #4
 8009a18:	0112      	lsls	r2, r2, #4
 8009a1a:	b2d2      	uxtb	r2, r2
 8009a1c:	440b      	add	r3, r1
 8009a1e:	761a      	strb	r2, [r3, #24]
}
 8009a20:	bf00      	nop
 8009a22:	370c      	adds	r7, #12
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr
 8009a2c:	e000e100 	.word	0xe000e100
 8009a30:	e000ed00 	.word	0xe000ed00

08009a34 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009a34:	b580      	push	{r7, lr}
 8009a36:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009a38:	4b05      	ldr	r3, [pc, #20]	; (8009a50 <SysTick_Handler+0x1c>)
 8009a3a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009a3c:	f001 fe38 	bl	800b6b0 <xTaskGetSchedulerState>
 8009a40:	4603      	mov	r3, r0
 8009a42:	2b01      	cmp	r3, #1
 8009a44:	d001      	beq.n	8009a4a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009a46:	f002 fd1f 	bl	800c488 <xPortSysTickHandler>
  }
}
 8009a4a:	bf00      	nop
 8009a4c:	bd80      	pop	{r7, pc}
 8009a4e:	bf00      	nop
 8009a50:	e000e010 	.word	0xe000e010

08009a54 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009a54:	b580      	push	{r7, lr}
 8009a56:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009a58:	2100      	movs	r1, #0
 8009a5a:	f06f 0004 	mvn.w	r0, #4
 8009a5e:	f7ff ffbf 	bl	80099e0 <__NVIC_SetPriority>
#endif
}
 8009a62:	bf00      	nop
 8009a64:	bd80      	pop	{r7, pc}
	...

08009a68 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009a68:	b480      	push	{r7}
 8009a6a:	b083      	sub	sp, #12
 8009a6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a6e:	f3ef 8305 	mrs	r3, IPSR
 8009a72:	603b      	str	r3, [r7, #0]
  return(result);
 8009a74:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d003      	beq.n	8009a82 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009a7a:	f06f 0305 	mvn.w	r3, #5
 8009a7e:	607b      	str	r3, [r7, #4]
 8009a80:	e00c      	b.n	8009a9c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009a82:	4b0a      	ldr	r3, [pc, #40]	; (8009aac <osKernelInitialize+0x44>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d105      	bne.n	8009a96 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009a8a:	4b08      	ldr	r3, [pc, #32]	; (8009aac <osKernelInitialize+0x44>)
 8009a8c:	2201      	movs	r2, #1
 8009a8e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009a90:	2300      	movs	r3, #0
 8009a92:	607b      	str	r3, [r7, #4]
 8009a94:	e002      	b.n	8009a9c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009a96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009a9c:	687b      	ldr	r3, [r7, #4]
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	370c      	adds	r7, #12
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa8:	4770      	bx	lr
 8009aaa:	bf00      	nop
 8009aac:	20004d60 	.word	0x20004d60

08009ab0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ab6:	f3ef 8305 	mrs	r3, IPSR
 8009aba:	603b      	str	r3, [r7, #0]
  return(result);
 8009abc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d003      	beq.n	8009aca <osKernelStart+0x1a>
    stat = osErrorISR;
 8009ac2:	f06f 0305 	mvn.w	r3, #5
 8009ac6:	607b      	str	r3, [r7, #4]
 8009ac8:	e010      	b.n	8009aec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009aca:	4b0b      	ldr	r3, [pc, #44]	; (8009af8 <osKernelStart+0x48>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	d109      	bne.n	8009ae6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009ad2:	f7ff ffbf 	bl	8009a54 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009ad6:	4b08      	ldr	r3, [pc, #32]	; (8009af8 <osKernelStart+0x48>)
 8009ad8:	2202      	movs	r2, #2
 8009ada:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009adc:	f001 f966 	bl	800adac <vTaskStartScheduler>
      stat = osOK;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	607b      	str	r3, [r7, #4]
 8009ae4:	e002      	b.n	8009aec <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009ae6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009aea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009aec:	687b      	ldr	r3, [r7, #4]
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3708      	adds	r7, #8
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
 8009af6:	bf00      	nop
 8009af8:	20004d60 	.word	0x20004d60

08009afc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b04:	f3ef 8305 	mrs	r3, IPSR
 8009b08:	60bb      	str	r3, [r7, #8]
  return(result);
 8009b0a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d003      	beq.n	8009b18 <osDelay+0x1c>
    stat = osErrorISR;
 8009b10:	f06f 0305 	mvn.w	r3, #5
 8009b14:	60fb      	str	r3, [r7, #12]
 8009b16:	e007      	b.n	8009b28 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d002      	beq.n	8009b28 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f001 f90e 	bl	800ad44 <vTaskDelay>
    }
  }

  return (stat);
 8009b28:	68fb      	ldr	r3, [r7, #12]
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3710      	adds	r7, #16
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
	...

08009b34 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009b34:	b480      	push	{r7}
 8009b36:	b085      	sub	sp, #20
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	60f8      	str	r0, [r7, #12]
 8009b3c:	60b9      	str	r1, [r7, #8]
 8009b3e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	4a07      	ldr	r2, [pc, #28]	; (8009b60 <vApplicationGetIdleTaskMemory+0x2c>)
 8009b44:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	4a06      	ldr	r2, [pc, #24]	; (8009b64 <vApplicationGetIdleTaskMemory+0x30>)
 8009b4a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2280      	movs	r2, #128	; 0x80
 8009b50:	601a      	str	r2, [r3, #0]
}
 8009b52:	bf00      	nop
 8009b54:	3714      	adds	r7, #20
 8009b56:	46bd      	mov	sp, r7
 8009b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5c:	4770      	bx	lr
 8009b5e:	bf00      	nop
 8009b60:	20004d64 	.word	0x20004d64
 8009b64:	20004e0c 	.word	0x20004e0c

08009b68 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009b68:	b480      	push	{r7}
 8009b6a:	b085      	sub	sp, #20
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	60f8      	str	r0, [r7, #12]
 8009b70:	60b9      	str	r1, [r7, #8]
 8009b72:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	4a07      	ldr	r2, [pc, #28]	; (8009b94 <vApplicationGetTimerTaskMemory+0x2c>)
 8009b78:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	4a06      	ldr	r2, [pc, #24]	; (8009b98 <vApplicationGetTimerTaskMemory+0x30>)
 8009b7e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009b86:	601a      	str	r2, [r3, #0]
}
 8009b88:	bf00      	nop
 8009b8a:	3714      	adds	r7, #20
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr
 8009b94:	2000500c 	.word	0x2000500c
 8009b98:	200050b4 	.word	0x200050b4

08009b9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b083      	sub	sp, #12
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f103 0208 	add.w	r2, r3, #8
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009bb4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f103 0208 	add.w	r2, r3, #8
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f103 0208 	add.w	r2, r3, #8
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009bd0:	bf00      	nop
 8009bd2:	370c      	adds	r7, #12
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bda:	4770      	bx	lr

08009bdc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b083      	sub	sp, #12
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2200      	movs	r2, #0
 8009be8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009bea:	bf00      	nop
 8009bec:	370c      	adds	r7, #12
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf4:	4770      	bx	lr

08009bf6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009bf6:	b480      	push	{r7}
 8009bf8:	b085      	sub	sp, #20
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	6078      	str	r0, [r7, #4]
 8009bfe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	685b      	ldr	r3, [r3, #4]
 8009c04:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	68fa      	ldr	r2, [r7, #12]
 8009c0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	689a      	ldr	r2, [r3, #8]
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	689b      	ldr	r3, [r3, #8]
 8009c18:	683a      	ldr	r2, [r7, #0]
 8009c1a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	683a      	ldr	r2, [r7, #0]
 8009c20:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	1c5a      	adds	r2, r3, #1
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	601a      	str	r2, [r3, #0]
}
 8009c32:	bf00      	nop
 8009c34:	3714      	adds	r7, #20
 8009c36:	46bd      	mov	sp, r7
 8009c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3c:	4770      	bx	lr

08009c3e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009c3e:	b480      	push	{r7}
 8009c40:	b085      	sub	sp, #20
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
 8009c46:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c54:	d103      	bne.n	8009c5e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	691b      	ldr	r3, [r3, #16]
 8009c5a:	60fb      	str	r3, [r7, #12]
 8009c5c:	e00c      	b.n	8009c78 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	3308      	adds	r3, #8
 8009c62:	60fb      	str	r3, [r7, #12]
 8009c64:	e002      	b.n	8009c6c <vListInsert+0x2e>
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	685b      	ldr	r3, [r3, #4]
 8009c6a:	60fb      	str	r3, [r7, #12]
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	685b      	ldr	r3, [r3, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	68ba      	ldr	r2, [r7, #8]
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d2f6      	bcs.n	8009c66 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	685a      	ldr	r2, [r3, #4]
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	683a      	ldr	r2, [r7, #0]
 8009c86:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	68fa      	ldr	r2, [r7, #12]
 8009c8c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	683a      	ldr	r2, [r7, #0]
 8009c92:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	687a      	ldr	r2, [r7, #4]
 8009c98:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	1c5a      	adds	r2, r3, #1
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	601a      	str	r2, [r3, #0]
}
 8009ca4:	bf00      	nop
 8009ca6:	3714      	adds	r7, #20
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr

08009cb0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b085      	sub	sp, #20
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	691b      	ldr	r3, [r3, #16]
 8009cbc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	687a      	ldr	r2, [r7, #4]
 8009cc4:	6892      	ldr	r2, [r2, #8]
 8009cc6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	689b      	ldr	r3, [r3, #8]
 8009ccc:	687a      	ldr	r2, [r7, #4]
 8009cce:	6852      	ldr	r2, [r2, #4]
 8009cd0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	687a      	ldr	r2, [r7, #4]
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	d103      	bne.n	8009ce4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	689a      	ldr	r2, [r3, #8]
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	1e5a      	subs	r2, r3, #1
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3714      	adds	r7, #20
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr

08009d04 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d10a      	bne.n	8009d2e <xQueueGenericReset+0x2a>
	__asm volatile
 8009d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d1c:	f383 8811 	msr	BASEPRI, r3
 8009d20:	f3bf 8f6f 	isb	sy
 8009d24:	f3bf 8f4f 	dsb	sy
 8009d28:	60bb      	str	r3, [r7, #8]
}
 8009d2a:	bf00      	nop
 8009d2c:	e7fe      	b.n	8009d2c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009d2e:	f002 fb19 	bl	800c364 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	681a      	ldr	r2, [r3, #0]
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d3a:	68f9      	ldr	r1, [r7, #12]
 8009d3c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009d3e:	fb01 f303 	mul.w	r3, r1, r3
 8009d42:	441a      	add	r2, r3
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681a      	ldr	r2, [r3, #0]
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681a      	ldr	r2, [r3, #0]
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d5e:	3b01      	subs	r3, #1
 8009d60:	68f9      	ldr	r1, [r7, #12]
 8009d62:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009d64:	fb01 f303 	mul.w	r3, r1, r3
 8009d68:	441a      	add	r2, r3
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	22ff      	movs	r2, #255	; 0xff
 8009d72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	22ff      	movs	r2, #255	; 0xff
 8009d7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d114      	bne.n	8009dae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	691b      	ldr	r3, [r3, #16]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d01a      	beq.n	8009dc2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	3310      	adds	r3, #16
 8009d90:	4618      	mov	r0, r3
 8009d92:	f001 faa5 	bl	800b2e0 <xTaskRemoveFromEventList>
 8009d96:	4603      	mov	r3, r0
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d012      	beq.n	8009dc2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009d9c:	4b0c      	ldr	r3, [pc, #48]	; (8009dd0 <xQueueGenericReset+0xcc>)
 8009d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009da2:	601a      	str	r2, [r3, #0]
 8009da4:	f3bf 8f4f 	dsb	sy
 8009da8:	f3bf 8f6f 	isb	sy
 8009dac:	e009      	b.n	8009dc2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	3310      	adds	r3, #16
 8009db2:	4618      	mov	r0, r3
 8009db4:	f7ff fef2 	bl	8009b9c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	3324      	adds	r3, #36	; 0x24
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f7ff feed 	bl	8009b9c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009dc2:	f002 faff 	bl	800c3c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009dc6:	2301      	movs	r3, #1
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3710      	adds	r7, #16
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}
 8009dd0:	e000ed04 	.word	0xe000ed04

08009dd4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b08e      	sub	sp, #56	; 0x38
 8009dd8:	af02      	add	r7, sp, #8
 8009dda:	60f8      	str	r0, [r7, #12]
 8009ddc:	60b9      	str	r1, [r7, #8]
 8009dde:	607a      	str	r2, [r7, #4]
 8009de0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d10a      	bne.n	8009dfe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dec:	f383 8811 	msr	BASEPRI, r3
 8009df0:	f3bf 8f6f 	isb	sy
 8009df4:	f3bf 8f4f 	dsb	sy
 8009df8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009dfa:	bf00      	nop
 8009dfc:	e7fe      	b.n	8009dfc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d10a      	bne.n	8009e1a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e08:	f383 8811 	msr	BASEPRI, r3
 8009e0c:	f3bf 8f6f 	isb	sy
 8009e10:	f3bf 8f4f 	dsb	sy
 8009e14:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009e16:	bf00      	nop
 8009e18:	e7fe      	b.n	8009e18 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d002      	beq.n	8009e26 <xQueueGenericCreateStatic+0x52>
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d001      	beq.n	8009e2a <xQueueGenericCreateStatic+0x56>
 8009e26:	2301      	movs	r3, #1
 8009e28:	e000      	b.n	8009e2c <xQueueGenericCreateStatic+0x58>
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d10a      	bne.n	8009e46 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e34:	f383 8811 	msr	BASEPRI, r3
 8009e38:	f3bf 8f6f 	isb	sy
 8009e3c:	f3bf 8f4f 	dsb	sy
 8009e40:	623b      	str	r3, [r7, #32]
}
 8009e42:	bf00      	nop
 8009e44:	e7fe      	b.n	8009e44 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d102      	bne.n	8009e52 <xQueueGenericCreateStatic+0x7e>
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d101      	bne.n	8009e56 <xQueueGenericCreateStatic+0x82>
 8009e52:	2301      	movs	r3, #1
 8009e54:	e000      	b.n	8009e58 <xQueueGenericCreateStatic+0x84>
 8009e56:	2300      	movs	r3, #0
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d10a      	bne.n	8009e72 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e60:	f383 8811 	msr	BASEPRI, r3
 8009e64:	f3bf 8f6f 	isb	sy
 8009e68:	f3bf 8f4f 	dsb	sy
 8009e6c:	61fb      	str	r3, [r7, #28]
}
 8009e6e:	bf00      	nop
 8009e70:	e7fe      	b.n	8009e70 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009e72:	2350      	movs	r3, #80	; 0x50
 8009e74:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	2b50      	cmp	r3, #80	; 0x50
 8009e7a:	d00a      	beq.n	8009e92 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e80:	f383 8811 	msr	BASEPRI, r3
 8009e84:	f3bf 8f6f 	isb	sy
 8009e88:	f3bf 8f4f 	dsb	sy
 8009e8c:	61bb      	str	r3, [r7, #24]
}
 8009e8e:	bf00      	nop
 8009e90:	e7fe      	b.n	8009e90 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009e92:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d00d      	beq.n	8009eba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009ea6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eac:	9300      	str	r3, [sp, #0]
 8009eae:	4613      	mov	r3, r2
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	68b9      	ldr	r1, [r7, #8]
 8009eb4:	68f8      	ldr	r0, [r7, #12]
 8009eb6:	f000 f83f 	bl	8009f38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3730      	adds	r7, #48	; 0x30
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}

08009ec4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b08a      	sub	sp, #40	; 0x28
 8009ec8:	af02      	add	r7, sp, #8
 8009eca:	60f8      	str	r0, [r7, #12]
 8009ecc:	60b9      	str	r1, [r7, #8]
 8009ece:	4613      	mov	r3, r2
 8009ed0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d10a      	bne.n	8009eee <xQueueGenericCreate+0x2a>
	__asm volatile
 8009ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009edc:	f383 8811 	msr	BASEPRI, r3
 8009ee0:	f3bf 8f6f 	isb	sy
 8009ee4:	f3bf 8f4f 	dsb	sy
 8009ee8:	613b      	str	r3, [r7, #16]
}
 8009eea:	bf00      	nop
 8009eec:	e7fe      	b.n	8009eec <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	68ba      	ldr	r2, [r7, #8]
 8009ef2:	fb02 f303 	mul.w	r3, r2, r3
 8009ef6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009ef8:	69fb      	ldr	r3, [r7, #28]
 8009efa:	3350      	adds	r3, #80	; 0x50
 8009efc:	4618      	mov	r0, r3
 8009efe:	f002 fb53 	bl	800c5a8 <pvPortMalloc>
 8009f02:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009f04:	69bb      	ldr	r3, [r7, #24]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d011      	beq.n	8009f2e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009f0a:	69bb      	ldr	r3, [r7, #24]
 8009f0c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	3350      	adds	r3, #80	; 0x50
 8009f12:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009f14:	69bb      	ldr	r3, [r7, #24]
 8009f16:	2200      	movs	r2, #0
 8009f18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009f1c:	79fa      	ldrb	r2, [r7, #7]
 8009f1e:	69bb      	ldr	r3, [r7, #24]
 8009f20:	9300      	str	r3, [sp, #0]
 8009f22:	4613      	mov	r3, r2
 8009f24:	697a      	ldr	r2, [r7, #20]
 8009f26:	68b9      	ldr	r1, [r7, #8]
 8009f28:	68f8      	ldr	r0, [r7, #12]
 8009f2a:	f000 f805 	bl	8009f38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009f2e:	69bb      	ldr	r3, [r7, #24]
	}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3720      	adds	r7, #32
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}

08009f38 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b084      	sub	sp, #16
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	60f8      	str	r0, [r7, #12]
 8009f40:	60b9      	str	r1, [r7, #8]
 8009f42:	607a      	str	r2, [r7, #4]
 8009f44:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d103      	bne.n	8009f54 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009f4c:	69bb      	ldr	r3, [r7, #24]
 8009f4e:	69ba      	ldr	r2, [r7, #24]
 8009f50:	601a      	str	r2, [r3, #0]
 8009f52:	e002      	b.n	8009f5a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009f54:	69bb      	ldr	r3, [r7, #24]
 8009f56:	687a      	ldr	r2, [r7, #4]
 8009f58:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009f5a:	69bb      	ldr	r3, [r7, #24]
 8009f5c:	68fa      	ldr	r2, [r7, #12]
 8009f5e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009f60:	69bb      	ldr	r3, [r7, #24]
 8009f62:	68ba      	ldr	r2, [r7, #8]
 8009f64:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009f66:	2101      	movs	r1, #1
 8009f68:	69b8      	ldr	r0, [r7, #24]
 8009f6a:	f7ff fecb 	bl	8009d04 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009f6e:	69bb      	ldr	r3, [r7, #24]
 8009f70:	78fa      	ldrb	r2, [r7, #3]
 8009f72:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009f76:	bf00      	nop
 8009f78:	3710      	adds	r7, #16
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}
	...

08009f80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b08e      	sub	sp, #56	; 0x38
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	60f8      	str	r0, [r7, #12]
 8009f88:	60b9      	str	r1, [r7, #8]
 8009f8a:	607a      	str	r2, [r7, #4]
 8009f8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d10a      	bne.n	8009fb2 <xQueueGenericSend+0x32>
	__asm volatile
 8009f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa0:	f383 8811 	msr	BASEPRI, r3
 8009fa4:	f3bf 8f6f 	isb	sy
 8009fa8:	f3bf 8f4f 	dsb	sy
 8009fac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009fae:	bf00      	nop
 8009fb0:	e7fe      	b.n	8009fb0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d103      	bne.n	8009fc0 <xQueueGenericSend+0x40>
 8009fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d101      	bne.n	8009fc4 <xQueueGenericSend+0x44>
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	e000      	b.n	8009fc6 <xQueueGenericSend+0x46>
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d10a      	bne.n	8009fe0 <xQueueGenericSend+0x60>
	__asm volatile
 8009fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fce:	f383 8811 	msr	BASEPRI, r3
 8009fd2:	f3bf 8f6f 	isb	sy
 8009fd6:	f3bf 8f4f 	dsb	sy
 8009fda:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009fdc:	bf00      	nop
 8009fde:	e7fe      	b.n	8009fde <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	2b02      	cmp	r3, #2
 8009fe4:	d103      	bne.n	8009fee <xQueueGenericSend+0x6e>
 8009fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	d101      	bne.n	8009ff2 <xQueueGenericSend+0x72>
 8009fee:	2301      	movs	r3, #1
 8009ff0:	e000      	b.n	8009ff4 <xQueueGenericSend+0x74>
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d10a      	bne.n	800a00e <xQueueGenericSend+0x8e>
	__asm volatile
 8009ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ffc:	f383 8811 	msr	BASEPRI, r3
 800a000:	f3bf 8f6f 	isb	sy
 800a004:	f3bf 8f4f 	dsb	sy
 800a008:	623b      	str	r3, [r7, #32]
}
 800a00a:	bf00      	nop
 800a00c:	e7fe      	b.n	800a00c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a00e:	f001 fb4f 	bl	800b6b0 <xTaskGetSchedulerState>
 800a012:	4603      	mov	r3, r0
 800a014:	2b00      	cmp	r3, #0
 800a016:	d102      	bne.n	800a01e <xQueueGenericSend+0x9e>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d101      	bne.n	800a022 <xQueueGenericSend+0xa2>
 800a01e:	2301      	movs	r3, #1
 800a020:	e000      	b.n	800a024 <xQueueGenericSend+0xa4>
 800a022:	2300      	movs	r3, #0
 800a024:	2b00      	cmp	r3, #0
 800a026:	d10a      	bne.n	800a03e <xQueueGenericSend+0xbe>
	__asm volatile
 800a028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a02c:	f383 8811 	msr	BASEPRI, r3
 800a030:	f3bf 8f6f 	isb	sy
 800a034:	f3bf 8f4f 	dsb	sy
 800a038:	61fb      	str	r3, [r7, #28]
}
 800a03a:	bf00      	nop
 800a03c:	e7fe      	b.n	800a03c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a03e:	f002 f991 	bl	800c364 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a044:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d302      	bcc.n	800a054 <xQueueGenericSend+0xd4>
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	2b02      	cmp	r3, #2
 800a052:	d129      	bne.n	800a0a8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a054:	683a      	ldr	r2, [r7, #0]
 800a056:	68b9      	ldr	r1, [r7, #8]
 800a058:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a05a:	f000 fb4d 	bl	800a6f8 <prvCopyDataToQueue>
 800a05e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a064:	2b00      	cmp	r3, #0
 800a066:	d010      	beq.n	800a08a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a06a:	3324      	adds	r3, #36	; 0x24
 800a06c:	4618      	mov	r0, r3
 800a06e:	f001 f937 	bl	800b2e0 <xTaskRemoveFromEventList>
 800a072:	4603      	mov	r3, r0
 800a074:	2b00      	cmp	r3, #0
 800a076:	d013      	beq.n	800a0a0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a078:	4b3f      	ldr	r3, [pc, #252]	; (800a178 <xQueueGenericSend+0x1f8>)
 800a07a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a07e:	601a      	str	r2, [r3, #0]
 800a080:	f3bf 8f4f 	dsb	sy
 800a084:	f3bf 8f6f 	isb	sy
 800a088:	e00a      	b.n	800a0a0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d007      	beq.n	800a0a0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a090:	4b39      	ldr	r3, [pc, #228]	; (800a178 <xQueueGenericSend+0x1f8>)
 800a092:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a096:	601a      	str	r2, [r3, #0]
 800a098:	f3bf 8f4f 	dsb	sy
 800a09c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a0a0:	f002 f990 	bl	800c3c4 <vPortExitCritical>
				return pdPASS;
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	e063      	b.n	800a170 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d103      	bne.n	800a0b6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a0ae:	f002 f989 	bl	800c3c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	e05c      	b.n	800a170 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a0b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d106      	bne.n	800a0ca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a0bc:	f107 0314 	add.w	r3, r7, #20
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f001 f997 	bl	800b3f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a0ca:	f002 f97b 	bl	800c3c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a0ce:	f000 fedd 	bl	800ae8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a0d2:	f002 f947 	bl	800c364 <vPortEnterCritical>
 800a0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a0dc:	b25b      	sxtb	r3, r3
 800a0de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a0e2:	d103      	bne.n	800a0ec <xQueueGenericSend+0x16c>
 800a0e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a0ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a0f2:	b25b      	sxtb	r3, r3
 800a0f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a0f8:	d103      	bne.n	800a102 <xQueueGenericSend+0x182>
 800a0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a102:	f002 f95f 	bl	800c3c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a106:	1d3a      	adds	r2, r7, #4
 800a108:	f107 0314 	add.w	r3, r7, #20
 800a10c:	4611      	mov	r1, r2
 800a10e:	4618      	mov	r0, r3
 800a110:	f001 f986 	bl	800b420 <xTaskCheckForTimeOut>
 800a114:	4603      	mov	r3, r0
 800a116:	2b00      	cmp	r3, #0
 800a118:	d124      	bne.n	800a164 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a11a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a11c:	f000 fbe4 	bl	800a8e8 <prvIsQueueFull>
 800a120:	4603      	mov	r3, r0
 800a122:	2b00      	cmp	r3, #0
 800a124:	d018      	beq.n	800a158 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a128:	3310      	adds	r3, #16
 800a12a:	687a      	ldr	r2, [r7, #4]
 800a12c:	4611      	mov	r1, r2
 800a12e:	4618      	mov	r0, r3
 800a130:	f001 f886 	bl	800b240 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a134:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a136:	f000 fb6f 	bl	800a818 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a13a:	f000 feb5 	bl	800aea8 <xTaskResumeAll>
 800a13e:	4603      	mov	r3, r0
 800a140:	2b00      	cmp	r3, #0
 800a142:	f47f af7c 	bne.w	800a03e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a146:	4b0c      	ldr	r3, [pc, #48]	; (800a178 <xQueueGenericSend+0x1f8>)
 800a148:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a14c:	601a      	str	r2, [r3, #0]
 800a14e:	f3bf 8f4f 	dsb	sy
 800a152:	f3bf 8f6f 	isb	sy
 800a156:	e772      	b.n	800a03e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a158:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a15a:	f000 fb5d 	bl	800a818 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a15e:	f000 fea3 	bl	800aea8 <xTaskResumeAll>
 800a162:	e76c      	b.n	800a03e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a164:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a166:	f000 fb57 	bl	800a818 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a16a:	f000 fe9d 	bl	800aea8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a16e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a170:	4618      	mov	r0, r3
 800a172:	3738      	adds	r7, #56	; 0x38
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}
 800a178:	e000ed04 	.word	0xe000ed04

0800a17c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b090      	sub	sp, #64	; 0x40
 800a180:	af00      	add	r7, sp, #0
 800a182:	60f8      	str	r0, [r7, #12]
 800a184:	60b9      	str	r1, [r7, #8]
 800a186:	607a      	str	r2, [r7, #4]
 800a188:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a190:	2b00      	cmp	r3, #0
 800a192:	d10a      	bne.n	800a1aa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a198:	f383 8811 	msr	BASEPRI, r3
 800a19c:	f3bf 8f6f 	isb	sy
 800a1a0:	f3bf 8f4f 	dsb	sy
 800a1a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a1a6:	bf00      	nop
 800a1a8:	e7fe      	b.n	800a1a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d103      	bne.n	800a1b8 <xQueueGenericSendFromISR+0x3c>
 800a1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d101      	bne.n	800a1bc <xQueueGenericSendFromISR+0x40>
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	e000      	b.n	800a1be <xQueueGenericSendFromISR+0x42>
 800a1bc:	2300      	movs	r3, #0
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d10a      	bne.n	800a1d8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c6:	f383 8811 	msr	BASEPRI, r3
 800a1ca:	f3bf 8f6f 	isb	sy
 800a1ce:	f3bf 8f4f 	dsb	sy
 800a1d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a1d4:	bf00      	nop
 800a1d6:	e7fe      	b.n	800a1d6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	2b02      	cmp	r3, #2
 800a1dc:	d103      	bne.n	800a1e6 <xQueueGenericSendFromISR+0x6a>
 800a1de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1e2:	2b01      	cmp	r3, #1
 800a1e4:	d101      	bne.n	800a1ea <xQueueGenericSendFromISR+0x6e>
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	e000      	b.n	800a1ec <xQueueGenericSendFromISR+0x70>
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d10a      	bne.n	800a206 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f4:	f383 8811 	msr	BASEPRI, r3
 800a1f8:	f3bf 8f6f 	isb	sy
 800a1fc:	f3bf 8f4f 	dsb	sy
 800a200:	623b      	str	r3, [r7, #32]
}
 800a202:	bf00      	nop
 800a204:	e7fe      	b.n	800a204 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a206:	f002 f98f 	bl	800c528 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a20a:	f3ef 8211 	mrs	r2, BASEPRI
 800a20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a212:	f383 8811 	msr	BASEPRI, r3
 800a216:	f3bf 8f6f 	isb	sy
 800a21a:	f3bf 8f4f 	dsb	sy
 800a21e:	61fa      	str	r2, [r7, #28]
 800a220:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a222:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a224:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a228:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a22a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a22c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a22e:	429a      	cmp	r2, r3
 800a230:	d302      	bcc.n	800a238 <xQueueGenericSendFromISR+0xbc>
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	2b02      	cmp	r3, #2
 800a236:	d12f      	bne.n	800a298 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a23a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a23e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a246:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a248:	683a      	ldr	r2, [r7, #0]
 800a24a:	68b9      	ldr	r1, [r7, #8]
 800a24c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a24e:	f000 fa53 	bl	800a6f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a252:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a256:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a25a:	d112      	bne.n	800a282 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a25e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a260:	2b00      	cmp	r3, #0
 800a262:	d016      	beq.n	800a292 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a266:	3324      	adds	r3, #36	; 0x24
 800a268:	4618      	mov	r0, r3
 800a26a:	f001 f839 	bl	800b2e0 <xTaskRemoveFromEventList>
 800a26e:	4603      	mov	r3, r0
 800a270:	2b00      	cmp	r3, #0
 800a272:	d00e      	beq.n	800a292 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d00b      	beq.n	800a292 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2201      	movs	r2, #1
 800a27e:	601a      	str	r2, [r3, #0]
 800a280:	e007      	b.n	800a292 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a282:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a286:	3301      	adds	r3, #1
 800a288:	b2db      	uxtb	r3, r3
 800a28a:	b25a      	sxtb	r2, r3
 800a28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a28e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a292:	2301      	movs	r3, #1
 800a294:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a296:	e001      	b.n	800a29c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a298:	2300      	movs	r3, #0
 800a29a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a29c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a29e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a2a6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a2a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3740      	adds	r7, #64	; 0x40
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}
	...

0800a2b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b08c      	sub	sp, #48	; 0x30
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	60f8      	str	r0, [r7, #12]
 800a2bc:	60b9      	str	r1, [r7, #8]
 800a2be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d10a      	bne.n	800a2e4 <xQueueReceive+0x30>
	__asm volatile
 800a2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d2:	f383 8811 	msr	BASEPRI, r3
 800a2d6:	f3bf 8f6f 	isb	sy
 800a2da:	f3bf 8f4f 	dsb	sy
 800a2de:	623b      	str	r3, [r7, #32]
}
 800a2e0:	bf00      	nop
 800a2e2:	e7fe      	b.n	800a2e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d103      	bne.n	800a2f2 <xQueueReceive+0x3e>
 800a2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d101      	bne.n	800a2f6 <xQueueReceive+0x42>
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	e000      	b.n	800a2f8 <xQueueReceive+0x44>
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d10a      	bne.n	800a312 <xQueueReceive+0x5e>
	__asm volatile
 800a2fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a300:	f383 8811 	msr	BASEPRI, r3
 800a304:	f3bf 8f6f 	isb	sy
 800a308:	f3bf 8f4f 	dsb	sy
 800a30c:	61fb      	str	r3, [r7, #28]
}
 800a30e:	bf00      	nop
 800a310:	e7fe      	b.n	800a310 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a312:	f001 f9cd 	bl	800b6b0 <xTaskGetSchedulerState>
 800a316:	4603      	mov	r3, r0
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d102      	bne.n	800a322 <xQueueReceive+0x6e>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d101      	bne.n	800a326 <xQueueReceive+0x72>
 800a322:	2301      	movs	r3, #1
 800a324:	e000      	b.n	800a328 <xQueueReceive+0x74>
 800a326:	2300      	movs	r3, #0
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d10a      	bne.n	800a342 <xQueueReceive+0x8e>
	__asm volatile
 800a32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a330:	f383 8811 	msr	BASEPRI, r3
 800a334:	f3bf 8f6f 	isb	sy
 800a338:	f3bf 8f4f 	dsb	sy
 800a33c:	61bb      	str	r3, [r7, #24]
}
 800a33e:	bf00      	nop
 800a340:	e7fe      	b.n	800a340 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a342:	f002 f80f 	bl	800c364 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a34a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d01f      	beq.n	800a392 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a352:	68b9      	ldr	r1, [r7, #8]
 800a354:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a356:	f000 fa39 	bl	800a7cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a35c:	1e5a      	subs	r2, r3, #1
 800a35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a360:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a364:	691b      	ldr	r3, [r3, #16]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d00f      	beq.n	800a38a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a36c:	3310      	adds	r3, #16
 800a36e:	4618      	mov	r0, r3
 800a370:	f000 ffb6 	bl	800b2e0 <xTaskRemoveFromEventList>
 800a374:	4603      	mov	r3, r0
 800a376:	2b00      	cmp	r3, #0
 800a378:	d007      	beq.n	800a38a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a37a:	4b3d      	ldr	r3, [pc, #244]	; (800a470 <xQueueReceive+0x1bc>)
 800a37c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a380:	601a      	str	r2, [r3, #0]
 800a382:	f3bf 8f4f 	dsb	sy
 800a386:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a38a:	f002 f81b 	bl	800c3c4 <vPortExitCritical>
				return pdPASS;
 800a38e:	2301      	movs	r3, #1
 800a390:	e069      	b.n	800a466 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d103      	bne.n	800a3a0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a398:	f002 f814 	bl	800c3c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a39c:	2300      	movs	r3, #0
 800a39e:	e062      	b.n	800a466 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d106      	bne.n	800a3b4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a3a6:	f107 0310 	add.w	r3, r7, #16
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f001 f822 	bl	800b3f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a3b4:	f002 f806 	bl	800c3c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a3b8:	f000 fd68 	bl	800ae8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a3bc:	f001 ffd2 	bl	800c364 <vPortEnterCritical>
 800a3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a3c6:	b25b      	sxtb	r3, r3
 800a3c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3cc:	d103      	bne.n	800a3d6 <xQueueReceive+0x122>
 800a3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3dc:	b25b      	sxtb	r3, r3
 800a3de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3e2:	d103      	bne.n	800a3ec <xQueueReceive+0x138>
 800a3e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a3ec:	f001 ffea 	bl	800c3c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a3f0:	1d3a      	adds	r2, r7, #4
 800a3f2:	f107 0310 	add.w	r3, r7, #16
 800a3f6:	4611      	mov	r1, r2
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f001 f811 	bl	800b420 <xTaskCheckForTimeOut>
 800a3fe:	4603      	mov	r3, r0
 800a400:	2b00      	cmp	r3, #0
 800a402:	d123      	bne.n	800a44c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a404:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a406:	f000 fa59 	bl	800a8bc <prvIsQueueEmpty>
 800a40a:	4603      	mov	r3, r0
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d017      	beq.n	800a440 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a412:	3324      	adds	r3, #36	; 0x24
 800a414:	687a      	ldr	r2, [r7, #4]
 800a416:	4611      	mov	r1, r2
 800a418:	4618      	mov	r0, r3
 800a41a:	f000 ff11 	bl	800b240 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a41e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a420:	f000 f9fa 	bl	800a818 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a424:	f000 fd40 	bl	800aea8 <xTaskResumeAll>
 800a428:	4603      	mov	r3, r0
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d189      	bne.n	800a342 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a42e:	4b10      	ldr	r3, [pc, #64]	; (800a470 <xQueueReceive+0x1bc>)
 800a430:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a434:	601a      	str	r2, [r3, #0]
 800a436:	f3bf 8f4f 	dsb	sy
 800a43a:	f3bf 8f6f 	isb	sy
 800a43e:	e780      	b.n	800a342 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a440:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a442:	f000 f9e9 	bl	800a818 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a446:	f000 fd2f 	bl	800aea8 <xTaskResumeAll>
 800a44a:	e77a      	b.n	800a342 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a44c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a44e:	f000 f9e3 	bl	800a818 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a452:	f000 fd29 	bl	800aea8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a456:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a458:	f000 fa30 	bl	800a8bc <prvIsQueueEmpty>
 800a45c:	4603      	mov	r3, r0
 800a45e:	2b00      	cmp	r3, #0
 800a460:	f43f af6f 	beq.w	800a342 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a464:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a466:	4618      	mov	r0, r3
 800a468:	3730      	adds	r7, #48	; 0x30
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}
 800a46e:	bf00      	nop
 800a470:	e000ed04 	.word	0xe000ed04

0800a474 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b08e      	sub	sp, #56	; 0x38
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a47e:	2300      	movs	r3, #0
 800a480:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a486:	2300      	movs	r3, #0
 800a488:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a48a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d10a      	bne.n	800a4a6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a494:	f383 8811 	msr	BASEPRI, r3
 800a498:	f3bf 8f6f 	isb	sy
 800a49c:	f3bf 8f4f 	dsb	sy
 800a4a0:	623b      	str	r3, [r7, #32]
}
 800a4a2:	bf00      	nop
 800a4a4:	e7fe      	b.n	800a4a4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d00a      	beq.n	800a4c4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b2:	f383 8811 	msr	BASEPRI, r3
 800a4b6:	f3bf 8f6f 	isb	sy
 800a4ba:	f3bf 8f4f 	dsb	sy
 800a4be:	61fb      	str	r3, [r7, #28]
}
 800a4c0:	bf00      	nop
 800a4c2:	e7fe      	b.n	800a4c2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a4c4:	f001 f8f4 	bl	800b6b0 <xTaskGetSchedulerState>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d102      	bne.n	800a4d4 <xQueueSemaphoreTake+0x60>
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d101      	bne.n	800a4d8 <xQueueSemaphoreTake+0x64>
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	e000      	b.n	800a4da <xQueueSemaphoreTake+0x66>
 800a4d8:	2300      	movs	r3, #0
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d10a      	bne.n	800a4f4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e2:	f383 8811 	msr	BASEPRI, r3
 800a4e6:	f3bf 8f6f 	isb	sy
 800a4ea:	f3bf 8f4f 	dsb	sy
 800a4ee:	61bb      	str	r3, [r7, #24]
}
 800a4f0:	bf00      	nop
 800a4f2:	e7fe      	b.n	800a4f2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a4f4:	f001 ff36 	bl	800c364 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a4f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4fc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a500:	2b00      	cmp	r3, #0
 800a502:	d024      	beq.n	800a54e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a506:	1e5a      	subs	r2, r3, #1
 800a508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a50a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a50c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d104      	bne.n	800a51e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a514:	f001 fa42 	bl	800b99c <pvTaskIncrementMutexHeldCount>
 800a518:	4602      	mov	r2, r0
 800a51a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a51c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a51e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a520:	691b      	ldr	r3, [r3, #16]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d00f      	beq.n	800a546 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a528:	3310      	adds	r3, #16
 800a52a:	4618      	mov	r0, r3
 800a52c:	f000 fed8 	bl	800b2e0 <xTaskRemoveFromEventList>
 800a530:	4603      	mov	r3, r0
 800a532:	2b00      	cmp	r3, #0
 800a534:	d007      	beq.n	800a546 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a536:	4b54      	ldr	r3, [pc, #336]	; (800a688 <xQueueSemaphoreTake+0x214>)
 800a538:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a53c:	601a      	str	r2, [r3, #0]
 800a53e:	f3bf 8f4f 	dsb	sy
 800a542:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a546:	f001 ff3d 	bl	800c3c4 <vPortExitCritical>
				return pdPASS;
 800a54a:	2301      	movs	r3, #1
 800a54c:	e097      	b.n	800a67e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d111      	bne.n	800a578 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a556:	2b00      	cmp	r3, #0
 800a558:	d00a      	beq.n	800a570 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a55a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a55e:	f383 8811 	msr	BASEPRI, r3
 800a562:	f3bf 8f6f 	isb	sy
 800a566:	f3bf 8f4f 	dsb	sy
 800a56a:	617b      	str	r3, [r7, #20]
}
 800a56c:	bf00      	nop
 800a56e:	e7fe      	b.n	800a56e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a570:	f001 ff28 	bl	800c3c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a574:	2300      	movs	r3, #0
 800a576:	e082      	b.n	800a67e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d106      	bne.n	800a58c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a57e:	f107 030c 	add.w	r3, r7, #12
 800a582:	4618      	mov	r0, r3
 800a584:	f000 ff36 	bl	800b3f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a588:	2301      	movs	r3, #1
 800a58a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a58c:	f001 ff1a 	bl	800c3c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a590:	f000 fc7c 	bl	800ae8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a594:	f001 fee6 	bl	800c364 <vPortEnterCritical>
 800a598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a59a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a59e:	b25b      	sxtb	r3, r3
 800a5a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5a4:	d103      	bne.n	800a5ae <xQueueSemaphoreTake+0x13a>
 800a5a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a5b4:	b25b      	sxtb	r3, r3
 800a5b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5ba:	d103      	bne.n	800a5c4 <xQueueSemaphoreTake+0x150>
 800a5bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5be:	2200      	movs	r2, #0
 800a5c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a5c4:	f001 fefe 	bl	800c3c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a5c8:	463a      	mov	r2, r7
 800a5ca:	f107 030c 	add.w	r3, r7, #12
 800a5ce:	4611      	mov	r1, r2
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f000 ff25 	bl	800b420 <xTaskCheckForTimeOut>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d132      	bne.n	800a642 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a5dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a5de:	f000 f96d 	bl	800a8bc <prvIsQueueEmpty>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d026      	beq.n	800a636 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d109      	bne.n	800a604 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a5f0:	f001 feb8 	bl	800c364 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5f6:	689b      	ldr	r3, [r3, #8]
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f001 f877 	bl	800b6ec <xTaskPriorityInherit>
 800a5fe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a600:	f001 fee0 	bl	800c3c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a606:	3324      	adds	r3, #36	; 0x24
 800a608:	683a      	ldr	r2, [r7, #0]
 800a60a:	4611      	mov	r1, r2
 800a60c:	4618      	mov	r0, r3
 800a60e:	f000 fe17 	bl	800b240 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a612:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a614:	f000 f900 	bl	800a818 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a618:	f000 fc46 	bl	800aea8 <xTaskResumeAll>
 800a61c:	4603      	mov	r3, r0
 800a61e:	2b00      	cmp	r3, #0
 800a620:	f47f af68 	bne.w	800a4f4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a624:	4b18      	ldr	r3, [pc, #96]	; (800a688 <xQueueSemaphoreTake+0x214>)
 800a626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a62a:	601a      	str	r2, [r3, #0]
 800a62c:	f3bf 8f4f 	dsb	sy
 800a630:	f3bf 8f6f 	isb	sy
 800a634:	e75e      	b.n	800a4f4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a636:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a638:	f000 f8ee 	bl	800a818 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a63c:	f000 fc34 	bl	800aea8 <xTaskResumeAll>
 800a640:	e758      	b.n	800a4f4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a642:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a644:	f000 f8e8 	bl	800a818 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a648:	f000 fc2e 	bl	800aea8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a64c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a64e:	f000 f935 	bl	800a8bc <prvIsQueueEmpty>
 800a652:	4603      	mov	r3, r0
 800a654:	2b00      	cmp	r3, #0
 800a656:	f43f af4d 	beq.w	800a4f4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d00d      	beq.n	800a67c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a660:	f001 fe80 	bl	800c364 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a664:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a666:	f000 f82f 	bl	800a6c8 <prvGetDisinheritPriorityAfterTimeout>
 800a66a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a66e:	689b      	ldr	r3, [r3, #8]
 800a670:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a672:	4618      	mov	r0, r3
 800a674:	f001 f910 	bl	800b898 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a678:	f001 fea4 	bl	800c3c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a67c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3738      	adds	r7, #56	; 0x38
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}
 800a686:	bf00      	nop
 800a688:	e000ed04 	.word	0xe000ed04

0800a68c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b084      	sub	sp, #16
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d10a      	bne.n	800a6b0 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800a69a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a69e:	f383 8811 	msr	BASEPRI, r3
 800a6a2:	f3bf 8f6f 	isb	sy
 800a6a6:	f3bf 8f4f 	dsb	sy
 800a6aa:	60bb      	str	r3, [r7, #8]
}
 800a6ac:	bf00      	nop
 800a6ae:	e7fe      	b.n	800a6ae <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800a6b0:	f001 fe58 	bl	800c364 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6b8:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800a6ba:	f001 fe83 	bl	800c3c4 <vPortExitCritical>

	return uxReturn;
 800a6be:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3710      	adds	r7, #16
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}

0800a6c8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b085      	sub	sp, #20
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d006      	beq.n	800a6e6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a6e2:	60fb      	str	r3, [r7, #12]
 800a6e4:	e001      	b.n	800a6ea <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
	}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3714      	adds	r7, #20
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f6:	4770      	bx	lr

0800a6f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b086      	sub	sp, #24
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	60f8      	str	r0, [r7, #12]
 800a700:	60b9      	str	r1, [r7, #8]
 800a702:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a704:	2300      	movs	r3, #0
 800a706:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a70c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a712:	2b00      	cmp	r3, #0
 800a714:	d10d      	bne.n	800a732 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d14d      	bne.n	800a7ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	689b      	ldr	r3, [r3, #8]
 800a722:	4618      	mov	r0, r3
 800a724:	f001 f84a 	bl	800b7bc <xTaskPriorityDisinherit>
 800a728:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	2200      	movs	r2, #0
 800a72e:	609a      	str	r2, [r3, #8]
 800a730:	e043      	b.n	800a7ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d119      	bne.n	800a76c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	6858      	ldr	r0, [r3, #4]
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a740:	461a      	mov	r2, r3
 800a742:	68b9      	ldr	r1, [r7, #8]
 800a744:	f00e f883 	bl	801884e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	685a      	ldr	r2, [r3, #4]
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a750:	441a      	add	r2, r3
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	685a      	ldr	r2, [r3, #4]
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	689b      	ldr	r3, [r3, #8]
 800a75e:	429a      	cmp	r2, r3
 800a760:	d32b      	bcc.n	800a7ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681a      	ldr	r2, [r3, #0]
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	605a      	str	r2, [r3, #4]
 800a76a:	e026      	b.n	800a7ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	68d8      	ldr	r0, [r3, #12]
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a774:	461a      	mov	r2, r3
 800a776:	68b9      	ldr	r1, [r7, #8]
 800a778:	f00e f869 	bl	801884e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	68da      	ldr	r2, [r3, #12]
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a784:	425b      	negs	r3, r3
 800a786:	441a      	add	r2, r3
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	68da      	ldr	r2, [r3, #12]
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	429a      	cmp	r2, r3
 800a796:	d207      	bcs.n	800a7a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	689a      	ldr	r2, [r3, #8]
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7a0:	425b      	negs	r3, r3
 800a7a2:	441a      	add	r2, r3
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2b02      	cmp	r3, #2
 800a7ac:	d105      	bne.n	800a7ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d002      	beq.n	800a7ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	3b01      	subs	r3, #1
 800a7b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	1c5a      	adds	r2, r3, #1
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a7c2:	697b      	ldr	r3, [r7, #20]
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3718      	adds	r7, #24
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}

0800a7cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b082      	sub	sp, #8
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
 800a7d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d018      	beq.n	800a810 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	68da      	ldr	r2, [r3, #12]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7e6:	441a      	add	r2, r3
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	68da      	ldr	r2, [r3, #12]
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	689b      	ldr	r3, [r3, #8]
 800a7f4:	429a      	cmp	r2, r3
 800a7f6:	d303      	bcc.n	800a800 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681a      	ldr	r2, [r3, #0]
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	68d9      	ldr	r1, [r3, #12]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a808:	461a      	mov	r2, r3
 800a80a:	6838      	ldr	r0, [r7, #0]
 800a80c:	f00e f81f 	bl	801884e <memcpy>
	}
}
 800a810:	bf00      	nop
 800a812:	3708      	adds	r7, #8
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}

0800a818 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b084      	sub	sp, #16
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a820:	f001 fda0 	bl	800c364 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a82a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a82c:	e011      	b.n	800a852 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a832:	2b00      	cmp	r3, #0
 800a834:	d012      	beq.n	800a85c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	3324      	adds	r3, #36	; 0x24
 800a83a:	4618      	mov	r0, r3
 800a83c:	f000 fd50 	bl	800b2e0 <xTaskRemoveFromEventList>
 800a840:	4603      	mov	r3, r0
 800a842:	2b00      	cmp	r3, #0
 800a844:	d001      	beq.n	800a84a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a846:	f000 fe4d 	bl	800b4e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a84a:	7bfb      	ldrb	r3, [r7, #15]
 800a84c:	3b01      	subs	r3, #1
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a856:	2b00      	cmp	r3, #0
 800a858:	dce9      	bgt.n	800a82e <prvUnlockQueue+0x16>
 800a85a:	e000      	b.n	800a85e <prvUnlockQueue+0x46>
					break;
 800a85c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	22ff      	movs	r2, #255	; 0xff
 800a862:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a866:	f001 fdad 	bl	800c3c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a86a:	f001 fd7b 	bl	800c364 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a874:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a876:	e011      	b.n	800a89c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	691b      	ldr	r3, [r3, #16]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d012      	beq.n	800a8a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	3310      	adds	r3, #16
 800a884:	4618      	mov	r0, r3
 800a886:	f000 fd2b 	bl	800b2e0 <xTaskRemoveFromEventList>
 800a88a:	4603      	mov	r3, r0
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d001      	beq.n	800a894 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a890:	f000 fe28 	bl	800b4e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a894:	7bbb      	ldrb	r3, [r7, #14]
 800a896:	3b01      	subs	r3, #1
 800a898:	b2db      	uxtb	r3, r3
 800a89a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a89c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	dce9      	bgt.n	800a878 <prvUnlockQueue+0x60>
 800a8a4:	e000      	b.n	800a8a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a8a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	22ff      	movs	r2, #255	; 0xff
 800a8ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a8b0:	f001 fd88 	bl	800c3c4 <vPortExitCritical>
}
 800a8b4:	bf00      	nop
 800a8b6:	3710      	adds	r7, #16
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}

0800a8bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b084      	sub	sp, #16
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a8c4:	f001 fd4e 	bl	800c364 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d102      	bne.n	800a8d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	60fb      	str	r3, [r7, #12]
 800a8d4:	e001      	b.n	800a8da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a8da:	f001 fd73 	bl	800c3c4 <vPortExitCritical>

	return xReturn;
 800a8de:	68fb      	ldr	r3, [r7, #12]
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3710      	adds	r7, #16
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}

0800a8e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b084      	sub	sp, #16
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a8f0:	f001 fd38 	bl	800c364 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	d102      	bne.n	800a906 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a900:	2301      	movs	r3, #1
 800a902:	60fb      	str	r3, [r7, #12]
 800a904:	e001      	b.n	800a90a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a906:	2300      	movs	r3, #0
 800a908:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a90a:	f001 fd5b 	bl	800c3c4 <vPortExitCritical>

	return xReturn;
 800a90e:	68fb      	ldr	r3, [r7, #12]
}
 800a910:	4618      	mov	r0, r3
 800a912:	3710      	adds	r7, #16
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}

0800a918 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a918:	b480      	push	{r7}
 800a91a:	b085      	sub	sp, #20
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
 800a920:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a922:	2300      	movs	r3, #0
 800a924:	60fb      	str	r3, [r7, #12]
 800a926:	e014      	b.n	800a952 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a928:	4a0f      	ldr	r2, [pc, #60]	; (800a968 <vQueueAddToRegistry+0x50>)
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d10b      	bne.n	800a94c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a934:	490c      	ldr	r1, [pc, #48]	; (800a968 <vQueueAddToRegistry+0x50>)
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	683a      	ldr	r2, [r7, #0]
 800a93a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a93e:	4a0a      	ldr	r2, [pc, #40]	; (800a968 <vQueueAddToRegistry+0x50>)
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	00db      	lsls	r3, r3, #3
 800a944:	4413      	add	r3, r2
 800a946:	687a      	ldr	r2, [r7, #4]
 800a948:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a94a:	e006      	b.n	800a95a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	3301      	adds	r3, #1
 800a950:	60fb      	str	r3, [r7, #12]
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	2b07      	cmp	r3, #7
 800a956:	d9e7      	bls.n	800a928 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a958:	bf00      	nop
 800a95a:	bf00      	nop
 800a95c:	3714      	adds	r7, #20
 800a95e:	46bd      	mov	sp, r7
 800a960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a964:	4770      	bx	lr
 800a966:	bf00      	nop
 800a968:	200054b4 	.word	0x200054b4

0800a96c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b086      	sub	sp, #24
 800a970:	af00      	add	r7, sp, #0
 800a972:	60f8      	str	r0, [r7, #12]
 800a974:	60b9      	str	r1, [r7, #8]
 800a976:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a97c:	f001 fcf2 	bl	800c364 <vPortEnterCritical>
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a986:	b25b      	sxtb	r3, r3
 800a988:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a98c:	d103      	bne.n	800a996 <vQueueWaitForMessageRestricted+0x2a>
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	2200      	movs	r2, #0
 800a992:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a99c:	b25b      	sxtb	r3, r3
 800a99e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9a2:	d103      	bne.n	800a9ac <vQueueWaitForMessageRestricted+0x40>
 800a9a4:	697b      	ldr	r3, [r7, #20]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a9ac:	f001 fd0a 	bl	800c3c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d106      	bne.n	800a9c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	3324      	adds	r3, #36	; 0x24
 800a9bc:	687a      	ldr	r2, [r7, #4]
 800a9be:	68b9      	ldr	r1, [r7, #8]
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f000 fc61 	bl	800b288 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a9c6:	6978      	ldr	r0, [r7, #20]
 800a9c8:	f7ff ff26 	bl	800a818 <prvUnlockQueue>
	}
 800a9cc:	bf00      	nop
 800a9ce:	3718      	adds	r7, #24
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}

0800a9d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b08e      	sub	sp, #56	; 0x38
 800a9d8:	af04      	add	r7, sp, #16
 800a9da:	60f8      	str	r0, [r7, #12]
 800a9dc:	60b9      	str	r1, [r7, #8]
 800a9de:	607a      	str	r2, [r7, #4]
 800a9e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a9e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d10a      	bne.n	800a9fe <xTaskCreateStatic+0x2a>
	__asm volatile
 800a9e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ec:	f383 8811 	msr	BASEPRI, r3
 800a9f0:	f3bf 8f6f 	isb	sy
 800a9f4:	f3bf 8f4f 	dsb	sy
 800a9f8:	623b      	str	r3, [r7, #32]
}
 800a9fa:	bf00      	nop
 800a9fc:	e7fe      	b.n	800a9fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a9fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d10a      	bne.n	800aa1a <xTaskCreateStatic+0x46>
	__asm volatile
 800aa04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa08:	f383 8811 	msr	BASEPRI, r3
 800aa0c:	f3bf 8f6f 	isb	sy
 800aa10:	f3bf 8f4f 	dsb	sy
 800aa14:	61fb      	str	r3, [r7, #28]
}
 800aa16:	bf00      	nop
 800aa18:	e7fe      	b.n	800aa18 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800aa1a:	23a8      	movs	r3, #168	; 0xa8
 800aa1c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	2ba8      	cmp	r3, #168	; 0xa8
 800aa22:	d00a      	beq.n	800aa3a <xTaskCreateStatic+0x66>
	__asm volatile
 800aa24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa28:	f383 8811 	msr	BASEPRI, r3
 800aa2c:	f3bf 8f6f 	isb	sy
 800aa30:	f3bf 8f4f 	dsb	sy
 800aa34:	61bb      	str	r3, [r7, #24]
}
 800aa36:	bf00      	nop
 800aa38:	e7fe      	b.n	800aa38 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800aa3a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800aa3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d01e      	beq.n	800aa80 <xTaskCreateStatic+0xac>
 800aa42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d01b      	beq.n	800aa80 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aa48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa4a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800aa4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa50:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aa52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa54:	2202      	movs	r2, #2
 800aa56:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	9303      	str	r3, [sp, #12]
 800aa5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa60:	9302      	str	r3, [sp, #8]
 800aa62:	f107 0314 	add.w	r3, r7, #20
 800aa66:	9301      	str	r3, [sp, #4]
 800aa68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa6a:	9300      	str	r3, [sp, #0]
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	687a      	ldr	r2, [r7, #4]
 800aa70:	68b9      	ldr	r1, [r7, #8]
 800aa72:	68f8      	ldr	r0, [r7, #12]
 800aa74:	f000 f850 	bl	800ab18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aa78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa7a:	f000 f8f3 	bl	800ac64 <prvAddNewTaskToReadyList>
 800aa7e:	e001      	b.n	800aa84 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800aa80:	2300      	movs	r3, #0
 800aa82:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aa84:	697b      	ldr	r3, [r7, #20]
	}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3728      	adds	r7, #40	; 0x28
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}

0800aa8e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aa8e:	b580      	push	{r7, lr}
 800aa90:	b08c      	sub	sp, #48	; 0x30
 800aa92:	af04      	add	r7, sp, #16
 800aa94:	60f8      	str	r0, [r7, #12]
 800aa96:	60b9      	str	r1, [r7, #8]
 800aa98:	603b      	str	r3, [r7, #0]
 800aa9a:	4613      	mov	r3, r2
 800aa9c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aa9e:	88fb      	ldrh	r3, [r7, #6]
 800aaa0:	009b      	lsls	r3, r3, #2
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f001 fd80 	bl	800c5a8 <pvPortMalloc>
 800aaa8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d00e      	beq.n	800aace <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aab0:	20a8      	movs	r0, #168	; 0xa8
 800aab2:	f001 fd79 	bl	800c5a8 <pvPortMalloc>
 800aab6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aab8:	69fb      	ldr	r3, [r7, #28]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d003      	beq.n	800aac6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aabe:	69fb      	ldr	r3, [r7, #28]
 800aac0:	697a      	ldr	r2, [r7, #20]
 800aac2:	631a      	str	r2, [r3, #48]	; 0x30
 800aac4:	e005      	b.n	800aad2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aac6:	6978      	ldr	r0, [r7, #20]
 800aac8:	f001 fe3a 	bl	800c740 <vPortFree>
 800aacc:	e001      	b.n	800aad2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aace:	2300      	movs	r3, #0
 800aad0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aad2:	69fb      	ldr	r3, [r7, #28]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d017      	beq.n	800ab08 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800aad8:	69fb      	ldr	r3, [r7, #28]
 800aada:	2200      	movs	r2, #0
 800aadc:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800aae0:	88fa      	ldrh	r2, [r7, #6]
 800aae2:	2300      	movs	r3, #0
 800aae4:	9303      	str	r3, [sp, #12]
 800aae6:	69fb      	ldr	r3, [r7, #28]
 800aae8:	9302      	str	r3, [sp, #8]
 800aaea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaec:	9301      	str	r3, [sp, #4]
 800aaee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf0:	9300      	str	r3, [sp, #0]
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	68b9      	ldr	r1, [r7, #8]
 800aaf6:	68f8      	ldr	r0, [r7, #12]
 800aaf8:	f000 f80e 	bl	800ab18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aafc:	69f8      	ldr	r0, [r7, #28]
 800aafe:	f000 f8b1 	bl	800ac64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ab02:	2301      	movs	r3, #1
 800ab04:	61bb      	str	r3, [r7, #24]
 800ab06:	e002      	b.n	800ab0e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ab08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab0c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ab0e:	69bb      	ldr	r3, [r7, #24]
	}
 800ab10:	4618      	mov	r0, r3
 800ab12:	3720      	adds	r7, #32
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}

0800ab18 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b088      	sub	sp, #32
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	60f8      	str	r0, [r7, #12]
 800ab20:	60b9      	str	r1, [r7, #8]
 800ab22:	607a      	str	r2, [r7, #4]
 800ab24:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ab26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab28:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	009b      	lsls	r3, r3, #2
 800ab2e:	461a      	mov	r2, r3
 800ab30:	21a5      	movs	r1, #165	; 0xa5
 800ab32:	f00d fd6d 	bl	8018610 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ab36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ab40:	3b01      	subs	r3, #1
 800ab42:	009b      	lsls	r3, r3, #2
 800ab44:	4413      	add	r3, r2
 800ab46:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ab48:	69bb      	ldr	r3, [r7, #24]
 800ab4a:	f023 0307 	bic.w	r3, r3, #7
 800ab4e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ab50:	69bb      	ldr	r3, [r7, #24]
 800ab52:	f003 0307 	and.w	r3, r3, #7
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d00a      	beq.n	800ab70 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ab5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab5e:	f383 8811 	msr	BASEPRI, r3
 800ab62:	f3bf 8f6f 	isb	sy
 800ab66:	f3bf 8f4f 	dsb	sy
 800ab6a:	617b      	str	r3, [r7, #20]
}
 800ab6c:	bf00      	nop
 800ab6e:	e7fe      	b.n	800ab6e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d01f      	beq.n	800abb6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ab76:	2300      	movs	r3, #0
 800ab78:	61fb      	str	r3, [r7, #28]
 800ab7a:	e012      	b.n	800aba2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ab7c:	68ba      	ldr	r2, [r7, #8]
 800ab7e:	69fb      	ldr	r3, [r7, #28]
 800ab80:	4413      	add	r3, r2
 800ab82:	7819      	ldrb	r1, [r3, #0]
 800ab84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab86:	69fb      	ldr	r3, [r7, #28]
 800ab88:	4413      	add	r3, r2
 800ab8a:	3334      	adds	r3, #52	; 0x34
 800ab8c:	460a      	mov	r2, r1
 800ab8e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ab90:	68ba      	ldr	r2, [r7, #8]
 800ab92:	69fb      	ldr	r3, [r7, #28]
 800ab94:	4413      	add	r3, r2
 800ab96:	781b      	ldrb	r3, [r3, #0]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d006      	beq.n	800abaa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ab9c:	69fb      	ldr	r3, [r7, #28]
 800ab9e:	3301      	adds	r3, #1
 800aba0:	61fb      	str	r3, [r7, #28]
 800aba2:	69fb      	ldr	r3, [r7, #28]
 800aba4:	2b0f      	cmp	r3, #15
 800aba6:	d9e9      	bls.n	800ab7c <prvInitialiseNewTask+0x64>
 800aba8:	e000      	b.n	800abac <prvInitialiseNewTask+0x94>
			{
				break;
 800abaa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800abac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abae:	2200      	movs	r2, #0
 800abb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800abb4:	e003      	b.n	800abbe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800abb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb8:	2200      	movs	r2, #0
 800abba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800abbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc0:	2b37      	cmp	r3, #55	; 0x37
 800abc2:	d901      	bls.n	800abc8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800abc4:	2337      	movs	r3, #55	; 0x37
 800abc6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800abc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abcc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800abce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abd2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800abd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abd6:	2200      	movs	r2, #0
 800abd8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800abda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abdc:	3304      	adds	r3, #4
 800abde:	4618      	mov	r0, r3
 800abe0:	f7fe fffc 	bl	8009bdc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800abe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe6:	3318      	adds	r3, #24
 800abe8:	4618      	mov	r0, r3
 800abea:	f7fe fff7 	bl	8009bdc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800abee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abf2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abf6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800abfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abfc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800abfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac02:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ac04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac06:	2200      	movs	r2, #0
 800ac08:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ac0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac0e:	2200      	movs	r2, #0
 800ac10:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ac14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac16:	3354      	adds	r3, #84	; 0x54
 800ac18:	224c      	movs	r2, #76	; 0x4c
 800ac1a:	2100      	movs	r1, #0
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f00d fcf7 	bl	8018610 <memset>
 800ac22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac24:	4a0c      	ldr	r2, [pc, #48]	; (800ac58 <prvInitialiseNewTask+0x140>)
 800ac26:	659a      	str	r2, [r3, #88]	; 0x58
 800ac28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac2a:	4a0c      	ldr	r2, [pc, #48]	; (800ac5c <prvInitialiseNewTask+0x144>)
 800ac2c:	65da      	str	r2, [r3, #92]	; 0x5c
 800ac2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac30:	4a0b      	ldr	r2, [pc, #44]	; (800ac60 <prvInitialiseNewTask+0x148>)
 800ac32:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ac34:	683a      	ldr	r2, [r7, #0]
 800ac36:	68f9      	ldr	r1, [r7, #12]
 800ac38:	69b8      	ldr	r0, [r7, #24]
 800ac3a:	f001 fa65 	bl	800c108 <pxPortInitialiseStack>
 800ac3e:	4602      	mov	r2, r0
 800ac40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac42:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ac44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d002      	beq.n	800ac50 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ac4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac4e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac50:	bf00      	nop
 800ac52:	3720      	adds	r7, #32
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}
 800ac58:	20009d40 	.word	0x20009d40
 800ac5c:	20009da8 	.word	0x20009da8
 800ac60:	20009e10 	.word	0x20009e10

0800ac64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b082      	sub	sp, #8
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ac6c:	f001 fb7a 	bl	800c364 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ac70:	4b2d      	ldr	r3, [pc, #180]	; (800ad28 <prvAddNewTaskToReadyList+0xc4>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	3301      	adds	r3, #1
 800ac76:	4a2c      	ldr	r2, [pc, #176]	; (800ad28 <prvAddNewTaskToReadyList+0xc4>)
 800ac78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ac7a:	4b2c      	ldr	r3, [pc, #176]	; (800ad2c <prvAddNewTaskToReadyList+0xc8>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d109      	bne.n	800ac96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ac82:	4a2a      	ldr	r2, [pc, #168]	; (800ad2c <prvAddNewTaskToReadyList+0xc8>)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ac88:	4b27      	ldr	r3, [pc, #156]	; (800ad28 <prvAddNewTaskToReadyList+0xc4>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	2b01      	cmp	r3, #1
 800ac8e:	d110      	bne.n	800acb2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ac90:	f000 fc4c 	bl	800b52c <prvInitialiseTaskLists>
 800ac94:	e00d      	b.n	800acb2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ac96:	4b26      	ldr	r3, [pc, #152]	; (800ad30 <prvAddNewTaskToReadyList+0xcc>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d109      	bne.n	800acb2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ac9e:	4b23      	ldr	r3, [pc, #140]	; (800ad2c <prvAddNewTaskToReadyList+0xc8>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aca8:	429a      	cmp	r2, r3
 800acaa:	d802      	bhi.n	800acb2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800acac:	4a1f      	ldr	r2, [pc, #124]	; (800ad2c <prvAddNewTaskToReadyList+0xc8>)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800acb2:	4b20      	ldr	r3, [pc, #128]	; (800ad34 <prvAddNewTaskToReadyList+0xd0>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	3301      	adds	r3, #1
 800acb8:	4a1e      	ldr	r2, [pc, #120]	; (800ad34 <prvAddNewTaskToReadyList+0xd0>)
 800acba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800acbc:	4b1d      	ldr	r3, [pc, #116]	; (800ad34 <prvAddNewTaskToReadyList+0xd0>)
 800acbe:	681a      	ldr	r2, [r3, #0]
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acc8:	4b1b      	ldr	r3, [pc, #108]	; (800ad38 <prvAddNewTaskToReadyList+0xd4>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	429a      	cmp	r2, r3
 800acce:	d903      	bls.n	800acd8 <prvAddNewTaskToReadyList+0x74>
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acd4:	4a18      	ldr	r2, [pc, #96]	; (800ad38 <prvAddNewTaskToReadyList+0xd4>)
 800acd6:	6013      	str	r3, [r2, #0]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acdc:	4613      	mov	r3, r2
 800acde:	009b      	lsls	r3, r3, #2
 800ace0:	4413      	add	r3, r2
 800ace2:	009b      	lsls	r3, r3, #2
 800ace4:	4a15      	ldr	r2, [pc, #84]	; (800ad3c <prvAddNewTaskToReadyList+0xd8>)
 800ace6:	441a      	add	r2, r3
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	3304      	adds	r3, #4
 800acec:	4619      	mov	r1, r3
 800acee:	4610      	mov	r0, r2
 800acf0:	f7fe ff81 	bl	8009bf6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800acf4:	f001 fb66 	bl	800c3c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800acf8:	4b0d      	ldr	r3, [pc, #52]	; (800ad30 <prvAddNewTaskToReadyList+0xcc>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d00e      	beq.n	800ad1e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ad00:	4b0a      	ldr	r3, [pc, #40]	; (800ad2c <prvAddNewTaskToReadyList+0xc8>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad0a:	429a      	cmp	r2, r3
 800ad0c:	d207      	bcs.n	800ad1e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ad0e:	4b0c      	ldr	r3, [pc, #48]	; (800ad40 <prvAddNewTaskToReadyList+0xdc>)
 800ad10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad14:	601a      	str	r2, [r3, #0]
 800ad16:	f3bf 8f4f 	dsb	sy
 800ad1a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad1e:	bf00      	nop
 800ad20:	3708      	adds	r7, #8
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
 800ad26:	bf00      	nop
 800ad28:	200059c8 	.word	0x200059c8
 800ad2c:	200054f4 	.word	0x200054f4
 800ad30:	200059d4 	.word	0x200059d4
 800ad34:	200059e4 	.word	0x200059e4
 800ad38:	200059d0 	.word	0x200059d0
 800ad3c:	200054f8 	.word	0x200054f8
 800ad40:	e000ed04 	.word	0xe000ed04

0800ad44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b084      	sub	sp, #16
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d017      	beq.n	800ad86 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ad56:	4b13      	ldr	r3, [pc, #76]	; (800ada4 <vTaskDelay+0x60>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d00a      	beq.n	800ad74 <vTaskDelay+0x30>
	__asm volatile
 800ad5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad62:	f383 8811 	msr	BASEPRI, r3
 800ad66:	f3bf 8f6f 	isb	sy
 800ad6a:	f3bf 8f4f 	dsb	sy
 800ad6e:	60bb      	str	r3, [r7, #8]
}
 800ad70:	bf00      	nop
 800ad72:	e7fe      	b.n	800ad72 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ad74:	f000 f88a 	bl	800ae8c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ad78:	2100      	movs	r1, #0
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f000 fe22 	bl	800b9c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ad80:	f000 f892 	bl	800aea8 <xTaskResumeAll>
 800ad84:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d107      	bne.n	800ad9c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ad8c:	4b06      	ldr	r3, [pc, #24]	; (800ada8 <vTaskDelay+0x64>)
 800ad8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad92:	601a      	str	r2, [r3, #0]
 800ad94:	f3bf 8f4f 	dsb	sy
 800ad98:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ad9c:	bf00      	nop
 800ad9e:	3710      	adds	r7, #16
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}
 800ada4:	200059f0 	.word	0x200059f0
 800ada8:	e000ed04 	.word	0xe000ed04

0800adac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b08a      	sub	sp, #40	; 0x28
 800adb0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800adb2:	2300      	movs	r3, #0
 800adb4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800adb6:	2300      	movs	r3, #0
 800adb8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800adba:	463a      	mov	r2, r7
 800adbc:	1d39      	adds	r1, r7, #4
 800adbe:	f107 0308 	add.w	r3, r7, #8
 800adc2:	4618      	mov	r0, r3
 800adc4:	f7fe feb6 	bl	8009b34 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800adc8:	6839      	ldr	r1, [r7, #0]
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	68ba      	ldr	r2, [r7, #8]
 800adce:	9202      	str	r2, [sp, #8]
 800add0:	9301      	str	r3, [sp, #4]
 800add2:	2300      	movs	r3, #0
 800add4:	9300      	str	r3, [sp, #0]
 800add6:	2300      	movs	r3, #0
 800add8:	460a      	mov	r2, r1
 800adda:	4924      	ldr	r1, [pc, #144]	; (800ae6c <vTaskStartScheduler+0xc0>)
 800addc:	4824      	ldr	r0, [pc, #144]	; (800ae70 <vTaskStartScheduler+0xc4>)
 800adde:	f7ff fdf9 	bl	800a9d4 <xTaskCreateStatic>
 800ade2:	4603      	mov	r3, r0
 800ade4:	4a23      	ldr	r2, [pc, #140]	; (800ae74 <vTaskStartScheduler+0xc8>)
 800ade6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ade8:	4b22      	ldr	r3, [pc, #136]	; (800ae74 <vTaskStartScheduler+0xc8>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d002      	beq.n	800adf6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800adf0:	2301      	movs	r3, #1
 800adf2:	617b      	str	r3, [r7, #20]
 800adf4:	e001      	b.n	800adfa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800adf6:	2300      	movs	r3, #0
 800adf8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	2b01      	cmp	r3, #1
 800adfe:	d102      	bne.n	800ae06 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ae00:	f000 fe34 	bl	800ba6c <xTimerCreateTimerTask>
 800ae04:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	2b01      	cmp	r3, #1
 800ae0a:	d11b      	bne.n	800ae44 <vTaskStartScheduler+0x98>
	__asm volatile
 800ae0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae10:	f383 8811 	msr	BASEPRI, r3
 800ae14:	f3bf 8f6f 	isb	sy
 800ae18:	f3bf 8f4f 	dsb	sy
 800ae1c:	613b      	str	r3, [r7, #16]
}
 800ae1e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ae20:	4b15      	ldr	r3, [pc, #84]	; (800ae78 <vTaskStartScheduler+0xcc>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	3354      	adds	r3, #84	; 0x54
 800ae26:	4a15      	ldr	r2, [pc, #84]	; (800ae7c <vTaskStartScheduler+0xd0>)
 800ae28:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ae2a:	4b15      	ldr	r3, [pc, #84]	; (800ae80 <vTaskStartScheduler+0xd4>)
 800ae2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ae30:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ae32:	4b14      	ldr	r3, [pc, #80]	; (800ae84 <vTaskStartScheduler+0xd8>)
 800ae34:	2201      	movs	r2, #1
 800ae36:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ae38:	4b13      	ldr	r3, [pc, #76]	; (800ae88 <vTaskStartScheduler+0xdc>)
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ae3e:	f001 f9ef 	bl	800c220 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ae42:	e00e      	b.n	800ae62 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ae44:	697b      	ldr	r3, [r7, #20]
 800ae46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae4a:	d10a      	bne.n	800ae62 <vTaskStartScheduler+0xb6>
	__asm volatile
 800ae4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae50:	f383 8811 	msr	BASEPRI, r3
 800ae54:	f3bf 8f6f 	isb	sy
 800ae58:	f3bf 8f4f 	dsb	sy
 800ae5c:	60fb      	str	r3, [r7, #12]
}
 800ae5e:	bf00      	nop
 800ae60:	e7fe      	b.n	800ae60 <vTaskStartScheduler+0xb4>
}
 800ae62:	bf00      	nop
 800ae64:	3718      	adds	r7, #24
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}
 800ae6a:	bf00      	nop
 800ae6c:	08019854 	.word	0x08019854
 800ae70:	0800b4fd 	.word	0x0800b4fd
 800ae74:	200059ec 	.word	0x200059ec
 800ae78:	200054f4 	.word	0x200054f4
 800ae7c:	200000cc 	.word	0x200000cc
 800ae80:	200059e8 	.word	0x200059e8
 800ae84:	200059d4 	.word	0x200059d4
 800ae88:	200059cc 	.word	0x200059cc

0800ae8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ae8c:	b480      	push	{r7}
 800ae8e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ae90:	4b04      	ldr	r3, [pc, #16]	; (800aea4 <vTaskSuspendAll+0x18>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	3301      	adds	r3, #1
 800ae96:	4a03      	ldr	r2, [pc, #12]	; (800aea4 <vTaskSuspendAll+0x18>)
 800ae98:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ae9a:	bf00      	nop
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea2:	4770      	bx	lr
 800aea4:	200059f0 	.word	0x200059f0

0800aea8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b084      	sub	sp, #16
 800aeac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aeb6:	4b42      	ldr	r3, [pc, #264]	; (800afc0 <xTaskResumeAll+0x118>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d10a      	bne.n	800aed4 <xTaskResumeAll+0x2c>
	__asm volatile
 800aebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aec2:	f383 8811 	msr	BASEPRI, r3
 800aec6:	f3bf 8f6f 	isb	sy
 800aeca:	f3bf 8f4f 	dsb	sy
 800aece:	603b      	str	r3, [r7, #0]
}
 800aed0:	bf00      	nop
 800aed2:	e7fe      	b.n	800aed2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800aed4:	f001 fa46 	bl	800c364 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800aed8:	4b39      	ldr	r3, [pc, #228]	; (800afc0 <xTaskResumeAll+0x118>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	3b01      	subs	r3, #1
 800aede:	4a38      	ldr	r2, [pc, #224]	; (800afc0 <xTaskResumeAll+0x118>)
 800aee0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aee2:	4b37      	ldr	r3, [pc, #220]	; (800afc0 <xTaskResumeAll+0x118>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d162      	bne.n	800afb0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aeea:	4b36      	ldr	r3, [pc, #216]	; (800afc4 <xTaskResumeAll+0x11c>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d05e      	beq.n	800afb0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aef2:	e02f      	b.n	800af54 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aef4:	4b34      	ldr	r3, [pc, #208]	; (800afc8 <xTaskResumeAll+0x120>)
 800aef6:	68db      	ldr	r3, [r3, #12]
 800aef8:	68db      	ldr	r3, [r3, #12]
 800aefa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	3318      	adds	r3, #24
 800af00:	4618      	mov	r0, r3
 800af02:	f7fe fed5 	bl	8009cb0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	3304      	adds	r3, #4
 800af0a:	4618      	mov	r0, r3
 800af0c:	f7fe fed0 	bl	8009cb0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af14:	4b2d      	ldr	r3, [pc, #180]	; (800afcc <xTaskResumeAll+0x124>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	429a      	cmp	r2, r3
 800af1a:	d903      	bls.n	800af24 <xTaskResumeAll+0x7c>
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af20:	4a2a      	ldr	r2, [pc, #168]	; (800afcc <xTaskResumeAll+0x124>)
 800af22:	6013      	str	r3, [r2, #0]
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af28:	4613      	mov	r3, r2
 800af2a:	009b      	lsls	r3, r3, #2
 800af2c:	4413      	add	r3, r2
 800af2e:	009b      	lsls	r3, r3, #2
 800af30:	4a27      	ldr	r2, [pc, #156]	; (800afd0 <xTaskResumeAll+0x128>)
 800af32:	441a      	add	r2, r3
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	3304      	adds	r3, #4
 800af38:	4619      	mov	r1, r3
 800af3a:	4610      	mov	r0, r2
 800af3c:	f7fe fe5b 	bl	8009bf6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af44:	4b23      	ldr	r3, [pc, #140]	; (800afd4 <xTaskResumeAll+0x12c>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af4a:	429a      	cmp	r2, r3
 800af4c:	d302      	bcc.n	800af54 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800af4e:	4b22      	ldr	r3, [pc, #136]	; (800afd8 <xTaskResumeAll+0x130>)
 800af50:	2201      	movs	r2, #1
 800af52:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800af54:	4b1c      	ldr	r3, [pc, #112]	; (800afc8 <xTaskResumeAll+0x120>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d1cb      	bne.n	800aef4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d001      	beq.n	800af66 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800af62:	f000 fb85 	bl	800b670 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800af66:	4b1d      	ldr	r3, [pc, #116]	; (800afdc <xTaskResumeAll+0x134>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d010      	beq.n	800af94 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800af72:	f000 f847 	bl	800b004 <xTaskIncrementTick>
 800af76:	4603      	mov	r3, r0
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d002      	beq.n	800af82 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800af7c:	4b16      	ldr	r3, [pc, #88]	; (800afd8 <xTaskResumeAll+0x130>)
 800af7e:	2201      	movs	r2, #1
 800af80:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	3b01      	subs	r3, #1
 800af86:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d1f1      	bne.n	800af72 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800af8e:	4b13      	ldr	r3, [pc, #76]	; (800afdc <xTaskResumeAll+0x134>)
 800af90:	2200      	movs	r2, #0
 800af92:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800af94:	4b10      	ldr	r3, [pc, #64]	; (800afd8 <xTaskResumeAll+0x130>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d009      	beq.n	800afb0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800af9c:	2301      	movs	r3, #1
 800af9e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800afa0:	4b0f      	ldr	r3, [pc, #60]	; (800afe0 <xTaskResumeAll+0x138>)
 800afa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afa6:	601a      	str	r2, [r3, #0]
 800afa8:	f3bf 8f4f 	dsb	sy
 800afac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800afb0:	f001 fa08 	bl	800c3c4 <vPortExitCritical>

	return xAlreadyYielded;
 800afb4:	68bb      	ldr	r3, [r7, #8]
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3710      	adds	r7, #16
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}
 800afbe:	bf00      	nop
 800afc0:	200059f0 	.word	0x200059f0
 800afc4:	200059c8 	.word	0x200059c8
 800afc8:	20005988 	.word	0x20005988
 800afcc:	200059d0 	.word	0x200059d0
 800afd0:	200054f8 	.word	0x200054f8
 800afd4:	200054f4 	.word	0x200054f4
 800afd8:	200059dc 	.word	0x200059dc
 800afdc:	200059d8 	.word	0x200059d8
 800afe0:	e000ed04 	.word	0xe000ed04

0800afe4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800afe4:	b480      	push	{r7}
 800afe6:	b083      	sub	sp, #12
 800afe8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800afea:	4b05      	ldr	r3, [pc, #20]	; (800b000 <xTaskGetTickCount+0x1c>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800aff0:	687b      	ldr	r3, [r7, #4]
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	370c      	adds	r7, #12
 800aff6:	46bd      	mov	sp, r7
 800aff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affc:	4770      	bx	lr
 800affe:	bf00      	nop
 800b000:	200059cc 	.word	0x200059cc

0800b004 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b086      	sub	sp, #24
 800b008:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b00a:	2300      	movs	r3, #0
 800b00c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b00e:	4b4f      	ldr	r3, [pc, #316]	; (800b14c <xTaskIncrementTick+0x148>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	2b00      	cmp	r3, #0
 800b014:	f040 808f 	bne.w	800b136 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b018:	4b4d      	ldr	r3, [pc, #308]	; (800b150 <xTaskIncrementTick+0x14c>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	3301      	adds	r3, #1
 800b01e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b020:	4a4b      	ldr	r2, [pc, #300]	; (800b150 <xTaskIncrementTick+0x14c>)
 800b022:	693b      	ldr	r3, [r7, #16]
 800b024:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b026:	693b      	ldr	r3, [r7, #16]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d120      	bne.n	800b06e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b02c:	4b49      	ldr	r3, [pc, #292]	; (800b154 <xTaskIncrementTick+0x150>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d00a      	beq.n	800b04c <xTaskIncrementTick+0x48>
	__asm volatile
 800b036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b03a:	f383 8811 	msr	BASEPRI, r3
 800b03e:	f3bf 8f6f 	isb	sy
 800b042:	f3bf 8f4f 	dsb	sy
 800b046:	603b      	str	r3, [r7, #0]
}
 800b048:	bf00      	nop
 800b04a:	e7fe      	b.n	800b04a <xTaskIncrementTick+0x46>
 800b04c:	4b41      	ldr	r3, [pc, #260]	; (800b154 <xTaskIncrementTick+0x150>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	60fb      	str	r3, [r7, #12]
 800b052:	4b41      	ldr	r3, [pc, #260]	; (800b158 <xTaskIncrementTick+0x154>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	4a3f      	ldr	r2, [pc, #252]	; (800b154 <xTaskIncrementTick+0x150>)
 800b058:	6013      	str	r3, [r2, #0]
 800b05a:	4a3f      	ldr	r2, [pc, #252]	; (800b158 <xTaskIncrementTick+0x154>)
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	6013      	str	r3, [r2, #0]
 800b060:	4b3e      	ldr	r3, [pc, #248]	; (800b15c <xTaskIncrementTick+0x158>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	3301      	adds	r3, #1
 800b066:	4a3d      	ldr	r2, [pc, #244]	; (800b15c <xTaskIncrementTick+0x158>)
 800b068:	6013      	str	r3, [r2, #0]
 800b06a:	f000 fb01 	bl	800b670 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b06e:	4b3c      	ldr	r3, [pc, #240]	; (800b160 <xTaskIncrementTick+0x15c>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	693a      	ldr	r2, [r7, #16]
 800b074:	429a      	cmp	r2, r3
 800b076:	d349      	bcc.n	800b10c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b078:	4b36      	ldr	r3, [pc, #216]	; (800b154 <xTaskIncrementTick+0x150>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d104      	bne.n	800b08c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b082:	4b37      	ldr	r3, [pc, #220]	; (800b160 <xTaskIncrementTick+0x15c>)
 800b084:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b088:	601a      	str	r2, [r3, #0]
					break;
 800b08a:	e03f      	b.n	800b10c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b08c:	4b31      	ldr	r3, [pc, #196]	; (800b154 <xTaskIncrementTick+0x150>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	68db      	ldr	r3, [r3, #12]
 800b092:	68db      	ldr	r3, [r3, #12]
 800b094:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	685b      	ldr	r3, [r3, #4]
 800b09a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b09c:	693a      	ldr	r2, [r7, #16]
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	d203      	bcs.n	800b0ac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b0a4:	4a2e      	ldr	r2, [pc, #184]	; (800b160 <xTaskIncrementTick+0x15c>)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b0aa:	e02f      	b.n	800b10c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	3304      	adds	r3, #4
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f7fe fdfd 	bl	8009cb0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d004      	beq.n	800b0c8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	3318      	adds	r3, #24
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f7fe fdf4 	bl	8009cb0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0cc:	4b25      	ldr	r3, [pc, #148]	; (800b164 <xTaskIncrementTick+0x160>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	429a      	cmp	r2, r3
 800b0d2:	d903      	bls.n	800b0dc <xTaskIncrementTick+0xd8>
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0d8:	4a22      	ldr	r2, [pc, #136]	; (800b164 <xTaskIncrementTick+0x160>)
 800b0da:	6013      	str	r3, [r2, #0]
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0e0:	4613      	mov	r3, r2
 800b0e2:	009b      	lsls	r3, r3, #2
 800b0e4:	4413      	add	r3, r2
 800b0e6:	009b      	lsls	r3, r3, #2
 800b0e8:	4a1f      	ldr	r2, [pc, #124]	; (800b168 <xTaskIncrementTick+0x164>)
 800b0ea:	441a      	add	r2, r3
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	3304      	adds	r3, #4
 800b0f0:	4619      	mov	r1, r3
 800b0f2:	4610      	mov	r0, r2
 800b0f4:	f7fe fd7f 	bl	8009bf6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0fc:	4b1b      	ldr	r3, [pc, #108]	; (800b16c <xTaskIncrementTick+0x168>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b102:	429a      	cmp	r2, r3
 800b104:	d3b8      	bcc.n	800b078 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b106:	2301      	movs	r3, #1
 800b108:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b10a:	e7b5      	b.n	800b078 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b10c:	4b17      	ldr	r3, [pc, #92]	; (800b16c <xTaskIncrementTick+0x168>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b112:	4915      	ldr	r1, [pc, #84]	; (800b168 <xTaskIncrementTick+0x164>)
 800b114:	4613      	mov	r3, r2
 800b116:	009b      	lsls	r3, r3, #2
 800b118:	4413      	add	r3, r2
 800b11a:	009b      	lsls	r3, r3, #2
 800b11c:	440b      	add	r3, r1
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	2b01      	cmp	r3, #1
 800b122:	d901      	bls.n	800b128 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b124:	2301      	movs	r3, #1
 800b126:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b128:	4b11      	ldr	r3, [pc, #68]	; (800b170 <xTaskIncrementTick+0x16c>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d007      	beq.n	800b140 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b130:	2301      	movs	r3, #1
 800b132:	617b      	str	r3, [r7, #20]
 800b134:	e004      	b.n	800b140 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b136:	4b0f      	ldr	r3, [pc, #60]	; (800b174 <xTaskIncrementTick+0x170>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	3301      	adds	r3, #1
 800b13c:	4a0d      	ldr	r2, [pc, #52]	; (800b174 <xTaskIncrementTick+0x170>)
 800b13e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b140:	697b      	ldr	r3, [r7, #20]
}
 800b142:	4618      	mov	r0, r3
 800b144:	3718      	adds	r7, #24
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}
 800b14a:	bf00      	nop
 800b14c:	200059f0 	.word	0x200059f0
 800b150:	200059cc 	.word	0x200059cc
 800b154:	20005980 	.word	0x20005980
 800b158:	20005984 	.word	0x20005984
 800b15c:	200059e0 	.word	0x200059e0
 800b160:	200059e8 	.word	0x200059e8
 800b164:	200059d0 	.word	0x200059d0
 800b168:	200054f8 	.word	0x200054f8
 800b16c:	200054f4 	.word	0x200054f4
 800b170:	200059dc 	.word	0x200059dc
 800b174:	200059d8 	.word	0x200059d8

0800b178 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b178:	b480      	push	{r7}
 800b17a:	b085      	sub	sp, #20
 800b17c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b17e:	4b2a      	ldr	r3, [pc, #168]	; (800b228 <vTaskSwitchContext+0xb0>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d003      	beq.n	800b18e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b186:	4b29      	ldr	r3, [pc, #164]	; (800b22c <vTaskSwitchContext+0xb4>)
 800b188:	2201      	movs	r2, #1
 800b18a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b18c:	e046      	b.n	800b21c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b18e:	4b27      	ldr	r3, [pc, #156]	; (800b22c <vTaskSwitchContext+0xb4>)
 800b190:	2200      	movs	r2, #0
 800b192:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b194:	4b26      	ldr	r3, [pc, #152]	; (800b230 <vTaskSwitchContext+0xb8>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	60fb      	str	r3, [r7, #12]
 800b19a:	e010      	b.n	800b1be <vTaskSwitchContext+0x46>
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d10a      	bne.n	800b1b8 <vTaskSwitchContext+0x40>
	__asm volatile
 800b1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a6:	f383 8811 	msr	BASEPRI, r3
 800b1aa:	f3bf 8f6f 	isb	sy
 800b1ae:	f3bf 8f4f 	dsb	sy
 800b1b2:	607b      	str	r3, [r7, #4]
}
 800b1b4:	bf00      	nop
 800b1b6:	e7fe      	b.n	800b1b6 <vTaskSwitchContext+0x3e>
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	3b01      	subs	r3, #1
 800b1bc:	60fb      	str	r3, [r7, #12]
 800b1be:	491d      	ldr	r1, [pc, #116]	; (800b234 <vTaskSwitchContext+0xbc>)
 800b1c0:	68fa      	ldr	r2, [r7, #12]
 800b1c2:	4613      	mov	r3, r2
 800b1c4:	009b      	lsls	r3, r3, #2
 800b1c6:	4413      	add	r3, r2
 800b1c8:	009b      	lsls	r3, r3, #2
 800b1ca:	440b      	add	r3, r1
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d0e4      	beq.n	800b19c <vTaskSwitchContext+0x24>
 800b1d2:	68fa      	ldr	r2, [r7, #12]
 800b1d4:	4613      	mov	r3, r2
 800b1d6:	009b      	lsls	r3, r3, #2
 800b1d8:	4413      	add	r3, r2
 800b1da:	009b      	lsls	r3, r3, #2
 800b1dc:	4a15      	ldr	r2, [pc, #84]	; (800b234 <vTaskSwitchContext+0xbc>)
 800b1de:	4413      	add	r3, r2
 800b1e0:	60bb      	str	r3, [r7, #8]
 800b1e2:	68bb      	ldr	r3, [r7, #8]
 800b1e4:	685b      	ldr	r3, [r3, #4]
 800b1e6:	685a      	ldr	r2, [r3, #4]
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	605a      	str	r2, [r3, #4]
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	685a      	ldr	r2, [r3, #4]
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	3308      	adds	r3, #8
 800b1f4:	429a      	cmp	r2, r3
 800b1f6:	d104      	bne.n	800b202 <vTaskSwitchContext+0x8a>
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	685a      	ldr	r2, [r3, #4]
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	605a      	str	r2, [r3, #4]
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	685b      	ldr	r3, [r3, #4]
 800b206:	68db      	ldr	r3, [r3, #12]
 800b208:	4a0b      	ldr	r2, [pc, #44]	; (800b238 <vTaskSwitchContext+0xc0>)
 800b20a:	6013      	str	r3, [r2, #0]
 800b20c:	4a08      	ldr	r2, [pc, #32]	; (800b230 <vTaskSwitchContext+0xb8>)
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b212:	4b09      	ldr	r3, [pc, #36]	; (800b238 <vTaskSwitchContext+0xc0>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	3354      	adds	r3, #84	; 0x54
 800b218:	4a08      	ldr	r2, [pc, #32]	; (800b23c <vTaskSwitchContext+0xc4>)
 800b21a:	6013      	str	r3, [r2, #0]
}
 800b21c:	bf00      	nop
 800b21e:	3714      	adds	r7, #20
 800b220:	46bd      	mov	sp, r7
 800b222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b226:	4770      	bx	lr
 800b228:	200059f0 	.word	0x200059f0
 800b22c:	200059dc 	.word	0x200059dc
 800b230:	200059d0 	.word	0x200059d0
 800b234:	200054f8 	.word	0x200054f8
 800b238:	200054f4 	.word	0x200054f4
 800b23c:	200000cc 	.word	0x200000cc

0800b240 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b084      	sub	sp, #16
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
 800b248:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d10a      	bne.n	800b266 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b254:	f383 8811 	msr	BASEPRI, r3
 800b258:	f3bf 8f6f 	isb	sy
 800b25c:	f3bf 8f4f 	dsb	sy
 800b260:	60fb      	str	r3, [r7, #12]
}
 800b262:	bf00      	nop
 800b264:	e7fe      	b.n	800b264 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b266:	4b07      	ldr	r3, [pc, #28]	; (800b284 <vTaskPlaceOnEventList+0x44>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	3318      	adds	r3, #24
 800b26c:	4619      	mov	r1, r3
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f7fe fce5 	bl	8009c3e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b274:	2101      	movs	r1, #1
 800b276:	6838      	ldr	r0, [r7, #0]
 800b278:	f000 fba4 	bl	800b9c4 <prvAddCurrentTaskToDelayedList>
}
 800b27c:	bf00      	nop
 800b27e:	3710      	adds	r7, #16
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}
 800b284:	200054f4 	.word	0x200054f4

0800b288 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b086      	sub	sp, #24
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	60f8      	str	r0, [r7, #12]
 800b290:	60b9      	str	r1, [r7, #8]
 800b292:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d10a      	bne.n	800b2b0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b29e:	f383 8811 	msr	BASEPRI, r3
 800b2a2:	f3bf 8f6f 	isb	sy
 800b2a6:	f3bf 8f4f 	dsb	sy
 800b2aa:	617b      	str	r3, [r7, #20]
}
 800b2ac:	bf00      	nop
 800b2ae:	e7fe      	b.n	800b2ae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b2b0:	4b0a      	ldr	r3, [pc, #40]	; (800b2dc <vTaskPlaceOnEventListRestricted+0x54>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	3318      	adds	r3, #24
 800b2b6:	4619      	mov	r1, r3
 800b2b8:	68f8      	ldr	r0, [r7, #12]
 800b2ba:	f7fe fc9c 	bl	8009bf6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d002      	beq.n	800b2ca <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b2c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b2c8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b2ca:	6879      	ldr	r1, [r7, #4]
 800b2cc:	68b8      	ldr	r0, [r7, #8]
 800b2ce:	f000 fb79 	bl	800b9c4 <prvAddCurrentTaskToDelayedList>
	}
 800b2d2:	bf00      	nop
 800b2d4:	3718      	adds	r7, #24
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}
 800b2da:	bf00      	nop
 800b2dc:	200054f4 	.word	0x200054f4

0800b2e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b086      	sub	sp, #24
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	68db      	ldr	r3, [r3, #12]
 800b2ec:	68db      	ldr	r3, [r3, #12]
 800b2ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d10a      	bne.n	800b30c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2fa:	f383 8811 	msr	BASEPRI, r3
 800b2fe:	f3bf 8f6f 	isb	sy
 800b302:	f3bf 8f4f 	dsb	sy
 800b306:	60fb      	str	r3, [r7, #12]
}
 800b308:	bf00      	nop
 800b30a:	e7fe      	b.n	800b30a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b30c:	693b      	ldr	r3, [r7, #16]
 800b30e:	3318      	adds	r3, #24
 800b310:	4618      	mov	r0, r3
 800b312:	f7fe fccd 	bl	8009cb0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b316:	4b1e      	ldr	r3, [pc, #120]	; (800b390 <xTaskRemoveFromEventList+0xb0>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d11d      	bne.n	800b35a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b31e:	693b      	ldr	r3, [r7, #16]
 800b320:	3304      	adds	r3, #4
 800b322:	4618      	mov	r0, r3
 800b324:	f7fe fcc4 	bl	8009cb0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b32c:	4b19      	ldr	r3, [pc, #100]	; (800b394 <xTaskRemoveFromEventList+0xb4>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	429a      	cmp	r2, r3
 800b332:	d903      	bls.n	800b33c <xTaskRemoveFromEventList+0x5c>
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b338:	4a16      	ldr	r2, [pc, #88]	; (800b394 <xTaskRemoveFromEventList+0xb4>)
 800b33a:	6013      	str	r3, [r2, #0]
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b340:	4613      	mov	r3, r2
 800b342:	009b      	lsls	r3, r3, #2
 800b344:	4413      	add	r3, r2
 800b346:	009b      	lsls	r3, r3, #2
 800b348:	4a13      	ldr	r2, [pc, #76]	; (800b398 <xTaskRemoveFromEventList+0xb8>)
 800b34a:	441a      	add	r2, r3
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	3304      	adds	r3, #4
 800b350:	4619      	mov	r1, r3
 800b352:	4610      	mov	r0, r2
 800b354:	f7fe fc4f 	bl	8009bf6 <vListInsertEnd>
 800b358:	e005      	b.n	800b366 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b35a:	693b      	ldr	r3, [r7, #16]
 800b35c:	3318      	adds	r3, #24
 800b35e:	4619      	mov	r1, r3
 800b360:	480e      	ldr	r0, [pc, #56]	; (800b39c <xTaskRemoveFromEventList+0xbc>)
 800b362:	f7fe fc48 	bl	8009bf6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b36a:	4b0d      	ldr	r3, [pc, #52]	; (800b3a0 <xTaskRemoveFromEventList+0xc0>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b370:	429a      	cmp	r2, r3
 800b372:	d905      	bls.n	800b380 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b374:	2301      	movs	r3, #1
 800b376:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b378:	4b0a      	ldr	r3, [pc, #40]	; (800b3a4 <xTaskRemoveFromEventList+0xc4>)
 800b37a:	2201      	movs	r2, #1
 800b37c:	601a      	str	r2, [r3, #0]
 800b37e:	e001      	b.n	800b384 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b380:	2300      	movs	r3, #0
 800b382:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b384:	697b      	ldr	r3, [r7, #20]
}
 800b386:	4618      	mov	r0, r3
 800b388:	3718      	adds	r7, #24
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}
 800b38e:	bf00      	nop
 800b390:	200059f0 	.word	0x200059f0
 800b394:	200059d0 	.word	0x200059d0
 800b398:	200054f8 	.word	0x200054f8
 800b39c:	20005988 	.word	0x20005988
 800b3a0:	200054f4 	.word	0x200054f4
 800b3a4:	200059dc 	.word	0x200059dc

0800b3a8 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b084      	sub	sp, #16
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d10a      	bne.n	800b3cc <vTaskSetTimeOutState+0x24>
	__asm volatile
 800b3b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ba:	f383 8811 	msr	BASEPRI, r3
 800b3be:	f3bf 8f6f 	isb	sy
 800b3c2:	f3bf 8f4f 	dsb	sy
 800b3c6:	60fb      	str	r3, [r7, #12]
}
 800b3c8:	bf00      	nop
 800b3ca:	e7fe      	b.n	800b3ca <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800b3cc:	f000 ffca 	bl	800c364 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b3d0:	4b06      	ldr	r3, [pc, #24]	; (800b3ec <vTaskSetTimeOutState+0x44>)
 800b3d2:	681a      	ldr	r2, [r3, #0]
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800b3d8:	4b05      	ldr	r3, [pc, #20]	; (800b3f0 <vTaskSetTimeOutState+0x48>)
 800b3da:	681a      	ldr	r2, [r3, #0]
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800b3e0:	f000 fff0 	bl	800c3c4 <vPortExitCritical>
}
 800b3e4:	bf00      	nop
 800b3e6:	3710      	adds	r7, #16
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}
 800b3ec:	200059e0 	.word	0x200059e0
 800b3f0:	200059cc 	.word	0x200059cc

0800b3f4 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b083      	sub	sp, #12
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b3fc:	4b06      	ldr	r3, [pc, #24]	; (800b418 <vTaskInternalSetTimeOutState+0x24>)
 800b3fe:	681a      	ldr	r2, [r3, #0]
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b404:	4b05      	ldr	r3, [pc, #20]	; (800b41c <vTaskInternalSetTimeOutState+0x28>)
 800b406:	681a      	ldr	r2, [r3, #0]
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	605a      	str	r2, [r3, #4]
}
 800b40c:	bf00      	nop
 800b40e:	370c      	adds	r7, #12
 800b410:	46bd      	mov	sp, r7
 800b412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b416:	4770      	bx	lr
 800b418:	200059e0 	.word	0x200059e0
 800b41c:	200059cc 	.word	0x200059cc

0800b420 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b088      	sub	sp, #32
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
 800b428:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d10a      	bne.n	800b446 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b434:	f383 8811 	msr	BASEPRI, r3
 800b438:	f3bf 8f6f 	isb	sy
 800b43c:	f3bf 8f4f 	dsb	sy
 800b440:	613b      	str	r3, [r7, #16]
}
 800b442:	bf00      	nop
 800b444:	e7fe      	b.n	800b444 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d10a      	bne.n	800b462 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b450:	f383 8811 	msr	BASEPRI, r3
 800b454:	f3bf 8f6f 	isb	sy
 800b458:	f3bf 8f4f 	dsb	sy
 800b45c:	60fb      	str	r3, [r7, #12]
}
 800b45e:	bf00      	nop
 800b460:	e7fe      	b.n	800b460 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b462:	f000 ff7f 	bl	800c364 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b466:	4b1d      	ldr	r3, [pc, #116]	; (800b4dc <xTaskCheckForTimeOut+0xbc>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	685b      	ldr	r3, [r3, #4]
 800b470:	69ba      	ldr	r2, [r7, #24]
 800b472:	1ad3      	subs	r3, r2, r3
 800b474:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b47e:	d102      	bne.n	800b486 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b480:	2300      	movs	r3, #0
 800b482:	61fb      	str	r3, [r7, #28]
 800b484:	e023      	b.n	800b4ce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681a      	ldr	r2, [r3, #0]
 800b48a:	4b15      	ldr	r3, [pc, #84]	; (800b4e0 <xTaskCheckForTimeOut+0xc0>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	429a      	cmp	r2, r3
 800b490:	d007      	beq.n	800b4a2 <xTaskCheckForTimeOut+0x82>
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	685b      	ldr	r3, [r3, #4]
 800b496:	69ba      	ldr	r2, [r7, #24]
 800b498:	429a      	cmp	r2, r3
 800b49a:	d302      	bcc.n	800b4a2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b49c:	2301      	movs	r3, #1
 800b49e:	61fb      	str	r3, [r7, #28]
 800b4a0:	e015      	b.n	800b4ce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	697a      	ldr	r2, [r7, #20]
 800b4a8:	429a      	cmp	r2, r3
 800b4aa:	d20b      	bcs.n	800b4c4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	681a      	ldr	r2, [r3, #0]
 800b4b0:	697b      	ldr	r3, [r7, #20]
 800b4b2:	1ad2      	subs	r2, r2, r3
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f7ff ff9b 	bl	800b3f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	61fb      	str	r3, [r7, #28]
 800b4c2:	e004      	b.n	800b4ce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b4ce:	f000 ff79 	bl	800c3c4 <vPortExitCritical>

	return xReturn;
 800b4d2:	69fb      	ldr	r3, [r7, #28]
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3720      	adds	r7, #32
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}
 800b4dc:	200059cc 	.word	0x200059cc
 800b4e0:	200059e0 	.word	0x200059e0

0800b4e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b4e8:	4b03      	ldr	r3, [pc, #12]	; (800b4f8 <vTaskMissedYield+0x14>)
 800b4ea:	2201      	movs	r2, #1
 800b4ec:	601a      	str	r2, [r3, #0]
}
 800b4ee:	bf00      	nop
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f6:	4770      	bx	lr
 800b4f8:	200059dc 	.word	0x200059dc

0800b4fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b082      	sub	sp, #8
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b504:	f000 f852 	bl	800b5ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b508:	4b06      	ldr	r3, [pc, #24]	; (800b524 <prvIdleTask+0x28>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	2b01      	cmp	r3, #1
 800b50e:	d9f9      	bls.n	800b504 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b510:	4b05      	ldr	r3, [pc, #20]	; (800b528 <prvIdleTask+0x2c>)
 800b512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b516:	601a      	str	r2, [r3, #0]
 800b518:	f3bf 8f4f 	dsb	sy
 800b51c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b520:	e7f0      	b.n	800b504 <prvIdleTask+0x8>
 800b522:	bf00      	nop
 800b524:	200054f8 	.word	0x200054f8
 800b528:	e000ed04 	.word	0xe000ed04

0800b52c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b082      	sub	sp, #8
 800b530:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b532:	2300      	movs	r3, #0
 800b534:	607b      	str	r3, [r7, #4]
 800b536:	e00c      	b.n	800b552 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b538:	687a      	ldr	r2, [r7, #4]
 800b53a:	4613      	mov	r3, r2
 800b53c:	009b      	lsls	r3, r3, #2
 800b53e:	4413      	add	r3, r2
 800b540:	009b      	lsls	r3, r3, #2
 800b542:	4a12      	ldr	r2, [pc, #72]	; (800b58c <prvInitialiseTaskLists+0x60>)
 800b544:	4413      	add	r3, r2
 800b546:	4618      	mov	r0, r3
 800b548:	f7fe fb28 	bl	8009b9c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	3301      	adds	r3, #1
 800b550:	607b      	str	r3, [r7, #4]
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2b37      	cmp	r3, #55	; 0x37
 800b556:	d9ef      	bls.n	800b538 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b558:	480d      	ldr	r0, [pc, #52]	; (800b590 <prvInitialiseTaskLists+0x64>)
 800b55a:	f7fe fb1f 	bl	8009b9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b55e:	480d      	ldr	r0, [pc, #52]	; (800b594 <prvInitialiseTaskLists+0x68>)
 800b560:	f7fe fb1c 	bl	8009b9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b564:	480c      	ldr	r0, [pc, #48]	; (800b598 <prvInitialiseTaskLists+0x6c>)
 800b566:	f7fe fb19 	bl	8009b9c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b56a:	480c      	ldr	r0, [pc, #48]	; (800b59c <prvInitialiseTaskLists+0x70>)
 800b56c:	f7fe fb16 	bl	8009b9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b570:	480b      	ldr	r0, [pc, #44]	; (800b5a0 <prvInitialiseTaskLists+0x74>)
 800b572:	f7fe fb13 	bl	8009b9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b576:	4b0b      	ldr	r3, [pc, #44]	; (800b5a4 <prvInitialiseTaskLists+0x78>)
 800b578:	4a05      	ldr	r2, [pc, #20]	; (800b590 <prvInitialiseTaskLists+0x64>)
 800b57a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b57c:	4b0a      	ldr	r3, [pc, #40]	; (800b5a8 <prvInitialiseTaskLists+0x7c>)
 800b57e:	4a05      	ldr	r2, [pc, #20]	; (800b594 <prvInitialiseTaskLists+0x68>)
 800b580:	601a      	str	r2, [r3, #0]
}
 800b582:	bf00      	nop
 800b584:	3708      	adds	r7, #8
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}
 800b58a:	bf00      	nop
 800b58c:	200054f8 	.word	0x200054f8
 800b590:	20005958 	.word	0x20005958
 800b594:	2000596c 	.word	0x2000596c
 800b598:	20005988 	.word	0x20005988
 800b59c:	2000599c 	.word	0x2000599c
 800b5a0:	200059b4 	.word	0x200059b4
 800b5a4:	20005980 	.word	0x20005980
 800b5a8:	20005984 	.word	0x20005984

0800b5ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b082      	sub	sp, #8
 800b5b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b5b2:	e019      	b.n	800b5e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b5b4:	f000 fed6 	bl	800c364 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5b8:	4b10      	ldr	r3, [pc, #64]	; (800b5fc <prvCheckTasksWaitingTermination+0x50>)
 800b5ba:	68db      	ldr	r3, [r3, #12]
 800b5bc:	68db      	ldr	r3, [r3, #12]
 800b5be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	3304      	adds	r3, #4
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f7fe fb73 	bl	8009cb0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b5ca:	4b0d      	ldr	r3, [pc, #52]	; (800b600 <prvCheckTasksWaitingTermination+0x54>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	3b01      	subs	r3, #1
 800b5d0:	4a0b      	ldr	r2, [pc, #44]	; (800b600 <prvCheckTasksWaitingTermination+0x54>)
 800b5d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b5d4:	4b0b      	ldr	r3, [pc, #44]	; (800b604 <prvCheckTasksWaitingTermination+0x58>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	3b01      	subs	r3, #1
 800b5da:	4a0a      	ldr	r2, [pc, #40]	; (800b604 <prvCheckTasksWaitingTermination+0x58>)
 800b5dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b5de:	f000 fef1 	bl	800c3c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f000 f810 	bl	800b608 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b5e8:	4b06      	ldr	r3, [pc, #24]	; (800b604 <prvCheckTasksWaitingTermination+0x58>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d1e1      	bne.n	800b5b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b5f0:	bf00      	nop
 800b5f2:	bf00      	nop
 800b5f4:	3708      	adds	r7, #8
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}
 800b5fa:	bf00      	nop
 800b5fc:	2000599c 	.word	0x2000599c
 800b600:	200059c8 	.word	0x200059c8
 800b604:	200059b0 	.word	0x200059b0

0800b608 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b084      	sub	sp, #16
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	3354      	adds	r3, #84	; 0x54
 800b614:	4618      	mov	r0, r3
 800b616:	f00d f849 	bl	80186ac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b620:	2b00      	cmp	r3, #0
 800b622:	d108      	bne.n	800b636 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b628:	4618      	mov	r0, r3
 800b62a:	f001 f889 	bl	800c740 <vPortFree>
				vPortFree( pxTCB );
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f001 f886 	bl	800c740 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b634:	e018      	b.n	800b668 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b63c:	2b01      	cmp	r3, #1
 800b63e:	d103      	bne.n	800b648 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f001 f87d 	bl	800c740 <vPortFree>
	}
 800b646:	e00f      	b.n	800b668 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b64e:	2b02      	cmp	r3, #2
 800b650:	d00a      	beq.n	800b668 <prvDeleteTCB+0x60>
	__asm volatile
 800b652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b656:	f383 8811 	msr	BASEPRI, r3
 800b65a:	f3bf 8f6f 	isb	sy
 800b65e:	f3bf 8f4f 	dsb	sy
 800b662:	60fb      	str	r3, [r7, #12]
}
 800b664:	bf00      	nop
 800b666:	e7fe      	b.n	800b666 <prvDeleteTCB+0x5e>
	}
 800b668:	bf00      	nop
 800b66a:	3710      	adds	r7, #16
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}

0800b670 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b670:	b480      	push	{r7}
 800b672:	b083      	sub	sp, #12
 800b674:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b676:	4b0c      	ldr	r3, [pc, #48]	; (800b6a8 <prvResetNextTaskUnblockTime+0x38>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d104      	bne.n	800b68a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b680:	4b0a      	ldr	r3, [pc, #40]	; (800b6ac <prvResetNextTaskUnblockTime+0x3c>)
 800b682:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b686:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b688:	e008      	b.n	800b69c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b68a:	4b07      	ldr	r3, [pc, #28]	; (800b6a8 <prvResetNextTaskUnblockTime+0x38>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	68db      	ldr	r3, [r3, #12]
 800b690:	68db      	ldr	r3, [r3, #12]
 800b692:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	685b      	ldr	r3, [r3, #4]
 800b698:	4a04      	ldr	r2, [pc, #16]	; (800b6ac <prvResetNextTaskUnblockTime+0x3c>)
 800b69a:	6013      	str	r3, [r2, #0]
}
 800b69c:	bf00      	nop
 800b69e:	370c      	adds	r7, #12
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a6:	4770      	bx	lr
 800b6a8:	20005980 	.word	0x20005980
 800b6ac:	200059e8 	.word	0x200059e8

0800b6b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b6b0:	b480      	push	{r7}
 800b6b2:	b083      	sub	sp, #12
 800b6b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b6b6:	4b0b      	ldr	r3, [pc, #44]	; (800b6e4 <xTaskGetSchedulerState+0x34>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d102      	bne.n	800b6c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b6be:	2301      	movs	r3, #1
 800b6c0:	607b      	str	r3, [r7, #4]
 800b6c2:	e008      	b.n	800b6d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6c4:	4b08      	ldr	r3, [pc, #32]	; (800b6e8 <xTaskGetSchedulerState+0x38>)
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d102      	bne.n	800b6d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b6cc:	2302      	movs	r3, #2
 800b6ce:	607b      	str	r3, [r7, #4]
 800b6d0:	e001      	b.n	800b6d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b6d6:	687b      	ldr	r3, [r7, #4]
	}
 800b6d8:	4618      	mov	r0, r3
 800b6da:	370c      	adds	r7, #12
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e2:	4770      	bx	lr
 800b6e4:	200059d4 	.word	0x200059d4
 800b6e8:	200059f0 	.word	0x200059f0

0800b6ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b084      	sub	sp, #16
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d051      	beq.n	800b7a6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b706:	4b2a      	ldr	r3, [pc, #168]	; (800b7b0 <xTaskPriorityInherit+0xc4>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b70c:	429a      	cmp	r2, r3
 800b70e:	d241      	bcs.n	800b794 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	699b      	ldr	r3, [r3, #24]
 800b714:	2b00      	cmp	r3, #0
 800b716:	db06      	blt.n	800b726 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b718:	4b25      	ldr	r3, [pc, #148]	; (800b7b0 <xTaskPriorityInherit+0xc4>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b71e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	6959      	ldr	r1, [r3, #20]
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b72e:	4613      	mov	r3, r2
 800b730:	009b      	lsls	r3, r3, #2
 800b732:	4413      	add	r3, r2
 800b734:	009b      	lsls	r3, r3, #2
 800b736:	4a1f      	ldr	r2, [pc, #124]	; (800b7b4 <xTaskPriorityInherit+0xc8>)
 800b738:	4413      	add	r3, r2
 800b73a:	4299      	cmp	r1, r3
 800b73c:	d122      	bne.n	800b784 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	3304      	adds	r3, #4
 800b742:	4618      	mov	r0, r3
 800b744:	f7fe fab4 	bl	8009cb0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b748:	4b19      	ldr	r3, [pc, #100]	; (800b7b0 <xTaskPriorityInherit+0xc4>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b756:	4b18      	ldr	r3, [pc, #96]	; (800b7b8 <xTaskPriorityInherit+0xcc>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	429a      	cmp	r2, r3
 800b75c:	d903      	bls.n	800b766 <xTaskPriorityInherit+0x7a>
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b762:	4a15      	ldr	r2, [pc, #84]	; (800b7b8 <xTaskPriorityInherit+0xcc>)
 800b764:	6013      	str	r3, [r2, #0]
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b76a:	4613      	mov	r3, r2
 800b76c:	009b      	lsls	r3, r3, #2
 800b76e:	4413      	add	r3, r2
 800b770:	009b      	lsls	r3, r3, #2
 800b772:	4a10      	ldr	r2, [pc, #64]	; (800b7b4 <xTaskPriorityInherit+0xc8>)
 800b774:	441a      	add	r2, r3
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	3304      	adds	r3, #4
 800b77a:	4619      	mov	r1, r3
 800b77c:	4610      	mov	r0, r2
 800b77e:	f7fe fa3a 	bl	8009bf6 <vListInsertEnd>
 800b782:	e004      	b.n	800b78e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b784:	4b0a      	ldr	r3, [pc, #40]	; (800b7b0 <xTaskPriorityInherit+0xc4>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b78a:	68bb      	ldr	r3, [r7, #8]
 800b78c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b78e:	2301      	movs	r3, #1
 800b790:	60fb      	str	r3, [r7, #12]
 800b792:	e008      	b.n	800b7a6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b798:	4b05      	ldr	r3, [pc, #20]	; (800b7b0 <xTaskPriorityInherit+0xc4>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b79e:	429a      	cmp	r2, r3
 800b7a0:	d201      	bcs.n	800b7a6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
	}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3710      	adds	r7, #16
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}
 800b7b0:	200054f4 	.word	0x200054f4
 800b7b4:	200054f8 	.word	0x200054f8
 800b7b8:	200059d0 	.word	0x200059d0

0800b7bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b086      	sub	sp, #24
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d056      	beq.n	800b880 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b7d2:	4b2e      	ldr	r3, [pc, #184]	; (800b88c <xTaskPriorityDisinherit+0xd0>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	693a      	ldr	r2, [r7, #16]
 800b7d8:	429a      	cmp	r2, r3
 800b7da:	d00a      	beq.n	800b7f2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e0:	f383 8811 	msr	BASEPRI, r3
 800b7e4:	f3bf 8f6f 	isb	sy
 800b7e8:	f3bf 8f4f 	dsb	sy
 800b7ec:	60fb      	str	r3, [r7, #12]
}
 800b7ee:	bf00      	nop
 800b7f0:	e7fe      	b.n	800b7f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b7f2:	693b      	ldr	r3, [r7, #16]
 800b7f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d10a      	bne.n	800b810 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b7fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7fe:	f383 8811 	msr	BASEPRI, r3
 800b802:	f3bf 8f6f 	isb	sy
 800b806:	f3bf 8f4f 	dsb	sy
 800b80a:	60bb      	str	r3, [r7, #8]
}
 800b80c:	bf00      	nop
 800b80e:	e7fe      	b.n	800b80e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b814:	1e5a      	subs	r2, r3, #1
 800b816:	693b      	ldr	r3, [r7, #16]
 800b818:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b81a:	693b      	ldr	r3, [r7, #16]
 800b81c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b81e:	693b      	ldr	r3, [r7, #16]
 800b820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b822:	429a      	cmp	r2, r3
 800b824:	d02c      	beq.n	800b880 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d128      	bne.n	800b880 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	3304      	adds	r3, #4
 800b832:	4618      	mov	r0, r3
 800b834:	f7fe fa3c 	bl	8009cb0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b83c:	693b      	ldr	r3, [r7, #16]
 800b83e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b840:	693b      	ldr	r3, [r7, #16]
 800b842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b844:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b848:	693b      	ldr	r3, [r7, #16]
 800b84a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b84c:	693b      	ldr	r3, [r7, #16]
 800b84e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b850:	4b0f      	ldr	r3, [pc, #60]	; (800b890 <xTaskPriorityDisinherit+0xd4>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	429a      	cmp	r2, r3
 800b856:	d903      	bls.n	800b860 <xTaskPriorityDisinherit+0xa4>
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b85c:	4a0c      	ldr	r2, [pc, #48]	; (800b890 <xTaskPriorityDisinherit+0xd4>)
 800b85e:	6013      	str	r3, [r2, #0]
 800b860:	693b      	ldr	r3, [r7, #16]
 800b862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b864:	4613      	mov	r3, r2
 800b866:	009b      	lsls	r3, r3, #2
 800b868:	4413      	add	r3, r2
 800b86a:	009b      	lsls	r3, r3, #2
 800b86c:	4a09      	ldr	r2, [pc, #36]	; (800b894 <xTaskPriorityDisinherit+0xd8>)
 800b86e:	441a      	add	r2, r3
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	3304      	adds	r3, #4
 800b874:	4619      	mov	r1, r3
 800b876:	4610      	mov	r0, r2
 800b878:	f7fe f9bd 	bl	8009bf6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b87c:	2301      	movs	r3, #1
 800b87e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b880:	697b      	ldr	r3, [r7, #20]
	}
 800b882:	4618      	mov	r0, r3
 800b884:	3718      	adds	r7, #24
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}
 800b88a:	bf00      	nop
 800b88c:	200054f4 	.word	0x200054f4
 800b890:	200059d0 	.word	0x200059d0
 800b894:	200054f8 	.word	0x200054f8

0800b898 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b088      	sub	sp, #32
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
 800b8a0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b8a6:	2301      	movs	r3, #1
 800b8a8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d06a      	beq.n	800b986 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b8b0:	69bb      	ldr	r3, [r7, #24]
 800b8b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d10a      	bne.n	800b8ce <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b8b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8bc:	f383 8811 	msr	BASEPRI, r3
 800b8c0:	f3bf 8f6f 	isb	sy
 800b8c4:	f3bf 8f4f 	dsb	sy
 800b8c8:	60fb      	str	r3, [r7, #12]
}
 800b8ca:	bf00      	nop
 800b8cc:	e7fe      	b.n	800b8cc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b8ce:	69bb      	ldr	r3, [r7, #24]
 800b8d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8d2:	683a      	ldr	r2, [r7, #0]
 800b8d4:	429a      	cmp	r2, r3
 800b8d6:	d902      	bls.n	800b8de <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	61fb      	str	r3, [r7, #28]
 800b8dc:	e002      	b.n	800b8e4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b8de:	69bb      	ldr	r3, [r7, #24]
 800b8e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8e2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b8e4:	69bb      	ldr	r3, [r7, #24]
 800b8e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8e8:	69fa      	ldr	r2, [r7, #28]
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	d04b      	beq.n	800b986 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b8ee:	69bb      	ldr	r3, [r7, #24]
 800b8f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8f2:	697a      	ldr	r2, [r7, #20]
 800b8f4:	429a      	cmp	r2, r3
 800b8f6:	d146      	bne.n	800b986 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b8f8:	4b25      	ldr	r3, [pc, #148]	; (800b990 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	69ba      	ldr	r2, [r7, #24]
 800b8fe:	429a      	cmp	r2, r3
 800b900:	d10a      	bne.n	800b918 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b902:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b906:	f383 8811 	msr	BASEPRI, r3
 800b90a:	f3bf 8f6f 	isb	sy
 800b90e:	f3bf 8f4f 	dsb	sy
 800b912:	60bb      	str	r3, [r7, #8]
}
 800b914:	bf00      	nop
 800b916:	e7fe      	b.n	800b916 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b918:	69bb      	ldr	r3, [r7, #24]
 800b91a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b91c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b91e:	69bb      	ldr	r3, [r7, #24]
 800b920:	69fa      	ldr	r2, [r7, #28]
 800b922:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b924:	69bb      	ldr	r3, [r7, #24]
 800b926:	699b      	ldr	r3, [r3, #24]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	db04      	blt.n	800b936 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b92c:	69fb      	ldr	r3, [r7, #28]
 800b92e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b932:	69bb      	ldr	r3, [r7, #24]
 800b934:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b936:	69bb      	ldr	r3, [r7, #24]
 800b938:	6959      	ldr	r1, [r3, #20]
 800b93a:	693a      	ldr	r2, [r7, #16]
 800b93c:	4613      	mov	r3, r2
 800b93e:	009b      	lsls	r3, r3, #2
 800b940:	4413      	add	r3, r2
 800b942:	009b      	lsls	r3, r3, #2
 800b944:	4a13      	ldr	r2, [pc, #76]	; (800b994 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b946:	4413      	add	r3, r2
 800b948:	4299      	cmp	r1, r3
 800b94a:	d11c      	bne.n	800b986 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b94c:	69bb      	ldr	r3, [r7, #24]
 800b94e:	3304      	adds	r3, #4
 800b950:	4618      	mov	r0, r3
 800b952:	f7fe f9ad 	bl	8009cb0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b956:	69bb      	ldr	r3, [r7, #24]
 800b958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b95a:	4b0f      	ldr	r3, [pc, #60]	; (800b998 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	429a      	cmp	r2, r3
 800b960:	d903      	bls.n	800b96a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800b962:	69bb      	ldr	r3, [r7, #24]
 800b964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b966:	4a0c      	ldr	r2, [pc, #48]	; (800b998 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b968:	6013      	str	r3, [r2, #0]
 800b96a:	69bb      	ldr	r3, [r7, #24]
 800b96c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b96e:	4613      	mov	r3, r2
 800b970:	009b      	lsls	r3, r3, #2
 800b972:	4413      	add	r3, r2
 800b974:	009b      	lsls	r3, r3, #2
 800b976:	4a07      	ldr	r2, [pc, #28]	; (800b994 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b978:	441a      	add	r2, r3
 800b97a:	69bb      	ldr	r3, [r7, #24]
 800b97c:	3304      	adds	r3, #4
 800b97e:	4619      	mov	r1, r3
 800b980:	4610      	mov	r0, r2
 800b982:	f7fe f938 	bl	8009bf6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b986:	bf00      	nop
 800b988:	3720      	adds	r7, #32
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}
 800b98e:	bf00      	nop
 800b990:	200054f4 	.word	0x200054f4
 800b994:	200054f8 	.word	0x200054f8
 800b998:	200059d0 	.word	0x200059d0

0800b99c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b99c:	b480      	push	{r7}
 800b99e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b9a0:	4b07      	ldr	r3, [pc, #28]	; (800b9c0 <pvTaskIncrementMutexHeldCount+0x24>)
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d004      	beq.n	800b9b2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b9a8:	4b05      	ldr	r3, [pc, #20]	; (800b9c0 <pvTaskIncrementMutexHeldCount+0x24>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b9ae:	3201      	adds	r2, #1
 800b9b0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b9b2:	4b03      	ldr	r3, [pc, #12]	; (800b9c0 <pvTaskIncrementMutexHeldCount+0x24>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
	}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9be:	4770      	bx	lr
 800b9c0:	200054f4 	.word	0x200054f4

0800b9c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b084      	sub	sp, #16
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
 800b9cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b9ce:	4b21      	ldr	r3, [pc, #132]	; (800ba54 <prvAddCurrentTaskToDelayedList+0x90>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b9d4:	4b20      	ldr	r3, [pc, #128]	; (800ba58 <prvAddCurrentTaskToDelayedList+0x94>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	3304      	adds	r3, #4
 800b9da:	4618      	mov	r0, r3
 800b9dc:	f7fe f968 	bl	8009cb0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b9e6:	d10a      	bne.n	800b9fe <prvAddCurrentTaskToDelayedList+0x3a>
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d007      	beq.n	800b9fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b9ee:	4b1a      	ldr	r3, [pc, #104]	; (800ba58 <prvAddCurrentTaskToDelayedList+0x94>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	3304      	adds	r3, #4
 800b9f4:	4619      	mov	r1, r3
 800b9f6:	4819      	ldr	r0, [pc, #100]	; (800ba5c <prvAddCurrentTaskToDelayedList+0x98>)
 800b9f8:	f7fe f8fd 	bl	8009bf6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b9fc:	e026      	b.n	800ba4c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b9fe:	68fa      	ldr	r2, [r7, #12]
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	4413      	add	r3, r2
 800ba04:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ba06:	4b14      	ldr	r3, [pc, #80]	; (800ba58 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	68ba      	ldr	r2, [r7, #8]
 800ba0c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ba0e:	68ba      	ldr	r2, [r7, #8]
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	429a      	cmp	r2, r3
 800ba14:	d209      	bcs.n	800ba2a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba16:	4b12      	ldr	r3, [pc, #72]	; (800ba60 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ba18:	681a      	ldr	r2, [r3, #0]
 800ba1a:	4b0f      	ldr	r3, [pc, #60]	; (800ba58 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	3304      	adds	r3, #4
 800ba20:	4619      	mov	r1, r3
 800ba22:	4610      	mov	r0, r2
 800ba24:	f7fe f90b 	bl	8009c3e <vListInsert>
}
 800ba28:	e010      	b.n	800ba4c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba2a:	4b0e      	ldr	r3, [pc, #56]	; (800ba64 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ba2c:	681a      	ldr	r2, [r3, #0]
 800ba2e:	4b0a      	ldr	r3, [pc, #40]	; (800ba58 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	3304      	adds	r3, #4
 800ba34:	4619      	mov	r1, r3
 800ba36:	4610      	mov	r0, r2
 800ba38:	f7fe f901 	bl	8009c3e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ba3c:	4b0a      	ldr	r3, [pc, #40]	; (800ba68 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	68ba      	ldr	r2, [r7, #8]
 800ba42:	429a      	cmp	r2, r3
 800ba44:	d202      	bcs.n	800ba4c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ba46:	4a08      	ldr	r2, [pc, #32]	; (800ba68 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	6013      	str	r3, [r2, #0]
}
 800ba4c:	bf00      	nop
 800ba4e:	3710      	adds	r7, #16
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}
 800ba54:	200059cc 	.word	0x200059cc
 800ba58:	200054f4 	.word	0x200054f4
 800ba5c:	200059b4 	.word	0x200059b4
 800ba60:	20005984 	.word	0x20005984
 800ba64:	20005980 	.word	0x20005980
 800ba68:	200059e8 	.word	0x200059e8

0800ba6c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b08a      	sub	sp, #40	; 0x28
 800ba70:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ba72:	2300      	movs	r3, #0
 800ba74:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ba76:	f000 fb07 	bl	800c088 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ba7a:	4b1c      	ldr	r3, [pc, #112]	; (800baec <xTimerCreateTimerTask+0x80>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d021      	beq.n	800bac6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ba82:	2300      	movs	r3, #0
 800ba84:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ba86:	2300      	movs	r3, #0
 800ba88:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ba8a:	1d3a      	adds	r2, r7, #4
 800ba8c:	f107 0108 	add.w	r1, r7, #8
 800ba90:	f107 030c 	add.w	r3, r7, #12
 800ba94:	4618      	mov	r0, r3
 800ba96:	f7fe f867 	bl	8009b68 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ba9a:	6879      	ldr	r1, [r7, #4]
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	68fa      	ldr	r2, [r7, #12]
 800baa0:	9202      	str	r2, [sp, #8]
 800baa2:	9301      	str	r3, [sp, #4]
 800baa4:	2302      	movs	r3, #2
 800baa6:	9300      	str	r3, [sp, #0]
 800baa8:	2300      	movs	r3, #0
 800baaa:	460a      	mov	r2, r1
 800baac:	4910      	ldr	r1, [pc, #64]	; (800baf0 <xTimerCreateTimerTask+0x84>)
 800baae:	4811      	ldr	r0, [pc, #68]	; (800baf4 <xTimerCreateTimerTask+0x88>)
 800bab0:	f7fe ff90 	bl	800a9d4 <xTaskCreateStatic>
 800bab4:	4603      	mov	r3, r0
 800bab6:	4a10      	ldr	r2, [pc, #64]	; (800baf8 <xTimerCreateTimerTask+0x8c>)
 800bab8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800baba:	4b0f      	ldr	r3, [pc, #60]	; (800baf8 <xTimerCreateTimerTask+0x8c>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d001      	beq.n	800bac6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bac2:	2301      	movs	r3, #1
 800bac4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bac6:	697b      	ldr	r3, [r7, #20]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d10a      	bne.n	800bae2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800bacc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad0:	f383 8811 	msr	BASEPRI, r3
 800bad4:	f3bf 8f6f 	isb	sy
 800bad8:	f3bf 8f4f 	dsb	sy
 800badc:	613b      	str	r3, [r7, #16]
}
 800bade:	bf00      	nop
 800bae0:	e7fe      	b.n	800bae0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bae2:	697b      	ldr	r3, [r7, #20]
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	3718      	adds	r7, #24
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}
 800baec:	20005a24 	.word	0x20005a24
 800baf0:	0801985c 	.word	0x0801985c
 800baf4:	0800bc31 	.word	0x0800bc31
 800baf8:	20005a28 	.word	0x20005a28

0800bafc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b08a      	sub	sp, #40	; 0x28
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	60f8      	str	r0, [r7, #12]
 800bb04:	60b9      	str	r1, [r7, #8]
 800bb06:	607a      	str	r2, [r7, #4]
 800bb08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d10a      	bne.n	800bb2a <xTimerGenericCommand+0x2e>
	__asm volatile
 800bb14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb18:	f383 8811 	msr	BASEPRI, r3
 800bb1c:	f3bf 8f6f 	isb	sy
 800bb20:	f3bf 8f4f 	dsb	sy
 800bb24:	623b      	str	r3, [r7, #32]
}
 800bb26:	bf00      	nop
 800bb28:	e7fe      	b.n	800bb28 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bb2a:	4b1a      	ldr	r3, [pc, #104]	; (800bb94 <xTimerGenericCommand+0x98>)
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d02a      	beq.n	800bb88 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bb3e:	68bb      	ldr	r3, [r7, #8]
 800bb40:	2b05      	cmp	r3, #5
 800bb42:	dc18      	bgt.n	800bb76 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bb44:	f7ff fdb4 	bl	800b6b0 <xTaskGetSchedulerState>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	2b02      	cmp	r3, #2
 800bb4c:	d109      	bne.n	800bb62 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bb4e:	4b11      	ldr	r3, [pc, #68]	; (800bb94 <xTimerGenericCommand+0x98>)
 800bb50:	6818      	ldr	r0, [r3, #0]
 800bb52:	f107 0110 	add.w	r1, r7, #16
 800bb56:	2300      	movs	r3, #0
 800bb58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb5a:	f7fe fa11 	bl	8009f80 <xQueueGenericSend>
 800bb5e:	6278      	str	r0, [r7, #36]	; 0x24
 800bb60:	e012      	b.n	800bb88 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bb62:	4b0c      	ldr	r3, [pc, #48]	; (800bb94 <xTimerGenericCommand+0x98>)
 800bb64:	6818      	ldr	r0, [r3, #0]
 800bb66:	f107 0110 	add.w	r1, r7, #16
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	f7fe fa07 	bl	8009f80 <xQueueGenericSend>
 800bb72:	6278      	str	r0, [r7, #36]	; 0x24
 800bb74:	e008      	b.n	800bb88 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bb76:	4b07      	ldr	r3, [pc, #28]	; (800bb94 <xTimerGenericCommand+0x98>)
 800bb78:	6818      	ldr	r0, [r3, #0]
 800bb7a:	f107 0110 	add.w	r1, r7, #16
 800bb7e:	2300      	movs	r3, #0
 800bb80:	683a      	ldr	r2, [r7, #0]
 800bb82:	f7fe fafb 	bl	800a17c <xQueueGenericSendFromISR>
 800bb86:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bb88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	3728      	adds	r7, #40	; 0x28
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}
 800bb92:	bf00      	nop
 800bb94:	20005a24 	.word	0x20005a24

0800bb98 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b088      	sub	sp, #32
 800bb9c:	af02      	add	r7, sp, #8
 800bb9e:	6078      	str	r0, [r7, #4]
 800bba0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bba2:	4b22      	ldr	r3, [pc, #136]	; (800bc2c <prvProcessExpiredTimer+0x94>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	68db      	ldr	r3, [r3, #12]
 800bba8:	68db      	ldr	r3, [r3, #12]
 800bbaa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bbac:	697b      	ldr	r3, [r7, #20]
 800bbae:	3304      	adds	r3, #4
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	f7fe f87d 	bl	8009cb0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bbbc:	f003 0304 	and.w	r3, r3, #4
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d022      	beq.n	800bc0a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bbc4:	697b      	ldr	r3, [r7, #20]
 800bbc6:	699a      	ldr	r2, [r3, #24]
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	18d1      	adds	r1, r2, r3
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	683a      	ldr	r2, [r7, #0]
 800bbd0:	6978      	ldr	r0, [r7, #20]
 800bbd2:	f000 f8d1 	bl	800bd78 <prvInsertTimerInActiveList>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d01f      	beq.n	800bc1c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bbdc:	2300      	movs	r3, #0
 800bbde:	9300      	str	r3, [sp, #0]
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	687a      	ldr	r2, [r7, #4]
 800bbe4:	2100      	movs	r1, #0
 800bbe6:	6978      	ldr	r0, [r7, #20]
 800bbe8:	f7ff ff88 	bl	800bafc <xTimerGenericCommand>
 800bbec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bbee:	693b      	ldr	r3, [r7, #16]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d113      	bne.n	800bc1c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800bbf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf8:	f383 8811 	msr	BASEPRI, r3
 800bbfc:	f3bf 8f6f 	isb	sy
 800bc00:	f3bf 8f4f 	dsb	sy
 800bc04:	60fb      	str	r3, [r7, #12]
}
 800bc06:	bf00      	nop
 800bc08:	e7fe      	b.n	800bc08 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc10:	f023 0301 	bic.w	r3, r3, #1
 800bc14:	b2da      	uxtb	r2, r3
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bc1c:	697b      	ldr	r3, [r7, #20]
 800bc1e:	6a1b      	ldr	r3, [r3, #32]
 800bc20:	6978      	ldr	r0, [r7, #20]
 800bc22:	4798      	blx	r3
}
 800bc24:	bf00      	nop
 800bc26:	3718      	adds	r7, #24
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd80      	pop	{r7, pc}
 800bc2c:	20005a1c 	.word	0x20005a1c

0800bc30 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b084      	sub	sp, #16
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bc38:	f107 0308 	add.w	r3, r7, #8
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f000 f857 	bl	800bcf0 <prvGetNextExpireTime>
 800bc42:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	4619      	mov	r1, r3
 800bc48:	68f8      	ldr	r0, [r7, #12]
 800bc4a:	f000 f803 	bl	800bc54 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bc4e:	f000 f8d5 	bl	800bdfc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bc52:	e7f1      	b.n	800bc38 <prvTimerTask+0x8>

0800bc54 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b084      	sub	sp, #16
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
 800bc5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bc5e:	f7ff f915 	bl	800ae8c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bc62:	f107 0308 	add.w	r3, r7, #8
 800bc66:	4618      	mov	r0, r3
 800bc68:	f000 f866 	bl	800bd38 <prvSampleTimeNow>
 800bc6c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bc6e:	68bb      	ldr	r3, [r7, #8]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d130      	bne.n	800bcd6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d10a      	bne.n	800bc90 <prvProcessTimerOrBlockTask+0x3c>
 800bc7a:	687a      	ldr	r2, [r7, #4]
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	429a      	cmp	r2, r3
 800bc80:	d806      	bhi.n	800bc90 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bc82:	f7ff f911 	bl	800aea8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bc86:	68f9      	ldr	r1, [r7, #12]
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f7ff ff85 	bl	800bb98 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bc8e:	e024      	b.n	800bcda <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d008      	beq.n	800bca8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bc96:	4b13      	ldr	r3, [pc, #76]	; (800bce4 <prvProcessTimerOrBlockTask+0x90>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d101      	bne.n	800bca4 <prvProcessTimerOrBlockTask+0x50>
 800bca0:	2301      	movs	r3, #1
 800bca2:	e000      	b.n	800bca6 <prvProcessTimerOrBlockTask+0x52>
 800bca4:	2300      	movs	r3, #0
 800bca6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bca8:	4b0f      	ldr	r3, [pc, #60]	; (800bce8 <prvProcessTimerOrBlockTask+0x94>)
 800bcaa:	6818      	ldr	r0, [r3, #0]
 800bcac:	687a      	ldr	r2, [r7, #4]
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	1ad3      	subs	r3, r2, r3
 800bcb2:	683a      	ldr	r2, [r7, #0]
 800bcb4:	4619      	mov	r1, r3
 800bcb6:	f7fe fe59 	bl	800a96c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bcba:	f7ff f8f5 	bl	800aea8 <xTaskResumeAll>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d10a      	bne.n	800bcda <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bcc4:	4b09      	ldr	r3, [pc, #36]	; (800bcec <prvProcessTimerOrBlockTask+0x98>)
 800bcc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcca:	601a      	str	r2, [r3, #0]
 800bccc:	f3bf 8f4f 	dsb	sy
 800bcd0:	f3bf 8f6f 	isb	sy
}
 800bcd4:	e001      	b.n	800bcda <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bcd6:	f7ff f8e7 	bl	800aea8 <xTaskResumeAll>
}
 800bcda:	bf00      	nop
 800bcdc:	3710      	adds	r7, #16
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}
 800bce2:	bf00      	nop
 800bce4:	20005a20 	.word	0x20005a20
 800bce8:	20005a24 	.word	0x20005a24
 800bcec:	e000ed04 	.word	0xe000ed04

0800bcf0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b085      	sub	sp, #20
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bcf8:	4b0e      	ldr	r3, [pc, #56]	; (800bd34 <prvGetNextExpireTime+0x44>)
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d101      	bne.n	800bd06 <prvGetNextExpireTime+0x16>
 800bd02:	2201      	movs	r2, #1
 800bd04:	e000      	b.n	800bd08 <prvGetNextExpireTime+0x18>
 800bd06:	2200      	movs	r2, #0
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d105      	bne.n	800bd20 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bd14:	4b07      	ldr	r3, [pc, #28]	; (800bd34 <prvGetNextExpireTime+0x44>)
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	68db      	ldr	r3, [r3, #12]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	60fb      	str	r3, [r7, #12]
 800bd1e:	e001      	b.n	800bd24 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bd20:	2300      	movs	r3, #0
 800bd22:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bd24:	68fb      	ldr	r3, [r7, #12]
}
 800bd26:	4618      	mov	r0, r3
 800bd28:	3714      	adds	r7, #20
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd30:	4770      	bx	lr
 800bd32:	bf00      	nop
 800bd34:	20005a1c 	.word	0x20005a1c

0800bd38 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b084      	sub	sp, #16
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bd40:	f7ff f950 	bl	800afe4 <xTaskGetTickCount>
 800bd44:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bd46:	4b0b      	ldr	r3, [pc, #44]	; (800bd74 <prvSampleTimeNow+0x3c>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	68fa      	ldr	r2, [r7, #12]
 800bd4c:	429a      	cmp	r2, r3
 800bd4e:	d205      	bcs.n	800bd5c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bd50:	f000 f936 	bl	800bfc0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2201      	movs	r2, #1
 800bd58:	601a      	str	r2, [r3, #0]
 800bd5a:	e002      	b.n	800bd62 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2200      	movs	r2, #0
 800bd60:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bd62:	4a04      	ldr	r2, [pc, #16]	; (800bd74 <prvSampleTimeNow+0x3c>)
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bd68:	68fb      	ldr	r3, [r7, #12]
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3710      	adds	r7, #16
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}
 800bd72:	bf00      	nop
 800bd74:	20005a2c 	.word	0x20005a2c

0800bd78 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b086      	sub	sp, #24
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	60f8      	str	r0, [r7, #12]
 800bd80:	60b9      	str	r1, [r7, #8]
 800bd82:	607a      	str	r2, [r7, #4]
 800bd84:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bd86:	2300      	movs	r3, #0
 800bd88:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	68ba      	ldr	r2, [r7, #8]
 800bd8e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	68fa      	ldr	r2, [r7, #12]
 800bd94:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bd96:	68ba      	ldr	r2, [r7, #8]
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	429a      	cmp	r2, r3
 800bd9c:	d812      	bhi.n	800bdc4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd9e:	687a      	ldr	r2, [r7, #4]
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	1ad2      	subs	r2, r2, r3
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	699b      	ldr	r3, [r3, #24]
 800bda8:	429a      	cmp	r2, r3
 800bdaa:	d302      	bcc.n	800bdb2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bdac:	2301      	movs	r3, #1
 800bdae:	617b      	str	r3, [r7, #20]
 800bdb0:	e01b      	b.n	800bdea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bdb2:	4b10      	ldr	r3, [pc, #64]	; (800bdf4 <prvInsertTimerInActiveList+0x7c>)
 800bdb4:	681a      	ldr	r2, [r3, #0]
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	3304      	adds	r3, #4
 800bdba:	4619      	mov	r1, r3
 800bdbc:	4610      	mov	r0, r2
 800bdbe:	f7fd ff3e 	bl	8009c3e <vListInsert>
 800bdc2:	e012      	b.n	800bdea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bdc4:	687a      	ldr	r2, [r7, #4]
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	429a      	cmp	r2, r3
 800bdca:	d206      	bcs.n	800bdda <prvInsertTimerInActiveList+0x62>
 800bdcc:	68ba      	ldr	r2, [r7, #8]
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	429a      	cmp	r2, r3
 800bdd2:	d302      	bcc.n	800bdda <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bdd4:	2301      	movs	r3, #1
 800bdd6:	617b      	str	r3, [r7, #20]
 800bdd8:	e007      	b.n	800bdea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bdda:	4b07      	ldr	r3, [pc, #28]	; (800bdf8 <prvInsertTimerInActiveList+0x80>)
 800bddc:	681a      	ldr	r2, [r3, #0]
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	3304      	adds	r3, #4
 800bde2:	4619      	mov	r1, r3
 800bde4:	4610      	mov	r0, r2
 800bde6:	f7fd ff2a 	bl	8009c3e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bdea:	697b      	ldr	r3, [r7, #20]
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	3718      	adds	r7, #24
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bd80      	pop	{r7, pc}
 800bdf4:	20005a20 	.word	0x20005a20
 800bdf8:	20005a1c 	.word	0x20005a1c

0800bdfc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b08e      	sub	sp, #56	; 0x38
 800be00:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800be02:	e0ca      	b.n	800bf9a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2b00      	cmp	r3, #0
 800be08:	da18      	bge.n	800be3c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800be0a:	1d3b      	adds	r3, r7, #4
 800be0c:	3304      	adds	r3, #4
 800be0e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800be10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be12:	2b00      	cmp	r3, #0
 800be14:	d10a      	bne.n	800be2c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800be16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be1a:	f383 8811 	msr	BASEPRI, r3
 800be1e:	f3bf 8f6f 	isb	sy
 800be22:	f3bf 8f4f 	dsb	sy
 800be26:	61fb      	str	r3, [r7, #28]
}
 800be28:	bf00      	nop
 800be2a:	e7fe      	b.n	800be2a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800be2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be32:	6850      	ldr	r0, [r2, #4]
 800be34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be36:	6892      	ldr	r2, [r2, #8]
 800be38:	4611      	mov	r1, r2
 800be3a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	f2c0 80ab 	blt.w	800bf9a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800be48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be4a:	695b      	ldr	r3, [r3, #20]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d004      	beq.n	800be5a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800be50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be52:	3304      	adds	r3, #4
 800be54:	4618      	mov	r0, r3
 800be56:	f7fd ff2b 	bl	8009cb0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800be5a:	463b      	mov	r3, r7
 800be5c:	4618      	mov	r0, r3
 800be5e:	f7ff ff6b 	bl	800bd38 <prvSampleTimeNow>
 800be62:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2b09      	cmp	r3, #9
 800be68:	f200 8096 	bhi.w	800bf98 <prvProcessReceivedCommands+0x19c>
 800be6c:	a201      	add	r2, pc, #4	; (adr r2, 800be74 <prvProcessReceivedCommands+0x78>)
 800be6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be72:	bf00      	nop
 800be74:	0800be9d 	.word	0x0800be9d
 800be78:	0800be9d 	.word	0x0800be9d
 800be7c:	0800be9d 	.word	0x0800be9d
 800be80:	0800bf11 	.word	0x0800bf11
 800be84:	0800bf25 	.word	0x0800bf25
 800be88:	0800bf6f 	.word	0x0800bf6f
 800be8c:	0800be9d 	.word	0x0800be9d
 800be90:	0800be9d 	.word	0x0800be9d
 800be94:	0800bf11 	.word	0x0800bf11
 800be98:	0800bf25 	.word	0x0800bf25
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800be9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bea2:	f043 0301 	orr.w	r3, r3, #1
 800bea6:	b2da      	uxtb	r2, r3
 800bea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beaa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800beae:	68ba      	ldr	r2, [r7, #8]
 800beb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beb2:	699b      	ldr	r3, [r3, #24]
 800beb4:	18d1      	adds	r1, r2, r3
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800beba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bebc:	f7ff ff5c 	bl	800bd78 <prvInsertTimerInActiveList>
 800bec0:	4603      	mov	r3, r0
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d069      	beq.n	800bf9a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bec8:	6a1b      	ldr	r3, [r3, #32]
 800beca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800becc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bed0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bed4:	f003 0304 	and.w	r3, r3, #4
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d05e      	beq.n	800bf9a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bedc:	68ba      	ldr	r2, [r7, #8]
 800bede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bee0:	699b      	ldr	r3, [r3, #24]
 800bee2:	441a      	add	r2, r3
 800bee4:	2300      	movs	r3, #0
 800bee6:	9300      	str	r3, [sp, #0]
 800bee8:	2300      	movs	r3, #0
 800beea:	2100      	movs	r1, #0
 800beec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800beee:	f7ff fe05 	bl	800bafc <xTimerGenericCommand>
 800bef2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bef4:	6a3b      	ldr	r3, [r7, #32]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d14f      	bne.n	800bf9a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800befa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800befe:	f383 8811 	msr	BASEPRI, r3
 800bf02:	f3bf 8f6f 	isb	sy
 800bf06:	f3bf 8f4f 	dsb	sy
 800bf0a:	61bb      	str	r3, [r7, #24]
}
 800bf0c:	bf00      	nop
 800bf0e:	e7fe      	b.n	800bf0e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bf10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf16:	f023 0301 	bic.w	r3, r3, #1
 800bf1a:	b2da      	uxtb	r2, r3
 800bf1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bf22:	e03a      	b.n	800bf9a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bf24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf2a:	f043 0301 	orr.w	r3, r3, #1
 800bf2e:	b2da      	uxtb	r2, r3
 800bf30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bf36:	68ba      	ldr	r2, [r7, #8]
 800bf38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf3a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bf3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf3e:	699b      	ldr	r3, [r3, #24]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d10a      	bne.n	800bf5a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bf44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf48:	f383 8811 	msr	BASEPRI, r3
 800bf4c:	f3bf 8f6f 	isb	sy
 800bf50:	f3bf 8f4f 	dsb	sy
 800bf54:	617b      	str	r3, [r7, #20]
}
 800bf56:	bf00      	nop
 800bf58:	e7fe      	b.n	800bf58 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bf5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf5c:	699a      	ldr	r2, [r3, #24]
 800bf5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf60:	18d1      	adds	r1, r2, r3
 800bf62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf68:	f7ff ff06 	bl	800bd78 <prvInsertTimerInActiveList>
					break;
 800bf6c:	e015      	b.n	800bf9a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bf6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf74:	f003 0302 	and.w	r3, r3, #2
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d103      	bne.n	800bf84 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bf7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf7e:	f000 fbdf 	bl	800c740 <vPortFree>
 800bf82:	e00a      	b.n	800bf9a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bf84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf8a:	f023 0301 	bic.w	r3, r3, #1
 800bf8e:	b2da      	uxtb	r2, r3
 800bf90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bf96:	e000      	b.n	800bf9a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800bf98:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bf9a:	4b08      	ldr	r3, [pc, #32]	; (800bfbc <prvProcessReceivedCommands+0x1c0>)
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	1d39      	adds	r1, r7, #4
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f7fe f986 	bl	800a2b4 <xQueueReceive>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	f47f af2a 	bne.w	800be04 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bfb0:	bf00      	nop
 800bfb2:	bf00      	nop
 800bfb4:	3730      	adds	r7, #48	; 0x30
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}
 800bfba:	bf00      	nop
 800bfbc:	20005a24 	.word	0x20005a24

0800bfc0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b088      	sub	sp, #32
 800bfc4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bfc6:	e048      	b.n	800c05a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bfc8:	4b2d      	ldr	r3, [pc, #180]	; (800c080 <prvSwitchTimerLists+0xc0>)
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	68db      	ldr	r3, [r3, #12]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfd2:	4b2b      	ldr	r3, [pc, #172]	; (800c080 <prvSwitchTimerLists+0xc0>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	68db      	ldr	r3, [r3, #12]
 800bfd8:	68db      	ldr	r3, [r3, #12]
 800bfda:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	3304      	adds	r3, #4
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	f7fd fe65 	bl	8009cb0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	6a1b      	ldr	r3, [r3, #32]
 800bfea:	68f8      	ldr	r0, [r7, #12]
 800bfec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bff4:	f003 0304 	and.w	r3, r3, #4
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d02e      	beq.n	800c05a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	699b      	ldr	r3, [r3, #24]
 800c000:	693a      	ldr	r2, [r7, #16]
 800c002:	4413      	add	r3, r2
 800c004:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c006:	68ba      	ldr	r2, [r7, #8]
 800c008:	693b      	ldr	r3, [r7, #16]
 800c00a:	429a      	cmp	r2, r3
 800c00c:	d90e      	bls.n	800c02c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	68ba      	ldr	r2, [r7, #8]
 800c012:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	68fa      	ldr	r2, [r7, #12]
 800c018:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c01a:	4b19      	ldr	r3, [pc, #100]	; (800c080 <prvSwitchTimerLists+0xc0>)
 800c01c:	681a      	ldr	r2, [r3, #0]
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	3304      	adds	r3, #4
 800c022:	4619      	mov	r1, r3
 800c024:	4610      	mov	r0, r2
 800c026:	f7fd fe0a 	bl	8009c3e <vListInsert>
 800c02a:	e016      	b.n	800c05a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c02c:	2300      	movs	r3, #0
 800c02e:	9300      	str	r3, [sp, #0]
 800c030:	2300      	movs	r3, #0
 800c032:	693a      	ldr	r2, [r7, #16]
 800c034:	2100      	movs	r1, #0
 800c036:	68f8      	ldr	r0, [r7, #12]
 800c038:	f7ff fd60 	bl	800bafc <xTimerGenericCommand>
 800c03c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d10a      	bne.n	800c05a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c048:	f383 8811 	msr	BASEPRI, r3
 800c04c:	f3bf 8f6f 	isb	sy
 800c050:	f3bf 8f4f 	dsb	sy
 800c054:	603b      	str	r3, [r7, #0]
}
 800c056:	bf00      	nop
 800c058:	e7fe      	b.n	800c058 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c05a:	4b09      	ldr	r3, [pc, #36]	; (800c080 <prvSwitchTimerLists+0xc0>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d1b1      	bne.n	800bfc8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c064:	4b06      	ldr	r3, [pc, #24]	; (800c080 <prvSwitchTimerLists+0xc0>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c06a:	4b06      	ldr	r3, [pc, #24]	; (800c084 <prvSwitchTimerLists+0xc4>)
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	4a04      	ldr	r2, [pc, #16]	; (800c080 <prvSwitchTimerLists+0xc0>)
 800c070:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c072:	4a04      	ldr	r2, [pc, #16]	; (800c084 <prvSwitchTimerLists+0xc4>)
 800c074:	697b      	ldr	r3, [r7, #20]
 800c076:	6013      	str	r3, [r2, #0]
}
 800c078:	bf00      	nop
 800c07a:	3718      	adds	r7, #24
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}
 800c080:	20005a1c 	.word	0x20005a1c
 800c084:	20005a20 	.word	0x20005a20

0800c088 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b082      	sub	sp, #8
 800c08c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c08e:	f000 f969 	bl	800c364 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c092:	4b15      	ldr	r3, [pc, #84]	; (800c0e8 <prvCheckForValidListAndQueue+0x60>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d120      	bne.n	800c0dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c09a:	4814      	ldr	r0, [pc, #80]	; (800c0ec <prvCheckForValidListAndQueue+0x64>)
 800c09c:	f7fd fd7e 	bl	8009b9c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c0a0:	4813      	ldr	r0, [pc, #76]	; (800c0f0 <prvCheckForValidListAndQueue+0x68>)
 800c0a2:	f7fd fd7b 	bl	8009b9c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c0a6:	4b13      	ldr	r3, [pc, #76]	; (800c0f4 <prvCheckForValidListAndQueue+0x6c>)
 800c0a8:	4a10      	ldr	r2, [pc, #64]	; (800c0ec <prvCheckForValidListAndQueue+0x64>)
 800c0aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c0ac:	4b12      	ldr	r3, [pc, #72]	; (800c0f8 <prvCheckForValidListAndQueue+0x70>)
 800c0ae:	4a10      	ldr	r2, [pc, #64]	; (800c0f0 <prvCheckForValidListAndQueue+0x68>)
 800c0b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	9300      	str	r3, [sp, #0]
 800c0b6:	4b11      	ldr	r3, [pc, #68]	; (800c0fc <prvCheckForValidListAndQueue+0x74>)
 800c0b8:	4a11      	ldr	r2, [pc, #68]	; (800c100 <prvCheckForValidListAndQueue+0x78>)
 800c0ba:	2110      	movs	r1, #16
 800c0bc:	200a      	movs	r0, #10
 800c0be:	f7fd fe89 	bl	8009dd4 <xQueueGenericCreateStatic>
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	4a08      	ldr	r2, [pc, #32]	; (800c0e8 <prvCheckForValidListAndQueue+0x60>)
 800c0c6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c0c8:	4b07      	ldr	r3, [pc, #28]	; (800c0e8 <prvCheckForValidListAndQueue+0x60>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d005      	beq.n	800c0dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c0d0:	4b05      	ldr	r3, [pc, #20]	; (800c0e8 <prvCheckForValidListAndQueue+0x60>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	490b      	ldr	r1, [pc, #44]	; (800c104 <prvCheckForValidListAndQueue+0x7c>)
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f7fe fc1e 	bl	800a918 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c0dc:	f000 f972 	bl	800c3c4 <vPortExitCritical>
}
 800c0e0:	bf00      	nop
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}
 800c0e6:	bf00      	nop
 800c0e8:	20005a24 	.word	0x20005a24
 800c0ec:	200059f4 	.word	0x200059f4
 800c0f0:	20005a08 	.word	0x20005a08
 800c0f4:	20005a1c 	.word	0x20005a1c
 800c0f8:	20005a20 	.word	0x20005a20
 800c0fc:	20005ad0 	.word	0x20005ad0
 800c100:	20005a30 	.word	0x20005a30
 800c104:	08019864 	.word	0x08019864

0800c108 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c108:	b480      	push	{r7}
 800c10a:	b085      	sub	sp, #20
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	60f8      	str	r0, [r7, #12]
 800c110:	60b9      	str	r1, [r7, #8]
 800c112:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	3b04      	subs	r3, #4
 800c118:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c120:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	3b04      	subs	r3, #4
 800c126:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	f023 0201 	bic.w	r2, r3, #1
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	3b04      	subs	r3, #4
 800c136:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c138:	4a0c      	ldr	r2, [pc, #48]	; (800c16c <pxPortInitialiseStack+0x64>)
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	3b14      	subs	r3, #20
 800c142:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c144:	687a      	ldr	r2, [r7, #4]
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	3b04      	subs	r3, #4
 800c14e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	f06f 0202 	mvn.w	r2, #2
 800c156:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	3b20      	subs	r3, #32
 800c15c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c15e:	68fb      	ldr	r3, [r7, #12]
}
 800c160:	4618      	mov	r0, r3
 800c162:	3714      	adds	r7, #20
 800c164:	46bd      	mov	sp, r7
 800c166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16a:	4770      	bx	lr
 800c16c:	0800c171 	.word	0x0800c171

0800c170 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c170:	b480      	push	{r7}
 800c172:	b085      	sub	sp, #20
 800c174:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c176:	2300      	movs	r3, #0
 800c178:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c17a:	4b12      	ldr	r3, [pc, #72]	; (800c1c4 <prvTaskExitError+0x54>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c182:	d00a      	beq.n	800c19a <prvTaskExitError+0x2a>
	__asm volatile
 800c184:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c188:	f383 8811 	msr	BASEPRI, r3
 800c18c:	f3bf 8f6f 	isb	sy
 800c190:	f3bf 8f4f 	dsb	sy
 800c194:	60fb      	str	r3, [r7, #12]
}
 800c196:	bf00      	nop
 800c198:	e7fe      	b.n	800c198 <prvTaskExitError+0x28>
	__asm volatile
 800c19a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c19e:	f383 8811 	msr	BASEPRI, r3
 800c1a2:	f3bf 8f6f 	isb	sy
 800c1a6:	f3bf 8f4f 	dsb	sy
 800c1aa:	60bb      	str	r3, [r7, #8]
}
 800c1ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c1ae:	bf00      	nop
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d0fc      	beq.n	800c1b0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c1b6:	bf00      	nop
 800c1b8:	bf00      	nop
 800c1ba:	3714      	adds	r7, #20
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c2:	4770      	bx	lr
 800c1c4:	20000018 	.word	0x20000018
	...

0800c1d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c1d0:	4b07      	ldr	r3, [pc, #28]	; (800c1f0 <pxCurrentTCBConst2>)
 800c1d2:	6819      	ldr	r1, [r3, #0]
 800c1d4:	6808      	ldr	r0, [r1, #0]
 800c1d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1da:	f380 8809 	msr	PSP, r0
 800c1de:	f3bf 8f6f 	isb	sy
 800c1e2:	f04f 0000 	mov.w	r0, #0
 800c1e6:	f380 8811 	msr	BASEPRI, r0
 800c1ea:	4770      	bx	lr
 800c1ec:	f3af 8000 	nop.w

0800c1f0 <pxCurrentTCBConst2>:
 800c1f0:	200054f4 	.word	0x200054f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c1f4:	bf00      	nop
 800c1f6:	bf00      	nop

0800c1f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c1f8:	4808      	ldr	r0, [pc, #32]	; (800c21c <prvPortStartFirstTask+0x24>)
 800c1fa:	6800      	ldr	r0, [r0, #0]
 800c1fc:	6800      	ldr	r0, [r0, #0]
 800c1fe:	f380 8808 	msr	MSP, r0
 800c202:	f04f 0000 	mov.w	r0, #0
 800c206:	f380 8814 	msr	CONTROL, r0
 800c20a:	b662      	cpsie	i
 800c20c:	b661      	cpsie	f
 800c20e:	f3bf 8f4f 	dsb	sy
 800c212:	f3bf 8f6f 	isb	sy
 800c216:	df00      	svc	0
 800c218:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c21a:	bf00      	nop
 800c21c:	e000ed08 	.word	0xe000ed08

0800c220 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b086      	sub	sp, #24
 800c224:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c226:	4b46      	ldr	r3, [pc, #280]	; (800c340 <xPortStartScheduler+0x120>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	4a46      	ldr	r2, [pc, #280]	; (800c344 <xPortStartScheduler+0x124>)
 800c22c:	4293      	cmp	r3, r2
 800c22e:	d10a      	bne.n	800c246 <xPortStartScheduler+0x26>
	__asm volatile
 800c230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c234:	f383 8811 	msr	BASEPRI, r3
 800c238:	f3bf 8f6f 	isb	sy
 800c23c:	f3bf 8f4f 	dsb	sy
 800c240:	613b      	str	r3, [r7, #16]
}
 800c242:	bf00      	nop
 800c244:	e7fe      	b.n	800c244 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c246:	4b3e      	ldr	r3, [pc, #248]	; (800c340 <xPortStartScheduler+0x120>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	4a3f      	ldr	r2, [pc, #252]	; (800c348 <xPortStartScheduler+0x128>)
 800c24c:	4293      	cmp	r3, r2
 800c24e:	d10a      	bne.n	800c266 <xPortStartScheduler+0x46>
	__asm volatile
 800c250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c254:	f383 8811 	msr	BASEPRI, r3
 800c258:	f3bf 8f6f 	isb	sy
 800c25c:	f3bf 8f4f 	dsb	sy
 800c260:	60fb      	str	r3, [r7, #12]
}
 800c262:	bf00      	nop
 800c264:	e7fe      	b.n	800c264 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c266:	4b39      	ldr	r3, [pc, #228]	; (800c34c <xPortStartScheduler+0x12c>)
 800c268:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c26a:	697b      	ldr	r3, [r7, #20]
 800c26c:	781b      	ldrb	r3, [r3, #0]
 800c26e:	b2db      	uxtb	r3, r3
 800c270:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	22ff      	movs	r2, #255	; 0xff
 800c276:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c278:	697b      	ldr	r3, [r7, #20]
 800c27a:	781b      	ldrb	r3, [r3, #0]
 800c27c:	b2db      	uxtb	r3, r3
 800c27e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c280:	78fb      	ldrb	r3, [r7, #3]
 800c282:	b2db      	uxtb	r3, r3
 800c284:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c288:	b2da      	uxtb	r2, r3
 800c28a:	4b31      	ldr	r3, [pc, #196]	; (800c350 <xPortStartScheduler+0x130>)
 800c28c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c28e:	4b31      	ldr	r3, [pc, #196]	; (800c354 <xPortStartScheduler+0x134>)
 800c290:	2207      	movs	r2, #7
 800c292:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c294:	e009      	b.n	800c2aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c296:	4b2f      	ldr	r3, [pc, #188]	; (800c354 <xPortStartScheduler+0x134>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	3b01      	subs	r3, #1
 800c29c:	4a2d      	ldr	r2, [pc, #180]	; (800c354 <xPortStartScheduler+0x134>)
 800c29e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c2a0:	78fb      	ldrb	r3, [r7, #3]
 800c2a2:	b2db      	uxtb	r3, r3
 800c2a4:	005b      	lsls	r3, r3, #1
 800c2a6:	b2db      	uxtb	r3, r3
 800c2a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c2aa:	78fb      	ldrb	r3, [r7, #3]
 800c2ac:	b2db      	uxtb	r3, r3
 800c2ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2b2:	2b80      	cmp	r3, #128	; 0x80
 800c2b4:	d0ef      	beq.n	800c296 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c2b6:	4b27      	ldr	r3, [pc, #156]	; (800c354 <xPortStartScheduler+0x134>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	f1c3 0307 	rsb	r3, r3, #7
 800c2be:	2b04      	cmp	r3, #4
 800c2c0:	d00a      	beq.n	800c2d8 <xPortStartScheduler+0xb8>
	__asm volatile
 800c2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2c6:	f383 8811 	msr	BASEPRI, r3
 800c2ca:	f3bf 8f6f 	isb	sy
 800c2ce:	f3bf 8f4f 	dsb	sy
 800c2d2:	60bb      	str	r3, [r7, #8]
}
 800c2d4:	bf00      	nop
 800c2d6:	e7fe      	b.n	800c2d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c2d8:	4b1e      	ldr	r3, [pc, #120]	; (800c354 <xPortStartScheduler+0x134>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	021b      	lsls	r3, r3, #8
 800c2de:	4a1d      	ldr	r2, [pc, #116]	; (800c354 <xPortStartScheduler+0x134>)
 800c2e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c2e2:	4b1c      	ldr	r3, [pc, #112]	; (800c354 <xPortStartScheduler+0x134>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c2ea:	4a1a      	ldr	r2, [pc, #104]	; (800c354 <xPortStartScheduler+0x134>)
 800c2ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	b2da      	uxtb	r2, r3
 800c2f2:	697b      	ldr	r3, [r7, #20]
 800c2f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c2f6:	4b18      	ldr	r3, [pc, #96]	; (800c358 <xPortStartScheduler+0x138>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	4a17      	ldr	r2, [pc, #92]	; (800c358 <xPortStartScheduler+0x138>)
 800c2fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c300:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c302:	4b15      	ldr	r3, [pc, #84]	; (800c358 <xPortStartScheduler+0x138>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	4a14      	ldr	r2, [pc, #80]	; (800c358 <xPortStartScheduler+0x138>)
 800c308:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c30c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c30e:	f000 f8dd 	bl	800c4cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c312:	4b12      	ldr	r3, [pc, #72]	; (800c35c <xPortStartScheduler+0x13c>)
 800c314:	2200      	movs	r2, #0
 800c316:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c318:	f000 f8fc 	bl	800c514 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c31c:	4b10      	ldr	r3, [pc, #64]	; (800c360 <xPortStartScheduler+0x140>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	4a0f      	ldr	r2, [pc, #60]	; (800c360 <xPortStartScheduler+0x140>)
 800c322:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c326:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c328:	f7ff ff66 	bl	800c1f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c32c:	f7fe ff24 	bl	800b178 <vTaskSwitchContext>
	prvTaskExitError();
 800c330:	f7ff ff1e 	bl	800c170 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c334:	2300      	movs	r3, #0
}
 800c336:	4618      	mov	r0, r3
 800c338:	3718      	adds	r7, #24
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}
 800c33e:	bf00      	nop
 800c340:	e000ed00 	.word	0xe000ed00
 800c344:	410fc271 	.word	0x410fc271
 800c348:	410fc270 	.word	0x410fc270
 800c34c:	e000e400 	.word	0xe000e400
 800c350:	20005b20 	.word	0x20005b20
 800c354:	20005b24 	.word	0x20005b24
 800c358:	e000ed20 	.word	0xe000ed20
 800c35c:	20000018 	.word	0x20000018
 800c360:	e000ef34 	.word	0xe000ef34

0800c364 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c364:	b480      	push	{r7}
 800c366:	b083      	sub	sp, #12
 800c368:	af00      	add	r7, sp, #0
	__asm volatile
 800c36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c36e:	f383 8811 	msr	BASEPRI, r3
 800c372:	f3bf 8f6f 	isb	sy
 800c376:	f3bf 8f4f 	dsb	sy
 800c37a:	607b      	str	r3, [r7, #4]
}
 800c37c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c37e:	4b0f      	ldr	r3, [pc, #60]	; (800c3bc <vPortEnterCritical+0x58>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	3301      	adds	r3, #1
 800c384:	4a0d      	ldr	r2, [pc, #52]	; (800c3bc <vPortEnterCritical+0x58>)
 800c386:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c388:	4b0c      	ldr	r3, [pc, #48]	; (800c3bc <vPortEnterCritical+0x58>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	2b01      	cmp	r3, #1
 800c38e:	d10f      	bne.n	800c3b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c390:	4b0b      	ldr	r3, [pc, #44]	; (800c3c0 <vPortEnterCritical+0x5c>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	b2db      	uxtb	r3, r3
 800c396:	2b00      	cmp	r3, #0
 800c398:	d00a      	beq.n	800c3b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800c39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c39e:	f383 8811 	msr	BASEPRI, r3
 800c3a2:	f3bf 8f6f 	isb	sy
 800c3a6:	f3bf 8f4f 	dsb	sy
 800c3aa:	603b      	str	r3, [r7, #0]
}
 800c3ac:	bf00      	nop
 800c3ae:	e7fe      	b.n	800c3ae <vPortEnterCritical+0x4a>
	}
}
 800c3b0:	bf00      	nop
 800c3b2:	370c      	adds	r7, #12
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ba:	4770      	bx	lr
 800c3bc:	20000018 	.word	0x20000018
 800c3c0:	e000ed04 	.word	0xe000ed04

0800c3c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c3c4:	b480      	push	{r7}
 800c3c6:	b083      	sub	sp, #12
 800c3c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c3ca:	4b12      	ldr	r3, [pc, #72]	; (800c414 <vPortExitCritical+0x50>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d10a      	bne.n	800c3e8 <vPortExitCritical+0x24>
	__asm volatile
 800c3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3d6:	f383 8811 	msr	BASEPRI, r3
 800c3da:	f3bf 8f6f 	isb	sy
 800c3de:	f3bf 8f4f 	dsb	sy
 800c3e2:	607b      	str	r3, [r7, #4]
}
 800c3e4:	bf00      	nop
 800c3e6:	e7fe      	b.n	800c3e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c3e8:	4b0a      	ldr	r3, [pc, #40]	; (800c414 <vPortExitCritical+0x50>)
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	3b01      	subs	r3, #1
 800c3ee:	4a09      	ldr	r2, [pc, #36]	; (800c414 <vPortExitCritical+0x50>)
 800c3f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c3f2:	4b08      	ldr	r3, [pc, #32]	; (800c414 <vPortExitCritical+0x50>)
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d105      	bne.n	800c406 <vPortExitCritical+0x42>
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	f383 8811 	msr	BASEPRI, r3
}
 800c404:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c406:	bf00      	nop
 800c408:	370c      	adds	r7, #12
 800c40a:	46bd      	mov	sp, r7
 800c40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c410:	4770      	bx	lr
 800c412:	bf00      	nop
 800c414:	20000018 	.word	0x20000018
	...

0800c420 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c420:	f3ef 8009 	mrs	r0, PSP
 800c424:	f3bf 8f6f 	isb	sy
 800c428:	4b15      	ldr	r3, [pc, #84]	; (800c480 <pxCurrentTCBConst>)
 800c42a:	681a      	ldr	r2, [r3, #0]
 800c42c:	f01e 0f10 	tst.w	lr, #16
 800c430:	bf08      	it	eq
 800c432:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c436:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c43a:	6010      	str	r0, [r2, #0]
 800c43c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c440:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c444:	f380 8811 	msr	BASEPRI, r0
 800c448:	f3bf 8f4f 	dsb	sy
 800c44c:	f3bf 8f6f 	isb	sy
 800c450:	f7fe fe92 	bl	800b178 <vTaskSwitchContext>
 800c454:	f04f 0000 	mov.w	r0, #0
 800c458:	f380 8811 	msr	BASEPRI, r0
 800c45c:	bc09      	pop	{r0, r3}
 800c45e:	6819      	ldr	r1, [r3, #0]
 800c460:	6808      	ldr	r0, [r1, #0]
 800c462:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c466:	f01e 0f10 	tst.w	lr, #16
 800c46a:	bf08      	it	eq
 800c46c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c470:	f380 8809 	msr	PSP, r0
 800c474:	f3bf 8f6f 	isb	sy
 800c478:	4770      	bx	lr
 800c47a:	bf00      	nop
 800c47c:	f3af 8000 	nop.w

0800c480 <pxCurrentTCBConst>:
 800c480:	200054f4 	.word	0x200054f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c484:	bf00      	nop
 800c486:	bf00      	nop

0800c488 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b082      	sub	sp, #8
 800c48c:	af00      	add	r7, sp, #0
	__asm volatile
 800c48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c492:	f383 8811 	msr	BASEPRI, r3
 800c496:	f3bf 8f6f 	isb	sy
 800c49a:	f3bf 8f4f 	dsb	sy
 800c49e:	607b      	str	r3, [r7, #4]
}
 800c4a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c4a2:	f7fe fdaf 	bl	800b004 <xTaskIncrementTick>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d003      	beq.n	800c4b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c4ac:	4b06      	ldr	r3, [pc, #24]	; (800c4c8 <xPortSysTickHandler+0x40>)
 800c4ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4b2:	601a      	str	r2, [r3, #0]
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	f383 8811 	msr	BASEPRI, r3
}
 800c4be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c4c0:	bf00      	nop
 800c4c2:	3708      	adds	r7, #8
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd80      	pop	{r7, pc}
 800c4c8:	e000ed04 	.word	0xe000ed04

0800c4cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c4cc:	b480      	push	{r7}
 800c4ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c4d0:	4b0b      	ldr	r3, [pc, #44]	; (800c500 <vPortSetupTimerInterrupt+0x34>)
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c4d6:	4b0b      	ldr	r3, [pc, #44]	; (800c504 <vPortSetupTimerInterrupt+0x38>)
 800c4d8:	2200      	movs	r2, #0
 800c4da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c4dc:	4b0a      	ldr	r3, [pc, #40]	; (800c508 <vPortSetupTimerInterrupt+0x3c>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	4a0a      	ldr	r2, [pc, #40]	; (800c50c <vPortSetupTimerInterrupt+0x40>)
 800c4e2:	fba2 2303 	umull	r2, r3, r2, r3
 800c4e6:	099b      	lsrs	r3, r3, #6
 800c4e8:	4a09      	ldr	r2, [pc, #36]	; (800c510 <vPortSetupTimerInterrupt+0x44>)
 800c4ea:	3b01      	subs	r3, #1
 800c4ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c4ee:	4b04      	ldr	r3, [pc, #16]	; (800c500 <vPortSetupTimerInterrupt+0x34>)
 800c4f0:	2207      	movs	r2, #7
 800c4f2:	601a      	str	r2, [r3, #0]
}
 800c4f4:	bf00      	nop
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fc:	4770      	bx	lr
 800c4fe:	bf00      	nop
 800c500:	e000e010 	.word	0xe000e010
 800c504:	e000e018 	.word	0xe000e018
 800c508:	2000000c 	.word	0x2000000c
 800c50c:	10624dd3 	.word	0x10624dd3
 800c510:	e000e014 	.word	0xe000e014

0800c514 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c514:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c524 <vPortEnableVFP+0x10>
 800c518:	6801      	ldr	r1, [r0, #0]
 800c51a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c51e:	6001      	str	r1, [r0, #0]
 800c520:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c522:	bf00      	nop
 800c524:	e000ed88 	.word	0xe000ed88

0800c528 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c528:	b480      	push	{r7}
 800c52a:	b085      	sub	sp, #20
 800c52c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c52e:	f3ef 8305 	mrs	r3, IPSR
 800c532:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	2b0f      	cmp	r3, #15
 800c538:	d914      	bls.n	800c564 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c53a:	4a17      	ldr	r2, [pc, #92]	; (800c598 <vPortValidateInterruptPriority+0x70>)
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	4413      	add	r3, r2
 800c540:	781b      	ldrb	r3, [r3, #0]
 800c542:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c544:	4b15      	ldr	r3, [pc, #84]	; (800c59c <vPortValidateInterruptPriority+0x74>)
 800c546:	781b      	ldrb	r3, [r3, #0]
 800c548:	7afa      	ldrb	r2, [r7, #11]
 800c54a:	429a      	cmp	r2, r3
 800c54c:	d20a      	bcs.n	800c564 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c552:	f383 8811 	msr	BASEPRI, r3
 800c556:	f3bf 8f6f 	isb	sy
 800c55a:	f3bf 8f4f 	dsb	sy
 800c55e:	607b      	str	r3, [r7, #4]
}
 800c560:	bf00      	nop
 800c562:	e7fe      	b.n	800c562 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c564:	4b0e      	ldr	r3, [pc, #56]	; (800c5a0 <vPortValidateInterruptPriority+0x78>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c56c:	4b0d      	ldr	r3, [pc, #52]	; (800c5a4 <vPortValidateInterruptPriority+0x7c>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	429a      	cmp	r2, r3
 800c572:	d90a      	bls.n	800c58a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c574:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c578:	f383 8811 	msr	BASEPRI, r3
 800c57c:	f3bf 8f6f 	isb	sy
 800c580:	f3bf 8f4f 	dsb	sy
 800c584:	603b      	str	r3, [r7, #0]
}
 800c586:	bf00      	nop
 800c588:	e7fe      	b.n	800c588 <vPortValidateInterruptPriority+0x60>
	}
 800c58a:	bf00      	nop
 800c58c:	3714      	adds	r7, #20
 800c58e:	46bd      	mov	sp, r7
 800c590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c594:	4770      	bx	lr
 800c596:	bf00      	nop
 800c598:	e000e3f0 	.word	0xe000e3f0
 800c59c:	20005b20 	.word	0x20005b20
 800c5a0:	e000ed0c 	.word	0xe000ed0c
 800c5a4:	20005b24 	.word	0x20005b24

0800c5a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b08a      	sub	sp, #40	; 0x28
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c5b4:	f7fe fc6a 	bl	800ae8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c5b8:	4b5b      	ldr	r3, [pc, #364]	; (800c728 <pvPortMalloc+0x180>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d101      	bne.n	800c5c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c5c0:	f000 f920 	bl	800c804 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c5c4:	4b59      	ldr	r3, [pc, #356]	; (800c72c <pvPortMalloc+0x184>)
 800c5c6:	681a      	ldr	r2, [r3, #0]
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	4013      	ands	r3, r2
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	f040 8093 	bne.w	800c6f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d01d      	beq.n	800c614 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c5d8:	2208      	movs	r2, #8
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	4413      	add	r3, r2
 800c5de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f003 0307 	and.w	r3, r3, #7
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d014      	beq.n	800c614 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	f023 0307 	bic.w	r3, r3, #7
 800c5f0:	3308      	adds	r3, #8
 800c5f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f003 0307 	and.w	r3, r3, #7
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d00a      	beq.n	800c614 <pvPortMalloc+0x6c>
	__asm volatile
 800c5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c602:	f383 8811 	msr	BASEPRI, r3
 800c606:	f3bf 8f6f 	isb	sy
 800c60a:	f3bf 8f4f 	dsb	sy
 800c60e:	617b      	str	r3, [r7, #20]
}
 800c610:	bf00      	nop
 800c612:	e7fe      	b.n	800c612 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d06e      	beq.n	800c6f8 <pvPortMalloc+0x150>
 800c61a:	4b45      	ldr	r3, [pc, #276]	; (800c730 <pvPortMalloc+0x188>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	687a      	ldr	r2, [r7, #4]
 800c620:	429a      	cmp	r2, r3
 800c622:	d869      	bhi.n	800c6f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c624:	4b43      	ldr	r3, [pc, #268]	; (800c734 <pvPortMalloc+0x18c>)
 800c626:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c628:	4b42      	ldr	r3, [pc, #264]	; (800c734 <pvPortMalloc+0x18c>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c62e:	e004      	b.n	800c63a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c632:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c63c:	685b      	ldr	r3, [r3, #4]
 800c63e:	687a      	ldr	r2, [r7, #4]
 800c640:	429a      	cmp	r2, r3
 800c642:	d903      	bls.n	800c64c <pvPortMalloc+0xa4>
 800c644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d1f1      	bne.n	800c630 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c64c:	4b36      	ldr	r3, [pc, #216]	; (800c728 <pvPortMalloc+0x180>)
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c652:	429a      	cmp	r2, r3
 800c654:	d050      	beq.n	800c6f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c656:	6a3b      	ldr	r3, [r7, #32]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	2208      	movs	r2, #8
 800c65c:	4413      	add	r3, r2
 800c65e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c662:	681a      	ldr	r2, [r3, #0]
 800c664:	6a3b      	ldr	r3, [r7, #32]
 800c666:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c66a:	685a      	ldr	r2, [r3, #4]
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	1ad2      	subs	r2, r2, r3
 800c670:	2308      	movs	r3, #8
 800c672:	005b      	lsls	r3, r3, #1
 800c674:	429a      	cmp	r2, r3
 800c676:	d91f      	bls.n	800c6b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	4413      	add	r3, r2
 800c67e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c680:	69bb      	ldr	r3, [r7, #24]
 800c682:	f003 0307 	and.w	r3, r3, #7
 800c686:	2b00      	cmp	r3, #0
 800c688:	d00a      	beq.n	800c6a0 <pvPortMalloc+0xf8>
	__asm volatile
 800c68a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c68e:	f383 8811 	msr	BASEPRI, r3
 800c692:	f3bf 8f6f 	isb	sy
 800c696:	f3bf 8f4f 	dsb	sy
 800c69a:	613b      	str	r3, [r7, #16]
}
 800c69c:	bf00      	nop
 800c69e:	e7fe      	b.n	800c69e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a2:	685a      	ldr	r2, [r3, #4]
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	1ad2      	subs	r2, r2, r3
 800c6a8:	69bb      	ldr	r3, [r7, #24]
 800c6aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ae:	687a      	ldr	r2, [r7, #4]
 800c6b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c6b2:	69b8      	ldr	r0, [r7, #24]
 800c6b4:	f000 f908 	bl	800c8c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c6b8:	4b1d      	ldr	r3, [pc, #116]	; (800c730 <pvPortMalloc+0x188>)
 800c6ba:	681a      	ldr	r2, [r3, #0]
 800c6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6be:	685b      	ldr	r3, [r3, #4]
 800c6c0:	1ad3      	subs	r3, r2, r3
 800c6c2:	4a1b      	ldr	r2, [pc, #108]	; (800c730 <pvPortMalloc+0x188>)
 800c6c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c6c6:	4b1a      	ldr	r3, [pc, #104]	; (800c730 <pvPortMalloc+0x188>)
 800c6c8:	681a      	ldr	r2, [r3, #0]
 800c6ca:	4b1b      	ldr	r3, [pc, #108]	; (800c738 <pvPortMalloc+0x190>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	429a      	cmp	r2, r3
 800c6d0:	d203      	bcs.n	800c6da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c6d2:	4b17      	ldr	r3, [pc, #92]	; (800c730 <pvPortMalloc+0x188>)
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	4a18      	ldr	r2, [pc, #96]	; (800c738 <pvPortMalloc+0x190>)
 800c6d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6dc:	685a      	ldr	r2, [r3, #4]
 800c6de:	4b13      	ldr	r3, [pc, #76]	; (800c72c <pvPortMalloc+0x184>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	431a      	orrs	r2, r3
 800c6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c6ee:	4b13      	ldr	r3, [pc, #76]	; (800c73c <pvPortMalloc+0x194>)
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	3301      	adds	r3, #1
 800c6f4:	4a11      	ldr	r2, [pc, #68]	; (800c73c <pvPortMalloc+0x194>)
 800c6f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c6f8:	f7fe fbd6 	bl	800aea8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c6fc:	69fb      	ldr	r3, [r7, #28]
 800c6fe:	f003 0307 	and.w	r3, r3, #7
 800c702:	2b00      	cmp	r3, #0
 800c704:	d00a      	beq.n	800c71c <pvPortMalloc+0x174>
	__asm volatile
 800c706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c70a:	f383 8811 	msr	BASEPRI, r3
 800c70e:	f3bf 8f6f 	isb	sy
 800c712:	f3bf 8f4f 	dsb	sy
 800c716:	60fb      	str	r3, [r7, #12]
}
 800c718:	bf00      	nop
 800c71a:	e7fe      	b.n	800c71a <pvPortMalloc+0x172>
	return pvReturn;
 800c71c:	69fb      	ldr	r3, [r7, #28]
}
 800c71e:	4618      	mov	r0, r3
 800c720:	3728      	adds	r7, #40	; 0x28
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}
 800c726:	bf00      	nop
 800c728:	20009b30 	.word	0x20009b30
 800c72c:	20009b44 	.word	0x20009b44
 800c730:	20009b34 	.word	0x20009b34
 800c734:	20009b28 	.word	0x20009b28
 800c738:	20009b38 	.word	0x20009b38
 800c73c:	20009b3c 	.word	0x20009b3c

0800c740 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b086      	sub	sp, #24
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d04d      	beq.n	800c7ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c752:	2308      	movs	r3, #8
 800c754:	425b      	negs	r3, r3
 800c756:	697a      	ldr	r2, [r7, #20]
 800c758:	4413      	add	r3, r2
 800c75a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c75c:	697b      	ldr	r3, [r7, #20]
 800c75e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c760:	693b      	ldr	r3, [r7, #16]
 800c762:	685a      	ldr	r2, [r3, #4]
 800c764:	4b24      	ldr	r3, [pc, #144]	; (800c7f8 <vPortFree+0xb8>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	4013      	ands	r3, r2
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d10a      	bne.n	800c784 <vPortFree+0x44>
	__asm volatile
 800c76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c772:	f383 8811 	msr	BASEPRI, r3
 800c776:	f3bf 8f6f 	isb	sy
 800c77a:	f3bf 8f4f 	dsb	sy
 800c77e:	60fb      	str	r3, [r7, #12]
}
 800c780:	bf00      	nop
 800c782:	e7fe      	b.n	800c782 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c784:	693b      	ldr	r3, [r7, #16]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d00a      	beq.n	800c7a2 <vPortFree+0x62>
	__asm volatile
 800c78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c790:	f383 8811 	msr	BASEPRI, r3
 800c794:	f3bf 8f6f 	isb	sy
 800c798:	f3bf 8f4f 	dsb	sy
 800c79c:	60bb      	str	r3, [r7, #8]
}
 800c79e:	bf00      	nop
 800c7a0:	e7fe      	b.n	800c7a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c7a2:	693b      	ldr	r3, [r7, #16]
 800c7a4:	685a      	ldr	r2, [r3, #4]
 800c7a6:	4b14      	ldr	r3, [pc, #80]	; (800c7f8 <vPortFree+0xb8>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	4013      	ands	r3, r2
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d01e      	beq.n	800c7ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c7b0:	693b      	ldr	r3, [r7, #16]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d11a      	bne.n	800c7ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c7b8:	693b      	ldr	r3, [r7, #16]
 800c7ba:	685a      	ldr	r2, [r3, #4]
 800c7bc:	4b0e      	ldr	r3, [pc, #56]	; (800c7f8 <vPortFree+0xb8>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	43db      	mvns	r3, r3
 800c7c2:	401a      	ands	r2, r3
 800c7c4:	693b      	ldr	r3, [r7, #16]
 800c7c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c7c8:	f7fe fb60 	bl	800ae8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c7cc:	693b      	ldr	r3, [r7, #16]
 800c7ce:	685a      	ldr	r2, [r3, #4]
 800c7d0:	4b0a      	ldr	r3, [pc, #40]	; (800c7fc <vPortFree+0xbc>)
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	4413      	add	r3, r2
 800c7d6:	4a09      	ldr	r2, [pc, #36]	; (800c7fc <vPortFree+0xbc>)
 800c7d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c7da:	6938      	ldr	r0, [r7, #16]
 800c7dc:	f000 f874 	bl	800c8c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c7e0:	4b07      	ldr	r3, [pc, #28]	; (800c800 <vPortFree+0xc0>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	3301      	adds	r3, #1
 800c7e6:	4a06      	ldr	r2, [pc, #24]	; (800c800 <vPortFree+0xc0>)
 800c7e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c7ea:	f7fe fb5d 	bl	800aea8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c7ee:	bf00      	nop
 800c7f0:	3718      	adds	r7, #24
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}
 800c7f6:	bf00      	nop
 800c7f8:	20009b44 	.word	0x20009b44
 800c7fc:	20009b34 	.word	0x20009b34
 800c800:	20009b40 	.word	0x20009b40

0800c804 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c804:	b480      	push	{r7}
 800c806:	b085      	sub	sp, #20
 800c808:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c80a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c80e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c810:	4b27      	ldr	r3, [pc, #156]	; (800c8b0 <prvHeapInit+0xac>)
 800c812:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	f003 0307 	and.w	r3, r3, #7
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d00c      	beq.n	800c838 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	3307      	adds	r3, #7
 800c822:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	f023 0307 	bic.w	r3, r3, #7
 800c82a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c82c:	68ba      	ldr	r2, [r7, #8]
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	1ad3      	subs	r3, r2, r3
 800c832:	4a1f      	ldr	r2, [pc, #124]	; (800c8b0 <prvHeapInit+0xac>)
 800c834:	4413      	add	r3, r2
 800c836:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c83c:	4a1d      	ldr	r2, [pc, #116]	; (800c8b4 <prvHeapInit+0xb0>)
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c842:	4b1c      	ldr	r3, [pc, #112]	; (800c8b4 <prvHeapInit+0xb0>)
 800c844:	2200      	movs	r2, #0
 800c846:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	68ba      	ldr	r2, [r7, #8]
 800c84c:	4413      	add	r3, r2
 800c84e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c850:	2208      	movs	r2, #8
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	1a9b      	subs	r3, r3, r2
 800c856:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	f023 0307 	bic.w	r3, r3, #7
 800c85e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	4a15      	ldr	r2, [pc, #84]	; (800c8b8 <prvHeapInit+0xb4>)
 800c864:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c866:	4b14      	ldr	r3, [pc, #80]	; (800c8b8 <prvHeapInit+0xb4>)
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	2200      	movs	r2, #0
 800c86c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c86e:	4b12      	ldr	r3, [pc, #72]	; (800c8b8 <prvHeapInit+0xb4>)
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	2200      	movs	r2, #0
 800c874:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	68fa      	ldr	r2, [r7, #12]
 800c87e:	1ad2      	subs	r2, r2, r3
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c884:	4b0c      	ldr	r3, [pc, #48]	; (800c8b8 <prvHeapInit+0xb4>)
 800c886:	681a      	ldr	r2, [r3, #0]
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	685b      	ldr	r3, [r3, #4]
 800c890:	4a0a      	ldr	r2, [pc, #40]	; (800c8bc <prvHeapInit+0xb8>)
 800c892:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	685b      	ldr	r3, [r3, #4]
 800c898:	4a09      	ldr	r2, [pc, #36]	; (800c8c0 <prvHeapInit+0xbc>)
 800c89a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c89c:	4b09      	ldr	r3, [pc, #36]	; (800c8c4 <prvHeapInit+0xc0>)
 800c89e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c8a2:	601a      	str	r2, [r3, #0]
}
 800c8a4:	bf00      	nop
 800c8a6:	3714      	adds	r7, #20
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ae:	4770      	bx	lr
 800c8b0:	20005b28 	.word	0x20005b28
 800c8b4:	20009b28 	.word	0x20009b28
 800c8b8:	20009b30 	.word	0x20009b30
 800c8bc:	20009b38 	.word	0x20009b38
 800c8c0:	20009b34 	.word	0x20009b34
 800c8c4:	20009b44 	.word	0x20009b44

0800c8c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c8c8:	b480      	push	{r7}
 800c8ca:	b085      	sub	sp, #20
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c8d0:	4b28      	ldr	r3, [pc, #160]	; (800c974 <prvInsertBlockIntoFreeList+0xac>)
 800c8d2:	60fb      	str	r3, [r7, #12]
 800c8d4:	e002      	b.n	800c8dc <prvInsertBlockIntoFreeList+0x14>
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	60fb      	str	r3, [r7, #12]
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	687a      	ldr	r2, [r7, #4]
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	d8f7      	bhi.n	800c8d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	685b      	ldr	r3, [r3, #4]
 800c8ee:	68ba      	ldr	r2, [r7, #8]
 800c8f0:	4413      	add	r3, r2
 800c8f2:	687a      	ldr	r2, [r7, #4]
 800c8f4:	429a      	cmp	r2, r3
 800c8f6:	d108      	bne.n	800c90a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	685a      	ldr	r2, [r3, #4]
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	685b      	ldr	r3, [r3, #4]
 800c900:	441a      	add	r2, r3
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	685b      	ldr	r3, [r3, #4]
 800c912:	68ba      	ldr	r2, [r7, #8]
 800c914:	441a      	add	r2, r3
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	429a      	cmp	r2, r3
 800c91c:	d118      	bne.n	800c950 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	681a      	ldr	r2, [r3, #0]
 800c922:	4b15      	ldr	r3, [pc, #84]	; (800c978 <prvInsertBlockIntoFreeList+0xb0>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	429a      	cmp	r2, r3
 800c928:	d00d      	beq.n	800c946 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	685a      	ldr	r2, [r3, #4]
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	685b      	ldr	r3, [r3, #4]
 800c934:	441a      	add	r2, r3
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	681a      	ldr	r2, [r3, #0]
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	601a      	str	r2, [r3, #0]
 800c944:	e008      	b.n	800c958 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c946:	4b0c      	ldr	r3, [pc, #48]	; (800c978 <prvInsertBlockIntoFreeList+0xb0>)
 800c948:	681a      	ldr	r2, [r3, #0]
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	601a      	str	r2, [r3, #0]
 800c94e:	e003      	b.n	800c958 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	681a      	ldr	r2, [r3, #0]
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c958:	68fa      	ldr	r2, [r7, #12]
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	429a      	cmp	r2, r3
 800c95e:	d002      	beq.n	800c966 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	687a      	ldr	r2, [r7, #4]
 800c964:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c966:	bf00      	nop
 800c968:	3714      	adds	r7, #20
 800c96a:	46bd      	mov	sp, r7
 800c96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c970:	4770      	bx	lr
 800c972:	bf00      	nop
 800c974:	20009b28 	.word	0x20009b28
 800c978:	20009b30 	.word	0x20009b30

0800c97c <rcl_get_zero_initialized_publisher>:
 800c97c:	4b01      	ldr	r3, [pc, #4]	; (800c984 <rcl_get_zero_initialized_publisher+0x8>)
 800c97e:	6818      	ldr	r0, [r3, #0]
 800c980:	4770      	bx	lr
 800c982:	bf00      	nop
 800c984:	080198cc 	.word	0x080198cc

0800c988 <rcl_publisher_init>:
 800c988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c98c:	b091      	sub	sp, #68	; 0x44
 800c98e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800c990:	b3d7      	cbz	r7, 800ca08 <rcl_publisher_init+0x80>
 800c992:	f107 0950 	add.w	r9, r7, #80	; 0x50
 800c996:	4604      	mov	r4, r0
 800c998:	4648      	mov	r0, r9
 800c99a:	4688      	mov	r8, r1
 800c99c:	4616      	mov	r6, r2
 800c99e:	461d      	mov	r5, r3
 800c9a0:	f000 ff32 	bl	800d808 <rcutils_allocator_is_valid>
 800c9a4:	b380      	cbz	r0, 800ca08 <rcl_publisher_init+0x80>
 800c9a6:	b37c      	cbz	r4, 800ca08 <rcl_publisher_init+0x80>
 800c9a8:	f8d4 a000 	ldr.w	sl, [r4]
 800c9ac:	f1ba 0f00 	cmp.w	sl, #0
 800c9b0:	d004      	beq.n	800c9bc <rcl_publisher_init+0x34>
 800c9b2:	2564      	movs	r5, #100	; 0x64
 800c9b4:	4628      	mov	r0, r5
 800c9b6:	b011      	add	sp, #68	; 0x44
 800c9b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9bc:	4640      	mov	r0, r8
 800c9be:	f006 fe07 	bl	80135d0 <rcl_node_is_valid>
 800c9c2:	b330      	cbz	r0, 800ca12 <rcl_publisher_init+0x8a>
 800c9c4:	b306      	cbz	r6, 800ca08 <rcl_publisher_init+0x80>
 800c9c6:	b1fd      	cbz	r5, 800ca08 <rcl_publisher_init+0x80>
 800c9c8:	46ce      	mov	lr, r9
 800c9ca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c9ce:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 800c9d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c9d6:	f8de 3000 	ldr.w	r3, [lr]
 800c9da:	f8cc 3000 	str.w	r3, [ip]
 800c9de:	f000 ff4f 	bl	800d880 <rcutils_get_zero_initialized_string_map>
 800c9e2:	ab10      	add	r3, sp, #64	; 0x40
 800c9e4:	4684      	mov	ip, r0
 800c9e6:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800c9ea:	f8cd c020 	str.w	ip, [sp, #32]
 800c9ee:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c9f2:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 800c9f6:	4651      	mov	r1, sl
 800c9f8:	a808      	add	r0, sp, #32
 800c9fa:	f000 ffbb 	bl	800d974 <rcutils_string_map_init>
 800c9fe:	b150      	cbz	r0, 800ca16 <rcl_publisher_init+0x8e>
 800ca00:	280a      	cmp	r0, #10
 800ca02:	d013      	beq.n	800ca2c <rcl_publisher_init+0xa4>
 800ca04:	2501      	movs	r5, #1
 800ca06:	e7d5      	b.n	800c9b4 <rcl_publisher_init+0x2c>
 800ca08:	250b      	movs	r5, #11
 800ca0a:	4628      	mov	r0, r5
 800ca0c:	b011      	add	sp, #68	; 0x44
 800ca0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca12:	25c8      	movs	r5, #200	; 0xc8
 800ca14:	e7ce      	b.n	800c9b4 <rcl_publisher_init+0x2c>
 800ca16:	a808      	add	r0, sp, #32
 800ca18:	f006 fa10 	bl	8012e3c <rcl_get_default_topic_name_substitutions>
 800ca1c:	4682      	mov	sl, r0
 800ca1e:	b138      	cbz	r0, 800ca30 <rcl_publisher_init+0xa8>
 800ca20:	a808      	add	r0, sp, #32
 800ca22:	f000 ffe7 	bl	800d9f4 <rcutils_string_map_fini>
 800ca26:	f1ba 0f0a 	cmp.w	sl, #10
 800ca2a:	d1eb      	bne.n	800ca04 <rcl_publisher_init+0x7c>
 800ca2c:	250a      	movs	r5, #10
 800ca2e:	e7c1      	b.n	800c9b4 <rcl_publisher_init+0x2c>
 800ca30:	4640      	mov	r0, r8
 800ca32:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800ca36:	f006 fdd5 	bl	80135e4 <rcl_node_get_name>
 800ca3a:	4682      	mov	sl, r0
 800ca3c:	4640      	mov	r0, r8
 800ca3e:	f006 fdd9 	bl	80135f4 <rcl_node_get_namespace>
 800ca42:	4686      	mov	lr, r0
 800ca44:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800ca48:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 800ca4c:	46ec      	mov	ip, sp
 800ca4e:	f8cd b014 	str.w	fp, [sp, #20]
 800ca52:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ca56:	f8d9 3000 	ldr.w	r3, [r9]
 800ca5a:	f8cc 3000 	str.w	r3, [ip]
 800ca5e:	4628      	mov	r0, r5
 800ca60:	4651      	mov	r1, sl
 800ca62:	4672      	mov	r2, lr
 800ca64:	ab08      	add	r3, sp, #32
 800ca66:	f006 f883 	bl	8012b70 <rcl_expand_topic_name>
 800ca6a:	4605      	mov	r5, r0
 800ca6c:	a808      	add	r0, sp, #32
 800ca6e:	f000 ffc1 	bl	800d9f4 <rcutils_string_map_fini>
 800ca72:	b920      	cbnz	r0, 800ca7e <rcl_publisher_init+0xf6>
 800ca74:	b15d      	cbz	r5, 800ca8e <rcl_publisher_init+0x106>
 800ca76:	2d67      	cmp	r5, #103	; 0x67
 800ca78:	d002      	beq.n	800ca80 <rcl_publisher_init+0xf8>
 800ca7a:	2d69      	cmp	r5, #105	; 0x69
 800ca7c:	d05f      	beq.n	800cb3e <rcl_publisher_init+0x1b6>
 800ca7e:	2501      	movs	r5, #1
 800ca80:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca82:	2800      	cmp	r0, #0
 800ca84:	d096      	beq.n	800c9b4 <rcl_publisher_init+0x2c>
 800ca86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca88:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ca8a:	4798      	blx	r3
 800ca8c:	e792      	b.n	800c9b4 <rcl_publisher_init+0x2c>
 800ca8e:	4640      	mov	r0, r8
 800ca90:	f006 fdb8 	bl	8013604 <rcl_node_get_options>
 800ca94:	2800      	cmp	r0, #0
 800ca96:	d0f2      	beq.n	800ca7e <rcl_publisher_init+0xf6>
 800ca98:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca9a:	f7f3 fbab 	bl	80001f4 <strlen>
 800ca9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800caa0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800caa2:	3001      	adds	r0, #1
 800caa4:	4798      	blx	r3
 800caa6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800caa8:	9107      	str	r1, [sp, #28]
 800caaa:	4681      	mov	r9, r0
 800caac:	4608      	mov	r0, r1
 800caae:	f7f3 fba1 	bl	80001f4 <strlen>
 800cab2:	9907      	ldr	r1, [sp, #28]
 800cab4:	1c42      	adds	r2, r0, #1
 800cab6:	4648      	mov	r0, r9
 800cab8:	f00b fec9 	bl	801884e <memcpy>
 800cabc:	462a      	mov	r2, r5
 800cabe:	4648      	mov	r0, r9
 800cac0:	a90a      	add	r1, sp, #40	; 0x28
 800cac2:	f001 f875 	bl	800dbb0 <rmw_validate_full_topic_name>
 800cac6:	2800      	cmp	r0, #0
 800cac8:	d137      	bne.n	800cb3a <rcl_publisher_init+0x1b2>
 800caca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d138      	bne.n	800cb42 <rcl_publisher_init+0x1ba>
 800cad0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cad2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cad4:	20c0      	movs	r0, #192	; 0xc0
 800cad6:	4798      	blx	r3
 800cad8:	6020      	str	r0, [r4, #0]
 800cada:	b3a0      	cbz	r0, 800cb46 <rcl_publisher_init+0x1be>
 800cadc:	4640      	mov	r0, r8
 800cade:	f006 fd99 	bl	8013614 <rcl_node_get_rmw_handle>
 800cae2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800cae6:	9300      	str	r3, [sp, #0]
 800cae8:	4631      	mov	r1, r6
 800caea:	463b      	mov	r3, r7
 800caec:	464a      	mov	r2, r9
 800caee:	6825      	ldr	r5, [r4, #0]
 800caf0:	f001 f95e 	bl	800ddb0 <rmw_create_publisher>
 800caf4:	6821      	ldr	r1, [r4, #0]
 800caf6:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
 800cafa:	f8d1 00bc 	ldr.w	r0, [r1, #188]	; 0xbc
 800cafe:	b388      	cbz	r0, 800cb64 <rcl_publisher_init+0x1dc>
 800cb00:	3168      	adds	r1, #104	; 0x68
 800cb02:	f001 fa33 	bl	800df6c <rmw_publisher_get_actual_qos>
 800cb06:	6823      	ldr	r3, [r4, #0]
 800cb08:	4605      	mov	r5, r0
 800cb0a:	b9f0      	cbnz	r0, 800cb4a <rcl_publisher_init+0x1c2>
 800cb0c:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800cb10:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 800cb14:	4618      	mov	r0, r3
 800cb16:	2268      	movs	r2, #104	; 0x68
 800cb18:	4639      	mov	r1, r7
 800cb1a:	f00b fe98 	bl	801884e <memcpy>
 800cb1e:	f8d8 2000 	ldr.w	r2, [r8]
 800cb22:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
 800cb26:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb28:	b110      	cbz	r0, 800cb30 <rcl_publisher_init+0x1a8>
 800cb2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb2c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cb2e:	4798      	blx	r3
 800cb30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb32:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cb34:	4648      	mov	r0, r9
 800cb36:	4798      	blx	r3
 800cb38:	e73c      	b.n	800c9b4 <rcl_publisher_init+0x2c>
 800cb3a:	2501      	movs	r5, #1
 800cb3c:	e7f3      	b.n	800cb26 <rcl_publisher_init+0x19e>
 800cb3e:	2567      	movs	r5, #103	; 0x67
 800cb40:	e79e      	b.n	800ca80 <rcl_publisher_init+0xf8>
 800cb42:	2567      	movs	r5, #103	; 0x67
 800cb44:	e7ef      	b.n	800cb26 <rcl_publisher_init+0x19e>
 800cb46:	250a      	movs	r5, #10
 800cb48:	e7ed      	b.n	800cb26 <rcl_publisher_init+0x19e>
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d0f5      	beq.n	800cb3a <rcl_publisher_init+0x1b2>
 800cb4e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800cb52:	b13b      	cbz	r3, 800cb64 <rcl_publisher_init+0x1dc>
 800cb54:	4640      	mov	r0, r8
 800cb56:	f006 fd5d 	bl	8013614 <rcl_node_get_rmw_handle>
 800cb5a:	6823      	ldr	r3, [r4, #0]
 800cb5c:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 800cb60:	f001 fa06 	bl	800df70 <rmw_destroy_publisher>
 800cb64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb66:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cb68:	6820      	ldr	r0, [r4, #0]
 800cb6a:	4798      	blx	r3
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	6023      	str	r3, [r4, #0]
 800cb70:	2501      	movs	r5, #1
 800cb72:	e7d8      	b.n	800cb26 <rcl_publisher_init+0x19e>

0800cb74 <rcl_publisher_get_default_options>:
 800cb74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb76:	4f0e      	ldr	r7, [pc, #56]	; (800cbb0 <rcl_publisher_get_default_options+0x3c>)
 800cb78:	490e      	ldr	r1, [pc, #56]	; (800cbb4 <rcl_publisher_get_default_options+0x40>)
 800cb7a:	b087      	sub	sp, #28
 800cb7c:	4606      	mov	r6, r0
 800cb7e:	2250      	movs	r2, #80	; 0x50
 800cb80:	4638      	mov	r0, r7
 800cb82:	f00b fe64 	bl	801884e <memcpy>
 800cb86:	466c      	mov	r4, sp
 800cb88:	4668      	mov	r0, sp
 800cb8a:	f000 fe2f 	bl	800d7ec <rcutils_get_default_allocator>
 800cb8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cb90:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800cb94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cb96:	6823      	ldr	r3, [r4, #0]
 800cb98:	602b      	str	r3, [r5, #0]
 800cb9a:	f000 fff1 	bl	800db80 <rmw_get_default_publisher_options>
 800cb9e:	4639      	mov	r1, r7
 800cba0:	6678      	str	r0, [r7, #100]	; 0x64
 800cba2:	2268      	movs	r2, #104	; 0x68
 800cba4:	4630      	mov	r0, r6
 800cba6:	f00b fe52 	bl	801884e <memcpy>
 800cbaa:	4630      	mov	r0, r6
 800cbac:	b007      	add	sp, #28
 800cbae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbb0:	20009b48 	.word	0x20009b48
 800cbb4:	080198d0 	.word	0x080198d0

0800cbb8 <rcl_publish>:
 800cbb8:	b1f8      	cbz	r0, 800cbfa <rcl_publish+0x42>
 800cbba:	6803      	ldr	r3, [r0, #0]
 800cbbc:	b570      	push	{r4, r5, r6, lr}
 800cbbe:	4604      	mov	r4, r0
 800cbc0:	b1b3      	cbz	r3, 800cbf0 <rcl_publish+0x38>
 800cbc2:	4616      	mov	r6, r2
 800cbc4:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800cbc8:	b192      	cbz	r2, 800cbf0 <rcl_publish+0x38>
 800cbca:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800cbce:	460d      	mov	r5, r1
 800cbd0:	f005 ff64 	bl	8012a9c <rcl_context_is_valid>
 800cbd4:	b160      	cbz	r0, 800cbf0 <rcl_publish+0x38>
 800cbd6:	6823      	ldr	r3, [r4, #0]
 800cbd8:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 800cbdc:	b140      	cbz	r0, 800cbf0 <rcl_publish+0x38>
 800cbde:	b155      	cbz	r5, 800cbf6 <rcl_publish+0x3e>
 800cbe0:	4632      	mov	r2, r6
 800cbe2:	4629      	mov	r1, r5
 800cbe4:	f001 f884 	bl	800dcf0 <rmw_publish>
 800cbe8:	3800      	subs	r0, #0
 800cbea:	bf18      	it	ne
 800cbec:	2001      	movne	r0, #1
 800cbee:	bd70      	pop	{r4, r5, r6, pc}
 800cbf0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800cbf4:	bd70      	pop	{r4, r5, r6, pc}
 800cbf6:	200b      	movs	r0, #11
 800cbf8:	bd70      	pop	{r4, r5, r6, pc}
 800cbfa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800cbfe:	4770      	bx	lr

0800cc00 <rcl_get_zero_initialized_subscription>:
 800cc00:	4b01      	ldr	r3, [pc, #4]	; (800cc08 <rcl_get_zero_initialized_subscription+0x8>)
 800cc02:	6818      	ldr	r0, [r3, #0]
 800cc04:	4770      	bx	lr
 800cc06:	bf00      	nop
 800cc08:	08019920 	.word	0x08019920

0800cc0c <rcl_subscription_init>:
 800cc0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc10:	b091      	sub	sp, #68	; 0x44
 800cc12:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800cc14:	b1d7      	cbz	r7, 800cc4c <rcl_subscription_init+0x40>
 800cc16:	f107 0950 	add.w	r9, r7, #80	; 0x50
 800cc1a:	4604      	mov	r4, r0
 800cc1c:	4648      	mov	r0, r9
 800cc1e:	4688      	mov	r8, r1
 800cc20:	4616      	mov	r6, r2
 800cc22:	461d      	mov	r5, r3
 800cc24:	f000 fdf0 	bl	800d808 <rcutils_allocator_is_valid>
 800cc28:	b180      	cbz	r0, 800cc4c <rcl_subscription_init+0x40>
 800cc2a:	b17c      	cbz	r4, 800cc4c <rcl_subscription_init+0x40>
 800cc2c:	4640      	mov	r0, r8
 800cc2e:	f006 fccf 	bl	80135d0 <rcl_node_is_valid>
 800cc32:	b380      	cbz	r0, 800cc96 <rcl_subscription_init+0x8a>
 800cc34:	b156      	cbz	r6, 800cc4c <rcl_subscription_init+0x40>
 800cc36:	b14d      	cbz	r5, 800cc4c <rcl_subscription_init+0x40>
 800cc38:	f8d4 a000 	ldr.w	sl, [r4]
 800cc3c:	f1ba 0f00 	cmp.w	sl, #0
 800cc40:	d009      	beq.n	800cc56 <rcl_subscription_init+0x4a>
 800cc42:	2564      	movs	r5, #100	; 0x64
 800cc44:	4628      	mov	r0, r5
 800cc46:	b011      	add	sp, #68	; 0x44
 800cc48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc4c:	250b      	movs	r5, #11
 800cc4e:	4628      	mov	r0, r5
 800cc50:	b011      	add	sp, #68	; 0x44
 800cc52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc56:	46ce      	mov	lr, r9
 800cc58:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cc5c:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 800cc60:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cc64:	f8de 3000 	ldr.w	r3, [lr]
 800cc68:	f8cc 3000 	str.w	r3, [ip]
 800cc6c:	f000 fe08 	bl	800d880 <rcutils_get_zero_initialized_string_map>
 800cc70:	ab10      	add	r3, sp, #64	; 0x40
 800cc72:	4684      	mov	ip, r0
 800cc74:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800cc78:	f8cd c020 	str.w	ip, [sp, #32]
 800cc7c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800cc80:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 800cc84:	4651      	mov	r1, sl
 800cc86:	a808      	add	r0, sp, #32
 800cc88:	f000 fe74 	bl	800d974 <rcutils_string_map_init>
 800cc8c:	b140      	cbz	r0, 800cca0 <rcl_subscription_init+0x94>
 800cc8e:	280a      	cmp	r0, #10
 800cc90:	d011      	beq.n	800ccb6 <rcl_subscription_init+0xaa>
 800cc92:	2501      	movs	r5, #1
 800cc94:	e7db      	b.n	800cc4e <rcl_subscription_init+0x42>
 800cc96:	25c8      	movs	r5, #200	; 0xc8
 800cc98:	4628      	mov	r0, r5
 800cc9a:	b011      	add	sp, #68	; 0x44
 800cc9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cca0:	a808      	add	r0, sp, #32
 800cca2:	f006 f8cb 	bl	8012e3c <rcl_get_default_topic_name_substitutions>
 800cca6:	4682      	mov	sl, r0
 800cca8:	b138      	cbz	r0, 800ccba <rcl_subscription_init+0xae>
 800ccaa:	a808      	add	r0, sp, #32
 800ccac:	f000 fea2 	bl	800d9f4 <rcutils_string_map_fini>
 800ccb0:	f1ba 0f0a 	cmp.w	sl, #10
 800ccb4:	d1ed      	bne.n	800cc92 <rcl_subscription_init+0x86>
 800ccb6:	250a      	movs	r5, #10
 800ccb8:	e7c9      	b.n	800cc4e <rcl_subscription_init+0x42>
 800ccba:	4640      	mov	r0, r8
 800ccbc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800ccc0:	f006 fc90 	bl	80135e4 <rcl_node_get_name>
 800ccc4:	4682      	mov	sl, r0
 800ccc6:	4640      	mov	r0, r8
 800ccc8:	f006 fc94 	bl	80135f4 <rcl_node_get_namespace>
 800cccc:	4686      	mov	lr, r0
 800ccce:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800ccd2:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 800ccd6:	46ec      	mov	ip, sp
 800ccd8:	f8cd b014 	str.w	fp, [sp, #20]
 800ccdc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cce0:	f8d9 3000 	ldr.w	r3, [r9]
 800cce4:	f8cc 3000 	str.w	r3, [ip]
 800cce8:	4628      	mov	r0, r5
 800ccea:	4651      	mov	r1, sl
 800ccec:	4672      	mov	r2, lr
 800ccee:	ab08      	add	r3, sp, #32
 800ccf0:	f005 ff3e 	bl	8012b70 <rcl_expand_topic_name>
 800ccf4:	4605      	mov	r5, r0
 800ccf6:	a808      	add	r0, sp, #32
 800ccf8:	f000 fe7c 	bl	800d9f4 <rcutils_string_map_fini>
 800ccfc:	b920      	cbnz	r0, 800cd08 <rcl_subscription_init+0xfc>
 800ccfe:	b15d      	cbz	r5, 800cd18 <rcl_subscription_init+0x10c>
 800cd00:	2d67      	cmp	r5, #103	; 0x67
 800cd02:	d002      	beq.n	800cd0a <rcl_subscription_init+0xfe>
 800cd04:	2d69      	cmp	r5, #105	; 0x69
 800cd06:	d05a      	beq.n	800cdbe <rcl_subscription_init+0x1b2>
 800cd08:	2501      	movs	r5, #1
 800cd0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cd0c:	2800      	cmp	r0, #0
 800cd0e:	d09e      	beq.n	800cc4e <rcl_subscription_init+0x42>
 800cd10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd12:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cd14:	4798      	blx	r3
 800cd16:	e79a      	b.n	800cc4e <rcl_subscription_init+0x42>
 800cd18:	4640      	mov	r0, r8
 800cd1a:	f006 fc73 	bl	8013604 <rcl_node_get_options>
 800cd1e:	2800      	cmp	r0, #0
 800cd20:	d0f2      	beq.n	800cd08 <rcl_subscription_init+0xfc>
 800cd22:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cd24:	f7f3 fa66 	bl	80001f4 <strlen>
 800cd28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd2a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cd2c:	3001      	adds	r0, #1
 800cd2e:	4798      	blx	r3
 800cd30:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cd32:	9107      	str	r1, [sp, #28]
 800cd34:	4681      	mov	r9, r0
 800cd36:	4608      	mov	r0, r1
 800cd38:	f7f3 fa5c 	bl	80001f4 <strlen>
 800cd3c:	9907      	ldr	r1, [sp, #28]
 800cd3e:	1c42      	adds	r2, r0, #1
 800cd40:	4648      	mov	r0, r9
 800cd42:	f00b fd84 	bl	801884e <memcpy>
 800cd46:	462a      	mov	r2, r5
 800cd48:	4648      	mov	r0, r9
 800cd4a:	a90a      	add	r1, sp, #40	; 0x28
 800cd4c:	f000 ff30 	bl	800dbb0 <rmw_validate_full_topic_name>
 800cd50:	2800      	cmp	r0, #0
 800cd52:	d132      	bne.n	800cdba <rcl_subscription_init+0x1ae>
 800cd54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d133      	bne.n	800cdc2 <rcl_subscription_init+0x1b6>
 800cd5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd5c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cd5e:	20c8      	movs	r0, #200	; 0xc8
 800cd60:	4798      	blx	r3
 800cd62:	6020      	str	r0, [r4, #0]
 800cd64:	b378      	cbz	r0, 800cdc6 <rcl_subscription_init+0x1ba>
 800cd66:	4640      	mov	r0, r8
 800cd68:	f006 fc54 	bl	8013614 <rcl_node_get_rmw_handle>
 800cd6c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800cd70:	9300      	str	r3, [sp, #0]
 800cd72:	4631      	mov	r1, r6
 800cd74:	463b      	mov	r3, r7
 800cd76:	464a      	mov	r2, r9
 800cd78:	6825      	ldr	r5, [r4, #0]
 800cd7a:	f001 f949 	bl	800e010 <rmw_create_subscription>
 800cd7e:	6821      	ldr	r1, [r4, #0]
 800cd80:	f8c5 00c0 	str.w	r0, [r5, #192]	; 0xc0
 800cd84:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
 800cd88:	b368      	cbz	r0, 800cde6 <rcl_subscription_init+0x1da>
 800cd8a:	3170      	adds	r1, #112	; 0x70
 800cd8c:	f001 fa20 	bl	800e1d0 <rmw_subscription_get_actual_qos>
 800cd90:	4605      	mov	r5, r0
 800cd92:	b9d0      	cbnz	r0, 800cdca <rcl_subscription_init+0x1be>
 800cd94:	6820      	ldr	r0, [r4, #0]
 800cd96:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800cd9a:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 800cd9e:	2270      	movs	r2, #112	; 0x70
 800cda0:	4639      	mov	r1, r7
 800cda2:	f00b fd54 	bl	801884e <memcpy>
 800cda6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cda8:	b110      	cbz	r0, 800cdb0 <rcl_subscription_init+0x1a4>
 800cdaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cdac:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cdae:	4798      	blx	r3
 800cdb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cdb2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cdb4:	4648      	mov	r0, r9
 800cdb6:	4798      	blx	r3
 800cdb8:	e749      	b.n	800cc4e <rcl_subscription_init+0x42>
 800cdba:	2501      	movs	r5, #1
 800cdbc:	e7f3      	b.n	800cda6 <rcl_subscription_init+0x19a>
 800cdbe:	2567      	movs	r5, #103	; 0x67
 800cdc0:	e7a3      	b.n	800cd0a <rcl_subscription_init+0xfe>
 800cdc2:	2567      	movs	r5, #103	; 0x67
 800cdc4:	e7ef      	b.n	800cda6 <rcl_subscription_init+0x19a>
 800cdc6:	250a      	movs	r5, #10
 800cdc8:	e7ed      	b.n	800cda6 <rcl_subscription_init+0x19a>
 800cdca:	6823      	ldr	r3, [r4, #0]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d0f4      	beq.n	800cdba <rcl_subscription_init+0x1ae>
 800cdd0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800cdd4:	b13b      	cbz	r3, 800cde6 <rcl_subscription_init+0x1da>
 800cdd6:	4640      	mov	r0, r8
 800cdd8:	f006 fc1c 	bl	8013614 <rcl_node_get_rmw_handle>
 800cddc:	6823      	ldr	r3, [r4, #0]
 800cdde:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800cde2:	f001 f9f7 	bl	800e1d4 <rmw_destroy_subscription>
 800cde6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cde8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cdea:	6820      	ldr	r0, [r4, #0]
 800cdec:	4798      	blx	r3
 800cdee:	2300      	movs	r3, #0
 800cdf0:	6023      	str	r3, [r4, #0]
 800cdf2:	2501      	movs	r5, #1
 800cdf4:	e7d7      	b.n	800cda6 <rcl_subscription_init+0x19a>
 800cdf6:	bf00      	nop

0800cdf8 <rcl_subscription_get_default_options>:
 800cdf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdfc:	4f12      	ldr	r7, [pc, #72]	; (800ce48 <rcl_subscription_get_default_options+0x50>)
 800cdfe:	4913      	ldr	r1, [pc, #76]	; (800ce4c <rcl_subscription_get_default_options+0x54>)
 800ce00:	b088      	sub	sp, #32
 800ce02:	4606      	mov	r6, r0
 800ce04:	2250      	movs	r2, #80	; 0x50
 800ce06:	4638      	mov	r0, r7
 800ce08:	f00b fd21 	bl	801884e <memcpy>
 800ce0c:	ac02      	add	r4, sp, #8
 800ce0e:	a802      	add	r0, sp, #8
 800ce10:	f000 fcec 	bl	800d7ec <rcutils_get_default_allocator>
 800ce14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ce16:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800ce1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ce1c:	46e8      	mov	r8, sp
 800ce1e:	6823      	ldr	r3, [r4, #0]
 800ce20:	602b      	str	r3, [r5, #0]
 800ce22:	4640      	mov	r0, r8
 800ce24:	f000 feae 	bl	800db84 <rmw_get_default_subscription_options>
 800ce28:	e898 0003 	ldmia.w	r8, {r0, r1}
 800ce2c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ce30:	e883 0003 	stmia.w	r3, {r0, r1}
 800ce34:	2270      	movs	r2, #112	; 0x70
 800ce36:	4639      	mov	r1, r7
 800ce38:	4630      	mov	r0, r6
 800ce3a:	f00b fd08 	bl	801884e <memcpy>
 800ce3e:	4630      	mov	r0, r6
 800ce40:	b008      	add	sp, #32
 800ce42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce46:	bf00      	nop
 800ce48:	20009bb0 	.word	0x20009bb0
 800ce4c:	08019928 	.word	0x08019928

0800ce50 <rcl_take>:
 800ce50:	2800      	cmp	r0, #0
 800ce52:	d03f      	beq.n	800ced4 <rcl_take+0x84>
 800ce54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ce58:	4617      	mov	r7, r2
 800ce5a:	6802      	ldr	r2, [r0, #0]
 800ce5c:	b09d      	sub	sp, #116	; 0x74
 800ce5e:	4606      	mov	r6, r0
 800ce60:	b382      	cbz	r2, 800cec4 <rcl_take+0x74>
 800ce62:	4699      	mov	r9, r3
 800ce64:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 800ce68:	b363      	cbz	r3, 800cec4 <rcl_take+0x74>
 800ce6a:	4688      	mov	r8, r1
 800ce6c:	b381      	cbz	r1, 800ced0 <rcl_take+0x80>
 800ce6e:	2f00      	cmp	r7, #0
 800ce70:	d034      	beq.n	800cedc <rcl_take+0x8c>
 800ce72:	a802      	add	r0, sp, #8
 800ce74:	ac02      	add	r4, sp, #8
 800ce76:	f000 fe89 	bl	800db8c <rmw_get_zero_initialized_message_info>
 800ce7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ce7c:	463d      	mov	r5, r7
 800ce7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ce80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ce82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ce84:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ce88:	6834      	ldr	r4, [r6, #0]
 800ce8a:	f8d4 60c0 	ldr.w	r6, [r4, #192]	; 0xc0
 800ce8e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800ce92:	2400      	movs	r4, #0
 800ce94:	463b      	mov	r3, r7
 800ce96:	4630      	mov	r0, r6
 800ce98:	f8cd 9000 	str.w	r9, [sp]
 800ce9c:	4641      	mov	r1, r8
 800ce9e:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 800cea2:	f88d 403f 	strb.w	r4, [sp, #63]	; 0x3f
 800cea6:	f001 f9f3 	bl	800e290 <rmw_take_with_info>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	b9c0      	cbnz	r0, 800cee0 <rcl_take+0x90>
 800ceae:	f89d 103f 	ldrb.w	r1, [sp, #63]	; 0x3f
 800ceb2:	f240 1291 	movw	r2, #401	; 0x191
 800ceb6:	2900      	cmp	r1, #0
 800ceb8:	bf08      	it	eq
 800ceba:	4613      	moveq	r3, r2
 800cebc:	4618      	mov	r0, r3
 800cebe:	b01d      	add	sp, #116	; 0x74
 800cec0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cec4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800cec8:	4618      	mov	r0, r3
 800ceca:	b01d      	add	sp, #116	; 0x74
 800cecc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ced0:	230b      	movs	r3, #11
 800ced2:	e7f3      	b.n	800cebc <rcl_take+0x6c>
 800ced4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800ced8:	4618      	mov	r0, r3
 800ceda:	4770      	bx	lr
 800cedc:	af10      	add	r7, sp, #64	; 0x40
 800cede:	e7c8      	b.n	800ce72 <rcl_take+0x22>
 800cee0:	f005 fdbe 	bl	8012a60 <rcl_convert_rmw_ret_to_rcl_ret>
 800cee4:	4603      	mov	r3, r0
 800cee6:	e7e9      	b.n	800cebc <rcl_take+0x6c>

0800cee8 <rcl_subscription_get_rmw_handle>:
 800cee8:	b118      	cbz	r0, 800cef2 <rcl_subscription_get_rmw_handle+0xa>
 800ceea:	6800      	ldr	r0, [r0, #0]
 800ceec:	b108      	cbz	r0, 800cef2 <rcl_subscription_get_rmw_handle+0xa>
 800ceee:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 800cef2:	4770      	bx	lr

0800cef4 <_rclc_check_for_new_data>:
 800cef4:	b1e0      	cbz	r0, 800cf30 <_rclc_check_for_new_data+0x3c>
 800cef6:	7803      	ldrb	r3, [r0, #0]
 800cef8:	2b08      	cmp	r3, #8
 800cefa:	d81b      	bhi.n	800cf34 <_rclc_check_for_new_data+0x40>
 800cefc:	e8df f003 	tbb	[pc, r3]
 800cf00:	12161010 	.word	0x12161010
 800cf04:	05050512 	.word	0x05050512
 800cf08:	14          	.byte	0x14
 800cf09:	00          	.byte	0x00
 800cf0a:	6a0b      	ldr	r3, [r1, #32]
 800cf0c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800cf0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf12:	3b00      	subs	r3, #0
 800cf14:	bf18      	it	ne
 800cf16:	2301      	movne	r3, #1
 800cf18:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 800cf1c:	2000      	movs	r0, #0
 800cf1e:	4770      	bx	lr
 800cf20:	680b      	ldr	r3, [r1, #0]
 800cf22:	e7f3      	b.n	800cf0c <_rclc_check_for_new_data+0x18>
 800cf24:	698b      	ldr	r3, [r1, #24]
 800cf26:	e7f1      	b.n	800cf0c <_rclc_check_for_new_data+0x18>
 800cf28:	688b      	ldr	r3, [r1, #8]
 800cf2a:	e7ef      	b.n	800cf0c <_rclc_check_for_new_data+0x18>
 800cf2c:	690b      	ldr	r3, [r1, #16]
 800cf2e:	e7ed      	b.n	800cf0c <_rclc_check_for_new_data+0x18>
 800cf30:	200b      	movs	r0, #11
 800cf32:	4770      	bx	lr
 800cf34:	2300      	movs	r3, #0
 800cf36:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 800cf3a:	2001      	movs	r0, #1
 800cf3c:	4770      	bx	lr
 800cf3e:	bf00      	nop

0800cf40 <_rclc_take_new_data>:
 800cf40:	2800      	cmp	r0, #0
 800cf42:	d049      	beq.n	800cfd8 <_rclc_take_new_data+0x98>
 800cf44:	b510      	push	{r4, lr}
 800cf46:	7803      	ldrb	r3, [r0, #0]
 800cf48:	b08e      	sub	sp, #56	; 0x38
 800cf4a:	4604      	mov	r4, r0
 800cf4c:	2b08      	cmp	r3, #8
 800cf4e:	d84a      	bhi.n	800cfe6 <_rclc_take_new_data+0xa6>
 800cf50:	e8df f003 	tbb	[pc, r3]
 800cf54:	2b121515 	.word	0x2b121515
 800cf58:	0505052b 	.word	0x0505052b
 800cf5c:	12          	.byte	0x12
 800cf5d:	00          	.byte	0x00
 800cf5e:	6a0b      	ldr	r3, [r1, #32]
 800cf60:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800cf62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf66:	b13b      	cbz	r3, 800cf78 <_rclc_take_new_data+0x38>
 800cf68:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800cf6c:	f104 0110 	add.w	r1, r4, #16
 800cf70:	f006 fc8a 	bl	8013888 <rcl_take_request>
 800cf74:	2800      	cmp	r0, #0
 800cf76:	d131      	bne.n	800cfdc <_rclc_take_new_data+0x9c>
 800cf78:	2000      	movs	r0, #0
 800cf7a:	b00e      	add	sp, #56	; 0x38
 800cf7c:	bd10      	pop	{r4, pc}
 800cf7e:	680b      	ldr	r3, [r1, #0]
 800cf80:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800cf82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d0f6      	beq.n	800cf78 <_rclc_take_new_data+0x38>
 800cf8a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800cf8e:	2300      	movs	r3, #0
 800cf90:	aa02      	add	r2, sp, #8
 800cf92:	f7ff ff5d 	bl	800ce50 <rcl_take>
 800cf96:	2800      	cmp	r0, #0
 800cf98:	d0ef      	beq.n	800cf7a <_rclc_take_new_data+0x3a>
 800cf9a:	f240 1391 	movw	r3, #401	; 0x191
 800cf9e:	4298      	cmp	r0, r3
 800cfa0:	d115      	bne.n	800cfce <_rclc_take_new_data+0x8e>
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800cfa8:	e7e7      	b.n	800cf7a <_rclc_take_new_data+0x3a>
 800cfaa:	698b      	ldr	r3, [r1, #24]
 800cfac:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800cfae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d0e0      	beq.n	800cf78 <_rclc_take_new_data+0x38>
 800cfb6:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800cfba:	f104 0110 	add.w	r1, r4, #16
 800cfbe:	f005 fd13 	bl	80129e8 <rcl_take_response>
 800cfc2:	2800      	cmp	r0, #0
 800cfc4:	d0d8      	beq.n	800cf78 <_rclc_take_new_data+0x38>
 800cfc6:	f240 13f5 	movw	r3, #501	; 0x1f5
 800cfca:	4298      	cmp	r0, r3
 800cfcc:	d0d5      	beq.n	800cf7a <_rclc_take_new_data+0x3a>
 800cfce:	9001      	str	r0, [sp, #4]
 800cfd0:	f000 fc3e 	bl	800d850 <rcutils_reset_error>
 800cfd4:	9801      	ldr	r0, [sp, #4]
 800cfd6:	e7d0      	b.n	800cf7a <_rclc_take_new_data+0x3a>
 800cfd8:	200b      	movs	r0, #11
 800cfda:	4770      	bx	lr
 800cfdc:	f240 2359 	movw	r3, #601	; 0x259
 800cfe0:	4298      	cmp	r0, r3
 800cfe2:	d0de      	beq.n	800cfa2 <_rclc_take_new_data+0x62>
 800cfe4:	e7f3      	b.n	800cfce <_rclc_take_new_data+0x8e>
 800cfe6:	2001      	movs	r0, #1
 800cfe8:	e7c7      	b.n	800cf7a <_rclc_take_new_data+0x3a>
 800cfea:	bf00      	nop

0800cfec <rclc_executor_trigger_any>:
 800cfec:	b170      	cbz	r0, 800d00c <rclc_executor_trigger_any+0x20>
 800cfee:	b179      	cbz	r1, 800d010 <rclc_executor_trigger_any+0x24>
 800cff0:	4603      	mov	r3, r0
 800cff2:	2200      	movs	r2, #0
 800cff4:	e005      	b.n	800d002 <rclc_executor_trigger_any+0x16>
 800cff6:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 800cffa:	3340      	adds	r3, #64	; 0x40
 800cffc:	b930      	cbnz	r0, 800d00c <rclc_executor_trigger_any+0x20>
 800cffe:	4291      	cmp	r1, r2
 800d000:	d005      	beq.n	800d00e <rclc_executor_trigger_any+0x22>
 800d002:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 800d006:	3201      	adds	r2, #1
 800d008:	2800      	cmp	r0, #0
 800d00a:	d1f4      	bne.n	800cff6 <rclc_executor_trigger_any+0xa>
 800d00c:	4770      	bx	lr
 800d00e:	4770      	bx	lr
 800d010:	4608      	mov	r0, r1
 800d012:	e7fb      	b.n	800d00c <rclc_executor_trigger_any+0x20>

0800d014 <_rclc_execute.part.0>:
 800d014:	b530      	push	{r4, r5, lr}
 800d016:	7803      	ldrb	r3, [r0, #0]
 800d018:	b083      	sub	sp, #12
 800d01a:	4604      	mov	r4, r0
 800d01c:	2b08      	cmp	r3, #8
 800d01e:	d85b      	bhi.n	800d0d8 <_rclc_execute.part.0+0xc4>
 800d020:	e8df f003 	tbb	[pc, r3]
 800d024:	3036271f 	.word	0x3036271f
 800d028:	0505053f 	.word	0x0505053f
 800d02c:	1a          	.byte	0x1a
 800d02d:	00          	.byte	0x00
 800d02e:	2b06      	cmp	r3, #6
 800d030:	d049      	beq.n	800d0c6 <_rclc_execute.part.0+0xb2>
 800d032:	2b07      	cmp	r3, #7
 800d034:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800d036:	d140      	bne.n	800d0ba <_rclc_execute.part.0+0xa6>
 800d038:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 800d03c:	6880      	ldr	r0, [r0, #8]
 800d03e:	4798      	blx	r3
 800d040:	f104 0110 	add.w	r1, r4, #16
 800d044:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800d046:	6860      	ldr	r0, [r4, #4]
 800d048:	f006 fc56 	bl	80138f8 <rcl_send_response>
 800d04c:	b138      	cbz	r0, 800d05e <_rclc_execute.part.0+0x4a>
 800d04e:	9001      	str	r0, [sp, #4]
 800d050:	f000 fbfe 	bl	800d850 <rcutils_reset_error>
 800d054:	9801      	ldr	r0, [sp, #4]
 800d056:	e002      	b.n	800d05e <_rclc_execute.part.0+0x4a>
 800d058:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800d05a:	4798      	blx	r3
 800d05c:	2000      	movs	r0, #0
 800d05e:	b003      	add	sp, #12
 800d060:	bd30      	pop	{r4, r5, pc}
 800d062:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800d066:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800d068:	b96d      	cbnz	r5, 800d086 <_rclc_execute.part.0+0x72>
 800d06a:	4628      	mov	r0, r5
 800d06c:	4798      	blx	r3
 800d06e:	4628      	mov	r0, r5
 800d070:	e7f5      	b.n	800d05e <_rclc_execute.part.0+0x4a>
 800d072:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800d076:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	; 0x2c
 800d07a:	b1d5      	cbz	r5, 800d0b2 <_rclc_execute.part.0+0x9e>
 800d07c:	6880      	ldr	r0, [r0, #8]
 800d07e:	4798      	blx	r3
 800d080:	2000      	movs	r0, #0
 800d082:	e7ec      	b.n	800d05e <_rclc_execute.part.0+0x4a>
 800d084:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800d086:	68a0      	ldr	r0, [r4, #8]
 800d088:	4798      	blx	r3
 800d08a:	2000      	movs	r0, #0
 800d08c:	b003      	add	sp, #12
 800d08e:	bd30      	pop	{r4, r5, pc}
 800d090:	6840      	ldr	r0, [r0, #4]
 800d092:	f006 fceb 	bl	8013a6c <rcl_timer_call>
 800d096:	f240 3321 	movw	r3, #801	; 0x321
 800d09a:	4298      	cmp	r0, r3
 800d09c:	d1d6      	bne.n	800d04c <_rclc_execute.part.0+0x38>
 800d09e:	2000      	movs	r0, #0
 800d0a0:	e7dd      	b.n	800d05e <_rclc_execute.part.0+0x4a>
 800d0a2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800d0a4:	6880      	ldr	r0, [r0, #8]
 800d0a6:	f104 0110 	add.w	r1, r4, #16
 800d0aa:	4798      	blx	r3
 800d0ac:	2000      	movs	r0, #0
 800d0ae:	b003      	add	sp, #12
 800d0b0:	bd30      	pop	{r4, r5, pc}
 800d0b2:	4628      	mov	r0, r5
 800d0b4:	4798      	blx	r3
 800d0b6:	4628      	mov	r0, r5
 800d0b8:	e7d1      	b.n	800d05e <_rclc_execute.part.0+0x4a>
 800d0ba:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800d0bc:	6880      	ldr	r0, [r0, #8]
 800d0be:	4798      	blx	r3
 800d0c0:	f104 0110 	add.w	r1, r4, #16
 800d0c4:	e7be      	b.n	800d044 <_rclc_execute.part.0+0x30>
 800d0c6:	f100 0110 	add.w	r1, r0, #16
 800d0ca:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800d0cc:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800d0ce:	6880      	ldr	r0, [r0, #8]
 800d0d0:	9101      	str	r1, [sp, #4]
 800d0d2:	4798      	blx	r3
 800d0d4:	9901      	ldr	r1, [sp, #4]
 800d0d6:	e7b5      	b.n	800d044 <_rclc_execute.part.0+0x30>
 800d0d8:	2001      	movs	r0, #1
 800d0da:	e7c0      	b.n	800d05e <_rclc_execute.part.0+0x4a>
 800d0dc:	0000      	movs	r0, r0
	...

0800d0e0 <rclc_executor_init>:
 800d0e0:	2800      	cmp	r0, #0
 800d0e2:	d063      	beq.n	800d1ac <rclc_executor_init+0xcc>
 800d0e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0e8:	460f      	mov	r7, r1
 800d0ea:	b0ae      	sub	sp, #184	; 0xb8
 800d0ec:	2900      	cmp	r1, #0
 800d0ee:	d055      	beq.n	800d19c <rclc_executor_init+0xbc>
 800d0f0:	4605      	mov	r5, r0
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	4616      	mov	r6, r2
 800d0f6:	4698      	mov	r8, r3
 800d0f8:	f000 fb86 	bl	800d808 <rcutils_allocator_is_valid>
 800d0fc:	2800      	cmp	r0, #0
 800d0fe:	d04d      	beq.n	800d19c <rclc_executor_init+0xbc>
 800d100:	2e00      	cmp	r6, #0
 800d102:	d04b      	beq.n	800d19c <rclc_executor_init+0xbc>
 800d104:	492e      	ldr	r1, [pc, #184]	; (800d1c0 <rclc_executor_init+0xe0>)
 800d106:	2280      	movs	r2, #128	; 0x80
 800d108:	a80e      	add	r0, sp, #56	; 0x38
 800d10a:	f00b fba0 	bl	801884e <memcpy>
 800d10e:	2400      	movs	r4, #0
 800d110:	a90e      	add	r1, sp, #56	; 0x38
 800d112:	2280      	movs	r2, #128	; 0x80
 800d114:	4628      	mov	r0, r5
 800d116:	f00b fb9a 	bl	801884e <memcpy>
 800d11a:	602f      	str	r7, [r5, #0]
 800d11c:	4668      	mov	r0, sp
 800d11e:	e9c5 6402 	strd	r6, r4, [r5, #8]
 800d122:	466f      	mov	r7, sp
 800d124:	f006 fefc 	bl	8013f20 <rcl_get_zero_initialized_wait_set>
 800d128:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d12a:	f105 0c14 	add.w	ip, r5, #20
 800d12e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d132:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d134:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d138:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d13a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d13e:	a31e      	add	r3, pc, #120	; (adr r3, 800d1b8 <rclc_executor_init+0xd8>)
 800d140:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d144:	6839      	ldr	r1, [r7, #0]
 800d146:	f8cc 1000 	str.w	r1, [ip]
 800d14a:	f8d8 7000 	ldr.w	r7, [r8]
 800d14e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800d152:	f8c5 8010 	str.w	r8, [r5, #16]
 800d156:	e9c5 2318 	strd	r2, r3, [r5, #96]	; 0x60
 800d15a:	01b0      	lsls	r0, r6, #6
 800d15c:	47b8      	blx	r7
 800d15e:	6068      	str	r0, [r5, #4]
 800d160:	b908      	cbnz	r0, 800d166 <rclc_executor_init+0x86>
 800d162:	e025      	b.n	800d1b0 <rclc_executor_init+0xd0>
 800d164:	6868      	ldr	r0, [r5, #4]
 800d166:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800d16a:	4631      	mov	r1, r6
 800d16c:	3401      	adds	r4, #1
 800d16e:	f000 fa01 	bl	800d574 <rclc_executor_handle_init>
 800d172:	42a6      	cmp	r6, r4
 800d174:	d1f6      	bne.n	800d164 <rclc_executor_init+0x84>
 800d176:	f105 0048 	add.w	r0, r5, #72	; 0x48
 800d17a:	f000 f9ef 	bl	800d55c <rclc_executor_handle_counters_zero_init>
 800d17e:	686b      	ldr	r3, [r5, #4]
 800d180:	4a10      	ldr	r2, [pc, #64]	; (800d1c4 <rclc_executor_init+0xe4>)
 800d182:	672a      	str	r2, [r5, #112]	; 0x70
 800d184:	2000      	movs	r0, #0
 800d186:	6768      	str	r0, [r5, #116]	; 0x74
 800d188:	b163      	cbz	r3, 800d1a4 <rclc_executor_init+0xc4>
 800d18a:	692b      	ldr	r3, [r5, #16]
 800d18c:	b153      	cbz	r3, 800d1a4 <rclc_executor_init+0xc4>
 800d18e:	68ab      	ldr	r3, [r5, #8]
 800d190:	b143      	cbz	r3, 800d1a4 <rclc_executor_init+0xc4>
 800d192:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
 800d196:	b02e      	add	sp, #184	; 0xb8
 800d198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d19c:	200b      	movs	r0, #11
 800d19e:	b02e      	add	sp, #184	; 0xb8
 800d1a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	b02e      	add	sp, #184	; 0xb8
 800d1a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1ac:	200b      	movs	r0, #11
 800d1ae:	4770      	bx	lr
 800d1b0:	200a      	movs	r0, #10
 800d1b2:	e7f4      	b.n	800d19e <rclc_executor_init+0xbe>
 800d1b4:	f3af 8000 	nop.w
 800d1b8:	3b9aca00 	.word	0x3b9aca00
 800d1bc:	00000000 	.word	0x00000000
 800d1c0:	08019978 	.word	0x08019978
 800d1c4:	0800cfed 	.word	0x0800cfed

0800d1c8 <rclc_executor_add_subscription>:
 800d1c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1cc:	f89d 7018 	ldrb.w	r7, [sp, #24]
 800d1d0:	b358      	cbz	r0, 800d22a <rclc_executor_add_subscription+0x62>
 800d1d2:	b351      	cbz	r1, 800d22a <rclc_executor_add_subscription+0x62>
 800d1d4:	b34a      	cbz	r2, 800d22a <rclc_executor_add_subscription+0x62>
 800d1d6:	b343      	cbz	r3, 800d22a <rclc_executor_add_subscription+0x62>
 800d1d8:	4604      	mov	r4, r0
 800d1da:	e9d0 0502 	ldrd	r0, r5, [r0, #8]
 800d1de:	4285      	cmp	r5, r0
 800d1e0:	d302      	bcc.n	800d1e8 <rclc_executor_add_subscription+0x20>
 800d1e2:	2001      	movs	r0, #1
 800d1e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1e8:	f8d4 e004 	ldr.w	lr, [r4, #4]
 800d1ec:	ea4f 1885 	mov.w	r8, r5, lsl #6
 800d1f0:	eb0e 1685 	add.w	r6, lr, r5, lsl #6
 800d1f4:	f04f 0c00 	mov.w	ip, #0
 800d1f8:	f80e c008 	strb.w	ip, [lr, r8]
 800d1fc:	2001      	movs	r0, #1
 800d1fe:	3501      	adds	r5, #1
 800d200:	f104 0814 	add.w	r8, r4, #20
 800d204:	f886 0038 	strb.w	r0, [r6, #56]	; 0x38
 800d208:	e9c6 1201 	strd	r1, r2, [r6, #4]
 800d20c:	6333      	str	r3, [r6, #48]	; 0x30
 800d20e:	7077      	strb	r7, [r6, #1]
 800d210:	f8c6 c02c 	str.w	ip, [r6, #44]	; 0x2c
 800d214:	4640      	mov	r0, r8
 800d216:	60e5      	str	r5, [r4, #12]
 800d218:	f006 fe94 	bl	8013f44 <rcl_wait_set_is_valid>
 800d21c:	b940      	cbnz	r0, 800d230 <rclc_executor_add_subscription+0x68>
 800d21e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d220:	3301      	adds	r3, #1
 800d222:	64a3      	str	r3, [r4, #72]	; 0x48
 800d224:	2000      	movs	r0, #0
 800d226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d22a:	200b      	movs	r0, #11
 800d22c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d230:	4640      	mov	r0, r8
 800d232:	f006 fe8d 	bl	8013f50 <rcl_wait_set_fini>
 800d236:	2800      	cmp	r0, #0
 800d238:	d0f1      	beq.n	800d21e <rclc_executor_add_subscription+0x56>
 800d23a:	e7d3      	b.n	800d1e4 <rclc_executor_add_subscription+0x1c>

0800d23c <rclc_executor_prepare>:
 800d23c:	2800      	cmp	r0, #0
 800d23e:	d03d      	beq.n	800d2bc <rclc_executor_prepare+0x80>
 800d240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d244:	f100 0814 	add.w	r8, r0, #20
 800d248:	b09a      	sub	sp, #104	; 0x68
 800d24a:	4604      	mov	r4, r0
 800d24c:	4640      	mov	r0, r8
 800d24e:	f006 fe79 	bl	8013f44 <rcl_wait_set_is_valid>
 800d252:	b118      	cbz	r0, 800d25c <rclc_executor_prepare+0x20>
 800d254:	2000      	movs	r0, #0
 800d256:	b01a      	add	sp, #104	; 0x68
 800d258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d25c:	4640      	mov	r0, r8
 800d25e:	f006 fe77 	bl	8013f50 <rcl_wait_set_fini>
 800d262:	2800      	cmp	r0, #0
 800d264:	d127      	bne.n	800d2b6 <rclc_executor_prepare+0x7a>
 800d266:	a80c      	add	r0, sp, #48	; 0x30
 800d268:	ad0c      	add	r5, sp, #48	; 0x30
 800d26a:	f006 fe59 	bl	8013f20 <rcl_get_zero_initialized_wait_set>
 800d26e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d270:	4646      	mov	r6, r8
 800d272:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d274:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d276:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d278:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d27a:	6927      	ldr	r7, [r4, #16]
 800d27c:	682d      	ldr	r5, [r5, #0]
 800d27e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d280:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d282:	6035      	str	r5, [r6, #0]
 800d284:	ad04      	add	r5, sp, #16
 800d286:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d288:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	; 0x50
 800d28c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d28e:	6826      	ldr	r6, [r4, #0]
 800d290:	6838      	ldr	r0, [r7, #0]
 800d292:	6028      	str	r0, [r5, #0]
 800d294:	e9cd 1602 	strd	r1, r6, [sp, #8]
 800d298:	e9cd 3200 	strd	r3, r2, [sp]
 800d29c:	4640      	mov	r0, r8
 800d29e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d2a0:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800d2a2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d2a4:	f007 f972 	bl	801458c <rcl_wait_set_init>
 800d2a8:	2800      	cmp	r0, #0
 800d2aa:	d0d4      	beq.n	800d256 <rclc_executor_prepare+0x1a>
 800d2ac:	900b      	str	r0, [sp, #44]	; 0x2c
 800d2ae:	f000 facf 	bl	800d850 <rcutils_reset_error>
 800d2b2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d2b4:	e7cf      	b.n	800d256 <rclc_executor_prepare+0x1a>
 800d2b6:	f000 facb 	bl	800d850 <rcutils_reset_error>
 800d2ba:	e7d4      	b.n	800d266 <rclc_executor_prepare+0x2a>
 800d2bc:	200b      	movs	r0, #11
 800d2be:	4770      	bx	lr

0800d2c0 <rclc_executor_spin_some.part.0>:
 800d2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2c4:	f100 0814 	add.w	r8, r0, #20
 800d2c8:	b083      	sub	sp, #12
 800d2ca:	4692      	mov	sl, r2
 800d2cc:	4699      	mov	r9, r3
 800d2ce:	4605      	mov	r5, r0
 800d2d0:	f7ff ffb4 	bl	800d23c <rclc_executor_prepare>
 800d2d4:	4640      	mov	r0, r8
 800d2d6:	f006 ff07 	bl	80140e8 <rcl_wait_set_clear>
 800d2da:	4607      	mov	r7, r0
 800d2dc:	2800      	cmp	r0, #0
 800d2de:	f040 80be 	bne.w	800d45e <rclc_executor_spin_some.part.0+0x19e>
 800d2e2:	68ab      	ldr	r3, [r5, #8]
 800d2e4:	4604      	mov	r4, r0
 800d2e6:	b1eb      	cbz	r3, 800d324 <rclc_executor_spin_some.part.0+0x64>
 800d2e8:	686e      	ldr	r6, [r5, #4]
 800d2ea:	eb06 1184 	add.w	r1, r6, r4, lsl #6
 800d2ee:	01a2      	lsls	r2, r4, #6
 800d2f0:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 800d2f4:	b1b3      	cbz	r3, 800d324 <rclc_executor_spin_some.part.0+0x64>
 800d2f6:	5cb3      	ldrb	r3, [r6, r2]
 800d2f8:	2b08      	cmp	r3, #8
 800d2fa:	f200 80a9 	bhi.w	800d450 <rclc_executor_spin_some.part.0+0x190>
 800d2fe:	e8df f003 	tbb	[pc, r3]
 800d302:	8989      	.short	0x8989
 800d304:	057b7b93 	.word	0x057b7b93
 800d308:	0505      	.short	0x0505
 800d30a:	9d          	.byte	0x9d
 800d30b:	00          	.byte	0x00
 800d30c:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800d310:	4640      	mov	r0, r8
 800d312:	6849      	ldr	r1, [r1, #4]
 800d314:	f007 fa50 	bl	80147b8 <rcl_wait_set_add_service>
 800d318:	2800      	cmp	r0, #0
 800d31a:	d175      	bne.n	800d408 <rclc_executor_spin_some.part.0+0x148>
 800d31c:	68ab      	ldr	r3, [r5, #8]
 800d31e:	3401      	adds	r4, #1
 800d320:	429c      	cmp	r4, r3
 800d322:	d3e1      	bcc.n	800d2e8 <rclc_executor_spin_some.part.0+0x28>
 800d324:	464b      	mov	r3, r9
 800d326:	4652      	mov	r2, sl
 800d328:	4640      	mov	r0, r8
 800d32a:	f007 fa71 	bl	8014810 <rcl_wait>
 800d32e:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
 800d332:	2b00      	cmp	r3, #0
 800d334:	f000 809b 	beq.w	800d46e <rclc_executor_spin_some.part.0+0x1ae>
 800d338:	2b01      	cmp	r3, #1
 800d33a:	f040 8089 	bne.w	800d450 <rclc_executor_spin_some.part.0+0x190>
 800d33e:	68ab      	ldr	r3, [r5, #8]
 800d340:	2b00      	cmp	r3, #0
 800d342:	f000 80ef 	beq.w	800d524 <rclc_executor_spin_some.part.0+0x264>
 800d346:	2400      	movs	r4, #0
 800d348:	4626      	mov	r6, r4
 800d34a:	f240 1991 	movw	r9, #401	; 0x191
 800d34e:	e00a      	b.n	800d366 <rclc_executor_spin_some.part.0+0xa6>
 800d350:	f7ff fdd0 	bl	800cef4 <_rclc_check_for_new_data>
 800d354:	4604      	mov	r4, r0
 800d356:	b110      	cbz	r0, 800d35e <rclc_executor_spin_some.part.0+0x9e>
 800d358:	4548      	cmp	r0, r9
 800d35a:	f040 8086 	bne.w	800d46a <rclc_executor_spin_some.part.0+0x1aa>
 800d35e:	68ab      	ldr	r3, [r5, #8]
 800d360:	429e      	cmp	r6, r3
 800d362:	f080 80db 	bcs.w	800d51c <rclc_executor_spin_some.part.0+0x25c>
 800d366:	686a      	ldr	r2, [r5, #4]
 800d368:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800d36c:	4641      	mov	r1, r8
 800d36e:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800d372:	3601      	adds	r6, #1
 800d374:	f1bc 0f00 	cmp.w	ip, #0
 800d378:	d1ea      	bne.n	800d350 <rclc_executor_spin_some.part.0+0x90>
 800d37a:	4619      	mov	r1, r3
 800d37c:	4610      	mov	r0, r2
 800d37e:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 800d382:	4798      	blx	r3
 800d384:	2800      	cmp	r0, #0
 800d386:	d070      	beq.n	800d46a <rclc_executor_spin_some.part.0+0x1aa>
 800d388:	68aa      	ldr	r2, [r5, #8]
 800d38a:	2a00      	cmp	r2, #0
 800d38c:	d06d      	beq.n	800d46a <rclc_executor_spin_some.part.0+0x1aa>
 800d38e:	2600      	movs	r6, #0
 800d390:	f240 1991 	movw	r9, #401	; 0x191
 800d394:	e008      	b.n	800d3a8 <rclc_executor_spin_some.part.0+0xe8>
 800d396:	f7ff fdd3 	bl	800cf40 <_rclc_take_new_data>
 800d39a:	4604      	mov	r4, r0
 800d39c:	b108      	cbz	r0, 800d3a2 <rclc_executor_spin_some.part.0+0xe2>
 800d39e:	4548      	cmp	r0, r9
 800d3a0:	d163      	bne.n	800d46a <rclc_executor_spin_some.part.0+0x1aa>
 800d3a2:	68aa      	ldr	r2, [r5, #8]
 800d3a4:	4296      	cmp	r6, r2
 800d3a6:	d208      	bcs.n	800d3ba <rclc_executor_spin_some.part.0+0xfa>
 800d3a8:	6868      	ldr	r0, [r5, #4]
 800d3aa:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 800d3ae:	4641      	mov	r1, r8
 800d3b0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800d3b4:	3601      	adds	r6, #1
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d1ed      	bne.n	800d396 <rclc_executor_spin_some.part.0+0xd6>
 800d3ba:	2600      	movs	r6, #0
 800d3bc:	b932      	cbnz	r2, 800d3cc <rclc_executor_spin_some.part.0+0x10c>
 800d3be:	e054      	b.n	800d46a <rclc_executor_spin_some.part.0+0x1aa>
 800d3c0:	2901      	cmp	r1, #1
 800d3c2:	d012      	beq.n	800d3ea <rclc_executor_spin_some.part.0+0x12a>
 800d3c4:	3601      	adds	r6, #1
 800d3c6:	4296      	cmp	r6, r2
 800d3c8:	d245      	bcs.n	800d456 <rclc_executor_spin_some.part.0+0x196>
 800d3ca:	2400      	movs	r4, #0
 800d3cc:	686b      	ldr	r3, [r5, #4]
 800d3ce:	eb03 1386 	add.w	r3, r3, r6, lsl #6
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 800d3d8:	2900      	cmp	r1, #0
 800d3da:	d046      	beq.n	800d46a <rclc_executor_spin_some.part.0+0x1aa>
 800d3dc:	7859      	ldrb	r1, [r3, #1]
 800d3de:	2900      	cmp	r1, #0
 800d3e0:	d1ee      	bne.n	800d3c0 <rclc_executor_spin_some.part.0+0x100>
 800d3e2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d0ec      	beq.n	800d3c4 <rclc_executor_spin_some.part.0+0x104>
 800d3ea:	f7ff fe13 	bl	800d014 <_rclc_execute.part.0>
 800d3ee:	2800      	cmp	r0, #0
 800d3f0:	f040 8096 	bne.w	800d520 <rclc_executor_spin_some.part.0+0x260>
 800d3f4:	68aa      	ldr	r2, [r5, #8]
 800d3f6:	e7e5      	b.n	800d3c4 <rclc_executor_spin_some.part.0+0x104>
 800d3f8:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800d3fc:	4640      	mov	r0, r8
 800d3fe:	6849      	ldr	r1, [r1, #4]
 800d400:	f007 f9ae 	bl	8014760 <rcl_wait_set_add_client>
 800d404:	2800      	cmp	r0, #0
 800d406:	d089      	beq.n	800d31c <rclc_executor_spin_some.part.0+0x5c>
 800d408:	9001      	str	r0, [sp, #4]
 800d40a:	f000 fa21 	bl	800d850 <rcutils_reset_error>
 800d40e:	9801      	ldr	r0, [sp, #4]
 800d410:	4607      	mov	r7, r0
 800d412:	e020      	b.n	800d456 <rclc_executor_spin_some.part.0+0x196>
 800d414:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800d418:	4640      	mov	r0, r8
 800d41a:	6849      	ldr	r1, [r1, #4]
 800d41c:	f006 fe38 	bl	8014090 <rcl_wait_set_add_subscription>
 800d420:	2800      	cmp	r0, #0
 800d422:	f43f af7b 	beq.w	800d31c <rclc_executor_spin_some.part.0+0x5c>
 800d426:	e7ef      	b.n	800d408 <rclc_executor_spin_some.part.0+0x148>
 800d428:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800d42c:	4640      	mov	r0, r8
 800d42e:	6849      	ldr	r1, [r1, #4]
 800d430:	f007 f966 	bl	8014700 <rcl_wait_set_add_timer>
 800d434:	2800      	cmp	r0, #0
 800d436:	f43f af71 	beq.w	800d31c <rclc_executor_spin_some.part.0+0x5c>
 800d43a:	e7e5      	b.n	800d408 <rclc_executor_spin_some.part.0+0x148>
 800d43c:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800d440:	4640      	mov	r0, r8
 800d442:	6849      	ldr	r1, [r1, #4]
 800d444:	f007 f930 	bl	80146a8 <rcl_wait_set_add_guard_condition>
 800d448:	2800      	cmp	r0, #0
 800d44a:	f43f af67 	beq.w	800d31c <rclc_executor_spin_some.part.0+0x5c>
 800d44e:	e7db      	b.n	800d408 <rclc_executor_spin_some.part.0+0x148>
 800d450:	f000 f9fe 	bl	800d850 <rcutils_reset_error>
 800d454:	2701      	movs	r7, #1
 800d456:	4638      	mov	r0, r7
 800d458:	b003      	add	sp, #12
 800d45a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d45e:	f000 f9f7 	bl	800d850 <rcutils_reset_error>
 800d462:	4638      	mov	r0, r7
 800d464:	b003      	add	sp, #12
 800d466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d46a:	4627      	mov	r7, r4
 800d46c:	e7f3      	b.n	800d456 <rclc_executor_spin_some.part.0+0x196>
 800d46e:	68ab      	ldr	r3, [r5, #8]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d05a      	beq.n	800d52a <rclc_executor_spin_some.part.0+0x26a>
 800d474:	2400      	movs	r4, #0
 800d476:	4626      	mov	r6, r4
 800d478:	f240 1991 	movw	r9, #401	; 0x191
 800d47c:	e008      	b.n	800d490 <rclc_executor_spin_some.part.0+0x1d0>
 800d47e:	f7ff fd39 	bl	800cef4 <_rclc_check_for_new_data>
 800d482:	4604      	mov	r4, r0
 800d484:	b108      	cbz	r0, 800d48a <rclc_executor_spin_some.part.0+0x1ca>
 800d486:	4548      	cmp	r0, r9
 800d488:	d1ef      	bne.n	800d46a <rclc_executor_spin_some.part.0+0x1aa>
 800d48a:	68ab      	ldr	r3, [r5, #8]
 800d48c:	429e      	cmp	r6, r3
 800d48e:	d243      	bcs.n	800d518 <rclc_executor_spin_some.part.0+0x258>
 800d490:	686a      	ldr	r2, [r5, #4]
 800d492:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800d496:	4641      	mov	r1, r8
 800d498:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800d49c:	3601      	adds	r6, #1
 800d49e:	f1bc 0f00 	cmp.w	ip, #0
 800d4a2:	d1ec      	bne.n	800d47e <rclc_executor_spin_some.part.0+0x1be>
 800d4a4:	4619      	mov	r1, r3
 800d4a6:	4610      	mov	r0, r2
 800d4a8:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 800d4ac:	4798      	blx	r3
 800d4ae:	2800      	cmp	r0, #0
 800d4b0:	d0db      	beq.n	800d46a <rclc_executor_spin_some.part.0+0x1aa>
 800d4b2:	68ab      	ldr	r3, [r5, #8]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d0d8      	beq.n	800d46a <rclc_executor_spin_some.part.0+0x1aa>
 800d4b8:	f04f 0a00 	mov.w	sl, #0
 800d4bc:	f240 1691 	movw	r6, #401	; 0x191
 800d4c0:	f240 2959 	movw	r9, #601	; 0x259
 800d4c4:	e00b      	b.n	800d4de <rclc_executor_spin_some.part.0+0x21e>
 800d4c6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800d4ca:	b113      	cbz	r3, 800d4d2 <rclc_executor_spin_some.part.0+0x212>
 800d4cc:	f7ff fda2 	bl	800d014 <_rclc_execute.part.0>
 800d4d0:	bb30      	cbnz	r0, 800d520 <rclc_executor_spin_some.part.0+0x260>
 800d4d2:	68ab      	ldr	r3, [r5, #8]
 800d4d4:	f10a 0a01 	add.w	sl, sl, #1
 800d4d8:	459a      	cmp	sl, r3
 800d4da:	d2bc      	bcs.n	800d456 <rclc_executor_spin_some.part.0+0x196>
 800d4dc:	2400      	movs	r4, #0
 800d4de:	6868      	ldr	r0, [r5, #4]
 800d4e0:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800d4e4:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800d4e8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d0bc      	beq.n	800d46a <rclc_executor_spin_some.part.0+0x1aa>
 800d4f0:	4641      	mov	r1, r8
 800d4f2:	f7ff fd25 	bl	800cf40 <_rclc_take_new_data>
 800d4f6:	b118      	cbz	r0, 800d500 <rclc_executor_spin_some.part.0+0x240>
 800d4f8:	42b0      	cmp	r0, r6
 800d4fa:	d001      	beq.n	800d500 <rclc_executor_spin_some.part.0+0x240>
 800d4fc:	4548      	cmp	r0, r9
 800d4fe:	d10f      	bne.n	800d520 <rclc_executor_spin_some.part.0+0x260>
 800d500:	6868      	ldr	r0, [r5, #4]
 800d502:	eb10 000b 	adds.w	r0, r0, fp
 800d506:	d005      	beq.n	800d514 <rclc_executor_spin_some.part.0+0x254>
 800d508:	7843      	ldrb	r3, [r0, #1]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d0db      	beq.n	800d4c6 <rclc_executor_spin_some.part.0+0x206>
 800d50e:	2b01      	cmp	r3, #1
 800d510:	d1df      	bne.n	800d4d2 <rclc_executor_spin_some.part.0+0x212>
 800d512:	e7db      	b.n	800d4cc <rclc_executor_spin_some.part.0+0x20c>
 800d514:	270b      	movs	r7, #11
 800d516:	e79e      	b.n	800d456 <rclc_executor_spin_some.part.0+0x196>
 800d518:	686a      	ldr	r2, [r5, #4]
 800d51a:	e7c3      	b.n	800d4a4 <rclc_executor_spin_some.part.0+0x1e4>
 800d51c:	686a      	ldr	r2, [r5, #4]
 800d51e:	e72c      	b.n	800d37a <rclc_executor_spin_some.part.0+0xba>
 800d520:	4607      	mov	r7, r0
 800d522:	e798      	b.n	800d456 <rclc_executor_spin_some.part.0+0x196>
 800d524:	686a      	ldr	r2, [r5, #4]
 800d526:	461c      	mov	r4, r3
 800d528:	e727      	b.n	800d37a <rclc_executor_spin_some.part.0+0xba>
 800d52a:	686a      	ldr	r2, [r5, #4]
 800d52c:	461c      	mov	r4, r3
 800d52e:	e7b9      	b.n	800d4a4 <rclc_executor_spin_some.part.0+0x1e4>

0800d530 <rclc_executor_spin_some>:
 800d530:	b190      	cbz	r0, 800d558 <rclc_executor_spin_some+0x28>
 800d532:	b570      	push	{r4, r5, r6, lr}
 800d534:	4604      	mov	r4, r0
 800d536:	6800      	ldr	r0, [r0, #0]
 800d538:	4616      	mov	r6, r2
 800d53a:	461d      	mov	r5, r3
 800d53c:	f005 faae 	bl	8012a9c <rcl_context_is_valid>
 800d540:	b130      	cbz	r0, 800d550 <rclc_executor_spin_some+0x20>
 800d542:	4632      	mov	r2, r6
 800d544:	462b      	mov	r3, r5
 800d546:	4620      	mov	r0, r4
 800d548:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d54c:	f7ff beb8 	b.w	800d2c0 <rclc_executor_spin_some.part.0>
 800d550:	f000 f97e 	bl	800d850 <rcutils_reset_error>
 800d554:	2001      	movs	r0, #1
 800d556:	bd70      	pop	{r4, r5, r6, pc}
 800d558:	200b      	movs	r0, #11
 800d55a:	4770      	bx	lr

0800d55c <rclc_executor_handle_counters_zero_init>:
 800d55c:	b140      	cbz	r0, 800d570 <rclc_executor_handle_counters_zero_init+0x14>
 800d55e:	2300      	movs	r3, #0
 800d560:	6003      	str	r3, [r0, #0]
 800d562:	6043      	str	r3, [r0, #4]
 800d564:	6083      	str	r3, [r0, #8]
 800d566:	60c3      	str	r3, [r0, #12]
 800d568:	6103      	str	r3, [r0, #16]
 800d56a:	6143      	str	r3, [r0, #20]
 800d56c:	4618      	mov	r0, r3
 800d56e:	4770      	bx	lr
 800d570:	200b      	movs	r0, #11
 800d572:	4770      	bx	lr

0800d574 <rclc_executor_handle_init>:
 800d574:	b178      	cbz	r0, 800d596 <rclc_executor_handle_init+0x22>
 800d576:	b430      	push	{r4, r5}
 800d578:	4603      	mov	r3, r0
 800d57a:	2209      	movs	r2, #9
 800d57c:	2000      	movs	r0, #0
 800d57e:	2400      	movs	r4, #0
 800d580:	2500      	movs	r5, #0
 800d582:	801a      	strh	r2, [r3, #0]
 800d584:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 800d588:	bc30      	pop	{r4, r5}
 800d58a:	e9c3 0001 	strd	r0, r0, [r3, #4]
 800d58e:	6359      	str	r1, [r3, #52]	; 0x34
 800d590:	6318      	str	r0, [r3, #48]	; 0x30
 800d592:	8718      	strh	r0, [r3, #56]	; 0x38
 800d594:	4770      	bx	lr
 800d596:	200b      	movs	r0, #11
 800d598:	4770      	bx	lr
 800d59a:	bf00      	nop

0800d59c <rclc_support_init>:
 800d59c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5a0:	b086      	sub	sp, #24
 800d5a2:	2800      	cmp	r0, #0
 800d5a4:	d042      	beq.n	800d62c <rclc_support_init+0x90>
 800d5a6:	461c      	mov	r4, r3
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d03f      	beq.n	800d62c <rclc_support_init+0x90>
 800d5ac:	460f      	mov	r7, r1
 800d5ae:	4690      	mov	r8, r2
 800d5b0:	4606      	mov	r6, r0
 800d5b2:	f005 fd53 	bl	801305c <rcl_get_zero_initialized_init_options>
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 800d5bc:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d5c0:	9305      	str	r3, [sp, #20]
 800d5c2:	a805      	add	r0, sp, #20
 800d5c4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800d5c8:	f005 fd4a 	bl	8013060 <rcl_init_options_init>
 800d5cc:	4605      	mov	r5, r0
 800d5ce:	bb38      	cbnz	r0, 800d620 <rclc_support_init+0x84>
 800d5d0:	f005 fd44 	bl	801305c <rcl_get_zero_initialized_init_options>
 800d5d4:	4631      	mov	r1, r6
 800d5d6:	6030      	str	r0, [r6, #0]
 800d5d8:	a805      	add	r0, sp, #20
 800d5da:	f005 fdb7 	bl	801314c <rcl_init_options_copy>
 800d5de:	4605      	mov	r5, r0
 800d5e0:	b9c0      	cbnz	r0, 800d614 <rclc_support_init+0x78>
 800d5e2:	ad02      	add	r5, sp, #8
 800d5e4:	4628      	mov	r0, r5
 800d5e6:	f005 fa4f 	bl	8012a88 <rcl_get_zero_initialized_context>
 800d5ea:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d5ee:	1d33      	adds	r3, r6, #4
 800d5f0:	e883 0003 	stmia.w	r3, {r0, r1}
 800d5f4:	4632      	mov	r2, r6
 800d5f6:	4641      	mov	r1, r8
 800d5f8:	4638      	mov	r0, r7
 800d5fa:	f005 fc25 	bl	8012e48 <rcl_init>
 800d5fe:	4605      	mov	r5, r0
 800d600:	b940      	cbnz	r0, 800d614 <rclc_support_init+0x78>
 800d602:	60f4      	str	r4, [r6, #12]
 800d604:	4622      	mov	r2, r4
 800d606:	f106 0110 	add.w	r1, r6, #16
 800d60a:	2003      	movs	r0, #3
 800d60c:	f006 f9a2 	bl	8013954 <rcl_clock_init>
 800d610:	4605      	mov	r5, r0
 800d612:	b108      	cbz	r0, 800d618 <rclc_support_init+0x7c>
 800d614:	f000 f91c 	bl	800d850 <rcutils_reset_error>
 800d618:	a805      	add	r0, sp, #20
 800d61a:	f005 fd73 	bl	8013104 <rcl_init_options_fini>
 800d61e:	b108      	cbz	r0, 800d624 <rclc_support_init+0x88>
 800d620:	f000 f916 	bl	800d850 <rcutils_reset_error>
 800d624:	4628      	mov	r0, r5
 800d626:	b006      	add	sp, #24
 800d628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d62c:	250b      	movs	r5, #11
 800d62e:	4628      	mov	r0, r5
 800d630:	b006      	add	sp, #24
 800d632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d636:	bf00      	nop

0800d638 <rclc_node_init_default>:
 800d638:	b3b8      	cbz	r0, 800d6aa <rclc_node_init_default+0x72>
 800d63a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d63e:	460d      	mov	r5, r1
 800d640:	b08f      	sub	sp, #60	; 0x3c
 800d642:	b329      	cbz	r1, 800d690 <rclc_node_init_default+0x58>
 800d644:	4616      	mov	r6, r2
 800d646:	b31a      	cbz	r2, 800d690 <rclc_node_init_default+0x58>
 800d648:	461f      	mov	r7, r3
 800d64a:	b30b      	cbz	r3, 800d690 <rclc_node_init_default+0x58>
 800d64c:	f10d 0810 	add.w	r8, sp, #16
 800d650:	4604      	mov	r4, r0
 800d652:	4640      	mov	r0, r8
 800d654:	f005 fe42 	bl	80132dc <rcl_get_zero_initialized_node>
 800d658:	e898 0003 	ldmia.w	r8, {r0, r1}
 800d65c:	f10d 091c 	add.w	r9, sp, #28
 800d660:	e884 0003 	stmia.w	r4, {r0, r1}
 800d664:	4648      	mov	r0, r9
 800d666:	f005 ffdb 	bl	8013620 <rcl_node_get_default_options>
 800d66a:	4640      	mov	r0, r8
 800d66c:	f005 fe36 	bl	80132dc <rcl_get_zero_initialized_node>
 800d670:	e898 0003 	ldmia.w	r8, {r0, r1}
 800d674:	1d3b      	adds	r3, r7, #4
 800d676:	f8cd 9000 	str.w	r9, [sp]
 800d67a:	4632      	mov	r2, r6
 800d67c:	e884 0003 	stmia.w	r4, {r0, r1}
 800d680:	4629      	mov	r1, r5
 800d682:	4620      	mov	r0, r4
 800d684:	f005 fe34 	bl	80132f0 <rcl_node_init>
 800d688:	b930      	cbnz	r0, 800d698 <rclc_node_init_default+0x60>
 800d68a:	b00f      	add	sp, #60	; 0x3c
 800d68c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d690:	200b      	movs	r0, #11
 800d692:	b00f      	add	sp, #60	; 0x3c
 800d694:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d698:	9003      	str	r0, [sp, #12]
 800d69a:	f000 f8d9 	bl	800d850 <rcutils_reset_error>
 800d69e:	f000 f8d7 	bl	800d850 <rcutils_reset_error>
 800d6a2:	9803      	ldr	r0, [sp, #12]
 800d6a4:	b00f      	add	sp, #60	; 0x3c
 800d6a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d6aa:	200b      	movs	r0, #11
 800d6ac:	4770      	bx	lr
 800d6ae:	bf00      	nop

0800d6b0 <rclc_publisher_init_default>:
 800d6b0:	b368      	cbz	r0, 800d70e <rclc_publisher_init_default+0x5e>
 800d6b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6b6:	460d      	mov	r5, r1
 800d6b8:	b09e      	sub	sp, #120	; 0x78
 800d6ba:	b321      	cbz	r1, 800d706 <rclc_publisher_init_default+0x56>
 800d6bc:	4616      	mov	r6, r2
 800d6be:	b312      	cbz	r2, 800d706 <rclc_publisher_init_default+0x56>
 800d6c0:	461f      	mov	r7, r3
 800d6c2:	b303      	cbz	r3, 800d706 <rclc_publisher_init_default+0x56>
 800d6c4:	4604      	mov	r4, r0
 800d6c6:	f7ff f959 	bl	800c97c <rcl_get_zero_initialized_publisher>
 800d6ca:	f10d 0810 	add.w	r8, sp, #16
 800d6ce:	6020      	str	r0, [r4, #0]
 800d6d0:	4640      	mov	r0, r8
 800d6d2:	f7ff fa4f 	bl	800cb74 <rcl_publisher_get_default_options>
 800d6d6:	490f      	ldr	r1, [pc, #60]	; (800d714 <rclc_publisher_init_default+0x64>)
 800d6d8:	2250      	movs	r2, #80	; 0x50
 800d6da:	4640      	mov	r0, r8
 800d6dc:	f00b f8b7 	bl	801884e <memcpy>
 800d6e0:	f8cd 8000 	str.w	r8, [sp]
 800d6e4:	463b      	mov	r3, r7
 800d6e6:	4632      	mov	r2, r6
 800d6e8:	4629      	mov	r1, r5
 800d6ea:	4620      	mov	r0, r4
 800d6ec:	f7ff f94c 	bl	800c988 <rcl_publisher_init>
 800d6f0:	b910      	cbnz	r0, 800d6f8 <rclc_publisher_init_default+0x48>
 800d6f2:	b01e      	add	sp, #120	; 0x78
 800d6f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6f8:	9003      	str	r0, [sp, #12]
 800d6fa:	f000 f8a9 	bl	800d850 <rcutils_reset_error>
 800d6fe:	9803      	ldr	r0, [sp, #12]
 800d700:	b01e      	add	sp, #120	; 0x78
 800d702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d706:	200b      	movs	r0, #11
 800d708:	b01e      	add	sp, #120	; 0x78
 800d70a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d70e:	200b      	movs	r0, #11
 800d710:	4770      	bx	lr
 800d712:	bf00      	nop
 800d714:	080199f8 	.word	0x080199f8

0800d718 <rclc_subscription_init_default>:
 800d718:	b368      	cbz	r0, 800d776 <rclc_subscription_init_default+0x5e>
 800d71a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d71e:	460d      	mov	r5, r1
 800d720:	b0a0      	sub	sp, #128	; 0x80
 800d722:	b321      	cbz	r1, 800d76e <rclc_subscription_init_default+0x56>
 800d724:	4616      	mov	r6, r2
 800d726:	b312      	cbz	r2, 800d76e <rclc_subscription_init_default+0x56>
 800d728:	461f      	mov	r7, r3
 800d72a:	b303      	cbz	r3, 800d76e <rclc_subscription_init_default+0x56>
 800d72c:	4604      	mov	r4, r0
 800d72e:	f7ff fa67 	bl	800cc00 <rcl_get_zero_initialized_subscription>
 800d732:	f10d 0810 	add.w	r8, sp, #16
 800d736:	6020      	str	r0, [r4, #0]
 800d738:	4640      	mov	r0, r8
 800d73a:	f7ff fb5d 	bl	800cdf8 <rcl_subscription_get_default_options>
 800d73e:	490f      	ldr	r1, [pc, #60]	; (800d77c <rclc_subscription_init_default+0x64>)
 800d740:	2250      	movs	r2, #80	; 0x50
 800d742:	4640      	mov	r0, r8
 800d744:	f00b f883 	bl	801884e <memcpy>
 800d748:	f8cd 8000 	str.w	r8, [sp]
 800d74c:	463b      	mov	r3, r7
 800d74e:	4632      	mov	r2, r6
 800d750:	4629      	mov	r1, r5
 800d752:	4620      	mov	r0, r4
 800d754:	f7ff fa5a 	bl	800cc0c <rcl_subscription_init>
 800d758:	b910      	cbnz	r0, 800d760 <rclc_subscription_init_default+0x48>
 800d75a:	b020      	add	sp, #128	; 0x80
 800d75c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d760:	9003      	str	r0, [sp, #12]
 800d762:	f000 f875 	bl	800d850 <rcutils_reset_error>
 800d766:	9803      	ldr	r0, [sp, #12]
 800d768:	b020      	add	sp, #128	; 0x80
 800d76a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d76e:	200b      	movs	r0, #11
 800d770:	b020      	add	sp, #128	; 0x80
 800d772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d776:	200b      	movs	r0, #11
 800d778:	4770      	bx	lr
 800d77a:	bf00      	nop
 800d77c:	08019a48 	.word	0x08019a48

0800d780 <__default_zero_allocate>:
 800d780:	f00a ba22 	b.w	8017bc8 <calloc>

0800d784 <__default_reallocate>:
 800d784:	f00a bbae 	b.w	8017ee4 <realloc>

0800d788 <__default_deallocate>:
 800d788:	f00a ba8c 	b.w	8017ca4 <free>

0800d78c <__default_allocate>:
 800d78c:	f00a ba82 	b.w	8017c94 <malloc>

0800d790 <rcutils_get_zero_initialized_allocator>:
 800d790:	b470      	push	{r4, r5, r6}
 800d792:	4d05      	ldr	r5, [pc, #20]	; (800d7a8 <rcutils_get_zero_initialized_allocator+0x18>)
 800d794:	4606      	mov	r6, r0
 800d796:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d798:	4634      	mov	r4, r6
 800d79a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d79c:	682b      	ldr	r3, [r5, #0]
 800d79e:	6023      	str	r3, [r4, #0]
 800d7a0:	4630      	mov	r0, r6
 800d7a2:	bc70      	pop	{r4, r5, r6}
 800d7a4:	4770      	bx	lr
 800d7a6:	bf00      	nop
 800d7a8:	08019a98 	.word	0x08019a98

0800d7ac <rcutils_set_default_allocator>:
 800d7ac:	b1a0      	cbz	r0, 800d7d8 <rcutils_set_default_allocator+0x2c>
 800d7ae:	6801      	ldr	r1, [r0, #0]
 800d7b0:	b199      	cbz	r1, 800d7da <rcutils_set_default_allocator+0x2e>
 800d7b2:	b430      	push	{r4, r5}
 800d7b4:	6844      	ldr	r4, [r0, #4]
 800d7b6:	b194      	cbz	r4, 800d7de <rcutils_set_default_allocator+0x32>
 800d7b8:	68c5      	ldr	r5, [r0, #12]
 800d7ba:	b15d      	cbz	r5, 800d7d4 <rcutils_set_default_allocator+0x28>
 800d7bc:	6883      	ldr	r3, [r0, #8]
 800d7be:	b18b      	cbz	r3, 800d7e4 <rcutils_set_default_allocator+0x38>
 800d7c0:	4a09      	ldr	r2, [pc, #36]	; (800d7e8 <rcutils_set_default_allocator+0x3c>)
 800d7c2:	e9c2 1400 	strd	r1, r4, [r2]
 800d7c6:	e9c2 3502 	strd	r3, r5, [r2, #8]
 800d7ca:	2000      	movs	r0, #0
 800d7cc:	6110      	str	r0, [r2, #16]
 800d7ce:	2001      	movs	r0, #1
 800d7d0:	bc30      	pop	{r4, r5}
 800d7d2:	4770      	bx	lr
 800d7d4:	4628      	mov	r0, r5
 800d7d6:	e7fb      	b.n	800d7d0 <rcutils_set_default_allocator+0x24>
 800d7d8:	4770      	bx	lr
 800d7da:	4608      	mov	r0, r1
 800d7dc:	4770      	bx	lr
 800d7de:	4620      	mov	r0, r4
 800d7e0:	bc30      	pop	{r4, r5}
 800d7e2:	4770      	bx	lr
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	e7f3      	b.n	800d7d0 <rcutils_set_default_allocator+0x24>
 800d7e8:	2000001c 	.word	0x2000001c

0800d7ec <rcutils_get_default_allocator>:
 800d7ec:	b470      	push	{r4, r5, r6}
 800d7ee:	4d05      	ldr	r5, [pc, #20]	; (800d804 <rcutils_get_default_allocator+0x18>)
 800d7f0:	4606      	mov	r6, r0
 800d7f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d7f4:	4634      	mov	r4, r6
 800d7f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d7f8:	682b      	ldr	r3, [r5, #0]
 800d7fa:	6023      	str	r3, [r4, #0]
 800d7fc:	4630      	mov	r0, r6
 800d7fe:	bc70      	pop	{r4, r5, r6}
 800d800:	4770      	bx	lr
 800d802:	bf00      	nop
 800d804:	2000001c 	.word	0x2000001c

0800d808 <rcutils_allocator_is_valid>:
 800d808:	b158      	cbz	r0, 800d822 <rcutils_allocator_is_valid+0x1a>
 800d80a:	6803      	ldr	r3, [r0, #0]
 800d80c:	b143      	cbz	r3, 800d820 <rcutils_allocator_is_valid+0x18>
 800d80e:	6843      	ldr	r3, [r0, #4]
 800d810:	b133      	cbz	r3, 800d820 <rcutils_allocator_is_valid+0x18>
 800d812:	68c3      	ldr	r3, [r0, #12]
 800d814:	b123      	cbz	r3, 800d820 <rcutils_allocator_is_valid+0x18>
 800d816:	6880      	ldr	r0, [r0, #8]
 800d818:	3800      	subs	r0, #0
 800d81a:	bf18      	it	ne
 800d81c:	2001      	movne	r0, #1
 800d81e:	4770      	bx	lr
 800d820:	4618      	mov	r0, r3
 800d822:	4770      	bx	lr

0800d824 <rcutils_get_error_string>:
 800d824:	4b06      	ldr	r3, [pc, #24]	; (800d840 <rcutils_get_error_string+0x1c>)
 800d826:	781b      	ldrb	r3, [r3, #0]
 800d828:	b13b      	cbz	r3, 800d83a <rcutils_get_error_string+0x16>
 800d82a:	4b06      	ldr	r3, [pc, #24]	; (800d844 <rcutils_get_error_string+0x20>)
 800d82c:	781a      	ldrb	r2, [r3, #0]
 800d82e:	b90a      	cbnz	r2, 800d834 <rcutils_get_error_string+0x10>
 800d830:	2201      	movs	r2, #1
 800d832:	701a      	strb	r2, [r3, #0]
 800d834:	4b04      	ldr	r3, [pc, #16]	; (800d848 <rcutils_get_error_string+0x24>)
 800d836:	7818      	ldrb	r0, [r3, #0]
 800d838:	4770      	bx	lr
 800d83a:	4b04      	ldr	r3, [pc, #16]	; (800d84c <rcutils_get_error_string+0x28>)
 800d83c:	7818      	ldrb	r0, [r3, #0]
 800d83e:	4770      	bx	lr
 800d840:	20009c20 	.word	0x20009c20
 800d844:	20009c21 	.word	0x20009c21
 800d848:	20009e88 	.word	0x20009e88
 800d84c:	08019aac 	.word	0x08019aac

0800d850 <rcutils_reset_error>:
 800d850:	b4d0      	push	{r4, r6, r7}
 800d852:	4a07      	ldr	r2, [pc, #28]	; (800d870 <rcutils_reset_error+0x20>)
 800d854:	4807      	ldr	r0, [pc, #28]	; (800d874 <rcutils_reset_error+0x24>)
 800d856:	4c08      	ldr	r4, [pc, #32]	; (800d878 <rcutils_reset_error+0x28>)
 800d858:	4908      	ldr	r1, [pc, #32]	; (800d87c <rcutils_reset_error+0x2c>)
 800d85a:	2300      	movs	r3, #0
 800d85c:	2600      	movs	r6, #0
 800d85e:	2700      	movs	r7, #0
 800d860:	8013      	strh	r3, [r2, #0]
 800d862:	7003      	strb	r3, [r0, #0]
 800d864:	e9c2 6702 	strd	r6, r7, [r2, #8]
 800d868:	7023      	strb	r3, [r4, #0]
 800d86a:	700b      	strb	r3, [r1, #0]
 800d86c:	bcd0      	pop	{r4, r6, r7}
 800d86e:	4770      	bx	lr
 800d870:	20009e90 	.word	0x20009e90
 800d874:	20009e88 	.word	0x20009e88
 800d878:	20009c21 	.word	0x20009c21
 800d87c:	20009c20 	.word	0x20009c20

0800d880 <rcutils_get_zero_initialized_string_map>:
 800d880:	4b01      	ldr	r3, [pc, #4]	; (800d888 <rcutils_get_zero_initialized_string_map+0x8>)
 800d882:	2000      	movs	r0, #0
 800d884:	6018      	str	r0, [r3, #0]
 800d886:	4770      	bx	lr
 800d888:	20009c24 	.word	0x20009c24

0800d88c <rcutils_string_map_reserve>:
 800d88c:	2800      	cmp	r0, #0
 800d88e:	d061      	beq.n	800d954 <rcutils_string_map_reserve+0xc8>
 800d890:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d894:	6805      	ldr	r5, [r0, #0]
 800d896:	b083      	sub	sp, #12
 800d898:	460c      	mov	r4, r1
 800d89a:	4606      	mov	r6, r0
 800d89c:	b12d      	cbz	r5, 800d8aa <rcutils_string_map_reserve+0x1e>
 800d89e:	68eb      	ldr	r3, [r5, #12]
 800d8a0:	42a3      	cmp	r3, r4
 800d8a2:	d906      	bls.n	800d8b2 <rcutils_string_map_reserve+0x26>
 800d8a4:	461c      	mov	r4, r3
 800d8a6:	2d00      	cmp	r5, #0
 800d8a8:	d1f9      	bne.n	800d89e <rcutils_string_map_reserve+0x12>
 800d8aa:	201f      	movs	r0, #31
 800d8ac:	b003      	add	sp, #12
 800d8ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d8b2:	68ab      	ldr	r3, [r5, #8]
 800d8b4:	42a3      	cmp	r3, r4
 800d8b6:	d049      	beq.n	800d94c <rcutils_string_map_reserve+0xc0>
 800d8b8:	6a2f      	ldr	r7, [r5, #32]
 800d8ba:	2c00      	cmp	r4, #0
 800d8bc:	d035      	beq.n	800d92a <rcutils_string_map_reserve+0x9e>
 800d8be:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800d8c2:	d245      	bcs.n	800d950 <rcutils_string_map_reserve+0xc4>
 800d8c4:	ea4f 0884 	mov.w	r8, r4, lsl #2
 800d8c8:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800d8cc:	6828      	ldr	r0, [r5, #0]
 800d8ce:	4641      	mov	r1, r8
 800d8d0:	463a      	mov	r2, r7
 800d8d2:	47c8      	blx	r9
 800d8d4:	2800      	cmp	r0, #0
 800d8d6:	d03b      	beq.n	800d950 <rcutils_string_map_reserve+0xc4>
 800d8d8:	6833      	ldr	r3, [r6, #0]
 800d8da:	463a      	mov	r2, r7
 800d8dc:	6018      	str	r0, [r3, #0]
 800d8de:	4641      	mov	r1, r8
 800d8e0:	6858      	ldr	r0, [r3, #4]
 800d8e2:	47c8      	blx	r9
 800d8e4:	2800      	cmp	r0, #0
 800d8e6:	d033      	beq.n	800d950 <rcutils_string_map_reserve+0xc4>
 800d8e8:	6835      	ldr	r5, [r6, #0]
 800d8ea:	68ab      	ldr	r3, [r5, #8]
 800d8ec:	6068      	str	r0, [r5, #4]
 800d8ee:	42a3      	cmp	r3, r4
 800d8f0:	d227      	bcs.n	800d942 <rcutils_string_map_reserve+0xb6>
 800d8f2:	682a      	ldr	r2, [r5, #0]
 800d8f4:	eb00 0108 	add.w	r1, r0, r8
 800d8f8:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 800d8fc:	428f      	cmp	r7, r1
 800d8fe:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800d902:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800d906:	d203      	bcs.n	800d910 <rcutils_string_map_reserve+0x84>
 800d908:	eb02 0108 	add.w	r1, r2, r8
 800d90c:	428e      	cmp	r6, r1
 800d90e:	d323      	bcc.n	800d958 <rcutils_string_map_reserve+0xcc>
 800d910:	1ae3      	subs	r3, r4, r3
 800d912:	009a      	lsls	r2, r3, #2
 800d914:	4638      	mov	r0, r7
 800d916:	2100      	movs	r1, #0
 800d918:	9201      	str	r2, [sp, #4]
 800d91a:	f00a fe79 	bl	8018610 <memset>
 800d91e:	9a01      	ldr	r2, [sp, #4]
 800d920:	4630      	mov	r0, r6
 800d922:	2100      	movs	r1, #0
 800d924:	f00a fe74 	bl	8018610 <memset>
 800d928:	e00b      	b.n	800d942 <rcutils_string_map_reserve+0xb6>
 800d92a:	f8d5 8014 	ldr.w	r8, [r5, #20]
 800d92e:	6828      	ldr	r0, [r5, #0]
 800d930:	4639      	mov	r1, r7
 800d932:	47c0      	blx	r8
 800d934:	6833      	ldr	r3, [r6, #0]
 800d936:	4639      	mov	r1, r7
 800d938:	6858      	ldr	r0, [r3, #4]
 800d93a:	601c      	str	r4, [r3, #0]
 800d93c:	47c0      	blx	r8
 800d93e:	6835      	ldr	r5, [r6, #0]
 800d940:	606c      	str	r4, [r5, #4]
 800d942:	2000      	movs	r0, #0
 800d944:	60ac      	str	r4, [r5, #8]
 800d946:	b003      	add	sp, #12
 800d948:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d94c:	2000      	movs	r0, #0
 800d94e:	e7ad      	b.n	800d8ac <rcutils_string_map_reserve+0x20>
 800d950:	200a      	movs	r0, #10
 800d952:	e7ab      	b.n	800d8ac <rcutils_string_map_reserve+0x20>
 800d954:	200b      	movs	r0, #11
 800d956:	4770      	bx	lr
 800d958:	1f13      	subs	r3, r2, #4
 800d95a:	f1ac 0c04 	sub.w	ip, ip, #4
 800d95e:	4498      	add	r8, r3
 800d960:	4460      	add	r0, ip
 800d962:	4462      	add	r2, ip
 800d964:	2300      	movs	r3, #0
 800d966:	f842 3f04 	str.w	r3, [r2, #4]!
 800d96a:	4542      	cmp	r2, r8
 800d96c:	f840 3f04 	str.w	r3, [r0, #4]!
 800d970:	d1f9      	bne.n	800d966 <rcutils_string_map_reserve+0xda>
 800d972:	e7e6      	b.n	800d942 <rcutils_string_map_reserve+0xb6>

0800d974 <rcutils_string_map_init>:
 800d974:	b082      	sub	sp, #8
 800d976:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d978:	460e      	mov	r6, r1
 800d97a:	a906      	add	r1, sp, #24
 800d97c:	e881 000c 	stmia.w	r1, {r2, r3}
 800d980:	b380      	cbz	r0, 800d9e4 <rcutils_string_map_init+0x70>
 800d982:	6807      	ldr	r7, [r0, #0]
 800d984:	4604      	mov	r4, r0
 800d986:	b12f      	cbz	r7, 800d994 <rcutils_string_map_init+0x20>
 800d988:	251e      	movs	r5, #30
 800d98a:	4628      	mov	r0, r5
 800d98c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d990:	b002      	add	sp, #8
 800d992:	4770      	bx	lr
 800d994:	a806      	add	r0, sp, #24
 800d996:	f7ff ff37 	bl	800d808 <rcutils_allocator_is_valid>
 800d99a:	b318      	cbz	r0, 800d9e4 <rcutils_string_map_init+0x70>
 800d99c:	9b06      	ldr	r3, [sp, #24]
 800d99e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d9a0:	2024      	movs	r0, #36	; 0x24
 800d9a2:	4798      	blx	r3
 800d9a4:	4605      	mov	r5, r0
 800d9a6:	6020      	str	r0, [r4, #0]
 800d9a8:	b310      	cbz	r0, 800d9f0 <rcutils_string_map_init+0x7c>
 800d9aa:	f10d 0e18 	add.w	lr, sp, #24
 800d9ae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d9b2:	f105 0c10 	add.w	ip, r5, #16
 800d9b6:	e9c5 7700 	strd	r7, r7, [r5]
 800d9ba:	e9c5 7702 	strd	r7, r7, [r5, #8]
 800d9be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d9c2:	f8de 3000 	ldr.w	r3, [lr]
 800d9c6:	f8cc 3000 	str.w	r3, [ip]
 800d9ca:	4631      	mov	r1, r6
 800d9cc:	4620      	mov	r0, r4
 800d9ce:	f7ff ff5d 	bl	800d88c <rcutils_string_map_reserve>
 800d9d2:	4605      	mov	r5, r0
 800d9d4:	2800      	cmp	r0, #0
 800d9d6:	d0d8      	beq.n	800d98a <rcutils_string_map_init+0x16>
 800d9d8:	9b07      	ldr	r3, [sp, #28]
 800d9da:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d9dc:	6820      	ldr	r0, [r4, #0]
 800d9de:	4798      	blx	r3
 800d9e0:	6027      	str	r7, [r4, #0]
 800d9e2:	e7d2      	b.n	800d98a <rcutils_string_map_init+0x16>
 800d9e4:	250b      	movs	r5, #11
 800d9e6:	4628      	mov	r0, r5
 800d9e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d9ec:	b002      	add	sp, #8
 800d9ee:	4770      	bx	lr
 800d9f0:	250a      	movs	r5, #10
 800d9f2:	e7ca      	b.n	800d98a <rcutils_string_map_init+0x16>

0800d9f4 <rcutils_string_map_fini>:
 800d9f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9f8:	b082      	sub	sp, #8
 800d9fa:	2800      	cmp	r0, #0
 800d9fc:	d039      	beq.n	800da72 <rcutils_string_map_fini+0x7e>
 800d9fe:	6804      	ldr	r4, [r0, #0]
 800da00:	4606      	mov	r6, r0
 800da02:	2c00      	cmp	r4, #0
 800da04:	d031      	beq.n	800da6a <rcutils_string_map_fini+0x76>
 800da06:	68a3      	ldr	r3, [r4, #8]
 800da08:	b323      	cbz	r3, 800da54 <rcutils_string_map_fini+0x60>
 800da0a:	2500      	movs	r5, #0
 800da0c:	6822      	ldr	r2, [r4, #0]
 800da0e:	46a8      	mov	r8, r5
 800da10:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800da14:	b1d8      	cbz	r0, 800da4e <rcutils_string_map_fini+0x5a>
 800da16:	6a21      	ldr	r1, [r4, #32]
 800da18:	6967      	ldr	r7, [r4, #20]
 800da1a:	9101      	str	r1, [sp, #4]
 800da1c:	47b8      	blx	r7
 800da1e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800da22:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800da26:	9901      	ldr	r1, [sp, #4]
 800da28:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800da2c:	47b8      	blx	r7
 800da2e:	68e3      	ldr	r3, [r4, #12]
 800da30:	6862      	ldr	r2, [r4, #4]
 800da32:	3b01      	subs	r3, #1
 800da34:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800da38:	60e3      	str	r3, [r4, #12]
 800da3a:	6834      	ldr	r4, [r6, #0]
 800da3c:	68a3      	ldr	r3, [r4, #8]
 800da3e:	3501      	adds	r5, #1
 800da40:	429d      	cmp	r5, r3
 800da42:	d207      	bcs.n	800da54 <rcutils_string_map_fini+0x60>
 800da44:	6822      	ldr	r2, [r4, #0]
 800da46:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800da4a:	2800      	cmp	r0, #0
 800da4c:	d1e3      	bne.n	800da16 <rcutils_string_map_fini+0x22>
 800da4e:	3501      	adds	r5, #1
 800da50:	429d      	cmp	r5, r3
 800da52:	d3dd      	bcc.n	800da10 <rcutils_string_map_fini+0x1c>
 800da54:	2100      	movs	r1, #0
 800da56:	4630      	mov	r0, r6
 800da58:	f7ff ff18 	bl	800d88c <rcutils_string_map_reserve>
 800da5c:	4604      	mov	r4, r0
 800da5e:	b920      	cbnz	r0, 800da6a <rcutils_string_map_fini+0x76>
 800da60:	6830      	ldr	r0, [r6, #0]
 800da62:	6943      	ldr	r3, [r0, #20]
 800da64:	6a01      	ldr	r1, [r0, #32]
 800da66:	4798      	blx	r3
 800da68:	6034      	str	r4, [r6, #0]
 800da6a:	4620      	mov	r0, r4
 800da6c:	b002      	add	sp, #8
 800da6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da72:	240b      	movs	r4, #11
 800da74:	4620      	mov	r0, r4
 800da76:	b002      	add	sp, #8
 800da78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800da7c <rcutils_string_map_getn>:
 800da7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da80:	b082      	sub	sp, #8
 800da82:	b308      	cbz	r0, 800dac8 <rcutils_string_map_getn+0x4c>
 800da84:	6804      	ldr	r4, [r0, #0]
 800da86:	b304      	cbz	r4, 800daca <rcutils_string_map_getn+0x4e>
 800da88:	460d      	mov	r5, r1
 800da8a:	b1e9      	cbz	r1, 800dac8 <rcutils_string_map_getn+0x4c>
 800da8c:	f8d4 9008 	ldr.w	r9, [r4, #8]
 800da90:	6827      	ldr	r7, [r4, #0]
 800da92:	f1b9 0f00 	cmp.w	r9, #0
 800da96:	d017      	beq.n	800dac8 <rcutils_string_map_getn+0x4c>
 800da98:	4690      	mov	r8, r2
 800da9a:	3f04      	subs	r7, #4
 800da9c:	2600      	movs	r6, #0
 800da9e:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800daa2:	9101      	str	r1, [sp, #4]
 800daa4:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800daa8:	4608      	mov	r0, r1
 800daaa:	3601      	adds	r6, #1
 800daac:	b151      	cbz	r1, 800dac4 <rcutils_string_map_getn+0x48>
 800daae:	f7f2 fba1 	bl	80001f4 <strlen>
 800dab2:	4540      	cmp	r0, r8
 800dab4:	4602      	mov	r2, r0
 800dab6:	9901      	ldr	r1, [sp, #4]
 800dab8:	bf38      	it	cc
 800daba:	4642      	movcc	r2, r8
 800dabc:	4628      	mov	r0, r5
 800dabe:	f00a fdbc 	bl	801863a <strncmp>
 800dac2:	b130      	cbz	r0, 800dad2 <rcutils_string_map_getn+0x56>
 800dac4:	45b1      	cmp	r9, r6
 800dac6:	d1ea      	bne.n	800da9e <rcutils_string_map_getn+0x22>
 800dac8:	2400      	movs	r4, #0
 800daca:	4620      	mov	r0, r4
 800dacc:	b002      	add	sp, #8
 800dace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dad2:	6863      	ldr	r3, [r4, #4]
 800dad4:	f853 400a 	ldr.w	r4, [r3, sl]
 800dad8:	4620      	mov	r0, r4
 800dada:	b002      	add	sp, #8
 800dadc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800dae0 <rcutils_system_time_now>:
 800dae0:	b310      	cbz	r0, 800db28 <rcutils_system_time_now+0x48>
 800dae2:	b570      	push	{r4, r5, r6, lr}
 800dae4:	b084      	sub	sp, #16
 800dae6:	4669      	mov	r1, sp
 800dae8:	4604      	mov	r4, r0
 800daea:	2001      	movs	r0, #1
 800daec:	f7f4 ff50 	bl	8002990 <clock_gettime>
 800daf0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800daf4:	2800      	cmp	r0, #0
 800daf6:	f171 0300 	sbcs.w	r3, r1, #0
 800dafa:	db12      	blt.n	800db22 <rcutils_system_time_now+0x42>
 800dafc:	9d02      	ldr	r5, [sp, #8]
 800dafe:	2d00      	cmp	r5, #0
 800db00:	db0c      	blt.n	800db1c <rcutils_system_time_now+0x3c>
 800db02:	4e0a      	ldr	r6, [pc, #40]	; (800db2c <rcutils_system_time_now+0x4c>)
 800db04:	fba0 2306 	umull	r2, r3, r0, r6
 800db08:	1952      	adds	r2, r2, r5
 800db0a:	fb06 3301 	mla	r3, r6, r1, r3
 800db0e:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800db12:	2000      	movs	r0, #0
 800db14:	e9c4 2300 	strd	r2, r3, [r4]
 800db18:	b004      	add	sp, #16
 800db1a:	bd70      	pop	{r4, r5, r6, pc}
 800db1c:	ea50 0301 	orrs.w	r3, r0, r1
 800db20:	d1ef      	bne.n	800db02 <rcutils_system_time_now+0x22>
 800db22:	2002      	movs	r0, #2
 800db24:	b004      	add	sp, #16
 800db26:	bd70      	pop	{r4, r5, r6, pc}
 800db28:	200b      	movs	r0, #11
 800db2a:	4770      	bx	lr
 800db2c:	3b9aca00 	.word	0x3b9aca00

0800db30 <rcutils_steady_time_now>:
 800db30:	b310      	cbz	r0, 800db78 <rcutils_steady_time_now+0x48>
 800db32:	b570      	push	{r4, r5, r6, lr}
 800db34:	b084      	sub	sp, #16
 800db36:	4669      	mov	r1, sp
 800db38:	4604      	mov	r4, r0
 800db3a:	2000      	movs	r0, #0
 800db3c:	f7f4 ff28 	bl	8002990 <clock_gettime>
 800db40:	e9dd 0100 	ldrd	r0, r1, [sp]
 800db44:	2800      	cmp	r0, #0
 800db46:	f171 0300 	sbcs.w	r3, r1, #0
 800db4a:	db12      	blt.n	800db72 <rcutils_steady_time_now+0x42>
 800db4c:	9d02      	ldr	r5, [sp, #8]
 800db4e:	2d00      	cmp	r5, #0
 800db50:	db0c      	blt.n	800db6c <rcutils_steady_time_now+0x3c>
 800db52:	4e0a      	ldr	r6, [pc, #40]	; (800db7c <rcutils_steady_time_now+0x4c>)
 800db54:	fba0 2306 	umull	r2, r3, r0, r6
 800db58:	1952      	adds	r2, r2, r5
 800db5a:	fb06 3301 	mla	r3, r6, r1, r3
 800db5e:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800db62:	2000      	movs	r0, #0
 800db64:	e9c4 2300 	strd	r2, r3, [r4]
 800db68:	b004      	add	sp, #16
 800db6a:	bd70      	pop	{r4, r5, r6, pc}
 800db6c:	ea50 0301 	orrs.w	r3, r0, r1
 800db70:	d1ef      	bne.n	800db52 <rcutils_steady_time_now+0x22>
 800db72:	2002      	movs	r0, #2
 800db74:	b004      	add	sp, #16
 800db76:	bd70      	pop	{r4, r5, r6, pc}
 800db78:	200b      	movs	r0, #11
 800db7a:	4770      	bx	lr
 800db7c:	3b9aca00 	.word	0x3b9aca00

0800db80 <rmw_get_default_publisher_options>:
 800db80:	2000      	movs	r0, #0
 800db82:	4770      	bx	lr

0800db84 <rmw_get_default_subscription_options>:
 800db84:	2200      	movs	r2, #0
 800db86:	6002      	str	r2, [r0, #0]
 800db88:	7102      	strb	r2, [r0, #4]
 800db8a:	4770      	bx	lr

0800db8c <rmw_get_zero_initialized_message_info>:
 800db8c:	b470      	push	{r4, r5, r6}
 800db8e:	4d07      	ldr	r5, [pc, #28]	; (800dbac <rmw_get_zero_initialized_message_info+0x20>)
 800db90:	4606      	mov	r6, r0
 800db92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800db94:	4634      	mov	r4, r6
 800db96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800db98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800db9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800db9c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800dba0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800dba4:	4630      	mov	r0, r6
 800dba6:	bc70      	pop	{r4, r5, r6}
 800dba8:	4770      	bx	lr
 800dbaa:	bf00      	nop
 800dbac:	08019870 	.word	0x08019870

0800dbb0 <rmw_validate_full_topic_name>:
 800dbb0:	2800      	cmp	r0, #0
 800dbb2:	d062      	beq.n	800dc7a <rmw_validate_full_topic_name+0xca>
 800dbb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dbb8:	460d      	mov	r5, r1
 800dbba:	2900      	cmp	r1, #0
 800dbbc:	d05f      	beq.n	800dc7e <rmw_validate_full_topic_name+0xce>
 800dbbe:	4616      	mov	r6, r2
 800dbc0:	4604      	mov	r4, r0
 800dbc2:	f7f2 fb17 	bl	80001f4 <strlen>
 800dbc6:	b148      	cbz	r0, 800dbdc <rmw_validate_full_topic_name+0x2c>
 800dbc8:	7823      	ldrb	r3, [r4, #0]
 800dbca:	2b2f      	cmp	r3, #47	; 0x2f
 800dbcc:	d00d      	beq.n	800dbea <rmw_validate_full_topic_name+0x3a>
 800dbce:	2302      	movs	r3, #2
 800dbd0:	602b      	str	r3, [r5, #0]
 800dbd2:	b13e      	cbz	r6, 800dbe4 <rmw_validate_full_topic_name+0x34>
 800dbd4:	2000      	movs	r0, #0
 800dbd6:	6030      	str	r0, [r6, #0]
 800dbd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dbdc:	2301      	movs	r3, #1
 800dbde:	602b      	str	r3, [r5, #0]
 800dbe0:	2e00      	cmp	r6, #0
 800dbe2:	d1f7      	bne.n	800dbd4 <rmw_validate_full_topic_name+0x24>
 800dbe4:	2000      	movs	r0, #0
 800dbe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dbea:	1e47      	subs	r7, r0, #1
 800dbec:	5de3      	ldrb	r3, [r4, r7]
 800dbee:	2b2f      	cmp	r3, #47	; 0x2f
 800dbf0:	d047      	beq.n	800dc82 <rmw_validate_full_topic_name+0xd2>
 800dbf2:	1e63      	subs	r3, r4, #1
 800dbf4:	eb03 0900 	add.w	r9, r3, r0
 800dbf8:	f1c4 0e01 	rsb	lr, r4, #1
 800dbfc:	eb0e 0803 	add.w	r8, lr, r3
 800dc00:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800dc04:	f021 0220 	bic.w	r2, r1, #32
 800dc08:	3a41      	subs	r2, #65	; 0x41
 800dc0a:	2a19      	cmp	r2, #25
 800dc0c:	f1a1 0c2f 	sub.w	ip, r1, #47	; 0x2f
 800dc10:	d90c      	bls.n	800dc2c <rmw_validate_full_topic_name+0x7c>
 800dc12:	295f      	cmp	r1, #95	; 0x5f
 800dc14:	d00a      	beq.n	800dc2c <rmw_validate_full_topic_name+0x7c>
 800dc16:	f1bc 0f0a 	cmp.w	ip, #10
 800dc1a:	d907      	bls.n	800dc2c <rmw_validate_full_topic_name+0x7c>
 800dc1c:	2304      	movs	r3, #4
 800dc1e:	602b      	str	r3, [r5, #0]
 800dc20:	2e00      	cmp	r6, #0
 800dc22:	d0df      	beq.n	800dbe4 <rmw_validate_full_topic_name+0x34>
 800dc24:	f8c6 8000 	str.w	r8, [r6]
 800dc28:	2000      	movs	r0, #0
 800dc2a:	e7d5      	b.n	800dbd8 <rmw_validate_full_topic_name+0x28>
 800dc2c:	454b      	cmp	r3, r9
 800dc2e:	d1e5      	bne.n	800dbfc <rmw_validate_full_topic_name+0x4c>
 800dc30:	f8df e084 	ldr.w	lr, [pc, #132]	; 800dcb8 <rmw_validate_full_topic_name+0x108>
 800dc34:	2300      	movs	r3, #0
 800dc36:	f107 0801 	add.w	r8, r7, #1
 800dc3a:	e005      	b.n	800dc48 <rmw_validate_full_topic_name+0x98>
 800dc3c:	4611      	mov	r1, r2
 800dc3e:	4288      	cmp	r0, r1
 800dc40:	4613      	mov	r3, r2
 800dc42:	f104 0401 	add.w	r4, r4, #1
 800dc46:	d925      	bls.n	800dc94 <rmw_validate_full_topic_name+0xe4>
 800dc48:	429f      	cmp	r7, r3
 800dc4a:	f103 0201 	add.w	r2, r3, #1
 800dc4e:	d01e      	beq.n	800dc8e <rmw_validate_full_topic_name+0xde>
 800dc50:	7821      	ldrb	r1, [r4, #0]
 800dc52:	292f      	cmp	r1, #47	; 0x2f
 800dc54:	d1f2      	bne.n	800dc3c <rmw_validate_full_topic_name+0x8c>
 800dc56:	f894 c001 	ldrb.w	ip, [r4, #1]
 800dc5a:	1c5a      	adds	r2, r3, #1
 800dc5c:	f1bc 0f2f 	cmp.w	ip, #47	; 0x2f
 800dc60:	4611      	mov	r1, r2
 800dc62:	d024      	beq.n	800dcae <rmw_validate_full_topic_name+0xfe>
 800dc64:	f81c 300e 	ldrb.w	r3, [ip, lr]
 800dc68:	075b      	lsls	r3, r3, #29
 800dc6a:	d5e8      	bpl.n	800dc3e <rmw_validate_full_topic_name+0x8e>
 800dc6c:	2306      	movs	r3, #6
 800dc6e:	602b      	str	r3, [r5, #0]
 800dc70:	2e00      	cmp	r6, #0
 800dc72:	d0b7      	beq.n	800dbe4 <rmw_validate_full_topic_name+0x34>
 800dc74:	6032      	str	r2, [r6, #0]
 800dc76:	2000      	movs	r0, #0
 800dc78:	e7ae      	b.n	800dbd8 <rmw_validate_full_topic_name+0x28>
 800dc7a:	200b      	movs	r0, #11
 800dc7c:	4770      	bx	lr
 800dc7e:	200b      	movs	r0, #11
 800dc80:	e7aa      	b.n	800dbd8 <rmw_validate_full_topic_name+0x28>
 800dc82:	2303      	movs	r3, #3
 800dc84:	602b      	str	r3, [r5, #0]
 800dc86:	2e00      	cmp	r6, #0
 800dc88:	d0ac      	beq.n	800dbe4 <rmw_validate_full_topic_name+0x34>
 800dc8a:	6037      	str	r7, [r6, #0]
 800dc8c:	e7aa      	b.n	800dbe4 <rmw_validate_full_topic_name+0x34>
 800dc8e:	4641      	mov	r1, r8
 800dc90:	1c7a      	adds	r2, r7, #1
 800dc92:	e7d4      	b.n	800dc3e <rmw_validate_full_topic_name+0x8e>
 800dc94:	28f7      	cmp	r0, #247	; 0xf7
 800dc96:	d802      	bhi.n	800dc9e <rmw_validate_full_topic_name+0xee>
 800dc98:	2000      	movs	r0, #0
 800dc9a:	6028      	str	r0, [r5, #0]
 800dc9c:	e79c      	b.n	800dbd8 <rmw_validate_full_topic_name+0x28>
 800dc9e:	2307      	movs	r3, #7
 800dca0:	602b      	str	r3, [r5, #0]
 800dca2:	2e00      	cmp	r6, #0
 800dca4:	d09e      	beq.n	800dbe4 <rmw_validate_full_topic_name+0x34>
 800dca6:	23f6      	movs	r3, #246	; 0xf6
 800dca8:	6033      	str	r3, [r6, #0]
 800dcaa:	2000      	movs	r0, #0
 800dcac:	e794      	b.n	800dbd8 <rmw_validate_full_topic_name+0x28>
 800dcae:	2305      	movs	r3, #5
 800dcb0:	602b      	str	r3, [r5, #0]
 800dcb2:	2e00      	cmp	r6, #0
 800dcb4:	d1de      	bne.n	800dc74 <rmw_validate_full_topic_name+0xc4>
 800dcb6:	e795      	b.n	800dbe4 <rmw_validate_full_topic_name+0x34>
 800dcb8:	0801a278 	.word	0x0801a278

0800dcbc <rmw_uros_set_custom_transport>:
 800dcbc:	b470      	push	{r4, r5, r6}
 800dcbe:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800dcc2:	b162      	cbz	r2, 800dcde <rmw_uros_set_custom_transport+0x22>
 800dcc4:	b15b      	cbz	r3, 800dcde <rmw_uros_set_custom_transport+0x22>
 800dcc6:	b155      	cbz	r5, 800dcde <rmw_uros_set_custom_transport+0x22>
 800dcc8:	b14e      	cbz	r6, 800dcde <rmw_uros_set_custom_transport+0x22>
 800dcca:	4c06      	ldr	r4, [pc, #24]	; (800dce4 <rmw_uros_set_custom_transport+0x28>)
 800dccc:	7020      	strb	r0, [r4, #0]
 800dcce:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800dcd2:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800dcd6:	6166      	str	r6, [r4, #20]
 800dcd8:	2000      	movs	r0, #0
 800dcda:	bc70      	pop	{r4, r5, r6}
 800dcdc:	4770      	bx	lr
 800dcde:	200b      	movs	r0, #11
 800dce0:	bc70      	pop	{r4, r5, r6}
 800dce2:	4770      	bx	lr
 800dce4:	20009ea0 	.word	0x20009ea0

0800dce8 <flush_session>:
 800dce8:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 800dcea:	f002 bf01 	b.w	8010af0 <uxr_run_session_until_confirm_delivery>
 800dcee:	bf00      	nop

0800dcf0 <rmw_publish>:
 800dcf0:	2800      	cmp	r0, #0
 800dcf2:	d053      	beq.n	800dd9c <rmw_publish+0xac>
 800dcf4:	b570      	push	{r4, r5, r6, lr}
 800dcf6:	460d      	mov	r5, r1
 800dcf8:	b08e      	sub	sp, #56	; 0x38
 800dcfa:	2900      	cmp	r1, #0
 800dcfc:	d04b      	beq.n	800dd96 <rmw_publish+0xa6>
 800dcfe:	4604      	mov	r4, r0
 800dd00:	6800      	ldr	r0, [r0, #0]
 800dd02:	f000 fe31 	bl	800e968 <is_uxrce_rmw_identifier_valid>
 800dd06:	2800      	cmp	r0, #0
 800dd08:	d045      	beq.n	800dd96 <rmw_publish+0xa6>
 800dd0a:	6866      	ldr	r6, [r4, #4]
 800dd0c:	2e00      	cmp	r6, #0
 800dd0e:	d042      	beq.n	800dd96 <rmw_publish+0xa6>
 800dd10:	69b4      	ldr	r4, [r6, #24]
 800dd12:	4628      	mov	r0, r5
 800dd14:	6923      	ldr	r3, [r4, #16]
 800dd16:	4798      	blx	r3
 800dd18:	69f3      	ldr	r3, [r6, #28]
 800dd1a:	9005      	str	r0, [sp, #20]
 800dd1c:	b113      	cbz	r3, 800dd24 <rmw_publish+0x34>
 800dd1e:	a805      	add	r0, sp, #20
 800dd20:	4798      	blx	r3
 800dd22:	9805      	ldr	r0, [sp, #20]
 800dd24:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800dd28:	691b      	ldr	r3, [r3, #16]
 800dd2a:	9000      	str	r0, [sp, #0]
 800dd2c:	6972      	ldr	r2, [r6, #20]
 800dd2e:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800dd30:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800dd34:	ab06      	add	r3, sp, #24
 800dd36:	f003 fce3 	bl	8011700 <uxr_prepare_output_stream>
 800dd3a:	b1d8      	cbz	r0, 800dd74 <rmw_publish+0x84>
 800dd3c:	68a3      	ldr	r3, [r4, #8]
 800dd3e:	4628      	mov	r0, r5
 800dd40:	a906      	add	r1, sp, #24
 800dd42:	4798      	blx	r3
 800dd44:	6a33      	ldr	r3, [r6, #32]
 800dd46:	4604      	mov	r4, r0
 800dd48:	b10b      	cbz	r3, 800dd4e <rmw_publish+0x5e>
 800dd4a:	a806      	add	r0, sp, #24
 800dd4c:	4798      	blx	r3
 800dd4e:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 800dd52:	2b01      	cmp	r3, #1
 800dd54:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800dd58:	d022      	beq.n	800dda0 <rmw_publish+0xb0>
 800dd5a:	6918      	ldr	r0, [r3, #16]
 800dd5c:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 800dd5e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800dd62:	f002 fec5 	bl	8010af0 <uxr_run_session_until_confirm_delivery>
 800dd66:	4020      	ands	r0, r4
 800dd68:	b2c4      	uxtb	r4, r0
 800dd6a:	f084 0001 	eor.w	r0, r4, #1
 800dd6e:	b2c0      	uxtb	r0, r0
 800dd70:	b00e      	add	sp, #56	; 0x38
 800dd72:	bd70      	pop	{r4, r5, r6, pc}
 800dd74:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800dd78:	4a0c      	ldr	r2, [pc, #48]	; (800ddac <rmw_publish+0xbc>)
 800dd7a:	6918      	ldr	r0, [r3, #16]
 800dd7c:	9b05      	ldr	r3, [sp, #20]
 800dd7e:	9300      	str	r3, [sp, #0]
 800dd80:	e9cd 2601 	strd	r2, r6, [sp, #4]
 800dd84:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800dd88:	6972      	ldr	r2, [r6, #20]
 800dd8a:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800dd8c:	ab06      	add	r3, sp, #24
 800dd8e:	f003 fce7 	bl	8011760 <uxr_prepare_output_stream_fragmented>
 800dd92:	2800      	cmp	r0, #0
 800dd94:	d1d2      	bne.n	800dd3c <rmw_publish+0x4c>
 800dd96:	2001      	movs	r0, #1
 800dd98:	b00e      	add	sp, #56	; 0x38
 800dd9a:	bd70      	pop	{r4, r5, r6, pc}
 800dd9c:	2001      	movs	r0, #1
 800dd9e:	4770      	bx	lr
 800dda0:	6918      	ldr	r0, [r3, #16]
 800dda2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800dda6:	f002 fae7 	bl	8010378 <uxr_flash_output_streams>
 800ddaa:	e7de      	b.n	800dd6a <rmw_publish+0x7a>
 800ddac:	0800dce9 	.word	0x0800dce9

0800ddb0 <rmw_create_publisher>:
 800ddb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddb4:	b087      	sub	sp, #28
 800ddb6:	2800      	cmp	r0, #0
 800ddb8:	f000 80cc 	beq.w	800df54 <rmw_create_publisher+0x1a4>
 800ddbc:	460e      	mov	r6, r1
 800ddbe:	2900      	cmp	r1, #0
 800ddc0:	f000 80c8 	beq.w	800df54 <rmw_create_publisher+0x1a4>
 800ddc4:	4604      	mov	r4, r0
 800ddc6:	6800      	ldr	r0, [r0, #0]
 800ddc8:	4615      	mov	r5, r2
 800ddca:	4698      	mov	r8, r3
 800ddcc:	f000 fdcc 	bl	800e968 <is_uxrce_rmw_identifier_valid>
 800ddd0:	2800      	cmp	r0, #0
 800ddd2:	f000 80bf 	beq.w	800df54 <rmw_create_publisher+0x1a4>
 800ddd6:	2d00      	cmp	r5, #0
 800ddd8:	f000 80bc 	beq.w	800df54 <rmw_create_publisher+0x1a4>
 800dddc:	782b      	ldrb	r3, [r5, #0]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	f000 80b8 	beq.w	800df54 <rmw_create_publisher+0x1a4>
 800dde4:	f1b8 0f00 	cmp.w	r8, #0
 800dde8:	f000 80b4 	beq.w	800df54 <rmw_create_publisher+0x1a4>
 800ddec:	485c      	ldr	r0, [pc, #368]	; (800df60 <rmw_create_publisher+0x1b0>)
 800ddee:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800ddf2:	f007 f989 	bl	8015108 <get_memory>
 800ddf6:	2800      	cmp	r0, #0
 800ddf8:	f000 80ac 	beq.w	800df54 <rmw_create_publisher+0x1a4>
 800ddfc:	68c4      	ldr	r4, [r0, #12]
 800ddfe:	2300      	movs	r3, #0
 800de00:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800de04:	f007 f9e8 	bl	80151d8 <rmw_get_implementation_identifier>
 800de08:	f104 0a98 	add.w	sl, r4, #152	; 0x98
 800de0c:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800de10:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 800de14:	4628      	mov	r0, r5
 800de16:	f7f2 f9ed 	bl	80001f4 <strlen>
 800de1a:	3001      	adds	r0, #1
 800de1c:	283c      	cmp	r0, #60	; 0x3c
 800de1e:	f104 0784 	add.w	r7, r4, #132	; 0x84
 800de22:	f200 8094 	bhi.w	800df4e <rmw_create_publisher+0x19e>
 800de26:	4a4f      	ldr	r2, [pc, #316]	; (800df64 <rmw_create_publisher+0x1b4>)
 800de28:	462b      	mov	r3, r5
 800de2a:	213c      	movs	r1, #60	; 0x3c
 800de2c:	4650      	mov	r0, sl
 800de2e:	f00a fa8f 	bl	8018350 <sniprintf>
 800de32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800de36:	e9c4 391f 	strd	r3, r9, [r4, #124]	; 0x7c
 800de3a:	4641      	mov	r1, r8
 800de3c:	2250      	movs	r2, #80	; 0x50
 800de3e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800de42:	f00a fd04 	bl	801884e <memcpy>
 800de46:	f898 3008 	ldrb.w	r3, [r8, #8]
 800de4a:	4947      	ldr	r1, [pc, #284]	; (800df68 <rmw_create_publisher+0x1b8>)
 800de4c:	2b02      	cmp	r3, #2
 800de4e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800de52:	bf0c      	ite	eq
 800de54:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 800de58:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 800de5c:	67a3      	str	r3, [r4, #120]	; 0x78
 800de5e:	2300      	movs	r3, #0
 800de60:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800de64:	4630      	mov	r0, r6
 800de66:	f000 fd8d 	bl	800e984 <get_message_typesupport_handle>
 800de6a:	2800      	cmp	r0, #0
 800de6c:	d06f      	beq.n	800df4e <rmw_create_publisher+0x19e>
 800de6e:	6842      	ldr	r2, [r0, #4]
 800de70:	61a2      	str	r2, [r4, #24]
 800de72:	2a00      	cmp	r2, #0
 800de74:	d06b      	beq.n	800df4e <rmw_create_publisher+0x19e>
 800de76:	4629      	mov	r1, r5
 800de78:	4643      	mov	r3, r8
 800de7a:	4648      	mov	r0, r9
 800de7c:	f007 fbf6 	bl	801566c <create_topic>
 800de80:	6260      	str	r0, [r4, #36]	; 0x24
 800de82:	2800      	cmp	r0, #0
 800de84:	d063      	beq.n	800df4e <rmw_create_publisher+0x19e>
 800de86:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800de8a:	f241 5398 	movw	r3, #5528	; 0x1598
 800de8e:	2103      	movs	r1, #3
 800de90:	5ad0      	ldrh	r0, [r2, r3]
 800de92:	1c45      	adds	r5, r0, #1
 800de94:	52d5      	strh	r5, [r2, r3]
 800de96:	f001 fffd 	bl	800fe94 <uxr_object_id>
 800de9a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800de9e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800dea2:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800dea6:	6912      	ldr	r2, [r2, #16]
 800dea8:	6120      	str	r0, [r4, #16]
 800deaa:	f04f 0a06 	mov.w	sl, #6
 800deae:	f8cd a000 	str.w	sl, [sp]
 800deb2:	6819      	ldr	r1, [r3, #0]
 800deb4:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800deb8:	f502 7028 	add.w	r0, r2, #672	; 0x2a0
 800debc:	6922      	ldr	r2, [r4, #16]
 800debe:	f001 fe99 	bl	800fbf4 <uxr_buffer_create_publisher_bin>
 800dec2:	4602      	mov	r2, r0
 800dec4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800dec8:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800decc:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800ded0:	f000 fcca 	bl	800e868 <run_xrce_session>
 800ded4:	b3b8      	cbz	r0, 800df46 <rmw_create_publisher+0x196>
 800ded6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800deda:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 800dede:	f241 539a 	movw	r3, #5530	; 0x159a
 800dee2:	2105      	movs	r1, #5
 800dee4:	5ad0      	ldrh	r0, [r2, r3]
 800dee6:	1c45      	adds	r5, r0, #1
 800dee8:	52d5      	strh	r5, [r2, r3]
 800deea:	f001 ffd3 	bl	800fe94 <uxr_object_id>
 800deee:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800def2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800def6:	6915      	ldr	r5, [r2, #16]
 800def8:	6160      	str	r0, [r4, #20]
 800defa:	ae04      	add	r6, sp, #16
 800defc:	4641      	mov	r1, r8
 800defe:	4630      	mov	r0, r6
 800df00:	f8d3 8384 	ldr.w	r8, [r3, #900]	; 0x384
 800df04:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800df08:	f000 fcca 	bl	800e8a0 <convert_qos_profile>
 800df0c:	e896 0003 	ldmia.w	r6, {r0, r1}
 800df10:	f8cd a00c 	str.w	sl, [sp, #12]
 800df14:	9001      	str	r0, [sp, #4]
 800df16:	f8ad 1008 	strh.w	r1, [sp, #8]
 800df1a:	f8db 3010 	ldr.w	r3, [fp, #16]
 800df1e:	9300      	str	r3, [sp, #0]
 800df20:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
 800df24:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800df28:	f8d8 1000 	ldr.w	r1, [r8]
 800df2c:	4628      	mov	r0, r5
 800df2e:	f001 febf 	bl	800fcb0 <uxr_buffer_create_datawriter_bin>
 800df32:	4602      	mov	r2, r0
 800df34:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800df38:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800df3c:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800df40:	f000 fc92 	bl	800e868 <run_xrce_session>
 800df44:	b938      	cbnz	r0, 800df56 <rmw_create_publisher+0x1a6>
 800df46:	4806      	ldr	r0, [pc, #24]	; (800df60 <rmw_create_publisher+0x1b0>)
 800df48:	4621      	mov	r1, r4
 800df4a:	f007 f8ed 	bl	8015128 <put_memory>
 800df4e:	4638      	mov	r0, r7
 800df50:	f000 fb3a 	bl	800e5c8 <rmw_uxrce_fini_publisher_memory>
 800df54:	2700      	movs	r7, #0
 800df56:	4638      	mov	r0, r7
 800df58:	b007      	add	sp, #28
 800df5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df5e:	bf00      	nop
 800df60:	20009ed0 	.word	0x20009ed0
 800df64:	08019ae4 	.word	0x08019ae4
 800df68:	08019ab0 	.word	0x08019ab0

0800df6c <rmw_publisher_get_actual_qos>:
 800df6c:	2000      	movs	r0, #0
 800df6e:	4770      	bx	lr

0800df70 <rmw_destroy_publisher>:
 800df70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df72:	b128      	cbz	r0, 800df80 <rmw_destroy_publisher+0x10>
 800df74:	4604      	mov	r4, r0
 800df76:	6800      	ldr	r0, [r0, #0]
 800df78:	460d      	mov	r5, r1
 800df7a:	f000 fcf5 	bl	800e968 <is_uxrce_rmw_identifier_valid>
 800df7e:	b910      	cbnz	r0, 800df86 <rmw_destroy_publisher+0x16>
 800df80:	2401      	movs	r4, #1
 800df82:	4620      	mov	r0, r4
 800df84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df86:	6863      	ldr	r3, [r4, #4]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d0f9      	beq.n	800df80 <rmw_destroy_publisher+0x10>
 800df8c:	2d00      	cmp	r5, #0
 800df8e:	d0f7      	beq.n	800df80 <rmw_destroy_publisher+0x10>
 800df90:	6828      	ldr	r0, [r5, #0]
 800df92:	f000 fce9 	bl	800e968 <is_uxrce_rmw_identifier_valid>
 800df96:	2800      	cmp	r0, #0
 800df98:	d0f2      	beq.n	800df80 <rmw_destroy_publisher+0x10>
 800df9a:	686c      	ldr	r4, [r5, #4]
 800df9c:	2c00      	cmp	r4, #0
 800df9e:	d0ef      	beq.n	800df80 <rmw_destroy_publisher+0x10>
 800dfa0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800dfa2:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 800dfa6:	f007 fbc3 	bl	8015730 <destroy_topic>
 800dfaa:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800dfae:	6962      	ldr	r2, [r4, #20]
 800dfb0:	6918      	ldr	r0, [r3, #16]
 800dfb2:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800dfb6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800dfba:	6819      	ldr	r1, [r3, #0]
 800dfbc:	f001 fd68 	bl	800fa90 <uxr_buffer_delete_entity>
 800dfc0:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800dfc4:	6922      	ldr	r2, [r4, #16]
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	6908      	ldr	r0, [r1, #16]
 800dfca:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800dfce:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800dfd2:	6809      	ldr	r1, [r1, #0]
 800dfd4:	461c      	mov	r4, r3
 800dfd6:	f001 fd5b 	bl	800fa90 <uxr_buffer_delete_entity>
 800dfda:	4606      	mov	r6, r0
 800dfdc:	6938      	ldr	r0, [r7, #16]
 800dfde:	4622      	mov	r2, r4
 800dfe0:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800dfe4:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800dfe8:	f000 fc3e 	bl	800e868 <run_xrce_session>
 800dfec:	4604      	mov	r4, r0
 800dfee:	6938      	ldr	r0, [r7, #16]
 800dff0:	4632      	mov	r2, r6
 800dff2:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800dff6:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800dffa:	f000 fc35 	bl	800e868 <run_xrce_session>
 800dffe:	b12c      	cbz	r4, 800e00c <rmw_destroy_publisher+0x9c>
 800e000:	b120      	cbz	r0, 800e00c <rmw_destroy_publisher+0x9c>
 800e002:	2400      	movs	r4, #0
 800e004:	4628      	mov	r0, r5
 800e006:	f000 fadf 	bl	800e5c8 <rmw_uxrce_fini_publisher_memory>
 800e00a:	e7ba      	b.n	800df82 <rmw_destroy_publisher+0x12>
 800e00c:	2402      	movs	r4, #2
 800e00e:	e7f9      	b.n	800e004 <rmw_destroy_publisher+0x94>

0800e010 <rmw_create_subscription>:
 800e010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e014:	b08d      	sub	sp, #52	; 0x34
 800e016:	2800      	cmp	r0, #0
 800e018:	f000 80cf 	beq.w	800e1ba <rmw_create_subscription+0x1aa>
 800e01c:	460e      	mov	r6, r1
 800e01e:	2900      	cmp	r1, #0
 800e020:	f000 80cb 	beq.w	800e1ba <rmw_create_subscription+0x1aa>
 800e024:	4604      	mov	r4, r0
 800e026:	6800      	ldr	r0, [r0, #0]
 800e028:	4615      	mov	r5, r2
 800e02a:	4698      	mov	r8, r3
 800e02c:	f000 fc9c 	bl	800e968 <is_uxrce_rmw_identifier_valid>
 800e030:	2800      	cmp	r0, #0
 800e032:	f000 80c2 	beq.w	800e1ba <rmw_create_subscription+0x1aa>
 800e036:	2d00      	cmp	r5, #0
 800e038:	f000 80bf 	beq.w	800e1ba <rmw_create_subscription+0x1aa>
 800e03c:	782b      	ldrb	r3, [r5, #0]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	f000 80bb 	beq.w	800e1ba <rmw_create_subscription+0x1aa>
 800e044:	f1b8 0f00 	cmp.w	r8, #0
 800e048:	f000 80b7 	beq.w	800e1ba <rmw_create_subscription+0x1aa>
 800e04c:	485d      	ldr	r0, [pc, #372]	; (800e1c4 <rmw_create_subscription+0x1b4>)
 800e04e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e052:	f007 f859 	bl	8015108 <get_memory>
 800e056:	4604      	mov	r4, r0
 800e058:	2800      	cmp	r0, #0
 800e05a:	f000 80af 	beq.w	800e1bc <rmw_create_subscription+0x1ac>
 800e05e:	68c7      	ldr	r7, [r0, #12]
 800e060:	2300      	movs	r3, #0
 800e062:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e066:	f007 f8b7 	bl	80151d8 <rmw_get_implementation_identifier>
 800e06a:	f107 0a94 	add.w	sl, r7, #148	; 0x94
 800e06e:	67f8      	str	r0, [r7, #124]	; 0x7c
 800e070:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 800e074:	4628      	mov	r0, r5
 800e076:	f7f2 f8bd 	bl	80001f4 <strlen>
 800e07a:	3001      	adds	r0, #1
 800e07c:	283c      	cmp	r0, #60	; 0x3c
 800e07e:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 800e082:	f200 8097 	bhi.w	800e1b4 <rmw_create_subscription+0x1a4>
 800e086:	4a50      	ldr	r2, [pc, #320]	; (800e1c8 <rmw_create_subscription+0x1b8>)
 800e088:	462b      	mov	r3, r5
 800e08a:	213c      	movs	r1, #60	; 0x3c
 800e08c:	4650      	mov	r0, sl
 800e08e:	f00a f95f 	bl	8018350 <sniprintf>
 800e092:	4641      	mov	r1, r8
 800e094:	f8c7 9020 	str.w	r9, [r7, #32]
 800e098:	2250      	movs	r2, #80	; 0x50
 800e09a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800e09e:	f00a fbd6 	bl	801884e <memcpy>
 800e0a2:	494a      	ldr	r1, [pc, #296]	; (800e1cc <rmw_create_subscription+0x1bc>)
 800e0a4:	4630      	mov	r0, r6
 800e0a6:	f000 fc6d 	bl	800e984 <get_message_typesupport_handle>
 800e0aa:	2800      	cmp	r0, #0
 800e0ac:	f000 8082 	beq.w	800e1b4 <rmw_create_subscription+0x1a4>
 800e0b0:	6842      	ldr	r2, [r0, #4]
 800e0b2:	61ba      	str	r2, [r7, #24]
 800e0b4:	2a00      	cmp	r2, #0
 800e0b6:	d07d      	beq.n	800e1b4 <rmw_create_subscription+0x1a4>
 800e0b8:	4629      	mov	r1, r5
 800e0ba:	4643      	mov	r3, r8
 800e0bc:	4648      	mov	r0, r9
 800e0be:	f007 fad5 	bl	801566c <create_topic>
 800e0c2:	61f8      	str	r0, [r7, #28]
 800e0c4:	2800      	cmp	r0, #0
 800e0c6:	d075      	beq.n	800e1b4 <rmw_create_subscription+0x1a4>
 800e0c8:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800e0cc:	f241 539c 	movw	r3, #5532	; 0x159c
 800e0d0:	2104      	movs	r1, #4
 800e0d2:	5ad0      	ldrh	r0, [r2, r3]
 800e0d4:	1c45      	adds	r5, r0, #1
 800e0d6:	52d5      	strh	r5, [r2, r3]
 800e0d8:	f001 fedc 	bl	800fe94 <uxr_object_id>
 800e0dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e0e0:	6138      	str	r0, [r7, #16]
 800e0e2:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800e0e6:	2606      	movs	r6, #6
 800e0e8:	9600      	str	r6, [sp, #0]
 800e0ea:	6811      	ldr	r1, [r2, #0]
 800e0ec:	693a      	ldr	r2, [r7, #16]
 800e0ee:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800e0f2:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800e0f6:	f001 fdab 	bl	800fc50 <uxr_buffer_create_subscriber_bin>
 800e0fa:	4602      	mov	r2, r0
 800e0fc:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e100:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800e104:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800e108:	f000 fbae 	bl	800e868 <run_xrce_session>
 800e10c:	2800      	cmp	r0, #0
 800e10e:	d04d      	beq.n	800e1ac <rmw_create_subscription+0x19c>
 800e110:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800e114:	f241 539e 	movw	r3, #5534	; 0x159e
 800e118:	4631      	mov	r1, r6
 800e11a:	5ad0      	ldrh	r0, [r2, r3]
 800e11c:	1c45      	adds	r5, r0, #1
 800e11e:	52d5      	strh	r5, [r2, r3]
 800e120:	f001 feb8 	bl	800fe94 <uxr_object_id>
 800e124:	ad08      	add	r5, sp, #32
 800e126:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e12a:	69fb      	ldr	r3, [r7, #28]
 800e12c:	6178      	str	r0, [r7, #20]
 800e12e:	4641      	mov	r1, r8
 800e130:	4628      	mov	r0, r5
 800e132:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 800e136:	9305      	str	r3, [sp, #20]
 800e138:	f000 fbb2 	bl	800e8a0 <convert_qos_profile>
 800e13c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e140:	9b05      	ldr	r3, [sp, #20]
 800e142:	9001      	str	r0, [sp, #4]
 800e144:	9603      	str	r6, [sp, #12]
 800e146:	f8ad 1008 	strh.w	r1, [sp, #8]
 800e14a:	691b      	ldr	r3, [r3, #16]
 800e14c:	9300      	str	r3, [sp, #0]
 800e14e:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 800e152:	f8db 1000 	ldr.w	r1, [fp]
 800e156:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 800e15a:	f001 fe21 	bl	800fda0 <uxr_buffer_create_datareader_bin>
 800e15e:	4602      	mov	r2, r0
 800e160:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e164:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800e168:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800e16c:	f000 fb7c 	bl	800e868 <run_xrce_session>
 800e170:	b1e0      	cbz	r0, 800e1ac <rmw_create_subscription+0x19c>
 800e172:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 800e176:	f898 3008 	ldrb.w	r3, [r8, #8]
 800e17a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e17e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e182:	2200      	movs	r2, #0
 800e184:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 800e188:	2b02      	cmp	r3, #2
 800e18a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800e18e:	bf0c      	ite	eq
 800e190:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 800e194:	f8d0 3374 	ldrne.w	r3, [r0, #884]	; 0x374
 800e198:	9307      	str	r3, [sp, #28]
 800e19a:	aa0a      	add	r2, sp, #40	; 0x28
 800e19c:	9200      	str	r2, [sp, #0]
 800e19e:	697a      	ldr	r2, [r7, #20]
 800e1a0:	6809      	ldr	r1, [r1, #0]
 800e1a2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e1a6:	f001 fea3 	bl	800fef0 <uxr_buffer_request_data>
 800e1aa:	e007      	b.n	800e1bc <rmw_create_subscription+0x1ac>
 800e1ac:	4805      	ldr	r0, [pc, #20]	; (800e1c4 <rmw_create_subscription+0x1b4>)
 800e1ae:	4639      	mov	r1, r7
 800e1b0:	f006 ffba 	bl	8015128 <put_memory>
 800e1b4:	4620      	mov	r0, r4
 800e1b6:	f000 fa1d 	bl	800e5f4 <rmw_uxrce_fini_subscription_memory>
 800e1ba:	2400      	movs	r4, #0
 800e1bc:	4620      	mov	r0, r4
 800e1be:	b00d      	add	sp, #52	; 0x34
 800e1c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1c4:	2000d12c 	.word	0x2000d12c
 800e1c8:	08019ae4 	.word	0x08019ae4
 800e1cc:	08019ab0 	.word	0x08019ab0

0800e1d0 <rmw_subscription_get_actual_qos>:
 800e1d0:	2000      	movs	r0, #0
 800e1d2:	4770      	bx	lr

0800e1d4 <rmw_destroy_subscription>:
 800e1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1d6:	b128      	cbz	r0, 800e1e4 <rmw_destroy_subscription+0x10>
 800e1d8:	4604      	mov	r4, r0
 800e1da:	6800      	ldr	r0, [r0, #0]
 800e1dc:	460d      	mov	r5, r1
 800e1de:	f000 fbc3 	bl	800e968 <is_uxrce_rmw_identifier_valid>
 800e1e2:	b910      	cbnz	r0, 800e1ea <rmw_destroy_subscription+0x16>
 800e1e4:	2401      	movs	r4, #1
 800e1e6:	4620      	mov	r0, r4
 800e1e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1ea:	6863      	ldr	r3, [r4, #4]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d0f9      	beq.n	800e1e4 <rmw_destroy_subscription+0x10>
 800e1f0:	2d00      	cmp	r5, #0
 800e1f2:	d0f7      	beq.n	800e1e4 <rmw_destroy_subscription+0x10>
 800e1f4:	6828      	ldr	r0, [r5, #0]
 800e1f6:	f000 fbb7 	bl	800e968 <is_uxrce_rmw_identifier_valid>
 800e1fa:	2800      	cmp	r0, #0
 800e1fc:	d0f2      	beq.n	800e1e4 <rmw_destroy_subscription+0x10>
 800e1fe:	686c      	ldr	r4, [r5, #4]
 800e200:	2c00      	cmp	r4, #0
 800e202:	d0ef      	beq.n	800e1e4 <rmw_destroy_subscription+0x10>
 800e204:	6a26      	ldr	r6, [r4, #32]
 800e206:	6962      	ldr	r2, [r4, #20]
 800e208:	6930      	ldr	r0, [r6, #16]
 800e20a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800e20e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e212:	6819      	ldr	r1, [r3, #0]
 800e214:	f001 fea6 	bl	800ff64 <uxr_buffer_cancel_data>
 800e218:	4602      	mov	r2, r0
 800e21a:	6930      	ldr	r0, [r6, #16]
 800e21c:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800e220:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e224:	f000 fb20 	bl	800e868 <run_xrce_session>
 800e228:	69e0      	ldr	r0, [r4, #28]
 800e22a:	f007 fa81 	bl	8015730 <destroy_topic>
 800e22e:	6a23      	ldr	r3, [r4, #32]
 800e230:	6962      	ldr	r2, [r4, #20]
 800e232:	6918      	ldr	r0, [r3, #16]
 800e234:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800e238:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e23c:	6819      	ldr	r1, [r3, #0]
 800e23e:	f001 fc27 	bl	800fa90 <uxr_buffer_delete_entity>
 800e242:	6a21      	ldr	r1, [r4, #32]
 800e244:	6922      	ldr	r2, [r4, #16]
 800e246:	4603      	mov	r3, r0
 800e248:	6908      	ldr	r0, [r1, #16]
 800e24a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e24e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e252:	6809      	ldr	r1, [r1, #0]
 800e254:	461c      	mov	r4, r3
 800e256:	f001 fc1b 	bl	800fa90 <uxr_buffer_delete_entity>
 800e25a:	4607      	mov	r7, r0
 800e25c:	6930      	ldr	r0, [r6, #16]
 800e25e:	4622      	mov	r2, r4
 800e260:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800e264:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e268:	f000 fafe 	bl	800e868 <run_xrce_session>
 800e26c:	4604      	mov	r4, r0
 800e26e:	6930      	ldr	r0, [r6, #16]
 800e270:	463a      	mov	r2, r7
 800e272:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800e276:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e27a:	f000 faf5 	bl	800e868 <run_xrce_session>
 800e27e:	b12c      	cbz	r4, 800e28c <rmw_destroy_subscription+0xb8>
 800e280:	b120      	cbz	r0, 800e28c <rmw_destroy_subscription+0xb8>
 800e282:	2400      	movs	r4, #0
 800e284:	4628      	mov	r0, r5
 800e286:	f000 f9b5 	bl	800e5f4 <rmw_uxrce_fini_subscription_memory>
 800e28a:	e7ac      	b.n	800e1e6 <rmw_destroy_subscription+0x12>
 800e28c:	2402      	movs	r4, #2
 800e28e:	e7f9      	b.n	800e284 <rmw_destroy_subscription+0xb0>

0800e290 <rmw_take_with_info>:
 800e290:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e292:	4604      	mov	r4, r0
 800e294:	6800      	ldr	r0, [r0, #0]
 800e296:	b089      	sub	sp, #36	; 0x24
 800e298:	460f      	mov	r7, r1
 800e29a:	4615      	mov	r5, r2
 800e29c:	b128      	cbz	r0, 800e2aa <rmw_take_with_info+0x1a>
 800e29e:	4b24      	ldr	r3, [pc, #144]	; (800e330 <rmw_take_with_info+0xa0>)
 800e2a0:	6819      	ldr	r1, [r3, #0]
 800e2a2:	f7f1 ff9d 	bl	80001e0 <strcmp>
 800e2a6:	2800      	cmp	r0, #0
 800e2a8:	d13e      	bne.n	800e328 <rmw_take_with_info+0x98>
 800e2aa:	b305      	cbz	r5, 800e2ee <rmw_take_with_info+0x5e>
 800e2ac:	6864      	ldr	r4, [r4, #4]
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	702b      	strb	r3, [r5, #0]
 800e2b2:	f000 fa61 	bl	800e778 <rmw_uxrce_clean_expired_static_input_buffer>
 800e2b6:	4620      	mov	r0, r4
 800e2b8:	f000 fa36 	bl	800e728 <rmw_uxrce_find_static_input_buffer_by_owner>
 800e2bc:	4606      	mov	r6, r0
 800e2be:	b1f0      	cbz	r0, 800e2fe <rmw_take_with_info+0x6e>
 800e2c0:	68c1      	ldr	r1, [r0, #12]
 800e2c2:	4668      	mov	r0, sp
 800e2c4:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 800e2c8:	3110      	adds	r1, #16
 800e2ca:	f001 fb71 	bl	800f9b0 <ucdr_init_buffer>
 800e2ce:	69a3      	ldr	r3, [r4, #24]
 800e2d0:	4639      	mov	r1, r7
 800e2d2:	68db      	ldr	r3, [r3, #12]
 800e2d4:	4668      	mov	r0, sp
 800e2d6:	4798      	blx	r3
 800e2d8:	4631      	mov	r1, r6
 800e2da:	4604      	mov	r4, r0
 800e2dc:	4815      	ldr	r0, [pc, #84]	; (800e334 <rmw_take_with_info+0xa4>)
 800e2de:	f006 ff23 	bl	8015128 <put_memory>
 800e2e2:	702c      	strb	r4, [r5, #0]
 800e2e4:	f084 0001 	eor.w	r0, r4, #1
 800e2e8:	b2c0      	uxtb	r0, r0
 800e2ea:	b009      	add	sp, #36	; 0x24
 800e2ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2ee:	6864      	ldr	r4, [r4, #4]
 800e2f0:	f000 fa42 	bl	800e778 <rmw_uxrce_clean_expired_static_input_buffer>
 800e2f4:	4620      	mov	r0, r4
 800e2f6:	f000 fa17 	bl	800e728 <rmw_uxrce_find_static_input_buffer_by_owner>
 800e2fa:	4605      	mov	r5, r0
 800e2fc:	b910      	cbnz	r0, 800e304 <rmw_take_with_info+0x74>
 800e2fe:	2001      	movs	r0, #1
 800e300:	b009      	add	sp, #36	; 0x24
 800e302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e304:	68e9      	ldr	r1, [r5, #12]
 800e306:	4668      	mov	r0, sp
 800e308:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 800e30c:	3110      	adds	r1, #16
 800e30e:	f001 fb4f 	bl	800f9b0 <ucdr_init_buffer>
 800e312:	69a3      	ldr	r3, [r4, #24]
 800e314:	4639      	mov	r1, r7
 800e316:	68db      	ldr	r3, [r3, #12]
 800e318:	4668      	mov	r0, sp
 800e31a:	4798      	blx	r3
 800e31c:	4629      	mov	r1, r5
 800e31e:	4604      	mov	r4, r0
 800e320:	4804      	ldr	r0, [pc, #16]	; (800e334 <rmw_take_with_info+0xa4>)
 800e322:	f006 ff01 	bl	8015128 <put_memory>
 800e326:	e7dd      	b.n	800e2e4 <rmw_take_with_info+0x54>
 800e328:	200c      	movs	r0, #12
 800e32a:	b009      	add	sp, #36	; 0x24
 800e32c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e32e:	bf00      	nop
 800e330:	08019fec 	.word	0x08019fec
 800e334:	20009ec0 	.word	0x20009ec0

0800e338 <rmw_uxrce_init_service_memory>:
 800e338:	b1b2      	cbz	r2, 800e368 <rmw_uxrce_init_service_memory+0x30>
 800e33a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e33c:	7a07      	ldrb	r7, [r0, #8]
 800e33e:	4605      	mov	r5, r0
 800e340:	b98f      	cbnz	r7, 800e366 <rmw_uxrce_init_service_memory+0x2e>
 800e342:	e9c0 7700 	strd	r7, r7, [r0]
 800e346:	460c      	mov	r4, r1
 800e348:	23c8      	movs	r3, #200	; 0xc8
 800e34a:	2101      	movs	r1, #1
 800e34c:	fb03 4602 	mla	r6, r3, r2, r4
 800e350:	60c3      	str	r3, [r0, #12]
 800e352:	7201      	strb	r1, [r0, #8]
 800e354:	4621      	mov	r1, r4
 800e356:	4628      	mov	r0, r5
 800e358:	f006 fee6 	bl	8015128 <put_memory>
 800e35c:	60e4      	str	r4, [r4, #12]
 800e35e:	f804 7bc8 	strb.w	r7, [r4], #200
 800e362:	42a6      	cmp	r6, r4
 800e364:	d1f6      	bne.n	800e354 <rmw_uxrce_init_service_memory+0x1c>
 800e366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e368:	4770      	bx	lr
 800e36a:	bf00      	nop

0800e36c <rmw_uxrce_init_client_memory>:
 800e36c:	b1b2      	cbz	r2, 800e39c <rmw_uxrce_init_client_memory+0x30>
 800e36e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e370:	7a07      	ldrb	r7, [r0, #8]
 800e372:	4605      	mov	r5, r0
 800e374:	b98f      	cbnz	r7, 800e39a <rmw_uxrce_init_client_memory+0x2e>
 800e376:	e9c0 7700 	strd	r7, r7, [r0]
 800e37a:	460c      	mov	r4, r1
 800e37c:	23c8      	movs	r3, #200	; 0xc8
 800e37e:	2101      	movs	r1, #1
 800e380:	fb03 4602 	mla	r6, r3, r2, r4
 800e384:	60c3      	str	r3, [r0, #12]
 800e386:	7201      	strb	r1, [r0, #8]
 800e388:	4621      	mov	r1, r4
 800e38a:	4628      	mov	r0, r5
 800e38c:	f006 fecc 	bl	8015128 <put_memory>
 800e390:	60e4      	str	r4, [r4, #12]
 800e392:	f804 7bc8 	strb.w	r7, [r4], #200
 800e396:	42a6      	cmp	r6, r4
 800e398:	d1f6      	bne.n	800e388 <rmw_uxrce_init_client_memory+0x1c>
 800e39a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e39c:	4770      	bx	lr
 800e39e:	bf00      	nop

0800e3a0 <rmw_uxrce_init_publisher_memory>:
 800e3a0:	b1b2      	cbz	r2, 800e3d0 <rmw_uxrce_init_publisher_memory+0x30>
 800e3a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3a4:	7a07      	ldrb	r7, [r0, #8]
 800e3a6:	4605      	mov	r5, r0
 800e3a8:	b98f      	cbnz	r7, 800e3ce <rmw_uxrce_init_publisher_memory+0x2e>
 800e3aa:	e9c0 7700 	strd	r7, r7, [r0]
 800e3ae:	460c      	mov	r4, r1
 800e3b0:	23d8      	movs	r3, #216	; 0xd8
 800e3b2:	2101      	movs	r1, #1
 800e3b4:	fb03 4602 	mla	r6, r3, r2, r4
 800e3b8:	60c3      	str	r3, [r0, #12]
 800e3ba:	7201      	strb	r1, [r0, #8]
 800e3bc:	4621      	mov	r1, r4
 800e3be:	4628      	mov	r0, r5
 800e3c0:	f006 feb2 	bl	8015128 <put_memory>
 800e3c4:	60e4      	str	r4, [r4, #12]
 800e3c6:	f804 7bd8 	strb.w	r7, [r4], #216
 800e3ca:	42a6      	cmp	r6, r4
 800e3cc:	d1f6      	bne.n	800e3bc <rmw_uxrce_init_publisher_memory+0x1c>
 800e3ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3d0:	4770      	bx	lr
 800e3d2:	bf00      	nop

0800e3d4 <rmw_uxrce_init_subscription_memory>:
 800e3d4:	b1b2      	cbz	r2, 800e404 <rmw_uxrce_init_subscription_memory+0x30>
 800e3d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3d8:	7a07      	ldrb	r7, [r0, #8]
 800e3da:	4605      	mov	r5, r0
 800e3dc:	b98f      	cbnz	r7, 800e402 <rmw_uxrce_init_subscription_memory+0x2e>
 800e3de:	e9c0 7700 	strd	r7, r7, [r0]
 800e3e2:	460c      	mov	r4, r1
 800e3e4:	23d0      	movs	r3, #208	; 0xd0
 800e3e6:	2101      	movs	r1, #1
 800e3e8:	fb03 4602 	mla	r6, r3, r2, r4
 800e3ec:	60c3      	str	r3, [r0, #12]
 800e3ee:	7201      	strb	r1, [r0, #8]
 800e3f0:	4621      	mov	r1, r4
 800e3f2:	4628      	mov	r0, r5
 800e3f4:	f006 fe98 	bl	8015128 <put_memory>
 800e3f8:	60e4      	str	r4, [r4, #12]
 800e3fa:	f804 7bd0 	strb.w	r7, [r4], #208
 800e3fe:	42a6      	cmp	r6, r4
 800e400:	d1f6      	bne.n	800e3f0 <rmw_uxrce_init_subscription_memory+0x1c>
 800e402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e404:	4770      	bx	lr
 800e406:	bf00      	nop

0800e408 <rmw_uxrce_init_node_memory>:
 800e408:	b1b2      	cbz	r2, 800e438 <rmw_uxrce_init_node_memory+0x30>
 800e40a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e40c:	7a07      	ldrb	r7, [r0, #8]
 800e40e:	4605      	mov	r5, r0
 800e410:	b98f      	cbnz	r7, 800e436 <rmw_uxrce_init_node_memory+0x2e>
 800e412:	e9c0 7700 	strd	r7, r7, [r0]
 800e416:	460c      	mov	r4, r1
 800e418:	23a4      	movs	r3, #164	; 0xa4
 800e41a:	2101      	movs	r1, #1
 800e41c:	fb03 4602 	mla	r6, r3, r2, r4
 800e420:	60c3      	str	r3, [r0, #12]
 800e422:	7201      	strb	r1, [r0, #8]
 800e424:	4621      	mov	r1, r4
 800e426:	4628      	mov	r0, r5
 800e428:	f006 fe7e 	bl	8015128 <put_memory>
 800e42c:	60e4      	str	r4, [r4, #12]
 800e42e:	f804 7ba4 	strb.w	r7, [r4], #164
 800e432:	42a6      	cmp	r6, r4
 800e434:	d1f6      	bne.n	800e424 <rmw_uxrce_init_node_memory+0x1c>
 800e436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e438:	4770      	bx	lr
 800e43a:	bf00      	nop

0800e43c <rmw_uxrce_init_session_memory>:
 800e43c:	b1d2      	cbz	r2, 800e474 <rmw_uxrce_init_session_memory+0x38>
 800e43e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e442:	7a07      	ldrb	r7, [r0, #8]
 800e444:	4605      	mov	r5, r0
 800e446:	b99f      	cbnz	r7, 800e470 <rmw_uxrce_init_session_memory+0x34>
 800e448:	e9c0 7700 	strd	r7, r7, [r0]
 800e44c:	f241 53a8 	movw	r3, #5544	; 0x15a8
 800e450:	460c      	mov	r4, r1
 800e452:	2101      	movs	r1, #1
 800e454:	fb03 4602 	mla	r6, r3, r2, r4
 800e458:	60c3      	str	r3, [r0, #12]
 800e45a:	4698      	mov	r8, r3
 800e45c:	7201      	strb	r1, [r0, #8]
 800e45e:	4621      	mov	r1, r4
 800e460:	4628      	mov	r0, r5
 800e462:	f006 fe61 	bl	8015128 <put_memory>
 800e466:	60e4      	str	r4, [r4, #12]
 800e468:	7027      	strb	r7, [r4, #0]
 800e46a:	4444      	add	r4, r8
 800e46c:	42a6      	cmp	r6, r4
 800e46e:	d1f6      	bne.n	800e45e <rmw_uxrce_init_session_memory+0x22>
 800e470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e474:	4770      	bx	lr
 800e476:	bf00      	nop

0800e478 <rmw_uxrce_init_topic_memory>:
 800e478:	b1c2      	cbz	r2, 800e4ac <rmw_uxrce_init_topic_memory+0x34>
 800e47a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e47c:	7a07      	ldrb	r7, [r0, #8]
 800e47e:	4606      	mov	r6, r0
 800e480:	b99f      	cbnz	r7, 800e4aa <rmw_uxrce_init_topic_memory+0x32>
 800e482:	e9c0 7700 	strd	r7, r7, [r0]
 800e486:	460c      	mov	r4, r1
 800e488:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800e48c:	2101      	movs	r1, #1
 800e48e:	231c      	movs	r3, #28
 800e490:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e494:	7201      	strb	r1, [r0, #8]
 800e496:	60c3      	str	r3, [r0, #12]
 800e498:	4621      	mov	r1, r4
 800e49a:	4630      	mov	r0, r6
 800e49c:	f006 fe44 	bl	8015128 <put_memory>
 800e4a0:	60e4      	str	r4, [r4, #12]
 800e4a2:	f804 7b1c 	strb.w	r7, [r4], #28
 800e4a6:	42a5      	cmp	r5, r4
 800e4a8:	d1f6      	bne.n	800e498 <rmw_uxrce_init_topic_memory+0x20>
 800e4aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4ac:	4770      	bx	lr
 800e4ae:	bf00      	nop

0800e4b0 <rmw_uxrce_init_static_input_buffer_memory>:
 800e4b0:	b1d2      	cbz	r2, 800e4e8 <rmw_uxrce_init_static_input_buffer_memory+0x38>
 800e4b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4b4:	7a07      	ldrb	r7, [r0, #8]
 800e4b6:	4606      	mov	r6, r0
 800e4b8:	b9af      	cbnz	r7, 800e4e6 <rmw_uxrce_init_static_input_buffer_memory+0x36>
 800e4ba:	e9c0 7700 	strd	r7, r7, [r0]
 800e4be:	460c      	mov	r4, r1
 800e4c0:	eb02 1242 	add.w	r2, r2, r2, lsl #5
 800e4c4:	2101      	movs	r1, #1
 800e4c6:	f44f 6304 	mov.w	r3, #2112	; 0x840
 800e4ca:	eb04 1582 	add.w	r5, r4, r2, lsl #6
 800e4ce:	7201      	strb	r1, [r0, #8]
 800e4d0:	60c3      	str	r3, [r0, #12]
 800e4d2:	4621      	mov	r1, r4
 800e4d4:	4630      	mov	r0, r6
 800e4d6:	f006 fe27 	bl	8015128 <put_memory>
 800e4da:	60e4      	str	r4, [r4, #12]
 800e4dc:	7027      	strb	r7, [r4, #0]
 800e4de:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 800e4e2:	42a5      	cmp	r5, r4
 800e4e4:	d1f5      	bne.n	800e4d2 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800e4e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4e8:	4770      	bx	lr
 800e4ea:	bf00      	nop

0800e4ec <rmw_uxrce_init_init_options_impl_memory>:
 800e4ec:	b1b2      	cbz	r2, 800e51c <rmw_uxrce_init_init_options_impl_memory+0x30>
 800e4ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4f0:	7a07      	ldrb	r7, [r0, #8]
 800e4f2:	4605      	mov	r5, r0
 800e4f4:	b98f      	cbnz	r7, 800e51a <rmw_uxrce_init_init_options_impl_memory+0x2e>
 800e4f6:	e9c0 7700 	strd	r7, r7, [r0]
 800e4fa:	460c      	mov	r4, r1
 800e4fc:	232c      	movs	r3, #44	; 0x2c
 800e4fe:	2101      	movs	r1, #1
 800e500:	fb03 4602 	mla	r6, r3, r2, r4
 800e504:	60c3      	str	r3, [r0, #12]
 800e506:	7201      	strb	r1, [r0, #8]
 800e508:	4621      	mov	r1, r4
 800e50a:	4628      	mov	r0, r5
 800e50c:	f006 fe0c 	bl	8015128 <put_memory>
 800e510:	60e4      	str	r4, [r4, #12]
 800e512:	f804 7b2c 	strb.w	r7, [r4], #44
 800e516:	42a6      	cmp	r6, r4
 800e518:	d1f6      	bne.n	800e508 <rmw_uxrce_init_init_options_impl_memory+0x1c>
 800e51a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e51c:	4770      	bx	lr
 800e51e:	bf00      	nop

0800e520 <rmw_uxrce_init_wait_set_memory>:
 800e520:	b1c2      	cbz	r2, 800e554 <rmw_uxrce_init_wait_set_memory+0x34>
 800e522:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e524:	7a07      	ldrb	r7, [r0, #8]
 800e526:	4606      	mov	r6, r0
 800e528:	b99f      	cbnz	r7, 800e552 <rmw_uxrce_init_wait_set_memory+0x32>
 800e52a:	e9c0 7700 	strd	r7, r7, [r0]
 800e52e:	460c      	mov	r4, r1
 800e530:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800e534:	2101      	movs	r1, #1
 800e536:	231c      	movs	r3, #28
 800e538:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e53c:	7201      	strb	r1, [r0, #8]
 800e53e:	60c3      	str	r3, [r0, #12]
 800e540:	4621      	mov	r1, r4
 800e542:	4630      	mov	r0, r6
 800e544:	f006 fdf0 	bl	8015128 <put_memory>
 800e548:	60e4      	str	r4, [r4, #12]
 800e54a:	f804 7b1c 	strb.w	r7, [r4], #28
 800e54e:	42a5      	cmp	r5, r4
 800e550:	d1f6      	bne.n	800e540 <rmw_uxrce_init_wait_set_memory+0x20>
 800e552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e554:	4770      	bx	lr
 800e556:	bf00      	nop

0800e558 <rmw_uxrce_init_guard_condition_memory>:
 800e558:	b1b2      	cbz	r2, 800e588 <rmw_uxrce_init_guard_condition_memory+0x30>
 800e55a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e55c:	7a07      	ldrb	r7, [r0, #8]
 800e55e:	4605      	mov	r5, r0
 800e560:	b98f      	cbnz	r7, 800e586 <rmw_uxrce_init_guard_condition_memory+0x2e>
 800e562:	e9c0 7700 	strd	r7, r7, [r0]
 800e566:	460c      	mov	r4, r1
 800e568:	2320      	movs	r3, #32
 800e56a:	2101      	movs	r1, #1
 800e56c:	eb04 1642 	add.w	r6, r4, r2, lsl #5
 800e570:	7201      	strb	r1, [r0, #8]
 800e572:	60c3      	str	r3, [r0, #12]
 800e574:	4621      	mov	r1, r4
 800e576:	4628      	mov	r0, r5
 800e578:	f006 fdd6 	bl	8015128 <put_memory>
 800e57c:	60e4      	str	r4, [r4, #12]
 800e57e:	f804 7b20 	strb.w	r7, [r4], #32
 800e582:	42a6      	cmp	r6, r4
 800e584:	d1f6      	bne.n	800e574 <rmw_uxrce_init_guard_condition_memory+0x1c>
 800e586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e588:	4770      	bx	lr
 800e58a:	bf00      	nop

0800e58c <rmw_uxrce_fini_session_memory>:
 800e58c:	4601      	mov	r1, r0
 800e58e:	4801      	ldr	r0, [pc, #4]	; (800e594 <rmw_uxrce_fini_session_memory+0x8>)
 800e590:	f006 bdca 	b.w	8015128 <put_memory>
 800e594:	2000d068 	.word	0x2000d068

0800e598 <rmw_uxrce_fini_node_memory>:
 800e598:	b538      	push	{r3, r4, r5, lr}
 800e59a:	4604      	mov	r4, r0
 800e59c:	6800      	ldr	r0, [r0, #0]
 800e59e:	b128      	cbz	r0, 800e5ac <rmw_uxrce_fini_node_memory+0x14>
 800e5a0:	4b07      	ldr	r3, [pc, #28]	; (800e5c0 <rmw_uxrce_fini_node_memory+0x28>)
 800e5a2:	6819      	ldr	r1, [r3, #0]
 800e5a4:	f7f1 fe1c 	bl	80001e0 <strcmp>
 800e5a8:	b940      	cbnz	r0, 800e5bc <rmw_uxrce_fini_node_memory+0x24>
 800e5aa:	6020      	str	r0, [r4, #0]
 800e5ac:	6861      	ldr	r1, [r4, #4]
 800e5ae:	b129      	cbz	r1, 800e5bc <rmw_uxrce_fini_node_memory+0x24>
 800e5b0:	2500      	movs	r5, #0
 800e5b2:	4804      	ldr	r0, [pc, #16]	; (800e5c4 <rmw_uxrce_fini_node_memory+0x2c>)
 800e5b4:	610d      	str	r5, [r1, #16]
 800e5b6:	f006 fdb7 	bl	8015128 <put_memory>
 800e5ba:	6065      	str	r5, [r4, #4]
 800e5bc:	bd38      	pop	{r3, r4, r5, pc}
 800e5be:	bf00      	nop
 800e5c0:	08019fec 	.word	0x08019fec
 800e5c4:	2000ce94 	.word	0x2000ce94

0800e5c8 <rmw_uxrce_fini_publisher_memory>:
 800e5c8:	b510      	push	{r4, lr}
 800e5ca:	4604      	mov	r4, r0
 800e5cc:	6800      	ldr	r0, [r0, #0]
 800e5ce:	b128      	cbz	r0, 800e5dc <rmw_uxrce_fini_publisher_memory+0x14>
 800e5d0:	4b06      	ldr	r3, [pc, #24]	; (800e5ec <rmw_uxrce_fini_publisher_memory+0x24>)
 800e5d2:	6819      	ldr	r1, [r3, #0]
 800e5d4:	f7f1 fe04 	bl	80001e0 <strcmp>
 800e5d8:	b938      	cbnz	r0, 800e5ea <rmw_uxrce_fini_publisher_memory+0x22>
 800e5da:	6020      	str	r0, [r4, #0]
 800e5dc:	6861      	ldr	r1, [r4, #4]
 800e5de:	b121      	cbz	r1, 800e5ea <rmw_uxrce_fini_publisher_memory+0x22>
 800e5e0:	4803      	ldr	r0, [pc, #12]	; (800e5f0 <rmw_uxrce_fini_publisher_memory+0x28>)
 800e5e2:	f006 fda1 	bl	8015128 <put_memory>
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	6063      	str	r3, [r4, #4]
 800e5ea:	bd10      	pop	{r4, pc}
 800e5ec:	08019fec 	.word	0x08019fec
 800e5f0:	20009ed0 	.word	0x20009ed0

0800e5f4 <rmw_uxrce_fini_subscription_memory>:
 800e5f4:	b510      	push	{r4, lr}
 800e5f6:	4604      	mov	r4, r0
 800e5f8:	6800      	ldr	r0, [r0, #0]
 800e5fa:	b128      	cbz	r0, 800e608 <rmw_uxrce_fini_subscription_memory+0x14>
 800e5fc:	4b06      	ldr	r3, [pc, #24]	; (800e618 <rmw_uxrce_fini_subscription_memory+0x24>)
 800e5fe:	6819      	ldr	r1, [r3, #0]
 800e600:	f7f1 fdee 	bl	80001e0 <strcmp>
 800e604:	b938      	cbnz	r0, 800e616 <rmw_uxrce_fini_subscription_memory+0x22>
 800e606:	6020      	str	r0, [r4, #0]
 800e608:	6861      	ldr	r1, [r4, #4]
 800e60a:	b121      	cbz	r1, 800e616 <rmw_uxrce_fini_subscription_memory+0x22>
 800e60c:	4803      	ldr	r0, [pc, #12]	; (800e61c <rmw_uxrce_fini_subscription_memory+0x28>)
 800e60e:	f006 fd8b 	bl	8015128 <put_memory>
 800e612:	2300      	movs	r3, #0
 800e614:	6063      	str	r3, [r4, #4]
 800e616:	bd10      	pop	{r4, pc}
 800e618:	08019fec 	.word	0x08019fec
 800e61c:	2000d12c 	.word	0x2000d12c

0800e620 <rmw_uxrce_fini_service_memory>:
 800e620:	b510      	push	{r4, lr}
 800e622:	4604      	mov	r4, r0
 800e624:	6800      	ldr	r0, [r0, #0]
 800e626:	b128      	cbz	r0, 800e634 <rmw_uxrce_fini_service_memory+0x14>
 800e628:	4b06      	ldr	r3, [pc, #24]	; (800e644 <rmw_uxrce_fini_service_memory+0x24>)
 800e62a:	6819      	ldr	r1, [r3, #0]
 800e62c:	f7f1 fdd8 	bl	80001e0 <strcmp>
 800e630:	b938      	cbnz	r0, 800e642 <rmw_uxrce_fini_service_memory+0x22>
 800e632:	6020      	str	r0, [r4, #0]
 800e634:	6861      	ldr	r1, [r4, #4]
 800e636:	b121      	cbz	r1, 800e642 <rmw_uxrce_fini_service_memory+0x22>
 800e638:	4803      	ldr	r0, [pc, #12]	; (800e648 <rmw_uxrce_fini_service_memory+0x28>)
 800e63a:	f006 fd75 	bl	8015128 <put_memory>
 800e63e:	2300      	movs	r3, #0
 800e640:	6063      	str	r3, [r4, #4]
 800e642:	bd10      	pop	{r4, pc}
 800e644:	08019fec 	.word	0x08019fec
 800e648:	2000d11c 	.word	0x2000d11c

0800e64c <rmw_uxrce_fini_client_memory>:
 800e64c:	b510      	push	{r4, lr}
 800e64e:	4604      	mov	r4, r0
 800e650:	6800      	ldr	r0, [r0, #0]
 800e652:	b128      	cbz	r0, 800e660 <rmw_uxrce_fini_client_memory+0x14>
 800e654:	4b06      	ldr	r3, [pc, #24]	; (800e670 <rmw_uxrce_fini_client_memory+0x24>)
 800e656:	6819      	ldr	r1, [r3, #0]
 800e658:	f7f1 fdc2 	bl	80001e0 <strcmp>
 800e65c:	b938      	cbnz	r0, 800e66e <rmw_uxrce_fini_client_memory+0x22>
 800e65e:	6020      	str	r0, [r4, #0]
 800e660:	6861      	ldr	r1, [r4, #4]
 800e662:	b121      	cbz	r1, 800e66e <rmw_uxrce_fini_client_memory+0x22>
 800e664:	4803      	ldr	r0, [pc, #12]	; (800e674 <rmw_uxrce_fini_client_memory+0x28>)
 800e666:	f006 fd5f 	bl	8015128 <put_memory>
 800e66a:	2300      	movs	r3, #0
 800e66c:	6063      	str	r3, [r4, #4]
 800e66e:	bd10      	pop	{r4, pc}
 800e670:	08019fec 	.word	0x08019fec
 800e674:	2000a750 	.word	0x2000a750

0800e678 <rmw_uxrce_fini_topic_memory>:
 800e678:	b510      	push	{r4, lr}
 800e67a:	4601      	mov	r1, r0
 800e67c:	4604      	mov	r4, r0
 800e67e:	4803      	ldr	r0, [pc, #12]	; (800e68c <rmw_uxrce_fini_topic_memory+0x14>)
 800e680:	f006 fd52 	bl	8015128 <put_memory>
 800e684:	2300      	movs	r3, #0
 800e686:	61a3      	str	r3, [r4, #24]
 800e688:	bd10      	pop	{r4, pc}
 800e68a:	bf00      	nop
 800e68c:	2000d058 	.word	0x2000d058

0800e690 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800e690:	b082      	sub	sp, #8
 800e692:	b4f0      	push	{r4, r5, r6, r7}
 800e694:	4923      	ldr	r1, [pc, #140]	; (800e724 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 800e696:	ac04      	add	r4, sp, #16
 800e698:	e884 000c 	stmia.w	r4, {r2, r3}
 800e69c:	680d      	ldr	r5, [r1, #0]
 800e69e:	9c05      	ldr	r4, [sp, #20]
 800e6a0:	2d00      	cmp	r5, #0
 800e6a2:	d03d      	beq.n	800e720 <rmw_uxrce_get_static_input_buffer_for_entity+0x90>
 800e6a4:	462b      	mov	r3, r5
 800e6a6:	2100      	movs	r1, #0
 800e6a8:	68da      	ldr	r2, [r3, #12]
 800e6aa:	689b      	ldr	r3, [r3, #8]
 800e6ac:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 800e6b0:	4290      	cmp	r0, r2
 800e6b2:	bf08      	it	eq
 800e6b4:	3101      	addeq	r1, #1
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d1f6      	bne.n	800e6a8 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800e6ba:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800e6be:	2b02      	cmp	r3, #2
 800e6c0:	d026      	beq.n	800e710 <rmw_uxrce_get_static_input_buffer_for_entity+0x80>
 800e6c2:	d906      	bls.n	800e6d2 <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 800e6c4:	2b03      	cmp	r3, #3
 800e6c6:	d004      	beq.n	800e6d2 <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 800e6c8:	2100      	movs	r1, #0
 800e6ca:	bcf0      	pop	{r4, r5, r6, r7}
 800e6cc:	4608      	mov	r0, r1
 800e6ce:	b002      	add	sp, #8
 800e6d0:	4770      	bx	lr
 800e6d2:	b304      	cbz	r4, 800e716 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800e6d4:	428c      	cmp	r4, r1
 800e6d6:	d81e      	bhi.n	800e716 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800e6d8:	2d00      	cmp	r5, #0
 800e6da:	d0f5      	beq.n	800e6c8 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800e6dc:	2100      	movs	r1, #0
 800e6de:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800e6e2:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 800e6e6:	e002      	b.n	800e6ee <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 800e6e8:	68ad      	ldr	r5, [r5, #8]
 800e6ea:	2d00      	cmp	r5, #0
 800e6ec:	d0ed      	beq.n	800e6ca <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800e6ee:	68eb      	ldr	r3, [r5, #12]
 800e6f0:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 800e6f4:	4290      	cmp	r0, r2
 800e6f6:	d1f7      	bne.n	800e6e8 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800e6f8:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800e6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e700:	42b2      	cmp	r2, r6
 800e702:	eb73 0407 	sbcs.w	r4, r3, r7
 800e706:	daef      	bge.n	800e6e8 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800e708:	4616      	mov	r6, r2
 800e70a:	461f      	mov	r7, r3
 800e70c:	4629      	mov	r1, r5
 800e70e:	e7eb      	b.n	800e6e8 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800e710:	b10c      	cbz	r4, 800e716 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800e712:	428c      	cmp	r4, r1
 800e714:	d9d8      	bls.n	800e6c8 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800e716:	bcf0      	pop	{r4, r5, r6, r7}
 800e718:	4802      	ldr	r0, [pc, #8]	; (800e724 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 800e71a:	b002      	add	sp, #8
 800e71c:	f006 bcf4 	b.w	8015108 <get_memory>
 800e720:	4629      	mov	r1, r5
 800e722:	e7ca      	b.n	800e6ba <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800e724:	20009ec0 	.word	0x20009ec0

0800e728 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800e728:	4b12      	ldr	r3, [pc, #72]	; (800e774 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	b1fb      	cbz	r3, 800e76e <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 800e72e:	b4f0      	push	{r4, r5, r6, r7}
 800e730:	f04f 0c00 	mov.w	ip, #0
 800e734:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e738:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 800e73c:	e001      	b.n	800e742 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800e73e:	689b      	ldr	r3, [r3, #8]
 800e740:	b193      	cbz	r3, 800e768 <rmw_uxrce_find_static_input_buffer_by_owner+0x40>
 800e742:	68da      	ldr	r2, [r3, #12]
 800e744:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 800e748:	4288      	cmp	r0, r1
 800e74a:	d1f8      	bne.n	800e73e <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800e74c:	f602 0218 	addw	r2, r2, #2072	; 0x818
 800e750:	e9d2 6700 	ldrd	r6, r7, [r2]
 800e754:	42a6      	cmp	r6, r4
 800e756:	eb77 0205 	sbcs.w	r2, r7, r5
 800e75a:	daf0      	bge.n	800e73e <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800e75c:	469c      	mov	ip, r3
 800e75e:	689b      	ldr	r3, [r3, #8]
 800e760:	4634      	mov	r4, r6
 800e762:	463d      	mov	r5, r7
 800e764:	2b00      	cmp	r3, #0
 800e766:	d1ec      	bne.n	800e742 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800e768:	4660      	mov	r0, ip
 800e76a:	bcf0      	pop	{r4, r5, r6, r7}
 800e76c:	4770      	bx	lr
 800e76e:	4618      	mov	r0, r3
 800e770:	4770      	bx	lr
 800e772:	bf00      	nop
 800e774:	20009ec0 	.word	0x20009ec0

0800e778 <rmw_uxrce_clean_expired_static_input_buffer>:
 800e778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e77c:	4e38      	ldr	r6, [pc, #224]	; (800e860 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>)
 800e77e:	f8d6 8000 	ldr.w	r8, [r6]
 800e782:	b083      	sub	sp, #12
 800e784:	f007 fc0a 	bl	8015f9c <rmw_uros_epoch_nanos>
 800e788:	f1b8 0f00 	cmp.w	r8, #0
 800e78c:	d05f      	beq.n	800e84e <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 800e78e:	46b1      	mov	r9, r6
 800e790:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800e794:	f896 3820 	ldrb.w	r3, [r6, #2080]	; 0x820
 800e798:	2b04      	cmp	r3, #4
 800e79a:	4682      	mov	sl, r0
 800e79c:	468b      	mov	fp, r1
 800e79e:	d02d      	beq.n	800e7fc <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 800e7a0:	2b05      	cmp	r3, #5
 800e7a2:	d041      	beq.n	800e828 <rmw_uxrce_clean_expired_static_input_buffer+0xb0>
 800e7a4:	2b03      	cmp	r3, #3
 800e7a6:	d029      	beq.n	800e7fc <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 800e7a8:	2200      	movs	r2, #0
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	e9cd 2300 	strd	r2, r3, [sp]
 800e7b0:	2001      	movs	r0, #1
 800e7b2:	2100      	movs	r1, #0
 800e7b4:	9b00      	ldr	r3, [sp, #0]
 800e7b6:	f606 0618 	addw	r6, r6, #2072	; 0x818
 800e7ba:	e9d6 6700 	ldrd	r6, r7, [r6]
 800e7be:	18c2      	adds	r2, r0, r3
 800e7c0:	9b01      	ldr	r3, [sp, #4]
 800e7c2:	eb41 0303 	adc.w	r3, r1, r3
 800e7c6:	1994      	adds	r4, r2, r6
 800e7c8:	eb43 0507 	adc.w	r5, r3, r7
 800e7cc:	4554      	cmp	r4, sl
 800e7ce:	eb75 020b 	sbcs.w	r2, r5, fp
 800e7d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e7d6:	db03      	blt.n	800e7e0 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800e7d8:	45b2      	cmp	sl, r6
 800e7da:	eb7b 0207 	sbcs.w	r2, fp, r7
 800e7de:	da05      	bge.n	800e7ec <rmw_uxrce_clean_expired_static_input_buffer+0x74>
 800e7e0:	4641      	mov	r1, r8
 800e7e2:	4648      	mov	r0, r9
 800e7e4:	9300      	str	r3, [sp, #0]
 800e7e6:	f006 fc9f 	bl	8015128 <put_memory>
 800e7ea:	9b00      	ldr	r3, [sp, #0]
 800e7ec:	b37b      	cbz	r3, 800e84e <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 800e7ee:	4698      	mov	r8, r3
 800e7f0:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800e7f4:	f896 3820 	ldrb.w	r3, [r6, #2080]	; 0x820
 800e7f8:	2b04      	cmp	r3, #4
 800e7fa:	d1d1      	bne.n	800e7a0 <rmw_uxrce_clean_expired_static_input_buffer+0x28>
 800e7fc:	f8d6 1814 	ldr.w	r1, [r6, #2068]	; 0x814
 800e800:	e9d1 2310 	ldrd	r2, r3, [r1, #64]	; 0x40
 800e804:	e9cd 2300 	strd	r2, r3, [sp]
 800e808:	4313      	orrs	r3, r2
 800e80a:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	; 0x48
 800e80e:	d015      	beq.n	800e83c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800e810:	9a01      	ldr	r2, [sp, #4]
 800e812:	4b14      	ldr	r3, [pc, #80]	; (800e864 <rmw_uxrce_clean_expired_static_input_buffer+0xec>)
 800e814:	fb03 f702 	mul.w	r7, r3, r2
 800e818:	9a00      	ldr	r2, [sp, #0]
 800e81a:	fba2 2303 	umull	r2, r3, r2, r3
 800e81e:	e9cd 2300 	strd	r2, r3, [sp]
 800e822:	443b      	add	r3, r7
 800e824:	9301      	str	r3, [sp, #4]
 800e826:	e7c5      	b.n	800e7b4 <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 800e828:	f8d6 1814 	ldr.w	r1, [r6, #2068]	; 0x814
 800e82c:	e9d1 2312 	ldrd	r2, r3, [r1, #72]	; 0x48
 800e830:	e9cd 2300 	strd	r2, r3, [sp]
 800e834:	4313      	orrs	r3, r2
 800e836:	e9d1 0114 	ldrd	r0, r1, [r1, #80]	; 0x50
 800e83a:	d1e9      	bne.n	800e810 <rmw_uxrce_clean_expired_static_input_buffer+0x98>
 800e83c:	ea50 0301 	orrs.w	r3, r0, r1
 800e840:	bf02      	ittt	eq
 800e842:	a305      	addeq	r3, pc, #20	; (adr r3, 800e858 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>)
 800e844:	e9d3 2300 	ldrdeq	r2, r3, [r3]
 800e848:	e9cd 2300 	strdeq	r2, r3, [sp]
 800e84c:	e7b2      	b.n	800e7b4 <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 800e84e:	b003      	add	sp, #12
 800e850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e854:	f3af 8000 	nop.w
 800e858:	fc23ac00 	.word	0xfc23ac00
 800e85c:	00000006 	.word	0x00000006
 800e860:	20009ec0 	.word	0x20009ec0
 800e864:	3b9aca00 	.word	0x3b9aca00

0800e868 <run_xrce_session>:
 800e868:	b510      	push	{r4, lr}
 800e86a:	788c      	ldrb	r4, [r1, #2]
 800e86c:	b086      	sub	sp, #24
 800e86e:	2c01      	cmp	r4, #1
 800e870:	f8ad 200e 	strh.w	r2, [sp, #14]
 800e874:	d00c      	beq.n	800e890 <run_xrce_session+0x28>
 800e876:	4619      	mov	r1, r3
 800e878:	2301      	movs	r3, #1
 800e87a:	9300      	str	r3, [sp, #0]
 800e87c:	f10d 020e 	add.w	r2, sp, #14
 800e880:	f10d 0317 	add.w	r3, sp, #23
 800e884:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e888:	f002 f958 	bl	8010b3c <uxr_run_session_until_all_status>
 800e88c:	b006      	add	sp, #24
 800e88e:	bd10      	pop	{r4, pc}
 800e890:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e894:	f001 fd70 	bl	8010378 <uxr_flash_output_streams>
 800e898:	4620      	mov	r0, r4
 800e89a:	b006      	add	sp, #24
 800e89c:	bd10      	pop	{r4, pc}
 800e89e:	bf00      	nop

0800e8a0 <convert_qos_profile>:
 800e8a0:	b430      	push	{r4, r5}
 800e8a2:	7a0d      	ldrb	r5, [r1, #8]
 800e8a4:	780c      	ldrb	r4, [r1, #0]
 800e8a6:	7a4a      	ldrb	r2, [r1, #9]
 800e8a8:	8889      	ldrh	r1, [r1, #4]
 800e8aa:	8081      	strh	r1, [r0, #4]
 800e8ac:	f1a5 0502 	sub.w	r5, r5, #2
 800e8b0:	f1a4 0402 	sub.w	r4, r4, #2
 800e8b4:	2a02      	cmp	r2, #2
 800e8b6:	fab5 f585 	clz	r5, r5
 800e8ba:	fab4 f484 	clz	r4, r4
 800e8be:	ea4f 1555 	mov.w	r5, r5, lsr #5
 800e8c2:	ea4f 1454 	mov.w	r4, r4, lsr #5
 800e8c6:	bf18      	it	ne
 800e8c8:	2200      	movne	r2, #0
 800e8ca:	7045      	strb	r5, [r0, #1]
 800e8cc:	7084      	strb	r4, [r0, #2]
 800e8ce:	7002      	strb	r2, [r0, #0]
 800e8d0:	bc30      	pop	{r4, r5}
 800e8d2:	4770      	bx	lr

0800e8d4 <generate_type_name>:
 800e8d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	700b      	strb	r3, [r1, #0]
 800e8da:	6803      	ldr	r3, [r0, #0]
 800e8dc:	b087      	sub	sp, #28
 800e8de:	4614      	mov	r4, r2
 800e8e0:	b1d3      	cbz	r3, 800e918 <generate_type_name+0x44>
 800e8e2:	4d0f      	ldr	r5, [pc, #60]	; (800e920 <generate_type_name+0x4c>)
 800e8e4:	462f      	mov	r7, r5
 800e8e6:	4a0f      	ldr	r2, [pc, #60]	; (800e924 <generate_type_name+0x50>)
 800e8e8:	4e0f      	ldr	r6, [pc, #60]	; (800e928 <generate_type_name+0x54>)
 800e8ea:	6840      	ldr	r0, [r0, #4]
 800e8ec:	9004      	str	r0, [sp, #16]
 800e8ee:	e9cd 6201 	strd	r6, r2, [sp, #4]
 800e8f2:	4608      	mov	r0, r1
 800e8f4:	9205      	str	r2, [sp, #20]
 800e8f6:	9503      	str	r5, [sp, #12]
 800e8f8:	4a0c      	ldr	r2, [pc, #48]	; (800e92c <generate_type_name+0x58>)
 800e8fa:	9700      	str	r7, [sp, #0]
 800e8fc:	4621      	mov	r1, r4
 800e8fe:	f009 fd27 	bl	8018350 <sniprintf>
 800e902:	2800      	cmp	r0, #0
 800e904:	db05      	blt.n	800e912 <generate_type_name+0x3e>
 800e906:	4284      	cmp	r4, r0
 800e908:	bfd4      	ite	le
 800e90a:	2000      	movle	r0, #0
 800e90c:	2001      	movgt	r0, #1
 800e90e:	b007      	add	sp, #28
 800e910:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e912:	2000      	movs	r0, #0
 800e914:	b007      	add	sp, #28
 800e916:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e918:	4b05      	ldr	r3, [pc, #20]	; (800e930 <generate_type_name+0x5c>)
 800e91a:	4d01      	ldr	r5, [pc, #4]	; (800e920 <generate_type_name+0x4c>)
 800e91c:	461f      	mov	r7, r3
 800e91e:	e7e2      	b.n	800e8e6 <generate_type_name+0x12>
 800e920:	08019ad4 	.word	0x08019ad4
 800e924:	08019ae8 	.word	0x08019ae8
 800e928:	08019aec 	.word	0x08019aec
 800e92c:	08019ad8 	.word	0x08019ad8
 800e930:	08019dc4 	.word	0x08019dc4

0800e934 <generate_topic_name>:
 800e934:	b510      	push	{r4, lr}
 800e936:	b082      	sub	sp, #8
 800e938:	4b09      	ldr	r3, [pc, #36]	; (800e960 <generate_topic_name+0x2c>)
 800e93a:	9000      	str	r0, [sp, #0]
 800e93c:	4614      	mov	r4, r2
 800e93e:	4608      	mov	r0, r1
 800e940:	4611      	mov	r1, r2
 800e942:	4a08      	ldr	r2, [pc, #32]	; (800e964 <generate_topic_name+0x30>)
 800e944:	f009 fd04 	bl	8018350 <sniprintf>
 800e948:	2800      	cmp	r0, #0
 800e94a:	db05      	blt.n	800e958 <generate_topic_name+0x24>
 800e94c:	4284      	cmp	r4, r0
 800e94e:	bfd4      	ite	le
 800e950:	2000      	movle	r0, #0
 800e952:	2001      	movgt	r0, #1
 800e954:	b002      	add	sp, #8
 800e956:	bd10      	pop	{r4, pc}
 800e958:	2000      	movs	r0, #0
 800e95a:	b002      	add	sp, #8
 800e95c:	bd10      	pop	{r4, pc}
 800e95e:	bf00      	nop
 800e960:	08019af8 	.word	0x08019af8
 800e964:	08019af0 	.word	0x08019af0

0800e968 <is_uxrce_rmw_identifier_valid>:
 800e968:	b510      	push	{r4, lr}
 800e96a:	4604      	mov	r4, r0
 800e96c:	b140      	cbz	r0, 800e980 <is_uxrce_rmw_identifier_valid+0x18>
 800e96e:	f006 fc33 	bl	80151d8 <rmw_get_implementation_identifier>
 800e972:	4601      	mov	r1, r0
 800e974:	4620      	mov	r0, r4
 800e976:	f7f1 fc33 	bl	80001e0 <strcmp>
 800e97a:	fab0 f080 	clz	r0, r0
 800e97e:	0940      	lsrs	r0, r0, #5
 800e980:	bd10      	pop	{r4, pc}
 800e982:	bf00      	nop

0800e984 <get_message_typesupport_handle>:
 800e984:	6883      	ldr	r3, [r0, #8]
 800e986:	4718      	bx	r3

0800e988 <get_message_typesupport_handle_function>:
 800e988:	b510      	push	{r4, lr}
 800e98a:	4604      	mov	r4, r0
 800e98c:	6800      	ldr	r0, [r0, #0]
 800e98e:	f7f1 fc27 	bl	80001e0 <strcmp>
 800e992:	2800      	cmp	r0, #0
 800e994:	bf0c      	ite	eq
 800e996:	4620      	moveq	r0, r4
 800e998:	2000      	movne	r0, #0
 800e99a:	bd10      	pop	{r4, pc}

0800e99c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800e99c:	f000 b82a 	b.w	800e9f4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>

0800e9a0 <_Int32__max_serialized_size>:
 800e9a0:	b508      	push	{r3, lr}
 800e9a2:	2104      	movs	r1, #4
 800e9a4:	2000      	movs	r0, #0
 800e9a6:	f001 f807 	bl	800f9b8 <ucdr_alignment>
 800e9aa:	3004      	adds	r0, #4
 800e9ac:	bd08      	pop	{r3, pc}
 800e9ae:	bf00      	nop

0800e9b0 <_Int32__cdr_deserialize>:
 800e9b0:	b109      	cbz	r1, 800e9b6 <_Int32__cdr_deserialize+0x6>
 800e9b2:	f000 bf1b 	b.w	800f7ec <ucdr_deserialize_int32_t>
 800e9b6:	4608      	mov	r0, r1
 800e9b8:	4770      	bx	lr
 800e9ba:	bf00      	nop

0800e9bc <get_serialized_size_std_msgs__msg__Int32>:
 800e9bc:	b130      	cbz	r0, 800e9cc <get_serialized_size_std_msgs__msg__Int32+0x10>
 800e9be:	b508      	push	{r3, lr}
 800e9c0:	4608      	mov	r0, r1
 800e9c2:	2104      	movs	r1, #4
 800e9c4:	f000 fff8 	bl	800f9b8 <ucdr_alignment>
 800e9c8:	3004      	adds	r0, #4
 800e9ca:	bd08      	pop	{r3, pc}
 800e9cc:	4770      	bx	lr
 800e9ce:	bf00      	nop

0800e9d0 <_Int32__cdr_serialize>:
 800e9d0:	460a      	mov	r2, r1
 800e9d2:	b118      	cbz	r0, 800e9dc <_Int32__cdr_serialize+0xc>
 800e9d4:	6801      	ldr	r1, [r0, #0]
 800e9d6:	4610      	mov	r0, r2
 800e9d8:	f000 be70 	b.w	800f6bc <ucdr_serialize_int32_t>
 800e9dc:	4770      	bx	lr
 800e9de:	bf00      	nop

0800e9e0 <_Int32__get_serialized_size>:
 800e9e0:	b130      	cbz	r0, 800e9f0 <_Int32__get_serialized_size+0x10>
 800e9e2:	b508      	push	{r3, lr}
 800e9e4:	2104      	movs	r1, #4
 800e9e6:	2000      	movs	r0, #0
 800e9e8:	f000 ffe6 	bl	800f9b8 <ucdr_alignment>
 800e9ec:	3004      	adds	r0, #4
 800e9ee:	bd08      	pop	{r3, pc}
 800e9f0:	4770      	bx	lr
 800e9f2:	bf00      	nop

0800e9f4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800e9f4:	4800      	ldr	r0, [pc, #0]	; (800e9f8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 800e9f6:	4770      	bx	lr
 800e9f8:	20000030 	.word	0x20000030

0800e9fc <ucdr_serialize_bool>:
 800e9fc:	b538      	push	{r3, r4, r5, lr}
 800e9fe:	460d      	mov	r5, r1
 800ea00:	2101      	movs	r1, #1
 800ea02:	4604      	mov	r4, r0
 800ea04:	f000 ff8e 	bl	800f924 <ucdr_check_final_buffer_behavior>
 800ea08:	b148      	cbz	r0, 800ea1e <ucdr_serialize_bool+0x22>
 800ea0a:	68a3      	ldr	r3, [r4, #8]
 800ea0c:	701d      	strb	r5, [r3, #0]
 800ea0e:	68a2      	ldr	r2, [r4, #8]
 800ea10:	6923      	ldr	r3, [r4, #16]
 800ea12:	3201      	adds	r2, #1
 800ea14:	3301      	adds	r3, #1
 800ea16:	2101      	movs	r1, #1
 800ea18:	60a2      	str	r2, [r4, #8]
 800ea1a:	6123      	str	r3, [r4, #16]
 800ea1c:	7561      	strb	r1, [r4, #21]
 800ea1e:	7da0      	ldrb	r0, [r4, #22]
 800ea20:	f080 0001 	eor.w	r0, r0, #1
 800ea24:	bd38      	pop	{r3, r4, r5, pc}
 800ea26:	bf00      	nop

0800ea28 <ucdr_deserialize_bool>:
 800ea28:	b538      	push	{r3, r4, r5, lr}
 800ea2a:	460d      	mov	r5, r1
 800ea2c:	2101      	movs	r1, #1
 800ea2e:	4604      	mov	r4, r0
 800ea30:	f000 ff78 	bl	800f924 <ucdr_check_final_buffer_behavior>
 800ea34:	b168      	cbz	r0, 800ea52 <ucdr_deserialize_bool+0x2a>
 800ea36:	68a2      	ldr	r2, [r4, #8]
 800ea38:	6923      	ldr	r3, [r4, #16]
 800ea3a:	f812 1b01 	ldrb.w	r1, [r2], #1
 800ea3e:	3900      	subs	r1, #0
 800ea40:	f103 0301 	add.w	r3, r3, #1
 800ea44:	bf18      	it	ne
 800ea46:	2101      	movne	r1, #1
 800ea48:	2001      	movs	r0, #1
 800ea4a:	7029      	strb	r1, [r5, #0]
 800ea4c:	60a2      	str	r2, [r4, #8]
 800ea4e:	6123      	str	r3, [r4, #16]
 800ea50:	7560      	strb	r0, [r4, #21]
 800ea52:	7da0      	ldrb	r0, [r4, #22]
 800ea54:	f080 0001 	eor.w	r0, r0, #1
 800ea58:	bd38      	pop	{r3, r4, r5, pc}
 800ea5a:	bf00      	nop

0800ea5c <ucdr_serialize_uint8_t>:
 800ea5c:	b538      	push	{r3, r4, r5, lr}
 800ea5e:	460d      	mov	r5, r1
 800ea60:	2101      	movs	r1, #1
 800ea62:	4604      	mov	r4, r0
 800ea64:	f000 ff5e 	bl	800f924 <ucdr_check_final_buffer_behavior>
 800ea68:	b148      	cbz	r0, 800ea7e <ucdr_serialize_uint8_t+0x22>
 800ea6a:	68a3      	ldr	r3, [r4, #8]
 800ea6c:	701d      	strb	r5, [r3, #0]
 800ea6e:	68a2      	ldr	r2, [r4, #8]
 800ea70:	6923      	ldr	r3, [r4, #16]
 800ea72:	3201      	adds	r2, #1
 800ea74:	3301      	adds	r3, #1
 800ea76:	2101      	movs	r1, #1
 800ea78:	60a2      	str	r2, [r4, #8]
 800ea7a:	6123      	str	r3, [r4, #16]
 800ea7c:	7561      	strb	r1, [r4, #21]
 800ea7e:	7da0      	ldrb	r0, [r4, #22]
 800ea80:	f080 0001 	eor.w	r0, r0, #1
 800ea84:	bd38      	pop	{r3, r4, r5, pc}
 800ea86:	bf00      	nop

0800ea88 <ucdr_deserialize_uint8_t>:
 800ea88:	b538      	push	{r3, r4, r5, lr}
 800ea8a:	460d      	mov	r5, r1
 800ea8c:	2101      	movs	r1, #1
 800ea8e:	4604      	mov	r4, r0
 800ea90:	f000 ff48 	bl	800f924 <ucdr_check_final_buffer_behavior>
 800ea94:	b150      	cbz	r0, 800eaac <ucdr_deserialize_uint8_t+0x24>
 800ea96:	68a3      	ldr	r3, [r4, #8]
 800ea98:	781b      	ldrb	r3, [r3, #0]
 800ea9a:	702b      	strb	r3, [r5, #0]
 800ea9c:	68a2      	ldr	r2, [r4, #8]
 800ea9e:	6923      	ldr	r3, [r4, #16]
 800eaa0:	3201      	adds	r2, #1
 800eaa2:	3301      	adds	r3, #1
 800eaa4:	2101      	movs	r1, #1
 800eaa6:	60a2      	str	r2, [r4, #8]
 800eaa8:	6123      	str	r3, [r4, #16]
 800eaaa:	7561      	strb	r1, [r4, #21]
 800eaac:	7da0      	ldrb	r0, [r4, #22]
 800eaae:	f080 0001 	eor.w	r0, r0, #1
 800eab2:	bd38      	pop	{r3, r4, r5, pc}

0800eab4 <ucdr_serialize_uint16_t>:
 800eab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eab8:	b082      	sub	sp, #8
 800eaba:	460b      	mov	r3, r1
 800eabc:	2102      	movs	r1, #2
 800eabe:	4604      	mov	r4, r0
 800eac0:	f8ad 3006 	strh.w	r3, [sp, #6]
 800eac4:	f000 ff80 	bl	800f9c8 <ucdr_buffer_alignment>
 800eac8:	4601      	mov	r1, r0
 800eaca:	4620      	mov	r0, r4
 800eacc:	7d67      	ldrb	r7, [r4, #21]
 800eace:	f000 ffbf 	bl	800fa50 <ucdr_advance_buffer>
 800ead2:	4620      	mov	r0, r4
 800ead4:	2102      	movs	r1, #2
 800ead6:	f000 ff19 	bl	800f90c <ucdr_check_buffer_available_for>
 800eada:	bb78      	cbnz	r0, 800eb3c <ucdr_serialize_uint16_t+0x88>
 800eadc:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 800eae0:	42b5      	cmp	r5, r6
 800eae2:	d926      	bls.n	800eb32 <ucdr_serialize_uint16_t+0x7e>
 800eae4:	6922      	ldr	r2, [r4, #16]
 800eae6:	60a5      	str	r5, [r4, #8]
 800eae8:	1bad      	subs	r5, r5, r6
 800eaea:	442a      	add	r2, r5
 800eaec:	f1c5 0802 	rsb	r8, r5, #2
 800eaf0:	6122      	str	r2, [r4, #16]
 800eaf2:	4641      	mov	r1, r8
 800eaf4:	4620      	mov	r0, r4
 800eaf6:	f000 ff15 	bl	800f924 <ucdr_check_final_buffer_behavior>
 800eafa:	2800      	cmp	r0, #0
 800eafc:	d03b      	beq.n	800eb76 <ucdr_serialize_uint16_t+0xc2>
 800eafe:	7d23      	ldrb	r3, [r4, #20]
 800eb00:	2b01      	cmp	r3, #1
 800eb02:	d04a      	beq.n	800eb9a <ucdr_serialize_uint16_t+0xe6>
 800eb04:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800eb08:	7033      	strb	r3, [r6, #0]
 800eb0a:	2d00      	cmp	r5, #0
 800eb0c:	d040      	beq.n	800eb90 <ucdr_serialize_uint16_t+0xdc>
 800eb0e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800eb12:	7073      	strb	r3, [r6, #1]
 800eb14:	6923      	ldr	r3, [r4, #16]
 800eb16:	68a2      	ldr	r2, [r4, #8]
 800eb18:	7da0      	ldrb	r0, [r4, #22]
 800eb1a:	3302      	adds	r3, #2
 800eb1c:	1b5b      	subs	r3, r3, r5
 800eb1e:	4442      	add	r2, r8
 800eb20:	2102      	movs	r1, #2
 800eb22:	f080 0001 	eor.w	r0, r0, #1
 800eb26:	6123      	str	r3, [r4, #16]
 800eb28:	60a2      	str	r2, [r4, #8]
 800eb2a:	7561      	strb	r1, [r4, #21]
 800eb2c:	b002      	add	sp, #8
 800eb2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb32:	2102      	movs	r1, #2
 800eb34:	4620      	mov	r0, r4
 800eb36:	f000 fef5 	bl	800f924 <ucdr_check_final_buffer_behavior>
 800eb3a:	b190      	cbz	r0, 800eb62 <ucdr_serialize_uint16_t+0xae>
 800eb3c:	7d23      	ldrb	r3, [r4, #20]
 800eb3e:	2b01      	cmp	r3, #1
 800eb40:	68a3      	ldr	r3, [r4, #8]
 800eb42:	d014      	beq.n	800eb6e <ucdr_serialize_uint16_t+0xba>
 800eb44:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800eb48:	701a      	strb	r2, [r3, #0]
 800eb4a:	68a3      	ldr	r3, [r4, #8]
 800eb4c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800eb50:	705a      	strb	r2, [r3, #1]
 800eb52:	68a2      	ldr	r2, [r4, #8]
 800eb54:	6923      	ldr	r3, [r4, #16]
 800eb56:	3202      	adds	r2, #2
 800eb58:	3302      	adds	r3, #2
 800eb5a:	2102      	movs	r1, #2
 800eb5c:	60a2      	str	r2, [r4, #8]
 800eb5e:	6123      	str	r3, [r4, #16]
 800eb60:	7561      	strb	r1, [r4, #21]
 800eb62:	7da0      	ldrb	r0, [r4, #22]
 800eb64:	f080 0001 	eor.w	r0, r0, #1
 800eb68:	b002      	add	sp, #8
 800eb6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb6e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800eb72:	801a      	strh	r2, [r3, #0]
 800eb74:	e7ed      	b.n	800eb52 <ucdr_serialize_uint16_t+0x9e>
 800eb76:	68a2      	ldr	r2, [r4, #8]
 800eb78:	6923      	ldr	r3, [r4, #16]
 800eb7a:	7da0      	ldrb	r0, [r4, #22]
 800eb7c:	7567      	strb	r7, [r4, #21]
 800eb7e:	1b52      	subs	r2, r2, r5
 800eb80:	1b5b      	subs	r3, r3, r5
 800eb82:	f080 0001 	eor.w	r0, r0, #1
 800eb86:	60a2      	str	r2, [r4, #8]
 800eb88:	6123      	str	r3, [r4, #16]
 800eb8a:	b002      	add	sp, #8
 800eb8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb90:	68a3      	ldr	r3, [r4, #8]
 800eb92:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800eb96:	701a      	strb	r2, [r3, #0]
 800eb98:	e7bc      	b.n	800eb14 <ucdr_serialize_uint16_t+0x60>
 800eb9a:	4630      	mov	r0, r6
 800eb9c:	f10d 0606 	add.w	r6, sp, #6
 800eba0:	4631      	mov	r1, r6
 800eba2:	462a      	mov	r2, r5
 800eba4:	f009 fe53 	bl	801884e <memcpy>
 800eba8:	68a0      	ldr	r0, [r4, #8]
 800ebaa:	4642      	mov	r2, r8
 800ebac:	1971      	adds	r1, r6, r5
 800ebae:	f009 fe4e 	bl	801884e <memcpy>
 800ebb2:	e7af      	b.n	800eb14 <ucdr_serialize_uint16_t+0x60>

0800ebb4 <ucdr_serialize_endian_uint16_t>:
 800ebb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ebb8:	b083      	sub	sp, #12
 800ebba:	460d      	mov	r5, r1
 800ebbc:	2102      	movs	r1, #2
 800ebbe:	4604      	mov	r4, r0
 800ebc0:	f8ad 2006 	strh.w	r2, [sp, #6]
 800ebc4:	f000 ff00 	bl	800f9c8 <ucdr_buffer_alignment>
 800ebc8:	4601      	mov	r1, r0
 800ebca:	4620      	mov	r0, r4
 800ebcc:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ebd0:	f000 ff3e 	bl	800fa50 <ucdr_advance_buffer>
 800ebd4:	4620      	mov	r0, r4
 800ebd6:	2102      	movs	r1, #2
 800ebd8:	f000 fe98 	bl	800f90c <ucdr_check_buffer_available_for>
 800ebdc:	bb70      	cbnz	r0, 800ec3c <ucdr_serialize_endian_uint16_t+0x88>
 800ebde:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ebe2:	42be      	cmp	r6, r7
 800ebe4:	d925      	bls.n	800ec32 <ucdr_serialize_endian_uint16_t+0x7e>
 800ebe6:	6922      	ldr	r2, [r4, #16]
 800ebe8:	60a6      	str	r6, [r4, #8]
 800ebea:	1bf6      	subs	r6, r6, r7
 800ebec:	4432      	add	r2, r6
 800ebee:	f1c6 0902 	rsb	r9, r6, #2
 800ebf2:	6122      	str	r2, [r4, #16]
 800ebf4:	4649      	mov	r1, r9
 800ebf6:	4620      	mov	r0, r4
 800ebf8:	f000 fe94 	bl	800f924 <ucdr_check_final_buffer_behavior>
 800ebfc:	2800      	cmp	r0, #0
 800ebfe:	d039      	beq.n	800ec74 <ucdr_serialize_endian_uint16_t+0xc0>
 800ec00:	2d01      	cmp	r5, #1
 800ec02:	d04a      	beq.n	800ec9a <ucdr_serialize_endian_uint16_t+0xe6>
 800ec04:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ec08:	703b      	strb	r3, [r7, #0]
 800ec0a:	2e00      	cmp	r6, #0
 800ec0c:	d040      	beq.n	800ec90 <ucdr_serialize_endian_uint16_t+0xdc>
 800ec0e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ec12:	707b      	strb	r3, [r7, #1]
 800ec14:	6923      	ldr	r3, [r4, #16]
 800ec16:	68a2      	ldr	r2, [r4, #8]
 800ec18:	7da0      	ldrb	r0, [r4, #22]
 800ec1a:	3302      	adds	r3, #2
 800ec1c:	1b9b      	subs	r3, r3, r6
 800ec1e:	444a      	add	r2, r9
 800ec20:	2102      	movs	r1, #2
 800ec22:	f080 0001 	eor.w	r0, r0, #1
 800ec26:	6123      	str	r3, [r4, #16]
 800ec28:	60a2      	str	r2, [r4, #8]
 800ec2a:	7561      	strb	r1, [r4, #21]
 800ec2c:	b003      	add	sp, #12
 800ec2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec32:	2102      	movs	r1, #2
 800ec34:	4620      	mov	r0, r4
 800ec36:	f000 fe75 	bl	800f924 <ucdr_check_final_buffer_behavior>
 800ec3a:	b188      	cbz	r0, 800ec60 <ucdr_serialize_endian_uint16_t+0xac>
 800ec3c:	2d01      	cmp	r5, #1
 800ec3e:	68a3      	ldr	r3, [r4, #8]
 800ec40:	d014      	beq.n	800ec6c <ucdr_serialize_endian_uint16_t+0xb8>
 800ec42:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ec46:	701a      	strb	r2, [r3, #0]
 800ec48:	68a3      	ldr	r3, [r4, #8]
 800ec4a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ec4e:	705a      	strb	r2, [r3, #1]
 800ec50:	68a2      	ldr	r2, [r4, #8]
 800ec52:	6923      	ldr	r3, [r4, #16]
 800ec54:	3202      	adds	r2, #2
 800ec56:	3302      	adds	r3, #2
 800ec58:	2102      	movs	r1, #2
 800ec5a:	60a2      	str	r2, [r4, #8]
 800ec5c:	6123      	str	r3, [r4, #16]
 800ec5e:	7561      	strb	r1, [r4, #21]
 800ec60:	7da0      	ldrb	r0, [r4, #22]
 800ec62:	f080 0001 	eor.w	r0, r0, #1
 800ec66:	b003      	add	sp, #12
 800ec68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec6c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ec70:	801a      	strh	r2, [r3, #0]
 800ec72:	e7ed      	b.n	800ec50 <ucdr_serialize_endian_uint16_t+0x9c>
 800ec74:	68a2      	ldr	r2, [r4, #8]
 800ec76:	6923      	ldr	r3, [r4, #16]
 800ec78:	7da0      	ldrb	r0, [r4, #22]
 800ec7a:	f884 8015 	strb.w	r8, [r4, #21]
 800ec7e:	1b92      	subs	r2, r2, r6
 800ec80:	1b9b      	subs	r3, r3, r6
 800ec82:	f080 0001 	eor.w	r0, r0, #1
 800ec86:	60a2      	str	r2, [r4, #8]
 800ec88:	6123      	str	r3, [r4, #16]
 800ec8a:	b003      	add	sp, #12
 800ec8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec90:	68a3      	ldr	r3, [r4, #8]
 800ec92:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ec96:	701a      	strb	r2, [r3, #0]
 800ec98:	e7bc      	b.n	800ec14 <ucdr_serialize_endian_uint16_t+0x60>
 800ec9a:	f10d 0506 	add.w	r5, sp, #6
 800ec9e:	4629      	mov	r1, r5
 800eca0:	4632      	mov	r2, r6
 800eca2:	4638      	mov	r0, r7
 800eca4:	f009 fdd3 	bl	801884e <memcpy>
 800eca8:	68a0      	ldr	r0, [r4, #8]
 800ecaa:	464a      	mov	r2, r9
 800ecac:	19a9      	adds	r1, r5, r6
 800ecae:	f009 fdce 	bl	801884e <memcpy>
 800ecb2:	e7af      	b.n	800ec14 <ucdr_serialize_endian_uint16_t+0x60>

0800ecb4 <ucdr_deserialize_uint16_t>:
 800ecb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ecb8:	460d      	mov	r5, r1
 800ecba:	2102      	movs	r1, #2
 800ecbc:	4604      	mov	r4, r0
 800ecbe:	f000 fe83 	bl	800f9c8 <ucdr_buffer_alignment>
 800ecc2:	4601      	mov	r1, r0
 800ecc4:	4620      	mov	r0, r4
 800ecc6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ecca:	f000 fec1 	bl	800fa50 <ucdr_advance_buffer>
 800ecce:	4620      	mov	r0, r4
 800ecd0:	2102      	movs	r1, #2
 800ecd2:	f000 fe1b 	bl	800f90c <ucdr_check_buffer_available_for>
 800ecd6:	bb60      	cbnz	r0, 800ed32 <ucdr_deserialize_uint16_t+0x7e>
 800ecd8:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ecdc:	42be      	cmp	r6, r7
 800ecde:	d923      	bls.n	800ed28 <ucdr_deserialize_uint16_t+0x74>
 800ece0:	6922      	ldr	r2, [r4, #16]
 800ece2:	60a6      	str	r6, [r4, #8]
 800ece4:	1bf6      	subs	r6, r6, r7
 800ece6:	4432      	add	r2, r6
 800ece8:	f1c6 0902 	rsb	r9, r6, #2
 800ecec:	6122      	str	r2, [r4, #16]
 800ecee:	4649      	mov	r1, r9
 800ecf0:	4620      	mov	r0, r4
 800ecf2:	f000 fe17 	bl	800f924 <ucdr_check_final_buffer_behavior>
 800ecf6:	2800      	cmp	r0, #0
 800ecf8:	d034      	beq.n	800ed64 <ucdr_deserialize_uint16_t+0xb0>
 800ecfa:	7d23      	ldrb	r3, [r4, #20]
 800ecfc:	2b01      	cmp	r3, #1
 800ecfe:	d042      	beq.n	800ed86 <ucdr_deserialize_uint16_t+0xd2>
 800ed00:	787b      	ldrb	r3, [r7, #1]
 800ed02:	702b      	strb	r3, [r5, #0]
 800ed04:	2e00      	cmp	r6, #0
 800ed06:	d03a      	beq.n	800ed7e <ucdr_deserialize_uint16_t+0xca>
 800ed08:	783b      	ldrb	r3, [r7, #0]
 800ed0a:	706b      	strb	r3, [r5, #1]
 800ed0c:	6923      	ldr	r3, [r4, #16]
 800ed0e:	68a2      	ldr	r2, [r4, #8]
 800ed10:	7da0      	ldrb	r0, [r4, #22]
 800ed12:	2102      	movs	r1, #2
 800ed14:	3302      	adds	r3, #2
 800ed16:	1b9b      	subs	r3, r3, r6
 800ed18:	444a      	add	r2, r9
 800ed1a:	7561      	strb	r1, [r4, #21]
 800ed1c:	6123      	str	r3, [r4, #16]
 800ed1e:	60a2      	str	r2, [r4, #8]
 800ed20:	f080 0001 	eor.w	r0, r0, #1
 800ed24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed28:	2102      	movs	r1, #2
 800ed2a:	4620      	mov	r0, r4
 800ed2c:	f000 fdfa 	bl	800f924 <ucdr_check_final_buffer_behavior>
 800ed30:	b180      	cbz	r0, 800ed54 <ucdr_deserialize_uint16_t+0xa0>
 800ed32:	7d23      	ldrb	r3, [r4, #20]
 800ed34:	2b01      	cmp	r3, #1
 800ed36:	68a3      	ldr	r3, [r4, #8]
 800ed38:	d011      	beq.n	800ed5e <ucdr_deserialize_uint16_t+0xaa>
 800ed3a:	785b      	ldrb	r3, [r3, #1]
 800ed3c:	702b      	strb	r3, [r5, #0]
 800ed3e:	68a3      	ldr	r3, [r4, #8]
 800ed40:	781b      	ldrb	r3, [r3, #0]
 800ed42:	706b      	strb	r3, [r5, #1]
 800ed44:	68a2      	ldr	r2, [r4, #8]
 800ed46:	6923      	ldr	r3, [r4, #16]
 800ed48:	3202      	adds	r2, #2
 800ed4a:	3302      	adds	r3, #2
 800ed4c:	2102      	movs	r1, #2
 800ed4e:	60a2      	str	r2, [r4, #8]
 800ed50:	6123      	str	r3, [r4, #16]
 800ed52:	7561      	strb	r1, [r4, #21]
 800ed54:	7da0      	ldrb	r0, [r4, #22]
 800ed56:	f080 0001 	eor.w	r0, r0, #1
 800ed5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed5e:	881b      	ldrh	r3, [r3, #0]
 800ed60:	802b      	strh	r3, [r5, #0]
 800ed62:	e7ef      	b.n	800ed44 <ucdr_deserialize_uint16_t+0x90>
 800ed64:	68a2      	ldr	r2, [r4, #8]
 800ed66:	6923      	ldr	r3, [r4, #16]
 800ed68:	7da0      	ldrb	r0, [r4, #22]
 800ed6a:	f884 8015 	strb.w	r8, [r4, #21]
 800ed6e:	1b92      	subs	r2, r2, r6
 800ed70:	1b9b      	subs	r3, r3, r6
 800ed72:	60a2      	str	r2, [r4, #8]
 800ed74:	6123      	str	r3, [r4, #16]
 800ed76:	f080 0001 	eor.w	r0, r0, #1
 800ed7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed7e:	68a3      	ldr	r3, [r4, #8]
 800ed80:	781b      	ldrb	r3, [r3, #0]
 800ed82:	706b      	strb	r3, [r5, #1]
 800ed84:	e7c2      	b.n	800ed0c <ucdr_deserialize_uint16_t+0x58>
 800ed86:	4639      	mov	r1, r7
 800ed88:	4632      	mov	r2, r6
 800ed8a:	4628      	mov	r0, r5
 800ed8c:	f009 fd5f 	bl	801884e <memcpy>
 800ed90:	68a1      	ldr	r1, [r4, #8]
 800ed92:	464a      	mov	r2, r9
 800ed94:	19a8      	adds	r0, r5, r6
 800ed96:	f009 fd5a 	bl	801884e <memcpy>
 800ed9a:	e7b7      	b.n	800ed0c <ucdr_deserialize_uint16_t+0x58>

0800ed9c <ucdr_deserialize_endian_uint16_t>:
 800ed9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eda0:	460e      	mov	r6, r1
 800eda2:	2102      	movs	r1, #2
 800eda4:	4604      	mov	r4, r0
 800eda6:	4615      	mov	r5, r2
 800eda8:	f000 fe0e 	bl	800f9c8 <ucdr_buffer_alignment>
 800edac:	4601      	mov	r1, r0
 800edae:	4620      	mov	r0, r4
 800edb0:	f894 9015 	ldrb.w	r9, [r4, #21]
 800edb4:	f000 fe4c 	bl	800fa50 <ucdr_advance_buffer>
 800edb8:	4620      	mov	r0, r4
 800edba:	2102      	movs	r1, #2
 800edbc:	f000 fda6 	bl	800f90c <ucdr_check_buffer_available_for>
 800edc0:	bb70      	cbnz	r0, 800ee20 <ucdr_deserialize_endian_uint16_t+0x84>
 800edc2:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800edc6:	4547      	cmp	r7, r8
 800edc8:	d925      	bls.n	800ee16 <ucdr_deserialize_endian_uint16_t+0x7a>
 800edca:	6922      	ldr	r2, [r4, #16]
 800edcc:	60a7      	str	r7, [r4, #8]
 800edce:	eba7 0708 	sub.w	r7, r7, r8
 800edd2:	443a      	add	r2, r7
 800edd4:	f1c7 0a02 	rsb	sl, r7, #2
 800edd8:	6122      	str	r2, [r4, #16]
 800edda:	4651      	mov	r1, sl
 800eddc:	4620      	mov	r0, r4
 800edde:	f000 fda1 	bl	800f924 <ucdr_check_final_buffer_behavior>
 800ede2:	2800      	cmp	r0, #0
 800ede4:	d034      	beq.n	800ee50 <ucdr_deserialize_endian_uint16_t+0xb4>
 800ede6:	2e01      	cmp	r6, #1
 800ede8:	d043      	beq.n	800ee72 <ucdr_deserialize_endian_uint16_t+0xd6>
 800edea:	f898 3001 	ldrb.w	r3, [r8, #1]
 800edee:	702b      	strb	r3, [r5, #0]
 800edf0:	2f00      	cmp	r7, #0
 800edf2:	d03a      	beq.n	800ee6a <ucdr_deserialize_endian_uint16_t+0xce>
 800edf4:	f898 3000 	ldrb.w	r3, [r8]
 800edf8:	706b      	strb	r3, [r5, #1]
 800edfa:	6923      	ldr	r3, [r4, #16]
 800edfc:	68a2      	ldr	r2, [r4, #8]
 800edfe:	7da0      	ldrb	r0, [r4, #22]
 800ee00:	2102      	movs	r1, #2
 800ee02:	3302      	adds	r3, #2
 800ee04:	1bdb      	subs	r3, r3, r7
 800ee06:	4452      	add	r2, sl
 800ee08:	7561      	strb	r1, [r4, #21]
 800ee0a:	6123      	str	r3, [r4, #16]
 800ee0c:	60a2      	str	r2, [r4, #8]
 800ee0e:	f080 0001 	eor.w	r0, r0, #1
 800ee12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee16:	2102      	movs	r1, #2
 800ee18:	4620      	mov	r0, r4
 800ee1a:	f000 fd83 	bl	800f924 <ucdr_check_final_buffer_behavior>
 800ee1e:	b178      	cbz	r0, 800ee40 <ucdr_deserialize_endian_uint16_t+0xa4>
 800ee20:	2e01      	cmp	r6, #1
 800ee22:	68a3      	ldr	r3, [r4, #8]
 800ee24:	d011      	beq.n	800ee4a <ucdr_deserialize_endian_uint16_t+0xae>
 800ee26:	785b      	ldrb	r3, [r3, #1]
 800ee28:	702b      	strb	r3, [r5, #0]
 800ee2a:	68a3      	ldr	r3, [r4, #8]
 800ee2c:	781b      	ldrb	r3, [r3, #0]
 800ee2e:	706b      	strb	r3, [r5, #1]
 800ee30:	68a2      	ldr	r2, [r4, #8]
 800ee32:	6923      	ldr	r3, [r4, #16]
 800ee34:	3202      	adds	r2, #2
 800ee36:	3302      	adds	r3, #2
 800ee38:	2102      	movs	r1, #2
 800ee3a:	60a2      	str	r2, [r4, #8]
 800ee3c:	6123      	str	r3, [r4, #16]
 800ee3e:	7561      	strb	r1, [r4, #21]
 800ee40:	7da0      	ldrb	r0, [r4, #22]
 800ee42:	f080 0001 	eor.w	r0, r0, #1
 800ee46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee4a:	881b      	ldrh	r3, [r3, #0]
 800ee4c:	802b      	strh	r3, [r5, #0]
 800ee4e:	e7ef      	b.n	800ee30 <ucdr_deserialize_endian_uint16_t+0x94>
 800ee50:	68a2      	ldr	r2, [r4, #8]
 800ee52:	6923      	ldr	r3, [r4, #16]
 800ee54:	7da0      	ldrb	r0, [r4, #22]
 800ee56:	f884 9015 	strb.w	r9, [r4, #21]
 800ee5a:	1bd2      	subs	r2, r2, r7
 800ee5c:	1bdb      	subs	r3, r3, r7
 800ee5e:	60a2      	str	r2, [r4, #8]
 800ee60:	6123      	str	r3, [r4, #16]
 800ee62:	f080 0001 	eor.w	r0, r0, #1
 800ee66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee6a:	68a3      	ldr	r3, [r4, #8]
 800ee6c:	781b      	ldrb	r3, [r3, #0]
 800ee6e:	706b      	strb	r3, [r5, #1]
 800ee70:	e7c3      	b.n	800edfa <ucdr_deserialize_endian_uint16_t+0x5e>
 800ee72:	4641      	mov	r1, r8
 800ee74:	463a      	mov	r2, r7
 800ee76:	4628      	mov	r0, r5
 800ee78:	f009 fce9 	bl	801884e <memcpy>
 800ee7c:	68a1      	ldr	r1, [r4, #8]
 800ee7e:	4652      	mov	r2, sl
 800ee80:	19e8      	adds	r0, r5, r7
 800ee82:	f009 fce4 	bl	801884e <memcpy>
 800ee86:	e7b8      	b.n	800edfa <ucdr_deserialize_endian_uint16_t+0x5e>

0800ee88 <ucdr_serialize_uint32_t>:
 800ee88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee8c:	b082      	sub	sp, #8
 800ee8e:	4604      	mov	r4, r0
 800ee90:	9101      	str	r1, [sp, #4]
 800ee92:	2104      	movs	r1, #4
 800ee94:	f000 fd98 	bl	800f9c8 <ucdr_buffer_alignment>
 800ee98:	4601      	mov	r1, r0
 800ee9a:	4620      	mov	r0, r4
 800ee9c:	7d67      	ldrb	r7, [r4, #21]
 800ee9e:	f000 fdd7 	bl	800fa50 <ucdr_advance_buffer>
 800eea2:	4620      	mov	r0, r4
 800eea4:	2104      	movs	r1, #4
 800eea6:	f000 fd31 	bl	800f90c <ucdr_check_buffer_available_for>
 800eeaa:	2800      	cmp	r0, #0
 800eeac:	d139      	bne.n	800ef22 <ucdr_serialize_uint32_t+0x9a>
 800eeae:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 800eeb2:	42ae      	cmp	r6, r5
 800eeb4:	d930      	bls.n	800ef18 <ucdr_serialize_uint32_t+0x90>
 800eeb6:	6922      	ldr	r2, [r4, #16]
 800eeb8:	60a6      	str	r6, [r4, #8]
 800eeba:	1b76      	subs	r6, r6, r5
 800eebc:	4432      	add	r2, r6
 800eebe:	f1c6 0804 	rsb	r8, r6, #4
 800eec2:	6122      	str	r2, [r4, #16]
 800eec4:	4641      	mov	r1, r8
 800eec6:	4620      	mov	r0, r4
 800eec8:	f000 fd2c 	bl	800f924 <ucdr_check_final_buffer_behavior>
 800eecc:	2800      	cmp	r0, #0
 800eece:	d04c      	beq.n	800ef6a <ucdr_serialize_uint32_t+0xe2>
 800eed0:	7d23      	ldrb	r3, [r4, #20]
 800eed2:	2b01      	cmp	r3, #1
 800eed4:	d063      	beq.n	800ef9e <ucdr_serialize_uint32_t+0x116>
 800eed6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800eeda:	702b      	strb	r3, [r5, #0]
 800eedc:	2e00      	cmp	r6, #0
 800eede:	d051      	beq.n	800ef84 <ucdr_serialize_uint32_t+0xfc>
 800eee0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800eee4:	706b      	strb	r3, [r5, #1]
 800eee6:	2e01      	cmp	r6, #1
 800eee8:	d050      	beq.n	800ef8c <ucdr_serialize_uint32_t+0x104>
 800eeea:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800eeee:	70ab      	strb	r3, [r5, #2]
 800eef0:	2e02      	cmp	r6, #2
 800eef2:	d04f      	beq.n	800ef94 <ucdr_serialize_uint32_t+0x10c>
 800eef4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800eef8:	70eb      	strb	r3, [r5, #3]
 800eefa:	6923      	ldr	r3, [r4, #16]
 800eefc:	68a2      	ldr	r2, [r4, #8]
 800eefe:	7da0      	ldrb	r0, [r4, #22]
 800ef00:	3304      	adds	r3, #4
 800ef02:	1b9b      	subs	r3, r3, r6
 800ef04:	4442      	add	r2, r8
 800ef06:	2104      	movs	r1, #4
 800ef08:	f080 0001 	eor.w	r0, r0, #1
 800ef0c:	6123      	str	r3, [r4, #16]
 800ef0e:	60a2      	str	r2, [r4, #8]
 800ef10:	7561      	strb	r1, [r4, #21]
 800ef12:	b002      	add	sp, #8
 800ef14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef18:	2104      	movs	r1, #4
 800ef1a:	4620      	mov	r0, r4
 800ef1c:	f000 fd02 	bl	800f924 <ucdr_check_final_buffer_behavior>
 800ef20:	b1d0      	cbz	r0, 800ef58 <ucdr_serialize_uint32_t+0xd0>
 800ef22:	7d23      	ldrb	r3, [r4, #20]
 800ef24:	2b01      	cmp	r3, #1
 800ef26:	68a3      	ldr	r3, [r4, #8]
 800ef28:	d01c      	beq.n	800ef64 <ucdr_serialize_uint32_t+0xdc>
 800ef2a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ef2e:	701a      	strb	r2, [r3, #0]
 800ef30:	68a3      	ldr	r3, [r4, #8]
 800ef32:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ef36:	705a      	strb	r2, [r3, #1]
 800ef38:	68a3      	ldr	r3, [r4, #8]
 800ef3a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ef3e:	709a      	strb	r2, [r3, #2]
 800ef40:	68a3      	ldr	r3, [r4, #8]
 800ef42:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ef46:	70da      	strb	r2, [r3, #3]
 800ef48:	68a2      	ldr	r2, [r4, #8]
 800ef4a:	6923      	ldr	r3, [r4, #16]
 800ef4c:	3204      	adds	r2, #4
 800ef4e:	3304      	adds	r3, #4
 800ef50:	2104      	movs	r1, #4
 800ef52:	60a2      	str	r2, [r4, #8]
 800ef54:	6123      	str	r3, [r4, #16]
 800ef56:	7561      	strb	r1, [r4, #21]
 800ef58:	7da0      	ldrb	r0, [r4, #22]
 800ef5a:	f080 0001 	eor.w	r0, r0, #1
 800ef5e:	b002      	add	sp, #8
 800ef60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef64:	9a01      	ldr	r2, [sp, #4]
 800ef66:	601a      	str	r2, [r3, #0]
 800ef68:	e7ee      	b.n	800ef48 <ucdr_serialize_uint32_t+0xc0>
 800ef6a:	68a2      	ldr	r2, [r4, #8]
 800ef6c:	6923      	ldr	r3, [r4, #16]
 800ef6e:	7da0      	ldrb	r0, [r4, #22]
 800ef70:	7567      	strb	r7, [r4, #21]
 800ef72:	1b92      	subs	r2, r2, r6
 800ef74:	1b9b      	subs	r3, r3, r6
 800ef76:	f080 0001 	eor.w	r0, r0, #1
 800ef7a:	60a2      	str	r2, [r4, #8]
 800ef7c:	6123      	str	r3, [r4, #16]
 800ef7e:	b002      	add	sp, #8
 800ef80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef84:	68a3      	ldr	r3, [r4, #8]
 800ef86:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ef8a:	701a      	strb	r2, [r3, #0]
 800ef8c:	68a3      	ldr	r3, [r4, #8]
 800ef8e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ef92:	701a      	strb	r2, [r3, #0]
 800ef94:	68a3      	ldr	r3, [r4, #8]
 800ef96:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ef9a:	701a      	strb	r2, [r3, #0]
 800ef9c:	e7ad      	b.n	800eefa <ucdr_serialize_uint32_t+0x72>
 800ef9e:	4628      	mov	r0, r5
 800efa0:	ad01      	add	r5, sp, #4
 800efa2:	4629      	mov	r1, r5
 800efa4:	4632      	mov	r2, r6
 800efa6:	f009 fc52 	bl	801884e <memcpy>
 800efaa:	68a0      	ldr	r0, [r4, #8]
 800efac:	4642      	mov	r2, r8
 800efae:	19a9      	adds	r1, r5, r6
 800efb0:	f009 fc4d 	bl	801884e <memcpy>
 800efb4:	e7a1      	b.n	800eefa <ucdr_serialize_uint32_t+0x72>
 800efb6:	bf00      	nop

0800efb8 <ucdr_serialize_endian_uint32_t>:
 800efb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800efbc:	b083      	sub	sp, #12
 800efbe:	460d      	mov	r5, r1
 800efc0:	2104      	movs	r1, #4
 800efc2:	4604      	mov	r4, r0
 800efc4:	9201      	str	r2, [sp, #4]
 800efc6:	f000 fcff 	bl	800f9c8 <ucdr_buffer_alignment>
 800efca:	4601      	mov	r1, r0
 800efcc:	4620      	mov	r0, r4
 800efce:	f894 8015 	ldrb.w	r8, [r4, #21]
 800efd2:	f000 fd3d 	bl	800fa50 <ucdr_advance_buffer>
 800efd6:	4620      	mov	r0, r4
 800efd8:	2104      	movs	r1, #4
 800efda:	f000 fc97 	bl	800f90c <ucdr_check_buffer_available_for>
 800efde:	2800      	cmp	r0, #0
 800efe0:	d138      	bne.n	800f054 <ucdr_serialize_endian_uint32_t+0x9c>
 800efe2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800efe6:	42b7      	cmp	r7, r6
 800efe8:	d92f      	bls.n	800f04a <ucdr_serialize_endian_uint32_t+0x92>
 800efea:	6922      	ldr	r2, [r4, #16]
 800efec:	60a7      	str	r7, [r4, #8]
 800efee:	1bbf      	subs	r7, r7, r6
 800eff0:	443a      	add	r2, r7
 800eff2:	f1c7 0904 	rsb	r9, r7, #4
 800eff6:	6122      	str	r2, [r4, #16]
 800eff8:	4649      	mov	r1, r9
 800effa:	4620      	mov	r0, r4
 800effc:	f000 fc92 	bl	800f924 <ucdr_check_final_buffer_behavior>
 800f000:	2800      	cmp	r0, #0
 800f002:	d04a      	beq.n	800f09a <ucdr_serialize_endian_uint32_t+0xe2>
 800f004:	2d01      	cmp	r5, #1
 800f006:	d063      	beq.n	800f0d0 <ucdr_serialize_endian_uint32_t+0x118>
 800f008:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f00c:	7033      	strb	r3, [r6, #0]
 800f00e:	2f00      	cmp	r7, #0
 800f010:	d051      	beq.n	800f0b6 <ucdr_serialize_endian_uint32_t+0xfe>
 800f012:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f016:	7073      	strb	r3, [r6, #1]
 800f018:	2f01      	cmp	r7, #1
 800f01a:	d050      	beq.n	800f0be <ucdr_serialize_endian_uint32_t+0x106>
 800f01c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f020:	70b3      	strb	r3, [r6, #2]
 800f022:	2f02      	cmp	r7, #2
 800f024:	d04f      	beq.n	800f0c6 <ucdr_serialize_endian_uint32_t+0x10e>
 800f026:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f02a:	70f3      	strb	r3, [r6, #3]
 800f02c:	6923      	ldr	r3, [r4, #16]
 800f02e:	68a2      	ldr	r2, [r4, #8]
 800f030:	7da0      	ldrb	r0, [r4, #22]
 800f032:	3304      	adds	r3, #4
 800f034:	1bdb      	subs	r3, r3, r7
 800f036:	444a      	add	r2, r9
 800f038:	2104      	movs	r1, #4
 800f03a:	f080 0001 	eor.w	r0, r0, #1
 800f03e:	6123      	str	r3, [r4, #16]
 800f040:	60a2      	str	r2, [r4, #8]
 800f042:	7561      	strb	r1, [r4, #21]
 800f044:	b003      	add	sp, #12
 800f046:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f04a:	2104      	movs	r1, #4
 800f04c:	4620      	mov	r0, r4
 800f04e:	f000 fc69 	bl	800f924 <ucdr_check_final_buffer_behavior>
 800f052:	b1c8      	cbz	r0, 800f088 <ucdr_serialize_endian_uint32_t+0xd0>
 800f054:	2d01      	cmp	r5, #1
 800f056:	68a3      	ldr	r3, [r4, #8]
 800f058:	d01c      	beq.n	800f094 <ucdr_serialize_endian_uint32_t+0xdc>
 800f05a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f05e:	701a      	strb	r2, [r3, #0]
 800f060:	68a3      	ldr	r3, [r4, #8]
 800f062:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f066:	705a      	strb	r2, [r3, #1]
 800f068:	68a3      	ldr	r3, [r4, #8]
 800f06a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f06e:	709a      	strb	r2, [r3, #2]
 800f070:	68a3      	ldr	r3, [r4, #8]
 800f072:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f076:	70da      	strb	r2, [r3, #3]
 800f078:	68a2      	ldr	r2, [r4, #8]
 800f07a:	6923      	ldr	r3, [r4, #16]
 800f07c:	3204      	adds	r2, #4
 800f07e:	3304      	adds	r3, #4
 800f080:	2104      	movs	r1, #4
 800f082:	60a2      	str	r2, [r4, #8]
 800f084:	6123      	str	r3, [r4, #16]
 800f086:	7561      	strb	r1, [r4, #21]
 800f088:	7da0      	ldrb	r0, [r4, #22]
 800f08a:	f080 0001 	eor.w	r0, r0, #1
 800f08e:	b003      	add	sp, #12
 800f090:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f094:	9a01      	ldr	r2, [sp, #4]
 800f096:	601a      	str	r2, [r3, #0]
 800f098:	e7ee      	b.n	800f078 <ucdr_serialize_endian_uint32_t+0xc0>
 800f09a:	68a2      	ldr	r2, [r4, #8]
 800f09c:	6923      	ldr	r3, [r4, #16]
 800f09e:	7da0      	ldrb	r0, [r4, #22]
 800f0a0:	f884 8015 	strb.w	r8, [r4, #21]
 800f0a4:	1bd2      	subs	r2, r2, r7
 800f0a6:	1bdb      	subs	r3, r3, r7
 800f0a8:	f080 0001 	eor.w	r0, r0, #1
 800f0ac:	60a2      	str	r2, [r4, #8]
 800f0ae:	6123      	str	r3, [r4, #16]
 800f0b0:	b003      	add	sp, #12
 800f0b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f0b6:	68a3      	ldr	r3, [r4, #8]
 800f0b8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f0bc:	701a      	strb	r2, [r3, #0]
 800f0be:	68a3      	ldr	r3, [r4, #8]
 800f0c0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f0c4:	701a      	strb	r2, [r3, #0]
 800f0c6:	68a3      	ldr	r3, [r4, #8]
 800f0c8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f0cc:	701a      	strb	r2, [r3, #0]
 800f0ce:	e7ad      	b.n	800f02c <ucdr_serialize_endian_uint32_t+0x74>
 800f0d0:	ad01      	add	r5, sp, #4
 800f0d2:	4629      	mov	r1, r5
 800f0d4:	463a      	mov	r2, r7
 800f0d6:	4630      	mov	r0, r6
 800f0d8:	f009 fbb9 	bl	801884e <memcpy>
 800f0dc:	68a0      	ldr	r0, [r4, #8]
 800f0de:	464a      	mov	r2, r9
 800f0e0:	19e9      	adds	r1, r5, r7
 800f0e2:	f009 fbb4 	bl	801884e <memcpy>
 800f0e6:	e7a1      	b.n	800f02c <ucdr_serialize_endian_uint32_t+0x74>

0800f0e8 <ucdr_deserialize_uint32_t>:
 800f0e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0ec:	460d      	mov	r5, r1
 800f0ee:	2104      	movs	r1, #4
 800f0f0:	4604      	mov	r4, r0
 800f0f2:	f000 fc69 	bl	800f9c8 <ucdr_buffer_alignment>
 800f0f6:	4601      	mov	r1, r0
 800f0f8:	4620      	mov	r0, r4
 800f0fa:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f0fe:	f000 fca7 	bl	800fa50 <ucdr_advance_buffer>
 800f102:	4620      	mov	r0, r4
 800f104:	2104      	movs	r1, #4
 800f106:	f000 fc01 	bl	800f90c <ucdr_check_buffer_available_for>
 800f10a:	2800      	cmp	r0, #0
 800f10c:	d138      	bne.n	800f180 <ucdr_deserialize_uint32_t+0x98>
 800f10e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f112:	42b7      	cmp	r7, r6
 800f114:	d92f      	bls.n	800f176 <ucdr_deserialize_uint32_t+0x8e>
 800f116:	6922      	ldr	r2, [r4, #16]
 800f118:	60a7      	str	r7, [r4, #8]
 800f11a:	1bbf      	subs	r7, r7, r6
 800f11c:	443a      	add	r2, r7
 800f11e:	f1c7 0904 	rsb	r9, r7, #4
 800f122:	6122      	str	r2, [r4, #16]
 800f124:	4649      	mov	r1, r9
 800f126:	4620      	mov	r0, r4
 800f128:	f000 fbfc 	bl	800f924 <ucdr_check_final_buffer_behavior>
 800f12c:	2800      	cmp	r0, #0
 800f12e:	d046      	beq.n	800f1be <ucdr_deserialize_uint32_t+0xd6>
 800f130:	7d23      	ldrb	r3, [r4, #20]
 800f132:	2b01      	cmp	r3, #1
 800f134:	d05c      	beq.n	800f1f0 <ucdr_deserialize_uint32_t+0x108>
 800f136:	78f3      	ldrb	r3, [r6, #3]
 800f138:	702b      	strb	r3, [r5, #0]
 800f13a:	2f00      	cmp	r7, #0
 800f13c:	d04c      	beq.n	800f1d8 <ucdr_deserialize_uint32_t+0xf0>
 800f13e:	78b3      	ldrb	r3, [r6, #2]
 800f140:	706b      	strb	r3, [r5, #1]
 800f142:	2f01      	cmp	r7, #1
 800f144:	f105 0302 	add.w	r3, r5, #2
 800f148:	d04a      	beq.n	800f1e0 <ucdr_deserialize_uint32_t+0xf8>
 800f14a:	7873      	ldrb	r3, [r6, #1]
 800f14c:	70ab      	strb	r3, [r5, #2]
 800f14e:	2f02      	cmp	r7, #2
 800f150:	f105 0303 	add.w	r3, r5, #3
 800f154:	d048      	beq.n	800f1e8 <ucdr_deserialize_uint32_t+0x100>
 800f156:	7833      	ldrb	r3, [r6, #0]
 800f158:	70eb      	strb	r3, [r5, #3]
 800f15a:	6923      	ldr	r3, [r4, #16]
 800f15c:	68a2      	ldr	r2, [r4, #8]
 800f15e:	7da0      	ldrb	r0, [r4, #22]
 800f160:	2104      	movs	r1, #4
 800f162:	3304      	adds	r3, #4
 800f164:	1bdb      	subs	r3, r3, r7
 800f166:	444a      	add	r2, r9
 800f168:	7561      	strb	r1, [r4, #21]
 800f16a:	6123      	str	r3, [r4, #16]
 800f16c:	60a2      	str	r2, [r4, #8]
 800f16e:	f080 0001 	eor.w	r0, r0, #1
 800f172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f176:	2104      	movs	r1, #4
 800f178:	4620      	mov	r0, r4
 800f17a:	f000 fbd3 	bl	800f924 <ucdr_check_final_buffer_behavior>
 800f17e:	b1b0      	cbz	r0, 800f1ae <ucdr_deserialize_uint32_t+0xc6>
 800f180:	7d23      	ldrb	r3, [r4, #20]
 800f182:	2b01      	cmp	r3, #1
 800f184:	68a3      	ldr	r3, [r4, #8]
 800f186:	d017      	beq.n	800f1b8 <ucdr_deserialize_uint32_t+0xd0>
 800f188:	78db      	ldrb	r3, [r3, #3]
 800f18a:	702b      	strb	r3, [r5, #0]
 800f18c:	68a3      	ldr	r3, [r4, #8]
 800f18e:	789b      	ldrb	r3, [r3, #2]
 800f190:	706b      	strb	r3, [r5, #1]
 800f192:	68a3      	ldr	r3, [r4, #8]
 800f194:	785b      	ldrb	r3, [r3, #1]
 800f196:	70ab      	strb	r3, [r5, #2]
 800f198:	68a3      	ldr	r3, [r4, #8]
 800f19a:	781b      	ldrb	r3, [r3, #0]
 800f19c:	70eb      	strb	r3, [r5, #3]
 800f19e:	68a2      	ldr	r2, [r4, #8]
 800f1a0:	6923      	ldr	r3, [r4, #16]
 800f1a2:	3204      	adds	r2, #4
 800f1a4:	3304      	adds	r3, #4
 800f1a6:	2104      	movs	r1, #4
 800f1a8:	60a2      	str	r2, [r4, #8]
 800f1aa:	6123      	str	r3, [r4, #16]
 800f1ac:	7561      	strb	r1, [r4, #21]
 800f1ae:	7da0      	ldrb	r0, [r4, #22]
 800f1b0:	f080 0001 	eor.w	r0, r0, #1
 800f1b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	602b      	str	r3, [r5, #0]
 800f1bc:	e7ef      	b.n	800f19e <ucdr_deserialize_uint32_t+0xb6>
 800f1be:	68a2      	ldr	r2, [r4, #8]
 800f1c0:	6923      	ldr	r3, [r4, #16]
 800f1c2:	7da0      	ldrb	r0, [r4, #22]
 800f1c4:	f884 8015 	strb.w	r8, [r4, #21]
 800f1c8:	1bd2      	subs	r2, r2, r7
 800f1ca:	1bdb      	subs	r3, r3, r7
 800f1cc:	60a2      	str	r2, [r4, #8]
 800f1ce:	6123      	str	r3, [r4, #16]
 800f1d0:	f080 0001 	eor.w	r0, r0, #1
 800f1d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1d8:	68a3      	ldr	r3, [r4, #8]
 800f1da:	789b      	ldrb	r3, [r3, #2]
 800f1dc:	706b      	strb	r3, [r5, #1]
 800f1de:	1cab      	adds	r3, r5, #2
 800f1e0:	68a2      	ldr	r2, [r4, #8]
 800f1e2:	7852      	ldrb	r2, [r2, #1]
 800f1e4:	f803 2b01 	strb.w	r2, [r3], #1
 800f1e8:	68a2      	ldr	r2, [r4, #8]
 800f1ea:	7812      	ldrb	r2, [r2, #0]
 800f1ec:	701a      	strb	r2, [r3, #0]
 800f1ee:	e7b4      	b.n	800f15a <ucdr_deserialize_uint32_t+0x72>
 800f1f0:	4631      	mov	r1, r6
 800f1f2:	463a      	mov	r2, r7
 800f1f4:	4628      	mov	r0, r5
 800f1f6:	f009 fb2a 	bl	801884e <memcpy>
 800f1fa:	68a1      	ldr	r1, [r4, #8]
 800f1fc:	464a      	mov	r2, r9
 800f1fe:	19e8      	adds	r0, r5, r7
 800f200:	f009 fb25 	bl	801884e <memcpy>
 800f204:	e7a9      	b.n	800f15a <ucdr_deserialize_uint32_t+0x72>
 800f206:	bf00      	nop

0800f208 <ucdr_deserialize_endian_uint32_t>:
 800f208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f20c:	460e      	mov	r6, r1
 800f20e:	2104      	movs	r1, #4
 800f210:	4604      	mov	r4, r0
 800f212:	4615      	mov	r5, r2
 800f214:	f000 fbd8 	bl	800f9c8 <ucdr_buffer_alignment>
 800f218:	4601      	mov	r1, r0
 800f21a:	4620      	mov	r0, r4
 800f21c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800f220:	f000 fc16 	bl	800fa50 <ucdr_advance_buffer>
 800f224:	4620      	mov	r0, r4
 800f226:	2104      	movs	r1, #4
 800f228:	f000 fb70 	bl	800f90c <ucdr_check_buffer_available_for>
 800f22c:	2800      	cmp	r0, #0
 800f22e:	d13c      	bne.n	800f2aa <ucdr_deserialize_endian_uint32_t+0xa2>
 800f230:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800f234:	42bb      	cmp	r3, r7
 800f236:	d933      	bls.n	800f2a0 <ucdr_deserialize_endian_uint32_t+0x98>
 800f238:	6922      	ldr	r2, [r4, #16]
 800f23a:	60a3      	str	r3, [r4, #8]
 800f23c:	eba3 0807 	sub.w	r8, r3, r7
 800f240:	4442      	add	r2, r8
 800f242:	f1c8 0a04 	rsb	sl, r8, #4
 800f246:	6122      	str	r2, [r4, #16]
 800f248:	4651      	mov	r1, sl
 800f24a:	4620      	mov	r0, r4
 800f24c:	f000 fb6a 	bl	800f924 <ucdr_check_final_buffer_behavior>
 800f250:	2800      	cmp	r0, #0
 800f252:	d048      	beq.n	800f2e6 <ucdr_deserialize_endian_uint32_t+0xde>
 800f254:	2e01      	cmp	r6, #1
 800f256:	d061      	beq.n	800f31c <ucdr_deserialize_endian_uint32_t+0x114>
 800f258:	78fb      	ldrb	r3, [r7, #3]
 800f25a:	702b      	strb	r3, [r5, #0]
 800f25c:	f1b8 0f00 	cmp.w	r8, #0
 800f260:	d050      	beq.n	800f304 <ucdr_deserialize_endian_uint32_t+0xfc>
 800f262:	78bb      	ldrb	r3, [r7, #2]
 800f264:	706b      	strb	r3, [r5, #1]
 800f266:	f1b8 0f01 	cmp.w	r8, #1
 800f26a:	f105 0302 	add.w	r3, r5, #2
 800f26e:	d04d      	beq.n	800f30c <ucdr_deserialize_endian_uint32_t+0x104>
 800f270:	787b      	ldrb	r3, [r7, #1]
 800f272:	70ab      	strb	r3, [r5, #2]
 800f274:	f1b8 0f02 	cmp.w	r8, #2
 800f278:	f105 0303 	add.w	r3, r5, #3
 800f27c:	d04a      	beq.n	800f314 <ucdr_deserialize_endian_uint32_t+0x10c>
 800f27e:	783b      	ldrb	r3, [r7, #0]
 800f280:	70eb      	strb	r3, [r5, #3]
 800f282:	6923      	ldr	r3, [r4, #16]
 800f284:	68a2      	ldr	r2, [r4, #8]
 800f286:	7da0      	ldrb	r0, [r4, #22]
 800f288:	2104      	movs	r1, #4
 800f28a:	3304      	adds	r3, #4
 800f28c:	eba3 0308 	sub.w	r3, r3, r8
 800f290:	4452      	add	r2, sl
 800f292:	7561      	strb	r1, [r4, #21]
 800f294:	6123      	str	r3, [r4, #16]
 800f296:	60a2      	str	r2, [r4, #8]
 800f298:	f080 0001 	eor.w	r0, r0, #1
 800f29c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2a0:	2104      	movs	r1, #4
 800f2a2:	4620      	mov	r0, r4
 800f2a4:	f000 fb3e 	bl	800f924 <ucdr_check_final_buffer_behavior>
 800f2a8:	b1a8      	cbz	r0, 800f2d6 <ucdr_deserialize_endian_uint32_t+0xce>
 800f2aa:	2e01      	cmp	r6, #1
 800f2ac:	68a3      	ldr	r3, [r4, #8]
 800f2ae:	d017      	beq.n	800f2e0 <ucdr_deserialize_endian_uint32_t+0xd8>
 800f2b0:	78db      	ldrb	r3, [r3, #3]
 800f2b2:	702b      	strb	r3, [r5, #0]
 800f2b4:	68a3      	ldr	r3, [r4, #8]
 800f2b6:	789b      	ldrb	r3, [r3, #2]
 800f2b8:	706b      	strb	r3, [r5, #1]
 800f2ba:	68a3      	ldr	r3, [r4, #8]
 800f2bc:	785b      	ldrb	r3, [r3, #1]
 800f2be:	70ab      	strb	r3, [r5, #2]
 800f2c0:	68a3      	ldr	r3, [r4, #8]
 800f2c2:	781b      	ldrb	r3, [r3, #0]
 800f2c4:	70eb      	strb	r3, [r5, #3]
 800f2c6:	68a2      	ldr	r2, [r4, #8]
 800f2c8:	6923      	ldr	r3, [r4, #16]
 800f2ca:	3204      	adds	r2, #4
 800f2cc:	3304      	adds	r3, #4
 800f2ce:	2104      	movs	r1, #4
 800f2d0:	60a2      	str	r2, [r4, #8]
 800f2d2:	6123      	str	r3, [r4, #16]
 800f2d4:	7561      	strb	r1, [r4, #21]
 800f2d6:	7da0      	ldrb	r0, [r4, #22]
 800f2d8:	f080 0001 	eor.w	r0, r0, #1
 800f2dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	602b      	str	r3, [r5, #0]
 800f2e4:	e7ef      	b.n	800f2c6 <ucdr_deserialize_endian_uint32_t+0xbe>
 800f2e6:	68a2      	ldr	r2, [r4, #8]
 800f2e8:	6923      	ldr	r3, [r4, #16]
 800f2ea:	7da0      	ldrb	r0, [r4, #22]
 800f2ec:	f884 9015 	strb.w	r9, [r4, #21]
 800f2f0:	eba2 0208 	sub.w	r2, r2, r8
 800f2f4:	eba3 0308 	sub.w	r3, r3, r8
 800f2f8:	60a2      	str	r2, [r4, #8]
 800f2fa:	6123      	str	r3, [r4, #16]
 800f2fc:	f080 0001 	eor.w	r0, r0, #1
 800f300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f304:	68a3      	ldr	r3, [r4, #8]
 800f306:	789b      	ldrb	r3, [r3, #2]
 800f308:	706b      	strb	r3, [r5, #1]
 800f30a:	1cab      	adds	r3, r5, #2
 800f30c:	68a2      	ldr	r2, [r4, #8]
 800f30e:	7852      	ldrb	r2, [r2, #1]
 800f310:	f803 2b01 	strb.w	r2, [r3], #1
 800f314:	68a2      	ldr	r2, [r4, #8]
 800f316:	7812      	ldrb	r2, [r2, #0]
 800f318:	701a      	strb	r2, [r3, #0]
 800f31a:	e7b2      	b.n	800f282 <ucdr_deserialize_endian_uint32_t+0x7a>
 800f31c:	4639      	mov	r1, r7
 800f31e:	4642      	mov	r2, r8
 800f320:	4628      	mov	r0, r5
 800f322:	f009 fa94 	bl	801884e <memcpy>
 800f326:	68a1      	ldr	r1, [r4, #8]
 800f328:	4652      	mov	r2, sl
 800f32a:	eb05 0008 	add.w	r0, r5, r8
 800f32e:	f009 fa8e 	bl	801884e <memcpy>
 800f332:	e7a6      	b.n	800f282 <ucdr_deserialize_endian_uint32_t+0x7a>

0800f334 <ucdr_serialize_uint64_t>:
 800f334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f338:	2108      	movs	r1, #8
 800f33a:	b082      	sub	sp, #8
 800f33c:	4604      	mov	r4, r0
 800f33e:	e9cd 2300 	strd	r2, r3, [sp]
 800f342:	f000 fb41 	bl	800f9c8 <ucdr_buffer_alignment>
 800f346:	4601      	mov	r1, r0
 800f348:	4620      	mov	r0, r4
 800f34a:	7d67      	ldrb	r7, [r4, #21]
 800f34c:	f000 fb80 	bl	800fa50 <ucdr_advance_buffer>
 800f350:	4620      	mov	r0, r4
 800f352:	2108      	movs	r1, #8
 800f354:	f000 fada 	bl	800f90c <ucdr_check_buffer_available_for>
 800f358:	2800      	cmp	r0, #0
 800f35a:	d14e      	bne.n	800f3fa <ucdr_serialize_uint64_t+0xc6>
 800f35c:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 800f360:	42b5      	cmp	r5, r6
 800f362:	d945      	bls.n	800f3f0 <ucdr_serialize_uint64_t+0xbc>
 800f364:	6923      	ldr	r3, [r4, #16]
 800f366:	60a5      	str	r5, [r4, #8]
 800f368:	1bad      	subs	r5, r5, r6
 800f36a:	442b      	add	r3, r5
 800f36c:	f1c5 0808 	rsb	r8, r5, #8
 800f370:	6123      	str	r3, [r4, #16]
 800f372:	4641      	mov	r1, r8
 800f374:	4620      	mov	r0, r4
 800f376:	f000 fad5 	bl	800f924 <ucdr_check_final_buffer_behavior>
 800f37a:	2800      	cmp	r0, #0
 800f37c:	d074      	beq.n	800f468 <ucdr_serialize_uint64_t+0x134>
 800f37e:	7d23      	ldrb	r3, [r4, #20]
 800f380:	2b01      	cmp	r3, #1
 800f382:	f000 809b 	beq.w	800f4bc <ucdr_serialize_uint64_t+0x188>
 800f386:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f38a:	7033      	strb	r3, [r6, #0]
 800f38c:	2d00      	cmp	r5, #0
 800f38e:	d078      	beq.n	800f482 <ucdr_serialize_uint64_t+0x14e>
 800f390:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f394:	7073      	strb	r3, [r6, #1]
 800f396:	2d01      	cmp	r5, #1
 800f398:	d077      	beq.n	800f48a <ucdr_serialize_uint64_t+0x156>
 800f39a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f39e:	70b3      	strb	r3, [r6, #2]
 800f3a0:	2d02      	cmp	r5, #2
 800f3a2:	d076      	beq.n	800f492 <ucdr_serialize_uint64_t+0x15e>
 800f3a4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f3a8:	70f3      	strb	r3, [r6, #3]
 800f3aa:	2d03      	cmp	r5, #3
 800f3ac:	d075      	beq.n	800f49a <ucdr_serialize_uint64_t+0x166>
 800f3ae:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800f3b2:	7133      	strb	r3, [r6, #4]
 800f3b4:	2d04      	cmp	r5, #4
 800f3b6:	d074      	beq.n	800f4a2 <ucdr_serialize_uint64_t+0x16e>
 800f3b8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800f3bc:	7173      	strb	r3, [r6, #5]
 800f3be:	2d05      	cmp	r5, #5
 800f3c0:	d073      	beq.n	800f4aa <ucdr_serialize_uint64_t+0x176>
 800f3c2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800f3c6:	71b3      	strb	r3, [r6, #6]
 800f3c8:	2d06      	cmp	r5, #6
 800f3ca:	d072      	beq.n	800f4b2 <ucdr_serialize_uint64_t+0x17e>
 800f3cc:	f89d 3000 	ldrb.w	r3, [sp]
 800f3d0:	71f3      	strb	r3, [r6, #7]
 800f3d2:	6923      	ldr	r3, [r4, #16]
 800f3d4:	68a2      	ldr	r2, [r4, #8]
 800f3d6:	7da0      	ldrb	r0, [r4, #22]
 800f3d8:	3308      	adds	r3, #8
 800f3da:	1b5d      	subs	r5, r3, r5
 800f3dc:	4442      	add	r2, r8
 800f3de:	2308      	movs	r3, #8
 800f3e0:	f080 0001 	eor.w	r0, r0, #1
 800f3e4:	6125      	str	r5, [r4, #16]
 800f3e6:	60a2      	str	r2, [r4, #8]
 800f3e8:	7563      	strb	r3, [r4, #21]
 800f3ea:	b002      	add	sp, #8
 800f3ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3f0:	2108      	movs	r1, #8
 800f3f2:	4620      	mov	r0, r4
 800f3f4:	f000 fa96 	bl	800f924 <ucdr_check_final_buffer_behavior>
 800f3f8:	b350      	cbz	r0, 800f450 <ucdr_serialize_uint64_t+0x11c>
 800f3fa:	7d23      	ldrb	r3, [r4, #20]
 800f3fc:	2b01      	cmp	r3, #1
 800f3fe:	d02d      	beq.n	800f45c <ucdr_serialize_uint64_t+0x128>
 800f400:	68a3      	ldr	r3, [r4, #8]
 800f402:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f406:	701a      	strb	r2, [r3, #0]
 800f408:	68a3      	ldr	r3, [r4, #8]
 800f40a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f40e:	705a      	strb	r2, [r3, #1]
 800f410:	68a3      	ldr	r3, [r4, #8]
 800f412:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f416:	709a      	strb	r2, [r3, #2]
 800f418:	68a3      	ldr	r3, [r4, #8]
 800f41a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f41e:	70da      	strb	r2, [r3, #3]
 800f420:	68a3      	ldr	r3, [r4, #8]
 800f422:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f426:	711a      	strb	r2, [r3, #4]
 800f428:	68a3      	ldr	r3, [r4, #8]
 800f42a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f42e:	715a      	strb	r2, [r3, #5]
 800f430:	68a3      	ldr	r3, [r4, #8]
 800f432:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f436:	719a      	strb	r2, [r3, #6]
 800f438:	68a3      	ldr	r3, [r4, #8]
 800f43a:	f89d 2000 	ldrb.w	r2, [sp]
 800f43e:	71da      	strb	r2, [r3, #7]
 800f440:	68a2      	ldr	r2, [r4, #8]
 800f442:	6923      	ldr	r3, [r4, #16]
 800f444:	3208      	adds	r2, #8
 800f446:	3308      	adds	r3, #8
 800f448:	2108      	movs	r1, #8
 800f44a:	60a2      	str	r2, [r4, #8]
 800f44c:	6123      	str	r3, [r4, #16]
 800f44e:	7561      	strb	r1, [r4, #21]
 800f450:	7da0      	ldrb	r0, [r4, #22]
 800f452:	f080 0001 	eor.w	r0, r0, #1
 800f456:	b002      	add	sp, #8
 800f458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f45c:	466b      	mov	r3, sp
 800f45e:	cb03      	ldmia	r3!, {r0, r1}
 800f460:	68a3      	ldr	r3, [r4, #8]
 800f462:	6018      	str	r0, [r3, #0]
 800f464:	6059      	str	r1, [r3, #4]
 800f466:	e7eb      	b.n	800f440 <ucdr_serialize_uint64_t+0x10c>
 800f468:	68a2      	ldr	r2, [r4, #8]
 800f46a:	6923      	ldr	r3, [r4, #16]
 800f46c:	7da0      	ldrb	r0, [r4, #22]
 800f46e:	7567      	strb	r7, [r4, #21]
 800f470:	1b52      	subs	r2, r2, r5
 800f472:	f080 0001 	eor.w	r0, r0, #1
 800f476:	1b5d      	subs	r5, r3, r5
 800f478:	60a2      	str	r2, [r4, #8]
 800f47a:	6125      	str	r5, [r4, #16]
 800f47c:	b002      	add	sp, #8
 800f47e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f482:	68a3      	ldr	r3, [r4, #8]
 800f484:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f488:	701a      	strb	r2, [r3, #0]
 800f48a:	68a3      	ldr	r3, [r4, #8]
 800f48c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f490:	701a      	strb	r2, [r3, #0]
 800f492:	68a3      	ldr	r3, [r4, #8]
 800f494:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f498:	701a      	strb	r2, [r3, #0]
 800f49a:	68a3      	ldr	r3, [r4, #8]
 800f49c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f4a0:	701a      	strb	r2, [r3, #0]
 800f4a2:	68a3      	ldr	r3, [r4, #8]
 800f4a4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f4a8:	701a      	strb	r2, [r3, #0]
 800f4aa:	68a3      	ldr	r3, [r4, #8]
 800f4ac:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f4b0:	701a      	strb	r2, [r3, #0]
 800f4b2:	68a3      	ldr	r3, [r4, #8]
 800f4b4:	f89d 2000 	ldrb.w	r2, [sp]
 800f4b8:	701a      	strb	r2, [r3, #0]
 800f4ba:	e78a      	b.n	800f3d2 <ucdr_serialize_uint64_t+0x9e>
 800f4bc:	4630      	mov	r0, r6
 800f4be:	466e      	mov	r6, sp
 800f4c0:	4631      	mov	r1, r6
 800f4c2:	462a      	mov	r2, r5
 800f4c4:	f009 f9c3 	bl	801884e <memcpy>
 800f4c8:	68a0      	ldr	r0, [r4, #8]
 800f4ca:	4642      	mov	r2, r8
 800f4cc:	1971      	adds	r1, r6, r5
 800f4ce:	f009 f9be 	bl	801884e <memcpy>
 800f4d2:	e77e      	b.n	800f3d2 <ucdr_serialize_uint64_t+0x9e>

0800f4d4 <ucdr_serialize_int16_t>:
 800f4d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4d8:	b082      	sub	sp, #8
 800f4da:	460b      	mov	r3, r1
 800f4dc:	2102      	movs	r1, #2
 800f4de:	4604      	mov	r4, r0
 800f4e0:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f4e4:	f000 fa70 	bl	800f9c8 <ucdr_buffer_alignment>
 800f4e8:	4601      	mov	r1, r0
 800f4ea:	4620      	mov	r0, r4
 800f4ec:	7d67      	ldrb	r7, [r4, #21]
 800f4ee:	f000 faaf 	bl	800fa50 <ucdr_advance_buffer>
 800f4f2:	4620      	mov	r0, r4
 800f4f4:	2102      	movs	r1, #2
 800f4f6:	f000 fa09 	bl	800f90c <ucdr_check_buffer_available_for>
 800f4fa:	bb78      	cbnz	r0, 800f55c <ucdr_serialize_int16_t+0x88>
 800f4fc:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 800f500:	42b5      	cmp	r5, r6
 800f502:	d926      	bls.n	800f552 <ucdr_serialize_int16_t+0x7e>
 800f504:	6922      	ldr	r2, [r4, #16]
 800f506:	60a5      	str	r5, [r4, #8]
 800f508:	1bad      	subs	r5, r5, r6
 800f50a:	442a      	add	r2, r5
 800f50c:	f1c5 0802 	rsb	r8, r5, #2
 800f510:	6122      	str	r2, [r4, #16]
 800f512:	4641      	mov	r1, r8
 800f514:	4620      	mov	r0, r4
 800f516:	f000 fa05 	bl	800f924 <ucdr_check_final_buffer_behavior>
 800f51a:	2800      	cmp	r0, #0
 800f51c:	d03b      	beq.n	800f596 <ucdr_serialize_int16_t+0xc2>
 800f51e:	7d23      	ldrb	r3, [r4, #20]
 800f520:	2b01      	cmp	r3, #1
 800f522:	d04a      	beq.n	800f5ba <ucdr_serialize_int16_t+0xe6>
 800f524:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f528:	7033      	strb	r3, [r6, #0]
 800f52a:	2d00      	cmp	r5, #0
 800f52c:	d040      	beq.n	800f5b0 <ucdr_serialize_int16_t+0xdc>
 800f52e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f532:	7073      	strb	r3, [r6, #1]
 800f534:	6923      	ldr	r3, [r4, #16]
 800f536:	68a2      	ldr	r2, [r4, #8]
 800f538:	7da0      	ldrb	r0, [r4, #22]
 800f53a:	3302      	adds	r3, #2
 800f53c:	1b5b      	subs	r3, r3, r5
 800f53e:	4442      	add	r2, r8
 800f540:	2102      	movs	r1, #2
 800f542:	f080 0001 	eor.w	r0, r0, #1
 800f546:	6123      	str	r3, [r4, #16]
 800f548:	60a2      	str	r2, [r4, #8]
 800f54a:	7561      	strb	r1, [r4, #21]
 800f54c:	b002      	add	sp, #8
 800f54e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f552:	2102      	movs	r1, #2
 800f554:	4620      	mov	r0, r4
 800f556:	f000 f9e5 	bl	800f924 <ucdr_check_final_buffer_behavior>
 800f55a:	b190      	cbz	r0, 800f582 <ucdr_serialize_int16_t+0xae>
 800f55c:	7d23      	ldrb	r3, [r4, #20]
 800f55e:	2b01      	cmp	r3, #1
 800f560:	68a3      	ldr	r3, [r4, #8]
 800f562:	d014      	beq.n	800f58e <ucdr_serialize_int16_t+0xba>
 800f564:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f568:	701a      	strb	r2, [r3, #0]
 800f56a:	68a3      	ldr	r3, [r4, #8]
 800f56c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f570:	705a      	strb	r2, [r3, #1]
 800f572:	68a2      	ldr	r2, [r4, #8]
 800f574:	6923      	ldr	r3, [r4, #16]
 800f576:	3202      	adds	r2, #2
 800f578:	3302      	adds	r3, #2
 800f57a:	2102      	movs	r1, #2
 800f57c:	60a2      	str	r2, [r4, #8]
 800f57e:	6123      	str	r3, [r4, #16]
 800f580:	7561      	strb	r1, [r4, #21]
 800f582:	7da0      	ldrb	r0, [r4, #22]
 800f584:	f080 0001 	eor.w	r0, r0, #1
 800f588:	b002      	add	sp, #8
 800f58a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f58e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f592:	801a      	strh	r2, [r3, #0]
 800f594:	e7ed      	b.n	800f572 <ucdr_serialize_int16_t+0x9e>
 800f596:	68a2      	ldr	r2, [r4, #8]
 800f598:	6923      	ldr	r3, [r4, #16]
 800f59a:	7da0      	ldrb	r0, [r4, #22]
 800f59c:	7567      	strb	r7, [r4, #21]
 800f59e:	1b52      	subs	r2, r2, r5
 800f5a0:	1b5b      	subs	r3, r3, r5
 800f5a2:	f080 0001 	eor.w	r0, r0, #1
 800f5a6:	60a2      	str	r2, [r4, #8]
 800f5a8:	6123      	str	r3, [r4, #16]
 800f5aa:	b002      	add	sp, #8
 800f5ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5b0:	68a3      	ldr	r3, [r4, #8]
 800f5b2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f5b6:	701a      	strb	r2, [r3, #0]
 800f5b8:	e7bc      	b.n	800f534 <ucdr_serialize_int16_t+0x60>
 800f5ba:	4630      	mov	r0, r6
 800f5bc:	f10d 0606 	add.w	r6, sp, #6
 800f5c0:	4631      	mov	r1, r6
 800f5c2:	462a      	mov	r2, r5
 800f5c4:	f009 f943 	bl	801884e <memcpy>
 800f5c8:	68a0      	ldr	r0, [r4, #8]
 800f5ca:	4642      	mov	r2, r8
 800f5cc:	1971      	adds	r1, r6, r5
 800f5ce:	f009 f93e 	bl	801884e <memcpy>
 800f5d2:	e7af      	b.n	800f534 <ucdr_serialize_int16_t+0x60>

0800f5d4 <ucdr_deserialize_int16_t>:
 800f5d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5d8:	460d      	mov	r5, r1
 800f5da:	2102      	movs	r1, #2
 800f5dc:	4604      	mov	r4, r0
 800f5de:	f000 f9f3 	bl	800f9c8 <ucdr_buffer_alignment>
 800f5e2:	4601      	mov	r1, r0
 800f5e4:	4620      	mov	r0, r4
 800f5e6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f5ea:	f000 fa31 	bl	800fa50 <ucdr_advance_buffer>
 800f5ee:	4620      	mov	r0, r4
 800f5f0:	2102      	movs	r1, #2
 800f5f2:	f000 f98b 	bl	800f90c <ucdr_check_buffer_available_for>
 800f5f6:	bb60      	cbnz	r0, 800f652 <ucdr_deserialize_int16_t+0x7e>
 800f5f8:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f5fc:	42be      	cmp	r6, r7
 800f5fe:	d923      	bls.n	800f648 <ucdr_deserialize_int16_t+0x74>
 800f600:	6922      	ldr	r2, [r4, #16]
 800f602:	60a6      	str	r6, [r4, #8]
 800f604:	1bf6      	subs	r6, r6, r7
 800f606:	4432      	add	r2, r6
 800f608:	f1c6 0902 	rsb	r9, r6, #2
 800f60c:	6122      	str	r2, [r4, #16]
 800f60e:	4649      	mov	r1, r9
 800f610:	4620      	mov	r0, r4
 800f612:	f000 f987 	bl	800f924 <ucdr_check_final_buffer_behavior>
 800f616:	2800      	cmp	r0, #0
 800f618:	d034      	beq.n	800f684 <ucdr_deserialize_int16_t+0xb0>
 800f61a:	7d23      	ldrb	r3, [r4, #20]
 800f61c:	2b01      	cmp	r3, #1
 800f61e:	d042      	beq.n	800f6a6 <ucdr_deserialize_int16_t+0xd2>
 800f620:	787b      	ldrb	r3, [r7, #1]
 800f622:	702b      	strb	r3, [r5, #0]
 800f624:	2e00      	cmp	r6, #0
 800f626:	d03a      	beq.n	800f69e <ucdr_deserialize_int16_t+0xca>
 800f628:	783b      	ldrb	r3, [r7, #0]
 800f62a:	706b      	strb	r3, [r5, #1]
 800f62c:	6923      	ldr	r3, [r4, #16]
 800f62e:	68a2      	ldr	r2, [r4, #8]
 800f630:	7da0      	ldrb	r0, [r4, #22]
 800f632:	2102      	movs	r1, #2
 800f634:	3302      	adds	r3, #2
 800f636:	1b9b      	subs	r3, r3, r6
 800f638:	444a      	add	r2, r9
 800f63a:	7561      	strb	r1, [r4, #21]
 800f63c:	6123      	str	r3, [r4, #16]
 800f63e:	60a2      	str	r2, [r4, #8]
 800f640:	f080 0001 	eor.w	r0, r0, #1
 800f644:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f648:	2102      	movs	r1, #2
 800f64a:	4620      	mov	r0, r4
 800f64c:	f000 f96a 	bl	800f924 <ucdr_check_final_buffer_behavior>
 800f650:	b180      	cbz	r0, 800f674 <ucdr_deserialize_int16_t+0xa0>
 800f652:	7d23      	ldrb	r3, [r4, #20]
 800f654:	2b01      	cmp	r3, #1
 800f656:	68a3      	ldr	r3, [r4, #8]
 800f658:	d011      	beq.n	800f67e <ucdr_deserialize_int16_t+0xaa>
 800f65a:	785b      	ldrb	r3, [r3, #1]
 800f65c:	702b      	strb	r3, [r5, #0]
 800f65e:	68a3      	ldr	r3, [r4, #8]
 800f660:	781b      	ldrb	r3, [r3, #0]
 800f662:	706b      	strb	r3, [r5, #1]
 800f664:	68a2      	ldr	r2, [r4, #8]
 800f666:	6923      	ldr	r3, [r4, #16]
 800f668:	3202      	adds	r2, #2
 800f66a:	3302      	adds	r3, #2
 800f66c:	2102      	movs	r1, #2
 800f66e:	60a2      	str	r2, [r4, #8]
 800f670:	6123      	str	r3, [r4, #16]
 800f672:	7561      	strb	r1, [r4, #21]
 800f674:	7da0      	ldrb	r0, [r4, #22]
 800f676:	f080 0001 	eor.w	r0, r0, #1
 800f67a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f67e:	881b      	ldrh	r3, [r3, #0]
 800f680:	802b      	strh	r3, [r5, #0]
 800f682:	e7ef      	b.n	800f664 <ucdr_deserialize_int16_t+0x90>
 800f684:	68a2      	ldr	r2, [r4, #8]
 800f686:	6923      	ldr	r3, [r4, #16]
 800f688:	7da0      	ldrb	r0, [r4, #22]
 800f68a:	f884 8015 	strb.w	r8, [r4, #21]
 800f68e:	1b92      	subs	r2, r2, r6
 800f690:	1b9b      	subs	r3, r3, r6
 800f692:	60a2      	str	r2, [r4, #8]
 800f694:	6123      	str	r3, [r4, #16]
 800f696:	f080 0001 	eor.w	r0, r0, #1
 800f69a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f69e:	68a3      	ldr	r3, [r4, #8]
 800f6a0:	781b      	ldrb	r3, [r3, #0]
 800f6a2:	706b      	strb	r3, [r5, #1]
 800f6a4:	e7c2      	b.n	800f62c <ucdr_deserialize_int16_t+0x58>
 800f6a6:	4639      	mov	r1, r7
 800f6a8:	4632      	mov	r2, r6
 800f6aa:	4628      	mov	r0, r5
 800f6ac:	f009 f8cf 	bl	801884e <memcpy>
 800f6b0:	68a1      	ldr	r1, [r4, #8]
 800f6b2:	464a      	mov	r2, r9
 800f6b4:	19a8      	adds	r0, r5, r6
 800f6b6:	f009 f8ca 	bl	801884e <memcpy>
 800f6ba:	e7b7      	b.n	800f62c <ucdr_deserialize_int16_t+0x58>

0800f6bc <ucdr_serialize_int32_t>:
 800f6bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6c0:	b082      	sub	sp, #8
 800f6c2:	4604      	mov	r4, r0
 800f6c4:	9101      	str	r1, [sp, #4]
 800f6c6:	2104      	movs	r1, #4
 800f6c8:	f000 f97e 	bl	800f9c8 <ucdr_buffer_alignment>
 800f6cc:	4601      	mov	r1, r0
 800f6ce:	4620      	mov	r0, r4
 800f6d0:	7d67      	ldrb	r7, [r4, #21]
 800f6d2:	f000 f9bd 	bl	800fa50 <ucdr_advance_buffer>
 800f6d6:	4620      	mov	r0, r4
 800f6d8:	2104      	movs	r1, #4
 800f6da:	f000 f917 	bl	800f90c <ucdr_check_buffer_available_for>
 800f6de:	2800      	cmp	r0, #0
 800f6e0:	d139      	bne.n	800f756 <ucdr_serialize_int32_t+0x9a>
 800f6e2:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 800f6e6:	42ae      	cmp	r6, r5
 800f6e8:	d930      	bls.n	800f74c <ucdr_serialize_int32_t+0x90>
 800f6ea:	6922      	ldr	r2, [r4, #16]
 800f6ec:	60a6      	str	r6, [r4, #8]
 800f6ee:	1b76      	subs	r6, r6, r5
 800f6f0:	4432      	add	r2, r6
 800f6f2:	f1c6 0804 	rsb	r8, r6, #4
 800f6f6:	6122      	str	r2, [r4, #16]
 800f6f8:	4641      	mov	r1, r8
 800f6fa:	4620      	mov	r0, r4
 800f6fc:	f000 f912 	bl	800f924 <ucdr_check_final_buffer_behavior>
 800f700:	2800      	cmp	r0, #0
 800f702:	d04c      	beq.n	800f79e <ucdr_serialize_int32_t+0xe2>
 800f704:	7d23      	ldrb	r3, [r4, #20]
 800f706:	2b01      	cmp	r3, #1
 800f708:	d063      	beq.n	800f7d2 <ucdr_serialize_int32_t+0x116>
 800f70a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f70e:	702b      	strb	r3, [r5, #0]
 800f710:	2e00      	cmp	r6, #0
 800f712:	d051      	beq.n	800f7b8 <ucdr_serialize_int32_t+0xfc>
 800f714:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f718:	706b      	strb	r3, [r5, #1]
 800f71a:	2e01      	cmp	r6, #1
 800f71c:	d050      	beq.n	800f7c0 <ucdr_serialize_int32_t+0x104>
 800f71e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f722:	70ab      	strb	r3, [r5, #2]
 800f724:	2e02      	cmp	r6, #2
 800f726:	d04f      	beq.n	800f7c8 <ucdr_serialize_int32_t+0x10c>
 800f728:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f72c:	70eb      	strb	r3, [r5, #3]
 800f72e:	6923      	ldr	r3, [r4, #16]
 800f730:	68a2      	ldr	r2, [r4, #8]
 800f732:	7da0      	ldrb	r0, [r4, #22]
 800f734:	3304      	adds	r3, #4
 800f736:	1b9b      	subs	r3, r3, r6
 800f738:	4442      	add	r2, r8
 800f73a:	2104      	movs	r1, #4
 800f73c:	f080 0001 	eor.w	r0, r0, #1
 800f740:	6123      	str	r3, [r4, #16]
 800f742:	60a2      	str	r2, [r4, #8]
 800f744:	7561      	strb	r1, [r4, #21]
 800f746:	b002      	add	sp, #8
 800f748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f74c:	2104      	movs	r1, #4
 800f74e:	4620      	mov	r0, r4
 800f750:	f000 f8e8 	bl	800f924 <ucdr_check_final_buffer_behavior>
 800f754:	b1d0      	cbz	r0, 800f78c <ucdr_serialize_int32_t+0xd0>
 800f756:	7d23      	ldrb	r3, [r4, #20]
 800f758:	2b01      	cmp	r3, #1
 800f75a:	68a3      	ldr	r3, [r4, #8]
 800f75c:	d01c      	beq.n	800f798 <ucdr_serialize_int32_t+0xdc>
 800f75e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f762:	701a      	strb	r2, [r3, #0]
 800f764:	68a3      	ldr	r3, [r4, #8]
 800f766:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f76a:	705a      	strb	r2, [r3, #1]
 800f76c:	68a3      	ldr	r3, [r4, #8]
 800f76e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f772:	709a      	strb	r2, [r3, #2]
 800f774:	68a3      	ldr	r3, [r4, #8]
 800f776:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f77a:	70da      	strb	r2, [r3, #3]
 800f77c:	68a2      	ldr	r2, [r4, #8]
 800f77e:	6923      	ldr	r3, [r4, #16]
 800f780:	3204      	adds	r2, #4
 800f782:	3304      	adds	r3, #4
 800f784:	2104      	movs	r1, #4
 800f786:	60a2      	str	r2, [r4, #8]
 800f788:	6123      	str	r3, [r4, #16]
 800f78a:	7561      	strb	r1, [r4, #21]
 800f78c:	7da0      	ldrb	r0, [r4, #22]
 800f78e:	f080 0001 	eor.w	r0, r0, #1
 800f792:	b002      	add	sp, #8
 800f794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f798:	9a01      	ldr	r2, [sp, #4]
 800f79a:	601a      	str	r2, [r3, #0]
 800f79c:	e7ee      	b.n	800f77c <ucdr_serialize_int32_t+0xc0>
 800f79e:	68a2      	ldr	r2, [r4, #8]
 800f7a0:	6923      	ldr	r3, [r4, #16]
 800f7a2:	7da0      	ldrb	r0, [r4, #22]
 800f7a4:	7567      	strb	r7, [r4, #21]
 800f7a6:	1b92      	subs	r2, r2, r6
 800f7a8:	1b9b      	subs	r3, r3, r6
 800f7aa:	f080 0001 	eor.w	r0, r0, #1
 800f7ae:	60a2      	str	r2, [r4, #8]
 800f7b0:	6123      	str	r3, [r4, #16]
 800f7b2:	b002      	add	sp, #8
 800f7b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7b8:	68a3      	ldr	r3, [r4, #8]
 800f7ba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f7be:	701a      	strb	r2, [r3, #0]
 800f7c0:	68a3      	ldr	r3, [r4, #8]
 800f7c2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f7c6:	701a      	strb	r2, [r3, #0]
 800f7c8:	68a3      	ldr	r3, [r4, #8]
 800f7ca:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f7ce:	701a      	strb	r2, [r3, #0]
 800f7d0:	e7ad      	b.n	800f72e <ucdr_serialize_int32_t+0x72>
 800f7d2:	4628      	mov	r0, r5
 800f7d4:	ad01      	add	r5, sp, #4
 800f7d6:	4629      	mov	r1, r5
 800f7d8:	4632      	mov	r2, r6
 800f7da:	f009 f838 	bl	801884e <memcpy>
 800f7de:	68a0      	ldr	r0, [r4, #8]
 800f7e0:	4642      	mov	r2, r8
 800f7e2:	19a9      	adds	r1, r5, r6
 800f7e4:	f009 f833 	bl	801884e <memcpy>
 800f7e8:	e7a1      	b.n	800f72e <ucdr_serialize_int32_t+0x72>
 800f7ea:	bf00      	nop

0800f7ec <ucdr_deserialize_int32_t>:
 800f7ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7f0:	460d      	mov	r5, r1
 800f7f2:	2104      	movs	r1, #4
 800f7f4:	4604      	mov	r4, r0
 800f7f6:	f000 f8e7 	bl	800f9c8 <ucdr_buffer_alignment>
 800f7fa:	4601      	mov	r1, r0
 800f7fc:	4620      	mov	r0, r4
 800f7fe:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f802:	f000 f925 	bl	800fa50 <ucdr_advance_buffer>
 800f806:	4620      	mov	r0, r4
 800f808:	2104      	movs	r1, #4
 800f80a:	f000 f87f 	bl	800f90c <ucdr_check_buffer_available_for>
 800f80e:	2800      	cmp	r0, #0
 800f810:	d138      	bne.n	800f884 <ucdr_deserialize_int32_t+0x98>
 800f812:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f816:	42b7      	cmp	r7, r6
 800f818:	d92f      	bls.n	800f87a <ucdr_deserialize_int32_t+0x8e>
 800f81a:	6922      	ldr	r2, [r4, #16]
 800f81c:	60a7      	str	r7, [r4, #8]
 800f81e:	1bbf      	subs	r7, r7, r6
 800f820:	443a      	add	r2, r7
 800f822:	f1c7 0904 	rsb	r9, r7, #4
 800f826:	6122      	str	r2, [r4, #16]
 800f828:	4649      	mov	r1, r9
 800f82a:	4620      	mov	r0, r4
 800f82c:	f000 f87a 	bl	800f924 <ucdr_check_final_buffer_behavior>
 800f830:	2800      	cmp	r0, #0
 800f832:	d046      	beq.n	800f8c2 <ucdr_deserialize_int32_t+0xd6>
 800f834:	7d23      	ldrb	r3, [r4, #20]
 800f836:	2b01      	cmp	r3, #1
 800f838:	d05c      	beq.n	800f8f4 <ucdr_deserialize_int32_t+0x108>
 800f83a:	78f3      	ldrb	r3, [r6, #3]
 800f83c:	702b      	strb	r3, [r5, #0]
 800f83e:	2f00      	cmp	r7, #0
 800f840:	d04c      	beq.n	800f8dc <ucdr_deserialize_int32_t+0xf0>
 800f842:	78b3      	ldrb	r3, [r6, #2]
 800f844:	706b      	strb	r3, [r5, #1]
 800f846:	2f01      	cmp	r7, #1
 800f848:	f105 0302 	add.w	r3, r5, #2
 800f84c:	d04a      	beq.n	800f8e4 <ucdr_deserialize_int32_t+0xf8>
 800f84e:	7873      	ldrb	r3, [r6, #1]
 800f850:	70ab      	strb	r3, [r5, #2]
 800f852:	2f02      	cmp	r7, #2
 800f854:	f105 0303 	add.w	r3, r5, #3
 800f858:	d048      	beq.n	800f8ec <ucdr_deserialize_int32_t+0x100>
 800f85a:	7833      	ldrb	r3, [r6, #0]
 800f85c:	70eb      	strb	r3, [r5, #3]
 800f85e:	6923      	ldr	r3, [r4, #16]
 800f860:	68a2      	ldr	r2, [r4, #8]
 800f862:	7da0      	ldrb	r0, [r4, #22]
 800f864:	2104      	movs	r1, #4
 800f866:	3304      	adds	r3, #4
 800f868:	1bdb      	subs	r3, r3, r7
 800f86a:	444a      	add	r2, r9
 800f86c:	7561      	strb	r1, [r4, #21]
 800f86e:	6123      	str	r3, [r4, #16]
 800f870:	60a2      	str	r2, [r4, #8]
 800f872:	f080 0001 	eor.w	r0, r0, #1
 800f876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f87a:	2104      	movs	r1, #4
 800f87c:	4620      	mov	r0, r4
 800f87e:	f000 f851 	bl	800f924 <ucdr_check_final_buffer_behavior>
 800f882:	b1b0      	cbz	r0, 800f8b2 <ucdr_deserialize_int32_t+0xc6>
 800f884:	7d23      	ldrb	r3, [r4, #20]
 800f886:	2b01      	cmp	r3, #1
 800f888:	68a3      	ldr	r3, [r4, #8]
 800f88a:	d017      	beq.n	800f8bc <ucdr_deserialize_int32_t+0xd0>
 800f88c:	78db      	ldrb	r3, [r3, #3]
 800f88e:	702b      	strb	r3, [r5, #0]
 800f890:	68a3      	ldr	r3, [r4, #8]
 800f892:	789b      	ldrb	r3, [r3, #2]
 800f894:	706b      	strb	r3, [r5, #1]
 800f896:	68a3      	ldr	r3, [r4, #8]
 800f898:	785b      	ldrb	r3, [r3, #1]
 800f89a:	70ab      	strb	r3, [r5, #2]
 800f89c:	68a3      	ldr	r3, [r4, #8]
 800f89e:	781b      	ldrb	r3, [r3, #0]
 800f8a0:	70eb      	strb	r3, [r5, #3]
 800f8a2:	68a2      	ldr	r2, [r4, #8]
 800f8a4:	6923      	ldr	r3, [r4, #16]
 800f8a6:	3204      	adds	r2, #4
 800f8a8:	3304      	adds	r3, #4
 800f8aa:	2104      	movs	r1, #4
 800f8ac:	60a2      	str	r2, [r4, #8]
 800f8ae:	6123      	str	r3, [r4, #16]
 800f8b0:	7561      	strb	r1, [r4, #21]
 800f8b2:	7da0      	ldrb	r0, [r4, #22]
 800f8b4:	f080 0001 	eor.w	r0, r0, #1
 800f8b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	602b      	str	r3, [r5, #0]
 800f8c0:	e7ef      	b.n	800f8a2 <ucdr_deserialize_int32_t+0xb6>
 800f8c2:	68a2      	ldr	r2, [r4, #8]
 800f8c4:	6923      	ldr	r3, [r4, #16]
 800f8c6:	7da0      	ldrb	r0, [r4, #22]
 800f8c8:	f884 8015 	strb.w	r8, [r4, #21]
 800f8cc:	1bd2      	subs	r2, r2, r7
 800f8ce:	1bdb      	subs	r3, r3, r7
 800f8d0:	60a2      	str	r2, [r4, #8]
 800f8d2:	6123      	str	r3, [r4, #16]
 800f8d4:	f080 0001 	eor.w	r0, r0, #1
 800f8d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8dc:	68a3      	ldr	r3, [r4, #8]
 800f8de:	789b      	ldrb	r3, [r3, #2]
 800f8e0:	706b      	strb	r3, [r5, #1]
 800f8e2:	1cab      	adds	r3, r5, #2
 800f8e4:	68a2      	ldr	r2, [r4, #8]
 800f8e6:	7852      	ldrb	r2, [r2, #1]
 800f8e8:	f803 2b01 	strb.w	r2, [r3], #1
 800f8ec:	68a2      	ldr	r2, [r4, #8]
 800f8ee:	7812      	ldrb	r2, [r2, #0]
 800f8f0:	701a      	strb	r2, [r3, #0]
 800f8f2:	e7b4      	b.n	800f85e <ucdr_deserialize_int32_t+0x72>
 800f8f4:	4631      	mov	r1, r6
 800f8f6:	463a      	mov	r2, r7
 800f8f8:	4628      	mov	r0, r5
 800f8fa:	f008 ffa8 	bl	801884e <memcpy>
 800f8fe:	68a1      	ldr	r1, [r4, #8]
 800f900:	464a      	mov	r2, r9
 800f902:	19e8      	adds	r0, r5, r7
 800f904:	f008 ffa3 	bl	801884e <memcpy>
 800f908:	e7a9      	b.n	800f85e <ucdr_deserialize_int32_t+0x72>
 800f90a:	bf00      	nop

0800f90c <ucdr_check_buffer_available_for>:
 800f90c:	7d83      	ldrb	r3, [r0, #22]
 800f90e:	b93b      	cbnz	r3, 800f920 <ucdr_check_buffer_available_for+0x14>
 800f910:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800f914:	4419      	add	r1, r3
 800f916:	4288      	cmp	r0, r1
 800f918:	bf34      	ite	cc
 800f91a:	2000      	movcc	r0, #0
 800f91c:	2001      	movcs	r0, #1
 800f91e:	4770      	bx	lr
 800f920:	2000      	movs	r0, #0
 800f922:	4770      	bx	lr

0800f924 <ucdr_check_final_buffer_behavior>:
 800f924:	7d83      	ldrb	r3, [r0, #22]
 800f926:	b943      	cbnz	r3, 800f93a <ucdr_check_final_buffer_behavior+0x16>
 800f928:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800f92c:	4291      	cmp	r1, r2
 800f92e:	b510      	push	{r4, lr}
 800f930:	4604      	mov	r4, r0
 800f932:	d205      	bcs.n	800f940 <ucdr_check_final_buffer_behavior+0x1c>
 800f934:	2301      	movs	r3, #1
 800f936:	4618      	mov	r0, r3
 800f938:	bd10      	pop	{r4, pc}
 800f93a:	2300      	movs	r3, #0
 800f93c:	4618      	mov	r0, r3
 800f93e:	4770      	bx	lr
 800f940:	6982      	ldr	r2, [r0, #24]
 800f942:	b13a      	cbz	r2, 800f954 <ucdr_check_final_buffer_behavior+0x30>
 800f944:	69c1      	ldr	r1, [r0, #28]
 800f946:	4790      	blx	r2
 800f948:	f080 0301 	eor.w	r3, r0, #1
 800f94c:	b2db      	uxtb	r3, r3
 800f94e:	75a0      	strb	r0, [r4, #22]
 800f950:	4618      	mov	r0, r3
 800f952:	bd10      	pop	{r4, pc}
 800f954:	2001      	movs	r0, #1
 800f956:	75a0      	strb	r0, [r4, #22]
 800f958:	e7fa      	b.n	800f950 <ucdr_check_final_buffer_behavior+0x2c>
 800f95a:	bf00      	nop

0800f95c <ucdr_set_on_full_buffer_callback>:
 800f95c:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800f960:	4770      	bx	lr
 800f962:	bf00      	nop

0800f964 <ucdr_init_buffer_origin_offset_endian>:
 800f964:	b430      	push	{r4, r5}
 800f966:	9c02      	ldr	r4, [sp, #8]
 800f968:	f89d 500c 	ldrb.w	r5, [sp, #12]
 800f96c:	6001      	str	r1, [r0, #0]
 800f96e:	440a      	add	r2, r1
 800f970:	60c3      	str	r3, [r0, #12]
 800f972:	4421      	add	r1, r4
 800f974:	441c      	add	r4, r3
 800f976:	2300      	movs	r3, #0
 800f978:	6104      	str	r4, [r0, #16]
 800f97a:	7505      	strb	r5, [r0, #20]
 800f97c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800f980:	bc30      	pop	{r4, r5}
 800f982:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800f986:	7543      	strb	r3, [r0, #21]
 800f988:	7583      	strb	r3, [r0, #22]
 800f98a:	4770      	bx	lr

0800f98c <ucdr_init_buffer_origin_offset>:
 800f98c:	b510      	push	{r4, lr}
 800f98e:	b082      	sub	sp, #8
 800f990:	9c04      	ldr	r4, [sp, #16]
 800f992:	9400      	str	r4, [sp, #0]
 800f994:	2401      	movs	r4, #1
 800f996:	9401      	str	r4, [sp, #4]
 800f998:	f7ff ffe4 	bl	800f964 <ucdr_init_buffer_origin_offset_endian>
 800f99c:	b002      	add	sp, #8
 800f99e:	bd10      	pop	{r4, pc}

0800f9a0 <ucdr_init_buffer_origin>:
 800f9a0:	b510      	push	{r4, lr}
 800f9a2:	b082      	sub	sp, #8
 800f9a4:	2400      	movs	r4, #0
 800f9a6:	9400      	str	r4, [sp, #0]
 800f9a8:	f7ff fff0 	bl	800f98c <ucdr_init_buffer_origin_offset>
 800f9ac:	b002      	add	sp, #8
 800f9ae:	bd10      	pop	{r4, pc}

0800f9b0 <ucdr_init_buffer>:
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	f7ff bff5 	b.w	800f9a0 <ucdr_init_buffer_origin>
 800f9b6:	bf00      	nop

0800f9b8 <ucdr_alignment>:
 800f9b8:	fbb0 f3f1 	udiv	r3, r0, r1
 800f9bc:	fb03 0011 	mls	r0, r3, r1, r0
 800f9c0:	1a08      	subs	r0, r1, r0
 800f9c2:	3901      	subs	r1, #1
 800f9c4:	4008      	ands	r0, r1
 800f9c6:	4770      	bx	lr

0800f9c8 <ucdr_buffer_alignment>:
 800f9c8:	7d43      	ldrb	r3, [r0, #21]
 800f9ca:	428b      	cmp	r3, r1
 800f9cc:	d208      	bcs.n	800f9e0 <ucdr_buffer_alignment+0x18>
 800f9ce:	6903      	ldr	r3, [r0, #16]
 800f9d0:	fbb3 f0f1 	udiv	r0, r3, r1
 800f9d4:	fb01 3010 	mls	r0, r1, r0, r3
 800f9d8:	1a08      	subs	r0, r1, r0
 800f9da:	3901      	subs	r1, #1
 800f9dc:	4008      	ands	r0, r1
 800f9de:	4770      	bx	lr
 800f9e0:	2000      	movs	r0, #0
 800f9e2:	4770      	bx	lr

0800f9e4 <ucdr_align_to>:
 800f9e4:	b570      	push	{r4, r5, r6, lr}
 800f9e6:	4604      	mov	r4, r0
 800f9e8:	460e      	mov	r6, r1
 800f9ea:	f7ff ffed 	bl	800f9c8 <ucdr_buffer_alignment>
 800f9ee:	68a5      	ldr	r5, [r4, #8]
 800f9f0:	6863      	ldr	r3, [r4, #4]
 800f9f2:	6922      	ldr	r2, [r4, #16]
 800f9f4:	7566      	strb	r6, [r4, #21]
 800f9f6:	4405      	add	r5, r0
 800f9f8:	42ab      	cmp	r3, r5
 800f9fa:	4410      	add	r0, r2
 800f9fc:	bf28      	it	cs
 800f9fe:	462b      	movcs	r3, r5
 800fa00:	6120      	str	r0, [r4, #16]
 800fa02:	60a3      	str	r3, [r4, #8]
 800fa04:	bd70      	pop	{r4, r5, r6, pc}
 800fa06:	bf00      	nop

0800fa08 <ucdr_buffer_length>:
 800fa08:	6882      	ldr	r2, [r0, #8]
 800fa0a:	6800      	ldr	r0, [r0, #0]
 800fa0c:	1a10      	subs	r0, r2, r0
 800fa0e:	4770      	bx	lr

0800fa10 <ucdr_buffer_remaining>:
 800fa10:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800fa14:	1a10      	subs	r0, r2, r0
 800fa16:	4770      	bx	lr

0800fa18 <ucdr_check_final_buffer_behavior_array>:
 800fa18:	b538      	push	{r3, r4, r5, lr}
 800fa1a:	7d83      	ldrb	r3, [r0, #22]
 800fa1c:	b963      	cbnz	r3, 800fa38 <ucdr_check_final_buffer_behavior_array+0x20>
 800fa1e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800fa22:	429a      	cmp	r2, r3
 800fa24:	4604      	mov	r4, r0
 800fa26:	460d      	mov	r5, r1
 800fa28:	d308      	bcc.n	800fa3c <ucdr_check_final_buffer_behavior_array+0x24>
 800fa2a:	b139      	cbz	r1, 800fa3c <ucdr_check_final_buffer_behavior_array+0x24>
 800fa2c:	6983      	ldr	r3, [r0, #24]
 800fa2e:	b163      	cbz	r3, 800fa4a <ucdr_check_final_buffer_behavior_array+0x32>
 800fa30:	69c1      	ldr	r1, [r0, #28]
 800fa32:	4798      	blx	r3
 800fa34:	75a0      	strb	r0, [r4, #22]
 800fa36:	b108      	cbz	r0, 800fa3c <ucdr_check_final_buffer_behavior_array+0x24>
 800fa38:	2000      	movs	r0, #0
 800fa3a:	bd38      	pop	{r3, r4, r5, pc}
 800fa3c:	4620      	mov	r0, r4
 800fa3e:	f7ff ffe7 	bl	800fa10 <ucdr_buffer_remaining>
 800fa42:	42a8      	cmp	r0, r5
 800fa44:	bf28      	it	cs
 800fa46:	4628      	movcs	r0, r5
 800fa48:	bd38      	pop	{r3, r4, r5, pc}
 800fa4a:	2301      	movs	r3, #1
 800fa4c:	7583      	strb	r3, [r0, #22]
 800fa4e:	e7f3      	b.n	800fa38 <ucdr_check_final_buffer_behavior_array+0x20>

0800fa50 <ucdr_advance_buffer>:
 800fa50:	b538      	push	{r3, r4, r5, lr}
 800fa52:	4604      	mov	r4, r0
 800fa54:	460d      	mov	r5, r1
 800fa56:	f7ff ff59 	bl	800f90c <ucdr_check_buffer_available_for>
 800fa5a:	b178      	cbz	r0, 800fa7c <ucdr_advance_buffer+0x2c>
 800fa5c:	68a3      	ldr	r3, [r4, #8]
 800fa5e:	6921      	ldr	r1, [r4, #16]
 800fa60:	442b      	add	r3, r5
 800fa62:	60a3      	str	r3, [r4, #8]
 800fa64:	2301      	movs	r3, #1
 800fa66:	4429      	add	r1, r5
 800fa68:	7563      	strb	r3, [r4, #21]
 800fa6a:	6121      	str	r1, [r4, #16]
 800fa6c:	bd38      	pop	{r3, r4, r5, pc}
 800fa6e:	68a2      	ldr	r2, [r4, #8]
 800fa70:	6923      	ldr	r3, [r4, #16]
 800fa72:	4402      	add	r2, r0
 800fa74:	4403      	add	r3, r0
 800fa76:	1a2d      	subs	r5, r5, r0
 800fa78:	60a2      	str	r2, [r4, #8]
 800fa7a:	6123      	str	r3, [r4, #16]
 800fa7c:	2201      	movs	r2, #1
 800fa7e:	4629      	mov	r1, r5
 800fa80:	4620      	mov	r0, r4
 800fa82:	f7ff ffc9 	bl	800fa18 <ucdr_check_final_buffer_behavior_array>
 800fa86:	2800      	cmp	r0, #0
 800fa88:	d1f1      	bne.n	800fa6e <ucdr_advance_buffer+0x1e>
 800fa8a:	2301      	movs	r3, #1
 800fa8c:	7563      	strb	r3, [r4, #21]
 800fa8e:	bd38      	pop	{r3, r4, r5, pc}

0800fa90 <uxr_buffer_delete_entity>:
 800fa90:	b530      	push	{r4, r5, lr}
 800fa92:	b08f      	sub	sp, #60	; 0x3c
 800fa94:	2403      	movs	r4, #3
 800fa96:	2500      	movs	r5, #0
 800fa98:	e9cd 4500 	strd	r4, r5, [sp]
 800fa9c:	9202      	str	r2, [sp, #8]
 800fa9e:	ab06      	add	r3, sp, #24
 800faa0:	2204      	movs	r2, #4
 800faa2:	9103      	str	r1, [sp, #12]
 800faa4:	4604      	mov	r4, r0
 800faa6:	f001 fa85 	bl	8010fb4 <uxr_prepare_stream_to_write_submessage>
 800faaa:	b918      	cbnz	r0, 800fab4 <uxr_buffer_delete_entity+0x24>
 800faac:	4604      	mov	r4, r0
 800faae:	4620      	mov	r0, r4
 800fab0:	b00f      	add	sp, #60	; 0x3c
 800fab2:	bd30      	pop	{r4, r5, pc}
 800fab4:	9902      	ldr	r1, [sp, #8]
 800fab6:	aa05      	add	r2, sp, #20
 800fab8:	4620      	mov	r0, r4
 800faba:	f001 fbb5 	bl	8011228 <uxr_init_base_object_request>
 800fabe:	a905      	add	r1, sp, #20
 800fac0:	4604      	mov	r4, r0
 800fac2:	a806      	add	r0, sp, #24
 800fac4:	f002 fdf0 	bl	80126a8 <uxr_serialize_DELETE_Payload>
 800fac8:	4620      	mov	r0, r4
 800faca:	b00f      	add	sp, #60	; 0x3c
 800facc:	bd30      	pop	{r4, r5, pc}
 800face:	bf00      	nop

0800fad0 <uxr_common_create_entity>:
 800fad0:	b530      	push	{r4, r5, lr}
 800fad2:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800fad6:	b08d      	sub	sp, #52	; 0x34
 800fad8:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800fadc:	2d01      	cmp	r5, #1
 800fade:	bf0c      	ite	eq
 800fae0:	f003 0201 	andeq.w	r2, r3, #1
 800fae4:	2200      	movne	r2, #0
 800fae6:	330e      	adds	r3, #14
 800fae8:	4604      	mov	r4, r0
 800faea:	441a      	add	r2, r3
 800faec:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 800faf0:	9001      	str	r0, [sp, #4]
 800faf2:	2101      	movs	r1, #1
 800faf4:	9100      	str	r1, [sp, #0]
 800faf6:	b292      	uxth	r2, r2
 800faf8:	9903      	ldr	r1, [sp, #12]
 800fafa:	ab04      	add	r3, sp, #16
 800fafc:	4620      	mov	r0, r4
 800fafe:	f001 fa59 	bl	8010fb4 <uxr_prepare_stream_to_write_submessage>
 800fb02:	b918      	cbnz	r0, 800fb0c <uxr_common_create_entity+0x3c>
 800fb04:	4604      	mov	r4, r0
 800fb06:	4620      	mov	r0, r4
 800fb08:	b00d      	add	sp, #52	; 0x34
 800fb0a:	bd30      	pop	{r4, r5, pc}
 800fb0c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800fb0e:	9902      	ldr	r1, [sp, #8]
 800fb10:	4620      	mov	r0, r4
 800fb12:	f001 fb89 	bl	8011228 <uxr_init_base_object_request>
 800fb16:	9911      	ldr	r1, [sp, #68]	; 0x44
 800fb18:	4604      	mov	r4, r0
 800fb1a:	a804      	add	r0, sp, #16
 800fb1c:	f002 fd18 	bl	8012550 <uxr_serialize_CREATE_Payload>
 800fb20:	4620      	mov	r0, r4
 800fb22:	b00d      	add	sp, #52	; 0x34
 800fb24:	bd30      	pop	{r4, r5, pc}
 800fb26:	bf00      	nop

0800fb28 <uxr_buffer_create_participant_bin>:
 800fb28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb2a:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 800fb2e:	ac11      	add	r4, sp, #68	; 0x44
 800fb30:	9103      	str	r1, [sp, #12]
 800fb32:	9e9c      	ldr	r6, [sp, #624]	; 0x270
 800fb34:	f8a4 3210 	strh.w	r3, [r4, #528]	; 0x210
 800fb38:	2103      	movs	r1, #3
 800fb3a:	7221      	strb	r1, [r4, #8]
 800fb3c:	2301      	movs	r3, #1
 800fb3e:	2100      	movs	r1, #0
 800fb40:	7123      	strb	r3, [r4, #4]
 800fb42:	f89d 7274 	ldrb.w	r7, [sp, #628]	; 0x274
 800fb46:	9202      	str	r2, [sp, #8]
 800fb48:	4605      	mov	r5, r0
 800fb4a:	f88d 1014 	strb.w	r1, [sp, #20]
 800fb4e:	b1ce      	cbz	r6, 800fb84 <uxr_buffer_create_participant_bin+0x5c>
 800fb50:	f88d 301c 	strb.w	r3, [sp, #28]
 800fb54:	9608      	str	r6, [sp, #32]
 800fb56:	a809      	add	r0, sp, #36	; 0x24
 800fb58:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fb5c:	a915      	add	r1, sp, #84	; 0x54
 800fb5e:	f7ff ff27 	bl	800f9b0 <ucdr_init_buffer>
 800fb62:	a905      	add	r1, sp, #20
 800fb64:	a809      	add	r0, sp, #36	; 0x24
 800fb66:	f002 f8bb 	bl	8011ce0 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800fb6a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800fb6c:	9401      	str	r4, [sp, #4]
 800fb6e:	b283      	uxth	r3, r0
 800fb70:	9700      	str	r7, [sp, #0]
 800fb72:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800fb76:	60e0      	str	r0, [r4, #12]
 800fb78:	4628      	mov	r0, r5
 800fb7a:	f7ff ffa9 	bl	800fad0 <uxr_common_create_entity>
 800fb7e:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
 800fb82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb84:	f88d 601c 	strb.w	r6, [sp, #28]
 800fb88:	e7e5      	b.n	800fb56 <uxr_buffer_create_participant_bin+0x2e>
 800fb8a:	bf00      	nop

0800fb8c <uxr_buffer_create_topic_bin>:
 800fb8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb8e:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800fb92:	ac13      	add	r4, sp, #76	; 0x4c
 800fb94:	4605      	mov	r5, r0
 800fb96:	9105      	str	r1, [sp, #20]
 800fb98:	4618      	mov	r0, r3
 800fb9a:	a997      	add	r1, sp, #604	; 0x25c
 800fb9c:	2602      	movs	r6, #2
 800fb9e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fba2:	f89d 7280 	ldrb.w	r7, [sp, #640]	; 0x280
 800fba6:	f88d 6050 	strb.w	r6, [sp, #80]	; 0x50
 800fbaa:	9e9f      	ldr	r6, [sp, #636]	; 0x27c
 800fbac:	f000 f994 	bl	800fed8 <uxr_object_id_to_raw>
 800fbb0:	9a9e      	ldr	r2, [sp, #632]	; 0x278
 800fbb2:	9206      	str	r2, [sp, #24]
 800fbb4:	2303      	movs	r3, #3
 800fbb6:	2101      	movs	r1, #1
 800fbb8:	7223      	strb	r3, [r4, #8]
 800fbba:	a80b      	add	r0, sp, #44	; 0x2c
 800fbbc:	2300      	movs	r3, #0
 800fbbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fbc2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 800fbc6:	a917      	add	r1, sp, #92	; 0x5c
 800fbc8:	f88d 301c 	strb.w	r3, [sp, #28]
 800fbcc:	960a      	str	r6, [sp, #40]	; 0x28
 800fbce:	f7ff feef 	bl	800f9b0 <ucdr_init_buffer>
 800fbd2:	a906      	add	r1, sp, #24
 800fbd4:	a80b      	add	r0, sp, #44	; 0x2c
 800fbd6:	f002 f8a5 	bl	8011d24 <uxr_serialize_OBJK_Topic_Binary>
 800fbda:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800fbdc:	9401      	str	r4, [sp, #4]
 800fbde:	9700      	str	r7, [sp, #0]
 800fbe0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fbe4:	4628      	mov	r0, r5
 800fbe6:	b2b3      	uxth	r3, r6
 800fbe8:	60e6      	str	r6, [r4, #12]
 800fbea:	f7ff ff71 	bl	800fad0 <uxr_common_create_entity>
 800fbee:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800fbf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fbf4 <uxr_buffer_create_publisher_bin>:
 800fbf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbf6:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 800fbfa:	ac0e      	add	r4, sp, #56	; 0x38
 800fbfc:	4605      	mov	r5, r0
 800fbfe:	9105      	str	r1, [sp, #20]
 800fc00:	4618      	mov	r0, r3
 800fc02:	2603      	movs	r6, #3
 800fc04:	a992      	add	r1, sp, #584	; 0x248
 800fc06:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fc0a:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 800fc0e:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 800fc12:	f000 f961 	bl	800fed8 <uxr_object_id_to_raw>
 800fc16:	2300      	movs	r3, #0
 800fc18:	a806      	add	r0, sp, #24
 800fc1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fc1e:	a912      	add	r1, sp, #72	; 0x48
 800fc20:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800fc24:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800fc28:	7226      	strb	r6, [r4, #8]
 800fc2a:	f7ff fec1 	bl	800f9b0 <ucdr_init_buffer>
 800fc2e:	a993      	add	r1, sp, #588	; 0x24c
 800fc30:	a806      	add	r0, sp, #24
 800fc32:	f002 f92b 	bl	8011e8c <uxr_serialize_OBJK_Publisher_Binary>
 800fc36:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800fc38:	9700      	str	r7, [sp, #0]
 800fc3a:	9401      	str	r4, [sp, #4]
 800fc3c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fc40:	4628      	mov	r0, r5
 800fc42:	b2b3      	uxth	r3, r6
 800fc44:	60e6      	str	r6, [r4, #12]
 800fc46:	f7ff ff43 	bl	800fad0 <uxr_common_create_entity>
 800fc4a:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 800fc4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fc50 <uxr_buffer_create_subscriber_bin>:
 800fc50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc52:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 800fc56:	ac0e      	add	r4, sp, #56	; 0x38
 800fc58:	4605      	mov	r5, r0
 800fc5a:	9105      	str	r1, [sp, #20]
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	a992      	add	r1, sp, #584	; 0x248
 800fc60:	2604      	movs	r6, #4
 800fc62:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fc66:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 800fc6a:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 800fc6e:	f000 f933 	bl	800fed8 <uxr_object_id_to_raw>
 800fc72:	2103      	movs	r1, #3
 800fc74:	2300      	movs	r3, #0
 800fc76:	a806      	add	r0, sp, #24
 800fc78:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fc7c:	7221      	strb	r1, [r4, #8]
 800fc7e:	a912      	add	r1, sp, #72	; 0x48
 800fc80:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800fc84:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800fc88:	f7ff fe92 	bl	800f9b0 <ucdr_init_buffer>
 800fc8c:	a993      	add	r1, sp, #588	; 0x24c
 800fc8e:	a806      	add	r0, sp, #24
 800fc90:	f002 f9ac 	bl	8011fec <uxr_serialize_OBJK_Subscriber_Binary>
 800fc94:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800fc96:	9700      	str	r7, [sp, #0]
 800fc98:	9401      	str	r4, [sp, #4]
 800fc9a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fc9e:	4628      	mov	r0, r5
 800fca0:	b2b3      	uxth	r3, r6
 800fca2:	60e6      	str	r6, [r4, #12]
 800fca4:	f7ff ff14 	bl	800fad0 <uxr_common_create_entity>
 800fca8:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 800fcac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fcae:	bf00      	nop

0800fcb0 <uxr_buffer_create_datawriter_bin>:
 800fcb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcb4:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800fcb8:	ac1d      	add	r4, sp, #116	; 0x74
 800fcba:	2505      	movs	r5, #5
 800fcbc:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fcc0:	9105      	str	r1, [sp, #20]
 800fcc2:	4606      	mov	r6, r0
 800fcc4:	a9a1      	add	r1, sp, #644	; 0x284
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	7125      	strb	r5, [r4, #4]
 800fcca:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 800fcce:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 800fcd2:	2703      	movs	r7, #3
 800fcd4:	f000 f900 	bl	800fed8 <uxr_object_id_to_raw>
 800fcd8:	a90e      	add	r1, sp, #56	; 0x38
 800fcda:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 800fcdc:	7227      	strb	r7, [r4, #8]
 800fcde:	f000 f8fb 	bl	800fed8 <uxr_object_id_to_raw>
 800fce2:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 800fce6:	f89d 12a5 	ldrb.w	r1, [sp, #677]	; 0x2a5
 800fcea:	3d00      	subs	r5, #0
 800fcec:	f04f 0300 	mov.w	r3, #0
 800fcf0:	bf18      	it	ne
 800fcf2:	2501      	movne	r5, #1
 800fcf4:	2201      	movs	r2, #1
 800fcf6:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 800fcfa:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 800fcfe:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800fd02:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800fd06:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800fd0a:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800fd0e:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800fd12:	bb89      	cbnz	r1, 800fd78 <uxr_buffer_create_datawriter_bin+0xc8>
 800fd14:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800fd18:	f04f 0e23 	mov.w	lr, #35	; 0x23
 800fd1c:	f04f 0c13 	mov.w	ip, #19
 800fd20:	250b      	movs	r5, #11
 800fd22:	2221      	movs	r2, #33	; 0x21
 800fd24:	2111      	movs	r1, #17
 800fd26:	2009      	movs	r0, #9
 800fd28:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 800fd2c:	b923      	cbnz	r3, 800fd38 <uxr_buffer_create_datawriter_bin+0x88>
 800fd2e:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 800fd32:	4672      	mov	r2, lr
 800fd34:	4661      	mov	r1, ip
 800fd36:	4628      	mov	r0, r5
 800fd38:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 800fd3c:	2b01      	cmp	r3, #1
 800fd3e:	d025      	beq.n	800fd8c <uxr_buffer_create_datawriter_bin+0xdc>
 800fd40:	2b03      	cmp	r3, #3
 800fd42:	d029      	beq.n	800fd98 <uxr_buffer_create_datawriter_bin+0xe8>
 800fd44:	b32b      	cbz	r3, 800fd92 <uxr_buffer_create_datawriter_bin+0xe2>
 800fd46:	a806      	add	r0, sp, #24
 800fd48:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fd4c:	a921      	add	r1, sp, #132	; 0x84
 800fd4e:	f7ff fe2f 	bl	800f9b0 <ucdr_init_buffer>
 800fd52:	a90e      	add	r1, sp, #56	; 0x38
 800fd54:	a806      	add	r0, sp, #24
 800fd56:	f002 f9fb 	bl	8012150 <uxr_serialize_OBJK_DataWriter_Binary>
 800fd5a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fd5c:	9401      	str	r4, [sp, #4]
 800fd5e:	b283      	uxth	r3, r0
 800fd60:	f8cd 8000 	str.w	r8, [sp]
 800fd64:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fd68:	60e0      	str	r0, [r4, #12]
 800fd6a:	4630      	mov	r0, r6
 800fd6c:	f7ff feb0 	bl	800fad0 <uxr_common_create_entity>
 800fd70:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800fd74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd78:	f04f 0e22 	mov.w	lr, #34	; 0x22
 800fd7c:	f04f 0c12 	mov.w	ip, #18
 800fd80:	250a      	movs	r5, #10
 800fd82:	2220      	movs	r2, #32
 800fd84:	2110      	movs	r1, #16
 800fd86:	2008      	movs	r0, #8
 800fd88:	2702      	movs	r7, #2
 800fd8a:	e7cd      	b.n	800fd28 <uxr_buffer_create_datawriter_bin+0x78>
 800fd8c:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800fd90:	e7d9      	b.n	800fd46 <uxr_buffer_create_datawriter_bin+0x96>
 800fd92:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800fd96:	e7d6      	b.n	800fd46 <uxr_buffer_create_datawriter_bin+0x96>
 800fd98:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800fd9c:	e7d3      	b.n	800fd46 <uxr_buffer_create_datawriter_bin+0x96>
 800fd9e:	bf00      	nop

0800fda0 <uxr_buffer_create_datareader_bin>:
 800fda0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fda4:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800fda8:	ac1f      	add	r4, sp, #124	; 0x7c
 800fdaa:	2506      	movs	r5, #6
 800fdac:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800fdb0:	9105      	str	r1, [sp, #20]
 800fdb2:	4606      	mov	r6, r0
 800fdb4:	a9a3      	add	r1, sp, #652	; 0x28c
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	7125      	strb	r5, [r4, #4]
 800fdba:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	; 0x2b0
 800fdbe:	f89d 82b4 	ldrb.w	r8, [sp, #692]	; 0x2b4
 800fdc2:	2703      	movs	r7, #3
 800fdc4:	f000 f888 	bl	800fed8 <uxr_object_id_to_raw>
 800fdc8:	a90e      	add	r1, sp, #56	; 0x38
 800fdca:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 800fdcc:	7227      	strb	r7, [r4, #8]
 800fdce:	f000 f883 	bl	800fed8 <uxr_object_id_to_raw>
 800fdd2:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 800fdd6:	f89d 12ad 	ldrb.w	r1, [sp, #685]	; 0x2ad
 800fdda:	3d00      	subs	r5, #0
 800fddc:	f04f 0300 	mov.w	r3, #0
 800fde0:	bf18      	it	ne
 800fde2:	2501      	movne	r5, #1
 800fde4:	2201      	movs	r2, #1
 800fde6:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 800fdea:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 800fdee:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 800fdf2:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800fdf6:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800fdfa:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800fdfe:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800fe02:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800fe06:	bb89      	cbnz	r1, 800fe6c <uxr_buffer_create_datareader_bin+0xcc>
 800fe08:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800fe0c:	f04f 0e23 	mov.w	lr, #35	; 0x23
 800fe10:	f04f 0c13 	mov.w	ip, #19
 800fe14:	250b      	movs	r5, #11
 800fe16:	2221      	movs	r2, #33	; 0x21
 800fe18:	2111      	movs	r1, #17
 800fe1a:	2009      	movs	r0, #9
 800fe1c:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 800fe20:	b923      	cbnz	r3, 800fe2c <uxr_buffer_create_datareader_bin+0x8c>
 800fe22:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 800fe26:	4672      	mov	r2, lr
 800fe28:	4661      	mov	r1, ip
 800fe2a:	4628      	mov	r0, r5
 800fe2c:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 800fe30:	2b01      	cmp	r3, #1
 800fe32:	d025      	beq.n	800fe80 <uxr_buffer_create_datareader_bin+0xe0>
 800fe34:	2b03      	cmp	r3, #3
 800fe36:	d029      	beq.n	800fe8c <uxr_buffer_create_datareader_bin+0xec>
 800fe38:	b32b      	cbz	r3, 800fe86 <uxr_buffer_create_datareader_bin+0xe6>
 800fe3a:	a806      	add	r0, sp, #24
 800fe3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fe40:	a923      	add	r1, sp, #140	; 0x8c
 800fe42:	f7ff fdb5 	bl	800f9b0 <ucdr_init_buffer>
 800fe46:	a90e      	add	r1, sp, #56	; 0x38
 800fe48:	a806      	add	r0, sp, #24
 800fe4a:	f002 f945 	bl	80120d8 <uxr_serialize_OBJK_DataReader_Binary>
 800fe4e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fe50:	9401      	str	r4, [sp, #4]
 800fe52:	b283      	uxth	r3, r0
 800fe54:	f8cd 8000 	str.w	r8, [sp]
 800fe58:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800fe5c:	60e0      	str	r0, [r4, #12]
 800fe5e:	4630      	mov	r0, r6
 800fe60:	f7ff fe36 	bl	800fad0 <uxr_common_create_entity>
 800fe64:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800fe68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe6c:	f04f 0e22 	mov.w	lr, #34	; 0x22
 800fe70:	f04f 0c12 	mov.w	ip, #18
 800fe74:	250a      	movs	r5, #10
 800fe76:	2220      	movs	r2, #32
 800fe78:	2110      	movs	r1, #16
 800fe7a:	2008      	movs	r0, #8
 800fe7c:	2702      	movs	r7, #2
 800fe7e:	e7cd      	b.n	800fe1c <uxr_buffer_create_datareader_bin+0x7c>
 800fe80:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800fe84:	e7d9      	b.n	800fe3a <uxr_buffer_create_datareader_bin+0x9a>
 800fe86:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800fe8a:	e7d6      	b.n	800fe3a <uxr_buffer_create_datareader_bin+0x9a>
 800fe8c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800fe90:	e7d3      	b.n	800fe3a <uxr_buffer_create_datareader_bin+0x9a>
 800fe92:	bf00      	nop

0800fe94 <uxr_object_id>:
 800fe94:	b082      	sub	sp, #8
 800fe96:	2300      	movs	r3, #0
 800fe98:	f88d 1006 	strb.w	r1, [sp, #6]
 800fe9c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800fea0:	f360 030f 	bfi	r3, r0, #0, #16
 800fea4:	f362 431f 	bfi	r3, r2, #16, #16
 800fea8:	4618      	mov	r0, r3
 800feaa:	b002      	add	sp, #8
 800feac:	4770      	bx	lr
 800feae:	bf00      	nop

0800feb0 <uxr_object_id_from_raw>:
 800feb0:	7843      	ldrb	r3, [r0, #1]
 800feb2:	7801      	ldrb	r1, [r0, #0]
 800feb4:	b082      	sub	sp, #8
 800feb6:	f003 000f 	and.w	r0, r3, #15
 800feba:	f88d 0006 	strb.w	r0, [sp, #6]
 800febe:	091b      	lsrs	r3, r3, #4
 800fec0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800fec4:	2200      	movs	r2, #0
 800fec6:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800feca:	f363 020f 	bfi	r2, r3, #0, #16
 800fece:	f361 421f 	bfi	r2, r1, #16, #16
 800fed2:	4610      	mov	r0, r2
 800fed4:	b002      	add	sp, #8
 800fed6:	4770      	bx	lr

0800fed8 <uxr_object_id_to_raw>:
 800fed8:	4602      	mov	r2, r0
 800feda:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800fede:	b082      	sub	sp, #8
 800fee0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800fee4:	f3c2 120b 	ubfx	r2, r2, #4, #12
 800fee8:	700a      	strb	r2, [r1, #0]
 800feea:	704b      	strb	r3, [r1, #1]
 800feec:	b002      	add	sp, #8
 800feee:	4770      	bx	lr

0800fef0 <uxr_buffer_request_data>:
 800fef0:	b530      	push	{r4, r5, lr}
 800fef2:	b095      	sub	sp, #84	; 0x54
 800fef4:	4604      	mov	r4, r0
 800fef6:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800fef8:	9105      	str	r1, [sp, #20]
 800fefa:	2d00      	cmp	r5, #0
 800fefc:	bf14      	ite	ne
 800fefe:	2101      	movne	r1, #1
 800ff00:	2100      	moveq	r1, #0
 800ff02:	9204      	str	r2, [sp, #16]
 800ff04:	f04f 0200 	mov.w	r2, #0
 800ff08:	9303      	str	r3, [sp, #12]
 800ff0a:	f88d 301c 	strb.w	r3, [sp, #28]
 800ff0e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 800ff12:	f88d 201d 	strb.w	r2, [sp, #29]
 800ff16:	f88d 201e 	strb.w	r2, [sp, #30]
 800ff1a:	d021      	beq.n	800ff60 <uxr_buffer_request_data+0x70>
 800ff1c:	686a      	ldr	r2, [r5, #4]
 800ff1e:	682b      	ldr	r3, [r5, #0]
 800ff20:	f8cd 202a 	str.w	r2, [sp, #42]	; 0x2a
 800ff24:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 800ff28:	2210      	movs	r2, #16
 800ff2a:	2000      	movs	r0, #0
 800ff2c:	2108      	movs	r1, #8
 800ff2e:	e9cd 1000 	strd	r1, r0, [sp]
 800ff32:	ab0c      	add	r3, sp, #48	; 0x30
 800ff34:	9905      	ldr	r1, [sp, #20]
 800ff36:	4620      	mov	r0, r4
 800ff38:	f001 f83c 	bl	8010fb4 <uxr_prepare_stream_to_write_submessage>
 800ff3c:	b918      	cbnz	r0, 800ff46 <uxr_buffer_request_data+0x56>
 800ff3e:	4604      	mov	r4, r0
 800ff40:	4620      	mov	r0, r4
 800ff42:	b015      	add	sp, #84	; 0x54
 800ff44:	bd30      	pop	{r4, r5, pc}
 800ff46:	9904      	ldr	r1, [sp, #16]
 800ff48:	aa06      	add	r2, sp, #24
 800ff4a:	4620      	mov	r0, r4
 800ff4c:	f001 f96c 	bl	8011228 <uxr_init_base_object_request>
 800ff50:	a906      	add	r1, sp, #24
 800ff52:	4604      	mov	r4, r0
 800ff54:	a80c      	add	r0, sp, #48	; 0x30
 800ff56:	f002 fc51 	bl	80127fc <uxr_serialize_READ_DATA_Payload>
 800ff5a:	4620      	mov	r0, r4
 800ff5c:	b015      	add	sp, #84	; 0x54
 800ff5e:	bd30      	pop	{r4, r5, pc}
 800ff60:	2208      	movs	r2, #8
 800ff62:	e7e2      	b.n	800ff2a <uxr_buffer_request_data+0x3a>

0800ff64 <uxr_buffer_cancel_data>:
 800ff64:	b530      	push	{r4, r5, lr}
 800ff66:	b095      	sub	sp, #84	; 0x54
 800ff68:	2400      	movs	r4, #0
 800ff6a:	2308      	movs	r3, #8
 800ff6c:	e9cd 4201 	strd	r4, r2, [sp, #4]
 800ff70:	9300      	str	r3, [sp, #0]
 800ff72:	9205      	str	r2, [sp, #20]
 800ff74:	2501      	movs	r5, #1
 800ff76:	ab0c      	add	r3, sp, #48	; 0x30
 800ff78:	2210      	movs	r2, #16
 800ff7a:	f8ad 401c 	strh.w	r4, [sp, #28]
 800ff7e:	f88d 401e 	strb.w	r4, [sp, #30]
 800ff82:	f8cd 4026 	str.w	r4, [sp, #38]	; 0x26
 800ff86:	f8cd 402a 	str.w	r4, [sp, #42]	; 0x2a
 800ff8a:	9103      	str	r1, [sp, #12]
 800ff8c:	4604      	mov	r4, r0
 800ff8e:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 800ff92:	f001 f80f 	bl	8010fb4 <uxr_prepare_stream_to_write_submessage>
 800ff96:	b918      	cbnz	r0, 800ffa0 <uxr_buffer_cancel_data+0x3c>
 800ff98:	4604      	mov	r4, r0
 800ff9a:	4620      	mov	r0, r4
 800ff9c:	b015      	add	sp, #84	; 0x54
 800ff9e:	bd30      	pop	{r4, r5, pc}
 800ffa0:	9905      	ldr	r1, [sp, #20]
 800ffa2:	aa06      	add	r2, sp, #24
 800ffa4:	4620      	mov	r0, r4
 800ffa6:	f001 f93f 	bl	8011228 <uxr_init_base_object_request>
 800ffaa:	a906      	add	r1, sp, #24
 800ffac:	4604      	mov	r4, r0
 800ffae:	a80c      	add	r0, sp, #48	; 0x30
 800ffb0:	f002 fc24 	bl	80127fc <uxr_serialize_READ_DATA_Payload>
 800ffb4:	4620      	mov	r0, r4
 800ffb6:	b015      	add	sp, #84	; 0x54
 800ffb8:	bd30      	pop	{r4, r5, pc}
 800ffba:	bf00      	nop

0800ffbc <read_submessage_format>:
 800ffbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ffc0:	b095      	sub	sp, #84	; 0x54
 800ffc2:	f8bd 9078 	ldrh.w	r9, [sp, #120]	; 0x78
 800ffc6:	b113      	cbz	r3, 800ffce <read_submessage_format+0x12>
 800ffc8:	b015      	add	sp, #84	; 0x54
 800ffca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ffce:	460c      	mov	r4, r1
 800ffd0:	4616      	mov	r6, r2
 800ffd2:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800ffd6:	461d      	mov	r5, r3
 800ffd8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ffda:	9304      	str	r3, [sp, #16]
 800ffdc:	1a52      	subs	r2, r2, r1
 800ffde:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ffe0:	9305      	str	r3, [sp, #20]
 800ffe2:	4607      	mov	r7, r0
 800ffe4:	a80c      	add	r0, sp, #48	; 0x30
 800ffe6:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 800ffea:	f7ff fce1 	bl	800f9b0 <ucdr_init_buffer>
 800ffee:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800fff2:	a80c      	add	r0, sp, #48	; 0x30
 800fff4:	f7ff fcb2 	bl	800f95c <ucdr_set_on_full_buffer_callback>
 800fff8:	69e3      	ldr	r3, [r4, #28]
 800fffa:	b193      	cbz	r3, 8010022 <read_submessage_format+0x66>
 800fffc:	f1b8 0f07 	cmp.w	r8, #7
 8010000:	751d      	strb	r5, [r3, #20]
 8010002:	d03e      	beq.n	8010082 <read_submessage_format+0xc6>
 8010004:	f1b8 0f08 	cmp.w	r8, #8
 8010008:	d02c      	beq.n	8010064 <read_submessage_format+0xa8>
 801000a:	f1b8 0f06 	cmp.w	r8, #6
 801000e:	d011      	beq.n	8010034 <read_submessage_format+0x78>
 8010010:	2201      	movs	r2, #1
 8010012:	751a      	strb	r2, [r3, #20]
 8010014:	4631      	mov	r1, r6
 8010016:	4620      	mov	r0, r4
 8010018:	f7ff fd1a 	bl	800fa50 <ucdr_advance_buffer>
 801001c:	b015      	add	sp, #84	; 0x54
 801001e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010022:	f1b8 0f07 	cmp.w	r8, #7
 8010026:	d02c      	beq.n	8010082 <read_submessage_format+0xc6>
 8010028:	f1b8 0f08 	cmp.w	r8, #8
 801002c:	d01a      	beq.n	8010064 <read_submessage_format+0xa8>
 801002e:	f1b8 0f06 	cmp.w	r8, #6
 8010032:	d1ef      	bne.n	8010014 <read_submessage_format+0x58>
 8010034:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 8010038:	b18d      	cbz	r5, 801005e <read_submessage_format+0xa2>
 801003a:	2306      	movs	r3, #6
 801003c:	f88d 3016 	strb.w	r3, [sp, #22]
 8010040:	aa0c      	add	r2, sp, #48	; 0x30
 8010042:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010046:	9302      	str	r3, [sp, #8]
 8010048:	9200      	str	r2, [sp, #0]
 801004a:	9b04      	ldr	r3, [sp, #16]
 801004c:	9905      	ldr	r1, [sp, #20]
 801004e:	9601      	str	r6, [sp, #4]
 8010050:	464a      	mov	r2, r9
 8010052:	4638      	mov	r0, r7
 8010054:	47a8      	blx	r5
 8010056:	2301      	movs	r3, #1
 8010058:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 801005c:	69e3      	ldr	r3, [r4, #28]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d1d6      	bne.n	8010010 <read_submessage_format+0x54>
 8010062:	e7d7      	b.n	8010014 <read_submessage_format+0x58>
 8010064:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8010068:	2a00      	cmp	r2, #0
 801006a:	d0f8      	beq.n	801005e <read_submessage_format+0xa2>
 801006c:	a906      	add	r1, sp, #24
 801006e:	a80c      	add	r0, sp, #48	; 0x30
 8010070:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8010072:	f002 fc89 	bl	8012988 <uxr_deserialize_SampleIdentity>
 8010076:	2800      	cmp	r0, #0
 8010078:	d13c      	bne.n	80100f4 <read_submessage_format+0x138>
 801007a:	69e3      	ldr	r3, [r4, #28]
 801007c:	2b00      	cmp	r3, #0
 801007e:	d1c7      	bne.n	8010010 <read_submessage_format+0x54>
 8010080:	e7c8      	b.n	8010014 <read_submessage_format+0x58>
 8010082:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8010086:	b132      	cbz	r2, 8010096 <read_submessage_format+0xda>
 8010088:	a906      	add	r1, sp, #24
 801008a:	a80c      	add	r0, sp, #48	; 0x30
 801008c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801008e:	f002 f939 	bl	8012304 <uxr_deserialize_BaseObjectRequest>
 8010092:	b930      	cbnz	r0, 80100a2 <read_submessage_format+0xe6>
 8010094:	69e3      	ldr	r3, [r4, #28]
 8010096:	68a2      	ldr	r2, [r4, #8]
 8010098:	4432      	add	r2, r6
 801009a:	60a2      	str	r2, [r4, #8]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d1b7      	bne.n	8010010 <read_submessage_format+0x54>
 80100a0:	e7b8      	b.n	8010014 <read_submessage_format+0x58>
 80100a2:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 80100a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80100a8:	1a52      	subs	r2, r2, r1
 80100aa:	a80c      	add	r0, sp, #48	; 0x30
 80100ac:	1aed      	subs	r5, r5, r3
 80100ae:	f7ff fc7f 	bl	800f9b0 <ucdr_init_buffer>
 80100b2:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80100b6:	a80c      	add	r0, sp, #48	; 0x30
 80100b8:	f7ff fc50 	bl	800f95c <ucdr_set_on_full_buffer_callback>
 80100bc:	4435      	add	r5, r6
 80100be:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80100c2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80100c6:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80100ca:	9002      	str	r0, [sp, #8]
 80100cc:	2207      	movs	r2, #7
 80100ce:	f88d 2016 	strb.w	r2, [sp, #22]
 80100d2:	b2ad      	uxth	r5, r5
 80100d4:	aa0c      	add	r2, sp, #48	; 0x30
 80100d6:	9200      	str	r2, [sp, #0]
 80100d8:	9501      	str	r5, [sp, #4]
 80100da:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80100de:	b29b      	uxth	r3, r3
 80100e0:	9905      	ldr	r1, [sp, #20]
 80100e2:	f8d7 50ac 	ldr.w	r5, [r7, #172]	; 0xac
 80100e6:	464a      	mov	r2, r9
 80100e8:	4638      	mov	r0, r7
 80100ea:	47a8      	blx	r5
 80100ec:	2301      	movs	r3, #1
 80100ee:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 80100f2:	e7cf      	b.n	8010094 <read_submessage_format+0xd8>
 80100f4:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 80100f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80100fa:	1a52      	subs	r2, r2, r1
 80100fc:	a80c      	add	r0, sp, #48	; 0x30
 80100fe:	1aed      	subs	r5, r5, r3
 8010100:	f7ff fc56 	bl	800f9b0 <ucdr_init_buffer>
 8010104:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010108:	a80c      	add	r0, sp, #48	; 0x30
 801010a:	f7ff fc27 	bl	800f95c <ucdr_set_on_full_buffer_callback>
 801010e:	4435      	add	r5, r6
 8010110:	2308      	movs	r3, #8
 8010112:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8010116:	f88d 3016 	strb.w	r3, [sp, #22]
 801011a:	b2ad      	uxth	r5, r5
 801011c:	ab0c      	add	r3, sp, #48	; 0x30
 801011e:	9300      	str	r3, [sp, #0]
 8010120:	9002      	str	r0, [sp, #8]
 8010122:	9501      	str	r5, [sp, #4]
 8010124:	ab06      	add	r3, sp, #24
 8010126:	9905      	ldr	r1, [sp, #20]
 8010128:	f8d7 50a4 	ldr.w	r5, [r7, #164]	; 0xa4
 801012c:	464a      	mov	r2, r9
 801012e:	4638      	mov	r0, r7
 8010130:	47a8      	blx	r5
 8010132:	2301      	movs	r3, #1
 8010134:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8010138:	e79f      	b.n	801007a <read_submessage_format+0xbe>
 801013a:	bf00      	nop

0801013c <on_get_fragmentation_info>:
 801013c:	b500      	push	{lr}
 801013e:	b08b      	sub	sp, #44	; 0x2c
 8010140:	4601      	mov	r1, r0
 8010142:	2204      	movs	r2, #4
 8010144:	a802      	add	r0, sp, #8
 8010146:	f7ff fc33 	bl	800f9b0 <ucdr_init_buffer>
 801014a:	f10d 0305 	add.w	r3, sp, #5
 801014e:	a802      	add	r0, sp, #8
 8010150:	f10d 0206 	add.w	r2, sp, #6
 8010154:	a901      	add	r1, sp, #4
 8010156:	f001 f9eb 	bl	8011530 <uxr_read_submessage_header>
 801015a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801015e:	2b0d      	cmp	r3, #13
 8010160:	d003      	beq.n	801016a <on_get_fragmentation_info+0x2e>
 8010162:	2000      	movs	r0, #0
 8010164:	b00b      	add	sp, #44	; 0x2c
 8010166:	f85d fb04 	ldr.w	pc, [sp], #4
 801016a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801016e:	f013 0f02 	tst.w	r3, #2
 8010172:	bf14      	ite	ne
 8010174:	2002      	movne	r0, #2
 8010176:	2001      	moveq	r0, #1
 8010178:	b00b      	add	sp, #44	; 0x2c
 801017a:	f85d fb04 	ldr.w	pc, [sp], #4
 801017e:	bf00      	nop

08010180 <read_submessage_get_info>:
 8010180:	b570      	push	{r4, r5, r6, lr}
 8010182:	2500      	movs	r5, #0
 8010184:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 8010188:	4604      	mov	r4, r0
 801018a:	f44f 7224 	mov.w	r2, #656	; 0x290
 801018e:	460e      	mov	r6, r1
 8010190:	a810      	add	r0, sp, #64	; 0x40
 8010192:	4629      	mov	r1, r5
 8010194:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8010198:	f008 fa3a 	bl	8018610 <memset>
 801019c:	a903      	add	r1, sp, #12
 801019e:	4630      	mov	r0, r6
 80101a0:	f002 fa6e 	bl	8012680 <uxr_deserialize_GET_INFO_Payload>
 80101a4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80101a8:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80101ac:	4620      	mov	r0, r4
 80101ae:	f001 f833 	bl	8011218 <uxr_session_header_offset>
 80101b2:	462b      	mov	r3, r5
 80101b4:	9000      	str	r0, [sp, #0]
 80101b6:	a905      	add	r1, sp, #20
 80101b8:	a808      	add	r0, sp, #32
 80101ba:	220c      	movs	r2, #12
 80101bc:	f7ff fbe6 	bl	800f98c <ucdr_init_buffer_origin_offset>
 80101c0:	a910      	add	r1, sp, #64	; 0x40
 80101c2:	a808      	add	r0, sp, #32
 80101c4:	f002 face 	bl	8012764 <uxr_serialize_INFO_Payload>
 80101c8:	9b08      	ldr	r3, [sp, #32]
 80101ca:	462a      	mov	r2, r5
 80101cc:	4629      	mov	r1, r5
 80101ce:	4620      	mov	r0, r4
 80101d0:	f000 ffca 	bl	8011168 <uxr_stamp_session_header>
 80101d4:	a808      	add	r0, sp, #32
 80101d6:	f7ff fc17 	bl	800fa08 <ucdr_buffer_length>
 80101da:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80101dc:	4602      	mov	r2, r0
 80101de:	a905      	add	r1, sp, #20
 80101e0:	e9d3 0400 	ldrd	r0, r4, [r3]
 80101e4:	47a0      	blx	r4
 80101e6:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 80101ea:	bd70      	pop	{r4, r5, r6, pc}

080101ec <write_submessage_acknack.isra.0>:
 80101ec:	b570      	push	{r4, r5, r6, lr}
 80101ee:	b092      	sub	sp, #72	; 0x48
 80101f0:	4605      	mov	r5, r0
 80101f2:	460e      	mov	r6, r1
 80101f4:	4614      	mov	r4, r2
 80101f6:	f001 f80f 	bl	8011218 <uxr_session_header_offset>
 80101fa:	a905      	add	r1, sp, #20
 80101fc:	9000      	str	r0, [sp, #0]
 80101fe:	2300      	movs	r3, #0
 8010200:	a80a      	add	r0, sp, #40	; 0x28
 8010202:	2211      	movs	r2, #17
 8010204:	f7ff fbc2 	bl	800f98c <ucdr_init_buffer_origin_offset>
 8010208:	2218      	movs	r2, #24
 801020a:	fb02 5404 	mla	r4, r2, r4, r5
 801020e:	2300      	movs	r3, #0
 8010210:	2205      	movs	r2, #5
 8010212:	3450      	adds	r4, #80	; 0x50
 8010214:	a80a      	add	r0, sp, #40	; 0x28
 8010216:	210a      	movs	r1, #10
 8010218:	f001 f970 	bl	80114fc <uxr_buffer_submessage_header>
 801021c:	a903      	add	r1, sp, #12
 801021e:	4620      	mov	r0, r4
 8010220:	f006 fabc 	bl	801679c <uxr_compute_acknack>
 8010224:	a903      	add	r1, sp, #12
 8010226:	ba43      	rev16	r3, r0
 8010228:	a80a      	add	r0, sp, #40	; 0x28
 801022a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801022e:	f88d 6010 	strb.w	r6, [sp, #16]
 8010232:	f002 fb07 	bl	8012844 <uxr_serialize_ACKNACK_Payload>
 8010236:	2200      	movs	r2, #0
 8010238:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801023a:	4611      	mov	r1, r2
 801023c:	4628      	mov	r0, r5
 801023e:	f000 ff93 	bl	8011168 <uxr_stamp_session_header>
 8010242:	a80a      	add	r0, sp, #40	; 0x28
 8010244:	f7ff fbe0 	bl	800fa08 <ucdr_buffer_length>
 8010248:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 801024a:	4602      	mov	r2, r0
 801024c:	a905      	add	r1, sp, #20
 801024e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010252:	47a0      	blx	r4
 8010254:	b012      	add	sp, #72	; 0x48
 8010256:	bd70      	pop	{r4, r5, r6, pc}

08010258 <uxr_init_session>:
 8010258:	b5d0      	push	{r4, r6, r7, lr}
 801025a:	2300      	movs	r3, #0
 801025c:	2600      	movs	r6, #0
 801025e:	2700      	movs	r7, #0
 8010260:	e9c0 6726 	strd	r6, r7, [r0, #152]	; 0x98
 8010264:	4604      	mov	r4, r0
 8010266:	6701      	str	r1, [r0, #112]	; 0x70
 8010268:	e9c0 331d 	strd	r3, r3, [r0, #116]	; 0x74
 801026c:	e9c0 331f 	strd	r3, r3, [r0, #124]	; 0x7c
 8010270:	e9c0 3321 	strd	r3, r3, [r0, #132]	; 0x84
 8010274:	e9c0 3323 	strd	r3, r3, [r0, #140]	; 0x8c
 8010278:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
 801027c:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 8010280:	2181      	movs	r1, #129	; 0x81
 8010282:	f000 fedb 	bl	801103c <uxr_init_session_info>
 8010286:	f104 0008 	add.w	r0, r4, #8
 801028a:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
 801028e:	f001 b851 	b.w	8011334 <uxr_init_stream_storage>
 8010292:	bf00      	nop

08010294 <uxr_set_status_callback>:
 8010294:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 8010298:	4770      	bx	lr
 801029a:	bf00      	nop

0801029c <uxr_set_topic_callback>:
 801029c:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 80102a0:	4770      	bx	lr
 80102a2:	bf00      	nop

080102a4 <uxr_set_request_callback>:
 80102a4:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 80102a8:	4770      	bx	lr
 80102aa:	bf00      	nop

080102ac <uxr_set_reply_callback>:
 80102ac:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 80102b0:	4770      	bx	lr
 80102b2:	bf00      	nop

080102b4 <uxr_create_output_best_effort_stream>:
 80102b4:	b510      	push	{r4, lr}
 80102b6:	b084      	sub	sp, #16
 80102b8:	e9cd 2100 	strd	r2, r1, [sp]
 80102bc:	4604      	mov	r4, r0
 80102be:	f000 ffab 	bl	8011218 <uxr_session_header_offset>
 80102c2:	e9dd 2100 	ldrd	r2, r1, [sp]
 80102c6:	4603      	mov	r3, r0
 80102c8:	f104 0008 	add.w	r0, r4, #8
 80102cc:	b004      	add	sp, #16
 80102ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80102d2:	f001 b879 	b.w	80113c8 <uxr_add_output_best_effort_buffer>
 80102d6:	bf00      	nop

080102d8 <uxr_create_output_reliable_stream>:
 80102d8:	b530      	push	{r4, r5, lr}
 80102da:	b089      	sub	sp, #36	; 0x24
 80102dc:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80102e0:	9303      	str	r3, [sp, #12]
 80102e2:	4604      	mov	r4, r0
 80102e4:	f000 ff98 	bl	8011218 <uxr_session_header_offset>
 80102e8:	4605      	mov	r5, r0
 80102ea:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80102ee:	9905      	ldr	r1, [sp, #20]
 80102f0:	9500      	str	r5, [sp, #0]
 80102f2:	f104 0008 	add.w	r0, r4, #8
 80102f6:	f001 f879 	bl	80113ec <uxr_add_output_reliable_buffer>
 80102fa:	2200      	movs	r2, #0
 80102fc:	b2c3      	uxtb	r3, r0
 80102fe:	f363 0207 	bfi	r2, r3, #0, #8
 8010302:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010306:	f363 220f 	bfi	r2, r3, #8, #8
 801030a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801030e:	f363 4217 	bfi	r2, r3, #16, #8
 8010312:	0e03      	lsrs	r3, r0, #24
 8010314:	f363 621f 	bfi	r2, r3, #24, #8
 8010318:	4610      	mov	r0, r2
 801031a:	b009      	add	sp, #36	; 0x24
 801031c:	bd30      	pop	{r4, r5, pc}
 801031e:	bf00      	nop

08010320 <uxr_create_input_best_effort_stream>:
 8010320:	b082      	sub	sp, #8
 8010322:	3008      	adds	r0, #8
 8010324:	b002      	add	sp, #8
 8010326:	f001 b87b 	b.w	8011420 <uxr_add_input_best_effort_buffer>
 801032a:	bf00      	nop

0801032c <uxr_create_input_reliable_stream>:
 801032c:	b510      	push	{r4, lr}
 801032e:	b084      	sub	sp, #16
 8010330:	4c0b      	ldr	r4, [pc, #44]	; (8010360 <uxr_create_input_reliable_stream+0x34>)
 8010332:	9400      	str	r4, [sp, #0]
 8010334:	3008      	adds	r0, #8
 8010336:	f001 f889 	bl	801144c <uxr_add_input_reliable_buffer>
 801033a:	2200      	movs	r2, #0
 801033c:	b2c3      	uxtb	r3, r0
 801033e:	f363 0207 	bfi	r2, r3, #0, #8
 8010342:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010346:	f363 220f 	bfi	r2, r3, #8, #8
 801034a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801034e:	f363 4217 	bfi	r2, r3, #16, #8
 8010352:	0e03      	lsrs	r3, r0, #24
 8010354:	f363 621f 	bfi	r2, r3, #24, #8
 8010358:	4610      	mov	r0, r2
 801035a:	b004      	add	sp, #16
 801035c:	bd10      	pop	{r4, pc}
 801035e:	bf00      	nop
 8010360:	0801013d 	.word	0x0801013d

08010364 <uxr_epoch_nanos>:
 8010364:	b510      	push	{r4, lr}
 8010366:	4604      	mov	r4, r0
 8010368:	f001 f92a 	bl	80115c0 <uxr_nanos>
 801036c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 8010370:	1ac0      	subs	r0, r0, r3
 8010372:	eb61 0102 	sbc.w	r1, r1, r2
 8010376:	bd10      	pop	{r4, pc}

08010378 <uxr_flash_output_streams>:
 8010378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801037c:	7e03      	ldrb	r3, [r0, #24]
 801037e:	b084      	sub	sp, #16
 8010380:	4604      	mov	r4, r0
 8010382:	b1fb      	cbz	r3, 80103c4 <uxr_flash_output_streams+0x4c>
 8010384:	f04f 0900 	mov.w	r9, #0
 8010388:	4648      	mov	r0, r9
 801038a:	f10d 0802 	add.w	r8, sp, #2
 801038e:	af03      	add	r7, sp, #12
 8010390:	ae02      	add	r6, sp, #8
 8010392:	2201      	movs	r2, #1
 8010394:	4611      	mov	r1, r2
 8010396:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 801039a:	f000 ff75 	bl	8011288 <uxr_stream_id>
 801039e:	3508      	adds	r5, #8
 80103a0:	4684      	mov	ip, r0
 80103a2:	4643      	mov	r3, r8
 80103a4:	4628      	mov	r0, r5
 80103a6:	463a      	mov	r2, r7
 80103a8:	4631      	mov	r1, r6
 80103aa:	f8cd c004 	str.w	ip, [sp, #4]
 80103ae:	f006 fa7d 	bl	80168ac <uxr_prepare_best_effort_buffer_to_send>
 80103b2:	2800      	cmp	r0, #0
 80103b4:	d13d      	bne.n	8010432 <uxr_flash_output_streams+0xba>
 80103b6:	7e23      	ldrb	r3, [r4, #24]
 80103b8:	f109 0901 	add.w	r9, r9, #1
 80103bc:	fa5f f089 	uxtb.w	r0, r9
 80103c0:	4283      	cmp	r3, r0
 80103c2:	d8e6      	bhi.n	8010392 <uxr_flash_output_streams+0x1a>
 80103c4:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80103c8:	b383      	cbz	r3, 801042c <uxr_flash_output_streams+0xb4>
 80103ca:	f04f 0900 	mov.w	r9, #0
 80103ce:	4648      	mov	r0, r9
 80103d0:	f10d 0802 	add.w	r8, sp, #2
 80103d4:	af03      	add	r7, sp, #12
 80103d6:	ae02      	add	r6, sp, #8
 80103d8:	2201      	movs	r2, #1
 80103da:	2102      	movs	r1, #2
 80103dc:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 80103e0:	f000 ff52 	bl	8011288 <uxr_stream_id>
 80103e4:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80103e8:	3520      	adds	r5, #32
 80103ea:	9001      	str	r0, [sp, #4]
 80103ec:	e00c      	b.n	8010408 <uxr_flash_output_streams+0x90>
 80103ee:	9b02      	ldr	r3, [sp, #8]
 80103f0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80103f4:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80103f8:	f000 feb6 	bl	8011168 <uxr_stamp_session_header>
 80103fc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80103fe:	9a03      	ldr	r2, [sp, #12]
 8010400:	9902      	ldr	r1, [sp, #8]
 8010402:	e9d3 0a00 	ldrd	r0, sl, [r3]
 8010406:	47d0      	blx	sl
 8010408:	4643      	mov	r3, r8
 801040a:	463a      	mov	r2, r7
 801040c:	4631      	mov	r1, r6
 801040e:	4628      	mov	r0, r5
 8010410:	f006 fc54 	bl	8016cbc <uxr_prepare_next_reliable_buffer_to_send>
 8010414:	4603      	mov	r3, r0
 8010416:	4620      	mov	r0, r4
 8010418:	2b00      	cmp	r3, #0
 801041a:	d1e8      	bne.n	80103ee <uxr_flash_output_streams+0x76>
 801041c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8010420:	f109 0901 	add.w	r9, r9, #1
 8010424:	fa5f f089 	uxtb.w	r0, r9
 8010428:	4283      	cmp	r3, r0
 801042a:	d8d5      	bhi.n	80103d8 <uxr_flash_output_streams+0x60>
 801042c:	b004      	add	sp, #16
 801042e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010432:	9b02      	ldr	r3, [sp, #8]
 8010434:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010438:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801043c:	4620      	mov	r0, r4
 801043e:	f000 fe93 	bl	8011168 <uxr_stamp_session_header>
 8010442:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010444:	9a03      	ldr	r2, [sp, #12]
 8010446:	9902      	ldr	r1, [sp, #8]
 8010448:	e9d3 0500 	ldrd	r0, r5, [r3]
 801044c:	47a8      	blx	r5
 801044e:	f109 0901 	add.w	r9, r9, #1
 8010452:	7e23      	ldrb	r3, [r4, #24]
 8010454:	fa5f f089 	uxtb.w	r0, r9
 8010458:	4283      	cmp	r3, r0
 801045a:	d89a      	bhi.n	8010392 <uxr_flash_output_streams+0x1a>
 801045c:	e7b2      	b.n	80103c4 <uxr_flash_output_streams+0x4c>
 801045e:	bf00      	nop

08010460 <read_submessage_info>:
 8010460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010464:	460d      	mov	r5, r1
 8010466:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 801046a:	4669      	mov	r1, sp
 801046c:	4607      	mov	r7, r0
 801046e:	4628      	mov	r0, r5
 8010470:	f002 f80c 	bl	801248c <uxr_deserialize_BaseObjectReply>
 8010474:	a902      	add	r1, sp, #8
 8010476:	4604      	mov	r4, r0
 8010478:	4628      	mov	r0, r5
 801047a:	f89d 8005 	ldrb.w	r8, [sp, #5]
 801047e:	f7fe fad3 	bl	800ea28 <ucdr_deserialize_bool>
 8010482:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8010486:	4004      	ands	r4, r0
 8010488:	b2e4      	uxtb	r4, r4
 801048a:	b95b      	cbnz	r3, 80104a4 <read_submessage_info+0x44>
 801048c:	a987      	add	r1, sp, #540	; 0x21c
 801048e:	4628      	mov	r0, r5
 8010490:	f7fe faca 	bl	800ea28 <ucdr_deserialize_bool>
 8010494:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 8010498:	4606      	mov	r6, r0
 801049a:	b94b      	cbnz	r3, 80104b0 <read_submessage_info+0x50>
 801049c:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 80104a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104a4:	a903      	add	r1, sp, #12
 80104a6:	4628      	mov	r0, r5
 80104a8:	f001 fe7e 	bl	80121a8 <uxr_deserialize_ObjectVariant>
 80104ac:	4004      	ands	r4, r0
 80104ae:	e7ed      	b.n	801048c <read_submessage_info+0x2c>
 80104b0:	a988      	add	r1, sp, #544	; 0x220
 80104b2:	4628      	mov	r0, r5
 80104b4:	f7fe fae8 	bl	800ea88 <ucdr_deserialize_uint8_t>
 80104b8:	4234      	tst	r4, r6
 80104ba:	d0ef      	beq.n	801049c <read_submessage_info+0x3c>
 80104bc:	2800      	cmp	r0, #0
 80104be:	d0ed      	beq.n	801049c <read_submessage_info+0x3c>
 80104c0:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 80104c4:	2b0d      	cmp	r3, #13
 80104c6:	d1e9      	bne.n	801049c <read_submessage_info+0x3c>
 80104c8:	4628      	mov	r0, r5
 80104ca:	a98a      	add	r1, sp, #552	; 0x228
 80104cc:	f7ff f882 	bl	800f5d4 <ucdr_deserialize_int16_t>
 80104d0:	b140      	cbz	r0, 80104e4 <read_submessage_info+0x84>
 80104d2:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	dd07      	ble.n	80104ea <read_submessage_info+0x8a>
 80104da:	f1b8 0f00 	cmp.w	r8, #0
 80104de:	bf14      	ite	ne
 80104e0:	2001      	movne	r0, #1
 80104e2:	2002      	moveq	r0, #2
 80104e4:	f887 00b5 	strb.w	r0, [r7, #181]	; 0xb5
 80104e8:	e7d8      	b.n	801049c <read_submessage_info+0x3c>
 80104ea:	2000      	movs	r0, #0
 80104ec:	e7fa      	b.n	80104e4 <read_submessage_info+0x84>
 80104ee:	bf00      	nop

080104f0 <read_submessage_list>:
 80104f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104f4:	b098      	sub	sp, #96	; 0x60
 80104f6:	f8df 9304 	ldr.w	r9, [pc, #772]	; 80107fc <read_submessage_list+0x30c>
 80104fa:	920b      	str	r2, [sp, #44]	; 0x2c
 80104fc:	4604      	mov	r4, r0
 80104fe:	4688      	mov	r8, r1
 8010500:	f10d 0337 	add.w	r3, sp, #55	; 0x37
 8010504:	aa0e      	add	r2, sp, #56	; 0x38
 8010506:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 801050a:	4640      	mov	r0, r8
 801050c:	f001 f810 	bl	8011530 <uxr_read_submessage_header>
 8010510:	2800      	cmp	r0, #0
 8010512:	f000 813d 	beq.w	8010790 <read_submessage_list+0x2a0>
 8010516:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 801051a:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 801051e:	3b02      	subs	r3, #2
 8010520:	2b0d      	cmp	r3, #13
 8010522:	d8ed      	bhi.n	8010500 <read_submessage_list+0x10>
 8010524:	a101      	add	r1, pc, #4	; (adr r1, 801052c <read_submessage_list+0x3c>)
 8010526:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801052a:	bf00      	nop
 801052c:	08010787 	.word	0x08010787
 8010530:	08010501 	.word	0x08010501
 8010534:	08010777 	.word	0x08010777
 8010538:	0801071b 	.word	0x0801071b
 801053c:	08010711 	.word	0x08010711
 8010540:	08010501 	.word	0x08010501
 8010544:	08010501 	.word	0x08010501
 8010548:	08010673 	.word	0x08010673
 801054c:	08010605 	.word	0x08010605
 8010550:	080105c3 	.word	0x080105c3
 8010554:	08010501 	.word	0x08010501
 8010558:	08010501 	.word	0x08010501
 801055c:	08010501 	.word	0x08010501
 8010560:	08010565 	.word	0x08010565
 8010564:	a912      	add	r1, sp, #72	; 0x48
 8010566:	4640      	mov	r0, r8
 8010568:	f002 f9bc 	bl	80128e4 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 801056c:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 8010570:	2d00      	cmp	r5, #0
 8010572:	f000 8115 	beq.w	80107a0 <read_submessage_list+0x2b0>
 8010576:	f001 f823 	bl	80115c0 <uxr_nanos>
 801057a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801057c:	460b      	mov	r3, r1
 801057e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010580:	2700      	movs	r7, #0
 8010582:	fbc9 6701 	smlal	r6, r7, r9, r1
 8010586:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801058a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801058c:	4602      	mov	r2, r0
 801058e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8010590:	460e      	mov	r6, r1
 8010592:	2700      	movs	r7, #0
 8010594:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8010598:	9106      	str	r1, [sp, #24]
 801059a:	fbc9 6700 	smlal	r6, r7, r9, r0
 801059e:	9915      	ldr	r1, [sp, #84]	; 0x54
 80105a0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80105a4:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80105a6:	2700      	movs	r7, #0
 80105a8:	4608      	mov	r0, r1
 80105aa:	4639      	mov	r1, r7
 80105ac:	fbc9 0106 	smlal	r0, r1, r9, r6
 80105b0:	e9cd 0100 	strd	r0, r1, [sp]
 80105b4:	4620      	mov	r0, r4
 80105b6:	47a8      	blx	r5
 80105b8:	f04f 0301 	mov.w	r3, #1
 80105bc:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 80105c0:	e79e      	b.n	8010500 <read_submessage_list+0x10>
 80105c2:	a912      	add	r1, sp, #72	; 0x48
 80105c4:	4640      	mov	r0, r8
 80105c6:	f002 f97b 	bl	80128c0 <uxr_deserialize_HEARTBEAT_Payload>
 80105ca:	2100      	movs	r1, #0
 80105cc:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 80105d0:	f000 fe84 	bl	80112dc <uxr_stream_id_from_raw>
 80105d4:	f3c0 2507 	ubfx	r5, r0, #8, #8
 80105d8:	4603      	mov	r3, r0
 80105da:	4629      	mov	r1, r5
 80105dc:	f104 0008 	add.w	r0, r4, #8
 80105e0:	9311      	str	r3, [sp, #68]	; 0x44
 80105e2:	f000 ff69 	bl	80114b8 <uxr_get_input_reliable_stream>
 80105e6:	2800      	cmp	r0, #0
 80105e8:	d08a      	beq.n	8010500 <read_submessage_list+0x10>
 80105ea:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 80105ee:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
 80105f2:	f006 f8c7 	bl	8016784 <uxr_process_heartbeat>
 80105f6:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 80105fa:	462a      	mov	r2, r5
 80105fc:	4620      	mov	r0, r4
 80105fe:	f7ff fdf5 	bl	80101ec <write_submessage_acknack.isra.0>
 8010602:	e77d      	b.n	8010500 <read_submessage_list+0x10>
 8010604:	a912      	add	r1, sp, #72	; 0x48
 8010606:	4640      	mov	r0, r8
 8010608:	f002 f932 	bl	8012870 <uxr_deserialize_ACKNACK_Payload>
 801060c:	2100      	movs	r1, #0
 801060e:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8010612:	f000 fe63 	bl	80112dc <uxr_stream_id_from_raw>
 8010616:	4603      	mov	r3, r0
 8010618:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801061c:	f104 0008 	add.w	r0, r4, #8
 8010620:	930f      	str	r3, [sp, #60]	; 0x3c
 8010622:	f000 ff33 	bl	801148c <uxr_get_output_reliable_stream>
 8010626:	4605      	mov	r5, r0
 8010628:	2800      	cmp	r0, #0
 801062a:	f43f af69 	beq.w	8010500 <read_submessage_list+0x10>
 801062e:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 8010632:	f89d 104b 	ldrb.w	r1, [sp, #75]	; 0x4b
 8010636:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 801063a:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 801063e:	b289      	uxth	r1, r1
 8010640:	f006 fbe4 	bl	8016e0c <uxr_process_acknack>
 8010644:	4628      	mov	r0, r5
 8010646:	f006 fba7 	bl	8016d98 <uxr_begin_output_nack_buffer_it>
 801064a:	af10      	add	r7, sp, #64	; 0x40
 801064c:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
 8010650:	e005      	b.n	801065e <read_submessage_list+0x16e>
 8010652:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010654:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010656:	9910      	ldr	r1, [sp, #64]	; 0x40
 8010658:	e9d3 0600 	ldrd	r0, r6, [r3]
 801065c:	47b0      	blx	r6
 801065e:	f10d 033a 	add.w	r3, sp, #58	; 0x3a
 8010662:	aa11      	add	r2, sp, #68	; 0x44
 8010664:	4639      	mov	r1, r7
 8010666:	4628      	mov	r0, r5
 8010668:	f006 fb98 	bl	8016d9c <uxr_next_reliable_nack_buffer_to_send>
 801066c:	2800      	cmp	r0, #0
 801066e:	d1f0      	bne.n	8010652 <read_submessage_list+0x162>
 8010670:	e746      	b.n	8010500 <read_submessage_list+0x10>
 8010672:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8010676:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
 801067a:	af10      	add	r7, sp, #64	; 0x40
 801067c:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8010680:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
 8010684:	4639      	mov	r1, r7
 8010686:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 801068a:	f89d 6037 	ldrb.w	r6, [sp, #55]	; 0x37
 801068e:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8010692:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
 8010696:	4640      	mov	r0, r8
 8010698:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 801069c:	f001 fe32 	bl	8012304 <uxr_deserialize_BaseObjectRequest>
 80106a0:	4638      	mov	r0, r7
 80106a2:	a911      	add	r1, sp, #68	; 0x44
 80106a4:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 80106a8:	f000 fddc 	bl	8011264 <uxr_parse_base_object_request>
 80106ac:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 80106b0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80106b2:	f8bd 703a 	ldrh.w	r7, [sp, #58]	; 0x3a
 80106b6:	9112      	str	r1, [sp, #72]	; 0x48
 80106b8:	3d04      	subs	r5, #4
 80106ba:	f006 060e 	and.w	r6, r6, #14
 80106be:	b2ad      	uxth	r5, r5
 80106c0:	f1ba 0f00 	cmp.w	sl, #0
 80106c4:	d006      	beq.n	80106d4 <read_submessage_list+0x1e4>
 80106c6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80106ca:	9300      	str	r3, [sp, #0]
 80106cc:	463a      	mov	r2, r7
 80106ce:	2300      	movs	r3, #0
 80106d0:	4620      	mov	r0, r4
 80106d2:	47d0      	blx	sl
 80106d4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80106d6:	b168      	cbz	r0, 80106f4 <read_submessage_list+0x204>
 80106d8:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80106da:	2300      	movs	r3, #0
 80106dc:	3902      	subs	r1, #2
 80106de:	e002      	b.n	80106e6 <read_submessage_list+0x1f6>
 80106e0:	3301      	adds	r3, #1
 80106e2:	4283      	cmp	r3, r0
 80106e4:	d006      	beq.n	80106f4 <read_submessage_list+0x204>
 80106e6:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 80106ea:	42ba      	cmp	r2, r7
 80106ec:	d1f8      	bne.n	80106e0 <read_submessage_list+0x1f0>
 80106ee:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80106f0:	2100      	movs	r1, #0
 80106f2:	54d1      	strb	r1, [r2, r3]
 80106f4:	9811      	ldr	r0, [sp, #68]	; 0x44
 80106f6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80106f8:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 80106fc:	9302      	str	r3, [sp, #8]
 80106fe:	e9cd 1000 	strd	r1, r0, [sp]
 8010702:	4633      	mov	r3, r6
 8010704:	462a      	mov	r2, r5
 8010706:	4641      	mov	r1, r8
 8010708:	4620      	mov	r0, r4
 801070a:	f7ff fc57 	bl	800ffbc <read_submessage_format>
 801070e:	e6f7      	b.n	8010500 <read_submessage_list+0x10>
 8010710:	4641      	mov	r1, r8
 8010712:	4620      	mov	r0, r4
 8010714:	f7ff fea4 	bl	8010460 <read_submessage_info>
 8010718:	e6f2      	b.n	8010500 <read_submessage_list+0x10>
 801071a:	2a00      	cmp	r2, #0
 801071c:	d03b      	beq.n	8010796 <read_submessage_list+0x2a6>
 801071e:	a912      	add	r1, sp, #72	; 0x48
 8010720:	4640      	mov	r0, r8
 8010722:	f002 f801 	bl	8012728 <uxr_deserialize_STATUS_Payload>
 8010726:	a910      	add	r1, sp, #64	; 0x40
 8010728:	aa0f      	add	r2, sp, #60	; 0x3c
 801072a:	a812      	add	r0, sp, #72	; 0x48
 801072c:	f000 fd9a 	bl	8011264 <uxr_parse_base_object_request>
 8010730:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8010734:	9910      	ldr	r1, [sp, #64]	; 0x40
 8010736:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 801073a:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 801073e:	9111      	str	r1, [sp, #68]	; 0x44
 8010740:	b135      	cbz	r5, 8010750 <read_submessage_list+0x260>
 8010742:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8010746:	9300      	str	r3, [sp, #0]
 8010748:	4632      	mov	r2, r6
 801074a:	463b      	mov	r3, r7
 801074c:	4620      	mov	r0, r4
 801074e:	47a8      	blx	r5
 8010750:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8010752:	2b00      	cmp	r3, #0
 8010754:	f43f aed4 	beq.w	8010500 <read_submessage_list+0x10>
 8010758:	6f60      	ldr	r0, [r4, #116]	; 0x74
 801075a:	2100      	movs	r1, #0
 801075c:	3802      	subs	r0, #2
 801075e:	e003      	b.n	8010768 <read_submessage_list+0x278>
 8010760:	3101      	adds	r1, #1
 8010762:	4299      	cmp	r1, r3
 8010764:	f43f aecc 	beq.w	8010500 <read_submessage_list+0x10>
 8010768:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 801076c:	42b2      	cmp	r2, r6
 801076e:	d1f7      	bne.n	8010760 <read_submessage_list+0x270>
 8010770:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8010772:	545f      	strb	r7, [r3, r1]
 8010774:	e6c4      	b.n	8010500 <read_submessage_list+0x10>
 8010776:	2a00      	cmp	r2, #0
 8010778:	f47f aec2 	bne.w	8010500 <read_submessage_list+0x10>
 801077c:	4641      	mov	r1, r8
 801077e:	4620      	mov	r0, r4
 8010780:	f000 fcb4 	bl	80110ec <uxr_read_create_session_status>
 8010784:	e6bc      	b.n	8010500 <read_submessage_list+0x10>
 8010786:	4641      	mov	r1, r8
 8010788:	4620      	mov	r0, r4
 801078a:	f7ff fcf9 	bl	8010180 <read_submessage_get_info>
 801078e:	e6b7      	b.n	8010500 <read_submessage_list+0x10>
 8010790:	b018      	add	sp, #96	; 0x60
 8010792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010796:	4641      	mov	r1, r8
 8010798:	4620      	mov	r0, r4
 801079a:	f000 fcb3 	bl	8011104 <uxr_read_delete_session_status>
 801079e:	e6af      	b.n	8010500 <read_submessage_list+0x10>
 80107a0:	f000 ff0e 	bl	80115c0 <uxr_nanos>
 80107a4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80107a6:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80107a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80107aa:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80107ac:	2700      	movs	r7, #0
 80107ae:	fbc9 6703 	smlal	r6, r7, r9, r3
 80107b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80107b4:	eb16 0c00 	adds.w	ip, r6, r0
 80107b8:	4618      	mov	r0, r3
 80107ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80107bc:	eb47 0e01 	adc.w	lr, r7, r1
 80107c0:	461e      	mov	r6, r3
 80107c2:	2100      	movs	r1, #0
 80107c4:	2700      	movs	r7, #0
 80107c6:	fbc9 0105 	smlal	r0, r1, r9, r5
 80107ca:	fbc9 6702 	smlal	r6, r7, r9, r2
 80107ce:	1983      	adds	r3, r0, r6
 80107d0:	eb41 0207 	adc.w	r2, r1, r7
 80107d4:	ebbc 0303 	subs.w	r3, ip, r3
 80107d8:	9308      	str	r3, [sp, #32]
 80107da:	eb6e 0302 	sbc.w	r3, lr, r2
 80107de:	9309      	str	r3, [sp, #36]	; 0x24
 80107e0:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80107e4:	0fd3      	lsrs	r3, r2, #31
 80107e6:	18c9      	adds	r1, r1, r3
 80107e8:	f142 0200 	adc.w	r2, r2, #0
 80107ec:	084b      	lsrs	r3, r1, #1
 80107ee:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 80107f2:	1052      	asrs	r2, r2, #1
 80107f4:	e9c4 3226 	strd	r3, r2, [r4, #152]	; 0x98
 80107f8:	e6de      	b.n	80105b8 <read_submessage_list+0xc8>
 80107fa:	bf00      	nop
 80107fc:	3b9aca00 	.word	0x3b9aca00

08010800 <listen_message_reliably>:
 8010800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010804:	1e0b      	subs	r3, r1, #0
 8010806:	b09d      	sub	sp, #116	; 0x74
 8010808:	bfb8      	it	lt
 801080a:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 801080e:	9305      	str	r3, [sp, #20]
 8010810:	4607      	mov	r7, r0
 8010812:	f000 feb9 	bl	8011588 <uxr_millis>
 8010816:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 801081a:	4681      	mov	r9, r0
 801081c:	2a00      	cmp	r2, #0
 801081e:	f000 8095 	beq.w	801094c <listen_message_reliably+0x14c>
 8010822:	2600      	movs	r6, #0
 8010824:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010828:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 801082c:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8010830:	4630      	mov	r0, r6
 8010832:	4688      	mov	r8, r1
 8010834:	46ca      	mov	sl, r9
 8010836:	e00f      	b.n	8010858 <listen_message_reliably+0x58>
 8010838:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801083c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010840:	42a2      	cmp	r2, r4
 8010842:	eb73 0105 	sbcs.w	r1, r3, r5
 8010846:	bfb8      	it	lt
 8010848:	e9cd 2302 	strdlt	r2, r3, [sp, #8]
 801084c:	3601      	adds	r6, #1
 801084e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8010852:	b2f0      	uxtb	r0, r6
 8010854:	4283      	cmp	r3, r0
 8010856:	d951      	bls.n	80108fc <listen_message_reliably+0xfc>
 8010858:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 801085c:	2201      	movs	r2, #1
 801085e:	2102      	movs	r1, #2
 8010860:	f000 fd12 	bl	8011288 <uxr_stream_id>
 8010864:	00e4      	lsls	r4, r4, #3
 8010866:	f104 0520 	add.w	r5, r4, #32
 801086a:	443d      	add	r5, r7
 801086c:	4601      	mov	r1, r0
 801086e:	4643      	mov	r3, r8
 8010870:	4652      	mov	r2, sl
 8010872:	4628      	mov	r0, r5
 8010874:	9109      	str	r1, [sp, #36]	; 0x24
 8010876:	f006 fa63 	bl	8016d40 <uxr_update_output_stream_heartbeat_timestamp>
 801087a:	193b      	adds	r3, r7, r4
 801087c:	2800      	cmp	r0, #0
 801087e:	d0db      	beq.n	8010838 <listen_message_reliably+0x38>
 8010880:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 8010884:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 8010888:	4638      	mov	r0, r7
 801088a:	f000 fcc5 	bl	8011218 <uxr_session_header_offset>
 801088e:	3501      	adds	r5, #1
 8010890:	f10d 0b50 	add.w	fp, sp, #80	; 0x50
 8010894:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8010898:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 801089c:	9000      	str	r0, [sp, #0]
 801089e:	2300      	movs	r3, #0
 80108a0:	4658      	mov	r0, fp
 80108a2:	2211      	movs	r2, #17
 80108a4:	a90c      	add	r1, sp, #48	; 0x30
 80108a6:	f7ff f871 	bl	800f98c <ucdr_init_buffer_origin_offset>
 80108aa:	2300      	movs	r3, #0
 80108ac:	2205      	movs	r2, #5
 80108ae:	210b      	movs	r1, #11
 80108b0:	4658      	mov	r0, fp
 80108b2:	f000 fe23 	bl	80114fc <uxr_buffer_submessage_header>
 80108b6:	8968      	ldrh	r0, [r5, #10]
 80108b8:	2101      	movs	r1, #1
 80108ba:	f006 faff 	bl	8016ebc <uxr_seq_num_add>
 80108be:	892a      	ldrh	r2, [r5, #8]
 80108c0:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 80108c4:	4603      	mov	r3, r0
 80108c6:	a90a      	add	r1, sp, #40	; 0x28
 80108c8:	4658      	mov	r0, fp
 80108ca:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 80108ce:	f88d 902c 	strb.w	r9, [sp, #44]	; 0x2c
 80108d2:	f001 ffe1 	bl	8012898 <uxr_serialize_HEARTBEAT_Payload>
 80108d6:	2200      	movs	r2, #0
 80108d8:	4611      	mov	r1, r2
 80108da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80108dc:	4638      	mov	r0, r7
 80108de:	f000 fc43 	bl	8011168 <uxr_stamp_session_header>
 80108e2:	4658      	mov	r0, fp
 80108e4:	f7ff f890 	bl	800fa08 <ucdr_buffer_length>
 80108e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80108ea:	4602      	mov	r2, r0
 80108ec:	a90c      	add	r1, sp, #48	; 0x30
 80108ee:	e9d3 0500 	ldrd	r0, r5, [r3]
 80108f2:	443c      	add	r4, r7
 80108f4:	47a8      	blx	r5
 80108f6:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 80108fa:	e79f      	b.n	801083c <listen_message_reliably+0x3c>
 80108fc:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 8010900:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8010904:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010908:	4294      	cmp	r4, r2
 801090a:	bf08      	it	eq
 801090c:	428b      	cmpeq	r3, r1
 801090e:	d01d      	beq.n	801094c <listen_message_reliably+0x14c>
 8010910:	eba3 030a 	sub.w	r3, r3, sl
 8010914:	9905      	ldr	r1, [sp, #20]
 8010916:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010918:	2b00      	cmp	r3, #0
 801091a:	bf08      	it	eq
 801091c:	2301      	moveq	r3, #1
 801091e:	4299      	cmp	r1, r3
 8010920:	bfa8      	it	ge
 8010922:	4619      	movge	r1, r3
 8010924:	6894      	ldr	r4, [r2, #8]
 8010926:	6810      	ldr	r0, [r2, #0]
 8010928:	4689      	mov	r9, r1
 801092a:	460b      	mov	r3, r1
 801092c:	aa08      	add	r2, sp, #32
 801092e:	a907      	add	r1, sp, #28
 8010930:	47a0      	blx	r4
 8010932:	b968      	cbnz	r0, 8010950 <listen_message_reliably+0x150>
 8010934:	9b05      	ldr	r3, [sp, #20]
 8010936:	eba3 0309 	sub.w	r3, r3, r9
 801093a:	2b00      	cmp	r3, #0
 801093c:	9305      	str	r3, [sp, #20]
 801093e:	f73f af68 	bgt.w	8010812 <listen_message_reliably+0x12>
 8010942:	4604      	mov	r4, r0
 8010944:	4620      	mov	r0, r4
 8010946:	b01d      	add	sp, #116	; 0x74
 8010948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801094c:	9b05      	ldr	r3, [sp, #20]
 801094e:	e7e1      	b.n	8010914 <listen_message_reliably+0x114>
 8010950:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8010954:	4604      	mov	r4, r0
 8010956:	a80c      	add	r0, sp, #48	; 0x30
 8010958:	f7ff f82a 	bl	800f9b0 <ucdr_init_buffer>
 801095c:	2500      	movs	r5, #0
 801095e:	a90c      	add	r1, sp, #48	; 0x30
 8010960:	f10d 031a 	add.w	r3, sp, #26
 8010964:	aa06      	add	r2, sp, #24
 8010966:	4638      	mov	r0, r7
 8010968:	f88d 5018 	strb.w	r5, [sp, #24]
 801096c:	f000 fc12 	bl	8011194 <uxr_read_session_header>
 8010970:	b918      	cbnz	r0, 801097a <listen_message_reliably+0x17a>
 8010972:	4620      	mov	r0, r4
 8010974:	b01d      	add	sp, #116	; 0x74
 8010976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801097a:	4629      	mov	r1, r5
 801097c:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8010980:	f000 fcac 	bl	80112dc <uxr_stream_id_from_raw>
 8010984:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8010988:	2e01      	cmp	r6, #1
 801098a:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 801098e:	900a      	str	r0, [sp, #40]	; 0x28
 8010990:	fa5f fa80 	uxtb.w	sl, r0
 8010994:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8010998:	d04b      	beq.n	8010a32 <listen_message_reliably+0x232>
 801099a:	2e02      	cmp	r6, #2
 801099c:	d00f      	beq.n	80109be <listen_message_reliably+0x1be>
 801099e:	2e00      	cmp	r6, #0
 80109a0:	d1e7      	bne.n	8010972 <listen_message_reliably+0x172>
 80109a2:	4631      	mov	r1, r6
 80109a4:	4630      	mov	r0, r6
 80109a6:	f000 fc99 	bl	80112dc <uxr_stream_id_from_raw>
 80109aa:	a90c      	add	r1, sp, #48	; 0x30
 80109ac:	4602      	mov	r2, r0
 80109ae:	4638      	mov	r0, r7
 80109b0:	920a      	str	r2, [sp, #40]	; 0x28
 80109b2:	f7ff fd9d 	bl	80104f0 <read_submessage_list>
 80109b6:	4620      	mov	r0, r4
 80109b8:	b01d      	add	sp, #116	; 0x74
 80109ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109be:	4629      	mov	r1, r5
 80109c0:	f107 0008 	add.w	r0, r7, #8
 80109c4:	f000 fd78 	bl	80114b8 <uxr_get_input_reliable_stream>
 80109c8:	4680      	mov	r8, r0
 80109ca:	b348      	cbz	r0, 8010a20 <listen_message_reliably+0x220>
 80109cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80109ce:	9202      	str	r2, [sp, #8]
 80109d0:	a80c      	add	r0, sp, #48	; 0x30
 80109d2:	f7ff f81d 	bl	800fa10 <ucdr_buffer_remaining>
 80109d6:	4603      	mov	r3, r0
 80109d8:	f10d 0019 	add.w	r0, sp, #25
 80109dc:	9000      	str	r0, [sp, #0]
 80109de:	9a02      	ldr	r2, [sp, #8]
 80109e0:	4649      	mov	r1, r9
 80109e2:	4640      	mov	r0, r8
 80109e4:	f005 fdd0 	bl	8016588 <uxr_receive_reliable_message>
 80109e8:	b1d0      	cbz	r0, 8010a20 <listen_message_reliably+0x220>
 80109ea:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d037      	beq.n	8010a62 <listen_message_reliably+0x262>
 80109f2:	ae14      	add	r6, sp, #80	; 0x50
 80109f4:	f04f 0902 	mov.w	r9, #2
 80109f8:	e008      	b.n	8010a0c <listen_message_reliably+0x20c>
 80109fa:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 80109fe:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 8010a02:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 8010a06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010a08:	f7ff fd72 	bl	80104f0 <read_submessage_list>
 8010a0c:	4631      	mov	r1, r6
 8010a0e:	2204      	movs	r2, #4
 8010a10:	4640      	mov	r0, r8
 8010a12:	f005 fe39 	bl	8016688 <uxr_next_input_reliable_buffer_available>
 8010a16:	4603      	mov	r3, r0
 8010a18:	4631      	mov	r1, r6
 8010a1a:	4638      	mov	r0, r7
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d1ec      	bne.n	80109fa <listen_message_reliably+0x1fa>
 8010a20:	4638      	mov	r0, r7
 8010a22:	462a      	mov	r2, r5
 8010a24:	4651      	mov	r1, sl
 8010a26:	f7ff fbe1 	bl	80101ec <write_submessage_acknack.isra.0>
 8010a2a:	4620      	mov	r0, r4
 8010a2c:	b01d      	add	sp, #116	; 0x74
 8010a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a32:	4629      	mov	r1, r5
 8010a34:	f107 0008 	add.w	r0, r7, #8
 8010a38:	f000 fd34 	bl	80114a4 <uxr_get_input_best_effort_stream>
 8010a3c:	2800      	cmp	r0, #0
 8010a3e:	d098      	beq.n	8010972 <listen_message_reliably+0x172>
 8010a40:	4649      	mov	r1, r9
 8010a42:	f005 fd1d 	bl	8016480 <uxr_receive_best_effort_message>
 8010a46:	2800      	cmp	r0, #0
 8010a48:	d093      	beq.n	8010972 <listen_message_reliably+0x172>
 8010a4a:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 8010a4e:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 8010a52:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8010a56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010a58:	a90c      	add	r1, sp, #48	; 0x30
 8010a5a:	4638      	mov	r0, r7
 8010a5c:	f7ff fd48 	bl	80104f0 <read_submessage_list>
 8010a60:	e787      	b.n	8010972 <listen_message_reliably+0x172>
 8010a62:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 8010a66:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 8010a6a:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8010a6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010a70:	a90c      	add	r1, sp, #48	; 0x30
 8010a72:	4638      	mov	r0, r7
 8010a74:	f7ff fd3c 	bl	80104f0 <read_submessage_list>
 8010a78:	e7bb      	b.n	80109f2 <listen_message_reliably+0x1f2>
 8010a7a:	bf00      	nop

08010a7c <uxr_run_session_timeout>:
 8010a7c:	b570      	push	{r4, r5, r6, lr}
 8010a7e:	4604      	mov	r4, r0
 8010a80:	460d      	mov	r5, r1
 8010a82:	f000 fd81 	bl	8011588 <uxr_millis>
 8010a86:	4606      	mov	r6, r0
 8010a88:	4620      	mov	r0, r4
 8010a8a:	f7ff fc75 	bl	8010378 <uxr_flash_output_streams>
 8010a8e:	4629      	mov	r1, r5
 8010a90:	4620      	mov	r0, r4
 8010a92:	f7ff feb5 	bl	8010800 <listen_message_reliably>
 8010a96:	f000 fd77 	bl	8011588 <uxr_millis>
 8010a9a:	1b83      	subs	r3, r0, r6
 8010a9c:	1ae9      	subs	r1, r5, r3
 8010a9e:	2900      	cmp	r1, #0
 8010aa0:	dcf6      	bgt.n	8010a90 <uxr_run_session_timeout+0x14>
 8010aa2:	f104 0008 	add.w	r0, r4, #8
 8010aa6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010aaa:	f000 bd11 	b.w	80114d0 <uxr_output_streams_confirmed>
 8010aae:	bf00      	nop

08010ab0 <uxr_run_session_until_data>:
 8010ab0:	b570      	push	{r4, r5, r6, lr}
 8010ab2:	4604      	mov	r4, r0
 8010ab4:	460d      	mov	r5, r1
 8010ab6:	f000 fd67 	bl	8011588 <uxr_millis>
 8010aba:	4606      	mov	r6, r0
 8010abc:	4620      	mov	r0, r4
 8010abe:	f7ff fc5b 	bl	8010378 <uxr_flash_output_streams>
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8010ac8:	4629      	mov	r1, r5
 8010aca:	e005      	b.n	8010ad8 <uxr_run_session_until_data+0x28>
 8010acc:	f000 fd5c 	bl	8011588 <uxr_millis>
 8010ad0:	1b83      	subs	r3, r0, r6
 8010ad2:	1ae9      	subs	r1, r5, r3
 8010ad4:	2900      	cmp	r1, #0
 8010ad6:	dd07      	ble.n	8010ae8 <uxr_run_session_until_data+0x38>
 8010ad8:	4620      	mov	r0, r4
 8010ada:	f7ff fe91 	bl	8010800 <listen_message_reliably>
 8010ade:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8010ae2:	2800      	cmp	r0, #0
 8010ae4:	d0f2      	beq.n	8010acc <uxr_run_session_until_data+0x1c>
 8010ae6:	bd70      	pop	{r4, r5, r6, pc}
 8010ae8:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8010aec:	bd70      	pop	{r4, r5, r6, pc}
 8010aee:	bf00      	nop

08010af0 <uxr_run_session_until_confirm_delivery>:
 8010af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010af4:	4606      	mov	r6, r0
 8010af6:	460d      	mov	r5, r1
 8010af8:	f000 fd46 	bl	8011588 <uxr_millis>
 8010afc:	4607      	mov	r7, r0
 8010afe:	4630      	mov	r0, r6
 8010b00:	f7ff fc3a 	bl	8010378 <uxr_flash_output_streams>
 8010b04:	2d00      	cmp	r5, #0
 8010b06:	f106 0808 	add.w	r8, r6, #8
 8010b0a:	bfa8      	it	ge
 8010b0c:	462c      	movge	r4, r5
 8010b0e:	da07      	bge.n	8010b20 <uxr_run_session_until_confirm_delivery+0x30>
 8010b10:	e00e      	b.n	8010b30 <uxr_run_session_until_confirm_delivery+0x40>
 8010b12:	f7ff fe75 	bl	8010800 <listen_message_reliably>
 8010b16:	f000 fd37 	bl	8011588 <uxr_millis>
 8010b1a:	1bc3      	subs	r3, r0, r7
 8010b1c:	1aec      	subs	r4, r5, r3
 8010b1e:	d407      	bmi.n	8010b30 <uxr_run_session_until_confirm_delivery+0x40>
 8010b20:	4640      	mov	r0, r8
 8010b22:	f000 fcd5 	bl	80114d0 <uxr_output_streams_confirmed>
 8010b26:	4603      	mov	r3, r0
 8010b28:	4621      	mov	r1, r4
 8010b2a:	4630      	mov	r0, r6
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d0f0      	beq.n	8010b12 <uxr_run_session_until_confirm_delivery+0x22>
 8010b30:	4640      	mov	r0, r8
 8010b32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010b36:	f000 bccb 	b.w	80114d0 <uxr_output_streams_confirmed>
 8010b3a:	bf00      	nop

08010b3c <uxr_run_session_until_all_status>:
 8010b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b40:	9d08      	ldr	r5, [sp, #32]
 8010b42:	460f      	mov	r7, r1
 8010b44:	4692      	mov	sl, r2
 8010b46:	461c      	mov	r4, r3
 8010b48:	4606      	mov	r6, r0
 8010b4a:	f7ff fc15 	bl	8010378 <uxr_flash_output_streams>
 8010b4e:	b125      	cbz	r5, 8010b5a <uxr_run_session_until_all_status+0x1e>
 8010b50:	462a      	mov	r2, r5
 8010b52:	21ff      	movs	r1, #255	; 0xff
 8010b54:	4620      	mov	r0, r4
 8010b56:	f007 fd5b 	bl	8018610 <memset>
 8010b5a:	e9c6 a41d 	strd	sl, r4, [r6, #116]	; 0x74
 8010b5e:	67f5      	str	r5, [r6, #124]	; 0x7c
 8010b60:	f000 fd12 	bl	8011588 <uxr_millis>
 8010b64:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 8010b68:	f1aa 0a02 	sub.w	sl, sl, #2
 8010b6c:	4680      	mov	r8, r0
 8010b6e:	4639      	mov	r1, r7
 8010b70:	4630      	mov	r0, r6
 8010b72:	f7ff fe45 	bl	8010800 <listen_message_reliably>
 8010b76:	f000 fd07 	bl	8011588 <uxr_millis>
 8010b7a:	eba0 0008 	sub.w	r0, r0, r8
 8010b7e:	1a39      	subs	r1, r7, r0
 8010b80:	b33d      	cbz	r5, 8010bd2 <uxr_run_session_until_all_status+0x96>
 8010b82:	46cc      	mov	ip, r9
 8010b84:	464a      	mov	r2, r9
 8010b86:	2301      	movs	r3, #1
 8010b88:	e002      	b.n	8010b90 <uxr_run_session_until_all_status+0x54>
 8010b8a:	42ab      	cmp	r3, r5
 8010b8c:	d20c      	bcs.n	8010ba8 <uxr_run_session_until_all_status+0x6c>
 8010b8e:	3301      	adds	r3, #1
 8010b90:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8010b94:	2cff      	cmp	r4, #255	; 0xff
 8010b96:	d1f8      	bne.n	8010b8a <uxr_run_session_until_all_status+0x4e>
 8010b98:	42ab      	cmp	r3, r5
 8010b9a:	f83a 0013 	ldrh.w	r0, [sl, r3, lsl #1]
 8010b9e:	d213      	bcs.n	8010bc8 <uxr_run_session_until_all_status+0x8c>
 8010ba0:	2800      	cmp	r0, #0
 8010ba2:	d0f4      	beq.n	8010b8e <uxr_run_session_until_all_status+0x52>
 8010ba4:	2900      	cmp	r1, #0
 8010ba6:	dce3      	bgt.n	8010b70 <uxr_run_session_until_all_status+0x34>
 8010ba8:	2300      	movs	r3, #0
 8010baa:	444d      	add	r5, r9
 8010bac:	67f3      	str	r3, [r6, #124]	; 0x7c
 8010bae:	e001      	b.n	8010bb4 <uxr_run_session_until_all_status+0x78>
 8010bb0:	2b01      	cmp	r3, #1
 8010bb2:	d812      	bhi.n	8010bda <uxr_run_session_until_all_status+0x9e>
 8010bb4:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8010bb8:	4565      	cmp	r5, ip
 8010bba:	d1f9      	bne.n	8010bb0 <uxr_run_session_until_all_status+0x74>
 8010bbc:	2b01      	cmp	r3, #1
 8010bbe:	bf8c      	ite	hi
 8010bc0:	2000      	movhi	r0, #0
 8010bc2:	2001      	movls	r0, #1
 8010bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010bc8:	2900      	cmp	r1, #0
 8010bca:	dded      	ble.n	8010ba8 <uxr_run_session_until_all_status+0x6c>
 8010bcc:	2800      	cmp	r0, #0
 8010bce:	d1cf      	bne.n	8010b70 <uxr_run_session_until_all_status+0x34>
 8010bd0:	e7ea      	b.n	8010ba8 <uxr_run_session_until_all_status+0x6c>
 8010bd2:	67f5      	str	r5, [r6, #124]	; 0x7c
 8010bd4:	2001      	movs	r0, #1
 8010bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010bda:	2000      	movs	r0, #0
 8010bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08010be0 <uxr_create_session>:
 8010be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010be4:	ed2d 8b02 	vpush	{d8}
 8010be8:	f100 0808 	add.w	r8, r0, #8
 8010bec:	b0a9      	sub	sp, #164	; 0xa4
 8010bee:	4604      	mov	r4, r0
 8010bf0:	4640      	mov	r0, r8
 8010bf2:	f000 fba9 	bl	8011348 <uxr_reset_stream_storage>
 8010bf6:	4620      	mov	r0, r4
 8010bf8:	f000 fb0e 	bl	8011218 <uxr_session_header_offset>
 8010bfc:	a909      	add	r1, sp, #36	; 0x24
 8010bfe:	9000      	str	r0, [sp, #0]
 8010c00:	2300      	movs	r3, #0
 8010c02:	a810      	add	r0, sp, #64	; 0x40
 8010c04:	221c      	movs	r2, #28
 8010c06:	f7fe fec1 	bl	800f98c <ucdr_init_buffer_origin_offset>
 8010c0a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010c0c:	8a1a      	ldrh	r2, [r3, #16]
 8010c0e:	3a04      	subs	r2, #4
 8010c10:	b292      	uxth	r2, r2
 8010c12:	4620      	mov	r0, r4
 8010c14:	a910      	add	r1, sp, #64	; 0x40
 8010c16:	f000 fa23 	bl	8011060 <uxr_buffer_create_session>
 8010c1a:	9910      	ldr	r1, [sp, #64]	; 0x40
 8010c1c:	4620      	mov	r0, r4
 8010c1e:	f000 fa8f 	bl	8011140 <uxr_stamp_create_session_header>
 8010c22:	a810      	add	r0, sp, #64	; 0x40
 8010c24:	f7fe fef0 	bl	800fa08 <ucdr_buffer_length>
 8010c28:	23ff      	movs	r3, #255	; 0xff
 8010c2a:	ee08 0a10 	vmov	s16, r0
 8010c2e:	7163      	strb	r3, [r4, #5]
 8010c30:	f04f 090a 	mov.w	r9, #10
 8010c34:	46c2      	mov	sl, r8
 8010c36:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010c38:	ee18 2a10 	vmov	r2, s16
 8010c3c:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010c40:	a909      	add	r1, sp, #36	; 0x24
 8010c42:	47a8      	blx	r5
 8010c44:	f000 fca0 	bl	8011588 <uxr_millis>
 8010c48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010c4c:	9002      	str	r0, [sp, #8]
 8010c4e:	e00c      	b.n	8010c6a <uxr_create_session+0x8a>
 8010c50:	f000 fc9a 	bl	8011588 <uxr_millis>
 8010c54:	9b02      	ldr	r3, [sp, #8]
 8010c56:	7962      	ldrb	r2, [r4, #5]
 8010c58:	1ac0      	subs	r0, r0, r3
 8010c5a:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	f340 8094 	ble.w	8010d8c <uxr_create_session+0x1ac>
 8010c64:	2aff      	cmp	r2, #255	; 0xff
 8010c66:	f040 8097 	bne.w	8010d98 <uxr_create_session+0x1b8>
 8010c6a:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8010c6c:	a905      	add	r1, sp, #20
 8010c6e:	6895      	ldr	r5, [r2, #8]
 8010c70:	6810      	ldr	r0, [r2, #0]
 8010c72:	aa06      	add	r2, sp, #24
 8010c74:	47a8      	blx	r5
 8010c76:	2800      	cmp	r0, #0
 8010c78:	d0ea      	beq.n	8010c50 <uxr_create_session+0x70>
 8010c7a:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 8010c7e:	a818      	add	r0, sp, #96	; 0x60
 8010c80:	f7fe fe96 	bl	800f9b0 <ucdr_init_buffer>
 8010c84:	2500      	movs	r5, #0
 8010c86:	f10d 0312 	add.w	r3, sp, #18
 8010c8a:	aa04      	add	r2, sp, #16
 8010c8c:	a918      	add	r1, sp, #96	; 0x60
 8010c8e:	4620      	mov	r0, r4
 8010c90:	f88d 5010 	strb.w	r5, [sp, #16]
 8010c94:	f000 fa7e 	bl	8011194 <uxr_read_session_header>
 8010c98:	2800      	cmp	r0, #0
 8010c9a:	d0d9      	beq.n	8010c50 <uxr_create_session+0x70>
 8010c9c:	4629      	mov	r1, r5
 8010c9e:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8010ca2:	f000 fb1b 	bl	80112dc <uxr_stream_id_from_raw>
 8010ca6:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8010caa:	2f01      	cmp	r7, #1
 8010cac:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8010cb0:	f8bd b012 	ldrh.w	fp, [sp, #18]
 8010cb4:	fa5f f880 	uxtb.w	r8, r0
 8010cb8:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8010cbc:	d04d      	beq.n	8010d5a <uxr_create_session+0x17a>
 8010cbe:	2f02      	cmp	r7, #2
 8010cc0:	d00c      	beq.n	8010cdc <uxr_create_session+0xfc>
 8010cc2:	2f00      	cmp	r7, #0
 8010cc4:	d1c4      	bne.n	8010c50 <uxr_create_session+0x70>
 8010cc6:	4639      	mov	r1, r7
 8010cc8:	4638      	mov	r0, r7
 8010cca:	f000 fb07 	bl	80112dc <uxr_stream_id_from_raw>
 8010cce:	a918      	add	r1, sp, #96	; 0x60
 8010cd0:	4602      	mov	r2, r0
 8010cd2:	4620      	mov	r0, r4
 8010cd4:	9208      	str	r2, [sp, #32]
 8010cd6:	f7ff fc0b 	bl	80104f0 <read_submessage_list>
 8010cda:	e7b9      	b.n	8010c50 <uxr_create_session+0x70>
 8010cdc:	4629      	mov	r1, r5
 8010cde:	4650      	mov	r0, sl
 8010ce0:	f000 fbea 	bl	80114b8 <uxr_get_input_reliable_stream>
 8010ce4:	4606      	mov	r6, r0
 8010ce6:	b390      	cbz	r0, 8010d4e <uxr_create_session+0x16e>
 8010ce8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010cea:	9203      	str	r2, [sp, #12]
 8010cec:	a818      	add	r0, sp, #96	; 0x60
 8010cee:	f7fe fe8f 	bl	800fa10 <ucdr_buffer_remaining>
 8010cf2:	4603      	mov	r3, r0
 8010cf4:	f10d 0011 	add.w	r0, sp, #17
 8010cf8:	9000      	str	r0, [sp, #0]
 8010cfa:	9a03      	ldr	r2, [sp, #12]
 8010cfc:	4659      	mov	r1, fp
 8010cfe:	4630      	mov	r0, r6
 8010d00:	f005 fc42 	bl	8016588 <uxr_receive_reliable_message>
 8010d04:	b318      	cbz	r0, 8010d4e <uxr_create_session+0x16e>
 8010d06:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8010d0a:	b9b3      	cbnz	r3, 8010d3a <uxr_create_session+0x15a>
 8010d0c:	f88d 8020 	strb.w	r8, [sp, #32]
 8010d10:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8010d14:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
 8010d18:	9a08      	ldr	r2, [sp, #32]
 8010d1a:	a918      	add	r1, sp, #96	; 0x60
 8010d1c:	4620      	mov	r0, r4
 8010d1e:	f7ff fbe7 	bl	80104f0 <read_submessage_list>
 8010d22:	e00a      	b.n	8010d3a <uxr_create_session+0x15a>
 8010d24:	f04f 0302 	mov.w	r3, #2
 8010d28:	f88d 8020 	strb.w	r8, [sp, #32]
 8010d2c:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8010d30:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 8010d34:	9a08      	ldr	r2, [sp, #32]
 8010d36:	f7ff fbdb 	bl	80104f0 <read_submessage_list>
 8010d3a:	a920      	add	r1, sp, #128	; 0x80
 8010d3c:	2204      	movs	r2, #4
 8010d3e:	4630      	mov	r0, r6
 8010d40:	f005 fca2 	bl	8016688 <uxr_next_input_reliable_buffer_available>
 8010d44:	4603      	mov	r3, r0
 8010d46:	a920      	add	r1, sp, #128	; 0x80
 8010d48:	4620      	mov	r0, r4
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d1ea      	bne.n	8010d24 <uxr_create_session+0x144>
 8010d4e:	462a      	mov	r2, r5
 8010d50:	4641      	mov	r1, r8
 8010d52:	4620      	mov	r0, r4
 8010d54:	f7ff fa4a 	bl	80101ec <write_submessage_acknack.isra.0>
 8010d58:	e77a      	b.n	8010c50 <uxr_create_session+0x70>
 8010d5a:	4629      	mov	r1, r5
 8010d5c:	4650      	mov	r0, sl
 8010d5e:	f000 fba1 	bl	80114a4 <uxr_get_input_best_effort_stream>
 8010d62:	2800      	cmp	r0, #0
 8010d64:	f43f af74 	beq.w	8010c50 <uxr_create_session+0x70>
 8010d68:	4659      	mov	r1, fp
 8010d6a:	f005 fb89 	bl	8016480 <uxr_receive_best_effort_message>
 8010d6e:	2800      	cmp	r0, #0
 8010d70:	f43f af6e 	beq.w	8010c50 <uxr_create_session+0x70>
 8010d74:	f88d 8020 	strb.w	r8, [sp, #32]
 8010d78:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8010d7c:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
 8010d80:	9a08      	ldr	r2, [sp, #32]
 8010d82:	a918      	add	r1, sp, #96	; 0x60
 8010d84:	4620      	mov	r0, r4
 8010d86:	f7ff fbb3 	bl	80104f0 <read_submessage_list>
 8010d8a:	e761      	b.n	8010c50 <uxr_create_session+0x70>
 8010d8c:	f1b9 0901 	subs.w	r9, r9, #1
 8010d90:	d002      	beq.n	8010d98 <uxr_create_session+0x1b8>
 8010d92:	2aff      	cmp	r2, #255	; 0xff
 8010d94:	f43f af4f 	beq.w	8010c36 <uxr_create_session+0x56>
 8010d98:	b12a      	cbz	r2, 8010da6 <uxr_create_session+0x1c6>
 8010d9a:	2000      	movs	r0, #0
 8010d9c:	b029      	add	sp, #164	; 0xa4
 8010d9e:	ecbd 8b02 	vpop	{d8}
 8010da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010da6:	4650      	mov	r0, sl
 8010da8:	f000 face 	bl	8011348 <uxr_reset_stream_storage>
 8010dac:	2001      	movs	r0, #1
 8010dae:	b029      	add	sp, #164	; 0xa4
 8010db0:	ecbd 8b02 	vpop	{d8}
 8010db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010db8 <wait_session_status>:
 8010db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dbc:	4604      	mov	r4, r0
 8010dbe:	b09d      	sub	sp, #116	; 0x74
 8010dc0:	20ff      	movs	r0, #255	; 0xff
 8010dc2:	7160      	strb	r0, [r4, #5]
 8010dc4:	9304      	str	r3, [sp, #16]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	f000 80b8 	beq.w	8010f3c <wait_session_status+0x184>
 8010dcc:	2300      	movs	r3, #0
 8010dce:	468b      	mov	fp, r1
 8010dd0:	4692      	mov	sl, r2
 8010dd2:	9303      	str	r3, [sp, #12]
 8010dd4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010dd6:	4652      	mov	r2, sl
 8010dd8:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010ddc:	4659      	mov	r1, fp
 8010dde:	47a8      	blx	r5
 8010de0:	f000 fbd2 	bl	8011588 <uxr_millis>
 8010de4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010de8:	4605      	mov	r5, r0
 8010dea:	e009      	b.n	8010e00 <wait_session_status+0x48>
 8010dec:	f000 fbcc 	bl	8011588 <uxr_millis>
 8010df0:	1b40      	subs	r0, r0, r5
 8010df2:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	dd42      	ble.n	8010e80 <wait_session_status+0xc8>
 8010dfa:	7960      	ldrb	r0, [r4, #5]
 8010dfc:	28ff      	cmp	r0, #255	; 0xff
 8010dfe:	d148      	bne.n	8010e92 <wait_session_status+0xda>
 8010e00:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8010e02:	a908      	add	r1, sp, #32
 8010e04:	6896      	ldr	r6, [r2, #8]
 8010e06:	6810      	ldr	r0, [r2, #0]
 8010e08:	aa09      	add	r2, sp, #36	; 0x24
 8010e0a:	47b0      	blx	r6
 8010e0c:	2800      	cmp	r0, #0
 8010e0e:	d0ed      	beq.n	8010dec <wait_session_status+0x34>
 8010e10:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8010e14:	a80c      	add	r0, sp, #48	; 0x30
 8010e16:	f7fe fdcb 	bl	800f9b0 <ucdr_init_buffer>
 8010e1a:	2600      	movs	r6, #0
 8010e1c:	f10d 031e 	add.w	r3, sp, #30
 8010e20:	aa07      	add	r2, sp, #28
 8010e22:	a90c      	add	r1, sp, #48	; 0x30
 8010e24:	4620      	mov	r0, r4
 8010e26:	f88d 601c 	strb.w	r6, [sp, #28]
 8010e2a:	f000 f9b3 	bl	8011194 <uxr_read_session_header>
 8010e2e:	2800      	cmp	r0, #0
 8010e30:	d0dc      	beq.n	8010dec <wait_session_status+0x34>
 8010e32:	4631      	mov	r1, r6
 8010e34:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8010e38:	f000 fa50 	bl	80112dc <uxr_stream_id_from_raw>
 8010e3c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8010e40:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8010e44:	9302      	str	r3, [sp, #8]
 8010e46:	2f01      	cmp	r7, #1
 8010e48:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 8010e4c:	fa5f f880 	uxtb.w	r8, r0
 8010e50:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8010e54:	d058      	beq.n	8010f08 <wait_session_status+0x150>
 8010e56:	2f02      	cmp	r7, #2
 8010e58:	d021      	beq.n	8010e9e <wait_session_status+0xe6>
 8010e5a:	2f00      	cmp	r7, #0
 8010e5c:	d1c6      	bne.n	8010dec <wait_session_status+0x34>
 8010e5e:	4639      	mov	r1, r7
 8010e60:	4638      	mov	r0, r7
 8010e62:	f000 fa3b 	bl	80112dc <uxr_stream_id_from_raw>
 8010e66:	a90c      	add	r1, sp, #48	; 0x30
 8010e68:	4602      	mov	r2, r0
 8010e6a:	4620      	mov	r0, r4
 8010e6c:	920b      	str	r2, [sp, #44]	; 0x2c
 8010e6e:	f7ff fb3f 	bl	80104f0 <read_submessage_list>
 8010e72:	f000 fb89 	bl	8011588 <uxr_millis>
 8010e76:	1b40      	subs	r0, r0, r5
 8010e78:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	dcbc      	bgt.n	8010dfa <wait_session_status+0x42>
 8010e80:	9b03      	ldr	r3, [sp, #12]
 8010e82:	9a04      	ldr	r2, [sp, #16]
 8010e84:	7960      	ldrb	r0, [r4, #5]
 8010e86:	3301      	adds	r3, #1
 8010e88:	429a      	cmp	r2, r3
 8010e8a:	9303      	str	r3, [sp, #12]
 8010e8c:	d001      	beq.n	8010e92 <wait_session_status+0xda>
 8010e8e:	28ff      	cmp	r0, #255	; 0xff
 8010e90:	d0a0      	beq.n	8010dd4 <wait_session_status+0x1c>
 8010e92:	38ff      	subs	r0, #255	; 0xff
 8010e94:	bf18      	it	ne
 8010e96:	2001      	movne	r0, #1
 8010e98:	b01d      	add	sp, #116	; 0x74
 8010e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e9e:	4631      	mov	r1, r6
 8010ea0:	f104 0008 	add.w	r0, r4, #8
 8010ea4:	f000 fb08 	bl	80114b8 <uxr_get_input_reliable_stream>
 8010ea8:	4681      	mov	r9, r0
 8010eaa:	b338      	cbz	r0, 8010efc <wait_session_status+0x144>
 8010eac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010eae:	9205      	str	r2, [sp, #20]
 8010eb0:	a80c      	add	r0, sp, #48	; 0x30
 8010eb2:	f7fe fdad 	bl	800fa10 <ucdr_buffer_remaining>
 8010eb6:	4603      	mov	r3, r0
 8010eb8:	f10d 001d 	add.w	r0, sp, #29
 8010ebc:	9000      	str	r0, [sp, #0]
 8010ebe:	9a05      	ldr	r2, [sp, #20]
 8010ec0:	9902      	ldr	r1, [sp, #8]
 8010ec2:	4648      	mov	r0, r9
 8010ec4:	f005 fb60 	bl	8016588 <uxr_receive_reliable_message>
 8010ec8:	b1c0      	cbz	r0, 8010efc <wait_session_status+0x144>
 8010eca:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8010ece:	b95b      	cbnz	r3, 8010ee8 <wait_session_status+0x130>
 8010ed0:	e03c      	b.n	8010f4c <wait_session_status+0x194>
 8010ed2:	f04f 0302 	mov.w	r3, #2
 8010ed6:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 8010eda:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8010ede:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 8010ee2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010ee4:	f7ff fb04 	bl	80104f0 <read_submessage_list>
 8010ee8:	a914      	add	r1, sp, #80	; 0x50
 8010eea:	2204      	movs	r2, #4
 8010eec:	4648      	mov	r0, r9
 8010eee:	f005 fbcb 	bl	8016688 <uxr_next_input_reliable_buffer_available>
 8010ef2:	4603      	mov	r3, r0
 8010ef4:	a914      	add	r1, sp, #80	; 0x50
 8010ef6:	4620      	mov	r0, r4
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d1ea      	bne.n	8010ed2 <wait_session_status+0x11a>
 8010efc:	4632      	mov	r2, r6
 8010efe:	4641      	mov	r1, r8
 8010f00:	4620      	mov	r0, r4
 8010f02:	f7ff f973 	bl	80101ec <write_submessage_acknack.isra.0>
 8010f06:	e771      	b.n	8010dec <wait_session_status+0x34>
 8010f08:	4631      	mov	r1, r6
 8010f0a:	f104 0008 	add.w	r0, r4, #8
 8010f0e:	f000 fac9 	bl	80114a4 <uxr_get_input_best_effort_stream>
 8010f12:	2800      	cmp	r0, #0
 8010f14:	f43f af6a 	beq.w	8010dec <wait_session_status+0x34>
 8010f18:	9902      	ldr	r1, [sp, #8]
 8010f1a:	f005 fab1 	bl	8016480 <uxr_receive_best_effort_message>
 8010f1e:	2800      	cmp	r0, #0
 8010f20:	f43f af64 	beq.w	8010dec <wait_session_status+0x34>
 8010f24:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 8010f28:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8010f2c:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8010f30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010f32:	a90c      	add	r1, sp, #48	; 0x30
 8010f34:	4620      	mov	r0, r4
 8010f36:	f7ff fadb 	bl	80104f0 <read_submessage_list>
 8010f3a:	e757      	b.n	8010dec <wait_session_status+0x34>
 8010f3c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010f3e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010f42:	47a0      	blx	r4
 8010f44:	2001      	movs	r0, #1
 8010f46:	b01d      	add	sp, #116	; 0x74
 8010f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f4c:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 8010f50:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8010f54:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8010f58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010f5a:	a90c      	add	r1, sp, #48	; 0x30
 8010f5c:	4620      	mov	r0, r4
 8010f5e:	f7ff fac7 	bl	80104f0 <read_submessage_list>
 8010f62:	e7c1      	b.n	8010ee8 <wait_session_status+0x130>

08010f64 <uxr_delete_session_retries>:
 8010f64:	b530      	push	{r4, r5, lr}
 8010f66:	b08f      	sub	sp, #60	; 0x3c
 8010f68:	4604      	mov	r4, r0
 8010f6a:	460d      	mov	r5, r1
 8010f6c:	f000 f954 	bl	8011218 <uxr_session_header_offset>
 8010f70:	2300      	movs	r3, #0
 8010f72:	2210      	movs	r2, #16
 8010f74:	9000      	str	r0, [sp, #0]
 8010f76:	a902      	add	r1, sp, #8
 8010f78:	a806      	add	r0, sp, #24
 8010f7a:	f7fe fd07 	bl	800f98c <ucdr_init_buffer_origin_offset>
 8010f7e:	a906      	add	r1, sp, #24
 8010f80:	4620      	mov	r0, r4
 8010f82:	f000 f897 	bl	80110b4 <uxr_buffer_delete_session>
 8010f86:	2200      	movs	r2, #0
 8010f88:	4611      	mov	r1, r2
 8010f8a:	9b06      	ldr	r3, [sp, #24]
 8010f8c:	4620      	mov	r0, r4
 8010f8e:	f000 f8eb 	bl	8011168 <uxr_stamp_session_header>
 8010f92:	a806      	add	r0, sp, #24
 8010f94:	f7fe fd38 	bl	800fa08 <ucdr_buffer_length>
 8010f98:	462b      	mov	r3, r5
 8010f9a:	4602      	mov	r2, r0
 8010f9c:	a902      	add	r1, sp, #8
 8010f9e:	4620      	mov	r0, r4
 8010fa0:	f7ff ff0a 	bl	8010db8 <wait_session_status>
 8010fa4:	b118      	cbz	r0, 8010fae <uxr_delete_session_retries+0x4a>
 8010fa6:	7960      	ldrb	r0, [r4, #5]
 8010fa8:	fab0 f080 	clz	r0, r0
 8010fac:	0940      	lsrs	r0, r0, #5
 8010fae:	b00f      	add	sp, #60	; 0x3c
 8010fb0:	bd30      	pop	{r4, r5, pc}
 8010fb2:	bf00      	nop

08010fb4 <uxr_prepare_stream_to_write_submessage>:
 8010fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010fb8:	b082      	sub	sp, #8
 8010fba:	4682      	mov	sl, r0
 8010fbc:	4610      	mov	r0, r2
 8010fbe:	4615      	mov	r5, r2
 8010fc0:	461e      	mov	r6, r3
 8010fc2:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8010fc6:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8010fca:	9101      	str	r1, [sp, #4]
 8010fcc:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8010fd0:	f000 fad4 	bl	801157c <uxr_submessage_padding>
 8010fd4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010fd8:	f105 0904 	add.w	r9, r5, #4
 8010fdc:	2b01      	cmp	r3, #1
 8010fde:	4481      	add	r9, r0
 8010fe0:	d01d      	beq.n	801101e <uxr_prepare_stream_to_write_submessage+0x6a>
 8010fe2:	2b02      	cmp	r3, #2
 8010fe4:	d116      	bne.n	8011014 <uxr_prepare_stream_to_write_submessage+0x60>
 8010fe6:	4621      	mov	r1, r4
 8010fe8:	f10a 0008 	add.w	r0, sl, #8
 8010fec:	f000 fa4e 	bl	801148c <uxr_get_output_reliable_stream>
 8010ff0:	4604      	mov	r4, r0
 8010ff2:	b158      	cbz	r0, 801100c <uxr_prepare_stream_to_write_submessage+0x58>
 8010ff4:	4649      	mov	r1, r9
 8010ff6:	4632      	mov	r2, r6
 8010ff8:	f005 fcfc 	bl	80169f4 <uxr_prepare_reliable_buffer_to_write>
 8010ffc:	4604      	mov	r4, r0
 8010ffe:	b12c      	cbz	r4, 801100c <uxr_prepare_stream_to_write_submessage+0x58>
 8011000:	4643      	mov	r3, r8
 8011002:	b2aa      	uxth	r2, r5
 8011004:	4639      	mov	r1, r7
 8011006:	4630      	mov	r0, r6
 8011008:	f000 fa78 	bl	80114fc <uxr_buffer_submessage_header>
 801100c:	4620      	mov	r0, r4
 801100e:	b002      	add	sp, #8
 8011010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011014:	2400      	movs	r4, #0
 8011016:	4620      	mov	r0, r4
 8011018:	b002      	add	sp, #8
 801101a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801101e:	4621      	mov	r1, r4
 8011020:	f10a 0008 	add.w	r0, sl, #8
 8011024:	f000 fa2a 	bl	801147c <uxr_get_output_best_effort_stream>
 8011028:	4604      	mov	r4, r0
 801102a:	2800      	cmp	r0, #0
 801102c:	d0ee      	beq.n	801100c <uxr_prepare_stream_to_write_submessage+0x58>
 801102e:	4649      	mov	r1, r9
 8011030:	4632      	mov	r2, r6
 8011032:	f005 fc1b 	bl	801686c <uxr_prepare_best_effort_buffer_to_write>
 8011036:	4604      	mov	r4, r0
 8011038:	e7e1      	b.n	8010ffe <uxr_prepare_stream_to_write_submessage+0x4a>
 801103a:	bf00      	nop

0801103c <uxr_init_session_info>:
 801103c:	b470      	push	{r4, r5, r6}
 801103e:	7102      	strb	r2, [r0, #4]
 8011040:	0e16      	lsrs	r6, r2, #24
 8011042:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8011046:	f3c2 2407 	ubfx	r4, r2, #8, #8
 801104a:	23ff      	movs	r3, #255	; 0xff
 801104c:	2209      	movs	r2, #9
 801104e:	7046      	strb	r6, [r0, #1]
 8011050:	7085      	strb	r5, [r0, #2]
 8011052:	70c4      	strb	r4, [r0, #3]
 8011054:	7001      	strb	r1, [r0, #0]
 8011056:	bc70      	pop	{r4, r5, r6}
 8011058:	80c2      	strh	r2, [r0, #6]
 801105a:	7143      	strb	r3, [r0, #5]
 801105c:	4770      	bx	lr
 801105e:	bf00      	nop

08011060 <uxr_buffer_create_session>:
 8011060:	b570      	push	{r4, r5, r6, lr}
 8011062:	b088      	sub	sp, #32
 8011064:	2300      	movs	r3, #0
 8011066:	4d12      	ldr	r5, [pc, #72]	; (80110b0 <uxr_buffer_create_session+0x50>)
 8011068:	9307      	str	r3, [sp, #28]
 801106a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801106e:	7802      	ldrb	r2, [r0, #0]
 8011070:	9303      	str	r3, [sp, #12]
 8011072:	460c      	mov	r4, r1
 8011074:	f88d 200c 	strb.w	r2, [sp, #12]
 8011078:	2101      	movs	r1, #1
 801107a:	682a      	ldr	r2, [r5, #0]
 801107c:	f8d0 6001 	ldr.w	r6, [r0, #1]
 8011080:	88ad      	ldrh	r5, [r5, #4]
 8011082:	80c1      	strh	r1, [r0, #6]
 8011084:	f8ad 1004 	strh.w	r1, [sp, #4]
 8011088:	9200      	str	r2, [sp, #0]
 801108a:	4619      	mov	r1, r3
 801108c:	2210      	movs	r2, #16
 801108e:	4620      	mov	r0, r4
 8011090:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8011094:	9306      	str	r3, [sp, #24]
 8011096:	f88d 300d 	strb.w	r3, [sp, #13]
 801109a:	9602      	str	r6, [sp, #8]
 801109c:	f8ad 5006 	strh.w	r5, [sp, #6]
 80110a0:	f000 fa2c 	bl	80114fc <uxr_buffer_submessage_header>
 80110a4:	4620      	mov	r0, r4
 80110a6:	4669      	mov	r1, sp
 80110a8:	f001 fa50 	bl	801254c <uxr_serialize_CREATE_CLIENT_Payload>
 80110ac:	b008      	add	sp, #32
 80110ae:	bd70      	pop	{r4, r5, r6, pc}
 80110b0:	080198a0 	.word	0x080198a0

080110b4 <uxr_buffer_delete_session>:
 80110b4:	b530      	push	{r4, r5, lr}
 80110b6:	4b0c      	ldr	r3, [pc, #48]	; (80110e8 <uxr_buffer_delete_session+0x34>)
 80110b8:	b083      	sub	sp, #12
 80110ba:	891b      	ldrh	r3, [r3, #8]
 80110bc:	f8ad 3006 	strh.w	r3, [sp, #6]
 80110c0:	2202      	movs	r2, #2
 80110c2:	460c      	mov	r4, r1
 80110c4:	80c2      	strh	r2, [r0, #6]
 80110c6:	2300      	movs	r3, #0
 80110c8:	2204      	movs	r2, #4
 80110ca:	4608      	mov	r0, r1
 80110cc:	f44f 7500 	mov.w	r5, #512	; 0x200
 80110d0:	2103      	movs	r1, #3
 80110d2:	f8ad 5004 	strh.w	r5, [sp, #4]
 80110d6:	f000 fa11 	bl	80114fc <uxr_buffer_submessage_header>
 80110da:	4620      	mov	r0, r4
 80110dc:	a901      	add	r1, sp, #4
 80110de:	f001 fae3 	bl	80126a8 <uxr_serialize_DELETE_Payload>
 80110e2:	b003      	add	sp, #12
 80110e4:	bd30      	pop	{r4, r5, pc}
 80110e6:	bf00      	nop
 80110e8:	080198a0 	.word	0x080198a0

080110ec <uxr_read_create_session_status>:
 80110ec:	b510      	push	{r4, lr}
 80110ee:	b088      	sub	sp, #32
 80110f0:	4604      	mov	r4, r0
 80110f2:	4608      	mov	r0, r1
 80110f4:	a901      	add	r1, sp, #4
 80110f6:	f001 fae7 	bl	80126c8 <uxr_deserialize_STATUS_AGENT_Payload>
 80110fa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80110fe:	7163      	strb	r3, [r4, #5]
 8011100:	b008      	add	sp, #32
 8011102:	bd10      	pop	{r4, pc}

08011104 <uxr_read_delete_session_status>:
 8011104:	b510      	push	{r4, lr}
 8011106:	4604      	mov	r4, r0
 8011108:	b084      	sub	sp, #16
 801110a:	4608      	mov	r0, r1
 801110c:	a902      	add	r1, sp, #8
 801110e:	f001 fb0b 	bl	8012728 <uxr_deserialize_STATUS_Payload>
 8011112:	88e3      	ldrh	r3, [r4, #6]
 8011114:	2b02      	cmp	r3, #2
 8011116:	d001      	beq.n	801111c <uxr_read_delete_session_status+0x18>
 8011118:	b004      	add	sp, #16
 801111a:	bd10      	pop	{r4, pc}
 801111c:	f10d 000a 	add.w	r0, sp, #10
 8011120:	f7fe fec6 	bl	800feb0 <uxr_object_id_from_raw>
 8011124:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8011128:	f89d 3009 	ldrb.w	r3, [sp, #9]
 801112c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011130:	b29b      	uxth	r3, r3
 8011132:	2b02      	cmp	r3, #2
 8011134:	bf04      	itt	eq
 8011136:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 801113a:	7163      	strbeq	r3, [r4, #5]
 801113c:	b004      	add	sp, #16
 801113e:	bd10      	pop	{r4, pc}

08011140 <uxr_stamp_create_session_header>:
 8011140:	b510      	push	{r4, lr}
 8011142:	4604      	mov	r4, r0
 8011144:	b08a      	sub	sp, #40	; 0x28
 8011146:	a802      	add	r0, sp, #8
 8011148:	2208      	movs	r2, #8
 801114a:	f7fe fc31 	bl	800f9b0 <ucdr_init_buffer>
 801114e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011152:	9400      	str	r4, [sp, #0]
 8011154:	2300      	movs	r3, #0
 8011156:	a802      	add	r0, sp, #8
 8011158:	f001 0180 	and.w	r1, r1, #128	; 0x80
 801115c:	461a      	mov	r2, r3
 801115e:	f000 fbcb 	bl	80118f8 <uxr_serialize_message_header>
 8011162:	b00a      	add	sp, #40	; 0x28
 8011164:	bd10      	pop	{r4, pc}
 8011166:	bf00      	nop

08011168 <uxr_stamp_session_header>:
 8011168:	b570      	push	{r4, r5, r6, lr}
 801116a:	4604      	mov	r4, r0
 801116c:	b08c      	sub	sp, #48	; 0x30
 801116e:	460d      	mov	r5, r1
 8011170:	4616      	mov	r6, r2
 8011172:	4619      	mov	r1, r3
 8011174:	a804      	add	r0, sp, #16
 8011176:	2208      	movs	r2, #8
 8011178:	9603      	str	r6, [sp, #12]
 801117a:	f7fe fc19 	bl	800f9b0 <ucdr_init_buffer>
 801117e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011182:	9b03      	ldr	r3, [sp, #12]
 8011184:	9400      	str	r4, [sp, #0]
 8011186:	462a      	mov	r2, r5
 8011188:	a804      	add	r0, sp, #16
 801118a:	f000 fbb5 	bl	80118f8 <uxr_serialize_message_header>
 801118e:	b00c      	add	sp, #48	; 0x30
 8011190:	bd70      	pop	{r4, r5, r6, pc}
 8011192:	bf00      	nop

08011194 <uxr_read_session_header>:
 8011194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011198:	4607      	mov	r7, r0
 801119a:	b084      	sub	sp, #16
 801119c:	4608      	mov	r0, r1
 801119e:	460c      	mov	r4, r1
 80111a0:	4615      	mov	r5, r2
 80111a2:	461e      	mov	r6, r3
 80111a4:	f7fe fc34 	bl	800fa10 <ucdr_buffer_remaining>
 80111a8:	2808      	cmp	r0, #8
 80111aa:	d803      	bhi.n	80111b4 <uxr_read_session_header+0x20>
 80111ac:	2000      	movs	r0, #0
 80111ae:	b004      	add	sp, #16
 80111b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111b4:	f10d 080c 	add.w	r8, sp, #12
 80111b8:	4633      	mov	r3, r6
 80111ba:	462a      	mov	r2, r5
 80111bc:	4620      	mov	r0, r4
 80111be:	f8cd 8000 	str.w	r8, [sp]
 80111c2:	f10d 010b 	add.w	r1, sp, #11
 80111c6:	f000 fbb5 	bl	8011934 <uxr_deserialize_message_header>
 80111ca:	783a      	ldrb	r2, [r7, #0]
 80111cc:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80111d0:	4293      	cmp	r3, r2
 80111d2:	d1eb      	bne.n	80111ac <uxr_read_session_header+0x18>
 80111d4:	061b      	lsls	r3, r3, #24
 80111d6:	d41c      	bmi.n	8011212 <uxr_read_session_header+0x7e>
 80111d8:	f898 2000 	ldrb.w	r2, [r8]
 80111dc:	787b      	ldrb	r3, [r7, #1]
 80111de:	429a      	cmp	r2, r3
 80111e0:	d003      	beq.n	80111ea <uxr_read_session_header+0x56>
 80111e2:	2001      	movs	r0, #1
 80111e4:	f080 0001 	eor.w	r0, r0, #1
 80111e8:	e7e1      	b.n	80111ae <uxr_read_session_header+0x1a>
 80111ea:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80111ee:	78bb      	ldrb	r3, [r7, #2]
 80111f0:	429a      	cmp	r2, r3
 80111f2:	f107 0102 	add.w	r1, r7, #2
 80111f6:	d1f4      	bne.n	80111e2 <uxr_read_session_header+0x4e>
 80111f8:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80111fc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011200:	429a      	cmp	r2, r3
 8011202:	d1ee      	bne.n	80111e2 <uxr_read_session_header+0x4e>
 8011204:	784b      	ldrb	r3, [r1, #1]
 8011206:	f89d 200f 	ldrb.w	r2, [sp, #15]
 801120a:	429a      	cmp	r2, r3
 801120c:	d1e9      	bne.n	80111e2 <uxr_read_session_header+0x4e>
 801120e:	2000      	movs	r0, #0
 8011210:	e7e8      	b.n	80111e4 <uxr_read_session_header+0x50>
 8011212:	2001      	movs	r0, #1
 8011214:	e7cb      	b.n	80111ae <uxr_read_session_header+0x1a>
 8011216:	bf00      	nop

08011218 <uxr_session_header_offset>:
 8011218:	f990 3000 	ldrsb.w	r3, [r0]
 801121c:	2b00      	cmp	r3, #0
 801121e:	bfac      	ite	ge
 8011220:	2008      	movge	r0, #8
 8011222:	2004      	movlt	r0, #4
 8011224:	4770      	bx	lr
 8011226:	bf00      	nop

08011228 <uxr_init_base_object_request>:
 8011228:	b530      	push	{r4, r5, lr}
 801122a:	88c3      	ldrh	r3, [r0, #6]
 801122c:	b083      	sub	sp, #12
 801122e:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 8011232:	9101      	str	r1, [sp, #4]
 8011234:	f1a3 010a 	sub.w	r1, r3, #10
 8011238:	b289      	uxth	r1, r1
 801123a:	42a1      	cmp	r1, r4
 801123c:	d80e      	bhi.n	801125c <uxr_init_base_object_request+0x34>
 801123e:	3301      	adds	r3, #1
 8011240:	b29c      	uxth	r4, r3
 8011242:	f3c3 2507 	ubfx	r5, r3, #8, #8
 8011246:	b2db      	uxtb	r3, r3
 8011248:	80c4      	strh	r4, [r0, #6]
 801124a:	1c91      	adds	r1, r2, #2
 801124c:	9801      	ldr	r0, [sp, #4]
 801124e:	7015      	strb	r5, [r2, #0]
 8011250:	7053      	strb	r3, [r2, #1]
 8011252:	f7fe fe41 	bl	800fed8 <uxr_object_id_to_raw>
 8011256:	4620      	mov	r0, r4
 8011258:	b003      	add	sp, #12
 801125a:	bd30      	pop	{r4, r5, pc}
 801125c:	230a      	movs	r3, #10
 801125e:	461c      	mov	r4, r3
 8011260:	2500      	movs	r5, #0
 8011262:	e7f1      	b.n	8011248 <uxr_init_base_object_request+0x20>

08011264 <uxr_parse_base_object_request>:
 8011264:	b570      	push	{r4, r5, r6, lr}
 8011266:	4604      	mov	r4, r0
 8011268:	3002      	adds	r0, #2
 801126a:	460d      	mov	r5, r1
 801126c:	4616      	mov	r6, r2
 801126e:	f7fe fe1f 	bl	800feb0 <uxr_object_id_from_raw>
 8011272:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8011276:	8028      	strh	r0, [r5, #0]
 8011278:	806b      	strh	r3, [r5, #2]
 801127a:	7822      	ldrb	r2, [r4, #0]
 801127c:	7863      	ldrb	r3, [r4, #1]
 801127e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011282:	8033      	strh	r3, [r6, #0]
 8011284:	bd70      	pop	{r4, r5, r6, pc}
 8011286:	bf00      	nop

08011288 <uxr_stream_id>:
 8011288:	b410      	push	{r4}
 801128a:	2901      	cmp	r1, #1
 801128c:	b083      	sub	sp, #12
 801128e:	d01f      	beq.n	80112d0 <uxr_stream_id+0x48>
 8011290:	2902      	cmp	r1, #2
 8011292:	f04f 0400 	mov.w	r4, #0
 8011296:	d01e      	beq.n	80112d6 <uxr_stream_id+0x4e>
 8011298:	2300      	movs	r3, #0
 801129a:	f364 0307 	bfi	r3, r4, #0, #8
 801129e:	f360 230f 	bfi	r3, r0, #8, #8
 80112a2:	f361 4317 	bfi	r3, r1, #16, #8
 80112a6:	f362 631f 	bfi	r3, r2, #24, #8
 80112aa:	b2da      	uxtb	r2, r3
 80112ac:	2000      	movs	r0, #0
 80112ae:	f362 0007 	bfi	r0, r2, #0, #8
 80112b2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80112b6:	f362 200f 	bfi	r0, r2, #8, #8
 80112ba:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80112be:	f362 4017 	bfi	r0, r2, #16, #8
 80112c2:	0e1b      	lsrs	r3, r3, #24
 80112c4:	f363 601f 	bfi	r0, r3, #24, #8
 80112c8:	b003      	add	sp, #12
 80112ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80112ce:	4770      	bx	lr
 80112d0:	1c44      	adds	r4, r0, #1
 80112d2:	b2e4      	uxtb	r4, r4
 80112d4:	e7e0      	b.n	8011298 <uxr_stream_id+0x10>
 80112d6:	f080 0480 	eor.w	r4, r0, #128	; 0x80
 80112da:	e7dd      	b.n	8011298 <uxr_stream_id+0x10>

080112dc <uxr_stream_id_from_raw>:
 80112dc:	b410      	push	{r4}
 80112de:	b083      	sub	sp, #12
 80112e0:	b128      	cbz	r0, 80112ee <uxr_stream_id_from_raw+0x12>
 80112e2:	0603      	lsls	r3, r0, #24
 80112e4:	d421      	bmi.n	801132a <uxr_stream_id_from_raw+0x4e>
 80112e6:	1e42      	subs	r2, r0, #1
 80112e8:	b2d2      	uxtb	r2, r2
 80112ea:	2401      	movs	r4, #1
 80112ec:	e001      	b.n	80112f2 <uxr_stream_id_from_raw+0x16>
 80112ee:	4604      	mov	r4, r0
 80112f0:	4602      	mov	r2, r0
 80112f2:	2300      	movs	r3, #0
 80112f4:	f360 0307 	bfi	r3, r0, #0, #8
 80112f8:	f362 230f 	bfi	r3, r2, #8, #8
 80112fc:	f364 4317 	bfi	r3, r4, #16, #8
 8011300:	f361 631f 	bfi	r3, r1, #24, #8
 8011304:	b2da      	uxtb	r2, r3
 8011306:	2000      	movs	r0, #0
 8011308:	f362 0007 	bfi	r0, r2, #0, #8
 801130c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8011310:	f362 200f 	bfi	r0, r2, #8, #8
 8011314:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011318:	f362 4017 	bfi	r0, r2, #16, #8
 801131c:	0e1b      	lsrs	r3, r3, #24
 801131e:	f363 601f 	bfi	r0, r3, #24, #8
 8011322:	b003      	add	sp, #12
 8011324:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011328:	4770      	bx	lr
 801132a:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 801132e:	2402      	movs	r4, #2
 8011330:	e7df      	b.n	80112f2 <uxr_stream_id_from_raw+0x16>
 8011332:	bf00      	nop

08011334 <uxr_init_stream_storage>:
 8011334:	2300      	movs	r3, #0
 8011336:	7403      	strb	r3, [r0, #16]
 8011338:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 801133c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8011340:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 8011344:	4770      	bx	lr
 8011346:	bf00      	nop

08011348 <uxr_reset_stream_storage>:
 8011348:	b570      	push	{r4, r5, r6, lr}
 801134a:	7c03      	ldrb	r3, [r0, #16]
 801134c:	4604      	mov	r4, r0
 801134e:	b153      	cbz	r3, 8011366 <uxr_reset_stream_storage+0x1e>
 8011350:	4606      	mov	r6, r0
 8011352:	2500      	movs	r5, #0
 8011354:	4630      	mov	r0, r6
 8011356:	f005 fa83 	bl	8016860 <uxr_reset_output_best_effort_stream>
 801135a:	7c23      	ldrb	r3, [r4, #16]
 801135c:	3501      	adds	r5, #1
 801135e:	42ab      	cmp	r3, r5
 8011360:	f106 0610 	add.w	r6, r6, #16
 8011364:	d8f6      	bhi.n	8011354 <uxr_reset_stream_storage+0xc>
 8011366:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801136a:	b163      	cbz	r3, 8011386 <uxr_reset_stream_storage+0x3e>
 801136c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011370:	2500      	movs	r5, #0
 8011372:	4630      	mov	r0, r6
 8011374:	f005 f880 	bl	8016478 <uxr_reset_input_best_effort_stream>
 8011378:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801137c:	3501      	adds	r5, #1
 801137e:	42ab      	cmp	r3, r5
 8011380:	f106 0602 	add.w	r6, r6, #2
 8011384:	d8f5      	bhi.n	8011372 <uxr_reset_stream_storage+0x2a>
 8011386:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 801138a:	b163      	cbz	r3, 80113a6 <uxr_reset_stream_storage+0x5e>
 801138c:	f104 0618 	add.w	r6, r4, #24
 8011390:	2500      	movs	r5, #0
 8011392:	4630      	mov	r0, r6
 8011394:	f005 fb04 	bl	80169a0 <uxr_reset_output_reliable_stream>
 8011398:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 801139c:	3501      	adds	r5, #1
 801139e:	42ab      	cmp	r3, r5
 80113a0:	f106 0628 	add.w	r6, r6, #40	; 0x28
 80113a4:	d8f5      	bhi.n	8011392 <uxr_reset_stream_storage+0x4a>
 80113a6:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80113aa:	b163      	cbz	r3, 80113c6 <uxr_reset_stream_storage+0x7e>
 80113ac:	f104 0648 	add.w	r6, r4, #72	; 0x48
 80113b0:	2500      	movs	r5, #0
 80113b2:	4630      	mov	r0, r6
 80113b4:	f005 f8c8 	bl	8016548 <uxr_reset_input_reliable_stream>
 80113b8:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80113bc:	3501      	adds	r5, #1
 80113be:	42ab      	cmp	r3, r5
 80113c0:	f106 0618 	add.w	r6, r6, #24
 80113c4:	d8f5      	bhi.n	80113b2 <uxr_reset_stream_storage+0x6a>
 80113c6:	bd70      	pop	{r4, r5, r6, pc}

080113c8 <uxr_add_output_best_effort_buffer>:
 80113c8:	b530      	push	{r4, r5, lr}
 80113ca:	7c04      	ldrb	r4, [r0, #16]
 80113cc:	1c65      	adds	r5, r4, #1
 80113ce:	b083      	sub	sp, #12
 80113d0:	7405      	strb	r5, [r0, #16]
 80113d2:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80113d6:	f005 fa37 	bl	8016848 <uxr_init_output_best_effort_stream>
 80113da:	2201      	movs	r2, #1
 80113dc:	4620      	mov	r0, r4
 80113de:	4611      	mov	r1, r2
 80113e0:	b003      	add	sp, #12
 80113e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80113e6:	f7ff bf4f 	b.w	8011288 <uxr_stream_id>
 80113ea:	bf00      	nop

080113ec <uxr_add_output_reliable_buffer>:
 80113ec:	b570      	push	{r4, r5, r6, lr}
 80113ee:	b084      	sub	sp, #16
 80113f0:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 80113f4:	f89d 6020 	ldrb.w	r6, [sp, #32]
 80113f8:	9600      	str	r6, [sp, #0]
 80113fa:	2528      	movs	r5, #40	; 0x28
 80113fc:	1c66      	adds	r6, r4, #1
 80113fe:	fb05 0504 	mla	r5, r5, r4, r0
 8011402:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
 8011406:	f105 0018 	add.w	r0, r5, #24
 801140a:	f005 fa97 	bl	801693c <uxr_init_output_reliable_stream>
 801140e:	4620      	mov	r0, r4
 8011410:	2201      	movs	r2, #1
 8011412:	2102      	movs	r1, #2
 8011414:	b004      	add	sp, #16
 8011416:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801141a:	f7ff bf35 	b.w	8011288 <uxr_stream_id>
 801141e:	bf00      	nop

08011420 <uxr_add_input_best_effort_buffer>:
 8011420:	b510      	push	{r4, lr}
 8011422:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 8011426:	1c62      	adds	r2, r4, #1
 8011428:	f104 0321 	add.w	r3, r4, #33	; 0x21
 801142c:	b082      	sub	sp, #8
 801142e:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 8011432:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8011436:	f005 f81b 	bl	8016470 <uxr_init_input_best_effort_stream>
 801143a:	4620      	mov	r0, r4
 801143c:	2200      	movs	r2, #0
 801143e:	2101      	movs	r1, #1
 8011440:	b002      	add	sp, #8
 8011442:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011446:	f7ff bf1f 	b.w	8011288 <uxr_stream_id>
 801144a:	bf00      	nop

0801144c <uxr_add_input_reliable_buffer>:
 801144c:	b570      	push	{r4, r5, r6, lr}
 801144e:	b084      	sub	sp, #16
 8011450:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 8011454:	9e08      	ldr	r6, [sp, #32]
 8011456:	9600      	str	r6, [sp, #0]
 8011458:	2518      	movs	r5, #24
 801145a:	1c66      	adds	r6, r4, #1
 801145c:	fb05 0504 	mla	r5, r5, r4, r0
 8011460:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
 8011464:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8011468:	f005 f84a 	bl	8016500 <uxr_init_input_reliable_stream>
 801146c:	4620      	mov	r0, r4
 801146e:	2200      	movs	r2, #0
 8011470:	2102      	movs	r1, #2
 8011472:	b004      	add	sp, #16
 8011474:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011478:	f7ff bf06 	b.w	8011288 <uxr_stream_id>

0801147c <uxr_get_output_best_effort_stream>:
 801147c:	7c03      	ldrb	r3, [r0, #16]
 801147e:	428b      	cmp	r3, r1
 8011480:	bf8c      	ite	hi
 8011482:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8011486:	2000      	movls	r0, #0
 8011488:	4770      	bx	lr
 801148a:	bf00      	nop

0801148c <uxr_get_output_reliable_stream>:
 801148c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8011490:	428b      	cmp	r3, r1
 8011492:	bf83      	ittte	hi
 8011494:	2328      	movhi	r3, #40	; 0x28
 8011496:	fb03 0101 	mlahi	r1, r3, r1, r0
 801149a:	f101 0018 	addhi.w	r0, r1, #24
 801149e:	2000      	movls	r0, #0
 80114a0:	4770      	bx	lr
 80114a2:	bf00      	nop

080114a4 <uxr_get_input_best_effort_stream>:
 80114a4:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80114a8:	428b      	cmp	r3, r1
 80114aa:	bf86      	itte	hi
 80114ac:	3121      	addhi	r1, #33	; 0x21
 80114ae:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 80114b2:	2000      	movls	r0, #0
 80114b4:	4770      	bx	lr
 80114b6:	bf00      	nop

080114b8 <uxr_get_input_reliable_stream>:
 80114b8:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 80114bc:	428b      	cmp	r3, r1
 80114be:	bf83      	ittte	hi
 80114c0:	2318      	movhi	r3, #24
 80114c2:	fb03 0101 	mlahi	r1, r3, r1, r0
 80114c6:	f101 0048 	addhi.w	r0, r1, #72	; 0x48
 80114ca:	2000      	movls	r0, #0
 80114cc:	4770      	bx	lr
 80114ce:	bf00      	nop

080114d0 <uxr_output_streams_confirmed>:
 80114d0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80114d4:	b183      	cbz	r3, 80114f8 <uxr_output_streams_confirmed+0x28>
 80114d6:	b570      	push	{r4, r5, r6, lr}
 80114d8:	4606      	mov	r6, r0
 80114da:	f100 0518 	add.w	r5, r0, #24
 80114de:	2400      	movs	r4, #0
 80114e0:	e001      	b.n	80114e6 <uxr_output_streams_confirmed+0x16>
 80114e2:	3528      	adds	r5, #40	; 0x28
 80114e4:	b138      	cbz	r0, 80114f6 <uxr_output_streams_confirmed+0x26>
 80114e6:	4628      	mov	r0, r5
 80114e8:	f005 fcbe 	bl	8016e68 <uxr_is_output_up_to_date>
 80114ec:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 80114f0:	3401      	adds	r4, #1
 80114f2:	42a3      	cmp	r3, r4
 80114f4:	d8f5      	bhi.n	80114e2 <uxr_output_streams_confirmed+0x12>
 80114f6:	bd70      	pop	{r4, r5, r6, pc}
 80114f8:	2001      	movs	r0, #1
 80114fa:	4770      	bx	lr

080114fc <uxr_buffer_submessage_header>:
 80114fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114fe:	4604      	mov	r4, r0
 8011500:	460e      	mov	r6, r1
 8011502:	2104      	movs	r1, #4
 8011504:	4615      	mov	r5, r2
 8011506:	461f      	mov	r7, r3
 8011508:	f7fe fa6c 	bl	800f9e4 <ucdr_align_to>
 801150c:	2301      	movs	r3, #1
 801150e:	ea47 0203 	orr.w	r2, r7, r3
 8011512:	4631      	mov	r1, r6
 8011514:	7523      	strb	r3, [r4, #20]
 8011516:	4620      	mov	r0, r4
 8011518:	462b      	mov	r3, r5
 801151a:	f000 fa2b 	bl	8011974 <uxr_serialize_submessage_header>
 801151e:	4620      	mov	r0, r4
 8011520:	f7fe fa76 	bl	800fa10 <ucdr_buffer_remaining>
 8011524:	42a8      	cmp	r0, r5
 8011526:	bf34      	ite	cc
 8011528:	2000      	movcc	r0, #0
 801152a:	2001      	movcs	r0, #1
 801152c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801152e:	bf00      	nop

08011530 <uxr_read_submessage_header>:
 8011530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011534:	4604      	mov	r4, r0
 8011536:	460d      	mov	r5, r1
 8011538:	2104      	movs	r1, #4
 801153a:	4616      	mov	r6, r2
 801153c:	4698      	mov	r8, r3
 801153e:	f7fe fa51 	bl	800f9e4 <ucdr_align_to>
 8011542:	4620      	mov	r0, r4
 8011544:	f7fe fa64 	bl	800fa10 <ucdr_buffer_remaining>
 8011548:	2803      	cmp	r0, #3
 801154a:	bf8c      	ite	hi
 801154c:	2701      	movhi	r7, #1
 801154e:	2700      	movls	r7, #0
 8011550:	d802      	bhi.n	8011558 <uxr_read_submessage_header+0x28>
 8011552:	4638      	mov	r0, r7
 8011554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011558:	4633      	mov	r3, r6
 801155a:	4642      	mov	r2, r8
 801155c:	4620      	mov	r0, r4
 801155e:	4629      	mov	r1, r5
 8011560:	f000 fa1c 	bl	801199c <uxr_deserialize_submessage_header>
 8011564:	f898 3000 	ldrb.w	r3, [r8]
 8011568:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 801156c:	f003 0301 	and.w	r3, r3, #1
 8011570:	f888 2000 	strb.w	r2, [r8]
 8011574:	7523      	strb	r3, [r4, #20]
 8011576:	4638      	mov	r0, r7
 8011578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801157c <uxr_submessage_padding>:
 801157c:	f010 0003 	ands.w	r0, r0, #3
 8011580:	bf18      	it	ne
 8011582:	f1c0 0004 	rsbne	r0, r0, #4
 8011586:	4770      	bx	lr

08011588 <uxr_millis>:
 8011588:	b510      	push	{r4, lr}
 801158a:	b084      	sub	sp, #16
 801158c:	4669      	mov	r1, sp
 801158e:	2001      	movs	r0, #1
 8011590:	f7f1 f9fe 	bl	8002990 <clock_gettime>
 8011594:	e9dd 2400 	ldrd	r2, r4, [sp]
 8011598:	4907      	ldr	r1, [pc, #28]	; (80115b8 <uxr_millis+0x30>)
 801159a:	9802      	ldr	r0, [sp, #8]
 801159c:	fba2 2301 	umull	r2, r3, r2, r1
 80115a0:	fb01 3304 	mla	r3, r1, r4, r3
 80115a4:	4604      	mov	r4, r0
 80115a6:	1810      	adds	r0, r2, r0
 80115a8:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 80115ac:	4a03      	ldr	r2, [pc, #12]	; (80115bc <uxr_millis+0x34>)
 80115ae:	2300      	movs	r3, #0
 80115b0:	f7ef fa9c 	bl	8000aec <__aeabi_ldivmod>
 80115b4:	b004      	add	sp, #16
 80115b6:	bd10      	pop	{r4, pc}
 80115b8:	3b9aca00 	.word	0x3b9aca00
 80115bc:	000f4240 	.word	0x000f4240

080115c0 <uxr_nanos>:
 80115c0:	b510      	push	{r4, lr}
 80115c2:	b084      	sub	sp, #16
 80115c4:	4669      	mov	r1, sp
 80115c6:	2001      	movs	r0, #1
 80115c8:	f7f1 f9e2 	bl	8002990 <clock_gettime>
 80115cc:	e9dd 2400 	ldrd	r2, r4, [sp]
 80115d0:	4905      	ldr	r1, [pc, #20]	; (80115e8 <uxr_nanos+0x28>)
 80115d2:	9802      	ldr	r0, [sp, #8]
 80115d4:	fba2 2301 	umull	r2, r3, r2, r1
 80115d8:	fb01 3304 	mla	r3, r1, r4, r3
 80115dc:	4604      	mov	r4, r0
 80115de:	1810      	adds	r0, r2, r0
 80115e0:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 80115e4:	b004      	add	sp, #16
 80115e6:	bd10      	pop	{r4, pc}
 80115e8:	3b9aca00 	.word	0x3b9aca00

080115ec <on_full_output_buffer_fragmented>:
 80115ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115f0:	460c      	mov	r4, r1
 80115f2:	b08a      	sub	sp, #40	; 0x28
 80115f4:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 80115f8:	4606      	mov	r6, r0
 80115fa:	f104 0008 	add.w	r0, r4, #8
 80115fe:	f7ff ff45 	bl	801148c <uxr_get_output_reliable_stream>
 8011602:	4605      	mov	r5, r0
 8011604:	f005 fc3a 	bl	8016e7c <get_available_free_slots>
 8011608:	b968      	cbnz	r0, 8011626 <on_full_output_buffer_fragmented+0x3a>
 801160a:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 801160e:	4620      	mov	r0, r4
 8011610:	4798      	blx	r3
 8011612:	b918      	cbnz	r0, 801161c <on_full_output_buffer_fragmented+0x30>
 8011614:	2001      	movs	r0, #1
 8011616:	b00a      	add	sp, #40	; 0x28
 8011618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801161c:	4628      	mov	r0, r5
 801161e:	f005 fc2d 	bl	8016e7c <get_available_free_slots>
 8011622:	2800      	cmp	r0, #0
 8011624:	d0f6      	beq.n	8011614 <on_full_output_buffer_fragmented+0x28>
 8011626:	8928      	ldrh	r0, [r5, #8]
 8011628:	89eb      	ldrh	r3, [r5, #14]
 801162a:	7b2a      	ldrb	r2, [r5, #12]
 801162c:	fbb3 f1f0 	udiv	r1, r3, r0
 8011630:	f5c2 427f 	rsb	r2, r2, #65280	; 0xff00
 8011634:	fb00 3111 	mls	r1, r0, r1, r3
 8011638:	b28b      	uxth	r3, r1
 801163a:	32fc      	adds	r2, #252	; 0xfc
 801163c:	6869      	ldr	r1, [r5, #4]
 801163e:	fbb1 f1f0 	udiv	r1, r1, r0
 8011642:	1f0f      	subs	r7, r1, #4
 8011644:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
 8011648:	fb01 f103 	mul.w	r1, r1, r3
 801164c:	443a      	add	r2, r7
 801164e:	682b      	ldr	r3, [r5, #0]
 8011650:	fa1f f882 	uxth.w	r8, r2
 8011654:	3104      	adds	r1, #4
 8011656:	4419      	add	r1, r3
 8011658:	eba0 0008 	sub.w	r0, r0, r8
 801165c:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 8011660:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011664:	9300      	str	r3, [sp, #0]
 8011666:	463a      	mov	r2, r7
 8011668:	2300      	movs	r3, #0
 801166a:	a802      	add	r0, sp, #8
 801166c:	f7fe f98e 	bl	800f98c <ucdr_init_buffer_origin_offset>
 8011670:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8011674:	f102 0308 	add.w	r3, r2, #8
 8011678:	42bb      	cmp	r3, r7
 801167a:	d927      	bls.n	80116cc <on_full_output_buffer_fragmented+0xe0>
 801167c:	4642      	mov	r2, r8
 801167e:	2300      	movs	r3, #0
 8011680:	210d      	movs	r1, #13
 8011682:	a802      	add	r0, sp, #8
 8011684:	f7ff ff3a 	bl	80114fc <uxr_buffer_submessage_header>
 8011688:	8928      	ldrh	r0, [r5, #8]
 801168a:	89eb      	ldrh	r3, [r5, #14]
 801168c:	fbb3 f1f0 	udiv	r1, r3, r0
 8011690:	fb00 3111 	mls	r1, r0, r1, r3
 8011694:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011698:	b289      	uxth	r1, r1
 801169a:	fbb3 f3f0 	udiv	r3, r3, r0
 801169e:	fb03 f301 	mul.w	r3, r3, r1
 80116a2:	50d7      	str	r7, [r2, r3]
 80116a4:	89e8      	ldrh	r0, [r5, #14]
 80116a6:	2101      	movs	r1, #1
 80116a8:	f005 fc08 	bl	8016ebc <uxr_seq_num_add>
 80116ac:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 80116b0:	81e8      	strh	r0, [r5, #14]
 80116b2:	1a52      	subs	r2, r2, r1
 80116b4:	4630      	mov	r0, r6
 80116b6:	f7fe f97b 	bl	800f9b0 <ucdr_init_buffer>
 80116ba:	4630      	mov	r0, r6
 80116bc:	490f      	ldr	r1, [pc, #60]	; (80116fc <on_full_output_buffer_fragmented+0x110>)
 80116be:	4622      	mov	r2, r4
 80116c0:	f7fe f94c 	bl	800f95c <ucdr_set_on_full_buffer_callback>
 80116c4:	2000      	movs	r0, #0
 80116c6:	b00a      	add	sp, #40	; 0x28
 80116c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116cc:	b292      	uxth	r2, r2
 80116ce:	2302      	movs	r3, #2
 80116d0:	210d      	movs	r1, #13
 80116d2:	a802      	add	r0, sp, #8
 80116d4:	f7ff ff12 	bl	80114fc <uxr_buffer_submessage_header>
 80116d8:	8928      	ldrh	r0, [r5, #8]
 80116da:	89eb      	ldrh	r3, [r5, #14]
 80116dc:	fbb3 f2f0 	udiv	r2, r3, r0
 80116e0:	fb00 3212 	mls	r2, r0, r2, r3
 80116e4:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 80116e8:	686b      	ldr	r3, [r5, #4]
 80116ea:	fbb3 f3f0 	udiv	r3, r3, r0
 80116ee:	b292      	uxth	r2, r2
 80116f0:	6828      	ldr	r0, [r5, #0]
 80116f2:	fb03 f302 	mul.w	r3, r3, r2
 80116f6:	3108      	adds	r1, #8
 80116f8:	50c1      	str	r1, [r0, r3]
 80116fa:	e7d3      	b.n	80116a4 <on_full_output_buffer_fragmented+0xb8>
 80116fc:	080115ed 	.word	0x080115ed

08011700 <uxr_prepare_output_stream>:
 8011700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011702:	b087      	sub	sp, #28
 8011704:	2407      	movs	r4, #7
 8011706:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8011708:	9202      	str	r2, [sp, #8]
 801170a:	2500      	movs	r5, #0
 801170c:	1d32      	adds	r2, r6, #4
 801170e:	e9cd 4500 	strd	r4, r5, [sp]
 8011712:	9103      	str	r1, [sp, #12]
 8011714:	461c      	mov	r4, r3
 8011716:	4606      	mov	r6, r0
 8011718:	f7ff fc4c 	bl	8010fb4 <uxr_prepare_stream_to_write_submessage>
 801171c:	f080 0201 	eor.w	r2, r0, #1
 8011720:	b2d2      	uxtb	r2, r2
 8011722:	75a2      	strb	r2, [r4, #22]
 8011724:	b112      	cbz	r2, 801172c <uxr_prepare_output_stream+0x2c>
 8011726:	4628      	mov	r0, r5
 8011728:	b007      	add	sp, #28
 801172a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801172c:	aa05      	add	r2, sp, #20
 801172e:	9902      	ldr	r1, [sp, #8]
 8011730:	4630      	mov	r0, r6
 8011732:	f7ff fd79 	bl	8011228 <uxr_init_base_object_request>
 8011736:	a905      	add	r1, sp, #20
 8011738:	4605      	mov	r5, r0
 801173a:	4620      	mov	r0, r4
 801173c:	f001 f872 	bl	8012824 <uxr_serialize_WRITE_DATA_Payload_Data>
 8011740:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8011744:	e9d4 6706 	ldrd	r6, r7, [r4, #24]
 8011748:	1a52      	subs	r2, r2, r1
 801174a:	4620      	mov	r0, r4
 801174c:	f7fe f930 	bl	800f9b0 <ucdr_init_buffer>
 8011750:	4620      	mov	r0, r4
 8011752:	463a      	mov	r2, r7
 8011754:	4631      	mov	r1, r6
 8011756:	f7fe f901 	bl	800f95c <ucdr_set_on_full_buffer_callback>
 801175a:	4628      	mov	r0, r5
 801175c:	b007      	add	sp, #28
 801175e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011760 <uxr_prepare_output_stream_fragmented>:
 8011760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011764:	b093      	sub	sp, #76	; 0x4c
 8011766:	4605      	mov	r5, r0
 8011768:	9107      	str	r1, [sp, #28]
 801176a:	3008      	adds	r0, #8
 801176c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8011770:	9303      	str	r3, [sp, #12]
 8011772:	9206      	str	r2, [sp, #24]
 8011774:	f7ff fe8a 	bl	801148c <uxr_get_output_reliable_stream>
 8011778:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801177c:	2b01      	cmp	r3, #1
 801177e:	f000 8094 	beq.w	80118aa <uxr_prepare_output_stream_fragmented+0x14a>
 8011782:	4604      	mov	r4, r0
 8011784:	2800      	cmp	r0, #0
 8011786:	f000 8090 	beq.w	80118aa <uxr_prepare_output_stream_fragmented+0x14a>
 801178a:	f005 fb77 	bl	8016e7c <get_available_free_slots>
 801178e:	2800      	cmp	r0, #0
 8011790:	f000 8086 	beq.w	80118a0 <uxr_prepare_output_stream_fragmented+0x140>
 8011794:	8922      	ldrh	r2, [r4, #8]
 8011796:	89e7      	ldrh	r7, [r4, #14]
 8011798:	fbb7 f8f2 	udiv	r8, r7, r2
 801179c:	e9d4 3100 	ldrd	r3, r1, [r4]
 80117a0:	fb02 7818 	mls	r8, r2, r8, r7
 80117a4:	fa1f f888 	uxth.w	r8, r8
 80117a8:	fbb1 f2f2 	udiv	r2, r1, r2
 80117ac:	fb02 f808 	mul.w	r8, r2, r8
 80117b0:	f108 0804 	add.w	r8, r8, #4
 80117b4:	4498      	add	r8, r3
 80117b6:	7b23      	ldrb	r3, [r4, #12]
 80117b8:	f858 ac04 	ldr.w	sl, [r8, #-4]
 80117bc:	9204      	str	r2, [sp, #16]
 80117be:	4553      	cmp	r3, sl
 80117c0:	f1a2 0b04 	sub.w	fp, r2, #4
 80117c4:	d37d      	bcc.n	80118c2 <uxr_prepare_output_stream_fragmented+0x162>
 80117c6:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80117c8:	f8cd a000 	str.w	sl, [sp]
 80117cc:	f1ab 0904 	sub.w	r9, fp, #4
 80117d0:	eba9 0903 	sub.w	r9, r9, r3
 80117d4:	3608      	adds	r6, #8
 80117d6:	a80a      	add	r0, sp, #40	; 0x28
 80117d8:	2300      	movs	r3, #0
 80117da:	465a      	mov	r2, fp
 80117dc:	4641      	mov	r1, r8
 80117de:	fa1f f989 	uxth.w	r9, r9
 80117e2:	9605      	str	r6, [sp, #20]
 80117e4:	f7fe f8d2 	bl	800f98c <ucdr_init_buffer_origin_offset>
 80117e8:	455e      	cmp	r6, fp
 80117ea:	bf34      	ite	cc
 80117ec:	2302      	movcc	r3, #2
 80117ee:	2300      	movcs	r3, #0
 80117f0:	464a      	mov	r2, r9
 80117f2:	210d      	movs	r1, #13
 80117f4:	a80a      	add	r0, sp, #40	; 0x28
 80117f6:	f7ff fe81 	bl	80114fc <uxr_buffer_submessage_header>
 80117fa:	8920      	ldrh	r0, [r4, #8]
 80117fc:	fbb7 f3f0 	udiv	r3, r7, r0
 8011800:	e9d4 2100 	ldrd	r2, r1, [r4]
 8011804:	fb00 7313 	mls	r3, r0, r3, r7
 8011808:	b29b      	uxth	r3, r3
 801180a:	fbb1 f1f0 	udiv	r1, r1, r0
 801180e:	fb03 f301 	mul.w	r3, r3, r1
 8011812:	4638      	mov	r0, r7
 8011814:	f842 b003 	str.w	fp, [r2, r3]
 8011818:	2101      	movs	r1, #1
 801181a:	f005 fb4f 	bl	8016ebc <uxr_seq_num_add>
 801181e:	9b04      	ldr	r3, [sp, #16]
 8011820:	9e03      	ldr	r6, [sp, #12]
 8011822:	f1a3 0208 	sub.w	r2, r3, #8
 8011826:	f10a 0104 	add.w	r1, sl, #4
 801182a:	4607      	mov	r7, r0
 801182c:	eba2 020a 	sub.w	r2, r2, sl
 8011830:	4441      	add	r1, r8
 8011832:	4630      	mov	r0, r6
 8011834:	f7fe f8bc 	bl	800f9b0 <ucdr_init_buffer>
 8011838:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801183a:	81e7      	strh	r7, [r4, #14]
 801183c:	1d1a      	adds	r2, r3, #4
 801183e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8011842:	bf28      	it	cs
 8011844:	2200      	movcs	r2, #0
 8011846:	b292      	uxth	r2, r2
 8011848:	2300      	movs	r3, #0
 801184a:	2107      	movs	r1, #7
 801184c:	4630      	mov	r0, r6
 801184e:	f7ff fe55 	bl	80114fc <uxr_buffer_submessage_header>
 8011852:	9906      	ldr	r1, [sp, #24]
 8011854:	aa09      	add	r2, sp, #36	; 0x24
 8011856:	4628      	mov	r0, r5
 8011858:	f7ff fce6 	bl	8011228 <uxr_init_base_object_request>
 801185c:	4604      	mov	r4, r0
 801185e:	b328      	cbz	r0, 80118ac <uxr_prepare_output_stream_fragmented+0x14c>
 8011860:	9e03      	ldr	r6, [sp, #12]
 8011862:	a909      	add	r1, sp, #36	; 0x24
 8011864:	4630      	mov	r0, r6
 8011866:	f000 ffdd 	bl	8012824 <uxr_serialize_WRITE_DATA_Payload_Data>
 801186a:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 801186e:	4630      	mov	r0, r6
 8011870:	1a52      	subs	r2, r2, r1
 8011872:	f7fe f89d 	bl	800f9b0 <ucdr_init_buffer>
 8011876:	9a05      	ldr	r2, [sp, #20]
 8011878:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 801187c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801187e:	9b07      	ldr	r3, [sp, #28]
 8011880:	f8c5 20b8 	str.w	r2, [r5, #184]	; 0xb8
 8011884:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011886:	f8c5 20bc 	str.w	r2, [r5, #188]	; 0xbc
 801188a:	4630      	mov	r0, r6
 801188c:	4919      	ldr	r1, [pc, #100]	; (80118f4 <uxr_prepare_output_stream_fragmented+0x194>)
 801188e:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 8011892:	462a      	mov	r2, r5
 8011894:	f7fe f862 	bl	800f95c <ucdr_set_on_full_buffer_callback>
 8011898:	4620      	mov	r0, r4
 801189a:	b013      	add	sp, #76	; 0x4c
 801189c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118a0:	991e      	ldr	r1, [sp, #120]	; 0x78
 80118a2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80118a4:	4628      	mov	r0, r5
 80118a6:	4798      	blx	r3
 80118a8:	b920      	cbnz	r0, 80118b4 <uxr_prepare_output_stream_fragmented+0x154>
 80118aa:	2400      	movs	r4, #0
 80118ac:	4620      	mov	r0, r4
 80118ae:	b013      	add	sp, #76	; 0x4c
 80118b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118b4:	4620      	mov	r0, r4
 80118b6:	f005 fae1 	bl	8016e7c <get_available_free_slots>
 80118ba:	2800      	cmp	r0, #0
 80118bc:	f47f af6a 	bne.w	8011794 <uxr_prepare_output_stream_fragmented+0x34>
 80118c0:	e7f3      	b.n	80118aa <uxr_prepare_output_stream_fragmented+0x14a>
 80118c2:	4638      	mov	r0, r7
 80118c4:	2101      	movs	r1, #1
 80118c6:	f005 faf9 	bl	8016ebc <uxr_seq_num_add>
 80118ca:	8922      	ldrh	r2, [r4, #8]
 80118cc:	fbb0 f8f2 	udiv	r8, r0, r2
 80118d0:	fb02 0818 	mls	r8, r2, r8, r0
 80118d4:	fa1f f888 	uxth.w	r8, r8
 80118d8:	6863      	ldr	r3, [r4, #4]
 80118da:	fbb3 f3f2 	udiv	r3, r3, r2
 80118de:	6822      	ldr	r2, [r4, #0]
 80118e0:	fb08 f803 	mul.w	r8, r8, r3
 80118e4:	f108 0804 	add.w	r8, r8, #4
 80118e8:	4490      	add	r8, r2
 80118ea:	7b23      	ldrb	r3, [r4, #12]
 80118ec:	f858 ac04 	ldr.w	sl, [r8, #-4]
 80118f0:	4607      	mov	r7, r0
 80118f2:	e768      	b.n	80117c6 <uxr_prepare_output_stream_fragmented+0x66>
 80118f4:	080115ed 	.word	0x080115ed

080118f8 <uxr_serialize_message_header>:
 80118f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80118fa:	b083      	sub	sp, #12
 80118fc:	4616      	mov	r6, r2
 80118fe:	4604      	mov	r4, r0
 8011900:	9301      	str	r3, [sp, #4]
 8011902:	460d      	mov	r5, r1
 8011904:	9f08      	ldr	r7, [sp, #32]
 8011906:	f7fd f8a9 	bl	800ea5c <ucdr_serialize_uint8_t>
 801190a:	4631      	mov	r1, r6
 801190c:	4620      	mov	r0, r4
 801190e:	f7fd f8a5 	bl	800ea5c <ucdr_serialize_uint8_t>
 8011912:	9a01      	ldr	r2, [sp, #4]
 8011914:	4620      	mov	r0, r4
 8011916:	2101      	movs	r1, #1
 8011918:	f7fd f94c 	bl	800ebb4 <ucdr_serialize_endian_uint16_t>
 801191c:	062b      	lsls	r3, r5, #24
 801191e:	d501      	bpl.n	8011924 <uxr_serialize_message_header+0x2c>
 8011920:	b003      	add	sp, #12
 8011922:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011924:	4639      	mov	r1, r7
 8011926:	4620      	mov	r0, r4
 8011928:	2204      	movs	r2, #4
 801192a:	b003      	add	sp, #12
 801192c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011930:	f004 bba6 	b.w	8016080 <ucdr_serialize_array_uint8_t>

08011934 <uxr_deserialize_message_header>:
 8011934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011936:	b083      	sub	sp, #12
 8011938:	4616      	mov	r6, r2
 801193a:	4604      	mov	r4, r0
 801193c:	9301      	str	r3, [sp, #4]
 801193e:	460d      	mov	r5, r1
 8011940:	9f08      	ldr	r7, [sp, #32]
 8011942:	f7fd f8a1 	bl	800ea88 <ucdr_deserialize_uint8_t>
 8011946:	4631      	mov	r1, r6
 8011948:	4620      	mov	r0, r4
 801194a:	f7fd f89d 	bl	800ea88 <ucdr_deserialize_uint8_t>
 801194e:	9a01      	ldr	r2, [sp, #4]
 8011950:	4620      	mov	r0, r4
 8011952:	2101      	movs	r1, #1
 8011954:	f7fd fa22 	bl	800ed9c <ucdr_deserialize_endian_uint16_t>
 8011958:	f995 3000 	ldrsb.w	r3, [r5]
 801195c:	2b00      	cmp	r3, #0
 801195e:	da01      	bge.n	8011964 <uxr_deserialize_message_header+0x30>
 8011960:	b003      	add	sp, #12
 8011962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011964:	4639      	mov	r1, r7
 8011966:	4620      	mov	r0, r4
 8011968:	2204      	movs	r2, #4
 801196a:	b003      	add	sp, #12
 801196c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011970:	f004 bbea 	b.w	8016148 <ucdr_deserialize_array_uint8_t>

08011974 <uxr_serialize_submessage_header>:
 8011974:	b530      	push	{r4, r5, lr}
 8011976:	b083      	sub	sp, #12
 8011978:	4615      	mov	r5, r2
 801197a:	4604      	mov	r4, r0
 801197c:	9301      	str	r3, [sp, #4]
 801197e:	f7fd f86d 	bl	800ea5c <ucdr_serialize_uint8_t>
 8011982:	4629      	mov	r1, r5
 8011984:	4620      	mov	r0, r4
 8011986:	f7fd f869 	bl	800ea5c <ucdr_serialize_uint8_t>
 801198a:	9a01      	ldr	r2, [sp, #4]
 801198c:	4620      	mov	r0, r4
 801198e:	2101      	movs	r1, #1
 8011990:	b003      	add	sp, #12
 8011992:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011996:	f7fd b90d 	b.w	800ebb4 <ucdr_serialize_endian_uint16_t>
 801199a:	bf00      	nop

0801199c <uxr_deserialize_submessage_header>:
 801199c:	b530      	push	{r4, r5, lr}
 801199e:	b083      	sub	sp, #12
 80119a0:	4615      	mov	r5, r2
 80119a2:	4604      	mov	r4, r0
 80119a4:	9301      	str	r3, [sp, #4]
 80119a6:	f7fd f86f 	bl	800ea88 <ucdr_deserialize_uint8_t>
 80119aa:	4629      	mov	r1, r5
 80119ac:	4620      	mov	r0, r4
 80119ae:	f7fd f86b 	bl	800ea88 <ucdr_deserialize_uint8_t>
 80119b2:	9a01      	ldr	r2, [sp, #4]
 80119b4:	4620      	mov	r0, r4
 80119b6:	2101      	movs	r1, #1
 80119b8:	b003      	add	sp, #12
 80119ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80119be:	f7fd b9ed 	b.w	800ed9c <ucdr_deserialize_endian_uint16_t>
 80119c2:	bf00      	nop

080119c4 <uxr_serialize_CLIENT_Representation>:
 80119c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80119c8:	2204      	movs	r2, #4
 80119ca:	460c      	mov	r4, r1
 80119cc:	4605      	mov	r5, r0
 80119ce:	f004 fb57 	bl	8016080 <ucdr_serialize_array_uint8_t>
 80119d2:	1d21      	adds	r1, r4, #4
 80119d4:	4607      	mov	r7, r0
 80119d6:	2202      	movs	r2, #2
 80119d8:	4628      	mov	r0, r5
 80119da:	f004 fb51 	bl	8016080 <ucdr_serialize_array_uint8_t>
 80119de:	1da1      	adds	r1, r4, #6
 80119e0:	4007      	ands	r7, r0
 80119e2:	2202      	movs	r2, #2
 80119e4:	4628      	mov	r0, r5
 80119e6:	f004 fb4b 	bl	8016080 <ucdr_serialize_array_uint8_t>
 80119ea:	fa5f f887 	uxtb.w	r8, r7
 80119ee:	2204      	movs	r2, #4
 80119f0:	4607      	mov	r7, r0
 80119f2:	f104 0108 	add.w	r1, r4, #8
 80119f6:	4628      	mov	r0, r5
 80119f8:	f004 fb42 	bl	8016080 <ucdr_serialize_array_uint8_t>
 80119fc:	ea08 0707 	and.w	r7, r8, r7
 8011a00:	7b21      	ldrb	r1, [r4, #12]
 8011a02:	4680      	mov	r8, r0
 8011a04:	4628      	mov	r0, r5
 8011a06:	f7fd f829 	bl	800ea5c <ucdr_serialize_uint8_t>
 8011a0a:	ea08 0807 	and.w	r8, r8, r7
 8011a0e:	7b61      	ldrb	r1, [r4, #13]
 8011a10:	4607      	mov	r7, r0
 8011a12:	4628      	mov	r0, r5
 8011a14:	f7fc fff2 	bl	800e9fc <ucdr_serialize_bool>
 8011a18:	7b63      	ldrb	r3, [r4, #13]
 8011a1a:	ea08 0707 	and.w	r7, r8, r7
 8011a1e:	ea07 0600 	and.w	r6, r7, r0
 8011a22:	b933      	cbnz	r3, 8011a32 <uxr_serialize_CLIENT_Representation+0x6e>
 8011a24:	8ba1      	ldrh	r1, [r4, #28]
 8011a26:	4628      	mov	r0, r5
 8011a28:	f7fd f844 	bl	800eab4 <ucdr_serialize_uint16_t>
 8011a2c:	4030      	ands	r0, r6
 8011a2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a32:	6921      	ldr	r1, [r4, #16]
 8011a34:	4628      	mov	r0, r5
 8011a36:	f7fd fa27 	bl	800ee88 <ucdr_serialize_uint32_t>
 8011a3a:	6923      	ldr	r3, [r4, #16]
 8011a3c:	b1cb      	cbz	r3, 8011a72 <uxr_serialize_CLIENT_Representation+0xae>
 8011a3e:	b1d0      	cbz	r0, 8011a76 <uxr_serialize_CLIENT_Representation+0xb2>
 8011a40:	46a0      	mov	r8, r4
 8011a42:	f04f 0900 	mov.w	r9, #0
 8011a46:	e002      	b.n	8011a4e <uxr_serialize_CLIENT_Representation+0x8a>
 8011a48:	f108 0808 	add.w	r8, r8, #8
 8011a4c:	b198      	cbz	r0, 8011a76 <uxr_serialize_CLIENT_Representation+0xb2>
 8011a4e:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8011a52:	4628      	mov	r0, r5
 8011a54:	f004 fc34 	bl	80162c0 <ucdr_serialize_string>
 8011a58:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8011a5c:	4607      	mov	r7, r0
 8011a5e:	4628      	mov	r0, r5
 8011a60:	f004 fc2e 	bl	80162c0 <ucdr_serialize_string>
 8011a64:	6923      	ldr	r3, [r4, #16]
 8011a66:	f109 0901 	add.w	r9, r9, #1
 8011a6a:	4038      	ands	r0, r7
 8011a6c:	4599      	cmp	r9, r3
 8011a6e:	b2c0      	uxtb	r0, r0
 8011a70:	d3ea      	bcc.n	8011a48 <uxr_serialize_CLIENT_Representation+0x84>
 8011a72:	4006      	ands	r6, r0
 8011a74:	e7d6      	b.n	8011a24 <uxr_serialize_CLIENT_Representation+0x60>
 8011a76:	2600      	movs	r6, #0
 8011a78:	e7d4      	b.n	8011a24 <uxr_serialize_CLIENT_Representation+0x60>
 8011a7a:	bf00      	nop

08011a7c <uxr_deserialize_CLIENT_Representation>:
 8011a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a80:	2204      	movs	r2, #4
 8011a82:	460c      	mov	r4, r1
 8011a84:	4605      	mov	r5, r0
 8011a86:	f004 fb5f 	bl	8016148 <ucdr_deserialize_array_uint8_t>
 8011a8a:	1d21      	adds	r1, r4, #4
 8011a8c:	4607      	mov	r7, r0
 8011a8e:	2202      	movs	r2, #2
 8011a90:	4628      	mov	r0, r5
 8011a92:	f004 fb59 	bl	8016148 <ucdr_deserialize_array_uint8_t>
 8011a96:	1da1      	adds	r1, r4, #6
 8011a98:	4007      	ands	r7, r0
 8011a9a:	2202      	movs	r2, #2
 8011a9c:	4628      	mov	r0, r5
 8011a9e:	f004 fb53 	bl	8016148 <ucdr_deserialize_array_uint8_t>
 8011aa2:	fa5f f887 	uxtb.w	r8, r7
 8011aa6:	2204      	movs	r2, #4
 8011aa8:	4607      	mov	r7, r0
 8011aaa:	f104 0108 	add.w	r1, r4, #8
 8011aae:	4628      	mov	r0, r5
 8011ab0:	f004 fb4a 	bl	8016148 <ucdr_deserialize_array_uint8_t>
 8011ab4:	ea08 0707 	and.w	r7, r8, r7
 8011ab8:	f104 010c 	add.w	r1, r4, #12
 8011abc:	4680      	mov	r8, r0
 8011abe:	4628      	mov	r0, r5
 8011ac0:	f7fc ffe2 	bl	800ea88 <ucdr_deserialize_uint8_t>
 8011ac4:	ea08 0807 	and.w	r8, r8, r7
 8011ac8:	f104 010d 	add.w	r1, r4, #13
 8011acc:	4607      	mov	r7, r0
 8011ace:	4628      	mov	r0, r5
 8011ad0:	f7fc ffaa 	bl	800ea28 <ucdr_deserialize_bool>
 8011ad4:	7b63      	ldrb	r3, [r4, #13]
 8011ad6:	ea08 0707 	and.w	r7, r8, r7
 8011ada:	ea07 0600 	and.w	r6, r7, r0
 8011ade:	b93b      	cbnz	r3, 8011af0 <uxr_deserialize_CLIENT_Representation+0x74>
 8011ae0:	f104 011c 	add.w	r1, r4, #28
 8011ae4:	4628      	mov	r0, r5
 8011ae6:	f7fd f8e5 	bl	800ecb4 <ucdr_deserialize_uint16_t>
 8011aea:	4030      	ands	r0, r6
 8011aec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011af0:	f104 0110 	add.w	r1, r4, #16
 8011af4:	4628      	mov	r0, r5
 8011af6:	f7fd faf7 	bl	800f0e8 <ucdr_deserialize_uint32_t>
 8011afa:	6923      	ldr	r3, [r4, #16]
 8011afc:	2b01      	cmp	r3, #1
 8011afe:	d903      	bls.n	8011b08 <uxr_deserialize_CLIENT_Representation+0x8c>
 8011b00:	2301      	movs	r3, #1
 8011b02:	75ab      	strb	r3, [r5, #22]
 8011b04:	2600      	movs	r6, #0
 8011b06:	e7eb      	b.n	8011ae0 <uxr_deserialize_CLIENT_Representation+0x64>
 8011b08:	b1fb      	cbz	r3, 8011b4a <uxr_deserialize_CLIENT_Representation+0xce>
 8011b0a:	2800      	cmp	r0, #0
 8011b0c:	d0fa      	beq.n	8011b04 <uxr_deserialize_CLIENT_Representation+0x88>
 8011b0e:	46a0      	mov	r8, r4
 8011b10:	f04f 0900 	mov.w	r9, #0
 8011b14:	e003      	b.n	8011b1e <uxr_deserialize_CLIENT_Representation+0xa2>
 8011b16:	f108 0808 	add.w	r8, r8, #8
 8011b1a:	2800      	cmp	r0, #0
 8011b1c:	d0f2      	beq.n	8011b04 <uxr_deserialize_CLIENT_Representation+0x88>
 8011b1e:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8011b22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011b26:	4628      	mov	r0, r5
 8011b28:	f004 fbda 	bl	80162e0 <ucdr_deserialize_string>
 8011b2c:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8011b30:	4607      	mov	r7, r0
 8011b32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011b36:	4628      	mov	r0, r5
 8011b38:	f004 fbd2 	bl	80162e0 <ucdr_deserialize_string>
 8011b3c:	6923      	ldr	r3, [r4, #16]
 8011b3e:	f109 0901 	add.w	r9, r9, #1
 8011b42:	4038      	ands	r0, r7
 8011b44:	4599      	cmp	r9, r3
 8011b46:	b2c0      	uxtb	r0, r0
 8011b48:	d3e5      	bcc.n	8011b16 <uxr_deserialize_CLIENT_Representation+0x9a>
 8011b4a:	4006      	ands	r6, r0
 8011b4c:	e7c8      	b.n	8011ae0 <uxr_deserialize_CLIENT_Representation+0x64>
 8011b4e:	bf00      	nop

08011b50 <uxr_serialize_AGENT_Representation>:
 8011b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b54:	2204      	movs	r2, #4
 8011b56:	460c      	mov	r4, r1
 8011b58:	4605      	mov	r5, r0
 8011b5a:	f004 fa91 	bl	8016080 <ucdr_serialize_array_uint8_t>
 8011b5e:	1d21      	adds	r1, r4, #4
 8011b60:	4606      	mov	r6, r0
 8011b62:	2202      	movs	r2, #2
 8011b64:	4628      	mov	r0, r5
 8011b66:	f004 fa8b 	bl	8016080 <ucdr_serialize_array_uint8_t>
 8011b6a:	1da1      	adds	r1, r4, #6
 8011b6c:	4006      	ands	r6, r0
 8011b6e:	2202      	movs	r2, #2
 8011b70:	4628      	mov	r0, r5
 8011b72:	f004 fa85 	bl	8016080 <ucdr_serialize_array_uint8_t>
 8011b76:	b2f6      	uxtb	r6, r6
 8011b78:	4603      	mov	r3, r0
 8011b7a:	7a21      	ldrb	r1, [r4, #8]
 8011b7c:	4628      	mov	r0, r5
 8011b7e:	401e      	ands	r6, r3
 8011b80:	f7fc ff3c 	bl	800e9fc <ucdr_serialize_bool>
 8011b84:	7a23      	ldrb	r3, [r4, #8]
 8011b86:	ea00 0706 	and.w	r7, r0, r6
 8011b8a:	b913      	cbnz	r3, 8011b92 <uxr_serialize_AGENT_Representation+0x42>
 8011b8c:	4638      	mov	r0, r7
 8011b8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b92:	68e1      	ldr	r1, [r4, #12]
 8011b94:	4628      	mov	r0, r5
 8011b96:	f7fd f977 	bl	800ee88 <ucdr_serialize_uint32_t>
 8011b9a:	68e3      	ldr	r3, [r4, #12]
 8011b9c:	b313      	cbz	r3, 8011be4 <uxr_serialize_AGENT_Representation+0x94>
 8011b9e:	b1e8      	cbz	r0, 8011bdc <uxr_serialize_AGENT_Representation+0x8c>
 8011ba0:	46a0      	mov	r8, r4
 8011ba2:	f04f 0900 	mov.w	r9, #0
 8011ba6:	e002      	b.n	8011bae <uxr_serialize_AGENT_Representation+0x5e>
 8011ba8:	f108 0808 	add.w	r8, r8, #8
 8011bac:	b1b3      	cbz	r3, 8011bdc <uxr_serialize_AGENT_Representation+0x8c>
 8011bae:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011bb2:	4628      	mov	r0, r5
 8011bb4:	f004 fb84 	bl	80162c0 <ucdr_serialize_string>
 8011bb8:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8011bbc:	4606      	mov	r6, r0
 8011bbe:	4628      	mov	r0, r5
 8011bc0:	f004 fb7e 	bl	80162c0 <ucdr_serialize_string>
 8011bc4:	68e2      	ldr	r2, [r4, #12]
 8011bc6:	f109 0901 	add.w	r9, r9, #1
 8011bca:	ea06 0300 	and.w	r3, r6, r0
 8011bce:	4591      	cmp	r9, r2
 8011bd0:	b2db      	uxtb	r3, r3
 8011bd2:	d3e9      	bcc.n	8011ba8 <uxr_serialize_AGENT_Representation+0x58>
 8011bd4:	401f      	ands	r7, r3
 8011bd6:	4638      	mov	r0, r7
 8011bd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011bdc:	2700      	movs	r7, #0
 8011bde:	4638      	mov	r0, r7
 8011be0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011be4:	4007      	ands	r7, r0
 8011be6:	e7d1      	b.n	8011b8c <uxr_serialize_AGENT_Representation+0x3c>

08011be8 <uxr_serialize_ObjectVariant.part.0>:
 8011be8:	b570      	push	{r4, r5, r6, lr}
 8011bea:	780b      	ldrb	r3, [r1, #0]
 8011bec:	3b01      	subs	r3, #1
 8011bee:	460c      	mov	r4, r1
 8011bf0:	4605      	mov	r5, r0
 8011bf2:	2b0d      	cmp	r3, #13
 8011bf4:	d869      	bhi.n	8011cca <uxr_serialize_ObjectVariant.part.0+0xe2>
 8011bf6:	e8df f003 	tbb	[pc, r3]
 8011bfa:	074a      	.short	0x074a
 8011bfc:	07073030 	.word	0x07073030
 8011c00:	21680707 	.word	0x21680707
 8011c04:	45632121 	.word	0x45632121
 8011c08:	7909      	ldrb	r1, [r1, #4]
 8011c0a:	f7fc ff27 	bl	800ea5c <ucdr_serialize_uint8_t>
 8011c0e:	4606      	mov	r6, r0
 8011c10:	b158      	cbz	r0, 8011c2a <uxr_serialize_ObjectVariant.part.0+0x42>
 8011c12:	7923      	ldrb	r3, [r4, #4]
 8011c14:	2b02      	cmp	r3, #2
 8011c16:	d003      	beq.n	8011c20 <uxr_serialize_ObjectVariant.part.0+0x38>
 8011c18:	2b03      	cmp	r3, #3
 8011c1a:	d029      	beq.n	8011c70 <uxr_serialize_ObjectVariant.part.0+0x88>
 8011c1c:	2b01      	cmp	r3, #1
 8011c1e:	d104      	bne.n	8011c2a <uxr_serialize_ObjectVariant.part.0+0x42>
 8011c20:	68a1      	ldr	r1, [r4, #8]
 8011c22:	4628      	mov	r0, r5
 8011c24:	f004 fb4c 	bl	80162c0 <ucdr_serialize_string>
 8011c28:	4606      	mov	r6, r0
 8011c2a:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8011c2e:	4628      	mov	r0, r5
 8011c30:	2202      	movs	r2, #2
 8011c32:	f004 fa25 	bl	8016080 <ucdr_serialize_array_uint8_t>
 8011c36:	4030      	ands	r0, r6
 8011c38:	b2c0      	uxtb	r0, r0
 8011c3a:	bd70      	pop	{r4, r5, r6, pc}
 8011c3c:	7909      	ldrb	r1, [r1, #4]
 8011c3e:	f7fc ff0d 	bl	800ea5c <ucdr_serialize_uint8_t>
 8011c42:	b1e8      	cbz	r0, 8011c80 <uxr_serialize_ObjectVariant.part.0+0x98>
 8011c44:	7923      	ldrb	r3, [r4, #4]
 8011c46:	2b01      	cmp	r3, #1
 8011c48:	d001      	beq.n	8011c4e <uxr_serialize_ObjectVariant.part.0+0x66>
 8011c4a:	2b02      	cmp	r3, #2
 8011c4c:	d13d      	bne.n	8011cca <uxr_serialize_ObjectVariant.part.0+0xe2>
 8011c4e:	68a1      	ldr	r1, [r4, #8]
 8011c50:	4628      	mov	r0, r5
 8011c52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011c56:	f004 bb33 	b.w	80162c0 <ucdr_serialize_string>
 8011c5a:	7909      	ldrb	r1, [r1, #4]
 8011c5c:	f7fc fefe 	bl	800ea5c <ucdr_serialize_uint8_t>
 8011c60:	4606      	mov	r6, r0
 8011c62:	2800      	cmp	r0, #0
 8011c64:	d0e1      	beq.n	8011c2a <uxr_serialize_ObjectVariant.part.0+0x42>
 8011c66:	7923      	ldrb	r3, [r4, #4]
 8011c68:	2b02      	cmp	r3, #2
 8011c6a:	d0d9      	beq.n	8011c20 <uxr_serialize_ObjectVariant.part.0+0x38>
 8011c6c:	2b03      	cmp	r3, #3
 8011c6e:	d1dc      	bne.n	8011c2a <uxr_serialize_ObjectVariant.part.0+0x42>
 8011c70:	68a2      	ldr	r2, [r4, #8]
 8011c72:	f104 010c 	add.w	r1, r4, #12
 8011c76:	4628      	mov	r0, r5
 8011c78:	f004 faf6 	bl	8016268 <ucdr_serialize_sequence_uint8_t>
 8011c7c:	4606      	mov	r6, r0
 8011c7e:	e7d4      	b.n	8011c2a <uxr_serialize_ObjectVariant.part.0+0x42>
 8011c80:	2000      	movs	r0, #0
 8011c82:	bd70      	pop	{r4, r5, r6, pc}
 8011c84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011c88:	3104      	adds	r1, #4
 8011c8a:	f7ff be9b 	b.w	80119c4 <uxr_serialize_CLIENT_Representation>
 8011c8e:	7909      	ldrb	r1, [r1, #4]
 8011c90:	f7fc fee4 	bl	800ea5c <ucdr_serialize_uint8_t>
 8011c94:	4606      	mov	r6, r0
 8011c96:	b158      	cbz	r0, 8011cb0 <uxr_serialize_ObjectVariant.part.0+0xc8>
 8011c98:	7923      	ldrb	r3, [r4, #4]
 8011c9a:	2b02      	cmp	r3, #2
 8011c9c:	d003      	beq.n	8011ca6 <uxr_serialize_ObjectVariant.part.0+0xbe>
 8011c9e:	2b03      	cmp	r3, #3
 8011ca0:	d015      	beq.n	8011cce <uxr_serialize_ObjectVariant.part.0+0xe6>
 8011ca2:	2b01      	cmp	r3, #1
 8011ca4:	d104      	bne.n	8011cb0 <uxr_serialize_ObjectVariant.part.0+0xc8>
 8011ca6:	68a1      	ldr	r1, [r4, #8]
 8011ca8:	4628      	mov	r0, r5
 8011caa:	f004 fb09 	bl	80162c0 <ucdr_serialize_string>
 8011cae:	4606      	mov	r6, r0
 8011cb0:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 8011cb4:	4628      	mov	r0, r5
 8011cb6:	f7fd fc0d 	bl	800f4d4 <ucdr_serialize_int16_t>
 8011cba:	4030      	ands	r0, r6
 8011cbc:	b2c0      	uxtb	r0, r0
 8011cbe:	bd70      	pop	{r4, r5, r6, pc}
 8011cc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011cc4:	3104      	adds	r1, #4
 8011cc6:	f7ff bf43 	b.w	8011b50 <uxr_serialize_AGENT_Representation>
 8011cca:	2001      	movs	r0, #1
 8011ccc:	bd70      	pop	{r4, r5, r6, pc}
 8011cce:	68a2      	ldr	r2, [r4, #8]
 8011cd0:	f104 010c 	add.w	r1, r4, #12
 8011cd4:	4628      	mov	r0, r5
 8011cd6:	f004 fac7 	bl	8016268 <ucdr_serialize_sequence_uint8_t>
 8011cda:	4606      	mov	r6, r0
 8011cdc:	e7e8      	b.n	8011cb0 <uxr_serialize_ObjectVariant.part.0+0xc8>
 8011cde:	bf00      	nop

08011ce0 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8011ce0:	b570      	push	{r4, r5, r6, lr}
 8011ce2:	460d      	mov	r5, r1
 8011ce4:	7809      	ldrb	r1, [r1, #0]
 8011ce6:	4606      	mov	r6, r0
 8011ce8:	f7fc fe88 	bl	800e9fc <ucdr_serialize_bool>
 8011cec:	782b      	ldrb	r3, [r5, #0]
 8011cee:	4604      	mov	r4, r0
 8011cf0:	b94b      	cbnz	r3, 8011d06 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8011cf2:	7a29      	ldrb	r1, [r5, #8]
 8011cf4:	4630      	mov	r0, r6
 8011cf6:	f7fc fe81 	bl	800e9fc <ucdr_serialize_bool>
 8011cfa:	7a2b      	ldrb	r3, [r5, #8]
 8011cfc:	4004      	ands	r4, r0
 8011cfe:	b2e4      	uxtb	r4, r4
 8011d00:	b943      	cbnz	r3, 8011d14 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8011d02:	4620      	mov	r0, r4
 8011d04:	bd70      	pop	{r4, r5, r6, pc}
 8011d06:	6869      	ldr	r1, [r5, #4]
 8011d08:	4630      	mov	r0, r6
 8011d0a:	f004 fad9 	bl	80162c0 <ucdr_serialize_string>
 8011d0e:	4004      	ands	r4, r0
 8011d10:	b2e4      	uxtb	r4, r4
 8011d12:	e7ee      	b.n	8011cf2 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8011d14:	68e9      	ldr	r1, [r5, #12]
 8011d16:	4630      	mov	r0, r6
 8011d18:	f004 fad2 	bl	80162c0 <ucdr_serialize_string>
 8011d1c:	4004      	ands	r4, r0
 8011d1e:	4620      	mov	r0, r4
 8011d20:	bd70      	pop	{r4, r5, r6, pc}
 8011d22:	bf00      	nop

08011d24 <uxr_serialize_OBJK_Topic_Binary>:
 8011d24:	b570      	push	{r4, r5, r6, lr}
 8011d26:	460d      	mov	r5, r1
 8011d28:	6809      	ldr	r1, [r1, #0]
 8011d2a:	4606      	mov	r6, r0
 8011d2c:	f004 fac8 	bl	80162c0 <ucdr_serialize_string>
 8011d30:	7929      	ldrb	r1, [r5, #4]
 8011d32:	4604      	mov	r4, r0
 8011d34:	4630      	mov	r0, r6
 8011d36:	f7fc fe61 	bl	800e9fc <ucdr_serialize_bool>
 8011d3a:	792b      	ldrb	r3, [r5, #4]
 8011d3c:	4004      	ands	r4, r0
 8011d3e:	b2e4      	uxtb	r4, r4
 8011d40:	b943      	cbnz	r3, 8011d54 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8011d42:	7b29      	ldrb	r1, [r5, #12]
 8011d44:	4630      	mov	r0, r6
 8011d46:	f7fc fe59 	bl	800e9fc <ucdr_serialize_bool>
 8011d4a:	7b2b      	ldrb	r3, [r5, #12]
 8011d4c:	4004      	ands	r4, r0
 8011d4e:	b93b      	cbnz	r3, 8011d60 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8011d50:	4620      	mov	r0, r4
 8011d52:	bd70      	pop	{r4, r5, r6, pc}
 8011d54:	68a9      	ldr	r1, [r5, #8]
 8011d56:	4630      	mov	r0, r6
 8011d58:	f004 fab2 	bl	80162c0 <ucdr_serialize_string>
 8011d5c:	4004      	ands	r4, r0
 8011d5e:	e7f0      	b.n	8011d42 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8011d60:	6929      	ldr	r1, [r5, #16]
 8011d62:	4630      	mov	r0, r6
 8011d64:	f004 faac 	bl	80162c0 <ucdr_serialize_string>
 8011d68:	4004      	ands	r4, r0
 8011d6a:	b2e4      	uxtb	r4, r4
 8011d6c:	4620      	mov	r0, r4
 8011d6e:	bd70      	pop	{r4, r5, r6, pc}

08011d70 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8011d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d74:	460c      	mov	r4, r1
 8011d76:	7809      	ldrb	r1, [r1, #0]
 8011d78:	4606      	mov	r6, r0
 8011d7a:	f7fc fe3f 	bl	800e9fc <ucdr_serialize_bool>
 8011d7e:	7823      	ldrb	r3, [r4, #0]
 8011d80:	4605      	mov	r5, r0
 8011d82:	b96b      	cbnz	r3, 8011da0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8011d84:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8011d88:	4630      	mov	r0, r6
 8011d8a:	f7fc fe37 	bl	800e9fc <ucdr_serialize_bool>
 8011d8e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8011d92:	4005      	ands	r5, r0
 8011d94:	b2ed      	uxtb	r5, r5
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d169      	bne.n	8011e6e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8011d9a:	4628      	mov	r0, r5
 8011d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011da0:	6861      	ldr	r1, [r4, #4]
 8011da2:	4630      	mov	r0, r6
 8011da4:	f7fd f870 	bl	800ee88 <ucdr_serialize_uint32_t>
 8011da8:	6863      	ldr	r3, [r4, #4]
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d06b      	beq.n	8011e86 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8011dae:	2800      	cmp	r0, #0
 8011db0:	d067      	beq.n	8011e82 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011db2:	68a1      	ldr	r1, [r4, #8]
 8011db4:	4630      	mov	r0, r6
 8011db6:	f004 fa83 	bl	80162c0 <ucdr_serialize_string>
 8011dba:	6863      	ldr	r3, [r4, #4]
 8011dbc:	2b01      	cmp	r3, #1
 8011dbe:	d953      	bls.n	8011e68 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011dc0:	2800      	cmp	r0, #0
 8011dc2:	d05e      	beq.n	8011e82 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011dc4:	68e1      	ldr	r1, [r4, #12]
 8011dc6:	4630      	mov	r0, r6
 8011dc8:	f004 fa7a 	bl	80162c0 <ucdr_serialize_string>
 8011dcc:	6863      	ldr	r3, [r4, #4]
 8011dce:	2b02      	cmp	r3, #2
 8011dd0:	d94a      	bls.n	8011e68 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011dd2:	2800      	cmp	r0, #0
 8011dd4:	d055      	beq.n	8011e82 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011dd6:	6921      	ldr	r1, [r4, #16]
 8011dd8:	4630      	mov	r0, r6
 8011dda:	f004 fa71 	bl	80162c0 <ucdr_serialize_string>
 8011dde:	6863      	ldr	r3, [r4, #4]
 8011de0:	2b03      	cmp	r3, #3
 8011de2:	d941      	bls.n	8011e68 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011de4:	2800      	cmp	r0, #0
 8011de6:	d04c      	beq.n	8011e82 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011de8:	6961      	ldr	r1, [r4, #20]
 8011dea:	4630      	mov	r0, r6
 8011dec:	f004 fa68 	bl	80162c0 <ucdr_serialize_string>
 8011df0:	6863      	ldr	r3, [r4, #4]
 8011df2:	2b04      	cmp	r3, #4
 8011df4:	d938      	bls.n	8011e68 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011df6:	2800      	cmp	r0, #0
 8011df8:	d043      	beq.n	8011e82 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011dfa:	69a1      	ldr	r1, [r4, #24]
 8011dfc:	4630      	mov	r0, r6
 8011dfe:	f004 fa5f 	bl	80162c0 <ucdr_serialize_string>
 8011e02:	6863      	ldr	r3, [r4, #4]
 8011e04:	2b05      	cmp	r3, #5
 8011e06:	d92f      	bls.n	8011e68 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011e08:	2800      	cmp	r0, #0
 8011e0a:	d03a      	beq.n	8011e82 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011e0c:	69e1      	ldr	r1, [r4, #28]
 8011e0e:	4630      	mov	r0, r6
 8011e10:	f004 fa56 	bl	80162c0 <ucdr_serialize_string>
 8011e14:	6863      	ldr	r3, [r4, #4]
 8011e16:	2b06      	cmp	r3, #6
 8011e18:	d926      	bls.n	8011e68 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011e1a:	b390      	cbz	r0, 8011e82 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011e1c:	6a21      	ldr	r1, [r4, #32]
 8011e1e:	4630      	mov	r0, r6
 8011e20:	f004 fa4e 	bl	80162c0 <ucdr_serialize_string>
 8011e24:	6863      	ldr	r3, [r4, #4]
 8011e26:	2b07      	cmp	r3, #7
 8011e28:	d91e      	bls.n	8011e68 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011e2a:	b350      	cbz	r0, 8011e82 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011e2c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011e2e:	4630      	mov	r0, r6
 8011e30:	f004 fa46 	bl	80162c0 <ucdr_serialize_string>
 8011e34:	6863      	ldr	r3, [r4, #4]
 8011e36:	2b08      	cmp	r3, #8
 8011e38:	d916      	bls.n	8011e68 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011e3a:	b310      	cbz	r0, 8011e82 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011e3c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8011e3e:	4630      	mov	r0, r6
 8011e40:	f004 fa3e 	bl	80162c0 <ucdr_serialize_string>
 8011e44:	6863      	ldr	r3, [r4, #4]
 8011e46:	2b09      	cmp	r3, #9
 8011e48:	d90e      	bls.n	8011e68 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011e4a:	b1d0      	cbz	r0, 8011e82 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011e4c:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8011e50:	2709      	movs	r7, #9
 8011e52:	e000      	b.n	8011e56 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8011e54:	b1a8      	cbz	r0, 8011e82 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011e56:	f858 1b04 	ldr.w	r1, [r8], #4
 8011e5a:	4630      	mov	r0, r6
 8011e5c:	f004 fa30 	bl	80162c0 <ucdr_serialize_string>
 8011e60:	6862      	ldr	r2, [r4, #4]
 8011e62:	3701      	adds	r7, #1
 8011e64:	4297      	cmp	r7, r2
 8011e66:	d3f5      	bcc.n	8011e54 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8011e68:	4005      	ands	r5, r0
 8011e6a:	b2ed      	uxtb	r5, r5
 8011e6c:	e78a      	b.n	8011d84 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8011e6e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011e70:	4630      	mov	r0, r6
 8011e72:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8011e76:	f004 f9f7 	bl	8016268 <ucdr_serialize_sequence_uint8_t>
 8011e7a:	4005      	ands	r5, r0
 8011e7c:	4628      	mov	r0, r5
 8011e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e82:	2500      	movs	r5, #0
 8011e84:	e77e      	b.n	8011d84 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8011e86:	4028      	ands	r0, r5
 8011e88:	b2c5      	uxtb	r5, r0
 8011e8a:	e77b      	b.n	8011d84 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08011e8c <uxr_serialize_OBJK_Publisher_Binary>:
 8011e8c:	b570      	push	{r4, r5, r6, lr}
 8011e8e:	460d      	mov	r5, r1
 8011e90:	7809      	ldrb	r1, [r1, #0]
 8011e92:	4606      	mov	r6, r0
 8011e94:	f7fc fdb2 	bl	800e9fc <ucdr_serialize_bool>
 8011e98:	782b      	ldrb	r3, [r5, #0]
 8011e9a:	4604      	mov	r4, r0
 8011e9c:	b94b      	cbnz	r3, 8011eb2 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8011e9e:	7a29      	ldrb	r1, [r5, #8]
 8011ea0:	4630      	mov	r0, r6
 8011ea2:	f7fc fdab 	bl	800e9fc <ucdr_serialize_bool>
 8011ea6:	7a2b      	ldrb	r3, [r5, #8]
 8011ea8:	4004      	ands	r4, r0
 8011eaa:	b2e4      	uxtb	r4, r4
 8011eac:	b943      	cbnz	r3, 8011ec0 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8011eae:	4620      	mov	r0, r4
 8011eb0:	bd70      	pop	{r4, r5, r6, pc}
 8011eb2:	6869      	ldr	r1, [r5, #4]
 8011eb4:	4630      	mov	r0, r6
 8011eb6:	f004 fa03 	bl	80162c0 <ucdr_serialize_string>
 8011eba:	4004      	ands	r4, r0
 8011ebc:	b2e4      	uxtb	r4, r4
 8011ebe:	e7ee      	b.n	8011e9e <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8011ec0:	f105 010c 	add.w	r1, r5, #12
 8011ec4:	4630      	mov	r0, r6
 8011ec6:	f7ff ff53 	bl	8011d70 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8011eca:	4004      	ands	r4, r0
 8011ecc:	4620      	mov	r0, r4
 8011ece:	bd70      	pop	{r4, r5, r6, pc}

08011ed0 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8011ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ed4:	460c      	mov	r4, r1
 8011ed6:	7809      	ldrb	r1, [r1, #0]
 8011ed8:	4606      	mov	r6, r0
 8011eda:	f7fc fd8f 	bl	800e9fc <ucdr_serialize_bool>
 8011ede:	7823      	ldrb	r3, [r4, #0]
 8011ee0:	4605      	mov	r5, r0
 8011ee2:	b96b      	cbnz	r3, 8011f00 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8011ee4:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8011ee8:	4630      	mov	r0, r6
 8011eea:	f7fc fd87 	bl	800e9fc <ucdr_serialize_bool>
 8011eee:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8011ef2:	4005      	ands	r5, r0
 8011ef4:	b2ed      	uxtb	r5, r5
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d169      	bne.n	8011fce <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8011efa:	4628      	mov	r0, r5
 8011efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f00:	6861      	ldr	r1, [r4, #4]
 8011f02:	4630      	mov	r0, r6
 8011f04:	f7fc ffc0 	bl	800ee88 <ucdr_serialize_uint32_t>
 8011f08:	6863      	ldr	r3, [r4, #4]
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d06b      	beq.n	8011fe6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8011f0e:	2800      	cmp	r0, #0
 8011f10:	d067      	beq.n	8011fe2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011f12:	68a1      	ldr	r1, [r4, #8]
 8011f14:	4630      	mov	r0, r6
 8011f16:	f004 f9d3 	bl	80162c0 <ucdr_serialize_string>
 8011f1a:	6863      	ldr	r3, [r4, #4]
 8011f1c:	2b01      	cmp	r3, #1
 8011f1e:	d953      	bls.n	8011fc8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011f20:	2800      	cmp	r0, #0
 8011f22:	d05e      	beq.n	8011fe2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011f24:	68e1      	ldr	r1, [r4, #12]
 8011f26:	4630      	mov	r0, r6
 8011f28:	f004 f9ca 	bl	80162c0 <ucdr_serialize_string>
 8011f2c:	6863      	ldr	r3, [r4, #4]
 8011f2e:	2b02      	cmp	r3, #2
 8011f30:	d94a      	bls.n	8011fc8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011f32:	2800      	cmp	r0, #0
 8011f34:	d055      	beq.n	8011fe2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011f36:	6921      	ldr	r1, [r4, #16]
 8011f38:	4630      	mov	r0, r6
 8011f3a:	f004 f9c1 	bl	80162c0 <ucdr_serialize_string>
 8011f3e:	6863      	ldr	r3, [r4, #4]
 8011f40:	2b03      	cmp	r3, #3
 8011f42:	d941      	bls.n	8011fc8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011f44:	2800      	cmp	r0, #0
 8011f46:	d04c      	beq.n	8011fe2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011f48:	6961      	ldr	r1, [r4, #20]
 8011f4a:	4630      	mov	r0, r6
 8011f4c:	f004 f9b8 	bl	80162c0 <ucdr_serialize_string>
 8011f50:	6863      	ldr	r3, [r4, #4]
 8011f52:	2b04      	cmp	r3, #4
 8011f54:	d938      	bls.n	8011fc8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011f56:	2800      	cmp	r0, #0
 8011f58:	d043      	beq.n	8011fe2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011f5a:	69a1      	ldr	r1, [r4, #24]
 8011f5c:	4630      	mov	r0, r6
 8011f5e:	f004 f9af 	bl	80162c0 <ucdr_serialize_string>
 8011f62:	6863      	ldr	r3, [r4, #4]
 8011f64:	2b05      	cmp	r3, #5
 8011f66:	d92f      	bls.n	8011fc8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011f68:	2800      	cmp	r0, #0
 8011f6a:	d03a      	beq.n	8011fe2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011f6c:	69e1      	ldr	r1, [r4, #28]
 8011f6e:	4630      	mov	r0, r6
 8011f70:	f004 f9a6 	bl	80162c0 <ucdr_serialize_string>
 8011f74:	6863      	ldr	r3, [r4, #4]
 8011f76:	2b06      	cmp	r3, #6
 8011f78:	d926      	bls.n	8011fc8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011f7a:	b390      	cbz	r0, 8011fe2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011f7c:	6a21      	ldr	r1, [r4, #32]
 8011f7e:	4630      	mov	r0, r6
 8011f80:	f004 f99e 	bl	80162c0 <ucdr_serialize_string>
 8011f84:	6863      	ldr	r3, [r4, #4]
 8011f86:	2b07      	cmp	r3, #7
 8011f88:	d91e      	bls.n	8011fc8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011f8a:	b350      	cbz	r0, 8011fe2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011f8c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011f8e:	4630      	mov	r0, r6
 8011f90:	f004 f996 	bl	80162c0 <ucdr_serialize_string>
 8011f94:	6863      	ldr	r3, [r4, #4]
 8011f96:	2b08      	cmp	r3, #8
 8011f98:	d916      	bls.n	8011fc8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011f9a:	b310      	cbz	r0, 8011fe2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011f9c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8011f9e:	4630      	mov	r0, r6
 8011fa0:	f004 f98e 	bl	80162c0 <ucdr_serialize_string>
 8011fa4:	6863      	ldr	r3, [r4, #4]
 8011fa6:	2b09      	cmp	r3, #9
 8011fa8:	d90e      	bls.n	8011fc8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011faa:	b1d0      	cbz	r0, 8011fe2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011fac:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8011fb0:	2709      	movs	r7, #9
 8011fb2:	e000      	b.n	8011fb6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8011fb4:	b1a8      	cbz	r0, 8011fe2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011fb6:	f858 1b04 	ldr.w	r1, [r8], #4
 8011fba:	4630      	mov	r0, r6
 8011fbc:	f004 f980 	bl	80162c0 <ucdr_serialize_string>
 8011fc0:	6862      	ldr	r2, [r4, #4]
 8011fc2:	3701      	adds	r7, #1
 8011fc4:	4297      	cmp	r7, r2
 8011fc6:	d3f5      	bcc.n	8011fb4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8011fc8:	4005      	ands	r5, r0
 8011fca:	b2ed      	uxtb	r5, r5
 8011fcc:	e78a      	b.n	8011ee4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8011fce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011fd0:	4630      	mov	r0, r6
 8011fd2:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8011fd6:	f004 f947 	bl	8016268 <ucdr_serialize_sequence_uint8_t>
 8011fda:	4005      	ands	r5, r0
 8011fdc:	4628      	mov	r0, r5
 8011fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011fe2:	2500      	movs	r5, #0
 8011fe4:	e77e      	b.n	8011ee4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8011fe6:	4028      	ands	r0, r5
 8011fe8:	b2c5      	uxtb	r5, r0
 8011fea:	e77b      	b.n	8011ee4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08011fec <uxr_serialize_OBJK_Subscriber_Binary>:
 8011fec:	b570      	push	{r4, r5, r6, lr}
 8011fee:	460d      	mov	r5, r1
 8011ff0:	7809      	ldrb	r1, [r1, #0]
 8011ff2:	4606      	mov	r6, r0
 8011ff4:	f7fc fd02 	bl	800e9fc <ucdr_serialize_bool>
 8011ff8:	782b      	ldrb	r3, [r5, #0]
 8011ffa:	4604      	mov	r4, r0
 8011ffc:	b94b      	cbnz	r3, 8012012 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8011ffe:	7a29      	ldrb	r1, [r5, #8]
 8012000:	4630      	mov	r0, r6
 8012002:	f7fc fcfb 	bl	800e9fc <ucdr_serialize_bool>
 8012006:	7a2b      	ldrb	r3, [r5, #8]
 8012008:	4004      	ands	r4, r0
 801200a:	b2e4      	uxtb	r4, r4
 801200c:	b943      	cbnz	r3, 8012020 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 801200e:	4620      	mov	r0, r4
 8012010:	bd70      	pop	{r4, r5, r6, pc}
 8012012:	6869      	ldr	r1, [r5, #4]
 8012014:	4630      	mov	r0, r6
 8012016:	f004 f953 	bl	80162c0 <ucdr_serialize_string>
 801201a:	4004      	ands	r4, r0
 801201c:	b2e4      	uxtb	r4, r4
 801201e:	e7ee      	b.n	8011ffe <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8012020:	f105 010c 	add.w	r1, r5, #12
 8012024:	4630      	mov	r0, r6
 8012026:	f7ff ff53 	bl	8011ed0 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 801202a:	4004      	ands	r4, r0
 801202c:	4620      	mov	r0, r4
 801202e:	bd70      	pop	{r4, r5, r6, pc}

08012030 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8012030:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8012034:	4688      	mov	r8, r1
 8012036:	8809      	ldrh	r1, [r1, #0]
 8012038:	4681      	mov	r9, r0
 801203a:	f7fc fd3b 	bl	800eab4 <ucdr_serialize_uint16_t>
 801203e:	f898 1002 	ldrb.w	r1, [r8, #2]
 8012042:	4606      	mov	r6, r0
 8012044:	4648      	mov	r0, r9
 8012046:	f7fc fcd9 	bl	800e9fc <ucdr_serialize_bool>
 801204a:	f898 3002 	ldrb.w	r3, [r8, #2]
 801204e:	4030      	ands	r0, r6
 8012050:	b2c5      	uxtb	r5, r0
 8012052:	b9eb      	cbnz	r3, 8012090 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8012054:	f898 1006 	ldrb.w	r1, [r8, #6]
 8012058:	4648      	mov	r0, r9
 801205a:	f7fc fccf 	bl	800e9fc <ucdr_serialize_bool>
 801205e:	f898 3006 	ldrb.w	r3, [r8, #6]
 8012062:	4005      	ands	r5, r0
 8012064:	bb7b      	cbnz	r3, 80120c6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8012066:	f898 100c 	ldrb.w	r1, [r8, #12]
 801206a:	4648      	mov	r0, r9
 801206c:	f7fc fcc6 	bl	800e9fc <ucdr_serialize_bool>
 8012070:	f898 300c 	ldrb.w	r3, [r8, #12]
 8012074:	4005      	ands	r5, r0
 8012076:	b9f3      	cbnz	r3, 80120b6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8012078:	f898 1014 	ldrb.w	r1, [r8, #20]
 801207c:	4648      	mov	r0, r9
 801207e:	f7fc fcbd 	bl	800e9fc <ucdr_serialize_bool>
 8012082:	f898 3014 	ldrb.w	r3, [r8, #20]
 8012086:	4005      	ands	r5, r0
 8012088:	b94b      	cbnz	r3, 801209e <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 801208a:	4628      	mov	r0, r5
 801208c:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8012090:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8012094:	4648      	mov	r0, r9
 8012096:	f7fc fd0d 	bl	800eab4 <ucdr_serialize_uint16_t>
 801209a:	4005      	ands	r5, r0
 801209c:	e7da      	b.n	8012054 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 801209e:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80120a2:	4648      	mov	r0, r9
 80120a4:	f108 011c 	add.w	r1, r8, #28
 80120a8:	f004 f8de 	bl	8016268 <ucdr_serialize_sequence_uint8_t>
 80120ac:	4028      	ands	r0, r5
 80120ae:	b2c5      	uxtb	r5, r0
 80120b0:	4628      	mov	r0, r5
 80120b2:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80120b6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80120ba:	4648      	mov	r0, r9
 80120bc:	f7fc fee4 	bl	800ee88 <ucdr_serialize_uint32_t>
 80120c0:	4028      	ands	r0, r5
 80120c2:	b2c5      	uxtb	r5, r0
 80120c4:	e7d8      	b.n	8012078 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 80120c6:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80120ca:	4648      	mov	r0, r9
 80120cc:	f7fc fedc 	bl	800ee88 <ucdr_serialize_uint32_t>
 80120d0:	4028      	ands	r0, r5
 80120d2:	b2c5      	uxtb	r5, r0
 80120d4:	e7c7      	b.n	8012066 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 80120d6:	bf00      	nop

080120d8 <uxr_serialize_OBJK_DataReader_Binary>:
 80120d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120da:	2202      	movs	r2, #2
 80120dc:	460c      	mov	r4, r1
 80120de:	4606      	mov	r6, r0
 80120e0:	f003 ffce 	bl	8016080 <ucdr_serialize_array_uint8_t>
 80120e4:	78a1      	ldrb	r1, [r4, #2]
 80120e6:	4605      	mov	r5, r0
 80120e8:	4630      	mov	r0, r6
 80120ea:	f7fc fc87 	bl	800e9fc <ucdr_serialize_bool>
 80120ee:	78a3      	ldrb	r3, [r4, #2]
 80120f0:	4005      	ands	r5, r0
 80120f2:	b2ed      	uxtb	r5, r5
 80120f4:	b90b      	cbnz	r3, 80120fa <uxr_serialize_OBJK_DataReader_Binary+0x22>
 80120f6:	4628      	mov	r0, r5
 80120f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120fa:	f104 0108 	add.w	r1, r4, #8
 80120fe:	4630      	mov	r0, r6
 8012100:	f7ff ff96 	bl	8012030 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8012104:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8012108:	4607      	mov	r7, r0
 801210a:	4630      	mov	r0, r6
 801210c:	f7fc fc76 	bl	800e9fc <ucdr_serialize_bool>
 8012110:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8012114:	4038      	ands	r0, r7
 8012116:	b2c7      	uxtb	r7, r0
 8012118:	b95b      	cbnz	r3, 8012132 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 801211a:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 801211e:	4630      	mov	r0, r6
 8012120:	f7fc fc6c 	bl	800e9fc <ucdr_serialize_bool>
 8012124:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8012128:	4007      	ands	r7, r0
 801212a:	b94b      	cbnz	r3, 8012140 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 801212c:	403d      	ands	r5, r7
 801212e:	4628      	mov	r0, r5
 8012130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012132:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8012136:	4630      	mov	r0, r6
 8012138:	f7fd f8fc 	bl	800f334 <ucdr_serialize_uint64_t>
 801213c:	4007      	ands	r7, r0
 801213e:	e7ec      	b.n	801211a <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8012140:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8012142:	4630      	mov	r0, r6
 8012144:	f004 f8bc 	bl	80162c0 <ucdr_serialize_string>
 8012148:	4007      	ands	r7, r0
 801214a:	b2ff      	uxtb	r7, r7
 801214c:	e7ee      	b.n	801212c <uxr_serialize_OBJK_DataReader_Binary+0x54>
 801214e:	bf00      	nop

08012150 <uxr_serialize_OBJK_DataWriter_Binary>:
 8012150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012152:	2202      	movs	r2, #2
 8012154:	460d      	mov	r5, r1
 8012156:	4606      	mov	r6, r0
 8012158:	f003 ff92 	bl	8016080 <ucdr_serialize_array_uint8_t>
 801215c:	78a9      	ldrb	r1, [r5, #2]
 801215e:	4604      	mov	r4, r0
 8012160:	4630      	mov	r0, r6
 8012162:	f7fc fc4b 	bl	800e9fc <ucdr_serialize_bool>
 8012166:	78ab      	ldrb	r3, [r5, #2]
 8012168:	4004      	ands	r4, r0
 801216a:	b2e4      	uxtb	r4, r4
 801216c:	b90b      	cbnz	r3, 8012172 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 801216e:	4620      	mov	r0, r4
 8012170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012172:	f105 0108 	add.w	r1, r5, #8
 8012176:	4630      	mov	r0, r6
 8012178:	f7ff ff5a 	bl	8012030 <uxr_serialize_OBJK_Endpoint_QosBinary>
 801217c:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 8012180:	4607      	mov	r7, r0
 8012182:	4630      	mov	r0, r6
 8012184:	f7fc fc3a 	bl	800e9fc <ucdr_serialize_bool>
 8012188:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 801218c:	4007      	ands	r7, r0
 801218e:	b2ff      	uxtb	r7, r7
 8012190:	b913      	cbnz	r3, 8012198 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8012192:	403c      	ands	r4, r7
 8012194:	4620      	mov	r0, r4
 8012196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012198:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 801219c:	4630      	mov	r0, r6
 801219e:	f7fd f8c9 	bl	800f334 <ucdr_serialize_uint64_t>
 80121a2:	4007      	ands	r7, r0
 80121a4:	e7f5      	b.n	8012192 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 80121a6:	bf00      	nop

080121a8 <uxr_deserialize_ObjectVariant>:
 80121a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121aa:	4605      	mov	r5, r0
 80121ac:	460e      	mov	r6, r1
 80121ae:	f7fc fc6b 	bl	800ea88 <ucdr_deserialize_uint8_t>
 80121b2:	b320      	cbz	r0, 80121fe <uxr_deserialize_ObjectVariant+0x56>
 80121b4:	7833      	ldrb	r3, [r6, #0]
 80121b6:	3b01      	subs	r3, #1
 80121b8:	4604      	mov	r4, r0
 80121ba:	2b0d      	cmp	r3, #13
 80121bc:	d81d      	bhi.n	80121fa <uxr_deserialize_ObjectVariant+0x52>
 80121be:	e8df f003 	tbb	[pc, r3]
 80121c2:	2107      	.short	0x2107
 80121c4:	21214b4b 	.word	0x21214b4b
 80121c8:	381c2121 	.word	0x381c2121
 80121cc:	876a3838 	.word	0x876a3838
 80121d0:	1d31      	adds	r1, r6, #4
 80121d2:	4628      	mov	r0, r5
 80121d4:	f7fc fc58 	bl	800ea88 <ucdr_deserialize_uint8_t>
 80121d8:	4607      	mov	r7, r0
 80121da:	b138      	cbz	r0, 80121ec <uxr_deserialize_ObjectVariant+0x44>
 80121dc:	7933      	ldrb	r3, [r6, #4]
 80121de:	2b02      	cmp	r3, #2
 80121e0:	d07c      	beq.n	80122dc <uxr_deserialize_ObjectVariant+0x134>
 80121e2:	2b03      	cmp	r3, #3
 80121e4:	f000 8082 	beq.w	80122ec <uxr_deserialize_ObjectVariant+0x144>
 80121e8:	2b01      	cmp	r3, #1
 80121ea:	d077      	beq.n	80122dc <uxr_deserialize_ObjectVariant+0x134>
 80121ec:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 80121f0:	4628      	mov	r0, r5
 80121f2:	f7fd f9ef 	bl	800f5d4 <ucdr_deserialize_int16_t>
 80121f6:	4038      	ands	r0, r7
 80121f8:	b2c4      	uxtb	r4, r0
 80121fa:	4620      	mov	r0, r4
 80121fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121fe:	2400      	movs	r4, #0
 8012200:	4620      	mov	r0, r4
 8012202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012204:	1d31      	adds	r1, r6, #4
 8012206:	4628      	mov	r0, r5
 8012208:	f7fc fc3e 	bl	800ea88 <ucdr_deserialize_uint8_t>
 801220c:	4607      	mov	r7, r0
 801220e:	b130      	cbz	r0, 801221e <uxr_deserialize_ObjectVariant+0x76>
 8012210:	7933      	ldrb	r3, [r6, #4]
 8012212:	2b02      	cmp	r3, #2
 8012214:	d037      	beq.n	8012286 <uxr_deserialize_ObjectVariant+0xde>
 8012216:	2b03      	cmp	r3, #3
 8012218:	d02a      	beq.n	8012270 <uxr_deserialize_ObjectVariant+0xc8>
 801221a:	2b01      	cmp	r3, #1
 801221c:	d033      	beq.n	8012286 <uxr_deserialize_ObjectVariant+0xde>
 801221e:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 8012222:	4628      	mov	r0, r5
 8012224:	2202      	movs	r2, #2
 8012226:	f003 ff8f 	bl	8016148 <ucdr_deserialize_array_uint8_t>
 801222a:	4038      	ands	r0, r7
 801222c:	b2c4      	uxtb	r4, r0
 801222e:	4620      	mov	r0, r4
 8012230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012232:	1d31      	adds	r1, r6, #4
 8012234:	4628      	mov	r0, r5
 8012236:	f7fc fc27 	bl	800ea88 <ucdr_deserialize_uint8_t>
 801223a:	2800      	cmp	r0, #0
 801223c:	d0df      	beq.n	80121fe <uxr_deserialize_ObjectVariant+0x56>
 801223e:	7933      	ldrb	r3, [r6, #4]
 8012240:	2b01      	cmp	r3, #1
 8012242:	d001      	beq.n	8012248 <uxr_deserialize_ObjectVariant+0xa0>
 8012244:	2b02      	cmp	r3, #2
 8012246:	d1d8      	bne.n	80121fa <uxr_deserialize_ObjectVariant+0x52>
 8012248:	68b1      	ldr	r1, [r6, #8]
 801224a:	4628      	mov	r0, r5
 801224c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012250:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012254:	f004 b844 	b.w	80162e0 <ucdr_deserialize_string>
 8012258:	1d31      	adds	r1, r6, #4
 801225a:	4628      	mov	r0, r5
 801225c:	f7fc fc14 	bl	800ea88 <ucdr_deserialize_uint8_t>
 8012260:	4607      	mov	r7, r0
 8012262:	2800      	cmp	r0, #0
 8012264:	d0db      	beq.n	801221e <uxr_deserialize_ObjectVariant+0x76>
 8012266:	7933      	ldrb	r3, [r6, #4]
 8012268:	2b02      	cmp	r3, #2
 801226a:	d00c      	beq.n	8012286 <uxr_deserialize_ObjectVariant+0xde>
 801226c:	2b03      	cmp	r3, #3
 801226e:	d1d6      	bne.n	801221e <uxr_deserialize_ObjectVariant+0x76>
 8012270:	f106 0308 	add.w	r3, r6, #8
 8012274:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012278:	f106 010c 	add.w	r1, r6, #12
 801227c:	4628      	mov	r0, r5
 801227e:	f004 f805 	bl	801628c <ucdr_deserialize_sequence_uint8_t>
 8012282:	4607      	mov	r7, r0
 8012284:	e7cb      	b.n	801221e <uxr_deserialize_ObjectVariant+0x76>
 8012286:	68b1      	ldr	r1, [r6, #8]
 8012288:	f44f 7200 	mov.w	r2, #512	; 0x200
 801228c:	4628      	mov	r0, r5
 801228e:	f004 f827 	bl	80162e0 <ucdr_deserialize_string>
 8012292:	4607      	mov	r7, r0
 8012294:	e7c3      	b.n	801221e <uxr_deserialize_ObjectVariant+0x76>
 8012296:	2204      	movs	r2, #4
 8012298:	18b1      	adds	r1, r6, r2
 801229a:	4628      	mov	r0, r5
 801229c:	f003 ff54 	bl	8016148 <ucdr_deserialize_array_uint8_t>
 80122a0:	2202      	movs	r2, #2
 80122a2:	4604      	mov	r4, r0
 80122a4:	f106 0108 	add.w	r1, r6, #8
 80122a8:	4628      	mov	r0, r5
 80122aa:	f003 ff4d 	bl	8016148 <ucdr_deserialize_array_uint8_t>
 80122ae:	2202      	movs	r2, #2
 80122b0:	4004      	ands	r4, r0
 80122b2:	f106 010a 	add.w	r1, r6, #10
 80122b6:	4628      	mov	r0, r5
 80122b8:	f003 ff46 	bl	8016148 <ucdr_deserialize_array_uint8_t>
 80122bc:	b2e4      	uxtb	r4, r4
 80122be:	4603      	mov	r3, r0
 80122c0:	f106 010c 	add.w	r1, r6, #12
 80122c4:	4628      	mov	r0, r5
 80122c6:	401c      	ands	r4, r3
 80122c8:	f7fc fbae 	bl	800ea28 <ucdr_deserialize_bool>
 80122cc:	4004      	ands	r4, r0
 80122ce:	e794      	b.n	80121fa <uxr_deserialize_ObjectVariant+0x52>
 80122d0:	1d31      	adds	r1, r6, #4
 80122d2:	4628      	mov	r0, r5
 80122d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80122d8:	f7ff bbd0 	b.w	8011a7c <uxr_deserialize_CLIENT_Representation>
 80122dc:	68b1      	ldr	r1, [r6, #8]
 80122de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80122e2:	4628      	mov	r0, r5
 80122e4:	f003 fffc 	bl	80162e0 <ucdr_deserialize_string>
 80122e8:	4607      	mov	r7, r0
 80122ea:	e77f      	b.n	80121ec <uxr_deserialize_ObjectVariant+0x44>
 80122ec:	f106 0308 	add.w	r3, r6, #8
 80122f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80122f4:	f106 010c 	add.w	r1, r6, #12
 80122f8:	4628      	mov	r0, r5
 80122fa:	f003 ffc7 	bl	801628c <ucdr_deserialize_sequence_uint8_t>
 80122fe:	4607      	mov	r7, r0
 8012300:	e774      	b.n	80121ec <uxr_deserialize_ObjectVariant+0x44>
 8012302:	bf00      	nop

08012304 <uxr_deserialize_BaseObjectRequest>:
 8012304:	b570      	push	{r4, r5, r6, lr}
 8012306:	2202      	movs	r2, #2
 8012308:	4605      	mov	r5, r0
 801230a:	460e      	mov	r6, r1
 801230c:	f003 ff1c 	bl	8016148 <ucdr_deserialize_array_uint8_t>
 8012310:	1cb1      	adds	r1, r6, #2
 8012312:	4604      	mov	r4, r0
 8012314:	2202      	movs	r2, #2
 8012316:	4628      	mov	r0, r5
 8012318:	f003 ff16 	bl	8016148 <ucdr_deserialize_array_uint8_t>
 801231c:	4020      	ands	r0, r4
 801231e:	b2c0      	uxtb	r0, r0
 8012320:	bd70      	pop	{r4, r5, r6, pc}
 8012322:	bf00      	nop

08012324 <uxr_serialize_AGENT_ActivityInfo>:
 8012324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012328:	460e      	mov	r6, r1
 801232a:	f9b1 1000 	ldrsh.w	r1, [r1]
 801232e:	4607      	mov	r7, r0
 8012330:	f7fd f8d0 	bl	800f4d4 <ucdr_serialize_int16_t>
 8012334:	6871      	ldr	r1, [r6, #4]
 8012336:	4680      	mov	r8, r0
 8012338:	4638      	mov	r0, r7
 801233a:	f7fc fda5 	bl	800ee88 <ucdr_serialize_uint32_t>
 801233e:	6873      	ldr	r3, [r6, #4]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d06a      	beq.n	801241a <uxr_serialize_AGENT_ActivityInfo+0xf6>
 8012344:	b318      	cbz	r0, 801238e <uxr_serialize_AGENT_ActivityInfo+0x6a>
 8012346:	f106 0904 	add.w	r9, r6, #4
 801234a:	2500      	movs	r5, #0
 801234c:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 8012350:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 8012354:	7a21      	ldrb	r1, [r4, #8]
 8012356:	4638      	mov	r0, r7
 8012358:	f7fc fb80 	bl	800ea5c <ucdr_serialize_uint8_t>
 801235c:	2800      	cmp	r0, #0
 801235e:	d051      	beq.n	8012404 <uxr_serialize_AGENT_ActivityInfo+0xe0>
 8012360:	7a23      	ldrb	r3, [r4, #8]
 8012362:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8012366:	00c9      	lsls	r1, r1, #3
 8012368:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 801236c:	2b03      	cmp	r3, #3
 801236e:	d859      	bhi.n	8012424 <uxr_serialize_AGENT_ActivityInfo+0x100>
 8012370:	e8df f003 	tbb	[pc, r3]
 8012374:	02122436 	.word	0x02122436
 8012378:	4449      	add	r1, r9
 801237a:	4638      	mov	r0, r7
 801237c:	6889      	ldr	r1, [r1, #8]
 801237e:	f003 ff9f 	bl	80162c0 <ucdr_serialize_string>
 8012382:	6873      	ldr	r3, [r6, #4]
 8012384:	3501      	adds	r5, #1
 8012386:	429d      	cmp	r5, r3
 8012388:	d240      	bcs.n	801240c <uxr_serialize_AGENT_ActivityInfo+0xe8>
 801238a:	2800      	cmp	r0, #0
 801238c:	d1de      	bne.n	801234c <uxr_serialize_AGENT_ActivityInfo+0x28>
 801238e:	f04f 0800 	mov.w	r8, #0
 8012392:	4640      	mov	r0, r8
 8012394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012398:	3108      	adds	r1, #8
 801239a:	4449      	add	r1, r9
 801239c:	2210      	movs	r2, #16
 801239e:	4638      	mov	r0, r7
 80123a0:	f003 fe6e 	bl	8016080 <ucdr_serialize_array_uint8_t>
 80123a4:	44aa      	add	sl, r5
 80123a6:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 80123aa:	4604      	mov	r4, r0
 80123ac:	f8da 101c 	ldr.w	r1, [sl, #28]
 80123b0:	4638      	mov	r0, r7
 80123b2:	f7fc fd69 	bl	800ee88 <ucdr_serialize_uint32_t>
 80123b6:	4020      	ands	r0, r4
 80123b8:	b2c0      	uxtb	r0, r0
 80123ba:	e7e2      	b.n	8012382 <uxr_serialize_AGENT_ActivityInfo+0x5e>
 80123bc:	3108      	adds	r1, #8
 80123be:	4449      	add	r1, r9
 80123c0:	2204      	movs	r2, #4
 80123c2:	4638      	mov	r0, r7
 80123c4:	f003 fe5c 	bl	8016080 <ucdr_serialize_array_uint8_t>
 80123c8:	44aa      	add	sl, r5
 80123ca:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 80123ce:	4604      	mov	r4, r0
 80123d0:	f8ba 1010 	ldrh.w	r1, [sl, #16]
 80123d4:	4638      	mov	r0, r7
 80123d6:	f7fc fb6d 	bl	800eab4 <ucdr_serialize_uint16_t>
 80123da:	4020      	ands	r0, r4
 80123dc:	b2c0      	uxtb	r0, r0
 80123de:	e7d0      	b.n	8012382 <uxr_serialize_AGENT_ActivityInfo+0x5e>
 80123e0:	3108      	adds	r1, #8
 80123e2:	4449      	add	r1, r9
 80123e4:	2202      	movs	r2, #2
 80123e6:	4638      	mov	r0, r7
 80123e8:	f003 fe4a 	bl	8016080 <ucdr_serialize_array_uint8_t>
 80123ec:	44aa      	add	sl, r5
 80123ee:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 80123f2:	4604      	mov	r4, r0
 80123f4:	f89a 100e 	ldrb.w	r1, [sl, #14]
 80123f8:	4638      	mov	r0, r7
 80123fa:	f7fc fb2f 	bl	800ea5c <ucdr_serialize_uint8_t>
 80123fe:	4020      	ands	r0, r4
 8012400:	b2c0      	uxtb	r0, r0
 8012402:	e7be      	b.n	8012382 <uxr_serialize_AGENT_ActivityInfo+0x5e>
 8012404:	6873      	ldr	r3, [r6, #4]
 8012406:	3501      	adds	r5, #1
 8012408:	429d      	cmp	r5, r3
 801240a:	d3c0      	bcc.n	801238e <uxr_serialize_AGENT_ActivityInfo+0x6a>
 801240c:	ea08 0000 	and.w	r0, r8, r0
 8012410:	fa5f f880 	uxtb.w	r8, r0
 8012414:	4640      	mov	r0, r8
 8012416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801241a:	ea08 0800 	and.w	r8, r8, r0
 801241e:	fa5f f888 	uxtb.w	r8, r8
 8012422:	e7b6      	b.n	8012392 <uxr_serialize_AGENT_ActivityInfo+0x6e>
 8012424:	6873      	ldr	r3, [r6, #4]
 8012426:	3501      	adds	r5, #1
 8012428:	42ab      	cmp	r3, r5
 801242a:	f104 0418 	add.w	r4, r4, #24
 801242e:	d891      	bhi.n	8012354 <uxr_serialize_AGENT_ActivityInfo+0x30>
 8012430:	e7af      	b.n	8012392 <uxr_serialize_AGENT_ActivityInfo+0x6e>
 8012432:	bf00      	nop

08012434 <uxr_serialize_ActivityInfoVariant>:
 8012434:	b570      	push	{r4, r5, r6, lr}
 8012436:	460d      	mov	r5, r1
 8012438:	7809      	ldrb	r1, [r1, #0]
 801243a:	4606      	mov	r6, r0
 801243c:	f7fc fb0e 	bl	800ea5c <ucdr_serialize_uint8_t>
 8012440:	b130      	cbz	r0, 8012450 <uxr_serialize_ActivityInfoVariant+0x1c>
 8012442:	782b      	ldrb	r3, [r5, #0]
 8012444:	2b06      	cmp	r3, #6
 8012446:	d019      	beq.n	801247c <uxr_serialize_ActivityInfoVariant+0x48>
 8012448:	2b0d      	cmp	r3, #13
 801244a:	d010      	beq.n	801246e <uxr_serialize_ActivityInfoVariant+0x3a>
 801244c:	2b05      	cmp	r3, #5
 801244e:	d000      	beq.n	8012452 <uxr_serialize_ActivityInfoVariant+0x1e>
 8012450:	bd70      	pop	{r4, r5, r6, pc}
 8012452:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012456:	4630      	mov	r0, r6
 8012458:	f7fd f83c 	bl	800f4d4 <ucdr_serialize_int16_t>
 801245c:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8012460:	4604      	mov	r4, r0
 8012462:	4630      	mov	r0, r6
 8012464:	f7fc ff66 	bl	800f334 <ucdr_serialize_uint64_t>
 8012468:	4020      	ands	r0, r4
 801246a:	b2c0      	uxtb	r0, r0
 801246c:	bd70      	pop	{r4, r5, r6, pc}
 801246e:	f105 0108 	add.w	r1, r5, #8
 8012472:	4630      	mov	r0, r6
 8012474:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012478:	f7ff bf54 	b.w	8012324 <uxr_serialize_AGENT_ActivityInfo>
 801247c:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8012480:	4630      	mov	r0, r6
 8012482:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012486:	f7fd b825 	b.w	800f4d4 <ucdr_serialize_int16_t>
 801248a:	bf00      	nop

0801248c <uxr_deserialize_BaseObjectReply>:
 801248c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012490:	2202      	movs	r2, #2
 8012492:	4606      	mov	r6, r0
 8012494:	460f      	mov	r7, r1
 8012496:	f003 fe57 	bl	8016148 <ucdr_deserialize_array_uint8_t>
 801249a:	2202      	movs	r2, #2
 801249c:	1cb9      	adds	r1, r7, #2
 801249e:	4605      	mov	r5, r0
 80124a0:	4630      	mov	r0, r6
 80124a2:	f003 fe51 	bl	8016148 <ucdr_deserialize_array_uint8_t>
 80124a6:	1d39      	adds	r1, r7, #4
 80124a8:	4680      	mov	r8, r0
 80124aa:	4630      	mov	r0, r6
 80124ac:	f7fc faec 	bl	800ea88 <ucdr_deserialize_uint8_t>
 80124b0:	1d79      	adds	r1, r7, #5
 80124b2:	4604      	mov	r4, r0
 80124b4:	4630      	mov	r0, r6
 80124b6:	f7fc fae7 	bl	800ea88 <ucdr_deserialize_uint8_t>
 80124ba:	ea05 0508 	and.w	r5, r5, r8
 80124be:	402c      	ands	r4, r5
 80124c0:	4020      	ands	r0, r4
 80124c2:	b2c0      	uxtb	r0, r0
 80124c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080124c8 <uxr_serialize_ReadSpecification>:
 80124c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124cc:	460e      	mov	r6, r1
 80124ce:	7809      	ldrb	r1, [r1, #0]
 80124d0:	4607      	mov	r7, r0
 80124d2:	f7fc fac3 	bl	800ea5c <ucdr_serialize_uint8_t>
 80124d6:	7871      	ldrb	r1, [r6, #1]
 80124d8:	4604      	mov	r4, r0
 80124da:	4638      	mov	r0, r7
 80124dc:	f7fc fabe 	bl	800ea5c <ucdr_serialize_uint8_t>
 80124e0:	78b1      	ldrb	r1, [r6, #2]
 80124e2:	4004      	ands	r4, r0
 80124e4:	4638      	mov	r0, r7
 80124e6:	f7fc fa89 	bl	800e9fc <ucdr_serialize_bool>
 80124ea:	78b3      	ldrb	r3, [r6, #2]
 80124ec:	b2e4      	uxtb	r4, r4
 80124ee:	4004      	ands	r4, r0
 80124f0:	b94b      	cbnz	r3, 8012506 <uxr_serialize_ReadSpecification+0x3e>
 80124f2:	7a31      	ldrb	r1, [r6, #8]
 80124f4:	4638      	mov	r0, r7
 80124f6:	f7fc fa81 	bl	800e9fc <ucdr_serialize_bool>
 80124fa:	7a33      	ldrb	r3, [r6, #8]
 80124fc:	4004      	ands	r4, r0
 80124fe:	b943      	cbnz	r3, 8012512 <uxr_serialize_ReadSpecification+0x4a>
 8012500:	4620      	mov	r0, r4
 8012502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012506:	6871      	ldr	r1, [r6, #4]
 8012508:	4638      	mov	r0, r7
 801250a:	f003 fed9 	bl	80162c0 <ucdr_serialize_string>
 801250e:	4004      	ands	r4, r0
 8012510:	e7ef      	b.n	80124f2 <uxr_serialize_ReadSpecification+0x2a>
 8012512:	8971      	ldrh	r1, [r6, #10]
 8012514:	4638      	mov	r0, r7
 8012516:	f7fc facd 	bl	800eab4 <ucdr_serialize_uint16_t>
 801251a:	89b1      	ldrh	r1, [r6, #12]
 801251c:	4605      	mov	r5, r0
 801251e:	4638      	mov	r0, r7
 8012520:	f7fc fac8 	bl	800eab4 <ucdr_serialize_uint16_t>
 8012524:	89f1      	ldrh	r1, [r6, #14]
 8012526:	4005      	ands	r5, r0
 8012528:	4638      	mov	r0, r7
 801252a:	f7fc fac3 	bl	800eab4 <ucdr_serialize_uint16_t>
 801252e:	8a31      	ldrh	r1, [r6, #16]
 8012530:	4680      	mov	r8, r0
 8012532:	4638      	mov	r0, r7
 8012534:	f7fc fabe 	bl	800eab4 <ucdr_serialize_uint16_t>
 8012538:	b2ed      	uxtb	r5, r5
 801253a:	4025      	ands	r5, r4
 801253c:	ea08 0505 	and.w	r5, r8, r5
 8012540:	ea00 0405 	and.w	r4, r0, r5
 8012544:	4620      	mov	r0, r4
 8012546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801254a:	bf00      	nop

0801254c <uxr_serialize_CREATE_CLIENT_Payload>:
 801254c:	f7ff ba3a 	b.w	80119c4 <uxr_serialize_CLIENT_Representation>

08012550 <uxr_serialize_CREATE_Payload>:
 8012550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012552:	2202      	movs	r2, #2
 8012554:	4606      	mov	r6, r0
 8012556:	460d      	mov	r5, r1
 8012558:	f003 fd92 	bl	8016080 <ucdr_serialize_array_uint8_t>
 801255c:	1ca9      	adds	r1, r5, #2
 801255e:	4604      	mov	r4, r0
 8012560:	2202      	movs	r2, #2
 8012562:	4630      	mov	r0, r6
 8012564:	f003 fd8c 	bl	8016080 <ucdr_serialize_array_uint8_t>
 8012568:	7929      	ldrb	r1, [r5, #4]
 801256a:	4607      	mov	r7, r0
 801256c:	4630      	mov	r0, r6
 801256e:	f7fc fa75 	bl	800ea5c <ucdr_serialize_uint8_t>
 8012572:	b328      	cbz	r0, 80125c0 <uxr_serialize_CREATE_Payload+0x70>
 8012574:	792b      	ldrb	r3, [r5, #4]
 8012576:	403c      	ands	r4, r7
 8012578:	3b01      	subs	r3, #1
 801257a:	b2e4      	uxtb	r4, r4
 801257c:	2b0d      	cmp	r3, #13
 801257e:	d81d      	bhi.n	80125bc <uxr_serialize_CREATE_Payload+0x6c>
 8012580:	e8df f003 	tbb	[pc, r3]
 8012584:	32320753 	.word	0x32320753
 8012588:	07070707 	.word	0x07070707
 801258c:	2121211c 	.word	0x2121211c
 8012590:	684c      	.short	0x684c
 8012592:	7a29      	ldrb	r1, [r5, #8]
 8012594:	4630      	mov	r0, r6
 8012596:	f7fc fa61 	bl	800ea5c <ucdr_serialize_uint8_t>
 801259a:	4607      	mov	r7, r0
 801259c:	b130      	cbz	r0, 80125ac <uxr_serialize_CREATE_Payload+0x5c>
 801259e:	7a2b      	ldrb	r3, [r5, #8]
 80125a0:	2b02      	cmp	r3, #2
 80125a2:	d035      	beq.n	8012610 <uxr_serialize_CREATE_Payload+0xc0>
 80125a4:	2b03      	cmp	r3, #3
 80125a6:	d02b      	beq.n	8012600 <uxr_serialize_CREATE_Payload+0xb0>
 80125a8:	2b01      	cmp	r3, #1
 80125aa:	d031      	beq.n	8012610 <uxr_serialize_CREATE_Payload+0xc0>
 80125ac:	f505 7104 	add.w	r1, r5, #528	; 0x210
 80125b0:	4630      	mov	r0, r6
 80125b2:	2202      	movs	r2, #2
 80125b4:	f003 fd64 	bl	8016080 <ucdr_serialize_array_uint8_t>
 80125b8:	4038      	ands	r0, r7
 80125ba:	4004      	ands	r4, r0
 80125bc:	4620      	mov	r0, r4
 80125be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80125c0:	2400      	movs	r4, #0
 80125c2:	4620      	mov	r0, r4
 80125c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80125c6:	7a29      	ldrb	r1, [r5, #8]
 80125c8:	4630      	mov	r0, r6
 80125ca:	f7fc fa47 	bl	800ea5c <ucdr_serialize_uint8_t>
 80125ce:	2800      	cmp	r0, #0
 80125d0:	d0f6      	beq.n	80125c0 <uxr_serialize_CREATE_Payload+0x70>
 80125d2:	7a2b      	ldrb	r3, [r5, #8]
 80125d4:	2b01      	cmp	r3, #1
 80125d6:	d001      	beq.n	80125dc <uxr_serialize_CREATE_Payload+0x8c>
 80125d8:	2b02      	cmp	r3, #2
 80125da:	d1ef      	bne.n	80125bc <uxr_serialize_CREATE_Payload+0x6c>
 80125dc:	68e9      	ldr	r1, [r5, #12]
 80125de:	4630      	mov	r0, r6
 80125e0:	f003 fe6e 	bl	80162c0 <ucdr_serialize_string>
 80125e4:	4004      	ands	r4, r0
 80125e6:	e7e9      	b.n	80125bc <uxr_serialize_CREATE_Payload+0x6c>
 80125e8:	7a29      	ldrb	r1, [r5, #8]
 80125ea:	4630      	mov	r0, r6
 80125ec:	f7fc fa36 	bl	800ea5c <ucdr_serialize_uint8_t>
 80125f0:	4607      	mov	r7, r0
 80125f2:	2800      	cmp	r0, #0
 80125f4:	d0da      	beq.n	80125ac <uxr_serialize_CREATE_Payload+0x5c>
 80125f6:	7a2b      	ldrb	r3, [r5, #8]
 80125f8:	2b02      	cmp	r3, #2
 80125fa:	d009      	beq.n	8012610 <uxr_serialize_CREATE_Payload+0xc0>
 80125fc:	2b03      	cmp	r3, #3
 80125fe:	d1d5      	bne.n	80125ac <uxr_serialize_CREATE_Payload+0x5c>
 8012600:	68ea      	ldr	r2, [r5, #12]
 8012602:	f105 0110 	add.w	r1, r5, #16
 8012606:	4630      	mov	r0, r6
 8012608:	f003 fe2e 	bl	8016268 <ucdr_serialize_sequence_uint8_t>
 801260c:	4607      	mov	r7, r0
 801260e:	e7cd      	b.n	80125ac <uxr_serialize_CREATE_Payload+0x5c>
 8012610:	68e9      	ldr	r1, [r5, #12]
 8012612:	4630      	mov	r0, r6
 8012614:	f003 fe54 	bl	80162c0 <ucdr_serialize_string>
 8012618:	4607      	mov	r7, r0
 801261a:	e7c7      	b.n	80125ac <uxr_serialize_CREATE_Payload+0x5c>
 801261c:	f105 0108 	add.w	r1, r5, #8
 8012620:	4630      	mov	r0, r6
 8012622:	f7ff fa95 	bl	8011b50 <uxr_serialize_AGENT_Representation>
 8012626:	4004      	ands	r4, r0
 8012628:	e7c8      	b.n	80125bc <uxr_serialize_CREATE_Payload+0x6c>
 801262a:	7a29      	ldrb	r1, [r5, #8]
 801262c:	4630      	mov	r0, r6
 801262e:	f7fc fa15 	bl	800ea5c <ucdr_serialize_uint8_t>
 8012632:	4607      	mov	r7, r0
 8012634:	b130      	cbz	r0, 8012644 <uxr_serialize_CREATE_Payload+0xf4>
 8012636:	7a2b      	ldrb	r3, [r5, #8]
 8012638:	2b02      	cmp	r3, #2
 801263a:	d012      	beq.n	8012662 <uxr_serialize_CREATE_Payload+0x112>
 801263c:	2b03      	cmp	r3, #3
 801263e:	d016      	beq.n	801266e <uxr_serialize_CREATE_Payload+0x11e>
 8012640:	2b01      	cmp	r3, #1
 8012642:	d00e      	beq.n	8012662 <uxr_serialize_CREATE_Payload+0x112>
 8012644:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	; 0x210
 8012648:	4630      	mov	r0, r6
 801264a:	f7fc ff43 	bl	800f4d4 <ucdr_serialize_int16_t>
 801264e:	4038      	ands	r0, r7
 8012650:	4004      	ands	r4, r0
 8012652:	e7b3      	b.n	80125bc <uxr_serialize_CREATE_Payload+0x6c>
 8012654:	f105 0108 	add.w	r1, r5, #8
 8012658:	4630      	mov	r0, r6
 801265a:	f7ff f9b3 	bl	80119c4 <uxr_serialize_CLIENT_Representation>
 801265e:	4004      	ands	r4, r0
 8012660:	e7ac      	b.n	80125bc <uxr_serialize_CREATE_Payload+0x6c>
 8012662:	68e9      	ldr	r1, [r5, #12]
 8012664:	4630      	mov	r0, r6
 8012666:	f003 fe2b 	bl	80162c0 <ucdr_serialize_string>
 801266a:	4607      	mov	r7, r0
 801266c:	e7ea      	b.n	8012644 <uxr_serialize_CREATE_Payload+0xf4>
 801266e:	68ea      	ldr	r2, [r5, #12]
 8012670:	f105 0110 	add.w	r1, r5, #16
 8012674:	4630      	mov	r0, r6
 8012676:	f003 fdf7 	bl	8016268 <ucdr_serialize_sequence_uint8_t>
 801267a:	4607      	mov	r7, r0
 801267c:	e7e2      	b.n	8012644 <uxr_serialize_CREATE_Payload+0xf4>
 801267e:	bf00      	nop

08012680 <uxr_deserialize_GET_INFO_Payload>:
 8012680:	b570      	push	{r4, r5, r6, lr}
 8012682:	2202      	movs	r2, #2
 8012684:	4605      	mov	r5, r0
 8012686:	460e      	mov	r6, r1
 8012688:	f003 fd5e 	bl	8016148 <ucdr_deserialize_array_uint8_t>
 801268c:	1cb1      	adds	r1, r6, #2
 801268e:	2202      	movs	r2, #2
 8012690:	4604      	mov	r4, r0
 8012692:	4628      	mov	r0, r5
 8012694:	f003 fd58 	bl	8016148 <ucdr_deserialize_array_uint8_t>
 8012698:	1d31      	adds	r1, r6, #4
 801269a:	4004      	ands	r4, r0
 801269c:	4628      	mov	r0, r5
 801269e:	f7fc fd23 	bl	800f0e8 <ucdr_deserialize_uint32_t>
 80126a2:	b2e4      	uxtb	r4, r4
 80126a4:	4020      	ands	r0, r4
 80126a6:	bd70      	pop	{r4, r5, r6, pc}

080126a8 <uxr_serialize_DELETE_Payload>:
 80126a8:	b570      	push	{r4, r5, r6, lr}
 80126aa:	2202      	movs	r2, #2
 80126ac:	4605      	mov	r5, r0
 80126ae:	460e      	mov	r6, r1
 80126b0:	f003 fce6 	bl	8016080 <ucdr_serialize_array_uint8_t>
 80126b4:	1cb1      	adds	r1, r6, #2
 80126b6:	4604      	mov	r4, r0
 80126b8:	2202      	movs	r2, #2
 80126ba:	4628      	mov	r0, r5
 80126bc:	f003 fce0 	bl	8016080 <ucdr_serialize_array_uint8_t>
 80126c0:	4020      	ands	r0, r4
 80126c2:	b2c0      	uxtb	r0, r0
 80126c4:	bd70      	pop	{r4, r5, r6, pc}
 80126c6:	bf00      	nop

080126c8 <uxr_deserialize_STATUS_AGENT_Payload>:
 80126c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80126cc:	4606      	mov	r6, r0
 80126ce:	460f      	mov	r7, r1
 80126d0:	f7fc f9da 	bl	800ea88 <ucdr_deserialize_uint8_t>
 80126d4:	1c79      	adds	r1, r7, #1
 80126d6:	4605      	mov	r5, r0
 80126d8:	4630      	mov	r0, r6
 80126da:	f7fc f9d5 	bl	800ea88 <ucdr_deserialize_uint8_t>
 80126de:	1d39      	adds	r1, r7, #4
 80126e0:	4681      	mov	r9, r0
 80126e2:	2204      	movs	r2, #4
 80126e4:	4630      	mov	r0, r6
 80126e6:	f003 fd2f 	bl	8016148 <ucdr_deserialize_array_uint8_t>
 80126ea:	f107 0108 	add.w	r1, r7, #8
 80126ee:	4604      	mov	r4, r0
 80126f0:	2202      	movs	r2, #2
 80126f2:	4630      	mov	r0, r6
 80126f4:	f003 fd28 	bl	8016148 <ucdr_deserialize_array_uint8_t>
 80126f8:	f107 010a 	add.w	r1, r7, #10
 80126fc:	4680      	mov	r8, r0
 80126fe:	2202      	movs	r2, #2
 8012700:	4630      	mov	r0, r6
 8012702:	f003 fd21 	bl	8016148 <ucdr_deserialize_array_uint8_t>
 8012706:	ea05 0509 	and.w	r5, r5, r9
 801270a:	b2ed      	uxtb	r5, r5
 801270c:	402c      	ands	r4, r5
 801270e:	f107 010c 	add.w	r1, r7, #12
 8012712:	4605      	mov	r5, r0
 8012714:	4630      	mov	r0, r6
 8012716:	f7fc f987 	bl	800ea28 <ucdr_deserialize_bool>
 801271a:	ea08 0404 	and.w	r4, r8, r4
 801271e:	4025      	ands	r5, r4
 8012720:	4028      	ands	r0, r5
 8012722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012726:	bf00      	nop

08012728 <uxr_deserialize_STATUS_Payload>:
 8012728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801272c:	2202      	movs	r2, #2
 801272e:	4606      	mov	r6, r0
 8012730:	460f      	mov	r7, r1
 8012732:	f003 fd09 	bl	8016148 <ucdr_deserialize_array_uint8_t>
 8012736:	2202      	movs	r2, #2
 8012738:	1cb9      	adds	r1, r7, #2
 801273a:	4605      	mov	r5, r0
 801273c:	4630      	mov	r0, r6
 801273e:	f003 fd03 	bl	8016148 <ucdr_deserialize_array_uint8_t>
 8012742:	1d39      	adds	r1, r7, #4
 8012744:	4680      	mov	r8, r0
 8012746:	4630      	mov	r0, r6
 8012748:	f7fc f99e 	bl	800ea88 <ucdr_deserialize_uint8_t>
 801274c:	1d79      	adds	r1, r7, #5
 801274e:	4604      	mov	r4, r0
 8012750:	4630      	mov	r0, r6
 8012752:	f7fc f999 	bl	800ea88 <ucdr_deserialize_uint8_t>
 8012756:	ea05 0508 	and.w	r5, r5, r8
 801275a:	402c      	ands	r4, r5
 801275c:	4020      	ands	r0, r4
 801275e:	b2c0      	uxtb	r0, r0
 8012760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012764 <uxr_serialize_INFO_Payload>:
 8012764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012768:	2202      	movs	r2, #2
 801276a:	460c      	mov	r4, r1
 801276c:	4605      	mov	r5, r0
 801276e:	f003 fc87 	bl	8016080 <ucdr_serialize_array_uint8_t>
 8012772:	2202      	movs	r2, #2
 8012774:	4680      	mov	r8, r0
 8012776:	1ca1      	adds	r1, r4, #2
 8012778:	4628      	mov	r0, r5
 801277a:	f003 fc81 	bl	8016080 <ucdr_serialize_array_uint8_t>
 801277e:	7921      	ldrb	r1, [r4, #4]
 8012780:	4607      	mov	r7, r0
 8012782:	4628      	mov	r0, r5
 8012784:	f7fc f96a 	bl	800ea5c <ucdr_serialize_uint8_t>
 8012788:	7961      	ldrb	r1, [r4, #5]
 801278a:	4606      	mov	r6, r0
 801278c:	4628      	mov	r0, r5
 801278e:	f7fc f965 	bl	800ea5c <ucdr_serialize_uint8_t>
 8012792:	ea08 0807 	and.w	r8, r8, r7
 8012796:	ea06 0608 	and.w	r6, r6, r8
 801279a:	4006      	ands	r6, r0
 801279c:	7a21      	ldrb	r1, [r4, #8]
 801279e:	4628      	mov	r0, r5
 80127a0:	f7fc f92c 	bl	800e9fc <ucdr_serialize_bool>
 80127a4:	7a23      	ldrb	r3, [r4, #8]
 80127a6:	b2f7      	uxtb	r7, r6
 80127a8:	4606      	mov	r6, r0
 80127aa:	b96b      	cbnz	r3, 80127c8 <uxr_serialize_INFO_Payload+0x64>
 80127ac:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 80127b0:	4628      	mov	r0, r5
 80127b2:	f7fc f923 	bl	800e9fc <ucdr_serialize_bool>
 80127b6:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 80127ba:	4030      	ands	r0, r6
 80127bc:	b2c6      	uxtb	r6, r0
 80127be:	b983      	cbnz	r3, 80127e2 <uxr_serialize_INFO_Payload+0x7e>
 80127c0:	ea06 0007 	and.w	r0, r6, r7
 80127c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127c8:	7b21      	ldrb	r1, [r4, #12]
 80127ca:	4628      	mov	r0, r5
 80127cc:	f7fc f946 	bl	800ea5c <ucdr_serialize_uint8_t>
 80127d0:	b188      	cbz	r0, 80127f6 <uxr_serialize_INFO_Payload+0x92>
 80127d2:	f104 010c 	add.w	r1, r4, #12
 80127d6:	4628      	mov	r0, r5
 80127d8:	f7ff fa06 	bl	8011be8 <uxr_serialize_ObjectVariant.part.0>
 80127dc:	4030      	ands	r0, r6
 80127de:	b2c6      	uxtb	r6, r0
 80127e0:	e7e4      	b.n	80127ac <uxr_serialize_INFO_Payload+0x48>
 80127e2:	f504 7108 	add.w	r1, r4, #544	; 0x220
 80127e6:	4628      	mov	r0, r5
 80127e8:	f7ff fe24 	bl	8012434 <uxr_serialize_ActivityInfoVariant>
 80127ec:	4006      	ands	r6, r0
 80127ee:	ea06 0007 	and.w	r0, r6, r7
 80127f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127f6:	4606      	mov	r6, r0
 80127f8:	e7d8      	b.n	80127ac <uxr_serialize_INFO_Payload+0x48>
 80127fa:	bf00      	nop

080127fc <uxr_serialize_READ_DATA_Payload>:
 80127fc:	b570      	push	{r4, r5, r6, lr}
 80127fe:	2202      	movs	r2, #2
 8012800:	4605      	mov	r5, r0
 8012802:	460e      	mov	r6, r1
 8012804:	f003 fc3c 	bl	8016080 <ucdr_serialize_array_uint8_t>
 8012808:	1cb1      	adds	r1, r6, #2
 801280a:	2202      	movs	r2, #2
 801280c:	4604      	mov	r4, r0
 801280e:	4628      	mov	r0, r5
 8012810:	f003 fc36 	bl	8016080 <ucdr_serialize_array_uint8_t>
 8012814:	1d31      	adds	r1, r6, #4
 8012816:	4004      	ands	r4, r0
 8012818:	4628      	mov	r0, r5
 801281a:	f7ff fe55 	bl	80124c8 <uxr_serialize_ReadSpecification>
 801281e:	b2e4      	uxtb	r4, r4
 8012820:	4020      	ands	r0, r4
 8012822:	bd70      	pop	{r4, r5, r6, pc}

08012824 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8012824:	b570      	push	{r4, r5, r6, lr}
 8012826:	2202      	movs	r2, #2
 8012828:	4605      	mov	r5, r0
 801282a:	460e      	mov	r6, r1
 801282c:	f003 fc28 	bl	8016080 <ucdr_serialize_array_uint8_t>
 8012830:	1cb1      	adds	r1, r6, #2
 8012832:	4604      	mov	r4, r0
 8012834:	2202      	movs	r2, #2
 8012836:	4628      	mov	r0, r5
 8012838:	f003 fc22 	bl	8016080 <ucdr_serialize_array_uint8_t>
 801283c:	4020      	ands	r0, r4
 801283e:	b2c0      	uxtb	r0, r0
 8012840:	bd70      	pop	{r4, r5, r6, pc}
 8012842:	bf00      	nop

08012844 <uxr_serialize_ACKNACK_Payload>:
 8012844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012846:	460f      	mov	r7, r1
 8012848:	460e      	mov	r6, r1
 801284a:	f837 1b02 	ldrh.w	r1, [r7], #2
 801284e:	4605      	mov	r5, r0
 8012850:	f7fc f930 	bl	800eab4 <ucdr_serialize_uint16_t>
 8012854:	4639      	mov	r1, r7
 8012856:	2202      	movs	r2, #2
 8012858:	4604      	mov	r4, r0
 801285a:	4628      	mov	r0, r5
 801285c:	f003 fc10 	bl	8016080 <ucdr_serialize_array_uint8_t>
 8012860:	7931      	ldrb	r1, [r6, #4]
 8012862:	4004      	ands	r4, r0
 8012864:	4628      	mov	r0, r5
 8012866:	f7fc f8f9 	bl	800ea5c <ucdr_serialize_uint8_t>
 801286a:	b2e4      	uxtb	r4, r4
 801286c:	4020      	ands	r0, r4
 801286e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012870 <uxr_deserialize_ACKNACK_Payload>:
 8012870:	b570      	push	{r4, r5, r6, lr}
 8012872:	4605      	mov	r5, r0
 8012874:	460e      	mov	r6, r1
 8012876:	f7fc fa1d 	bl	800ecb4 <ucdr_deserialize_uint16_t>
 801287a:	1cb1      	adds	r1, r6, #2
 801287c:	2202      	movs	r2, #2
 801287e:	4604      	mov	r4, r0
 8012880:	4628      	mov	r0, r5
 8012882:	f003 fc61 	bl	8016148 <ucdr_deserialize_array_uint8_t>
 8012886:	1d31      	adds	r1, r6, #4
 8012888:	4004      	ands	r4, r0
 801288a:	4628      	mov	r0, r5
 801288c:	f7fc f8fc 	bl	800ea88 <ucdr_deserialize_uint8_t>
 8012890:	b2e4      	uxtb	r4, r4
 8012892:	4020      	ands	r0, r4
 8012894:	bd70      	pop	{r4, r5, r6, pc}
 8012896:	bf00      	nop

08012898 <uxr_serialize_HEARTBEAT_Payload>:
 8012898:	b570      	push	{r4, r5, r6, lr}
 801289a:	460d      	mov	r5, r1
 801289c:	8809      	ldrh	r1, [r1, #0]
 801289e:	4606      	mov	r6, r0
 80128a0:	f7fc f908 	bl	800eab4 <ucdr_serialize_uint16_t>
 80128a4:	8869      	ldrh	r1, [r5, #2]
 80128a6:	4604      	mov	r4, r0
 80128a8:	4630      	mov	r0, r6
 80128aa:	f7fc f903 	bl	800eab4 <ucdr_serialize_uint16_t>
 80128ae:	7929      	ldrb	r1, [r5, #4]
 80128b0:	4004      	ands	r4, r0
 80128b2:	4630      	mov	r0, r6
 80128b4:	f7fc f8d2 	bl	800ea5c <ucdr_serialize_uint8_t>
 80128b8:	b2e4      	uxtb	r4, r4
 80128ba:	4020      	ands	r0, r4
 80128bc:	bd70      	pop	{r4, r5, r6, pc}
 80128be:	bf00      	nop

080128c0 <uxr_deserialize_HEARTBEAT_Payload>:
 80128c0:	b570      	push	{r4, r5, r6, lr}
 80128c2:	4605      	mov	r5, r0
 80128c4:	460e      	mov	r6, r1
 80128c6:	f7fc f9f5 	bl	800ecb4 <ucdr_deserialize_uint16_t>
 80128ca:	1cb1      	adds	r1, r6, #2
 80128cc:	4604      	mov	r4, r0
 80128ce:	4628      	mov	r0, r5
 80128d0:	f7fc f9f0 	bl	800ecb4 <ucdr_deserialize_uint16_t>
 80128d4:	1d31      	adds	r1, r6, #4
 80128d6:	4004      	ands	r4, r0
 80128d8:	4628      	mov	r0, r5
 80128da:	f7fc f8d5 	bl	800ea88 <ucdr_deserialize_uint8_t>
 80128de:	b2e4      	uxtb	r4, r4
 80128e0:	4020      	ands	r0, r4
 80128e2:	bd70      	pop	{r4, r5, r6, pc}

080128e4 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 80128e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128e8:	4605      	mov	r5, r0
 80128ea:	460e      	mov	r6, r1
 80128ec:	f7fc ff7e 	bl	800f7ec <ucdr_deserialize_int32_t>
 80128f0:	1d31      	adds	r1, r6, #4
 80128f2:	4607      	mov	r7, r0
 80128f4:	4628      	mov	r0, r5
 80128f6:	f7fc fbf7 	bl	800f0e8 <ucdr_deserialize_uint32_t>
 80128fa:	f106 0108 	add.w	r1, r6, #8
 80128fe:	4680      	mov	r8, r0
 8012900:	4628      	mov	r0, r5
 8012902:	f7fc ff73 	bl	800f7ec <ucdr_deserialize_int32_t>
 8012906:	f106 010c 	add.w	r1, r6, #12
 801290a:	4604      	mov	r4, r0
 801290c:	4628      	mov	r0, r5
 801290e:	f7fc fbeb 	bl	800f0e8 <ucdr_deserialize_uint32_t>
 8012912:	ea07 0708 	and.w	r7, r7, r8
 8012916:	403c      	ands	r4, r7
 8012918:	f106 0110 	add.w	r1, r6, #16
 801291c:	4004      	ands	r4, r0
 801291e:	4628      	mov	r0, r5
 8012920:	f7fc ff64 	bl	800f7ec <ucdr_deserialize_int32_t>
 8012924:	f106 0114 	add.w	r1, r6, #20
 8012928:	4603      	mov	r3, r0
 801292a:	4628      	mov	r0, r5
 801292c:	461d      	mov	r5, r3
 801292e:	f7fc fbdb 	bl	800f0e8 <ucdr_deserialize_uint32_t>
 8012932:	b2e4      	uxtb	r4, r4
 8012934:	402c      	ands	r4, r5
 8012936:	4020      	ands	r0, r4
 8012938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801293c <uxr_serialize_SampleIdentity>:
 801293c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012940:	220c      	movs	r2, #12
 8012942:	4604      	mov	r4, r0
 8012944:	460d      	mov	r5, r1
 8012946:	f003 fb9b 	bl	8016080 <ucdr_serialize_array_uint8_t>
 801294a:	2203      	movs	r2, #3
 801294c:	f105 010c 	add.w	r1, r5, #12
 8012950:	4607      	mov	r7, r0
 8012952:	4620      	mov	r0, r4
 8012954:	f003 fb94 	bl	8016080 <ucdr_serialize_array_uint8_t>
 8012958:	7be9      	ldrb	r1, [r5, #15]
 801295a:	4680      	mov	r8, r0
 801295c:	4620      	mov	r0, r4
 801295e:	f7fc f87d 	bl	800ea5c <ucdr_serialize_uint8_t>
 8012962:	6929      	ldr	r1, [r5, #16]
 8012964:	4606      	mov	r6, r0
 8012966:	4620      	mov	r0, r4
 8012968:	f7fc fea8 	bl	800f6bc <ucdr_serialize_int32_t>
 801296c:	6969      	ldr	r1, [r5, #20]
 801296e:	4603      	mov	r3, r0
 8012970:	4620      	mov	r0, r4
 8012972:	ea07 0708 	and.w	r7, r7, r8
 8012976:	461c      	mov	r4, r3
 8012978:	f7fc fa86 	bl	800ee88 <ucdr_serialize_uint32_t>
 801297c:	403e      	ands	r6, r7
 801297e:	4034      	ands	r4, r6
 8012980:	4020      	ands	r0, r4
 8012982:	b2c0      	uxtb	r0, r0
 8012984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012988 <uxr_deserialize_SampleIdentity>:
 8012988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801298c:	220c      	movs	r2, #12
 801298e:	4604      	mov	r4, r0
 8012990:	460d      	mov	r5, r1
 8012992:	f003 fbd9 	bl	8016148 <ucdr_deserialize_array_uint8_t>
 8012996:	2203      	movs	r2, #3
 8012998:	f105 010c 	add.w	r1, r5, #12
 801299c:	4607      	mov	r7, r0
 801299e:	4620      	mov	r0, r4
 80129a0:	f003 fbd2 	bl	8016148 <ucdr_deserialize_array_uint8_t>
 80129a4:	f105 010f 	add.w	r1, r5, #15
 80129a8:	4680      	mov	r8, r0
 80129aa:	4620      	mov	r0, r4
 80129ac:	f7fc f86c 	bl	800ea88 <ucdr_deserialize_uint8_t>
 80129b0:	f105 0110 	add.w	r1, r5, #16
 80129b4:	4606      	mov	r6, r0
 80129b6:	4620      	mov	r0, r4
 80129b8:	f7fc ff18 	bl	800f7ec <ucdr_deserialize_int32_t>
 80129bc:	f105 0114 	add.w	r1, r5, #20
 80129c0:	4603      	mov	r3, r0
 80129c2:	4620      	mov	r0, r4
 80129c4:	ea07 0708 	and.w	r7, r7, r8
 80129c8:	461c      	mov	r4, r3
 80129ca:	f7fc fb8d 	bl	800f0e8 <ucdr_deserialize_uint32_t>
 80129ce:	403e      	ands	r6, r7
 80129d0:	4034      	ands	r4, r6
 80129d2:	4020      	ands	r0, r4
 80129d4:	b2c0      	uxtb	r0, r0
 80129d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129da:	bf00      	nop

080129dc <rcl_client_get_rmw_handle>:
 80129dc:	b110      	cbz	r0, 80129e4 <rcl_client_get_rmw_handle+0x8>
 80129de:	6800      	ldr	r0, [r0, #0]
 80129e0:	b100      	cbz	r0, 80129e4 <rcl_client_get_rmw_handle+0x8>
 80129e2:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80129e4:	4770      	bx	lr
 80129e6:	bf00      	nop

080129e8 <rcl_take_response>:
 80129e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80129ea:	460e      	mov	r6, r1
 80129ec:	460c      	mov	r4, r1
 80129ee:	4607      	mov	r7, r0
 80129f0:	4694      	mov	ip, r2
 80129f2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80129f4:	b08d      	sub	sp, #52	; 0x34
 80129f6:	ad06      	add	r5, sp, #24
 80129f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80129fa:	e896 0003 	ldmia.w	r6, {r0, r1}
 80129fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8012a02:	b337      	cbz	r7, 8012a52 <rcl_take_response+0x6a>
 8012a04:	683b      	ldr	r3, [r7, #0]
 8012a06:	b323      	cbz	r3, 8012a52 <rcl_take_response+0x6a>
 8012a08:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8012a0a:	b310      	cbz	r0, 8012a52 <rcl_take_response+0x6a>
 8012a0c:	4662      	mov	r2, ip
 8012a0e:	b31a      	cbz	r2, 8012a58 <rcl_take_response+0x70>
 8012a10:	2300      	movs	r3, #0
 8012a12:	2600      	movs	r6, #0
 8012a14:	2700      	movs	r7, #0
 8012a16:	f88d 3007 	strb.w	r3, [sp, #7]
 8012a1a:	a902      	add	r1, sp, #8
 8012a1c:	f10d 0307 	add.w	r3, sp, #7
 8012a20:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8012a24:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8012a28:	f003 f872 	bl	8015b10 <rmw_take_response>
 8012a2c:	4606      	mov	r6, r0
 8012a2e:	b9a8      	cbnz	r0, 8012a5c <rcl_take_response+0x74>
 8012a30:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012a34:	f240 13f5 	movw	r3, #501	; 0x1f5
 8012a38:	2a00      	cmp	r2, #0
 8012a3a:	bf08      	it	eq
 8012a3c:	461e      	moveq	r6, r3
 8012a3e:	ad06      	add	r5, sp, #24
 8012a40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012a42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012a44:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012a48:	e884 0003 	stmia.w	r4, {r0, r1}
 8012a4c:	4630      	mov	r0, r6
 8012a4e:	b00d      	add	sp, #52	; 0x34
 8012a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a52:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 8012a56:	e7f2      	b.n	8012a3e <rcl_take_response+0x56>
 8012a58:	260b      	movs	r6, #11
 8012a5a:	e7f0      	b.n	8012a3e <rcl_take_response+0x56>
 8012a5c:	2601      	movs	r6, #1
 8012a5e:	e7ee      	b.n	8012a3e <rcl_take_response+0x56>

08012a60 <rcl_convert_rmw_ret_to_rcl_ret>:
 8012a60:	280b      	cmp	r0, #11
 8012a62:	dc0d      	bgt.n	8012a80 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8012a64:	2800      	cmp	r0, #0
 8012a66:	db09      	blt.n	8012a7c <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8012a68:	280b      	cmp	r0, #11
 8012a6a:	d807      	bhi.n	8012a7c <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8012a6c:	e8df f000 	tbb	[pc, r0]
 8012a70:	07060607 	.word	0x07060607
 8012a74:	06060606 	.word	0x06060606
 8012a78:	07070606 	.word	0x07070606
 8012a7c:	2001      	movs	r0, #1
 8012a7e:	4770      	bx	lr
 8012a80:	28cb      	cmp	r0, #203	; 0xcb
 8012a82:	bf18      	it	ne
 8012a84:	2001      	movne	r0, #1
 8012a86:	4770      	bx	lr

08012a88 <rcl_get_zero_initialized_context>:
 8012a88:	4a03      	ldr	r2, [pc, #12]	; (8012a98 <rcl_get_zero_initialized_context+0x10>)
 8012a8a:	4603      	mov	r3, r0
 8012a8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012a90:	e883 0003 	stmia.w	r3, {r0, r1}
 8012a94:	4618      	mov	r0, r3
 8012a96:	4770      	bx	lr
 8012a98:	08019b14 	.word	0x08019b14

08012a9c <rcl_context_is_valid>:
 8012a9c:	b118      	cbz	r0, 8012aa6 <rcl_context_is_valid+0xa>
 8012a9e:	6840      	ldr	r0, [r0, #4]
 8012aa0:	3800      	subs	r0, #0
 8012aa2:	bf18      	it	ne
 8012aa4:	2001      	movne	r0, #1
 8012aa6:	4770      	bx	lr

08012aa8 <__cleanup_context>:
 8012aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012aac:	4606      	mov	r6, r0
 8012aae:	6800      	ldr	r0, [r0, #0]
 8012ab0:	2300      	movs	r3, #0
 8012ab2:	6073      	str	r3, [r6, #4]
 8012ab4:	2800      	cmp	r0, #0
 8012ab6:	d04d      	beq.n	8012b54 <__cleanup_context+0xac>
 8012ab8:	6947      	ldr	r7, [r0, #20]
 8012aba:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8012abe:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8012ac2:	b137      	cbz	r7, 8012ad2 <__cleanup_context+0x2a>
 8012ac4:	3014      	adds	r0, #20
 8012ac6:	f000 fb1d 	bl	8013104 <rcl_init_options_fini>
 8012aca:	4607      	mov	r7, r0
 8012acc:	2800      	cmp	r0, #0
 8012ace:	d148      	bne.n	8012b62 <__cleanup_context+0xba>
 8012ad0:	6830      	ldr	r0, [r6, #0]
 8012ad2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8012ad4:	b143      	cbz	r3, 8012ae8 <__cleanup_context+0x40>
 8012ad6:	3028      	adds	r0, #40	; 0x28
 8012ad8:	f002 fd96 	bl	8015608 <rmw_context_fini>
 8012adc:	b118      	cbz	r0, 8012ae6 <__cleanup_context+0x3e>
 8012ade:	2f00      	cmp	r7, #0
 8012ae0:	d042      	beq.n	8012b68 <__cleanup_context+0xc0>
 8012ae2:	f7fa feb5 	bl	800d850 <rcutils_reset_error>
 8012ae6:	6830      	ldr	r0, [r6, #0]
 8012ae8:	f8d0 c020 	ldr.w	ip, [r0, #32]
 8012aec:	f1bc 0f00 	cmp.w	ip, #0
 8012af0:	d01c      	beq.n	8012b2c <__cleanup_context+0x84>
 8012af2:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8012af6:	2a01      	cmp	r2, #1
 8012af8:	f173 0100 	sbcs.w	r1, r3, #0
 8012afc:	db12      	blt.n	8012b24 <__cleanup_context+0x7c>
 8012afe:	2400      	movs	r4, #0
 8012b00:	2500      	movs	r5, #0
 8012b02:	f85c 0024 	ldr.w	r0, [ip, r4, lsl #2]
 8012b06:	4649      	mov	r1, r9
 8012b08:	b1c0      	cbz	r0, 8012b3c <__cleanup_context+0x94>
 8012b0a:	47c0      	blx	r8
 8012b0c:	6831      	ldr	r1, [r6, #0]
 8012b0e:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 8012b12:	3401      	adds	r4, #1
 8012b14:	f145 0500 	adc.w	r5, r5, #0
 8012b18:	4294      	cmp	r4, r2
 8012b1a:	f8d1 c020 	ldr.w	ip, [r1, #32]
 8012b1e:	eb75 0103 	sbcs.w	r1, r5, r3
 8012b22:	dbee      	blt.n	8012b02 <__cleanup_context+0x5a>
 8012b24:	4660      	mov	r0, ip
 8012b26:	4649      	mov	r1, r9
 8012b28:	47c0      	blx	r8
 8012b2a:	6830      	ldr	r0, [r6, #0]
 8012b2c:	4649      	mov	r1, r9
 8012b2e:	47c0      	blx	r8
 8012b30:	2300      	movs	r3, #0
 8012b32:	e9c6 3300 	strd	r3, r3, [r6]
 8012b36:	4638      	mov	r0, r7
 8012b38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b3c:	3401      	adds	r4, #1
 8012b3e:	f145 0500 	adc.w	r5, r5, #0
 8012b42:	4294      	cmp	r4, r2
 8012b44:	eb75 0103 	sbcs.w	r1, r5, r3
 8012b48:	dbdb      	blt.n	8012b02 <__cleanup_context+0x5a>
 8012b4a:	4660      	mov	r0, ip
 8012b4c:	4649      	mov	r1, r9
 8012b4e:	47c0      	blx	r8
 8012b50:	6830      	ldr	r0, [r6, #0]
 8012b52:	e7eb      	b.n	8012b2c <__cleanup_context+0x84>
 8012b54:	4607      	mov	r7, r0
 8012b56:	2300      	movs	r3, #0
 8012b58:	e9c6 3300 	strd	r3, r3, [r6]
 8012b5c:	4638      	mov	r0, r7
 8012b5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b62:	f7fa fe75 	bl	800d850 <rcutils_reset_error>
 8012b66:	e7b3      	b.n	8012ad0 <__cleanup_context+0x28>
 8012b68:	f7ff ff7a 	bl	8012a60 <rcl_convert_rmw_ret_to_rcl_ret>
 8012b6c:	4607      	mov	r7, r0
 8012b6e:	e7b8      	b.n	8012ae2 <__cleanup_context+0x3a>

08012b70 <rcl_expand_topic_name>:
 8012b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b74:	b08b      	sub	sp, #44	; 0x2c
 8012b76:	9306      	str	r3, [sp, #24]
 8012b78:	2800      	cmp	r0, #0
 8012b7a:	f000 80d2 	beq.w	8012d22 <rcl_expand_topic_name+0x1b2>
 8012b7e:	460e      	mov	r6, r1
 8012b80:	2900      	cmp	r1, #0
 8012b82:	f000 80ce 	beq.w	8012d22 <rcl_expand_topic_name+0x1b2>
 8012b86:	4617      	mov	r7, r2
 8012b88:	2a00      	cmp	r2, #0
 8012b8a:	f000 80ca 	beq.w	8012d22 <rcl_expand_topic_name+0x1b2>
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	f000 80c7 	beq.w	8012d22 <rcl_expand_topic_name+0x1b2>
 8012b94:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	f000 80c3 	beq.w	8012d22 <rcl_expand_topic_name+0x1b2>
 8012b9c:	a909      	add	r1, sp, #36	; 0x24
 8012b9e:	2200      	movs	r2, #0
 8012ba0:	4680      	mov	r8, r0
 8012ba2:	f001 f8d3 	bl	8013d4c <rcl_validate_topic_name>
 8012ba6:	4604      	mov	r4, r0
 8012ba8:	2800      	cmp	r0, #0
 8012baa:	f040 80b6 	bne.w	8012d1a <rcl_expand_topic_name+0x1aa>
 8012bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	f040 80bf 	bne.w	8012d34 <rcl_expand_topic_name+0x1c4>
 8012bb6:	4602      	mov	r2, r0
 8012bb8:	a909      	add	r1, sp, #36	; 0x24
 8012bba:	4630      	mov	r0, r6
 8012bbc:	f002 fa46 	bl	801504c <rmw_validate_node_name>
 8012bc0:	2800      	cmp	r0, #0
 8012bc2:	f040 80b3 	bne.w	8012d2c <rcl_expand_topic_name+0x1bc>
 8012bc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012bc8:	2a00      	cmp	r2, #0
 8012bca:	f040 80b8 	bne.w	8012d3e <rcl_expand_topic_name+0x1ce>
 8012bce:	a909      	add	r1, sp, #36	; 0x24
 8012bd0:	4638      	mov	r0, r7
 8012bd2:	f002 fa1d 	bl	8015010 <rmw_validate_namespace>
 8012bd6:	2800      	cmp	r0, #0
 8012bd8:	f040 80a8 	bne.w	8012d2c <rcl_expand_topic_name+0x1bc>
 8012bdc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8012bde:	2c00      	cmp	r4, #0
 8012be0:	f040 80f6 	bne.w	8012dd0 <rcl_expand_topic_name+0x260>
 8012be4:	217b      	movs	r1, #123	; 0x7b
 8012be6:	4640      	mov	r0, r8
 8012be8:	f005 fd1a 	bl	8018620 <strchr>
 8012bec:	f898 3000 	ldrb.w	r3, [r8]
 8012bf0:	2b2f      	cmp	r3, #47	; 0x2f
 8012bf2:	4605      	mov	r5, r0
 8012bf4:	f000 80c4 	beq.w	8012d80 <rcl_expand_topic_name+0x210>
 8012bf8:	2b7e      	cmp	r3, #126	; 0x7e
 8012bfa:	d16f      	bne.n	8012cdc <rcl_expand_topic_name+0x16c>
 8012bfc:	4638      	mov	r0, r7
 8012bfe:	f7ed faf9 	bl	80001f4 <strlen>
 8012c02:	4b87      	ldr	r3, [pc, #540]	; (8012e20 <rcl_expand_topic_name+0x2b0>)
 8012c04:	4987      	ldr	r1, [pc, #540]	; (8012e24 <rcl_expand_topic_name+0x2b4>)
 8012c06:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012c08:	9604      	str	r6, [sp, #16]
 8012c0a:	2801      	cmp	r0, #1
 8012c0c:	bf0c      	ite	eq
 8012c0e:	4618      	moveq	r0, r3
 8012c10:	4608      	movne	r0, r1
 8012c12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012c16:	e9cd 2300 	strd	r2, r3, [sp]
 8012c1a:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8012c1e:	f108 0101 	add.w	r1, r8, #1
 8012c22:	9105      	str	r1, [sp, #20]
 8012c24:	ab14      	add	r3, sp, #80	; 0x50
 8012c26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012c28:	f002 f820 	bl	8014c6c <rcutils_format_string_limit>
 8012c2c:	4682      	mov	sl, r0
 8012c2e:	2800      	cmp	r0, #0
 8012c30:	f000 80d0 	beq.w	8012dd4 <rcl_expand_topic_name+0x264>
 8012c34:	2d00      	cmp	r5, #0
 8012c36:	f000 80aa 	beq.w	8012d8e <rcl_expand_topic_name+0x21e>
 8012c3a:	217b      	movs	r1, #123	; 0x7b
 8012c3c:	f005 fcf0 	bl	8018620 <strchr>
 8012c40:	46d1      	mov	r9, sl
 8012c42:	4605      	mov	r5, r0
 8012c44:	9407      	str	r4, [sp, #28]
 8012c46:	46d3      	mov	fp, sl
 8012c48:	464c      	mov	r4, r9
 8012c4a:	2d00      	cmp	r5, #0
 8012c4c:	f000 80c7 	beq.w	8012dde <rcl_expand_topic_name+0x26e>
 8012c50:	217d      	movs	r1, #125	; 0x7d
 8012c52:	4620      	mov	r0, r4
 8012c54:	f005 fce4 	bl	8018620 <strchr>
 8012c58:	eba0 0905 	sub.w	r9, r0, r5
 8012c5c:	f109 0a01 	add.w	sl, r9, #1
 8012c60:	4871      	ldr	r0, [pc, #452]	; (8012e28 <rcl_expand_topic_name+0x2b8>)
 8012c62:	4652      	mov	r2, sl
 8012c64:	4629      	mov	r1, r5
 8012c66:	f005 fce8 	bl	801863a <strncmp>
 8012c6a:	2800      	cmp	r0, #0
 8012c6c:	f000 808d 	beq.w	8012d8a <rcl_expand_topic_name+0x21a>
 8012c70:	486e      	ldr	r0, [pc, #440]	; (8012e2c <rcl_expand_topic_name+0x2bc>)
 8012c72:	4652      	mov	r2, sl
 8012c74:	4629      	mov	r1, r5
 8012c76:	f005 fce0 	bl	801863a <strncmp>
 8012c7a:	b130      	cbz	r0, 8012c8a <rcl_expand_topic_name+0x11a>
 8012c7c:	486c      	ldr	r0, [pc, #432]	; (8012e30 <rcl_expand_topic_name+0x2c0>)
 8012c7e:	4652      	mov	r2, sl
 8012c80:	4629      	mov	r1, r5
 8012c82:	f005 fcda 	bl	801863a <strncmp>
 8012c86:	2800      	cmp	r0, #0
 8012c88:	d15b      	bne.n	8012d42 <rcl_expand_topic_name+0x1d2>
 8012c8a:	46b9      	mov	r9, r7
 8012c8c:	ab16      	add	r3, sp, #88	; 0x58
 8012c8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012c92:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012c96:	ab14      	add	r3, sp, #80	; 0x50
 8012c98:	4628      	mov	r0, r5
 8012c9a:	cb0c      	ldmia	r3, {r2, r3}
 8012c9c:	4651      	mov	r1, sl
 8012c9e:	f002 f931 	bl	8014f04 <rcutils_strndup>
 8012ca2:	4605      	mov	r5, r0
 8012ca4:	2800      	cmp	r0, #0
 8012ca6:	f000 80a4 	beq.w	8012df2 <rcl_expand_topic_name+0x282>
 8012caa:	464a      	mov	r2, r9
 8012cac:	4620      	mov	r0, r4
 8012cae:	ab14      	add	r3, sp, #80	; 0x50
 8012cb0:	4629      	mov	r1, r5
 8012cb2:	f002 f82d 	bl	8014d10 <rcutils_repl_str>
 8012cb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012cb8:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012cba:	4604      	mov	r4, r0
 8012cbc:	4628      	mov	r0, r5
 8012cbe:	4798      	blx	r3
 8012cc0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012cc2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012cc4:	4658      	mov	r0, fp
 8012cc6:	4798      	blx	r3
 8012cc8:	2c00      	cmp	r4, #0
 8012cca:	f000 8083 	beq.w	8012dd4 <rcl_expand_topic_name+0x264>
 8012cce:	217b      	movs	r1, #123	; 0x7b
 8012cd0:	4620      	mov	r0, r4
 8012cd2:	f005 fca5 	bl	8018620 <strchr>
 8012cd6:	46a3      	mov	fp, r4
 8012cd8:	4605      	mov	r5, r0
 8012cda:	e7b6      	b.n	8012c4a <rcl_expand_topic_name+0xda>
 8012cdc:	2800      	cmp	r0, #0
 8012cde:	d151      	bne.n	8012d84 <rcl_expand_topic_name+0x214>
 8012ce0:	4638      	mov	r0, r7
 8012ce2:	f7ed fa87 	bl	80001f4 <strlen>
 8012ce6:	4b53      	ldr	r3, [pc, #332]	; (8012e34 <rcl_expand_topic_name+0x2c4>)
 8012ce8:	4a53      	ldr	r2, [pc, #332]	; (8012e38 <rcl_expand_topic_name+0x2c8>)
 8012cea:	f8cd 8010 	str.w	r8, [sp, #16]
 8012cee:	2801      	cmp	r0, #1
 8012cf0:	bf0c      	ite	eq
 8012cf2:	4618      	moveq	r0, r3
 8012cf4:	4610      	movne	r0, r2
 8012cf6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8012cf8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012cfc:	e9cd 3200 	strd	r3, r2, [sp]
 8012d00:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8012d04:	ab14      	add	r3, sp, #80	; 0x50
 8012d06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012d08:	f001 ffb0 	bl	8014c6c <rcutils_format_string_limit>
 8012d0c:	4682      	mov	sl, r0
 8012d0e:	4653      	mov	r3, sl
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d05f      	beq.n	8012dd4 <rcl_expand_topic_name+0x264>
 8012d14:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012d16:	f8c3 a000 	str.w	sl, [r3]
 8012d1a:	4620      	mov	r0, r4
 8012d1c:	b00b      	add	sp, #44	; 0x2c
 8012d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d22:	240b      	movs	r4, #11
 8012d24:	4620      	mov	r0, r4
 8012d26:	b00b      	add	sp, #44	; 0x2c
 8012d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d2c:	f7ff fe98 	bl	8012a60 <rcl_convert_rmw_ret_to_rcl_ret>
 8012d30:	4604      	mov	r4, r0
 8012d32:	e7f2      	b.n	8012d1a <rcl_expand_topic_name+0x1aa>
 8012d34:	2467      	movs	r4, #103	; 0x67
 8012d36:	4620      	mov	r0, r4
 8012d38:	b00b      	add	sp, #44	; 0x2c
 8012d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d3e:	24c9      	movs	r4, #201	; 0xc9
 8012d40:	e7eb      	b.n	8012d1a <rcl_expand_topic_name+0x1aa>
 8012d42:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8012d46:	9806      	ldr	r0, [sp, #24]
 8012d48:	1c69      	adds	r1, r5, #1
 8012d4a:	f7fa fe97 	bl	800da7c <rcutils_string_map_getn>
 8012d4e:	4681      	mov	r9, r0
 8012d50:	2800      	cmp	r0, #0
 8012d52:	d19b      	bne.n	8012c8c <rcl_expand_topic_name+0x11c>
 8012d54:	aa16      	add	r2, sp, #88	; 0x58
 8012d56:	ca07      	ldmia	r2, {r0, r1, r2}
 8012d58:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012d5a:	f8c3 9000 	str.w	r9, [r3]
 8012d5e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012d62:	ab14      	add	r3, sp, #80	; 0x50
 8012d64:	cb0c      	ldmia	r3, {r2, r3}
 8012d66:	4651      	mov	r1, sl
 8012d68:	4628      	mov	r0, r5
 8012d6a:	f002 f8cb 	bl	8014f04 <rcutils_strndup>
 8012d6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012d70:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012d72:	4798      	blx	r3
 8012d74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012d76:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012d78:	4658      	mov	r0, fp
 8012d7a:	4798      	blx	r3
 8012d7c:	2469      	movs	r4, #105	; 0x69
 8012d7e:	e7cc      	b.n	8012d1a <rcl_expand_topic_name+0x1aa>
 8012d80:	2800      	cmp	r0, #0
 8012d82:	d03e      	beq.n	8012e02 <rcl_expand_topic_name+0x292>
 8012d84:	46c1      	mov	r9, r8
 8012d86:	46a2      	mov	sl, r4
 8012d88:	e75c      	b.n	8012c44 <rcl_expand_topic_name+0xd4>
 8012d8a:	46b1      	mov	r9, r6
 8012d8c:	e77e      	b.n	8012c8c <rcl_expand_topic_name+0x11c>
 8012d8e:	f89a 3000 	ldrb.w	r3, [sl]
 8012d92:	2b2f      	cmp	r3, #47	; 0x2f
 8012d94:	d0be      	beq.n	8012d14 <rcl_expand_topic_name+0x1a4>
 8012d96:	4638      	mov	r0, r7
 8012d98:	f7ed fa2c 	bl	80001f4 <strlen>
 8012d9c:	4b25      	ldr	r3, [pc, #148]	; (8012e34 <rcl_expand_topic_name+0x2c4>)
 8012d9e:	4926      	ldr	r1, [pc, #152]	; (8012e38 <rcl_expand_topic_name+0x2c8>)
 8012da0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012da2:	f8cd a010 	str.w	sl, [sp, #16]
 8012da6:	2801      	cmp	r0, #1
 8012da8:	bf0c      	ite	eq
 8012daa:	4618      	moveq	r0, r3
 8012dac:	4608      	movne	r0, r1
 8012dae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012db2:	e9cd 2300 	strd	r2, r3, [sp]
 8012db6:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8012dba:	ab14      	add	r3, sp, #80	; 0x50
 8012dbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012dbe:	f001 ff55 	bl	8014c6c <rcutils_format_string_limit>
 8012dc2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012dc4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012dc6:	4603      	mov	r3, r0
 8012dc8:	4650      	mov	r0, sl
 8012dca:	469a      	mov	sl, r3
 8012dcc:	4790      	blx	r2
 8012dce:	e79e      	b.n	8012d0e <rcl_expand_topic_name+0x19e>
 8012dd0:	24ca      	movs	r4, #202	; 0xca
 8012dd2:	e7a2      	b.n	8012d1a <rcl_expand_topic_name+0x1aa>
 8012dd4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8012dd6:	2300      	movs	r3, #0
 8012dd8:	6013      	str	r3, [r2, #0]
 8012dda:	240a      	movs	r4, #10
 8012ddc:	e79d      	b.n	8012d1a <rcl_expand_topic_name+0x1aa>
 8012dde:	465b      	mov	r3, fp
 8012de0:	9c07      	ldr	r4, [sp, #28]
 8012de2:	46da      	mov	sl, fp
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d1d2      	bne.n	8012d8e <rcl_expand_topic_name+0x21e>
 8012de8:	f898 3000 	ldrb.w	r3, [r8]
 8012dec:	2b2f      	cmp	r3, #47	; 0x2f
 8012dee:	d091      	beq.n	8012d14 <rcl_expand_topic_name+0x1a4>
 8012df0:	e776      	b.n	8012ce0 <rcl_expand_topic_name+0x170>
 8012df2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012df4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012df6:	601d      	str	r5, [r3, #0]
 8012df8:	4658      	mov	r0, fp
 8012dfa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012dfc:	4798      	blx	r3
 8012dfe:	240a      	movs	r4, #10
 8012e00:	e78b      	b.n	8012d1a <rcl_expand_topic_name+0x1aa>
 8012e02:	e9dd 0117 	ldrd	r0, r1, [sp, #92]	; 0x5c
 8012e06:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012e0a:	ab14      	add	r3, sp, #80	; 0x50
 8012e0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012e0e:	4640      	mov	r0, r8
 8012e10:	f002 f856 	bl	8014ec0 <rcutils_strdup>
 8012e14:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012e16:	2800      	cmp	r0, #0
 8012e18:	bf08      	it	eq
 8012e1a:	240a      	moveq	r4, #10
 8012e1c:	6018      	str	r0, [r3, #0]
 8012e1e:	e77c      	b.n	8012d1a <rcl_expand_topic_name+0x1aa>
 8012e20:	08019ae0 	.word	0x08019ae0
 8012e24:	08019b1c 	.word	0x08019b1c
 8012e28:	08019b2c 	.word	0x08019b2c
 8012e2c:	08019b34 	.word	0x08019b34
 8012e30:	08019b3c 	.word	0x08019b3c
 8012e34:	08019af0 	.word	0x08019af0
 8012e38:	08019b24 	.word	0x08019b24

08012e3c <rcl_get_default_topic_name_substitutions>:
 8012e3c:	2800      	cmp	r0, #0
 8012e3e:	bf0c      	ite	eq
 8012e40:	200b      	moveq	r0, #11
 8012e42:	2000      	movne	r0, #0
 8012e44:	4770      	bx	lr
 8012e46:	bf00      	nop

08012e48 <rcl_init>:
 8012e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e4c:	1e07      	subs	r7, r0, #0
 8012e4e:	b09f      	sub	sp, #124	; 0x7c
 8012e50:	4688      	mov	r8, r1
 8012e52:	4692      	mov	sl, r2
 8012e54:	4699      	mov	r9, r3
 8012e56:	f340 8097 	ble.w	8012f88 <rcl_init+0x140>
 8012e5a:	2900      	cmp	r1, #0
 8012e5c:	f000 8097 	beq.w	8012f8e <rcl_init+0x146>
 8012e60:	1f0d      	subs	r5, r1, #4
 8012e62:	2400      	movs	r4, #0
 8012e64:	f855 6f04 	ldr.w	r6, [r5, #4]!
 8012e68:	3401      	adds	r4, #1
 8012e6a:	2e00      	cmp	r6, #0
 8012e6c:	f000 808f 	beq.w	8012f8e <rcl_init+0x146>
 8012e70:	42a7      	cmp	r7, r4
 8012e72:	d1f7      	bne.n	8012e64 <rcl_init+0x1c>
 8012e74:	f1ba 0f00 	cmp.w	sl, #0
 8012e78:	f000 8089 	beq.w	8012f8e <rcl_init+0x146>
 8012e7c:	f8da 4000 	ldr.w	r4, [sl]
 8012e80:	2c00      	cmp	r4, #0
 8012e82:	f000 8084 	beq.w	8012f8e <rcl_init+0x146>
 8012e86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012e88:	ad19      	add	r5, sp, #100	; 0x64
 8012e8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012e8c:	6823      	ldr	r3, [r4, #0]
 8012e8e:	602b      	str	r3, [r5, #0]
 8012e90:	a819      	add	r0, sp, #100	; 0x64
 8012e92:	f7fa fcb9 	bl	800d808 <rcutils_allocator_is_valid>
 8012e96:	2800      	cmp	r0, #0
 8012e98:	d079      	beq.n	8012f8e <rcl_init+0x146>
 8012e9a:	f1b9 0f00 	cmp.w	r9, #0
 8012e9e:	d076      	beq.n	8012f8e <rcl_init+0x146>
 8012ea0:	f8d9 3000 	ldr.w	r3, [r9]
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d177      	bne.n	8012f98 <rcl_init+0x150>
 8012ea8:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 8012eac:	2178      	movs	r1, #120	; 0x78
 8012eae:	2001      	movs	r0, #1
 8012eb0:	4798      	blx	r3
 8012eb2:	4604      	mov	r4, r0
 8012eb4:	f8c9 0000 	str.w	r0, [r9]
 8012eb8:	2800      	cmp	r0, #0
 8012eba:	f000 80ba 	beq.w	8013032 <rcl_init+0x1ea>
 8012ebe:	a802      	add	r0, sp, #8
 8012ec0:	f002 f83c 	bl	8014f3c <rmw_get_zero_initialized_context>
 8012ec4:	a902      	add	r1, sp, #8
 8012ec6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8012eca:	2250      	movs	r2, #80	; 0x50
 8012ecc:	ac19      	add	r4, sp, #100	; 0x64
 8012ece:	f005 fcbe 	bl	801884e <memcpy>
 8012ed2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012ed4:	f8d9 5000 	ldr.w	r5, [r9]
 8012ed8:	6826      	ldr	r6, [r4, #0]
 8012eda:	462c      	mov	r4, r5
 8012edc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012ede:	f105 0114 	add.w	r1, r5, #20
 8012ee2:	6026      	str	r6, [r4, #0]
 8012ee4:	4650      	mov	r0, sl
 8012ee6:	f000 f931 	bl	801314c <rcl_init_options_copy>
 8012eea:	4606      	mov	r6, r0
 8012eec:	2800      	cmp	r0, #0
 8012eee:	d144      	bne.n	8012f7a <rcl_init+0x132>
 8012ef0:	f8d9 a000 	ldr.w	sl, [r9]
 8012ef4:	463c      	mov	r4, r7
 8012ef6:	17fd      	asrs	r5, r7, #31
 8012ef8:	e9ca 4506 	strd	r4, r5, [sl, #24]
 8012efc:	f8ca 0020 	str.w	r0, [sl, #32]
 8012f00:	2f00      	cmp	r7, #0
 8012f02:	d050      	beq.n	8012fa6 <rcl_init+0x15e>
 8012f04:	f1b8 0f00 	cmp.w	r8, #0
 8012f08:	d04d      	beq.n	8012fa6 <rcl_init+0x15e>
 8012f0a:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 8012f0e:	4638      	mov	r0, r7
 8012f10:	2104      	movs	r1, #4
 8012f12:	4798      	blx	r3
 8012f14:	f8ca 0020 	str.w	r0, [sl, #32]
 8012f18:	f8d9 a000 	ldr.w	sl, [r9]
 8012f1c:	f8da 3020 	ldr.w	r3, [sl, #32]
 8012f20:	46d3      	mov	fp, sl
 8012f22:	b34b      	cbz	r3, 8012f78 <rcl_init+0x130>
 8012f24:	2f01      	cmp	r7, #1
 8012f26:	f175 0300 	sbcs.w	r3, r5, #0
 8012f2a:	db3c      	blt.n	8012fa6 <rcl_init+0x15e>
 8012f2c:	f1a8 0804 	sub.w	r8, r8, #4
 8012f30:	2600      	movs	r6, #0
 8012f32:	2700      	movs	r7, #0
 8012f34:	e00c      	b.n	8012f50 <rcl_init+0x108>
 8012f36:	f8d8 1000 	ldr.w	r1, [r8]
 8012f3a:	f005 fc88 	bl	801884e <memcpy>
 8012f3e:	3601      	adds	r6, #1
 8012f40:	f147 0700 	adc.w	r7, r7, #0
 8012f44:	42bd      	cmp	r5, r7
 8012f46:	bf08      	it	eq
 8012f48:	42b4      	cmpeq	r4, r6
 8012f4a:	d02a      	beq.n	8012fa2 <rcl_init+0x15a>
 8012f4c:	f8d9 b000 	ldr.w	fp, [r9]
 8012f50:	f858 0f04 	ldr.w	r0, [r8, #4]!
 8012f54:	f7ed f94e 	bl	80001f4 <strlen>
 8012f58:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012f5a:	991d      	ldr	r1, [sp, #116]	; 0x74
 8012f5c:	f8db a020 	ldr.w	sl, [fp, #32]
 8012f60:	9001      	str	r0, [sp, #4]
 8012f62:	4798      	blx	r3
 8012f64:	f8d9 1000 	ldr.w	r1, [r9]
 8012f68:	9a01      	ldr	r2, [sp, #4]
 8012f6a:	6a09      	ldr	r1, [r1, #32]
 8012f6c:	00b3      	lsls	r3, r6, #2
 8012f6e:	f84a 0003 	str.w	r0, [sl, r3]
 8012f72:	58c8      	ldr	r0, [r1, r3]
 8012f74:	2800      	cmp	r0, #0
 8012f76:	d1de      	bne.n	8012f36 <rcl_init+0xee>
 8012f78:	260a      	movs	r6, #10
 8012f7a:	4648      	mov	r0, r9
 8012f7c:	f7ff fd94 	bl	8012aa8 <__cleanup_context>
 8012f80:	4630      	mov	r0, r6
 8012f82:	b01f      	add	sp, #124	; 0x7c
 8012f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f88:	2900      	cmp	r1, #0
 8012f8a:	f43f af73 	beq.w	8012e74 <rcl_init+0x2c>
 8012f8e:	260b      	movs	r6, #11
 8012f90:	4630      	mov	r0, r6
 8012f92:	b01f      	add	sp, #124	; 0x7c
 8012f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f98:	2664      	movs	r6, #100	; 0x64
 8012f9a:	4630      	mov	r0, r6
 8012f9c:	b01f      	add	sp, #124	; 0x7c
 8012f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fa2:	f8d9 a000 	ldr.w	sl, [r9]
 8012fa6:	4a2c      	ldr	r2, [pc, #176]	; (8013058 <rcl_init+0x210>)
 8012fa8:	6813      	ldr	r3, [r2, #0]
 8012faa:	3301      	adds	r3, #1
 8012fac:	d03b      	beq.n	8013026 <rcl_init+0x1de>
 8012fae:	6013      	str	r3, [r2, #0]
 8012fb0:	4619      	mov	r1, r3
 8012fb2:	2000      	movs	r0, #0
 8012fb4:	f8da 4014 	ldr.w	r4, [sl, #20]
 8012fb8:	f8c9 3004 	str.w	r3, [r9, #4]
 8012fbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012fbe:	3301      	adds	r3, #1
 8012fc0:	e9c4 1006 	strd	r1, r0, [r4, #24]
 8012fc4:	d039      	beq.n	801303a <rcl_init+0x1f2>
 8012fc6:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8012fca:	b94b      	cbnz	r3, 8012fe0 <rcl_init+0x198>
 8012fcc:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8012fd0:	f000 f962 	bl	8013298 <rcl_get_localhost_only>
 8012fd4:	4606      	mov	r6, r0
 8012fd6:	2800      	cmp	r0, #0
 8012fd8:	d1cf      	bne.n	8012f7a <rcl_init+0x132>
 8012fda:	f8d9 3000 	ldr.w	r3, [r9]
 8012fde:	695c      	ldr	r4, [r3, #20]
 8012fe0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8012fe2:	aa18      	add	r2, sp, #96	; 0x60
 8012fe4:	a917      	add	r1, sp, #92	; 0x5c
 8012fe6:	f000 fe9f 	bl	8013d28 <rcl_validate_enclave_name>
 8012fea:	4606      	mov	r6, r0
 8012fec:	2800      	cmp	r0, #0
 8012fee:	d1c4      	bne.n	8012f7a <rcl_init+0x132>
 8012ff0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012ff2:	bb03      	cbnz	r3, 8013036 <rcl_init+0x1ee>
 8012ff4:	f8d9 1000 	ldr.w	r1, [r9]
 8012ff8:	694b      	ldr	r3, [r1, #20]
 8012ffa:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8012ffc:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8013000:	f000 fbf2 	bl	80137e8 <rcl_get_security_options_from_environment>
 8013004:	4606      	mov	r6, r0
 8013006:	2800      	cmp	r0, #0
 8013008:	d1b7      	bne.n	8012f7a <rcl_init+0x132>
 801300a:	f8d9 1000 	ldr.w	r1, [r9]
 801300e:	6948      	ldr	r0, [r1, #20]
 8013010:	3128      	adds	r1, #40	; 0x28
 8013012:	3018      	adds	r0, #24
 8013014:	f002 f9c0 	bl	8015398 <rmw_init>
 8013018:	4606      	mov	r6, r0
 801301a:	2800      	cmp	r0, #0
 801301c:	d0b8      	beq.n	8012f90 <rcl_init+0x148>
 801301e:	f7ff fd1f 	bl	8012a60 <rcl_convert_rmw_ret_to_rcl_ret>
 8013022:	4606      	mov	r6, r0
 8013024:	e7a9      	b.n	8012f7a <rcl_init+0x132>
 8013026:	2401      	movs	r4, #1
 8013028:	4618      	mov	r0, r3
 801302a:	4621      	mov	r1, r4
 801302c:	6014      	str	r4, [r2, #0]
 801302e:	4623      	mov	r3, r4
 8013030:	e7c0      	b.n	8012fb4 <rcl_init+0x16c>
 8013032:	260a      	movs	r6, #10
 8013034:	e7ac      	b.n	8012f90 <rcl_init+0x148>
 8013036:	2601      	movs	r6, #1
 8013038:	e79f      	b.n	8012f7a <rcl_init+0x132>
 801303a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801303e:	f004 fbdb 	bl	80177f8 <rcl_get_default_domain_id>
 8013042:	4606      	mov	r6, r0
 8013044:	2800      	cmp	r0, #0
 8013046:	d198      	bne.n	8012f7a <rcl_init+0x132>
 8013048:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801304a:	3301      	adds	r3, #1
 801304c:	f8d9 3000 	ldr.w	r3, [r9]
 8013050:	bf08      	it	eq
 8013052:	6260      	streq	r0, [r4, #36]	; 0x24
 8013054:	695c      	ldr	r4, [r3, #20]
 8013056:	e7b6      	b.n	8012fc6 <rcl_init+0x17e>
 8013058:	20009c28 	.word	0x20009c28

0801305c <rcl_get_zero_initialized_init_options>:
 801305c:	2000      	movs	r0, #0
 801305e:	4770      	bx	lr

08013060 <rcl_init_options_init>:
 8013060:	b084      	sub	sp, #16
 8013062:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013064:	b091      	sub	sp, #68	; 0x44
 8013066:	af17      	add	r7, sp, #92	; 0x5c
 8013068:	e887 000e 	stmia.w	r7, {r1, r2, r3}
 801306c:	2800      	cmp	r0, #0
 801306e:	d044      	beq.n	80130fa <rcl_init_options_init+0x9a>
 8013070:	6803      	ldr	r3, [r0, #0]
 8013072:	4606      	mov	r6, r0
 8013074:	b133      	cbz	r3, 8013084 <rcl_init_options_init+0x24>
 8013076:	2464      	movs	r4, #100	; 0x64
 8013078:	4620      	mov	r0, r4
 801307a:	b011      	add	sp, #68	; 0x44
 801307c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013080:	b004      	add	sp, #16
 8013082:	4770      	bx	lr
 8013084:	4638      	mov	r0, r7
 8013086:	f7fa fbbf 	bl	800d808 <rcutils_allocator_is_valid>
 801308a:	2800      	cmp	r0, #0
 801308c:	d035      	beq.n	80130fa <rcl_init_options_init+0x9a>
 801308e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013090:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8013092:	2050      	movs	r0, #80	; 0x50
 8013094:	4798      	blx	r3
 8013096:	4604      	mov	r4, r0
 8013098:	6030      	str	r0, [r6, #0]
 801309a:	2800      	cmp	r0, #0
 801309c:	d02f      	beq.n	80130fe <rcl_init_options_init+0x9e>
 801309e:	46bc      	mov	ip, r7
 80130a0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80130a4:	4625      	mov	r5, r4
 80130a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80130a8:	f8dc 3000 	ldr.w	r3, [ip]
 80130ac:	602b      	str	r3, [r5, #0]
 80130ae:	a802      	add	r0, sp, #8
 80130b0:	ad02      	add	r5, sp, #8
 80130b2:	f001 ff4b 	bl	8014f4c <rmw_get_zero_initialized_init_options>
 80130b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80130b8:	3418      	adds	r4, #24
 80130ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80130bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80130be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80130c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80130c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80130c4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80130c8:	6833      	ldr	r3, [r6, #0]
 80130ca:	e884 0003 	stmia.w	r4, {r0, r1}
 80130ce:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 80130d2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80130d6:	f103 0018 	add.w	r0, r3, #24
 80130da:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80130de:	f002 f881 	bl	80151e4 <rmw_init_options_init>
 80130e2:	4604      	mov	r4, r0
 80130e4:	2800      	cmp	r0, #0
 80130e6:	d0c7      	beq.n	8013078 <rcl_init_options_init+0x18>
 80130e8:	6830      	ldr	r0, [r6, #0]
 80130ea:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80130ec:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80130ee:	4798      	blx	r3
 80130f0:	4620      	mov	r0, r4
 80130f2:	f7ff fcb5 	bl	8012a60 <rcl_convert_rmw_ret_to_rcl_ret>
 80130f6:	4604      	mov	r4, r0
 80130f8:	e7be      	b.n	8013078 <rcl_init_options_init+0x18>
 80130fa:	240b      	movs	r4, #11
 80130fc:	e7bc      	b.n	8013078 <rcl_init_options_init+0x18>
 80130fe:	240a      	movs	r4, #10
 8013100:	e7ba      	b.n	8013078 <rcl_init_options_init+0x18>
 8013102:	bf00      	nop

08013104 <rcl_init_options_fini>:
 8013104:	b570      	push	{r4, r5, r6, lr}
 8013106:	b086      	sub	sp, #24
 8013108:	b1c0      	cbz	r0, 801313c <rcl_init_options_fini+0x38>
 801310a:	6804      	ldr	r4, [r0, #0]
 801310c:	4606      	mov	r6, r0
 801310e:	b1ac      	cbz	r4, 801313c <rcl_init_options_fini+0x38>
 8013110:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013112:	ad01      	add	r5, sp, #4
 8013114:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013116:	6823      	ldr	r3, [r4, #0]
 8013118:	602b      	str	r3, [r5, #0]
 801311a:	a801      	add	r0, sp, #4
 801311c:	f7fa fb74 	bl	800d808 <rcutils_allocator_is_valid>
 8013120:	b160      	cbz	r0, 801313c <rcl_init_options_fini+0x38>
 8013122:	6830      	ldr	r0, [r6, #0]
 8013124:	3018      	adds	r0, #24
 8013126:	f002 f8f7 	bl	8015318 <rmw_init_options_fini>
 801312a:	4604      	mov	r4, r0
 801312c:	b950      	cbnz	r0, 8013144 <rcl_init_options_fini+0x40>
 801312e:	6830      	ldr	r0, [r6, #0]
 8013130:	9b02      	ldr	r3, [sp, #8]
 8013132:	9905      	ldr	r1, [sp, #20]
 8013134:	4798      	blx	r3
 8013136:	4620      	mov	r0, r4
 8013138:	b006      	add	sp, #24
 801313a:	bd70      	pop	{r4, r5, r6, pc}
 801313c:	240b      	movs	r4, #11
 801313e:	4620      	mov	r0, r4
 8013140:	b006      	add	sp, #24
 8013142:	bd70      	pop	{r4, r5, r6, pc}
 8013144:	f7ff fc8c 	bl	8012a60 <rcl_convert_rmw_ret_to_rcl_ret>
 8013148:	4604      	mov	r4, r0
 801314a:	e7f8      	b.n	801313e <rcl_init_options_fini+0x3a>

0801314c <rcl_init_options_copy>:
 801314c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013150:	b096      	sub	sp, #88	; 0x58
 8013152:	2800      	cmp	r0, #0
 8013154:	d063      	beq.n	801321e <rcl_init_options_copy+0xd2>
 8013156:	6806      	ldr	r6, [r0, #0]
 8013158:	4605      	mov	r5, r0
 801315a:	2e00      	cmp	r6, #0
 801315c:	d05f      	beq.n	801321e <rcl_init_options_copy+0xd2>
 801315e:	460c      	mov	r4, r1
 8013160:	2900      	cmp	r1, #0
 8013162:	d05c      	beq.n	801321e <rcl_init_options_copy+0xd2>
 8013164:	680b      	ldr	r3, [r1, #0]
 8013166:	b123      	cbz	r3, 8013172 <rcl_init_options_copy+0x26>
 8013168:	2664      	movs	r6, #100	; 0x64
 801316a:	4630      	mov	r0, r6
 801316c:	b016      	add	sp, #88	; 0x58
 801316e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013172:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013174:	af11      	add	r7, sp, #68	; 0x44
 8013176:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013178:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 801317c:	6833      	ldr	r3, [r6, #0]
 801317e:	603b      	str	r3, [r7, #0]
 8013180:	4640      	mov	r0, r8
 8013182:	f7fa fb41 	bl	800d808 <rcutils_allocator_is_valid>
 8013186:	2800      	cmp	r0, #0
 8013188:	d049      	beq.n	801321e <rcl_init_options_copy+0xd2>
 801318a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801318c:	9915      	ldr	r1, [sp, #84]	; 0x54
 801318e:	2050      	movs	r0, #80	; 0x50
 8013190:	4798      	blx	r3
 8013192:	4606      	mov	r6, r0
 8013194:	6020      	str	r0, [r4, #0]
 8013196:	2800      	cmp	r0, #0
 8013198:	d077      	beq.n	801328a <rcl_init_options_copy+0x13e>
 801319a:	46c4      	mov	ip, r8
 801319c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80131a0:	4637      	mov	r7, r6
 80131a2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80131a4:	f8dc 3000 	ldr.w	r3, [ip]
 80131a8:	603b      	str	r3, [r7, #0]
 80131aa:	a802      	add	r0, sp, #8
 80131ac:	af02      	add	r7, sp, #8
 80131ae:	f001 fecd 	bl	8014f4c <rmw_get_zero_initialized_init_options>
 80131b2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80131b4:	3618      	adds	r6, #24
 80131b6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80131b8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80131ba:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80131bc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80131be:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80131c0:	e897 0003 	ldmia.w	r7, {r0, r1}
 80131c4:	ab16      	add	r3, sp, #88	; 0x58
 80131c6:	e886 0003 	stmia.w	r6, {r0, r1}
 80131ca:	e913 0003 	ldmdb	r3, {r0, r1}
 80131ce:	6823      	ldr	r3, [r4, #0]
 80131d0:	e88d 0003 	stmia.w	sp, {r0, r1}
 80131d4:	f103 0018 	add.w	r0, r3, #24
 80131d8:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80131dc:	f002 f802 	bl	80151e4 <rmw_init_options_init>
 80131e0:	4606      	mov	r6, r0
 80131e2:	bb08      	cbnz	r0, 8013228 <rcl_init_options_copy+0xdc>
 80131e4:	682f      	ldr	r7, [r5, #0]
 80131e6:	f8d4 c000 	ldr.w	ip, [r4]
 80131ea:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80131ec:	4666      	mov	r6, ip
 80131ee:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80131f0:	683b      	ldr	r3, [r7, #0]
 80131f2:	6033      	str	r3, [r6, #0]
 80131f4:	f10c 0018 	add.w	r0, ip, #24
 80131f8:	f002 f88e 	bl	8015318 <rmw_init_options_fini>
 80131fc:	4607      	mov	r7, r0
 80131fe:	b1f0      	cbz	r0, 801323e <rcl_init_options_copy+0xf2>
 8013200:	f7fa fb10 	bl	800d824 <rcutils_get_error_string>
 8013204:	f7fa fb24 	bl	800d850 <rcutils_reset_error>
 8013208:	4620      	mov	r0, r4
 801320a:	f7ff ff7b 	bl	8013104 <rcl_init_options_fini>
 801320e:	4606      	mov	r6, r0
 8013210:	2800      	cmp	r0, #0
 8013212:	d1aa      	bne.n	801316a <rcl_init_options_copy+0x1e>
 8013214:	4638      	mov	r0, r7
 8013216:	f7ff fc23 	bl	8012a60 <rcl_convert_rmw_ret_to_rcl_ret>
 801321a:	4606      	mov	r6, r0
 801321c:	e7a5      	b.n	801316a <rcl_init_options_copy+0x1e>
 801321e:	260b      	movs	r6, #11
 8013220:	4630      	mov	r0, r6
 8013222:	b016      	add	sp, #88	; 0x58
 8013224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013228:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801322a:	9915      	ldr	r1, [sp, #84]	; 0x54
 801322c:	6820      	ldr	r0, [r4, #0]
 801322e:	4798      	blx	r3
 8013230:	4630      	mov	r0, r6
 8013232:	f7ff fc15 	bl	8012a60 <rcl_convert_rmw_ret_to_rcl_ret>
 8013236:	4606      	mov	r6, r0
 8013238:	2800      	cmp	r0, #0
 801323a:	d0d3      	beq.n	80131e4 <rcl_init_options_copy+0x98>
 801323c:	e795      	b.n	801316a <rcl_init_options_copy+0x1e>
 801323e:	a802      	add	r0, sp, #8
 8013240:	ae02      	add	r6, sp, #8
 8013242:	6827      	ldr	r7, [r4, #0]
 8013244:	f001 fe82 	bl	8014f4c <rmw_get_zero_initialized_init_options>
 8013248:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801324a:	3718      	adds	r7, #24
 801324c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801324e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013250:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013252:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013254:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013256:	e896 0003 	ldmia.w	r6, {r0, r1}
 801325a:	682a      	ldr	r2, [r5, #0]
 801325c:	6823      	ldr	r3, [r4, #0]
 801325e:	e887 0003 	stmia.w	r7, {r0, r1}
 8013262:	f102 0018 	add.w	r0, r2, #24
 8013266:	f103 0118 	add.w	r1, r3, #24
 801326a:	f002 f813 	bl	8015294 <rmw_init_options_copy>
 801326e:	4606      	mov	r6, r0
 8013270:	2800      	cmp	r0, #0
 8013272:	f43f af7a 	beq.w	801316a <rcl_init_options_copy+0x1e>
 8013276:	f7fa fad5 	bl	800d824 <rcutils_get_error_string>
 801327a:	f7fa fae9 	bl	800d850 <rcutils_reset_error>
 801327e:	4620      	mov	r0, r4
 8013280:	f7ff ff40 	bl	8013104 <rcl_init_options_fini>
 8013284:	b118      	cbz	r0, 801328e <rcl_init_options_copy+0x142>
 8013286:	4606      	mov	r6, r0
 8013288:	e76f      	b.n	801316a <rcl_init_options_copy+0x1e>
 801328a:	260a      	movs	r6, #10
 801328c:	e76d      	b.n	801316a <rcl_init_options_copy+0x1e>
 801328e:	4630      	mov	r0, r6
 8013290:	f7ff fbe6 	bl	8012a60 <rcl_convert_rmw_ret_to_rcl_ret>
 8013294:	4606      	mov	r6, r0
 8013296:	e768      	b.n	801316a <rcl_init_options_copy+0x1e>

08013298 <rcl_get_localhost_only>:
 8013298:	b510      	push	{r4, lr}
 801329a:	b082      	sub	sp, #8
 801329c:	2300      	movs	r3, #0
 801329e:	9301      	str	r3, [sp, #4]
 80132a0:	b1b8      	cbz	r0, 80132d2 <rcl_get_localhost_only+0x3a>
 80132a2:	4604      	mov	r4, r0
 80132a4:	a901      	add	r1, sp, #4
 80132a6:	480c      	ldr	r0, [pc, #48]	; (80132d8 <rcl_get_localhost_only+0x40>)
 80132a8:	f001 fd1a 	bl	8014ce0 <rcutils_get_env>
 80132ac:	b110      	cbz	r0, 80132b4 <rcl_get_localhost_only+0x1c>
 80132ae:	2001      	movs	r0, #1
 80132b0:	b002      	add	sp, #8
 80132b2:	bd10      	pop	{r4, pc}
 80132b4:	9b01      	ldr	r3, [sp, #4]
 80132b6:	b113      	cbz	r3, 80132be <rcl_get_localhost_only+0x26>
 80132b8:	781a      	ldrb	r2, [r3, #0]
 80132ba:	2a31      	cmp	r2, #49	; 0x31
 80132bc:	d004      	beq.n	80132c8 <rcl_get_localhost_only+0x30>
 80132be:	2302      	movs	r3, #2
 80132c0:	2000      	movs	r0, #0
 80132c2:	7023      	strb	r3, [r4, #0]
 80132c4:	b002      	add	sp, #8
 80132c6:	bd10      	pop	{r4, pc}
 80132c8:	785b      	ldrb	r3, [r3, #1]
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d1f7      	bne.n	80132be <rcl_get_localhost_only+0x26>
 80132ce:	2301      	movs	r3, #1
 80132d0:	e7f6      	b.n	80132c0 <rcl_get_localhost_only+0x28>
 80132d2:	200b      	movs	r0, #11
 80132d4:	b002      	add	sp, #8
 80132d6:	bd10      	pop	{r4, pc}
 80132d8:	08019b48 	.word	0x08019b48

080132dc <rcl_get_zero_initialized_node>:
 80132dc:	4a03      	ldr	r2, [pc, #12]	; (80132ec <rcl_get_zero_initialized_node+0x10>)
 80132de:	4603      	mov	r3, r0
 80132e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80132e4:	e883 0003 	stmia.w	r3, {r0, r1}
 80132e8:	4618      	mov	r0, r3
 80132ea:	4770      	bx	lr
 80132ec:	08019b68 	.word	0x08019b68

080132f0 <rcl_node_init>:
 80132f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132f4:	b09b      	sub	sp, #108	; 0x6c
 80132f6:	4604      	mov	r4, r0
 80132f8:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
 80132fc:	f04f 0c00 	mov.w	ip, #0
 8013300:	a815      	add	r0, sp, #84	; 0x54
 8013302:	460e      	mov	r6, r1
 8013304:	4615      	mov	r5, r2
 8013306:	461f      	mov	r7, r3
 8013308:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
 801330c:	f004 fb30 	bl	8017970 <rcl_guard_condition_get_default_options>
 8013310:	f1b8 0f00 	cmp.w	r8, #0
 8013314:	f000 80fd 	beq.w	8013512 <rcl_node_init+0x222>
 8013318:	f108 0b04 	add.w	fp, r8, #4
 801331c:	4658      	mov	r0, fp
 801331e:	f7fa fa73 	bl	800d808 <rcutils_allocator_is_valid>
 8013322:	2800      	cmp	r0, #0
 8013324:	f000 80f5 	beq.w	8013512 <rcl_node_init+0x222>
 8013328:	2e00      	cmp	r6, #0
 801332a:	f000 80f2 	beq.w	8013512 <rcl_node_init+0x222>
 801332e:	2d00      	cmp	r5, #0
 8013330:	f000 80ef 	beq.w	8013512 <rcl_node_init+0x222>
 8013334:	2c00      	cmp	r4, #0
 8013336:	f000 80ec 	beq.w	8013512 <rcl_node_init+0x222>
 801333a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801333e:	f1b9 0f00 	cmp.w	r9, #0
 8013342:	f040 8112 	bne.w	801356a <rcl_node_init+0x27a>
 8013346:	2f00      	cmp	r7, #0
 8013348:	f000 80e3 	beq.w	8013512 <rcl_node_init+0x222>
 801334c:	4638      	mov	r0, r7
 801334e:	f7ff fba5 	bl	8012a9c <rcl_context_is_valid>
 8013352:	4682      	mov	sl, r0
 8013354:	2800      	cmp	r0, #0
 8013356:	f000 80e2 	beq.w	801351e <rcl_node_init+0x22e>
 801335a:	464a      	mov	r2, r9
 801335c:	a914      	add	r1, sp, #80	; 0x50
 801335e:	4630      	mov	r0, r6
 8013360:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 8013364:	f001 fe72 	bl	801504c <rmw_validate_node_name>
 8013368:	4681      	mov	r9, r0
 801336a:	2800      	cmp	r0, #0
 801336c:	f040 80d3 	bne.w	8013516 <rcl_node_init+0x226>
 8013370:	9814      	ldr	r0, [sp, #80]	; 0x50
 8013372:	2800      	cmp	r0, #0
 8013374:	f040 8105 	bne.w	8013582 <rcl_node_init+0x292>
 8013378:	4628      	mov	r0, r5
 801337a:	f7ec ff3b 	bl	80001f4 <strlen>
 801337e:	2800      	cmp	r0, #0
 8013380:	f040 80d0 	bne.w	8013524 <rcl_node_init+0x234>
 8013384:	4d8e      	ldr	r5, [pc, #568]	; (80135c0 <rcl_node_init+0x2d0>)
 8013386:	a914      	add	r1, sp, #80	; 0x50
 8013388:	2200      	movs	r2, #0
 801338a:	4628      	mov	r0, r5
 801338c:	f001 fe40 	bl	8015010 <rmw_validate_namespace>
 8013390:	4681      	mov	r9, r0
 8013392:	2800      	cmp	r0, #0
 8013394:	f040 80bf 	bne.w	8013516 <rcl_node_init+0x226>
 8013398:	4682      	mov	sl, r0
 801339a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801339c:	2b00      	cmp	r3, #0
 801339e:	f040 80f5 	bne.w	801358c <rcl_node_init+0x29c>
 80133a2:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80133a6:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80133aa:	9307      	str	r3, [sp, #28]
 80133ac:	2030      	movs	r0, #48	; 0x30
 80133ae:	4790      	blx	r2
 80133b0:	4681      	mov	r9, r0
 80133b2:	6060      	str	r0, [r4, #4]
 80133b4:	2800      	cmp	r0, #0
 80133b6:	f000 80de 	beq.w	8013576 <rcl_node_init+0x286>
 80133ba:	9b07      	ldr	r3, [sp, #28]
 80133bc:	e9c0 3308 	strd	r3, r3, [r0, #32]
 80133c0:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 80133c4:	a80a      	add	r0, sp, #40	; 0x28
 80133c6:	f000 f92b 	bl	8013620 <rcl_node_get_default_options>
 80133ca:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80133ce:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80133d2:	46cc      	mov	ip, r9
 80133d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80133d8:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80133dc:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80133e0:	6861      	ldr	r1, [r4, #4]
 80133e2:	6027      	str	r7, [r4, #0]
 80133e4:	4640      	mov	r0, r8
 80133e6:	f000 f937 	bl	8013658 <rcl_node_options_copy>
 80133ea:	2800      	cmp	r0, #0
 80133ec:	d167      	bne.n	80134be <rcl_node_init+0x1ce>
 80133ee:	4628      	mov	r0, r5
 80133f0:	f7ec ff00 	bl	80001f4 <strlen>
 80133f4:	4428      	add	r0, r5
 80133f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80133fa:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80133fe:	2b2f      	cmp	r3, #47	; 0x2f
 8013400:	bf08      	it	eq
 8013402:	4970      	ldreq	r1, [pc, #448]	; (80135c4 <rcl_node_init+0x2d4>)
 8013404:	f8db 3010 	ldr.w	r3, [fp, #16]
 8013408:	bf18      	it	ne
 801340a:	496f      	ldrne	r1, [pc, #444]	; (80135c8 <rcl_node_init+0x2d8>)
 801340c:	9604      	str	r6, [sp, #16]
 801340e:	e9cd 1502 	strd	r1, r5, [sp, #8]
 8013412:	e9cd 3200 	strd	r3, r2, [sp]
 8013416:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 801341a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801341e:	f001 fc25 	bl	8014c6c <rcutils_format_string_limit>
 8013422:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
 8013426:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801342a:	f8d9 3000 	ldr.w	r3, [r9]
 801342e:	9313      	str	r3, [sp, #76]	; 0x4c
 8013430:	1c59      	adds	r1, r3, #1
 8013432:	f000 80b7 	beq.w	80135a4 <rcl_node_init+0x2b4>
 8013436:	683a      	ldr	r2, [r7, #0]
 8013438:	f8c9 301c 	str.w	r3, [r9, #28]
 801343c:	6952      	ldr	r2, [r2, #20]
 801343e:	6821      	ldr	r1, [r4, #0]
 8013440:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8013444:	6808      	ldr	r0, [r1, #0]
 8013446:	f1a2 0201 	sub.w	r2, r2, #1
 801344a:	fab2 f282 	clz	r2, r2
 801344e:	0952      	lsrs	r2, r2, #5
 8013450:	9200      	str	r2, [sp, #0]
 8013452:	4631      	mov	r1, r6
 8013454:	3028      	adds	r0, #40	; 0x28
 8013456:	462a      	mov	r2, r5
 8013458:	f002 fa06 	bl	8015868 <rmw_create_node>
 801345c:	6863      	ldr	r3, [r4, #4]
 801345e:	f8c9 0020 	str.w	r0, [r9, #32]
 8013462:	6a18      	ldr	r0, [r3, #32]
 8013464:	b368      	cbz	r0, 80134c2 <rcl_node_init+0x1d2>
 8013466:	f002 fa91 	bl	801598c <rmw_node_get_graph_guard_condition>
 801346a:	4681      	mov	r9, r0
 801346c:	b338      	cbz	r0, 80134be <rcl_node_init+0x1ce>
 801346e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013472:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013476:	6866      	ldr	r6, [r4, #4]
 8013478:	2008      	movs	r0, #8
 801347a:	4798      	blx	r3
 801347c:	6863      	ldr	r3, [r4, #4]
 801347e:	6270      	str	r0, [r6, #36]	; 0x24
 8013480:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8013482:	b1f6      	cbz	r6, 80134c2 <rcl_node_init+0x1d2>
 8013484:	a808      	add	r0, sp, #32
 8013486:	f004 f9eb 	bl	8017860 <rcl_get_zero_initialized_guard_condition>
 801348a:	a808      	add	r0, sp, #32
 801348c:	c803      	ldmia	r0, {r0, r1}
 801348e:	e886 0003 	stmia.w	r6, {r0, r1}
 8013492:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8013496:	ae15      	add	r6, sp, #84	; 0x54
 8013498:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801349a:	f8db 3000 	ldr.w	r3, [fp]
 801349e:	6033      	str	r3, [r6, #0]
 80134a0:	ab1a      	add	r3, sp, #104	; 0x68
 80134a2:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 80134a6:	6866      	ldr	r6, [r4, #4]
 80134a8:	6a76      	ldr	r6, [r6, #36]	; 0x24
 80134aa:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80134ae:	4649      	mov	r1, r9
 80134b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80134b2:	4630      	mov	r0, r6
 80134b4:	463a      	mov	r2, r7
 80134b6:	f004 f9dd 	bl	8017874 <rcl_guard_condition_init_from_rmw>
 80134ba:	4681      	mov	r9, r0
 80134bc:	b328      	cbz	r0, 801350a <rcl_node_init+0x21a>
 80134be:	6863      	ldr	r3, [r4, #4]
 80134c0:	b1f3      	cbz	r3, 8013500 <rcl_node_init+0x210>
 80134c2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80134c4:	b128      	cbz	r0, 80134d2 <rcl_node_init+0x1e2>
 80134c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80134ca:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80134ce:	4798      	blx	r3
 80134d0:	6863      	ldr	r3, [r4, #4]
 80134d2:	6a18      	ldr	r0, [r3, #32]
 80134d4:	b110      	cbz	r0, 80134dc <rcl_node_init+0x1ec>
 80134d6:	f002 f9df 	bl	8015898 <rmw_destroy_node>
 80134da:	6863      	ldr	r3, [r4, #4]
 80134dc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80134de:	b148      	cbz	r0, 80134f4 <rcl_node_init+0x204>
 80134e0:	f004 fa20 	bl	8017924 <rcl_guard_condition_fini>
 80134e4:	6862      	ldr	r2, [r4, #4]
 80134e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80134ea:	6a50      	ldr	r0, [r2, #36]	; 0x24
 80134ec:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80134f0:	4798      	blx	r3
 80134f2:	6863      	ldr	r3, [r4, #4]
 80134f4:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80134f8:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80134fc:	4618      	mov	r0, r3
 80134fe:	4790      	blx	r2
 8013500:	2300      	movs	r3, #0
 8013502:	e9c4 3300 	strd	r3, r3, [r4]
 8013506:	f04f 0901 	mov.w	r9, #1
 801350a:	f1ba 0f00 	cmp.w	sl, #0
 801350e:	d125      	bne.n	801355c <rcl_node_init+0x26c>
 8013510:	e001      	b.n	8013516 <rcl_node_init+0x226>
 8013512:	f04f 090b 	mov.w	r9, #11
 8013516:	4648      	mov	r0, r9
 8013518:	b01b      	add	sp, #108	; 0x6c
 801351a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801351e:	f04f 0965 	mov.w	r9, #101	; 0x65
 8013522:	e7f8      	b.n	8013516 <rcl_node_init+0x226>
 8013524:	782b      	ldrb	r3, [r5, #0]
 8013526:	2b2f      	cmp	r3, #47	; 0x2f
 8013528:	f43f af2d 	beq.w	8013386 <rcl_node_init+0x96>
 801352c:	4927      	ldr	r1, [pc, #156]	; (80135cc <rcl_node_init+0x2dc>)
 801352e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8013532:	9300      	str	r3, [sp, #0]
 8013534:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013538:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801353c:	9503      	str	r5, [sp, #12]
 801353e:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8013542:	f001 fb93 	bl	8014c6c <rcutils_format_string_limit>
 8013546:	4605      	mov	r5, r0
 8013548:	b348      	cbz	r0, 801359e <rcl_node_init+0x2ae>
 801354a:	2200      	movs	r2, #0
 801354c:	a914      	add	r1, sp, #80	; 0x50
 801354e:	9214      	str	r2, [sp, #80]	; 0x50
 8013550:	f001 fd5e 	bl	8015010 <rmw_validate_namespace>
 8013554:	4681      	mov	r9, r0
 8013556:	2800      	cmp	r0, #0
 8013558:	f43f af1f 	beq.w	801339a <rcl_node_init+0xaa>
 801355c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013560:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013564:	4628      	mov	r0, r5
 8013566:	4798      	blx	r3
 8013568:	e7d5      	b.n	8013516 <rcl_node_init+0x226>
 801356a:	f04f 0964 	mov.w	r9, #100	; 0x64
 801356e:	4648      	mov	r0, r9
 8013570:	b01b      	add	sp, #108	; 0x6c
 8013572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013576:	f04f 090a 	mov.w	r9, #10
 801357a:	f1ba 0f00 	cmp.w	sl, #0
 801357e:	d1ed      	bne.n	801355c <rcl_node_init+0x26c>
 8013580:	e7c9      	b.n	8013516 <rcl_node_init+0x226>
 8013582:	f001 fdb5 	bl	80150f0 <rmw_node_name_validation_result_string>
 8013586:	f04f 09c9 	mov.w	r9, #201	; 0xc9
 801358a:	e7c4      	b.n	8013516 <rcl_node_init+0x226>
 801358c:	4618      	mov	r0, r3
 801358e:	f001 fd51 	bl	8015034 <rmw_namespace_validation_result_string>
 8013592:	f04f 09ca 	mov.w	r9, #202	; 0xca
 8013596:	f1ba 0f00 	cmp.w	sl, #0
 801359a:	d1df      	bne.n	801355c <rcl_node_init+0x26c>
 801359c:	e7bb      	b.n	8013516 <rcl_node_init+0x226>
 801359e:	f04f 090a 	mov.w	r9, #10
 80135a2:	e7b8      	b.n	8013516 <rcl_node_init+0x226>
 80135a4:	a813      	add	r0, sp, #76	; 0x4c
 80135a6:	f004 f927 	bl	80177f8 <rcl_get_default_domain_id>
 80135aa:	2800      	cmp	r0, #0
 80135ac:	d187      	bne.n	80134be <rcl_node_init+0x1ce>
 80135ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80135b0:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80135b4:	1c5a      	adds	r2, r3, #1
 80135b6:	bf04      	itt	eq
 80135b8:	9013      	streq	r0, [sp, #76]	; 0x4c
 80135ba:	4603      	moveq	r3, r0
 80135bc:	e73b      	b.n	8013436 <rcl_node_init+0x146>
 80135be:	bf00      	nop
 80135c0:	08019b60 	.word	0x08019b60
 80135c4:	08019af0 	.word	0x08019af0
 80135c8:	08019b24 	.word	0x08019b24
 80135cc:	08019b64 	.word	0x08019b64

080135d0 <rcl_node_is_valid>:
 80135d0:	b130      	cbz	r0, 80135e0 <rcl_node_is_valid+0x10>
 80135d2:	6843      	ldr	r3, [r0, #4]
 80135d4:	b123      	cbz	r3, 80135e0 <rcl_node_is_valid+0x10>
 80135d6:	6a1b      	ldr	r3, [r3, #32]
 80135d8:	b113      	cbz	r3, 80135e0 <rcl_node_is_valid+0x10>
 80135da:	6800      	ldr	r0, [r0, #0]
 80135dc:	f7ff ba5e 	b.w	8012a9c <rcl_context_is_valid>
 80135e0:	2000      	movs	r0, #0
 80135e2:	4770      	bx	lr

080135e4 <rcl_node_get_name>:
 80135e4:	b120      	cbz	r0, 80135f0 <rcl_node_get_name+0xc>
 80135e6:	6840      	ldr	r0, [r0, #4]
 80135e8:	b110      	cbz	r0, 80135f0 <rcl_node_get_name+0xc>
 80135ea:	6a00      	ldr	r0, [r0, #32]
 80135ec:	b100      	cbz	r0, 80135f0 <rcl_node_get_name+0xc>
 80135ee:	6880      	ldr	r0, [r0, #8]
 80135f0:	4770      	bx	lr
 80135f2:	bf00      	nop

080135f4 <rcl_node_get_namespace>:
 80135f4:	b120      	cbz	r0, 8013600 <rcl_node_get_namespace+0xc>
 80135f6:	6840      	ldr	r0, [r0, #4]
 80135f8:	b110      	cbz	r0, 8013600 <rcl_node_get_namespace+0xc>
 80135fa:	6a00      	ldr	r0, [r0, #32]
 80135fc:	b100      	cbz	r0, 8013600 <rcl_node_get_namespace+0xc>
 80135fe:	68c0      	ldr	r0, [r0, #12]
 8013600:	4770      	bx	lr
 8013602:	bf00      	nop

08013604 <rcl_node_get_options>:
 8013604:	b128      	cbz	r0, 8013612 <rcl_node_get_options+0xe>
 8013606:	6840      	ldr	r0, [r0, #4]
 8013608:	b118      	cbz	r0, 8013612 <rcl_node_get_options+0xe>
 801360a:	6a03      	ldr	r3, [r0, #32]
 801360c:	2b00      	cmp	r3, #0
 801360e:	bf08      	it	eq
 8013610:	2000      	moveq	r0, #0
 8013612:	4770      	bx	lr

08013614 <rcl_node_get_rmw_handle>:
 8013614:	b110      	cbz	r0, 801361c <rcl_node_get_rmw_handle+0x8>
 8013616:	6840      	ldr	r0, [r0, #4]
 8013618:	b100      	cbz	r0, 801361c <rcl_node_get_rmw_handle+0x8>
 801361a:	6a00      	ldr	r0, [r0, #32]
 801361c:	4770      	bx	lr
 801361e:	bf00      	nop

08013620 <rcl_node_get_default_options>:
 8013620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013622:	b087      	sub	sp, #28
 8013624:	4607      	mov	r7, r0
 8013626:	466d      	mov	r5, sp
 8013628:	4668      	mov	r0, sp
 801362a:	f7fa f8df 	bl	800d7ec <rcutils_get_default_allocator>
 801362e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013630:	4c08      	ldr	r4, [pc, #32]	; (8013654 <rcl_node_get_default_options+0x34>)
 8013632:	f8d5 c000 	ldr.w	ip, [r5]
 8013636:	1d26      	adds	r6, r4, #4
 8013638:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801363a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801363c:	463d      	mov	r5, r7
 801363e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013640:	f8c6 c000 	str.w	ip, [r6]
 8013644:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8013648:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 801364c:	4638      	mov	r0, r7
 801364e:	b007      	add	sp, #28
 8013650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013652:	bf00      	nop
 8013654:	20000058 	.word	0x20000058

08013658 <rcl_node_options_copy>:
 8013658:	b1c8      	cbz	r0, 801368e <rcl_node_options_copy+0x36>
 801365a:	b4f0      	push	{r4, r5, r6, r7}
 801365c:	460f      	mov	r7, r1
 801365e:	b199      	cbz	r1, 8013688 <rcl_node_options_copy+0x30>
 8013660:	4288      	cmp	r0, r1
 8013662:	4606      	mov	r6, r0
 8013664:	d010      	beq.n	8013688 <rcl_node_options_copy+0x30>
 8013666:	4605      	mov	r5, r0
 8013668:	460c      	mov	r4, r1
 801366a:	f855 3b04 	ldr.w	r3, [r5], #4
 801366e:	f844 3b04 	str.w	r3, [r4], #4
 8013672:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013674:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013676:	7e32      	ldrb	r2, [r6, #24]
 8013678:	6829      	ldr	r1, [r5, #0]
 801367a:	7e73      	ldrb	r3, [r6, #25]
 801367c:	6021      	str	r1, [r4, #0]
 801367e:	2000      	movs	r0, #0
 8013680:	763a      	strb	r2, [r7, #24]
 8013682:	767b      	strb	r3, [r7, #25]
 8013684:	bcf0      	pop	{r4, r5, r6, r7}
 8013686:	4770      	bx	lr
 8013688:	200b      	movs	r0, #11
 801368a:	bcf0      	pop	{r4, r5, r6, r7}
 801368c:	4770      	bx	lr
 801368e:	200b      	movs	r0, #11
 8013690:	4770      	bx	lr
 8013692:	bf00      	nop

08013694 <exact_match_lookup>:
 8013694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013696:	f102 0708 	add.w	r7, r2, #8
 801369a:	460b      	mov	r3, r1
 801369c:	4614      	mov	r4, r2
 801369e:	4606      	mov	r6, r0
 80136a0:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80136a4:	b085      	sub	sp, #20
 80136a6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80136aa:	4618      	mov	r0, r3
 80136ac:	4918      	ldr	r1, [pc, #96]	; (8013710 <exact_match_lookup+0x7c>)
 80136ae:	e894 000c 	ldmia.w	r4, {r2, r3}
 80136b2:	f001 facd 	bl	8014c50 <rcutils_join_path>
 80136b6:	7833      	ldrb	r3, [r6, #0]
 80136b8:	2b2f      	cmp	r3, #47	; 0x2f
 80136ba:	4605      	mov	r5, r0
 80136bc:	d021      	beq.n	8013702 <exact_match_lookup+0x6e>
 80136be:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 80136c2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80136c6:	1c70      	adds	r0, r6, #1
 80136c8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80136cc:	f001 fac6 	bl	8014c5c <rcutils_to_native_path>
 80136d0:	4606      	mov	r6, r0
 80136d2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80136d6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80136da:	4631      	mov	r1, r6
 80136dc:	e894 000c 	ldmia.w	r4, {r2, r3}
 80136e0:	4628      	mov	r0, r5
 80136e2:	f001 fab5 	bl	8014c50 <rcutils_join_path>
 80136e6:	6862      	ldr	r2, [r4, #4]
 80136e8:	6921      	ldr	r1, [r4, #16]
 80136ea:	4603      	mov	r3, r0
 80136ec:	4630      	mov	r0, r6
 80136ee:	461e      	mov	r6, r3
 80136f0:	4790      	blx	r2
 80136f2:	4628      	mov	r0, r5
 80136f4:	6863      	ldr	r3, [r4, #4]
 80136f6:	6921      	ldr	r1, [r4, #16]
 80136f8:	4798      	blx	r3
 80136fa:	4635      	mov	r5, r6
 80136fc:	4628      	mov	r0, r5
 80136fe:	b005      	add	sp, #20
 8013700:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013702:	7873      	ldrb	r3, [r6, #1]
 8013704:	2b00      	cmp	r3, #0
 8013706:	d1da      	bne.n	80136be <exact_match_lookup+0x2a>
 8013708:	4628      	mov	r0, r5
 801370a:	b005      	add	sp, #20
 801370c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801370e:	bf00      	nop
 8013710:	08019bac 	.word	0x08019bac

08013714 <rcl_get_secure_root>:
 8013714:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013718:	b085      	sub	sp, #20
 801371a:	b168      	cbz	r0, 8013738 <rcl_get_secure_root+0x24>
 801371c:	4607      	mov	r7, r0
 801371e:	4608      	mov	r0, r1
 8013720:	460c      	mov	r4, r1
 8013722:	f7fa f871 	bl	800d808 <rcutils_allocator_is_valid>
 8013726:	b138      	cbz	r0, 8013738 <rcl_get_secure_root+0x24>
 8013728:	2300      	movs	r3, #0
 801372a:	482d      	ldr	r0, [pc, #180]	; (80137e0 <rcl_get_secure_root+0xcc>)
 801372c:	9303      	str	r3, [sp, #12]
 801372e:	a903      	add	r1, sp, #12
 8013730:	f001 fad6 	bl	8014ce0 <rcutils_get_env>
 8013734:	4605      	mov	r5, r0
 8013736:	b120      	cbz	r0, 8013742 <rcl_get_secure_root+0x2e>
 8013738:	2500      	movs	r5, #0
 801373a:	4628      	mov	r0, r5
 801373c:	b005      	add	sp, #20
 801373e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013742:	9b03      	ldr	r3, [sp, #12]
 8013744:	781a      	ldrb	r2, [r3, #0]
 8013746:	2a00      	cmp	r2, #0
 8013748:	d0f6      	beq.n	8013738 <rcl_get_secure_root+0x24>
 801374a:	f104 090c 	add.w	r9, r4, #12
 801374e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8013752:	e88d 0003 	stmia.w	sp, {r0, r1}
 8013756:	4618      	mov	r0, r3
 8013758:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801375c:	f001 fbb0 	bl	8014ec0 <rcutils_strdup>
 8013760:	4680      	mov	r8, r0
 8013762:	2800      	cmp	r0, #0
 8013764:	d0e8      	beq.n	8013738 <rcl_get_secure_root+0x24>
 8013766:	481f      	ldr	r0, [pc, #124]	; (80137e4 <rcl_get_secure_root+0xd0>)
 8013768:	9503      	str	r5, [sp, #12]
 801376a:	a903      	add	r1, sp, #12
 801376c:	f001 fab8 	bl	8014ce0 <rcutils_get_env>
 8013770:	b160      	cbz	r0, 801378c <rcl_get_secure_root+0x78>
 8013772:	2600      	movs	r6, #0
 8013774:	6863      	ldr	r3, [r4, #4]
 8013776:	6921      	ldr	r1, [r4, #16]
 8013778:	4630      	mov	r0, r6
 801377a:	4798      	blx	r3
 801377c:	4640      	mov	r0, r8
 801377e:	6863      	ldr	r3, [r4, #4]
 8013780:	6921      	ldr	r1, [r4, #16]
 8013782:	4798      	blx	r3
 8013784:	4628      	mov	r0, r5
 8013786:	b005      	add	sp, #20
 8013788:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801378c:	9b03      	ldr	r3, [sp, #12]
 801378e:	781e      	ldrb	r6, [r3, #0]
 8013790:	b1f6      	cbz	r6, 80137d0 <rcl_get_secure_root+0xbc>
 8013792:	e899 0003 	ldmia.w	r9, {r0, r1}
 8013796:	e88d 0003 	stmia.w	sp, {r0, r1}
 801379a:	4618      	mov	r0, r3
 801379c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80137a0:	f001 fb8e 	bl	8014ec0 <rcutils_strdup>
 80137a4:	4606      	mov	r6, r0
 80137a6:	2800      	cmp	r0, #0
 80137a8:	d0e3      	beq.n	8013772 <rcl_get_secure_root+0x5e>
 80137aa:	4622      	mov	r2, r4
 80137ac:	4641      	mov	r1, r8
 80137ae:	f7ff ff71 	bl	8013694 <exact_match_lookup>
 80137b2:	4605      	mov	r5, r0
 80137b4:	2d00      	cmp	r5, #0
 80137b6:	d0dd      	beq.n	8013774 <rcl_get_secure_root+0x60>
 80137b8:	4628      	mov	r0, r5
 80137ba:	f001 fa47 	bl	8014c4c <rcutils_is_directory>
 80137be:	4607      	mov	r7, r0
 80137c0:	2800      	cmp	r0, #0
 80137c2:	d1d7      	bne.n	8013774 <rcl_get_secure_root+0x60>
 80137c4:	4628      	mov	r0, r5
 80137c6:	6863      	ldr	r3, [r4, #4]
 80137c8:	6921      	ldr	r1, [r4, #16]
 80137ca:	4798      	blx	r3
 80137cc:	463d      	mov	r5, r7
 80137ce:	e7d1      	b.n	8013774 <rcl_get_secure_root+0x60>
 80137d0:	4638      	mov	r0, r7
 80137d2:	4622      	mov	r2, r4
 80137d4:	4641      	mov	r1, r8
 80137d6:	f7ff ff5d 	bl	8013694 <exact_match_lookup>
 80137da:	4605      	mov	r5, r0
 80137dc:	e7ea      	b.n	80137b4 <rcl_get_secure_root+0xa0>
 80137de:	bf00      	nop
 80137e0:	08019bb8 	.word	0x08019bb8
 80137e4:	08019bd0 	.word	0x08019bd0

080137e8 <rcl_get_security_options_from_environment>:
 80137e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137ec:	b082      	sub	sp, #8
 80137ee:	4607      	mov	r7, r0
 80137f0:	4688      	mov	r8, r1
 80137f2:	2400      	movs	r4, #0
 80137f4:	481d      	ldr	r0, [pc, #116]	; (801386c <rcl_get_security_options_from_environment+0x84>)
 80137f6:	9401      	str	r4, [sp, #4]
 80137f8:	a901      	add	r1, sp, #4
 80137fa:	4616      	mov	r6, r2
 80137fc:	f001 fa70 	bl	8014ce0 <rcutils_get_env>
 8013800:	b120      	cbz	r0, 801380c <rcl_get_security_options_from_environment+0x24>
 8013802:	2501      	movs	r5, #1
 8013804:	4628      	mov	r0, r5
 8013806:	b002      	add	sp, #8
 8013808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801380c:	4918      	ldr	r1, [pc, #96]	; (8013870 <rcl_get_security_options_from_environment+0x88>)
 801380e:	4604      	mov	r4, r0
 8013810:	9801      	ldr	r0, [sp, #4]
 8013812:	f7ec fce5 	bl	80001e0 <strcmp>
 8013816:	4605      	mov	r5, r0
 8013818:	b9c8      	cbnz	r0, 801384e <rcl_get_security_options_from_environment+0x66>
 801381a:	9001      	str	r0, [sp, #4]
 801381c:	b1ee      	cbz	r6, 801385a <rcl_get_security_options_from_environment+0x72>
 801381e:	4815      	ldr	r0, [pc, #84]	; (8013874 <rcl_get_security_options_from_environment+0x8c>)
 8013820:	a901      	add	r1, sp, #4
 8013822:	f001 fa5d 	bl	8014ce0 <rcutils_get_env>
 8013826:	2800      	cmp	r0, #0
 8013828:	d1eb      	bne.n	8013802 <rcl_get_security_options_from_environment+0x1a>
 801382a:	4913      	ldr	r1, [pc, #76]	; (8013878 <rcl_get_security_options_from_environment+0x90>)
 801382c:	9801      	ldr	r0, [sp, #4]
 801382e:	f7ec fcd7 	bl	80001e0 <strcmp>
 8013832:	fab0 f080 	clz	r0, r0
 8013836:	0940      	lsrs	r0, r0, #5
 8013838:	7030      	strb	r0, [r6, #0]
 801383a:	4641      	mov	r1, r8
 801383c:	4638      	mov	r0, r7
 801383e:	f7ff ff69 	bl	8013714 <rcl_get_secure_root>
 8013842:	b160      	cbz	r0, 801385e <rcl_get_security_options_from_environment+0x76>
 8013844:	6070      	str	r0, [r6, #4]
 8013846:	4628      	mov	r0, r5
 8013848:	b002      	add	sp, #8
 801384a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801384e:	4625      	mov	r5, r4
 8013850:	4628      	mov	r0, r5
 8013852:	7034      	strb	r4, [r6, #0]
 8013854:	b002      	add	sp, #8
 8013856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801385a:	250b      	movs	r5, #11
 801385c:	e7d2      	b.n	8013804 <rcl_get_security_options_from_environment+0x1c>
 801385e:	7835      	ldrb	r5, [r6, #0]
 8013860:	f1a5 0501 	sub.w	r5, r5, #1
 8013864:	fab5 f585 	clz	r5, r5
 8013868:	096d      	lsrs	r5, r5, #5
 801386a:	e7cb      	b.n	8013804 <rcl_get_security_options_from_environment+0x1c>
 801386c:	08019b70 	.word	0x08019b70
 8013870:	08019b84 	.word	0x08019b84
 8013874:	08019b8c 	.word	0x08019b8c
 8013878:	08019ba4 	.word	0x08019ba4

0801387c <rcl_service_get_rmw_handle>:
 801387c:	b110      	cbz	r0, 8013884 <rcl_service_get_rmw_handle+0x8>
 801387e:	6800      	ldr	r0, [r0, #0]
 8013880:	b100      	cbz	r0, 8013884 <rcl_service_get_rmw_handle+0x8>
 8013882:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8013884:	4770      	bx	lr
 8013886:	bf00      	nop

08013888 <rcl_take_request>:
 8013888:	b5f0      	push	{r4, r5, r6, r7, lr}
 801388a:	460e      	mov	r6, r1
 801388c:	460c      	mov	r4, r1
 801388e:	4607      	mov	r7, r0
 8013890:	4694      	mov	ip, r2
 8013892:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013894:	b08d      	sub	sp, #52	; 0x34
 8013896:	ad06      	add	r5, sp, #24
 8013898:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801389a:	e896 0003 	ldmia.w	r6, {r0, r1}
 801389e:	e885 0003 	stmia.w	r5, {r0, r1}
 80138a2:	b1e7      	cbz	r7, 80138de <rcl_take_request+0x56>
 80138a4:	683b      	ldr	r3, [r7, #0]
 80138a6:	b1d3      	cbz	r3, 80138de <rcl_take_request+0x56>
 80138a8:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80138aa:	b1c0      	cbz	r0, 80138de <rcl_take_request+0x56>
 80138ac:	4662      	mov	r2, ip
 80138ae:	b30a      	cbz	r2, 80138f4 <rcl_take_request+0x6c>
 80138b0:	2500      	movs	r5, #0
 80138b2:	f10d 0307 	add.w	r3, sp, #7
 80138b6:	a902      	add	r1, sp, #8
 80138b8:	f88d 5007 	strb.w	r5, [sp, #7]
 80138bc:	f002 f86c 	bl	8015998 <rmw_take_request>
 80138c0:	4606      	mov	r6, r0
 80138c2:	b178      	cbz	r0, 80138e4 <rcl_take_request+0x5c>
 80138c4:	280a      	cmp	r0, #10
 80138c6:	bf18      	it	ne
 80138c8:	2601      	movne	r6, #1
 80138ca:	ad06      	add	r5, sp, #24
 80138cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80138ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80138d0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80138d4:	e884 0003 	stmia.w	r4, {r0, r1}
 80138d8:	4630      	mov	r0, r6
 80138da:	b00d      	add	sp, #52	; 0x34
 80138dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80138de:	f44f 7616 	mov.w	r6, #600	; 0x258
 80138e2:	e7f2      	b.n	80138ca <rcl_take_request+0x42>
 80138e4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80138e8:	f240 2359 	movw	r3, #601	; 0x259
 80138ec:	2a00      	cmp	r2, #0
 80138ee:	bf08      	it	eq
 80138f0:	461e      	moveq	r6, r3
 80138f2:	e7ea      	b.n	80138ca <rcl_take_request+0x42>
 80138f4:	260b      	movs	r6, #11
 80138f6:	e7e8      	b.n	80138ca <rcl_take_request+0x42>

080138f8 <rcl_send_response>:
 80138f8:	b160      	cbz	r0, 8013914 <rcl_send_response+0x1c>
 80138fa:	6800      	ldr	r0, [r0, #0]
 80138fc:	b150      	cbz	r0, 8013914 <rcl_send_response+0x1c>
 80138fe:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8013900:	b140      	cbz	r0, 8013914 <rcl_send_response+0x1c>
 8013902:	b151      	cbz	r1, 801391a <rcl_send_response+0x22>
 8013904:	b510      	push	{r4, lr}
 8013906:	b152      	cbz	r2, 801391e <rcl_send_response+0x26>
 8013908:	f002 f8a4 	bl	8015a54 <rmw_send_response>
 801390c:	3800      	subs	r0, #0
 801390e:	bf18      	it	ne
 8013910:	2001      	movne	r0, #1
 8013912:	bd10      	pop	{r4, pc}
 8013914:	f44f 7016 	mov.w	r0, #600	; 0x258
 8013918:	4770      	bx	lr
 801391a:	200b      	movs	r0, #11
 801391c:	4770      	bx	lr
 801391e:	200b      	movs	r0, #11
 8013920:	bd10      	pop	{r4, pc}
 8013922:	bf00      	nop

08013924 <rcl_get_system_time>:
 8013924:	4608      	mov	r0, r1
 8013926:	f7fa b8db 	b.w	800dae0 <rcutils_system_time_now>
 801392a:	bf00      	nop

0801392c <rcl_get_steady_time>:
 801392c:	4608      	mov	r0, r1
 801392e:	f7fa b8ff 	b.w	800db30 <rcutils_steady_time_now>
 8013932:	bf00      	nop

08013934 <rcl_get_ros_time>:
 8013934:	7a03      	ldrb	r3, [r0, #8]
 8013936:	b510      	push	{r4, lr}
 8013938:	460c      	mov	r4, r1
 801393a:	b133      	cbz	r3, 801394a <rcl_get_ros_time+0x16>
 801393c:	2105      	movs	r1, #5
 801393e:	f001 f8e3 	bl	8014b08 <__atomic_load_8>
 8013942:	e9c4 0100 	strd	r0, r1, [r4]
 8013946:	2000      	movs	r0, #0
 8013948:	bd10      	pop	{r4, pc}
 801394a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801394e:	4608      	mov	r0, r1
 8013950:	f7fa b8c6 	b.w	800dae0 <rcutils_system_time_now>

08013954 <rcl_clock_init>:
 8013954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013958:	4606      	mov	r6, r0
 801395a:	4610      	mov	r0, r2
 801395c:	4614      	mov	r4, r2
 801395e:	460d      	mov	r5, r1
 8013960:	f7f9 ff52 	bl	800d808 <rcutils_allocator_is_valid>
 8013964:	b128      	cbz	r0, 8013972 <rcl_clock_init+0x1e>
 8013966:	2e03      	cmp	r6, #3
 8013968:	d803      	bhi.n	8013972 <rcl_clock_init+0x1e>
 801396a:	e8df f006 	tbb	[pc, r6]
 801396e:	2c1b      	.short	0x2c1b
 8013970:	0554      	.short	0x0554
 8013972:	200b      	movs	r0, #11
 8013974:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013978:	2d00      	cmp	r5, #0
 801397a:	d0fa      	beq.n	8013972 <rcl_clock_init+0x1e>
 801397c:	2c00      	cmp	r4, #0
 801397e:	d0f8      	beq.n	8013972 <rcl_clock_init+0x1e>
 8013980:	2600      	movs	r6, #0
 8013982:	702e      	strb	r6, [r5, #0]
 8013984:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013986:	f105 0714 	add.w	r7, r5, #20
 801398a:	e9c5 6601 	strd	r6, r6, [r5, #4]
 801398e:	612e      	str	r6, [r5, #16]
 8013990:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013992:	6823      	ldr	r3, [r4, #0]
 8013994:	603b      	str	r3, [r7, #0]
 8013996:	2303      	movs	r3, #3
 8013998:	4a2b      	ldr	r2, [pc, #172]	; (8013a48 <rcl_clock_init+0xf4>)
 801399a:	702b      	strb	r3, [r5, #0]
 801399c:	4630      	mov	r0, r6
 801399e:	60ea      	str	r2, [r5, #12]
 80139a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80139a4:	2d00      	cmp	r5, #0
 80139a6:	d0e4      	beq.n	8013972 <rcl_clock_init+0x1e>
 80139a8:	2600      	movs	r6, #0
 80139aa:	702e      	strb	r6, [r5, #0]
 80139ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80139ae:	f105 0714 	add.w	r7, r5, #20
 80139b2:	e9c5 6601 	strd	r6, r6, [r5, #4]
 80139b6:	e9c5 6603 	strd	r6, r6, [r5, #12]
 80139ba:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80139bc:	6823      	ldr	r3, [r4, #0]
 80139be:	603b      	str	r3, [r7, #0]
 80139c0:	4630      	mov	r0, r6
 80139c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80139c6:	2d00      	cmp	r5, #0
 80139c8:	d0d3      	beq.n	8013972 <rcl_clock_init+0x1e>
 80139ca:	2c00      	cmp	r4, #0
 80139cc:	d0d1      	beq.n	8013972 <rcl_clock_init+0x1e>
 80139ce:	2600      	movs	r6, #0
 80139d0:	702e      	strb	r6, [r5, #0]
 80139d2:	46a4      	mov	ip, r4
 80139d4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80139d8:	f105 0714 	add.w	r7, r5, #20
 80139dc:	e9c5 6601 	strd	r6, r6, [r5, #4]
 80139e0:	e9c5 6603 	strd	r6, r6, [r5, #12]
 80139e4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80139e6:	f8dc 3000 	ldr.w	r3, [ip]
 80139ea:	603b      	str	r3, [r7, #0]
 80139ec:	6921      	ldr	r1, [r4, #16]
 80139ee:	6823      	ldr	r3, [r4, #0]
 80139f0:	2010      	movs	r0, #16
 80139f2:	4798      	blx	r3
 80139f4:	4603      	mov	r3, r0
 80139f6:	6128      	str	r0, [r5, #16]
 80139f8:	b318      	cbz	r0, 8013a42 <rcl_clock_init+0xee>
 80139fa:	f04f 0800 	mov.w	r8, #0
 80139fe:	f04f 0900 	mov.w	r9, #0
 8013a02:	7206      	strb	r6, [r0, #8]
 8013a04:	e9c3 8900 	strd	r8, r9, [r3]
 8013a08:	2301      	movs	r3, #1
 8013a0a:	4a10      	ldr	r2, [pc, #64]	; (8013a4c <rcl_clock_init+0xf8>)
 8013a0c:	702b      	strb	r3, [r5, #0]
 8013a0e:	4630      	mov	r0, r6
 8013a10:	60ea      	str	r2, [r5, #12]
 8013a12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a16:	2d00      	cmp	r5, #0
 8013a18:	d0ab      	beq.n	8013972 <rcl_clock_init+0x1e>
 8013a1a:	2c00      	cmp	r4, #0
 8013a1c:	d0a9      	beq.n	8013972 <rcl_clock_init+0x1e>
 8013a1e:	2600      	movs	r6, #0
 8013a20:	702e      	strb	r6, [r5, #0]
 8013a22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013a24:	f105 0714 	add.w	r7, r5, #20
 8013a28:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8013a2c:	612e      	str	r6, [r5, #16]
 8013a2e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013a30:	6823      	ldr	r3, [r4, #0]
 8013a32:	603b      	str	r3, [r7, #0]
 8013a34:	2302      	movs	r3, #2
 8013a36:	4a06      	ldr	r2, [pc, #24]	; (8013a50 <rcl_clock_init+0xfc>)
 8013a38:	702b      	strb	r3, [r5, #0]
 8013a3a:	4630      	mov	r0, r6
 8013a3c:	60ea      	str	r2, [r5, #12]
 8013a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a42:	200a      	movs	r0, #10
 8013a44:	e796      	b.n	8013974 <rcl_clock_init+0x20>
 8013a46:	bf00      	nop
 8013a48:	0801392d 	.word	0x0801392d
 8013a4c:	08013935 	.word	0x08013935
 8013a50:	08013925 	.word	0x08013925

08013a54 <rcl_clock_get_now>:
 8013a54:	b140      	cbz	r0, 8013a68 <rcl_clock_get_now+0x14>
 8013a56:	b139      	cbz	r1, 8013a68 <rcl_clock_get_now+0x14>
 8013a58:	7803      	ldrb	r3, [r0, #0]
 8013a5a:	b11b      	cbz	r3, 8013a64 <rcl_clock_get_now+0x10>
 8013a5c:	68c3      	ldr	r3, [r0, #12]
 8013a5e:	b10b      	cbz	r3, 8013a64 <rcl_clock_get_now+0x10>
 8013a60:	6900      	ldr	r0, [r0, #16]
 8013a62:	4718      	bx	r3
 8013a64:	2001      	movs	r0, #1
 8013a66:	4770      	bx	lr
 8013a68:	200b      	movs	r0, #11
 8013a6a:	4770      	bx	lr

08013a6c <rcl_timer_call>:
 8013a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a70:	b08b      	sub	sp, #44	; 0x2c
 8013a72:	2800      	cmp	r0, #0
 8013a74:	d06e      	beq.n	8013b54 <rcl_timer_call+0xe8>
 8013a76:	6803      	ldr	r3, [r0, #0]
 8013a78:	f3bf 8f5b 	dmb	ish
 8013a7c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013a80:	f3bf 8f5b 	dmb	ish
 8013a84:	4604      	mov	r4, r0
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d159      	bne.n	8013b3e <rcl_timer_call+0xd2>
 8013a8a:	6803      	ldr	r3, [r0, #0]
 8013a8c:	a908      	add	r1, sp, #32
 8013a8e:	6818      	ldr	r0, [r3, #0]
 8013a90:	f7ff ffe0 	bl	8013a54 <rcl_clock_get_now>
 8013a94:	4605      	mov	r5, r0
 8013a96:	2800      	cmp	r0, #0
 8013a98:	d14d      	bne.n	8013b36 <rcl_timer_call+0xca>
 8013a9a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013a9e:	2a00      	cmp	r2, #0
 8013aa0:	f173 0100 	sbcs.w	r1, r3, #0
 8013aa4:	db51      	blt.n	8013b4a <rcl_timer_call+0xde>
 8013aa6:	6820      	ldr	r0, [r4, #0]
 8013aa8:	2605      	movs	r6, #5
 8013aaa:	9600      	str	r6, [sp, #0]
 8013aac:	3020      	adds	r0, #32
 8013aae:	f001 f893 	bl	8014bd8 <__atomic_exchange_8>
 8013ab2:	6822      	ldr	r2, [r4, #0]
 8013ab4:	f3bf 8f5b 	dmb	ish
 8013ab8:	4682      	mov	sl, r0
 8013aba:	f8d2 b010 	ldr.w	fp, [r2, #16]
 8013abe:	f3bf 8f5b 	dmb	ish
 8013ac2:	6820      	ldr	r0, [r4, #0]
 8013ac4:	460b      	mov	r3, r1
 8013ac6:	3028      	adds	r0, #40	; 0x28
 8013ac8:	4631      	mov	r1, r6
 8013aca:	9305      	str	r3, [sp, #20]
 8013acc:	f001 f81c 	bl	8014b08 <__atomic_load_8>
 8013ad0:	4603      	mov	r3, r0
 8013ad2:	6820      	ldr	r0, [r4, #0]
 8013ad4:	460a      	mov	r2, r1
 8013ad6:	3018      	adds	r0, #24
 8013ad8:	4631      	mov	r1, r6
 8013ada:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8013ade:	f001 f813 	bl	8014b08 <__atomic_load_8>
 8013ae2:	9b04      	ldr	r3, [sp, #16]
 8013ae4:	9a03      	ldr	r2, [sp, #12]
 8013ae6:	4606      	mov	r6, r0
 8013ae8:	460f      	mov	r7, r1
 8013aea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013aee:	eb13 0806 	adds.w	r8, r3, r6
 8013af2:	eb42 0907 	adc.w	r9, r2, r7
 8013af6:	4580      	cmp	r8, r0
 8013af8:	eb79 0301 	sbcs.w	r3, r9, r1
 8013afc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013b00:	460a      	mov	r2, r1
 8013b02:	da04      	bge.n	8013b0e <rcl_timer_call+0xa2>
 8013b04:	ea56 0307 	orrs.w	r3, r6, r7
 8013b08:	d129      	bne.n	8013b5e <rcl_timer_call+0xf2>
 8013b0a:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8013b0e:	6820      	ldr	r0, [r4, #0]
 8013b10:	2105      	movs	r1, #5
 8013b12:	4642      	mov	r2, r8
 8013b14:	464b      	mov	r3, r9
 8013b16:	3028      	adds	r0, #40	; 0x28
 8013b18:	9100      	str	r1, [sp, #0]
 8013b1a:	f001 f829 	bl	8014b70 <__atomic_store_8>
 8013b1e:	f1bb 0f00 	cmp.w	fp, #0
 8013b22:	d008      	beq.n	8013b36 <rcl_timer_call+0xca>
 8013b24:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013b28:	9905      	ldr	r1, [sp, #20]
 8013b2a:	ebb2 020a 	subs.w	r2, r2, sl
 8013b2e:	4620      	mov	r0, r4
 8013b30:	eb63 0301 	sbc.w	r3, r3, r1
 8013b34:	47d8      	blx	fp
 8013b36:	4628      	mov	r0, r5
 8013b38:	b00b      	add	sp, #44	; 0x2c
 8013b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b3e:	f240 3521 	movw	r5, #801	; 0x321
 8013b42:	4628      	mov	r0, r5
 8013b44:	b00b      	add	sp, #44	; 0x2c
 8013b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b4a:	2501      	movs	r5, #1
 8013b4c:	4628      	mov	r0, r5
 8013b4e:	b00b      	add	sp, #44	; 0x2c
 8013b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b54:	250b      	movs	r5, #11
 8013b56:	4628      	mov	r0, r5
 8013b58:	b00b      	add	sp, #44	; 0x2c
 8013b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b5e:	ebb0 0008 	subs.w	r0, r0, r8
 8013b62:	eb62 0109 	sbc.w	r1, r2, r9
 8013b66:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
 8013b6a:	463b      	mov	r3, r7
 8013b6c:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 8013b70:	4632      	mov	r2, r6
 8013b72:	f7ec ffbb 	bl	8000aec <__aeabi_ldivmod>
 8013b76:	1c43      	adds	r3, r0, #1
 8013b78:	f141 0100 	adc.w	r1, r1, #0
 8013b7c:	fb00 7007 	mla	r0, r0, r7, r7
 8013b80:	fb06 0001 	mla	r0, r6, r1, r0
 8013b84:	fba3 6706 	umull	r6, r7, r3, r6
 8013b88:	4407      	add	r7, r0
 8013b8a:	eb18 0806 	adds.w	r8, r8, r6
 8013b8e:	eb49 0907 	adc.w	r9, r9, r7
 8013b92:	e7bc      	b.n	8013b0e <rcl_timer_call+0xa2>

08013b94 <rcl_timer_is_ready>:
 8013b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b98:	b082      	sub	sp, #8
 8013b9a:	b310      	cbz	r0, 8013be2 <rcl_timer_is_ready+0x4e>
 8013b9c:	4688      	mov	r8, r1
 8013b9e:	b301      	cbz	r1, 8013be2 <rcl_timer_is_ready+0x4e>
 8013ba0:	6803      	ldr	r3, [r0, #0]
 8013ba2:	4604      	mov	r4, r0
 8013ba4:	4669      	mov	r1, sp
 8013ba6:	6818      	ldr	r0, [r3, #0]
 8013ba8:	f7ff ff54 	bl	8013a54 <rcl_clock_get_now>
 8013bac:	4605      	mov	r5, r0
 8013bae:	b118      	cbz	r0, 8013bb8 <rcl_timer_is_ready+0x24>
 8013bb0:	4628      	mov	r0, r5
 8013bb2:	b002      	add	sp, #8
 8013bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bb8:	6820      	ldr	r0, [r4, #0]
 8013bba:	2105      	movs	r1, #5
 8013bbc:	3028      	adds	r0, #40	; 0x28
 8013bbe:	f000 ffa3 	bl	8014b08 <__atomic_load_8>
 8013bc2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013bc6:	1ac6      	subs	r6, r0, r3
 8013bc8:	eb61 0702 	sbc.w	r7, r1, r2
 8013bcc:	2e01      	cmp	r6, #1
 8013bce:	f177 0300 	sbcs.w	r3, r7, #0
 8013bd2:	db0b      	blt.n	8013bec <rcl_timer_is_ready+0x58>
 8013bd4:	462b      	mov	r3, r5
 8013bd6:	4628      	mov	r0, r5
 8013bd8:	f888 3000 	strb.w	r3, [r8]
 8013bdc:	b002      	add	sp, #8
 8013bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013be2:	250b      	movs	r5, #11
 8013be4:	4628      	mov	r0, r5
 8013be6:	b002      	add	sp, #8
 8013be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bec:	6823      	ldr	r3, [r4, #0]
 8013bee:	f3bf 8f5b 	dmb	ish
 8013bf2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013bf6:	f3bf 8f5b 	dmb	ish
 8013bfa:	fab3 f383 	clz	r3, r3
 8013bfe:	095b      	lsrs	r3, r3, #5
 8013c00:	e7e9      	b.n	8013bd6 <rcl_timer_is_ready+0x42>
 8013c02:	bf00      	nop

08013c04 <rcl_timer_get_time_until_next_call>:
 8013c04:	b570      	push	{r4, r5, r6, lr}
 8013c06:	b082      	sub	sp, #8
 8013c08:	b1d8      	cbz	r0, 8013c42 <rcl_timer_get_time_until_next_call+0x3e>
 8013c0a:	460d      	mov	r5, r1
 8013c0c:	b1c9      	cbz	r1, 8013c42 <rcl_timer_get_time_until_next_call+0x3e>
 8013c0e:	6803      	ldr	r3, [r0, #0]
 8013c10:	4604      	mov	r4, r0
 8013c12:	4669      	mov	r1, sp
 8013c14:	6818      	ldr	r0, [r3, #0]
 8013c16:	f7ff ff1d 	bl	8013a54 <rcl_clock_get_now>
 8013c1a:	4606      	mov	r6, r0
 8013c1c:	b110      	cbz	r0, 8013c24 <rcl_timer_get_time_until_next_call+0x20>
 8013c1e:	4630      	mov	r0, r6
 8013c20:	b002      	add	sp, #8
 8013c22:	bd70      	pop	{r4, r5, r6, pc}
 8013c24:	6820      	ldr	r0, [r4, #0]
 8013c26:	2105      	movs	r1, #5
 8013c28:	3028      	adds	r0, #40	; 0x28
 8013c2a:	f000 ff6d 	bl	8014b08 <__atomic_load_8>
 8013c2e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013c32:	1ac0      	subs	r0, r0, r3
 8013c34:	eb61 0102 	sbc.w	r1, r1, r2
 8013c38:	e9c5 0100 	strd	r0, r1, [r5]
 8013c3c:	4630      	mov	r0, r6
 8013c3e:	b002      	add	sp, #8
 8013c40:	bd70      	pop	{r4, r5, r6, pc}
 8013c42:	260b      	movs	r6, #11
 8013c44:	4630      	mov	r0, r6
 8013c46:	b002      	add	sp, #8
 8013c48:	bd70      	pop	{r4, r5, r6, pc}
 8013c4a:	bf00      	nop

08013c4c <rcl_timer_is_canceled>:
 8013c4c:	b168      	cbz	r0, 8013c6a <rcl_timer_is_canceled+0x1e>
 8013c4e:	b161      	cbz	r1, 8013c6a <rcl_timer_is_canceled+0x1e>
 8013c50:	6803      	ldr	r3, [r0, #0]
 8013c52:	f3bf 8f5b 	dmb	ish
 8013c56:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013c5a:	f3bf 8f5b 	dmb	ish
 8013c5e:	3b00      	subs	r3, #0
 8013c60:	bf18      	it	ne
 8013c62:	2301      	movne	r3, #1
 8013c64:	700b      	strb	r3, [r1, #0]
 8013c66:	2000      	movs	r0, #0
 8013c68:	4770      	bx	lr
 8013c6a:	200b      	movs	r0, #11
 8013c6c:	4770      	bx	lr
 8013c6e:	bf00      	nop

08013c70 <rcl_timer_get_guard_condition>:
 8013c70:	b130      	cbz	r0, 8013c80 <rcl_timer_get_guard_condition+0x10>
 8013c72:	6800      	ldr	r0, [r0, #0]
 8013c74:	b120      	cbz	r0, 8013c80 <rcl_timer_get_guard_condition+0x10>
 8013c76:	68c3      	ldr	r3, [r0, #12]
 8013c78:	b10b      	cbz	r3, 8013c7e <rcl_timer_get_guard_condition+0xe>
 8013c7a:	3008      	adds	r0, #8
 8013c7c:	4770      	bx	lr
 8013c7e:	4618      	mov	r0, r3
 8013c80:	4770      	bx	lr
 8013c82:	bf00      	nop

08013c84 <rcl_validate_enclave_name_with_size>:
 8013c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013c86:	b0c3      	sub	sp, #268	; 0x10c
 8013c88:	b1d0      	cbz	r0, 8013cc0 <rcl_validate_enclave_name_with_size+0x3c>
 8013c8a:	4615      	mov	r5, r2
 8013c8c:	b1c2      	cbz	r2, 8013cc0 <rcl_validate_enclave_name_with_size+0x3c>
 8013c8e:	461f      	mov	r7, r3
 8013c90:	466a      	mov	r2, sp
 8013c92:	ab01      	add	r3, sp, #4
 8013c94:	460e      	mov	r6, r1
 8013c96:	f001 f96d 	bl	8014f74 <rmw_validate_namespace_with_size>
 8013c9a:	4604      	mov	r4, r0
 8013c9c:	b9e0      	cbnz	r0, 8013cd8 <rcl_validate_enclave_name_with_size+0x54>
 8013c9e:	9b00      	ldr	r3, [sp, #0]
 8013ca0:	b923      	cbnz	r3, 8013cac <rcl_validate_enclave_name_with_size+0x28>
 8013ca2:	2300      	movs	r3, #0
 8013ca4:	602b      	str	r3, [r5, #0]
 8013ca6:	4620      	mov	r0, r4
 8013ca8:	b043      	add	sp, #268	; 0x10c
 8013caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013cac:	2b07      	cmp	r3, #7
 8013cae:	d00b      	beq.n	8013cc8 <rcl_validate_enclave_name_with_size+0x44>
 8013cb0:	1e5a      	subs	r2, r3, #1
 8013cb2:	2a05      	cmp	r2, #5
 8013cb4:	d82e      	bhi.n	8013d14 <rcl_validate_enclave_name_with_size+0x90>
 8013cb6:	e8df f002 	tbb	[pc, r2]
 8013cba:	211e      	.short	0x211e
 8013cbc:	152a2724 	.word	0x152a2724
 8013cc0:	240b      	movs	r4, #11
 8013cc2:	4620      	mov	r0, r4
 8013cc4:	b043      	add	sp, #268	; 0x10c
 8013cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013cc8:	2eff      	cmp	r6, #255	; 0xff
 8013cca:	d9ea      	bls.n	8013ca2 <rcl_validate_enclave_name_with_size+0x1e>
 8013ccc:	602b      	str	r3, [r5, #0]
 8013cce:	2f00      	cmp	r7, #0
 8013cd0:	d0e9      	beq.n	8013ca6 <rcl_validate_enclave_name_with_size+0x22>
 8013cd2:	23fe      	movs	r3, #254	; 0xfe
 8013cd4:	603b      	str	r3, [r7, #0]
 8013cd6:	e7e6      	b.n	8013ca6 <rcl_validate_enclave_name_with_size+0x22>
 8013cd8:	f7fe fec2 	bl	8012a60 <rcl_convert_rmw_ret_to_rcl_ret>
 8013cdc:	4604      	mov	r4, r0
 8013cde:	4620      	mov	r0, r4
 8013ce0:	b043      	add	sp, #268	; 0x10c
 8013ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013ce4:	2306      	movs	r3, #6
 8013ce6:	602b      	str	r3, [r5, #0]
 8013ce8:	2f00      	cmp	r7, #0
 8013cea:	d0dc      	beq.n	8013ca6 <rcl_validate_enclave_name_with_size+0x22>
 8013cec:	9b01      	ldr	r3, [sp, #4]
 8013cee:	603b      	str	r3, [r7, #0]
 8013cf0:	4620      	mov	r0, r4
 8013cf2:	b043      	add	sp, #268	; 0x10c
 8013cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013cf6:	2301      	movs	r3, #1
 8013cf8:	602b      	str	r3, [r5, #0]
 8013cfa:	e7f5      	b.n	8013ce8 <rcl_validate_enclave_name_with_size+0x64>
 8013cfc:	2302      	movs	r3, #2
 8013cfe:	602b      	str	r3, [r5, #0]
 8013d00:	e7f2      	b.n	8013ce8 <rcl_validate_enclave_name_with_size+0x64>
 8013d02:	2303      	movs	r3, #3
 8013d04:	602b      	str	r3, [r5, #0]
 8013d06:	e7ef      	b.n	8013ce8 <rcl_validate_enclave_name_with_size+0x64>
 8013d08:	2304      	movs	r3, #4
 8013d0a:	602b      	str	r3, [r5, #0]
 8013d0c:	e7ec      	b.n	8013ce8 <rcl_validate_enclave_name_with_size+0x64>
 8013d0e:	2305      	movs	r3, #5
 8013d10:	602b      	str	r3, [r5, #0]
 8013d12:	e7e9      	b.n	8013ce8 <rcl_validate_enclave_name_with_size+0x64>
 8013d14:	4a03      	ldr	r2, [pc, #12]	; (8013d24 <rcl_validate_enclave_name_with_size+0xa0>)
 8013d16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013d1a:	a802      	add	r0, sp, #8
 8013d1c:	f001 f8a4 	bl	8014e68 <rcutils_snprintf>
 8013d20:	2401      	movs	r4, #1
 8013d22:	e7c0      	b.n	8013ca6 <rcl_validate_enclave_name_with_size+0x22>
 8013d24:	08019bf0 	.word	0x08019bf0

08013d28 <rcl_validate_enclave_name>:
 8013d28:	b168      	cbz	r0, 8013d46 <rcl_validate_enclave_name+0x1e>
 8013d2a:	b570      	push	{r4, r5, r6, lr}
 8013d2c:	460d      	mov	r5, r1
 8013d2e:	4616      	mov	r6, r2
 8013d30:	4604      	mov	r4, r0
 8013d32:	f7ec fa5f 	bl	80001f4 <strlen>
 8013d36:	4633      	mov	r3, r6
 8013d38:	4601      	mov	r1, r0
 8013d3a:	462a      	mov	r2, r5
 8013d3c:	4620      	mov	r0, r4
 8013d3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013d42:	f7ff bf9f 	b.w	8013c84 <rcl_validate_enclave_name_with_size>
 8013d46:	200b      	movs	r0, #11
 8013d48:	4770      	bx	lr
 8013d4a:	bf00      	nop

08013d4c <rcl_validate_topic_name>:
 8013d4c:	2800      	cmp	r0, #0
 8013d4e:	f000 808b 	beq.w	8013e68 <rcl_validate_topic_name+0x11c>
 8013d52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d56:	460e      	mov	r6, r1
 8013d58:	2900      	cmp	r1, #0
 8013d5a:	f000 808c 	beq.w	8013e76 <rcl_validate_topic_name+0x12a>
 8013d5e:	4617      	mov	r7, r2
 8013d60:	4605      	mov	r5, r0
 8013d62:	f7ec fa47 	bl	80001f4 <strlen>
 8013d66:	b1b0      	cbz	r0, 8013d96 <rcl_validate_topic_name+0x4a>
 8013d68:	f895 9000 	ldrb.w	r9, [r5]
 8013d6c:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 8013f1c <rcl_validate_topic_name+0x1d0>
 8013d70:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8013d74:	f013 0304 	ands.w	r3, r3, #4
 8013d78:	d178      	bne.n	8013e6c <rcl_validate_topic_name+0x120>
 8013d7a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8013d7e:	f815 2008 	ldrb.w	r2, [r5, r8]
 8013d82:	2a2f      	cmp	r2, #47	; 0x2f
 8013d84:	d10e      	bne.n	8013da4 <rcl_validate_topic_name+0x58>
 8013d86:	2202      	movs	r2, #2
 8013d88:	6032      	str	r2, [r6, #0]
 8013d8a:	b36f      	cbz	r7, 8013de8 <rcl_validate_topic_name+0x9c>
 8013d8c:	f8c7 8000 	str.w	r8, [r7]
 8013d90:	4618      	mov	r0, r3
 8013d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d96:	2301      	movs	r3, #1
 8013d98:	6033      	str	r3, [r6, #0]
 8013d9a:	b32f      	cbz	r7, 8013de8 <rcl_validate_topic_name+0x9c>
 8013d9c:	2000      	movs	r0, #0
 8013d9e:	6038      	str	r0, [r7, #0]
 8013da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013da4:	461c      	mov	r4, r3
 8013da6:	4619      	mov	r1, r3
 8013da8:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 8013dac:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8013db0:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8013db4:	f1be 0f09 	cmp.w	lr, #9
 8013db8:	d946      	bls.n	8013e48 <rcl_validate_topic_name+0xfc>
 8013dba:	f022 0e20 	bic.w	lr, r2, #32
 8013dbe:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 8013dc2:	f1be 0f19 	cmp.w	lr, #25
 8013dc6:	d93f      	bls.n	8013e48 <rcl_validate_topic_name+0xfc>
 8013dc8:	2a5f      	cmp	r2, #95	; 0x5f
 8013dca:	d014      	beq.n	8013df6 <rcl_validate_topic_name+0xaa>
 8013dcc:	2a2f      	cmp	r2, #47	; 0x2f
 8013dce:	d05b      	beq.n	8013e88 <rcl_validate_topic_name+0x13c>
 8013dd0:	2a7e      	cmp	r2, #126	; 0x7e
 8013dd2:	d052      	beq.n	8013e7a <rcl_validate_topic_name+0x12e>
 8013dd4:	2a7b      	cmp	r2, #123	; 0x7b
 8013dd6:	d00a      	beq.n	8013dee <rcl_validate_topic_name+0xa2>
 8013dd8:	2a7d      	cmp	r2, #125	; 0x7d
 8013dda:	d16f      	bne.n	8013ebc <rcl_validate_topic_name+0x170>
 8013ddc:	2c00      	cmp	r4, #0
 8013dde:	d15e      	bne.n	8013e9e <rcl_validate_topic_name+0x152>
 8013de0:	2305      	movs	r3, #5
 8013de2:	6033      	str	r3, [r6, #0]
 8013de4:	b107      	cbz	r7, 8013de8 <rcl_validate_topic_name+0x9c>
 8013de6:	6039      	str	r1, [r7, #0]
 8013de8:	2000      	movs	r0, #0
 8013dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013dee:	2c00      	cmp	r4, #0
 8013df0:	d14c      	bne.n	8013e8c <rcl_validate_topic_name+0x140>
 8013df2:	460b      	mov	r3, r1
 8013df4:	2401      	movs	r4, #1
 8013df6:	3101      	adds	r1, #1
 8013df8:	4288      	cmp	r0, r1
 8013dfa:	d1d7      	bne.n	8013dac <rcl_validate_topic_name+0x60>
 8013dfc:	2c00      	cmp	r4, #0
 8013dfe:	d156      	bne.n	8013eae <rcl_validate_topic_name+0x162>
 8013e00:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 8013e04:	4620      	mov	r0, r4
 8013e06:	d061      	beq.n	8013ecc <rcl_validate_topic_name+0x180>
 8013e08:	f108 0e01 	add.w	lr, r8, #1
 8013e0c:	e007      	b.n	8013e1e <rcl_validate_topic_name+0xd2>
 8013e0e:	2801      	cmp	r0, #1
 8013e10:	d047      	beq.n	8013ea2 <rcl_validate_topic_name+0x156>
 8013e12:	461a      	mov	r2, r3
 8013e14:	4291      	cmp	r1, r2
 8013e16:	4618      	mov	r0, r3
 8013e18:	f105 0501 	add.w	r5, r5, #1
 8013e1c:	d944      	bls.n	8013ea8 <rcl_validate_topic_name+0x15c>
 8013e1e:	4580      	cmp	r8, r0
 8013e20:	f100 0301 	add.w	r3, r0, #1
 8013e24:	d037      	beq.n	8013e96 <rcl_validate_topic_name+0x14a>
 8013e26:	782a      	ldrb	r2, [r5, #0]
 8013e28:	2a2f      	cmp	r2, #47	; 0x2f
 8013e2a:	d1f0      	bne.n	8013e0e <rcl_validate_topic_name+0xc2>
 8013e2c:	786b      	ldrb	r3, [r5, #1]
 8013e2e:	f81c 4003 	ldrb.w	r4, [ip, r3]
 8013e32:	1c43      	adds	r3, r0, #1
 8013e34:	0760      	lsls	r0, r4, #29
 8013e36:	461a      	mov	r2, r3
 8013e38:	d5ec      	bpl.n	8013e14 <rcl_validate_topic_name+0xc8>
 8013e3a:	2304      	movs	r3, #4
 8013e3c:	6033      	str	r3, [r6, #0]
 8013e3e:	2f00      	cmp	r7, #0
 8013e40:	d0d2      	beq.n	8013de8 <rcl_validate_topic_name+0x9c>
 8013e42:	603a      	str	r2, [r7, #0]
 8013e44:	2000      	movs	r0, #0
 8013e46:	e7ab      	b.n	8013da0 <rcl_validate_topic_name+0x54>
 8013e48:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8013e4c:	0752      	lsls	r2, r2, #29
 8013e4e:	d5d2      	bpl.n	8013df6 <rcl_validate_topic_name+0xaa>
 8013e50:	2c00      	cmp	r4, #0
 8013e52:	d0d0      	beq.n	8013df6 <rcl_validate_topic_name+0xaa>
 8013e54:	2900      	cmp	r1, #0
 8013e56:	d0ce      	beq.n	8013df6 <rcl_validate_topic_name+0xaa>
 8013e58:	1e4a      	subs	r2, r1, #1
 8013e5a:	429a      	cmp	r2, r3
 8013e5c:	d1cb      	bne.n	8013df6 <rcl_validate_topic_name+0xaa>
 8013e5e:	2309      	movs	r3, #9
 8013e60:	6033      	str	r3, [r6, #0]
 8013e62:	2f00      	cmp	r7, #0
 8013e64:	d1bf      	bne.n	8013de6 <rcl_validate_topic_name+0x9a>
 8013e66:	e7bf      	b.n	8013de8 <rcl_validate_topic_name+0x9c>
 8013e68:	200b      	movs	r0, #11
 8013e6a:	4770      	bx	lr
 8013e6c:	2304      	movs	r3, #4
 8013e6e:	6033      	str	r3, [r6, #0]
 8013e70:	2f00      	cmp	r7, #0
 8013e72:	d193      	bne.n	8013d9c <rcl_validate_topic_name+0x50>
 8013e74:	e7b8      	b.n	8013de8 <rcl_validate_topic_name+0x9c>
 8013e76:	200b      	movs	r0, #11
 8013e78:	e792      	b.n	8013da0 <rcl_validate_topic_name+0x54>
 8013e7a:	2900      	cmp	r1, #0
 8013e7c:	d0bb      	beq.n	8013df6 <rcl_validate_topic_name+0xaa>
 8013e7e:	2306      	movs	r3, #6
 8013e80:	6033      	str	r3, [r6, #0]
 8013e82:	2f00      	cmp	r7, #0
 8013e84:	d1af      	bne.n	8013de6 <rcl_validate_topic_name+0x9a>
 8013e86:	e7af      	b.n	8013de8 <rcl_validate_topic_name+0x9c>
 8013e88:	2c00      	cmp	r4, #0
 8013e8a:	d0b4      	beq.n	8013df6 <rcl_validate_topic_name+0xaa>
 8013e8c:	2308      	movs	r3, #8
 8013e8e:	6033      	str	r3, [r6, #0]
 8013e90:	2f00      	cmp	r7, #0
 8013e92:	d1a8      	bne.n	8013de6 <rcl_validate_topic_name+0x9a>
 8013e94:	e7a8      	b.n	8013de8 <rcl_validate_topic_name+0x9c>
 8013e96:	4672      	mov	r2, lr
 8013e98:	f108 0301 	add.w	r3, r8, #1
 8013e9c:	e7ba      	b.n	8013e14 <rcl_validate_topic_name+0xc8>
 8013e9e:	2400      	movs	r4, #0
 8013ea0:	e7a9      	b.n	8013df6 <rcl_validate_topic_name+0xaa>
 8013ea2:	2202      	movs	r2, #2
 8013ea4:	4613      	mov	r3, r2
 8013ea6:	e7b5      	b.n	8013e14 <rcl_validate_topic_name+0xc8>
 8013ea8:	2000      	movs	r0, #0
 8013eaa:	6030      	str	r0, [r6, #0]
 8013eac:	e778      	b.n	8013da0 <rcl_validate_topic_name+0x54>
 8013eae:	2205      	movs	r2, #5
 8013eb0:	6032      	str	r2, [r6, #0]
 8013eb2:	2f00      	cmp	r7, #0
 8013eb4:	d098      	beq.n	8013de8 <rcl_validate_topic_name+0x9c>
 8013eb6:	603b      	str	r3, [r7, #0]
 8013eb8:	2000      	movs	r0, #0
 8013eba:	e771      	b.n	8013da0 <rcl_validate_topic_name+0x54>
 8013ebc:	2c00      	cmp	r4, #0
 8013ebe:	bf14      	ite	ne
 8013ec0:	2308      	movne	r3, #8
 8013ec2:	2303      	moveq	r3, #3
 8013ec4:	6033      	str	r3, [r6, #0]
 8013ec6:	2f00      	cmp	r7, #0
 8013ec8:	d18d      	bne.n	8013de6 <rcl_validate_topic_name+0x9a>
 8013eca:	e78d      	b.n	8013de8 <rcl_validate_topic_name+0x9c>
 8013ecc:	f108 0401 	add.w	r4, r8, #1
 8013ed0:	e007      	b.n	8013ee2 <rcl_validate_topic_name+0x196>
 8013ed2:	2801      	cmp	r0, #1
 8013ed4:	d019      	beq.n	8013f0a <rcl_validate_topic_name+0x1be>
 8013ed6:	461a      	mov	r2, r3
 8013ed8:	4291      	cmp	r1, r2
 8013eda:	4618      	mov	r0, r3
 8013edc:	f105 0501 	add.w	r5, r5, #1
 8013ee0:	d9e2      	bls.n	8013ea8 <rcl_validate_topic_name+0x15c>
 8013ee2:	4580      	cmp	r8, r0
 8013ee4:	f100 0301 	add.w	r3, r0, #1
 8013ee8:	d00b      	beq.n	8013f02 <rcl_validate_topic_name+0x1b6>
 8013eea:	782a      	ldrb	r2, [r5, #0]
 8013eec:	2a2f      	cmp	r2, #47	; 0x2f
 8013eee:	d1f0      	bne.n	8013ed2 <rcl_validate_topic_name+0x186>
 8013ef0:	786b      	ldrb	r3, [r5, #1]
 8013ef2:	f81c e003 	ldrb.w	lr, [ip, r3]
 8013ef6:	1c43      	adds	r3, r0, #1
 8013ef8:	f01e 0f04 	tst.w	lr, #4
 8013efc:	461a      	mov	r2, r3
 8013efe:	d0eb      	beq.n	8013ed8 <rcl_validate_topic_name+0x18c>
 8013f00:	e79b      	b.n	8013e3a <rcl_validate_topic_name+0xee>
 8013f02:	4622      	mov	r2, r4
 8013f04:	f108 0301 	add.w	r3, r8, #1
 8013f08:	e7e6      	b.n	8013ed8 <rcl_validate_topic_name+0x18c>
 8013f0a:	2307      	movs	r3, #7
 8013f0c:	6033      	str	r3, [r6, #0]
 8013f0e:	2f00      	cmp	r7, #0
 8013f10:	f43f af6a 	beq.w	8013de8 <rcl_validate_topic_name+0x9c>
 8013f14:	6038      	str	r0, [r7, #0]
 8013f16:	2000      	movs	r0, #0
 8013f18:	e742      	b.n	8013da0 <rcl_validate_topic_name+0x54>
 8013f1a:	bf00      	nop
 8013f1c:	0801a278 	.word	0x0801a278

08013f20 <rcl_get_zero_initialized_wait_set>:
 8013f20:	b470      	push	{r4, r5, r6}
 8013f22:	4d07      	ldr	r5, [pc, #28]	; (8013f40 <rcl_get_zero_initialized_wait_set+0x20>)
 8013f24:	4606      	mov	r6, r0
 8013f26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013f28:	4634      	mov	r4, r6
 8013f2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013f2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013f2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013f30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013f32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013f34:	682b      	ldr	r3, [r5, #0]
 8013f36:	6023      	str	r3, [r4, #0]
 8013f38:	4630      	mov	r0, r6
 8013f3a:	bc70      	pop	{r4, r5, r6}
 8013f3c:	4770      	bx	lr
 8013f3e:	bf00      	nop
 8013f40:	08019c50 	.word	0x08019c50

08013f44 <rcl_wait_set_is_valid>:
 8013f44:	b118      	cbz	r0, 8013f4e <rcl_wait_set_is_valid+0xa>
 8013f46:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8013f48:	3800      	subs	r0, #0
 8013f4a:	bf18      	it	ne
 8013f4c:	2001      	movne	r0, #1
 8013f4e:	4770      	bx	lr

08013f50 <rcl_wait_set_fini>:
 8013f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f54:	b082      	sub	sp, #8
 8013f56:	2800      	cmp	r0, #0
 8013f58:	f000 8095 	beq.w	8014086 <rcl_wait_set_fini+0x136>
 8013f5c:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8013f5e:	4604      	mov	r4, r0
 8013f60:	2e00      	cmp	r6, #0
 8013f62:	f000 808c 	beq.w	801407e <rcl_wait_set_fini+0x12e>
 8013f66:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8013f68:	f002 f804 	bl	8015f74 <rmw_destroy_wait_set>
 8013f6c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8013f6e:	1e06      	subs	r6, r0, #0
 8013f70:	bf18      	it	ne
 8013f72:	f44f 7661 	movne.w	r6, #900	; 0x384
 8013f76:	2d00      	cmp	r5, #0
 8013f78:	f000 8081 	beq.w	801407e <rcl_wait_set_fini+0x12e>
 8013f7c:	6820      	ldr	r0, [r4, #0]
 8013f7e:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8013f82:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8013f84:	2700      	movs	r7, #0
 8013f86:	6067      	str	r7, [r4, #4]
 8013f88:	602f      	str	r7, [r5, #0]
 8013f8a:	b120      	cbz	r0, 8013f96 <rcl_wait_set_fini+0x46>
 8013f8c:	9101      	str	r1, [sp, #4]
 8013f8e:	47c0      	blx	r8
 8013f90:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8013f92:	9901      	ldr	r1, [sp, #4]
 8013f94:	6027      	str	r7, [r4, #0]
 8013f96:	68a8      	ldr	r0, [r5, #8]
 8013f98:	b120      	cbz	r0, 8013fa4 <rcl_wait_set_fini+0x54>
 8013f9a:	47c0      	blx	r8
 8013f9c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8013f9e:	2300      	movs	r3, #0
 8013fa0:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8013fa4:	68a0      	ldr	r0, [r4, #8]
 8013fa6:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8013fa8:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8013faa:	f04f 0800 	mov.w	r8, #0
 8013fae:	f8c4 800c 	str.w	r8, [r4, #12]
 8013fb2:	f8c5 800c 	str.w	r8, [r5, #12]
 8013fb6:	b128      	cbz	r0, 8013fc4 <rcl_wait_set_fini+0x74>
 8013fb8:	47b8      	blx	r7
 8013fba:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8013fbc:	f8c4 8008 	str.w	r8, [r4, #8]
 8013fc0:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8013fc2:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8013fc4:	6968      	ldr	r0, [r5, #20]
 8013fc6:	f04f 0800 	mov.w	r8, #0
 8013fca:	f8c5 8010 	str.w	r8, [r5, #16]
 8013fce:	b128      	cbz	r0, 8013fdc <rcl_wait_set_fini+0x8c>
 8013fd0:	47b8      	blx	r7
 8013fd2:	f8c5 8014 	str.w	r8, [r5, #20]
 8013fd6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8013fd8:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8013fda:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8013fdc:	6920      	ldr	r0, [r4, #16]
 8013fde:	f04f 0800 	mov.w	r8, #0
 8013fe2:	f8c4 8014 	str.w	r8, [r4, #20]
 8013fe6:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 8013fea:	b128      	cbz	r0, 8013ff8 <rcl_wait_set_fini+0xa8>
 8013fec:	47b8      	blx	r7
 8013fee:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8013ff0:	f8c4 8010 	str.w	r8, [r4, #16]
 8013ff4:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8013ff6:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8013ff8:	69a0      	ldr	r0, [r4, #24]
 8013ffa:	f04f 0800 	mov.w	r8, #0
 8013ffe:	f8c4 801c 	str.w	r8, [r4, #28]
 8014002:	f8c5 8018 	str.w	r8, [r5, #24]
 8014006:	b128      	cbz	r0, 8014014 <rcl_wait_set_fini+0xc4>
 8014008:	9101      	str	r1, [sp, #4]
 801400a:	47b8      	blx	r7
 801400c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801400e:	9901      	ldr	r1, [sp, #4]
 8014010:	f8c4 8018 	str.w	r8, [r4, #24]
 8014014:	6a28      	ldr	r0, [r5, #32]
 8014016:	b120      	cbz	r0, 8014022 <rcl_wait_set_fini+0xd2>
 8014018:	47b8      	blx	r7
 801401a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801401c:	2300      	movs	r3, #0
 801401e:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8014022:	6a20      	ldr	r0, [r4, #32]
 8014024:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8014028:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801402a:	2700      	movs	r7, #0
 801402c:	6267      	str	r7, [r4, #36]	; 0x24
 801402e:	626f      	str	r7, [r5, #36]	; 0x24
 8014030:	b120      	cbz	r0, 801403c <rcl_wait_set_fini+0xec>
 8014032:	9101      	str	r1, [sp, #4]
 8014034:	47c0      	blx	r8
 8014036:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8014038:	9901      	ldr	r1, [sp, #4]
 801403a:	6227      	str	r7, [r4, #32]
 801403c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 801403e:	b120      	cbz	r0, 801404a <rcl_wait_set_fini+0xfa>
 8014040:	47c0      	blx	r8
 8014042:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8014044:	2300      	movs	r3, #0
 8014046:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 801404a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801404c:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8014050:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8014052:	2700      	movs	r7, #0
 8014054:	62e7      	str	r7, [r4, #44]	; 0x2c
 8014056:	632f      	str	r7, [r5, #48]	; 0x30
 8014058:	b120      	cbz	r0, 8014064 <rcl_wait_set_fini+0x114>
 801405a:	9101      	str	r1, [sp, #4]
 801405c:	47c0      	blx	r8
 801405e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8014060:	9901      	ldr	r1, [sp, #4]
 8014062:	62a7      	str	r7, [r4, #40]	; 0x28
 8014064:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8014066:	b120      	cbz	r0, 8014072 <rcl_wait_set_fini+0x122>
 8014068:	47c0      	blx	r8
 801406a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801406c:	2300      	movs	r3, #0
 801406e:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 8014072:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8014074:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8014076:	4628      	mov	r0, r5
 8014078:	4798      	blx	r3
 801407a:	2300      	movs	r3, #0
 801407c:	6323      	str	r3, [r4, #48]	; 0x30
 801407e:	4630      	mov	r0, r6
 8014080:	b002      	add	sp, #8
 8014082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014086:	260b      	movs	r6, #11
 8014088:	4630      	mov	r0, r6
 801408a:	b002      	add	sp, #8
 801408c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014090 <rcl_wait_set_add_subscription>:
 8014090:	b320      	cbz	r0, 80140dc <rcl_wait_set_add_subscription+0x4c>
 8014092:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8014094:	b570      	push	{r4, r5, r6, lr}
 8014096:	4604      	mov	r4, r0
 8014098:	b1d3      	cbz	r3, 80140d0 <rcl_wait_set_add_subscription+0x40>
 801409a:	b319      	cbz	r1, 80140e4 <rcl_wait_set_add_subscription+0x54>
 801409c:	681d      	ldr	r5, [r3, #0]
 801409e:	6860      	ldr	r0, [r4, #4]
 80140a0:	4285      	cmp	r5, r0
 80140a2:	d218      	bcs.n	80140d6 <rcl_wait_set_add_subscription+0x46>
 80140a4:	6820      	ldr	r0, [r4, #0]
 80140a6:	1c6e      	adds	r6, r5, #1
 80140a8:	601e      	str	r6, [r3, #0]
 80140aa:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80140ae:	b102      	cbz	r2, 80140b2 <rcl_wait_set_add_subscription+0x22>
 80140b0:	6015      	str	r5, [r2, #0]
 80140b2:	4608      	mov	r0, r1
 80140b4:	f7f8 ff18 	bl	800cee8 <rcl_subscription_get_rmw_handle>
 80140b8:	b190      	cbz	r0, 80140e0 <rcl_wait_set_add_subscription+0x50>
 80140ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80140bc:	6842      	ldr	r2, [r0, #4]
 80140be:	689b      	ldr	r3, [r3, #8]
 80140c0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80140c4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80140c6:	6853      	ldr	r3, [r2, #4]
 80140c8:	3301      	adds	r3, #1
 80140ca:	6053      	str	r3, [r2, #4]
 80140cc:	2000      	movs	r0, #0
 80140ce:	bd70      	pop	{r4, r5, r6, pc}
 80140d0:	f44f 7061 	mov.w	r0, #900	; 0x384
 80140d4:	bd70      	pop	{r4, r5, r6, pc}
 80140d6:	f240 3086 	movw	r0, #902	; 0x386
 80140da:	bd70      	pop	{r4, r5, r6, pc}
 80140dc:	200b      	movs	r0, #11
 80140de:	4770      	bx	lr
 80140e0:	2001      	movs	r0, #1
 80140e2:	bd70      	pop	{r4, r5, r6, pc}
 80140e4:	200b      	movs	r0, #11
 80140e6:	bd70      	pop	{r4, r5, r6, pc}

080140e8 <rcl_wait_set_clear>:
 80140e8:	2800      	cmp	r0, #0
 80140ea:	d073      	beq.n	80141d4 <rcl_wait_set_clear+0xec>
 80140ec:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80140ee:	b510      	push	{r4, lr}
 80140f0:	4604      	mov	r4, r0
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d070      	beq.n	80141d8 <rcl_wait_set_clear+0xf0>
 80140f6:	6800      	ldr	r0, [r0, #0]
 80140f8:	b138      	cbz	r0, 801410a <rcl_wait_set_clear+0x22>
 80140fa:	6862      	ldr	r2, [r4, #4]
 80140fc:	2100      	movs	r1, #0
 80140fe:	0092      	lsls	r2, r2, #2
 8014100:	f004 fa86 	bl	8018610 <memset>
 8014104:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014106:	2200      	movs	r2, #0
 8014108:	601a      	str	r2, [r3, #0]
 801410a:	68a0      	ldr	r0, [r4, #8]
 801410c:	b138      	cbz	r0, 801411e <rcl_wait_set_clear+0x36>
 801410e:	68e2      	ldr	r2, [r4, #12]
 8014110:	2100      	movs	r1, #0
 8014112:	0092      	lsls	r2, r2, #2
 8014114:	f004 fa7c 	bl	8018610 <memset>
 8014118:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801411a:	2200      	movs	r2, #0
 801411c:	60da      	str	r2, [r3, #12]
 801411e:	69a0      	ldr	r0, [r4, #24]
 8014120:	b138      	cbz	r0, 8014132 <rcl_wait_set_clear+0x4a>
 8014122:	69e2      	ldr	r2, [r4, #28]
 8014124:	2100      	movs	r1, #0
 8014126:	0092      	lsls	r2, r2, #2
 8014128:	f004 fa72 	bl	8018610 <memset>
 801412c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801412e:	2200      	movs	r2, #0
 8014130:	619a      	str	r2, [r3, #24]
 8014132:	6a20      	ldr	r0, [r4, #32]
 8014134:	b138      	cbz	r0, 8014146 <rcl_wait_set_clear+0x5e>
 8014136:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8014138:	2100      	movs	r1, #0
 801413a:	0092      	lsls	r2, r2, #2
 801413c:	f004 fa68 	bl	8018610 <memset>
 8014140:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014142:	2200      	movs	r2, #0
 8014144:	625a      	str	r2, [r3, #36]	; 0x24
 8014146:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8014148:	b138      	cbz	r0, 801415a <rcl_wait_set_clear+0x72>
 801414a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801414c:	2100      	movs	r1, #0
 801414e:	0092      	lsls	r2, r2, #2
 8014150:	f004 fa5e 	bl	8018610 <memset>
 8014154:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014156:	2200      	movs	r2, #0
 8014158:	631a      	str	r2, [r3, #48]	; 0x30
 801415a:	6920      	ldr	r0, [r4, #16]
 801415c:	b138      	cbz	r0, 801416e <rcl_wait_set_clear+0x86>
 801415e:	6962      	ldr	r2, [r4, #20]
 8014160:	2100      	movs	r1, #0
 8014162:	0092      	lsls	r2, r2, #2
 8014164:	f004 fa54 	bl	8018610 <memset>
 8014168:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801416a:	2200      	movs	r2, #0
 801416c:	641a      	str	r2, [r3, #64]	; 0x40
 801416e:	6898      	ldr	r0, [r3, #8]
 8014170:	b138      	cbz	r0, 8014182 <rcl_wait_set_clear+0x9a>
 8014172:	685a      	ldr	r2, [r3, #4]
 8014174:	2100      	movs	r1, #0
 8014176:	0092      	lsls	r2, r2, #2
 8014178:	f004 fa4a 	bl	8018610 <memset>
 801417c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801417e:	2200      	movs	r2, #0
 8014180:	605a      	str	r2, [r3, #4]
 8014182:	6958      	ldr	r0, [r3, #20]
 8014184:	b138      	cbz	r0, 8014196 <rcl_wait_set_clear+0xae>
 8014186:	691a      	ldr	r2, [r3, #16]
 8014188:	2100      	movs	r1, #0
 801418a:	0092      	lsls	r2, r2, #2
 801418c:	f004 fa40 	bl	8018610 <memset>
 8014190:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014192:	2200      	movs	r2, #0
 8014194:	611a      	str	r2, [r3, #16]
 8014196:	6a18      	ldr	r0, [r3, #32]
 8014198:	b138      	cbz	r0, 80141aa <rcl_wait_set_clear+0xc2>
 801419a:	69da      	ldr	r2, [r3, #28]
 801419c:	2100      	movs	r1, #0
 801419e:	0092      	lsls	r2, r2, #2
 80141a0:	f004 fa36 	bl	8018610 <memset>
 80141a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80141a6:	2200      	movs	r2, #0
 80141a8:	61da      	str	r2, [r3, #28]
 80141aa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80141ac:	b138      	cbz	r0, 80141be <rcl_wait_set_clear+0xd6>
 80141ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80141b0:	2100      	movs	r1, #0
 80141b2:	0092      	lsls	r2, r2, #2
 80141b4:	f004 fa2c 	bl	8018610 <memset>
 80141b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80141ba:	2200      	movs	r2, #0
 80141bc:	629a      	str	r2, [r3, #40]	; 0x28
 80141be:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80141c0:	b138      	cbz	r0, 80141d2 <rcl_wait_set_clear+0xea>
 80141c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80141c4:	2100      	movs	r1, #0
 80141c6:	0092      	lsls	r2, r2, #2
 80141c8:	f004 fa22 	bl	8018610 <memset>
 80141cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80141ce:	2000      	movs	r0, #0
 80141d0:	6358      	str	r0, [r3, #52]	; 0x34
 80141d2:	bd10      	pop	{r4, pc}
 80141d4:	200b      	movs	r0, #11
 80141d6:	4770      	bx	lr
 80141d8:	f44f 7061 	mov.w	r0, #900	; 0x384
 80141dc:	bd10      	pop	{r4, pc}
 80141de:	bf00      	nop

080141e0 <rcl_wait_set_resize>:
 80141e0:	2800      	cmp	r0, #0
 80141e2:	f000 81a6 	beq.w	8014532 <rcl_wait_set_resize+0x352>
 80141e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141ea:	f8d0 a030 	ldr.w	sl, [r0, #48]	; 0x30
 80141ee:	b083      	sub	sp, #12
 80141f0:	4604      	mov	r4, r0
 80141f2:	f1ba 0f00 	cmp.w	sl, #0
 80141f6:	f000 819e 	beq.w	8014536 <rcl_wait_set_resize+0x356>
 80141fa:	461e      	mov	r6, r3
 80141fc:	e9da b313 	ldrd	fp, r3, [sl, #76]	; 0x4c
 8014200:	f04f 0800 	mov.w	r8, #0
 8014204:	f8da 9058 	ldr.w	r9, [sl, #88]	; 0x58
 8014208:	9300      	str	r3, [sp, #0]
 801420a:	f8c0 8004 	str.w	r8, [r0, #4]
 801420e:	460f      	mov	r7, r1
 8014210:	4615      	mov	r5, r2
 8014212:	f8ca 8000 	str.w	r8, [sl]
 8014216:	2900      	cmp	r1, #0
 8014218:	f000 80c9 	beq.w	80143ae <rcl_wait_set_resize+0x1ce>
 801421c:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 8014220:	6800      	ldr	r0, [r0, #0]
 8014222:	4651      	mov	r1, sl
 8014224:	464a      	mov	r2, r9
 8014226:	4798      	blx	r3
 8014228:	6020      	str	r0, [r4, #0]
 801422a:	2800      	cmp	r0, #0
 801422c:	f000 80d8 	beq.w	80143e0 <rcl_wait_set_resize+0x200>
 8014230:	4652      	mov	r2, sl
 8014232:	4641      	mov	r1, r8
 8014234:	f004 f9ec 	bl	8018610 <memset>
 8014238:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801423a:	6067      	str	r7, [r4, #4]
 801423c:	6898      	ldr	r0, [r3, #8]
 801423e:	f8c3 8004 	str.w	r8, [r3, #4]
 8014242:	9301      	str	r3, [sp, #4]
 8014244:	464a      	mov	r2, r9
 8014246:	9b00      	ldr	r3, [sp, #0]
 8014248:	4651      	mov	r1, sl
 801424a:	4798      	blx	r3
 801424c:	9b01      	ldr	r3, [sp, #4]
 801424e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8014250:	6098      	str	r0, [r3, #8]
 8014252:	6897      	ldr	r7, [r2, #8]
 8014254:	2f00      	cmp	r7, #0
 8014256:	f000 80be 	beq.w	80143d6 <rcl_wait_set_resize+0x1f6>
 801425a:	4652      	mov	r2, sl
 801425c:	4641      	mov	r1, r8
 801425e:	4638      	mov	r0, r7
 8014260:	f004 f9d6 	bl	8018610 <memset>
 8014264:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8014268:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 801426c:	2700      	movs	r7, #0
 801426e:	e9da 2313 	ldrd	r2, r3, [sl, #76]	; 0x4c
 8014272:	60e7      	str	r7, [r4, #12]
 8014274:	f8ca 700c 	str.w	r7, [sl, #12]
 8014278:	2d00      	cmp	r5, #0
 801427a:	f040 80b5 	bne.w	80143e8 <rcl_wait_set_resize+0x208>
 801427e:	68a0      	ldr	r0, [r4, #8]
 8014280:	b130      	cbz	r0, 8014290 <rcl_wait_set_resize+0xb0>
 8014282:	4641      	mov	r1, r8
 8014284:	4790      	blx	r2
 8014286:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801428a:	60a5      	str	r5, [r4, #8]
 801428c:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8014290:	2700      	movs	r7, #0
 8014292:	19ad      	adds	r5, r5, r6
 8014294:	f8ca 7010 	str.w	r7, [sl, #16]
 8014298:	f040 80be 	bne.w	8014418 <rcl_wait_set_resize+0x238>
 801429c:	f8da 0014 	ldr.w	r0, [sl, #20]
 80142a0:	b148      	cbz	r0, 80142b6 <rcl_wait_set_resize+0xd6>
 80142a2:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 80142a6:	4641      	mov	r1, r8
 80142a8:	4798      	blx	r3
 80142aa:	f8ca 5014 	str.w	r5, [sl, #20]
 80142ae:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80142b2:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 80142b6:	2500      	movs	r5, #0
 80142b8:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 80142bc:	6165      	str	r5, [r4, #20]
 80142be:	f8ca 5040 	str.w	r5, [sl, #64]	; 0x40
 80142c2:	2e00      	cmp	r6, #0
 80142c4:	f040 80bf 	bne.w	8014446 <rcl_wait_set_resize+0x266>
 80142c8:	6920      	ldr	r0, [r4, #16]
 80142ca:	b140      	cbz	r0, 80142de <rcl_wait_set_resize+0xfe>
 80142cc:	4641      	mov	r1, r8
 80142ce:	47c8      	blx	r9
 80142d0:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80142d4:	6126      	str	r6, [r4, #16]
 80142d6:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 80142da:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 80142de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80142e0:	2500      	movs	r5, #0
 80142e2:	61e5      	str	r5, [r4, #28]
 80142e4:	f8ca 5018 	str.w	r5, [sl, #24]
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	f040 80c1 	bne.w	8014470 <rcl_wait_set_resize+0x290>
 80142ee:	69a0      	ldr	r0, [r4, #24]
 80142f0:	b128      	cbz	r0, 80142fe <rcl_wait_set_resize+0x11e>
 80142f2:	4641      	mov	r1, r8
 80142f4:	47c8      	blx	r9
 80142f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80142f8:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80142fc:	61a3      	str	r3, [r4, #24]
 80142fe:	f8da 0020 	ldr.w	r0, [sl, #32]
 8014302:	b130      	cbz	r0, 8014312 <rcl_wait_set_resize+0x132>
 8014304:	4641      	mov	r1, r8
 8014306:	47c8      	blx	r9
 8014308:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801430c:	2300      	movs	r3, #0
 801430e:	e9ca 3307 	strd	r3, r3, [sl, #28]
 8014312:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014314:	f8da 7058 	ldr.w	r7, [sl, #88]	; 0x58
 8014318:	2600      	movs	r6, #0
 801431a:	e9da 8913 	ldrd	r8, r9, [sl, #76]	; 0x4c
 801431e:	6266      	str	r6, [r4, #36]	; 0x24
 8014320:	f8ca 6024 	str.w	r6, [sl, #36]	; 0x24
 8014324:	2b00      	cmp	r3, #0
 8014326:	f000 80c8 	beq.w	80144ba <rcl_wait_set_resize+0x2da>
 801432a:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 801432e:	6a20      	ldr	r0, [r4, #32]
 8014330:	4651      	mov	r1, sl
 8014332:	463a      	mov	r2, r7
 8014334:	47c8      	blx	r9
 8014336:	6220      	str	r0, [r4, #32]
 8014338:	2800      	cmp	r0, #0
 801433a:	d051      	beq.n	80143e0 <rcl_wait_set_resize+0x200>
 801433c:	4652      	mov	r2, sl
 801433e:	4631      	mov	r1, r6
 8014340:	f004 f966 	bl	8018610 <memset>
 8014344:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8014346:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014348:	6263      	str	r3, [r4, #36]	; 0x24
 801434a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 801434c:	62ae      	str	r6, [r5, #40]	; 0x28
 801434e:	463a      	mov	r2, r7
 8014350:	4651      	mov	r1, sl
 8014352:	47c8      	blx	r9
 8014354:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014356:	62e8      	str	r0, [r5, #44]	; 0x2c
 8014358:	6add      	ldr	r5, [r3, #44]	; 0x2c
 801435a:	2d00      	cmp	r5, #0
 801435c:	f000 8105 	beq.w	801456a <rcl_wait_set_resize+0x38a>
 8014360:	4652      	mov	r2, sl
 8014362:	4631      	mov	r1, r6
 8014364:	4628      	mov	r0, r5
 8014366:	f004 f953 	bl	8018610 <memset>
 801436a:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801436e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014370:	f8da 6058 	ldr.w	r6, [sl, #88]	; 0x58
 8014374:	2500      	movs	r5, #0
 8014376:	e9da 7913 	ldrd	r7, r9, [sl, #76]	; 0x4c
 801437a:	62e5      	str	r5, [r4, #44]	; 0x2c
 801437c:	f8ca 5030 	str.w	r5, [sl, #48]	; 0x30
 8014380:	2b00      	cmp	r3, #0
 8014382:	f040 80af 	bne.w	80144e4 <rcl_wait_set_resize+0x304>
 8014386:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8014388:	b128      	cbz	r0, 8014396 <rcl_wait_set_resize+0x1b6>
 801438a:	4631      	mov	r1, r6
 801438c:	47b8      	blx	r7
 801438e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014390:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8014394:	62a3      	str	r3, [r4, #40]	; 0x28
 8014396:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 801439a:	b310      	cbz	r0, 80143e2 <rcl_wait_set_resize+0x202>
 801439c:	4631      	mov	r1, r6
 801439e:	47b8      	blx	r7
 80143a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80143a2:	2000      	movs	r0, #0
 80143a4:	e9c3 000d 	strd	r0, r0, [r3, #52]	; 0x34
 80143a8:	b003      	add	sp, #12
 80143aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143ae:	6800      	ldr	r0, [r0, #0]
 80143b0:	b120      	cbz	r0, 80143bc <rcl_wait_set_resize+0x1dc>
 80143b2:	4649      	mov	r1, r9
 80143b4:	47d8      	blx	fp
 80143b6:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80143ba:	6027      	str	r7, [r4, #0]
 80143bc:	f8da 0008 	ldr.w	r0, [sl, #8]
 80143c0:	2800      	cmp	r0, #0
 80143c2:	f43f af51 	beq.w	8014268 <rcl_wait_set_resize+0x88>
 80143c6:	4649      	mov	r1, r9
 80143c8:	47d8      	blx	fp
 80143ca:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80143ce:	2300      	movs	r3, #0
 80143d0:	e9ca 3301 	strd	r3, r3, [sl, #4]
 80143d4:	e748      	b.n	8014268 <rcl_wait_set_resize+0x88>
 80143d6:	6820      	ldr	r0, [r4, #0]
 80143d8:	4649      	mov	r1, r9
 80143da:	47d8      	blx	fp
 80143dc:	e9c4 7700 	strd	r7, r7, [r4]
 80143e0:	200a      	movs	r0, #10
 80143e2:	b003      	add	sp, #12
 80143e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143e8:	ea4f 0985 	mov.w	r9, r5, lsl #2
 80143ec:	68a0      	ldr	r0, [r4, #8]
 80143ee:	4642      	mov	r2, r8
 80143f0:	4649      	mov	r1, r9
 80143f2:	4798      	blx	r3
 80143f4:	60a0      	str	r0, [r4, #8]
 80143f6:	2800      	cmp	r0, #0
 80143f8:	d0f2      	beq.n	80143e0 <rcl_wait_set_resize+0x200>
 80143fa:	4639      	mov	r1, r7
 80143fc:	464a      	mov	r2, r9
 80143fe:	f004 f907 	bl	8018610 <memset>
 8014402:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8014406:	60e5      	str	r5, [r4, #12]
 8014408:	2700      	movs	r7, #0
 801440a:	19ad      	adds	r5, r5, r6
 801440c:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8014410:	f8ca 7010 	str.w	r7, [sl, #16]
 8014414:	f43f af42 	beq.w	801429c <rcl_wait_set_resize+0xbc>
 8014418:	00ad      	lsls	r5, r5, #2
 801441a:	4642      	mov	r2, r8
 801441c:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
 8014420:	f8da 0014 	ldr.w	r0, [sl, #20]
 8014424:	4629      	mov	r1, r5
 8014426:	4798      	blx	r3
 8014428:	4680      	mov	r8, r0
 801442a:	f8ca 0014 	str.w	r0, [sl, #20]
 801442e:	2800      	cmp	r0, #0
 8014430:	f000 8084 	beq.w	801453c <rcl_wait_set_resize+0x35c>
 8014434:	462a      	mov	r2, r5
 8014436:	4639      	mov	r1, r7
 8014438:	f004 f8ea 	bl	8018610 <memset>
 801443c:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8014440:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8014444:	e737      	b.n	80142b6 <rcl_wait_set_resize+0xd6>
 8014446:	ea4f 0986 	mov.w	r9, r6, lsl #2
 801444a:	6920      	ldr	r0, [r4, #16]
 801444c:	4642      	mov	r2, r8
 801444e:	4649      	mov	r1, r9
 8014450:	47b8      	blx	r7
 8014452:	6120      	str	r0, [r4, #16]
 8014454:	2800      	cmp	r0, #0
 8014456:	d0c3      	beq.n	80143e0 <rcl_wait_set_resize+0x200>
 8014458:	464a      	mov	r2, r9
 801445a:	4629      	mov	r1, r5
 801445c:	f004 f8d8 	bl	8018610 <memset>
 8014460:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8014464:	6166      	str	r6, [r4, #20]
 8014466:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 801446a:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 801446e:	e736      	b.n	80142de <rcl_wait_set_resize+0xfe>
 8014470:	009e      	lsls	r6, r3, #2
 8014472:	69a0      	ldr	r0, [r4, #24]
 8014474:	4631      	mov	r1, r6
 8014476:	4642      	mov	r2, r8
 8014478:	47b8      	blx	r7
 801447a:	61a0      	str	r0, [r4, #24]
 801447c:	2800      	cmp	r0, #0
 801447e:	d0af      	beq.n	80143e0 <rcl_wait_set_resize+0x200>
 8014480:	4632      	mov	r2, r6
 8014482:	4629      	mov	r1, r5
 8014484:	f004 f8c4 	bl	8018610 <memset>
 8014488:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801448c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801448e:	61e3      	str	r3, [r4, #28]
 8014490:	f8da 0020 	ldr.w	r0, [sl, #32]
 8014494:	f8ca 501c 	str.w	r5, [sl, #28]
 8014498:	4642      	mov	r2, r8
 801449a:	4631      	mov	r1, r6
 801449c:	47b8      	blx	r7
 801449e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80144a0:	f8ca 0020 	str.w	r0, [sl, #32]
 80144a4:	6a1f      	ldr	r7, [r3, #32]
 80144a6:	2f00      	cmp	r7, #0
 80144a8:	d058      	beq.n	801455c <rcl_wait_set_resize+0x37c>
 80144aa:	4632      	mov	r2, r6
 80144ac:	4629      	mov	r1, r5
 80144ae:	4638      	mov	r0, r7
 80144b0:	f004 f8ae 	bl	8018610 <memset>
 80144b4:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80144b8:	e72b      	b.n	8014312 <rcl_wait_set_resize+0x132>
 80144ba:	6a20      	ldr	r0, [r4, #32]
 80144bc:	b128      	cbz	r0, 80144ca <rcl_wait_set_resize+0x2ea>
 80144be:	4639      	mov	r1, r7
 80144c0:	47c0      	blx	r8
 80144c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80144c4:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80144c8:	6223      	str	r3, [r4, #32]
 80144ca:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
 80144ce:	2800      	cmp	r0, #0
 80144d0:	f43f af4d 	beq.w	801436e <rcl_wait_set_resize+0x18e>
 80144d4:	4639      	mov	r1, r7
 80144d6:	47c0      	blx	r8
 80144d8:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80144dc:	2300      	movs	r3, #0
 80144de:	e9ca 330a 	strd	r3, r3, [sl, #40]	; 0x28
 80144e2:	e744      	b.n	801436e <rcl_wait_set_resize+0x18e>
 80144e4:	ea4f 0883 	mov.w	r8, r3, lsl #2
 80144e8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80144ea:	4641      	mov	r1, r8
 80144ec:	4632      	mov	r2, r6
 80144ee:	47c8      	blx	r9
 80144f0:	62a0      	str	r0, [r4, #40]	; 0x28
 80144f2:	2800      	cmp	r0, #0
 80144f4:	f43f af74 	beq.w	80143e0 <rcl_wait_set_resize+0x200>
 80144f8:	4642      	mov	r2, r8
 80144fa:	4629      	mov	r1, r5
 80144fc:	f004 f888 	bl	8018610 <memset>
 8014500:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8014504:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014506:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014508:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 801450c:	f8ca 5034 	str.w	r5, [sl, #52]	; 0x34
 8014510:	4632      	mov	r2, r6
 8014512:	4641      	mov	r1, r8
 8014514:	47c8      	blx	r9
 8014516:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014518:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 801451c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801451e:	b35b      	cbz	r3, 8014578 <rcl_wait_set_resize+0x398>
 8014520:	4642      	mov	r2, r8
 8014522:	4618      	mov	r0, r3
 8014524:	4629      	mov	r1, r5
 8014526:	f004 f873 	bl	8018610 <memset>
 801452a:	4628      	mov	r0, r5
 801452c:	b003      	add	sp, #12
 801452e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014532:	200b      	movs	r0, #11
 8014534:	4770      	bx	lr
 8014536:	f44f 7061 	mov.w	r0, #900	; 0x384
 801453a:	e752      	b.n	80143e2 <rcl_wait_set_resize+0x202>
 801453c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801453e:	68a0      	ldr	r0, [r4, #8]
 8014540:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014542:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8014544:	4790      	blx	r2
 8014546:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014548:	6920      	ldr	r0, [r4, #16]
 801454a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801454c:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801454e:	e9c4 8802 	strd	r8, r8, [r4, #8]
 8014552:	4790      	blx	r2
 8014554:	e9c4 8804 	strd	r8, r8, [r4, #16]
 8014558:	200a      	movs	r0, #10
 801455a:	e742      	b.n	80143e2 <rcl_wait_set_resize+0x202>
 801455c:	69a0      	ldr	r0, [r4, #24]
 801455e:	4641      	mov	r1, r8
 8014560:	47c8      	blx	r9
 8014562:	e9c4 7706 	strd	r7, r7, [r4, #24]
 8014566:	200a      	movs	r0, #10
 8014568:	e73b      	b.n	80143e2 <rcl_wait_set_resize+0x202>
 801456a:	6a20      	ldr	r0, [r4, #32]
 801456c:	4639      	mov	r1, r7
 801456e:	47c0      	blx	r8
 8014570:	e9c4 5508 	strd	r5, r5, [r4, #32]
 8014574:	200a      	movs	r0, #10
 8014576:	e734      	b.n	80143e2 <rcl_wait_set_resize+0x202>
 8014578:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801457a:	9300      	str	r3, [sp, #0]
 801457c:	4631      	mov	r1, r6
 801457e:	47b8      	blx	r7
 8014580:	9b00      	ldr	r3, [sp, #0]
 8014582:	200a      	movs	r0, #10
 8014584:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8014588:	e72b      	b.n	80143e2 <rcl_wait_set_resize+0x202>
 801458a:	bf00      	nop

0801458c <rcl_wait_set_init>:
 801458c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014590:	b084      	sub	sp, #16
 8014592:	4604      	mov	r4, r0
 8014594:	a810      	add	r0, sp, #64	; 0x40
 8014596:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 801459a:	460f      	mov	r7, r1
 801459c:	4690      	mov	r8, r2
 801459e:	4699      	mov	r9, r3
 80145a0:	f7f9 f932 	bl	800d808 <rcutils_allocator_is_valid>
 80145a4:	2800      	cmp	r0, #0
 80145a6:	d06b      	beq.n	8014680 <rcl_wait_set_init+0xf4>
 80145a8:	2c00      	cmp	r4, #0
 80145aa:	d069      	beq.n	8014680 <rcl_wait_set_init+0xf4>
 80145ac:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80145ae:	b125      	cbz	r5, 80145ba <rcl_wait_set_init+0x2e>
 80145b0:	2564      	movs	r5, #100	; 0x64
 80145b2:	4628      	mov	r0, r5
 80145b4:	b004      	add	sp, #16
 80145b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80145ba:	f1ba 0f00 	cmp.w	sl, #0
 80145be:	d05f      	beq.n	8014680 <rcl_wait_set_init+0xf4>
 80145c0:	4650      	mov	r0, sl
 80145c2:	f7fe fa6b 	bl	8012a9c <rcl_context_is_valid>
 80145c6:	2800      	cmp	r0, #0
 80145c8:	d067      	beq.n	801469a <rcl_wait_set_init+0x10e>
 80145ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80145cc:	9914      	ldr	r1, [sp, #80]	; 0x50
 80145ce:	205c      	movs	r0, #92	; 0x5c
 80145d0:	4798      	blx	r3
 80145d2:	6320      	str	r0, [r4, #48]	; 0x30
 80145d4:	2800      	cmp	r0, #0
 80145d6:	d062      	beq.n	801469e <rcl_wait_set_init+0x112>
 80145d8:	225c      	movs	r2, #92	; 0x5c
 80145da:	4629      	mov	r1, r5
 80145dc:	f004 f818 	bl	8018610 <memset>
 80145e0:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 80145e4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80145e8:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80145ea:	f8dc e000 	ldr.w	lr, [ip]
 80145ee:	f8c6 a044 	str.w	sl, [r6, #68]	; 0x44
 80145f2:	f106 0c48 	add.w	ip, r6, #72	; 0x48
 80145f6:	e9c6 5504 	strd	r5, r5, [r6, #16]
 80145fa:	e9c6 5507 	strd	r5, r5, [r6, #28]
 80145fe:	e9c6 550a 	strd	r5, r5, [r6, #40]	; 0x28
 8014602:	e9c6 550d 	strd	r5, r5, [r6, #52]	; 0x34
 8014606:	60b5      	str	r5, [r6, #8]
 8014608:	6075      	str	r5, [r6, #4]
 801460a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801460e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8014612:	1899      	adds	r1, r3, r2
 8014614:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014616:	f8da 0000 	ldr.w	r0, [sl]
 801461a:	f8cc e000 	str.w	lr, [ip]
 801461e:	4419      	add	r1, r3
 8014620:	4441      	add	r1, r8
 8014622:	3028      	adds	r0, #40	; 0x28
 8014624:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 8014628:	f001 fc9a 	bl	8015f60 <rmw_create_wait_set>
 801462c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801462e:	63f0      	str	r0, [r6, #60]	; 0x3c
 8014630:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8014632:	b350      	cbz	r0, 801468a <rcl_wait_set_init+0xfe>
 8014634:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014636:	9302      	str	r3, [sp, #8]
 8014638:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801463a:	9301      	str	r3, [sp, #4]
 801463c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801463e:	9300      	str	r3, [sp, #0]
 8014640:	4642      	mov	r2, r8
 8014642:	464b      	mov	r3, r9
 8014644:	4639      	mov	r1, r7
 8014646:	4620      	mov	r0, r4
 8014648:	f7ff fdca 	bl	80141e0 <rcl_wait_set_resize>
 801464c:	4605      	mov	r5, r0
 801464e:	2800      	cmp	r0, #0
 8014650:	d0af      	beq.n	80145b2 <rcl_wait_set_init+0x26>
 8014652:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014654:	bb2b      	cbnz	r3, 80146a2 <rcl_wait_set_init+0x116>
 8014656:	2600      	movs	r6, #0
 8014658:	e9cd 6601 	strd	r6, r6, [sp, #4]
 801465c:	9600      	str	r6, [sp, #0]
 801465e:	4633      	mov	r3, r6
 8014660:	4632      	mov	r2, r6
 8014662:	4631      	mov	r1, r6
 8014664:	4620      	mov	r0, r4
 8014666:	f7ff fdbb 	bl	80141e0 <rcl_wait_set_resize>
 801466a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801466c:	2800      	cmp	r0, #0
 801466e:	d0a0      	beq.n	80145b2 <rcl_wait_set_init+0x26>
 8014670:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8014672:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8014674:	4798      	blx	r3
 8014676:	4628      	mov	r0, r5
 8014678:	6326      	str	r6, [r4, #48]	; 0x30
 801467a:	b004      	add	sp, #16
 801467c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014680:	250b      	movs	r5, #11
 8014682:	4628      	mov	r0, r5
 8014684:	b004      	add	sp, #16
 8014686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801468a:	2501      	movs	r5, #1
 801468c:	f001 fc72 	bl	8015f74 <rmw_destroy_wait_set>
 8014690:	2800      	cmp	r0, #0
 8014692:	bf18      	it	ne
 8014694:	f44f 7561 	movne.w	r5, #900	; 0x384
 8014698:	e7dd      	b.n	8014656 <rcl_wait_set_init+0xca>
 801469a:	2565      	movs	r5, #101	; 0x65
 801469c:	e789      	b.n	80145b2 <rcl_wait_set_init+0x26>
 801469e:	250a      	movs	r5, #10
 80146a0:	e787      	b.n	80145b2 <rcl_wait_set_init+0x26>
 80146a2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80146a4:	e7f2      	b.n	801468c <rcl_wait_set_init+0x100>
 80146a6:	bf00      	nop

080146a8 <rcl_wait_set_add_guard_condition>:
 80146a8:	b320      	cbz	r0, 80146f4 <rcl_wait_set_add_guard_condition+0x4c>
 80146aa:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80146ac:	b570      	push	{r4, r5, r6, lr}
 80146ae:	4604      	mov	r4, r0
 80146b0:	b1d3      	cbz	r3, 80146e8 <rcl_wait_set_add_guard_condition+0x40>
 80146b2:	b319      	cbz	r1, 80146fc <rcl_wait_set_add_guard_condition+0x54>
 80146b4:	68dd      	ldr	r5, [r3, #12]
 80146b6:	68e0      	ldr	r0, [r4, #12]
 80146b8:	4285      	cmp	r5, r0
 80146ba:	d218      	bcs.n	80146ee <rcl_wait_set_add_guard_condition+0x46>
 80146bc:	68a0      	ldr	r0, [r4, #8]
 80146be:	1c6e      	adds	r6, r5, #1
 80146c0:	60de      	str	r6, [r3, #12]
 80146c2:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80146c6:	b102      	cbz	r2, 80146ca <rcl_wait_set_add_guard_condition+0x22>
 80146c8:	6015      	str	r5, [r2, #0]
 80146ca:	4608      	mov	r0, r1
 80146cc:	f003 f96a 	bl	80179a4 <rcl_guard_condition_get_rmw_handle>
 80146d0:	b190      	cbz	r0, 80146f8 <rcl_wait_set_add_guard_condition+0x50>
 80146d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80146d4:	6842      	ldr	r2, [r0, #4]
 80146d6:	695b      	ldr	r3, [r3, #20]
 80146d8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80146dc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80146de:	6913      	ldr	r3, [r2, #16]
 80146e0:	3301      	adds	r3, #1
 80146e2:	6113      	str	r3, [r2, #16]
 80146e4:	2000      	movs	r0, #0
 80146e6:	bd70      	pop	{r4, r5, r6, pc}
 80146e8:	f44f 7061 	mov.w	r0, #900	; 0x384
 80146ec:	bd70      	pop	{r4, r5, r6, pc}
 80146ee:	f240 3086 	movw	r0, #902	; 0x386
 80146f2:	bd70      	pop	{r4, r5, r6, pc}
 80146f4:	200b      	movs	r0, #11
 80146f6:	4770      	bx	lr
 80146f8:	2001      	movs	r0, #1
 80146fa:	bd70      	pop	{r4, r5, r6, pc}
 80146fc:	200b      	movs	r0, #11
 80146fe:	bd70      	pop	{r4, r5, r6, pc}

08014700 <rcl_wait_set_add_timer>:
 8014700:	b340      	cbz	r0, 8014754 <rcl_wait_set_add_timer+0x54>
 8014702:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8014704:	b570      	push	{r4, r5, r6, lr}
 8014706:	4604      	mov	r4, r0
 8014708:	b1f3      	cbz	r3, 8014748 <rcl_wait_set_add_timer+0x48>
 801470a:	b329      	cbz	r1, 8014758 <rcl_wait_set_add_timer+0x58>
 801470c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 801470e:	6965      	ldr	r5, [r4, #20]
 8014710:	42a8      	cmp	r0, r5
 8014712:	d21c      	bcs.n	801474e <rcl_wait_set_add_timer+0x4e>
 8014714:	6925      	ldr	r5, [r4, #16]
 8014716:	1c46      	adds	r6, r0, #1
 8014718:	641e      	str	r6, [r3, #64]	; 0x40
 801471a:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 801471e:	b102      	cbz	r2, 8014722 <rcl_wait_set_add_timer+0x22>
 8014720:	6010      	str	r0, [r2, #0]
 8014722:	4608      	mov	r0, r1
 8014724:	f7ff faa4 	bl	8013c70 <rcl_timer_get_guard_condition>
 8014728:	b168      	cbz	r0, 8014746 <rcl_wait_set_add_timer+0x46>
 801472a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801472c:	68e3      	ldr	r3, [r4, #12]
 801472e:	6c15      	ldr	r5, [r2, #64]	; 0x40
 8014730:	3b01      	subs	r3, #1
 8014732:	441d      	add	r5, r3
 8014734:	f003 f936 	bl	80179a4 <rcl_guard_condition_get_rmw_handle>
 8014738:	b180      	cbz	r0, 801475c <rcl_wait_set_add_timer+0x5c>
 801473a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801473c:	6842      	ldr	r2, [r0, #4]
 801473e:	695b      	ldr	r3, [r3, #20]
 8014740:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014744:	2000      	movs	r0, #0
 8014746:	bd70      	pop	{r4, r5, r6, pc}
 8014748:	f44f 7061 	mov.w	r0, #900	; 0x384
 801474c:	bd70      	pop	{r4, r5, r6, pc}
 801474e:	f240 3086 	movw	r0, #902	; 0x386
 8014752:	bd70      	pop	{r4, r5, r6, pc}
 8014754:	200b      	movs	r0, #11
 8014756:	4770      	bx	lr
 8014758:	200b      	movs	r0, #11
 801475a:	bd70      	pop	{r4, r5, r6, pc}
 801475c:	2001      	movs	r0, #1
 801475e:	bd70      	pop	{r4, r5, r6, pc}

08014760 <rcl_wait_set_add_client>:
 8014760:	b320      	cbz	r0, 80147ac <rcl_wait_set_add_client+0x4c>
 8014762:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8014764:	b570      	push	{r4, r5, r6, lr}
 8014766:	4604      	mov	r4, r0
 8014768:	b1d3      	cbz	r3, 80147a0 <rcl_wait_set_add_client+0x40>
 801476a:	b319      	cbz	r1, 80147b4 <rcl_wait_set_add_client+0x54>
 801476c:	699d      	ldr	r5, [r3, #24]
 801476e:	69e0      	ldr	r0, [r4, #28]
 8014770:	4285      	cmp	r5, r0
 8014772:	d218      	bcs.n	80147a6 <rcl_wait_set_add_client+0x46>
 8014774:	69a0      	ldr	r0, [r4, #24]
 8014776:	1c6e      	adds	r6, r5, #1
 8014778:	619e      	str	r6, [r3, #24]
 801477a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801477e:	b102      	cbz	r2, 8014782 <rcl_wait_set_add_client+0x22>
 8014780:	6015      	str	r5, [r2, #0]
 8014782:	4608      	mov	r0, r1
 8014784:	f7fe f92a 	bl	80129dc <rcl_client_get_rmw_handle>
 8014788:	b190      	cbz	r0, 80147b0 <rcl_wait_set_add_client+0x50>
 801478a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801478c:	6842      	ldr	r2, [r0, #4]
 801478e:	6a1b      	ldr	r3, [r3, #32]
 8014790:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014794:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8014796:	69d3      	ldr	r3, [r2, #28]
 8014798:	3301      	adds	r3, #1
 801479a:	61d3      	str	r3, [r2, #28]
 801479c:	2000      	movs	r0, #0
 801479e:	bd70      	pop	{r4, r5, r6, pc}
 80147a0:	f44f 7061 	mov.w	r0, #900	; 0x384
 80147a4:	bd70      	pop	{r4, r5, r6, pc}
 80147a6:	f240 3086 	movw	r0, #902	; 0x386
 80147aa:	bd70      	pop	{r4, r5, r6, pc}
 80147ac:	200b      	movs	r0, #11
 80147ae:	4770      	bx	lr
 80147b0:	2001      	movs	r0, #1
 80147b2:	bd70      	pop	{r4, r5, r6, pc}
 80147b4:	200b      	movs	r0, #11
 80147b6:	bd70      	pop	{r4, r5, r6, pc}

080147b8 <rcl_wait_set_add_service>:
 80147b8:	b320      	cbz	r0, 8014804 <rcl_wait_set_add_service+0x4c>
 80147ba:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80147bc:	b570      	push	{r4, r5, r6, lr}
 80147be:	4604      	mov	r4, r0
 80147c0:	b1d3      	cbz	r3, 80147f8 <rcl_wait_set_add_service+0x40>
 80147c2:	b319      	cbz	r1, 801480c <rcl_wait_set_add_service+0x54>
 80147c4:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80147c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80147c8:	4285      	cmp	r5, r0
 80147ca:	d218      	bcs.n	80147fe <rcl_wait_set_add_service+0x46>
 80147cc:	6a20      	ldr	r0, [r4, #32]
 80147ce:	1c6e      	adds	r6, r5, #1
 80147d0:	625e      	str	r6, [r3, #36]	; 0x24
 80147d2:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80147d6:	b102      	cbz	r2, 80147da <rcl_wait_set_add_service+0x22>
 80147d8:	6015      	str	r5, [r2, #0]
 80147da:	4608      	mov	r0, r1
 80147dc:	f7ff f84e 	bl	801387c <rcl_service_get_rmw_handle>
 80147e0:	b190      	cbz	r0, 8014808 <rcl_wait_set_add_service+0x50>
 80147e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80147e4:	6842      	ldr	r2, [r0, #4]
 80147e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147e8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80147ec:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80147ee:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80147f0:	3301      	adds	r3, #1
 80147f2:	6293      	str	r3, [r2, #40]	; 0x28
 80147f4:	2000      	movs	r0, #0
 80147f6:	bd70      	pop	{r4, r5, r6, pc}
 80147f8:	f44f 7061 	mov.w	r0, #900	; 0x384
 80147fc:	bd70      	pop	{r4, r5, r6, pc}
 80147fe:	f240 3086 	movw	r0, #902	; 0x386
 8014802:	bd70      	pop	{r4, r5, r6, pc}
 8014804:	200b      	movs	r0, #11
 8014806:	4770      	bx	lr
 8014808:	2001      	movs	r0, #1
 801480a:	bd70      	pop	{r4, r5, r6, pc}
 801480c:	200b      	movs	r0, #11
 801480e:	bd70      	pop	{r4, r5, r6, pc}

08014810 <rcl_wait>:
 8014810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014814:	b08f      	sub	sp, #60	; 0x3c
 8014816:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801481a:	2800      	cmp	r0, #0
 801481c:	f000 814c 	beq.w	8014ab8 <rcl_wait+0x2a8>
 8014820:	6b05      	ldr	r5, [r0, #48]	; 0x30
 8014822:	4604      	mov	r4, r0
 8014824:	2d00      	cmp	r5, #0
 8014826:	f000 80bc 	beq.w	80149a2 <rcl_wait+0x192>
 801482a:	6843      	ldr	r3, [r0, #4]
 801482c:	b973      	cbnz	r3, 801484c <rcl_wait+0x3c>
 801482e:	68e3      	ldr	r3, [r4, #12]
 8014830:	b963      	cbnz	r3, 801484c <rcl_wait+0x3c>
 8014832:	6963      	ldr	r3, [r4, #20]
 8014834:	b953      	cbnz	r3, 801484c <rcl_wait+0x3c>
 8014836:	69e3      	ldr	r3, [r4, #28]
 8014838:	b943      	cbnz	r3, 801484c <rcl_wait+0x3c>
 801483a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801483c:	b933      	cbnz	r3, 801484c <rcl_wait+0x3c>
 801483e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014840:	b923      	cbnz	r3, 801484c <rcl_wait+0x3c>
 8014842:	f240 3085 	movw	r0, #901	; 0x385
 8014846:	b00f      	add	sp, #60	; 0x3c
 8014848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801484c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014850:	2a01      	cmp	r2, #1
 8014852:	f173 0300 	sbcs.w	r3, r3, #0
 8014856:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8014858:	db56      	blt.n	8014908 <rcl_wait+0xf8>
 801485a:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 801485e:	2900      	cmp	r1, #0
 8014860:	f000 8149 	beq.w	8014af6 <rcl_wait+0x2e6>
 8014864:	2300      	movs	r3, #0
 8014866:	9307      	str	r3, [sp, #28]
 8014868:	469b      	mov	fp, r3
 801486a:	f04f 0800 	mov.w	r8, #0
 801486e:	f04f 0900 	mov.w	r9, #0
 8014872:	e00d      	b.n	8014890 <rcl_wait+0x80>
 8014874:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8014876:	6922      	ldr	r2, [r4, #16]
 8014878:	6c29      	ldr	r1, [r5, #64]	; 0x40
 801487a:	f842 000a 	str.w	r0, [r2, sl]
 801487e:	f118 0801 	adds.w	r8, r8, #1
 8014882:	f149 0900 	adc.w	r9, r9, #0
 8014886:	2300      	movs	r3, #0
 8014888:	4599      	cmp	r9, r3
 801488a:	bf08      	it	eq
 801488c:	4588      	cmpeq	r8, r1
 801488e:	d243      	bcs.n	8014918 <rcl_wait+0x108>
 8014890:	6922      	ldr	r2, [r4, #16]
 8014892:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 8014896:	f852 000a 	ldr.w	r0, [r2, sl]
 801489a:	2800      	cmp	r0, #0
 801489c:	d0ef      	beq.n	801487e <rcl_wait+0x6e>
 801489e:	68e2      	ldr	r2, [r4, #12]
 80148a0:	6969      	ldr	r1, [r5, #20]
 80148a2:	4442      	add	r2, r8
 80148a4:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 80148a8:	b13b      	cbz	r3, 80148ba <rcl_wait+0xaa>
 80148aa:	692a      	ldr	r2, [r5, #16]
 80148ac:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80148b0:	6921      	ldr	r1, [r4, #16]
 80148b2:	3201      	adds	r2, #1
 80148b4:	f851 000a 	ldr.w	r0, [r1, sl]
 80148b8:	612a      	str	r2, [r5, #16]
 80148ba:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 80148be:	f88d b027 	strb.w	fp, [sp, #39]	; 0x27
 80148c2:	f7ff f9c3 	bl	8013c4c <rcl_timer_is_canceled>
 80148c6:	2800      	cmp	r0, #0
 80148c8:	d1bd      	bne.n	8014846 <rcl_wait+0x36>
 80148ca:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 80148ce:	2a00      	cmp	r2, #0
 80148d0:	d1d0      	bne.n	8014874 <rcl_wait+0x64>
 80148d2:	6922      	ldr	r2, [r4, #16]
 80148d4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80148d8:	f852 000a 	ldr.w	r0, [r2, sl]
 80148dc:	a90a      	add	r1, sp, #40	; 0x28
 80148de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80148e2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80148e6:	f7ff f98d 	bl	8013c04 <rcl_timer_get_time_until_next_call>
 80148ea:	2800      	cmp	r0, #0
 80148ec:	d1ab      	bne.n	8014846 <rcl_wait+0x36>
 80148ee:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80148f2:	42b2      	cmp	r2, r6
 80148f4:	eb73 0107 	sbcs.w	r1, r3, r7
 80148f8:	da03      	bge.n	8014902 <rcl_wait+0xf2>
 80148fa:	461f      	mov	r7, r3
 80148fc:	2301      	movs	r3, #1
 80148fe:	4616      	mov	r6, r2
 8014900:	9307      	str	r3, [sp, #28]
 8014902:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8014904:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8014906:	e7ba      	b.n	801487e <rcl_wait+0x6e>
 8014908:	2900      	cmp	r1, #0
 801490a:	f000 80de 	beq.w	8014aca <rcl_wait+0x2ba>
 801490e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8014912:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8014916:	e7a5      	b.n	8014864 <rcl_wait+0x54>
 8014918:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801491c:	4313      	orrs	r3, r2
 801491e:	d145      	bne.n	80149ac <rcl_wait+0x19c>
 8014920:	2300      	movs	r3, #0
 8014922:	2200      	movs	r2, #0
 8014924:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014928:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801492c:	ab0a      	add	r3, sp, #40	; 0x28
 801492e:	9302      	str	r3, [sp, #8]
 8014930:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8014932:	9301      	str	r3, [sp, #4]
 8014934:	f105 0334 	add.w	r3, r5, #52	; 0x34
 8014938:	9300      	str	r3, [sp, #0]
 801493a:	f105 0228 	add.w	r2, r5, #40	; 0x28
 801493e:	f105 031c 	add.w	r3, r5, #28
 8014942:	f105 0110 	add.w	r1, r5, #16
 8014946:	1d28      	adds	r0, r5, #4
 8014948:	f001 f98a 	bl	8015c60 <rmw_wait>
 801494c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801494e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014950:	4680      	mov	r8, r0
 8014952:	b30a      	cbz	r2, 8014998 <rcl_wait+0x188>
 8014954:	2500      	movs	r5, #0
 8014956:	462f      	mov	r7, r5
 8014958:	e004      	b.n	8014964 <rcl_wait+0x154>
 801495a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801495c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801495e:	3501      	adds	r5, #1
 8014960:	42aa      	cmp	r2, r5
 8014962:	d919      	bls.n	8014998 <rcl_wait+0x188>
 8014964:	6922      	ldr	r2, [r4, #16]
 8014966:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801496a:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 801496e:	00ae      	lsls	r6, r5, #2
 8014970:	2800      	cmp	r0, #0
 8014972:	d0f3      	beq.n	801495c <rcl_wait+0x14c>
 8014974:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
 8014978:	f7ff f90c 	bl	8013b94 <rcl_timer_is_ready>
 801497c:	2800      	cmp	r0, #0
 801497e:	f47f af62 	bne.w	8014846 <rcl_wait+0x36>
 8014982:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 8014986:	2a00      	cmp	r2, #0
 8014988:	d1e7      	bne.n	801495a <rcl_wait+0x14a>
 801498a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801498c:	6921      	ldr	r1, [r4, #16]
 801498e:	518a      	str	r2, [r1, r6]
 8014990:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014992:	3501      	adds	r5, #1
 8014994:	42aa      	cmp	r2, r5
 8014996:	d8e5      	bhi.n	8014964 <rcl_wait+0x154>
 8014998:	f038 0002 	bics.w	r0, r8, #2
 801499c:	d029      	beq.n	80149f2 <rcl_wait+0x1e2>
 801499e:	2001      	movs	r0, #1
 80149a0:	e751      	b.n	8014846 <rcl_wait+0x36>
 80149a2:	f44f 7061 	mov.w	r0, #900	; 0x384
 80149a6:	b00f      	add	sp, #60	; 0x3c
 80149a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80149b0:	2a01      	cmp	r2, #1
 80149b2:	f173 0300 	sbcs.w	r3, r3, #0
 80149b6:	f2c0 8083 	blt.w	8014ac0 <rcl_wait+0x2b0>
 80149ba:	2e00      	cmp	r6, #0
 80149bc:	f177 0300 	sbcs.w	r3, r7, #0
 80149c0:	bfbc      	itt	lt
 80149c2:	2600      	movlt	r6, #0
 80149c4:	2700      	movlt	r7, #0
 80149c6:	a34e      	add	r3, pc, #312	; (adr r3, 8014b00 <rcl_wait+0x2f0>)
 80149c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149cc:	4630      	mov	r0, r6
 80149ce:	4639      	mov	r1, r7
 80149d0:	f7ec f88c 	bl	8000aec <__aeabi_ldivmod>
 80149d4:	a34a      	add	r3, pc, #296	; (adr r3, 8014b00 <rcl_wait+0x2f0>)
 80149d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149da:	4680      	mov	r8, r0
 80149dc:	4689      	mov	r9, r1
 80149de:	4630      	mov	r0, r6
 80149e0:	4639      	mov	r1, r7
 80149e2:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80149e6:	f7ec f881 	bl	8000aec <__aeabi_ldivmod>
 80149ea:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80149ee:	ab0a      	add	r3, sp, #40	; 0x28
 80149f0:	e79d      	b.n	801492e <rcl_wait+0x11e>
 80149f2:	6866      	ldr	r6, [r4, #4]
 80149f4:	4602      	mov	r2, r0
 80149f6:	b91e      	cbnz	r6, 8014a00 <rcl_wait+0x1f0>
 80149f8:	e00d      	b.n	8014a16 <rcl_wait+0x206>
 80149fa:	3201      	adds	r2, #1
 80149fc:	42b2      	cmp	r2, r6
 80149fe:	d00a      	beq.n	8014a16 <rcl_wait+0x206>
 8014a00:	6899      	ldr	r1, [r3, #8]
 8014a02:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014a06:	2900      	cmp	r1, #0
 8014a08:	d1f7      	bne.n	80149fa <rcl_wait+0x1ea>
 8014a0a:	6825      	ldr	r5, [r4, #0]
 8014a0c:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8014a10:	3201      	adds	r2, #1
 8014a12:	42b2      	cmp	r2, r6
 8014a14:	d1f4      	bne.n	8014a00 <rcl_wait+0x1f0>
 8014a16:	68e6      	ldr	r6, [r4, #12]
 8014a18:	2200      	movs	r2, #0
 8014a1a:	b91e      	cbnz	r6, 8014a24 <rcl_wait+0x214>
 8014a1c:	e00d      	b.n	8014a3a <rcl_wait+0x22a>
 8014a1e:	3201      	adds	r2, #1
 8014a20:	42b2      	cmp	r2, r6
 8014a22:	d00a      	beq.n	8014a3a <rcl_wait+0x22a>
 8014a24:	6959      	ldr	r1, [r3, #20]
 8014a26:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014a2a:	2900      	cmp	r1, #0
 8014a2c:	d1f7      	bne.n	8014a1e <rcl_wait+0x20e>
 8014a2e:	68a5      	ldr	r5, [r4, #8]
 8014a30:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8014a34:	3201      	adds	r2, #1
 8014a36:	42b2      	cmp	r2, r6
 8014a38:	d1f4      	bne.n	8014a24 <rcl_wait+0x214>
 8014a3a:	69e6      	ldr	r6, [r4, #28]
 8014a3c:	2200      	movs	r2, #0
 8014a3e:	b91e      	cbnz	r6, 8014a48 <rcl_wait+0x238>
 8014a40:	e00d      	b.n	8014a5e <rcl_wait+0x24e>
 8014a42:	3201      	adds	r2, #1
 8014a44:	42b2      	cmp	r2, r6
 8014a46:	d00a      	beq.n	8014a5e <rcl_wait+0x24e>
 8014a48:	6a19      	ldr	r1, [r3, #32]
 8014a4a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014a4e:	2900      	cmp	r1, #0
 8014a50:	d1f7      	bne.n	8014a42 <rcl_wait+0x232>
 8014a52:	69a5      	ldr	r5, [r4, #24]
 8014a54:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8014a58:	3201      	adds	r2, #1
 8014a5a:	42b2      	cmp	r2, r6
 8014a5c:	d1f4      	bne.n	8014a48 <rcl_wait+0x238>
 8014a5e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014a60:	2200      	movs	r2, #0
 8014a62:	b91e      	cbnz	r6, 8014a6c <rcl_wait+0x25c>
 8014a64:	e00d      	b.n	8014a82 <rcl_wait+0x272>
 8014a66:	3201      	adds	r2, #1
 8014a68:	4296      	cmp	r6, r2
 8014a6a:	d00a      	beq.n	8014a82 <rcl_wait+0x272>
 8014a6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8014a6e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014a72:	2900      	cmp	r1, #0
 8014a74:	d1f7      	bne.n	8014a66 <rcl_wait+0x256>
 8014a76:	6a25      	ldr	r5, [r4, #32]
 8014a78:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8014a7c:	3201      	adds	r2, #1
 8014a7e:	4296      	cmp	r6, r2
 8014a80:	d1f4      	bne.n	8014a6c <rcl_wait+0x25c>
 8014a82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014a84:	2200      	movs	r2, #0
 8014a86:	b91e      	cbnz	r6, 8014a90 <rcl_wait+0x280>
 8014a88:	e00d      	b.n	8014aa6 <rcl_wait+0x296>
 8014a8a:	3201      	adds	r2, #1
 8014a8c:	42b2      	cmp	r2, r6
 8014a8e:	d00a      	beq.n	8014aa6 <rcl_wait+0x296>
 8014a90:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8014a92:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014a96:	2900      	cmp	r1, #0
 8014a98:	d1f7      	bne.n	8014a8a <rcl_wait+0x27a>
 8014a9a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8014a9c:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8014aa0:	3201      	adds	r2, #1
 8014aa2:	42b2      	cmp	r2, r6
 8014aa4:	d1f4      	bne.n	8014a90 <rcl_wait+0x280>
 8014aa6:	f1b8 0f02 	cmp.w	r8, #2
 8014aaa:	f47f aecc 	bne.w	8014846 <rcl_wait+0x36>
 8014aae:	9b07      	ldr	r3, [sp, #28]
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	bf08      	it	eq
 8014ab4:	2002      	moveq	r0, #2
 8014ab6:	e6c6      	b.n	8014846 <rcl_wait+0x36>
 8014ab8:	200b      	movs	r0, #11
 8014aba:	b00f      	add	sp, #60	; 0x3c
 8014abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ac0:	9b07      	ldr	r3, [sp, #28]
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	f47f af79 	bne.w	80149ba <rcl_wait+0x1aa>
 8014ac8:	e731      	b.n	801492e <rcl_wait+0x11e>
 8014aca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014ace:	4313      	orrs	r3, r2
 8014ad0:	bf08      	it	eq
 8014ad2:	9107      	streq	r1, [sp, #28]
 8014ad4:	f43f af24 	beq.w	8014920 <rcl_wait+0x110>
 8014ad8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014adc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8014ae0:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8014ae4:	2a01      	cmp	r2, #1
 8014ae6:	f173 0300 	sbcs.w	r3, r3, #0
 8014aea:	f04f 0300 	mov.w	r3, #0
 8014aee:	9307      	str	r3, [sp, #28]
 8014af0:	f6bf af63 	bge.w	80149ba <rcl_wait+0x1aa>
 8014af4:	e71b      	b.n	801492e <rcl_wait+0x11e>
 8014af6:	4632      	mov	r2, r6
 8014af8:	463b      	mov	r3, r7
 8014afa:	e7f3      	b.n	8014ae4 <rcl_wait+0x2d4>
 8014afc:	f3af 8000 	nop.w
 8014b00:	3b9aca00 	.word	0x3b9aca00
 8014b04:	00000000 	.word	0x00000000

08014b08 <__atomic_load_8>:
 8014b08:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8014b0c:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8014b10:	4b14      	ldr	r3, [pc, #80]	; (8014b64 <__atomic_load_8+0x5c>)
 8014b12:	4a15      	ldr	r2, [pc, #84]	; (8014b68 <__atomic_load_8+0x60>)
 8014b14:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8014b18:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8014b1c:	fb03 f301 	mul.w	r3, r3, r1
 8014b20:	ea83 33d3 	eor.w	r3, r3, r3, lsr #15
 8014b24:	fba2 1203 	umull	r1, r2, r2, r3
 8014b28:	0912      	lsrs	r2, r2, #4
 8014b2a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8014b2e:	b430      	push	{r4, r5}
 8014b30:	ebc2 02c1 	rsb	r2, r2, r1, lsl #3
 8014b34:	4c0d      	ldr	r4, [pc, #52]	; (8014b6c <__atomic_load_8+0x64>)
 8014b36:	1a9b      	subs	r3, r3, r2
 8014b38:	18e1      	adds	r1, r4, r3
 8014b3a:	f04f 0501 	mov.w	r5, #1
 8014b3e:	e8d1 2f4f 	ldrexb	r2, [r1]
 8014b42:	e8c1 5f4c 	strexb	ip, r5, [r1]
 8014b46:	f1bc 0f00 	cmp.w	ip, #0
 8014b4a:	d1f8      	bne.n	8014b3e <__atomic_load_8+0x36>
 8014b4c:	f3bf 8f5b 	dmb	ish
 8014b50:	b2d2      	uxtb	r2, r2
 8014b52:	2a00      	cmp	r2, #0
 8014b54:	d1f3      	bne.n	8014b3e <__atomic_load_8+0x36>
 8014b56:	e9d0 0100 	ldrd	r0, r1, [r0]
 8014b5a:	f3bf 8f5b 	dmb	ish
 8014b5e:	54e2      	strb	r2, [r4, r3]
 8014b60:	bc30      	pop	{r4, r5}
 8014b62:	4770      	bx	lr
 8014b64:	27d4eb2d 	.word	0x27d4eb2d
 8014b68:	b21642c9 	.word	0xb21642c9
 8014b6c:	20009c2c 	.word	0x20009c2c

08014b70 <__atomic_store_8>:
 8014b70:	b4f0      	push	{r4, r5, r6, r7}
 8014b72:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 8014b76:	f085 053d 	eor.w	r5, r5, #61	; 0x3d
 8014b7a:	4914      	ldr	r1, [pc, #80]	; (8014bcc <__atomic_store_8+0x5c>)
 8014b7c:	4c14      	ldr	r4, [pc, #80]	; (8014bd0 <__atomic_store_8+0x60>)
 8014b7e:	4e15      	ldr	r6, [pc, #84]	; (8014bd4 <__atomic_store_8+0x64>)
 8014b80:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 8014b84:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 8014b88:	fb01 f105 	mul.w	r1, r1, r5
 8014b8c:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8014b90:	fba4 5401 	umull	r5, r4, r4, r1
 8014b94:	0924      	lsrs	r4, r4, #4
 8014b96:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8014b9a:	ebc4 04c5 	rsb	r4, r4, r5, lsl #3
 8014b9e:	1b09      	subs	r1, r1, r4
 8014ba0:	1875      	adds	r5, r6, r1
 8014ba2:	f04f 0701 	mov.w	r7, #1
 8014ba6:	e8d5 4f4f 	ldrexb	r4, [r5]
 8014baa:	e8c5 7f4c 	strexb	ip, r7, [r5]
 8014bae:	f1bc 0f00 	cmp.w	ip, #0
 8014bb2:	d1f8      	bne.n	8014ba6 <__atomic_store_8+0x36>
 8014bb4:	f3bf 8f5b 	dmb	ish
 8014bb8:	b2e4      	uxtb	r4, r4
 8014bba:	2c00      	cmp	r4, #0
 8014bbc:	d1f3      	bne.n	8014ba6 <__atomic_store_8+0x36>
 8014bbe:	e9c0 2300 	strd	r2, r3, [r0]
 8014bc2:	f3bf 8f5b 	dmb	ish
 8014bc6:	5474      	strb	r4, [r6, r1]
 8014bc8:	bcf0      	pop	{r4, r5, r6, r7}
 8014bca:	4770      	bx	lr
 8014bcc:	27d4eb2d 	.word	0x27d4eb2d
 8014bd0:	b21642c9 	.word	0xb21642c9
 8014bd4:	20009c2c 	.word	0x20009c2c

08014bd8 <__atomic_exchange_8>:
 8014bd8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8014bdc:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 8014be0:	f085 053d 	eor.w	r5, r5, #61	; 0x3d
 8014be4:	4c16      	ldr	r4, [pc, #88]	; (8014c40 <__atomic_exchange_8+0x68>)
 8014be6:	4917      	ldr	r1, [pc, #92]	; (8014c44 <__atomic_exchange_8+0x6c>)
 8014be8:	4e17      	ldr	r6, [pc, #92]	; (8014c48 <__atomic_exchange_8+0x70>)
 8014bea:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 8014bee:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 8014bf2:	fb04 f505 	mul.w	r5, r4, r5
 8014bf6:	ea85 35d5 	eor.w	r5, r5, r5, lsr #15
 8014bfa:	fba1 4105 	umull	r4, r1, r1, r5
 8014bfe:	0909      	lsrs	r1, r1, #4
 8014c00:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8014c04:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8014c08:	1a6c      	subs	r4, r5, r1
 8014c0a:	1931      	adds	r1, r6, r4
 8014c0c:	f04f 0701 	mov.w	r7, #1
 8014c10:	e8d1 5f4f 	ldrexb	r5, [r1]
 8014c14:	e8c1 7f4c 	strexb	ip, r7, [r1]
 8014c18:	f1bc 0f00 	cmp.w	ip, #0
 8014c1c:	d1f8      	bne.n	8014c10 <__atomic_exchange_8+0x38>
 8014c1e:	f3bf 8f5b 	dmb	ish
 8014c22:	b2ed      	uxtb	r5, r5
 8014c24:	2d00      	cmp	r5, #0
 8014c26:	d1f3      	bne.n	8014c10 <__atomic_exchange_8+0x38>
 8014c28:	e9d0 8900 	ldrd	r8, r9, [r0]
 8014c2c:	e9c0 2300 	strd	r2, r3, [r0]
 8014c30:	f3bf 8f5b 	dmb	ish
 8014c34:	5535      	strb	r5, [r6, r4]
 8014c36:	4640      	mov	r0, r8
 8014c38:	4649      	mov	r1, r9
 8014c3a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8014c3e:	4770      	bx	lr
 8014c40:	27d4eb2d 	.word	0x27d4eb2d
 8014c44:	b21642c9 	.word	0xb21642c9
 8014c48:	20009c2c 	.word	0x20009c2c

08014c4c <rcutils_is_directory>:
 8014c4c:	2000      	movs	r0, #0
 8014c4e:	4770      	bx	lr

08014c50 <rcutils_join_path>:
 8014c50:	b082      	sub	sp, #8
 8014c52:	e88d 000c 	stmia.w	sp, {r2, r3}
 8014c56:	2000      	movs	r0, #0
 8014c58:	b002      	add	sp, #8
 8014c5a:	4770      	bx	lr

08014c5c <rcutils_to_native_path>:
 8014c5c:	b084      	sub	sp, #16
 8014c5e:	a801      	add	r0, sp, #4
 8014c60:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8014c64:	b004      	add	sp, #16
 8014c66:	2000      	movs	r0, #0
 8014c68:	4770      	bx	lr
 8014c6a:	bf00      	nop

08014c6c <rcutils_format_string_limit>:
 8014c6c:	b40f      	push	{r0, r1, r2, r3}
 8014c6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c70:	b083      	sub	sp, #12
 8014c72:	ac08      	add	r4, sp, #32
 8014c74:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8014c76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8014c7a:	b34e      	cbz	r6, 8014cd0 <rcutils_format_string_limit+0x64>
 8014c7c:	a808      	add	r0, sp, #32
 8014c7e:	f7f8 fdc3 	bl	800d808 <rcutils_allocator_is_valid>
 8014c82:	b328      	cbz	r0, 8014cd0 <rcutils_format_string_limit+0x64>
 8014c84:	2100      	movs	r1, #0
 8014c86:	ab0f      	add	r3, sp, #60	; 0x3c
 8014c88:	4608      	mov	r0, r1
 8014c8a:	4632      	mov	r2, r6
 8014c8c:	e9cd 3300 	strd	r3, r3, [sp]
 8014c90:	f000 f904 	bl	8014e9c <rcutils_vsnprintf>
 8014c94:	1c43      	adds	r3, r0, #1
 8014c96:	4605      	mov	r5, r0
 8014c98:	d01a      	beq.n	8014cd0 <rcutils_format_string_limit+0x64>
 8014c9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014c9c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014c9e:	1c47      	adds	r7, r0, #1
 8014ca0:	429f      	cmp	r7, r3
 8014ca2:	bf84      	itt	hi
 8014ca4:	461f      	movhi	r7, r3
 8014ca6:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
 8014caa:	4638      	mov	r0, r7
 8014cac:	9b08      	ldr	r3, [sp, #32]
 8014cae:	4798      	blx	r3
 8014cb0:	4604      	mov	r4, r0
 8014cb2:	b168      	cbz	r0, 8014cd0 <rcutils_format_string_limit+0x64>
 8014cb4:	9b01      	ldr	r3, [sp, #4]
 8014cb6:	4632      	mov	r2, r6
 8014cb8:	4639      	mov	r1, r7
 8014cba:	f000 f8ef 	bl	8014e9c <rcutils_vsnprintf>
 8014cbe:	2800      	cmp	r0, #0
 8014cc0:	db02      	blt.n	8014cc8 <rcutils_format_string_limit+0x5c>
 8014cc2:	2300      	movs	r3, #0
 8014cc4:	5563      	strb	r3, [r4, r5]
 8014cc6:	e004      	b.n	8014cd2 <rcutils_format_string_limit+0x66>
 8014cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014cca:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014ccc:	4620      	mov	r0, r4
 8014cce:	4798      	blx	r3
 8014cd0:	2400      	movs	r4, #0
 8014cd2:	4620      	mov	r0, r4
 8014cd4:	b003      	add	sp, #12
 8014cd6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014cda:	b004      	add	sp, #16
 8014cdc:	4770      	bx	lr
 8014cde:	bf00      	nop

08014ce0 <rcutils_get_env>:
 8014ce0:	b168      	cbz	r0, 8014cfe <rcutils_get_env+0x1e>
 8014ce2:	b510      	push	{r4, lr}
 8014ce4:	460c      	mov	r4, r1
 8014ce6:	b129      	cbz	r1, 8014cf4 <rcutils_get_env+0x14>
 8014ce8:	f002 ff8c 	bl	8017c04 <getenv>
 8014cec:	b120      	cbz	r0, 8014cf8 <rcutils_get_env+0x18>
 8014cee:	6020      	str	r0, [r4, #0]
 8014cf0:	2000      	movs	r0, #0
 8014cf2:	bd10      	pop	{r4, pc}
 8014cf4:	4803      	ldr	r0, [pc, #12]	; (8014d04 <rcutils_get_env+0x24>)
 8014cf6:	bd10      	pop	{r4, pc}
 8014cf8:	4b03      	ldr	r3, [pc, #12]	; (8014d08 <rcutils_get_env+0x28>)
 8014cfa:	6023      	str	r3, [r4, #0]
 8014cfc:	bd10      	pop	{r4, pc}
 8014cfe:	4803      	ldr	r0, [pc, #12]	; (8014d0c <rcutils_get_env+0x2c>)
 8014d00:	4770      	bx	lr
 8014d02:	bf00      	nop
 8014d04:	08019ca0 	.word	0x08019ca0
 8014d08:	08019dc4 	.word	0x08019dc4
 8014d0c:	08019c84 	.word	0x08019c84

08014d10 <rcutils_repl_str>:
 8014d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d14:	ed2d 8b02 	vpush	{d8}
 8014d18:	b087      	sub	sp, #28
 8014d1a:	4680      	mov	r8, r0
 8014d1c:	4608      	mov	r0, r1
 8014d1e:	f8cd 8000 	str.w	r8, [sp]
 8014d22:	ee08 2a10 	vmov	s16, r2
 8014d26:	468a      	mov	sl, r1
 8014d28:	4699      	mov	r9, r3
 8014d2a:	f7eb fa63 	bl	80001f4 <strlen>
 8014d2e:	2600      	movs	r6, #0
 8014d30:	4647      	mov	r7, r8
 8014d32:	9001      	str	r0, [sp, #4]
 8014d34:	46b3      	mov	fp, r6
 8014d36:	2510      	movs	r5, #16
 8014d38:	46b0      	mov	r8, r6
 8014d3a:	e01d      	b.n	8014d78 <rcutils_repl_str+0x68>
 8014d3c:	f10b 0b01 	add.w	fp, fp, #1
 8014d40:	455e      	cmp	r6, fp
 8014d42:	d211      	bcs.n	8014d68 <rcutils_repl_str+0x58>
 8014d44:	442e      	add	r6, r5
 8014d46:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8014d4a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8014d4e:	00b1      	lsls	r1, r6, #2
 8014d50:	4798      	blx	r3
 8014d52:	2800      	cmp	r0, #0
 8014d54:	f000 8084 	beq.w	8014e60 <rcutils_repl_str+0x150>
 8014d58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014d5c:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8014d60:	bf28      	it	cs
 8014d62:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 8014d66:	4680      	mov	r8, r0
 8014d68:	9a00      	ldr	r2, [sp, #0]
 8014d6a:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8014d6e:	1aa2      	subs	r2, r4, r2
 8014d70:	f843 2c04 	str.w	r2, [r3, #-4]
 8014d74:	9b01      	ldr	r3, [sp, #4]
 8014d76:	18e7      	adds	r7, r4, r3
 8014d78:	4651      	mov	r1, sl
 8014d7a:	4638      	mov	r0, r7
 8014d7c:	f003 fc6f 	bl	801865e <strstr>
 8014d80:	4604      	mov	r4, r0
 8014d82:	4640      	mov	r0, r8
 8014d84:	2c00      	cmp	r4, #0
 8014d86:	d1d9      	bne.n	8014d3c <rcutils_repl_str+0x2c>
 8014d88:	46b8      	mov	r8, r7
 8014d8a:	4607      	mov	r7, r0
 8014d8c:	4640      	mov	r0, r8
 8014d8e:	f7eb fa31 	bl	80001f4 <strlen>
 8014d92:	9b00      	ldr	r3, [sp, #0]
 8014d94:	eba8 0303 	sub.w	r3, r8, r3
 8014d98:	181d      	adds	r5, r3, r0
 8014d9a:	9504      	str	r5, [sp, #16]
 8014d9c:	f1bb 0f00 	cmp.w	fp, #0
 8014da0:	d03d      	beq.n	8014e1e <rcutils_repl_str+0x10e>
 8014da2:	ee18 0a10 	vmov	r0, s16
 8014da6:	f7eb fa25 	bl	80001f4 <strlen>
 8014daa:	9b01      	ldr	r3, [sp, #4]
 8014dac:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014db0:	1ac3      	subs	r3, r0, r3
 8014db2:	fb0b 5303 	mla	r3, fp, r3, r5
 8014db6:	9305      	str	r3, [sp, #20]
 8014db8:	4606      	mov	r6, r0
 8014dba:	1c58      	adds	r0, r3, #1
 8014dbc:	f8d9 3000 	ldr.w	r3, [r9]
 8014dc0:	4798      	blx	r3
 8014dc2:	9003      	str	r0, [sp, #12]
 8014dc4:	2800      	cmp	r0, #0
 8014dc6:	d04c      	beq.n	8014e62 <rcutils_repl_str+0x152>
 8014dc8:	683a      	ldr	r2, [r7, #0]
 8014dca:	9900      	ldr	r1, [sp, #0]
 8014dcc:	f003 fd3f 	bl	801884e <memcpy>
 8014dd0:	9b03      	ldr	r3, [sp, #12]
 8014dd2:	683d      	ldr	r5, [r7, #0]
 8014dd4:	ee18 8a10 	vmov	r8, s16
 8014dd8:	441d      	add	r5, r3
 8014dda:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8014dde:	9302      	str	r3, [sp, #8]
 8014de0:	46ba      	mov	sl, r7
 8014de2:	4632      	mov	r2, r6
 8014de4:	4641      	mov	r1, r8
 8014de6:	4628      	mov	r0, r5
 8014de8:	f003 fd31 	bl	801884e <memcpy>
 8014dec:	9b01      	ldr	r3, [sp, #4]
 8014dee:	f85a 2b04 	ldr.w	r2, [sl], #4
 8014df2:	441a      	add	r2, r3
 8014df4:	9b00      	ldr	r3, [sp, #0]
 8014df6:	1899      	adds	r1, r3, r2
 8014df8:	9b02      	ldr	r3, [sp, #8]
 8014dfa:	4435      	add	r5, r6
 8014dfc:	429c      	cmp	r4, r3
 8014dfe:	4628      	mov	r0, r5
 8014e00:	d025      	beq.n	8014e4e <rcutils_repl_str+0x13e>
 8014e02:	f8da 3000 	ldr.w	r3, [sl]
 8014e06:	3401      	adds	r4, #1
 8014e08:	1a9a      	subs	r2, r3, r2
 8014e0a:	4415      	add	r5, r2
 8014e0c:	f003 fd1f 	bl	801884e <memcpy>
 8014e10:	455c      	cmp	r4, fp
 8014e12:	d3e6      	bcc.n	8014de2 <rcutils_repl_str+0xd2>
 8014e14:	9a03      	ldr	r2, [sp, #12]
 8014e16:	9905      	ldr	r1, [sp, #20]
 8014e18:	2300      	movs	r3, #0
 8014e1a:	5453      	strb	r3, [r2, r1]
 8014e1c:	e00b      	b.n	8014e36 <rcutils_repl_str+0x126>
 8014e1e:	4628      	mov	r0, r5
 8014e20:	f8d9 3000 	ldr.w	r3, [r9]
 8014e24:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014e28:	3001      	adds	r0, #1
 8014e2a:	4798      	blx	r3
 8014e2c:	9003      	str	r0, [sp, #12]
 8014e2e:	b110      	cbz	r0, 8014e36 <rcutils_repl_str+0x126>
 8014e30:	9900      	ldr	r1, [sp, #0]
 8014e32:	f003 fd04 	bl	801883e <strcpy>
 8014e36:	4638      	mov	r0, r7
 8014e38:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014e3c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014e40:	4798      	blx	r3
 8014e42:	9803      	ldr	r0, [sp, #12]
 8014e44:	b007      	add	sp, #28
 8014e46:	ecbd 8b02 	vpop	{d8}
 8014e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e4e:	9b04      	ldr	r3, [sp, #16]
 8014e50:	3401      	adds	r4, #1
 8014e52:	1a9a      	subs	r2, r3, r2
 8014e54:	4415      	add	r5, r2
 8014e56:	f003 fcfa 	bl	801884e <memcpy>
 8014e5a:	455c      	cmp	r4, fp
 8014e5c:	d3c1      	bcc.n	8014de2 <rcutils_repl_str+0xd2>
 8014e5e:	e7d9      	b.n	8014e14 <rcutils_repl_str+0x104>
 8014e60:	4647      	mov	r7, r8
 8014e62:	2300      	movs	r3, #0
 8014e64:	9303      	str	r3, [sp, #12]
 8014e66:	e7e6      	b.n	8014e36 <rcutils_repl_str+0x126>

08014e68 <rcutils_snprintf>:
 8014e68:	b40c      	push	{r2, r3}
 8014e6a:	b530      	push	{r4, r5, lr}
 8014e6c:	b083      	sub	sp, #12
 8014e6e:	ab06      	add	r3, sp, #24
 8014e70:	f853 2b04 	ldr.w	r2, [r3], #4
 8014e74:	9301      	str	r3, [sp, #4]
 8014e76:	b152      	cbz	r2, 8014e8e <rcutils_snprintf+0x26>
 8014e78:	b138      	cbz	r0, 8014e8a <rcutils_snprintf+0x22>
 8014e7a:	b141      	cbz	r1, 8014e8e <rcutils_snprintf+0x26>
 8014e7c:	f003 fb0a 	bl	8018494 <vsniprintf>
 8014e80:	b003      	add	sp, #12
 8014e82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014e86:	b002      	add	sp, #8
 8014e88:	4770      	bx	lr
 8014e8a:	2900      	cmp	r1, #0
 8014e8c:	d0f6      	beq.n	8014e7c <rcutils_snprintf+0x14>
 8014e8e:	f003 fca9 	bl	80187e4 <__errno>
 8014e92:	2316      	movs	r3, #22
 8014e94:	6003      	str	r3, [r0, #0]
 8014e96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014e9a:	e7f1      	b.n	8014e80 <rcutils_snprintf+0x18>

08014e9c <rcutils_vsnprintf>:
 8014e9c:	b570      	push	{r4, r5, r6, lr}
 8014e9e:	b13a      	cbz	r2, 8014eb0 <rcutils_vsnprintf+0x14>
 8014ea0:	b120      	cbz	r0, 8014eac <rcutils_vsnprintf+0x10>
 8014ea2:	b129      	cbz	r1, 8014eb0 <rcutils_vsnprintf+0x14>
 8014ea4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014ea8:	f003 baf4 	b.w	8018494 <vsniprintf>
 8014eac:	2900      	cmp	r1, #0
 8014eae:	d0f9      	beq.n	8014ea4 <rcutils_vsnprintf+0x8>
 8014eb0:	f003 fc98 	bl	80187e4 <__errno>
 8014eb4:	2316      	movs	r3, #22
 8014eb6:	6003      	str	r3, [r0, #0]
 8014eb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014ebc:	bd70      	pop	{r4, r5, r6, pc}
 8014ebe:	bf00      	nop

08014ec0 <rcutils_strdup>:
 8014ec0:	b084      	sub	sp, #16
 8014ec2:	b570      	push	{r4, r5, r6, lr}
 8014ec4:	b082      	sub	sp, #8
 8014ec6:	ac07      	add	r4, sp, #28
 8014ec8:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8014ecc:	4605      	mov	r5, r0
 8014ece:	b1b0      	cbz	r0, 8014efe <rcutils_strdup+0x3e>
 8014ed0:	f7eb f990 	bl	80001f4 <strlen>
 8014ed4:	1c42      	adds	r2, r0, #1
 8014ed6:	9b07      	ldr	r3, [sp, #28]
 8014ed8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014eda:	9201      	str	r2, [sp, #4]
 8014edc:	4606      	mov	r6, r0
 8014ede:	4610      	mov	r0, r2
 8014ee0:	4798      	blx	r3
 8014ee2:	4604      	mov	r4, r0
 8014ee4:	b128      	cbz	r0, 8014ef2 <rcutils_strdup+0x32>
 8014ee6:	9a01      	ldr	r2, [sp, #4]
 8014ee8:	4629      	mov	r1, r5
 8014eea:	f003 fcb0 	bl	801884e <memcpy>
 8014eee:	2300      	movs	r3, #0
 8014ef0:	55a3      	strb	r3, [r4, r6]
 8014ef2:	4620      	mov	r0, r4
 8014ef4:	b002      	add	sp, #8
 8014ef6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014efa:	b004      	add	sp, #16
 8014efc:	4770      	bx	lr
 8014efe:	4604      	mov	r4, r0
 8014f00:	e7f7      	b.n	8014ef2 <rcutils_strdup+0x32>
 8014f02:	bf00      	nop

08014f04 <rcutils_strndup>:
 8014f04:	b082      	sub	sp, #8
 8014f06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f08:	460e      	mov	r6, r1
 8014f0a:	a906      	add	r1, sp, #24
 8014f0c:	e881 000c 	stmia.w	r1, {r2, r3}
 8014f10:	4605      	mov	r5, r0
 8014f12:	b180      	cbz	r0, 8014f36 <rcutils_strndup+0x32>
 8014f14:	1c77      	adds	r7, r6, #1
 8014f16:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014f18:	4638      	mov	r0, r7
 8014f1a:	4790      	blx	r2
 8014f1c:	4604      	mov	r4, r0
 8014f1e:	b128      	cbz	r0, 8014f2c <rcutils_strndup+0x28>
 8014f20:	463a      	mov	r2, r7
 8014f22:	4629      	mov	r1, r5
 8014f24:	f003 fc93 	bl	801884e <memcpy>
 8014f28:	2300      	movs	r3, #0
 8014f2a:	55a3      	strb	r3, [r4, r6]
 8014f2c:	4620      	mov	r0, r4
 8014f2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014f32:	b002      	add	sp, #8
 8014f34:	4770      	bx	lr
 8014f36:	4604      	mov	r4, r0
 8014f38:	e7f8      	b.n	8014f2c <rcutils_strndup+0x28>
 8014f3a:	bf00      	nop

08014f3c <rmw_get_zero_initialized_context>:
 8014f3c:	b510      	push	{r4, lr}
 8014f3e:	2250      	movs	r2, #80	; 0x50
 8014f40:	4604      	mov	r4, r0
 8014f42:	2100      	movs	r1, #0
 8014f44:	f003 fb64 	bl	8018610 <memset>
 8014f48:	4620      	mov	r0, r4
 8014f4a:	bd10      	pop	{r4, pc}

08014f4c <rmw_get_zero_initialized_init_options>:
 8014f4c:	b510      	push	{r4, lr}
 8014f4e:	2238      	movs	r2, #56	; 0x38
 8014f50:	4604      	mov	r4, r0
 8014f52:	2100      	movs	r1, #0
 8014f54:	f003 fb5c 	bl	8018610 <memset>
 8014f58:	f104 0010 	add.w	r0, r4, #16
 8014f5c:	f000 f806 	bl	8014f6c <rmw_get_default_security_options>
 8014f60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014f64:	60e3      	str	r3, [r4, #12]
 8014f66:	4620      	mov	r0, r4
 8014f68:	bd10      	pop	{r4, pc}
 8014f6a:	bf00      	nop

08014f6c <rmw_get_default_security_options>:
 8014f6c:	2200      	movs	r2, #0
 8014f6e:	7002      	strb	r2, [r0, #0]
 8014f70:	6042      	str	r2, [r0, #4]
 8014f72:	4770      	bx	lr

08014f74 <rmw_validate_namespace_with_size>:
 8014f74:	b340      	cbz	r0, 8014fc8 <rmw_validate_namespace_with_size+0x54>
 8014f76:	b5d0      	push	{r4, r6, r7, lr}
 8014f78:	4614      	mov	r4, r2
 8014f7a:	b0c2      	sub	sp, #264	; 0x108
 8014f7c:	b332      	cbz	r2, 8014fcc <rmw_validate_namespace_with_size+0x58>
 8014f7e:	2901      	cmp	r1, #1
 8014f80:	460f      	mov	r7, r1
 8014f82:	461e      	mov	r6, r3
 8014f84:	d102      	bne.n	8014f8c <rmw_validate_namespace_with_size+0x18>
 8014f86:	7803      	ldrb	r3, [r0, #0]
 8014f88:	2b2f      	cmp	r3, #47	; 0x2f
 8014f8a:	d019      	beq.n	8014fc0 <rmw_validate_namespace_with_size+0x4c>
 8014f8c:	aa01      	add	r2, sp, #4
 8014f8e:	4669      	mov	r1, sp
 8014f90:	f7f8 fe0e 	bl	800dbb0 <rmw_validate_full_topic_name>
 8014f94:	b990      	cbnz	r0, 8014fbc <rmw_validate_namespace_with_size+0x48>
 8014f96:	9b00      	ldr	r3, [sp, #0]
 8014f98:	b14b      	cbz	r3, 8014fae <rmw_validate_namespace_with_size+0x3a>
 8014f9a:	2b07      	cmp	r3, #7
 8014f9c:	d007      	beq.n	8014fae <rmw_validate_namespace_with_size+0x3a>
 8014f9e:	1e5a      	subs	r2, r3, #1
 8014fa0:	2a05      	cmp	r2, #5
 8014fa2:	d82b      	bhi.n	8014ffc <rmw_validate_namespace_with_size+0x88>
 8014fa4:	e8df f002 	tbb	[pc, r2]
 8014fa8:	24211e1b 	.word	0x24211e1b
 8014fac:	1427      	.short	0x1427
 8014fae:	2ff5      	cmp	r7, #245	; 0xf5
 8014fb0:	d906      	bls.n	8014fc0 <rmw_validate_namespace_with_size+0x4c>
 8014fb2:	2307      	movs	r3, #7
 8014fb4:	6023      	str	r3, [r4, #0]
 8014fb6:	b10e      	cbz	r6, 8014fbc <rmw_validate_namespace_with_size+0x48>
 8014fb8:	23f4      	movs	r3, #244	; 0xf4
 8014fba:	6033      	str	r3, [r6, #0]
 8014fbc:	b042      	add	sp, #264	; 0x108
 8014fbe:	bdd0      	pop	{r4, r6, r7, pc}
 8014fc0:	2000      	movs	r0, #0
 8014fc2:	6020      	str	r0, [r4, #0]
 8014fc4:	b042      	add	sp, #264	; 0x108
 8014fc6:	bdd0      	pop	{r4, r6, r7, pc}
 8014fc8:	200b      	movs	r0, #11
 8014fca:	4770      	bx	lr
 8014fcc:	200b      	movs	r0, #11
 8014fce:	e7f5      	b.n	8014fbc <rmw_validate_namespace_with_size+0x48>
 8014fd0:	2306      	movs	r3, #6
 8014fd2:	6023      	str	r3, [r4, #0]
 8014fd4:	2e00      	cmp	r6, #0
 8014fd6:	d0f1      	beq.n	8014fbc <rmw_validate_namespace_with_size+0x48>
 8014fd8:	9b01      	ldr	r3, [sp, #4]
 8014fda:	6033      	str	r3, [r6, #0]
 8014fdc:	e7ee      	b.n	8014fbc <rmw_validate_namespace_with_size+0x48>
 8014fde:	2301      	movs	r3, #1
 8014fe0:	6023      	str	r3, [r4, #0]
 8014fe2:	e7f7      	b.n	8014fd4 <rmw_validate_namespace_with_size+0x60>
 8014fe4:	2302      	movs	r3, #2
 8014fe6:	6023      	str	r3, [r4, #0]
 8014fe8:	e7f4      	b.n	8014fd4 <rmw_validate_namespace_with_size+0x60>
 8014fea:	2303      	movs	r3, #3
 8014fec:	6023      	str	r3, [r4, #0]
 8014fee:	e7f1      	b.n	8014fd4 <rmw_validate_namespace_with_size+0x60>
 8014ff0:	2304      	movs	r3, #4
 8014ff2:	6023      	str	r3, [r4, #0]
 8014ff4:	e7ee      	b.n	8014fd4 <rmw_validate_namespace_with_size+0x60>
 8014ff6:	2305      	movs	r3, #5
 8014ff8:	6023      	str	r3, [r4, #0]
 8014ffa:	e7eb      	b.n	8014fd4 <rmw_validate_namespace_with_size+0x60>
 8014ffc:	4a03      	ldr	r2, [pc, #12]	; (801500c <rmw_validate_namespace_with_size+0x98>)
 8014ffe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8015002:	a802      	add	r0, sp, #8
 8015004:	f7ff ff30 	bl	8014e68 <rcutils_snprintf>
 8015008:	2001      	movs	r0, #1
 801500a:	e7d7      	b.n	8014fbc <rmw_validate_namespace_with_size+0x48>
 801500c:	08019cbc 	.word	0x08019cbc

08015010 <rmw_validate_namespace>:
 8015010:	b168      	cbz	r0, 801502e <rmw_validate_namespace+0x1e>
 8015012:	b570      	push	{r4, r5, r6, lr}
 8015014:	460d      	mov	r5, r1
 8015016:	4616      	mov	r6, r2
 8015018:	4604      	mov	r4, r0
 801501a:	f7eb f8eb 	bl	80001f4 <strlen>
 801501e:	4633      	mov	r3, r6
 8015020:	4601      	mov	r1, r0
 8015022:	462a      	mov	r2, r5
 8015024:	4620      	mov	r0, r4
 8015026:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801502a:	f7ff bfa3 	b.w	8014f74 <rmw_validate_namespace_with_size>
 801502e:	200b      	movs	r0, #11
 8015030:	4770      	bx	lr
 8015032:	bf00      	nop

08015034 <rmw_namespace_validation_result_string>:
 8015034:	2807      	cmp	r0, #7
 8015036:	bf9a      	itte	ls
 8015038:	4b02      	ldrls	r3, [pc, #8]	; (8015044 <rmw_namespace_validation_result_string+0x10>)
 801503a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801503e:	4802      	ldrhi	r0, [pc, #8]	; (8015048 <rmw_namespace_validation_result_string+0x14>)
 8015040:	4770      	bx	lr
 8015042:	bf00      	nop
 8015044:	08019eb4 	.word	0x08019eb4
 8015048:	08019d0c 	.word	0x08019d0c

0801504c <rmw_validate_node_name>:
 801504c:	2800      	cmp	r0, #0
 801504e:	d03b      	beq.n	80150c8 <rmw_validate_node_name+0x7c>
 8015050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015054:	460f      	mov	r7, r1
 8015056:	2900      	cmp	r1, #0
 8015058:	d038      	beq.n	80150cc <rmw_validate_node_name+0x80>
 801505a:	4615      	mov	r5, r2
 801505c:	4604      	mov	r4, r0
 801505e:	f7eb f8c9 	bl	80001f4 <strlen>
 8015062:	b1e0      	cbz	r0, 801509e <rmw_validate_node_name+0x52>
 8015064:	1e63      	subs	r3, r4, #1
 8015066:	eb03 0e00 	add.w	lr, r3, r0
 801506a:	f1c4 0c01 	rsb	ip, r4, #1
 801506e:	eb0c 0803 	add.w	r8, ip, r3
 8015072:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 8015076:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
 801507a:	f026 0220 	bic.w	r2, r6, #32
 801507e:	2909      	cmp	r1, #9
 8015080:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
 8015084:	d913      	bls.n	80150ae <rmw_validate_node_name+0x62>
 8015086:	2a19      	cmp	r2, #25
 8015088:	d911      	bls.n	80150ae <rmw_validate_node_name+0x62>
 801508a:	2e5f      	cmp	r6, #95	; 0x5f
 801508c:	d00f      	beq.n	80150ae <rmw_validate_node_name+0x62>
 801508e:	2302      	movs	r3, #2
 8015090:	603b      	str	r3, [r7, #0]
 8015092:	b10d      	cbz	r5, 8015098 <rmw_validate_node_name+0x4c>
 8015094:	f8c5 8000 	str.w	r8, [r5]
 8015098:	2000      	movs	r0, #0
 801509a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801509e:	2301      	movs	r3, #1
 80150a0:	603b      	str	r3, [r7, #0]
 80150a2:	2d00      	cmp	r5, #0
 80150a4:	d0f8      	beq.n	8015098 <rmw_validate_node_name+0x4c>
 80150a6:	2000      	movs	r0, #0
 80150a8:	6028      	str	r0, [r5, #0]
 80150aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150ae:	4573      	cmp	r3, lr
 80150b0:	d1dd      	bne.n	801506e <rmw_validate_node_name+0x22>
 80150b2:	7822      	ldrb	r2, [r4, #0]
 80150b4:	4b0d      	ldr	r3, [pc, #52]	; (80150ec <rmw_validate_node_name+0xa0>)
 80150b6:	5cd3      	ldrb	r3, [r2, r3]
 80150b8:	f013 0304 	ands.w	r3, r3, #4
 80150bc:	d110      	bne.n	80150e0 <rmw_validate_node_name+0x94>
 80150be:	28ff      	cmp	r0, #255	; 0xff
 80150c0:	d806      	bhi.n	80150d0 <rmw_validate_node_name+0x84>
 80150c2:	603b      	str	r3, [r7, #0]
 80150c4:	4618      	mov	r0, r3
 80150c6:	e7e8      	b.n	801509a <rmw_validate_node_name+0x4e>
 80150c8:	200b      	movs	r0, #11
 80150ca:	4770      	bx	lr
 80150cc:	200b      	movs	r0, #11
 80150ce:	e7e4      	b.n	801509a <rmw_validate_node_name+0x4e>
 80150d0:	2204      	movs	r2, #4
 80150d2:	603a      	str	r2, [r7, #0]
 80150d4:	2d00      	cmp	r5, #0
 80150d6:	d0df      	beq.n	8015098 <rmw_validate_node_name+0x4c>
 80150d8:	22fe      	movs	r2, #254	; 0xfe
 80150da:	4618      	mov	r0, r3
 80150dc:	602a      	str	r2, [r5, #0]
 80150de:	e7dc      	b.n	801509a <rmw_validate_node_name+0x4e>
 80150e0:	2303      	movs	r3, #3
 80150e2:	603b      	str	r3, [r7, #0]
 80150e4:	2d00      	cmp	r5, #0
 80150e6:	d1de      	bne.n	80150a6 <rmw_validate_node_name+0x5a>
 80150e8:	e7d6      	b.n	8015098 <rmw_validate_node_name+0x4c>
 80150ea:	bf00      	nop
 80150ec:	0801a278 	.word	0x0801a278

080150f0 <rmw_node_name_validation_result_string>:
 80150f0:	2804      	cmp	r0, #4
 80150f2:	bf9a      	itte	ls
 80150f4:	4b02      	ldrls	r3, [pc, #8]	; (8015100 <rmw_node_name_validation_result_string+0x10>)
 80150f6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80150fa:	4802      	ldrhi	r0, [pc, #8]	; (8015104 <rmw_node_name_validation_result_string+0x14>)
 80150fc:	4770      	bx	lr
 80150fe:	bf00      	nop
 8015100:	08019fc0 	.word	0x08019fc0
 8015104:	08019ed4 	.word	0x08019ed4

08015108 <get_memory>:
 8015108:	4603      	mov	r3, r0
 801510a:	6840      	ldr	r0, [r0, #4]
 801510c:	b158      	cbz	r0, 8015126 <get_memory+0x1e>
 801510e:	6882      	ldr	r2, [r0, #8]
 8015110:	605a      	str	r2, [r3, #4]
 8015112:	b10a      	cbz	r2, 8015118 <get_memory+0x10>
 8015114:	2100      	movs	r1, #0
 8015116:	6051      	str	r1, [r2, #4]
 8015118:	681a      	ldr	r2, [r3, #0]
 801511a:	6082      	str	r2, [r0, #8]
 801511c:	b102      	cbz	r2, 8015120 <get_memory+0x18>
 801511e:	6050      	str	r0, [r2, #4]
 8015120:	2200      	movs	r2, #0
 8015122:	6042      	str	r2, [r0, #4]
 8015124:	6018      	str	r0, [r3, #0]
 8015126:	4770      	bx	lr

08015128 <put_memory>:
 8015128:	684b      	ldr	r3, [r1, #4]
 801512a:	b10b      	cbz	r3, 8015130 <put_memory+0x8>
 801512c:	688a      	ldr	r2, [r1, #8]
 801512e:	609a      	str	r2, [r3, #8]
 8015130:	688a      	ldr	r2, [r1, #8]
 8015132:	b102      	cbz	r2, 8015136 <put_memory+0xe>
 8015134:	6053      	str	r3, [r2, #4]
 8015136:	6803      	ldr	r3, [r0, #0]
 8015138:	428b      	cmp	r3, r1
 801513a:	6843      	ldr	r3, [r0, #4]
 801513c:	bf08      	it	eq
 801513e:	6002      	streq	r2, [r0, #0]
 8015140:	608b      	str	r3, [r1, #8]
 8015142:	b103      	cbz	r3, 8015146 <put_memory+0x1e>
 8015144:	6059      	str	r1, [r3, #4]
 8015146:	2300      	movs	r3, #0
 8015148:	604b      	str	r3, [r1, #4]
 801514a:	6041      	str	r1, [r0, #4]
 801514c:	4770      	bx	lr
 801514e:	bf00      	nop

08015150 <rmw_destroy_client>:
 8015150:	b570      	push	{r4, r5, r6, lr}
 8015152:	b128      	cbz	r0, 8015160 <rmw_destroy_client+0x10>
 8015154:	4604      	mov	r4, r0
 8015156:	6800      	ldr	r0, [r0, #0]
 8015158:	460d      	mov	r5, r1
 801515a:	f7f9 fc05 	bl	800e968 <is_uxrce_rmw_identifier_valid>
 801515e:	b910      	cbnz	r0, 8015166 <rmw_destroy_client+0x16>
 8015160:	2401      	movs	r4, #1
 8015162:	4620      	mov	r0, r4
 8015164:	bd70      	pop	{r4, r5, r6, pc}
 8015166:	6863      	ldr	r3, [r4, #4]
 8015168:	2b00      	cmp	r3, #0
 801516a:	d0f9      	beq.n	8015160 <rmw_destroy_client+0x10>
 801516c:	2d00      	cmp	r5, #0
 801516e:	d0f7      	beq.n	8015160 <rmw_destroy_client+0x10>
 8015170:	6828      	ldr	r0, [r5, #0]
 8015172:	f7f9 fbf9 	bl	800e968 <is_uxrce_rmw_identifier_valid>
 8015176:	2800      	cmp	r0, #0
 8015178:	d0f2      	beq.n	8015160 <rmw_destroy_client+0x10>
 801517a:	686e      	ldr	r6, [r5, #4]
 801517c:	2e00      	cmp	r6, #0
 801517e:	d0ef      	beq.n	8015160 <rmw_destroy_client+0x10>
 8015180:	6864      	ldr	r4, [r4, #4]
 8015182:	6932      	ldr	r2, [r6, #16]
 8015184:	6920      	ldr	r0, [r4, #16]
 8015186:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801518a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801518e:	6819      	ldr	r1, [r3, #0]
 8015190:	f7fa fee8 	bl	800ff64 <uxr_buffer_cancel_data>
 8015194:	4602      	mov	r2, r0
 8015196:	6920      	ldr	r0, [r4, #16]
 8015198:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801519c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80151a0:	f7f9 fb62 	bl	800e868 <run_xrce_session>
 80151a4:	6920      	ldr	r0, [r4, #16]
 80151a6:	6932      	ldr	r2, [r6, #16]
 80151a8:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80151ac:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80151b0:	6819      	ldr	r1, [r3, #0]
 80151b2:	f7fa fc6d 	bl	800fa90 <uxr_buffer_delete_entity>
 80151b6:	4602      	mov	r2, r0
 80151b8:	6920      	ldr	r0, [r4, #16]
 80151ba:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80151be:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80151c2:	f7f9 fb51 	bl	800e868 <run_xrce_session>
 80151c6:	2800      	cmp	r0, #0
 80151c8:	4628      	mov	r0, r5
 80151ca:	bf14      	ite	ne
 80151cc:	2400      	movne	r4, #0
 80151ce:	2402      	moveq	r4, #2
 80151d0:	f7f9 fa3c 	bl	800e64c <rmw_uxrce_fini_client_memory>
 80151d4:	e7c5      	b.n	8015162 <rmw_destroy_client+0x12>
 80151d6:	bf00      	nop

080151d8 <rmw_get_implementation_identifier>:
 80151d8:	4b01      	ldr	r3, [pc, #4]	; (80151e0 <rmw_get_implementation_identifier+0x8>)
 80151da:	6818      	ldr	r0, [r3, #0]
 80151dc:	4770      	bx	lr
 80151de:	bf00      	nop
 80151e0:	08019fec 	.word	0x08019fec

080151e4 <rmw_init_options_init>:
 80151e4:	b084      	sub	sp, #16
 80151e6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80151ea:	ad09      	add	r5, sp, #36	; 0x24
 80151ec:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 80151f0:	b130      	cbz	r0, 8015200 <rmw_init_options_init+0x1c>
 80151f2:	4604      	mov	r4, r0
 80151f4:	4628      	mov	r0, r5
 80151f6:	f7f8 fb07 	bl	800d808 <rcutils_allocator_is_valid>
 80151fa:	b108      	cbz	r0, 8015200 <rmw_init_options_init+0x1c>
 80151fc:	68a3      	ldr	r3, [r4, #8]
 80151fe:	b123      	cbz	r3, 801520a <rmw_init_options_init+0x26>
 8015200:	200b      	movs	r0, #11
 8015202:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015206:	b004      	add	sp, #16
 8015208:	4770      	bx	lr
 801520a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801520c:	4f1c      	ldr	r7, [pc, #112]	; (8015280 <rmw_init_options_init+0x9c>)
 801520e:	682e      	ldr	r6, [r5, #0]
 8015210:	683d      	ldr	r5, [r7, #0]
 8015212:	60a5      	str	r5, [r4, #8]
 8015214:	f04f 0800 	mov.w	r8, #0
 8015218:	f04f 0900 	mov.w	r9, #0
 801521c:	f104 0520 	add.w	r5, r4, #32
 8015220:	e9c4 8900 	strd	r8, r9, [r4]
 8015224:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015226:	4b17      	ldr	r3, [pc, #92]	; (8015284 <rmw_init_options_init+0xa0>)
 8015228:	4817      	ldr	r0, [pc, #92]	; (8015288 <rmw_init_options_init+0xa4>)
 801522a:	602e      	str	r6, [r5, #0]
 801522c:	4917      	ldr	r1, [pc, #92]	; (801528c <rmw_init_options_init+0xa8>)
 801522e:	61e3      	str	r3, [r4, #28]
 8015230:	2203      	movs	r2, #3
 8015232:	f7f9 f95b 	bl	800e4ec <rmw_uxrce_init_init_options_impl_memory>
 8015236:	4814      	ldr	r0, [pc, #80]	; (8015288 <rmw_init_options_init+0xa4>)
 8015238:	f7ff ff66 	bl	8015108 <get_memory>
 801523c:	b1e8      	cbz	r0, 801527a <rmw_init_options_init+0x96>
 801523e:	4a14      	ldr	r2, [pc, #80]	; (8015290 <rmw_init_options_init+0xac>)
 8015240:	68c3      	ldr	r3, [r0, #12]
 8015242:	6851      	ldr	r1, [r2, #4]
 8015244:	7810      	ldrb	r0, [r2, #0]
 8015246:	6363      	str	r3, [r4, #52]	; 0x34
 8015248:	7418      	strb	r0, [r3, #16]
 801524a:	6159      	str	r1, [r3, #20]
 801524c:	e9d2 5002 	ldrd	r5, r0, [r2, #8]
 8015250:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 8015254:	e9c3 5006 	strd	r5, r0, [r3, #24]
 8015258:	e9c3 1208 	strd	r1, r2, [r3, #32]
 801525c:	f7fc f9b0 	bl	80115c0 <uxr_nanos>
 8015260:	f002 fdd4 	bl	8017e0c <srand>
 8015264:	f002 fe00 	bl	8017e68 <rand>
 8015268:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801526a:	6298      	str	r0, [r3, #40]	; 0x28
 801526c:	2800      	cmp	r0, #0
 801526e:	d0f9      	beq.n	8015264 <rmw_init_options_init+0x80>
 8015270:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015274:	2000      	movs	r0, #0
 8015276:	b004      	add	sp, #16
 8015278:	4770      	bx	lr
 801527a:	2001      	movs	r0, #1
 801527c:	e7c1      	b.n	8015202 <rmw_init_options_init+0x1e>
 801527e:	bf00      	nop
 8015280:	08019fec 	.word	0x08019fec
 8015284:	08019b60 	.word	0x08019b60
 8015288:	2000d1bc 	.word	0x2000d1bc
 801528c:	2000ce10 	.word	0x2000ce10
 8015290:	20009ea0 	.word	0x20009ea0

08015294 <rmw_init_options_copy>:
 8015294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015296:	b158      	cbz	r0, 80152b0 <rmw_init_options_copy+0x1c>
 8015298:	460e      	mov	r6, r1
 801529a:	b149      	cbz	r1, 80152b0 <rmw_init_options_copy+0x1c>
 801529c:	4604      	mov	r4, r0
 801529e:	6880      	ldr	r0, [r0, #8]
 80152a0:	b120      	cbz	r0, 80152ac <rmw_init_options_copy+0x18>
 80152a2:	4b1b      	ldr	r3, [pc, #108]	; (8015310 <rmw_init_options_copy+0x7c>)
 80152a4:	6819      	ldr	r1, [r3, #0]
 80152a6:	f7ea ff9b 	bl	80001e0 <strcmp>
 80152aa:	bb60      	cbnz	r0, 8015306 <rmw_init_options_copy+0x72>
 80152ac:	68b3      	ldr	r3, [r6, #8]
 80152ae:	b113      	cbz	r3, 80152b6 <rmw_init_options_copy+0x22>
 80152b0:	230b      	movs	r3, #11
 80152b2:	4618      	mov	r0, r3
 80152b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80152b6:	4623      	mov	r3, r4
 80152b8:	4632      	mov	r2, r6
 80152ba:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 80152be:	681d      	ldr	r5, [r3, #0]
 80152c0:	6858      	ldr	r0, [r3, #4]
 80152c2:	6899      	ldr	r1, [r3, #8]
 80152c4:	68df      	ldr	r7, [r3, #12]
 80152c6:	60d7      	str	r7, [r2, #12]
 80152c8:	3310      	adds	r3, #16
 80152ca:	4563      	cmp	r3, ip
 80152cc:	6015      	str	r5, [r2, #0]
 80152ce:	6050      	str	r0, [r2, #4]
 80152d0:	6091      	str	r1, [r2, #8]
 80152d2:	f102 0210 	add.w	r2, r2, #16
 80152d6:	d1f2      	bne.n	80152be <rmw_init_options_copy+0x2a>
 80152d8:	6819      	ldr	r1, [r3, #0]
 80152da:	685b      	ldr	r3, [r3, #4]
 80152dc:	480d      	ldr	r0, [pc, #52]	; (8015314 <rmw_init_options_copy+0x80>)
 80152de:	6053      	str	r3, [r2, #4]
 80152e0:	6011      	str	r1, [r2, #0]
 80152e2:	f7ff ff11 	bl	8015108 <get_memory>
 80152e6:	b188      	cbz	r0, 801530c <rmw_init_options_copy+0x78>
 80152e8:	68c5      	ldr	r5, [r0, #12]
 80152ea:	6375      	str	r5, [r6, #52]	; 0x34
 80152ec:	6b66      	ldr	r6, [r4, #52]	; 0x34
 80152ee:	3610      	adds	r6, #16
 80152f0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80152f2:	f105 0410 	add.w	r4, r5, #16
 80152f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80152f8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80152fc:	2300      	movs	r3, #0
 80152fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8015302:	4618      	mov	r0, r3
 8015304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015306:	230c      	movs	r3, #12
 8015308:	4618      	mov	r0, r3
 801530a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801530c:	2301      	movs	r3, #1
 801530e:	e7d0      	b.n	80152b2 <rmw_init_options_copy+0x1e>
 8015310:	08019fec 	.word	0x08019fec
 8015314:	2000d1bc 	.word	0x2000d1bc

08015318 <rmw_init_options_fini>:
 8015318:	2800      	cmp	r0, #0
 801531a:	d036      	beq.n	801538a <rmw_init_options_fini+0x72>
 801531c:	b530      	push	{r4, r5, lr}
 801531e:	4604      	mov	r4, r0
 8015320:	b08f      	sub	sp, #60	; 0x3c
 8015322:	3020      	adds	r0, #32
 8015324:	f7f8 fa70 	bl	800d808 <rcutils_allocator_is_valid>
 8015328:	b328      	cbz	r0, 8015376 <rmw_init_options_fini+0x5e>
 801532a:	68a0      	ldr	r0, [r4, #8]
 801532c:	b120      	cbz	r0, 8015338 <rmw_init_options_fini+0x20>
 801532e:	4b18      	ldr	r3, [pc, #96]	; (8015390 <rmw_init_options_fini+0x78>)
 8015330:	6819      	ldr	r1, [r3, #0]
 8015332:	f7ea ff55 	bl	80001e0 <strcmp>
 8015336:	bb30      	cbnz	r0, 8015386 <rmw_init_options_fini+0x6e>
 8015338:	4b16      	ldr	r3, [pc, #88]	; (8015394 <rmw_init_options_fini+0x7c>)
 801533a:	6819      	ldr	r1, [r3, #0]
 801533c:	b1f9      	cbz	r1, 801537e <rmw_init_options_fini+0x66>
 801533e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8015340:	e001      	b.n	8015346 <rmw_init_options_fini+0x2e>
 8015342:	6889      	ldr	r1, [r1, #8]
 8015344:	b1d9      	cbz	r1, 801537e <rmw_init_options_fini+0x66>
 8015346:	68cb      	ldr	r3, [r1, #12]
 8015348:	429a      	cmp	r2, r3
 801534a:	d1fa      	bne.n	8015342 <rmw_init_options_fini+0x2a>
 801534c:	4811      	ldr	r0, [pc, #68]	; (8015394 <rmw_init_options_fini+0x7c>)
 801534e:	f7ff feeb 	bl	8015128 <put_memory>
 8015352:	466d      	mov	r5, sp
 8015354:	4668      	mov	r0, sp
 8015356:	f7ff fdf9 	bl	8014f4c <rmw_get_zero_initialized_init_options>
 801535a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801535c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801535e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015360:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015362:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015364:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015366:	e895 0003 	ldmia.w	r5, {r0, r1}
 801536a:	e884 0003 	stmia.w	r4, {r0, r1}
 801536e:	2300      	movs	r3, #0
 8015370:	4618      	mov	r0, r3
 8015372:	b00f      	add	sp, #60	; 0x3c
 8015374:	bd30      	pop	{r4, r5, pc}
 8015376:	230b      	movs	r3, #11
 8015378:	4618      	mov	r0, r3
 801537a:	b00f      	add	sp, #60	; 0x3c
 801537c:	bd30      	pop	{r4, r5, pc}
 801537e:	2301      	movs	r3, #1
 8015380:	4618      	mov	r0, r3
 8015382:	b00f      	add	sp, #60	; 0x3c
 8015384:	bd30      	pop	{r4, r5, pc}
 8015386:	230c      	movs	r3, #12
 8015388:	e7f2      	b.n	8015370 <rmw_init_options_fini+0x58>
 801538a:	230b      	movs	r3, #11
 801538c:	4618      	mov	r0, r3
 801538e:	4770      	bx	lr
 8015390:	08019fec 	.word	0x08019fec
 8015394:	2000d1bc 	.word	0x2000d1bc

08015398 <rmw_init>:
 8015398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801539c:	b082      	sub	sp, #8
 801539e:	2800      	cmp	r0, #0
 80153a0:	f000 80d6 	beq.w	8015550 <rmw_init+0x1b8>
 80153a4:	460e      	mov	r6, r1
 80153a6:	2900      	cmp	r1, #0
 80153a8:	f000 80d2 	beq.w	8015550 <rmw_init+0x1b8>
 80153ac:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80153ae:	4605      	mov	r5, r0
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	f000 80cd 	beq.w	8015550 <rmw_init+0x1b8>
 80153b6:	4b79      	ldr	r3, [pc, #484]	; (801559c <rmw_init+0x204>)
 80153b8:	6880      	ldr	r0, [r0, #8]
 80153ba:	f8d3 9000 	ldr.w	r9, [r3]
 80153be:	b128      	cbz	r0, 80153cc <rmw_init+0x34>
 80153c0:	4649      	mov	r1, r9
 80153c2:	f7ea ff0d 	bl	80001e0 <strcmp>
 80153c6:	2800      	cmp	r0, #0
 80153c8:	f040 80cc 	bne.w	8015564 <rmw_init+0x1cc>
 80153cc:	e9d5 0100 	ldrd	r0, r1, [r5]
 80153d0:	68eb      	ldr	r3, [r5, #12]
 80153d2:	61f3      	str	r3, [r6, #28]
 80153d4:	e9c6 0100 	strd	r0, r1, [r6]
 80153d8:	2201      	movs	r2, #1
 80153da:	4971      	ldr	r1, [pc, #452]	; (80155a0 <rmw_init+0x208>)
 80153dc:	4871      	ldr	r0, [pc, #452]	; (80155a4 <rmw_init+0x20c>)
 80153de:	f8c6 9008 	str.w	r9, [r6, #8]
 80153e2:	f7f9 f82b 	bl	800e43c <rmw_uxrce_init_session_memory>
 80153e6:	4870      	ldr	r0, [pc, #448]	; (80155a8 <rmw_init+0x210>)
 80153e8:	4970      	ldr	r1, [pc, #448]	; (80155ac <rmw_init+0x214>)
 80153ea:	2204      	movs	r2, #4
 80153ec:	f7f9 f860 	bl	800e4b0 <rmw_uxrce_init_static_input_buffer_memory>
 80153f0:	486c      	ldr	r0, [pc, #432]	; (80155a4 <rmw_init+0x20c>)
 80153f2:	f7ff fe89 	bl	8015108 <get_memory>
 80153f6:	2800      	cmp	r0, #0
 80153f8:	f000 80af 	beq.w	801555a <rmw_init+0x1c2>
 80153fc:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 80153fe:	68c4      	ldr	r4, [r0, #12]
 8015400:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015402:	7c39      	ldrb	r1, [r7, #16]
 8015404:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8015408:	9001      	str	r0, [sp, #4]
 801540a:	6a38      	ldr	r0, [r7, #32]
 801540c:	9000      	str	r0, [sp, #0]
 801540e:	f104 0a10 	add.w	sl, r4, #16
 8015412:	4650      	mov	r0, sl
 8015414:	f000 ffe8 	bl	80163e8 <uxr_set_custom_transport_callbacks>
 8015418:	f241 5294 	movw	r2, #5524	; 0x1594
 801541c:	f241 5398 	movw	r3, #5528	; 0x1598
 8015420:	f04f 0800 	mov.w	r8, #0
 8015424:	f241 509c 	movw	r0, #5532	; 0x159c
 8015428:	f504 51ad 	add.w	r1, r4, #5536	; 0x15a0
 801542c:	f844 8002 	str.w	r8, [r4, r2]
 8015430:	f844 8003 	str.w	r8, [r4, r3]
 8015434:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015438:	f504 735e 	add.w	r3, r4, #888	; 0x378
 801543c:	f844 8000 	str.w	r8, [r4, r0]
 8015440:	e9c4 33e1 	strd	r3, r3, [r4, #900]	; 0x384
 8015444:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 8015448:	4859      	ldr	r0, [pc, #356]	; (80155b0 <rmw_init+0x218>)
 801544a:	f8c1 8000 	str.w	r8, [r1]
 801544e:	2201      	movs	r2, #1
 8015450:	e9c4 98da 	strd	r9, r8, [r4, #872]	; 0x368
 8015454:	4957      	ldr	r1, [pc, #348]	; (80155b4 <rmw_init+0x21c>)
 8015456:	64b4      	str	r4, [r6, #72]	; 0x48
 8015458:	f7f8 ffd6 	bl	800e408 <rmw_uxrce_init_node_memory>
 801545c:	4956      	ldr	r1, [pc, #344]	; (80155b8 <rmw_init+0x220>)
 801545e:	4857      	ldr	r0, [pc, #348]	; (80155bc <rmw_init+0x224>)
 8015460:	2205      	movs	r2, #5
 8015462:	f7f8 ffb7 	bl	800e3d4 <rmw_uxrce_init_subscription_memory>
 8015466:	4956      	ldr	r1, [pc, #344]	; (80155c0 <rmw_init+0x228>)
 8015468:	4856      	ldr	r0, [pc, #344]	; (80155c4 <rmw_init+0x22c>)
 801546a:	220a      	movs	r2, #10
 801546c:	f7f8 ff98 	bl	800e3a0 <rmw_uxrce_init_publisher_memory>
 8015470:	4955      	ldr	r1, [pc, #340]	; (80155c8 <rmw_init+0x230>)
 8015472:	4856      	ldr	r0, [pc, #344]	; (80155cc <rmw_init+0x234>)
 8015474:	2201      	movs	r2, #1
 8015476:	f7f8 ff5f 	bl	800e338 <rmw_uxrce_init_service_memory>
 801547a:	4955      	ldr	r1, [pc, #340]	; (80155d0 <rmw_init+0x238>)
 801547c:	4855      	ldr	r0, [pc, #340]	; (80155d4 <rmw_init+0x23c>)
 801547e:	2201      	movs	r2, #1
 8015480:	f7f8 ff74 	bl	800e36c <rmw_uxrce_init_client_memory>
 8015484:	4954      	ldr	r1, [pc, #336]	; (80155d8 <rmw_init+0x240>)
 8015486:	4855      	ldr	r0, [pc, #340]	; (80155dc <rmw_init+0x244>)
 8015488:	220f      	movs	r2, #15
 801548a:	f7f8 fff5 	bl	800e478 <rmw_uxrce_init_topic_memory>
 801548e:	4954      	ldr	r1, [pc, #336]	; (80155e0 <rmw_init+0x248>)
 8015490:	4854      	ldr	r0, [pc, #336]	; (80155e4 <rmw_init+0x24c>)
 8015492:	2203      	movs	r2, #3
 8015494:	f7f9 f82a 	bl	800e4ec <rmw_uxrce_init_init_options_impl_memory>
 8015498:	4953      	ldr	r1, [pc, #332]	; (80155e8 <rmw_init+0x250>)
 801549a:	4854      	ldr	r0, [pc, #336]	; (80155ec <rmw_init+0x254>)
 801549c:	2204      	movs	r2, #4
 801549e:	f7f9 f83f 	bl	800e520 <rmw_uxrce_init_wait_set_memory>
 80154a2:	4953      	ldr	r1, [pc, #332]	; (80155f0 <rmw_init+0x258>)
 80154a4:	4853      	ldr	r0, [pc, #332]	; (80155f4 <rmw_init+0x25c>)
 80154a6:	2204      	movs	r2, #4
 80154a8:	f7f9 f856 	bl	800e558 <rmw_uxrce_init_guard_condition_memory>
 80154ac:	6b69      	ldr	r1, [r5, #52]	; 0x34
 80154ae:	6cb0      	ldr	r0, [r6, #72]	; 0x48
 80154b0:	4642      	mov	r2, r8
 80154b2:	f000 fbbd 	bl	8015c30 <rmw_uxrce_transport_init>
 80154b6:	4607      	mov	r7, r0
 80154b8:	2800      	cmp	r0, #0
 80154ba:	d158      	bne.n	801556e <rmw_init+0x1d6>
 80154bc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80154be:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 80154c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80154c4:	4628      	mov	r0, r5
 80154c6:	f504 7122 	add.w	r1, r4, #648	; 0x288
 80154ca:	f7fa fec5 	bl	8010258 <uxr_init_session>
 80154ce:	494a      	ldr	r1, [pc, #296]	; (80155f8 <rmw_init+0x260>)
 80154d0:	4622      	mov	r2, r4
 80154d2:	4628      	mov	r0, r5
 80154d4:	f7fa fee2 	bl	801029c <uxr_set_topic_callback>
 80154d8:	4948      	ldr	r1, [pc, #288]	; (80155fc <rmw_init+0x264>)
 80154da:	463a      	mov	r2, r7
 80154dc:	4628      	mov	r0, r5
 80154de:	f7fa fed9 	bl	8010294 <uxr_set_status_callback>
 80154e2:	4947      	ldr	r1, [pc, #284]	; (8015600 <rmw_init+0x268>)
 80154e4:	463a      	mov	r2, r7
 80154e6:	4628      	mov	r0, r5
 80154e8:	f7fa fedc 	bl	80102a4 <uxr_set_request_callback>
 80154ec:	4945      	ldr	r1, [pc, #276]	; (8015604 <rmw_init+0x26c>)
 80154ee:	463a      	mov	r2, r7
 80154f0:	4628      	mov	r0, r5
 80154f2:	f7fa fedb 	bl	80102ac <uxr_set_reply_callback>
 80154f6:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 80154fa:	2304      	movs	r3, #4
 80154fc:	0092      	lsls	r2, r2, #2
 80154fe:	f504 7165 	add.w	r1, r4, #916	; 0x394
 8015502:	4628      	mov	r0, r5
 8015504:	f7fa ff12 	bl	801032c <uxr_create_input_reliable_stream>
 8015508:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 801550c:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 8015510:	0092      	lsls	r2, r2, #2
 8015512:	2304      	movs	r3, #4
 8015514:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 8015518:	4628      	mov	r0, r5
 801551a:	f7fa fedd 	bl	80102d8 <uxr_create_output_reliable_stream>
 801551e:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 8015522:	4628      	mov	r0, r5
 8015524:	f7fa fefc 	bl	8010320 <uxr_create_input_best_effort_stream>
 8015528:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 801552c:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 8015530:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8015534:	4628      	mov	r0, r5
 8015536:	3114      	adds	r1, #20
 8015538:	f7fa febc 	bl	80102b4 <uxr_create_output_best_effort_stream>
 801553c:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 8015540:	4628      	mov	r0, r5
 8015542:	f7fb fb4d 	bl	8010be0 <uxr_create_session>
 8015546:	b1f8      	cbz	r0, 8015588 <rmw_init+0x1f0>
 8015548:	4638      	mov	r0, r7
 801554a:	b002      	add	sp, #8
 801554c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015550:	270b      	movs	r7, #11
 8015552:	4638      	mov	r0, r7
 8015554:	b002      	add	sp, #8
 8015556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801555a:	2701      	movs	r7, #1
 801555c:	4638      	mov	r0, r7
 801555e:	b002      	add	sp, #8
 8015560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015564:	270c      	movs	r7, #12
 8015566:	4638      	mov	r0, r7
 8015568:	b002      	add	sp, #8
 801556a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801556e:	4650      	mov	r0, sl
 8015570:	f000 ff7a 	bl	8016468 <uxr_close_custom_transport>
 8015574:	480b      	ldr	r0, [pc, #44]	; (80155a4 <rmw_init+0x20c>)
 8015576:	4621      	mov	r1, r4
 8015578:	f7ff fdd6 	bl	8015128 <put_memory>
 801557c:	4638      	mov	r0, r7
 801557e:	f8c6 8048 	str.w	r8, [r6, #72]	; 0x48
 8015582:	b002      	add	sp, #8
 8015584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015588:	4650      	mov	r0, sl
 801558a:	f000 ff6d 	bl	8016468 <uxr_close_custom_transport>
 801558e:	4805      	ldr	r0, [pc, #20]	; (80155a4 <rmw_init+0x20c>)
 8015590:	4621      	mov	r1, r4
 8015592:	f7ff fdc9 	bl	8015128 <put_memory>
 8015596:	64b7      	str	r7, [r6, #72]	; 0x48
 8015598:	2701      	movs	r7, #1
 801559a:	e7d5      	b.n	8015548 <rmw_init+0x1b0>
 801559c:	08019fec 	.word	0x08019fec
 80155a0:	2000d298 	.word	0x2000d298
 80155a4:	2000d068 	.word	0x2000d068
 80155a8:	20009ec0 	.word	0x20009ec0
 80155ac:	2000aca0 	.word	0x2000aca0
 80155b0:	2000ce94 	.word	0x2000ce94
 80155b4:	2000d078 	.word	0x2000d078
 80155b8:	2000a7c8 	.word	0x2000a7c8
 80155bc:	2000d12c 	.word	0x2000d12c
 80155c0:	20009ee0 	.word	0x20009ee0
 80155c4:	20009ed0 	.word	0x20009ed0
 80155c8:	2000d1d0 	.word	0x2000d1d0
 80155cc:	2000d11c 	.word	0x2000d11c
 80155d0:	2000abd8 	.word	0x2000abd8
 80155d4:	2000a750 	.word	0x2000a750
 80155d8:	2000cea4 	.word	0x2000cea4
 80155dc:	2000d058 	.word	0x2000d058
 80155e0:	2000ce10 	.word	0x2000ce10
 80155e4:	2000d1bc 	.word	0x2000d1bc
 80155e8:	2000cda0 	.word	0x2000cda0
 80155ec:	2000e840 	.word	0x2000e840
 80155f0:	2000d13c 	.word	0x2000d13c
 80155f4:	2000d048 	.word	0x2000d048
 80155f8:	080179b9 	.word	0x080179b9
 80155fc:	080179b1 	.word	0x080179b1
 8015600:	08017a4d 	.word	0x08017a4d
 8015604:	08017ae5 	.word	0x08017ae5

08015608 <rmw_context_fini>:
 8015608:	4b17      	ldr	r3, [pc, #92]	; (8015668 <rmw_context_fini+0x60>)
 801560a:	b570      	push	{r4, r5, r6, lr}
 801560c:	681c      	ldr	r4, [r3, #0]
 801560e:	4605      	mov	r5, r0
 8015610:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8015612:	b33c      	cbz	r4, 8015664 <rmw_context_fini+0x5c>
 8015614:	2600      	movs	r6, #0
 8015616:	e9d4 4302 	ldrd	r4, r3, [r4, #8]
 801561a:	691a      	ldr	r2, [r3, #16]
 801561c:	4282      	cmp	r2, r0
 801561e:	d018      	beq.n	8015652 <rmw_context_fini+0x4a>
 8015620:	2c00      	cmp	r4, #0
 8015622:	d1f8      	bne.n	8015616 <rmw_context_fini+0xe>
 8015624:	b188      	cbz	r0, 801564a <rmw_context_fini+0x42>
 8015626:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801562a:	789b      	ldrb	r3, [r3, #2]
 801562c:	2b01      	cmp	r3, #1
 801562e:	bf14      	ite	ne
 8015630:	210a      	movne	r1, #10
 8015632:	2100      	moveq	r1, #0
 8015634:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015638:	f7fb fc94 	bl	8010f64 <uxr_delete_session_retries>
 801563c:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 801563e:	f7f8 ffa5 	bl	800e58c <rmw_uxrce_fini_session_memory>
 8015642:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8015644:	3010      	adds	r0, #16
 8015646:	f000 ff0f 	bl	8016468 <uxr_close_custom_transport>
 801564a:	2300      	movs	r3, #0
 801564c:	4630      	mov	r0, r6
 801564e:	64ab      	str	r3, [r5, #72]	; 0x48
 8015650:	bd70      	pop	{r4, r5, r6, pc}
 8015652:	f103 0018 	add.w	r0, r3, #24
 8015656:	f000 f91f 	bl	8015898 <rmw_destroy_node>
 801565a:	4606      	mov	r6, r0
 801565c:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 801565e:	2c00      	cmp	r4, #0
 8015660:	d1d9      	bne.n	8015616 <rmw_context_fini+0xe>
 8015662:	e7df      	b.n	8015624 <rmw_context_fini+0x1c>
 8015664:	4626      	mov	r6, r4
 8015666:	e7dd      	b.n	8015624 <rmw_context_fini+0x1c>
 8015668:	2000ce94 	.word	0x2000ce94

0801566c <create_topic>:
 801566c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015670:	4605      	mov	r5, r0
 8015672:	b084      	sub	sp, #16
 8015674:	482b      	ldr	r0, [pc, #172]	; (8015724 <create_topic+0xb8>)
 8015676:	460f      	mov	r7, r1
 8015678:	4616      	mov	r6, r2
 801567a:	f7ff fd45 	bl	8015108 <get_memory>
 801567e:	4604      	mov	r4, r0
 8015680:	2800      	cmp	r0, #0
 8015682:	d036      	beq.n	80156f2 <create_topic+0x86>
 8015684:	692a      	ldr	r2, [r5, #16]
 8015686:	68c4      	ldr	r4, [r0, #12]
 8015688:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 801572c <create_topic+0xc0>
 801568c:	61a5      	str	r5, [r4, #24]
 801568e:	f241 5396 	movw	r3, #5526	; 0x1596
 8015692:	6166      	str	r6, [r4, #20]
 8015694:	5ad0      	ldrh	r0, [r2, r3]
 8015696:	1c41      	adds	r1, r0, #1
 8015698:	52d1      	strh	r1, [r2, r3]
 801569a:	2102      	movs	r1, #2
 801569c:	f7fa fbfa 	bl	800fe94 <uxr_object_id>
 80156a0:	4641      	mov	r1, r8
 80156a2:	6120      	str	r0, [r4, #16]
 80156a4:	223c      	movs	r2, #60	; 0x3c
 80156a6:	4638      	mov	r0, r7
 80156a8:	f7f9 f944 	bl	800e934 <generate_topic_name>
 80156ac:	4607      	mov	r7, r0
 80156ae:	b320      	cbz	r0, 80156fa <create_topic+0x8e>
 80156b0:	4f1d      	ldr	r7, [pc, #116]	; (8015728 <create_topic+0xbc>)
 80156b2:	4630      	mov	r0, r6
 80156b4:	4639      	mov	r1, r7
 80156b6:	2264      	movs	r2, #100	; 0x64
 80156b8:	f7f9 f90c 	bl	800e8d4 <generate_type_name>
 80156bc:	4606      	mov	r6, r0
 80156be:	b320      	cbz	r0, 801570a <create_topic+0x9e>
 80156c0:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
 80156c4:	2106      	movs	r1, #6
 80156c6:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 80156ca:	9701      	str	r7, [sp, #4]
 80156cc:	f8cd 8000 	str.w	r8, [sp]
 80156d0:	9102      	str	r1, [sp, #8]
 80156d2:	6811      	ldr	r1, [r2, #0]
 80156d4:	6922      	ldr	r2, [r4, #16]
 80156d6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80156da:	f7fa fa57 	bl	800fb8c <uxr_buffer_create_topic_bin>
 80156de:	4602      	mov	r2, r0
 80156e0:	6928      	ldr	r0, [r5, #16]
 80156e2:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80156e6:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80156ea:	f7f9 f8bd 	bl	800e868 <run_xrce_session>
 80156ee:	4605      	mov	r5, r0
 80156f0:	b198      	cbz	r0, 801571a <create_topic+0xae>
 80156f2:	4620      	mov	r0, r4
 80156f4:	b004      	add	sp, #16
 80156f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156fa:	4620      	mov	r0, r4
 80156fc:	f7f8 ffbc 	bl	800e678 <rmw_uxrce_fini_topic_memory>
 8015700:	463c      	mov	r4, r7
 8015702:	4620      	mov	r0, r4
 8015704:	b004      	add	sp, #16
 8015706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801570a:	4620      	mov	r0, r4
 801570c:	f7f8 ffb4 	bl	800e678 <rmw_uxrce_fini_topic_memory>
 8015710:	4634      	mov	r4, r6
 8015712:	4620      	mov	r0, r4
 8015714:	b004      	add	sp, #16
 8015716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801571a:	4620      	mov	r0, r4
 801571c:	f7f8 ffac 	bl	800e678 <rmw_uxrce_fini_topic_memory>
 8015720:	462c      	mov	r4, r5
 8015722:	e7e6      	b.n	80156f2 <create_topic+0x86>
 8015724:	2000d058 	.word	0x2000d058
 8015728:	20009c80 	.word	0x20009c80
 801572c:	20009c44 	.word	0x20009c44

08015730 <destroy_topic>:
 8015730:	b538      	push	{r3, r4, r5, lr}
 8015732:	6985      	ldr	r5, [r0, #24]
 8015734:	b1d5      	cbz	r5, 801576c <destroy_topic+0x3c>
 8015736:	4604      	mov	r4, r0
 8015738:	6928      	ldr	r0, [r5, #16]
 801573a:	6922      	ldr	r2, [r4, #16]
 801573c:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8015740:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015744:	6819      	ldr	r1, [r3, #0]
 8015746:	f7fa f9a3 	bl	800fa90 <uxr_buffer_delete_entity>
 801574a:	4602      	mov	r2, r0
 801574c:	6928      	ldr	r0, [r5, #16]
 801574e:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8015752:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8015756:	f7f9 f887 	bl	800e868 <run_xrce_session>
 801575a:	2800      	cmp	r0, #0
 801575c:	4620      	mov	r0, r4
 801575e:	bf14      	ite	ne
 8015760:	2400      	movne	r4, #0
 8015762:	2402      	moveq	r4, #2
 8015764:	f7f8 ff88 	bl	800e678 <rmw_uxrce_fini_topic_memory>
 8015768:	4620      	mov	r0, r4
 801576a:	bd38      	pop	{r3, r4, r5, pc}
 801576c:	2401      	movs	r4, #1
 801576e:	4620      	mov	r0, r4
 8015770:	bd38      	pop	{r3, r4, r5, pc}
 8015772:	bf00      	nop

08015774 <create_node>:
 8015774:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015778:	b083      	sub	sp, #12
 801577a:	2b00      	cmp	r3, #0
 801577c:	d05f      	beq.n	801583e <create_node+0xca>
 801577e:	4606      	mov	r6, r0
 8015780:	4835      	ldr	r0, [pc, #212]	; (8015858 <create_node+0xe4>)
 8015782:	460f      	mov	r7, r1
 8015784:	4690      	mov	r8, r2
 8015786:	461d      	mov	r5, r3
 8015788:	f7ff fcbe 	bl	8015108 <get_memory>
 801578c:	2800      	cmp	r0, #0
 801578e:	d056      	beq.n	801583e <create_node+0xca>
 8015790:	68c4      	ldr	r4, [r0, #12]
 8015792:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8015794:	6123      	str	r3, [r4, #16]
 8015796:	f7ff fd1f 	bl	80151d8 <rmw_get_implementation_identifier>
 801579a:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 801579e:	e9c4 0406 	strd	r0, r4, [r4, #24]
 80157a2:	f8c4 9020 	str.w	r9, [r4, #32]
 80157a6:	4630      	mov	r0, r6
 80157a8:	f7ea fd24 	bl	80001f4 <strlen>
 80157ac:	1c42      	adds	r2, r0, #1
 80157ae:	2a3c      	cmp	r2, #60	; 0x3c
 80157b0:	f104 0518 	add.w	r5, r4, #24
 80157b4:	d840      	bhi.n	8015838 <create_node+0xc4>
 80157b6:	4648      	mov	r0, r9
 80157b8:	4631      	mov	r1, r6
 80157ba:	f104 0968 	add.w	r9, r4, #104	; 0x68
 80157be:	f003 f846 	bl	801884e <memcpy>
 80157c2:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 80157c6:	4638      	mov	r0, r7
 80157c8:	f7ea fd14 	bl	80001f4 <strlen>
 80157cc:	1c42      	adds	r2, r0, #1
 80157ce:	2a3c      	cmp	r2, #60	; 0x3c
 80157d0:	d832      	bhi.n	8015838 <create_node+0xc4>
 80157d2:	4639      	mov	r1, r7
 80157d4:	4648      	mov	r0, r9
 80157d6:	f003 f83a 	bl	801884e <memcpy>
 80157da:	f241 5394 	movw	r3, #5524	; 0x1594
 80157de:	6922      	ldr	r2, [r4, #16]
 80157e0:	5ad0      	ldrh	r0, [r2, r3]
 80157e2:	2101      	movs	r1, #1
 80157e4:	eb00 0c01 	add.w	ip, r0, r1
 80157e8:	f822 c003 	strh.w	ip, [r2, r3]
 80157ec:	f7fa fb52 	bl	800fe94 <uxr_object_id>
 80157f0:	6160      	str	r0, [r4, #20]
 80157f2:	783b      	ldrb	r3, [r7, #0]
 80157f4:	2b2f      	cmp	r3, #47	; 0x2f
 80157f6:	d127      	bne.n	8015848 <create_node+0xd4>
 80157f8:	787b      	ldrb	r3, [r7, #1]
 80157fa:	bb2b      	cbnz	r3, 8015848 <create_node+0xd4>
 80157fc:	4a17      	ldr	r2, [pc, #92]	; (801585c <create_node+0xe8>)
 80157fe:	4818      	ldr	r0, [pc, #96]	; (8015860 <create_node+0xec>)
 8015800:	4633      	mov	r3, r6
 8015802:	213c      	movs	r1, #60	; 0x3c
 8015804:	f002 fda4 	bl	8018350 <sniprintf>
 8015808:	6920      	ldr	r0, [r4, #16]
 801580a:	4b15      	ldr	r3, [pc, #84]	; (8015860 <create_node+0xec>)
 801580c:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8015810:	9300      	str	r3, [sp, #0]
 8015812:	2306      	movs	r3, #6
 8015814:	9301      	str	r3, [sp, #4]
 8015816:	6811      	ldr	r1, [r2, #0]
 8015818:	6962      	ldr	r2, [r4, #20]
 801581a:	fa1f f388 	uxth.w	r3, r8
 801581e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015822:	f7fa f981 	bl	800fb28 <uxr_buffer_create_participant_bin>
 8015826:	4602      	mov	r2, r0
 8015828:	6920      	ldr	r0, [r4, #16]
 801582a:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801582e:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8015832:	f7f9 f819 	bl	800e868 <run_xrce_session>
 8015836:	b918      	cbnz	r0, 8015840 <create_node+0xcc>
 8015838:	4628      	mov	r0, r5
 801583a:	f7f8 fead 	bl	800e598 <rmw_uxrce_fini_node_memory>
 801583e:	2500      	movs	r5, #0
 8015840:	4628      	mov	r0, r5
 8015842:	b003      	add	sp, #12
 8015844:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015848:	4a06      	ldr	r2, [pc, #24]	; (8015864 <create_node+0xf0>)
 801584a:	9600      	str	r6, [sp, #0]
 801584c:	463b      	mov	r3, r7
 801584e:	213c      	movs	r1, #60	; 0x3c
 8015850:	4803      	ldr	r0, [pc, #12]	; (8015860 <create_node+0xec>)
 8015852:	f002 fd7d 	bl	8018350 <sniprintf>
 8015856:	e7d7      	b.n	8015808 <create_node+0x94>
 8015858:	2000ce94 	.word	0x2000ce94
 801585c:	08019ae4 	.word	0x08019ae4
 8015860:	20009ce4 	.word	0x20009ce4
 8015864:	08019b24 	.word	0x08019b24

08015868 <rmw_create_node>:
 8015868:	b199      	cbz	r1, 8015892 <rmw_create_node+0x2a>
 801586a:	b430      	push	{r4, r5}
 801586c:	4615      	mov	r5, r2
 801586e:	461a      	mov	r2, r3
 8015870:	780b      	ldrb	r3, [r1, #0]
 8015872:	460c      	mov	r4, r1
 8015874:	b153      	cbz	r3, 801588c <rmw_create_node+0x24>
 8015876:	b14d      	cbz	r5, 801588c <rmw_create_node+0x24>
 8015878:	782b      	ldrb	r3, [r5, #0]
 801587a:	b13b      	cbz	r3, 801588c <rmw_create_node+0x24>
 801587c:	b902      	cbnz	r2, 8015880 <rmw_create_node+0x18>
 801587e:	69c2      	ldr	r2, [r0, #28]
 8015880:	4603      	mov	r3, r0
 8015882:	4629      	mov	r1, r5
 8015884:	4620      	mov	r0, r4
 8015886:	bc30      	pop	{r4, r5}
 8015888:	f7ff bf74 	b.w	8015774 <create_node>
 801588c:	2000      	movs	r0, #0
 801588e:	bc30      	pop	{r4, r5}
 8015890:	4770      	bx	lr
 8015892:	2000      	movs	r0, #0
 8015894:	4770      	bx	lr
 8015896:	bf00      	nop

08015898 <rmw_destroy_node>:
 8015898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801589a:	2800      	cmp	r0, #0
 801589c:	d066      	beq.n	801596c <rmw_destroy_node+0xd4>
 801589e:	4607      	mov	r7, r0
 80158a0:	6800      	ldr	r0, [r0, #0]
 80158a2:	b128      	cbz	r0, 80158b0 <rmw_destroy_node+0x18>
 80158a4:	4b34      	ldr	r3, [pc, #208]	; (8015978 <rmw_destroy_node+0xe0>)
 80158a6:	6819      	ldr	r1, [r3, #0]
 80158a8:	f7ea fc9a 	bl	80001e0 <strcmp>
 80158ac:	2800      	cmp	r0, #0
 80158ae:	d15d      	bne.n	801596c <rmw_destroy_node+0xd4>
 80158b0:	687c      	ldr	r4, [r7, #4]
 80158b2:	2c00      	cmp	r4, #0
 80158b4:	d05a      	beq.n	801596c <rmw_destroy_node+0xd4>
 80158b6:	4b31      	ldr	r3, [pc, #196]	; (801597c <rmw_destroy_node+0xe4>)
 80158b8:	681d      	ldr	r5, [r3, #0]
 80158ba:	2d00      	cmp	r5, #0
 80158bc:	d059      	beq.n	8015972 <rmw_destroy_node+0xda>
 80158be:	2600      	movs	r6, #0
 80158c0:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 80158c4:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 80158c8:	429c      	cmp	r4, r3
 80158ca:	d047      	beq.n	801595c <rmw_destroy_node+0xc4>
 80158cc:	2d00      	cmp	r5, #0
 80158ce:	d1f7      	bne.n	80158c0 <rmw_destroy_node+0x28>
 80158d0:	4b2b      	ldr	r3, [pc, #172]	; (8015980 <rmw_destroy_node+0xe8>)
 80158d2:	681d      	ldr	r5, [r3, #0]
 80158d4:	b15d      	cbz	r5, 80158ee <rmw_destroy_node+0x56>
 80158d6:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 80158da:	6a0b      	ldr	r3, [r1, #32]
 80158dc:	429c      	cmp	r4, r3
 80158de:	d1f9      	bne.n	80158d4 <rmw_destroy_node+0x3c>
 80158e0:	317c      	adds	r1, #124	; 0x7c
 80158e2:	4638      	mov	r0, r7
 80158e4:	f7f8 fc76 	bl	800e1d4 <rmw_destroy_subscription>
 80158e8:	4606      	mov	r6, r0
 80158ea:	2d00      	cmp	r5, #0
 80158ec:	d1f3      	bne.n	80158d6 <rmw_destroy_node+0x3e>
 80158ee:	4b25      	ldr	r3, [pc, #148]	; (8015984 <rmw_destroy_node+0xec>)
 80158f0:	681d      	ldr	r5, [r3, #0]
 80158f2:	b15d      	cbz	r5, 801590c <rmw_destroy_node+0x74>
 80158f4:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 80158f8:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 80158fa:	429c      	cmp	r4, r3
 80158fc:	d1f9      	bne.n	80158f2 <rmw_destroy_node+0x5a>
 80158fe:	317c      	adds	r1, #124	; 0x7c
 8015900:	4638      	mov	r0, r7
 8015902:	f000 f951 	bl	8015ba8 <rmw_destroy_service>
 8015906:	4606      	mov	r6, r0
 8015908:	2d00      	cmp	r5, #0
 801590a:	d1f3      	bne.n	80158f4 <rmw_destroy_node+0x5c>
 801590c:	4b1e      	ldr	r3, [pc, #120]	; (8015988 <rmw_destroy_node+0xf0>)
 801590e:	681d      	ldr	r5, [r3, #0]
 8015910:	b15d      	cbz	r5, 801592a <rmw_destroy_node+0x92>
 8015912:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 8015916:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8015918:	429c      	cmp	r4, r3
 801591a:	d1f9      	bne.n	8015910 <rmw_destroy_node+0x78>
 801591c:	317c      	adds	r1, #124	; 0x7c
 801591e:	4638      	mov	r0, r7
 8015920:	f7ff fc16 	bl	8015150 <rmw_destroy_client>
 8015924:	4606      	mov	r6, r0
 8015926:	2d00      	cmp	r5, #0
 8015928:	d1f3      	bne.n	8015912 <rmw_destroy_node+0x7a>
 801592a:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 801592e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8015932:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015936:	6819      	ldr	r1, [r3, #0]
 8015938:	f7fa f8aa 	bl	800fa90 <uxr_buffer_delete_entity>
 801593c:	4602      	mov	r2, r0
 801593e:	6920      	ldr	r0, [r4, #16]
 8015940:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8015944:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8015948:	f7f8 ff8e 	bl	800e868 <run_xrce_session>
 801594c:	2800      	cmp	r0, #0
 801594e:	bf08      	it	eq
 8015950:	2602      	moveq	r6, #2
 8015952:	4638      	mov	r0, r7
 8015954:	f7f8 fe20 	bl	800e598 <rmw_uxrce_fini_node_memory>
 8015958:	4630      	mov	r0, r6
 801595a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801595c:	3184      	adds	r1, #132	; 0x84
 801595e:	4638      	mov	r0, r7
 8015960:	f7f8 fb06 	bl	800df70 <rmw_destroy_publisher>
 8015964:	4606      	mov	r6, r0
 8015966:	2d00      	cmp	r5, #0
 8015968:	d1aa      	bne.n	80158c0 <rmw_destroy_node+0x28>
 801596a:	e7b1      	b.n	80158d0 <rmw_destroy_node+0x38>
 801596c:	2601      	movs	r6, #1
 801596e:	4630      	mov	r0, r6
 8015970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015972:	462e      	mov	r6, r5
 8015974:	e7ac      	b.n	80158d0 <rmw_destroy_node+0x38>
 8015976:	bf00      	nop
 8015978:	08019fec 	.word	0x08019fec
 801597c:	20009ed0 	.word	0x20009ed0
 8015980:	2000d12c 	.word	0x2000d12c
 8015984:	2000d11c 	.word	0x2000d11c
 8015988:	2000a750 	.word	0x2000a750

0801598c <rmw_node_get_graph_guard_condition>:
 801598c:	6843      	ldr	r3, [r0, #4]
 801598e:	6918      	ldr	r0, [r3, #16]
 8015990:	f500 705a 	add.w	r0, r0, #872	; 0x368
 8015994:	4770      	bx	lr
 8015996:	bf00      	nop

08015998 <rmw_take_request>:
 8015998:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801599c:	4605      	mov	r5, r0
 801599e:	6800      	ldr	r0, [r0, #0]
 80159a0:	b089      	sub	sp, #36	; 0x24
 80159a2:	460c      	mov	r4, r1
 80159a4:	4690      	mov	r8, r2
 80159a6:	461e      	mov	r6, r3
 80159a8:	b128      	cbz	r0, 80159b6 <rmw_take_request+0x1e>
 80159aa:	4b28      	ldr	r3, [pc, #160]	; (8015a4c <rmw_take_request+0xb4>)
 80159ac:	6819      	ldr	r1, [r3, #0]
 80159ae:	f7ea fc17 	bl	80001e0 <strcmp>
 80159b2:	2800      	cmp	r0, #0
 80159b4:	d146      	bne.n	8015a44 <rmw_take_request+0xac>
 80159b6:	b10e      	cbz	r6, 80159bc <rmw_take_request+0x24>
 80159b8:	2300      	movs	r3, #0
 80159ba:	7033      	strb	r3, [r6, #0]
 80159bc:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80159c0:	f7f8 feda 	bl	800e778 <rmw_uxrce_clean_expired_static_input_buffer>
 80159c4:	4648      	mov	r0, r9
 80159c6:	f7f8 feaf 	bl	800e728 <rmw_uxrce_find_static_input_buffer_by_owner>
 80159ca:	4607      	mov	r7, r0
 80159cc:	b3b0      	cbz	r0, 8015a3c <rmw_take_request+0xa4>
 80159ce:	68c5      	ldr	r5, [r0, #12]
 80159d0:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 80159d4:	f8d5 183c 	ldr.w	r1, [r5, #2108]	; 0x83c
 80159d8:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 80159dc:	7423      	strb	r3, [r4, #16]
 80159de:	e9c4 1208 	strd	r1, r2, [r4, #32]
 80159e2:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	; 0x834
 80159e6:	f895 2836 	ldrb.w	r2, [r5, #2102]	; 0x836
 80159ea:	74e2      	strb	r2, [r4, #19]
 80159ec:	f8a4 3011 	strh.w	r3, [r4, #17]
 80159f0:	f8d5 2828 	ldr.w	r2, [r5, #2088]	; 0x828
 80159f4:	f8d5 382c 	ldr.w	r3, [r5, #2092]	; 0x82c
 80159f8:	f8d5 1830 	ldr.w	r1, [r5, #2096]	; 0x830
 80159fc:	61e1      	str	r1, [r4, #28]
 80159fe:	6162      	str	r2, [r4, #20]
 8015a00:	61a3      	str	r3, [r4, #24]
 8015a02:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8015a06:	689b      	ldr	r3, [r3, #8]
 8015a08:	4798      	blx	r3
 8015a0a:	6844      	ldr	r4, [r0, #4]
 8015a0c:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 8015a10:	f105 0110 	add.w	r1, r5, #16
 8015a14:	4668      	mov	r0, sp
 8015a16:	f7f9 ffcb 	bl	800f9b0 <ucdr_init_buffer>
 8015a1a:	68e3      	ldr	r3, [r4, #12]
 8015a1c:	4641      	mov	r1, r8
 8015a1e:	4668      	mov	r0, sp
 8015a20:	4798      	blx	r3
 8015a22:	4639      	mov	r1, r7
 8015a24:	4604      	mov	r4, r0
 8015a26:	480a      	ldr	r0, [pc, #40]	; (8015a50 <rmw_take_request+0xb8>)
 8015a28:	f7ff fb7e 	bl	8015128 <put_memory>
 8015a2c:	b106      	cbz	r6, 8015a30 <rmw_take_request+0x98>
 8015a2e:	7034      	strb	r4, [r6, #0]
 8015a30:	f084 0001 	eor.w	r0, r4, #1
 8015a34:	b2c0      	uxtb	r0, r0
 8015a36:	b009      	add	sp, #36	; 0x24
 8015a38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a3c:	2001      	movs	r0, #1
 8015a3e:	b009      	add	sp, #36	; 0x24
 8015a40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a44:	200c      	movs	r0, #12
 8015a46:	b009      	add	sp, #36	; 0x24
 8015a48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a4c:	08019fec 	.word	0x08019fec
 8015a50:	20009ec0 	.word	0x20009ec0

08015a54 <rmw_send_response>:
 8015a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a56:	4605      	mov	r5, r0
 8015a58:	6800      	ldr	r0, [r0, #0]
 8015a5a:	b091      	sub	sp, #68	; 0x44
 8015a5c:	460c      	mov	r4, r1
 8015a5e:	4617      	mov	r7, r2
 8015a60:	b128      	cbz	r0, 8015a6e <rmw_send_response+0x1a>
 8015a62:	4b2a      	ldr	r3, [pc, #168]	; (8015b0c <rmw_send_response+0xb8>)
 8015a64:	6819      	ldr	r1, [r3, #0]
 8015a66:	f7ea fbbb 	bl	80001e0 <strcmp>
 8015a6a:	2800      	cmp	r0, #0
 8015a6c:	d143      	bne.n	8015af6 <rmw_send_response+0xa2>
 8015a6e:	4623      	mov	r3, r4
 8015a70:	4626      	mov	r6, r4
 8015a72:	f853 0f04 	ldr.w	r0, [r3, #4]!
 8015a76:	f836 ef01 	ldrh.w	lr, [r6, #1]!
 8015a7a:	6859      	ldr	r1, [r3, #4]
 8015a7c:	686d      	ldr	r5, [r5, #4]
 8015a7e:	689a      	ldr	r2, [r3, #8]
 8015a80:	78b3      	ldrb	r3, [r6, #2]
 8015a82:	f894 c000 	ldrb.w	ip, [r4]
 8015a86:	6966      	ldr	r6, [r4, #20]
 8015a88:	f88d 3016 	strb.w	r3, [sp, #22]
 8015a8c:	ab02      	add	r3, sp, #8
 8015a8e:	f8ad e014 	strh.w	lr, [sp, #20]
 8015a92:	f88d c017 	strb.w	ip, [sp, #23]
 8015a96:	9606      	str	r6, [sp, #24]
 8015a98:	c307      	stmia	r3!, {r0, r1, r2}
 8015a9a:	696b      	ldr	r3, [r5, #20]
 8015a9c:	6922      	ldr	r2, [r4, #16]
 8015a9e:	9207      	str	r2, [sp, #28]
 8015aa0:	68db      	ldr	r3, [r3, #12]
 8015aa2:	6fae      	ldr	r6, [r5, #120]	; 0x78
 8015aa4:	4798      	blx	r3
 8015aa6:	4603      	mov	r3, r0
 8015aa8:	4638      	mov	r0, r7
 8015aaa:	685c      	ldr	r4, [r3, #4]
 8015aac:	6923      	ldr	r3, [r4, #16]
 8015aae:	4798      	blx	r3
 8015ab0:	6933      	ldr	r3, [r6, #16]
 8015ab2:	3018      	adds	r0, #24
 8015ab4:	9000      	str	r0, [sp, #0]
 8015ab6:	692a      	ldr	r2, [r5, #16]
 8015ab8:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8015aba:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8015abe:	ab08      	add	r3, sp, #32
 8015ac0:	f7fb fe1e 	bl	8011700 <uxr_prepare_output_stream>
 8015ac4:	b910      	cbnz	r0, 8015acc <rmw_send_response+0x78>
 8015ac6:	2001      	movs	r0, #1
 8015ac8:	b011      	add	sp, #68	; 0x44
 8015aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015acc:	a902      	add	r1, sp, #8
 8015ace:	a808      	add	r0, sp, #32
 8015ad0:	f7fc ff34 	bl	801293c <uxr_serialize_SampleIdentity>
 8015ad4:	68a3      	ldr	r3, [r4, #8]
 8015ad6:	a908      	add	r1, sp, #32
 8015ad8:	4638      	mov	r0, r7
 8015ada:	4798      	blx	r3
 8015adc:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 8015ae0:	6930      	ldr	r0, [r6, #16]
 8015ae2:	2b01      	cmp	r3, #1
 8015ae4:	d00a      	beq.n	8015afc <rmw_send_response+0xa8>
 8015ae6:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8015ae8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015aec:	f7fb f800 	bl	8010af0 <uxr_run_session_until_confirm_delivery>
 8015af0:	2000      	movs	r0, #0
 8015af2:	b011      	add	sp, #68	; 0x44
 8015af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015af6:	200c      	movs	r0, #12
 8015af8:	b011      	add	sp, #68	; 0x44
 8015afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015afc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015b00:	f7fa fc3a 	bl	8010378 <uxr_flash_output_streams>
 8015b04:	2000      	movs	r0, #0
 8015b06:	b011      	add	sp, #68	; 0x44
 8015b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b0a:	bf00      	nop
 8015b0c:	08019fec 	.word	0x08019fec

08015b10 <rmw_take_response>:
 8015b10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015b14:	4604      	mov	r4, r0
 8015b16:	6800      	ldr	r0, [r0, #0]
 8015b18:	b089      	sub	sp, #36	; 0x24
 8015b1a:	4688      	mov	r8, r1
 8015b1c:	4617      	mov	r7, r2
 8015b1e:	461d      	mov	r5, r3
 8015b20:	b120      	cbz	r0, 8015b2c <rmw_take_response+0x1c>
 8015b22:	4b1f      	ldr	r3, [pc, #124]	; (8015ba0 <rmw_take_response+0x90>)
 8015b24:	6819      	ldr	r1, [r3, #0]
 8015b26:	f7ea fb5b 	bl	80001e0 <strcmp>
 8015b2a:	bb88      	cbnz	r0, 8015b90 <rmw_take_response+0x80>
 8015b2c:	b10d      	cbz	r5, 8015b32 <rmw_take_response+0x22>
 8015b2e:	2300      	movs	r3, #0
 8015b30:	702b      	strb	r3, [r5, #0]
 8015b32:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8015b36:	f7f8 fe1f 	bl	800e778 <rmw_uxrce_clean_expired_static_input_buffer>
 8015b3a:	4648      	mov	r0, r9
 8015b3c:	f7f8 fdf4 	bl	800e728 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015b40:	4606      	mov	r6, r0
 8015b42:	b348      	cbz	r0, 8015b98 <rmw_take_response+0x88>
 8015b44:	68c4      	ldr	r4, [r0, #12]
 8015b46:	f8d9 1014 	ldr.w	r1, [r9, #20]
 8015b4a:	f604 0328 	addw	r3, r4, #2088	; 0x828
 8015b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b52:	68c9      	ldr	r1, [r1, #12]
 8015b54:	e9c8 2308 	strd	r2, r3, [r8, #32]
 8015b58:	4788      	blx	r1
 8015b5a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8015b5e:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 8015b62:	f104 0110 	add.w	r1, r4, #16
 8015b66:	4668      	mov	r0, sp
 8015b68:	f7f9 ff22 	bl	800f9b0 <ucdr_init_buffer>
 8015b6c:	4639      	mov	r1, r7
 8015b6e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015b72:	4668      	mov	r0, sp
 8015b74:	4798      	blx	r3
 8015b76:	4631      	mov	r1, r6
 8015b78:	4604      	mov	r4, r0
 8015b7a:	480a      	ldr	r0, [pc, #40]	; (8015ba4 <rmw_take_response+0x94>)
 8015b7c:	f7ff fad4 	bl	8015128 <put_memory>
 8015b80:	b105      	cbz	r5, 8015b84 <rmw_take_response+0x74>
 8015b82:	702c      	strb	r4, [r5, #0]
 8015b84:	f084 0001 	eor.w	r0, r4, #1
 8015b88:	b2c0      	uxtb	r0, r0
 8015b8a:	b009      	add	sp, #36	; 0x24
 8015b8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015b90:	200c      	movs	r0, #12
 8015b92:	b009      	add	sp, #36	; 0x24
 8015b94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015b98:	2001      	movs	r0, #1
 8015b9a:	b009      	add	sp, #36	; 0x24
 8015b9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015ba0:	08019fec 	.word	0x08019fec
 8015ba4:	20009ec0 	.word	0x20009ec0

08015ba8 <rmw_destroy_service>:
 8015ba8:	b570      	push	{r4, r5, r6, lr}
 8015baa:	b128      	cbz	r0, 8015bb8 <rmw_destroy_service+0x10>
 8015bac:	4604      	mov	r4, r0
 8015bae:	6800      	ldr	r0, [r0, #0]
 8015bb0:	460d      	mov	r5, r1
 8015bb2:	f7f8 fed9 	bl	800e968 <is_uxrce_rmw_identifier_valid>
 8015bb6:	b910      	cbnz	r0, 8015bbe <rmw_destroy_service+0x16>
 8015bb8:	2401      	movs	r4, #1
 8015bba:	4620      	mov	r0, r4
 8015bbc:	bd70      	pop	{r4, r5, r6, pc}
 8015bbe:	6863      	ldr	r3, [r4, #4]
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	d0f9      	beq.n	8015bb8 <rmw_destroy_service+0x10>
 8015bc4:	2d00      	cmp	r5, #0
 8015bc6:	d0f7      	beq.n	8015bb8 <rmw_destroy_service+0x10>
 8015bc8:	6828      	ldr	r0, [r5, #0]
 8015bca:	f7f8 fecd 	bl	800e968 <is_uxrce_rmw_identifier_valid>
 8015bce:	2800      	cmp	r0, #0
 8015bd0:	d0f2      	beq.n	8015bb8 <rmw_destroy_service+0x10>
 8015bd2:	686e      	ldr	r6, [r5, #4]
 8015bd4:	2e00      	cmp	r6, #0
 8015bd6:	d0ef      	beq.n	8015bb8 <rmw_destroy_service+0x10>
 8015bd8:	6864      	ldr	r4, [r4, #4]
 8015bda:	6932      	ldr	r2, [r6, #16]
 8015bdc:	6920      	ldr	r0, [r4, #16]
 8015bde:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8015be2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015be6:	6819      	ldr	r1, [r3, #0]
 8015be8:	f7fa f9bc 	bl	800ff64 <uxr_buffer_cancel_data>
 8015bec:	4602      	mov	r2, r0
 8015bee:	6920      	ldr	r0, [r4, #16]
 8015bf0:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8015bf4:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8015bf8:	f7f8 fe36 	bl	800e868 <run_xrce_session>
 8015bfc:	6920      	ldr	r0, [r4, #16]
 8015bfe:	6932      	ldr	r2, [r6, #16]
 8015c00:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8015c04:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015c08:	6819      	ldr	r1, [r3, #0]
 8015c0a:	f7f9 ff41 	bl	800fa90 <uxr_buffer_delete_entity>
 8015c0e:	4602      	mov	r2, r0
 8015c10:	6920      	ldr	r0, [r4, #16]
 8015c12:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8015c16:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8015c1a:	f7f8 fe25 	bl	800e868 <run_xrce_session>
 8015c1e:	2800      	cmp	r0, #0
 8015c20:	4628      	mov	r0, r5
 8015c22:	bf14      	ite	ne
 8015c24:	2400      	movne	r4, #0
 8015c26:	2402      	moveq	r4, #2
 8015c28:	f7f8 fcfa 	bl	800e620 <rmw_uxrce_fini_service_memory>
 8015c2c:	e7c5      	b.n	8015bba <rmw_destroy_service+0x12>
 8015c2e:	bf00      	nop

08015c30 <rmw_uxrce_transport_init>:
 8015c30:	b508      	push	{r3, lr}
 8015c32:	b108      	cbz	r0, 8015c38 <rmw_uxrce_transport_init+0x8>
 8015c34:	f100 0210 	add.w	r2, r0, #16
 8015c38:	b139      	cbz	r1, 8015c4a <rmw_uxrce_transport_init+0x1a>
 8015c3a:	6949      	ldr	r1, [r1, #20]
 8015c3c:	4610      	mov	r0, r2
 8015c3e:	f000 fbdf 	bl	8016400 <uxr_init_custom_transport>
 8015c42:	f080 0001 	eor.w	r0, r0, #1
 8015c46:	b2c0      	uxtb	r0, r0
 8015c48:	bd08      	pop	{r3, pc}
 8015c4a:	4b04      	ldr	r3, [pc, #16]	; (8015c5c <rmw_uxrce_transport_init+0x2c>)
 8015c4c:	4610      	mov	r0, r2
 8015c4e:	6859      	ldr	r1, [r3, #4]
 8015c50:	f000 fbd6 	bl	8016400 <uxr_init_custom_transport>
 8015c54:	f080 0001 	eor.w	r0, r0, #1
 8015c58:	b2c0      	uxtb	r0, r0
 8015c5a:	bd08      	pop	{r3, pc}
 8015c5c:	20009ea0 	.word	0x20009ea0

08015c60 <rmw_wait>:
 8015c60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c64:	460f      	mov	r7, r1
 8015c66:	4606      	mov	r6, r0
 8015c68:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015c6a:	469a      	mov	sl, r3
 8015c6c:	4615      	mov	r5, r2
 8015c6e:	2a00      	cmp	r2, #0
 8015c70:	f000 8122 	beq.w	8015eb8 <rmw_wait+0x258>
 8015c74:	2900      	cmp	r1, #0
 8015c76:	f000 812a 	beq.w	8015ece <rmw_wait+0x26e>
 8015c7a:	e9d1 2300 	ldrd	r2, r3, [r1]
 8015c7e:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8015c82:	015c      	lsls	r4, r3, #5
 8015c84:	ebbb 0b02 	subs.w	fp, fp, r2
 8015c88:	ea44 64d2 	orr.w	r4, r4, r2, lsr #27
 8015c8c:	eb64 0403 	sbc.w	r4, r4, r3
 8015c90:	ea4f 008b 	mov.w	r0, fp, lsl #2
 8015c94:	00a4      	lsls	r4, r4, #2
 8015c96:	ea44 749b 	orr.w	r4, r4, fp, lsr #30
 8015c9a:	eb10 0b02 	adds.w	fp, r0, r2
 8015c9e:	eb43 0404 	adc.w	r4, r3, r4
 8015ca2:	4aad      	ldr	r2, [pc, #692]	; (8015f58 <rmw_wait+0x2f8>)
 8015ca4:	2300      	movs	r3, #0
 8015ca6:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 8015caa:	f7ea ff6f 	bl	8000b8c <__aeabi_uldivmod>
 8015cae:	00e4      	lsls	r4, r4, #3
 8015cb0:	ea44 745b 	orr.w	r4, r4, fp, lsr #29
 8015cb4:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8015cb8:	eb1b 0800 	adds.w	r8, fp, r0
 8015cbc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8015cc0:	eb44 0901 	adc.w	r9, r4, r1
 8015cc4:	2300      	movs	r3, #0
 8015cc6:	4542      	cmp	r2, r8
 8015cc8:	eb73 0109 	sbcs.w	r1, r3, r9
 8015ccc:	f2c0 80f2 	blt.w	8015eb4 <rmw_wait+0x254>
 8015cd0:	f7f8 fd52 	bl	800e778 <rmw_uxrce_clean_expired_static_input_buffer>
 8015cd4:	4ba1      	ldr	r3, [pc, #644]	; (8015f5c <rmw_wait+0x2fc>)
 8015cd6:	681c      	ldr	r4, [r3, #0]
 8015cd8:	b144      	cbz	r4, 8015cec <rmw_wait+0x8c>
 8015cda:	4623      	mov	r3, r4
 8015cdc:	f241 50a4 	movw	r0, #5540	; 0x15a4
 8015ce0:	2100      	movs	r1, #0
 8015ce2:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8015ce6:	5411      	strb	r1, [r2, r0]
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d1fa      	bne.n	8015ce2 <rmw_wait+0x82>
 8015cec:	b185      	cbz	r5, 8015d10 <rmw_wait+0xb0>
 8015cee:	6829      	ldr	r1, [r5, #0]
 8015cf0:	b171      	cbz	r1, 8015d10 <rmw_wait+0xb0>
 8015cf2:	f8d5 e004 	ldr.w	lr, [r5, #4]
 8015cf6:	2300      	movs	r3, #0
 8015cf8:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 8015cfc:	2001      	movs	r0, #1
 8015cfe:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 8015d02:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8015d04:	3301      	adds	r3, #1
 8015d06:	6912      	ldr	r2, [r2, #16]
 8015d08:	4299      	cmp	r1, r3
 8015d0a:	f802 000c 	strb.w	r0, [r2, ip]
 8015d0e:	d1f6      	bne.n	8015cfe <rmw_wait+0x9e>
 8015d10:	f1ba 0f00 	cmp.w	sl, #0
 8015d14:	d011      	beq.n	8015d3a <rmw_wait+0xda>
 8015d16:	f8da 1000 	ldr.w	r1, [sl]
 8015d1a:	b171      	cbz	r1, 8015d3a <rmw_wait+0xda>
 8015d1c:	f8da e004 	ldr.w	lr, [sl, #4]
 8015d20:	2300      	movs	r3, #0
 8015d22:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 8015d26:	2001      	movs	r0, #1
 8015d28:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 8015d2c:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8015d2e:	3301      	adds	r3, #1
 8015d30:	6912      	ldr	r2, [r2, #16]
 8015d32:	4299      	cmp	r1, r3
 8015d34:	f802 000c 	strb.w	r0, [r2, ip]
 8015d38:	d1f6      	bne.n	8015d28 <rmw_wait+0xc8>
 8015d3a:	b186      	cbz	r6, 8015d5e <rmw_wait+0xfe>
 8015d3c:	6831      	ldr	r1, [r6, #0]
 8015d3e:	b171      	cbz	r1, 8015d5e <rmw_wait+0xfe>
 8015d40:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8015d44:	2300      	movs	r3, #0
 8015d46:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 8015d4a:	2001      	movs	r0, #1
 8015d4c:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 8015d50:	6a12      	ldr	r2, [r2, #32]
 8015d52:	3301      	adds	r3, #1
 8015d54:	6912      	ldr	r2, [r2, #16]
 8015d56:	4299      	cmp	r1, r3
 8015d58:	f802 000c 	strb.w	r0, [r2, ip]
 8015d5c:	d1f6      	bne.n	8015d4c <rmw_wait+0xec>
 8015d5e:	b34c      	cbz	r4, 8015db4 <rmw_wait+0x154>
 8015d60:	4622      	mov	r2, r4
 8015d62:	2300      	movs	r3, #0
 8015d64:	f241 50a4 	movw	r0, #5540	; 0x15a4
 8015d68:	e9d2 2102 	ldrd	r2, r1, [r2, #8]
 8015d6c:	5c09      	ldrb	r1, [r1, r0]
 8015d6e:	440b      	add	r3, r1
 8015d70:	b2db      	uxtb	r3, r3
 8015d72:	2a00      	cmp	r2, #0
 8015d74:	d1f8      	bne.n	8015d68 <rmw_wait+0x108>
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	f000 8082 	beq.w	8015e80 <rmw_wait+0x220>
 8015d7c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8015d80:	d00d      	beq.n	8015d9e <rmw_wait+0x13e>
 8015d82:	ee07 8a90 	vmov	s15, r8
 8015d86:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8015d8a:	ee07 3a90 	vmov	s15, r3
 8015d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015d96:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8015d9a:	ee17 8a90 	vmov	r8, s15
 8015d9e:	f241 59a4 	movw	r9, #5540	; 0x15a4
 8015da2:	68e0      	ldr	r0, [r4, #12]
 8015da4:	f810 3009 	ldrb.w	r3, [r0, r9]
 8015da8:	2b00      	cmp	r3, #0
 8015daa:	f040 8093 	bne.w	8015ed4 <rmw_wait+0x274>
 8015dae:	68a4      	ldr	r4, [r4, #8]
 8015db0:	2c00      	cmp	r4, #0
 8015db2:	d1f6      	bne.n	8015da2 <rmw_wait+0x142>
 8015db4:	2d00      	cmp	r5, #0
 8015db6:	f000 80ac 	beq.w	8015f12 <rmw_wait+0x2b2>
 8015dba:	682b      	ldr	r3, [r5, #0]
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	f000 8093 	beq.w	8015ee8 <rmw_wait+0x288>
 8015dc2:	2400      	movs	r4, #0
 8015dc4:	46a0      	mov	r8, r4
 8015dc6:	686b      	ldr	r3, [r5, #4]
 8015dc8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015dcc:	f7f8 fcac 	bl	800e728 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015dd0:	2800      	cmp	r0, #0
 8015dd2:	d05f      	beq.n	8015e94 <rmw_wait+0x234>
 8015dd4:	682b      	ldr	r3, [r5, #0]
 8015dd6:	3401      	adds	r4, #1
 8015dd8:	42a3      	cmp	r3, r4
 8015dda:	f04f 0801 	mov.w	r8, #1
 8015dde:	d8f2      	bhi.n	8015dc6 <rmw_wait+0x166>
 8015de0:	f1ba 0f00 	cmp.w	sl, #0
 8015de4:	d012      	beq.n	8015e0c <rmw_wait+0x1ac>
 8015de6:	f8da 3000 	ldr.w	r3, [sl]
 8015dea:	b17b      	cbz	r3, 8015e0c <rmw_wait+0x1ac>
 8015dec:	2400      	movs	r4, #0
 8015dee:	f8da 3004 	ldr.w	r3, [sl, #4]
 8015df2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015df6:	f7f8 fc97 	bl	800e728 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015dfa:	2800      	cmp	r0, #0
 8015dfc:	d052      	beq.n	8015ea4 <rmw_wait+0x244>
 8015dfe:	f8da 3000 	ldr.w	r3, [sl]
 8015e02:	3401      	adds	r4, #1
 8015e04:	42a3      	cmp	r3, r4
 8015e06:	f04f 0801 	mov.w	r8, #1
 8015e0a:	d8f0      	bhi.n	8015dee <rmw_wait+0x18e>
 8015e0c:	b1e6      	cbz	r6, 8015e48 <rmw_wait+0x1e8>
 8015e0e:	6833      	ldr	r3, [r6, #0]
 8015e10:	b1d3      	cbz	r3, 8015e48 <rmw_wait+0x1e8>
 8015e12:	2400      	movs	r4, #0
 8015e14:	6873      	ldr	r3, [r6, #4]
 8015e16:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015e1a:	f7f8 fc85 	bl	800e728 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015e1e:	b160      	cbz	r0, 8015e3a <rmw_wait+0x1da>
 8015e20:	6833      	ldr	r3, [r6, #0]
 8015e22:	3401      	adds	r4, #1
 8015e24:	42a3      	cmp	r3, r4
 8015e26:	d96c      	bls.n	8015f02 <rmw_wait+0x2a2>
 8015e28:	6873      	ldr	r3, [r6, #4]
 8015e2a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015e2e:	f04f 0801 	mov.w	r8, #1
 8015e32:	f7f8 fc79 	bl	800e728 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015e36:	2800      	cmp	r0, #0
 8015e38:	d1f2      	bne.n	8015e20 <rmw_wait+0x1c0>
 8015e3a:	e9d6 3200 	ldrd	r3, r2, [r6]
 8015e3e:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015e42:	3401      	adds	r4, #1
 8015e44:	42a3      	cmp	r3, r4
 8015e46:	d8e5      	bhi.n	8015e14 <rmw_wait+0x1b4>
 8015e48:	b1a7      	cbz	r7, 8015e74 <rmw_wait+0x214>
 8015e4a:	683c      	ldr	r4, [r7, #0]
 8015e4c:	b194      	cbz	r4, 8015e74 <rmw_wait+0x214>
 8015e4e:	2300      	movs	r3, #0
 8015e50:	461d      	mov	r5, r3
 8015e52:	e004      	b.n	8015e5e <rmw_wait+0x1fe>
 8015e54:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8015e58:	3301      	adds	r3, #1
 8015e5a:	42a3      	cmp	r3, r4
 8015e5c:	d00a      	beq.n	8015e74 <rmw_wait+0x214>
 8015e5e:	6878      	ldr	r0, [r7, #4]
 8015e60:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8015e64:	7c0a      	ldrb	r2, [r1, #16]
 8015e66:	2a00      	cmp	r2, #0
 8015e68:	d0f4      	beq.n	8015e54 <rmw_wait+0x1f4>
 8015e6a:	3301      	adds	r3, #1
 8015e6c:	42a3      	cmp	r3, r4
 8015e6e:	740d      	strb	r5, [r1, #16]
 8015e70:	4690      	mov	r8, r2
 8015e72:	d1f4      	bne.n	8015e5e <rmw_wait+0x1fe>
 8015e74:	f1b8 0f00 	cmp.w	r8, #0
 8015e78:	d040      	beq.n	8015efc <rmw_wait+0x29c>
 8015e7a:	2000      	movs	r0, #0
 8015e7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e80:	68e0      	ldr	r0, [r4, #12]
 8015e82:	2100      	movs	r1, #0
 8015e84:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015e88:	f7fa fdf8 	bl	8010a7c <uxr_run_session_timeout>
 8015e8c:	68a4      	ldr	r4, [r4, #8]
 8015e8e:	2c00      	cmp	r4, #0
 8015e90:	d1f6      	bne.n	8015e80 <rmw_wait+0x220>
 8015e92:	e78f      	b.n	8015db4 <rmw_wait+0x154>
 8015e94:	e9d5 3200 	ldrd	r3, r2, [r5]
 8015e98:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015e9c:	3401      	adds	r4, #1
 8015e9e:	42a3      	cmp	r3, r4
 8015ea0:	d891      	bhi.n	8015dc6 <rmw_wait+0x166>
 8015ea2:	e79d      	b.n	8015de0 <rmw_wait+0x180>
 8015ea4:	e9da 3200 	ldrd	r3, r2, [sl]
 8015ea8:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015eac:	3401      	adds	r4, #1
 8015eae:	429c      	cmp	r4, r3
 8015eb0:	d39d      	bcc.n	8015dee <rmw_wait+0x18e>
 8015eb2:	e7ab      	b.n	8015e0c <rmw_wait+0x1ac>
 8015eb4:	4690      	mov	r8, r2
 8015eb6:	e70b      	b.n	8015cd0 <rmw_wait+0x70>
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	f47f aedb 	bne.w	8015c74 <rmw_wait+0x14>
 8015ebe:	2800      	cmp	r0, #0
 8015ec0:	f47f aed8 	bne.w	8015c74 <rmw_wait+0x14>
 8015ec4:	2f00      	cmp	r7, #0
 8015ec6:	d0d8      	beq.n	8015e7a <rmw_wait+0x21a>
 8015ec8:	2900      	cmp	r1, #0
 8015eca:	f47f aed6 	bne.w	8015c7a <rmw_wait+0x1a>
 8015ece:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8015ed2:	e6fd      	b.n	8015cd0 <rmw_wait+0x70>
 8015ed4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015ed8:	4641      	mov	r1, r8
 8015eda:	f7fa fde9 	bl	8010ab0 <uxr_run_session_until_data>
 8015ede:	68a4      	ldr	r4, [r4, #8]
 8015ee0:	2c00      	cmp	r4, #0
 8015ee2:	f47f af5e 	bne.w	8015da2 <rmw_wait+0x142>
 8015ee6:	e765      	b.n	8015db4 <rmw_wait+0x154>
 8015ee8:	f1ba 0f00 	cmp.w	sl, #0
 8015eec:	d11e      	bne.n	8015f2c <rmw_wait+0x2cc>
 8015eee:	b35e      	cbz	r6, 8015f48 <rmw_wait+0x2e8>
 8015ef0:	6833      	ldr	r3, [r6, #0]
 8015ef2:	46d0      	mov	r8, sl
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d18c      	bne.n	8015e12 <rmw_wait+0x1b2>
 8015ef8:	2f00      	cmp	r7, #0
 8015efa:	d1a6      	bne.n	8015e4a <rmw_wait+0x1ea>
 8015efc:	2002      	movs	r0, #2
 8015efe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f02:	2f00      	cmp	r7, #0
 8015f04:	d0b9      	beq.n	8015e7a <rmw_wait+0x21a>
 8015f06:	683c      	ldr	r4, [r7, #0]
 8015f08:	f04f 0801 	mov.w	r8, #1
 8015f0c:	2c00      	cmp	r4, #0
 8015f0e:	d19e      	bne.n	8015e4e <rmw_wait+0x1ee>
 8015f10:	e7b3      	b.n	8015e7a <rmw_wait+0x21a>
 8015f12:	f1ba 0f00 	cmp.w	sl, #0
 8015f16:	d0ea      	beq.n	8015eee <rmw_wait+0x28e>
 8015f18:	f8da 3000 	ldr.w	r3, [sl]
 8015f1c:	46a8      	mov	r8, r5
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	f47f af64 	bne.w	8015dec <rmw_wait+0x18c>
 8015f24:	2e00      	cmp	r6, #0
 8015f26:	f47f af72 	bne.w	8015e0e <rmw_wait+0x1ae>
 8015f2a:	e009      	b.n	8015f40 <rmw_wait+0x2e0>
 8015f2c:	f8da 2000 	ldr.w	r2, [sl]
 8015f30:	4698      	mov	r8, r3
 8015f32:	2a00      	cmp	r2, #0
 8015f34:	f47f af5a 	bne.w	8015dec <rmw_wait+0x18c>
 8015f38:	4690      	mov	r8, r2
 8015f3a:	2e00      	cmp	r6, #0
 8015f3c:	f47f af67 	bne.w	8015e0e <rmw_wait+0x1ae>
 8015f40:	46b0      	mov	r8, r6
 8015f42:	2f00      	cmp	r7, #0
 8015f44:	d181      	bne.n	8015e4a <rmw_wait+0x1ea>
 8015f46:	e7d9      	b.n	8015efc <rmw_wait+0x29c>
 8015f48:	2f00      	cmp	r7, #0
 8015f4a:	d0d7      	beq.n	8015efc <rmw_wait+0x29c>
 8015f4c:	683c      	ldr	r4, [r7, #0]
 8015f4e:	46b0      	mov	r8, r6
 8015f50:	2c00      	cmp	r4, #0
 8015f52:	f47f af7c 	bne.w	8015e4e <rmw_wait+0x1ee>
 8015f56:	e7d1      	b.n	8015efc <rmw_wait+0x29c>
 8015f58:	000f4240 	.word	0x000f4240
 8015f5c:	2000d068 	.word	0x2000d068

08015f60 <rmw_create_wait_set>:
 8015f60:	b508      	push	{r3, lr}
 8015f62:	4803      	ldr	r0, [pc, #12]	; (8015f70 <rmw_create_wait_set+0x10>)
 8015f64:	f7ff f8d0 	bl	8015108 <get_memory>
 8015f68:	b108      	cbz	r0, 8015f6e <rmw_create_wait_set+0xe>
 8015f6a:	68c0      	ldr	r0, [r0, #12]
 8015f6c:	3010      	adds	r0, #16
 8015f6e:	bd08      	pop	{r3, pc}
 8015f70:	2000e840 	.word	0x2000e840

08015f74 <rmw_destroy_wait_set>:
 8015f74:	b508      	push	{r3, lr}
 8015f76:	4b08      	ldr	r3, [pc, #32]	; (8015f98 <rmw_destroy_wait_set+0x24>)
 8015f78:	6819      	ldr	r1, [r3, #0]
 8015f7a:	b911      	cbnz	r1, 8015f82 <rmw_destroy_wait_set+0xe>
 8015f7c:	e00a      	b.n	8015f94 <rmw_destroy_wait_set+0x20>
 8015f7e:	6889      	ldr	r1, [r1, #8]
 8015f80:	b141      	cbz	r1, 8015f94 <rmw_destroy_wait_set+0x20>
 8015f82:	68cb      	ldr	r3, [r1, #12]
 8015f84:	3310      	adds	r3, #16
 8015f86:	4298      	cmp	r0, r3
 8015f88:	d1f9      	bne.n	8015f7e <rmw_destroy_wait_set+0xa>
 8015f8a:	4803      	ldr	r0, [pc, #12]	; (8015f98 <rmw_destroy_wait_set+0x24>)
 8015f8c:	f7ff f8cc 	bl	8015128 <put_memory>
 8015f90:	2000      	movs	r0, #0
 8015f92:	bd08      	pop	{r3, pc}
 8015f94:	2001      	movs	r0, #1
 8015f96:	bd08      	pop	{r3, pc}
 8015f98:	2000e840 	.word	0x2000e840

08015f9c <rmw_uros_epoch_nanos>:
 8015f9c:	4b05      	ldr	r3, [pc, #20]	; (8015fb4 <rmw_uros_epoch_nanos+0x18>)
 8015f9e:	681b      	ldr	r3, [r3, #0]
 8015fa0:	b123      	cbz	r3, 8015fac <rmw_uros_epoch_nanos+0x10>
 8015fa2:	68d8      	ldr	r0, [r3, #12]
 8015fa4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015fa8:	f7fa b9dc 	b.w	8010364 <uxr_epoch_nanos>
 8015fac:	2000      	movs	r0, #0
 8015fae:	2100      	movs	r1, #0
 8015fb0:	4770      	bx	lr
 8015fb2:	bf00      	nop
 8015fb4:	2000d068 	.word	0x2000d068

08015fb8 <ucdr_serialize_endian_array_char>:
 8015fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015fbc:	4619      	mov	r1, r3
 8015fbe:	461e      	mov	r6, r3
 8015fc0:	4690      	mov	r8, r2
 8015fc2:	4604      	mov	r4, r0
 8015fc4:	f7f9 fca2 	bl	800f90c <ucdr_check_buffer_available_for>
 8015fc8:	b9e0      	cbnz	r0, 8016004 <ucdr_serialize_endian_array_char+0x4c>
 8015fca:	4637      	mov	r7, r6
 8015fcc:	e009      	b.n	8015fe2 <ucdr_serialize_endian_array_char+0x2a>
 8015fce:	68a0      	ldr	r0, [r4, #8]
 8015fd0:	f002 fc3d 	bl	801884e <memcpy>
 8015fd4:	68a2      	ldr	r2, [r4, #8]
 8015fd6:	6923      	ldr	r3, [r4, #16]
 8015fd8:	442a      	add	r2, r5
 8015fda:	442b      	add	r3, r5
 8015fdc:	1b7f      	subs	r7, r7, r5
 8015fde:	60a2      	str	r2, [r4, #8]
 8015fe0:	6123      	str	r3, [r4, #16]
 8015fe2:	2201      	movs	r2, #1
 8015fe4:	4639      	mov	r1, r7
 8015fe6:	4620      	mov	r0, r4
 8015fe8:	f7f9 fd16 	bl	800fa18 <ucdr_check_final_buffer_behavior_array>
 8015fec:	1bf1      	subs	r1, r6, r7
 8015fee:	4441      	add	r1, r8
 8015ff0:	4605      	mov	r5, r0
 8015ff2:	4602      	mov	r2, r0
 8015ff4:	2800      	cmp	r0, #0
 8015ff6:	d1ea      	bne.n	8015fce <ucdr_serialize_endian_array_char+0x16>
 8015ff8:	2301      	movs	r3, #1
 8015ffa:	7da0      	ldrb	r0, [r4, #22]
 8015ffc:	7563      	strb	r3, [r4, #21]
 8015ffe:	4058      	eors	r0, r3
 8016000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016004:	4632      	mov	r2, r6
 8016006:	68a0      	ldr	r0, [r4, #8]
 8016008:	4641      	mov	r1, r8
 801600a:	f002 fc20 	bl	801884e <memcpy>
 801600e:	68a2      	ldr	r2, [r4, #8]
 8016010:	6923      	ldr	r3, [r4, #16]
 8016012:	4432      	add	r2, r6
 8016014:	4433      	add	r3, r6
 8016016:	60a2      	str	r2, [r4, #8]
 8016018:	6123      	str	r3, [r4, #16]
 801601a:	e7ed      	b.n	8015ff8 <ucdr_serialize_endian_array_char+0x40>

0801601c <ucdr_deserialize_endian_array_char>:
 801601c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016020:	4619      	mov	r1, r3
 8016022:	461e      	mov	r6, r3
 8016024:	4690      	mov	r8, r2
 8016026:	4604      	mov	r4, r0
 8016028:	f7f9 fc70 	bl	800f90c <ucdr_check_buffer_available_for>
 801602c:	b9e0      	cbnz	r0, 8016068 <ucdr_deserialize_endian_array_char+0x4c>
 801602e:	4637      	mov	r7, r6
 8016030:	e009      	b.n	8016046 <ucdr_deserialize_endian_array_char+0x2a>
 8016032:	68a1      	ldr	r1, [r4, #8]
 8016034:	f002 fc0b 	bl	801884e <memcpy>
 8016038:	68a2      	ldr	r2, [r4, #8]
 801603a:	6923      	ldr	r3, [r4, #16]
 801603c:	442a      	add	r2, r5
 801603e:	442b      	add	r3, r5
 8016040:	1b7f      	subs	r7, r7, r5
 8016042:	60a2      	str	r2, [r4, #8]
 8016044:	6123      	str	r3, [r4, #16]
 8016046:	2201      	movs	r2, #1
 8016048:	4639      	mov	r1, r7
 801604a:	4620      	mov	r0, r4
 801604c:	f7f9 fce4 	bl	800fa18 <ucdr_check_final_buffer_behavior_array>
 8016050:	4605      	mov	r5, r0
 8016052:	1bf0      	subs	r0, r6, r7
 8016054:	4440      	add	r0, r8
 8016056:	462a      	mov	r2, r5
 8016058:	2d00      	cmp	r5, #0
 801605a:	d1ea      	bne.n	8016032 <ucdr_deserialize_endian_array_char+0x16>
 801605c:	2301      	movs	r3, #1
 801605e:	7da0      	ldrb	r0, [r4, #22]
 8016060:	7563      	strb	r3, [r4, #21]
 8016062:	4058      	eors	r0, r3
 8016064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016068:	4632      	mov	r2, r6
 801606a:	68a1      	ldr	r1, [r4, #8]
 801606c:	4640      	mov	r0, r8
 801606e:	f002 fbee 	bl	801884e <memcpy>
 8016072:	68a2      	ldr	r2, [r4, #8]
 8016074:	6923      	ldr	r3, [r4, #16]
 8016076:	4432      	add	r2, r6
 8016078:	4433      	add	r3, r6
 801607a:	60a2      	str	r2, [r4, #8]
 801607c:	6123      	str	r3, [r4, #16]
 801607e:	e7ed      	b.n	801605c <ucdr_deserialize_endian_array_char+0x40>

08016080 <ucdr_serialize_array_uint8_t>:
 8016080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016084:	4688      	mov	r8, r1
 8016086:	4611      	mov	r1, r2
 8016088:	4616      	mov	r6, r2
 801608a:	4604      	mov	r4, r0
 801608c:	f7f9 fc3e 	bl	800f90c <ucdr_check_buffer_available_for>
 8016090:	b9e0      	cbnz	r0, 80160cc <ucdr_serialize_array_uint8_t+0x4c>
 8016092:	4637      	mov	r7, r6
 8016094:	e009      	b.n	80160aa <ucdr_serialize_array_uint8_t+0x2a>
 8016096:	68a0      	ldr	r0, [r4, #8]
 8016098:	f002 fbd9 	bl	801884e <memcpy>
 801609c:	68a2      	ldr	r2, [r4, #8]
 801609e:	6923      	ldr	r3, [r4, #16]
 80160a0:	442a      	add	r2, r5
 80160a2:	442b      	add	r3, r5
 80160a4:	1b7f      	subs	r7, r7, r5
 80160a6:	60a2      	str	r2, [r4, #8]
 80160a8:	6123      	str	r3, [r4, #16]
 80160aa:	2201      	movs	r2, #1
 80160ac:	4639      	mov	r1, r7
 80160ae:	4620      	mov	r0, r4
 80160b0:	f7f9 fcb2 	bl	800fa18 <ucdr_check_final_buffer_behavior_array>
 80160b4:	1bf1      	subs	r1, r6, r7
 80160b6:	4441      	add	r1, r8
 80160b8:	4605      	mov	r5, r0
 80160ba:	4602      	mov	r2, r0
 80160bc:	2800      	cmp	r0, #0
 80160be:	d1ea      	bne.n	8016096 <ucdr_serialize_array_uint8_t+0x16>
 80160c0:	2301      	movs	r3, #1
 80160c2:	7da0      	ldrb	r0, [r4, #22]
 80160c4:	7563      	strb	r3, [r4, #21]
 80160c6:	4058      	eors	r0, r3
 80160c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160cc:	4632      	mov	r2, r6
 80160ce:	68a0      	ldr	r0, [r4, #8]
 80160d0:	4641      	mov	r1, r8
 80160d2:	f002 fbbc 	bl	801884e <memcpy>
 80160d6:	68a3      	ldr	r3, [r4, #8]
 80160d8:	6922      	ldr	r2, [r4, #16]
 80160da:	4433      	add	r3, r6
 80160dc:	4432      	add	r2, r6
 80160de:	60a3      	str	r3, [r4, #8]
 80160e0:	6122      	str	r2, [r4, #16]
 80160e2:	e7ed      	b.n	80160c0 <ucdr_serialize_array_uint8_t+0x40>

080160e4 <ucdr_serialize_endian_array_uint8_t>:
 80160e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160e8:	4619      	mov	r1, r3
 80160ea:	461e      	mov	r6, r3
 80160ec:	4690      	mov	r8, r2
 80160ee:	4604      	mov	r4, r0
 80160f0:	f7f9 fc0c 	bl	800f90c <ucdr_check_buffer_available_for>
 80160f4:	b9e0      	cbnz	r0, 8016130 <ucdr_serialize_endian_array_uint8_t+0x4c>
 80160f6:	4637      	mov	r7, r6
 80160f8:	e009      	b.n	801610e <ucdr_serialize_endian_array_uint8_t+0x2a>
 80160fa:	68a0      	ldr	r0, [r4, #8]
 80160fc:	f002 fba7 	bl	801884e <memcpy>
 8016100:	68a2      	ldr	r2, [r4, #8]
 8016102:	6923      	ldr	r3, [r4, #16]
 8016104:	442a      	add	r2, r5
 8016106:	442b      	add	r3, r5
 8016108:	1b7f      	subs	r7, r7, r5
 801610a:	60a2      	str	r2, [r4, #8]
 801610c:	6123      	str	r3, [r4, #16]
 801610e:	2201      	movs	r2, #1
 8016110:	4639      	mov	r1, r7
 8016112:	4620      	mov	r0, r4
 8016114:	f7f9 fc80 	bl	800fa18 <ucdr_check_final_buffer_behavior_array>
 8016118:	1bf1      	subs	r1, r6, r7
 801611a:	4441      	add	r1, r8
 801611c:	4605      	mov	r5, r0
 801611e:	4602      	mov	r2, r0
 8016120:	2800      	cmp	r0, #0
 8016122:	d1ea      	bne.n	80160fa <ucdr_serialize_endian_array_uint8_t+0x16>
 8016124:	2301      	movs	r3, #1
 8016126:	7da0      	ldrb	r0, [r4, #22]
 8016128:	7563      	strb	r3, [r4, #21]
 801612a:	4058      	eors	r0, r3
 801612c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016130:	4632      	mov	r2, r6
 8016132:	68a0      	ldr	r0, [r4, #8]
 8016134:	4641      	mov	r1, r8
 8016136:	f002 fb8a 	bl	801884e <memcpy>
 801613a:	68a2      	ldr	r2, [r4, #8]
 801613c:	6923      	ldr	r3, [r4, #16]
 801613e:	4432      	add	r2, r6
 8016140:	4433      	add	r3, r6
 8016142:	60a2      	str	r2, [r4, #8]
 8016144:	6123      	str	r3, [r4, #16]
 8016146:	e7ed      	b.n	8016124 <ucdr_serialize_endian_array_uint8_t+0x40>

08016148 <ucdr_deserialize_array_uint8_t>:
 8016148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801614c:	4688      	mov	r8, r1
 801614e:	4611      	mov	r1, r2
 8016150:	4616      	mov	r6, r2
 8016152:	4604      	mov	r4, r0
 8016154:	f7f9 fbda 	bl	800f90c <ucdr_check_buffer_available_for>
 8016158:	b9e0      	cbnz	r0, 8016194 <ucdr_deserialize_array_uint8_t+0x4c>
 801615a:	4637      	mov	r7, r6
 801615c:	e009      	b.n	8016172 <ucdr_deserialize_array_uint8_t+0x2a>
 801615e:	68a1      	ldr	r1, [r4, #8]
 8016160:	f002 fb75 	bl	801884e <memcpy>
 8016164:	68a2      	ldr	r2, [r4, #8]
 8016166:	6923      	ldr	r3, [r4, #16]
 8016168:	442a      	add	r2, r5
 801616a:	442b      	add	r3, r5
 801616c:	1b7f      	subs	r7, r7, r5
 801616e:	60a2      	str	r2, [r4, #8]
 8016170:	6123      	str	r3, [r4, #16]
 8016172:	2201      	movs	r2, #1
 8016174:	4639      	mov	r1, r7
 8016176:	4620      	mov	r0, r4
 8016178:	f7f9 fc4e 	bl	800fa18 <ucdr_check_final_buffer_behavior_array>
 801617c:	4605      	mov	r5, r0
 801617e:	1bf0      	subs	r0, r6, r7
 8016180:	4440      	add	r0, r8
 8016182:	462a      	mov	r2, r5
 8016184:	2d00      	cmp	r5, #0
 8016186:	d1ea      	bne.n	801615e <ucdr_deserialize_array_uint8_t+0x16>
 8016188:	2301      	movs	r3, #1
 801618a:	7da0      	ldrb	r0, [r4, #22]
 801618c:	7563      	strb	r3, [r4, #21]
 801618e:	4058      	eors	r0, r3
 8016190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016194:	4632      	mov	r2, r6
 8016196:	68a1      	ldr	r1, [r4, #8]
 8016198:	4640      	mov	r0, r8
 801619a:	f002 fb58 	bl	801884e <memcpy>
 801619e:	68a3      	ldr	r3, [r4, #8]
 80161a0:	6922      	ldr	r2, [r4, #16]
 80161a2:	4433      	add	r3, r6
 80161a4:	4432      	add	r2, r6
 80161a6:	60a3      	str	r3, [r4, #8]
 80161a8:	6122      	str	r2, [r4, #16]
 80161aa:	e7ed      	b.n	8016188 <ucdr_deserialize_array_uint8_t+0x40>

080161ac <ucdr_deserialize_endian_array_uint8_t>:
 80161ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161b0:	4619      	mov	r1, r3
 80161b2:	461e      	mov	r6, r3
 80161b4:	4690      	mov	r8, r2
 80161b6:	4604      	mov	r4, r0
 80161b8:	f7f9 fba8 	bl	800f90c <ucdr_check_buffer_available_for>
 80161bc:	b9e0      	cbnz	r0, 80161f8 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 80161be:	4637      	mov	r7, r6
 80161c0:	e009      	b.n	80161d6 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 80161c2:	68a1      	ldr	r1, [r4, #8]
 80161c4:	f002 fb43 	bl	801884e <memcpy>
 80161c8:	68a2      	ldr	r2, [r4, #8]
 80161ca:	6923      	ldr	r3, [r4, #16]
 80161cc:	442a      	add	r2, r5
 80161ce:	442b      	add	r3, r5
 80161d0:	1b7f      	subs	r7, r7, r5
 80161d2:	60a2      	str	r2, [r4, #8]
 80161d4:	6123      	str	r3, [r4, #16]
 80161d6:	2201      	movs	r2, #1
 80161d8:	4639      	mov	r1, r7
 80161da:	4620      	mov	r0, r4
 80161dc:	f7f9 fc1c 	bl	800fa18 <ucdr_check_final_buffer_behavior_array>
 80161e0:	4605      	mov	r5, r0
 80161e2:	1bf0      	subs	r0, r6, r7
 80161e4:	4440      	add	r0, r8
 80161e6:	462a      	mov	r2, r5
 80161e8:	2d00      	cmp	r5, #0
 80161ea:	d1ea      	bne.n	80161c2 <ucdr_deserialize_endian_array_uint8_t+0x16>
 80161ec:	2301      	movs	r3, #1
 80161ee:	7da0      	ldrb	r0, [r4, #22]
 80161f0:	7563      	strb	r3, [r4, #21]
 80161f2:	4058      	eors	r0, r3
 80161f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161f8:	4632      	mov	r2, r6
 80161fa:	68a1      	ldr	r1, [r4, #8]
 80161fc:	4640      	mov	r0, r8
 80161fe:	f002 fb26 	bl	801884e <memcpy>
 8016202:	68a2      	ldr	r2, [r4, #8]
 8016204:	6923      	ldr	r3, [r4, #16]
 8016206:	4432      	add	r2, r6
 8016208:	4433      	add	r3, r6
 801620a:	60a2      	str	r2, [r4, #8]
 801620c:	6123      	str	r3, [r4, #16]
 801620e:	e7ed      	b.n	80161ec <ucdr_deserialize_endian_array_uint8_t+0x40>

08016210 <ucdr_serialize_sequence_char>:
 8016210:	b570      	push	{r4, r5, r6, lr}
 8016212:	460e      	mov	r6, r1
 8016214:	4615      	mov	r5, r2
 8016216:	7d01      	ldrb	r1, [r0, #20]
 8016218:	4604      	mov	r4, r0
 801621a:	f7f8 fecd 	bl	800efb8 <ucdr_serialize_endian_uint32_t>
 801621e:	b90d      	cbnz	r5, 8016224 <ucdr_serialize_sequence_char+0x14>
 8016220:	2001      	movs	r0, #1
 8016222:	bd70      	pop	{r4, r5, r6, pc}
 8016224:	7d21      	ldrb	r1, [r4, #20]
 8016226:	462b      	mov	r3, r5
 8016228:	4632      	mov	r2, r6
 801622a:	4620      	mov	r0, r4
 801622c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016230:	f7ff bec2 	b.w	8015fb8 <ucdr_serialize_endian_array_char>

08016234 <ucdr_deserialize_sequence_char>:
 8016234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016238:	461d      	mov	r5, r3
 801623a:	4616      	mov	r6, r2
 801623c:	460f      	mov	r7, r1
 801623e:	461a      	mov	r2, r3
 8016240:	7d01      	ldrb	r1, [r0, #20]
 8016242:	4604      	mov	r4, r0
 8016244:	f7f8 ffe0 	bl	800f208 <ucdr_deserialize_endian_uint32_t>
 8016248:	682b      	ldr	r3, [r5, #0]
 801624a:	429e      	cmp	r6, r3
 801624c:	bf3c      	itt	cc
 801624e:	2201      	movcc	r2, #1
 8016250:	75a2      	strbcc	r2, [r4, #22]
 8016252:	b913      	cbnz	r3, 801625a <ucdr_deserialize_sequence_char+0x26>
 8016254:	2001      	movs	r0, #1
 8016256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801625a:	7d21      	ldrb	r1, [r4, #20]
 801625c:	463a      	mov	r2, r7
 801625e:	4620      	mov	r0, r4
 8016260:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016264:	f7ff beda 	b.w	801601c <ucdr_deserialize_endian_array_char>

08016268 <ucdr_serialize_sequence_uint8_t>:
 8016268:	b570      	push	{r4, r5, r6, lr}
 801626a:	460e      	mov	r6, r1
 801626c:	4615      	mov	r5, r2
 801626e:	7d01      	ldrb	r1, [r0, #20]
 8016270:	4604      	mov	r4, r0
 8016272:	f7f8 fea1 	bl	800efb8 <ucdr_serialize_endian_uint32_t>
 8016276:	b90d      	cbnz	r5, 801627c <ucdr_serialize_sequence_uint8_t+0x14>
 8016278:	2001      	movs	r0, #1
 801627a:	bd70      	pop	{r4, r5, r6, pc}
 801627c:	7d21      	ldrb	r1, [r4, #20]
 801627e:	462b      	mov	r3, r5
 8016280:	4632      	mov	r2, r6
 8016282:	4620      	mov	r0, r4
 8016284:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016288:	f7ff bf2c 	b.w	80160e4 <ucdr_serialize_endian_array_uint8_t>

0801628c <ucdr_deserialize_sequence_uint8_t>:
 801628c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016290:	461d      	mov	r5, r3
 8016292:	4616      	mov	r6, r2
 8016294:	460f      	mov	r7, r1
 8016296:	461a      	mov	r2, r3
 8016298:	7d01      	ldrb	r1, [r0, #20]
 801629a:	4604      	mov	r4, r0
 801629c:	f7f8 ffb4 	bl	800f208 <ucdr_deserialize_endian_uint32_t>
 80162a0:	682b      	ldr	r3, [r5, #0]
 80162a2:	429e      	cmp	r6, r3
 80162a4:	bf3c      	itt	cc
 80162a6:	2201      	movcc	r2, #1
 80162a8:	75a2      	strbcc	r2, [r4, #22]
 80162aa:	b913      	cbnz	r3, 80162b2 <ucdr_deserialize_sequence_uint8_t+0x26>
 80162ac:	2001      	movs	r0, #1
 80162ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162b2:	7d21      	ldrb	r1, [r4, #20]
 80162b4:	463a      	mov	r2, r7
 80162b6:	4620      	mov	r0, r4
 80162b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80162bc:	f7ff bf76 	b.w	80161ac <ucdr_deserialize_endian_array_uint8_t>

080162c0 <ucdr_serialize_string>:
 80162c0:	b510      	push	{r4, lr}
 80162c2:	b082      	sub	sp, #8
 80162c4:	4604      	mov	r4, r0
 80162c6:	4608      	mov	r0, r1
 80162c8:	9101      	str	r1, [sp, #4]
 80162ca:	f7e9 ff93 	bl	80001f4 <strlen>
 80162ce:	9901      	ldr	r1, [sp, #4]
 80162d0:	4602      	mov	r2, r0
 80162d2:	3201      	adds	r2, #1
 80162d4:	4620      	mov	r0, r4
 80162d6:	b002      	add	sp, #8
 80162d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80162dc:	f7ff bf98 	b.w	8016210 <ucdr_serialize_sequence_char>

080162e0 <ucdr_deserialize_string>:
 80162e0:	b500      	push	{lr}
 80162e2:	b083      	sub	sp, #12
 80162e4:	ab01      	add	r3, sp, #4
 80162e6:	f7ff ffa5 	bl	8016234 <ucdr_deserialize_sequence_char>
 80162ea:	b003      	add	sp, #12
 80162ec:	f85d fb04 	ldr.w	pc, [sp], #4

080162f0 <get_custom_error>:
 80162f0:	4b01      	ldr	r3, [pc, #4]	; (80162f8 <get_custom_error+0x8>)
 80162f2:	7818      	ldrb	r0, [r3, #0]
 80162f4:	4770      	bx	lr
 80162f6:	bf00      	nop
 80162f8:	20009d20 	.word	0x20009d20

080162fc <recv_custom_msg>:
 80162fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016300:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 8016304:	b089      	sub	sp, #36	; 0x24
 8016306:	2600      	movs	r6, #0
 8016308:	4604      	mov	r4, r0
 801630a:	9305      	str	r3, [sp, #20]
 801630c:	468a      	mov	sl, r1
 801630e:	4693      	mov	fp, r2
 8016310:	f88d 601e 	strb.w	r6, [sp, #30]
 8016314:	b325      	cbz	r5, 8016360 <recv_custom_msg+0x64>
 8016316:	f200 2902 	addw	r9, r0, #514	; 0x202
 801631a:	f10d 081f 	add.w	r8, sp, #31
 801631e:	af05      	add	r7, sp, #20
 8016320:	f10d 061e 	add.w	r6, sp, #30
 8016324:	f44f 7500 	mov.w	r5, #512	; 0x200
 8016328:	e002      	b.n	8016330 <recv_custom_msg+0x34>
 801632a:	9b05      	ldr	r3, [sp, #20]
 801632c:	2b00      	cmp	r3, #0
 801632e:	dd0f      	ble.n	8016350 <recv_custom_msg+0x54>
 8016330:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8016334:	e9cd 5600 	strd	r5, r6, [sp]
 8016338:	4623      	mov	r3, r4
 801633a:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 801633e:	4622      	mov	r2, r4
 8016340:	4648      	mov	r0, r9
 8016342:	f000 ffc9 	bl	80172d8 <uxr_read_framed_msg>
 8016346:	2800      	cmp	r0, #0
 8016348:	d0ef      	beq.n	801632a <recv_custom_msg+0x2e>
 801634a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801634e:	b1b3      	cbz	r3, 801637e <recv_custom_msg+0x82>
 8016350:	4b0f      	ldr	r3, [pc, #60]	; (8016390 <recv_custom_msg+0x94>)
 8016352:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8016356:	701a      	strb	r2, [r3, #0]
 8016358:	2000      	movs	r0, #0
 801635a:	b009      	add	sp, #36	; 0x24
 801635c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016360:	f10d 021f 	add.w	r2, sp, #31
 8016364:	9200      	str	r2, [sp, #0]
 8016366:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 801636a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801636e:	4601      	mov	r1, r0
 8016370:	47a8      	blx	r5
 8016372:	2800      	cmp	r0, #0
 8016374:	d0ec      	beq.n	8016350 <recv_custom_msg+0x54>
 8016376:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801637a:	2b00      	cmp	r3, #0
 801637c:	d1e8      	bne.n	8016350 <recv_custom_msg+0x54>
 801637e:	f8cb 0000 	str.w	r0, [fp]
 8016382:	2001      	movs	r0, #1
 8016384:	f8ca 4000 	str.w	r4, [sl]
 8016388:	b009      	add	sp, #36	; 0x24
 801638a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801638e:	bf00      	nop
 8016390:	20009d20 	.word	0x20009d20

08016394 <send_custom_msg>:
 8016394:	b570      	push	{r4, r5, r6, lr}
 8016396:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 801639a:	b086      	sub	sp, #24
 801639c:	4616      	mov	r6, r2
 801639e:	b975      	cbnz	r5, 80163be <send_custom_msg+0x2a>
 80163a0:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 80163a4:	f10d 0317 	add.w	r3, sp, #23
 80163a8:	47a0      	blx	r4
 80163aa:	b108      	cbz	r0, 80163b0 <send_custom_msg+0x1c>
 80163ac:	42b0      	cmp	r0, r6
 80163ae:	d015      	beq.n	80163dc <send_custom_msg+0x48>
 80163b0:	4b0c      	ldr	r3, [pc, #48]	; (80163e4 <send_custom_msg+0x50>)
 80163b2:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80163b6:	701a      	strb	r2, [r3, #0]
 80163b8:	2000      	movs	r0, #0
 80163ba:	b006      	add	sp, #24
 80163bc:	bd70      	pop	{r4, r5, r6, pc}
 80163be:	460b      	mov	r3, r1
 80163c0:	2200      	movs	r2, #0
 80163c2:	f10d 0117 	add.w	r1, sp, #23
 80163c6:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80163ca:	9600      	str	r6, [sp, #0]
 80163cc:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 80163d0:	4602      	mov	r2, r0
 80163d2:	f200 2002 	addw	r0, r0, #514	; 0x202
 80163d6:	f000 fd97 	bl	8016f08 <uxr_write_framed_msg>
 80163da:	e7e6      	b.n	80163aa <send_custom_msg+0x16>
 80163dc:	2001      	movs	r0, #1
 80163de:	b006      	add	sp, #24
 80163e0:	bd70      	pop	{r4, r5, r6, pc}
 80163e2:	bf00      	nop
 80163e4:	20009d20 	.word	0x20009d20

080163e8 <uxr_set_custom_transport_callbacks>:
 80163e8:	b430      	push	{r4, r5}
 80163ea:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 80163ee:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 80163f2:	e9c0 549c 	strd	r5, r4, [r0, #624]	; 0x270
 80163f6:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 80163fa:	bc30      	pop	{r4, r5}
 80163fc:	4770      	bx	lr
 80163fe:	bf00      	nop

08016400 <uxr_init_custom_transport>:
 8016400:	b538      	push	{r3, r4, r5, lr}
 8016402:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 8016406:	b303      	cbz	r3, 801644a <uxr_init_custom_transport+0x4a>
 8016408:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 801640c:	4604      	mov	r4, r0
 801640e:	b1e2      	cbz	r2, 801644a <uxr_init_custom_transport+0x4a>
 8016410:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8016414:	b1ca      	cbz	r2, 801644a <uxr_init_custom_transport+0x4a>
 8016416:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 801641a:	b1b2      	cbz	r2, 801644a <uxr_init_custom_transport+0x4a>
 801641c:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 8016420:	4798      	blx	r3
 8016422:	4605      	mov	r5, r0
 8016424:	b188      	cbz	r0, 801644a <uxr_init_custom_transport+0x4a>
 8016426:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 801642a:	b98b      	cbnz	r3, 8016450 <uxr_init_custom_transport+0x50>
 801642c:	480b      	ldr	r0, [pc, #44]	; (801645c <uxr_init_custom_transport+0x5c>)
 801642e:	490c      	ldr	r1, [pc, #48]	; (8016460 <uxr_init_custom_transport+0x60>)
 8016430:	4a0c      	ldr	r2, [pc, #48]	; (8016464 <uxr_init_custom_transport+0x64>)
 8016432:	f8c4 4278 	str.w	r4, [r4, #632]	; 0x278
 8016436:	f44f 7300 	mov.w	r3, #512	; 0x200
 801643a:	e9c4 019f 	strd	r0, r1, [r4, #636]	; 0x27c
 801643e:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 8016442:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 8016446:	4628      	mov	r0, r5
 8016448:	bd38      	pop	{r3, r4, r5, pc}
 801644a:	2500      	movs	r5, #0
 801644c:	4628      	mov	r0, r5
 801644e:	bd38      	pop	{r3, r4, r5, pc}
 8016450:	2100      	movs	r1, #0
 8016452:	f204 2002 	addw	r0, r4, #514	; 0x202
 8016456:	f000 fd51 	bl	8016efc <uxr_init_framing_io>
 801645a:	e7e7      	b.n	801642c <uxr_init_custom_transport+0x2c>
 801645c:	08016395 	.word	0x08016395
 8016460:	080162fd 	.word	0x080162fd
 8016464:	080162f1 	.word	0x080162f1

08016468 <uxr_close_custom_transport>:
 8016468:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 801646c:	4718      	bx	r3
 801646e:	bf00      	nop

08016470 <uxr_init_input_best_effort_stream>:
 8016470:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016474:	8003      	strh	r3, [r0, #0]
 8016476:	4770      	bx	lr

08016478 <uxr_reset_input_best_effort_stream>:
 8016478:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801647c:	8003      	strh	r3, [r0, #0]
 801647e:	4770      	bx	lr

08016480 <uxr_receive_best_effort_message>:
 8016480:	b538      	push	{r3, r4, r5, lr}
 8016482:	4604      	mov	r4, r0
 8016484:	8800      	ldrh	r0, [r0, #0]
 8016486:	460d      	mov	r5, r1
 8016488:	f000 fd20 	bl	8016ecc <uxr_seq_num_cmp>
 801648c:	4603      	mov	r3, r0
 801648e:	2b00      	cmp	r3, #0
 8016490:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8016494:	bfb8      	it	lt
 8016496:	8025      	strhlt	r5, [r4, #0]
 8016498:	bd38      	pop	{r3, r4, r5, pc}
 801649a:	bf00      	nop

0801649c <on_full_input_buffer>:
 801649c:	b570      	push	{r4, r5, r6, lr}
 801649e:	6802      	ldr	r2, [r0, #0]
 80164a0:	460d      	mov	r5, r1
 80164a2:	6809      	ldr	r1, [r1, #0]
 80164a4:	686c      	ldr	r4, [r5, #4]
 80164a6:	1a53      	subs	r3, r2, r1
 80164a8:	4606      	mov	r6, r0
 80164aa:	8928      	ldrh	r0, [r5, #8]
 80164ac:	fbb4 f4f0 	udiv	r4, r4, r0
 80164b0:	fbb3 f3f4 	udiv	r3, r3, r4
 80164b4:	3301      	adds	r3, #1
 80164b6:	b29b      	uxth	r3, r3
 80164b8:	fbb3 f2f0 	udiv	r2, r3, r0
 80164bc:	fb00 3312 	mls	r3, r0, r2, r3
 80164c0:	b29b      	uxth	r3, r3
 80164c2:	fb04 f403 	mul.w	r4, r4, r3
 80164c6:	1d23      	adds	r3, r4, #4
 80164c8:	440b      	add	r3, r1
 80164ca:	7d28      	ldrb	r0, [r5, #20]
 80164cc:	f853 2c04 	ldr.w	r2, [r3, #-4]
 80164d0:	b110      	cbz	r0, 80164d8 <on_full_input_buffer+0x3c>
 80164d2:	2000      	movs	r0, #0
 80164d4:	f843 0c04 	str.w	r0, [r3, #-4]
 80164d8:	2a03      	cmp	r2, #3
 80164da:	d801      	bhi.n	80164e0 <on_full_input_buffer+0x44>
 80164dc:	2001      	movs	r0, #1
 80164de:	bd70      	pop	{r4, r5, r6, pc}
 80164e0:	3408      	adds	r4, #8
 80164e2:	6933      	ldr	r3, [r6, #16]
 80164e4:	4421      	add	r1, r4
 80164e6:	4630      	mov	r0, r6
 80164e8:	3a04      	subs	r2, #4
 80164ea:	f7f9 fa59 	bl	800f9a0 <ucdr_init_buffer_origin>
 80164ee:	4630      	mov	r0, r6
 80164f0:	4902      	ldr	r1, [pc, #8]	; (80164fc <on_full_input_buffer+0x60>)
 80164f2:	462a      	mov	r2, r5
 80164f4:	f7f9 fa32 	bl	800f95c <ucdr_set_on_full_buffer_callback>
 80164f8:	2000      	movs	r0, #0
 80164fa:	bd70      	pop	{r4, r5, r6, pc}
 80164fc:	0801649d 	.word	0x0801649d

08016500 <uxr_init_input_reliable_stream>:
 8016500:	b470      	push	{r4, r5, r6}
 8016502:	9c03      	ldr	r4, [sp, #12]
 8016504:	6001      	str	r1, [r0, #0]
 8016506:	2600      	movs	r6, #0
 8016508:	8103      	strh	r3, [r0, #8]
 801650a:	6042      	str	r2, [r0, #4]
 801650c:	6104      	str	r4, [r0, #16]
 801650e:	7506      	strb	r6, [r0, #20]
 8016510:	b1ab      	cbz	r3, 801653e <uxr_init_input_reliable_stream+0x3e>
 8016512:	600e      	str	r6, [r1, #0]
 8016514:	8901      	ldrh	r1, [r0, #8]
 8016516:	2901      	cmp	r1, #1
 8016518:	d911      	bls.n	801653e <uxr_init_input_reliable_stream+0x3e>
 801651a:	2201      	movs	r2, #1
 801651c:	e9d0 5400 	ldrd	r5, r4, [r0]
 8016520:	fbb2 f3f1 	udiv	r3, r2, r1
 8016524:	fb01 2313 	mls	r3, r1, r3, r2
 8016528:	b29b      	uxth	r3, r3
 801652a:	fbb4 f1f1 	udiv	r1, r4, r1
 801652e:	fb03 f301 	mul.w	r3, r3, r1
 8016532:	3201      	adds	r2, #1
 8016534:	50ee      	str	r6, [r5, r3]
 8016536:	8901      	ldrh	r1, [r0, #8]
 8016538:	b292      	uxth	r2, r2
 801653a:	4291      	cmp	r1, r2
 801653c:	d8ee      	bhi.n	801651c <uxr_init_input_reliable_stream+0x1c>
 801653e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016542:	bc70      	pop	{r4, r5, r6}
 8016544:	60c3      	str	r3, [r0, #12]
 8016546:	4770      	bx	lr

08016548 <uxr_reset_input_reliable_stream>:
 8016548:	8902      	ldrh	r2, [r0, #8]
 801654a:	b1ca      	cbz	r2, 8016580 <uxr_reset_input_reliable_stream+0x38>
 801654c:	b470      	push	{r4, r5, r6}
 801654e:	2400      	movs	r4, #0
 8016550:	4621      	mov	r1, r4
 8016552:	4626      	mov	r6, r4
 8016554:	fbb1 f3f2 	udiv	r3, r1, r2
 8016558:	fb02 1313 	mls	r3, r2, r3, r1
 801655c:	e9d0 5100 	ldrd	r5, r1, [r0]
 8016560:	b29b      	uxth	r3, r3
 8016562:	fbb1 f2f2 	udiv	r2, r1, r2
 8016566:	fb03 f302 	mul.w	r3, r3, r2
 801656a:	3401      	adds	r4, #1
 801656c:	50ee      	str	r6, [r5, r3]
 801656e:	8902      	ldrh	r2, [r0, #8]
 8016570:	b2a1      	uxth	r1, r4
 8016572:	428a      	cmp	r2, r1
 8016574:	d8ee      	bhi.n	8016554 <uxr_reset_input_reliable_stream+0xc>
 8016576:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801657a:	bc70      	pop	{r4, r5, r6}
 801657c:	60c3      	str	r3, [r0, #12]
 801657e:	4770      	bx	lr
 8016580:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016584:	60c3      	str	r3, [r0, #12]
 8016586:	4770      	bx	lr

08016588 <uxr_receive_reliable_message>:
 8016588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801658c:	4604      	mov	r4, r0
 801658e:	460d      	mov	r5, r1
 8016590:	8901      	ldrh	r1, [r0, #8]
 8016592:	8980      	ldrh	r0, [r0, #12]
 8016594:	4690      	mov	r8, r2
 8016596:	461f      	mov	r7, r3
 8016598:	f000 fc90 	bl	8016ebc <uxr_seq_num_add>
 801659c:	4629      	mov	r1, r5
 801659e:	4606      	mov	r6, r0
 80165a0:	89a0      	ldrh	r0, [r4, #12]
 80165a2:	f000 fc93 	bl	8016ecc <uxr_seq_num_cmp>
 80165a6:	2800      	cmp	r0, #0
 80165a8:	db0a      	blt.n	80165c0 <uxr_receive_reliable_message+0x38>
 80165aa:	2600      	movs	r6, #0
 80165ac:	89e0      	ldrh	r0, [r4, #14]
 80165ae:	4629      	mov	r1, r5
 80165b0:	f000 fc8c 	bl	8016ecc <uxr_seq_num_cmp>
 80165b4:	2800      	cmp	r0, #0
 80165b6:	bfb8      	it	lt
 80165b8:	81e5      	strhlt	r5, [r4, #14]
 80165ba:	4630      	mov	r0, r6
 80165bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80165c0:	4630      	mov	r0, r6
 80165c2:	4629      	mov	r1, r5
 80165c4:	f000 fc82 	bl	8016ecc <uxr_seq_num_cmp>
 80165c8:	2800      	cmp	r0, #0
 80165ca:	dbee      	blt.n	80165aa <uxr_receive_reliable_message+0x22>
 80165cc:	6923      	ldr	r3, [r4, #16]
 80165ce:	4640      	mov	r0, r8
 80165d0:	4798      	blx	r3
 80165d2:	2101      	movs	r1, #1
 80165d4:	4681      	mov	r9, r0
 80165d6:	89a0      	ldrh	r0, [r4, #12]
 80165d8:	f000 fc70 	bl	8016ebc <uxr_seq_num_add>
 80165dc:	f1b9 0f00 	cmp.w	r9, #0
 80165e0:	d101      	bne.n	80165e6 <uxr_receive_reliable_message+0x5e>
 80165e2:	4285      	cmp	r5, r0
 80165e4:	d049      	beq.n	801667a <uxr_receive_reliable_message+0xf2>
 80165e6:	8921      	ldrh	r1, [r4, #8]
 80165e8:	fbb5 f3f1 	udiv	r3, r5, r1
 80165ec:	fb01 5313 	mls	r3, r1, r3, r5
 80165f0:	b29b      	uxth	r3, r3
 80165f2:	6862      	ldr	r2, [r4, #4]
 80165f4:	6820      	ldr	r0, [r4, #0]
 80165f6:	fbb2 f2f1 	udiv	r2, r2, r1
 80165fa:	fb03 f302 	mul.w	r3, r3, r2
 80165fe:	3304      	adds	r3, #4
 8016600:	4418      	add	r0, r3
 8016602:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8016606:	2b00      	cmp	r3, #0
 8016608:	d1cf      	bne.n	80165aa <uxr_receive_reliable_message+0x22>
 801660a:	4641      	mov	r1, r8
 801660c:	463a      	mov	r2, r7
 801660e:	f002 f91e 	bl	801884e <memcpy>
 8016612:	8921      	ldrh	r1, [r4, #8]
 8016614:	fbb5 f3f1 	udiv	r3, r5, r1
 8016618:	fb01 5313 	mls	r3, r1, r3, r5
 801661c:	b29b      	uxth	r3, r3
 801661e:	6862      	ldr	r2, [r4, #4]
 8016620:	fbb2 f2f1 	udiv	r2, r2, r1
 8016624:	6821      	ldr	r1, [r4, #0]
 8016626:	fb03 f302 	mul.w	r3, r3, r2
 801662a:	2201      	movs	r2, #1
 801662c:	50cf      	str	r7, [r1, r3]
 801662e:	9b08      	ldr	r3, [sp, #32]
 8016630:	701a      	strb	r2, [r3, #0]
 8016632:	f1b9 0f00 	cmp.w	r9, #0
 8016636:	d0b8      	beq.n	80165aa <uxr_receive_reliable_message+0x22>
 8016638:	89a6      	ldrh	r6, [r4, #12]
 801663a:	e001      	b.n	8016640 <uxr_receive_reliable_message+0xb8>
 801663c:	2801      	cmp	r0, #1
 801663e:	d1b4      	bne.n	80165aa <uxr_receive_reliable_message+0x22>
 8016640:	4630      	mov	r0, r6
 8016642:	2101      	movs	r1, #1
 8016644:	f000 fc3a 	bl	8016ebc <uxr_seq_num_add>
 8016648:	8921      	ldrh	r1, [r4, #8]
 801664a:	fbb0 f3f1 	udiv	r3, r0, r1
 801664e:	fb01 0313 	mls	r3, r1, r3, r0
 8016652:	b29b      	uxth	r3, r3
 8016654:	6862      	ldr	r2, [r4, #4]
 8016656:	fbb2 f2f1 	udiv	r2, r2, r1
 801665a:	4606      	mov	r6, r0
 801665c:	fb03 f302 	mul.w	r3, r3, r2
 8016660:	6820      	ldr	r0, [r4, #0]
 8016662:	3304      	adds	r3, #4
 8016664:	4418      	add	r0, r3
 8016666:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801666a:	2b00      	cmp	r3, #0
 801666c:	d09d      	beq.n	80165aa <uxr_receive_reliable_message+0x22>
 801666e:	6923      	ldr	r3, [r4, #16]
 8016670:	4798      	blx	r3
 8016672:	2802      	cmp	r0, #2
 8016674:	d1e2      	bne.n	801663c <uxr_receive_reliable_message+0xb4>
 8016676:	2601      	movs	r6, #1
 8016678:	e798      	b.n	80165ac <uxr_receive_reliable_message+0x24>
 801667a:	9b08      	ldr	r3, [sp, #32]
 801667c:	81a5      	strh	r5, [r4, #12]
 801667e:	2601      	movs	r6, #1
 8016680:	f883 9000 	strb.w	r9, [r3]
 8016684:	e792      	b.n	80165ac <uxr_receive_reliable_message+0x24>
 8016686:	bf00      	nop

08016688 <uxr_next_input_reliable_buffer_available>:
 8016688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801668c:	4604      	mov	r4, r0
 801668e:	460e      	mov	r6, r1
 8016690:	8980      	ldrh	r0, [r0, #12]
 8016692:	2101      	movs	r1, #1
 8016694:	4617      	mov	r7, r2
 8016696:	f000 fc11 	bl	8016ebc <uxr_seq_num_add>
 801669a:	8921      	ldrh	r1, [r4, #8]
 801669c:	fbb0 f3f1 	udiv	r3, r0, r1
 80166a0:	fb01 0313 	mls	r3, r1, r3, r0
 80166a4:	b29b      	uxth	r3, r3
 80166a6:	6862      	ldr	r2, [r4, #4]
 80166a8:	fbb2 f2f1 	udiv	r2, r2, r1
 80166ac:	fb03 f302 	mul.w	r3, r3, r2
 80166b0:	6822      	ldr	r2, [r4, #0]
 80166b2:	3304      	adds	r3, #4
 80166b4:	eb02 0803 	add.w	r8, r2, r3
 80166b8:	f858 9c04 	ldr.w	r9, [r8, #-4]
 80166bc:	f1b9 0f00 	cmp.w	r9, #0
 80166c0:	d025      	beq.n	801670e <uxr_next_input_reliable_buffer_available+0x86>
 80166c2:	6923      	ldr	r3, [r4, #16]
 80166c4:	4605      	mov	r5, r0
 80166c6:	4640      	mov	r0, r8
 80166c8:	4798      	blx	r3
 80166ca:	4682      	mov	sl, r0
 80166cc:	b310      	cbz	r0, 8016714 <uxr_next_input_reliable_buffer_available+0x8c>
 80166ce:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 80166d2:	e005      	b.n	80166e0 <uxr_next_input_reliable_buffer_available+0x58>
 80166d4:	6923      	ldr	r3, [r4, #16]
 80166d6:	4798      	blx	r3
 80166d8:	2802      	cmp	r0, #2
 80166da:	d032      	beq.n	8016742 <uxr_next_input_reliable_buffer_available+0xba>
 80166dc:	2801      	cmp	r0, #1
 80166de:	d116      	bne.n	801670e <uxr_next_input_reliable_buffer_available+0x86>
 80166e0:	4650      	mov	r0, sl
 80166e2:	2101      	movs	r1, #1
 80166e4:	f000 fbea 	bl	8016ebc <uxr_seq_num_add>
 80166e8:	8921      	ldrh	r1, [r4, #8]
 80166ea:	fbb0 f3f1 	udiv	r3, r0, r1
 80166ee:	fb01 0313 	mls	r3, r1, r3, r0
 80166f2:	b29b      	uxth	r3, r3
 80166f4:	6862      	ldr	r2, [r4, #4]
 80166f6:	fbb2 f2f1 	udiv	r2, r2, r1
 80166fa:	4682      	mov	sl, r0
 80166fc:	fb03 f302 	mul.w	r3, r3, r2
 8016700:	6820      	ldr	r0, [r4, #0]
 8016702:	3304      	adds	r3, #4
 8016704:	4418      	add	r0, r3
 8016706:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801670a:	2b00      	cmp	r3, #0
 801670c:	d1e2      	bne.n	80166d4 <uxr_next_input_reliable_buffer_available+0x4c>
 801670e:	2000      	movs	r0, #0
 8016710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016714:	464a      	mov	r2, r9
 8016716:	4641      	mov	r1, r8
 8016718:	4630      	mov	r0, r6
 801671a:	f7f9 f949 	bl	800f9b0 <ucdr_init_buffer>
 801671e:	8921      	ldrh	r1, [r4, #8]
 8016720:	fbb5 f3f1 	udiv	r3, r5, r1
 8016724:	fb01 5313 	mls	r3, r1, r3, r5
 8016728:	b29b      	uxth	r3, r3
 801672a:	6862      	ldr	r2, [r4, #4]
 801672c:	fbb2 f2f1 	udiv	r2, r2, r1
 8016730:	6821      	ldr	r1, [r4, #0]
 8016732:	fb03 f302 	mul.w	r3, r3, r2
 8016736:	2001      	movs	r0, #1
 8016738:	f841 a003 	str.w	sl, [r1, r3]
 801673c:	81a5      	strh	r5, [r4, #12]
 801673e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016742:	8922      	ldrh	r2, [r4, #8]
 8016744:	fbb5 f0f2 	udiv	r0, r5, r2
 8016748:	fb02 5510 	mls	r5, r2, r0, r5
 801674c:	b2ad      	uxth	r5, r5
 801674e:	6863      	ldr	r3, [r4, #4]
 8016750:	fbb3 f3f2 	udiv	r3, r3, r2
 8016754:	fb05 f503 	mul.w	r5, r5, r3
 8016758:	6823      	ldr	r3, [r4, #0]
 801675a:	2000      	movs	r0, #0
 801675c:	5158      	str	r0, [r3, r5]
 801675e:	eba9 0207 	sub.w	r2, r9, r7
 8016762:	eb08 0107 	add.w	r1, r8, r7
 8016766:	4630      	mov	r0, r6
 8016768:	f7f9 f922 	bl	800f9b0 <ucdr_init_buffer>
 801676c:	4630      	mov	r0, r6
 801676e:	4904      	ldr	r1, [pc, #16]	; (8016780 <uxr_next_input_reliable_buffer_available+0xf8>)
 8016770:	4622      	mov	r2, r4
 8016772:	f7f9 f8f3 	bl	800f95c <ucdr_set_on_full_buffer_callback>
 8016776:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801677a:	2001      	movs	r0, #1
 801677c:	e7c8      	b.n	8016710 <uxr_next_input_reliable_buffer_available+0x88>
 801677e:	bf00      	nop
 8016780:	0801649d 	.word	0x0801649d

08016784 <uxr_process_heartbeat>:
 8016784:	b538      	push	{r3, r4, r5, lr}
 8016786:	4611      	mov	r1, r2
 8016788:	4604      	mov	r4, r0
 801678a:	89c0      	ldrh	r0, [r0, #14]
 801678c:	4615      	mov	r5, r2
 801678e:	f000 fb9d 	bl	8016ecc <uxr_seq_num_cmp>
 8016792:	2800      	cmp	r0, #0
 8016794:	bfb8      	it	lt
 8016796:	81e5      	strhlt	r5, [r4, #14]
 8016798:	bd38      	pop	{r3, r4, r5, pc}
 801679a:	bf00      	nop

0801679c <uxr_compute_acknack>:
 801679c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80167a0:	8903      	ldrh	r3, [r0, #8]
 80167a2:	8986      	ldrh	r6, [r0, #12]
 80167a4:	4604      	mov	r4, r0
 80167a6:	460d      	mov	r5, r1
 80167a8:	b1d3      	cbz	r3, 80167e0 <uxr_compute_acknack+0x44>
 80167aa:	4630      	mov	r0, r6
 80167ac:	2701      	movs	r7, #1
 80167ae:	e003      	b.n	80167b8 <uxr_compute_acknack+0x1c>
 80167b0:	4567      	cmp	r7, ip
 80167b2:	d215      	bcs.n	80167e0 <uxr_compute_acknack+0x44>
 80167b4:	89a0      	ldrh	r0, [r4, #12]
 80167b6:	3701      	adds	r7, #1
 80167b8:	b2b9      	uxth	r1, r7
 80167ba:	f000 fb7f 	bl	8016ebc <uxr_seq_num_add>
 80167be:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80167c2:	fbb0 f2fc 	udiv	r2, r0, ip
 80167c6:	e9d4 1300 	ldrd	r1, r3, [r4]
 80167ca:	fb0c 0212 	mls	r2, ip, r2, r0
 80167ce:	b292      	uxth	r2, r2
 80167d0:	fbb3 f3fc 	udiv	r3, r3, ip
 80167d4:	fb02 1303 	mla	r3, r2, r3, r1
 80167d8:	681b      	ldr	r3, [r3, #0]
 80167da:	2b00      	cmp	r3, #0
 80167dc:	d1e8      	bne.n	80167b0 <uxr_compute_acknack+0x14>
 80167de:	4606      	mov	r6, r0
 80167e0:	802e      	strh	r6, [r5, #0]
 80167e2:	4630      	mov	r0, r6
 80167e4:	2101      	movs	r1, #1
 80167e6:	89e6      	ldrh	r6, [r4, #14]
 80167e8:	f000 fb6c 	bl	8016ec4 <uxr_seq_num_sub>
 80167ec:	4601      	mov	r1, r0
 80167ee:	4630      	mov	r0, r6
 80167f0:	f000 fb68 	bl	8016ec4 <uxr_seq_num_sub>
 80167f4:	4606      	mov	r6, r0
 80167f6:	b318      	cbz	r0, 8016840 <uxr_compute_acknack+0xa4>
 80167f8:	f04f 0900 	mov.w	r9, #0
 80167fc:	464f      	mov	r7, r9
 80167fe:	f04f 0801 	mov.w	r8, #1
 8016802:	fa1f f189 	uxth.w	r1, r9
 8016806:	8828      	ldrh	r0, [r5, #0]
 8016808:	f000 fb58 	bl	8016ebc <uxr_seq_num_add>
 801680c:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016810:	6822      	ldr	r2, [r4, #0]
 8016812:	fbb0 f1fc 	udiv	r1, r0, ip
 8016816:	fb01 011c 	mls	r1, r1, ip, r0
 801681a:	b289      	uxth	r1, r1
 801681c:	6863      	ldr	r3, [r4, #4]
 801681e:	fbb3 f3fc 	udiv	r3, r3, ip
 8016822:	fb01 2303 	mla	r3, r1, r3, r2
 8016826:	fa08 f209 	lsl.w	r2, r8, r9
 801682a:	681b      	ldr	r3, [r3, #0]
 801682c:	f109 0901 	add.w	r9, r9, #1
 8016830:	b90b      	cbnz	r3, 8016836 <uxr_compute_acknack+0x9a>
 8016832:	4317      	orrs	r7, r2
 8016834:	b2bf      	uxth	r7, r7
 8016836:	454e      	cmp	r6, r9
 8016838:	d1e3      	bne.n	8016802 <uxr_compute_acknack+0x66>
 801683a:	4638      	mov	r0, r7
 801683c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016840:	4607      	mov	r7, r0
 8016842:	4638      	mov	r0, r7
 8016844:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08016848 <uxr_init_output_best_effort_stream>:
 8016848:	b410      	push	{r4}
 801684a:	f64f 74ff 	movw	r4, #65535	; 0xffff
 801684e:	81c4      	strh	r4, [r0, #14]
 8016850:	e9c0 1300 	strd	r1, r3, [r0]
 8016854:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016858:	7303      	strb	r3, [r0, #12]
 801685a:	6082      	str	r2, [r0, #8]
 801685c:	4770      	bx	lr
 801685e:	bf00      	nop

08016860 <uxr_reset_output_best_effort_stream>:
 8016860:	7b02      	ldrb	r2, [r0, #12]
 8016862:	6042      	str	r2, [r0, #4]
 8016864:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016868:	81c3      	strh	r3, [r0, #14]
 801686a:	4770      	bx	lr

0801686c <uxr_prepare_best_effort_buffer_to_write>:
 801686c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801686e:	4604      	mov	r4, r0
 8016870:	b083      	sub	sp, #12
 8016872:	6840      	ldr	r0, [r0, #4]
 8016874:	460d      	mov	r5, r1
 8016876:	4616      	mov	r6, r2
 8016878:	f7fa fe80 	bl	801157c <uxr_submessage_padding>
 801687c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8016880:	4410      	add	r0, r2
 8016882:	1942      	adds	r2, r0, r5
 8016884:	4293      	cmp	r3, r2
 8016886:	bf2c      	ite	cs
 8016888:	2701      	movcs	r7, #1
 801688a:	2700      	movcc	r7, #0
 801688c:	d202      	bcs.n	8016894 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801688e:	4638      	mov	r0, r7
 8016890:	b003      	add	sp, #12
 8016892:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016894:	9000      	str	r0, [sp, #0]
 8016896:	6821      	ldr	r1, [r4, #0]
 8016898:	4630      	mov	r0, r6
 801689a:	2300      	movs	r3, #0
 801689c:	f7f9 f876 	bl	800f98c <ucdr_init_buffer_origin_offset>
 80168a0:	6861      	ldr	r1, [r4, #4]
 80168a2:	4638      	mov	r0, r7
 80168a4:	4429      	add	r1, r5
 80168a6:	6061      	str	r1, [r4, #4]
 80168a8:	b003      	add	sp, #12
 80168aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080168ac <uxr_prepare_best_effort_buffer_to_send>:
 80168ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168b0:	6845      	ldr	r5, [r0, #4]
 80168b2:	4604      	mov	r4, r0
 80168b4:	7b00      	ldrb	r0, [r0, #12]
 80168b6:	4285      	cmp	r5, r0
 80168b8:	bf8c      	ite	hi
 80168ba:	2701      	movhi	r7, #1
 80168bc:	2700      	movls	r7, #0
 80168be:	d802      	bhi.n	80168c6 <uxr_prepare_best_effort_buffer_to_send+0x1a>
 80168c0:	4638      	mov	r0, r7
 80168c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80168c6:	4688      	mov	r8, r1
 80168c8:	89e0      	ldrh	r0, [r4, #14]
 80168ca:	2101      	movs	r1, #1
 80168cc:	4615      	mov	r5, r2
 80168ce:	461e      	mov	r6, r3
 80168d0:	f000 faf4 	bl	8016ebc <uxr_seq_num_add>
 80168d4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80168d8:	81e0      	strh	r0, [r4, #14]
 80168da:	8030      	strh	r0, [r6, #0]
 80168dc:	f8c8 2000 	str.w	r2, [r8]
 80168e0:	602b      	str	r3, [r5, #0]
 80168e2:	7b23      	ldrb	r3, [r4, #12]
 80168e4:	6063      	str	r3, [r4, #4]
 80168e6:	4638      	mov	r0, r7
 80168e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080168ec <on_full_output_buffer>:
 80168ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168ee:	6802      	ldr	r2, [r0, #0]
 80168f0:	460d      	mov	r5, r1
 80168f2:	6809      	ldr	r1, [r1, #0]
 80168f4:	892f      	ldrh	r7, [r5, #8]
 80168f6:	686c      	ldr	r4, [r5, #4]
 80168f8:	fbb4 f4f7 	udiv	r4, r4, r7
 80168fc:	1a53      	subs	r3, r2, r1
 80168fe:	fbb3 f3f4 	udiv	r3, r3, r4
 8016902:	3301      	adds	r3, #1
 8016904:	b29b      	uxth	r3, r3
 8016906:	fbb3 f2f7 	udiv	r2, r3, r7
 801690a:	fb07 3312 	mls	r3, r7, r2, r3
 801690e:	b29b      	uxth	r3, r3
 8016910:	fb04 f403 	mul.w	r4, r4, r3
 8016914:	7b2f      	ldrb	r7, [r5, #12]
 8016916:	590a      	ldr	r2, [r1, r4]
 8016918:	6903      	ldr	r3, [r0, #16]
 801691a:	443c      	add	r4, r7
 801691c:	3408      	adds	r4, #8
 801691e:	1bd2      	subs	r2, r2, r7
 8016920:	4606      	mov	r6, r0
 8016922:	4421      	add	r1, r4
 8016924:	3a04      	subs	r2, #4
 8016926:	f7f9 f83b 	bl	800f9a0 <ucdr_init_buffer_origin>
 801692a:	4630      	mov	r0, r6
 801692c:	4902      	ldr	r1, [pc, #8]	; (8016938 <on_full_output_buffer+0x4c>)
 801692e:	462a      	mov	r2, r5
 8016930:	f7f9 f814 	bl	800f95c <ucdr_set_on_full_buffer_callback>
 8016934:	2000      	movs	r0, #0
 8016936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016938:	080168ed 	.word	0x080168ed

0801693c <uxr_init_output_reliable_stream>:
 801693c:	b430      	push	{r4, r5}
 801693e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8016942:	6001      	str	r1, [r0, #0]
 8016944:	8103      	strh	r3, [r0, #8]
 8016946:	6042      	str	r2, [r0, #4]
 8016948:	7304      	strb	r4, [r0, #12]
 801694a:	b1b3      	cbz	r3, 801697a <uxr_init_output_reliable_stream+0x3e>
 801694c:	600c      	str	r4, [r1, #0]
 801694e:	8901      	ldrh	r1, [r0, #8]
 8016950:	2901      	cmp	r1, #1
 8016952:	d912      	bls.n	801697a <uxr_init_output_reliable_stream+0x3e>
 8016954:	2201      	movs	r2, #1
 8016956:	e9d0 5400 	ldrd	r5, r4, [r0]
 801695a:	fbb2 f3f1 	udiv	r3, r2, r1
 801695e:	fb01 2313 	mls	r3, r1, r3, r2
 8016962:	b29b      	uxth	r3, r3
 8016964:	fbb4 f1f1 	udiv	r1, r4, r1
 8016968:	fb03 f301 	mul.w	r3, r3, r1
 801696c:	7b01      	ldrb	r1, [r0, #12]
 801696e:	50e9      	str	r1, [r5, r3]
 8016970:	3201      	adds	r2, #1
 8016972:	8901      	ldrh	r1, [r0, #8]
 8016974:	b292      	uxth	r2, r2
 8016976:	4291      	cmp	r1, r2
 8016978:	d8ed      	bhi.n	8016956 <uxr_init_output_reliable_stream+0x1a>
 801697a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801697e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016982:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8016986:	4b05      	ldr	r3, [pc, #20]	; (801699c <uxr_init_output_reliable_stream+0x60>)
 8016988:	f8c0 300e 	str.w	r3, [r0, #14]
 801698c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016990:	2300      	movs	r3, #0
 8016992:	bc30      	pop	{r4, r5}
 8016994:	8242      	strh	r2, [r0, #18]
 8016996:	8403      	strh	r3, [r0, #32]
 8016998:	4770      	bx	lr
 801699a:	bf00      	nop
 801699c:	ffff0000 	.word	0xffff0000

080169a0 <uxr_reset_output_reliable_stream>:
 80169a0:	8902      	ldrh	r2, [r0, #8]
 80169a2:	b430      	push	{r4, r5}
 80169a4:	b19a      	cbz	r2, 80169ce <uxr_reset_output_reliable_stream+0x2e>
 80169a6:	2400      	movs	r4, #0
 80169a8:	4621      	mov	r1, r4
 80169aa:	fbb1 f3f2 	udiv	r3, r1, r2
 80169ae:	fb02 1313 	mls	r3, r2, r3, r1
 80169b2:	e9d0 5100 	ldrd	r5, r1, [r0]
 80169b6:	b29b      	uxth	r3, r3
 80169b8:	fbb1 f2f2 	udiv	r2, r1, r2
 80169bc:	fb03 f302 	mul.w	r3, r3, r2
 80169c0:	7b02      	ldrb	r2, [r0, #12]
 80169c2:	50ea      	str	r2, [r5, r3]
 80169c4:	3401      	adds	r4, #1
 80169c6:	8902      	ldrh	r2, [r0, #8]
 80169c8:	b2a1      	uxth	r1, r4
 80169ca:	428a      	cmp	r2, r1
 80169cc:	d8ed      	bhi.n	80169aa <uxr_reset_output_reliable_stream+0xa>
 80169ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80169d2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80169d6:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80169da:	4b05      	ldr	r3, [pc, #20]	; (80169f0 <uxr_reset_output_reliable_stream+0x50>)
 80169dc:	f8c0 300e 	str.w	r3, [r0, #14]
 80169e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80169e4:	2300      	movs	r3, #0
 80169e6:	bc30      	pop	{r4, r5}
 80169e8:	8242      	strh	r2, [r0, #18]
 80169ea:	8403      	strh	r3, [r0, #32]
 80169ec:	4770      	bx	lr
 80169ee:	bf00      	nop
 80169f0:	ffff0000 	.word	0xffff0000

080169f4 <uxr_prepare_reliable_buffer_to_write>:
 80169f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169f8:	89c5      	ldrh	r5, [r0, #14]
 80169fa:	4604      	mov	r4, r0
 80169fc:	8900      	ldrh	r0, [r0, #8]
 80169fe:	fbb5 f3f0 	udiv	r3, r5, r0
 8016a02:	4688      	mov	r8, r1
 8016a04:	e9d4 1600 	ldrd	r1, r6, [r4]
 8016a08:	fb00 5313 	mls	r3, r0, r3, r5
 8016a0c:	b29b      	uxth	r3, r3
 8016a0e:	fbb6 f0f0 	udiv	r0, r6, r0
 8016a12:	fb00 f303 	mul.w	r3, r0, r3
 8016a16:	3304      	adds	r3, #4
 8016a18:	18cb      	adds	r3, r1, r3
 8016a1a:	b091      	sub	sp, #68	; 0x44
 8016a1c:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8016a20:	9004      	str	r0, [sp, #16]
 8016a22:	2104      	movs	r1, #4
 8016a24:	4630      	mov	r0, r6
 8016a26:	9305      	str	r3, [sp, #20]
 8016a28:	9206      	str	r2, [sp, #24]
 8016a2a:	f7f8 ffc5 	bl	800f9b8 <ucdr_alignment>
 8016a2e:	1833      	adds	r3, r6, r0
 8016a30:	9804      	ldr	r0, [sp, #16]
 8016a32:	9303      	str	r3, [sp, #12]
 8016a34:	eb03 0708 	add.w	r7, r3, r8
 8016a38:	1f06      	subs	r6, r0, #4
 8016a3a:	42b7      	cmp	r7, r6
 8016a3c:	f240 80dc 	bls.w	8016bf8 <uxr_prepare_reliable_buffer_to_write+0x204>
 8016a40:	f894 e00c 	ldrb.w	lr, [r4, #12]
 8016a44:	eb0e 0308 	add.w	r3, lr, r8
 8016a48:	42b3      	cmp	r3, r6
 8016a4a:	f240 80c2 	bls.w	8016bd2 <uxr_prepare_reliable_buffer_to_write+0x1de>
 8016a4e:	9b03      	ldr	r3, [sp, #12]
 8016a50:	3304      	adds	r3, #4
 8016a52:	42b3      	cmp	r3, r6
 8016a54:	f080 8112 	bcs.w	8016c7c <uxr_prepare_reliable_buffer_to_write+0x288>
 8016a58:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016a5c:	f1bc 0f00 	cmp.w	ip, #0
 8016a60:	f000 8127 	beq.w	8016cb2 <uxr_prepare_reliable_buffer_to_write+0x2be>
 8016a64:	e9d4 7300 	ldrd	r7, r3, [r4]
 8016a68:	2100      	movs	r1, #0
 8016a6a:	4608      	mov	r0, r1
 8016a6c:	460a      	mov	r2, r1
 8016a6e:	fbb3 f9fc 	udiv	r9, r3, ip
 8016a72:	fbb2 f3fc 	udiv	r3, r2, ip
 8016a76:	fb0c 2313 	mls	r3, ip, r3, r2
 8016a7a:	b29b      	uxth	r3, r3
 8016a7c:	fb09 7303 	mla	r3, r9, r3, r7
 8016a80:	3101      	adds	r1, #1
 8016a82:	681b      	ldr	r3, [r3, #0]
 8016a84:	459e      	cmp	lr, r3
 8016a86:	bf08      	it	eq
 8016a88:	3001      	addeq	r0, #1
 8016a8a:	b28a      	uxth	r2, r1
 8016a8c:	bf08      	it	eq
 8016a8e:	b280      	uxtheq	r0, r0
 8016a90:	4562      	cmp	r2, ip
 8016a92:	d3ee      	bcc.n	8016a72 <uxr_prepare_reliable_buffer_to_write+0x7e>
 8016a94:	9b03      	ldr	r3, [sp, #12]
 8016a96:	1f37      	subs	r7, r6, #4
 8016a98:	b2bf      	uxth	r7, r7
 8016a9a:	eba7 0903 	sub.w	r9, r7, r3
 8016a9e:	fa1f f989 	uxth.w	r9, r9
 8016aa2:	eba7 070e 	sub.w	r7, r7, lr
 8016aa6:	b2bf      	uxth	r7, r7
 8016aa8:	eba8 0809 	sub.w	r8, r8, r9
 8016aac:	fbb8 faf7 	udiv	sl, r8, r7
 8016ab0:	fb07 831a 	mls	r3, r7, sl, r8
 8016ab4:	9707      	str	r7, [sp, #28]
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	f040 80bf 	bne.w	8016c3a <uxr_prepare_reliable_buffer_to_write+0x246>
 8016abc:	fa1f fa8a 	uxth.w	sl, sl
 8016ac0:	4582      	cmp	sl, r0
 8016ac2:	f200 8095 	bhi.w	8016bf0 <uxr_prepare_reliable_buffer_to_write+0x1fc>
 8016ac6:	f10d 0b20 	add.w	fp, sp, #32
 8016aca:	f1ba 0f00 	cmp.w	sl, #0
 8016ace:	d03a      	beq.n	8016b46 <uxr_prepare_reliable_buffer_to_write+0x152>
 8016ad0:	f04f 0800 	mov.w	r8, #0
 8016ad4:	f10d 0b20 	add.w	fp, sp, #32
 8016ad8:	e000      	b.n	8016adc <uxr_prepare_reliable_buffer_to_write+0xe8>
 8016ada:	46b9      	mov	r9, r7
 8016adc:	e9d4 3200 	ldrd	r3, r2, [r4]
 8016ae0:	fbb5 f1fc 	udiv	r1, r5, ip
 8016ae4:	fb0c 5111 	mls	r1, ip, r1, r5
 8016ae8:	b289      	uxth	r1, r1
 8016aea:	fbb2 f2fc 	udiv	r2, r2, ip
 8016aee:	fb01 f102 	mul.w	r1, r1, r2
 8016af2:	3104      	adds	r1, #4
 8016af4:	4419      	add	r1, r3
 8016af6:	4632      	mov	r2, r6
 8016af8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016afc:	9300      	str	r3, [sp, #0]
 8016afe:	4658      	mov	r0, fp
 8016b00:	2300      	movs	r3, #0
 8016b02:	f7f8 ff43 	bl	800f98c <ucdr_init_buffer_origin_offset>
 8016b06:	464a      	mov	r2, r9
 8016b08:	2300      	movs	r3, #0
 8016b0a:	210d      	movs	r1, #13
 8016b0c:	4658      	mov	r0, fp
 8016b0e:	f7fa fcf5 	bl	80114fc <uxr_buffer_submessage_header>
 8016b12:	8920      	ldrh	r0, [r4, #8]
 8016b14:	fbb5 f3f0 	udiv	r3, r5, r0
 8016b18:	e9d4 2100 	ldrd	r2, r1, [r4]
 8016b1c:	fb00 5313 	mls	r3, r0, r3, r5
 8016b20:	b29b      	uxth	r3, r3
 8016b22:	fbb1 f1f0 	udiv	r1, r1, r0
 8016b26:	fb03 f301 	mul.w	r3, r3, r1
 8016b2a:	4628      	mov	r0, r5
 8016b2c:	50d6      	str	r6, [r2, r3]
 8016b2e:	2101      	movs	r1, #1
 8016b30:	f000 f9c4 	bl	8016ebc <uxr_seq_num_add>
 8016b34:	f108 0801 	add.w	r8, r8, #1
 8016b38:	fa1f f388 	uxth.w	r3, r8
 8016b3c:	459a      	cmp	sl, r3
 8016b3e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016b42:	4605      	mov	r5, r0
 8016b44:	d8c9      	bhi.n	8016ada <uxr_prepare_reliable_buffer_to_write+0xe6>
 8016b46:	fbb5 f1fc 	udiv	r1, r5, ip
 8016b4a:	fb0c 5111 	mls	r1, ip, r1, r5
 8016b4e:	b289      	uxth	r1, r1
 8016b50:	6863      	ldr	r3, [r4, #4]
 8016b52:	fbb3 fcfc 	udiv	ip, r3, ip
 8016b56:	6823      	ldr	r3, [r4, #0]
 8016b58:	fb01 f10c 	mul.w	r1, r1, ip
 8016b5c:	3104      	adds	r1, #4
 8016b5e:	4419      	add	r1, r3
 8016b60:	4632      	mov	r2, r6
 8016b62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016b66:	9300      	str	r3, [sp, #0]
 8016b68:	4658      	mov	r0, fp
 8016b6a:	2300      	movs	r3, #0
 8016b6c:	f7f8 ff0e 	bl	800f98c <ucdr_init_buffer_origin_offset>
 8016b70:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8016b74:	4658      	mov	r0, fp
 8016b76:	fa1f f288 	uxth.w	r2, r8
 8016b7a:	2302      	movs	r3, #2
 8016b7c:	210d      	movs	r1, #13
 8016b7e:	f7fa fcbd 	bl	80114fc <uxr_buffer_submessage_header>
 8016b82:	e9d4 3200 	ldrd	r3, r2, [r4]
 8016b86:	8921      	ldrh	r1, [r4, #8]
 8016b88:	9f03      	ldr	r7, [sp, #12]
 8016b8a:	9307      	str	r3, [sp, #28]
 8016b8c:	9b05      	ldr	r3, [sp, #20]
 8016b8e:	7b26      	ldrb	r6, [r4, #12]
 8016b90:	fbb5 f0f1 	udiv	r0, r5, r1
 8016b94:	fbb2 f2f1 	udiv	r2, r2, r1
 8016b98:	fb01 5010 	mls	r0, r1, r0, r5
 8016b9c:	1d39      	adds	r1, r7, #4
 8016b9e:	440b      	add	r3, r1
 8016ba0:	b280      	uxth	r0, r0
 8016ba2:	fb00 f002 	mul.w	r0, r0, r2
 8016ba6:	4619      	mov	r1, r3
 8016ba8:	3604      	adds	r6, #4
 8016baa:	9b07      	ldr	r3, [sp, #28]
 8016bac:	9a04      	ldr	r2, [sp, #16]
 8016bae:	4446      	add	r6, r8
 8016bb0:	501e      	str	r6, [r3, r0]
 8016bb2:	9e06      	ldr	r6, [sp, #24]
 8016bb4:	3a08      	subs	r2, #8
 8016bb6:	1bd2      	subs	r2, r2, r7
 8016bb8:	4630      	mov	r0, r6
 8016bba:	f7f8 fef9 	bl	800f9b0 <ucdr_init_buffer>
 8016bbe:	4630      	mov	r0, r6
 8016bc0:	493d      	ldr	r1, [pc, #244]	; (8016cb8 <uxr_prepare_reliable_buffer_to_write+0x2c4>)
 8016bc2:	4622      	mov	r2, r4
 8016bc4:	f7f8 feca 	bl	800f95c <ucdr_set_on_full_buffer_callback>
 8016bc8:	2001      	movs	r0, #1
 8016bca:	81e5      	strh	r5, [r4, #14]
 8016bcc:	b011      	add	sp, #68	; 0x44
 8016bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bd2:	2101      	movs	r1, #1
 8016bd4:	89e0      	ldrh	r0, [r4, #14]
 8016bd6:	f000 f971 	bl	8016ebc <uxr_seq_num_add>
 8016bda:	8921      	ldrh	r1, [r4, #8]
 8016bdc:	4605      	mov	r5, r0
 8016bde:	8a60      	ldrh	r0, [r4, #18]
 8016be0:	f000 f96c 	bl	8016ebc <uxr_seq_num_add>
 8016be4:	4601      	mov	r1, r0
 8016be6:	4628      	mov	r0, r5
 8016be8:	f000 f970 	bl	8016ecc <uxr_seq_num_cmp>
 8016bec:	2800      	cmp	r0, #0
 8016bee:	dd2a      	ble.n	8016c46 <uxr_prepare_reliable_buffer_to_write+0x252>
 8016bf0:	2000      	movs	r0, #0
 8016bf2:	b011      	add	sp, #68	; 0x44
 8016bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bf8:	8921      	ldrh	r1, [r4, #8]
 8016bfa:	8a60      	ldrh	r0, [r4, #18]
 8016bfc:	f000 f95e 	bl	8016ebc <uxr_seq_num_add>
 8016c00:	4601      	mov	r1, r0
 8016c02:	4628      	mov	r0, r5
 8016c04:	f000 f962 	bl	8016ecc <uxr_seq_num_cmp>
 8016c08:	2800      	cmp	r0, #0
 8016c0a:	dcf1      	bgt.n	8016bf0 <uxr_prepare_reliable_buffer_to_write+0x1fc>
 8016c0c:	8921      	ldrh	r1, [r4, #8]
 8016c0e:	fbb5 f3f1 	udiv	r3, r5, r1
 8016c12:	e9d4 4200 	ldrd	r4, r2, [r4]
 8016c16:	fb01 5313 	mls	r3, r1, r3, r5
 8016c1a:	b29b      	uxth	r3, r3
 8016c1c:	fbb2 f2f1 	udiv	r2, r2, r1
 8016c20:	fb03 f302 	mul.w	r3, r3, r2
 8016c24:	e9dd 1005 	ldrd	r1, r0, [sp, #20]
 8016c28:	50e7      	str	r7, [r4, r3]
 8016c2a:	9b03      	ldr	r3, [sp, #12]
 8016c2c:	9300      	str	r3, [sp, #0]
 8016c2e:	463a      	mov	r2, r7
 8016c30:	2300      	movs	r3, #0
 8016c32:	f7f8 feab 	bl	800f98c <ucdr_init_buffer_origin_offset>
 8016c36:	2001      	movs	r0, #1
 8016c38:	e7db      	b.n	8016bf2 <uxr_prepare_reliable_buffer_to_write+0x1fe>
 8016c3a:	f10a 0a01 	add.w	sl, sl, #1
 8016c3e:	fa1f fa8a 	uxth.w	sl, sl
 8016c42:	9307      	str	r3, [sp, #28]
 8016c44:	e73c      	b.n	8016ac0 <uxr_prepare_reliable_buffer_to_write+0xcc>
 8016c46:	8920      	ldrh	r0, [r4, #8]
 8016c48:	fbb5 f3f0 	udiv	r3, r5, r0
 8016c4c:	fb00 5313 	mls	r3, r0, r3, r5
 8016c50:	b29b      	uxth	r3, r3
 8016c52:	6862      	ldr	r2, [r4, #4]
 8016c54:	6821      	ldr	r1, [r4, #0]
 8016c56:	fbb2 f0f0 	udiv	r0, r2, r0
 8016c5a:	fb03 f300 	mul.w	r3, r3, r0
 8016c5e:	7b22      	ldrb	r2, [r4, #12]
 8016c60:	9806      	ldr	r0, [sp, #24]
 8016c62:	3304      	adds	r3, #4
 8016c64:	4419      	add	r1, r3
 8016c66:	4442      	add	r2, r8
 8016c68:	f841 2c04 	str.w	r2, [r1, #-4]
 8016c6c:	7b23      	ldrb	r3, [r4, #12]
 8016c6e:	9300      	str	r3, [sp, #0]
 8016c70:	2300      	movs	r3, #0
 8016c72:	f7f8 fe8b 	bl	800f98c <ucdr_init_buffer_origin_offset>
 8016c76:	81e5      	strh	r5, [r4, #14]
 8016c78:	2001      	movs	r0, #1
 8016c7a:	e7ba      	b.n	8016bf2 <uxr_prepare_reliable_buffer_to_write+0x1fe>
 8016c7c:	4628      	mov	r0, r5
 8016c7e:	2101      	movs	r1, #1
 8016c80:	f000 f91c 	bl	8016ebc <uxr_seq_num_add>
 8016c84:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016c88:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016c8c:	fbb3 f1fc 	udiv	r1, r3, ip
 8016c90:	fbb0 f3fc 	udiv	r3, r0, ip
 8016c94:	fb0c 0313 	mls	r3, ip, r3, r0
 8016c98:	b29b      	uxth	r3, r3
 8016c9a:	fb03 f301 	mul.w	r3, r3, r1
 8016c9e:	3304      	adds	r3, #4
 8016ca0:	18d3      	adds	r3, r2, r3
 8016ca2:	9305      	str	r3, [sp, #20]
 8016ca4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8016ca8:	f894 e00c 	ldrb.w	lr, [r4, #12]
 8016cac:	9303      	str	r3, [sp, #12]
 8016cae:	4605      	mov	r5, r0
 8016cb0:	e6d4      	b.n	8016a5c <uxr_prepare_reliable_buffer_to_write+0x68>
 8016cb2:	4660      	mov	r0, ip
 8016cb4:	e6ee      	b.n	8016a94 <uxr_prepare_reliable_buffer_to_write+0xa0>
 8016cb6:	bf00      	nop
 8016cb8:	080168ed 	.word	0x080168ed

08016cbc <uxr_prepare_next_reliable_buffer_to_send>:
 8016cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016cc0:	4605      	mov	r5, r0
 8016cc2:	4688      	mov	r8, r1
 8016cc4:	8a00      	ldrh	r0, [r0, #16]
 8016cc6:	2101      	movs	r1, #1
 8016cc8:	4617      	mov	r7, r2
 8016cca:	461e      	mov	r6, r3
 8016ccc:	f000 f8f6 	bl	8016ebc <uxr_seq_num_add>
 8016cd0:	8030      	strh	r0, [r6, #0]
 8016cd2:	892a      	ldrh	r2, [r5, #8]
 8016cd4:	fbb0 f3f2 	udiv	r3, r0, r2
 8016cd8:	fb02 0413 	mls	r4, r2, r3, r0
 8016cdc:	b2a4      	uxth	r4, r4
 8016cde:	686b      	ldr	r3, [r5, #4]
 8016ce0:	fbb3 f2f2 	udiv	r2, r3, r2
 8016ce4:	682b      	ldr	r3, [r5, #0]
 8016ce6:	89e9      	ldrh	r1, [r5, #14]
 8016ce8:	fb04 f402 	mul.w	r4, r4, r2
 8016cec:	3404      	adds	r4, #4
 8016cee:	4423      	add	r3, r4
 8016cf0:	f8c8 3000 	str.w	r3, [r8]
 8016cf4:	682b      	ldr	r3, [r5, #0]
 8016cf6:	441c      	add	r4, r3
 8016cf8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8016cfc:	603b      	str	r3, [r7, #0]
 8016cfe:	f000 f8e5 	bl	8016ecc <uxr_seq_num_cmp>
 8016d02:	2800      	cmp	r0, #0
 8016d04:	dd02      	ble.n	8016d0c <uxr_prepare_next_reliable_buffer_to_send+0x50>
 8016d06:	2000      	movs	r0, #0
 8016d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d0c:	683a      	ldr	r2, [r7, #0]
 8016d0e:	7b2b      	ldrb	r3, [r5, #12]
 8016d10:	429a      	cmp	r2, r3
 8016d12:	d9f8      	bls.n	8016d06 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8016d14:	8a69      	ldrh	r1, [r5, #18]
 8016d16:	8a28      	ldrh	r0, [r5, #16]
 8016d18:	f000 f8d4 	bl	8016ec4 <uxr_seq_num_sub>
 8016d1c:	892b      	ldrh	r3, [r5, #8]
 8016d1e:	4283      	cmp	r3, r0
 8016d20:	d0f1      	beq.n	8016d06 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8016d22:	8830      	ldrh	r0, [r6, #0]
 8016d24:	89eb      	ldrh	r3, [r5, #14]
 8016d26:	8228      	strh	r0, [r5, #16]
 8016d28:	4298      	cmp	r0, r3
 8016d2a:	d002      	beq.n	8016d32 <uxr_prepare_next_reliable_buffer_to_send+0x76>
 8016d2c:	2001      	movs	r0, #1
 8016d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d32:	2101      	movs	r1, #1
 8016d34:	f000 f8c2 	bl	8016ebc <uxr_seq_num_add>
 8016d38:	81e8      	strh	r0, [r5, #14]
 8016d3a:	2001      	movs	r0, #1
 8016d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016d40 <uxr_update_output_stream_heartbeat_timestamp>:
 8016d40:	b5d0      	push	{r4, r6, r7, lr}
 8016d42:	8a01      	ldrh	r1, [r0, #16]
 8016d44:	4604      	mov	r4, r0
 8016d46:	8a40      	ldrh	r0, [r0, #18]
 8016d48:	4616      	mov	r6, r2
 8016d4a:	461f      	mov	r7, r3
 8016d4c:	f000 f8be 	bl	8016ecc <uxr_seq_num_cmp>
 8016d50:	2800      	cmp	r0, #0
 8016d52:	db07      	blt.n	8016d64 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8016d54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016d58:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016d5c:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8016d60:	2000      	movs	r0, #0
 8016d62:	bdd0      	pop	{r4, r6, r7, pc}
 8016d64:	f894 0020 	ldrb.w	r0, [r4, #32]
 8016d68:	b948      	cbnz	r0, 8016d7e <uxr_update_output_stream_heartbeat_timestamp+0x3e>
 8016d6a:	2301      	movs	r3, #1
 8016d6c:	f884 3020 	strb.w	r3, [r4, #32]
 8016d70:	f116 0364 	adds.w	r3, r6, #100	; 0x64
 8016d74:	f147 0200 	adc.w	r2, r7, #0
 8016d78:	e9c4 3206 	strd	r3, r2, [r4, #24]
 8016d7c:	bdd0      	pop	{r4, r6, r7, pc}
 8016d7e:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8016d82:	4296      	cmp	r6, r2
 8016d84:	eb77 0303 	sbcs.w	r3, r7, r3
 8016d88:	bfa5      	ittet	ge
 8016d8a:	3001      	addge	r0, #1
 8016d8c:	f884 0020 	strbge.w	r0, [r4, #32]
 8016d90:	2000      	movlt	r0, #0
 8016d92:	2001      	movge	r0, #1
 8016d94:	e7ec      	b.n	8016d70 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8016d96:	bf00      	nop

08016d98 <uxr_begin_output_nack_buffer_it>:
 8016d98:	8a40      	ldrh	r0, [r0, #18]
 8016d9a:	4770      	bx	lr

08016d9c <uxr_next_reliable_nack_buffer_to_send>:
 8016d9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016da0:	f890 9021 	ldrb.w	r9, [r0, #33]	; 0x21
 8016da4:	f1b9 0f00 	cmp.w	r9, #0
 8016da8:	d011      	beq.n	8016dce <uxr_next_reliable_nack_buffer_to_send+0x32>
 8016daa:	4605      	mov	r5, r0
 8016dac:	8818      	ldrh	r0, [r3, #0]
 8016dae:	460f      	mov	r7, r1
 8016db0:	4690      	mov	r8, r2
 8016db2:	461e      	mov	r6, r3
 8016db4:	2101      	movs	r1, #1
 8016db6:	f000 f881 	bl	8016ebc <uxr_seq_num_add>
 8016dba:	8030      	strh	r0, [r6, #0]
 8016dbc:	8a29      	ldrh	r1, [r5, #16]
 8016dbe:	f000 f885 	bl	8016ecc <uxr_seq_num_cmp>
 8016dc2:	2800      	cmp	r0, #0
 8016dc4:	dd06      	ble.n	8016dd4 <uxr_next_reliable_nack_buffer_to_send+0x38>
 8016dc6:	f04f 0900 	mov.w	r9, #0
 8016dca:	f885 9021 	strb.w	r9, [r5, #33]	; 0x21
 8016dce:	4648      	mov	r0, r9
 8016dd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016dd4:	892a      	ldrh	r2, [r5, #8]
 8016dd6:	8830      	ldrh	r0, [r6, #0]
 8016dd8:	fbb0 f4f2 	udiv	r4, r0, r2
 8016ddc:	fb02 0414 	mls	r4, r2, r4, r0
 8016de0:	b2a4      	uxth	r4, r4
 8016de2:	686b      	ldr	r3, [r5, #4]
 8016de4:	fbb3 f2f2 	udiv	r2, r3, r2
 8016de8:	682b      	ldr	r3, [r5, #0]
 8016dea:	fb04 f402 	mul.w	r4, r4, r2
 8016dee:	3404      	adds	r4, #4
 8016df0:	4423      	add	r3, r4
 8016df2:	603b      	str	r3, [r7, #0]
 8016df4:	682b      	ldr	r3, [r5, #0]
 8016df6:	441c      	add	r4, r3
 8016df8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8016dfc:	f8c8 3000 	str.w	r3, [r8]
 8016e00:	7b2a      	ldrb	r2, [r5, #12]
 8016e02:	429a      	cmp	r2, r3
 8016e04:	d0d6      	beq.n	8016db4 <uxr_next_reliable_nack_buffer_to_send+0x18>
 8016e06:	4648      	mov	r0, r9
 8016e08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08016e0c <uxr_process_acknack>:
 8016e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e0e:	4604      	mov	r4, r0
 8016e10:	460e      	mov	r6, r1
 8016e12:	4610      	mov	r0, r2
 8016e14:	2101      	movs	r1, #1
 8016e16:	f000 f855 	bl	8016ec4 <uxr_seq_num_sub>
 8016e1a:	8a61      	ldrh	r1, [r4, #18]
 8016e1c:	f000 f852 	bl	8016ec4 <uxr_seq_num_sub>
 8016e20:	b1c0      	cbz	r0, 8016e54 <uxr_process_acknack+0x48>
 8016e22:	4605      	mov	r5, r0
 8016e24:	2700      	movs	r7, #0
 8016e26:	2101      	movs	r1, #1
 8016e28:	8a60      	ldrh	r0, [r4, #18]
 8016e2a:	f000 f847 	bl	8016ebc <uxr_seq_num_add>
 8016e2e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016e32:	fbb0 f3fc 	udiv	r3, r0, ip
 8016e36:	e9d4 2100 	ldrd	r2, r1, [r4]
 8016e3a:	fb0c 0313 	mls	r3, ip, r3, r0
 8016e3e:	b29b      	uxth	r3, r3
 8016e40:	fbb1 f1fc 	udiv	r1, r1, ip
 8016e44:	3701      	adds	r7, #1
 8016e46:	fb03 f301 	mul.w	r3, r3, r1
 8016e4a:	42bd      	cmp	r5, r7
 8016e4c:	7b21      	ldrb	r1, [r4, #12]
 8016e4e:	8260      	strh	r0, [r4, #18]
 8016e50:	50d1      	str	r1, [r2, r3]
 8016e52:	d1e8      	bne.n	8016e26 <uxr_process_acknack+0x1a>
 8016e54:	3e00      	subs	r6, #0
 8016e56:	f04f 0300 	mov.w	r3, #0
 8016e5a:	bf18      	it	ne
 8016e5c:	2601      	movne	r6, #1
 8016e5e:	f884 3020 	strb.w	r3, [r4, #32]
 8016e62:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 8016e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016e68 <uxr_is_output_up_to_date>:
 8016e68:	8a01      	ldrh	r1, [r0, #16]
 8016e6a:	8a40      	ldrh	r0, [r0, #18]
 8016e6c:	b508      	push	{r3, lr}
 8016e6e:	f000 f82d 	bl	8016ecc <uxr_seq_num_cmp>
 8016e72:	fab0 f080 	clz	r0, r0
 8016e76:	0940      	lsrs	r0, r0, #5
 8016e78:	bd08      	pop	{r3, pc}
 8016e7a:	bf00      	nop

08016e7c <get_available_free_slots>:
 8016e7c:	8901      	ldrh	r1, [r0, #8]
 8016e7e:	b1d9      	cbz	r1, 8016eb8 <get_available_free_slots+0x3c>
 8016e80:	b4f0      	push	{r4, r5, r6, r7}
 8016e82:	2400      	movs	r4, #0
 8016e84:	6845      	ldr	r5, [r0, #4]
 8016e86:	6807      	ldr	r7, [r0, #0]
 8016e88:	7b06      	ldrb	r6, [r0, #12]
 8016e8a:	fbb5 f5f1 	udiv	r5, r5, r1
 8016e8e:	4620      	mov	r0, r4
 8016e90:	4622      	mov	r2, r4
 8016e92:	fbb2 f3f1 	udiv	r3, r2, r1
 8016e96:	fb01 2313 	mls	r3, r1, r3, r2
 8016e9a:	b29b      	uxth	r3, r3
 8016e9c:	fb05 7303 	mla	r3, r5, r3, r7
 8016ea0:	3401      	adds	r4, #1
 8016ea2:	681b      	ldr	r3, [r3, #0]
 8016ea4:	429e      	cmp	r6, r3
 8016ea6:	bf08      	it	eq
 8016ea8:	3001      	addeq	r0, #1
 8016eaa:	b2a2      	uxth	r2, r4
 8016eac:	bf08      	it	eq
 8016eae:	b280      	uxtheq	r0, r0
 8016eb0:	428a      	cmp	r2, r1
 8016eb2:	d3ee      	bcc.n	8016e92 <get_available_free_slots+0x16>
 8016eb4:	bcf0      	pop	{r4, r5, r6, r7}
 8016eb6:	4770      	bx	lr
 8016eb8:	4608      	mov	r0, r1
 8016eba:	4770      	bx	lr

08016ebc <uxr_seq_num_add>:
 8016ebc:	4408      	add	r0, r1
 8016ebe:	b280      	uxth	r0, r0
 8016ec0:	4770      	bx	lr
 8016ec2:	bf00      	nop

08016ec4 <uxr_seq_num_sub>:
 8016ec4:	1a40      	subs	r0, r0, r1
 8016ec6:	b280      	uxth	r0, r0
 8016ec8:	4770      	bx	lr
 8016eca:	bf00      	nop

08016ecc <uxr_seq_num_cmp>:
 8016ecc:	4288      	cmp	r0, r1
 8016ece:	d011      	beq.n	8016ef4 <uxr_seq_num_cmp+0x28>
 8016ed0:	d309      	bcc.n	8016ee6 <uxr_seq_num_cmp+0x1a>
 8016ed2:	4288      	cmp	r0, r1
 8016ed4:	d910      	bls.n	8016ef8 <uxr_seq_num_cmp+0x2c>
 8016ed6:	1a40      	subs	r0, r0, r1
 8016ed8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8016edc:	bfd4      	ite	le
 8016ede:	2001      	movle	r0, #1
 8016ee0:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 8016ee4:	4770      	bx	lr
 8016ee6:	1a0b      	subs	r3, r1, r0
 8016ee8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016eec:	daf1      	bge.n	8016ed2 <uxr_seq_num_cmp+0x6>
 8016eee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016ef2:	4770      	bx	lr
 8016ef4:	2000      	movs	r0, #0
 8016ef6:	4770      	bx	lr
 8016ef8:	2001      	movs	r0, #1
 8016efa:	4770      	bx	lr

08016efc <uxr_init_framing_io>:
 8016efc:	2300      	movs	r3, #0
 8016efe:	7041      	strb	r1, [r0, #1]
 8016f00:	7003      	strb	r3, [r0, #0]
 8016f02:	8583      	strh	r3, [r0, #44]	; 0x2c
 8016f04:	4770      	bx	lr
 8016f06:	bf00      	nop

08016f08 <uxr_write_framed_msg>:
 8016f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f0c:	7845      	ldrb	r5, [r0, #1]
 8016f0e:	b085      	sub	sp, #20
 8016f10:	4604      	mov	r4, r0
 8016f12:	f1a5 0c7d 	sub.w	ip, r5, #125	; 0x7d
 8016f16:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
 8016f1a:	f1bc 0f01 	cmp.w	ip, #1
 8016f1e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8016f22:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8016f26:	f884 e038 	strb.w	lr, [r4, #56]	; 0x38
 8016f2a:	460e      	mov	r6, r1
 8016f2c:	4617      	mov	r7, r2
 8016f2e:	469b      	mov	fp, r3
 8016f30:	f240 8116 	bls.w	8017160 <uxr_write_framed_msg+0x258>
 8016f34:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8016f38:	2302      	movs	r3, #2
 8016f3a:	2a01      	cmp	r2, #1
 8016f3c:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 8016f40:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8016f44:	f240 8091 	bls.w	801706a <uxr_write_framed_msg+0x162>
 8016f48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016f4a:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 8016f4e:	b2d9      	uxtb	r1, r3
 8016f50:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8016f54:	2203      	movs	r2, #3
 8016f56:	2b01      	cmp	r3, #1
 8016f58:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8016f5c:	f240 809a 	bls.w	8017094 <uxr_write_framed_msg+0x18c>
 8016f60:	18a3      	adds	r3, r4, r2
 8016f62:	3201      	adds	r2, #1
 8016f64:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 8016f68:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8016f6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016f6e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8016f72:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8016f76:	2901      	cmp	r1, #1
 8016f78:	eb04 0102 	add.w	r1, r4, r2
 8016f7c:	f240 8101 	bls.w	8017182 <uxr_write_framed_msg+0x27a>
 8016f80:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8016f84:	3201      	adds	r2, #1
 8016f86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016f88:	b2d2      	uxtb	r2, r2
 8016f8a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8016f8e:	2b00      	cmp	r3, #0
 8016f90:	f000 8106 	beq.w	80171a0 <uxr_write_framed_msg+0x298>
 8016f94:	f04f 0a00 	mov.w	sl, #0
 8016f98:	46d1      	mov	r9, sl
 8016f9a:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8016f9e:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8016fa2:	2901      	cmp	r1, #1
 8016fa4:	f240 80a3 	bls.w	80170ee <uxr_write_framed_msg+0x1e6>
 8016fa8:	2a29      	cmp	r2, #41	; 0x29
 8016faa:	d87f      	bhi.n	80170ac <uxr_write_framed_msg+0x1a4>
 8016fac:	18a1      	adds	r1, r4, r2
 8016fae:	3201      	adds	r2, #1
 8016fb0:	b2d2      	uxtb	r2, r2
 8016fb2:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8016fb6:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8016fba:	ea8a 0303 	eor.w	r3, sl, r3
 8016fbe:	4984      	ldr	r1, [pc, #528]	; (80171d0 <uxr_write_framed_msg+0x2c8>)
 8016fc0:	b2db      	uxtb	r3, r3
 8016fc2:	f109 0901 	add.w	r9, r9, #1
 8016fc6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8016fca:	ea83 2a1a 	eor.w	sl, r3, sl, lsr #8
 8016fce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016fd0:	454b      	cmp	r3, r9
 8016fd2:	d8e2      	bhi.n	8016f9a <uxr_write_framed_msg+0x92>
 8016fd4:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8016fd8:	fa5f f98a 	uxtb.w	r9, sl
 8016fdc:	9301      	str	r3, [sp, #4]
 8016fde:	f04f 0b00 	mov.w	fp, #0
 8016fe2:	f88d 900c 	strb.w	r9, [sp, #12]
 8016fe6:	f88d 300d 	strb.w	r3, [sp, #13]
 8016fea:	f1a9 0a7d 	sub.w	sl, r9, #125	; 0x7d
 8016fee:	fa5f f18a 	uxtb.w	r1, sl
 8016ff2:	2901      	cmp	r1, #1
 8016ff4:	d920      	bls.n	8017038 <uxr_write_framed_msg+0x130>
 8016ff6:	2a29      	cmp	r2, #41	; 0x29
 8016ff8:	f240 808b 	bls.w	8017112 <uxr_write_framed_msg+0x20a>
 8016ffc:	2500      	movs	r5, #0
 8016ffe:	e000      	b.n	8017002 <uxr_write_framed_msg+0xfa>
 8017000:	b160      	cbz	r0, 801701c <uxr_write_framed_msg+0x114>
 8017002:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8017006:	1b52      	subs	r2, r2, r5
 8017008:	4421      	add	r1, r4
 801700a:	4643      	mov	r3, r8
 801700c:	4638      	mov	r0, r7
 801700e:	47b0      	blx	r6
 8017010:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8017014:	4405      	add	r5, r0
 8017016:	4295      	cmp	r5, r2
 8017018:	d3f2      	bcc.n	8017000 <uxr_write_framed_msg+0xf8>
 801701a:	d003      	beq.n	8017024 <uxr_write_framed_msg+0x11c>
 801701c:	2000      	movs	r0, #0
 801701e:	b005      	add	sp, #20
 8017020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017024:	fa5f f18a 	uxtb.w	r1, sl
 8017028:	f04f 0300 	mov.w	r3, #0
 801702c:	2901      	cmp	r1, #1
 801702e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8017032:	f04f 0200 	mov.w	r2, #0
 8017036:	d86c      	bhi.n	8017112 <uxr_write_framed_msg+0x20a>
 8017038:	1c51      	adds	r1, r2, #1
 801703a:	b2c9      	uxtb	r1, r1
 801703c:	2929      	cmp	r1, #41	; 0x29
 801703e:	d8dd      	bhi.n	8016ffc <uxr_write_framed_msg+0xf4>
 8017040:	18a0      	adds	r0, r4, r2
 8017042:	3202      	adds	r2, #2
 8017044:	f089 0920 	eor.w	r9, r9, #32
 8017048:	b2d2      	uxtb	r2, r2
 801704a:	4659      	mov	r1, fp
 801704c:	f04f 037d 	mov.w	r3, #125	; 0x7d
 8017050:	f880 9039 	strb.w	r9, [r0, #57]	; 0x39
 8017054:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8017058:	f04f 0b01 	mov.w	fp, #1
 801705c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8017060:	2900      	cmp	r1, #0
 8017062:	d162      	bne.n	801712a <uxr_write_framed_msg+0x222>
 8017064:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8017068:	e7bf      	b.n	8016fea <uxr_write_framed_msg+0xe2>
 801706a:	2204      	movs	r2, #4
 801706c:	2503      	movs	r5, #3
 801706e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8017070:	4423      	add	r3, r4
 8017072:	b2c9      	uxtb	r1, r1
 8017074:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8017078:	f883 c038 	strb.w	ip, [r3, #56]	; 0x38
 801707c:	4425      	add	r5, r4
 801707e:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8017082:	f080 0020 	eor.w	r0, r0, #32
 8017086:	2b01      	cmp	r3, #1
 8017088:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 801708c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8017090:	f63f af66 	bhi.w	8016f60 <uxr_write_framed_msg+0x58>
 8017094:	18a3      	adds	r3, r4, r2
 8017096:	f081 0120 	eor.w	r1, r1, #32
 801709a:	3202      	adds	r2, #2
 801709c:	207d      	movs	r0, #125	; 0x7d
 801709e:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 80170a2:	f883 0038 	strb.w	r0, [r3, #56]	; 0x38
 80170a6:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80170aa:	e75f      	b.n	8016f6c <uxr_write_framed_msg+0x64>
 80170ac:	2500      	movs	r5, #0
 80170ae:	e001      	b.n	80170b4 <uxr_write_framed_msg+0x1ac>
 80170b0:	2800      	cmp	r0, #0
 80170b2:	d0b3      	beq.n	801701c <uxr_write_framed_msg+0x114>
 80170b4:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80170b8:	1b52      	subs	r2, r2, r5
 80170ba:	4421      	add	r1, r4
 80170bc:	4643      	mov	r3, r8
 80170be:	4638      	mov	r0, r7
 80170c0:	47b0      	blx	r6
 80170c2:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80170c6:	4405      	add	r5, r0
 80170c8:	4295      	cmp	r5, r2
 80170ca:	d3f1      	bcc.n	80170b0 <uxr_write_framed_msg+0x1a8>
 80170cc:	d1a6      	bne.n	801701c <uxr_write_framed_msg+0x114>
 80170ce:	f04f 0300 	mov.w	r3, #0
 80170d2:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80170d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80170d8:	454b      	cmp	r3, r9
 80170da:	d971      	bls.n	80171c0 <uxr_write_framed_msg+0x2b8>
 80170dc:	f81b 3009 	ldrb.w	r3, [fp, r9]
 80170e0:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 80170e4:	2901      	cmp	r1, #1
 80170e6:	f04f 0200 	mov.w	r2, #0
 80170ea:	f63f af5d 	bhi.w	8016fa8 <uxr_write_framed_msg+0xa0>
 80170ee:	1c51      	adds	r1, r2, #1
 80170f0:	b2c9      	uxtb	r1, r1
 80170f2:	2929      	cmp	r1, #41	; 0x29
 80170f4:	d8da      	bhi.n	80170ac <uxr_write_framed_msg+0x1a4>
 80170f6:	18a0      	adds	r0, r4, r2
 80170f8:	3202      	adds	r2, #2
 80170fa:	b2d2      	uxtb	r2, r2
 80170fc:	f083 0120 	eor.w	r1, r3, #32
 8017100:	f04f 057d 	mov.w	r5, #125	; 0x7d
 8017104:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 8017108:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
 801710c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8017110:	e753      	b.n	8016fba <uxr_write_framed_msg+0xb2>
 8017112:	18a0      	adds	r0, r4, r2
 8017114:	3201      	adds	r2, #1
 8017116:	b2d2      	uxtb	r2, r2
 8017118:	4659      	mov	r1, fp
 801711a:	f880 9038 	strb.w	r9, [r0, #56]	; 0x38
 801711e:	f04f 0b01 	mov.w	fp, #1
 8017122:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8017126:	2900      	cmp	r1, #0
 8017128:	d09c      	beq.n	8017064 <uxr_write_framed_msg+0x15c>
 801712a:	2500      	movs	r5, #0
 801712c:	e002      	b.n	8017134 <uxr_write_framed_msg+0x22c>
 801712e:	2800      	cmp	r0, #0
 8017130:	f43f af74 	beq.w	801701c <uxr_write_framed_msg+0x114>
 8017134:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8017138:	1b52      	subs	r2, r2, r5
 801713a:	4421      	add	r1, r4
 801713c:	4643      	mov	r3, r8
 801713e:	4638      	mov	r0, r7
 8017140:	47b0      	blx	r6
 8017142:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8017146:	4405      	add	r5, r0
 8017148:	4295      	cmp	r5, r2
 801714a:	d3f0      	bcc.n	801712e <uxr_write_framed_msg+0x226>
 801714c:	f47f af66 	bne.w	801701c <uxr_write_framed_msg+0x114>
 8017150:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017152:	2300      	movs	r3, #0
 8017154:	b290      	uxth	r0, r2
 8017156:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801715a:	b005      	add	sp, #20
 801715c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017160:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8017164:	f085 0520 	eor.w	r5, r5, #32
 8017168:	2303      	movs	r3, #3
 801716a:	217d      	movs	r1, #125	; 0x7d
 801716c:	2a01      	cmp	r2, #1
 801716e:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
 8017172:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8017176:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 801717a:	d814      	bhi.n	80171a6 <uxr_write_framed_msg+0x29e>
 801717c:	2205      	movs	r2, #5
 801717e:	2504      	movs	r5, #4
 8017180:	e775      	b.n	801706e <uxr_write_framed_msg+0x166>
 8017182:	f083 0320 	eor.w	r3, r3, #32
 8017186:	f881 3039 	strb.w	r3, [r1, #57]	; 0x39
 801718a:	3202      	adds	r2, #2
 801718c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801718e:	b2d2      	uxtb	r2, r2
 8017190:	207d      	movs	r0, #125	; 0x7d
 8017192:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 8017196:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801719a:	2b00      	cmp	r3, #0
 801719c:	f47f aefa 	bne.w	8016f94 <uxr_write_framed_msg+0x8c>
 80171a0:	9301      	str	r3, [sp, #4]
 80171a2:	4699      	mov	r9, r3
 80171a4:	e71b      	b.n	8016fde <uxr_write_framed_msg+0xd6>
 80171a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80171a8:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 80171ac:	b2d9      	uxtb	r1, r3
 80171ae:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 80171b2:	2204      	movs	r2, #4
 80171b4:	2b01      	cmp	r3, #1
 80171b6:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80171ba:	f63f aed1 	bhi.w	8016f60 <uxr_write_framed_msg+0x58>
 80171be:	e769      	b.n	8017094 <uxr_write_framed_msg+0x18c>
 80171c0:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80171c4:	fa5f f98a 	uxtb.w	r9, sl
 80171c8:	9301      	str	r3, [sp, #4]
 80171ca:	2200      	movs	r2, #0
 80171cc:	e707      	b.n	8016fde <uxr_write_framed_msg+0xd6>
 80171ce:	bf00      	nop
 80171d0:	08019ff0 	.word	0x08019ff0

080171d4 <uxr_framing_read_transport>:
 80171d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171d8:	4604      	mov	r4, r0
 80171da:	b083      	sub	sp, #12
 80171dc:	461f      	mov	r7, r3
 80171de:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 80171e2:	4689      	mov	r9, r1
 80171e4:	4692      	mov	sl, r2
 80171e6:	f7fa f9cf 	bl	8011588 <uxr_millis>
 80171ea:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80171ee:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 80171f2:	42b3      	cmp	r3, r6
 80171f4:	4680      	mov	r8, r0
 80171f6:	d05f      	beq.n	80172b8 <uxr_framing_read_transport+0xe4>
 80171f8:	d81b      	bhi.n	8017232 <uxr_framing_read_transport+0x5e>
 80171fa:	1e75      	subs	r5, r6, #1
 80171fc:	1aed      	subs	r5, r5, r3
 80171fe:	b2ed      	uxtb	r5, r5
 8017200:	2600      	movs	r6, #0
 8017202:	455d      	cmp	r5, fp
 8017204:	d81e      	bhi.n	8017244 <uxr_framing_read_transport+0x70>
 8017206:	19ab      	adds	r3, r5, r6
 8017208:	455b      	cmp	r3, fp
 801720a:	bf84      	itt	hi
 801720c:	ebab 0605 	subhi.w	r6, fp, r5
 8017210:	b2f6      	uxtbhi	r6, r6
 8017212:	b9e5      	cbnz	r5, 801724e <uxr_framing_read_transport+0x7a>
 8017214:	f04f 0b00 	mov.w	fp, #0
 8017218:	f7fa f9b6 	bl	8011588 <uxr_millis>
 801721c:	683b      	ldr	r3, [r7, #0]
 801721e:	eba0 0008 	sub.w	r0, r0, r8
 8017222:	1a1b      	subs	r3, r3, r0
 8017224:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017228:	4658      	mov	r0, fp
 801722a:	603b      	str	r3, [r7, #0]
 801722c:	b003      	add	sp, #12
 801722e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017232:	2e00      	cmp	r6, #0
 8017234:	d048      	beq.n	80172c8 <uxr_framing_read_transport+0xf4>
 8017236:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 801723a:	b2ed      	uxtb	r5, r5
 801723c:	3e01      	subs	r6, #1
 801723e:	455d      	cmp	r5, fp
 8017240:	b2f6      	uxtb	r6, r6
 8017242:	d9e0      	bls.n	8017206 <uxr_framing_read_transport+0x32>
 8017244:	fa5f f58b 	uxtb.w	r5, fp
 8017248:	2600      	movs	r6, #0
 801724a:	2d00      	cmp	r5, #0
 801724c:	d0e2      	beq.n	8017214 <uxr_framing_read_transport+0x40>
 801724e:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8017252:	3102      	adds	r1, #2
 8017254:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017256:	9300      	str	r3, [sp, #0]
 8017258:	683b      	ldr	r3, [r7, #0]
 801725a:	4421      	add	r1, r4
 801725c:	462a      	mov	r2, r5
 801725e:	4650      	mov	r0, sl
 8017260:	47c8      	blx	r9
 8017262:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8017266:	4a1b      	ldr	r2, [pc, #108]	; (80172d4 <uxr_framing_read_transport+0x100>)
 8017268:	4403      	add	r3, r0
 801726a:	0859      	lsrs	r1, r3, #1
 801726c:	fba2 2101 	umull	r2, r1, r2, r1
 8017270:	0889      	lsrs	r1, r1, #2
 8017272:	222a      	movs	r2, #42	; 0x2a
 8017274:	fb02 3111 	mls	r1, r2, r1, r3
 8017278:	4683      	mov	fp, r0
 801727a:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 801727e:	2800      	cmp	r0, #0
 8017280:	d0c8      	beq.n	8017214 <uxr_framing_read_transport+0x40>
 8017282:	42a8      	cmp	r0, r5
 8017284:	d1c8      	bne.n	8017218 <uxr_framing_read_transport+0x44>
 8017286:	b31e      	cbz	r6, 80172d0 <uxr_framing_read_transport+0xfc>
 8017288:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801728a:	9300      	str	r3, [sp, #0]
 801728c:	3102      	adds	r1, #2
 801728e:	4421      	add	r1, r4
 8017290:	4632      	mov	r2, r6
 8017292:	2300      	movs	r3, #0
 8017294:	4650      	mov	r0, sl
 8017296:	47c8      	blx	r9
 8017298:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801729c:	490d      	ldr	r1, [pc, #52]	; (80172d4 <uxr_framing_read_transport+0x100>)
 801729e:	181a      	adds	r2, r3, r0
 80172a0:	0853      	lsrs	r3, r2, #1
 80172a2:	fba1 1303 	umull	r1, r3, r1, r3
 80172a6:	089b      	lsrs	r3, r3, #2
 80172a8:	212a      	movs	r1, #42	; 0x2a
 80172aa:	fb01 2313 	mls	r3, r1, r3, r2
 80172ae:	eb00 0b05 	add.w	fp, r0, r5
 80172b2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80172b6:	e7af      	b.n	8017218 <uxr_framing_read_transport+0x44>
 80172b8:	2600      	movs	r6, #0
 80172ba:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 80172be:	85a6      	strh	r6, [r4, #44]	; 0x2c
 80172c0:	d9c0      	bls.n	8017244 <uxr_framing_read_transport+0x70>
 80172c2:	2102      	movs	r1, #2
 80172c4:	2529      	movs	r5, #41	; 0x29
 80172c6:	e7c5      	b.n	8017254 <uxr_framing_read_transport+0x80>
 80172c8:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 80172cc:	b2ed      	uxtb	r5, r5
 80172ce:	e798      	b.n	8017202 <uxr_framing_read_transport+0x2e>
 80172d0:	46ab      	mov	fp, r5
 80172d2:	e7a1      	b.n	8017218 <uxr_framing_read_transport+0x44>
 80172d4:	30c30c31 	.word	0x30c30c31

080172d8 <uxr_read_framed_msg>:
 80172d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172dc:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
 80172e0:	f890 502d 	ldrb.w	r5, [r0, #45]	; 0x2d
 80172e4:	42ae      	cmp	r6, r5
 80172e6:	b083      	sub	sp, #12
 80172e8:	4604      	mov	r4, r0
 80172ea:	461f      	mov	r7, r3
 80172ec:	4689      	mov	r9, r1
 80172ee:	4692      	mov	sl, r2
 80172f0:	f000 817d 	beq.w	80175ee <uxr_read_framed_msg+0x316>
 80172f4:	7823      	ldrb	r3, [r4, #0]
 80172f6:	4ecc      	ldr	r6, [pc, #816]	; (8017628 <uxr_read_framed_msg+0x350>)
 80172f8:	f8df 8330 	ldr.w	r8, [pc, #816]	; 801762c <uxr_read_framed_msg+0x354>
 80172fc:	2b07      	cmp	r3, #7
 80172fe:	d8fd      	bhi.n	80172fc <uxr_read_framed_msg+0x24>
 8017300:	e8df f013 	tbh	[pc, r3, lsl #1]
 8017304:	00f40113 	.word	0x00f40113
 8017308:	00b700d4 	.word	0x00b700d4
 801730c:	004d008e 	.word	0x004d008e
 8017310:	00080030 	.word	0x00080030
 8017314:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8017318:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801731c:	4298      	cmp	r0, r3
 801731e:	f000 8141 	beq.w	80175a4 <uxr_read_framed_msg+0x2cc>
 8017322:	18e2      	adds	r2, r4, r3
 8017324:	7891      	ldrb	r1, [r2, #2]
 8017326:	297d      	cmp	r1, #125	; 0x7d
 8017328:	f000 81a2 	beq.w	8017670 <uxr_read_framed_msg+0x398>
 801732c:	3301      	adds	r3, #1
 801732e:	085a      	lsrs	r2, r3, #1
 8017330:	fba6 0202 	umull	r0, r2, r6, r2
 8017334:	0892      	lsrs	r2, r2, #2
 8017336:	202a      	movs	r0, #42	; 0x2a
 8017338:	fb00 3312 	mls	r3, r0, r2, r3
 801733c:	297e      	cmp	r1, #126	; 0x7e
 801733e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8017342:	f000 8251 	beq.w	80177e8 <uxr_read_framed_msg+0x510>
 8017346:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8017348:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801734a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801734e:	b29b      	uxth	r3, r3
 8017350:	2100      	movs	r1, #0
 8017352:	429a      	cmp	r2, r3
 8017354:	86a3      	strh	r3, [r4, #52]	; 0x34
 8017356:	7021      	strb	r1, [r4, #0]
 8017358:	f000 8182 	beq.w	8017660 <uxr_read_framed_msg+0x388>
 801735c:	2000      	movs	r0, #0
 801735e:	b003      	add	sp, #12
 8017360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017364:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8017368:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801736c:	4298      	cmp	r0, r3
 801736e:	f000 8128 	beq.w	80175c2 <uxr_read_framed_msg+0x2ea>
 8017372:	18e2      	adds	r2, r4, r3
 8017374:	7891      	ldrb	r1, [r2, #2]
 8017376:	297d      	cmp	r1, #125	; 0x7d
 8017378:	f000 8196 	beq.w	80176a8 <uxr_read_framed_msg+0x3d0>
 801737c:	3301      	adds	r3, #1
 801737e:	085a      	lsrs	r2, r3, #1
 8017380:	fba6 0202 	umull	r0, r2, r6, r2
 8017384:	0892      	lsrs	r2, r2, #2
 8017386:	202a      	movs	r0, #42	; 0x2a
 8017388:	fb00 3312 	mls	r3, r0, r2, r3
 801738c:	297e      	cmp	r1, #126	; 0x7e
 801738e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8017392:	f000 8219 	beq.w	80177c8 <uxr_read_framed_msg+0x4f0>
 8017396:	2307      	movs	r3, #7
 8017398:	86a1      	strh	r1, [r4, #52]	; 0x34
 801739a:	7023      	strb	r3, [r4, #0]
 801739c:	e7ae      	b.n	80172fc <uxr_read_framed_msg+0x24>
 801739e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80173a0:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 80173a2:	429d      	cmp	r5, r3
 80173a4:	d937      	bls.n	8017416 <uxr_read_framed_msg+0x13e>
 80173a6:	ee07 9a90 	vmov	s15, r9
 80173aa:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80173ae:	e01e      	b.n	80173ee <uxr_read_framed_msg+0x116>
 80173b0:	f89e e002 	ldrb.w	lr, [lr, #2]
 80173b4:	f1be 0f7d 	cmp.w	lr, #125	; 0x7d
 80173b8:	f000 80d2 	beq.w	8017560 <uxr_read_framed_msg+0x288>
 80173bc:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 80173c0:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80173c4:	f000 8214 	beq.w	80177f0 <uxr_read_framed_msg+0x518>
 80173c8:	f807 e003 	strb.w	lr, [r7, r3]
 80173cc:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 80173ce:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80173d0:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 80173d2:	ea80 010e 	eor.w	r1, r0, lr
 80173d6:	b2c9      	uxtb	r1, r1
 80173d8:	3301      	adds	r3, #1
 80173da:	f838 2011 	ldrh.w	r2, [r8, r1, lsl #1]
 80173de:	b29b      	uxth	r3, r3
 80173e0:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 80173e4:	42ab      	cmp	r3, r5
 80173e6:	86e2      	strh	r2, [r4, #54]	; 0x36
 80173e8:	8663      	strh	r3, [r4, #50]	; 0x32
 80173ea:	f080 8121 	bcs.w	8017630 <uxr_read_framed_msg+0x358>
 80173ee:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
 80173f2:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80173f6:	f101 0b01 	add.w	fp, r1, #1
 80173fa:	ea4f 025b 	mov.w	r2, fp, lsr #1
 80173fe:	fba6 9202 	umull	r9, r2, r6, r2
 8017402:	0892      	lsrs	r2, r2, #2
 8017404:	4288      	cmp	r0, r1
 8017406:	eb04 0e01 	add.w	lr, r4, r1
 801740a:	fb0c b212 	mls	r2, ip, r2, fp
 801740e:	d1cf      	bne.n	80173b0 <uxr_read_framed_msg+0xd8>
 8017410:	ee17 9a90 	vmov	r9, s15
 8017414:	429d      	cmp	r5, r3
 8017416:	f040 8112 	bne.w	801763e <uxr_read_framed_msg+0x366>
 801741a:	2306      	movs	r3, #6
 801741c:	7023      	strb	r3, [r4, #0]
 801741e:	e76d      	b.n	80172fc <uxr_read_framed_msg+0x24>
 8017420:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8017424:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8017428:	4298      	cmp	r0, r3
 801742a:	f000 80bb 	beq.w	80175a4 <uxr_read_framed_msg+0x2cc>
 801742e:	18e2      	adds	r2, r4, r3
 8017430:	7891      	ldrb	r1, [r2, #2]
 8017432:	297d      	cmp	r1, #125	; 0x7d
 8017434:	f000 8153 	beq.w	80176de <uxr_read_framed_msg+0x406>
 8017438:	3301      	adds	r3, #1
 801743a:	085a      	lsrs	r2, r3, #1
 801743c:	fba6 0202 	umull	r0, r2, r6, r2
 8017440:	0892      	lsrs	r2, r2, #2
 8017442:	202a      	movs	r0, #42	; 0x2a
 8017444:	fb00 3212 	mls	r2, r0, r2, r3
 8017448:	297e      	cmp	r1, #126	; 0x7e
 801744a:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801744e:	f000 81cb 	beq.w	80177e8 <uxr_read_framed_msg+0x510>
 8017452:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8017454:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8017458:	990c      	ldr	r1, [sp, #48]	; 0x30
 801745a:	b29b      	uxth	r3, r3
 801745c:	2000      	movs	r0, #0
 801745e:	428b      	cmp	r3, r1
 8017460:	8623      	strh	r3, [r4, #48]	; 0x30
 8017462:	8660      	strh	r0, [r4, #50]	; 0x32
 8017464:	86e0      	strh	r0, [r4, #54]	; 0x36
 8017466:	f240 80db 	bls.w	8017620 <uxr_read_framed_msg+0x348>
 801746a:	7020      	strb	r0, [r4, #0]
 801746c:	b003      	add	sp, #12
 801746e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017472:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8017476:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801747a:	4298      	cmp	r0, r3
 801747c:	f000 80a1 	beq.w	80175c2 <uxr_read_framed_msg+0x2ea>
 8017480:	18e2      	adds	r2, r4, r3
 8017482:	7891      	ldrb	r1, [r2, #2]
 8017484:	297d      	cmp	r1, #125	; 0x7d
 8017486:	f000 8167 	beq.w	8017758 <uxr_read_framed_msg+0x480>
 801748a:	3301      	adds	r3, #1
 801748c:	085a      	lsrs	r2, r3, #1
 801748e:	fba6 0202 	umull	r0, r2, r6, r2
 8017492:	0892      	lsrs	r2, r2, #2
 8017494:	202a      	movs	r0, #42	; 0x2a
 8017496:	fb00 3312 	mls	r3, r0, r2, r3
 801749a:	297e      	cmp	r1, #126	; 0x7e
 801749c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80174a0:	f000 8192 	beq.w	80177c8 <uxr_read_framed_msg+0x4f0>
 80174a4:	2304      	movs	r3, #4
 80174a6:	8621      	strh	r1, [r4, #48]	; 0x30
 80174a8:	7023      	strb	r3, [r4, #0]
 80174aa:	e727      	b.n	80172fc <uxr_read_framed_msg+0x24>
 80174ac:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80174b0:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80174b4:	4290      	cmp	r0, r2
 80174b6:	f000 80b1 	beq.w	801761c <uxr_read_framed_msg+0x344>
 80174ba:	18a3      	adds	r3, r4, r2
 80174bc:	7899      	ldrb	r1, [r3, #2]
 80174be:	297d      	cmp	r1, #125	; 0x7d
 80174c0:	f000 8166 	beq.w	8017790 <uxr_read_framed_msg+0x4b8>
 80174c4:	3201      	adds	r2, #1
 80174c6:	0850      	lsrs	r0, r2, #1
 80174c8:	fba6 3000 	umull	r3, r0, r6, r0
 80174cc:	0880      	lsrs	r0, r0, #2
 80174ce:	232a      	movs	r3, #42	; 0x2a
 80174d0:	fb03 2210 	mls	r2, r3, r0, r2
 80174d4:	297e      	cmp	r1, #126	; 0x7e
 80174d6:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80174da:	f000 8187 	beq.w	80177ec <uxr_read_framed_msg+0x514>
 80174de:	7863      	ldrb	r3, [r4, #1]
 80174e0:	428b      	cmp	r3, r1
 80174e2:	bf0c      	ite	eq
 80174e4:	2303      	moveq	r3, #3
 80174e6:	2300      	movne	r3, #0
 80174e8:	7023      	strb	r3, [r4, #0]
 80174ea:	e707      	b.n	80172fc <uxr_read_framed_msg+0x24>
 80174ec:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80174f0:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80174f4:	2200      	movs	r2, #0
 80174f6:	4299      	cmp	r1, r3
 80174f8:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 80174fc:	d063      	beq.n	80175c6 <uxr_read_framed_msg+0x2ee>
 80174fe:	18e2      	adds	r2, r4, r3
 8017500:	7892      	ldrb	r2, [r2, #2]
 8017502:	2a7d      	cmp	r2, #125	; 0x7d
 8017504:	f000 8107 	beq.w	8017716 <uxr_read_framed_msg+0x43e>
 8017508:	1c59      	adds	r1, r3, #1
 801750a:	084b      	lsrs	r3, r1, #1
 801750c:	fba6 0303 	umull	r0, r3, r6, r3
 8017510:	089b      	lsrs	r3, r3, #2
 8017512:	202a      	movs	r0, #42	; 0x2a
 8017514:	fb00 1313 	mls	r3, r0, r3, r1
 8017518:	2a7e      	cmp	r2, #126	; 0x7e
 801751a:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 801751e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8017522:	d050      	beq.n	80175c6 <uxr_read_framed_msg+0x2ee>
 8017524:	2302      	movs	r3, #2
 8017526:	7023      	strb	r3, [r4, #0]
 8017528:	e6e8      	b.n	80172fc <uxr_read_framed_msg+0x24>
 801752a:	f894 e02c 	ldrb.w	lr, [r4, #44]	; 0x2c
 801752e:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8017532:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8017536:	1c51      	adds	r1, r2, #1
 8017538:	084b      	lsrs	r3, r1, #1
 801753a:	fba6 5303 	umull	r5, r3, r6, r3
 801753e:	089b      	lsrs	r3, r3, #2
 8017540:	fb0c 1313 	mls	r3, ip, r3, r1
 8017544:	4596      	cmp	lr, r2
 8017546:	eb04 0002 	add.w	r0, r4, r2
 801754a:	b2da      	uxtb	r2, r3
 801754c:	f43f af06 	beq.w	801735c <uxr_read_framed_msg+0x84>
 8017550:	7883      	ldrb	r3, [r0, #2]
 8017552:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8017556:	2b7e      	cmp	r3, #126	; 0x7e
 8017558:	d1ed      	bne.n	8017536 <uxr_read_framed_msg+0x25e>
 801755a:	2301      	movs	r3, #1
 801755c:	7023      	strb	r3, [r4, #0]
 801755e:	e6cd      	b.n	80172fc <uxr_read_framed_msg+0x24>
 8017560:	f101 0b01 	add.w	fp, r1, #1
 8017564:	ea4f 025b 	mov.w	r2, fp, lsr #1
 8017568:	fba6 e202 	umull	lr, r2, r6, r2
 801756c:	3102      	adds	r1, #2
 801756e:	0892      	lsrs	r2, r2, #2
 8017570:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 8017574:	fb0c b212 	mls	r2, ip, r2, fp
 8017578:	fba6 9e0e 	umull	r9, lr, r6, lr
 801757c:	eb04 0b02 	add.w	fp, r4, r2
 8017580:	b2d2      	uxtb	r2, r2
 8017582:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 8017586:	4290      	cmp	r0, r2
 8017588:	fb0c 111e 	mls	r1, ip, lr, r1
 801758c:	f43f af40 	beq.w	8017410 <uxr_read_framed_msg+0x138>
 8017590:	f89b e002 	ldrb.w	lr, [fp, #2]
 8017594:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 8017598:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 801759c:	d036      	beq.n	801760c <uxr_read_framed_msg+0x334>
 801759e:	f08e 0e20 	eor.w	lr, lr, #32
 80175a2:	e711      	b.n	80173c8 <uxr_read_framed_msg+0xf0>
 80175a4:	2301      	movs	r3, #1
 80175a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80175a8:	4649      	mov	r1, r9
 80175aa:	e9cd 2300 	strd	r2, r3, [sp]
 80175ae:	4620      	mov	r0, r4
 80175b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80175b2:	4652      	mov	r2, sl
 80175b4:	f7ff fe0e 	bl	80171d4 <uxr_framing_read_transport>
 80175b8:	2800      	cmp	r0, #0
 80175ba:	f43f aecf 	beq.w	801735c <uxr_read_framed_msg+0x84>
 80175be:	7823      	ldrb	r3, [r4, #0]
 80175c0:	e69c      	b.n	80172fc <uxr_read_framed_msg+0x24>
 80175c2:	2302      	movs	r3, #2
 80175c4:	e7ef      	b.n	80175a6 <uxr_read_framed_msg+0x2ce>
 80175c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80175c8:	2304      	movs	r3, #4
 80175ca:	e9cd 2300 	strd	r2, r3, [sp]
 80175ce:	4649      	mov	r1, r9
 80175d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80175d2:	4652      	mov	r2, sl
 80175d4:	4620      	mov	r0, r4
 80175d6:	f7ff fdfd 	bl	80171d4 <uxr_framing_read_transport>
 80175da:	2800      	cmp	r0, #0
 80175dc:	d1ef      	bne.n	80175be <uxr_read_framed_msg+0x2e6>
 80175de:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 80175e2:	387e      	subs	r0, #126	; 0x7e
 80175e4:	bf18      	it	ne
 80175e6:	2001      	movne	r0, #1
 80175e8:	2800      	cmp	r0, #0
 80175ea:	d0e8      	beq.n	80175be <uxr_read_framed_msg+0x2e6>
 80175ec:	e6b6      	b.n	801735c <uxr_read_framed_msg+0x84>
 80175ee:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80175f0:	2305      	movs	r3, #5
 80175f2:	e9cd 5300 	strd	r5, r3, [sp]
 80175f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80175f8:	f7ff fdec 	bl	80171d4 <uxr_framing_read_transport>
 80175fc:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8017600:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8017604:	429a      	cmp	r2, r3
 8017606:	f43f aea9 	beq.w	801735c <uxr_read_framed_msg+0x84>
 801760a:	e673      	b.n	80172f4 <uxr_read_framed_msg+0x1c>
 801760c:	429d      	cmp	r5, r3
 801760e:	ee17 9a90 	vmov	r9, s15
 8017612:	f43f af02 	beq.w	801741a <uxr_read_framed_msg+0x142>
 8017616:	2301      	movs	r3, #1
 8017618:	7023      	strb	r3, [r4, #0]
 801761a:	e66f      	b.n	80172fc <uxr_read_framed_msg+0x24>
 801761c:	2303      	movs	r3, #3
 801761e:	e7c2      	b.n	80175a6 <uxr_read_framed_msg+0x2ce>
 8017620:	2305      	movs	r3, #5
 8017622:	7023      	strb	r3, [r4, #0]
 8017624:	e66a      	b.n	80172fc <uxr_read_framed_msg+0x24>
 8017626:	bf00      	nop
 8017628:	30c30c31 	.word	0x30c30c31
 801762c:	08019ff0 	.word	0x08019ff0
 8017630:	ee17 9a90 	vmov	r9, s15
 8017634:	f43f aef1 	beq.w	801741a <uxr_read_framed_msg+0x142>
 8017638:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 801763c:	d08d      	beq.n	801755a <uxr_read_framed_msg+0x282>
 801763e:	1aeb      	subs	r3, r5, r3
 8017640:	3302      	adds	r3, #2
 8017642:	9301      	str	r3, [sp, #4]
 8017644:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017646:	9300      	str	r3, [sp, #0]
 8017648:	4652      	mov	r2, sl
 801764a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801764c:	4649      	mov	r1, r9
 801764e:	4620      	mov	r0, r4
 8017650:	f7ff fdc0 	bl	80171d4 <uxr_framing_read_transport>
 8017654:	fab0 f080 	clz	r0, r0
 8017658:	0940      	lsrs	r0, r0, #5
 801765a:	2800      	cmp	r0, #0
 801765c:	d0af      	beq.n	80175be <uxr_read_framed_msg+0x2e6>
 801765e:	e67d      	b.n	801735c <uxr_read_framed_msg+0x84>
 8017660:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017662:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8017666:	7013      	strb	r3, [r2, #0]
 8017668:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 801766a:	b003      	add	sp, #12
 801766c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017670:	1c59      	adds	r1, r3, #1
 8017672:	084a      	lsrs	r2, r1, #1
 8017674:	fba6 5202 	umull	r5, r2, r6, r2
 8017678:	0892      	lsrs	r2, r2, #2
 801767a:	252a      	movs	r5, #42	; 0x2a
 801767c:	fb05 1212 	mls	r2, r5, r2, r1
 8017680:	b2d1      	uxtb	r1, r2
 8017682:	4288      	cmp	r0, r1
 8017684:	d08e      	beq.n	80175a4 <uxr_read_framed_msg+0x2cc>
 8017686:	3302      	adds	r3, #2
 8017688:	4422      	add	r2, r4
 801768a:	0858      	lsrs	r0, r3, #1
 801768c:	fba6 1000 	umull	r1, r0, r6, r0
 8017690:	7891      	ldrb	r1, [r2, #2]
 8017692:	0882      	lsrs	r2, r0, #2
 8017694:	fb05 3312 	mls	r3, r5, r2, r3
 8017698:	297e      	cmp	r1, #126	; 0x7e
 801769a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801769e:	f000 80a3 	beq.w	80177e8 <uxr_read_framed_msg+0x510>
 80176a2:	f081 0120 	eor.w	r1, r1, #32
 80176a6:	e64e      	b.n	8017346 <uxr_read_framed_msg+0x6e>
 80176a8:	1c59      	adds	r1, r3, #1
 80176aa:	084a      	lsrs	r2, r1, #1
 80176ac:	fba6 5202 	umull	r5, r2, r6, r2
 80176b0:	0892      	lsrs	r2, r2, #2
 80176b2:	252a      	movs	r5, #42	; 0x2a
 80176b4:	fb05 1212 	mls	r2, r5, r2, r1
 80176b8:	b2d1      	uxtb	r1, r2
 80176ba:	4288      	cmp	r0, r1
 80176bc:	d081      	beq.n	80175c2 <uxr_read_framed_msg+0x2ea>
 80176be:	3302      	adds	r3, #2
 80176c0:	4422      	add	r2, r4
 80176c2:	0858      	lsrs	r0, r3, #1
 80176c4:	fba6 1000 	umull	r1, r0, r6, r0
 80176c8:	7891      	ldrb	r1, [r2, #2]
 80176ca:	0882      	lsrs	r2, r0, #2
 80176cc:	fb05 3312 	mls	r3, r5, r2, r3
 80176d0:	297e      	cmp	r1, #126	; 0x7e
 80176d2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80176d6:	d077      	beq.n	80177c8 <uxr_read_framed_msg+0x4f0>
 80176d8:	f081 0120 	eor.w	r1, r1, #32
 80176dc:	e65b      	b.n	8017396 <uxr_read_framed_msg+0xbe>
 80176de:	1c59      	adds	r1, r3, #1
 80176e0:	084a      	lsrs	r2, r1, #1
 80176e2:	fba6 5202 	umull	r5, r2, r6, r2
 80176e6:	0892      	lsrs	r2, r2, #2
 80176e8:	252a      	movs	r5, #42	; 0x2a
 80176ea:	fb05 1212 	mls	r2, r5, r2, r1
 80176ee:	b2d1      	uxtb	r1, r2
 80176f0:	4288      	cmp	r0, r1
 80176f2:	f43f af57 	beq.w	80175a4 <uxr_read_framed_msg+0x2cc>
 80176f6:	3302      	adds	r3, #2
 80176f8:	4422      	add	r2, r4
 80176fa:	0858      	lsrs	r0, r3, #1
 80176fc:	fba6 1000 	umull	r1, r0, r6, r0
 8017700:	7891      	ldrb	r1, [r2, #2]
 8017702:	0882      	lsrs	r2, r0, #2
 8017704:	fb05 3312 	mls	r3, r5, r2, r3
 8017708:	297e      	cmp	r1, #126	; 0x7e
 801770a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801770e:	d06b      	beq.n	80177e8 <uxr_read_framed_msg+0x510>
 8017710:	f081 0120 	eor.w	r1, r1, #32
 8017714:	e69d      	b.n	8017452 <uxr_read_framed_msg+0x17a>
 8017716:	1c5d      	adds	r5, r3, #1
 8017718:	086a      	lsrs	r2, r5, #1
 801771a:	fba6 0202 	umull	r0, r2, r6, r2
 801771e:	0892      	lsrs	r2, r2, #2
 8017720:	202a      	movs	r0, #42	; 0x2a
 8017722:	fb00 5212 	mls	r2, r0, r2, r5
 8017726:	b2d5      	uxtb	r5, r2
 8017728:	42a9      	cmp	r1, r5
 801772a:	f43f af4c 	beq.w	80175c6 <uxr_read_framed_msg+0x2ee>
 801772e:	3302      	adds	r3, #2
 8017730:	4422      	add	r2, r4
 8017732:	0859      	lsrs	r1, r3, #1
 8017734:	fba6 5101 	umull	r5, r1, r6, r1
 8017738:	7895      	ldrb	r5, [r2, #2]
 801773a:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
 801773e:	088a      	lsrs	r2, r1, #2
 8017740:	fb00 3312 	mls	r3, r0, r2, r3
 8017744:	2d7e      	cmp	r5, #126	; 0x7e
 8017746:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801774a:	f43f af3c 	beq.w	80175c6 <uxr_read_framed_msg+0x2ee>
 801774e:	f085 0520 	eor.w	r5, r5, #32
 8017752:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
 8017756:	e6e5      	b.n	8017524 <uxr_read_framed_msg+0x24c>
 8017758:	1c59      	adds	r1, r3, #1
 801775a:	084a      	lsrs	r2, r1, #1
 801775c:	fba6 5202 	umull	r5, r2, r6, r2
 8017760:	0892      	lsrs	r2, r2, #2
 8017762:	252a      	movs	r5, #42	; 0x2a
 8017764:	fb05 1212 	mls	r2, r5, r2, r1
 8017768:	b2d1      	uxtb	r1, r2
 801776a:	4288      	cmp	r0, r1
 801776c:	f43f af29 	beq.w	80175c2 <uxr_read_framed_msg+0x2ea>
 8017770:	3302      	adds	r3, #2
 8017772:	4422      	add	r2, r4
 8017774:	0858      	lsrs	r0, r3, #1
 8017776:	fba6 1000 	umull	r1, r0, r6, r0
 801777a:	7891      	ldrb	r1, [r2, #2]
 801777c:	0882      	lsrs	r2, r0, #2
 801777e:	fb05 3312 	mls	r3, r5, r2, r3
 8017782:	297e      	cmp	r1, #126	; 0x7e
 8017784:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8017788:	d01e      	beq.n	80177c8 <uxr_read_framed_msg+0x4f0>
 801778a:	f081 0120 	eor.w	r1, r1, #32
 801778e:	e689      	b.n	80174a4 <uxr_read_framed_msg+0x1cc>
 8017790:	1c51      	adds	r1, r2, #1
 8017792:	084b      	lsrs	r3, r1, #1
 8017794:	fba6 5303 	umull	r5, r3, r6, r3
 8017798:	089b      	lsrs	r3, r3, #2
 801779a:	252a      	movs	r5, #42	; 0x2a
 801779c:	fb05 1313 	mls	r3, r5, r3, r1
 80177a0:	b2d9      	uxtb	r1, r3
 80177a2:	4288      	cmp	r0, r1
 80177a4:	f43f af3a 	beq.w	801761c <uxr_read_framed_msg+0x344>
 80177a8:	3202      	adds	r2, #2
 80177aa:	4423      	add	r3, r4
 80177ac:	0850      	lsrs	r0, r2, #1
 80177ae:	789b      	ldrb	r3, [r3, #2]
 80177b0:	fba6 1000 	umull	r1, r0, r6, r0
 80177b4:	0880      	lsrs	r0, r0, #2
 80177b6:	fb05 2210 	mls	r2, r5, r0, r2
 80177ba:	2b7e      	cmp	r3, #126	; 0x7e
 80177bc:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80177c0:	d014      	beq.n	80177ec <uxr_read_framed_msg+0x514>
 80177c2:	f083 0120 	eor.w	r1, r3, #32
 80177c6:	e68a      	b.n	80174de <uxr_read_framed_msg+0x206>
 80177c8:	2302      	movs	r3, #2
 80177ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80177cc:	4649      	mov	r1, r9
 80177ce:	e9cd 2300 	strd	r2, r3, [sp]
 80177d2:	4620      	mov	r0, r4
 80177d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80177d6:	4652      	mov	r2, sl
 80177d8:	f7ff fcfc 	bl	80171d4 <uxr_framing_read_transport>
 80177dc:	2800      	cmp	r0, #0
 80177de:	f47f aeee 	bne.w	80175be <uxr_read_framed_msg+0x2e6>
 80177e2:	2301      	movs	r3, #1
 80177e4:	7023      	strb	r3, [r4, #0]
 80177e6:	e589      	b.n	80172fc <uxr_read_framed_msg+0x24>
 80177e8:	2301      	movs	r3, #1
 80177ea:	e7ee      	b.n	80177ca <uxr_read_framed_msg+0x4f2>
 80177ec:	2303      	movs	r3, #3
 80177ee:	e7ec      	b.n	80177ca <uxr_read_framed_msg+0x4f2>
 80177f0:	ee17 9a90 	vmov	r9, s15
 80177f4:	e6b1      	b.n	801755a <uxr_read_framed_msg+0x282>
 80177f6:	bf00      	nop

080177f8 <rcl_get_default_domain_id>:
 80177f8:	b530      	push	{r4, r5, lr}
 80177fa:	b083      	sub	sp, #12
 80177fc:	2300      	movs	r3, #0
 80177fe:	9300      	str	r3, [sp, #0]
 8017800:	b1d0      	cbz	r0, 8017838 <rcl_get_default_domain_id+0x40>
 8017802:	4604      	mov	r4, r0
 8017804:	4669      	mov	r1, sp
 8017806:	4815      	ldr	r0, [pc, #84]	; (801785c <rcl_get_default_domain_id+0x64>)
 8017808:	f7fd fa6a 	bl	8014ce0 <rcutils_get_env>
 801780c:	4602      	mov	r2, r0
 801780e:	b110      	cbz	r0, 8017816 <rcl_get_default_domain_id+0x1e>
 8017810:	2001      	movs	r0, #1
 8017812:	b003      	add	sp, #12
 8017814:	bd30      	pop	{r4, r5, pc}
 8017816:	9b00      	ldr	r3, [sp, #0]
 8017818:	b18b      	cbz	r3, 801783e <rcl_get_default_domain_id+0x46>
 801781a:	7818      	ldrb	r0, [r3, #0]
 801781c:	2800      	cmp	r0, #0
 801781e:	d0f8      	beq.n	8017812 <rcl_get_default_domain_id+0x1a>
 8017820:	4618      	mov	r0, r3
 8017822:	a901      	add	r1, sp, #4
 8017824:	9201      	str	r2, [sp, #4]
 8017826:	f000 fc07 	bl	8018038 <strtoul>
 801782a:	4605      	mov	r5, r0
 801782c:	b150      	cbz	r0, 8017844 <rcl_get_default_domain_id+0x4c>
 801782e:	1c43      	adds	r3, r0, #1
 8017830:	d00d      	beq.n	801784e <rcl_get_default_domain_id+0x56>
 8017832:	6025      	str	r5, [r4, #0]
 8017834:	2000      	movs	r0, #0
 8017836:	e7ec      	b.n	8017812 <rcl_get_default_domain_id+0x1a>
 8017838:	200b      	movs	r0, #11
 801783a:	b003      	add	sp, #12
 801783c:	bd30      	pop	{r4, r5, pc}
 801783e:	4618      	mov	r0, r3
 8017840:	b003      	add	sp, #12
 8017842:	bd30      	pop	{r4, r5, pc}
 8017844:	9b01      	ldr	r3, [sp, #4]
 8017846:	781b      	ldrb	r3, [r3, #0]
 8017848:	2b00      	cmp	r3, #0
 801784a:	d0f2      	beq.n	8017832 <rcl_get_default_domain_id+0x3a>
 801784c:	e7e0      	b.n	8017810 <rcl_get_default_domain_id+0x18>
 801784e:	f000 ffc9 	bl	80187e4 <__errno>
 8017852:	6803      	ldr	r3, [r0, #0]
 8017854:	2b22      	cmp	r3, #34	; 0x22
 8017856:	d1ec      	bne.n	8017832 <rcl_get_default_domain_id+0x3a>
 8017858:	e7da      	b.n	8017810 <rcl_get_default_domain_id+0x18>
 801785a:	bf00      	nop
 801785c:	0801a1f0 	.word	0x0801a1f0

08017860 <rcl_get_zero_initialized_guard_condition>:
 8017860:	4a03      	ldr	r2, [pc, #12]	; (8017870 <rcl_get_zero_initialized_guard_condition+0x10>)
 8017862:	4603      	mov	r3, r0
 8017864:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017868:	e883 0003 	stmia.w	r3, {r0, r1}
 801786c:	4618      	mov	r0, r3
 801786e:	4770      	bx	lr
 8017870:	0801a200 	.word	0x0801a200

08017874 <rcl_guard_condition_init_from_rmw>:
 8017874:	b082      	sub	sp, #8
 8017876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801787a:	b086      	sub	sp, #24
 801787c:	ac0c      	add	r4, sp, #48	; 0x30
 801787e:	4684      	mov	ip, r0
 8017880:	f844 3f04 	str.w	r3, [r4, #4]!
 8017884:	460f      	mov	r7, r1
 8017886:	4690      	mov	r8, r2
 8017888:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801788a:	ad01      	add	r5, sp, #4
 801788c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801788e:	6823      	ldr	r3, [r4, #0]
 8017890:	602b      	str	r3, [r5, #0]
 8017892:	a801      	add	r0, sp, #4
 8017894:	4664      	mov	r4, ip
 8017896:	f7f5 ffb7 	bl	800d808 <rcutils_allocator_is_valid>
 801789a:	b328      	cbz	r0, 80178e8 <rcl_guard_condition_init_from_rmw+0x74>
 801789c:	b324      	cbz	r4, 80178e8 <rcl_guard_condition_init_from_rmw+0x74>
 801789e:	6866      	ldr	r6, [r4, #4]
 80178a0:	b9e6      	cbnz	r6, 80178dc <rcl_guard_condition_init_from_rmw+0x68>
 80178a2:	f1b8 0f00 	cmp.w	r8, #0
 80178a6:	d01f      	beq.n	80178e8 <rcl_guard_condition_init_from_rmw+0x74>
 80178a8:	4640      	mov	r0, r8
 80178aa:	f7fb f8f7 	bl	8012a9c <rcl_context_is_valid>
 80178ae:	b308      	cbz	r0, 80178f4 <rcl_guard_condition_init_from_rmw+0x80>
 80178b0:	9b01      	ldr	r3, [sp, #4]
 80178b2:	9905      	ldr	r1, [sp, #20]
 80178b4:	201c      	movs	r0, #28
 80178b6:	4798      	blx	r3
 80178b8:	4605      	mov	r5, r0
 80178ba:	6060      	str	r0, [r4, #4]
 80178bc:	b340      	cbz	r0, 8017910 <rcl_guard_condition_init_from_rmw+0x9c>
 80178be:	b1df      	cbz	r7, 80178f8 <rcl_guard_condition_init_from_rmw+0x84>
 80178c0:	6007      	str	r7, [r0, #0]
 80178c2:	7106      	strb	r6, [r0, #4]
 80178c4:	ac01      	add	r4, sp, #4
 80178c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80178c8:	3508      	adds	r5, #8
 80178ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80178cc:	6823      	ldr	r3, [r4, #0]
 80178ce:	602b      	str	r3, [r5, #0]
 80178d0:	2000      	movs	r0, #0
 80178d2:	b006      	add	sp, #24
 80178d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80178d8:	b002      	add	sp, #8
 80178da:	4770      	bx	lr
 80178dc:	2064      	movs	r0, #100	; 0x64
 80178de:	b006      	add	sp, #24
 80178e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80178e4:	b002      	add	sp, #8
 80178e6:	4770      	bx	lr
 80178e8:	200b      	movs	r0, #11
 80178ea:	b006      	add	sp, #24
 80178ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80178f0:	b002      	add	sp, #8
 80178f2:	4770      	bx	lr
 80178f4:	2065      	movs	r0, #101	; 0x65
 80178f6:	e7f2      	b.n	80178de <rcl_guard_condition_init_from_rmw+0x6a>
 80178f8:	f8d8 0000 	ldr.w	r0, [r8]
 80178fc:	3028      	adds	r0, #40	; 0x28
 80178fe:	f000 f93b 	bl	8017b78 <rmw_create_guard_condition>
 8017902:	6028      	str	r0, [r5, #0]
 8017904:	6865      	ldr	r5, [r4, #4]
 8017906:	682e      	ldr	r6, [r5, #0]
 8017908:	b126      	cbz	r6, 8017914 <rcl_guard_condition_init_from_rmw+0xa0>
 801790a:	2301      	movs	r3, #1
 801790c:	712b      	strb	r3, [r5, #4]
 801790e:	e7d9      	b.n	80178c4 <rcl_guard_condition_init_from_rmw+0x50>
 8017910:	200a      	movs	r0, #10
 8017912:	e7e4      	b.n	80178de <rcl_guard_condition_init_from_rmw+0x6a>
 8017914:	4628      	mov	r0, r5
 8017916:	9b02      	ldr	r3, [sp, #8]
 8017918:	9905      	ldr	r1, [sp, #20]
 801791a:	4798      	blx	r3
 801791c:	6066      	str	r6, [r4, #4]
 801791e:	2001      	movs	r0, #1
 8017920:	e7dd      	b.n	80178de <rcl_guard_condition_init_from_rmw+0x6a>
 8017922:	bf00      	nop

08017924 <rcl_guard_condition_fini>:
 8017924:	b570      	push	{r4, r5, r6, lr}
 8017926:	b082      	sub	sp, #8
 8017928:	b1f0      	cbz	r0, 8017968 <rcl_guard_condition_fini+0x44>
 801792a:	4604      	mov	r4, r0
 801792c:	6840      	ldr	r0, [r0, #4]
 801792e:	b158      	cbz	r0, 8017948 <rcl_guard_condition_fini+0x24>
 8017930:	6803      	ldr	r3, [r0, #0]
 8017932:	68c6      	ldr	r6, [r0, #12]
 8017934:	6981      	ldr	r1, [r0, #24]
 8017936:	b15b      	cbz	r3, 8017950 <rcl_guard_condition_fini+0x2c>
 8017938:	7905      	ldrb	r5, [r0, #4]
 801793a:	b95d      	cbnz	r5, 8017954 <rcl_guard_condition_fini+0x30>
 801793c:	47b0      	blx	r6
 801793e:	2300      	movs	r3, #0
 8017940:	4628      	mov	r0, r5
 8017942:	6063      	str	r3, [r4, #4]
 8017944:	b002      	add	sp, #8
 8017946:	bd70      	pop	{r4, r5, r6, pc}
 8017948:	4605      	mov	r5, r0
 801794a:	4628      	mov	r0, r5
 801794c:	b002      	add	sp, #8
 801794e:	bd70      	pop	{r4, r5, r6, pc}
 8017950:	461d      	mov	r5, r3
 8017952:	e7f3      	b.n	801793c <rcl_guard_condition_fini+0x18>
 8017954:	4618      	mov	r0, r3
 8017956:	9101      	str	r1, [sp, #4]
 8017958:	f000 f922 	bl	8017ba0 <rmw_destroy_guard_condition>
 801795c:	1e05      	subs	r5, r0, #0
 801795e:	9901      	ldr	r1, [sp, #4]
 8017960:	6860      	ldr	r0, [r4, #4]
 8017962:	bf18      	it	ne
 8017964:	2501      	movne	r5, #1
 8017966:	e7e9      	b.n	801793c <rcl_guard_condition_fini+0x18>
 8017968:	250b      	movs	r5, #11
 801796a:	4628      	mov	r0, r5
 801796c:	b002      	add	sp, #8
 801796e:	bd70      	pop	{r4, r5, r6, pc}

08017970 <rcl_guard_condition_get_default_options>:
 8017970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017972:	b087      	sub	sp, #28
 8017974:	4607      	mov	r7, r0
 8017976:	466c      	mov	r4, sp
 8017978:	4668      	mov	r0, sp
 801797a:	f7f5 ff37 	bl	800d7ec <rcutils_get_default_allocator>
 801797e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017980:	4d07      	ldr	r5, [pc, #28]	; (80179a0 <rcl_guard_condition_get_default_options+0x30>)
 8017982:	f8d4 c000 	ldr.w	ip, [r4]
 8017986:	462e      	mov	r6, r5
 8017988:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801798a:	462c      	mov	r4, r5
 801798c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801798e:	463c      	mov	r4, r7
 8017990:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017992:	4638      	mov	r0, r7
 8017994:	f8c6 c000 	str.w	ip, [r6]
 8017998:	f8c4 c000 	str.w	ip, [r4]
 801799c:	b007      	add	sp, #28
 801799e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80179a0:	20009d24 	.word	0x20009d24

080179a4 <rcl_guard_condition_get_rmw_handle>:
 80179a4:	b110      	cbz	r0, 80179ac <rcl_guard_condition_get_rmw_handle+0x8>
 80179a6:	6840      	ldr	r0, [r0, #4]
 80179a8:	b100      	cbz	r0, 80179ac <rcl_guard_condition_get_rmw_handle+0x8>
 80179aa:	6800      	ldr	r0, [r0, #0]
 80179ac:	4770      	bx	lr
 80179ae:	bf00      	nop

080179b0 <on_status>:
 80179b0:	b082      	sub	sp, #8
 80179b2:	b002      	add	sp, #8
 80179b4:	4770      	bx	lr
 80179b6:	bf00      	nop

080179b8 <on_topic>:
 80179b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179bc:	4a21      	ldr	r2, [pc, #132]	; (8017a44 <on_topic+0x8c>)
 80179be:	b094      	sub	sp, #80	; 0x50
 80179c0:	6812      	ldr	r2, [r2, #0]
 80179c2:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80179c4:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 80179c8:	9113      	str	r1, [sp, #76]	; 0x4c
 80179ca:	9312      	str	r3, [sp, #72]	; 0x48
 80179cc:	b3ba      	cbz	r2, 8017a3e <on_topic+0x86>
 80179ce:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 80179d2:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 80179d6:	e001      	b.n	80179dc <on_topic+0x24>
 80179d8:	6892      	ldr	r2, [r2, #8]
 80179da:	b382      	cbz	r2, 8017a3e <on_topic+0x86>
 80179dc:	68d4      	ldr	r4, [r2, #12]
 80179de:	8aa3      	ldrh	r3, [r4, #20]
 80179e0:	428b      	cmp	r3, r1
 80179e2:	d1f9      	bne.n	80179d8 <on_topic+0x20>
 80179e4:	7da3      	ldrb	r3, [r4, #22]
 80179e6:	4283      	cmp	r3, r0
 80179e8:	d1f6      	bne.n	80179d8 <on_topic+0x20>
 80179ea:	2248      	movs	r2, #72	; 0x48
 80179ec:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80179f0:	4668      	mov	r0, sp
 80179f2:	f000 ff2c 	bl	801884e <memcpy>
 80179f6:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 80179fa:	4620      	mov	r0, r4
 80179fc:	f7f6 fe48 	bl	800e690 <rmw_uxrce_get_static_input_buffer_for_entity>
 8017a00:	4607      	mov	r7, r0
 8017a02:	b1e0      	cbz	r0, 8017a3e <on_topic+0x86>
 8017a04:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8017a08:	462a      	mov	r2, r5
 8017a0a:	4630      	mov	r0, r6
 8017a0c:	f108 0110 	add.w	r1, r8, #16
 8017a10:	f7fe fb9a 	bl	8016148 <ucdr_deserialize_array_uint8_t>
 8017a14:	b930      	cbnz	r0, 8017a24 <on_topic+0x6c>
 8017a16:	480c      	ldr	r0, [pc, #48]	; (8017a48 <on_topic+0x90>)
 8017a18:	4639      	mov	r1, r7
 8017a1a:	b014      	add	sp, #80	; 0x50
 8017a1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017a20:	f7fd bb82 	b.w	8015128 <put_memory>
 8017a24:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 8017a28:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 8017a2c:	f7fe fab6 	bl	8015f9c <rmw_uros_epoch_nanos>
 8017a30:	f608 0218 	addw	r2, r8, #2072	; 0x818
 8017a34:	2305      	movs	r3, #5
 8017a36:	e9c2 0100 	strd	r0, r1, [r2]
 8017a3a:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 8017a3e:	b014      	add	sp, #80	; 0x50
 8017a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a44:	2000d12c 	.word	0x2000d12c
 8017a48:	20009ec0 	.word	0x20009ec0

08017a4c <on_request>:
 8017a4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017a50:	4822      	ldr	r0, [pc, #136]	; (8017adc <on_request+0x90>)
 8017a52:	b095      	sub	sp, #84	; 0x54
 8017a54:	9113      	str	r1, [sp, #76]	; 0x4c
 8017a56:	6801      	ldr	r1, [r0, #0]
 8017a58:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8017a5a:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 8017a5e:	2900      	cmp	r1, #0
 8017a60:	d039      	beq.n	8017ad6 <on_request+0x8a>
 8017a62:	461d      	mov	r5, r3
 8017a64:	e001      	b.n	8017a6a <on_request+0x1e>
 8017a66:	6889      	ldr	r1, [r1, #8]
 8017a68:	b3a9      	cbz	r1, 8017ad6 <on_request+0x8a>
 8017a6a:	68cc      	ldr	r4, [r1, #12]
 8017a6c:	8b20      	ldrh	r0, [r4, #24]
 8017a6e:	4290      	cmp	r0, r2
 8017a70:	d1f9      	bne.n	8017a66 <on_request+0x1a>
 8017a72:	2248      	movs	r2, #72	; 0x48
 8017a74:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8017a78:	4668      	mov	r0, sp
 8017a7a:	f000 fee8 	bl	801884e <memcpy>
 8017a7e:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8017a82:	4620      	mov	r0, r4
 8017a84:	f7f6 fe04 	bl	800e690 <rmw_uxrce_get_static_input_buffer_for_entity>
 8017a88:	4680      	mov	r8, r0
 8017a8a:	b320      	cbz	r0, 8017ad6 <on_request+0x8a>
 8017a8c:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8017a90:	4632      	mov	r2, r6
 8017a92:	4638      	mov	r0, r7
 8017a94:	f109 0110 	add.w	r1, r9, #16
 8017a98:	f7fe fb56 	bl	8016148 <ucdr_deserialize_array_uint8_t>
 8017a9c:	b930      	cbnz	r0, 8017aac <on_request+0x60>
 8017a9e:	4810      	ldr	r0, [pc, #64]	; (8017ae0 <on_request+0x94>)
 8017aa0:	4641      	mov	r1, r8
 8017aa2:	b015      	add	sp, #84	; 0x54
 8017aa4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017aa8:	f7fd bb3e 	b.w	8015128 <put_memory>
 8017aac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017aae:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 8017ab2:	f609 0428 	addw	r4, r9, #2088	; 0x828
 8017ab6:	f8c9 6810 	str.w	r6, [r9, #2064]	; 0x810
 8017aba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017abc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8017ac0:	e884 0003 	stmia.w	r4, {r0, r1}
 8017ac4:	f7fe fa6a 	bl	8015f9c <rmw_uros_epoch_nanos>
 8017ac8:	f609 0218 	addw	r2, r9, #2072	; 0x818
 8017acc:	2303      	movs	r3, #3
 8017ace:	e9c2 0100 	strd	r0, r1, [r2]
 8017ad2:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 8017ad6:	b015      	add	sp, #84	; 0x54
 8017ad8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017adc:	2000d11c 	.word	0x2000d11c
 8017ae0:	20009ec0 	.word	0x20009ec0

08017ae4 <on_reply>:
 8017ae4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017ae8:	4821      	ldr	r0, [pc, #132]	; (8017b70 <on_reply+0x8c>)
 8017aea:	b095      	sub	sp, #84	; 0x54
 8017aec:	9113      	str	r1, [sp, #76]	; 0x4c
 8017aee:	6801      	ldr	r1, [r0, #0]
 8017af0:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8017af2:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 8017af6:	b3b9      	cbz	r1, 8017b68 <on_reply+0x84>
 8017af8:	461d      	mov	r5, r3
 8017afa:	e001      	b.n	8017b00 <on_reply+0x1c>
 8017afc:	6889      	ldr	r1, [r1, #8]
 8017afe:	b399      	cbz	r1, 8017b68 <on_reply+0x84>
 8017b00:	68cc      	ldr	r4, [r1, #12]
 8017b02:	8b20      	ldrh	r0, [r4, #24]
 8017b04:	4290      	cmp	r0, r2
 8017b06:	d1f9      	bne.n	8017afc <on_reply+0x18>
 8017b08:	2248      	movs	r2, #72	; 0x48
 8017b0a:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8017b0e:	4668      	mov	r0, sp
 8017b10:	f000 fe9d 	bl	801884e <memcpy>
 8017b14:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8017b18:	4620      	mov	r0, r4
 8017b1a:	f7f6 fdb9 	bl	800e690 <rmw_uxrce_get_static_input_buffer_for_entity>
 8017b1e:	4680      	mov	r8, r0
 8017b20:	b310      	cbz	r0, 8017b68 <on_reply+0x84>
 8017b22:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8017b26:	4632      	mov	r2, r6
 8017b28:	4638      	mov	r0, r7
 8017b2a:	f109 0110 	add.w	r1, r9, #16
 8017b2e:	f7fe fb0b 	bl	8016148 <ucdr_deserialize_array_uint8_t>
 8017b32:	b930      	cbnz	r0, 8017b42 <on_reply+0x5e>
 8017b34:	480f      	ldr	r0, [pc, #60]	; (8017b74 <on_reply+0x90>)
 8017b36:	4641      	mov	r1, r8
 8017b38:	b015      	add	sp, #84	; 0x54
 8017b3a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017b3e:	f7fd baf3 	b.w	8015128 <put_memory>
 8017b42:	b2aa      	uxth	r2, r5
 8017b44:	2300      	movs	r3, #0
 8017b46:	f609 0128 	addw	r1, r9, #2088	; 0x828
 8017b4a:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 8017b4e:	f8c9 6810 	str.w	r6, [r9, #2064]	; 0x810
 8017b52:	e9c1 2300 	strd	r2, r3, [r1]
 8017b56:	f7fe fa21 	bl	8015f9c <rmw_uros_epoch_nanos>
 8017b5a:	f609 0218 	addw	r2, r9, #2072	; 0x818
 8017b5e:	2304      	movs	r3, #4
 8017b60:	e9c2 0100 	strd	r0, r1, [r2]
 8017b64:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 8017b68:	b015      	add	sp, #84	; 0x54
 8017b6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017b6e:	bf00      	nop
 8017b70:	2000a750 	.word	0x2000a750
 8017b74:	20009ec0 	.word	0x20009ec0

08017b78 <rmw_create_guard_condition>:
 8017b78:	b538      	push	{r3, r4, r5, lr}
 8017b7a:	4605      	mov	r5, r0
 8017b7c:	4807      	ldr	r0, [pc, #28]	; (8017b9c <rmw_create_guard_condition+0x24>)
 8017b7e:	f7fd fac3 	bl	8015108 <get_memory>
 8017b82:	b148      	cbz	r0, 8017b98 <rmw_create_guard_condition+0x20>
 8017b84:	68c4      	ldr	r4, [r0, #12]
 8017b86:	2300      	movs	r3, #0
 8017b88:	61e5      	str	r5, [r4, #28]
 8017b8a:	7423      	strb	r3, [r4, #16]
 8017b8c:	f7fd fb24 	bl	80151d8 <rmw_get_implementation_identifier>
 8017b90:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8017b94:	f104 0014 	add.w	r0, r4, #20
 8017b98:	bd38      	pop	{r3, r4, r5, pc}
 8017b9a:	bf00      	nop
 8017b9c:	2000d048 	.word	0x2000d048

08017ba0 <rmw_destroy_guard_condition>:
 8017ba0:	b508      	push	{r3, lr}
 8017ba2:	4b08      	ldr	r3, [pc, #32]	; (8017bc4 <rmw_destroy_guard_condition+0x24>)
 8017ba4:	6819      	ldr	r1, [r3, #0]
 8017ba6:	b911      	cbnz	r1, 8017bae <rmw_destroy_guard_condition+0xe>
 8017ba8:	e00a      	b.n	8017bc0 <rmw_destroy_guard_condition+0x20>
 8017baa:	6889      	ldr	r1, [r1, #8]
 8017bac:	b141      	cbz	r1, 8017bc0 <rmw_destroy_guard_condition+0x20>
 8017bae:	68cb      	ldr	r3, [r1, #12]
 8017bb0:	3314      	adds	r3, #20
 8017bb2:	4298      	cmp	r0, r3
 8017bb4:	d1f9      	bne.n	8017baa <rmw_destroy_guard_condition+0xa>
 8017bb6:	4803      	ldr	r0, [pc, #12]	; (8017bc4 <rmw_destroy_guard_condition+0x24>)
 8017bb8:	f7fd fab6 	bl	8015128 <put_memory>
 8017bbc:	2000      	movs	r0, #0
 8017bbe:	bd08      	pop	{r3, pc}
 8017bc0:	2001      	movs	r0, #1
 8017bc2:	bd08      	pop	{r3, pc}
 8017bc4:	2000d048 	.word	0x2000d048

08017bc8 <calloc>:
 8017bc8:	4b02      	ldr	r3, [pc, #8]	; (8017bd4 <calloc+0xc>)
 8017bca:	460a      	mov	r2, r1
 8017bcc:	4601      	mov	r1, r0
 8017bce:	6818      	ldr	r0, [r3, #0]
 8017bd0:	f000 b802 	b.w	8017bd8 <_calloc_r>
 8017bd4:	200000cc 	.word	0x200000cc

08017bd8 <_calloc_r>:
 8017bd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017bda:	fba1 2402 	umull	r2, r4, r1, r2
 8017bde:	b94c      	cbnz	r4, 8017bf4 <_calloc_r+0x1c>
 8017be0:	4611      	mov	r1, r2
 8017be2:	9201      	str	r2, [sp, #4]
 8017be4:	f000 f886 	bl	8017cf4 <_malloc_r>
 8017be8:	9a01      	ldr	r2, [sp, #4]
 8017bea:	4605      	mov	r5, r0
 8017bec:	b930      	cbnz	r0, 8017bfc <_calloc_r+0x24>
 8017bee:	4628      	mov	r0, r5
 8017bf0:	b003      	add	sp, #12
 8017bf2:	bd30      	pop	{r4, r5, pc}
 8017bf4:	220c      	movs	r2, #12
 8017bf6:	6002      	str	r2, [r0, #0]
 8017bf8:	2500      	movs	r5, #0
 8017bfa:	e7f8      	b.n	8017bee <_calloc_r+0x16>
 8017bfc:	4621      	mov	r1, r4
 8017bfe:	f000 fd07 	bl	8018610 <memset>
 8017c02:	e7f4      	b.n	8017bee <_calloc_r+0x16>

08017c04 <getenv>:
 8017c04:	b507      	push	{r0, r1, r2, lr}
 8017c06:	4b04      	ldr	r3, [pc, #16]	; (8017c18 <getenv+0x14>)
 8017c08:	4601      	mov	r1, r0
 8017c0a:	aa01      	add	r2, sp, #4
 8017c0c:	6818      	ldr	r0, [r3, #0]
 8017c0e:	f000 f805 	bl	8017c1c <_findenv_r>
 8017c12:	b003      	add	sp, #12
 8017c14:	f85d fb04 	ldr.w	pc, [sp], #4
 8017c18:	200000cc 	.word	0x200000cc

08017c1c <_findenv_r>:
 8017c1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c20:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8017c90 <_findenv_r+0x74>
 8017c24:	4607      	mov	r7, r0
 8017c26:	4689      	mov	r9, r1
 8017c28:	4616      	mov	r6, r2
 8017c2a:	f000 fe3d 	bl	80188a8 <__env_lock>
 8017c2e:	f8da 4000 	ldr.w	r4, [sl]
 8017c32:	b134      	cbz	r4, 8017c42 <_findenv_r+0x26>
 8017c34:	464b      	mov	r3, r9
 8017c36:	4698      	mov	r8, r3
 8017c38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017c3c:	b13a      	cbz	r2, 8017c4e <_findenv_r+0x32>
 8017c3e:	2a3d      	cmp	r2, #61	; 0x3d
 8017c40:	d1f9      	bne.n	8017c36 <_findenv_r+0x1a>
 8017c42:	4638      	mov	r0, r7
 8017c44:	f000 fe36 	bl	80188b4 <__env_unlock>
 8017c48:	2000      	movs	r0, #0
 8017c4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c4e:	eba8 0809 	sub.w	r8, r8, r9
 8017c52:	46a3      	mov	fp, r4
 8017c54:	f854 0b04 	ldr.w	r0, [r4], #4
 8017c58:	2800      	cmp	r0, #0
 8017c5a:	d0f2      	beq.n	8017c42 <_findenv_r+0x26>
 8017c5c:	4642      	mov	r2, r8
 8017c5e:	4649      	mov	r1, r9
 8017c60:	f000 fceb 	bl	801863a <strncmp>
 8017c64:	2800      	cmp	r0, #0
 8017c66:	d1f4      	bne.n	8017c52 <_findenv_r+0x36>
 8017c68:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8017c6c:	eb03 0508 	add.w	r5, r3, r8
 8017c70:	f813 3008 	ldrb.w	r3, [r3, r8]
 8017c74:	2b3d      	cmp	r3, #61	; 0x3d
 8017c76:	d1ec      	bne.n	8017c52 <_findenv_r+0x36>
 8017c78:	f8da 3000 	ldr.w	r3, [sl]
 8017c7c:	ebab 0303 	sub.w	r3, fp, r3
 8017c80:	109b      	asrs	r3, r3, #2
 8017c82:	4638      	mov	r0, r7
 8017c84:	6033      	str	r3, [r6, #0]
 8017c86:	f000 fe15 	bl	80188b4 <__env_unlock>
 8017c8a:	1c68      	adds	r0, r5, #1
 8017c8c:	e7dd      	b.n	8017c4a <_findenv_r+0x2e>
 8017c8e:	bf00      	nop
 8017c90:	200000d0 	.word	0x200000d0

08017c94 <malloc>:
 8017c94:	4b02      	ldr	r3, [pc, #8]	; (8017ca0 <malloc+0xc>)
 8017c96:	4601      	mov	r1, r0
 8017c98:	6818      	ldr	r0, [r3, #0]
 8017c9a:	f000 b82b 	b.w	8017cf4 <_malloc_r>
 8017c9e:	bf00      	nop
 8017ca0:	200000cc 	.word	0x200000cc

08017ca4 <free>:
 8017ca4:	4b02      	ldr	r3, [pc, #8]	; (8017cb0 <free+0xc>)
 8017ca6:	4601      	mov	r1, r0
 8017ca8:	6818      	ldr	r0, [r3, #0]
 8017caa:	f000 be09 	b.w	80188c0 <_free_r>
 8017cae:	bf00      	nop
 8017cb0:	200000cc 	.word	0x200000cc

08017cb4 <sbrk_aligned>:
 8017cb4:	b570      	push	{r4, r5, r6, lr}
 8017cb6:	4e0e      	ldr	r6, [pc, #56]	; (8017cf0 <sbrk_aligned+0x3c>)
 8017cb8:	460c      	mov	r4, r1
 8017cba:	6831      	ldr	r1, [r6, #0]
 8017cbc:	4605      	mov	r5, r0
 8017cbe:	b911      	cbnz	r1, 8017cc6 <sbrk_aligned+0x12>
 8017cc0:	f000 fd6e 	bl	80187a0 <_sbrk_r>
 8017cc4:	6030      	str	r0, [r6, #0]
 8017cc6:	4621      	mov	r1, r4
 8017cc8:	4628      	mov	r0, r5
 8017cca:	f000 fd69 	bl	80187a0 <_sbrk_r>
 8017cce:	1c43      	adds	r3, r0, #1
 8017cd0:	d00a      	beq.n	8017ce8 <sbrk_aligned+0x34>
 8017cd2:	1cc4      	adds	r4, r0, #3
 8017cd4:	f024 0403 	bic.w	r4, r4, #3
 8017cd8:	42a0      	cmp	r0, r4
 8017cda:	d007      	beq.n	8017cec <sbrk_aligned+0x38>
 8017cdc:	1a21      	subs	r1, r4, r0
 8017cde:	4628      	mov	r0, r5
 8017ce0:	f000 fd5e 	bl	80187a0 <_sbrk_r>
 8017ce4:	3001      	adds	r0, #1
 8017ce6:	d101      	bne.n	8017cec <sbrk_aligned+0x38>
 8017ce8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8017cec:	4620      	mov	r0, r4
 8017cee:	bd70      	pop	{r4, r5, r6, pc}
 8017cf0:	20009d3c 	.word	0x20009d3c

08017cf4 <_malloc_r>:
 8017cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017cf8:	1ccd      	adds	r5, r1, #3
 8017cfa:	f025 0503 	bic.w	r5, r5, #3
 8017cfe:	3508      	adds	r5, #8
 8017d00:	2d0c      	cmp	r5, #12
 8017d02:	bf38      	it	cc
 8017d04:	250c      	movcc	r5, #12
 8017d06:	2d00      	cmp	r5, #0
 8017d08:	4607      	mov	r7, r0
 8017d0a:	db01      	blt.n	8017d10 <_malloc_r+0x1c>
 8017d0c:	42a9      	cmp	r1, r5
 8017d0e:	d905      	bls.n	8017d1c <_malloc_r+0x28>
 8017d10:	230c      	movs	r3, #12
 8017d12:	603b      	str	r3, [r7, #0]
 8017d14:	2600      	movs	r6, #0
 8017d16:	4630      	mov	r0, r6
 8017d18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017d1c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8017df0 <_malloc_r+0xfc>
 8017d20:	f000 f868 	bl	8017df4 <__malloc_lock>
 8017d24:	f8d8 3000 	ldr.w	r3, [r8]
 8017d28:	461c      	mov	r4, r3
 8017d2a:	bb5c      	cbnz	r4, 8017d84 <_malloc_r+0x90>
 8017d2c:	4629      	mov	r1, r5
 8017d2e:	4638      	mov	r0, r7
 8017d30:	f7ff ffc0 	bl	8017cb4 <sbrk_aligned>
 8017d34:	1c43      	adds	r3, r0, #1
 8017d36:	4604      	mov	r4, r0
 8017d38:	d155      	bne.n	8017de6 <_malloc_r+0xf2>
 8017d3a:	f8d8 4000 	ldr.w	r4, [r8]
 8017d3e:	4626      	mov	r6, r4
 8017d40:	2e00      	cmp	r6, #0
 8017d42:	d145      	bne.n	8017dd0 <_malloc_r+0xdc>
 8017d44:	2c00      	cmp	r4, #0
 8017d46:	d048      	beq.n	8017dda <_malloc_r+0xe6>
 8017d48:	6823      	ldr	r3, [r4, #0]
 8017d4a:	4631      	mov	r1, r6
 8017d4c:	4638      	mov	r0, r7
 8017d4e:	eb04 0903 	add.w	r9, r4, r3
 8017d52:	f000 fd25 	bl	80187a0 <_sbrk_r>
 8017d56:	4581      	cmp	r9, r0
 8017d58:	d13f      	bne.n	8017dda <_malloc_r+0xe6>
 8017d5a:	6821      	ldr	r1, [r4, #0]
 8017d5c:	1a6d      	subs	r5, r5, r1
 8017d5e:	4629      	mov	r1, r5
 8017d60:	4638      	mov	r0, r7
 8017d62:	f7ff ffa7 	bl	8017cb4 <sbrk_aligned>
 8017d66:	3001      	adds	r0, #1
 8017d68:	d037      	beq.n	8017dda <_malloc_r+0xe6>
 8017d6a:	6823      	ldr	r3, [r4, #0]
 8017d6c:	442b      	add	r3, r5
 8017d6e:	6023      	str	r3, [r4, #0]
 8017d70:	f8d8 3000 	ldr.w	r3, [r8]
 8017d74:	2b00      	cmp	r3, #0
 8017d76:	d038      	beq.n	8017dea <_malloc_r+0xf6>
 8017d78:	685a      	ldr	r2, [r3, #4]
 8017d7a:	42a2      	cmp	r2, r4
 8017d7c:	d12b      	bne.n	8017dd6 <_malloc_r+0xe2>
 8017d7e:	2200      	movs	r2, #0
 8017d80:	605a      	str	r2, [r3, #4]
 8017d82:	e00f      	b.n	8017da4 <_malloc_r+0xb0>
 8017d84:	6822      	ldr	r2, [r4, #0]
 8017d86:	1b52      	subs	r2, r2, r5
 8017d88:	d41f      	bmi.n	8017dca <_malloc_r+0xd6>
 8017d8a:	2a0b      	cmp	r2, #11
 8017d8c:	d917      	bls.n	8017dbe <_malloc_r+0xca>
 8017d8e:	1961      	adds	r1, r4, r5
 8017d90:	42a3      	cmp	r3, r4
 8017d92:	6025      	str	r5, [r4, #0]
 8017d94:	bf18      	it	ne
 8017d96:	6059      	strne	r1, [r3, #4]
 8017d98:	6863      	ldr	r3, [r4, #4]
 8017d9a:	bf08      	it	eq
 8017d9c:	f8c8 1000 	streq.w	r1, [r8]
 8017da0:	5162      	str	r2, [r4, r5]
 8017da2:	604b      	str	r3, [r1, #4]
 8017da4:	4638      	mov	r0, r7
 8017da6:	f104 060b 	add.w	r6, r4, #11
 8017daa:	f000 f829 	bl	8017e00 <__malloc_unlock>
 8017dae:	f026 0607 	bic.w	r6, r6, #7
 8017db2:	1d23      	adds	r3, r4, #4
 8017db4:	1af2      	subs	r2, r6, r3
 8017db6:	d0ae      	beq.n	8017d16 <_malloc_r+0x22>
 8017db8:	1b9b      	subs	r3, r3, r6
 8017dba:	50a3      	str	r3, [r4, r2]
 8017dbc:	e7ab      	b.n	8017d16 <_malloc_r+0x22>
 8017dbe:	42a3      	cmp	r3, r4
 8017dc0:	6862      	ldr	r2, [r4, #4]
 8017dc2:	d1dd      	bne.n	8017d80 <_malloc_r+0x8c>
 8017dc4:	f8c8 2000 	str.w	r2, [r8]
 8017dc8:	e7ec      	b.n	8017da4 <_malloc_r+0xb0>
 8017dca:	4623      	mov	r3, r4
 8017dcc:	6864      	ldr	r4, [r4, #4]
 8017dce:	e7ac      	b.n	8017d2a <_malloc_r+0x36>
 8017dd0:	4634      	mov	r4, r6
 8017dd2:	6876      	ldr	r6, [r6, #4]
 8017dd4:	e7b4      	b.n	8017d40 <_malloc_r+0x4c>
 8017dd6:	4613      	mov	r3, r2
 8017dd8:	e7cc      	b.n	8017d74 <_malloc_r+0x80>
 8017dda:	230c      	movs	r3, #12
 8017ddc:	603b      	str	r3, [r7, #0]
 8017dde:	4638      	mov	r0, r7
 8017de0:	f000 f80e 	bl	8017e00 <__malloc_unlock>
 8017de4:	e797      	b.n	8017d16 <_malloc_r+0x22>
 8017de6:	6025      	str	r5, [r4, #0]
 8017de8:	e7dc      	b.n	8017da4 <_malloc_r+0xb0>
 8017dea:	605b      	str	r3, [r3, #4]
 8017dec:	deff      	udf	#255	; 0xff
 8017dee:	bf00      	nop
 8017df0:	20009d38 	.word	0x20009d38

08017df4 <__malloc_lock>:
 8017df4:	4801      	ldr	r0, [pc, #4]	; (8017dfc <__malloc_lock+0x8>)
 8017df6:	f000 bd20 	b.w	801883a <__retarget_lock_acquire_recursive>
 8017dfa:	bf00      	nop
 8017dfc:	20009e81 	.word	0x20009e81

08017e00 <__malloc_unlock>:
 8017e00:	4801      	ldr	r0, [pc, #4]	; (8017e08 <__malloc_unlock+0x8>)
 8017e02:	f000 bd1b 	b.w	801883c <__retarget_lock_release_recursive>
 8017e06:	bf00      	nop
 8017e08:	20009e81 	.word	0x20009e81

08017e0c <srand>:
 8017e0c:	b538      	push	{r3, r4, r5, lr}
 8017e0e:	4b10      	ldr	r3, [pc, #64]	; (8017e50 <srand+0x44>)
 8017e10:	681d      	ldr	r5, [r3, #0]
 8017e12:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017e14:	4604      	mov	r4, r0
 8017e16:	b9b3      	cbnz	r3, 8017e46 <srand+0x3a>
 8017e18:	2018      	movs	r0, #24
 8017e1a:	f7ff ff3b 	bl	8017c94 <malloc>
 8017e1e:	4602      	mov	r2, r0
 8017e20:	6328      	str	r0, [r5, #48]	; 0x30
 8017e22:	b920      	cbnz	r0, 8017e2e <srand+0x22>
 8017e24:	4b0b      	ldr	r3, [pc, #44]	; (8017e54 <srand+0x48>)
 8017e26:	480c      	ldr	r0, [pc, #48]	; (8017e58 <srand+0x4c>)
 8017e28:	2146      	movs	r1, #70	; 0x46
 8017e2a:	f000 fd1f 	bl	801886c <__assert_func>
 8017e2e:	490b      	ldr	r1, [pc, #44]	; (8017e5c <srand+0x50>)
 8017e30:	4b0b      	ldr	r3, [pc, #44]	; (8017e60 <srand+0x54>)
 8017e32:	e9c0 1300 	strd	r1, r3, [r0]
 8017e36:	4b0b      	ldr	r3, [pc, #44]	; (8017e64 <srand+0x58>)
 8017e38:	6083      	str	r3, [r0, #8]
 8017e3a:	230b      	movs	r3, #11
 8017e3c:	8183      	strh	r3, [r0, #12]
 8017e3e:	2100      	movs	r1, #0
 8017e40:	2001      	movs	r0, #1
 8017e42:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017e46:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017e48:	2200      	movs	r2, #0
 8017e4a:	611c      	str	r4, [r3, #16]
 8017e4c:	615a      	str	r2, [r3, #20]
 8017e4e:	bd38      	pop	{r3, r4, r5, pc}
 8017e50:	200000cc 	.word	0x200000cc
 8017e54:	0801a208 	.word	0x0801a208
 8017e58:	0801a21f 	.word	0x0801a21f
 8017e5c:	abcd330e 	.word	0xabcd330e
 8017e60:	e66d1234 	.word	0xe66d1234
 8017e64:	0005deec 	.word	0x0005deec

08017e68 <rand>:
 8017e68:	4b16      	ldr	r3, [pc, #88]	; (8017ec4 <rand+0x5c>)
 8017e6a:	b510      	push	{r4, lr}
 8017e6c:	681c      	ldr	r4, [r3, #0]
 8017e6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017e70:	b9b3      	cbnz	r3, 8017ea0 <rand+0x38>
 8017e72:	2018      	movs	r0, #24
 8017e74:	f7ff ff0e 	bl	8017c94 <malloc>
 8017e78:	4602      	mov	r2, r0
 8017e7a:	6320      	str	r0, [r4, #48]	; 0x30
 8017e7c:	b920      	cbnz	r0, 8017e88 <rand+0x20>
 8017e7e:	4b12      	ldr	r3, [pc, #72]	; (8017ec8 <rand+0x60>)
 8017e80:	4812      	ldr	r0, [pc, #72]	; (8017ecc <rand+0x64>)
 8017e82:	2152      	movs	r1, #82	; 0x52
 8017e84:	f000 fcf2 	bl	801886c <__assert_func>
 8017e88:	4911      	ldr	r1, [pc, #68]	; (8017ed0 <rand+0x68>)
 8017e8a:	4b12      	ldr	r3, [pc, #72]	; (8017ed4 <rand+0x6c>)
 8017e8c:	e9c0 1300 	strd	r1, r3, [r0]
 8017e90:	4b11      	ldr	r3, [pc, #68]	; (8017ed8 <rand+0x70>)
 8017e92:	6083      	str	r3, [r0, #8]
 8017e94:	230b      	movs	r3, #11
 8017e96:	8183      	strh	r3, [r0, #12]
 8017e98:	2100      	movs	r1, #0
 8017e9a:	2001      	movs	r0, #1
 8017e9c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017ea0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8017ea2:	480e      	ldr	r0, [pc, #56]	; (8017edc <rand+0x74>)
 8017ea4:	690b      	ldr	r3, [r1, #16]
 8017ea6:	694c      	ldr	r4, [r1, #20]
 8017ea8:	4a0d      	ldr	r2, [pc, #52]	; (8017ee0 <rand+0x78>)
 8017eaa:	4358      	muls	r0, r3
 8017eac:	fb02 0004 	mla	r0, r2, r4, r0
 8017eb0:	fba3 3202 	umull	r3, r2, r3, r2
 8017eb4:	3301      	adds	r3, #1
 8017eb6:	eb40 0002 	adc.w	r0, r0, r2
 8017eba:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8017ebe:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8017ec2:	bd10      	pop	{r4, pc}
 8017ec4:	200000cc 	.word	0x200000cc
 8017ec8:	0801a208 	.word	0x0801a208
 8017ecc:	0801a21f 	.word	0x0801a21f
 8017ed0:	abcd330e 	.word	0xabcd330e
 8017ed4:	e66d1234 	.word	0xe66d1234
 8017ed8:	0005deec 	.word	0x0005deec
 8017edc:	5851f42d 	.word	0x5851f42d
 8017ee0:	4c957f2d 	.word	0x4c957f2d

08017ee4 <realloc>:
 8017ee4:	4b02      	ldr	r3, [pc, #8]	; (8017ef0 <realloc+0xc>)
 8017ee6:	460a      	mov	r2, r1
 8017ee8:	4601      	mov	r1, r0
 8017eea:	6818      	ldr	r0, [r3, #0]
 8017eec:	f000 b802 	b.w	8017ef4 <_realloc_r>
 8017ef0:	200000cc 	.word	0x200000cc

08017ef4 <_realloc_r>:
 8017ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ef8:	4680      	mov	r8, r0
 8017efa:	4614      	mov	r4, r2
 8017efc:	460e      	mov	r6, r1
 8017efe:	b921      	cbnz	r1, 8017f0a <_realloc_r+0x16>
 8017f00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017f04:	4611      	mov	r1, r2
 8017f06:	f7ff bef5 	b.w	8017cf4 <_malloc_r>
 8017f0a:	b92a      	cbnz	r2, 8017f18 <_realloc_r+0x24>
 8017f0c:	f000 fcd8 	bl	80188c0 <_free_r>
 8017f10:	4625      	mov	r5, r4
 8017f12:	4628      	mov	r0, r5
 8017f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f18:	f000 fd1e 	bl	8018958 <_malloc_usable_size_r>
 8017f1c:	4284      	cmp	r4, r0
 8017f1e:	4607      	mov	r7, r0
 8017f20:	d802      	bhi.n	8017f28 <_realloc_r+0x34>
 8017f22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017f26:	d812      	bhi.n	8017f4e <_realloc_r+0x5a>
 8017f28:	4621      	mov	r1, r4
 8017f2a:	4640      	mov	r0, r8
 8017f2c:	f7ff fee2 	bl	8017cf4 <_malloc_r>
 8017f30:	4605      	mov	r5, r0
 8017f32:	2800      	cmp	r0, #0
 8017f34:	d0ed      	beq.n	8017f12 <_realloc_r+0x1e>
 8017f36:	42bc      	cmp	r4, r7
 8017f38:	4622      	mov	r2, r4
 8017f3a:	4631      	mov	r1, r6
 8017f3c:	bf28      	it	cs
 8017f3e:	463a      	movcs	r2, r7
 8017f40:	f000 fc85 	bl	801884e <memcpy>
 8017f44:	4631      	mov	r1, r6
 8017f46:	4640      	mov	r0, r8
 8017f48:	f000 fcba 	bl	80188c0 <_free_r>
 8017f4c:	e7e1      	b.n	8017f12 <_realloc_r+0x1e>
 8017f4e:	4635      	mov	r5, r6
 8017f50:	e7df      	b.n	8017f12 <_realloc_r+0x1e>
	...

08017f54 <_strtoul_l.constprop.0>:
 8017f54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017f58:	4f36      	ldr	r7, [pc, #216]	; (8018034 <_strtoul_l.constprop.0+0xe0>)
 8017f5a:	4686      	mov	lr, r0
 8017f5c:	460d      	mov	r5, r1
 8017f5e:	4628      	mov	r0, r5
 8017f60:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017f64:	5d3e      	ldrb	r6, [r7, r4]
 8017f66:	f016 0608 	ands.w	r6, r6, #8
 8017f6a:	d1f8      	bne.n	8017f5e <_strtoul_l.constprop.0+0xa>
 8017f6c:	2c2d      	cmp	r4, #45	; 0x2d
 8017f6e:	d130      	bne.n	8017fd2 <_strtoul_l.constprop.0+0x7e>
 8017f70:	782c      	ldrb	r4, [r5, #0]
 8017f72:	2601      	movs	r6, #1
 8017f74:	1c85      	adds	r5, r0, #2
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	d057      	beq.n	801802a <_strtoul_l.constprop.0+0xd6>
 8017f7a:	2b10      	cmp	r3, #16
 8017f7c:	d109      	bne.n	8017f92 <_strtoul_l.constprop.0+0x3e>
 8017f7e:	2c30      	cmp	r4, #48	; 0x30
 8017f80:	d107      	bne.n	8017f92 <_strtoul_l.constprop.0+0x3e>
 8017f82:	7828      	ldrb	r0, [r5, #0]
 8017f84:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8017f88:	2858      	cmp	r0, #88	; 0x58
 8017f8a:	d149      	bne.n	8018020 <_strtoul_l.constprop.0+0xcc>
 8017f8c:	786c      	ldrb	r4, [r5, #1]
 8017f8e:	2310      	movs	r3, #16
 8017f90:	3502      	adds	r5, #2
 8017f92:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8017f96:	2700      	movs	r7, #0
 8017f98:	fbb8 f8f3 	udiv	r8, r8, r3
 8017f9c:	fb03 f908 	mul.w	r9, r3, r8
 8017fa0:	ea6f 0909 	mvn.w	r9, r9
 8017fa4:	4638      	mov	r0, r7
 8017fa6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8017faa:	f1bc 0f09 	cmp.w	ip, #9
 8017fae:	d815      	bhi.n	8017fdc <_strtoul_l.constprop.0+0x88>
 8017fb0:	4664      	mov	r4, ip
 8017fb2:	42a3      	cmp	r3, r4
 8017fb4:	dd23      	ble.n	8017ffe <_strtoul_l.constprop.0+0xaa>
 8017fb6:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8017fba:	d007      	beq.n	8017fcc <_strtoul_l.constprop.0+0x78>
 8017fbc:	4580      	cmp	r8, r0
 8017fbe:	d31b      	bcc.n	8017ff8 <_strtoul_l.constprop.0+0xa4>
 8017fc0:	d101      	bne.n	8017fc6 <_strtoul_l.constprop.0+0x72>
 8017fc2:	45a1      	cmp	r9, r4
 8017fc4:	db18      	blt.n	8017ff8 <_strtoul_l.constprop.0+0xa4>
 8017fc6:	fb00 4003 	mla	r0, r0, r3, r4
 8017fca:	2701      	movs	r7, #1
 8017fcc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017fd0:	e7e9      	b.n	8017fa6 <_strtoul_l.constprop.0+0x52>
 8017fd2:	2c2b      	cmp	r4, #43	; 0x2b
 8017fd4:	bf04      	itt	eq
 8017fd6:	782c      	ldrbeq	r4, [r5, #0]
 8017fd8:	1c85      	addeq	r5, r0, #2
 8017fda:	e7cc      	b.n	8017f76 <_strtoul_l.constprop.0+0x22>
 8017fdc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8017fe0:	f1bc 0f19 	cmp.w	ip, #25
 8017fe4:	d801      	bhi.n	8017fea <_strtoul_l.constprop.0+0x96>
 8017fe6:	3c37      	subs	r4, #55	; 0x37
 8017fe8:	e7e3      	b.n	8017fb2 <_strtoul_l.constprop.0+0x5e>
 8017fea:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8017fee:	f1bc 0f19 	cmp.w	ip, #25
 8017ff2:	d804      	bhi.n	8017ffe <_strtoul_l.constprop.0+0xaa>
 8017ff4:	3c57      	subs	r4, #87	; 0x57
 8017ff6:	e7dc      	b.n	8017fb2 <_strtoul_l.constprop.0+0x5e>
 8017ff8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8017ffc:	e7e6      	b.n	8017fcc <_strtoul_l.constprop.0+0x78>
 8017ffe:	1c7b      	adds	r3, r7, #1
 8018000:	d106      	bne.n	8018010 <_strtoul_l.constprop.0+0xbc>
 8018002:	2322      	movs	r3, #34	; 0x22
 8018004:	f8ce 3000 	str.w	r3, [lr]
 8018008:	4638      	mov	r0, r7
 801800a:	b932      	cbnz	r2, 801801a <_strtoul_l.constprop.0+0xc6>
 801800c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018010:	b106      	cbz	r6, 8018014 <_strtoul_l.constprop.0+0xc0>
 8018012:	4240      	negs	r0, r0
 8018014:	2a00      	cmp	r2, #0
 8018016:	d0f9      	beq.n	801800c <_strtoul_l.constprop.0+0xb8>
 8018018:	b107      	cbz	r7, 801801c <_strtoul_l.constprop.0+0xc8>
 801801a:	1e69      	subs	r1, r5, #1
 801801c:	6011      	str	r1, [r2, #0]
 801801e:	e7f5      	b.n	801800c <_strtoul_l.constprop.0+0xb8>
 8018020:	2430      	movs	r4, #48	; 0x30
 8018022:	2b00      	cmp	r3, #0
 8018024:	d1b5      	bne.n	8017f92 <_strtoul_l.constprop.0+0x3e>
 8018026:	2308      	movs	r3, #8
 8018028:	e7b3      	b.n	8017f92 <_strtoul_l.constprop.0+0x3e>
 801802a:	2c30      	cmp	r4, #48	; 0x30
 801802c:	d0a9      	beq.n	8017f82 <_strtoul_l.constprop.0+0x2e>
 801802e:	230a      	movs	r3, #10
 8018030:	e7af      	b.n	8017f92 <_strtoul_l.constprop.0+0x3e>
 8018032:	bf00      	nop
 8018034:	0801a278 	.word	0x0801a278

08018038 <strtoul>:
 8018038:	4613      	mov	r3, r2
 801803a:	460a      	mov	r2, r1
 801803c:	4601      	mov	r1, r0
 801803e:	4802      	ldr	r0, [pc, #8]	; (8018048 <strtoul+0x10>)
 8018040:	6800      	ldr	r0, [r0, #0]
 8018042:	f7ff bf87 	b.w	8017f54 <_strtoul_l.constprop.0>
 8018046:	bf00      	nop
 8018048:	200000cc 	.word	0x200000cc

0801804c <std>:
 801804c:	2300      	movs	r3, #0
 801804e:	b510      	push	{r4, lr}
 8018050:	4604      	mov	r4, r0
 8018052:	e9c0 3300 	strd	r3, r3, [r0]
 8018056:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801805a:	6083      	str	r3, [r0, #8]
 801805c:	8181      	strh	r1, [r0, #12]
 801805e:	6643      	str	r3, [r0, #100]	; 0x64
 8018060:	81c2      	strh	r2, [r0, #14]
 8018062:	6183      	str	r3, [r0, #24]
 8018064:	4619      	mov	r1, r3
 8018066:	2208      	movs	r2, #8
 8018068:	305c      	adds	r0, #92	; 0x5c
 801806a:	f000 fad1 	bl	8018610 <memset>
 801806e:	4b0d      	ldr	r3, [pc, #52]	; (80180a4 <std+0x58>)
 8018070:	6263      	str	r3, [r4, #36]	; 0x24
 8018072:	4b0d      	ldr	r3, [pc, #52]	; (80180a8 <std+0x5c>)
 8018074:	62a3      	str	r3, [r4, #40]	; 0x28
 8018076:	4b0d      	ldr	r3, [pc, #52]	; (80180ac <std+0x60>)
 8018078:	62e3      	str	r3, [r4, #44]	; 0x2c
 801807a:	4b0d      	ldr	r3, [pc, #52]	; (80180b0 <std+0x64>)
 801807c:	6323      	str	r3, [r4, #48]	; 0x30
 801807e:	4b0d      	ldr	r3, [pc, #52]	; (80180b4 <std+0x68>)
 8018080:	6224      	str	r4, [r4, #32]
 8018082:	429c      	cmp	r4, r3
 8018084:	d006      	beq.n	8018094 <std+0x48>
 8018086:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801808a:	4294      	cmp	r4, r2
 801808c:	d002      	beq.n	8018094 <std+0x48>
 801808e:	33d0      	adds	r3, #208	; 0xd0
 8018090:	429c      	cmp	r4, r3
 8018092:	d105      	bne.n	80180a0 <std+0x54>
 8018094:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8018098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801809c:	f000 bbcc 	b.w	8018838 <__retarget_lock_init_recursive>
 80180a0:	bd10      	pop	{r4, pc}
 80180a2:	bf00      	nop
 80180a4:	080183b9 	.word	0x080183b9
 80180a8:	080183db 	.word	0x080183db
 80180ac:	08018413 	.word	0x08018413
 80180b0:	08018437 	.word	0x08018437
 80180b4:	20009d40 	.word	0x20009d40

080180b8 <stdio_exit_handler>:
 80180b8:	4a02      	ldr	r2, [pc, #8]	; (80180c4 <stdio_exit_handler+0xc>)
 80180ba:	4903      	ldr	r1, [pc, #12]	; (80180c8 <stdio_exit_handler+0x10>)
 80180bc:	4803      	ldr	r0, [pc, #12]	; (80180cc <stdio_exit_handler+0x14>)
 80180be:	f000 b869 	b.w	8018194 <_fwalk_sglue>
 80180c2:	bf00      	nop
 80180c4:	20000074 	.word	0x20000074
 80180c8:	080192cd 	.word	0x080192cd
 80180cc:	20000080 	.word	0x20000080

080180d0 <cleanup_stdio>:
 80180d0:	6841      	ldr	r1, [r0, #4]
 80180d2:	4b0c      	ldr	r3, [pc, #48]	; (8018104 <cleanup_stdio+0x34>)
 80180d4:	4299      	cmp	r1, r3
 80180d6:	b510      	push	{r4, lr}
 80180d8:	4604      	mov	r4, r0
 80180da:	d001      	beq.n	80180e0 <cleanup_stdio+0x10>
 80180dc:	f001 f8f6 	bl	80192cc <_fflush_r>
 80180e0:	68a1      	ldr	r1, [r4, #8]
 80180e2:	4b09      	ldr	r3, [pc, #36]	; (8018108 <cleanup_stdio+0x38>)
 80180e4:	4299      	cmp	r1, r3
 80180e6:	d002      	beq.n	80180ee <cleanup_stdio+0x1e>
 80180e8:	4620      	mov	r0, r4
 80180ea:	f001 f8ef 	bl	80192cc <_fflush_r>
 80180ee:	68e1      	ldr	r1, [r4, #12]
 80180f0:	4b06      	ldr	r3, [pc, #24]	; (801810c <cleanup_stdio+0x3c>)
 80180f2:	4299      	cmp	r1, r3
 80180f4:	d004      	beq.n	8018100 <cleanup_stdio+0x30>
 80180f6:	4620      	mov	r0, r4
 80180f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80180fc:	f001 b8e6 	b.w	80192cc <_fflush_r>
 8018100:	bd10      	pop	{r4, pc}
 8018102:	bf00      	nop
 8018104:	20009d40 	.word	0x20009d40
 8018108:	20009da8 	.word	0x20009da8
 801810c:	20009e10 	.word	0x20009e10

08018110 <global_stdio_init.part.0>:
 8018110:	b510      	push	{r4, lr}
 8018112:	4b0b      	ldr	r3, [pc, #44]	; (8018140 <global_stdio_init.part.0+0x30>)
 8018114:	4c0b      	ldr	r4, [pc, #44]	; (8018144 <global_stdio_init.part.0+0x34>)
 8018116:	4a0c      	ldr	r2, [pc, #48]	; (8018148 <global_stdio_init.part.0+0x38>)
 8018118:	601a      	str	r2, [r3, #0]
 801811a:	4620      	mov	r0, r4
 801811c:	2200      	movs	r2, #0
 801811e:	2104      	movs	r1, #4
 8018120:	f7ff ff94 	bl	801804c <std>
 8018124:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8018128:	2201      	movs	r2, #1
 801812a:	2109      	movs	r1, #9
 801812c:	f7ff ff8e 	bl	801804c <std>
 8018130:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8018134:	2202      	movs	r2, #2
 8018136:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801813a:	2112      	movs	r1, #18
 801813c:	f7ff bf86 	b.w	801804c <std>
 8018140:	20009e78 	.word	0x20009e78
 8018144:	20009d40 	.word	0x20009d40
 8018148:	080180b9 	.word	0x080180b9

0801814c <__sfp_lock_acquire>:
 801814c:	4801      	ldr	r0, [pc, #4]	; (8018154 <__sfp_lock_acquire+0x8>)
 801814e:	f000 bb74 	b.w	801883a <__retarget_lock_acquire_recursive>
 8018152:	bf00      	nop
 8018154:	20009e82 	.word	0x20009e82

08018158 <__sfp_lock_release>:
 8018158:	4801      	ldr	r0, [pc, #4]	; (8018160 <__sfp_lock_release+0x8>)
 801815a:	f000 bb6f 	b.w	801883c <__retarget_lock_release_recursive>
 801815e:	bf00      	nop
 8018160:	20009e82 	.word	0x20009e82

08018164 <__sinit>:
 8018164:	b510      	push	{r4, lr}
 8018166:	4604      	mov	r4, r0
 8018168:	f7ff fff0 	bl	801814c <__sfp_lock_acquire>
 801816c:	6a23      	ldr	r3, [r4, #32]
 801816e:	b11b      	cbz	r3, 8018178 <__sinit+0x14>
 8018170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018174:	f7ff bff0 	b.w	8018158 <__sfp_lock_release>
 8018178:	4b04      	ldr	r3, [pc, #16]	; (801818c <__sinit+0x28>)
 801817a:	6223      	str	r3, [r4, #32]
 801817c:	4b04      	ldr	r3, [pc, #16]	; (8018190 <__sinit+0x2c>)
 801817e:	681b      	ldr	r3, [r3, #0]
 8018180:	2b00      	cmp	r3, #0
 8018182:	d1f5      	bne.n	8018170 <__sinit+0xc>
 8018184:	f7ff ffc4 	bl	8018110 <global_stdio_init.part.0>
 8018188:	e7f2      	b.n	8018170 <__sinit+0xc>
 801818a:	bf00      	nop
 801818c:	080180d1 	.word	0x080180d1
 8018190:	20009e78 	.word	0x20009e78

08018194 <_fwalk_sglue>:
 8018194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018198:	4607      	mov	r7, r0
 801819a:	4688      	mov	r8, r1
 801819c:	4614      	mov	r4, r2
 801819e:	2600      	movs	r6, #0
 80181a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80181a4:	f1b9 0901 	subs.w	r9, r9, #1
 80181a8:	d505      	bpl.n	80181b6 <_fwalk_sglue+0x22>
 80181aa:	6824      	ldr	r4, [r4, #0]
 80181ac:	2c00      	cmp	r4, #0
 80181ae:	d1f7      	bne.n	80181a0 <_fwalk_sglue+0xc>
 80181b0:	4630      	mov	r0, r6
 80181b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80181b6:	89ab      	ldrh	r3, [r5, #12]
 80181b8:	2b01      	cmp	r3, #1
 80181ba:	d907      	bls.n	80181cc <_fwalk_sglue+0x38>
 80181bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80181c0:	3301      	adds	r3, #1
 80181c2:	d003      	beq.n	80181cc <_fwalk_sglue+0x38>
 80181c4:	4629      	mov	r1, r5
 80181c6:	4638      	mov	r0, r7
 80181c8:	47c0      	blx	r8
 80181ca:	4306      	orrs	r6, r0
 80181cc:	3568      	adds	r5, #104	; 0x68
 80181ce:	e7e9      	b.n	80181a4 <_fwalk_sglue+0x10>

080181d0 <iprintf>:
 80181d0:	b40f      	push	{r0, r1, r2, r3}
 80181d2:	b507      	push	{r0, r1, r2, lr}
 80181d4:	4906      	ldr	r1, [pc, #24]	; (80181f0 <iprintf+0x20>)
 80181d6:	ab04      	add	r3, sp, #16
 80181d8:	6808      	ldr	r0, [r1, #0]
 80181da:	f853 2b04 	ldr.w	r2, [r3], #4
 80181de:	6881      	ldr	r1, [r0, #8]
 80181e0:	9301      	str	r3, [sp, #4]
 80181e2:	f000 fd43 	bl	8018c6c <_vfiprintf_r>
 80181e6:	b003      	add	sp, #12
 80181e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80181ec:	b004      	add	sp, #16
 80181ee:	4770      	bx	lr
 80181f0:	200000cc 	.word	0x200000cc

080181f4 <setvbuf>:
 80181f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80181f8:	461d      	mov	r5, r3
 80181fa:	4b54      	ldr	r3, [pc, #336]	; (801834c <setvbuf+0x158>)
 80181fc:	681f      	ldr	r7, [r3, #0]
 80181fe:	4604      	mov	r4, r0
 8018200:	460e      	mov	r6, r1
 8018202:	4690      	mov	r8, r2
 8018204:	b127      	cbz	r7, 8018210 <setvbuf+0x1c>
 8018206:	6a3b      	ldr	r3, [r7, #32]
 8018208:	b913      	cbnz	r3, 8018210 <setvbuf+0x1c>
 801820a:	4638      	mov	r0, r7
 801820c:	f7ff ffaa 	bl	8018164 <__sinit>
 8018210:	f1b8 0f02 	cmp.w	r8, #2
 8018214:	d006      	beq.n	8018224 <setvbuf+0x30>
 8018216:	f1b8 0f01 	cmp.w	r8, #1
 801821a:	f200 8094 	bhi.w	8018346 <setvbuf+0x152>
 801821e:	2d00      	cmp	r5, #0
 8018220:	f2c0 8091 	blt.w	8018346 <setvbuf+0x152>
 8018224:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018226:	07da      	lsls	r2, r3, #31
 8018228:	d405      	bmi.n	8018236 <setvbuf+0x42>
 801822a:	89a3      	ldrh	r3, [r4, #12]
 801822c:	059b      	lsls	r3, r3, #22
 801822e:	d402      	bmi.n	8018236 <setvbuf+0x42>
 8018230:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018232:	f000 fb02 	bl	801883a <__retarget_lock_acquire_recursive>
 8018236:	4621      	mov	r1, r4
 8018238:	4638      	mov	r0, r7
 801823a:	f001 f847 	bl	80192cc <_fflush_r>
 801823e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018240:	b141      	cbz	r1, 8018254 <setvbuf+0x60>
 8018242:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018246:	4299      	cmp	r1, r3
 8018248:	d002      	beq.n	8018250 <setvbuf+0x5c>
 801824a:	4638      	mov	r0, r7
 801824c:	f000 fb38 	bl	80188c0 <_free_r>
 8018250:	2300      	movs	r3, #0
 8018252:	6363      	str	r3, [r4, #52]	; 0x34
 8018254:	2300      	movs	r3, #0
 8018256:	61a3      	str	r3, [r4, #24]
 8018258:	6063      	str	r3, [r4, #4]
 801825a:	89a3      	ldrh	r3, [r4, #12]
 801825c:	0618      	lsls	r0, r3, #24
 801825e:	d503      	bpl.n	8018268 <setvbuf+0x74>
 8018260:	6921      	ldr	r1, [r4, #16]
 8018262:	4638      	mov	r0, r7
 8018264:	f000 fb2c 	bl	80188c0 <_free_r>
 8018268:	89a3      	ldrh	r3, [r4, #12]
 801826a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 801826e:	f023 0303 	bic.w	r3, r3, #3
 8018272:	f1b8 0f02 	cmp.w	r8, #2
 8018276:	81a3      	strh	r3, [r4, #12]
 8018278:	d05f      	beq.n	801833a <setvbuf+0x146>
 801827a:	ab01      	add	r3, sp, #4
 801827c:	466a      	mov	r2, sp
 801827e:	4621      	mov	r1, r4
 8018280:	4638      	mov	r0, r7
 8018282:	f001 f85d 	bl	8019340 <__swhatbuf_r>
 8018286:	89a3      	ldrh	r3, [r4, #12]
 8018288:	4318      	orrs	r0, r3
 801828a:	81a0      	strh	r0, [r4, #12]
 801828c:	bb2d      	cbnz	r5, 80182da <setvbuf+0xe6>
 801828e:	9d00      	ldr	r5, [sp, #0]
 8018290:	4628      	mov	r0, r5
 8018292:	f7ff fcff 	bl	8017c94 <malloc>
 8018296:	4606      	mov	r6, r0
 8018298:	2800      	cmp	r0, #0
 801829a:	d150      	bne.n	801833e <setvbuf+0x14a>
 801829c:	f8dd 9000 	ldr.w	r9, [sp]
 80182a0:	45a9      	cmp	r9, r5
 80182a2:	d13e      	bne.n	8018322 <setvbuf+0x12e>
 80182a4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80182a8:	2200      	movs	r2, #0
 80182aa:	60a2      	str	r2, [r4, #8]
 80182ac:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80182b0:	6022      	str	r2, [r4, #0]
 80182b2:	6122      	str	r2, [r4, #16]
 80182b4:	2201      	movs	r2, #1
 80182b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80182ba:	6162      	str	r2, [r4, #20]
 80182bc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80182be:	f043 0302 	orr.w	r3, r3, #2
 80182c2:	07d1      	lsls	r1, r2, #31
 80182c4:	81a3      	strh	r3, [r4, #12]
 80182c6:	d404      	bmi.n	80182d2 <setvbuf+0xde>
 80182c8:	059b      	lsls	r3, r3, #22
 80182ca:	d402      	bmi.n	80182d2 <setvbuf+0xde>
 80182cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80182ce:	f000 fab5 	bl	801883c <__retarget_lock_release_recursive>
 80182d2:	4628      	mov	r0, r5
 80182d4:	b003      	add	sp, #12
 80182d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80182da:	2e00      	cmp	r6, #0
 80182dc:	d0d8      	beq.n	8018290 <setvbuf+0x9c>
 80182de:	6a3b      	ldr	r3, [r7, #32]
 80182e0:	b913      	cbnz	r3, 80182e8 <setvbuf+0xf4>
 80182e2:	4638      	mov	r0, r7
 80182e4:	f7ff ff3e 	bl	8018164 <__sinit>
 80182e8:	f1b8 0f01 	cmp.w	r8, #1
 80182ec:	bf08      	it	eq
 80182ee:	89a3      	ldrheq	r3, [r4, #12]
 80182f0:	6026      	str	r6, [r4, #0]
 80182f2:	bf04      	itt	eq
 80182f4:	f043 0301 	orreq.w	r3, r3, #1
 80182f8:	81a3      	strheq	r3, [r4, #12]
 80182fa:	89a3      	ldrh	r3, [r4, #12]
 80182fc:	f013 0208 	ands.w	r2, r3, #8
 8018300:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8018304:	d01d      	beq.n	8018342 <setvbuf+0x14e>
 8018306:	07da      	lsls	r2, r3, #31
 8018308:	bf41      	itttt	mi
 801830a:	2200      	movmi	r2, #0
 801830c:	426d      	negmi	r5, r5
 801830e:	60a2      	strmi	r2, [r4, #8]
 8018310:	61a5      	strmi	r5, [r4, #24]
 8018312:	bf58      	it	pl
 8018314:	60a5      	strpl	r5, [r4, #8]
 8018316:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8018318:	f015 0501 	ands.w	r5, r5, #1
 801831c:	d0d4      	beq.n	80182c8 <setvbuf+0xd4>
 801831e:	2500      	movs	r5, #0
 8018320:	e7d7      	b.n	80182d2 <setvbuf+0xde>
 8018322:	4648      	mov	r0, r9
 8018324:	f7ff fcb6 	bl	8017c94 <malloc>
 8018328:	4606      	mov	r6, r0
 801832a:	2800      	cmp	r0, #0
 801832c:	d0ba      	beq.n	80182a4 <setvbuf+0xb0>
 801832e:	89a3      	ldrh	r3, [r4, #12]
 8018330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018334:	81a3      	strh	r3, [r4, #12]
 8018336:	464d      	mov	r5, r9
 8018338:	e7d1      	b.n	80182de <setvbuf+0xea>
 801833a:	2500      	movs	r5, #0
 801833c:	e7b4      	b.n	80182a8 <setvbuf+0xb4>
 801833e:	46a9      	mov	r9, r5
 8018340:	e7f5      	b.n	801832e <setvbuf+0x13a>
 8018342:	60a2      	str	r2, [r4, #8]
 8018344:	e7e7      	b.n	8018316 <setvbuf+0x122>
 8018346:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801834a:	e7c2      	b.n	80182d2 <setvbuf+0xde>
 801834c:	200000cc 	.word	0x200000cc

08018350 <sniprintf>:
 8018350:	b40c      	push	{r2, r3}
 8018352:	b530      	push	{r4, r5, lr}
 8018354:	4b17      	ldr	r3, [pc, #92]	; (80183b4 <sniprintf+0x64>)
 8018356:	1e0c      	subs	r4, r1, #0
 8018358:	681d      	ldr	r5, [r3, #0]
 801835a:	b09d      	sub	sp, #116	; 0x74
 801835c:	da08      	bge.n	8018370 <sniprintf+0x20>
 801835e:	238b      	movs	r3, #139	; 0x8b
 8018360:	602b      	str	r3, [r5, #0]
 8018362:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018366:	b01d      	add	sp, #116	; 0x74
 8018368:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801836c:	b002      	add	sp, #8
 801836e:	4770      	bx	lr
 8018370:	f44f 7302 	mov.w	r3, #520	; 0x208
 8018374:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018378:	bf14      	ite	ne
 801837a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801837e:	4623      	moveq	r3, r4
 8018380:	9304      	str	r3, [sp, #16]
 8018382:	9307      	str	r3, [sp, #28]
 8018384:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018388:	9002      	str	r0, [sp, #8]
 801838a:	9006      	str	r0, [sp, #24]
 801838c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018390:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018392:	ab21      	add	r3, sp, #132	; 0x84
 8018394:	a902      	add	r1, sp, #8
 8018396:	4628      	mov	r0, r5
 8018398:	9301      	str	r3, [sp, #4]
 801839a:	f000 fb3f 	bl	8018a1c <_svfiprintf_r>
 801839e:	1c43      	adds	r3, r0, #1
 80183a0:	bfbc      	itt	lt
 80183a2:	238b      	movlt	r3, #139	; 0x8b
 80183a4:	602b      	strlt	r3, [r5, #0]
 80183a6:	2c00      	cmp	r4, #0
 80183a8:	d0dd      	beq.n	8018366 <sniprintf+0x16>
 80183aa:	9b02      	ldr	r3, [sp, #8]
 80183ac:	2200      	movs	r2, #0
 80183ae:	701a      	strb	r2, [r3, #0]
 80183b0:	e7d9      	b.n	8018366 <sniprintf+0x16>
 80183b2:	bf00      	nop
 80183b4:	200000cc 	.word	0x200000cc

080183b8 <__sread>:
 80183b8:	b510      	push	{r4, lr}
 80183ba:	460c      	mov	r4, r1
 80183bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80183c0:	f000 f9dc 	bl	801877c <_read_r>
 80183c4:	2800      	cmp	r0, #0
 80183c6:	bfab      	itete	ge
 80183c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80183ca:	89a3      	ldrhlt	r3, [r4, #12]
 80183cc:	181b      	addge	r3, r3, r0
 80183ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80183d2:	bfac      	ite	ge
 80183d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80183d6:	81a3      	strhlt	r3, [r4, #12]
 80183d8:	bd10      	pop	{r4, pc}

080183da <__swrite>:
 80183da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80183de:	461f      	mov	r7, r3
 80183e0:	898b      	ldrh	r3, [r1, #12]
 80183e2:	05db      	lsls	r3, r3, #23
 80183e4:	4605      	mov	r5, r0
 80183e6:	460c      	mov	r4, r1
 80183e8:	4616      	mov	r6, r2
 80183ea:	d505      	bpl.n	80183f8 <__swrite+0x1e>
 80183ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80183f0:	2302      	movs	r3, #2
 80183f2:	2200      	movs	r2, #0
 80183f4:	f000 f9b0 	bl	8018758 <_lseek_r>
 80183f8:	89a3      	ldrh	r3, [r4, #12]
 80183fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80183fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018402:	81a3      	strh	r3, [r4, #12]
 8018404:	4632      	mov	r2, r6
 8018406:	463b      	mov	r3, r7
 8018408:	4628      	mov	r0, r5
 801840a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801840e:	f000 b9d7 	b.w	80187c0 <_write_r>

08018412 <__sseek>:
 8018412:	b510      	push	{r4, lr}
 8018414:	460c      	mov	r4, r1
 8018416:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801841a:	f000 f99d 	bl	8018758 <_lseek_r>
 801841e:	1c43      	adds	r3, r0, #1
 8018420:	89a3      	ldrh	r3, [r4, #12]
 8018422:	bf15      	itete	ne
 8018424:	6560      	strne	r0, [r4, #84]	; 0x54
 8018426:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801842a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801842e:	81a3      	strheq	r3, [r4, #12]
 8018430:	bf18      	it	ne
 8018432:	81a3      	strhne	r3, [r4, #12]
 8018434:	bd10      	pop	{r4, pc}

08018436 <__sclose>:
 8018436:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801843a:	f000 b927 	b.w	801868c <_close_r>

0801843e <_vsniprintf_r>:
 801843e:	b530      	push	{r4, r5, lr}
 8018440:	4614      	mov	r4, r2
 8018442:	2c00      	cmp	r4, #0
 8018444:	b09b      	sub	sp, #108	; 0x6c
 8018446:	4605      	mov	r5, r0
 8018448:	461a      	mov	r2, r3
 801844a:	da05      	bge.n	8018458 <_vsniprintf_r+0x1a>
 801844c:	238b      	movs	r3, #139	; 0x8b
 801844e:	6003      	str	r3, [r0, #0]
 8018450:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018454:	b01b      	add	sp, #108	; 0x6c
 8018456:	bd30      	pop	{r4, r5, pc}
 8018458:	f44f 7302 	mov.w	r3, #520	; 0x208
 801845c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8018460:	bf14      	ite	ne
 8018462:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8018466:	4623      	moveq	r3, r4
 8018468:	9302      	str	r3, [sp, #8]
 801846a:	9305      	str	r3, [sp, #20]
 801846c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018470:	9100      	str	r1, [sp, #0]
 8018472:	9104      	str	r1, [sp, #16]
 8018474:	f8ad 300e 	strh.w	r3, [sp, #14]
 8018478:	4669      	mov	r1, sp
 801847a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801847c:	f000 face 	bl	8018a1c <_svfiprintf_r>
 8018480:	1c43      	adds	r3, r0, #1
 8018482:	bfbc      	itt	lt
 8018484:	238b      	movlt	r3, #139	; 0x8b
 8018486:	602b      	strlt	r3, [r5, #0]
 8018488:	2c00      	cmp	r4, #0
 801848a:	d0e3      	beq.n	8018454 <_vsniprintf_r+0x16>
 801848c:	9b00      	ldr	r3, [sp, #0]
 801848e:	2200      	movs	r2, #0
 8018490:	701a      	strb	r2, [r3, #0]
 8018492:	e7df      	b.n	8018454 <_vsniprintf_r+0x16>

08018494 <vsniprintf>:
 8018494:	b507      	push	{r0, r1, r2, lr}
 8018496:	9300      	str	r3, [sp, #0]
 8018498:	4613      	mov	r3, r2
 801849a:	460a      	mov	r2, r1
 801849c:	4601      	mov	r1, r0
 801849e:	4803      	ldr	r0, [pc, #12]	; (80184ac <vsniprintf+0x18>)
 80184a0:	6800      	ldr	r0, [r0, #0]
 80184a2:	f7ff ffcc 	bl	801843e <_vsniprintf_r>
 80184a6:	b003      	add	sp, #12
 80184a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80184ac:	200000cc 	.word	0x200000cc

080184b0 <__swbuf_r>:
 80184b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184b2:	460e      	mov	r6, r1
 80184b4:	4614      	mov	r4, r2
 80184b6:	4605      	mov	r5, r0
 80184b8:	b118      	cbz	r0, 80184c2 <__swbuf_r+0x12>
 80184ba:	6a03      	ldr	r3, [r0, #32]
 80184bc:	b90b      	cbnz	r3, 80184c2 <__swbuf_r+0x12>
 80184be:	f7ff fe51 	bl	8018164 <__sinit>
 80184c2:	69a3      	ldr	r3, [r4, #24]
 80184c4:	60a3      	str	r3, [r4, #8]
 80184c6:	89a3      	ldrh	r3, [r4, #12]
 80184c8:	071a      	lsls	r2, r3, #28
 80184ca:	d525      	bpl.n	8018518 <__swbuf_r+0x68>
 80184cc:	6923      	ldr	r3, [r4, #16]
 80184ce:	b31b      	cbz	r3, 8018518 <__swbuf_r+0x68>
 80184d0:	6823      	ldr	r3, [r4, #0]
 80184d2:	6922      	ldr	r2, [r4, #16]
 80184d4:	1a98      	subs	r0, r3, r2
 80184d6:	6963      	ldr	r3, [r4, #20]
 80184d8:	b2f6      	uxtb	r6, r6
 80184da:	4283      	cmp	r3, r0
 80184dc:	4637      	mov	r7, r6
 80184de:	dc04      	bgt.n	80184ea <__swbuf_r+0x3a>
 80184e0:	4621      	mov	r1, r4
 80184e2:	4628      	mov	r0, r5
 80184e4:	f000 fef2 	bl	80192cc <_fflush_r>
 80184e8:	b9e0      	cbnz	r0, 8018524 <__swbuf_r+0x74>
 80184ea:	68a3      	ldr	r3, [r4, #8]
 80184ec:	3b01      	subs	r3, #1
 80184ee:	60a3      	str	r3, [r4, #8]
 80184f0:	6823      	ldr	r3, [r4, #0]
 80184f2:	1c5a      	adds	r2, r3, #1
 80184f4:	6022      	str	r2, [r4, #0]
 80184f6:	701e      	strb	r6, [r3, #0]
 80184f8:	6962      	ldr	r2, [r4, #20]
 80184fa:	1c43      	adds	r3, r0, #1
 80184fc:	429a      	cmp	r2, r3
 80184fe:	d004      	beq.n	801850a <__swbuf_r+0x5a>
 8018500:	89a3      	ldrh	r3, [r4, #12]
 8018502:	07db      	lsls	r3, r3, #31
 8018504:	d506      	bpl.n	8018514 <__swbuf_r+0x64>
 8018506:	2e0a      	cmp	r6, #10
 8018508:	d104      	bne.n	8018514 <__swbuf_r+0x64>
 801850a:	4621      	mov	r1, r4
 801850c:	4628      	mov	r0, r5
 801850e:	f000 fedd 	bl	80192cc <_fflush_r>
 8018512:	b938      	cbnz	r0, 8018524 <__swbuf_r+0x74>
 8018514:	4638      	mov	r0, r7
 8018516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018518:	4621      	mov	r1, r4
 801851a:	4628      	mov	r0, r5
 801851c:	f000 f806 	bl	801852c <__swsetup_r>
 8018520:	2800      	cmp	r0, #0
 8018522:	d0d5      	beq.n	80184d0 <__swbuf_r+0x20>
 8018524:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8018528:	e7f4      	b.n	8018514 <__swbuf_r+0x64>
	...

0801852c <__swsetup_r>:
 801852c:	b538      	push	{r3, r4, r5, lr}
 801852e:	4b2a      	ldr	r3, [pc, #168]	; (80185d8 <__swsetup_r+0xac>)
 8018530:	4605      	mov	r5, r0
 8018532:	6818      	ldr	r0, [r3, #0]
 8018534:	460c      	mov	r4, r1
 8018536:	b118      	cbz	r0, 8018540 <__swsetup_r+0x14>
 8018538:	6a03      	ldr	r3, [r0, #32]
 801853a:	b90b      	cbnz	r3, 8018540 <__swsetup_r+0x14>
 801853c:	f7ff fe12 	bl	8018164 <__sinit>
 8018540:	89a3      	ldrh	r3, [r4, #12]
 8018542:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018546:	0718      	lsls	r0, r3, #28
 8018548:	d422      	bmi.n	8018590 <__swsetup_r+0x64>
 801854a:	06d9      	lsls	r1, r3, #27
 801854c:	d407      	bmi.n	801855e <__swsetup_r+0x32>
 801854e:	2309      	movs	r3, #9
 8018550:	602b      	str	r3, [r5, #0]
 8018552:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018556:	81a3      	strh	r3, [r4, #12]
 8018558:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801855c:	e034      	b.n	80185c8 <__swsetup_r+0x9c>
 801855e:	0758      	lsls	r0, r3, #29
 8018560:	d512      	bpl.n	8018588 <__swsetup_r+0x5c>
 8018562:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018564:	b141      	cbz	r1, 8018578 <__swsetup_r+0x4c>
 8018566:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801856a:	4299      	cmp	r1, r3
 801856c:	d002      	beq.n	8018574 <__swsetup_r+0x48>
 801856e:	4628      	mov	r0, r5
 8018570:	f000 f9a6 	bl	80188c0 <_free_r>
 8018574:	2300      	movs	r3, #0
 8018576:	6363      	str	r3, [r4, #52]	; 0x34
 8018578:	89a3      	ldrh	r3, [r4, #12]
 801857a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801857e:	81a3      	strh	r3, [r4, #12]
 8018580:	2300      	movs	r3, #0
 8018582:	6063      	str	r3, [r4, #4]
 8018584:	6923      	ldr	r3, [r4, #16]
 8018586:	6023      	str	r3, [r4, #0]
 8018588:	89a3      	ldrh	r3, [r4, #12]
 801858a:	f043 0308 	orr.w	r3, r3, #8
 801858e:	81a3      	strh	r3, [r4, #12]
 8018590:	6923      	ldr	r3, [r4, #16]
 8018592:	b94b      	cbnz	r3, 80185a8 <__swsetup_r+0x7c>
 8018594:	89a3      	ldrh	r3, [r4, #12]
 8018596:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801859a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801859e:	d003      	beq.n	80185a8 <__swsetup_r+0x7c>
 80185a0:	4621      	mov	r1, r4
 80185a2:	4628      	mov	r0, r5
 80185a4:	f000 fef2 	bl	801938c <__smakebuf_r>
 80185a8:	89a0      	ldrh	r0, [r4, #12]
 80185aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80185ae:	f010 0301 	ands.w	r3, r0, #1
 80185b2:	d00a      	beq.n	80185ca <__swsetup_r+0x9e>
 80185b4:	2300      	movs	r3, #0
 80185b6:	60a3      	str	r3, [r4, #8]
 80185b8:	6963      	ldr	r3, [r4, #20]
 80185ba:	425b      	negs	r3, r3
 80185bc:	61a3      	str	r3, [r4, #24]
 80185be:	6923      	ldr	r3, [r4, #16]
 80185c0:	b943      	cbnz	r3, 80185d4 <__swsetup_r+0xa8>
 80185c2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80185c6:	d1c4      	bne.n	8018552 <__swsetup_r+0x26>
 80185c8:	bd38      	pop	{r3, r4, r5, pc}
 80185ca:	0781      	lsls	r1, r0, #30
 80185cc:	bf58      	it	pl
 80185ce:	6963      	ldrpl	r3, [r4, #20]
 80185d0:	60a3      	str	r3, [r4, #8]
 80185d2:	e7f4      	b.n	80185be <__swsetup_r+0x92>
 80185d4:	2000      	movs	r0, #0
 80185d6:	e7f7      	b.n	80185c8 <__swsetup_r+0x9c>
 80185d8:	200000cc 	.word	0x200000cc

080185dc <memmove>:
 80185dc:	4288      	cmp	r0, r1
 80185de:	b510      	push	{r4, lr}
 80185e0:	eb01 0402 	add.w	r4, r1, r2
 80185e4:	d902      	bls.n	80185ec <memmove+0x10>
 80185e6:	4284      	cmp	r4, r0
 80185e8:	4623      	mov	r3, r4
 80185ea:	d807      	bhi.n	80185fc <memmove+0x20>
 80185ec:	1e43      	subs	r3, r0, #1
 80185ee:	42a1      	cmp	r1, r4
 80185f0:	d008      	beq.n	8018604 <memmove+0x28>
 80185f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80185f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80185fa:	e7f8      	b.n	80185ee <memmove+0x12>
 80185fc:	4402      	add	r2, r0
 80185fe:	4601      	mov	r1, r0
 8018600:	428a      	cmp	r2, r1
 8018602:	d100      	bne.n	8018606 <memmove+0x2a>
 8018604:	bd10      	pop	{r4, pc}
 8018606:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801860a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801860e:	e7f7      	b.n	8018600 <memmove+0x24>

08018610 <memset>:
 8018610:	4402      	add	r2, r0
 8018612:	4603      	mov	r3, r0
 8018614:	4293      	cmp	r3, r2
 8018616:	d100      	bne.n	801861a <memset+0xa>
 8018618:	4770      	bx	lr
 801861a:	f803 1b01 	strb.w	r1, [r3], #1
 801861e:	e7f9      	b.n	8018614 <memset+0x4>

08018620 <strchr>:
 8018620:	b2c9      	uxtb	r1, r1
 8018622:	4603      	mov	r3, r0
 8018624:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018628:	b11a      	cbz	r2, 8018632 <strchr+0x12>
 801862a:	428a      	cmp	r2, r1
 801862c:	d1f9      	bne.n	8018622 <strchr+0x2>
 801862e:	4618      	mov	r0, r3
 8018630:	4770      	bx	lr
 8018632:	2900      	cmp	r1, #0
 8018634:	bf18      	it	ne
 8018636:	2300      	movne	r3, #0
 8018638:	e7f9      	b.n	801862e <strchr+0xe>

0801863a <strncmp>:
 801863a:	b510      	push	{r4, lr}
 801863c:	b16a      	cbz	r2, 801865a <strncmp+0x20>
 801863e:	3901      	subs	r1, #1
 8018640:	1884      	adds	r4, r0, r2
 8018642:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018646:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801864a:	429a      	cmp	r2, r3
 801864c:	d103      	bne.n	8018656 <strncmp+0x1c>
 801864e:	42a0      	cmp	r0, r4
 8018650:	d001      	beq.n	8018656 <strncmp+0x1c>
 8018652:	2a00      	cmp	r2, #0
 8018654:	d1f5      	bne.n	8018642 <strncmp+0x8>
 8018656:	1ad0      	subs	r0, r2, r3
 8018658:	bd10      	pop	{r4, pc}
 801865a:	4610      	mov	r0, r2
 801865c:	e7fc      	b.n	8018658 <strncmp+0x1e>

0801865e <strstr>:
 801865e:	780a      	ldrb	r2, [r1, #0]
 8018660:	b570      	push	{r4, r5, r6, lr}
 8018662:	b96a      	cbnz	r2, 8018680 <strstr+0x22>
 8018664:	bd70      	pop	{r4, r5, r6, pc}
 8018666:	429a      	cmp	r2, r3
 8018668:	d109      	bne.n	801867e <strstr+0x20>
 801866a:	460c      	mov	r4, r1
 801866c:	4605      	mov	r5, r0
 801866e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8018672:	2b00      	cmp	r3, #0
 8018674:	d0f6      	beq.n	8018664 <strstr+0x6>
 8018676:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801867a:	429e      	cmp	r6, r3
 801867c:	d0f7      	beq.n	801866e <strstr+0x10>
 801867e:	3001      	adds	r0, #1
 8018680:	7803      	ldrb	r3, [r0, #0]
 8018682:	2b00      	cmp	r3, #0
 8018684:	d1ef      	bne.n	8018666 <strstr+0x8>
 8018686:	4618      	mov	r0, r3
 8018688:	e7ec      	b.n	8018664 <strstr+0x6>
	...

0801868c <_close_r>:
 801868c:	b538      	push	{r3, r4, r5, lr}
 801868e:	4d06      	ldr	r5, [pc, #24]	; (80186a8 <_close_r+0x1c>)
 8018690:	2300      	movs	r3, #0
 8018692:	4604      	mov	r4, r0
 8018694:	4608      	mov	r0, r1
 8018696:	602b      	str	r3, [r5, #0]
 8018698:	f7ea fc72 	bl	8002f80 <_close>
 801869c:	1c43      	adds	r3, r0, #1
 801869e:	d102      	bne.n	80186a6 <_close_r+0x1a>
 80186a0:	682b      	ldr	r3, [r5, #0]
 80186a2:	b103      	cbz	r3, 80186a6 <_close_r+0x1a>
 80186a4:	6023      	str	r3, [r4, #0]
 80186a6:	bd38      	pop	{r3, r4, r5, pc}
 80186a8:	20009e7c 	.word	0x20009e7c

080186ac <_reclaim_reent>:
 80186ac:	4b29      	ldr	r3, [pc, #164]	; (8018754 <_reclaim_reent+0xa8>)
 80186ae:	681b      	ldr	r3, [r3, #0]
 80186b0:	4283      	cmp	r3, r0
 80186b2:	b570      	push	{r4, r5, r6, lr}
 80186b4:	4604      	mov	r4, r0
 80186b6:	d04b      	beq.n	8018750 <_reclaim_reent+0xa4>
 80186b8:	69c3      	ldr	r3, [r0, #28]
 80186ba:	b143      	cbz	r3, 80186ce <_reclaim_reent+0x22>
 80186bc:	68db      	ldr	r3, [r3, #12]
 80186be:	2b00      	cmp	r3, #0
 80186c0:	d144      	bne.n	801874c <_reclaim_reent+0xa0>
 80186c2:	69e3      	ldr	r3, [r4, #28]
 80186c4:	6819      	ldr	r1, [r3, #0]
 80186c6:	b111      	cbz	r1, 80186ce <_reclaim_reent+0x22>
 80186c8:	4620      	mov	r0, r4
 80186ca:	f000 f8f9 	bl	80188c0 <_free_r>
 80186ce:	6961      	ldr	r1, [r4, #20]
 80186d0:	b111      	cbz	r1, 80186d8 <_reclaim_reent+0x2c>
 80186d2:	4620      	mov	r0, r4
 80186d4:	f000 f8f4 	bl	80188c0 <_free_r>
 80186d8:	69e1      	ldr	r1, [r4, #28]
 80186da:	b111      	cbz	r1, 80186e2 <_reclaim_reent+0x36>
 80186dc:	4620      	mov	r0, r4
 80186de:	f000 f8ef 	bl	80188c0 <_free_r>
 80186e2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80186e4:	b111      	cbz	r1, 80186ec <_reclaim_reent+0x40>
 80186e6:	4620      	mov	r0, r4
 80186e8:	f000 f8ea 	bl	80188c0 <_free_r>
 80186ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80186ee:	b111      	cbz	r1, 80186f6 <_reclaim_reent+0x4a>
 80186f0:	4620      	mov	r0, r4
 80186f2:	f000 f8e5 	bl	80188c0 <_free_r>
 80186f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80186f8:	b111      	cbz	r1, 8018700 <_reclaim_reent+0x54>
 80186fa:	4620      	mov	r0, r4
 80186fc:	f000 f8e0 	bl	80188c0 <_free_r>
 8018700:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8018702:	b111      	cbz	r1, 801870a <_reclaim_reent+0x5e>
 8018704:	4620      	mov	r0, r4
 8018706:	f000 f8db 	bl	80188c0 <_free_r>
 801870a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801870c:	b111      	cbz	r1, 8018714 <_reclaim_reent+0x68>
 801870e:	4620      	mov	r0, r4
 8018710:	f000 f8d6 	bl	80188c0 <_free_r>
 8018714:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8018716:	b111      	cbz	r1, 801871e <_reclaim_reent+0x72>
 8018718:	4620      	mov	r0, r4
 801871a:	f000 f8d1 	bl	80188c0 <_free_r>
 801871e:	6a23      	ldr	r3, [r4, #32]
 8018720:	b1b3      	cbz	r3, 8018750 <_reclaim_reent+0xa4>
 8018722:	4620      	mov	r0, r4
 8018724:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018728:	4718      	bx	r3
 801872a:	5949      	ldr	r1, [r1, r5]
 801872c:	b941      	cbnz	r1, 8018740 <_reclaim_reent+0x94>
 801872e:	3504      	adds	r5, #4
 8018730:	69e3      	ldr	r3, [r4, #28]
 8018732:	2d80      	cmp	r5, #128	; 0x80
 8018734:	68d9      	ldr	r1, [r3, #12]
 8018736:	d1f8      	bne.n	801872a <_reclaim_reent+0x7e>
 8018738:	4620      	mov	r0, r4
 801873a:	f000 f8c1 	bl	80188c0 <_free_r>
 801873e:	e7c0      	b.n	80186c2 <_reclaim_reent+0x16>
 8018740:	680e      	ldr	r6, [r1, #0]
 8018742:	4620      	mov	r0, r4
 8018744:	f000 f8bc 	bl	80188c0 <_free_r>
 8018748:	4631      	mov	r1, r6
 801874a:	e7ef      	b.n	801872c <_reclaim_reent+0x80>
 801874c:	2500      	movs	r5, #0
 801874e:	e7ef      	b.n	8018730 <_reclaim_reent+0x84>
 8018750:	bd70      	pop	{r4, r5, r6, pc}
 8018752:	bf00      	nop
 8018754:	200000cc 	.word	0x200000cc

08018758 <_lseek_r>:
 8018758:	b538      	push	{r3, r4, r5, lr}
 801875a:	4d07      	ldr	r5, [pc, #28]	; (8018778 <_lseek_r+0x20>)
 801875c:	4604      	mov	r4, r0
 801875e:	4608      	mov	r0, r1
 8018760:	4611      	mov	r1, r2
 8018762:	2200      	movs	r2, #0
 8018764:	602a      	str	r2, [r5, #0]
 8018766:	461a      	mov	r2, r3
 8018768:	f7ea fc21 	bl	8002fae <_lseek>
 801876c:	1c43      	adds	r3, r0, #1
 801876e:	d102      	bne.n	8018776 <_lseek_r+0x1e>
 8018770:	682b      	ldr	r3, [r5, #0]
 8018772:	b103      	cbz	r3, 8018776 <_lseek_r+0x1e>
 8018774:	6023      	str	r3, [r4, #0]
 8018776:	bd38      	pop	{r3, r4, r5, pc}
 8018778:	20009e7c 	.word	0x20009e7c

0801877c <_read_r>:
 801877c:	b538      	push	{r3, r4, r5, lr}
 801877e:	4d07      	ldr	r5, [pc, #28]	; (801879c <_read_r+0x20>)
 8018780:	4604      	mov	r4, r0
 8018782:	4608      	mov	r0, r1
 8018784:	4611      	mov	r1, r2
 8018786:	2200      	movs	r2, #0
 8018788:	602a      	str	r2, [r5, #0]
 801878a:	461a      	mov	r2, r3
 801878c:	f7ea fc20 	bl	8002fd0 <_read>
 8018790:	1c43      	adds	r3, r0, #1
 8018792:	d102      	bne.n	801879a <_read_r+0x1e>
 8018794:	682b      	ldr	r3, [r5, #0]
 8018796:	b103      	cbz	r3, 801879a <_read_r+0x1e>
 8018798:	6023      	str	r3, [r4, #0]
 801879a:	bd38      	pop	{r3, r4, r5, pc}
 801879c:	20009e7c 	.word	0x20009e7c

080187a0 <_sbrk_r>:
 80187a0:	b538      	push	{r3, r4, r5, lr}
 80187a2:	4d06      	ldr	r5, [pc, #24]	; (80187bc <_sbrk_r+0x1c>)
 80187a4:	2300      	movs	r3, #0
 80187a6:	4604      	mov	r4, r0
 80187a8:	4608      	mov	r0, r1
 80187aa:	602b      	str	r3, [r5, #0]
 80187ac:	f7eb f8aa 	bl	8003904 <_sbrk>
 80187b0:	1c43      	adds	r3, r0, #1
 80187b2:	d102      	bne.n	80187ba <_sbrk_r+0x1a>
 80187b4:	682b      	ldr	r3, [r5, #0]
 80187b6:	b103      	cbz	r3, 80187ba <_sbrk_r+0x1a>
 80187b8:	6023      	str	r3, [r4, #0]
 80187ba:	bd38      	pop	{r3, r4, r5, pc}
 80187bc:	20009e7c 	.word	0x20009e7c

080187c0 <_write_r>:
 80187c0:	b538      	push	{r3, r4, r5, lr}
 80187c2:	4d07      	ldr	r5, [pc, #28]	; (80187e0 <_write_r+0x20>)
 80187c4:	4604      	mov	r4, r0
 80187c6:	4608      	mov	r0, r1
 80187c8:	4611      	mov	r1, r2
 80187ca:	2200      	movs	r2, #0
 80187cc:	602a      	str	r2, [r5, #0]
 80187ce:	461a      	mov	r2, r3
 80187d0:	f7ea fbaa 	bl	8002f28 <_write>
 80187d4:	1c43      	adds	r3, r0, #1
 80187d6:	d102      	bne.n	80187de <_write_r+0x1e>
 80187d8:	682b      	ldr	r3, [r5, #0]
 80187da:	b103      	cbz	r3, 80187de <_write_r+0x1e>
 80187dc:	6023      	str	r3, [r4, #0]
 80187de:	bd38      	pop	{r3, r4, r5, pc}
 80187e0:	20009e7c 	.word	0x20009e7c

080187e4 <__errno>:
 80187e4:	4b01      	ldr	r3, [pc, #4]	; (80187ec <__errno+0x8>)
 80187e6:	6818      	ldr	r0, [r3, #0]
 80187e8:	4770      	bx	lr
 80187ea:	bf00      	nop
 80187ec:	200000cc 	.word	0x200000cc

080187f0 <__libc_init_array>:
 80187f0:	b570      	push	{r4, r5, r6, lr}
 80187f2:	4d0d      	ldr	r5, [pc, #52]	; (8018828 <__libc_init_array+0x38>)
 80187f4:	4c0d      	ldr	r4, [pc, #52]	; (801882c <__libc_init_array+0x3c>)
 80187f6:	1b64      	subs	r4, r4, r5
 80187f8:	10a4      	asrs	r4, r4, #2
 80187fa:	2600      	movs	r6, #0
 80187fc:	42a6      	cmp	r6, r4
 80187fe:	d109      	bne.n	8018814 <__libc_init_array+0x24>
 8018800:	4d0b      	ldr	r5, [pc, #44]	; (8018830 <__libc_init_array+0x40>)
 8018802:	4c0c      	ldr	r4, [pc, #48]	; (8018834 <__libc_init_array+0x44>)
 8018804:	f000 fe6e 	bl	80194e4 <_init>
 8018808:	1b64      	subs	r4, r4, r5
 801880a:	10a4      	asrs	r4, r4, #2
 801880c:	2600      	movs	r6, #0
 801880e:	42a6      	cmp	r6, r4
 8018810:	d105      	bne.n	801881e <__libc_init_array+0x2e>
 8018812:	bd70      	pop	{r4, r5, r6, pc}
 8018814:	f855 3b04 	ldr.w	r3, [r5], #4
 8018818:	4798      	blx	r3
 801881a:	3601      	adds	r6, #1
 801881c:	e7ee      	b.n	80187fc <__libc_init_array+0xc>
 801881e:	f855 3b04 	ldr.w	r3, [r5], #4
 8018822:	4798      	blx	r3
 8018824:	3601      	adds	r6, #1
 8018826:	e7f2      	b.n	801880e <__libc_init_array+0x1e>
 8018828:	0801a3f0 	.word	0x0801a3f0
 801882c:	0801a3f0 	.word	0x0801a3f0
 8018830:	0801a3f0 	.word	0x0801a3f0
 8018834:	0801a3f4 	.word	0x0801a3f4

08018838 <__retarget_lock_init_recursive>:
 8018838:	4770      	bx	lr

0801883a <__retarget_lock_acquire_recursive>:
 801883a:	4770      	bx	lr

0801883c <__retarget_lock_release_recursive>:
 801883c:	4770      	bx	lr

0801883e <strcpy>:
 801883e:	4603      	mov	r3, r0
 8018840:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018844:	f803 2b01 	strb.w	r2, [r3], #1
 8018848:	2a00      	cmp	r2, #0
 801884a:	d1f9      	bne.n	8018840 <strcpy+0x2>
 801884c:	4770      	bx	lr

0801884e <memcpy>:
 801884e:	440a      	add	r2, r1
 8018850:	4291      	cmp	r1, r2
 8018852:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8018856:	d100      	bne.n	801885a <memcpy+0xc>
 8018858:	4770      	bx	lr
 801885a:	b510      	push	{r4, lr}
 801885c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018860:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018864:	4291      	cmp	r1, r2
 8018866:	d1f9      	bne.n	801885c <memcpy+0xe>
 8018868:	bd10      	pop	{r4, pc}
	...

0801886c <__assert_func>:
 801886c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801886e:	4614      	mov	r4, r2
 8018870:	461a      	mov	r2, r3
 8018872:	4b09      	ldr	r3, [pc, #36]	; (8018898 <__assert_func+0x2c>)
 8018874:	681b      	ldr	r3, [r3, #0]
 8018876:	4605      	mov	r5, r0
 8018878:	68d8      	ldr	r0, [r3, #12]
 801887a:	b14c      	cbz	r4, 8018890 <__assert_func+0x24>
 801887c:	4b07      	ldr	r3, [pc, #28]	; (801889c <__assert_func+0x30>)
 801887e:	9100      	str	r1, [sp, #0]
 8018880:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018884:	4906      	ldr	r1, [pc, #24]	; (80188a0 <__assert_func+0x34>)
 8018886:	462b      	mov	r3, r5
 8018888:	f000 fd48 	bl	801931c <fiprintf>
 801888c:	f000 fddc 	bl	8019448 <abort>
 8018890:	4b04      	ldr	r3, [pc, #16]	; (80188a4 <__assert_func+0x38>)
 8018892:	461c      	mov	r4, r3
 8018894:	e7f3      	b.n	801887e <__assert_func+0x12>
 8018896:	bf00      	nop
 8018898:	200000cc 	.word	0x200000cc
 801889c:	0801a378 	.word	0x0801a378
 80188a0:	0801a385 	.word	0x0801a385
 80188a4:	0801a3b3 	.word	0x0801a3b3

080188a8 <__env_lock>:
 80188a8:	4801      	ldr	r0, [pc, #4]	; (80188b0 <__env_lock+0x8>)
 80188aa:	f7ff bfc6 	b.w	801883a <__retarget_lock_acquire_recursive>
 80188ae:	bf00      	nop
 80188b0:	20009e80 	.word	0x20009e80

080188b4 <__env_unlock>:
 80188b4:	4801      	ldr	r0, [pc, #4]	; (80188bc <__env_unlock+0x8>)
 80188b6:	f7ff bfc1 	b.w	801883c <__retarget_lock_release_recursive>
 80188ba:	bf00      	nop
 80188bc:	20009e80 	.word	0x20009e80

080188c0 <_free_r>:
 80188c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80188c2:	2900      	cmp	r1, #0
 80188c4:	d044      	beq.n	8018950 <_free_r+0x90>
 80188c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80188ca:	9001      	str	r0, [sp, #4]
 80188cc:	2b00      	cmp	r3, #0
 80188ce:	f1a1 0404 	sub.w	r4, r1, #4
 80188d2:	bfb8      	it	lt
 80188d4:	18e4      	addlt	r4, r4, r3
 80188d6:	f7ff fa8d 	bl	8017df4 <__malloc_lock>
 80188da:	4a1e      	ldr	r2, [pc, #120]	; (8018954 <_free_r+0x94>)
 80188dc:	9801      	ldr	r0, [sp, #4]
 80188de:	6813      	ldr	r3, [r2, #0]
 80188e0:	b933      	cbnz	r3, 80188f0 <_free_r+0x30>
 80188e2:	6063      	str	r3, [r4, #4]
 80188e4:	6014      	str	r4, [r2, #0]
 80188e6:	b003      	add	sp, #12
 80188e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80188ec:	f7ff ba88 	b.w	8017e00 <__malloc_unlock>
 80188f0:	42a3      	cmp	r3, r4
 80188f2:	d908      	bls.n	8018906 <_free_r+0x46>
 80188f4:	6825      	ldr	r5, [r4, #0]
 80188f6:	1961      	adds	r1, r4, r5
 80188f8:	428b      	cmp	r3, r1
 80188fa:	bf01      	itttt	eq
 80188fc:	6819      	ldreq	r1, [r3, #0]
 80188fe:	685b      	ldreq	r3, [r3, #4]
 8018900:	1949      	addeq	r1, r1, r5
 8018902:	6021      	streq	r1, [r4, #0]
 8018904:	e7ed      	b.n	80188e2 <_free_r+0x22>
 8018906:	461a      	mov	r2, r3
 8018908:	685b      	ldr	r3, [r3, #4]
 801890a:	b10b      	cbz	r3, 8018910 <_free_r+0x50>
 801890c:	42a3      	cmp	r3, r4
 801890e:	d9fa      	bls.n	8018906 <_free_r+0x46>
 8018910:	6811      	ldr	r1, [r2, #0]
 8018912:	1855      	adds	r5, r2, r1
 8018914:	42a5      	cmp	r5, r4
 8018916:	d10b      	bne.n	8018930 <_free_r+0x70>
 8018918:	6824      	ldr	r4, [r4, #0]
 801891a:	4421      	add	r1, r4
 801891c:	1854      	adds	r4, r2, r1
 801891e:	42a3      	cmp	r3, r4
 8018920:	6011      	str	r1, [r2, #0]
 8018922:	d1e0      	bne.n	80188e6 <_free_r+0x26>
 8018924:	681c      	ldr	r4, [r3, #0]
 8018926:	685b      	ldr	r3, [r3, #4]
 8018928:	6053      	str	r3, [r2, #4]
 801892a:	440c      	add	r4, r1
 801892c:	6014      	str	r4, [r2, #0]
 801892e:	e7da      	b.n	80188e6 <_free_r+0x26>
 8018930:	d902      	bls.n	8018938 <_free_r+0x78>
 8018932:	230c      	movs	r3, #12
 8018934:	6003      	str	r3, [r0, #0]
 8018936:	e7d6      	b.n	80188e6 <_free_r+0x26>
 8018938:	6825      	ldr	r5, [r4, #0]
 801893a:	1961      	adds	r1, r4, r5
 801893c:	428b      	cmp	r3, r1
 801893e:	bf04      	itt	eq
 8018940:	6819      	ldreq	r1, [r3, #0]
 8018942:	685b      	ldreq	r3, [r3, #4]
 8018944:	6063      	str	r3, [r4, #4]
 8018946:	bf04      	itt	eq
 8018948:	1949      	addeq	r1, r1, r5
 801894a:	6021      	streq	r1, [r4, #0]
 801894c:	6054      	str	r4, [r2, #4]
 801894e:	e7ca      	b.n	80188e6 <_free_r+0x26>
 8018950:	b003      	add	sp, #12
 8018952:	bd30      	pop	{r4, r5, pc}
 8018954:	20009d38 	.word	0x20009d38

08018958 <_malloc_usable_size_r>:
 8018958:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801895c:	1f18      	subs	r0, r3, #4
 801895e:	2b00      	cmp	r3, #0
 8018960:	bfbc      	itt	lt
 8018962:	580b      	ldrlt	r3, [r1, r0]
 8018964:	18c0      	addlt	r0, r0, r3
 8018966:	4770      	bx	lr

08018968 <__ssputs_r>:
 8018968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801896c:	688e      	ldr	r6, [r1, #8]
 801896e:	461f      	mov	r7, r3
 8018970:	42be      	cmp	r6, r7
 8018972:	680b      	ldr	r3, [r1, #0]
 8018974:	4682      	mov	sl, r0
 8018976:	460c      	mov	r4, r1
 8018978:	4690      	mov	r8, r2
 801897a:	d82c      	bhi.n	80189d6 <__ssputs_r+0x6e>
 801897c:	898a      	ldrh	r2, [r1, #12]
 801897e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018982:	d026      	beq.n	80189d2 <__ssputs_r+0x6a>
 8018984:	6965      	ldr	r5, [r4, #20]
 8018986:	6909      	ldr	r1, [r1, #16]
 8018988:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801898c:	eba3 0901 	sub.w	r9, r3, r1
 8018990:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018994:	1c7b      	adds	r3, r7, #1
 8018996:	444b      	add	r3, r9
 8018998:	106d      	asrs	r5, r5, #1
 801899a:	429d      	cmp	r5, r3
 801899c:	bf38      	it	cc
 801899e:	461d      	movcc	r5, r3
 80189a0:	0553      	lsls	r3, r2, #21
 80189a2:	d527      	bpl.n	80189f4 <__ssputs_r+0x8c>
 80189a4:	4629      	mov	r1, r5
 80189a6:	f7ff f9a5 	bl	8017cf4 <_malloc_r>
 80189aa:	4606      	mov	r6, r0
 80189ac:	b360      	cbz	r0, 8018a08 <__ssputs_r+0xa0>
 80189ae:	6921      	ldr	r1, [r4, #16]
 80189b0:	464a      	mov	r2, r9
 80189b2:	f7ff ff4c 	bl	801884e <memcpy>
 80189b6:	89a3      	ldrh	r3, [r4, #12]
 80189b8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80189bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80189c0:	81a3      	strh	r3, [r4, #12]
 80189c2:	6126      	str	r6, [r4, #16]
 80189c4:	6165      	str	r5, [r4, #20]
 80189c6:	444e      	add	r6, r9
 80189c8:	eba5 0509 	sub.w	r5, r5, r9
 80189cc:	6026      	str	r6, [r4, #0]
 80189ce:	60a5      	str	r5, [r4, #8]
 80189d0:	463e      	mov	r6, r7
 80189d2:	42be      	cmp	r6, r7
 80189d4:	d900      	bls.n	80189d8 <__ssputs_r+0x70>
 80189d6:	463e      	mov	r6, r7
 80189d8:	6820      	ldr	r0, [r4, #0]
 80189da:	4632      	mov	r2, r6
 80189dc:	4641      	mov	r1, r8
 80189de:	f7ff fdfd 	bl	80185dc <memmove>
 80189e2:	68a3      	ldr	r3, [r4, #8]
 80189e4:	1b9b      	subs	r3, r3, r6
 80189e6:	60a3      	str	r3, [r4, #8]
 80189e8:	6823      	ldr	r3, [r4, #0]
 80189ea:	4433      	add	r3, r6
 80189ec:	6023      	str	r3, [r4, #0]
 80189ee:	2000      	movs	r0, #0
 80189f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80189f4:	462a      	mov	r2, r5
 80189f6:	f7ff fa7d 	bl	8017ef4 <_realloc_r>
 80189fa:	4606      	mov	r6, r0
 80189fc:	2800      	cmp	r0, #0
 80189fe:	d1e0      	bne.n	80189c2 <__ssputs_r+0x5a>
 8018a00:	6921      	ldr	r1, [r4, #16]
 8018a02:	4650      	mov	r0, sl
 8018a04:	f7ff ff5c 	bl	80188c0 <_free_r>
 8018a08:	230c      	movs	r3, #12
 8018a0a:	f8ca 3000 	str.w	r3, [sl]
 8018a0e:	89a3      	ldrh	r3, [r4, #12]
 8018a10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018a14:	81a3      	strh	r3, [r4, #12]
 8018a16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018a1a:	e7e9      	b.n	80189f0 <__ssputs_r+0x88>

08018a1c <_svfiprintf_r>:
 8018a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a20:	4698      	mov	r8, r3
 8018a22:	898b      	ldrh	r3, [r1, #12]
 8018a24:	061b      	lsls	r3, r3, #24
 8018a26:	b09d      	sub	sp, #116	; 0x74
 8018a28:	4607      	mov	r7, r0
 8018a2a:	460d      	mov	r5, r1
 8018a2c:	4614      	mov	r4, r2
 8018a2e:	d50e      	bpl.n	8018a4e <_svfiprintf_r+0x32>
 8018a30:	690b      	ldr	r3, [r1, #16]
 8018a32:	b963      	cbnz	r3, 8018a4e <_svfiprintf_r+0x32>
 8018a34:	2140      	movs	r1, #64	; 0x40
 8018a36:	f7ff f95d 	bl	8017cf4 <_malloc_r>
 8018a3a:	6028      	str	r0, [r5, #0]
 8018a3c:	6128      	str	r0, [r5, #16]
 8018a3e:	b920      	cbnz	r0, 8018a4a <_svfiprintf_r+0x2e>
 8018a40:	230c      	movs	r3, #12
 8018a42:	603b      	str	r3, [r7, #0]
 8018a44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018a48:	e0d0      	b.n	8018bec <_svfiprintf_r+0x1d0>
 8018a4a:	2340      	movs	r3, #64	; 0x40
 8018a4c:	616b      	str	r3, [r5, #20]
 8018a4e:	2300      	movs	r3, #0
 8018a50:	9309      	str	r3, [sp, #36]	; 0x24
 8018a52:	2320      	movs	r3, #32
 8018a54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018a58:	f8cd 800c 	str.w	r8, [sp, #12]
 8018a5c:	2330      	movs	r3, #48	; 0x30
 8018a5e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8018c04 <_svfiprintf_r+0x1e8>
 8018a62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018a66:	f04f 0901 	mov.w	r9, #1
 8018a6a:	4623      	mov	r3, r4
 8018a6c:	469a      	mov	sl, r3
 8018a6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018a72:	b10a      	cbz	r2, 8018a78 <_svfiprintf_r+0x5c>
 8018a74:	2a25      	cmp	r2, #37	; 0x25
 8018a76:	d1f9      	bne.n	8018a6c <_svfiprintf_r+0x50>
 8018a78:	ebba 0b04 	subs.w	fp, sl, r4
 8018a7c:	d00b      	beq.n	8018a96 <_svfiprintf_r+0x7a>
 8018a7e:	465b      	mov	r3, fp
 8018a80:	4622      	mov	r2, r4
 8018a82:	4629      	mov	r1, r5
 8018a84:	4638      	mov	r0, r7
 8018a86:	f7ff ff6f 	bl	8018968 <__ssputs_r>
 8018a8a:	3001      	adds	r0, #1
 8018a8c:	f000 80a9 	beq.w	8018be2 <_svfiprintf_r+0x1c6>
 8018a90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018a92:	445a      	add	r2, fp
 8018a94:	9209      	str	r2, [sp, #36]	; 0x24
 8018a96:	f89a 3000 	ldrb.w	r3, [sl]
 8018a9a:	2b00      	cmp	r3, #0
 8018a9c:	f000 80a1 	beq.w	8018be2 <_svfiprintf_r+0x1c6>
 8018aa0:	2300      	movs	r3, #0
 8018aa2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018aa6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018aaa:	f10a 0a01 	add.w	sl, sl, #1
 8018aae:	9304      	str	r3, [sp, #16]
 8018ab0:	9307      	str	r3, [sp, #28]
 8018ab2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018ab6:	931a      	str	r3, [sp, #104]	; 0x68
 8018ab8:	4654      	mov	r4, sl
 8018aba:	2205      	movs	r2, #5
 8018abc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018ac0:	4850      	ldr	r0, [pc, #320]	; (8018c04 <_svfiprintf_r+0x1e8>)
 8018ac2:	f7e7 fba5 	bl	8000210 <memchr>
 8018ac6:	9a04      	ldr	r2, [sp, #16]
 8018ac8:	b9d8      	cbnz	r0, 8018b02 <_svfiprintf_r+0xe6>
 8018aca:	06d0      	lsls	r0, r2, #27
 8018acc:	bf44      	itt	mi
 8018ace:	2320      	movmi	r3, #32
 8018ad0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018ad4:	0711      	lsls	r1, r2, #28
 8018ad6:	bf44      	itt	mi
 8018ad8:	232b      	movmi	r3, #43	; 0x2b
 8018ada:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018ade:	f89a 3000 	ldrb.w	r3, [sl]
 8018ae2:	2b2a      	cmp	r3, #42	; 0x2a
 8018ae4:	d015      	beq.n	8018b12 <_svfiprintf_r+0xf6>
 8018ae6:	9a07      	ldr	r2, [sp, #28]
 8018ae8:	4654      	mov	r4, sl
 8018aea:	2000      	movs	r0, #0
 8018aec:	f04f 0c0a 	mov.w	ip, #10
 8018af0:	4621      	mov	r1, r4
 8018af2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018af6:	3b30      	subs	r3, #48	; 0x30
 8018af8:	2b09      	cmp	r3, #9
 8018afa:	d94d      	bls.n	8018b98 <_svfiprintf_r+0x17c>
 8018afc:	b1b0      	cbz	r0, 8018b2c <_svfiprintf_r+0x110>
 8018afe:	9207      	str	r2, [sp, #28]
 8018b00:	e014      	b.n	8018b2c <_svfiprintf_r+0x110>
 8018b02:	eba0 0308 	sub.w	r3, r0, r8
 8018b06:	fa09 f303 	lsl.w	r3, r9, r3
 8018b0a:	4313      	orrs	r3, r2
 8018b0c:	9304      	str	r3, [sp, #16]
 8018b0e:	46a2      	mov	sl, r4
 8018b10:	e7d2      	b.n	8018ab8 <_svfiprintf_r+0x9c>
 8018b12:	9b03      	ldr	r3, [sp, #12]
 8018b14:	1d19      	adds	r1, r3, #4
 8018b16:	681b      	ldr	r3, [r3, #0]
 8018b18:	9103      	str	r1, [sp, #12]
 8018b1a:	2b00      	cmp	r3, #0
 8018b1c:	bfbb      	ittet	lt
 8018b1e:	425b      	neglt	r3, r3
 8018b20:	f042 0202 	orrlt.w	r2, r2, #2
 8018b24:	9307      	strge	r3, [sp, #28]
 8018b26:	9307      	strlt	r3, [sp, #28]
 8018b28:	bfb8      	it	lt
 8018b2a:	9204      	strlt	r2, [sp, #16]
 8018b2c:	7823      	ldrb	r3, [r4, #0]
 8018b2e:	2b2e      	cmp	r3, #46	; 0x2e
 8018b30:	d10c      	bne.n	8018b4c <_svfiprintf_r+0x130>
 8018b32:	7863      	ldrb	r3, [r4, #1]
 8018b34:	2b2a      	cmp	r3, #42	; 0x2a
 8018b36:	d134      	bne.n	8018ba2 <_svfiprintf_r+0x186>
 8018b38:	9b03      	ldr	r3, [sp, #12]
 8018b3a:	1d1a      	adds	r2, r3, #4
 8018b3c:	681b      	ldr	r3, [r3, #0]
 8018b3e:	9203      	str	r2, [sp, #12]
 8018b40:	2b00      	cmp	r3, #0
 8018b42:	bfb8      	it	lt
 8018b44:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8018b48:	3402      	adds	r4, #2
 8018b4a:	9305      	str	r3, [sp, #20]
 8018b4c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8018c14 <_svfiprintf_r+0x1f8>
 8018b50:	7821      	ldrb	r1, [r4, #0]
 8018b52:	2203      	movs	r2, #3
 8018b54:	4650      	mov	r0, sl
 8018b56:	f7e7 fb5b 	bl	8000210 <memchr>
 8018b5a:	b138      	cbz	r0, 8018b6c <_svfiprintf_r+0x150>
 8018b5c:	9b04      	ldr	r3, [sp, #16]
 8018b5e:	eba0 000a 	sub.w	r0, r0, sl
 8018b62:	2240      	movs	r2, #64	; 0x40
 8018b64:	4082      	lsls	r2, r0
 8018b66:	4313      	orrs	r3, r2
 8018b68:	3401      	adds	r4, #1
 8018b6a:	9304      	str	r3, [sp, #16]
 8018b6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018b70:	4825      	ldr	r0, [pc, #148]	; (8018c08 <_svfiprintf_r+0x1ec>)
 8018b72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018b76:	2206      	movs	r2, #6
 8018b78:	f7e7 fb4a 	bl	8000210 <memchr>
 8018b7c:	2800      	cmp	r0, #0
 8018b7e:	d038      	beq.n	8018bf2 <_svfiprintf_r+0x1d6>
 8018b80:	4b22      	ldr	r3, [pc, #136]	; (8018c0c <_svfiprintf_r+0x1f0>)
 8018b82:	bb1b      	cbnz	r3, 8018bcc <_svfiprintf_r+0x1b0>
 8018b84:	9b03      	ldr	r3, [sp, #12]
 8018b86:	3307      	adds	r3, #7
 8018b88:	f023 0307 	bic.w	r3, r3, #7
 8018b8c:	3308      	adds	r3, #8
 8018b8e:	9303      	str	r3, [sp, #12]
 8018b90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018b92:	4433      	add	r3, r6
 8018b94:	9309      	str	r3, [sp, #36]	; 0x24
 8018b96:	e768      	b.n	8018a6a <_svfiprintf_r+0x4e>
 8018b98:	fb0c 3202 	mla	r2, ip, r2, r3
 8018b9c:	460c      	mov	r4, r1
 8018b9e:	2001      	movs	r0, #1
 8018ba0:	e7a6      	b.n	8018af0 <_svfiprintf_r+0xd4>
 8018ba2:	2300      	movs	r3, #0
 8018ba4:	3401      	adds	r4, #1
 8018ba6:	9305      	str	r3, [sp, #20]
 8018ba8:	4619      	mov	r1, r3
 8018baa:	f04f 0c0a 	mov.w	ip, #10
 8018bae:	4620      	mov	r0, r4
 8018bb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018bb4:	3a30      	subs	r2, #48	; 0x30
 8018bb6:	2a09      	cmp	r2, #9
 8018bb8:	d903      	bls.n	8018bc2 <_svfiprintf_r+0x1a6>
 8018bba:	2b00      	cmp	r3, #0
 8018bbc:	d0c6      	beq.n	8018b4c <_svfiprintf_r+0x130>
 8018bbe:	9105      	str	r1, [sp, #20]
 8018bc0:	e7c4      	b.n	8018b4c <_svfiprintf_r+0x130>
 8018bc2:	fb0c 2101 	mla	r1, ip, r1, r2
 8018bc6:	4604      	mov	r4, r0
 8018bc8:	2301      	movs	r3, #1
 8018bca:	e7f0      	b.n	8018bae <_svfiprintf_r+0x192>
 8018bcc:	ab03      	add	r3, sp, #12
 8018bce:	9300      	str	r3, [sp, #0]
 8018bd0:	462a      	mov	r2, r5
 8018bd2:	4b0f      	ldr	r3, [pc, #60]	; (8018c10 <_svfiprintf_r+0x1f4>)
 8018bd4:	a904      	add	r1, sp, #16
 8018bd6:	4638      	mov	r0, r7
 8018bd8:	f3af 8000 	nop.w
 8018bdc:	1c42      	adds	r2, r0, #1
 8018bde:	4606      	mov	r6, r0
 8018be0:	d1d6      	bne.n	8018b90 <_svfiprintf_r+0x174>
 8018be2:	89ab      	ldrh	r3, [r5, #12]
 8018be4:	065b      	lsls	r3, r3, #25
 8018be6:	f53f af2d 	bmi.w	8018a44 <_svfiprintf_r+0x28>
 8018bea:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018bec:	b01d      	add	sp, #116	; 0x74
 8018bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018bf2:	ab03      	add	r3, sp, #12
 8018bf4:	9300      	str	r3, [sp, #0]
 8018bf6:	462a      	mov	r2, r5
 8018bf8:	4b05      	ldr	r3, [pc, #20]	; (8018c10 <_svfiprintf_r+0x1f4>)
 8018bfa:	a904      	add	r1, sp, #16
 8018bfc:	4638      	mov	r0, r7
 8018bfe:	f000 f9bd 	bl	8018f7c <_printf_i>
 8018c02:	e7eb      	b.n	8018bdc <_svfiprintf_r+0x1c0>
 8018c04:	0801a3b4 	.word	0x0801a3b4
 8018c08:	0801a3be 	.word	0x0801a3be
 8018c0c:	00000000 	.word	0x00000000
 8018c10:	08018969 	.word	0x08018969
 8018c14:	0801a3ba 	.word	0x0801a3ba

08018c18 <__sfputc_r>:
 8018c18:	6893      	ldr	r3, [r2, #8]
 8018c1a:	3b01      	subs	r3, #1
 8018c1c:	2b00      	cmp	r3, #0
 8018c1e:	b410      	push	{r4}
 8018c20:	6093      	str	r3, [r2, #8]
 8018c22:	da08      	bge.n	8018c36 <__sfputc_r+0x1e>
 8018c24:	6994      	ldr	r4, [r2, #24]
 8018c26:	42a3      	cmp	r3, r4
 8018c28:	db01      	blt.n	8018c2e <__sfputc_r+0x16>
 8018c2a:	290a      	cmp	r1, #10
 8018c2c:	d103      	bne.n	8018c36 <__sfputc_r+0x1e>
 8018c2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018c32:	f7ff bc3d 	b.w	80184b0 <__swbuf_r>
 8018c36:	6813      	ldr	r3, [r2, #0]
 8018c38:	1c58      	adds	r0, r3, #1
 8018c3a:	6010      	str	r0, [r2, #0]
 8018c3c:	7019      	strb	r1, [r3, #0]
 8018c3e:	4608      	mov	r0, r1
 8018c40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018c44:	4770      	bx	lr

08018c46 <__sfputs_r>:
 8018c46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c48:	4606      	mov	r6, r0
 8018c4a:	460f      	mov	r7, r1
 8018c4c:	4614      	mov	r4, r2
 8018c4e:	18d5      	adds	r5, r2, r3
 8018c50:	42ac      	cmp	r4, r5
 8018c52:	d101      	bne.n	8018c58 <__sfputs_r+0x12>
 8018c54:	2000      	movs	r0, #0
 8018c56:	e007      	b.n	8018c68 <__sfputs_r+0x22>
 8018c58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018c5c:	463a      	mov	r2, r7
 8018c5e:	4630      	mov	r0, r6
 8018c60:	f7ff ffda 	bl	8018c18 <__sfputc_r>
 8018c64:	1c43      	adds	r3, r0, #1
 8018c66:	d1f3      	bne.n	8018c50 <__sfputs_r+0xa>
 8018c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018c6c <_vfiprintf_r>:
 8018c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c70:	460d      	mov	r5, r1
 8018c72:	b09d      	sub	sp, #116	; 0x74
 8018c74:	4614      	mov	r4, r2
 8018c76:	4698      	mov	r8, r3
 8018c78:	4606      	mov	r6, r0
 8018c7a:	b118      	cbz	r0, 8018c84 <_vfiprintf_r+0x18>
 8018c7c:	6a03      	ldr	r3, [r0, #32]
 8018c7e:	b90b      	cbnz	r3, 8018c84 <_vfiprintf_r+0x18>
 8018c80:	f7ff fa70 	bl	8018164 <__sinit>
 8018c84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018c86:	07d9      	lsls	r1, r3, #31
 8018c88:	d405      	bmi.n	8018c96 <_vfiprintf_r+0x2a>
 8018c8a:	89ab      	ldrh	r3, [r5, #12]
 8018c8c:	059a      	lsls	r2, r3, #22
 8018c8e:	d402      	bmi.n	8018c96 <_vfiprintf_r+0x2a>
 8018c90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018c92:	f7ff fdd2 	bl	801883a <__retarget_lock_acquire_recursive>
 8018c96:	89ab      	ldrh	r3, [r5, #12]
 8018c98:	071b      	lsls	r3, r3, #28
 8018c9a:	d501      	bpl.n	8018ca0 <_vfiprintf_r+0x34>
 8018c9c:	692b      	ldr	r3, [r5, #16]
 8018c9e:	b99b      	cbnz	r3, 8018cc8 <_vfiprintf_r+0x5c>
 8018ca0:	4629      	mov	r1, r5
 8018ca2:	4630      	mov	r0, r6
 8018ca4:	f7ff fc42 	bl	801852c <__swsetup_r>
 8018ca8:	b170      	cbz	r0, 8018cc8 <_vfiprintf_r+0x5c>
 8018caa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018cac:	07dc      	lsls	r4, r3, #31
 8018cae:	d504      	bpl.n	8018cba <_vfiprintf_r+0x4e>
 8018cb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018cb4:	b01d      	add	sp, #116	; 0x74
 8018cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018cba:	89ab      	ldrh	r3, [r5, #12]
 8018cbc:	0598      	lsls	r0, r3, #22
 8018cbe:	d4f7      	bmi.n	8018cb0 <_vfiprintf_r+0x44>
 8018cc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018cc2:	f7ff fdbb 	bl	801883c <__retarget_lock_release_recursive>
 8018cc6:	e7f3      	b.n	8018cb0 <_vfiprintf_r+0x44>
 8018cc8:	2300      	movs	r3, #0
 8018cca:	9309      	str	r3, [sp, #36]	; 0x24
 8018ccc:	2320      	movs	r3, #32
 8018cce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018cd2:	f8cd 800c 	str.w	r8, [sp, #12]
 8018cd6:	2330      	movs	r3, #48	; 0x30
 8018cd8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8018e8c <_vfiprintf_r+0x220>
 8018cdc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018ce0:	f04f 0901 	mov.w	r9, #1
 8018ce4:	4623      	mov	r3, r4
 8018ce6:	469a      	mov	sl, r3
 8018ce8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018cec:	b10a      	cbz	r2, 8018cf2 <_vfiprintf_r+0x86>
 8018cee:	2a25      	cmp	r2, #37	; 0x25
 8018cf0:	d1f9      	bne.n	8018ce6 <_vfiprintf_r+0x7a>
 8018cf2:	ebba 0b04 	subs.w	fp, sl, r4
 8018cf6:	d00b      	beq.n	8018d10 <_vfiprintf_r+0xa4>
 8018cf8:	465b      	mov	r3, fp
 8018cfa:	4622      	mov	r2, r4
 8018cfc:	4629      	mov	r1, r5
 8018cfe:	4630      	mov	r0, r6
 8018d00:	f7ff ffa1 	bl	8018c46 <__sfputs_r>
 8018d04:	3001      	adds	r0, #1
 8018d06:	f000 80a9 	beq.w	8018e5c <_vfiprintf_r+0x1f0>
 8018d0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018d0c:	445a      	add	r2, fp
 8018d0e:	9209      	str	r2, [sp, #36]	; 0x24
 8018d10:	f89a 3000 	ldrb.w	r3, [sl]
 8018d14:	2b00      	cmp	r3, #0
 8018d16:	f000 80a1 	beq.w	8018e5c <_vfiprintf_r+0x1f0>
 8018d1a:	2300      	movs	r3, #0
 8018d1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018d20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018d24:	f10a 0a01 	add.w	sl, sl, #1
 8018d28:	9304      	str	r3, [sp, #16]
 8018d2a:	9307      	str	r3, [sp, #28]
 8018d2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018d30:	931a      	str	r3, [sp, #104]	; 0x68
 8018d32:	4654      	mov	r4, sl
 8018d34:	2205      	movs	r2, #5
 8018d36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018d3a:	4854      	ldr	r0, [pc, #336]	; (8018e8c <_vfiprintf_r+0x220>)
 8018d3c:	f7e7 fa68 	bl	8000210 <memchr>
 8018d40:	9a04      	ldr	r2, [sp, #16]
 8018d42:	b9d8      	cbnz	r0, 8018d7c <_vfiprintf_r+0x110>
 8018d44:	06d1      	lsls	r1, r2, #27
 8018d46:	bf44      	itt	mi
 8018d48:	2320      	movmi	r3, #32
 8018d4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018d4e:	0713      	lsls	r3, r2, #28
 8018d50:	bf44      	itt	mi
 8018d52:	232b      	movmi	r3, #43	; 0x2b
 8018d54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018d58:	f89a 3000 	ldrb.w	r3, [sl]
 8018d5c:	2b2a      	cmp	r3, #42	; 0x2a
 8018d5e:	d015      	beq.n	8018d8c <_vfiprintf_r+0x120>
 8018d60:	9a07      	ldr	r2, [sp, #28]
 8018d62:	4654      	mov	r4, sl
 8018d64:	2000      	movs	r0, #0
 8018d66:	f04f 0c0a 	mov.w	ip, #10
 8018d6a:	4621      	mov	r1, r4
 8018d6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018d70:	3b30      	subs	r3, #48	; 0x30
 8018d72:	2b09      	cmp	r3, #9
 8018d74:	d94d      	bls.n	8018e12 <_vfiprintf_r+0x1a6>
 8018d76:	b1b0      	cbz	r0, 8018da6 <_vfiprintf_r+0x13a>
 8018d78:	9207      	str	r2, [sp, #28]
 8018d7a:	e014      	b.n	8018da6 <_vfiprintf_r+0x13a>
 8018d7c:	eba0 0308 	sub.w	r3, r0, r8
 8018d80:	fa09 f303 	lsl.w	r3, r9, r3
 8018d84:	4313      	orrs	r3, r2
 8018d86:	9304      	str	r3, [sp, #16]
 8018d88:	46a2      	mov	sl, r4
 8018d8a:	e7d2      	b.n	8018d32 <_vfiprintf_r+0xc6>
 8018d8c:	9b03      	ldr	r3, [sp, #12]
 8018d8e:	1d19      	adds	r1, r3, #4
 8018d90:	681b      	ldr	r3, [r3, #0]
 8018d92:	9103      	str	r1, [sp, #12]
 8018d94:	2b00      	cmp	r3, #0
 8018d96:	bfbb      	ittet	lt
 8018d98:	425b      	neglt	r3, r3
 8018d9a:	f042 0202 	orrlt.w	r2, r2, #2
 8018d9e:	9307      	strge	r3, [sp, #28]
 8018da0:	9307      	strlt	r3, [sp, #28]
 8018da2:	bfb8      	it	lt
 8018da4:	9204      	strlt	r2, [sp, #16]
 8018da6:	7823      	ldrb	r3, [r4, #0]
 8018da8:	2b2e      	cmp	r3, #46	; 0x2e
 8018daa:	d10c      	bne.n	8018dc6 <_vfiprintf_r+0x15a>
 8018dac:	7863      	ldrb	r3, [r4, #1]
 8018dae:	2b2a      	cmp	r3, #42	; 0x2a
 8018db0:	d134      	bne.n	8018e1c <_vfiprintf_r+0x1b0>
 8018db2:	9b03      	ldr	r3, [sp, #12]
 8018db4:	1d1a      	adds	r2, r3, #4
 8018db6:	681b      	ldr	r3, [r3, #0]
 8018db8:	9203      	str	r2, [sp, #12]
 8018dba:	2b00      	cmp	r3, #0
 8018dbc:	bfb8      	it	lt
 8018dbe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8018dc2:	3402      	adds	r4, #2
 8018dc4:	9305      	str	r3, [sp, #20]
 8018dc6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8018e9c <_vfiprintf_r+0x230>
 8018dca:	7821      	ldrb	r1, [r4, #0]
 8018dcc:	2203      	movs	r2, #3
 8018dce:	4650      	mov	r0, sl
 8018dd0:	f7e7 fa1e 	bl	8000210 <memchr>
 8018dd4:	b138      	cbz	r0, 8018de6 <_vfiprintf_r+0x17a>
 8018dd6:	9b04      	ldr	r3, [sp, #16]
 8018dd8:	eba0 000a 	sub.w	r0, r0, sl
 8018ddc:	2240      	movs	r2, #64	; 0x40
 8018dde:	4082      	lsls	r2, r0
 8018de0:	4313      	orrs	r3, r2
 8018de2:	3401      	adds	r4, #1
 8018de4:	9304      	str	r3, [sp, #16]
 8018de6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018dea:	4829      	ldr	r0, [pc, #164]	; (8018e90 <_vfiprintf_r+0x224>)
 8018dec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018df0:	2206      	movs	r2, #6
 8018df2:	f7e7 fa0d 	bl	8000210 <memchr>
 8018df6:	2800      	cmp	r0, #0
 8018df8:	d03f      	beq.n	8018e7a <_vfiprintf_r+0x20e>
 8018dfa:	4b26      	ldr	r3, [pc, #152]	; (8018e94 <_vfiprintf_r+0x228>)
 8018dfc:	bb1b      	cbnz	r3, 8018e46 <_vfiprintf_r+0x1da>
 8018dfe:	9b03      	ldr	r3, [sp, #12]
 8018e00:	3307      	adds	r3, #7
 8018e02:	f023 0307 	bic.w	r3, r3, #7
 8018e06:	3308      	adds	r3, #8
 8018e08:	9303      	str	r3, [sp, #12]
 8018e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018e0c:	443b      	add	r3, r7
 8018e0e:	9309      	str	r3, [sp, #36]	; 0x24
 8018e10:	e768      	b.n	8018ce4 <_vfiprintf_r+0x78>
 8018e12:	fb0c 3202 	mla	r2, ip, r2, r3
 8018e16:	460c      	mov	r4, r1
 8018e18:	2001      	movs	r0, #1
 8018e1a:	e7a6      	b.n	8018d6a <_vfiprintf_r+0xfe>
 8018e1c:	2300      	movs	r3, #0
 8018e1e:	3401      	adds	r4, #1
 8018e20:	9305      	str	r3, [sp, #20]
 8018e22:	4619      	mov	r1, r3
 8018e24:	f04f 0c0a 	mov.w	ip, #10
 8018e28:	4620      	mov	r0, r4
 8018e2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018e2e:	3a30      	subs	r2, #48	; 0x30
 8018e30:	2a09      	cmp	r2, #9
 8018e32:	d903      	bls.n	8018e3c <_vfiprintf_r+0x1d0>
 8018e34:	2b00      	cmp	r3, #0
 8018e36:	d0c6      	beq.n	8018dc6 <_vfiprintf_r+0x15a>
 8018e38:	9105      	str	r1, [sp, #20]
 8018e3a:	e7c4      	b.n	8018dc6 <_vfiprintf_r+0x15a>
 8018e3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8018e40:	4604      	mov	r4, r0
 8018e42:	2301      	movs	r3, #1
 8018e44:	e7f0      	b.n	8018e28 <_vfiprintf_r+0x1bc>
 8018e46:	ab03      	add	r3, sp, #12
 8018e48:	9300      	str	r3, [sp, #0]
 8018e4a:	462a      	mov	r2, r5
 8018e4c:	4b12      	ldr	r3, [pc, #72]	; (8018e98 <_vfiprintf_r+0x22c>)
 8018e4e:	a904      	add	r1, sp, #16
 8018e50:	4630      	mov	r0, r6
 8018e52:	f3af 8000 	nop.w
 8018e56:	4607      	mov	r7, r0
 8018e58:	1c78      	adds	r0, r7, #1
 8018e5a:	d1d6      	bne.n	8018e0a <_vfiprintf_r+0x19e>
 8018e5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018e5e:	07d9      	lsls	r1, r3, #31
 8018e60:	d405      	bmi.n	8018e6e <_vfiprintf_r+0x202>
 8018e62:	89ab      	ldrh	r3, [r5, #12]
 8018e64:	059a      	lsls	r2, r3, #22
 8018e66:	d402      	bmi.n	8018e6e <_vfiprintf_r+0x202>
 8018e68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018e6a:	f7ff fce7 	bl	801883c <__retarget_lock_release_recursive>
 8018e6e:	89ab      	ldrh	r3, [r5, #12]
 8018e70:	065b      	lsls	r3, r3, #25
 8018e72:	f53f af1d 	bmi.w	8018cb0 <_vfiprintf_r+0x44>
 8018e76:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018e78:	e71c      	b.n	8018cb4 <_vfiprintf_r+0x48>
 8018e7a:	ab03      	add	r3, sp, #12
 8018e7c:	9300      	str	r3, [sp, #0]
 8018e7e:	462a      	mov	r2, r5
 8018e80:	4b05      	ldr	r3, [pc, #20]	; (8018e98 <_vfiprintf_r+0x22c>)
 8018e82:	a904      	add	r1, sp, #16
 8018e84:	4630      	mov	r0, r6
 8018e86:	f000 f879 	bl	8018f7c <_printf_i>
 8018e8a:	e7e4      	b.n	8018e56 <_vfiprintf_r+0x1ea>
 8018e8c:	0801a3b4 	.word	0x0801a3b4
 8018e90:	0801a3be 	.word	0x0801a3be
 8018e94:	00000000 	.word	0x00000000
 8018e98:	08018c47 	.word	0x08018c47
 8018e9c:	0801a3ba 	.word	0x0801a3ba

08018ea0 <_printf_common>:
 8018ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018ea4:	4616      	mov	r6, r2
 8018ea6:	4699      	mov	r9, r3
 8018ea8:	688a      	ldr	r2, [r1, #8]
 8018eaa:	690b      	ldr	r3, [r1, #16]
 8018eac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018eb0:	4293      	cmp	r3, r2
 8018eb2:	bfb8      	it	lt
 8018eb4:	4613      	movlt	r3, r2
 8018eb6:	6033      	str	r3, [r6, #0]
 8018eb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018ebc:	4607      	mov	r7, r0
 8018ebe:	460c      	mov	r4, r1
 8018ec0:	b10a      	cbz	r2, 8018ec6 <_printf_common+0x26>
 8018ec2:	3301      	adds	r3, #1
 8018ec4:	6033      	str	r3, [r6, #0]
 8018ec6:	6823      	ldr	r3, [r4, #0]
 8018ec8:	0699      	lsls	r1, r3, #26
 8018eca:	bf42      	ittt	mi
 8018ecc:	6833      	ldrmi	r3, [r6, #0]
 8018ece:	3302      	addmi	r3, #2
 8018ed0:	6033      	strmi	r3, [r6, #0]
 8018ed2:	6825      	ldr	r5, [r4, #0]
 8018ed4:	f015 0506 	ands.w	r5, r5, #6
 8018ed8:	d106      	bne.n	8018ee8 <_printf_common+0x48>
 8018eda:	f104 0a19 	add.w	sl, r4, #25
 8018ede:	68e3      	ldr	r3, [r4, #12]
 8018ee0:	6832      	ldr	r2, [r6, #0]
 8018ee2:	1a9b      	subs	r3, r3, r2
 8018ee4:	42ab      	cmp	r3, r5
 8018ee6:	dc26      	bgt.n	8018f36 <_printf_common+0x96>
 8018ee8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018eec:	1e13      	subs	r3, r2, #0
 8018eee:	6822      	ldr	r2, [r4, #0]
 8018ef0:	bf18      	it	ne
 8018ef2:	2301      	movne	r3, #1
 8018ef4:	0692      	lsls	r2, r2, #26
 8018ef6:	d42b      	bmi.n	8018f50 <_printf_common+0xb0>
 8018ef8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018efc:	4649      	mov	r1, r9
 8018efe:	4638      	mov	r0, r7
 8018f00:	47c0      	blx	r8
 8018f02:	3001      	adds	r0, #1
 8018f04:	d01e      	beq.n	8018f44 <_printf_common+0xa4>
 8018f06:	6823      	ldr	r3, [r4, #0]
 8018f08:	6922      	ldr	r2, [r4, #16]
 8018f0a:	f003 0306 	and.w	r3, r3, #6
 8018f0e:	2b04      	cmp	r3, #4
 8018f10:	bf02      	ittt	eq
 8018f12:	68e5      	ldreq	r5, [r4, #12]
 8018f14:	6833      	ldreq	r3, [r6, #0]
 8018f16:	1aed      	subeq	r5, r5, r3
 8018f18:	68a3      	ldr	r3, [r4, #8]
 8018f1a:	bf0c      	ite	eq
 8018f1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018f20:	2500      	movne	r5, #0
 8018f22:	4293      	cmp	r3, r2
 8018f24:	bfc4      	itt	gt
 8018f26:	1a9b      	subgt	r3, r3, r2
 8018f28:	18ed      	addgt	r5, r5, r3
 8018f2a:	2600      	movs	r6, #0
 8018f2c:	341a      	adds	r4, #26
 8018f2e:	42b5      	cmp	r5, r6
 8018f30:	d11a      	bne.n	8018f68 <_printf_common+0xc8>
 8018f32:	2000      	movs	r0, #0
 8018f34:	e008      	b.n	8018f48 <_printf_common+0xa8>
 8018f36:	2301      	movs	r3, #1
 8018f38:	4652      	mov	r2, sl
 8018f3a:	4649      	mov	r1, r9
 8018f3c:	4638      	mov	r0, r7
 8018f3e:	47c0      	blx	r8
 8018f40:	3001      	adds	r0, #1
 8018f42:	d103      	bne.n	8018f4c <_printf_common+0xac>
 8018f44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018f4c:	3501      	adds	r5, #1
 8018f4e:	e7c6      	b.n	8018ede <_printf_common+0x3e>
 8018f50:	18e1      	adds	r1, r4, r3
 8018f52:	1c5a      	adds	r2, r3, #1
 8018f54:	2030      	movs	r0, #48	; 0x30
 8018f56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018f5a:	4422      	add	r2, r4
 8018f5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018f60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018f64:	3302      	adds	r3, #2
 8018f66:	e7c7      	b.n	8018ef8 <_printf_common+0x58>
 8018f68:	2301      	movs	r3, #1
 8018f6a:	4622      	mov	r2, r4
 8018f6c:	4649      	mov	r1, r9
 8018f6e:	4638      	mov	r0, r7
 8018f70:	47c0      	blx	r8
 8018f72:	3001      	adds	r0, #1
 8018f74:	d0e6      	beq.n	8018f44 <_printf_common+0xa4>
 8018f76:	3601      	adds	r6, #1
 8018f78:	e7d9      	b.n	8018f2e <_printf_common+0x8e>
	...

08018f7c <_printf_i>:
 8018f7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018f80:	7e0f      	ldrb	r7, [r1, #24]
 8018f82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018f84:	2f78      	cmp	r7, #120	; 0x78
 8018f86:	4691      	mov	r9, r2
 8018f88:	4680      	mov	r8, r0
 8018f8a:	460c      	mov	r4, r1
 8018f8c:	469a      	mov	sl, r3
 8018f8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8018f92:	d807      	bhi.n	8018fa4 <_printf_i+0x28>
 8018f94:	2f62      	cmp	r7, #98	; 0x62
 8018f96:	d80a      	bhi.n	8018fae <_printf_i+0x32>
 8018f98:	2f00      	cmp	r7, #0
 8018f9a:	f000 80d4 	beq.w	8019146 <_printf_i+0x1ca>
 8018f9e:	2f58      	cmp	r7, #88	; 0x58
 8018fa0:	f000 80c0 	beq.w	8019124 <_printf_i+0x1a8>
 8018fa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018fa8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018fac:	e03a      	b.n	8019024 <_printf_i+0xa8>
 8018fae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8018fb2:	2b15      	cmp	r3, #21
 8018fb4:	d8f6      	bhi.n	8018fa4 <_printf_i+0x28>
 8018fb6:	a101      	add	r1, pc, #4	; (adr r1, 8018fbc <_printf_i+0x40>)
 8018fb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018fbc:	08019015 	.word	0x08019015
 8018fc0:	08019029 	.word	0x08019029
 8018fc4:	08018fa5 	.word	0x08018fa5
 8018fc8:	08018fa5 	.word	0x08018fa5
 8018fcc:	08018fa5 	.word	0x08018fa5
 8018fd0:	08018fa5 	.word	0x08018fa5
 8018fd4:	08019029 	.word	0x08019029
 8018fd8:	08018fa5 	.word	0x08018fa5
 8018fdc:	08018fa5 	.word	0x08018fa5
 8018fe0:	08018fa5 	.word	0x08018fa5
 8018fe4:	08018fa5 	.word	0x08018fa5
 8018fe8:	0801912d 	.word	0x0801912d
 8018fec:	08019055 	.word	0x08019055
 8018ff0:	080190e7 	.word	0x080190e7
 8018ff4:	08018fa5 	.word	0x08018fa5
 8018ff8:	08018fa5 	.word	0x08018fa5
 8018ffc:	0801914f 	.word	0x0801914f
 8019000:	08018fa5 	.word	0x08018fa5
 8019004:	08019055 	.word	0x08019055
 8019008:	08018fa5 	.word	0x08018fa5
 801900c:	08018fa5 	.word	0x08018fa5
 8019010:	080190ef 	.word	0x080190ef
 8019014:	682b      	ldr	r3, [r5, #0]
 8019016:	1d1a      	adds	r2, r3, #4
 8019018:	681b      	ldr	r3, [r3, #0]
 801901a:	602a      	str	r2, [r5, #0]
 801901c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019020:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019024:	2301      	movs	r3, #1
 8019026:	e09f      	b.n	8019168 <_printf_i+0x1ec>
 8019028:	6820      	ldr	r0, [r4, #0]
 801902a:	682b      	ldr	r3, [r5, #0]
 801902c:	0607      	lsls	r7, r0, #24
 801902e:	f103 0104 	add.w	r1, r3, #4
 8019032:	6029      	str	r1, [r5, #0]
 8019034:	d501      	bpl.n	801903a <_printf_i+0xbe>
 8019036:	681e      	ldr	r6, [r3, #0]
 8019038:	e003      	b.n	8019042 <_printf_i+0xc6>
 801903a:	0646      	lsls	r6, r0, #25
 801903c:	d5fb      	bpl.n	8019036 <_printf_i+0xba>
 801903e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8019042:	2e00      	cmp	r6, #0
 8019044:	da03      	bge.n	801904e <_printf_i+0xd2>
 8019046:	232d      	movs	r3, #45	; 0x2d
 8019048:	4276      	negs	r6, r6
 801904a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801904e:	485a      	ldr	r0, [pc, #360]	; (80191b8 <_printf_i+0x23c>)
 8019050:	230a      	movs	r3, #10
 8019052:	e012      	b.n	801907a <_printf_i+0xfe>
 8019054:	682b      	ldr	r3, [r5, #0]
 8019056:	6820      	ldr	r0, [r4, #0]
 8019058:	1d19      	adds	r1, r3, #4
 801905a:	6029      	str	r1, [r5, #0]
 801905c:	0605      	lsls	r5, r0, #24
 801905e:	d501      	bpl.n	8019064 <_printf_i+0xe8>
 8019060:	681e      	ldr	r6, [r3, #0]
 8019062:	e002      	b.n	801906a <_printf_i+0xee>
 8019064:	0641      	lsls	r1, r0, #25
 8019066:	d5fb      	bpl.n	8019060 <_printf_i+0xe4>
 8019068:	881e      	ldrh	r6, [r3, #0]
 801906a:	4853      	ldr	r0, [pc, #332]	; (80191b8 <_printf_i+0x23c>)
 801906c:	2f6f      	cmp	r7, #111	; 0x6f
 801906e:	bf0c      	ite	eq
 8019070:	2308      	moveq	r3, #8
 8019072:	230a      	movne	r3, #10
 8019074:	2100      	movs	r1, #0
 8019076:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801907a:	6865      	ldr	r5, [r4, #4]
 801907c:	60a5      	str	r5, [r4, #8]
 801907e:	2d00      	cmp	r5, #0
 8019080:	bfa2      	ittt	ge
 8019082:	6821      	ldrge	r1, [r4, #0]
 8019084:	f021 0104 	bicge.w	r1, r1, #4
 8019088:	6021      	strge	r1, [r4, #0]
 801908a:	b90e      	cbnz	r6, 8019090 <_printf_i+0x114>
 801908c:	2d00      	cmp	r5, #0
 801908e:	d04b      	beq.n	8019128 <_printf_i+0x1ac>
 8019090:	4615      	mov	r5, r2
 8019092:	fbb6 f1f3 	udiv	r1, r6, r3
 8019096:	fb03 6711 	mls	r7, r3, r1, r6
 801909a:	5dc7      	ldrb	r7, [r0, r7]
 801909c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80190a0:	4637      	mov	r7, r6
 80190a2:	42bb      	cmp	r3, r7
 80190a4:	460e      	mov	r6, r1
 80190a6:	d9f4      	bls.n	8019092 <_printf_i+0x116>
 80190a8:	2b08      	cmp	r3, #8
 80190aa:	d10b      	bne.n	80190c4 <_printf_i+0x148>
 80190ac:	6823      	ldr	r3, [r4, #0]
 80190ae:	07de      	lsls	r6, r3, #31
 80190b0:	d508      	bpl.n	80190c4 <_printf_i+0x148>
 80190b2:	6923      	ldr	r3, [r4, #16]
 80190b4:	6861      	ldr	r1, [r4, #4]
 80190b6:	4299      	cmp	r1, r3
 80190b8:	bfde      	ittt	le
 80190ba:	2330      	movle	r3, #48	; 0x30
 80190bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80190c0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80190c4:	1b52      	subs	r2, r2, r5
 80190c6:	6122      	str	r2, [r4, #16]
 80190c8:	f8cd a000 	str.w	sl, [sp]
 80190cc:	464b      	mov	r3, r9
 80190ce:	aa03      	add	r2, sp, #12
 80190d0:	4621      	mov	r1, r4
 80190d2:	4640      	mov	r0, r8
 80190d4:	f7ff fee4 	bl	8018ea0 <_printf_common>
 80190d8:	3001      	adds	r0, #1
 80190da:	d14a      	bne.n	8019172 <_printf_i+0x1f6>
 80190dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80190e0:	b004      	add	sp, #16
 80190e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80190e6:	6823      	ldr	r3, [r4, #0]
 80190e8:	f043 0320 	orr.w	r3, r3, #32
 80190ec:	6023      	str	r3, [r4, #0]
 80190ee:	4833      	ldr	r0, [pc, #204]	; (80191bc <_printf_i+0x240>)
 80190f0:	2778      	movs	r7, #120	; 0x78
 80190f2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80190f6:	6823      	ldr	r3, [r4, #0]
 80190f8:	6829      	ldr	r1, [r5, #0]
 80190fa:	061f      	lsls	r7, r3, #24
 80190fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8019100:	d402      	bmi.n	8019108 <_printf_i+0x18c>
 8019102:	065f      	lsls	r7, r3, #25
 8019104:	bf48      	it	mi
 8019106:	b2b6      	uxthmi	r6, r6
 8019108:	07df      	lsls	r7, r3, #31
 801910a:	bf48      	it	mi
 801910c:	f043 0320 	orrmi.w	r3, r3, #32
 8019110:	6029      	str	r1, [r5, #0]
 8019112:	bf48      	it	mi
 8019114:	6023      	strmi	r3, [r4, #0]
 8019116:	b91e      	cbnz	r6, 8019120 <_printf_i+0x1a4>
 8019118:	6823      	ldr	r3, [r4, #0]
 801911a:	f023 0320 	bic.w	r3, r3, #32
 801911e:	6023      	str	r3, [r4, #0]
 8019120:	2310      	movs	r3, #16
 8019122:	e7a7      	b.n	8019074 <_printf_i+0xf8>
 8019124:	4824      	ldr	r0, [pc, #144]	; (80191b8 <_printf_i+0x23c>)
 8019126:	e7e4      	b.n	80190f2 <_printf_i+0x176>
 8019128:	4615      	mov	r5, r2
 801912a:	e7bd      	b.n	80190a8 <_printf_i+0x12c>
 801912c:	682b      	ldr	r3, [r5, #0]
 801912e:	6826      	ldr	r6, [r4, #0]
 8019130:	6961      	ldr	r1, [r4, #20]
 8019132:	1d18      	adds	r0, r3, #4
 8019134:	6028      	str	r0, [r5, #0]
 8019136:	0635      	lsls	r5, r6, #24
 8019138:	681b      	ldr	r3, [r3, #0]
 801913a:	d501      	bpl.n	8019140 <_printf_i+0x1c4>
 801913c:	6019      	str	r1, [r3, #0]
 801913e:	e002      	b.n	8019146 <_printf_i+0x1ca>
 8019140:	0670      	lsls	r0, r6, #25
 8019142:	d5fb      	bpl.n	801913c <_printf_i+0x1c0>
 8019144:	8019      	strh	r1, [r3, #0]
 8019146:	2300      	movs	r3, #0
 8019148:	6123      	str	r3, [r4, #16]
 801914a:	4615      	mov	r5, r2
 801914c:	e7bc      	b.n	80190c8 <_printf_i+0x14c>
 801914e:	682b      	ldr	r3, [r5, #0]
 8019150:	1d1a      	adds	r2, r3, #4
 8019152:	602a      	str	r2, [r5, #0]
 8019154:	681d      	ldr	r5, [r3, #0]
 8019156:	6862      	ldr	r2, [r4, #4]
 8019158:	2100      	movs	r1, #0
 801915a:	4628      	mov	r0, r5
 801915c:	f7e7 f858 	bl	8000210 <memchr>
 8019160:	b108      	cbz	r0, 8019166 <_printf_i+0x1ea>
 8019162:	1b40      	subs	r0, r0, r5
 8019164:	6060      	str	r0, [r4, #4]
 8019166:	6863      	ldr	r3, [r4, #4]
 8019168:	6123      	str	r3, [r4, #16]
 801916a:	2300      	movs	r3, #0
 801916c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019170:	e7aa      	b.n	80190c8 <_printf_i+0x14c>
 8019172:	6923      	ldr	r3, [r4, #16]
 8019174:	462a      	mov	r2, r5
 8019176:	4649      	mov	r1, r9
 8019178:	4640      	mov	r0, r8
 801917a:	47d0      	blx	sl
 801917c:	3001      	adds	r0, #1
 801917e:	d0ad      	beq.n	80190dc <_printf_i+0x160>
 8019180:	6823      	ldr	r3, [r4, #0]
 8019182:	079b      	lsls	r3, r3, #30
 8019184:	d413      	bmi.n	80191ae <_printf_i+0x232>
 8019186:	68e0      	ldr	r0, [r4, #12]
 8019188:	9b03      	ldr	r3, [sp, #12]
 801918a:	4298      	cmp	r0, r3
 801918c:	bfb8      	it	lt
 801918e:	4618      	movlt	r0, r3
 8019190:	e7a6      	b.n	80190e0 <_printf_i+0x164>
 8019192:	2301      	movs	r3, #1
 8019194:	4632      	mov	r2, r6
 8019196:	4649      	mov	r1, r9
 8019198:	4640      	mov	r0, r8
 801919a:	47d0      	blx	sl
 801919c:	3001      	adds	r0, #1
 801919e:	d09d      	beq.n	80190dc <_printf_i+0x160>
 80191a0:	3501      	adds	r5, #1
 80191a2:	68e3      	ldr	r3, [r4, #12]
 80191a4:	9903      	ldr	r1, [sp, #12]
 80191a6:	1a5b      	subs	r3, r3, r1
 80191a8:	42ab      	cmp	r3, r5
 80191aa:	dcf2      	bgt.n	8019192 <_printf_i+0x216>
 80191ac:	e7eb      	b.n	8019186 <_printf_i+0x20a>
 80191ae:	2500      	movs	r5, #0
 80191b0:	f104 0619 	add.w	r6, r4, #25
 80191b4:	e7f5      	b.n	80191a2 <_printf_i+0x226>
 80191b6:	bf00      	nop
 80191b8:	0801a3c5 	.word	0x0801a3c5
 80191bc:	0801a3d6 	.word	0x0801a3d6

080191c0 <__sflush_r>:
 80191c0:	898a      	ldrh	r2, [r1, #12]
 80191c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80191c6:	4605      	mov	r5, r0
 80191c8:	0710      	lsls	r0, r2, #28
 80191ca:	460c      	mov	r4, r1
 80191cc:	d458      	bmi.n	8019280 <__sflush_r+0xc0>
 80191ce:	684b      	ldr	r3, [r1, #4]
 80191d0:	2b00      	cmp	r3, #0
 80191d2:	dc05      	bgt.n	80191e0 <__sflush_r+0x20>
 80191d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80191d6:	2b00      	cmp	r3, #0
 80191d8:	dc02      	bgt.n	80191e0 <__sflush_r+0x20>
 80191da:	2000      	movs	r0, #0
 80191dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80191e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80191e2:	2e00      	cmp	r6, #0
 80191e4:	d0f9      	beq.n	80191da <__sflush_r+0x1a>
 80191e6:	2300      	movs	r3, #0
 80191e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80191ec:	682f      	ldr	r7, [r5, #0]
 80191ee:	6a21      	ldr	r1, [r4, #32]
 80191f0:	602b      	str	r3, [r5, #0]
 80191f2:	d032      	beq.n	801925a <__sflush_r+0x9a>
 80191f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80191f6:	89a3      	ldrh	r3, [r4, #12]
 80191f8:	075a      	lsls	r2, r3, #29
 80191fa:	d505      	bpl.n	8019208 <__sflush_r+0x48>
 80191fc:	6863      	ldr	r3, [r4, #4]
 80191fe:	1ac0      	subs	r0, r0, r3
 8019200:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019202:	b10b      	cbz	r3, 8019208 <__sflush_r+0x48>
 8019204:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019206:	1ac0      	subs	r0, r0, r3
 8019208:	2300      	movs	r3, #0
 801920a:	4602      	mov	r2, r0
 801920c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801920e:	6a21      	ldr	r1, [r4, #32]
 8019210:	4628      	mov	r0, r5
 8019212:	47b0      	blx	r6
 8019214:	1c43      	adds	r3, r0, #1
 8019216:	89a3      	ldrh	r3, [r4, #12]
 8019218:	d106      	bne.n	8019228 <__sflush_r+0x68>
 801921a:	6829      	ldr	r1, [r5, #0]
 801921c:	291d      	cmp	r1, #29
 801921e:	d82b      	bhi.n	8019278 <__sflush_r+0xb8>
 8019220:	4a29      	ldr	r2, [pc, #164]	; (80192c8 <__sflush_r+0x108>)
 8019222:	410a      	asrs	r2, r1
 8019224:	07d6      	lsls	r6, r2, #31
 8019226:	d427      	bmi.n	8019278 <__sflush_r+0xb8>
 8019228:	2200      	movs	r2, #0
 801922a:	6062      	str	r2, [r4, #4]
 801922c:	04d9      	lsls	r1, r3, #19
 801922e:	6922      	ldr	r2, [r4, #16]
 8019230:	6022      	str	r2, [r4, #0]
 8019232:	d504      	bpl.n	801923e <__sflush_r+0x7e>
 8019234:	1c42      	adds	r2, r0, #1
 8019236:	d101      	bne.n	801923c <__sflush_r+0x7c>
 8019238:	682b      	ldr	r3, [r5, #0]
 801923a:	b903      	cbnz	r3, 801923e <__sflush_r+0x7e>
 801923c:	6560      	str	r0, [r4, #84]	; 0x54
 801923e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019240:	602f      	str	r7, [r5, #0]
 8019242:	2900      	cmp	r1, #0
 8019244:	d0c9      	beq.n	80191da <__sflush_r+0x1a>
 8019246:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801924a:	4299      	cmp	r1, r3
 801924c:	d002      	beq.n	8019254 <__sflush_r+0x94>
 801924e:	4628      	mov	r0, r5
 8019250:	f7ff fb36 	bl	80188c0 <_free_r>
 8019254:	2000      	movs	r0, #0
 8019256:	6360      	str	r0, [r4, #52]	; 0x34
 8019258:	e7c0      	b.n	80191dc <__sflush_r+0x1c>
 801925a:	2301      	movs	r3, #1
 801925c:	4628      	mov	r0, r5
 801925e:	47b0      	blx	r6
 8019260:	1c41      	adds	r1, r0, #1
 8019262:	d1c8      	bne.n	80191f6 <__sflush_r+0x36>
 8019264:	682b      	ldr	r3, [r5, #0]
 8019266:	2b00      	cmp	r3, #0
 8019268:	d0c5      	beq.n	80191f6 <__sflush_r+0x36>
 801926a:	2b1d      	cmp	r3, #29
 801926c:	d001      	beq.n	8019272 <__sflush_r+0xb2>
 801926e:	2b16      	cmp	r3, #22
 8019270:	d101      	bne.n	8019276 <__sflush_r+0xb6>
 8019272:	602f      	str	r7, [r5, #0]
 8019274:	e7b1      	b.n	80191da <__sflush_r+0x1a>
 8019276:	89a3      	ldrh	r3, [r4, #12]
 8019278:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801927c:	81a3      	strh	r3, [r4, #12]
 801927e:	e7ad      	b.n	80191dc <__sflush_r+0x1c>
 8019280:	690f      	ldr	r7, [r1, #16]
 8019282:	2f00      	cmp	r7, #0
 8019284:	d0a9      	beq.n	80191da <__sflush_r+0x1a>
 8019286:	0793      	lsls	r3, r2, #30
 8019288:	680e      	ldr	r6, [r1, #0]
 801928a:	bf08      	it	eq
 801928c:	694b      	ldreq	r3, [r1, #20]
 801928e:	600f      	str	r7, [r1, #0]
 8019290:	bf18      	it	ne
 8019292:	2300      	movne	r3, #0
 8019294:	eba6 0807 	sub.w	r8, r6, r7
 8019298:	608b      	str	r3, [r1, #8]
 801929a:	f1b8 0f00 	cmp.w	r8, #0
 801929e:	dd9c      	ble.n	80191da <__sflush_r+0x1a>
 80192a0:	6a21      	ldr	r1, [r4, #32]
 80192a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80192a4:	4643      	mov	r3, r8
 80192a6:	463a      	mov	r2, r7
 80192a8:	4628      	mov	r0, r5
 80192aa:	47b0      	blx	r6
 80192ac:	2800      	cmp	r0, #0
 80192ae:	dc06      	bgt.n	80192be <__sflush_r+0xfe>
 80192b0:	89a3      	ldrh	r3, [r4, #12]
 80192b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80192b6:	81a3      	strh	r3, [r4, #12]
 80192b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80192bc:	e78e      	b.n	80191dc <__sflush_r+0x1c>
 80192be:	4407      	add	r7, r0
 80192c0:	eba8 0800 	sub.w	r8, r8, r0
 80192c4:	e7e9      	b.n	801929a <__sflush_r+0xda>
 80192c6:	bf00      	nop
 80192c8:	dfbffffe 	.word	0xdfbffffe

080192cc <_fflush_r>:
 80192cc:	b538      	push	{r3, r4, r5, lr}
 80192ce:	690b      	ldr	r3, [r1, #16]
 80192d0:	4605      	mov	r5, r0
 80192d2:	460c      	mov	r4, r1
 80192d4:	b913      	cbnz	r3, 80192dc <_fflush_r+0x10>
 80192d6:	2500      	movs	r5, #0
 80192d8:	4628      	mov	r0, r5
 80192da:	bd38      	pop	{r3, r4, r5, pc}
 80192dc:	b118      	cbz	r0, 80192e6 <_fflush_r+0x1a>
 80192de:	6a03      	ldr	r3, [r0, #32]
 80192e0:	b90b      	cbnz	r3, 80192e6 <_fflush_r+0x1a>
 80192e2:	f7fe ff3f 	bl	8018164 <__sinit>
 80192e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80192ea:	2b00      	cmp	r3, #0
 80192ec:	d0f3      	beq.n	80192d6 <_fflush_r+0xa>
 80192ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80192f0:	07d0      	lsls	r0, r2, #31
 80192f2:	d404      	bmi.n	80192fe <_fflush_r+0x32>
 80192f4:	0599      	lsls	r1, r3, #22
 80192f6:	d402      	bmi.n	80192fe <_fflush_r+0x32>
 80192f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80192fa:	f7ff fa9e 	bl	801883a <__retarget_lock_acquire_recursive>
 80192fe:	4628      	mov	r0, r5
 8019300:	4621      	mov	r1, r4
 8019302:	f7ff ff5d 	bl	80191c0 <__sflush_r>
 8019306:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019308:	07da      	lsls	r2, r3, #31
 801930a:	4605      	mov	r5, r0
 801930c:	d4e4      	bmi.n	80192d8 <_fflush_r+0xc>
 801930e:	89a3      	ldrh	r3, [r4, #12]
 8019310:	059b      	lsls	r3, r3, #22
 8019312:	d4e1      	bmi.n	80192d8 <_fflush_r+0xc>
 8019314:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019316:	f7ff fa91 	bl	801883c <__retarget_lock_release_recursive>
 801931a:	e7dd      	b.n	80192d8 <_fflush_r+0xc>

0801931c <fiprintf>:
 801931c:	b40e      	push	{r1, r2, r3}
 801931e:	b503      	push	{r0, r1, lr}
 8019320:	4601      	mov	r1, r0
 8019322:	ab03      	add	r3, sp, #12
 8019324:	4805      	ldr	r0, [pc, #20]	; (801933c <fiprintf+0x20>)
 8019326:	f853 2b04 	ldr.w	r2, [r3], #4
 801932a:	6800      	ldr	r0, [r0, #0]
 801932c:	9301      	str	r3, [sp, #4]
 801932e:	f7ff fc9d 	bl	8018c6c <_vfiprintf_r>
 8019332:	b002      	add	sp, #8
 8019334:	f85d eb04 	ldr.w	lr, [sp], #4
 8019338:	b003      	add	sp, #12
 801933a:	4770      	bx	lr
 801933c:	200000cc 	.word	0x200000cc

08019340 <__swhatbuf_r>:
 8019340:	b570      	push	{r4, r5, r6, lr}
 8019342:	460c      	mov	r4, r1
 8019344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019348:	2900      	cmp	r1, #0
 801934a:	b096      	sub	sp, #88	; 0x58
 801934c:	4615      	mov	r5, r2
 801934e:	461e      	mov	r6, r3
 8019350:	da0d      	bge.n	801936e <__swhatbuf_r+0x2e>
 8019352:	89a3      	ldrh	r3, [r4, #12]
 8019354:	f013 0f80 	tst.w	r3, #128	; 0x80
 8019358:	f04f 0100 	mov.w	r1, #0
 801935c:	bf0c      	ite	eq
 801935e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8019362:	2340      	movne	r3, #64	; 0x40
 8019364:	2000      	movs	r0, #0
 8019366:	6031      	str	r1, [r6, #0]
 8019368:	602b      	str	r3, [r5, #0]
 801936a:	b016      	add	sp, #88	; 0x58
 801936c:	bd70      	pop	{r4, r5, r6, pc}
 801936e:	466a      	mov	r2, sp
 8019370:	f000 f848 	bl	8019404 <_fstat_r>
 8019374:	2800      	cmp	r0, #0
 8019376:	dbec      	blt.n	8019352 <__swhatbuf_r+0x12>
 8019378:	9901      	ldr	r1, [sp, #4]
 801937a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801937e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8019382:	4259      	negs	r1, r3
 8019384:	4159      	adcs	r1, r3
 8019386:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801938a:	e7eb      	b.n	8019364 <__swhatbuf_r+0x24>

0801938c <__smakebuf_r>:
 801938c:	898b      	ldrh	r3, [r1, #12]
 801938e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019390:	079d      	lsls	r5, r3, #30
 8019392:	4606      	mov	r6, r0
 8019394:	460c      	mov	r4, r1
 8019396:	d507      	bpl.n	80193a8 <__smakebuf_r+0x1c>
 8019398:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801939c:	6023      	str	r3, [r4, #0]
 801939e:	6123      	str	r3, [r4, #16]
 80193a0:	2301      	movs	r3, #1
 80193a2:	6163      	str	r3, [r4, #20]
 80193a4:	b002      	add	sp, #8
 80193a6:	bd70      	pop	{r4, r5, r6, pc}
 80193a8:	ab01      	add	r3, sp, #4
 80193aa:	466a      	mov	r2, sp
 80193ac:	f7ff ffc8 	bl	8019340 <__swhatbuf_r>
 80193b0:	9900      	ldr	r1, [sp, #0]
 80193b2:	4605      	mov	r5, r0
 80193b4:	4630      	mov	r0, r6
 80193b6:	f7fe fc9d 	bl	8017cf4 <_malloc_r>
 80193ba:	b948      	cbnz	r0, 80193d0 <__smakebuf_r+0x44>
 80193bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80193c0:	059a      	lsls	r2, r3, #22
 80193c2:	d4ef      	bmi.n	80193a4 <__smakebuf_r+0x18>
 80193c4:	f023 0303 	bic.w	r3, r3, #3
 80193c8:	f043 0302 	orr.w	r3, r3, #2
 80193cc:	81a3      	strh	r3, [r4, #12]
 80193ce:	e7e3      	b.n	8019398 <__smakebuf_r+0xc>
 80193d0:	89a3      	ldrh	r3, [r4, #12]
 80193d2:	6020      	str	r0, [r4, #0]
 80193d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80193d8:	81a3      	strh	r3, [r4, #12]
 80193da:	9b00      	ldr	r3, [sp, #0]
 80193dc:	6163      	str	r3, [r4, #20]
 80193de:	9b01      	ldr	r3, [sp, #4]
 80193e0:	6120      	str	r0, [r4, #16]
 80193e2:	b15b      	cbz	r3, 80193fc <__smakebuf_r+0x70>
 80193e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80193e8:	4630      	mov	r0, r6
 80193ea:	f000 f81d 	bl	8019428 <_isatty_r>
 80193ee:	b128      	cbz	r0, 80193fc <__smakebuf_r+0x70>
 80193f0:	89a3      	ldrh	r3, [r4, #12]
 80193f2:	f023 0303 	bic.w	r3, r3, #3
 80193f6:	f043 0301 	orr.w	r3, r3, #1
 80193fa:	81a3      	strh	r3, [r4, #12]
 80193fc:	89a3      	ldrh	r3, [r4, #12]
 80193fe:	431d      	orrs	r5, r3
 8019400:	81a5      	strh	r5, [r4, #12]
 8019402:	e7cf      	b.n	80193a4 <__smakebuf_r+0x18>

08019404 <_fstat_r>:
 8019404:	b538      	push	{r3, r4, r5, lr}
 8019406:	4d07      	ldr	r5, [pc, #28]	; (8019424 <_fstat_r+0x20>)
 8019408:	2300      	movs	r3, #0
 801940a:	4604      	mov	r4, r0
 801940c:	4608      	mov	r0, r1
 801940e:	4611      	mov	r1, r2
 8019410:	602b      	str	r3, [r5, #0]
 8019412:	f7e9 fe05 	bl	8003020 <_fstat>
 8019416:	1c43      	adds	r3, r0, #1
 8019418:	d102      	bne.n	8019420 <_fstat_r+0x1c>
 801941a:	682b      	ldr	r3, [r5, #0]
 801941c:	b103      	cbz	r3, 8019420 <_fstat_r+0x1c>
 801941e:	6023      	str	r3, [r4, #0]
 8019420:	bd38      	pop	{r3, r4, r5, pc}
 8019422:	bf00      	nop
 8019424:	20009e7c 	.word	0x20009e7c

08019428 <_isatty_r>:
 8019428:	b538      	push	{r3, r4, r5, lr}
 801942a:	4d06      	ldr	r5, [pc, #24]	; (8019444 <_isatty_r+0x1c>)
 801942c:	2300      	movs	r3, #0
 801942e:	4604      	mov	r4, r0
 8019430:	4608      	mov	r0, r1
 8019432:	602b      	str	r3, [r5, #0]
 8019434:	f7e9 fd62 	bl	8002efc <_isatty>
 8019438:	1c43      	adds	r3, r0, #1
 801943a:	d102      	bne.n	8019442 <_isatty_r+0x1a>
 801943c:	682b      	ldr	r3, [r5, #0]
 801943e:	b103      	cbz	r3, 8019442 <_isatty_r+0x1a>
 8019440:	6023      	str	r3, [r4, #0]
 8019442:	bd38      	pop	{r3, r4, r5, pc}
 8019444:	20009e7c 	.word	0x20009e7c

08019448 <abort>:
 8019448:	b508      	push	{r3, lr}
 801944a:	2006      	movs	r0, #6
 801944c:	f000 f82c 	bl	80194a8 <raise>
 8019450:	2001      	movs	r0, #1
 8019452:	f000 f845 	bl	80194e0 <_exit>

08019456 <_raise_r>:
 8019456:	291f      	cmp	r1, #31
 8019458:	b538      	push	{r3, r4, r5, lr}
 801945a:	4604      	mov	r4, r0
 801945c:	460d      	mov	r5, r1
 801945e:	d904      	bls.n	801946a <_raise_r+0x14>
 8019460:	2316      	movs	r3, #22
 8019462:	6003      	str	r3, [r0, #0]
 8019464:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019468:	bd38      	pop	{r3, r4, r5, pc}
 801946a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801946c:	b112      	cbz	r2, 8019474 <_raise_r+0x1e>
 801946e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019472:	b94b      	cbnz	r3, 8019488 <_raise_r+0x32>
 8019474:	4620      	mov	r0, r4
 8019476:	f000 f831 	bl	80194dc <_getpid_r>
 801947a:	462a      	mov	r2, r5
 801947c:	4601      	mov	r1, r0
 801947e:	4620      	mov	r0, r4
 8019480:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019484:	f000 b818 	b.w	80194b8 <_kill_r>
 8019488:	2b01      	cmp	r3, #1
 801948a:	d00a      	beq.n	80194a2 <_raise_r+0x4c>
 801948c:	1c59      	adds	r1, r3, #1
 801948e:	d103      	bne.n	8019498 <_raise_r+0x42>
 8019490:	2316      	movs	r3, #22
 8019492:	6003      	str	r3, [r0, #0]
 8019494:	2001      	movs	r0, #1
 8019496:	e7e7      	b.n	8019468 <_raise_r+0x12>
 8019498:	2400      	movs	r4, #0
 801949a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801949e:	4628      	mov	r0, r5
 80194a0:	4798      	blx	r3
 80194a2:	2000      	movs	r0, #0
 80194a4:	e7e0      	b.n	8019468 <_raise_r+0x12>
	...

080194a8 <raise>:
 80194a8:	4b02      	ldr	r3, [pc, #8]	; (80194b4 <raise+0xc>)
 80194aa:	4601      	mov	r1, r0
 80194ac:	6818      	ldr	r0, [r3, #0]
 80194ae:	f7ff bfd2 	b.w	8019456 <_raise_r>
 80194b2:	bf00      	nop
 80194b4:	200000cc 	.word	0x200000cc

080194b8 <_kill_r>:
 80194b8:	b538      	push	{r3, r4, r5, lr}
 80194ba:	4d07      	ldr	r5, [pc, #28]	; (80194d8 <_kill_r+0x20>)
 80194bc:	2300      	movs	r3, #0
 80194be:	4604      	mov	r4, r0
 80194c0:	4608      	mov	r0, r1
 80194c2:	4611      	mov	r1, r2
 80194c4:	602b      	str	r3, [r5, #0]
 80194c6:	f7e9 fdce 	bl	8003066 <_kill>
 80194ca:	1c43      	adds	r3, r0, #1
 80194cc:	d102      	bne.n	80194d4 <_kill_r+0x1c>
 80194ce:	682b      	ldr	r3, [r5, #0]
 80194d0:	b103      	cbz	r3, 80194d4 <_kill_r+0x1c>
 80194d2:	6023      	str	r3, [r4, #0]
 80194d4:	bd38      	pop	{r3, r4, r5, pc}
 80194d6:	bf00      	nop
 80194d8:	20009e7c 	.word	0x20009e7c

080194dc <_getpid_r>:
 80194dc:	f7e9 bdbb 	b.w	8003056 <_getpid>

080194e0 <_exit>:
 80194e0:	e7fe      	b.n	80194e0 <_exit>
	...

080194e4 <_init>:
 80194e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80194e6:	bf00      	nop
 80194e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80194ea:	bc08      	pop	{r3}
 80194ec:	469e      	mov	lr, r3
 80194ee:	4770      	bx	lr

080194f0 <_fini>:
 80194f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80194f2:	bf00      	nop
 80194f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80194f6:	bc08      	pop	{r3}
 80194f8:	469e      	mov	lr, r3
 80194fa:	4770      	bx	lr
