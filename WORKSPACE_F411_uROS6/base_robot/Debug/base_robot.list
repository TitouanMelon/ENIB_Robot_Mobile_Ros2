
base_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017220  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b24  080173c0  080173c0  000273c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017ee4  08017ee4  000300dc  2**0
                  CONTENTS
  4 .ARM          00000008  08017ee4  08017ee4  00027ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017eec  08017eec  000300dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017eec  08017eec  00027eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017ef0  08017ef0  00027ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  08017ef4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000dee0  200000e0  08017fd0  000300e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000dfc0  08017fd0  0003dfc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300dc  2**0
                  CONTENTS, READONLY
 12 .comment      0000009c  00000000  00000000  0003010c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000be42a  00000000  00000000  000301a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0001415f  00000000  00000000  000ee5d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003de0  00000000  00000000  00102738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016f9  00000000  00000000  00106518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020659  00000000  00000000  00107c11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00054ffd  00000000  00000000  0012826a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b778b  00000000  00000000  0017d267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000f7b4  00000000  00000000  002349f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  002441a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0004be3f  00000000  00000000  00244206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00008b50  00000000  00000000  00290045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000e0 	.word	0x200000e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080173a8 	.word	0x080173a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000e4 	.word	0x200000e4
 80001dc:	080173a8 	.word	0x080173a8

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2f>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b64:	bf24      	itt	cs
 8000b66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6e:	d90d      	bls.n	8000b8c <__aeabi_d2f+0x30>
 8000b70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b84:	bf08      	it	eq
 8000b86:	f020 0001 	biceq.w	r0, r0, #1
 8000b8a:	4770      	bx	lr
 8000b8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b90:	d121      	bne.n	8000bd6 <__aeabi_d2f+0x7a>
 8000b92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b96:	bfbc      	itt	lt
 8000b98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	4770      	bxlt	lr
 8000b9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba6:	f1c2 0218 	rsb	r2, r2, #24
 8000baa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	f040 0001 	orrne.w	r0, r0, #1
 8000bbc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc8:	ea40 000c 	orr.w	r0, r0, ip
 8000bcc:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd4:	e7cc      	b.n	8000b70 <__aeabi_d2f+0x14>
 8000bd6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bda:	d107      	bne.n	8000bec <__aeabi_d2f+0x90>
 8000bdc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be0:	bf1e      	ittt	ne
 8000be2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bea:	4770      	bxne	lr
 8000bec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <__aeabi_ldivmod>:
 8000bfc:	b97b      	cbnz	r3, 8000c1e <__aeabi_ldivmod+0x22>
 8000bfe:	b972      	cbnz	r2, 8000c1e <__aeabi_ldivmod+0x22>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bfbe      	ittt	lt
 8000c04:	2000      	movlt	r0, #0
 8000c06:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c0a:	e006      	blt.n	8000c1a <__aeabi_ldivmod+0x1e>
 8000c0c:	bf08      	it	eq
 8000c0e:	2800      	cmpeq	r0, #0
 8000c10:	bf1c      	itt	ne
 8000c12:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c16:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c1a:	f000 b9bb 	b.w	8000f94 <__aeabi_idiv0>
 8000c1e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c22:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c26:	2900      	cmp	r1, #0
 8000c28:	db09      	blt.n	8000c3e <__aeabi_ldivmod+0x42>
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	db1a      	blt.n	8000c64 <__aeabi_ldivmod+0x68>
 8000c2e:	f000 f84d 	bl	8000ccc <__udivmoddi4>
 8000c32:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c3a:	b004      	add	sp, #16
 8000c3c:	4770      	bx	lr
 8000c3e:	4240      	negs	r0, r0
 8000c40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	db1b      	blt.n	8000c80 <__aeabi_ldivmod+0x84>
 8000c48:	f000 f840 	bl	8000ccc <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4240      	negs	r0, r0
 8000c58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c5c:	4252      	negs	r2, r2
 8000c5e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c62:	4770      	bx	lr
 8000c64:	4252      	negs	r2, r2
 8000c66:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c6a:	f000 f82f 	bl	8000ccc <__udivmoddi4>
 8000c6e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c76:	b004      	add	sp, #16
 8000c78:	4240      	negs	r0, r0
 8000c7a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7e:	4770      	bx	lr
 8000c80:	4252      	negs	r2, r2
 8000c82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c86:	f000 f821 	bl	8000ccc <__udivmoddi4>
 8000c8a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c92:	b004      	add	sp, #16
 8000c94:	4252      	negs	r2, r2
 8000c96:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c9a:	4770      	bx	lr

08000c9c <__aeabi_uldivmod>:
 8000c9c:	b953      	cbnz	r3, 8000cb4 <__aeabi_uldivmod+0x18>
 8000c9e:	b94a      	cbnz	r2, 8000cb4 <__aeabi_uldivmod+0x18>
 8000ca0:	2900      	cmp	r1, #0
 8000ca2:	bf08      	it	eq
 8000ca4:	2800      	cmpeq	r0, #0
 8000ca6:	bf1c      	itt	ne
 8000ca8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cac:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cb0:	f000 b970 	b.w	8000f94 <__aeabi_idiv0>
 8000cb4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cbc:	f000 f806 	bl	8000ccc <__udivmoddi4>
 8000cc0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc8:	b004      	add	sp, #16
 8000cca:	4770      	bx	lr

08000ccc <__udivmoddi4>:
 8000ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd0:	9e08      	ldr	r6, [sp, #32]
 8000cd2:	460d      	mov	r5, r1
 8000cd4:	4604      	mov	r4, r0
 8000cd6:	460f      	mov	r7, r1
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d14a      	bne.n	8000d72 <__udivmoddi4+0xa6>
 8000cdc:	428a      	cmp	r2, r1
 8000cde:	4694      	mov	ip, r2
 8000ce0:	d965      	bls.n	8000dae <__udivmoddi4+0xe2>
 8000ce2:	fab2 f382 	clz	r3, r2
 8000ce6:	b143      	cbz	r3, 8000cfa <__udivmoddi4+0x2e>
 8000ce8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cec:	f1c3 0220 	rsb	r2, r3, #32
 8000cf0:	409f      	lsls	r7, r3
 8000cf2:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf6:	4317      	orrs	r7, r2
 8000cf8:	409c      	lsls	r4, r3
 8000cfa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cfe:	fa1f f58c 	uxth.w	r5, ip
 8000d02:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d06:	0c22      	lsrs	r2, r4, #16
 8000d08:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d0c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d10:	fb01 f005 	mul.w	r0, r1, r5
 8000d14:	4290      	cmp	r0, r2
 8000d16:	d90a      	bls.n	8000d2e <__udivmoddi4+0x62>
 8000d18:	eb1c 0202 	adds.w	r2, ip, r2
 8000d1c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d20:	f080 811c 	bcs.w	8000f5c <__udivmoddi4+0x290>
 8000d24:	4290      	cmp	r0, r2
 8000d26:	f240 8119 	bls.w	8000f5c <__udivmoddi4+0x290>
 8000d2a:	3902      	subs	r1, #2
 8000d2c:	4462      	add	r2, ip
 8000d2e:	1a12      	subs	r2, r2, r0
 8000d30:	b2a4      	uxth	r4, r4
 8000d32:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d36:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d3a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3e:	fb00 f505 	mul.w	r5, r0, r5
 8000d42:	42a5      	cmp	r5, r4
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x90>
 8000d46:	eb1c 0404 	adds.w	r4, ip, r4
 8000d4a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d4e:	f080 8107 	bcs.w	8000f60 <__udivmoddi4+0x294>
 8000d52:	42a5      	cmp	r5, r4
 8000d54:	f240 8104 	bls.w	8000f60 <__udivmoddi4+0x294>
 8000d58:	4464      	add	r4, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d60:	1b64      	subs	r4, r4, r5
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11e      	cbz	r6, 8000d6e <__udivmoddi4+0xa2>
 8000d66:	40dc      	lsrs	r4, r3
 8000d68:	2300      	movs	r3, #0
 8000d6a:	e9c6 4300 	strd	r4, r3, [r6]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d908      	bls.n	8000d88 <__udivmoddi4+0xbc>
 8000d76:	2e00      	cmp	r6, #0
 8000d78:	f000 80ed 	beq.w	8000f56 <__udivmoddi4+0x28a>
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	e9c6 0500 	strd	r0, r5, [r6]
 8000d82:	4608      	mov	r0, r1
 8000d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d88:	fab3 f183 	clz	r1, r3
 8000d8c:	2900      	cmp	r1, #0
 8000d8e:	d149      	bne.n	8000e24 <__udivmoddi4+0x158>
 8000d90:	42ab      	cmp	r3, r5
 8000d92:	d302      	bcc.n	8000d9a <__udivmoddi4+0xce>
 8000d94:	4282      	cmp	r2, r0
 8000d96:	f200 80f8 	bhi.w	8000f8a <__udivmoddi4+0x2be>
 8000d9a:	1a84      	subs	r4, r0, r2
 8000d9c:	eb65 0203 	sbc.w	r2, r5, r3
 8000da0:	2001      	movs	r0, #1
 8000da2:	4617      	mov	r7, r2
 8000da4:	2e00      	cmp	r6, #0
 8000da6:	d0e2      	beq.n	8000d6e <__udivmoddi4+0xa2>
 8000da8:	e9c6 4700 	strd	r4, r7, [r6]
 8000dac:	e7df      	b.n	8000d6e <__udivmoddi4+0xa2>
 8000dae:	b902      	cbnz	r2, 8000db2 <__udivmoddi4+0xe6>
 8000db0:	deff      	udf	#255	; 0xff
 8000db2:	fab2 f382 	clz	r3, r2
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	f040 8090 	bne.w	8000edc <__udivmoddi4+0x210>
 8000dbc:	1a8a      	subs	r2, r1, r2
 8000dbe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc2:	fa1f fe8c 	uxth.w	lr, ip
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dcc:	fb07 2015 	mls	r0, r7, r5, r2
 8000dd0:	0c22      	lsrs	r2, r4, #16
 8000dd2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dd6:	fb0e f005 	mul.w	r0, lr, r5
 8000dda:	4290      	cmp	r0, r2
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x124>
 8000dde:	eb1c 0202 	adds.w	r2, ip, r2
 8000de2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x122>
 8000de8:	4290      	cmp	r0, r2
 8000dea:	f200 80cb 	bhi.w	8000f84 <__udivmoddi4+0x2b8>
 8000dee:	4645      	mov	r5, r8
 8000df0:	1a12      	subs	r2, r2, r0
 8000df2:	b2a4      	uxth	r4, r4
 8000df4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000df8:	fb07 2210 	mls	r2, r7, r0, r2
 8000dfc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e00:	fb0e fe00 	mul.w	lr, lr, r0
 8000e04:	45a6      	cmp	lr, r4
 8000e06:	d908      	bls.n	8000e1a <__udivmoddi4+0x14e>
 8000e08:	eb1c 0404 	adds.w	r4, ip, r4
 8000e0c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e10:	d202      	bcs.n	8000e18 <__udivmoddi4+0x14c>
 8000e12:	45a6      	cmp	lr, r4
 8000e14:	f200 80bb 	bhi.w	8000f8e <__udivmoddi4+0x2c2>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	eba4 040e 	sub.w	r4, r4, lr
 8000e1e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e22:	e79f      	b.n	8000d64 <__udivmoddi4+0x98>
 8000e24:	f1c1 0720 	rsb	r7, r1, #32
 8000e28:	408b      	lsls	r3, r1
 8000e2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e32:	fa05 f401 	lsl.w	r4, r5, r1
 8000e36:	fa20 f307 	lsr.w	r3, r0, r7
 8000e3a:	40fd      	lsrs	r5, r7
 8000e3c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e40:	4323      	orrs	r3, r4
 8000e42:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e46:	fa1f fe8c 	uxth.w	lr, ip
 8000e4a:	fb09 5518 	mls	r5, r9, r8, r5
 8000e4e:	0c1c      	lsrs	r4, r3, #16
 8000e50:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e54:	fb08 f50e 	mul.w	r5, r8, lr
 8000e58:	42a5      	cmp	r5, r4
 8000e5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5e:	fa00 f001 	lsl.w	r0, r0, r1
 8000e62:	d90b      	bls.n	8000e7c <__udivmoddi4+0x1b0>
 8000e64:	eb1c 0404 	adds.w	r4, ip, r4
 8000e68:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e6c:	f080 8088 	bcs.w	8000f80 <__udivmoddi4+0x2b4>
 8000e70:	42a5      	cmp	r5, r4
 8000e72:	f240 8085 	bls.w	8000f80 <__udivmoddi4+0x2b4>
 8000e76:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7a:	4464      	add	r4, ip
 8000e7c:	1b64      	subs	r4, r4, r5
 8000e7e:	b29d      	uxth	r5, r3
 8000e80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e84:	fb09 4413 	mls	r4, r9, r3, r4
 8000e88:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e8c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e90:	45a6      	cmp	lr, r4
 8000e92:	d908      	bls.n	8000ea6 <__udivmoddi4+0x1da>
 8000e94:	eb1c 0404 	adds.w	r4, ip, r4
 8000e98:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e9c:	d26c      	bcs.n	8000f78 <__udivmoddi4+0x2ac>
 8000e9e:	45a6      	cmp	lr, r4
 8000ea0:	d96a      	bls.n	8000f78 <__udivmoddi4+0x2ac>
 8000ea2:	3b02      	subs	r3, #2
 8000ea4:	4464      	add	r4, ip
 8000ea6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000eaa:	fba3 9502 	umull	r9, r5, r3, r2
 8000eae:	eba4 040e 	sub.w	r4, r4, lr
 8000eb2:	42ac      	cmp	r4, r5
 8000eb4:	46c8      	mov	r8, r9
 8000eb6:	46ae      	mov	lr, r5
 8000eb8:	d356      	bcc.n	8000f68 <__udivmoddi4+0x29c>
 8000eba:	d053      	beq.n	8000f64 <__udivmoddi4+0x298>
 8000ebc:	b156      	cbz	r6, 8000ed4 <__udivmoddi4+0x208>
 8000ebe:	ebb0 0208 	subs.w	r2, r0, r8
 8000ec2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ec6:	fa04 f707 	lsl.w	r7, r4, r7
 8000eca:	40ca      	lsrs	r2, r1
 8000ecc:	40cc      	lsrs	r4, r1
 8000ece:	4317      	orrs	r7, r2
 8000ed0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000edc:	f1c3 0120 	rsb	r1, r3, #32
 8000ee0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ee4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ee8:	fa25 f101 	lsr.w	r1, r5, r1
 8000eec:	409d      	lsls	r5, r3
 8000eee:	432a      	orrs	r2, r5
 8000ef0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef4:	fa1f fe8c 	uxth.w	lr, ip
 8000ef8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000efc:	fb07 1510 	mls	r5, r7, r0, r1
 8000f00:	0c11      	lsrs	r1, r2, #16
 8000f02:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f06:	fb00 f50e 	mul.w	r5, r0, lr
 8000f0a:	428d      	cmp	r5, r1
 8000f0c:	fa04 f403 	lsl.w	r4, r4, r3
 8000f10:	d908      	bls.n	8000f24 <__udivmoddi4+0x258>
 8000f12:	eb1c 0101 	adds.w	r1, ip, r1
 8000f16:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f1a:	d22f      	bcs.n	8000f7c <__udivmoddi4+0x2b0>
 8000f1c:	428d      	cmp	r5, r1
 8000f1e:	d92d      	bls.n	8000f7c <__udivmoddi4+0x2b0>
 8000f20:	3802      	subs	r0, #2
 8000f22:	4461      	add	r1, ip
 8000f24:	1b49      	subs	r1, r1, r5
 8000f26:	b292      	uxth	r2, r2
 8000f28:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f2c:	fb07 1115 	mls	r1, r7, r5, r1
 8000f30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f34:	fb05 f10e 	mul.w	r1, r5, lr
 8000f38:	4291      	cmp	r1, r2
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x282>
 8000f3c:	eb1c 0202 	adds.w	r2, ip, r2
 8000f40:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f44:	d216      	bcs.n	8000f74 <__udivmoddi4+0x2a8>
 8000f46:	4291      	cmp	r1, r2
 8000f48:	d914      	bls.n	8000f74 <__udivmoddi4+0x2a8>
 8000f4a:	3d02      	subs	r5, #2
 8000f4c:	4462      	add	r2, ip
 8000f4e:	1a52      	subs	r2, r2, r1
 8000f50:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f54:	e738      	b.n	8000dc8 <__udivmoddi4+0xfc>
 8000f56:	4631      	mov	r1, r6
 8000f58:	4630      	mov	r0, r6
 8000f5a:	e708      	b.n	8000d6e <__udivmoddi4+0xa2>
 8000f5c:	4639      	mov	r1, r7
 8000f5e:	e6e6      	b.n	8000d2e <__udivmoddi4+0x62>
 8000f60:	4610      	mov	r0, r2
 8000f62:	e6fb      	b.n	8000d5c <__udivmoddi4+0x90>
 8000f64:	4548      	cmp	r0, r9
 8000f66:	d2a9      	bcs.n	8000ebc <__udivmoddi4+0x1f0>
 8000f68:	ebb9 0802 	subs.w	r8, r9, r2
 8000f6c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f70:	3b01      	subs	r3, #1
 8000f72:	e7a3      	b.n	8000ebc <__udivmoddi4+0x1f0>
 8000f74:	4645      	mov	r5, r8
 8000f76:	e7ea      	b.n	8000f4e <__udivmoddi4+0x282>
 8000f78:	462b      	mov	r3, r5
 8000f7a:	e794      	b.n	8000ea6 <__udivmoddi4+0x1da>
 8000f7c:	4640      	mov	r0, r8
 8000f7e:	e7d1      	b.n	8000f24 <__udivmoddi4+0x258>
 8000f80:	46d0      	mov	r8, sl
 8000f82:	e77b      	b.n	8000e7c <__udivmoddi4+0x1b0>
 8000f84:	3d02      	subs	r5, #2
 8000f86:	4462      	add	r2, ip
 8000f88:	e732      	b.n	8000df0 <__udivmoddi4+0x124>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e70a      	b.n	8000da4 <__udivmoddi4+0xd8>
 8000f8e:	4464      	add	r4, ip
 8000f90:	3802      	subs	r0, #2
 8000f92:	e742      	b.n	8000e1a <__udivmoddi4+0x14e>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <writeReg>:
bool performSingleRefCalibration(uint8_t vhv_init_byte);
//---------------------------------------------------------
// I2C communication Functions
//---------------------------------------------------------
// Write an 8-bit register
void writeReg(uint8_t reg, uint8_t value) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	460a      	mov	r2, r1
 8000fa2:	71fb      	strb	r3, [r7, #7]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	71bb      	strb	r3, [r7, #6]
	i2c1_WriteRegBuffer(0x53,reg,&value,1);
 8000fa8:	1dba      	adds	r2, r7, #6
 8000faa:	79f9      	ldrb	r1, [r7, #7]
 8000fac:	2301      	movs	r3, #1
 8000fae:	2053      	movs	r0, #83	; 0x53
 8000fb0:	f000 fee2 	bl	8001d78 <i2c1_WriteRegBuffer>

}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <writeReg16Bit>:

// Write a 16-bit register
void writeReg16Bit(uint8_t reg, uint16_t value){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	460a      	mov	r2, r1
 8000fc6:	71fb      	strb	r3, [r7, #7]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	80bb      	strh	r3, [r7, #4]
	uint8_t tab[2];
	tab[0]= ((value >> 8));
 8000fcc:	88bb      	ldrh	r3, [r7, #4]
 8000fce:	0a1b      	lsrs	r3, r3, #8
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	733b      	strb	r3, [r7, #12]
	tab[1] = ((value ) & 0xFF);
 8000fd6:	88bb      	ldrh	r3, [r7, #4]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	737b      	strb	r3, [r7, #13]
	i2c1_WriteRegBuffer(0x53,reg,tab,2);
 8000fdc:	f107 020c 	add.w	r2, r7, #12
 8000fe0:	79f9      	ldrb	r1, [r7, #7]
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	2053      	movs	r0, #83	; 0x53
 8000fe6:	f000 fec7 	bl	8001d78 <i2c1_WriteRegBuffer>

}
 8000fea:	bf00      	nop
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <readReg>:
		tab[0] = ((value ) & 0xFF);
		i2c1_WriteRegBuffer(0x53,reg,tab,4);
}

// Read an 8-bit register
uint8_t readReg(uint8_t reg) {
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b084      	sub	sp, #16
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	71fb      	strb	r3, [r7, #7]
  	uint8_t value=0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	73fb      	strb	r3, [r7, #15]
  	i2c1_ReadRegBuffer(0x53,reg,&value,1);
 8001000:	f107 020f 	add.w	r2, r7, #15
 8001004:	79f9      	ldrb	r1, [r7, #7]
 8001006:	2301      	movs	r3, #1
 8001008:	2053      	movs	r0, #83	; 0x53
 800100a:	f000 fe83 	bl	8001d14 <i2c1_ReadRegBuffer>
  	return value;
 800100e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <readReg16Bit>:

// Read a 16-bit register
uint16_t readReg16Bit(uint8_t reg) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
	uint8_t tab[2];
	i2c1_ReadRegBuffer(0x53,reg,tab,2);
 8001022:	f107 020c 	add.w	r2, r7, #12
 8001026:	79f9      	ldrb	r1, [r7, #7]
 8001028:	2302      	movs	r3, #2
 800102a:	2053      	movs	r0, #83	; 0x53
 800102c:	f000 fe72 	bl	8001d14 <i2c1_ReadRegBuffer>
  	uint16_t value= ((uint16_t)tab[0] << 8) | (uint16_t)tab[1];
 8001030:	7b3b      	ldrb	r3, [r7, #12]
 8001032:	021b      	lsls	r3, r3, #8
 8001034:	b21a      	sxth	r2, r3
 8001036:	7b7b      	ldrb	r3, [r7, #13]
 8001038:	b21b      	sxth	r3, r3
 800103a:	4313      	orrs	r3, r2
 800103c:	b21b      	sxth	r3, r3
 800103e:	81fb      	strh	r3, [r7, #14]
  	return value;
 8001040:	89fb      	ldrh	r3, [r7, #14]
}
 8001042:	4618      	mov	r0, r3
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <initVL53L0X>:
// (VL53L0X_PerformRefSpadManagement()), since the API user manual says that it
// is performed by ST on the bare modules; it seems like that should work well
// enough unless a cover glass is added.
// If io_2v8 (optional) is true or not given, the sensor is configured for 2V8
// mode.
bool initVL53L0X( ){
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  // VL53L0X_DataInit() begin

  // "Set I2C standard mode"
  writeReg(0x88, 0x00);
 8001050:	2100      	movs	r1, #0
 8001052:	2088      	movs	r0, #136	; 0x88
 8001054:	f7ff ffa0 	bl	8000f98 <writeReg>

  writeReg(0x80, 0x01);
 8001058:	2101      	movs	r1, #1
 800105a:	2080      	movs	r0, #128	; 0x80
 800105c:	f7ff ff9c 	bl	8000f98 <writeReg>
  writeReg(0xFF, 0x01);
 8001060:	2101      	movs	r1, #1
 8001062:	20ff      	movs	r0, #255	; 0xff
 8001064:	f7ff ff98 	bl	8000f98 <writeReg>
  writeReg(0x00, 0x00);
 8001068:	2100      	movs	r1, #0
 800106a:	2000      	movs	r0, #0
 800106c:	f7ff ff94 	bl	8000f98 <writeReg>
  g_stopVariable = readReg(0x91);
 8001070:	2091      	movs	r0, #145	; 0x91
 8001072:	f7ff ffbe 	bl	8000ff2 <readReg>
 8001076:	4603      	mov	r3, r0
 8001078:	461a      	mov	r2, r3
 800107a:	4bd5      	ldr	r3, [pc, #852]	; (80013d0 <initVL53L0X+0x384>)
 800107c:	701a      	strb	r2, [r3, #0]
  writeReg(0x00, 0x01);
 800107e:	2101      	movs	r1, #1
 8001080:	2000      	movs	r0, #0
 8001082:	f7ff ff89 	bl	8000f98 <writeReg>
  writeReg(0xFF, 0x00);
 8001086:	2100      	movs	r1, #0
 8001088:	20ff      	movs	r0, #255	; 0xff
 800108a:	f7ff ff85 	bl	8000f98 <writeReg>
  writeReg(0x80, 0x00);
 800108e:	2100      	movs	r1, #0
 8001090:	2080      	movs	r0, #128	; 0x80
 8001092:	f7ff ff81 	bl	8000f98 <writeReg>

  // disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(MSRC_CONFIG_CONTROL, readReg(MSRC_CONFIG_CONTROL) | 0x12);
 8001096:	2060      	movs	r0, #96	; 0x60
 8001098:	f7ff ffab 	bl	8000ff2 <readReg>
 800109c:	4603      	mov	r3, r0
 800109e:	f043 0312 	orr.w	r3, r3, #18
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	4619      	mov	r1, r3
 80010a6:	2060      	movs	r0, #96	; 0x60
 80010a8:	f7ff ff76 	bl	8000f98 <writeReg>

  // set final range signal rate limit to 0.25 MCPS (million counts per second)
  setSignalRateLimit(0.25);
 80010ac:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 80010b0:	f000 f992 	bl	80013d8 <setSignalRateLimit>

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 80010b4:	21ff      	movs	r1, #255	; 0xff
 80010b6:	2001      	movs	r0, #1
 80010b8:	f7ff ff6e 	bl	8000f98 <writeReg>
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there

  // -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)

  writeReg(0xFF, 0x01);
 80010bc:	2101      	movs	r1, #1
 80010be:	20ff      	movs	r0, #255	; 0xff
 80010c0:	f7ff ff6a 	bl	8000f98 <writeReg>
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 80010c4:	2100      	movs	r1, #0
 80010c6:	204f      	movs	r0, #79	; 0x4f
 80010c8:	f7ff ff66 	bl	8000f98 <writeReg>
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 80010cc:	212c      	movs	r1, #44	; 0x2c
 80010ce:	204e      	movs	r0, #78	; 0x4e
 80010d0:	f7ff ff62 	bl	8000f98 <writeReg>
  writeReg(0xFF, 0x00);
 80010d4:	2100      	movs	r1, #0
 80010d6:	20ff      	movs	r0, #255	; 0xff
 80010d8:	f7ff ff5e 	bl	8000f98 <writeReg>
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 80010dc:	21b4      	movs	r1, #180	; 0xb4
 80010de:	20b6      	movs	r0, #182	; 0xb6
 80010e0:	f7ff ff5a 	bl	8000f98 <writeReg>
  // -- VL53L0X_set_reference_spads() end

  // -- VL53L0X_load_tuning_settings() begin
  // DefaultTuningSettings from vl53l0x_tuning.h

  writeReg(0xFF, 0x01);
 80010e4:	2101      	movs	r1, #1
 80010e6:	20ff      	movs	r0, #255	; 0xff
 80010e8:	f7ff ff56 	bl	8000f98 <writeReg>
  writeReg(0x00, 0x00);
 80010ec:	2100      	movs	r1, #0
 80010ee:	2000      	movs	r0, #0
 80010f0:	f7ff ff52 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x00);
 80010f4:	2100      	movs	r1, #0
 80010f6:	20ff      	movs	r0, #255	; 0xff
 80010f8:	f7ff ff4e 	bl	8000f98 <writeReg>
  writeReg(0x09, 0x00);
 80010fc:	2100      	movs	r1, #0
 80010fe:	2009      	movs	r0, #9
 8001100:	f7ff ff4a 	bl	8000f98 <writeReg>
  writeReg(0x10, 0x00);
 8001104:	2100      	movs	r1, #0
 8001106:	2010      	movs	r0, #16
 8001108:	f7ff ff46 	bl	8000f98 <writeReg>
  writeReg(0x11, 0x00);
 800110c:	2100      	movs	r1, #0
 800110e:	2011      	movs	r0, #17
 8001110:	f7ff ff42 	bl	8000f98 <writeReg>

  writeReg(0x24, 0x01);
 8001114:	2101      	movs	r1, #1
 8001116:	2024      	movs	r0, #36	; 0x24
 8001118:	f7ff ff3e 	bl	8000f98 <writeReg>
  writeReg(0x25, 0xFF);
 800111c:	21ff      	movs	r1, #255	; 0xff
 800111e:	2025      	movs	r0, #37	; 0x25
 8001120:	f7ff ff3a 	bl	8000f98 <writeReg>
  writeReg(0x75, 0x00);
 8001124:	2100      	movs	r1, #0
 8001126:	2075      	movs	r0, #117	; 0x75
 8001128:	f7ff ff36 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x01);
 800112c:	2101      	movs	r1, #1
 800112e:	20ff      	movs	r0, #255	; 0xff
 8001130:	f7ff ff32 	bl	8000f98 <writeReg>
  writeReg(0x4E, 0x2C);
 8001134:	212c      	movs	r1, #44	; 0x2c
 8001136:	204e      	movs	r0, #78	; 0x4e
 8001138:	f7ff ff2e 	bl	8000f98 <writeReg>
  writeReg(0x48, 0x00);
 800113c:	2100      	movs	r1, #0
 800113e:	2048      	movs	r0, #72	; 0x48
 8001140:	f7ff ff2a 	bl	8000f98 <writeReg>
  writeReg(0x30, 0x20);
 8001144:	2120      	movs	r1, #32
 8001146:	2030      	movs	r0, #48	; 0x30
 8001148:	f7ff ff26 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x00);
 800114c:	2100      	movs	r1, #0
 800114e:	20ff      	movs	r0, #255	; 0xff
 8001150:	f7ff ff22 	bl	8000f98 <writeReg>
  writeReg(0x30, 0x09);
 8001154:	2109      	movs	r1, #9
 8001156:	2030      	movs	r0, #48	; 0x30
 8001158:	f7ff ff1e 	bl	8000f98 <writeReg>
  writeReg(0x54, 0x00);
 800115c:	2100      	movs	r1, #0
 800115e:	2054      	movs	r0, #84	; 0x54
 8001160:	f7ff ff1a 	bl	8000f98 <writeReg>
  writeReg(0x31, 0x04);
 8001164:	2104      	movs	r1, #4
 8001166:	2031      	movs	r0, #49	; 0x31
 8001168:	f7ff ff16 	bl	8000f98 <writeReg>
  writeReg(0x32, 0x03);
 800116c:	2103      	movs	r1, #3
 800116e:	2032      	movs	r0, #50	; 0x32
 8001170:	f7ff ff12 	bl	8000f98 <writeReg>
  writeReg(0x40, 0x83);
 8001174:	2183      	movs	r1, #131	; 0x83
 8001176:	2040      	movs	r0, #64	; 0x40
 8001178:	f7ff ff0e 	bl	8000f98 <writeReg>
  writeReg(0x46, 0x25);
 800117c:	2125      	movs	r1, #37	; 0x25
 800117e:	2046      	movs	r0, #70	; 0x46
 8001180:	f7ff ff0a 	bl	8000f98 <writeReg>
  writeReg(0x60, 0x00);
 8001184:	2100      	movs	r1, #0
 8001186:	2060      	movs	r0, #96	; 0x60
 8001188:	f7ff ff06 	bl	8000f98 <writeReg>
  writeReg(0x27, 0x00);
 800118c:	2100      	movs	r1, #0
 800118e:	2027      	movs	r0, #39	; 0x27
 8001190:	f7ff ff02 	bl	8000f98 <writeReg>
  writeReg(0x50, 0x06);
 8001194:	2106      	movs	r1, #6
 8001196:	2050      	movs	r0, #80	; 0x50
 8001198:	f7ff fefe 	bl	8000f98 <writeReg>
  writeReg(0x51, 0x00);
 800119c:	2100      	movs	r1, #0
 800119e:	2051      	movs	r0, #81	; 0x51
 80011a0:	f7ff fefa 	bl	8000f98 <writeReg>
  writeReg(0x52, 0x96);
 80011a4:	2196      	movs	r1, #150	; 0x96
 80011a6:	2052      	movs	r0, #82	; 0x52
 80011a8:	f7ff fef6 	bl	8000f98 <writeReg>
  writeReg(0x56, 0x08);
 80011ac:	2108      	movs	r1, #8
 80011ae:	2056      	movs	r0, #86	; 0x56
 80011b0:	f7ff fef2 	bl	8000f98 <writeReg>
  writeReg(0x57, 0x30);
 80011b4:	2130      	movs	r1, #48	; 0x30
 80011b6:	2057      	movs	r0, #87	; 0x57
 80011b8:	f7ff feee 	bl	8000f98 <writeReg>
  writeReg(0x61, 0x00);
 80011bc:	2100      	movs	r1, #0
 80011be:	2061      	movs	r0, #97	; 0x61
 80011c0:	f7ff feea 	bl	8000f98 <writeReg>
  writeReg(0x62, 0x00);
 80011c4:	2100      	movs	r1, #0
 80011c6:	2062      	movs	r0, #98	; 0x62
 80011c8:	f7ff fee6 	bl	8000f98 <writeReg>
  writeReg(0x64, 0x00);
 80011cc:	2100      	movs	r1, #0
 80011ce:	2064      	movs	r0, #100	; 0x64
 80011d0:	f7ff fee2 	bl	8000f98 <writeReg>
  writeReg(0x65, 0x00);
 80011d4:	2100      	movs	r1, #0
 80011d6:	2065      	movs	r0, #101	; 0x65
 80011d8:	f7ff fede 	bl	8000f98 <writeReg>
  writeReg(0x66, 0xA0);
 80011dc:	21a0      	movs	r1, #160	; 0xa0
 80011de:	2066      	movs	r0, #102	; 0x66
 80011e0:	f7ff feda 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x01);
 80011e4:	2101      	movs	r1, #1
 80011e6:	20ff      	movs	r0, #255	; 0xff
 80011e8:	f7ff fed6 	bl	8000f98 <writeReg>
  writeReg(0x22, 0x32);
 80011ec:	2132      	movs	r1, #50	; 0x32
 80011ee:	2022      	movs	r0, #34	; 0x22
 80011f0:	f7ff fed2 	bl	8000f98 <writeReg>
  writeReg(0x47, 0x14);
 80011f4:	2114      	movs	r1, #20
 80011f6:	2047      	movs	r0, #71	; 0x47
 80011f8:	f7ff fece 	bl	8000f98 <writeReg>
  writeReg(0x49, 0xFF);
 80011fc:	21ff      	movs	r1, #255	; 0xff
 80011fe:	2049      	movs	r0, #73	; 0x49
 8001200:	f7ff feca 	bl	8000f98 <writeReg>
  writeReg(0x4A, 0x00);
 8001204:	2100      	movs	r1, #0
 8001206:	204a      	movs	r0, #74	; 0x4a
 8001208:	f7ff fec6 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x00);
 800120c:	2100      	movs	r1, #0
 800120e:	20ff      	movs	r0, #255	; 0xff
 8001210:	f7ff fec2 	bl	8000f98 <writeReg>
  writeReg(0x7A, 0x0A);
 8001214:	210a      	movs	r1, #10
 8001216:	207a      	movs	r0, #122	; 0x7a
 8001218:	f7ff febe 	bl	8000f98 <writeReg>
  writeReg(0x7B, 0x00);
 800121c:	2100      	movs	r1, #0
 800121e:	207b      	movs	r0, #123	; 0x7b
 8001220:	f7ff feba 	bl	8000f98 <writeReg>
  writeReg(0x78, 0x21);
 8001224:	2121      	movs	r1, #33	; 0x21
 8001226:	2078      	movs	r0, #120	; 0x78
 8001228:	f7ff feb6 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x01);
 800122c:	2101      	movs	r1, #1
 800122e:	20ff      	movs	r0, #255	; 0xff
 8001230:	f7ff feb2 	bl	8000f98 <writeReg>
  writeReg(0x23, 0x34);
 8001234:	2134      	movs	r1, #52	; 0x34
 8001236:	2023      	movs	r0, #35	; 0x23
 8001238:	f7ff feae 	bl	8000f98 <writeReg>
  writeReg(0x42, 0x00);
 800123c:	2100      	movs	r1, #0
 800123e:	2042      	movs	r0, #66	; 0x42
 8001240:	f7ff feaa 	bl	8000f98 <writeReg>
  writeReg(0x44, 0xFF);
 8001244:	21ff      	movs	r1, #255	; 0xff
 8001246:	2044      	movs	r0, #68	; 0x44
 8001248:	f7ff fea6 	bl	8000f98 <writeReg>
  writeReg(0x45, 0x26);
 800124c:	2126      	movs	r1, #38	; 0x26
 800124e:	2045      	movs	r0, #69	; 0x45
 8001250:	f7ff fea2 	bl	8000f98 <writeReg>
  writeReg(0x46, 0x05);
 8001254:	2105      	movs	r1, #5
 8001256:	2046      	movs	r0, #70	; 0x46
 8001258:	f7ff fe9e 	bl	8000f98 <writeReg>
  writeReg(0x40, 0x40);
 800125c:	2140      	movs	r1, #64	; 0x40
 800125e:	2040      	movs	r0, #64	; 0x40
 8001260:	f7ff fe9a 	bl	8000f98 <writeReg>
  writeReg(0x0E, 0x06);
 8001264:	2106      	movs	r1, #6
 8001266:	200e      	movs	r0, #14
 8001268:	f7ff fe96 	bl	8000f98 <writeReg>
  writeReg(0x20, 0x1A);
 800126c:	211a      	movs	r1, #26
 800126e:	2020      	movs	r0, #32
 8001270:	f7ff fe92 	bl	8000f98 <writeReg>
  writeReg(0x43, 0x40);
 8001274:	2140      	movs	r1, #64	; 0x40
 8001276:	2043      	movs	r0, #67	; 0x43
 8001278:	f7ff fe8e 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x00);
 800127c:	2100      	movs	r1, #0
 800127e:	20ff      	movs	r0, #255	; 0xff
 8001280:	f7ff fe8a 	bl	8000f98 <writeReg>
  writeReg(0x34, 0x03);
 8001284:	2103      	movs	r1, #3
 8001286:	2034      	movs	r0, #52	; 0x34
 8001288:	f7ff fe86 	bl	8000f98 <writeReg>
  writeReg(0x35, 0x44);
 800128c:	2144      	movs	r1, #68	; 0x44
 800128e:	2035      	movs	r0, #53	; 0x35
 8001290:	f7ff fe82 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x01);
 8001294:	2101      	movs	r1, #1
 8001296:	20ff      	movs	r0, #255	; 0xff
 8001298:	f7ff fe7e 	bl	8000f98 <writeReg>
  writeReg(0x31, 0x04);
 800129c:	2104      	movs	r1, #4
 800129e:	2031      	movs	r0, #49	; 0x31
 80012a0:	f7ff fe7a 	bl	8000f98 <writeReg>
  writeReg(0x4B, 0x09);
 80012a4:	2109      	movs	r1, #9
 80012a6:	204b      	movs	r0, #75	; 0x4b
 80012a8:	f7ff fe76 	bl	8000f98 <writeReg>
  writeReg(0x4C, 0x05);
 80012ac:	2105      	movs	r1, #5
 80012ae:	204c      	movs	r0, #76	; 0x4c
 80012b0:	f7ff fe72 	bl	8000f98 <writeReg>
  writeReg(0x4D, 0x04);
 80012b4:	2104      	movs	r1, #4
 80012b6:	204d      	movs	r0, #77	; 0x4d
 80012b8:	f7ff fe6e 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x00);
 80012bc:	2100      	movs	r1, #0
 80012be:	20ff      	movs	r0, #255	; 0xff
 80012c0:	f7ff fe6a 	bl	8000f98 <writeReg>
  writeReg(0x44, 0x00);
 80012c4:	2100      	movs	r1, #0
 80012c6:	2044      	movs	r0, #68	; 0x44
 80012c8:	f7ff fe66 	bl	8000f98 <writeReg>
  writeReg(0x45, 0x20);
 80012cc:	2120      	movs	r1, #32
 80012ce:	2045      	movs	r0, #69	; 0x45
 80012d0:	f7ff fe62 	bl	8000f98 <writeReg>
  writeReg(0x47, 0x08);
 80012d4:	2108      	movs	r1, #8
 80012d6:	2047      	movs	r0, #71	; 0x47
 80012d8:	f7ff fe5e 	bl	8000f98 <writeReg>
  writeReg(0x48, 0x28);
 80012dc:	2128      	movs	r1, #40	; 0x28
 80012de:	2048      	movs	r0, #72	; 0x48
 80012e0:	f7ff fe5a 	bl	8000f98 <writeReg>
  writeReg(0x67, 0x00);
 80012e4:	2100      	movs	r1, #0
 80012e6:	2067      	movs	r0, #103	; 0x67
 80012e8:	f7ff fe56 	bl	8000f98 <writeReg>
  writeReg(0x70, 0x04);
 80012ec:	2104      	movs	r1, #4
 80012ee:	2070      	movs	r0, #112	; 0x70
 80012f0:	f7ff fe52 	bl	8000f98 <writeReg>
  writeReg(0x71, 0x01);
 80012f4:	2101      	movs	r1, #1
 80012f6:	2071      	movs	r0, #113	; 0x71
 80012f8:	f7ff fe4e 	bl	8000f98 <writeReg>
  writeReg(0x72, 0xFE);
 80012fc:	21fe      	movs	r1, #254	; 0xfe
 80012fe:	2072      	movs	r0, #114	; 0x72
 8001300:	f7ff fe4a 	bl	8000f98 <writeReg>
  writeReg(0x76, 0x00);
 8001304:	2100      	movs	r1, #0
 8001306:	2076      	movs	r0, #118	; 0x76
 8001308:	f7ff fe46 	bl	8000f98 <writeReg>
  writeReg(0x77, 0x00);
 800130c:	2100      	movs	r1, #0
 800130e:	2077      	movs	r0, #119	; 0x77
 8001310:	f7ff fe42 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x01);
 8001314:	2101      	movs	r1, #1
 8001316:	20ff      	movs	r0, #255	; 0xff
 8001318:	f7ff fe3e 	bl	8000f98 <writeReg>
  writeReg(0x0D, 0x01);
 800131c:	2101      	movs	r1, #1
 800131e:	200d      	movs	r0, #13
 8001320:	f7ff fe3a 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x00);
 8001324:	2100      	movs	r1, #0
 8001326:	20ff      	movs	r0, #255	; 0xff
 8001328:	f7ff fe36 	bl	8000f98 <writeReg>
  writeReg(0x80, 0x01);
 800132c:	2101      	movs	r1, #1
 800132e:	2080      	movs	r0, #128	; 0x80
 8001330:	f7ff fe32 	bl	8000f98 <writeReg>
  writeReg(0x01, 0xF8);
 8001334:	21f8      	movs	r1, #248	; 0xf8
 8001336:	2001      	movs	r0, #1
 8001338:	f7ff fe2e 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x01);
 800133c:	2101      	movs	r1, #1
 800133e:	20ff      	movs	r0, #255	; 0xff
 8001340:	f7ff fe2a 	bl	8000f98 <writeReg>
  writeReg(0x8E, 0x01);
 8001344:	2101      	movs	r1, #1
 8001346:	208e      	movs	r0, #142	; 0x8e
 8001348:	f7ff fe26 	bl	8000f98 <writeReg>
  writeReg(0x00, 0x01);
 800134c:	2101      	movs	r1, #1
 800134e:	2000      	movs	r0, #0
 8001350:	f7ff fe22 	bl	8000f98 <writeReg>
  writeReg(0xFF, 0x00);
 8001354:	2100      	movs	r1, #0
 8001356:	20ff      	movs	r0, #255	; 0xff
 8001358:	f7ff fe1e 	bl	8000f98 <writeReg>
  writeReg(0x80, 0x00);
 800135c:	2100      	movs	r1, #0
 800135e:	2080      	movs	r0, #128	; 0x80
 8001360:	f7ff fe1a 	bl	8000f98 <writeReg>
  // -- VL53L0X_load_tuning_settings() end

  // "Set interrupt config to new sample ready"
  // -- VL53L0X_SetGpioConfig() begin

  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 8001364:	2104      	movs	r1, #4
 8001366:	200a      	movs	r0, #10
 8001368:	f7ff fe16 	bl	8000f98 <writeReg>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 800136c:	2084      	movs	r0, #132	; 0x84
 800136e:	f7ff fe40 	bl	8000ff2 <readReg>
 8001372:	4603      	mov	r3, r0
 8001374:	f023 0310 	bic.w	r3, r3, #16
 8001378:	b2db      	uxtb	r3, r3
 800137a:	4619      	mov	r1, r3
 800137c:	2084      	movs	r0, #132	; 0x84
 800137e:	f7ff fe0b 	bl	8000f98 <writeReg>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8001382:	2101      	movs	r1, #1
 8001384:	200b      	movs	r0, #11
 8001386:	f7ff fe07 	bl	8000f98 <writeReg>
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 800138a:	21e8      	movs	r1, #232	; 0xe8
 800138c:	2001      	movs	r0, #1
 800138e:	f7ff fe03 	bl	8000f98 <writeReg>

  // VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

  // -- VL53L0X_perform_vhv_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 8001392:	2101      	movs	r1, #1
 8001394:	2001      	movs	r0, #1
 8001396:	f7ff fdff 	bl	8000f98 <writeReg>
  if (!performSingleRefCalibration(0x40)) { return false; }
 800139a:	2040      	movs	r0, #64	; 0x40
 800139c:	f000 f888 	bl	80014b0 <performSingleRefCalibration>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <initVL53L0X+0x35e>
 80013a6:	2300      	movs	r3, #0
 80013a8:	e010      	b.n	80013cc <initVL53L0X+0x380>

  // -- VL53L0X_perform_vhv_calibration() end

  // -- VL53L0X_perform_phase_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 80013aa:	2102      	movs	r1, #2
 80013ac:	2001      	movs	r0, #1
 80013ae:	f7ff fdf3 	bl	8000f98 <writeReg>
  if (!performSingleRefCalibration(0x00)) { return false; }
 80013b2:	2000      	movs	r0, #0
 80013b4:	f000 f87c 	bl	80014b0 <performSingleRefCalibration>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <initVL53L0X+0x376>
 80013be:	2300      	movs	r3, #0
 80013c0:	e004      	b.n	80013cc <initVL53L0X+0x380>

  // -- VL53L0X_perform_phase_calibration() end

  // "restore the previous Sequence Config"
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80013c2:	21e8      	movs	r1, #232	; 0xe8
 80013c4:	2001      	movs	r0, #1
 80013c6:	f7ff fde7 	bl	8000f98 <writeReg>

  // VL53L0X_PerformRefCalibration() end

  return true;
 80013ca:	2301      	movs	r3, #1
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	200000fc 	.word	0x200000fc
 80013d4:	00000000 	.word	0x00000000

080013d8 <setSignalRateLimit>:
// Setting a lower limit increases the potential range of the sensor but also
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
bool setSignalRateLimit(float limit_Mcps)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	ed87 0a01 	vstr	s0, [r7, #4]
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 80013e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80013e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ee:	d40a      	bmi.n	8001406 <setSignalRateLimit+0x2e>
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff f8c1 	bl	8000578 <__aeabi_f2d>
 80013f6:	a311      	add	r3, pc, #68	; (adr r3, 800143c <setSignalRateLimit+0x64>)
 80013f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fc:	f7ff fba4 	bl	8000b48 <__aeabi_dcmpgt>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <setSignalRateLimit+0x32>
 8001406:	2300      	movs	r3, #0
 8001408:	e00f      	b.n	800142a <setSignalRateLimit+0x52>

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 800140a:	edd7 7a01 	vldr	s15, [r7, #4]
 800140e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001438 <setSignalRateLimit+0x60>
 8001412:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001416:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800141a:	ee17 3a90 	vmov	r3, s15
 800141e:	b29b      	uxth	r3, r3
 8001420:	4619      	mov	r1, r3
 8001422:	2044      	movs	r0, #68	; 0x44
 8001424:	f7ff fdca 	bl	8000fbc <writeReg16Bit>
  return true;
 8001428:	2301      	movs	r3, #1
}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	f3af 8000 	nop.w
 8001438:	43000000 	.word	0x43000000
 800143c:	0a3d70a4 	.word	0x0a3d70a4
 8001440:	407fffd7 	.word	0x407fffd7

08001444 <readRangeSingleMillimeters>:

// Performs a single-shot range measurement and returns the reading in
// millimeters
// based on VL53L0X_PerformSingleRangingMeasurement()
// extraStats provides additional info for this measurment. Set to 0 if not needed.
uint16_t readRangeSingleMillimeters( /*statInfo_t *extraStats */) {
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
  writeReg(0x80, 0x01);
 800144a:	2101      	movs	r1, #1
 800144c:	2080      	movs	r0, #128	; 0x80
 800144e:	f7ff fda3 	bl	8000f98 <writeReg>
  writeReg(0xFF, 0x01);
 8001452:	2101      	movs	r1, #1
 8001454:	20ff      	movs	r0, #255	; 0xff
 8001456:	f7ff fd9f 	bl	8000f98 <writeReg>
  writeReg(0x00, 0x00);
 800145a:	2100      	movs	r1, #0
 800145c:	2000      	movs	r0, #0
 800145e:	f7ff fd9b 	bl	8000f98 <writeReg>
  writeReg(0x91, g_stopVariable);
 8001462:	4b12      	ldr	r3, [pc, #72]	; (80014ac <readRangeSingleMillimeters+0x68>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	4619      	mov	r1, r3
 8001468:	2091      	movs	r0, #145	; 0x91
 800146a:	f7ff fd95 	bl	8000f98 <writeReg>
  writeReg(0x00, 0x01);
 800146e:	2101      	movs	r1, #1
 8001470:	2000      	movs	r0, #0
 8001472:	f7ff fd91 	bl	8000f98 <writeReg>
  writeReg(0xFF, 0x00);
 8001476:	2100      	movs	r1, #0
 8001478:	20ff      	movs	r0, #255	; 0xff
 800147a:	f7ff fd8d 	bl	8000f98 <writeReg>
  writeReg(0x80, 0x00);
 800147e:	2100      	movs	r1, #0
 8001480:	2080      	movs	r0, #128	; 0x80
 8001482:	f7ff fd89 	bl	8000f98 <writeReg>
  writeReg(SYSRANGE_START, 0x01);
 8001486:	2101      	movs	r1, #1
 8001488:	2000      	movs	r0, #0
 800148a:	f7ff fd85 	bl	8000f98 <writeReg>

  uint16_t temp;

    // assumptions: Linearity Corrective Gain is 1000 (default);
    // fractional ranging is not enabled
  	  temp = readReg16Bit(RESULT_RANGE_STATUS + 10);
 800148e:	201e      	movs	r0, #30
 8001490:	f7ff fdc2 	bl	8001018 <readReg16Bit>
 8001494:	4603      	mov	r3, r0
 8001496:	80fb      	strh	r3, [r7, #6]

  	  temp+=0;

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8001498:	2101      	movs	r1, #1
 800149a:	200b      	movs	r0, #11
 800149c:	f7ff fd7c 	bl	8000f98 <writeReg>
  return temp;
 80014a0:	88fb      	ldrh	r3, [r7, #6]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	200000fc 	.word	0x200000fc

080014b0 <performSingleRefCalibration>:


// based on VL53L0X_perform_single_ref_calibration()
bool performSingleRefCalibration(uint8_t vhv_init_byte)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	71fb      	strb	r3, [r7, #7]
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	4619      	mov	r1, r3
 80014c4:	2000      	movs	r0, #0
 80014c6:	f7ff fd67 	bl	8000f98 <writeReg>



  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80014ca:	2101      	movs	r1, #1
 80014cc:	200b      	movs	r0, #11
 80014ce:	f7ff fd63 	bl	8000f98 <writeReg>

  writeReg(SYSRANGE_START, 0x00);
 80014d2:	2100      	movs	r1, #0
 80014d4:	2000      	movs	r0, #0
 80014d6:	f7ff fd5f 	bl	8000f98 <writeReg>

  return true;
 80014da:	2301      	movs	r3, #1
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <captDistIR_Init>:
//=================================================================
//			ADC INIT FOR IR SENSOR SHARP GP2D12
//=================================================================

void  captDistIR_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
	adcHandle.Instance		= ADC1;
 80014e8:	4b15      	ldr	r3, [pc, #84]	; (8001540 <captDistIR_Init+0x5c>)
 80014ea:	4a16      	ldr	r2, [pc, #88]	; (8001544 <captDistIR_Init+0x60>)
 80014ec:	601a      	str	r2, [r3, #0]

	adcHandle.Init.ClockPrescaler = ADC_CLOCKPRESCALER_PCLK_DIV2;
 80014ee:	4b14      	ldr	r3, [pc, #80]	; (8001540 <captDistIR_Init+0x5c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	605a      	str	r2, [r3, #4]
	adcHandle.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014f4:	4b12      	ldr	r3, [pc, #72]	; (8001540 <captDistIR_Init+0x5c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	60da      	str	r2, [r3, #12]
	adcHandle.Init.Resolution = ADC_RESOLUTION12b;
 80014fa:	4b11      	ldr	r3, [pc, #68]	; (8001540 <captDistIR_Init+0x5c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
	// Don't do continuous conversions - do them on demand
	adcHandle.Init.ContinuousConvMode    = DISABLE;  // Continuous mode disabled to have only 1 conversion at each conversion trig
 8001500:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <captDistIR_Init+0x5c>)
 8001502:	2200      	movs	r2, #0
 8001504:	619a      	str	r2, [r3, #24]
	// Disable the scan conversion so we do one at a time */
	adcHandle.Init.ScanConvMode = DISABLE;
 8001506:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <captDistIR_Init+0x5c>)
 8001508:	2200      	movs	r2, #0
 800150a:	611a      	str	r2, [r3, #16]
	//Say how many channels would be used by the sequencer
	adcHandle.Init.NbrOfConversion = 2;
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <captDistIR_Init+0x5c>)
 800150e:	2202      	movs	r2, #2
 8001510:	621a      	str	r2, [r3, #32]
	adcHandle.Init.DiscontinuousConvMode = DISABLE;  // Parameter discarded because sequencer is disabled
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <captDistIR_Init+0x5c>)
 8001514:	2200      	movs	r2, #0
 8001516:	625a      	str	r2, [r3, #36]	; 0x24
	adcHandle.Init.NbrOfDiscConversion = 2;
 8001518:	4b09      	ldr	r3, [pc, #36]	; (8001540 <captDistIR_Init+0x5c>)
 800151a:	2202      	movs	r2, #2
 800151c:	629a      	str	r2, [r3, #40]	; 0x28
	adcHandle.Init.ExternalTrigConvEdge =  ADC_EXTERNALTRIGCONVEDGE_NONE ;
 800151e:	4b08      	ldr	r3, [pc, #32]	; (8001540 <captDistIR_Init+0x5c>)
 8001520:	2200      	movs	r2, #0
 8001522:	62da      	str	r2, [r3, #44]	; 0x2c
	//Start conversion by software, not an external trigger
	adcHandle.Init.ExternalTrigConv = 0;
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <captDistIR_Init+0x5c>)
 8001526:	2200      	movs	r2, #0
 8001528:	631a      	str	r2, [r3, #48]	; 0x30
	adcHandle.Init.DMAContinuousRequests = DISABLE;
 800152a:	4b05      	ldr	r3, [pc, #20]	; (8001540 <captDistIR_Init+0x5c>)
 800152c:	2200      	movs	r2, #0
 800152e:	61da      	str	r2, [r3, #28]
	adcHandle.Init.EOCSelection = DISABLE;
 8001530:	4b03      	ldr	r3, [pc, #12]	; (8001540 <captDistIR_Init+0x5c>)
 8001532:	2200      	movs	r2, #0
 8001534:	615a      	str	r2, [r3, #20]

	HAL_ADC_Init(&adcHandle);
 8001536:	4802      	ldr	r0, [pc, #8]	; (8001540 <captDistIR_Init+0x5c>)
 8001538:	f002 fc94 	bl	8003e64 <HAL_ADC_Init>
}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000100 	.word	0x20000100
 8001544:	40012000 	.word	0x40012000

08001548 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08a      	sub	sp, #40	; 0x28
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001550:	2300      	movs	r3, #0
 8001552:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001554:	f00a f8dc 	bl	800b710 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001558:	4b58      	ldr	r3, [pc, #352]	; (80016bc <pvPortMallocMicroROS+0x174>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d101      	bne.n	8001564 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8001560:	f000 f98c 	bl	800187c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001564:	4b56      	ldr	r3, [pc, #344]	; (80016c0 <pvPortMallocMicroROS+0x178>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4013      	ands	r3, r2
 800156c:	2b00      	cmp	r3, #0
 800156e:	f040 808e 	bne.w	800168e <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d01d      	beq.n	80015b4 <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8001578:	2208      	movs	r2, #8
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4413      	add	r3, r2
 800157e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	2b00      	cmp	r3, #0
 8001588:	d014      	beq.n	80015b4 <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f023 0307 	bic.w	r3, r3, #7
 8001590:	3308      	adds	r3, #8
 8001592:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	2b00      	cmp	r3, #0
 800159c:	d00a      	beq.n	80015b4 <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800159e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015a2:	f383 8811 	msr	BASEPRI, r3
 80015a6:	f3bf 8f6f 	isb	sy
 80015aa:	f3bf 8f4f 	dsb	sy
 80015ae:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80015b0:	bf00      	nop
 80015b2:	e7fe      	b.n	80015b2 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d069      	beq.n	800168e <pvPortMallocMicroROS+0x146>
 80015ba:	4b42      	ldr	r3, [pc, #264]	; (80016c4 <pvPortMallocMicroROS+0x17c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d864      	bhi.n	800168e <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80015c4:	4b40      	ldr	r3, [pc, #256]	; (80016c8 <pvPortMallocMicroROS+0x180>)
 80015c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80015c8:	4b3f      	ldr	r3, [pc, #252]	; (80016c8 <pvPortMallocMicroROS+0x180>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80015ce:	e004      	b.n	80015da <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 80015d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80015d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d903      	bls.n	80015ec <pvPortMallocMicroROS+0xa4>
 80015e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d1f1      	bne.n	80015d0 <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80015ec:	4b33      	ldr	r3, [pc, #204]	; (80016bc <pvPortMallocMicroROS+0x174>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d04b      	beq.n	800168e <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80015f6:	6a3b      	ldr	r3, [r7, #32]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2208      	movs	r2, #8
 80015fc:	4413      	add	r3, r2
 80015fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	6a3b      	ldr	r3, [r7, #32]
 8001606:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160a:	685a      	ldr	r2, [r3, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	1ad2      	subs	r2, r2, r3
 8001610:	2308      	movs	r3, #8
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	429a      	cmp	r2, r3
 8001616:	d91f      	bls.n	8001658 <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4413      	add	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	2b00      	cmp	r3, #0
 8001628:	d00a      	beq.n	8001640 <pvPortMallocMicroROS+0xf8>
	__asm volatile
 800162a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800162e:	f383 8811 	msr	BASEPRI, r3
 8001632:	f3bf 8f6f 	isb	sy
 8001636:	f3bf 8f4f 	dsb	sy
 800163a:	613b      	str	r3, [r7, #16]
}
 800163c:	bf00      	nop
 800163e:	e7fe      	b.n	800163e <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001642:	685a      	ldr	r2, [r3, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	1ad2      	subs	r2, r2, r3
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800164c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001652:	69b8      	ldr	r0, [r7, #24]
 8001654:	f000 f974 	bl	8001940 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001658:	4b1a      	ldr	r3, [pc, #104]	; (80016c4 <pvPortMallocMicroROS+0x17c>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	4a18      	ldr	r2, [pc, #96]	; (80016c4 <pvPortMallocMicroROS+0x17c>)
 8001664:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001666:	4b17      	ldr	r3, [pc, #92]	; (80016c4 <pvPortMallocMicroROS+0x17c>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	4b18      	ldr	r3, [pc, #96]	; (80016cc <pvPortMallocMicroROS+0x184>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	429a      	cmp	r2, r3
 8001670:	d203      	bcs.n	800167a <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001672:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <pvPortMallocMicroROS+0x17c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a15      	ldr	r2, [pc, #84]	; (80016cc <pvPortMallocMicroROS+0x184>)
 8001678:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800167a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <pvPortMallocMicroROS+0x178>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	431a      	orrs	r2, r3
 8001684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001686:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800168e:	f00a f84d 	bl	800b72c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	f003 0307 	and.w	r3, r3, #7
 8001698:	2b00      	cmp	r3, #0
 800169a:	d00a      	beq.n	80016b2 <pvPortMallocMicroROS+0x16a>
	__asm volatile
 800169c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016a0:	f383 8811 	msr	BASEPRI, r3
 80016a4:	f3bf 8f6f 	isb	sy
 80016a8:	f3bf 8f4f 	dsb	sy
 80016ac:	60fb      	str	r3, [r7, #12]
}
 80016ae:	bf00      	nop
 80016b0:	e7fe      	b.n	80016b0 <pvPortMallocMicroROS+0x168>
	return pvReturn;
 80016b2:	69fb      	ldr	r3, [r7, #28]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3728      	adds	r7, #40	; 0x28
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20003d4c 	.word	0x20003d4c
 80016c0:	20003d58 	.word	0x20003d58
 80016c4:	20003d50 	.word	0x20003d50
 80016c8:	20003d44 	.word	0x20003d44
 80016cc:	20003d54 	.word	0x20003d54

080016d0 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d048      	beq.n	8001774 <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80016e2:	2308      	movs	r3, #8
 80016e4:	425b      	negs	r3, r3
 80016e6:	697a      	ldr	r2, [r7, #20]
 80016e8:	4413      	add	r3, r2
 80016ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	4b21      	ldr	r3, [pc, #132]	; (800177c <vPortFreeMicroROS+0xac>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4013      	ands	r3, r2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d10a      	bne.n	8001714 <vPortFreeMicroROS+0x44>
	__asm volatile
 80016fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001702:	f383 8811 	msr	BASEPRI, r3
 8001706:	f3bf 8f6f 	isb	sy
 800170a:	f3bf 8f4f 	dsb	sy
 800170e:	60fb      	str	r3, [r7, #12]
}
 8001710:	bf00      	nop
 8001712:	e7fe      	b.n	8001712 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d00a      	beq.n	8001732 <vPortFreeMicroROS+0x62>
	__asm volatile
 800171c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001720:	f383 8811 	msr	BASEPRI, r3
 8001724:	f3bf 8f6f 	isb	sy
 8001728:	f3bf 8f4f 	dsb	sy
 800172c:	60bb      	str	r3, [r7, #8]
}
 800172e:	bf00      	nop
 8001730:	e7fe      	b.n	8001730 <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	4b11      	ldr	r3, [pc, #68]	; (800177c <vPortFreeMicroROS+0xac>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4013      	ands	r3, r2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d019      	beq.n	8001774 <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d115      	bne.n	8001774 <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	685a      	ldr	r2, [r3, #4]
 800174c:	4b0b      	ldr	r3, [pc, #44]	; (800177c <vPortFreeMicroROS+0xac>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	43db      	mvns	r3, r3
 8001752:	401a      	ands	r2, r3
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001758:	f009 ffda 	bl	800b710 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	685a      	ldr	r2, [r3, #4]
 8001760:	4b07      	ldr	r3, [pc, #28]	; (8001780 <vPortFreeMicroROS+0xb0>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4413      	add	r3, r2
 8001766:	4a06      	ldr	r2, [pc, #24]	; (8001780 <vPortFreeMicroROS+0xb0>)
 8001768:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800176a:	6938      	ldr	r0, [r7, #16]
 800176c:	f000 f8e8 	bl	8001940 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001770:	f009 ffdc 	bl	800b72c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001774:	bf00      	nop
 8001776:	3718      	adds	r7, #24
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20003d58 	.word	0x20003d58
 8001780:	20003d50 	.word	0x20003d50

08001784 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001784:	b480      	push	{r7}
 8001786:	b087      	sub	sp, #28
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001790:	2308      	movs	r3, #8
 8001792:	425b      	negs	r3, r3
 8001794:	697a      	ldr	r2, [r7, #20]
 8001796:	4413      	add	r3, r2
 8001798:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	685a      	ldr	r2, [r3, #4]
 80017a2:	4b06      	ldr	r3, [pc, #24]	; (80017bc <getBlockSize+0x38>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	43db      	mvns	r3, r3
 80017a8:	4013      	ands	r3, r2
 80017aa:	60fb      	str	r3, [r7, #12]

	return count;
 80017ac:	68fb      	ldr	r3, [r7, #12]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	371c      	adds	r7, #28
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	20003d58 	.word	0x20003d58

080017c0 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b088      	sub	sp, #32
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80017ca:	f009 ffa1 	bl	800b710 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80017ce:	6838      	ldr	r0, [r7, #0]
 80017d0:	f7ff feba 	bl	8001548 <pvPortMallocMicroROS>
 80017d4:	6138      	str	r0, [r7, #16]

	uint8_t *puc = ( uint8_t * ) pv;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	60fb      	str	r3, [r7, #12]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80017da:	2308      	movs	r3, #8
 80017dc:	425b      	negs	r3, r3
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	4413      	add	r3, r2
 80017e2:	60fb      	str	r3, [r7, #12]
	pxLink = ( void * ) puc;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	60bb      	str	r3, [r7, #8]


	char *in_src = (char*)pv;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	61fb      	str	r3, [r7, #28]
  	char *in_dest = (char*)newmem;
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	61bb      	str	r3, [r7, #24]
	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	685a      	ldr	r2, [r3, #4]
 80017f4:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <pvPortReallocMicroROS+0x70>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	43db      	mvns	r3, r3
 80017fa:	4013      	ands	r3, r2
 80017fc:	617b      	str	r3, [r7, #20]

  	while(count--)
 80017fe:	e007      	b.n	8001810 <pvPortReallocMicroROS+0x50>
    	*in_dest++ = *in_src++;
 8001800:	69fa      	ldr	r2, [r7, #28]
 8001802:	1c53      	adds	r3, r2, #1
 8001804:	61fb      	str	r3, [r7, #28]
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	1c59      	adds	r1, r3, #1
 800180a:	61b9      	str	r1, [r7, #24]
 800180c:	7812      	ldrb	r2, [r2, #0]
 800180e:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	1e5a      	subs	r2, r3, #1
 8001814:	617a      	str	r2, [r7, #20]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1f2      	bne.n	8001800 <pvPortReallocMicroROS+0x40>

	vPortFreeMicroROS(pv);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7ff ff58 	bl	80016d0 <vPortFreeMicroROS>

	( void ) xTaskResumeAll();
 8001820:	f009 ff84 	bl	800b72c <xTaskResumeAll>

	return newmem;
 8001824:	693b      	ldr	r3, [r7, #16]
}
 8001826:	4618      	mov	r0, r3
 8001828:	3720      	adds	r7, #32
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20003d58 	.word	0x20003d58

08001834 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800183e:	f009 ff67 	bl	800b710 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	fb02 f303 	mul.w	r3, r2, r3
 800184a:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 800184c:	6978      	ldr	r0, [r7, #20]
 800184e:	f7ff fe7b 	bl	8001548 <pvPortMallocMicroROS>
 8001852:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	613b      	str	r3, [r7, #16]

  	while(count--)
 8001858:	e004      	b.n	8001864 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1c5a      	adds	r2, r3, #1
 800185e:	613a      	str	r2, [r7, #16]
 8001860:	2200      	movs	r2, #0
 8001862:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	1e5a      	subs	r2, r3, #1
 8001868:	617a      	str	r2, [r7, #20]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1f5      	bne.n	800185a <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 800186e:	f009 ff5d 	bl	800b72c <xTaskResumeAll>
  	return mem;
 8001872:	68fb      	ldr	r3, [r7, #12]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001882:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001886:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001888:	4b27      	ldr	r3, [pc, #156]	; (8001928 <prvHeapInit+0xac>)
 800188a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	2b00      	cmp	r3, #0
 8001894:	d00c      	beq.n	80018b0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	3307      	adds	r3, #7
 800189a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f023 0307 	bic.w	r3, r3, #7
 80018a2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80018a4:	68ba      	ldr	r2, [r7, #8]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	4a1f      	ldr	r2, [pc, #124]	; (8001928 <prvHeapInit+0xac>)
 80018ac:	4413      	add	r3, r2
 80018ae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80018b4:	4a1d      	ldr	r2, [pc, #116]	; (800192c <prvHeapInit+0xb0>)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80018ba:	4b1c      	ldr	r3, [pc, #112]	; (800192c <prvHeapInit+0xb0>)
 80018bc:	2200      	movs	r2, #0
 80018be:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	4413      	add	r3, r2
 80018c6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80018c8:	2208      	movs	r2, #8
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	1a9b      	subs	r3, r3, r2
 80018ce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f023 0307 	bic.w	r3, r3, #7
 80018d6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4a15      	ldr	r2, [pc, #84]	; (8001930 <prvHeapInit+0xb4>)
 80018dc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80018de:	4b14      	ldr	r3, [pc, #80]	; (8001930 <prvHeapInit+0xb4>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2200      	movs	r2, #0
 80018e4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80018e6:	4b12      	ldr	r3, [pc, #72]	; (8001930 <prvHeapInit+0xb4>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	68fa      	ldr	r2, [r7, #12]
 80018f6:	1ad2      	subs	r2, r2, r3
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80018fc:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <prvHeapInit+0xb4>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	4a0a      	ldr	r2, [pc, #40]	; (8001934 <prvHeapInit+0xb8>)
 800190a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	4a09      	ldr	r2, [pc, #36]	; (8001938 <prvHeapInit+0xbc>)
 8001912:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001914:	4b09      	ldr	r3, [pc, #36]	; (800193c <prvHeapInit+0xc0>)
 8001916:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800191a:	601a      	str	r2, [r3, #0]
}
 800191c:	bf00      	nop
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	20000144 	.word	0x20000144
 800192c:	20003d44 	.word	0x20003d44
 8001930:	20003d4c 	.word	0x20003d4c
 8001934:	20003d54 	.word	0x20003d54
 8001938:	20003d50 	.word	0x20003d50
 800193c:	20003d58 	.word	0x20003d58

08001940 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001948:	4b28      	ldr	r3, [pc, #160]	; (80019ec <prvInsertBlockIntoFreeList+0xac>)
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	e002      	b.n	8001954 <prvInsertBlockIntoFreeList+0x14>
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	429a      	cmp	r2, r3
 800195c:	d8f7      	bhi.n	800194e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	68ba      	ldr	r2, [r7, #8]
 8001968:	4413      	add	r3, r2
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	429a      	cmp	r2, r3
 800196e:	d108      	bne.n	8001982 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	685a      	ldr	r2, [r3, #4]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	441a      	add	r2, r3
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	68ba      	ldr	r2, [r7, #8]
 800198c:	441a      	add	r2, r3
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	429a      	cmp	r2, r3
 8001994:	d118      	bne.n	80019c8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <prvInsertBlockIntoFreeList+0xb0>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d00d      	beq.n	80019be <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685a      	ldr	r2, [r3, #4]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	441a      	add	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	e008      	b.n	80019d0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80019be:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <prvInsertBlockIntoFreeList+0xb0>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	e003      	b.n	80019d0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80019d0:	68fa      	ldr	r2, [r7, #12]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d002      	beq.n	80019de <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
 80019de:	bf00      	nop
 80019e0:	3714      	adds	r7, #20
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	20003d44 	.word	0x20003d44
 80019f0:	20003d4c 	.word	0x20003d4c

080019f4 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001a02:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001a04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a08:	4904      	ldr	r1, [pc, #16]	; (8001a1c <cubemx_transport_open+0x28>)
 8001a0a:	68f8      	ldr	r0, [r7, #12]
 8001a0c:	f007 faa4 	bl	8008f58 <HAL_UART_Receive_DMA>
    return true;
 8001a10:	2301      	movs	r3, #1
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20003d5c 	.word	0x20003d5c

08001a20 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001a2e:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001a30:	68f8      	ldr	r0, [r7, #12]
 8001a32:	f007 fac1 	bl	8008fb8 <HAL_UART_DMAStop>
    return true;
 8001a36:	2301      	movs	r3, #1
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
 8001a4c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001a54:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b20      	cmp	r3, #32
 8001a60:	d11c      	bne.n	8001a9c <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	461a      	mov	r2, r3
 8001a68:	68b9      	ldr	r1, [r7, #8]
 8001a6a:	6978      	ldr	r0, [r7, #20]
 8001a6c:	f007 f9f6 	bl	8008e5c <HAL_UART_Transmit_DMA>
 8001a70:	4603      	mov	r3, r0
 8001a72:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001a74:	e002      	b.n	8001a7c <cubemx_transport_write+0x3c>
            osDelay(1);
 8001a76:	2001      	movs	r0, #1
 8001a78:	f008 fca0 	bl	800a3bc <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001a7c:	7cfb      	ldrb	r3, [r7, #19]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d105      	bne.n	8001a8e <cubemx_transport_write+0x4e>
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b20      	cmp	r3, #32
 8001a8c:	d1f3      	bne.n	8001a76 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8001a8e:	7cfb      	ldrb	r3, [r7, #19]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d101      	bne.n	8001a98 <cubemx_transport_write+0x58>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	e002      	b.n	8001a9e <cubemx_transport_write+0x5e>
 8001a98:	2300      	movs	r3, #0
 8001a9a:	e000      	b.n	8001a9e <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001a9c:	2300      	movs	r3, #0
    }
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3718      	adds	r7, #24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
	...

08001aa8 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b088      	sub	sp, #32
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
 8001ab4:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001abc:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ac2:	b672      	cpsid	i
}
 8001ac4:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001ad2:	4a1c      	ldr	r2, [pc, #112]	; (8001b44 <cubemx_transport_read+0x9c>)
 8001ad4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001ad6:	b662      	cpsie	i
}
 8001ad8:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	3301      	adds	r3, #1
 8001ade:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	f008 fc6b 	bl	800a3bc <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001ae6:	4b18      	ldr	r3, [pc, #96]	; (8001b48 <cubemx_transport_read+0xa0>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	4b16      	ldr	r3, [pc, #88]	; (8001b44 <cubemx_transport_read+0x9c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d103      	bne.n	8001afa <cubemx_transport_read+0x52>
 8001af2:	69fa      	ldr	r2, [r7, #28]
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	dbe3      	blt.n	8001ac2 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001afe:	e011      	b.n	8001b24 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8001b00:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <cubemx_transport_read+0xa0>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	68b9      	ldr	r1, [r7, #8]
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	440b      	add	r3, r1
 8001b0a:	4910      	ldr	r1, [pc, #64]	; (8001b4c <cubemx_transport_read+0xa4>)
 8001b0c:	5c8a      	ldrb	r2, [r1, r2]
 8001b0e:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001b10:	4b0d      	ldr	r3, [pc, #52]	; (8001b48 <cubemx_transport_read+0xa0>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	3301      	adds	r3, #1
 8001b16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b1a:	4a0b      	ldr	r2, [pc, #44]	; (8001b48 <cubemx_transport_read+0xa0>)
 8001b1c:	6013      	str	r3, [r2, #0]
        wrote++;
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	3301      	adds	r3, #1
 8001b22:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001b24:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <cubemx_transport_read+0xa0>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <cubemx_transport_read+0x9c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d003      	beq.n	8001b38 <cubemx_transport_read+0x90>
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d3e3      	bcc.n	8001b00 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001b38:	69bb      	ldr	r3, [r7, #24]
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3720      	adds	r7, #32
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20004560 	.word	0x20004560
 8001b48:	2000455c 	.word	0x2000455c
 8001b4c:	20003d5c 	.word	0x20003d5c

08001b50 <MX_GPIO_Init>:
#include "main.h"
#include "drv_gpio.h"

void MX_GPIO_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08a      	sub	sp, #40	; 0x28
 8001b54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b56:	f107 0314 	add.w	r3, r7, #20
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	605a      	str	r2, [r3, #4]
 8001b60:	609a      	str	r2, [r3, #8]
 8001b62:	60da      	str	r2, [r3, #12]
 8001b64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	613b      	str	r3, [r7, #16]
 8001b6a:	4b2d      	ldr	r3, [pc, #180]	; (8001c20 <MX_GPIO_Init+0xd0>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	4a2c      	ldr	r2, [pc, #176]	; (8001c20 <MX_GPIO_Init+0xd0>)
 8001b70:	f043 0304 	orr.w	r3, r3, #4
 8001b74:	6313      	str	r3, [r2, #48]	; 0x30
 8001b76:	4b2a      	ldr	r3, [pc, #168]	; (8001c20 <MX_GPIO_Init+0xd0>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	f003 0304 	and.w	r3, r3, #4
 8001b7e:	613b      	str	r3, [r7, #16]
 8001b80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	4b26      	ldr	r3, [pc, #152]	; (8001c20 <MX_GPIO_Init+0xd0>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	4a25      	ldr	r2, [pc, #148]	; (8001c20 <MX_GPIO_Init+0xd0>)
 8001b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b90:	6313      	str	r3, [r2, #48]	; 0x30
 8001b92:	4b23      	ldr	r3, [pc, #140]	; (8001c20 <MX_GPIO_Init+0xd0>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60bb      	str	r3, [r7, #8]
 8001ba2:	4b1f      	ldr	r3, [pc, #124]	; (8001c20 <MX_GPIO_Init+0xd0>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a1e      	ldr	r2, [pc, #120]	; (8001c20 <MX_GPIO_Init+0xd0>)
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b1c      	ldr	r3, [pc, #112]	; (8001c20 <MX_GPIO_Init+0xd0>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	60bb      	str	r3, [r7, #8]
 8001bb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	607b      	str	r3, [r7, #4]
 8001bbe:	4b18      	ldr	r3, [pc, #96]	; (8001c20 <MX_GPIO_Init+0xd0>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	4a17      	ldr	r2, [pc, #92]	; (8001c20 <MX_GPIO_Init+0xd0>)
 8001bc4:	f043 0302 	orr.w	r3, r3, #2
 8001bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bca:	4b15      	ldr	r3, [pc, #84]	; (8001c20 <MX_GPIO_Init+0xd0>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	607b      	str	r3, [r7, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2120      	movs	r1, #32
 8001bda:	4812      	ldr	r0, [pc, #72]	; (8001c24 <MX_GPIO_Init+0xd4>)
 8001bdc:	f003 f8cc 	bl	8004d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001be0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001be6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001bea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001bf0:	f107 0314 	add.w	r3, r7, #20
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	480c      	ldr	r0, [pc, #48]	; (8001c28 <MX_GPIO_Init+0xd8>)
 8001bf8:	f002 ff3a 	bl	8004a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001bfc:	2320      	movs	r3, #32
 8001bfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c00:	2301      	movs	r3, #1
 8001c02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001c0c:	f107 0314 	add.w	r3, r7, #20
 8001c10:	4619      	mov	r1, r3
 8001c12:	4804      	ldr	r0, [pc, #16]	; (8001c24 <MX_GPIO_Init+0xd4>)
 8001c14:	f002 ff2c 	bl	8004a70 <HAL_GPIO_Init>

}
 8001c18:	bf00      	nop
 8001c1a:	3728      	adds	r7, #40	; 0x28
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40023800 	.word	0x40023800
 8001c24:	40020000 	.word	0x40020000
 8001c28:	40020800 	.word	0x40020800

08001c2c <HAL_GPIO_EXTI_Callback>:

extern void quadEncoder_CallbackIndexL(void);
extern void quadEncoder_CallbackIndexR(void);

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 8001c36:	88fb      	ldrh	r3, [r7, #6]
 8001c38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c3c:	d017      	beq.n	8001c6e <HAL_GPIO_EXTI_Callback+0x42>
 8001c3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c42:	dc16      	bgt.n	8001c72 <HAL_GPIO_EXTI_Callback+0x46>
 8001c44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c48:	d00e      	beq.n	8001c68 <HAL_GPIO_EXTI_Callback+0x3c>
 8001c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c4e:	dc10      	bgt.n	8001c72 <HAL_GPIO_EXTI_Callback+0x46>
 8001c50:	2b08      	cmp	r3, #8
 8001c52:	d010      	beq.n	8001c76 <HAL_GPIO_EXTI_Callback+0x4a>
 8001c54:	2b08      	cmp	r3, #8
 8001c56:	dc0c      	bgt.n	8001c72 <HAL_GPIO_EXTI_Callback+0x46>
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d002      	beq.n	8001c62 <HAL_GPIO_EXTI_Callback+0x36>
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d00c      	beq.n	8001c7a <HAL_GPIO_EXTI_Callback+0x4e>
					break;

	case GPIO_PIN_13 :		// USER BUTTON
					break;

	default : 		break;
 8001c60:	e007      	b.n	8001c72 <HAL_GPIO_EXTI_Callback+0x46>
		quadEncoder_CallbackIndexR();
 8001c62:	f001 f909 	bl	8002e78 <quadEncoder_CallbackIndexR>
					break;
 8001c66:	e009      	b.n	8001c7c <HAL_GPIO_EXTI_Callback+0x50>
		quadEncoder_CallbackIndexL();
 8001c68:	f001 f8e0 	bl	8002e2c <quadEncoder_CallbackIndexL>
					break;
 8001c6c:	e006      	b.n	8001c7c <HAL_GPIO_EXTI_Callback+0x50>
					break;
 8001c6e:	bf00      	nop
 8001c70:	e004      	b.n	8001c7c <HAL_GPIO_EXTI_Callback+0x50>
	default : 		break;
 8001c72:	bf00      	nop
 8001c74:	e002      	b.n	8001c7c <HAL_GPIO_EXTI_Callback+0x50>
					break;
 8001c76:	bf00      	nop
 8001c78:	e000      	b.n	8001c7c <HAL_GPIO_EXTI_Callback+0x50>
					break;
 8001c7a:	bf00      	nop


	}
}
 8001c7c:	bf00      	nop
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <MX_I2C1_Init>:


I2C_HandleTypeDef hi2c1;

void MX_I2C1_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001c88:	4b12      	ldr	r3, [pc, #72]	; (8001cd4 <MX_I2C1_Init+0x50>)
 8001c8a:	4a13      	ldr	r2, [pc, #76]	; (8001cd8 <MX_I2C1_Init+0x54>)
 8001c8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c8e:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <MX_I2C1_Init+0x50>)
 8001c90:	4a12      	ldr	r2, [pc, #72]	; (8001cdc <MX_I2C1_Init+0x58>)
 8001c92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c94:	4b0f      	ldr	r3, [pc, #60]	; (8001cd4 <MX_I2C1_Init+0x50>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0x2; //0;
 8001c9a:	4b0e      	ldr	r3, [pc, #56]	; (8001cd4 <MX_I2C1_Init+0x50>)
 8001c9c:	2202      	movs	r2, #2
 8001c9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ca0:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <MX_I2C1_Init+0x50>)
 8001ca2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ca6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ca8:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <MX_I2C1_Init+0x50>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0xFF; //0;
 8001cae:	4b09      	ldr	r3, [pc, #36]	; (8001cd4 <MX_I2C1_Init+0x50>)
 8001cb0:	22ff      	movs	r2, #255	; 0xff
 8001cb2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cb4:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <MX_I2C1_Init+0x50>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cba:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <MX_I2C1_Init+0x50>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001cc0:	4804      	ldr	r0, [pc, #16]	; (8001cd4 <MX_I2C1_Init+0x50>)
 8001cc2:	f003 f88b 	bl	8004ddc <HAL_I2C_Init>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ccc:	f000 fe56 	bl	800297c <Error_Handler>
  }

}
 8001cd0:	bf00      	nop
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	20004564 	.word	0x20004564
 8001cd8:	40005400 	.word	0x40005400
 8001cdc:	000186a0 	.word	0x000186a0

08001ce0 <i2c1_WriteBuffer>:

//======================================================================
// Transmit n_data bytes to i2c slave
//======================================================================
int i2c1_WriteBuffer(uint16_t addrSlave, uint8_t *data, int n_data)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b088      	sub	sp, #32
 8001ce4:	af02      	add	r7, sp, #8
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
 8001cec:	81fb      	strh	r3, [r7, #14]
	int status;
	status = HAL_I2C_Master_Transmit(&hi2c1, addrSlave, data, n_data , 100);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	89f9      	ldrh	r1, [r7, #14]
 8001cf4:	2264      	movs	r2, #100	; 0x64
 8001cf6:	9200      	str	r2, [sp, #0]
 8001cf8:	68ba      	ldr	r2, [r7, #8]
 8001cfa:	4805      	ldr	r0, [pc, #20]	; (8001d10 <i2c1_WriteBuffer+0x30>)
 8001cfc:	f003 f9b2 	bl	8005064 <HAL_I2C_Master_Transmit>
 8001d00:	4603      	mov	r3, r0
 8001d02:	617b      	str	r3, [r7, #20]
	return status;
 8001d04:	697b      	ldr	r3, [r7, #20]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3718      	adds	r7, #24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20004564 	.word	0x20004564

08001d14 <i2c1_ReadRegBuffer>:
}
//======================================================================
// Receive n_data bytes - located at regAddr - from i2c slave
//======================================================================
int i2c1_ReadRegBuffer(uint16_t addrSlave, uint8_t  regAddr,  uint8_t *data, int n_data)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b088      	sub	sp, #32
 8001d18:	af02      	add	r7, sp, #8
 8001d1a:	60ba      	str	r2, [r7, #8]
 8001d1c:	607b      	str	r3, [r7, #4]
 8001d1e:	4603      	mov	r3, r0
 8001d20:	81fb      	strh	r3, [r7, #14]
 8001d22:	460b      	mov	r3, r1
 8001d24:	737b      	strb	r3, [r7, #13]
    int status;
    uint8_t RegAddr;
    RegAddr=regAddr;
 8001d26:	7b7b      	ldrb	r3, [r7, #13]
 8001d28:	74fb      	strb	r3, [r7, #19]
    do{
        status=HAL_I2C_Master_Transmit(&hi2c1, addrSlave, &RegAddr, 1, 100);
 8001d2a:	f107 0213 	add.w	r2, r7, #19
 8001d2e:	89f9      	ldrh	r1, [r7, #14]
 8001d30:	2364      	movs	r3, #100	; 0x64
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	2301      	movs	r3, #1
 8001d36:	480f      	ldr	r0, [pc, #60]	; (8001d74 <i2c1_ReadRegBuffer+0x60>)
 8001d38:	f003 f994 	bl	8005064 <HAL_I2C_Master_Transmit>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	617b      	str	r3, [r7, #20]
        if( status )
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10f      	bne.n	8001d66 <i2c1_ReadRegBuffer+0x52>
            break;
        status =HAL_I2C_Master_Receive(&hi2c1, addrSlave, data, n_data, n_data*100);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2164      	movs	r1, #100	; 0x64
 8001d4e:	fb01 f303 	mul.w	r3, r1, r3
 8001d52:	89f9      	ldrh	r1, [r7, #14]
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	4613      	mov	r3, r2
 8001d58:	68ba      	ldr	r2, [r7, #8]
 8001d5a:	4806      	ldr	r0, [pc, #24]	; (8001d74 <i2c1_ReadRegBuffer+0x60>)
 8001d5c:	f003 fa80 	bl	8005260 <HAL_I2C_Master_Receive>
 8001d60:	4603      	mov	r3, r0
 8001d62:	617b      	str	r3, [r7, #20]
 8001d64:	e000      	b.n	8001d68 <i2c1_ReadRegBuffer+0x54>
            break;
 8001d66:	bf00      	nop
    }while(0);
    return status;
 8001d68:	697b      	ldr	r3, [r7, #20]
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3718      	adds	r7, #24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	20004564 	.word	0x20004564

08001d78 <i2c1_WriteRegBuffer>:

//======================================================================
// Write n_data bytes - have to be written at regAddr - to i2c slave
//======================================================================
int i2c1_WriteRegBuffer(uint16_t addrSlave, uint8_t  regAddr,  uint8_t *data, int n_data)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08c      	sub	sp, #48	; 0x30
 8001d7c:	af02      	add	r7, sp, #8
 8001d7e:	60ba      	str	r2, [r7, #8]
 8001d80:	607b      	str	r3, [r7, #4]
 8001d82:	4603      	mov	r3, r0
 8001d84:	81fb      	strh	r3, [r7, #14]
 8001d86:	460b      	mov	r3, r1
 8001d88:	737b      	strb	r3, [r7, #13]
    int status;
    uint8_t RegAddr[0x10];
    RegAddr[0]=regAddr;
 8001d8a:	7b7b      	ldrb	r3, [r7, #13]
 8001d8c:	753b      	strb	r3, [r7, #20]
    memcpy(RegAddr+1, data, n_data);
 8001d8e:	f107 0314 	add.w	r3, r7, #20
 8001d92:	3301      	adds	r3, #1
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	68b9      	ldr	r1, [r7, #8]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f014 fc0d 	bl	80165b8 <memcpy>
   status=HAL_I2C_Master_Transmit(&hi2c1, addrSlave, RegAddr, n_data+1, 100);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	3301      	adds	r3, #1
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	f107 0214 	add.w	r2, r7, #20
 8001daa:	89f9      	ldrh	r1, [r7, #14]
 8001dac:	2064      	movs	r0, #100	; 0x64
 8001dae:	9000      	str	r0, [sp, #0]
 8001db0:	4804      	ldr	r0, [pc, #16]	; (8001dc4 <i2c1_WriteRegBuffer+0x4c>)
 8001db2:	f003 f957 	bl	8005064 <HAL_I2C_Master_Transmit>
 8001db6:	4603      	mov	r3, r0
 8001db8:	627b      	str	r3, [r7, #36]	; 0x24
     return status;
 8001dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3728      	adds	r7, #40	; 0x28
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	20004564 	.word	0x20004564

08001dc8 <MX_USART1_UART_Init>:

uint8_t rec_buf2[NB_CAR_TO_RECEIVE+1]="";
uint8_t rec_buf6[NB_CAR_TO_RECEIVE+1]="";

void MX_USART1_UART_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8001dcc:	4b11      	ldr	r3, [pc, #68]	; (8001e14 <MX_USART1_UART_Init+0x4c>)
 8001dce:	4a12      	ldr	r2, [pc, #72]	; (8001e18 <MX_USART1_UART_Init+0x50>)
 8001dd0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001dd2:	4b10      	ldr	r3, [pc, #64]	; (8001e14 <MX_USART1_UART_Init+0x4c>)
 8001dd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dd8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dda:	4b0e      	ldr	r3, [pc, #56]	; (8001e14 <MX_USART1_UART_Init+0x4c>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001de0:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <MX_USART1_UART_Init+0x4c>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001de6:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <MX_USART1_UART_Init+0x4c>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001dec:	4b09      	ldr	r3, [pc, #36]	; (8001e14 <MX_USART1_UART_Init+0x4c>)
 8001dee:	220c      	movs	r2, #12
 8001df0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001df2:	4b08      	ldr	r3, [pc, #32]	; (8001e14 <MX_USART1_UART_Init+0x4c>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001df8:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <MX_USART1_UART_Init+0x4c>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001dfe:	4805      	ldr	r0, [pc, #20]	; (8001e14 <MX_USART1_UART_Init+0x4c>)
 8001e00:	f006 ffdf 	bl	8008dc2 <HAL_UART_Init>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e0a:	f000 fdb7 	bl	800297c <Error_Handler>
  }
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	200045b8 	.word	0x200045b8
 8001e18:	40011000 	.word	0x40011000

08001e1c <MX_USART2_UART_Init>:


void MX_USART2_UART_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8001e20:	4b11      	ldr	r3, [pc, #68]	; (8001e68 <MX_USART2_UART_Init+0x4c>)
 8001e22:	4a12      	ldr	r2, [pc, #72]	; (8001e6c <MX_USART2_UART_Init+0x50>)
 8001e24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e26:	4b10      	ldr	r3, [pc, #64]	; (8001e68 <MX_USART2_UART_Init+0x4c>)
 8001e28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e2e:	4b0e      	ldr	r3, [pc, #56]	; (8001e68 <MX_USART2_UART_Init+0x4c>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e34:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <MX_USART2_UART_Init+0x4c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e3a:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <MX_USART2_UART_Init+0x4c>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e40:	4b09      	ldr	r3, [pc, #36]	; (8001e68 <MX_USART2_UART_Init+0x4c>)
 8001e42:	220c      	movs	r2, #12
 8001e44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e46:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <MX_USART2_UART_Init+0x4c>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e4c:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <MX_USART2_UART_Init+0x4c>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e52:	4805      	ldr	r0, [pc, #20]	; (8001e68 <MX_USART2_UART_Init+0x4c>)
 8001e54:	f006 ffb5 	bl	8008dc2 <HAL_UART_Init>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e5e:	f000 fd8d 	bl	800297c <Error_Handler>
  }
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	200045fc 	.word	0x200045fc
 8001e6c:	40004400 	.word	0x40004400

08001e70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	607b      	str	r3, [r7, #4]
 8001e7a:	4b1f      	ldr	r3, [pc, #124]	; (8001ef8 <MX_DMA_Init+0x88>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	4a1e      	ldr	r2, [pc, #120]	; (8001ef8 <MX_DMA_Init+0x88>)
 8001e80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e84:	6313      	str	r3, [r2, #48]	; 0x30
 8001e86:	4b1c      	ldr	r3, [pc, #112]	; (8001ef8 <MX_DMA_Init+0x88>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e8e:	607b      	str	r3, [r7, #4]
 8001e90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	603b      	str	r3, [r7, #0]
 8001e96:	4b18      	ldr	r3, [pc, #96]	; (8001ef8 <MX_DMA_Init+0x88>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	4a17      	ldr	r2, [pc, #92]	; (8001ef8 <MX_DMA_Init+0x88>)
 8001e9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea2:	4b15      	ldr	r3, [pc, #84]	; (8001ef8 <MX_DMA_Init+0x88>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eaa:	603b      	str	r3, [r7, #0]
 8001eac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2105      	movs	r1, #5
 8001eb2:	2010      	movs	r0, #16
 8001eb4:	f002 f9a2 	bl	80041fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001eb8:	2010      	movs	r0, #16
 8001eba:	f002 f9bb 	bl	8004234 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	2105      	movs	r1, #5
 8001ec2:	2011      	movs	r0, #17
 8001ec4:	f002 f99a 	bl	80041fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001ec8:	2011      	movs	r0, #17
 8001eca:	f002 f9b3 	bl	8004234 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2105      	movs	r1, #5
 8001ed2:	203a      	movs	r0, #58	; 0x3a
 8001ed4:	f002 f992 	bl	80041fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001ed8:	203a      	movs	r0, #58	; 0x3a
 8001eda:	f002 f9ab 	bl	8004234 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2105      	movs	r1, #5
 8001ee2:	2046      	movs	r0, #70	; 0x46
 8001ee4:	f002 f98a 	bl	80041fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001ee8:	2046      	movs	r0, #70	; 0x46
 8001eea:	f002 f9a3 	bl	8004234 <HAL_NVIC_EnableIRQ>

}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40023800 	.word	0x40023800

08001efc <i2c_send_byteS>:
{
	i2c1_WriteBuffer(LCD_ADDRESS, &dta, 1);
}
//=================================================================
void i2c_send_byteS(unsigned char *dta, unsigned char len)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	460b      	mov	r3, r1
 8001f06:	70fb      	strb	r3, [r7, #3]
	i2c1_WriteBuffer(LCD_ADDRESS, dta, len);
 8001f08:	78fb      	ldrb	r3, [r7, #3]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	6879      	ldr	r1, [r7, #4]
 8001f0e:	207c      	movs	r0, #124	; 0x7c
 8001f10:	f7ff fee6 	bl	8001ce0 <i2c1_WriteBuffer>
}
 8001f14:	bf00      	nop
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <groveLCD_begin>:
//=================================================================
void groveLCD_begin(uint8_t cols, uint8_t lines, uint8_t dotsize)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	71fb      	strb	r3, [r7, #7]
 8001f26:	460b      	mov	r3, r1
 8001f28:	71bb      	strb	r3, [r7, #6]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	717b      	strb	r3, [r7, #5]
    if (lines > 1) {
 8001f2e:	79bb      	ldrb	r3, [r7, #6]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d906      	bls.n	8001f42 <groveLCD_begin+0x26>
        _displayfunction |= LCD_2LINE;
 8001f34:	4b33      	ldr	r3, [pc, #204]	; (8002004 <groveLCD_begin+0xe8>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	f043 0308 	orr.w	r3, r3, #8
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	4b31      	ldr	r3, [pc, #196]	; (8002004 <groveLCD_begin+0xe8>)
 8001f40:	701a      	strb	r2, [r3, #0]
    }
    _numlines = lines;
 8001f42:	4a31      	ldr	r2, [pc, #196]	; (8002008 <groveLCD_begin+0xec>)
 8001f44:	79bb      	ldrb	r3, [r7, #6]
 8001f46:	7013      	strb	r3, [r2, #0]
    _currline = 0;
 8001f48:	4b30      	ldr	r3, [pc, #192]	; (800200c <groveLCD_begin+0xf0>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	701a      	strb	r2, [r3, #0]

    // for some 1 line displays you can select a 10 pixel high font
    if ((dotsize != 0) && (lines == 1)) {
 8001f4e:	797b      	ldrb	r3, [r7, #5]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d009      	beq.n	8001f68 <groveLCD_begin+0x4c>
 8001f54:	79bb      	ldrb	r3, [r7, #6]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d106      	bne.n	8001f68 <groveLCD_begin+0x4c>
        _displayfunction |= LCD_5x10DOTS;
 8001f5a:	4b2a      	ldr	r3, [pc, #168]	; (8002004 <groveLCD_begin+0xe8>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	f043 0304 	orr.w	r3, r3, #4
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	4b27      	ldr	r3, [pc, #156]	; (8002004 <groveLCD_begin+0xe8>)
 8001f66:	701a      	strb	r2, [r3, #0]
    }

    // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
    // according to datasheet, we need at least 40ms after power rises above 2.7V
    // before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
    HAL_Delay(50);
 8001f68:	2032      	movs	r0, #50	; 0x32
 8001f6a:	f001 ff57 	bl	8003e1c <HAL_Delay>

    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    groveLCD_command(LCD_FUNCTIONSET | _displayfunction);
 8001f6e:	4b25      	ldr	r3, [pc, #148]	; (8002004 <groveLCD_begin+0xe8>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	f043 0320 	orr.w	r3, r3, #32
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f000 f89b 	bl	80020b4 <groveLCD_command>
    HAL_Delay(5);  // wait more than 4.1ms
 8001f7e:	2005      	movs	r0, #5
 8001f80:	f001 ff4c 	bl	8003e1c <HAL_Delay>

    // second try
    groveLCD_command(LCD_FUNCTIONSET | _displayfunction);
 8001f84:	4b1f      	ldr	r3, [pc, #124]	; (8002004 <groveLCD_begin+0xe8>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	f043 0320 	orr.w	r3, r3, #32
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f000 f890 	bl	80020b4 <groveLCD_command>
    HAL_Delay(5);
 8001f94:	2005      	movs	r0, #5
 8001f96:	f001 ff41 	bl	8003e1c <HAL_Delay>

    // third go
    groveLCD_command(LCD_FUNCTIONSET | _displayfunction);
 8001f9a:	4b1a      	ldr	r3, [pc, #104]	; (8002004 <groveLCD_begin+0xe8>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	f043 0320 	orr.w	r3, r3, #32
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f000 f885 	bl	80020b4 <groveLCD_command>


    // finally, set # lines, font size, etc.
    groveLCD_command(LCD_FUNCTIONSET | _displayfunction);
 8001faa:	4b16      	ldr	r3, [pc, #88]	; (8002004 <groveLCD_begin+0xe8>)
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	f043 0320 	orr.w	r3, r3, #32
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f000 f87d 	bl	80020b4 <groveLCD_command>

    // turn the display on with no cursor or blinking default
    _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001fba:	4b15      	ldr	r3, [pc, #84]	; (8002010 <groveLCD_begin+0xf4>)
 8001fbc:	2204      	movs	r2, #4
 8001fbe:	701a      	strb	r2, [r3, #0]
    groveLCD_display();
 8001fc0:	f000 f862 	bl	8002088 <groveLCD_display>

    // clear it off
    groveLCD_clear();
 8001fc4:	f000 f831 	bl	800202a <groveLCD_clear>

    // Initialize to default text direction (for romance languages)
    _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001fc8:	4b12      	ldr	r3, [pc, #72]	; (8002014 <groveLCD_begin+0xf8>)
 8001fca:	2202      	movs	r2, #2
 8001fcc:	701a      	strb	r2, [r3, #0]
    // set the entry mode
    groveLCD_command(LCD_ENTRYMODESET | _displaymode);
 8001fce:	4b11      	ldr	r3, [pc, #68]	; (8002014 <groveLCD_begin+0xf8>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	f043 0304 	orr.w	r3, r3, #4
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f000 f86b 	bl	80020b4 <groveLCD_command>


    // backlight init
    groveLCD_setReg(REG_MODE1, 0);
 8001fde:	2100      	movs	r1, #0
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	f000 f8a4 	bl	800212e <groveLCD_setReg>
    // set LEDs controllable by both PWM and GRPPWM registers
    groveLCD_setReg(REG_OUTPUT, 0xFF);
 8001fe6:	21ff      	movs	r1, #255	; 0xff
 8001fe8:	2008      	movs	r0, #8
 8001fea:	f000 f8a0 	bl	800212e <groveLCD_setReg>
    // set MODE2 values
    // 0010 0000 -> 0x20  (DMBLNK to 1, ie blinky mode)
    groveLCD_setReg(REG_MODE2, 0x20);
 8001fee:	2120      	movs	r1, #32
 8001ff0:	2001      	movs	r0, #1
 8001ff2:	f000 f89c 	bl	800212e <groveLCD_setReg>

    groveLCD_setColorWhite();
 8001ff6:	f000 f80f 	bl	8002018 <groveLCD_setColorWhite>

}
 8001ffa:	bf00      	nop
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	200047c0 	.word	0x200047c0
 8002008:	200047c3 	.word	0x200047c3
 800200c:	200047c4 	.word	0x200047c4
 8002010:	200047c1 	.word	0x200047c1
 8002014:	200047c2 	.word	0x200047c2

08002018 <groveLCD_setColorWhite>:
//=================================================================
void groveLCD_setColorAll(){groveLCD_setRGB(0, 0, 0);}
void groveLCD_setColorWhite(){groveLCD_setRGB(255, 255, 255);}
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
 800201c:	22ff      	movs	r2, #255	; 0xff
 800201e:	21ff      	movs	r1, #255	; 0xff
 8002020:	20ff      	movs	r0, #255	; 0xff
 8002022:	f000 f896 	bl	8002152 <groveLCD_setRGB>
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}

0800202a <groveLCD_clear>:
//=================================================================

/********** high level commands, for the user! */
void groveLCD_clear()
{
 800202a:	b580      	push	{r7, lr}
 800202c:	af00      	add	r7, sp, #0
	groveLCD_command(LCD_CLEARDISPLAY);        // clear display, set cursor position to zero
 800202e:	2001      	movs	r0, #1
 8002030:	f000 f840 	bl	80020b4 <groveLCD_command>
    HAL_Delay(2000);          // this command takes a long time!
 8002034:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002038:	f001 fef0 	bl	8003e1c <HAL_Delay>
}
 800203c:	bf00      	nop
 800203e:	bd80      	pop	{r7, pc}

08002040 <groveLCD_setCursor>:
	groveLCD_command(LCD_RETURNHOME);        // set cursor position to zero
    HAL_Delay(2000);        // this command takes a long time!
}
//=================================================================
void groveLCD_setCursor(uint8_t col, uint8_t row)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	460a      	mov	r2, r1
 800204a:	71fb      	strb	r3, [r7, #7]
 800204c:	4613      	mov	r3, r2
 800204e:	71bb      	strb	r3, [r7, #6]
    col = (row == 0 ? col|0x80 : col|0xc0);
 8002050:	79bb      	ldrb	r3, [r7, #6]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d104      	bne.n	8002060 <groveLCD_setCursor+0x20>
 8002056:	79fb      	ldrb	r3, [r7, #7]
 8002058:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800205c:	b2db      	uxtb	r3, r3
 800205e:	e003      	b.n	8002068 <groveLCD_setCursor+0x28>
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002066:	b2db      	uxtb	r3, r3
 8002068:	71fb      	strb	r3, [r7, #7]
    unsigned char dta[2] = {0x80, col};
 800206a:	2380      	movs	r3, #128	; 0x80
 800206c:	733b      	strb	r3, [r7, #12]
 800206e:	79fb      	ldrb	r3, [r7, #7]
 8002070:	737b      	strb	r3, [r7, #13]
    i2c_send_byteS(dta, 2);
 8002072:	f107 030c 	add.w	r3, r7, #12
 8002076:	2102      	movs	r1, #2
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff ff3f 	bl	8001efc <i2c_send_byteS>
}
 800207e:	bf00      	nop
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
	...

08002088 <groveLCD_display>:
{
    _displaycontrol &= ~LCD_DISPLAYON;
    groveLCD_command(LCD_DISPLAYCONTROL | _displaycontrol);
}
//=================================================================
void groveLCD_display() {
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
    _displaycontrol |= LCD_DISPLAYON;
 800208c:	4b08      	ldr	r3, [pc, #32]	; (80020b0 <groveLCD_display+0x28>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	f043 0304 	orr.w	r3, r3, #4
 8002094:	b2da      	uxtb	r2, r3
 8002096:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <groveLCD_display+0x28>)
 8002098:	701a      	strb	r2, [r3, #0]
    groveLCD_command(LCD_DISPLAYCONTROL | _displaycontrol);
 800209a:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <groveLCD_display+0x28>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	f043 0308 	orr.w	r3, r3, #8
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	4618      	mov	r0, r3
 80020a6:	f000 f805 	bl	80020b4 <groveLCD_command>
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	200047c1 	.word	0x200047c1

080020b4 <groveLCD_command>:
//=================================================================
/*********** mid level commands, for sending data/cmds */

// send command
void groveLCD_command(uint8_t value)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4603      	mov	r3, r0
 80020bc:	71fb      	strb	r3, [r7, #7]
    unsigned char dta[2] = {0x80, value};
 80020be:	2380      	movs	r3, #128	; 0x80
 80020c0:	733b      	strb	r3, [r7, #12]
 80020c2:	79fb      	ldrb	r3, [r7, #7]
 80020c4:	737b      	strb	r3, [r7, #13]
    i2c_send_byteS(dta, 2);
 80020c6:	f107 030c 	add.w	r3, r7, #12
 80020ca:	2102      	movs	r1, #2
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff ff15 	bl	8001efc <i2c_send_byteS>
}
 80020d2:	bf00      	nop
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <groveLCD_write>:
//=================================================================
// send data
int groveLCD_write(uint8_t value)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b084      	sub	sp, #16
 80020de:	af00      	add	r7, sp, #0
 80020e0:	4603      	mov	r3, r0
 80020e2:	71fb      	strb	r3, [r7, #7]
    unsigned char dta[2] = {0x40, value};
 80020e4:	2340      	movs	r3, #64	; 0x40
 80020e6:	733b      	strb	r3, [r7, #12]
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	737b      	strb	r3, [r7, #13]
    i2c_send_byteS(dta, 2);
 80020ec:	f107 030c 	add.w	r3, r7, #12
 80020f0:	2102      	movs	r1, #2
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff ff02 	bl	8001efc <i2c_send_byteS>
    return 1; // assume sucess
 80020f8:	2301      	movs	r3, #1
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <groveLCD_putString>:
//=================================================================
void groveLCD_putString(char* s)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
	while(*s != '\0')
 800210a:	e007      	b.n	800211c <groveLCD_putString+0x1a>
	{
		groveLCD_write(*s);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff ffe2 	bl	80020da <groveLCD_write>
		s++;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3301      	adds	r3, #1
 800211a:	607b      	str	r3, [r7, #4]
	while(*s != '\0')
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d1f3      	bne.n	800210c <groveLCD_putString+0xa>
	}
}
 8002124:	bf00      	nop
 8002126:	bf00      	nop
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <groveLCD_setReg>:
//=================================================================
void groveLCD_setReg(unsigned char addr, unsigned char dta)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
 8002134:	4603      	mov	r3, r0
 8002136:	460a      	mov	r2, r1
 8002138:	71fb      	strb	r3, [r7, #7]
 800213a:	4613      	mov	r3, r2
 800213c:	71bb      	strb	r3, [r7, #6]
    i2c1_WriteRegBuffer(RGB_ADDRESS, addr,  &dta, 1);
 800213e:	1dba      	adds	r2, r7, #6
 8002140:	79f9      	ldrb	r1, [r7, #7]
 8002142:	2301      	movs	r3, #1
 8002144:	20c4      	movs	r0, #196	; 0xc4
 8002146:	f7ff fe17 	bl	8001d78 <i2c1_WriteRegBuffer>
}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <groveLCD_setRGB>:
//=================================================================
void groveLCD_setRGB(unsigned char r, unsigned char g, unsigned char b)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b082      	sub	sp, #8
 8002156:	af00      	add	r7, sp, #0
 8002158:	4603      	mov	r3, r0
 800215a:	71fb      	strb	r3, [r7, #7]
 800215c:	460b      	mov	r3, r1
 800215e:	71bb      	strb	r3, [r7, #6]
 8002160:	4613      	mov	r3, r2
 8002162:	717b      	strb	r3, [r7, #5]
	groveLCD_setReg(REG_RED, r);
 8002164:	79fb      	ldrb	r3, [r7, #7]
 8002166:	4619      	mov	r1, r3
 8002168:	2004      	movs	r0, #4
 800216a:	f7ff ffe0 	bl	800212e <groveLCD_setReg>
	groveLCD_setReg(REG_GREEN, g);
 800216e:	79bb      	ldrb	r3, [r7, #6]
 8002170:	4619      	mov	r1, r3
 8002172:	2003      	movs	r0, #3
 8002174:	f7ff ffdb 	bl	800212e <groveLCD_setReg>
	groveLCD_setReg(REG_BLUE, b);
 8002178:	797b      	ldrb	r3, [r7, #5]
 800217a:	4619      	mov	r1, r3
 800217c:	2002      	movs	r0, #2
 800217e:	f7ff ffd6 	bl	800212e <groveLCD_setReg>
}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
	...

0800218c <groveLCD_setColor>:
    {0, 255, 0},                // green
    {0, 0, 255},                // blue
};
//=================================================================
void groveLCD_setColor(unsigned char color)
{
 800218c:	b590      	push	{r4, r7, lr}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	4603      	mov	r3, r0
 8002194:	71fb      	strb	r3, [r7, #7]
    if(color > 3)return ;
 8002196:	79fb      	ldrb	r3, [r7, #7]
 8002198:	2b03      	cmp	r3, #3
 800219a:	d81a      	bhi.n	80021d2 <groveLCD_setColor+0x46>
    groveLCD_setRGB(color_define[color][0], color_define[color][1], color_define[color][2]);
 800219c:	79fa      	ldrb	r2, [r7, #7]
 800219e:	490f      	ldr	r1, [pc, #60]	; (80021dc <groveLCD_setColor+0x50>)
 80021a0:	4613      	mov	r3, r2
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	4413      	add	r3, r2
 80021a6:	440b      	add	r3, r1
 80021a8:	7818      	ldrb	r0, [r3, #0]
 80021aa:	79fa      	ldrb	r2, [r7, #7]
 80021ac:	490b      	ldr	r1, [pc, #44]	; (80021dc <groveLCD_setColor+0x50>)
 80021ae:	4613      	mov	r3, r2
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	4413      	add	r3, r2
 80021b4:	440b      	add	r3, r1
 80021b6:	3301      	adds	r3, #1
 80021b8:	7819      	ldrb	r1, [r3, #0]
 80021ba:	79fa      	ldrb	r2, [r7, #7]
 80021bc:	4c07      	ldr	r4, [pc, #28]	; (80021dc <groveLCD_setColor+0x50>)
 80021be:	4613      	mov	r3, r2
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	4413      	add	r3, r2
 80021c4:	4423      	add	r3, r4
 80021c6:	3302      	adds	r3, #2
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	461a      	mov	r2, r3
 80021cc:	f7ff ffc1 	bl	8002152 <groveLCD_setRGB>
 80021d0:	e000      	b.n	80021d4 <groveLCD_setColor+0x48>
    if(color > 3)return ;
 80021d2:	bf00      	nop
}
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd90      	pop	{r4, r7, pc}
 80021da:	bf00      	nop
 80021dc:	080174f8 	.word	0x080174f8

080021e0 <groveLCD_term_printf>:
//============================================================
void groveLCD_term_printf(const char* fmt, ...)
{
 80021e0:	b40f      	push	{r0, r1, r2, r3}
 80021e2:	b5b0      	push	{r4, r5, r7, lr}
 80021e4:	b0a4      	sub	sp, #144	; 0x90
 80021e6:	af02      	add	r7, sp, #8
	unsigned long  ul;
	unsigned long long ull;
	unsigned long  size;
	unsigned int   sp;
	char           s[60];
	int first=0;
 80021e8:	2300      	movs	r3, #0
 80021ea:	677b      	str	r3, [r7, #116]	; 0x74

	va_start(ap, fmt);
 80021ec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80021f0:	64bb      	str	r3, [r7, #72]	; 0x48

	while (*fmt != '\0') {
 80021f2:	e1cd      	b.n	8002590 <groveLCD_term_printf+0x3b0>
		if (*fmt =='%') {
 80021f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	2b25      	cmp	r3, #37	; 0x25
 80021fc:	f040 81bd 	bne.w	800257a <groveLCD_term_printf+0x39a>
			size=0; sp=1;
 8002200:	2300      	movs	r3, #0
 8002202:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002204:	2301      	movs	r3, #1
 8002206:	67bb      	str	r3, [r7, #120]	; 0x78
			if (*++fmt=='0') {fmt++; sp=0;}	// parse %04d --> sp=0
 8002208:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800220c:	3301      	adds	r3, #1
 800220e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002212:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b30      	cmp	r3, #48	; 0x30
 800221a:	d106      	bne.n	800222a <groveLCD_term_printf+0x4a>
 800221c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002220:	3301      	adds	r3, #1
 8002222:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002226:	2300      	movs	r3, #0
 8002228:	67bb      	str	r3, [r7, #120]	; 0x78
			ch=*fmt;
 800222a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			if ((ch>'0') && (ch<='9')) {	// parse %4d --> size=4
 8002234:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002238:	2b30      	cmp	r3, #48	; 0x30
 800223a:	d92c      	bls.n	8002296 <groveLCD_term_printf+0xb6>
 800223c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002240:	2b39      	cmp	r3, #57	; 0x39
 8002242:	d828      	bhi.n	8002296 <groveLCD_term_printf+0xb6>
				char tmp[10];
				int i=0;
 8002244:	2300      	movs	r3, #0
 8002246:	673b      	str	r3, [r7, #112]	; 0x70
				while ((ch>='0') && (ch<='9')) {
 8002248:	e012      	b.n	8002270 <groveLCD_term_printf+0x90>
					tmp[i++]=ch;
 800224a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800224c:	1c5a      	adds	r2, r3, #1
 800224e:	673a      	str	r2, [r7, #112]	; 0x70
 8002250:	3388      	adds	r3, #136	; 0x88
 8002252:	443b      	add	r3, r7
 8002254:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8002258:	f803 2c88 	strb.w	r2, [r3, #-136]
					ch=*++fmt;
 800225c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002260:	3301      	adds	r3, #1
 8002262:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002266:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				while ((ch>='0') && (ch<='9')) {
 8002270:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002274:	2b2f      	cmp	r3, #47	; 0x2f
 8002276:	d903      	bls.n	8002280 <groveLCD_term_printf+0xa0>
 8002278:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800227c:	2b39      	cmp	r3, #57	; 0x39
 800227e:	d9e4      	bls.n	800224a <groveLCD_term_printf+0x6a>
				}
				tmp[i]='\0';
 8002280:	463a      	mov	r2, r7
 8002282:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002284:	4413      	add	r3, r2
 8002286:	2200      	movs	r2, #0
 8002288:	701a      	strb	r2, [r3, #0]
				size=str2num(tmp,10);
 800228a:	463b      	mov	r3, r7
 800228c:	210a      	movs	r1, #10
 800228e:	4618      	mov	r0, r3
 8002290:	f001 fc00 	bl	8003a94 <str2num>
 8002294:	67f8      	str	r0, [r7, #124]	; 0x7c
			}
			switch (ch) {
 8002296:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800229a:	2b25      	cmp	r3, #37	; 0x25
 800229c:	d03c      	beq.n	8002318 <groveLCD_term_printf+0x138>
 800229e:	2b25      	cmp	r3, #37	; 0x25
 80022a0:	f2c0 8164 	blt.w	800256c <groveLCD_term_printf+0x38c>
 80022a4:	2b78      	cmp	r3, #120	; 0x78
 80022a6:	f300 8161 	bgt.w	800256c <groveLCD_term_printf+0x38c>
 80022aa:	2b63      	cmp	r3, #99	; 0x63
 80022ac:	f2c0 815e 	blt.w	800256c <groveLCD_term_printf+0x38c>
 80022b0:	3b63      	subs	r3, #99	; 0x63
 80022b2:	2b15      	cmp	r3, #21
 80022b4:	f200 815a 	bhi.w	800256c <groveLCD_term_printf+0x38c>
 80022b8:	a201      	add	r2, pc, #4	; (adr r2, 80022c0 <groveLCD_term_printf+0xe0>)
 80022ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022be:	bf00      	nop
 80022c0:	08002321 	.word	0x08002321
 80022c4:	0800234b 	.word	0x0800234b
 80022c8:	0800256d 	.word	0x0800256d
 80022cc:	0800244b 	.word	0x0800244b
 80022d0:	0800256d 	.word	0x0800256d
 80022d4:	0800256d 	.word	0x0800256d
 80022d8:	0800256d 	.word	0x0800256d
 80022dc:	0800256d 	.word	0x0800256d
 80022e0:	0800256d 	.word	0x0800256d
 80022e4:	0800256d 	.word	0x0800256d
 80022e8:	0800256d 	.word	0x0800256d
 80022ec:	0800256d 	.word	0x0800256d
 80022f0:	080023bb 	.word	0x080023bb
 80022f4:	080023e7 	.word	0x080023e7
 80022f8:	0800256d 	.word	0x0800256d
 80022fc:	0800256d 	.word	0x0800256d
 8002300:	08002339 	.word	0x08002339
 8002304:	0800256d 	.word	0x0800256d
 8002308:	0800238f 	.word	0x0800238f
 800230c:	0800256d 	.word	0x0800256d
 8002310:	0800256d 	.word	0x0800256d
 8002314:	0800241f 	.word	0x0800241f
				case '%':
					groveLCD_write('%');
 8002318:	2025      	movs	r0, #37	; 0x25
 800231a:	f7ff fede 	bl	80020da <groveLCD_write>
					break;
 800231e:	e132      	b.n	8002586 <groveLCD_term_printf+0x3a6>
				case 'c':
					ch = va_arg(ap, int);
 8002320:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002322:	1d1a      	adds	r2, r3, #4
 8002324:	64ba      	str	r2, [r7, #72]	; 0x48
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					groveLCD_write(ch);
 800232c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff fed2 	bl	80020da <groveLCD_write>
					break;
 8002336:	e126      	b.n	8002586 <groveLCD_term_printf+0x3a6>
				case 's':
					p = va_arg(ap, char *);
 8002338:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800233a:	1d1a      	adds	r2, r3, #4
 800233c:	64ba      	str	r2, [r7, #72]	; 0x48
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	66fb      	str	r3, [r7, #108]	; 0x6c
					groveLCD_putString(p);
 8002342:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002344:	f7ff fedd 	bl	8002102 <groveLCD_putString>
					break;
 8002348:	e11d      	b.n	8002586 <groveLCD_term_printf+0x3a6>
				case 'd':
					ul = va_arg(ap, long);
 800234a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800234c:	1d1a      	adds	r2, r3, #4
 800234e:	64ba      	str	r2, [r7, #72]	; 0x48
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					if ((long)ul < 0) {
 8002356:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800235a:	2b00      	cmp	r3, #0
 800235c:	da07      	bge.n	800236e <groveLCD_term_printf+0x18e>
						groveLCD_write('-');
 800235e:	202d      	movs	r0, #45	; 0x2d
 8002360:	f7ff febb 	bl	80020da <groveLCD_write>
						ul = -(long)ul;
 8002364:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002368:	425b      	negs	r3, r3
 800236a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
						//size--;
					}
					num2str(s, ul, 10, size, sp);
 800236e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002370:	f107 000c 	add.w	r0, r7, #12
 8002374:	9300      	str	r3, [sp, #0]
 8002376:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002378:	220a      	movs	r2, #10
 800237a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800237e:	f001 fb05 	bl	800398c <num2str>
					groveLCD_putString(s);
 8002382:	f107 030c 	add.w	r3, r7, #12
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff febb 	bl	8002102 <groveLCD_putString>
					break;
 800238c:	e0fb      	b.n	8002586 <groveLCD_term_printf+0x3a6>
				case 'u':
					ul = va_arg(ap, unsigned int);
 800238e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002390:	1d1a      	adds	r2, r3, #4
 8002392:	64ba      	str	r2, [r7, #72]	; 0x48
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					num2str(s, ul, 10, size, sp);
 800239a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800239c:	f107 000c 	add.w	r0, r7, #12
 80023a0:	9300      	str	r3, [sp, #0]
 80023a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023a4:	220a      	movs	r2, #10
 80023a6:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80023aa:	f001 faef 	bl	800398c <num2str>
					groveLCD_putString(s);
 80023ae:	f107 030c 	add.w	r3, r7, #12
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff fea5 	bl	8002102 <groveLCD_putString>
					break;
 80023b8:	e0e5      	b.n	8002586 <groveLCD_term_printf+0x3a6>
				case 'o':
					ul = va_arg(ap, unsigned int);
 80023ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023bc:	1d1a      	adds	r2, r3, #4
 80023be:	64ba      	str	r2, [r7, #72]	; 0x48
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					num2str(s, ul, 8, size, sp);
 80023c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023c8:	f107 000c 	add.w	r0, r7, #12
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023d0:	2208      	movs	r2, #8
 80023d2:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80023d6:	f001 fad9 	bl	800398c <num2str>
					groveLCD_putString(s);
 80023da:	f107 030c 	add.w	r3, r7, #12
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff fe8f 	bl	8002102 <groveLCD_putString>
					break;
 80023e4:	e0cf      	b.n	8002586 <groveLCD_term_printf+0x3a6>
				case 'p':
					groveLCD_write('0');
 80023e6:	2030      	movs	r0, #48	; 0x30
 80023e8:	f7ff fe77 	bl	80020da <groveLCD_write>
					groveLCD_write('x');
 80023ec:	2078      	movs	r0, #120	; 0x78
 80023ee:	f7ff fe74 	bl	80020da <groveLCD_write>
					ul = va_arg(ap, unsigned int);
 80023f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023f4:	1d1a      	adds	r2, r3, #4
 80023f6:	64ba      	str	r2, [r7, #72]	; 0x48
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					num2str(s, ul, 16, size, sp);
 80023fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002400:	f107 000c 	add.w	r0, r7, #12
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002408:	2210      	movs	r2, #16
 800240a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800240e:	f001 fabd 	bl	800398c <num2str>
					groveLCD_putString(s);
 8002412:	f107 030c 	add.w	r3, r7, #12
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff fe73 	bl	8002102 <groveLCD_putString>
					break;
 800241c:	e0b3      	b.n	8002586 <groveLCD_term_printf+0x3a6>
				case 'x':
					ul = va_arg(ap, unsigned int);
 800241e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002420:	1d1a      	adds	r2, r3, #4
 8002422:	64ba      	str	r2, [r7, #72]	; 0x48
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					num2str(s, ul, 16, size, sp);
 800242a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800242c:	f107 000c 	add.w	r0, r7, #12
 8002430:	9300      	str	r3, [sp, #0]
 8002432:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002434:	2210      	movs	r2, #16
 8002436:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800243a:	f001 faa7 	bl	800398c <num2str>
					groveLCD_putString(s);
 800243e:	f107 030c 	add.w	r3, r7, #12
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff fe5d 	bl	8002102 <groveLCD_putString>
					break;
 8002448:	e09d      	b.n	8002586 <groveLCD_term_printf+0x3a6>
				case 'f':
					if(first==0){ ull = va_arg(ap, long long unsigned int); first = 1;}
 800244a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800244c:	2b00      	cmp	r3, #0
 800244e:	d10c      	bne.n	800246a <groveLCD_term_printf+0x28a>
 8002450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002452:	3307      	adds	r3, #7
 8002454:	f023 0307 	bic.w	r3, r3, #7
 8002458:	f103 0208 	add.w	r2, r3, #8
 800245c:	64ba      	str	r2, [r7, #72]	; 0x48
 800245e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002462:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8002466:	2301      	movs	r3, #1
 8002468:	677b      	str	r3, [r7, #116]	; 0x74
					ull = va_arg(ap, long long unsigned int);
 800246a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800246c:	3307      	adds	r3, #7
 800246e:	f023 0307 	bic.w	r3, r3, #7
 8002472:	f103 0208 	add.w	r2, r3, #8
 8002476:	64ba      	str	r2, [r7, #72]	; 0x48
 8002478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800247c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
					int sign = ( ull & 0x80000000 ) >> 31;
 8002480:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002484:	f04f 0200 	mov.w	r2, #0
 8002488:	f04f 0300 	mov.w	r3, #0
 800248c:	0fc2      	lsrs	r2, r0, #31
 800248e:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8002492:	0fcb      	lsrs	r3, r1, #31
 8002494:	4613      	mov	r3, r2
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	65fb      	str	r3, [r7, #92]	; 0x5c
					int m = (ull & 0x000FFFFF) ; // should be 0x007FFFFF
 800249c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800249e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024a2:	65bb      	str	r3, [r7, #88]	; 0x58
					float mf = (float)m ;
 80024a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024a6:	ee07 3a90 	vmov	s15, r3
 80024aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024ae:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
					mf = mf / pow(2.0,20.0);
 80024b2:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80024b6:	eddf 6a40 	vldr	s13, [pc, #256]	; 80025b8 <groveLCD_term_printf+0x3d8>
 80024ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024be:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
					mf = mf + 1.0;
 80024c2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80024c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80024ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024ce:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
					int e = ( ull & 0x78000000 ) >> 23 ; // should be int e = ( ul & 0x7F800000 ) >> 23;
 80024d2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80024d6:	f04f 0200 	mov.w	r2, #0
 80024da:	f04f 0300 	mov.w	r3, #0
 80024de:	0dc2      	lsrs	r2, r0, #23
 80024e0:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 80024e4:	0dcb      	lsrs	r3, r1, #23
 80024e6:	4613      	mov	r3, r2
 80024e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024ec:	653b      	str	r3, [r7, #80]	; 0x50
					e = e | (( ull & 0x000F00000 ) >> 20);
 80024ee:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80024f2:	f04f 0200 	mov.w	r2, #0
 80024f6:	f04f 0300 	mov.w	r3, #0
 80024fa:	0d02      	lsrs	r2, r0, #20
 80024fc:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8002500:	0d0b      	lsrs	r3, r1, #20
 8002502:	4613      	mov	r3, r2
 8002504:	f003 020f 	and.w	r2, r3, #15
 8002508:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800250a:	4313      	orrs	r3, r2
 800250c:	653b      	str	r3, [r7, #80]	; 0x50
					e = e - 127;
 800250e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002510:	3b7f      	subs	r3, #127	; 0x7f
 8002512:	653b      	str	r3, [r7, #80]	; 0x50
					float f = mf*myPow(2.0,e);
 8002514:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002516:	f7fe f82f 	bl	8000578 <__aeabi_f2d>
 800251a:	4604      	mov	r4, r0
 800251c:	460d      	mov	r5, r1
 800251e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002520:	ed9f 0b23 	vldr	d0, [pc, #140]	; 80025b0 <groveLCD_term_printf+0x3d0>
 8002524:	f001 fbc4 	bl	8003cb0 <myPow>
 8002528:	ec53 2b10 	vmov	r2, r3, d0
 800252c:	4620      	mov	r0, r4
 800252e:	4629      	mov	r1, r5
 8002530:	f7fe f87a 	bl	8000628 <__aeabi_dmul>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	4610      	mov	r0, r2
 800253a:	4619      	mov	r1, r3
 800253c:	f7fe fb0e 	bl	8000b5c <__aeabi_d2f>
 8002540:	4603      	mov	r3, r0
 8002542:	64fb      	str	r3, [r7, #76]	; 0x4c
					if(sign==1){ groveLCD_write('-'); }
 8002544:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002546:	2b01      	cmp	r3, #1
 8002548:	d102      	bne.n	8002550 <groveLCD_term_printf+0x370>
 800254a:	202d      	movs	r0, #45	; 0x2d
 800254c:	f7ff fdc5 	bl	80020da <groveLCD_write>
					float2str((char*)s, f, 5);
 8002550:	f107 030c 	add.w	r3, r7, #12
 8002554:	2105      	movs	r1, #5
 8002556:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 800255a:	4618      	mov	r0, r3
 800255c:	f001 fb58 	bl	8003c10 <float2str>
					groveLCD_putString((char*)s);
 8002560:	f107 030c 	add.w	r3, r7, #12
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff fdcc 	bl	8002102 <groveLCD_putString>
					break;
 800256a:	e00c      	b.n	8002586 <groveLCD_term_printf+0x3a6>

				default:
					groveLCD_write(*fmt);
 800256c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff fdb1 	bl	80020da <groveLCD_write>
 8002578:	e005      	b.n	8002586 <groveLCD_term_printf+0x3a6>
			}
		} else groveLCD_write(*fmt);
 800257a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff fdaa 	bl	80020da <groveLCD_write>
		fmt++;
 8002586:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800258a:	3301      	adds	r3, #1
 800258c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	while (*fmt != '\0') {
 8002590:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	2b00      	cmp	r3, #0
 8002598:	f47f ae2c 	bne.w	80021f4 <groveLCD_term_printf+0x14>
	}
	va_end(ap);
	return;
 800259c:	bf00      	nop
}
 800259e:	3788      	adds	r7, #136	; 0x88
 80025a0:	46bd      	mov	sp, r7
 80025a2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80025a6:	b004      	add	sp, #16
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	f3af 8000 	nop.w
 80025b0:	00000000 	.word	0x00000000
 80025b4:	40000000 	.word	0x40000000
 80025b8:	49800000 	.word	0x49800000

080025bc <main>:

}

//=========================================================================
int main(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b08a      	sub	sp, #40	; 0x28
 80025c0:	af02      	add	r7, sp, #8
  HAL_Init();
 80025c2:	f001 fbe9 	bl	8003d98 <HAL_Init>
  SystemClock_Config();
 80025c6:	f001 f977 	bl	80038b8 <SystemClock_Config>

  MX_GPIO_Init();
 80025ca:	f7ff fac1 	bl	8001b50 <MX_GPIO_Init>
  MX_DMA_Init();
 80025ce:	f7ff fc4f 	bl	8001e70 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80025d2:	f7ff fc23 	bl	8001e1c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80025d6:	f7ff fb55 	bl	8001c84 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80025da:	f7ff fbf5 	bl	8001dc8 <MX_USART1_UART_Init>

  captDistIR_Init();		// Capteurs Infrarouge
 80025de:	f7fe ff81 	bl	80014e4 <captDistIR_Init>
  quadEncoder_Init();		// Encodeurs Incrémentaux
 80025e2:	f000 fbaf 	bl	8002d44 <quadEncoder_Init>

  // Test Ecran LCD
  groveLCD_begin(16,2,0); // !! cette fonction prend du temps
 80025e6:	2200      	movs	r2, #0
 80025e8:	2102      	movs	r1, #2
 80025ea:	2010      	movs	r0, #16
 80025ec:	f7ff fc96 	bl	8001f1c <groveLCD_begin>
  HAL_Delay(100);
 80025f0:	2064      	movs	r0, #100	; 0x64
 80025f2:	f001 fc13 	bl	8003e1c <HAL_Delay>
  groveLCD_setCursor(0,0);
 80025f6:	2100      	movs	r1, #0
 80025f8:	2000      	movs	r0, #0
 80025fa:	f7ff fd21 	bl	8002040 <groveLCD_setCursor>
  groveLCD_setColor(1);
 80025fe:	2001      	movs	r0, #1
 8002600:	f7ff fdc4 	bl	800218c <groveLCD_setColor>
  groveLCD_term_printf("Titouan/\njeremy/Louanne");
 8002604:	4850      	ldr	r0, [pc, #320]	; (8002748 <main+0x18c>)
 8002606:	f7ff fdeb 	bl	80021e0 <groveLCD_term_printf>
  HAL_Delay(1000);
 800260a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800260e:	f001 fc05 	bl	8003e1c <HAL_Delay>

  motorCommand_Init();
 8002612:	f000 fb1d 	bl	8002c50 <motorCommand_Init>

  HAL_Delay(500);
 8002616:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800261a:	f001 fbff 	bl	8003e1c <HAL_Delay>

  //Use to test the motor delay between each loop##
  GPIO_InitTypeDef  GPIO_InitStruct;
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800261e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002622:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002624:	2301      	movs	r3, #1
 8002626:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002628:	2301      	movs	r3, #1
 800262a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800262c:	2302      	movs	r3, #2
 800262e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002630:	f107 0308 	add.w	r3, r7, #8
 8002634:	4619      	mov	r1, r3
 8002636:	4845      	ldr	r0, [pc, #276]	; (800274c <main+0x190>)
 8002638:	f002 fa1a 	bl	8004a70 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 0);
 800263c:	2200      	movs	r2, #0
 800263e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002642:	4842      	ldr	r0, [pc, #264]	; (800274c <main+0x190>)
 8002644:	f002 fb98 	bl	8004d78 <HAL_GPIO_WritePin>
  //################################################

  motorRight_SetDuty(100);
 8002648:	2064      	movs	r0, #100	; 0x64
 800264a:	f000 fb6b 	bl	8002d24 <motorRight_SetDuty>
  motorLeft_SetDuty(100);
 800264e:	2064      	movs	r0, #100	; 0x64
 8002650:	f000 fb58 	bl	8002d04 <motorLeft_SetDuty>

  // TEST VL53L0X ###################################
  uint8_t i;
  uint16_t val;
  i2c1_ReadRegBuffer(0x53,0xC2,&i,1);
 8002654:	1dfa      	adds	r2, r7, #7
 8002656:	2301      	movs	r3, #1
 8002658:	21c2      	movs	r1, #194	; 0xc2
 800265a:	2053      	movs	r0, #83	; 0x53
 800265c:	f7ff fb5a 	bl	8001d14 <i2c1_ReadRegBuffer>

  initVL53L0X();
 8002660:	f7fe fcf4 	bl	800104c <initVL53L0X>

  val = readRangeSingleMillimeters()/10;
 8002664:	f7fe feee 	bl	8001444 <readRangeSingleMillimeters>
 8002668:	4603      	mov	r3, r0
 800266a:	461a      	mov	r2, r3
 800266c:	4b38      	ldr	r3, [pc, #224]	; (8002750 <main+0x194>)
 800266e:	fba3 2302 	umull	r2, r3, r3, r2
 8002672:	08db      	lsrs	r3, r3, #3
 8002674:	83fb      	strh	r3, [r7, #30]
  HAL_Delay(200);
 8002676:	20c8      	movs	r0, #200	; 0xc8
 8002678:	f001 fbd0 	bl	8003e1c <HAL_Delay>
  //#################################################

  HAL_Delay(50);
 800267c:	2032      	movs	r0, #50	; 0x32
 800267e:	f001 fbcd 	bl	8003e1c <HAL_Delay>

  osKernelInitialize();
 8002682:	f007 fe51 	bl	800a328 <osKernelInitialize>
  //defaultTaskHandle = osThreadNew(microros_task, NULL, &defaultTask_attributes);
  #if SYNCHRO_EX == EX3
    xTaskCreate(microros_task, ( signed portCHAR * ) "microros_task", 512 /* stack size */, NULL,  tskIDLE_PRIORITY, NULL );
 8002686:	2300      	movs	r3, #0
 8002688:	9301      	str	r3, [sp, #4]
 800268a:	2300      	movs	r3, #0
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	2300      	movs	r3, #0
 8002690:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002694:	492f      	ldr	r1, [pc, #188]	; (8002754 <main+0x198>)
 8002696:	4830      	ldr	r0, [pc, #192]	; (8002758 <main+0x19c>)
 8002698:	f008 fe3b 	bl	800b312 <xTaskCreate>
	#if LCD
	  xTaskCreate(task_LCD, ( signed portCHAR * ) "task LCD", 512 /* stack size */, NULL, tskIDLE_PRIORITY+1, NULL);
	#endif
  #endif

  vSemaphoreCreateBinary(xSemaphore);
 800269c:	2203      	movs	r2, #3
 800269e:	2100      	movs	r1, #0
 80026a0:	2001      	movs	r0, #1
 80026a2:	f008 f86f 	bl	800a784 <xQueueGenericCreate>
 80026a6:	4603      	mov	r3, r0
 80026a8:	4a2c      	ldr	r2, [pc, #176]	; (800275c <main+0x1a0>)
 80026aa:	6013      	str	r3, [r2, #0]
 80026ac:	4b2b      	ldr	r3, [pc, #172]	; (800275c <main+0x1a0>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d006      	beq.n	80026c2 <main+0x106>
 80026b4:	4b29      	ldr	r3, [pc, #164]	; (800275c <main+0x1a0>)
 80026b6:	6818      	ldr	r0, [r3, #0]
 80026b8:	2300      	movs	r3, #0
 80026ba:	2200      	movs	r2, #0
 80026bc:	2100      	movs	r1, #0
 80026be:	f008 f8bf 	bl	800a840 <xQueueGenericSend>
  xSemaphoreTake( xSemaphore, portMAX_DELAY );
 80026c2:	4b26      	ldr	r3, [pc, #152]	; (800275c <main+0x1a0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80026ca:	4618      	mov	r0, r3
 80026cc:	f008 fb32 	bl	800ad34 <xQueueSemaphoreTake>

  qhL = xQueueCreate( 1, sizeof(struct AMessage ) );
 80026d0:	2200      	movs	r2, #0
 80026d2:	2108      	movs	r1, #8
 80026d4:	2001      	movs	r0, #1
 80026d6:	f008 f855 	bl	800a784 <xQueueGenericCreate>
 80026da:	4603      	mov	r3, r0
 80026dc:	4a20      	ldr	r2, [pc, #128]	; (8002760 <main+0x1a4>)
 80026de:	6013      	str	r3, [r2, #0]
  qhR = xQueueCreate( 1, sizeof(struct AMessage ) );
 80026e0:	2200      	movs	r2, #0
 80026e2:	2108      	movs	r1, #8
 80026e4:	2001      	movs	r0, #1
 80026e6:	f008 f84d 	bl	800a784 <xQueueGenericCreate>
 80026ea:	4603      	mov	r3, r0
 80026ec:	4a1d      	ldr	r2, [pc, #116]	; (8002764 <main+0x1a8>)
 80026ee:	6013      	str	r3, [r2, #0]
  qhMR = xQueueCreate( 1, sizeof(struct AMessage ) );
 80026f0:	2200      	movs	r2, #0
 80026f2:	2108      	movs	r1, #8
 80026f4:	2001      	movs	r0, #1
 80026f6:	f008 f845 	bl	800a784 <xQueueGenericCreate>
 80026fa:	4603      	mov	r3, r0
 80026fc:	4a1a      	ldr	r2, [pc, #104]	; (8002768 <main+0x1ac>)
 80026fe:	6013      	str	r3, [r2, #0]

  qhLCD = xQueueCreate( 1, sizeof(struct AMessage ) );
 8002700:	2200      	movs	r2, #0
 8002702:	2108      	movs	r1, #8
 8002704:	2001      	movs	r0, #1
 8002706:	f008 f83d 	bl	800a784 <xQueueGenericCreate>
 800270a:	4603      	mov	r3, r0
 800270c:	4a17      	ldr	r2, [pc, #92]	; (800276c <main+0x1b0>)
 800270e:	6013      	str	r3, [r2, #0]
  qhCamG = xQueueCreate( 1, sizeof(struct AMessage ) );
 8002710:	2200      	movs	r2, #0
 8002712:	2108      	movs	r1, #8
 8002714:	2001      	movs	r0, #1
 8002716:	f008 f835 	bl	800a784 <xQueueGenericCreate>
 800271a:	4603      	mov	r3, r0
 800271c:	4a14      	ldr	r2, [pc, #80]	; (8002770 <main+0x1b4>)
 800271e:	6013      	str	r3, [r2, #0]
  qhCamD = xQueueCreate( 1, sizeof(struct AMessage ) );
 8002720:	2200      	movs	r2, #0
 8002722:	2108      	movs	r1, #8
 8002724:	2001      	movs	r0, #1
 8002726:	f008 f82d 	bl	800a784 <xQueueGenericCreate>
 800272a:	4603      	mov	r3, r0
 800272c:	4a11      	ldr	r2, [pc, #68]	; (8002774 <main+0x1b8>)
 800272e:	6013      	str	r3, [r2, #0]
  qhUlt = xQueueCreate( 1, sizeof(struct AMessage ) );
 8002730:	2200      	movs	r2, #0
 8002732:	2108      	movs	r1, #8
 8002734:	2001      	movs	r0, #1
 8002736:	f008 f825 	bl	800a784 <xQueueGenericCreate>
 800273a:	4603      	mov	r3, r0
 800273c:	4a0e      	ldr	r2, [pc, #56]	; (8002778 <main+0x1bc>)
 800273e:	6013      	str	r3, [r2, #0]

  //rec_buf6[0] = 'T';

  osKernelStart();
 8002740:	f007 fe16 	bl	800a370 <osKernelStart>
  while(1)
 8002744:	e7fe      	b.n	8002744 <main+0x188>
 8002746:	bf00      	nop
 8002748:	08017408 	.word	0x08017408
 800274c:	40020800 	.word	0x40020800
 8002750:	cccccccd 	.word	0xcccccccd
 8002754:	08017420 	.word	0x08017420
 8002758:	0800277d 	.word	0x0800277d
 800275c:	200047c8 	.word	0x200047c8
 8002760:	200047cc 	.word	0x200047cc
 8002764:	200047d0 	.word	0x200047d0
 8002768:	200047d4 	.word	0x200047d4
 800276c:	200047d8 	.word	0x200047d8
 8002770:	200047dc 	.word	0x200047dc
 8002774:	200047e0 	.word	0x200047e0
 8002778:	200047e4 	.word	0x200047e4

0800277c <microros_task>:
void microros_deallocate(void * pointer, void * state);
void * microros_reallocate(void * pointer, size_t size, void * state);
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);

void microros_task(void *argument)
{
 800277c:	b5b0      	push	{r4, r5, r7, lr}
 800277e:	b0ae      	sub	sp, #184	; 0xb8
 8002780:	af02      	add	r7, sp, #8
 8002782:	61f8      	str	r0, [r7, #28]
	// micro-ROS configuration
	rmw_uros_set_custom_transport(true,
 8002784:	4b5f      	ldr	r3, [pc, #380]	; (8002904 <microros_task+0x188>)
 8002786:	9301      	str	r3, [sp, #4]
 8002788:	4b5f      	ldr	r3, [pc, #380]	; (8002908 <microros_task+0x18c>)
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	4b5f      	ldr	r3, [pc, #380]	; (800290c <microros_task+0x190>)
 800278e:	4a60      	ldr	r2, [pc, #384]	; (8002910 <microros_task+0x194>)
 8002790:	4960      	ldr	r1, [pc, #384]	; (8002914 <microros_task+0x198>)
 8002792:	2001      	movs	r0, #1
 8002794:	f00b f96a 	bl	800da6c <rmw_uros_set_custom_transport>
		cubemx_transport_open,
		cubemx_transport_close,
		cubemx_transport_write,
		cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8002798:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800279c:	4618      	mov	r0, r3
 800279e:	f00a ff35 	bl	800d60c <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 80027a2:	4b5d      	ldr	r3, [pc, #372]	; (8002918 <microros_task+0x19c>)
 80027a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	freeRTOS_allocator.deallocate = microros_deallocate;
 80027a8:	4b5c      	ldr	r3, [pc, #368]	; (800291c <microros_task+0x1a0>)
 80027aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	freeRTOS_allocator.reallocate = microros_reallocate;
 80027ae:	4b5c      	ldr	r3, [pc, #368]	; (8002920 <microros_task+0x1a4>)
 80027b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80027b4:	4b5b      	ldr	r3, [pc, #364]	; (8002924 <microros_task+0x1a8>)
 80027b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80027ba:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80027be:	4618      	mov	r0, r3
 80027c0:	f00a ff32 	bl	800d628 <rcutils_set_default_allocator>
 80027c4:	4603      	mov	r3, r0
 80027c6:	f083 0301 	eor.w	r3, r3, #1
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d004      	beq.n	80027da <microros_task+0x5e>
		printf("Error on default allocators (line %d)\n", __LINE__);
 80027d0:	f44f 7115 	mov.w	r1, #596	; 0x254
 80027d4:	4854      	ldr	r0, [pc, #336]	; (8002928 <microros_task+0x1ac>)
 80027d6:	f013 fcef 	bl	80161b8 <iprintf>
	std_msgs__msg__String msg;
	rclc_support_t support;
	rcl_allocator_t allocator;
	rcl_node_t node;

	allocator = rcl_get_default_allocator();
 80027da:	463b      	mov	r3, r7
 80027dc:	4618      	mov	r0, r3
 80027de:	f00a ff43 	bl	800d668 <rcutils_get_default_allocator>
 80027e2:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80027e6:	463d      	mov	r5, r7
 80027e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027ec:	682b      	ldr	r3, [r5, #0]
 80027ee:	6023      	str	r3, [r4, #0]

	//create init_options
	rclc_support_init(&support, 0, NULL, &allocator);
 80027f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80027f4:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80027f8:	2200      	movs	r2, #0
 80027fa:	2100      	movs	r1, #0
 80027fc:	f00a fe40 	bl	800d480 <rclc_support_init>

	// create node
	rclc_node_init_default(&node, "STM32_node", "", &support);
 8002800:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002804:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002808:	4a48      	ldr	r2, [pc, #288]	; (800292c <microros_task+0x1b0>)
 800280a:	4949      	ldr	r1, [pc, #292]	; (8002930 <microros_task+0x1b4>)
 800280c:	f00a fe86 	bl	800d51c <rclc_node_init_default>

	// create publisher
	rclc_publisher_init_default(
 8002810:	f00b fd68 	bl	800e2e4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 8002814:	4602      	mov	r2, r0
 8002816:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800281a:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800281e:	4b45      	ldr	r3, [pc, #276]	; (8002934 <microros_task+0x1b8>)
 8002820:	f00a feb8 	bl	800d594 <rclc_publisher_init_default>
		&publisher,
		&node,
		ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),
		"cubemx_publisher");

	msg.data.data = (char * ) malloc(ARRAY_LEN * sizeof(char));
 8002824:	2064      	movs	r0, #100	; 0x64
 8002826:	f013 fa3b 	bl	8015ca0 <malloc>
 800282a:	4603      	mov	r3, r0
 800282c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	msg.data.size = 0;
 8002830:	2300      	movs	r3, #0
 8002832:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	msg.data.capacity = ARRAY_LEN;
 8002836:	2364      	movs	r3, #100	; 0x64
 8002838:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	sprintf(msg.data.data, " ");
 800283c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002840:	493d      	ldr	r1, [pc, #244]	; (8002938 <microros_task+0x1bc>)
 8002842:	4618      	mov	r0, r3
 8002844:	f013 fcfe 	bl	8016244 <siprintf>

	struct AMessage pxRxedMessage;

	for(;;)
	{
		xQueueReceive( qhMR,  &( pxRxedMessage ) , 1);
 8002848:	4b3c      	ldr	r3, [pc, #240]	; (800293c <microros_task+0x1c0>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002850:	2201      	movs	r2, #1
 8002852:	4618      	mov	r0, r3
 8002854:	f008 f98e 	bl	800ab74 <xQueueReceive>
		int mode = pxRxedMessage.data;
 8002858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		char direction=pxRxedMessage.command;
 800285e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002862:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab

		if (mode == MODE_OBS)
 8002866:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800286a:	2b00      	cmp	r3, #0
 800286c:	d108      	bne.n	8002880 <microros_task+0x104>
			sprintf(msg.data.data, "M:Obstacle D:%c", direction);
 800286e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002872:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 8002876:	4932      	ldr	r1, [pc, #200]	; (8002940 <microros_task+0x1c4>)
 8002878:	4618      	mov	r0, r3
 800287a:	f013 fce3 	bl	8016244 <siprintf>
 800287e:	e014      	b.n	80028aa <microros_task+0x12e>
		else if (mode == MODE_ZIG)
 8002880:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002884:	2b01      	cmp	r3, #1
 8002886:	d106      	bne.n	8002896 <microros_task+0x11a>
			sprintf(msg.data.data, "M:Zigbee");
 8002888:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800288c:	492d      	ldr	r1, [pc, #180]	; (8002944 <microros_task+0x1c8>)
 800288e:	4618      	mov	r0, r3
 8002890:	f013 fcd8 	bl	8016244 <siprintf>
 8002894:	e009      	b.n	80028aa <microros_task+0x12e>
		else if (mode == MODE_CAM)
 8002896:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800289a:	2b02      	cmp	r3, #2
 800289c:	d105      	bne.n	80028aa <microros_task+0x12e>
			sprintf(msg.data.data, "M:Camera");
 800289e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028a2:	4929      	ldr	r1, [pc, #164]	; (8002948 <microros_task+0x1cc>)
 80028a4:	4618      	mov	r0, r3
 80028a6:	f013 fccd 	bl	8016244 <siprintf>

		#if SYNCHRO_EX == EX3
		sprintf(msg.data.data, "Distance : %d", readRangeSingleMillimeters()/10);
 80028aa:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 80028ae:	f7fe fdc9 	bl	8001444 <readRangeSingleMillimeters>
 80028b2:	4603      	mov	r3, r0
 80028b4:	461a      	mov	r2, r3
 80028b6:	4b25      	ldr	r3, [pc, #148]	; (800294c <microros_task+0x1d0>)
 80028b8:	fba3 2302 	umull	r2, r3, r3, r2
 80028bc:	08db      	lsrs	r3, r3, #3
 80028be:	b29b      	uxth	r3, r3
 80028c0:	461a      	mov	r2, r3
 80028c2:	4923      	ldr	r1, [pc, #140]	; (8002950 <microros_task+0x1d4>)
 80028c4:	4620      	mov	r0, r4
 80028c6:	f013 fcbd 	bl	8016244 <siprintf>
		#endif
		msg.data.size = strlen(msg.data.data);
 80028ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7fd fc90 	bl	80001f4 <strlen>
 80028d4:	4603      	mov	r3, r0
 80028d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

		rcl_ret_t ret = rcl_publish(&publisher, &msg, NULL);
 80028da:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80028de:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80028e2:	2200      	movs	r2, #0
 80028e4:	4618      	mov	r0, r3
 80028e6:	f00a fda7 	bl	800d438 <rcl_publish>
 80028ea:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
		if (ret != RCL_RET_OK)
 80028ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d0a8      	beq.n	8002848 <microros_task+0xcc>
		{
			printf("Error publishing (line %d)\n", __LINE__);
 80028f6:	f240 2189 	movw	r1, #649	; 0x289
 80028fa:	4816      	ldr	r0, [pc, #88]	; (8002954 <microros_task+0x1d8>)
 80028fc:	f013 fc5c 	bl	80161b8 <iprintf>
	{
 8002900:	e7a2      	b.n	8002848 <microros_task+0xcc>
 8002902:	bf00      	nop
 8002904:	08001aa9 	.word	0x08001aa9
 8002908:	08001a41 	.word	0x08001a41
 800290c:	08001a21 	.word	0x08001a21
 8002910:	080019f5 	.word	0x080019f5
 8002914:	200045b8 	.word	0x200045b8
 8002918:	08002989 	.word	0x08002989
 800291c:	080029cd 	.word	0x080029cd
 8002920:	08002a05 	.word	0x08002a05
 8002924:	08002a71 	.word	0x08002a71
 8002928:	08017430 	.word	0x08017430
 800292c:	08017458 	.word	0x08017458
 8002930:	0801745c 	.word	0x0801745c
 8002934:	08017468 	.word	0x08017468
 8002938:	0801747c 	.word	0x0801747c
 800293c:	200047d4 	.word	0x200047d4
 8002940:	08017480 	.word	0x08017480
 8002944:	08017490 	.word	0x08017490
 8002948:	0801749c 	.word	0x0801749c
 800294c:	cccccccd 	.word	0xcccccccd
 8002950:	080174a8 	.word	0x080174a8
 8002954:	080174b8 	.word	0x080174b8

08002958 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM4) {
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a04      	ldr	r2, [pc, #16]	; (8002978 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d101      	bne.n	800296e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800296a:	f001 fa37 	bl	8003ddc <HAL_IncTick>
  }
}
 800296e:	bf00      	nop
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	40000800 	.word	0x40000800

0800297c <Error_Handler>:

//=========================================================================
void Error_Handler(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002980:	b672      	cpsid	i
}
 8002982:	bf00      	nop
  __disable_irq();
  while (1)
 8002984:	e7fe      	b.n	8002984 <Error_Handler+0x8>
	...

08002988 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002992:	4b0c      	ldr	r3, [pc, #48]	; (80029c4 <microros_allocate+0x3c>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	461a      	mov	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4413      	add	r3, r2
 800299c:	461a      	mov	r2, r3
 800299e:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <microros_allocate+0x3c>)
 80029a0:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80029a2:	4b09      	ldr	r3, [pc, #36]	; (80029c8 <microros_allocate+0x40>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	461a      	mov	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4413      	add	r3, r2
 80029ac:	461a      	mov	r2, r3
 80029ae:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <microros_allocate+0x40>)
 80029b0:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7fe fdc8 	bl	8001548 <pvPortMallocMicroROS>
 80029b8:	4603      	mov	r3, r0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	200047e8 	.word	0x200047e8
 80029c8:	200047ec 	.word	0x200047ec

080029cc <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00c      	beq.n	80029f6 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f7fe fed1 	bl	8001784 <getBlockSize>
 80029e2:	4603      	mov	r3, r0
 80029e4:	4a06      	ldr	r2, [pc, #24]	; (8002a00 <microros_deallocate+0x34>)
 80029e6:	6812      	ldr	r2, [r2, #0]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	461a      	mov	r2, r3
 80029ec:	4b04      	ldr	r3, [pc, #16]	; (8002a00 <microros_deallocate+0x34>)
 80029ee:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f7fe fe6d 	bl	80016d0 <vPortFreeMicroROS>
  }
}
 80029f6:	bf00      	nop
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	200047ec 	.word	0x200047ec

08002a04 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002a10:	4b15      	ldr	r3, [pc, #84]	; (8002a68 <microros_reallocate+0x64>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	461a      	mov	r2, r3
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	4413      	add	r3, r2
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	4b12      	ldr	r3, [pc, #72]	; (8002a68 <microros_reallocate+0x64>)
 8002a1e:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002a20:	4b12      	ldr	r3, [pc, #72]	; (8002a6c <microros_reallocate+0x68>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	461a      	mov	r2, r3
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	4413      	add	r3, r2
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	4b0f      	ldr	r3, [pc, #60]	; (8002a6c <microros_reallocate+0x68>)
 8002a2e:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d104      	bne.n	8002a40 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8002a36:	68b8      	ldr	r0, [r7, #8]
 8002a38:	f7fe fd86 	bl	8001548 <pvPortMallocMicroROS>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	e00e      	b.n	8002a5e <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f7fe fe9f 	bl	8001784 <getBlockSize>
 8002a46:	4603      	mov	r3, r0
 8002a48:	4a08      	ldr	r2, [pc, #32]	; (8002a6c <microros_reallocate+0x68>)
 8002a4a:	6812      	ldr	r2, [r2, #0]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	461a      	mov	r2, r3
 8002a50:	4b06      	ldr	r3, [pc, #24]	; (8002a6c <microros_reallocate+0x68>)
 8002a52:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8002a54:	68b9      	ldr	r1, [r7, #8]
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f7fe feb2 	bl	80017c0 <pvPortReallocMicroROS>
 8002a5c:	4603      	mov	r3, r0
  }
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	200047e8 	.word	0x200047e8
 8002a6c:	200047ec 	.word	0x200047ec

08002a70 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	68ba      	ldr	r2, [r7, #8]
 8002a80:	fb02 f303 	mul.w	r3, r2, r3
 8002a84:	4a0c      	ldr	r2, [pc, #48]	; (8002ab8 <microros_zero_allocate+0x48>)
 8002a86:	6812      	ldr	r2, [r2, #0]
 8002a88:	4413      	add	r3, r2
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	4b0a      	ldr	r3, [pc, #40]	; (8002ab8 <microros_zero_allocate+0x48>)
 8002a8e:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	fb02 f303 	mul.w	r3, r2, r3
 8002a98:	4a08      	ldr	r2, [pc, #32]	; (8002abc <microros_zero_allocate+0x4c>)
 8002a9a:	6812      	ldr	r2, [r2, #0]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	4b06      	ldr	r3, [pc, #24]	; (8002abc <microros_zero_allocate+0x4c>)
 8002aa2:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002aa4:	68b9      	ldr	r1, [r7, #8]
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f7fe fec4 	bl	8001834 <pvPortCallocMicroROS>
 8002aac:	4603      	mov	r3, r0
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	200047e8 	.word	0x200047e8
 8002abc:	200047ec 	.word	0x200047ec

08002ac0 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002ac0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002ac4:	b086      	sub	sp, #24
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002acc:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8002ad2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ad6:	a320      	add	r3, pc, #128	; (adr r3, 8002b58 <UTILS_NanosecondsToTimespec+0x98>)
 8002ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002adc:	f7fe f88e 	bl	8000bfc <__aeabi_ldivmod>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8002aea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002aee:	a31a      	add	r3, pc, #104	; (adr r3, 8002b58 <UTILS_NanosecondsToTimespec+0x98>)
 8002af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af4:	f7fe f882 	bl	8000bfc <__aeabi_ldivmod>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	da20      	bge.n	8002b46 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	4a11      	ldr	r2, [pc, #68]	; (8002b50 <UTILS_NanosecondsToTimespec+0x90>)
 8002b0a:	fb82 1203 	smull	r1, r2, r2, r3
 8002b0e:	1712      	asrs	r2, r2, #28
 8002b10:	17db      	asrs	r3, r3, #31
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	3301      	adds	r3, #1
 8002b16:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b1e:	6979      	ldr	r1, [r7, #20]
 8002b20:	17c8      	asrs	r0, r1, #31
 8002b22:	460c      	mov	r4, r1
 8002b24:	4605      	mov	r5, r0
 8002b26:	ebb2 0804 	subs.w	r8, r2, r4
 8002b2a:	eb63 0905 	sbc.w	r9, r3, r5
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	4906      	ldr	r1, [pc, #24]	; (8002b54 <UTILS_NanosecondsToTimespec+0x94>)
 8002b3c:	fb01 f303 	mul.w	r3, r1, r3
 8002b40:	441a      	add	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	609a      	str	r2, [r3, #8]
    }
}
 8002b46:	bf00      	nop
 8002b48:	3718      	adds	r7, #24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002b50:	44b82fa1 	.word	0x44b82fa1
 8002b54:	3b9aca00 	.word	0x3b9aca00
 8002b58:	3b9aca00 	.word	0x3b9aca00
 8002b5c:	00000000 	.word	0x00000000

08002b60 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002b60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b64:	b08e      	sub	sp, #56	; 0x38
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6278      	str	r0, [r7, #36]	; 0x24
 8002b6a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8002b6c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b70:	2300      	movs	r3, #0
 8002b72:	6013      	str	r3, [r2, #0]
 8002b74:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8002b76:	f04f 0200 	mov.w	r2, #0
 8002b7a:	f04f 0300 	mov.w	r3, #0
 8002b7e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8002b82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b86:	4618      	mov	r0, r3
 8002b88:	f009 f850 	bl	800bc2c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8002b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8e:	17da      	asrs	r2, r3, #31
 8002b90:	61bb      	str	r3, [r7, #24]
 8002b92:	61fa      	str	r2, [r7, #28]
 8002b94:	f04f 0200 	mov.w	r2, #0
 8002b98:	f04f 0300 	mov.w	r3, #0
 8002b9c:	69b9      	ldr	r1, [r7, #24]
 8002b9e:	000b      	movs	r3, r1
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8002ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba8:	2200      	movs	r2, #0
 8002baa:	461c      	mov	r4, r3
 8002bac:	4615      	mov	r5, r2
 8002bae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002bb2:	1911      	adds	r1, r2, r4
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	416b      	adcs	r3, r5
 8002bb8:	60fb      	str	r3, [r7, #12]
 8002bba:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002bbe:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8002bc2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	f04f 0400 	mov.w	r4, #0
 8002bce:	f04f 0500 	mov.w	r5, #0
 8002bd2:	015d      	lsls	r5, r3, #5
 8002bd4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002bd8:	0154      	lsls	r4, r2, #5
 8002bda:	4622      	mov	r2, r4
 8002bdc:	462b      	mov	r3, r5
 8002bde:	ebb2 0800 	subs.w	r8, r2, r0
 8002be2:	eb63 0901 	sbc.w	r9, r3, r1
 8002be6:	f04f 0200 	mov.w	r2, #0
 8002bea:	f04f 0300 	mov.w	r3, #0
 8002bee:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002bf2:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002bf6:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8002bfa:	4690      	mov	r8, r2
 8002bfc:	4699      	mov	r9, r3
 8002bfe:	eb18 0a00 	adds.w	sl, r8, r0
 8002c02:	eb49 0b01 	adc.w	fp, r9, r1
 8002c06:	f04f 0200 	mov.w	r2, #0
 8002c0a:	f04f 0300 	mov.w	r3, #0
 8002c0e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c12:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c16:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c1a:	ebb2 040a 	subs.w	r4, r2, sl
 8002c1e:	603c      	str	r4, [r7, #0]
 8002c20:	eb63 030b 	sbc.w	r3, r3, fp
 8002c24:	607b      	str	r3, [r7, #4]
 8002c26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c2a:	4623      	mov	r3, r4
 8002c2c:	181b      	adds	r3, r3, r0
 8002c2e:	613b      	str	r3, [r7, #16]
 8002c30:	462b      	mov	r3, r5
 8002c32:	eb41 0303 	adc.w	r3, r1, r3
 8002c36:	617b      	str	r3, [r7, #20]
 8002c38:	6a3a      	ldr	r2, [r7, #32]
 8002c3a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c3e:	f7ff ff3f 	bl	8002ac0 <UTILS_NanosecondsToTimespec>

    return 0;
 8002c42:	2300      	movs	r3, #0
 8002c44:	4618      	mov	r0, r3
 8002c46:	3738      	adds	r7, #56	; 0x38
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002c50 <motorCommand_Init>:
// TIMER 3 (PWM)  : CH1 et CH2
// ENABLE : Sortie Logique (GPIO) PA7
//=================================================================

void motorCommand_Init(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
	unsigned int uwPrescalerValue = 0;
 8002c56:	2300      	movs	r3, #0
 8002c58:	607b      	str	r3, [r7, #4]

	/* Compute the prescaler value to have TIM4 counter clock equal to 10MHz */
	  uwPrescalerValue = (unsigned int) ((SystemCoreClock / 10000000) - 1);
 8002c5a:	4b24      	ldr	r3, [pc, #144]	; (8002cec <motorCommand_Init+0x9c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a24      	ldr	r2, [pc, #144]	; (8002cf0 <motorCommand_Init+0xa0>)
 8002c60:	fba2 2303 	umull	r2, r3, r2, r3
 8002c64:	0d9b      	lsrs	r3, r3, #22
 8002c66:	3b01      	subs	r3, #1
 8002c68:	607b      	str	r3, [r7, #4]
	  TimHandle.Instance = TIM3;
 8002c6a:	4b22      	ldr	r3, [pc, #136]	; (8002cf4 <motorCommand_Init+0xa4>)
 8002c6c:	4a22      	ldr	r2, [pc, #136]	; (8002cf8 <motorCommand_Init+0xa8>)
 8002c6e:	601a      	str	r2, [r3, #0]
	  TimHandle.Init.Period = 200 - 1; // 100MHz/200=50kHz
 8002c70:	4b20      	ldr	r3, [pc, #128]	; (8002cf4 <motorCommand_Init+0xa4>)
 8002c72:	22c7      	movs	r2, #199	; 0xc7
 8002c74:	60da      	str	r2, [r3, #12]
	  TimHandle.Init.Prescaler = uwPrescalerValue;
 8002c76:	4a1f      	ldr	r2, [pc, #124]	; (8002cf4 <motorCommand_Init+0xa4>)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6053      	str	r3, [r2, #4]
	  TimHandle.Init.ClockDivision = 0;
 8002c7c:	4b1d      	ldr	r3, [pc, #116]	; (8002cf4 <motorCommand_Init+0xa4>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	611a      	str	r2, [r3, #16]
	  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c82:	4b1c      	ldr	r3, [pc, #112]	; (8002cf4 <motorCommand_Init+0xa4>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	609a      	str	r2, [r3, #8]

	  HAL_TIM_Base_Init(&TimHandle);
 8002c88:	481a      	ldr	r0, [pc, #104]	; (8002cf4 <motorCommand_Init+0xa4>)
 8002c8a:	f005 f9b9 	bl	8008000 <HAL_TIM_Base_Init>

	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c8e:	4b1b      	ldr	r3, [pc, #108]	; (8002cfc <motorCommand_Init+0xac>)
 8002c90:	2260      	movs	r2, #96	; 0x60
 8002c92:	601a      	str	r2, [r3, #0]
	  sConfigOC.Pulse = 0x5;// Specifies the pulse value to be loaded into the Capture Compare Register. This parameter can be a number between Min_Data = 0x0000 and Max_Data = 0xFFFF */
 8002c94:	4b19      	ldr	r3, [pc, #100]	; (8002cfc <motorCommand_Init+0xac>)
 8002c96:	2205      	movs	r2, #5
 8002c98:	605a      	str	r2, [r3, #4]

	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c9a:	4b18      	ldr	r3, [pc, #96]	; (8002cfc <motorCommand_Init+0xac>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	609a      	str	r2, [r3, #8]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ca0:	4b16      	ldr	r3, [pc, #88]	; (8002cfc <motorCommand_Init+0xac>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	611a      	str	r2, [r3, #16]

	 HAL_TIM_PWM_ConfigChannel(&TimHandle, &sConfigOC, TIM_CHANNEL_1);
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	4914      	ldr	r1, [pc, #80]	; (8002cfc <motorCommand_Init+0xac>)
 8002caa:	4812      	ldr	r0, [pc, #72]	; (8002cf4 <motorCommand_Init+0xa4>)
 8002cac:	f005 fd5a 	bl	8008764 <HAL_TIM_PWM_ConfigChannel>
	 HAL_TIM_PWM_ConfigChannel(&TimHandle, &sConfigOC, TIM_CHANNEL_2);
 8002cb0:	2204      	movs	r2, #4
 8002cb2:	4912      	ldr	r1, [pc, #72]	; (8002cfc <motorCommand_Init+0xac>)
 8002cb4:	480f      	ldr	r0, [pc, #60]	; (8002cf4 <motorCommand_Init+0xa4>)
 8002cb6:	f005 fd55 	bl	8008764 <HAL_TIM_PWM_ConfigChannel>

	 // CHANGEMENT DU RAPPORT CYCLIQUE
	 __HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_1, 100);	// 100 : moteurs au repos
 8002cba:	4b0e      	ldr	r3, [pc, #56]	; (8002cf4 <motorCommand_Init+0xa4>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2264      	movs	r2, #100	; 0x64
 8002cc0:	635a      	str	r2, [r3, #52]	; 0x34
	 __HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_2, 100);
 8002cc2:	4b0c      	ldr	r3, [pc, #48]	; (8002cf4 <motorCommand_Init+0xa4>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2264      	movs	r2, #100	; 0x64
 8002cc8:	639a      	str	r2, [r3, #56]	; 0x38

	  HAL_TIM_PWM_Start(&TimHandle, TIM_CHANNEL_1);	// MOTOR RIGHT
 8002cca:	2100      	movs	r1, #0
 8002ccc:	4809      	ldr	r0, [pc, #36]	; (8002cf4 <motorCommand_Init+0xa4>)
 8002cce:	f005 fa53 	bl	8008178 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&TimHandle, TIM_CHANNEL_2); // MOTOR LEFT
 8002cd2:	2104      	movs	r1, #4
 8002cd4:	4807      	ldr	r0, [pc, #28]	; (8002cf4 <motorCommand_Init+0xa4>)
 8002cd6:	f005 fa4f 	bl	8008178 <HAL_TIM_PWM_Start>

	  // ENABLE MOTEUR (SI INVERSEUR)
	  HAL_GPIO_WritePin(GPIOA, PIN_MOTOR_ENABLE, 0);
 8002cda:	2200      	movs	r2, #0
 8002cdc:	2180      	movs	r1, #128	; 0x80
 8002cde:	4808      	ldr	r0, [pc, #32]	; (8002d00 <motorCommand_Init+0xb0>)
 8002ce0:	f002 f84a 	bl	8004d78 <HAL_GPIO_WritePin>
}
 8002ce4:	bf00      	nop
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	20000004 	.word	0x20000004
 8002cf0:	6b5fca6b 	.word	0x6b5fca6b
 8002cf4:	200047f0 	.word	0x200047f0
 8002cf8:	40000400 	.word	0x40000400
 8002cfc:	20004838 	.word	0x20004838
 8002d00:	40020000 	.word	0x40020000

08002d04 <motorLeft_SetDuty>:

//=================================================================
//			SET DUTY CYCLE LEFT
//=================================================================
void motorLeft_SetDuty(int duty)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_1, duty);
 8002d0c:	4b04      	ldr	r3, [pc, #16]	; (8002d20 <motorLeft_SetDuty+0x1c>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	200047f0 	.word	0x200047f0

08002d24 <motorRight_SetDuty>:
//=================================================================
//			SET DUTY CYCLE RIGHT
//=================================================================
void motorRight_SetDuty(int duty)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_2, duty);
 8002d2c:	4b04      	ldr	r3, [pc, #16]	; (8002d40 <motorRight_SetDuty+0x1c>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	200047f0 	.word	0x200047f0

08002d44 <quadEncoder_Init>:
//================================================================
//		TIMER INIT
//================================================================

void quadEncoder_Init(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b08a      	sub	sp, #40	; 0x28
 8002d48:	af00      	add	r7, sp, #0
	TIM_Encoder_InitTypeDef sConfig;
	//--------------------------------------------------
	// TIMER 1
	//--------------------------------------------------
	TimEncoderHandleLeft.Instance = TIM1;
 8002d4a:	4b35      	ldr	r3, [pc, #212]	; (8002e20 <quadEncoder_Init+0xdc>)
 8002d4c:	4a35      	ldr	r2, [pc, #212]	; (8002e24 <quadEncoder_Init+0xe0>)
 8002d4e:	601a      	str	r2, [r3, #0]
	TimEncoderHandleLeft.Init.Prescaler = 0;
 8002d50:	4b33      	ldr	r3, [pc, #204]	; (8002e20 <quadEncoder_Init+0xdc>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	605a      	str	r2, [r3, #4]
	TimEncoderHandleLeft.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d56:	4b32      	ldr	r3, [pc, #200]	; (8002e20 <quadEncoder_Init+0xdc>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	609a      	str	r2, [r3, #8]
	TimEncoderHandleLeft.Init.Period = COUNT_PER_ROUND*4;
 8002d5c:	4b30      	ldr	r3, [pc, #192]	; (8002e20 <quadEncoder_Init+0xdc>)
 8002d5e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002d62:	60da      	str	r2, [r3, #12]
	TimEncoderHandleLeft.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d64:	4b2e      	ldr	r3, [pc, #184]	; (8002e20 <quadEncoder_Init+0xdc>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	611a      	str	r2, [r3, #16]

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	607b      	str	r3, [r7, #4]
	sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60bb      	str	r3, [r7, #8]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002d72:	2301      	movs	r3, #1
 8002d74:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 8002d76:	2308      	movs	r3, #8
 8002d78:	613b      	str	r3, [r7, #16]
	sConfig.IC1Filter = 0x0F;
 8002d7a:	230f      	movs	r3, #15
 8002d7c:	617b      	str	r3, [r7, #20]
	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	61bb      	str	r3, [r7, #24]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;//TIM_ICSELECTION_DIRECTTI; //TIM_TI1SELECTION_XORCOMBINATION
 8002d82:	2301      	movs	r3, #1
 8002d84:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 8002d86:	2308      	movs	r3, #8
 8002d88:	623b      	str	r3, [r7, #32]
	sConfig.IC2Filter = 0x0F;
 8002d8a:	230f      	movs	r3, #15
 8002d8c:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_TIM_Encoder_Init(&TimEncoderHandleLeft, &sConfig);
 8002d8e:	1d3b      	adds	r3, r7, #4
 8002d90:	4619      	mov	r1, r3
 8002d92:	4823      	ldr	r0, [pc, #140]	; (8002e20 <quadEncoder_Init+0xdc>)
 8002d94:	f005 faa0 	bl	80082d8 <HAL_TIM_Encoder_Init>

	__HAL_TIM_SetCounter(&TimEncoderHandleLeft, 0);
 8002d98:	4b21      	ldr	r3, [pc, #132]	; (8002e20 <quadEncoder_Init+0xdc>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_1);
 8002da0:	2100      	movs	r1, #0
 8002da2:	481f      	ldr	r0, [pc, #124]	; (8002e20 <quadEncoder_Init+0xdc>)
 8002da4:	f005 fb48 	bl	8008438 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_2);
 8002da8:	2104      	movs	r1, #4
 8002daa:	481d      	ldr	r0, [pc, #116]	; (8002e20 <quadEncoder_Init+0xdc>)
 8002dac:	f005 fb44 	bl	8008438 <HAL_TIM_Encoder_Start>

	//--------------------------------------------------
	// TIMER 2
	//--------------------------------------------------
	TimEncoderHandleRight.Instance = TIM2;
 8002db0:	4b1d      	ldr	r3, [pc, #116]	; (8002e28 <quadEncoder_Init+0xe4>)
 8002db2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002db6:	601a      	str	r2, [r3, #0]
	TimEncoderHandleRight.Init.Prescaler = 0;
 8002db8:	4b1b      	ldr	r3, [pc, #108]	; (8002e28 <quadEncoder_Init+0xe4>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	605a      	str	r2, [r3, #4]
	TimEncoderHandleRight.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dbe:	4b1a      	ldr	r3, [pc, #104]	; (8002e28 <quadEncoder_Init+0xe4>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	609a      	str	r2, [r3, #8]
	TimEncoderHandleRight.Init.Period = COUNT_PER_ROUND*4;
 8002dc4:	4b18      	ldr	r3, [pc, #96]	; (8002e28 <quadEncoder_Init+0xe4>)
 8002dc6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002dca:	60da      	str	r2, [r3, #12]
	TimEncoderHandleRight.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dcc:	4b16      	ldr	r3, [pc, #88]	; (8002e28 <quadEncoder_Init+0xe4>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	611a      	str	r2, [r3, #16]

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	607b      	str	r3, [r7, #4]
	sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60bb      	str	r3, [r7, #8]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 8002dde:	2308      	movs	r3, #8
 8002de0:	613b      	str	r3, [r7, #16]
	sConfig.IC1Filter = 0x0F;
 8002de2:	230f      	movs	r3, #15
 8002de4:	617b      	str	r3, [r7, #20]
	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002de6:	2300      	movs	r3, #0
 8002de8:	61bb      	str	r3, [r7, #24]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;//TIM_ICSELECTION_DIRECTTI; //TIM_TI1SELECTION_XORCOMBINATION
 8002dea:	2301      	movs	r3, #1
 8002dec:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 8002dee:	2308      	movs	r3, #8
 8002df0:	623b      	str	r3, [r7, #32]
	sConfig.IC2Filter = 0x0F;
 8002df2:	230f      	movs	r3, #15
 8002df4:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_TIM_Encoder_Init(&TimEncoderHandleRight, &sConfig);
 8002df6:	1d3b      	adds	r3, r7, #4
 8002df8:	4619      	mov	r1, r3
 8002dfa:	480b      	ldr	r0, [pc, #44]	; (8002e28 <quadEncoder_Init+0xe4>)
 8002dfc:	f005 fa6c 	bl	80082d8 <HAL_TIM_Encoder_Init>

	__HAL_TIM_SetCounter(&TimEncoderHandleRight, 0);
 8002e00:	4b09      	ldr	r3, [pc, #36]	; (8002e28 <quadEncoder_Init+0xe4>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2200      	movs	r2, #0
 8002e06:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_1);
 8002e08:	2100      	movs	r1, #0
 8002e0a:	4807      	ldr	r0, [pc, #28]	; (8002e28 <quadEncoder_Init+0xe4>)
 8002e0c:	f005 fb14 	bl	8008438 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_2);
 8002e10:	2104      	movs	r1, #4
 8002e12:	4805      	ldr	r0, [pc, #20]	; (8002e28 <quadEncoder_Init+0xe4>)
 8002e14:	f005 fb10 	bl	8008438 <HAL_TIM_Encoder_Start>
}
 8002e18:	bf00      	nop
 8002e1a:	3728      	adds	r7, #40	; 0x28
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	20004854 	.word	0x20004854
 8002e24:	40010000 	.word	0x40010000
 8002e28:	2000489c 	.word	0x2000489c

08002e2c <quadEncoder_CallbackIndexL>:
//================================================================
//		MAJ index Left
//================================================================

void quadEncoder_CallbackIndexL()
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
				if (__HAL_TIM_DIRECTION_STATUS(&TimEncoderHandleLeft)==1)
 8002e30:	4b0f      	ldr	r3, [pc, #60]	; (8002e70 <quadEncoder_CallbackIndexL+0x44>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0310 	and.w	r3, r3, #16
 8002e3a:	2b10      	cmp	r3, #16
 8002e3c:	d105      	bne.n	8002e4a <quadEncoder_CallbackIndexL+0x1e>
				{
					indexL--;
 8002e3e:	4b0d      	ldr	r3, [pc, #52]	; (8002e74 <quadEncoder_CallbackIndexL+0x48>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	3b01      	subs	r3, #1
 8002e44:	4a0b      	ldr	r2, [pc, #44]	; (8002e74 <quadEncoder_CallbackIndexL+0x48>)
 8002e46:	6013      	str	r3, [r2, #0]
 8002e48:	e004      	b.n	8002e54 <quadEncoder_CallbackIndexL+0x28>
				}
				else
				{
					indexL++;
 8002e4a:	4b0a      	ldr	r3, [pc, #40]	; (8002e74 <quadEncoder_CallbackIndexL+0x48>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	3301      	adds	r3, #1
 8002e50:	4a08      	ldr	r2, [pc, #32]	; (8002e74 <quadEncoder_CallbackIndexL+0x48>)
 8002e52:	6013      	str	r3, [r2, #0]
				}


				__HAL_TIM_SetCounter(&TimEncoderHandleLeft, 0);		// RAZ Counter
 8002e54:	4b06      	ldr	r3, [pc, #24]	; (8002e70 <quadEncoder_CallbackIndexL+0x44>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_1);
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	4804      	ldr	r0, [pc, #16]	; (8002e70 <quadEncoder_CallbackIndexL+0x44>)
 8002e60:	f005 faea 	bl	8008438 <HAL_TIM_Encoder_Start>
				HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_2);
 8002e64:	2104      	movs	r1, #4
 8002e66:	4802      	ldr	r0, [pc, #8]	; (8002e70 <quadEncoder_CallbackIndexL+0x44>)
 8002e68:	f005 fae6 	bl	8008438 <HAL_TIM_Encoder_Start>

}
 8002e6c:	bf00      	nop
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	20004854 	.word	0x20004854
 8002e74:	200048e4 	.word	0x200048e4

08002e78 <quadEncoder_CallbackIndexR>:
//================================================================
//		MAJ index Right
//================================================================

void quadEncoder_CallbackIndexR()
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
				if (__HAL_TIM_DIRECTION_STATUS(&TimEncoderHandleRight)==1)
 8002e7c:	4b0f      	ldr	r3, [pc, #60]	; (8002ebc <quadEncoder_CallbackIndexR+0x44>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0310 	and.w	r3, r3, #16
 8002e86:	2b10      	cmp	r3, #16
 8002e88:	d105      	bne.n	8002e96 <quadEncoder_CallbackIndexR+0x1e>
				{
					indexR--;
 8002e8a:	4b0d      	ldr	r3, [pc, #52]	; (8002ec0 <quadEncoder_CallbackIndexR+0x48>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	4a0b      	ldr	r2, [pc, #44]	; (8002ec0 <quadEncoder_CallbackIndexR+0x48>)
 8002e92:	6013      	str	r3, [r2, #0]
 8002e94:	e004      	b.n	8002ea0 <quadEncoder_CallbackIndexR+0x28>

				}
				else
				{
					indexR++;
 8002e96:	4b0a      	ldr	r3, [pc, #40]	; (8002ec0 <quadEncoder_CallbackIndexR+0x48>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	4a08      	ldr	r2, [pc, #32]	; (8002ec0 <quadEncoder_CallbackIndexR+0x48>)
 8002e9e:	6013      	str	r3, [r2, #0]
				}

				__HAL_TIM_SetCounter(&TimEncoderHandleRight, 0);			// RAZ Counter
 8002ea0:	4b06      	ldr	r3, [pc, #24]	; (8002ebc <quadEncoder_CallbackIndexR+0x44>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_1);
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	4804      	ldr	r0, [pc, #16]	; (8002ebc <quadEncoder_CallbackIndexR+0x44>)
 8002eac:	f005 fac4 	bl	8008438 <HAL_TIM_Encoder_Start>
				HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_2);
 8002eb0:	2104      	movs	r1, #4
 8002eb2:	4802      	ldr	r0, [pc, #8]	; (8002ebc <quadEncoder_CallbackIndexR+0x44>)
 8002eb4:	f005 fac0 	bl	8008438 <HAL_TIM_Encoder_Start>

}
 8002eb8:	bf00      	nop
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	2000489c 	.word	0x2000489c
 8002ec0:	200048e8 	.word	0x200048e8

08002ec4 <HAL_MspInit>:
void HAL_Encoder_Timer1_MspInit(void);
void HAL_Encoder_Timer2_MspInit(void);
void HAL_adcir_MspInit(void);

void HAL_MspInit(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eca:	2300      	movs	r3, #0
 8002ecc:	617b      	str	r3, [r7, #20]
 8002ece:	4b32      	ldr	r3, [pc, #200]	; (8002f98 <HAL_MspInit+0xd4>)
 8002ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed2:	4a31      	ldr	r2, [pc, #196]	; (8002f98 <HAL_MspInit+0xd4>)
 8002ed4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8002eda:	4b2f      	ldr	r3, [pc, #188]	; (8002f98 <HAL_MspInit+0xd4>)
 8002edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ee2:	617b      	str	r3, [r7, #20]
 8002ee4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	613b      	str	r3, [r7, #16]
 8002eea:	4b2b      	ldr	r3, [pc, #172]	; (8002f98 <HAL_MspInit+0xd4>)
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	4a2a      	ldr	r2, [pc, #168]	; (8002f98 <HAL_MspInit+0xd4>)
 8002ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ef6:	4b28      	ldr	r3, [pc, #160]	; (8002f98 <HAL_MspInit+0xd4>)
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002efe:	613b      	str	r3, [r7, #16]
 8002f00:	693b      	ldr	r3, [r7, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f02:	2300      	movs	r3, #0
 8002f04:	60fb      	str	r3, [r7, #12]
 8002f06:	4b24      	ldr	r3, [pc, #144]	; (8002f98 <HAL_MspInit+0xd4>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0a:	4a23      	ldr	r2, [pc, #140]	; (8002f98 <HAL_MspInit+0xd4>)
 8002f0c:	f043 0304 	orr.w	r3, r3, #4
 8002f10:	6313      	str	r3, [r2, #48]	; 0x30
 8002f12:	4b21      	ldr	r3, [pc, #132]	; (8002f98 <HAL_MspInit+0xd4>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f16:	f003 0304 	and.w	r3, r3, #4
 8002f1a:	60fb      	str	r3, [r7, #12]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60bb      	str	r3, [r7, #8]
 8002f22:	4b1d      	ldr	r3, [pc, #116]	; (8002f98 <HAL_MspInit+0xd4>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	4a1c      	ldr	r2, [pc, #112]	; (8002f98 <HAL_MspInit+0xd4>)
 8002f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f2e:	4b1a      	ldr	r3, [pc, #104]	; (8002f98 <HAL_MspInit+0xd4>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f36:	60bb      	str	r3, [r7, #8]
 8002f38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	607b      	str	r3, [r7, #4]
 8002f3e:	4b16      	ldr	r3, [pc, #88]	; (8002f98 <HAL_MspInit+0xd4>)
 8002f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f42:	4a15      	ldr	r2, [pc, #84]	; (8002f98 <HAL_MspInit+0xd4>)
 8002f44:	f043 0301 	orr.w	r3, r3, #1
 8002f48:	6313      	str	r3, [r2, #48]	; 0x30
 8002f4a:	4b13      	ldr	r3, [pc, #76]	; (8002f98 <HAL_MspInit+0xd4>)
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	607b      	str	r3, [r7, #4]
 8002f54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f56:	2300      	movs	r3, #0
 8002f58:	603b      	str	r3, [r7, #0]
 8002f5a:	4b0f      	ldr	r3, [pc, #60]	; (8002f98 <HAL_MspInit+0xd4>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	4a0e      	ldr	r2, [pc, #56]	; (8002f98 <HAL_MspInit+0xd4>)
 8002f60:	f043 0302 	orr.w	r3, r3, #2
 8002f64:	6313      	str	r3, [r2, #48]	; 0x30
 8002f66:	4b0c      	ldr	r3, [pc, #48]	; (8002f98 <HAL_MspInit+0xd4>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	603b      	str	r3, [r7, #0]
 8002f70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002f72:	2200      	movs	r2, #0
 8002f74:	210f      	movs	r1, #15
 8002f76:	f06f 0001 	mvn.w	r0, #1
 8002f7a:	f001 f93f 	bl	80041fc <HAL_NVIC_SetPriority>

  HAL_PWM_Timer3_MspInit();
 8002f7e:	f000 f88b 	bl	8003098 <HAL_PWM_Timer3_MspInit>
  HAL_Encoder_Timer1_MspInit();
 8002f82:	f000 f80b 	bl	8002f9c <HAL_Encoder_Timer1_MspInit>
  HAL_Encoder_Timer2_MspInit();
 8002f86:	f000 f849 	bl	800301c <HAL_Encoder_Timer2_MspInit>
  HAL_adcir_MspInit();
 8002f8a:	f000 f8d1 	bl	8003130 <HAL_adcir_MspInit>

}
 8002f8e:	bf00      	nop
 8002f90:	3718      	adds	r7, #24
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	40023800 	.word	0x40023800

08002f9c <HAL_Encoder_Timer1_MspInit>:
PWM1/1	-->	PA8		-- Encodeur Voie A
PWM1/2	--> PA9		-- Encodeur Voie B
EXTI1	--> PB10		-- Index encodeur
******************************************************************/
void HAL_Encoder_Timer1_MspInit(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __TIM1_CLK_ENABLE(); // ATTENTION
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	603b      	str	r3, [r7, #0]
 8002fa6:	4b1a      	ldr	r3, [pc, #104]	; (8003010 <HAL_Encoder_Timer1_MspInit+0x74>)
 8002fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002faa:	4a19      	ldr	r2, [pc, #100]	; (8003010 <HAL_Encoder_Timer1_MspInit+0x74>)
 8002fac:	f043 0301 	orr.w	r3, r3, #1
 8002fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8002fb2:	4b17      	ldr	r3, [pc, #92]	; (8003010 <HAL_Encoder_Timer1_MspInit+0x74>)
 8002fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	603b      	str	r3, [r7, #0]
 8002fbc:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8002fbe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002fc2:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP; // hal_gpio.h
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF1_TIM1 ; // hal_gpio_ex.h
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fd4:	1d3b      	adds	r3, r7, #4
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	480e      	ldr	r0, [pc, #56]	; (8003014 <HAL_Encoder_Timer1_MspInit+0x78>)
 8002fda:	f001 fd49 	bl	8004a70 <HAL_GPIO_Init>

	  // Index moteur -- PB10

	  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002fde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fe2:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002fe4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002fe8:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fea:	2300      	movs	r3, #0
 8002fec:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fee:	1d3b      	adds	r3, r7, #4
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	4809      	ldr	r0, [pc, #36]	; (8003018 <HAL_Encoder_Timer1_MspInit+0x7c>)
 8002ff4:	f001 fd3c 	bl	8004a70 <HAL_GPIO_Init>

	  /* Enable and set EXTI Line0 Interrupt to the lowest priority */
	  HAL_NVIC_SetPriority(EXTI15_10_IRQn, EXTI15_10_IRQ_PRIO, 0);
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	2107      	movs	r1, #7
 8002ffc:	2028      	movs	r0, #40	; 0x28
 8002ffe:	f001 f8fd 	bl	80041fc <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003002:	2028      	movs	r0, #40	; 0x28
 8003004:	f001 f916 	bl	8004234 <HAL_NVIC_EnableIRQ>
}
 8003008:	bf00      	nop
 800300a:	3718      	adds	r7, #24
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40023800 	.word	0x40023800
 8003014:	40020000 	.word	0x40020000
 8003018:	40020400 	.word	0x40020400

0800301c <HAL_Encoder_Timer2_MspInit>:
PWM2/1	-->	PA0		-- Encodeur Voie A
PWM2/2	--> PA1		-- Encodeur Voie B
EXTI 	--> PC0		-- Index Moteur
******************************************************************/
void HAL_Encoder_Timer2_MspInit(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __TIM2_CLK_ENABLE(); // ATTENTION
 8003022:	2300      	movs	r3, #0
 8003024:	603b      	str	r3, [r7, #0]
 8003026:	4b19      	ldr	r3, [pc, #100]	; (800308c <HAL_Encoder_Timer2_MspInit+0x70>)
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	4a18      	ldr	r2, [pc, #96]	; (800308c <HAL_Encoder_Timer2_MspInit+0x70>)
 800302c:	f043 0301 	orr.w	r3, r3, #1
 8003030:	6413      	str	r3, [r2, #64]	; 0x40
 8003032:	4b16      	ldr	r3, [pc, #88]	; (800308c <HAL_Encoder_Timer2_MspInit+0x70>)
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	603b      	str	r3, [r7, #0]
 800303c:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800303e:	2303      	movs	r3, #3
 8003040:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP; // hal_gpio.h
 8003042:	2302      	movs	r3, #2
 8003044:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003046:	2301      	movs	r3, #1
 8003048:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 800304a:	2301      	movs	r3, #1
 800304c:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF1_TIM2 ; // hal_gpio_ex.h
 800304e:	2301      	movs	r3, #1
 8003050:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003052:	1d3b      	adds	r3, r7, #4
 8003054:	4619      	mov	r1, r3
 8003056:	480e      	ldr	r0, [pc, #56]	; (8003090 <HAL_Encoder_Timer2_MspInit+0x74>)
 8003058:	f001 fd0a 	bl	8004a70 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800305c:	2301      	movs	r3, #1
 800305e:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003060:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003064:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003066:	2300      	movs	r3, #0
 8003068:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800306a:	1d3b      	adds	r3, r7, #4
 800306c:	4619      	mov	r1, r3
 800306e:	4809      	ldr	r0, [pc, #36]	; (8003094 <HAL_Encoder_Timer2_MspInit+0x78>)
 8003070:	f001 fcfe 	bl	8004a70 <HAL_GPIO_Init>

	  /* Enable and set EXTI Line0 Interrupt to the lowest priority */
	  HAL_NVIC_SetPriority(EXTI0_IRQn, EXTI0_IRQ_PRIO, 0);
 8003074:	2200      	movs	r2, #0
 8003076:	2106      	movs	r1, #6
 8003078:	2006      	movs	r0, #6
 800307a:	f001 f8bf 	bl	80041fc <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800307e:	2006      	movs	r0, #6
 8003080:	f001 f8d8 	bl	8004234 <HAL_NVIC_EnableIRQ>
}
 8003084:	bf00      	nop
 8003086:	3718      	adds	r7, #24
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40023800 	.word	0x40023800
 8003090:	40020000 	.word	0x40020000
 8003094:	40020800 	.word	0x40020800

08003098 <HAL_PWM_Timer3_MspInit>:
PA6 --> PWM3/1
PC7 --> PWM3/2
PA7 --> ENABLE MOTEUR (actif état Bas)
******************************************************************/
void HAL_PWM_Timer3_MspInit(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __TIM3_CLK_ENABLE();
 800309e:	2300      	movs	r3, #0
 80030a0:	603b      	str	r3, [r7, #0]
 80030a2:	4b20      	ldr	r3, [pc, #128]	; (8003124 <HAL_PWM_Timer3_MspInit+0x8c>)
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	4a1f      	ldr	r2, [pc, #124]	; (8003124 <HAL_PWM_Timer3_MspInit+0x8c>)
 80030a8:	f043 0302 	orr.w	r3, r3, #2
 80030ac:	6413      	str	r3, [r2, #64]	; 0x40
 80030ae:	4b1d      	ldr	r3, [pc, #116]	; (8003124 <HAL_PWM_Timer3_MspInit+0x8c>)
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	603b      	str	r3, [r7, #0]
 80030b8:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80030ba:	2340      	movs	r3, #64	; 0x40
 80030bc:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030be:	2302      	movs	r3, #2
 80030c0:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030c2:	2301      	movs	r3, #1
 80030c4:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80030c6:	2301      	movs	r3, #1
 80030c8:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF2_TIM3 ; // hal_gpio_ex.h
 80030ca:	2302      	movs	r3, #2
 80030cc:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ce:	1d3b      	adds	r3, r7, #4
 80030d0:	4619      	mov	r1, r3
 80030d2:	4815      	ldr	r0, [pc, #84]	; (8003128 <HAL_PWM_Timer3_MspInit+0x90>)
 80030d4:	f001 fccc 	bl	8004a70 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80030d8:	2380      	movs	r3, #128	; 0x80
 80030da:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030dc:	2302      	movs	r3, #2
 80030de:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030e0:	2301      	movs	r3, #1
 80030e2:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80030e4:	2301      	movs	r3, #1
 80030e6:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF2_TIM3 ; // hal_gpio_ex.h
 80030e8:	2302      	movs	r3, #2
 80030ea:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030ec:	1d3b      	adds	r3, r7, #4
 80030ee:	4619      	mov	r1, r3
 80030f0:	480e      	ldr	r0, [pc, #56]	; (800312c <HAL_PWM_Timer3_MspInit+0x94>)
 80030f2:	f001 fcbd 	bl	8004a70 <HAL_GPIO_Init>

	  // ENABLE MOTEUR : SORTIE LOGIQUE PA7
	  GPIO_InitStruct.Pin = PIN_MOTOR_ENABLE;
 80030f6:	2380      	movs	r3, #128	; 0x80
 80030f8:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030fa:	2301      	movs	r3, #1
 80030fc:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030fe:	2301      	movs	r3, #1
 8003100:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8003102:	2302      	movs	r3, #2
 8003104:	613b      	str	r3, [r7, #16]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003106:	1d3b      	adds	r3, r7, #4
 8003108:	4619      	mov	r1, r3
 800310a:	4807      	ldr	r0, [pc, #28]	; (8003128 <HAL_PWM_Timer3_MspInit+0x90>)
 800310c:	f001 fcb0 	bl	8004a70 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOA, PIN_MOTOR_ENABLE, 1);
 8003110:	2201      	movs	r2, #1
 8003112:	2180      	movs	r1, #128	; 0x80
 8003114:	4804      	ldr	r0, [pc, #16]	; (8003128 <HAL_PWM_Timer3_MspInit+0x90>)
 8003116:	f001 fe2f 	bl	8004d78 <HAL_GPIO_WritePin>
}
 800311a:	bf00      	nop
 800311c:	3718      	adds	r7, #24
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	40023800 	.word	0x40023800
 8003128:	40020000 	.word	0x40020000
 800312c:	40020800 	.word	0x40020800

08003130 <HAL_adcir_MspInit>:
ADC1_12	--> PC2
ADC1_13	--> PC3
http://stm32f4-discovery.com/2014/04/library-06-ad-converter-on-stm32f4xx/
******************************************************************/
void HAL_adcir_MspInit(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;
	  /* Peripheral clock enable */
	  __ADC1_CLK_ENABLE();
 8003136:	2300      	movs	r3, #0
 8003138:	603b      	str	r3, [r7, #0]
 800313a:	4b13      	ldr	r3, [pc, #76]	; (8003188 <HAL_adcir_MspInit+0x58>)
 800313c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313e:	4a12      	ldr	r2, [pc, #72]	; (8003188 <HAL_adcir_MspInit+0x58>)
 8003140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003144:	6453      	str	r3, [r2, #68]	; 0x44
 8003146:	4b10      	ldr	r3, [pc, #64]	; (8003188 <HAL_adcir_MspInit+0x58>)
 8003148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314e:	603b      	str	r3, [r7, #0]
 8003150:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_4 ;
 8003152:	2310      	movs	r3, #16
 8003154:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003156:	2303      	movs	r3, #3
 8003158:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315a:	2300      	movs	r3, #0
 800315c:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800315e:	1d3b      	adds	r3, r7, #4
 8003160:	4619      	mov	r1, r3
 8003162:	480a      	ldr	r0, [pc, #40]	; (800318c <HAL_adcir_MspInit+0x5c>)
 8003164:	f001 fc84 	bl	8004a70 <HAL_GPIO_Init>


	  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003168:	2301      	movs	r3, #1
 800316a:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800316c:	2303      	movs	r3, #3
 800316e:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003170:	2300      	movs	r3, #0
 8003172:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003174:	1d3b      	adds	r3, r7, #4
 8003176:	4619      	mov	r1, r3
 8003178:	4805      	ldr	r0, [pc, #20]	; (8003190 <HAL_adcir_MspInit+0x60>)
 800317a:	f001 fc79 	bl	8004a70 <HAL_GPIO_Init>
}
 800317e:	bf00      	nop
 8003180:	3718      	adds	r7, #24
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	40023800 	.word	0x40023800
 800318c:	40020000 	.word	0x40020000
 8003190:	40020400 	.word	0x40020400

08003194 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b08a      	sub	sp, #40	; 0x28
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800319c:	f107 0314 	add.w	r3, r7, #20
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	605a      	str	r2, [r3, #4]
 80031a6:	609a      	str	r2, [r3, #8]
 80031a8:	60da      	str	r2, [r3, #12]
 80031aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a21      	ldr	r2, [pc, #132]	; (8003238 <HAL_I2C_MspInit+0xa4>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d13c      	bne.n	8003230 <HAL_I2C_MspInit+0x9c>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031b6:	2300      	movs	r3, #0
 80031b8:	613b      	str	r3, [r7, #16]
 80031ba:	4b20      	ldr	r3, [pc, #128]	; (800323c <HAL_I2C_MspInit+0xa8>)
 80031bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031be:	4a1f      	ldr	r2, [pc, #124]	; (800323c <HAL_I2C_MspInit+0xa8>)
 80031c0:	f043 0302 	orr.w	r3, r3, #2
 80031c4:	6313      	str	r3, [r2, #48]	; 0x30
 80031c6:	4b1d      	ldr	r3, [pc, #116]	; (800323c <HAL_I2C_MspInit+0xa8>)
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	613b      	str	r3, [r7, #16]
 80031d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80031d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80031d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031d8:	2312      	movs	r3, #18
 80031da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031dc:	2300      	movs	r3, #0
 80031de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031e0:	2303      	movs	r3, #3
 80031e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80031e4:	2304      	movs	r3, #4
 80031e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031e8:	f107 0314 	add.w	r3, r7, #20
 80031ec:	4619      	mov	r1, r3
 80031ee:	4814      	ldr	r0, [pc, #80]	; (8003240 <HAL_I2C_MspInit+0xac>)
 80031f0:	f001 fc3e 	bl	8004a70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80031f4:	2300      	movs	r3, #0
 80031f6:	60fb      	str	r3, [r7, #12]
 80031f8:	4b10      	ldr	r3, [pc, #64]	; (800323c <HAL_I2C_MspInit+0xa8>)
 80031fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fc:	4a0f      	ldr	r2, [pc, #60]	; (800323c <HAL_I2C_MspInit+0xa8>)
 80031fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003202:	6413      	str	r3, [r2, #64]	; 0x40
 8003204:	4b0d      	ldr	r3, [pc, #52]	; (800323c <HAL_I2C_MspInit+0xa8>)
 8003206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003208:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800320c:	60fb      	str	r3, [r7, #12]
 800320e:	68fb      	ldr	r3, [r7, #12]

	  HAL_NVIC_SetPriority(I2C1_ER_IRQn, I2C1_ER_IRQ_PRIO, 0);
 8003210:	2200      	movs	r2, #0
 8003212:	2102      	movs	r1, #2
 8003214:	2020      	movs	r0, #32
 8003216:	f000 fff1 	bl	80041fc <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800321a:	2020      	movs	r0, #32
 800321c:	f001 f80a 	bl	8004234 <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_SetPriority(I2C1_EV_IRQn, I2C1_EV_IRQ_PRIO, 0);
 8003220:	2200      	movs	r2, #0
 8003222:	210b      	movs	r1, #11
 8003224:	201f      	movs	r0, #31
 8003226:	f000 ffe9 	bl	80041fc <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800322a:	201f      	movs	r0, #31
 800322c:	f001 f802 	bl	8004234 <HAL_NVIC_EnableIRQ>



  }

}
 8003230:	bf00      	nop
 8003232:	3728      	adds	r7, #40	; 0x28
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40005400 	.word	0x40005400
 800323c:	40023800 	.word	0x40023800
 8003240:	40020400 	.word	0x40020400

08003244 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b08c      	sub	sp, #48	; 0x30
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800324c:	f107 031c 	add.w	r3, r7, #28
 8003250:	2200      	movs	r2, #0
 8003252:	601a      	str	r2, [r3, #0]
 8003254:	605a      	str	r2, [r3, #4]
 8003256:	609a      	str	r2, [r3, #8]
 8003258:	60da      	str	r2, [r3, #12]
 800325a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4aa2      	ldr	r2, [pc, #648]	; (80034ec <HAL_UART_MspInit+0x2a8>)
 8003262:	4293      	cmp	r3, r2
 8003264:	f040 80a5 	bne.w	80033b2 <HAL_UART_MspInit+0x16e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003268:	2300      	movs	r3, #0
 800326a:	61bb      	str	r3, [r7, #24]
 800326c:	4ba0      	ldr	r3, [pc, #640]	; (80034f0 <HAL_UART_MspInit+0x2ac>)
 800326e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003270:	4a9f      	ldr	r2, [pc, #636]	; (80034f0 <HAL_UART_MspInit+0x2ac>)
 8003272:	f043 0310 	orr.w	r3, r3, #16
 8003276:	6453      	str	r3, [r2, #68]	; 0x44
 8003278:	4b9d      	ldr	r3, [pc, #628]	; (80034f0 <HAL_UART_MspInit+0x2ac>)
 800327a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327c:	f003 0310 	and.w	r3, r3, #16
 8003280:	61bb      	str	r3, [r7, #24]
 8003282:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003284:	2300      	movs	r3, #0
 8003286:	617b      	str	r3, [r7, #20]
 8003288:	4b99      	ldr	r3, [pc, #612]	; (80034f0 <HAL_UART_MspInit+0x2ac>)
 800328a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328c:	4a98      	ldr	r2, [pc, #608]	; (80034f0 <HAL_UART_MspInit+0x2ac>)
 800328e:	f043 0301 	orr.w	r3, r3, #1
 8003292:	6313      	str	r3, [r2, #48]	; 0x30
 8003294:	4b96      	ldr	r3, [pc, #600]	; (80034f0 <HAL_UART_MspInit+0x2ac>)
 8003296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	617b      	str	r3, [r7, #20]
 800329e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80032a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a6:	2302      	movs	r3, #2
 80032a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032aa:	2300      	movs	r3, #0
 80032ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032ae:	2303      	movs	r3, #3
 80032b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032b2:	2307      	movs	r3, #7
 80032b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032b6:	f107 031c 	add.w	r3, r7, #28
 80032ba:	4619      	mov	r1, r3
 80032bc:	488d      	ldr	r0, [pc, #564]	; (80034f4 <HAL_UART_MspInit+0x2b0>)
 80032be:	f001 fbd7 	bl	8004a70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80032c2:	2340      	movs	r3, #64	; 0x40
 80032c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c6:	2302      	movs	r3, #2
 80032c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ca:	2300      	movs	r3, #0
 80032cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032ce:	2303      	movs	r3, #3
 80032d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032d2:	2307      	movs	r3, #7
 80032d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032d6:	f107 031c 	add.w	r3, r7, #28
 80032da:	4619      	mov	r1, r3
 80032dc:	4886      	ldr	r0, [pc, #536]	; (80034f8 <HAL_UART_MspInit+0x2b4>)
 80032de:	f001 fbc7 	bl	8004a70 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80032e2:	4b86      	ldr	r3, [pc, #536]	; (80034fc <HAL_UART_MspInit+0x2b8>)
 80032e4:	4a86      	ldr	r2, [pc, #536]	; (8003500 <HAL_UART_MspInit+0x2bc>)
 80032e6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80032e8:	4b84      	ldr	r3, [pc, #528]	; (80034fc <HAL_UART_MspInit+0x2b8>)
 80032ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80032ee:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032f0:	4b82      	ldr	r3, [pc, #520]	; (80034fc <HAL_UART_MspInit+0x2b8>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032f6:	4b81      	ldr	r3, [pc, #516]	; (80034fc <HAL_UART_MspInit+0x2b8>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80032fc:	4b7f      	ldr	r3, [pc, #508]	; (80034fc <HAL_UART_MspInit+0x2b8>)
 80032fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003302:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003304:	4b7d      	ldr	r3, [pc, #500]	; (80034fc <HAL_UART_MspInit+0x2b8>)
 8003306:	2200      	movs	r2, #0
 8003308:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800330a:	4b7c      	ldr	r3, [pc, #496]	; (80034fc <HAL_UART_MspInit+0x2b8>)
 800330c:	2200      	movs	r2, #0
 800330e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003310:	4b7a      	ldr	r3, [pc, #488]	; (80034fc <HAL_UART_MspInit+0x2b8>)
 8003312:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003316:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003318:	4b78      	ldr	r3, [pc, #480]	; (80034fc <HAL_UART_MspInit+0x2b8>)
 800331a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800331e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003320:	4b76      	ldr	r3, [pc, #472]	; (80034fc <HAL_UART_MspInit+0x2b8>)
 8003322:	2200      	movs	r2, #0
 8003324:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003326:	4875      	ldr	r0, [pc, #468]	; (80034fc <HAL_UART_MspInit+0x2b8>)
 8003328:	f000 ff92 	bl	8004250 <HAL_DMA_Init>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 8003332:	f7ff fb23 	bl	800297c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a70      	ldr	r2, [pc, #448]	; (80034fc <HAL_UART_MspInit+0x2b8>)
 800333a:	639a      	str	r2, [r3, #56]	; 0x38
 800333c:	4a6f      	ldr	r2, [pc, #444]	; (80034fc <HAL_UART_MspInit+0x2b8>)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8003342:	4b70      	ldr	r3, [pc, #448]	; (8003504 <HAL_UART_MspInit+0x2c0>)
 8003344:	4a70      	ldr	r2, [pc, #448]	; (8003508 <HAL_UART_MspInit+0x2c4>)
 8003346:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8003348:	4b6e      	ldr	r3, [pc, #440]	; (8003504 <HAL_UART_MspInit+0x2c0>)
 800334a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800334e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003350:	4b6c      	ldr	r3, [pc, #432]	; (8003504 <HAL_UART_MspInit+0x2c0>)
 8003352:	2240      	movs	r2, #64	; 0x40
 8003354:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003356:	4b6b      	ldr	r3, [pc, #428]	; (8003504 <HAL_UART_MspInit+0x2c0>)
 8003358:	2200      	movs	r2, #0
 800335a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800335c:	4b69      	ldr	r3, [pc, #420]	; (8003504 <HAL_UART_MspInit+0x2c0>)
 800335e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003362:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003364:	4b67      	ldr	r3, [pc, #412]	; (8003504 <HAL_UART_MspInit+0x2c0>)
 8003366:	2200      	movs	r2, #0
 8003368:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800336a:	4b66      	ldr	r3, [pc, #408]	; (8003504 <HAL_UART_MspInit+0x2c0>)
 800336c:	2200      	movs	r2, #0
 800336e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003370:	4b64      	ldr	r3, [pc, #400]	; (8003504 <HAL_UART_MspInit+0x2c0>)
 8003372:	2200      	movs	r2, #0
 8003374:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003376:	4b63      	ldr	r3, [pc, #396]	; (8003504 <HAL_UART_MspInit+0x2c0>)
 8003378:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800337c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800337e:	4b61      	ldr	r3, [pc, #388]	; (8003504 <HAL_UART_MspInit+0x2c0>)
 8003380:	2200      	movs	r2, #0
 8003382:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003384:	485f      	ldr	r0, [pc, #380]	; (8003504 <HAL_UART_MspInit+0x2c0>)
 8003386:	f000 ff63 	bl	8004250 <HAL_DMA_Init>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <HAL_UART_MspInit+0x150>
    {
      Error_Handler();
 8003390:	f7ff faf4 	bl	800297c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a5b      	ldr	r2, [pc, #364]	; (8003504 <HAL_UART_MspInit+0x2c0>)
 8003398:	635a      	str	r2, [r3, #52]	; 0x34
 800339a:	4a5a      	ldr	r2, [pc, #360]	; (8003504 <HAL_UART_MspInit+0x2c0>)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80033a0:	2200      	movs	r2, #0
 80033a2:	2105      	movs	r1, #5
 80033a4:	2025      	movs	r0, #37	; 0x25
 80033a6:	f000 ff29 	bl	80041fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80033aa:	2025      	movs	r0, #37	; 0x25
 80033ac:	f000 ff42 	bl	8004234 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80033b0:	e098      	b.n	80034e4 <HAL_UART_MspInit+0x2a0>
  else if(huart->Instance==USART2)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a55      	ldr	r2, [pc, #340]	; (800350c <HAL_UART_MspInit+0x2c8>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	f040 8093 	bne.w	80034e4 <HAL_UART_MspInit+0x2a0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80033be:	2300      	movs	r3, #0
 80033c0:	613b      	str	r3, [r7, #16]
 80033c2:	4b4b      	ldr	r3, [pc, #300]	; (80034f0 <HAL_UART_MspInit+0x2ac>)
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	4a4a      	ldr	r2, [pc, #296]	; (80034f0 <HAL_UART_MspInit+0x2ac>)
 80033c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033cc:	6413      	str	r3, [r2, #64]	; 0x40
 80033ce:	4b48      	ldr	r3, [pc, #288]	; (80034f0 <HAL_UART_MspInit+0x2ac>)
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d6:	613b      	str	r3, [r7, #16]
 80033d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033da:	2300      	movs	r3, #0
 80033dc:	60fb      	str	r3, [r7, #12]
 80033de:	4b44      	ldr	r3, [pc, #272]	; (80034f0 <HAL_UART_MspInit+0x2ac>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e2:	4a43      	ldr	r2, [pc, #268]	; (80034f0 <HAL_UART_MspInit+0x2ac>)
 80033e4:	f043 0301 	orr.w	r3, r3, #1
 80033e8:	6313      	str	r3, [r2, #48]	; 0x30
 80033ea:	4b41      	ldr	r3, [pc, #260]	; (80034f0 <HAL_UART_MspInit+0x2ac>)
 80033ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80033f6:	230c      	movs	r3, #12
 80033f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033fa:	2302      	movs	r3, #2
 80033fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fe:	2300      	movs	r3, #0
 8003400:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003402:	2303      	movs	r3, #3
 8003404:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003406:	2307      	movs	r3, #7
 8003408:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800340a:	f107 031c 	add.w	r3, r7, #28
 800340e:	4619      	mov	r1, r3
 8003410:	4838      	ldr	r0, [pc, #224]	; (80034f4 <HAL_UART_MspInit+0x2b0>)
 8003412:	f001 fb2d 	bl	8004a70 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003416:	4b3e      	ldr	r3, [pc, #248]	; (8003510 <HAL_UART_MspInit+0x2cc>)
 8003418:	4a3e      	ldr	r2, [pc, #248]	; (8003514 <HAL_UART_MspInit+0x2d0>)
 800341a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800341c:	4b3c      	ldr	r3, [pc, #240]	; (8003510 <HAL_UART_MspInit+0x2cc>)
 800341e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003422:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003424:	4b3a      	ldr	r3, [pc, #232]	; (8003510 <HAL_UART_MspInit+0x2cc>)
 8003426:	2200      	movs	r2, #0
 8003428:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800342a:	4b39      	ldr	r3, [pc, #228]	; (8003510 <HAL_UART_MspInit+0x2cc>)
 800342c:	2200      	movs	r2, #0
 800342e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003430:	4b37      	ldr	r3, [pc, #220]	; (8003510 <HAL_UART_MspInit+0x2cc>)
 8003432:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003436:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003438:	4b35      	ldr	r3, [pc, #212]	; (8003510 <HAL_UART_MspInit+0x2cc>)
 800343a:	2200      	movs	r2, #0
 800343c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800343e:	4b34      	ldr	r3, [pc, #208]	; (8003510 <HAL_UART_MspInit+0x2cc>)
 8003440:	2200      	movs	r2, #0
 8003442:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003444:	4b32      	ldr	r3, [pc, #200]	; (8003510 <HAL_UART_MspInit+0x2cc>)
 8003446:	f44f 7280 	mov.w	r2, #256	; 0x100
 800344a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800344c:	4b30      	ldr	r3, [pc, #192]	; (8003510 <HAL_UART_MspInit+0x2cc>)
 800344e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003452:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003454:	4b2e      	ldr	r3, [pc, #184]	; (8003510 <HAL_UART_MspInit+0x2cc>)
 8003456:	2200      	movs	r2, #0
 8003458:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800345a:	482d      	ldr	r0, [pc, #180]	; (8003510 <HAL_UART_MspInit+0x2cc>)
 800345c:	f000 fef8 	bl	8004250 <HAL_DMA_Init>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <HAL_UART_MspInit+0x226>
      Error_Handler();
 8003466:	f7ff fa89 	bl	800297c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a28      	ldr	r2, [pc, #160]	; (8003510 <HAL_UART_MspInit+0x2cc>)
 800346e:	639a      	str	r2, [r3, #56]	; 0x38
 8003470:	4a27      	ldr	r2, [pc, #156]	; (8003510 <HAL_UART_MspInit+0x2cc>)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003476:	4b28      	ldr	r3, [pc, #160]	; (8003518 <HAL_UART_MspInit+0x2d4>)
 8003478:	4a28      	ldr	r2, [pc, #160]	; (800351c <HAL_UART_MspInit+0x2d8>)
 800347a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800347c:	4b26      	ldr	r3, [pc, #152]	; (8003518 <HAL_UART_MspInit+0x2d4>)
 800347e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003482:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003484:	4b24      	ldr	r3, [pc, #144]	; (8003518 <HAL_UART_MspInit+0x2d4>)
 8003486:	2240      	movs	r2, #64	; 0x40
 8003488:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800348a:	4b23      	ldr	r3, [pc, #140]	; (8003518 <HAL_UART_MspInit+0x2d4>)
 800348c:	2200      	movs	r2, #0
 800348e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003490:	4b21      	ldr	r3, [pc, #132]	; (8003518 <HAL_UART_MspInit+0x2d4>)
 8003492:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003496:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003498:	4b1f      	ldr	r3, [pc, #124]	; (8003518 <HAL_UART_MspInit+0x2d4>)
 800349a:	2200      	movs	r2, #0
 800349c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800349e:	4b1e      	ldr	r3, [pc, #120]	; (8003518 <HAL_UART_MspInit+0x2d4>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80034a4:	4b1c      	ldr	r3, [pc, #112]	; (8003518 <HAL_UART_MspInit+0x2d4>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80034aa:	4b1b      	ldr	r3, [pc, #108]	; (8003518 <HAL_UART_MspInit+0x2d4>)
 80034ac:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80034b0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034b2:	4b19      	ldr	r3, [pc, #100]	; (8003518 <HAL_UART_MspInit+0x2d4>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80034b8:	4817      	ldr	r0, [pc, #92]	; (8003518 <HAL_UART_MspInit+0x2d4>)
 80034ba:	f000 fec9 	bl	8004250 <HAL_DMA_Init>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <HAL_UART_MspInit+0x284>
      Error_Handler();
 80034c4:	f7ff fa5a 	bl	800297c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a13      	ldr	r2, [pc, #76]	; (8003518 <HAL_UART_MspInit+0x2d4>)
 80034cc:	635a      	str	r2, [r3, #52]	; 0x34
 80034ce:	4a12      	ldr	r2, [pc, #72]	; (8003518 <HAL_UART_MspInit+0x2d4>)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80034d4:	2200      	movs	r2, #0
 80034d6:	2105      	movs	r1, #5
 80034d8:	2026      	movs	r0, #38	; 0x26
 80034da:	f000 fe8f 	bl	80041fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80034de:	2026      	movs	r0, #38	; 0x26
 80034e0:	f000 fea8 	bl	8004234 <HAL_NVIC_EnableIRQ>
}
 80034e4:	bf00      	nop
 80034e6:	3730      	adds	r7, #48	; 0x30
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	40011000 	.word	0x40011000
 80034f0:	40023800 	.word	0x40023800
 80034f4:	40020000 	.word	0x40020000
 80034f8:	40020400 	.word	0x40020400
 80034fc:	20004640 	.word	0x20004640
 8003500:	40026440 	.word	0x40026440
 8003504:	200046a0 	.word	0x200046a0
 8003508:	400264b8 	.word	0x400264b8
 800350c:	40004400 	.word	0x40004400
 8003510:	20004700 	.word	0x20004700
 8003514:	40026088 	.word	0x40026088
 8003518:	20004760 	.word	0x20004760
 800351c:	400260a0 	.word	0x400260a0

08003520 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b08c      	sub	sp, #48	; 0x30
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003528:	2300      	movs	r3, #0
 800352a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800352c:	2300      	movs	r3, #0
 800352e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8003530:	2300      	movs	r3, #0
 8003532:	60bb      	str	r3, [r7, #8]
 8003534:	4b2f      	ldr	r3, [pc, #188]	; (80035f4 <HAL_InitTick+0xd4>)
 8003536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003538:	4a2e      	ldr	r2, [pc, #184]	; (80035f4 <HAL_InitTick+0xd4>)
 800353a:	f043 0304 	orr.w	r3, r3, #4
 800353e:	6413      	str	r3, [r2, #64]	; 0x40
 8003540:	4b2c      	ldr	r3, [pc, #176]	; (80035f4 <HAL_InitTick+0xd4>)
 8003542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003544:	f003 0304 	and.w	r3, r3, #4
 8003548:	60bb      	str	r3, [r7, #8]
 800354a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800354c:	f107 020c 	add.w	r2, r7, #12
 8003550:	f107 0310 	add.w	r3, r7, #16
 8003554:	4611      	mov	r1, r2
 8003556:	4618      	mov	r0, r3
 8003558:	f004 fd20 	bl	8007f9c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800355c:	f004 fd0a 	bl	8007f74 <HAL_RCC_GetPCLK2Freq>
 8003560:	4603      	mov	r3, r0
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003568:	4a23      	ldr	r2, [pc, #140]	; (80035f8 <HAL_InitTick+0xd8>)
 800356a:	fba2 2303 	umull	r2, r3, r2, r3
 800356e:	0c9b      	lsrs	r3, r3, #18
 8003570:	3b01      	subs	r3, #1
 8003572:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim4.Instance = TIM4;
 8003574:	4b21      	ldr	r3, [pc, #132]	; (80035fc <HAL_InitTick+0xdc>)
 8003576:	4a22      	ldr	r2, [pc, #136]	; (8003600 <HAL_InitTick+0xe0>)
 8003578:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800357a:	4b20      	ldr	r3, [pc, #128]	; (80035fc <HAL_InitTick+0xdc>)
 800357c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003580:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8003582:	4a1e      	ldr	r2, [pc, #120]	; (80035fc <HAL_InitTick+0xdc>)
 8003584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003586:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8003588:	4b1c      	ldr	r3, [pc, #112]	; (80035fc <HAL_InitTick+0xdc>)
 800358a:	2200      	movs	r2, #0
 800358c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800358e:	4b1b      	ldr	r3, [pc, #108]	; (80035fc <HAL_InitTick+0xdc>)
 8003590:	2200      	movs	r2, #0
 8003592:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003594:	4b19      	ldr	r3, [pc, #100]	; (80035fc <HAL_InitTick+0xdc>)
 8003596:	2200      	movs	r2, #0
 8003598:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800359a:	4818      	ldr	r0, [pc, #96]	; (80035fc <HAL_InitTick+0xdc>)
 800359c:	f004 fd30 	bl	8008000 <HAL_TIM_Base_Init>
 80035a0:	4603      	mov	r3, r0
 80035a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80035a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d11b      	bne.n	80035e6 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80035ae:	4813      	ldr	r0, [pc, #76]	; (80035fc <HAL_InitTick+0xdc>)
 80035b0:	f004 fd80 	bl	80080b4 <HAL_TIM_Base_Start_IT>
 80035b4:	4603      	mov	r3, r0
 80035b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80035ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d111      	bne.n	80035e6 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80035c2:	201e      	movs	r0, #30
 80035c4:	f000 fe36 	bl	8004234 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b0f      	cmp	r3, #15
 80035cc:	d808      	bhi.n	80035e0 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80035ce:	2200      	movs	r2, #0
 80035d0:	6879      	ldr	r1, [r7, #4]
 80035d2:	201e      	movs	r0, #30
 80035d4:	f000 fe12 	bl	80041fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80035d8:	4a0a      	ldr	r2, [pc, #40]	; (8003604 <HAL_InitTick+0xe4>)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6013      	str	r3, [r2, #0]
 80035de:	e002      	b.n	80035e6 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80035e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3730      	adds	r7, #48	; 0x30
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	40023800 	.word	0x40023800
 80035f8:	431bde83 	.word	0x431bde83
 80035fc:	200048ec 	.word	0x200048ec
 8003600:	40000800 	.word	0x40000800
 8003604:	2000001c 	.word	0x2000001c

08003608 <NMI_Handler>:
extern TIM_HandleTypeDef htim4;
extern I2C_HandleTypeDef hi2c1;


void NMI_Handler(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
  while (1)
 800360c:	e7fe      	b.n	800360c <NMI_Handler+0x4>

0800360e <HardFault_Handler>:
  {
  }
}

void HardFault_Handler(void)
{
 800360e:	b480      	push	{r7}
 8003610:	af00      	add	r7, sp, #0

  while (1)
 8003612:	e7fe      	b.n	8003612 <HardFault_Handler+0x4>

08003614 <MemManage_Handler>:
  {
  }
}

void MemManage_Handler(void)
{
 8003614:	b480      	push	{r7}
 8003616:	af00      	add	r7, sp, #0
  while (1)
 8003618:	e7fe      	b.n	8003618 <MemManage_Handler+0x4>

0800361a <BusFault_Handler>:
  }
}


void BusFault_Handler(void)
{
 800361a:	b480      	push	{r7}
 800361c:	af00      	add	r7, sp, #0
  while (1)
 800361e:	e7fe      	b.n	800361e <BusFault_Handler+0x4>

08003620 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
  while (1)
 8003624:	e7fe      	b.n	8003624 <UsageFault_Handler+0x4>

08003626 <DebugMon_Handler>:
  {
  }
}

void DebugMon_Handler(void)
{
 8003626:	b480      	push	{r7}
 8003628:	af00      	add	r7, sp, #0
}
 800362a:	bf00      	nop
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <DMA1_Stream5_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/

void DMA1_Stream5_IRQHandler(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003638:	4802      	ldr	r0, [pc, #8]	; (8003644 <DMA1_Stream5_IRQHandler+0x10>)
 800363a:	f000 ffa1 	bl	8004580 <HAL_DMA_IRQHandler>
}
 800363e:	bf00      	nop
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	20004700 	.word	0x20004700

08003648 <DMA1_Stream6_IRQHandler>:


void DMA1_Stream6_IRQHandler(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800364c:	4802      	ldr	r0, [pc, #8]	; (8003658 <DMA1_Stream6_IRQHandler+0x10>)
 800364e:	f000 ff97 	bl	8004580 <HAL_DMA_IRQHandler>
}
 8003652:	bf00      	nop
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	20004760 	.word	0x20004760

0800365c <TIM4_IRQHandler>:
{
  HAL_TIM_IRQHandler(&htim1);
}*/

void TIM4_IRQHandler(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim4);
 8003660:	4802      	ldr	r0, [pc, #8]	; (800366c <TIM4_IRQHandler+0x10>)
 8003662:	f004 ff77 	bl	8008554 <HAL_TIM_IRQHandler>
}
 8003666:	bf00      	nop
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	200048ec 	.word	0x200048ec

08003670 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart1);
 8003674:	4802      	ldr	r0, [pc, #8]	; (8003680 <USART1_IRQHandler+0x10>)
 8003676:	f005 fd1f 	bl	80090b8 <HAL_UART_IRQHandler>
}
 800367a:	bf00      	nop
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	200045b8 	.word	0x200045b8

08003684 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart2);
 8003688:	4802      	ldr	r0, [pc, #8]	; (8003694 <USART2_IRQHandler+0x10>)
 800368a:	f005 fd15 	bl	80090b8 <HAL_UART_IRQHandler>
}
 800368e:	bf00      	nop
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	200045fc 	.word	0x200045fc

08003698 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800369c:	4802      	ldr	r0, [pc, #8]	; (80036a8 <DMA2_Stream2_IRQHandler+0x10>)
 800369e:	f000 ff6f 	bl	8004580 <HAL_DMA_IRQHandler>
}
 80036a2:	bf00      	nop
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	20004640 	.word	0x20004640

080036ac <DMA2_Stream7_IRQHandler>:

void DMA2_Stream7_IRQHandler(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80036b0:	4802      	ldr	r0, [pc, #8]	; (80036bc <DMA2_Stream7_IRQHandler+0x10>)
 80036b2:	f000 ff65 	bl	8004580 <HAL_DMA_IRQHandler>
}
 80036b6:	bf00      	nop
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	200046a0 	.word	0x200046a0

080036c0 <EXTI15_10_IRQHandler>:

//=======================================================
//		ENCODER INDEX LEFT
//=======================================================
void EXTI15_10_IRQHandler(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80036c4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80036c8:	f001 fb70 	bl	8004dac <HAL_GPIO_EXTI_IRQHandler>
}
 80036cc:	bf00      	nop
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <EXTI0_IRQHandler>:
//=======================================================
//		ENCODER INDEX RIGHT
//=======================================================

void EXTI0_IRQHandler(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80036d4:	2001      	movs	r0, #1
 80036d6:	f001 fb69 	bl	8004dac <HAL_GPIO_EXTI_IRQHandler>
}
 80036da:	bf00      	nop
 80036dc:	bd80      	pop	{r7, pc}
	...

080036e0 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
	  HAL_I2C_EV_IRQHandler(&hi2c1);
 80036e4:	4802      	ldr	r0, [pc, #8]	; (80036f0 <I2C1_EV_IRQHandler+0x10>)
 80036e6:	f001 ffe1 	bl	80056ac <HAL_I2C_EV_IRQHandler>
}
 80036ea:	bf00      	nop
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	20004564 	.word	0x20004564

080036f4 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
	  HAL_I2C_ER_IRQHandler(&hi2c1);
 80036f8:	4802      	ldr	r0, [pc, #8]	; (8003704 <I2C1_ER_IRQHandler+0x10>)
 80036fa:	f002 f92a 	bl	8005952 <HAL_I2C_ER_IRQHandler>
}
 80036fe:	bf00      	nop
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	20004564 	.word	0x20004564

08003708 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
	return 1;
 800370c:	2301      	movs	r3, #1
}
 800370e:	4618      	mov	r0, r3
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <_kill>:

int _kill(int pid, int sig)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003722:	f012 ff15 	bl	8016550 <__errno>
 8003726:	4603      	mov	r3, r0
 8003728:	2216      	movs	r2, #22
 800372a:	601a      	str	r2, [r3, #0]
	return -1;
 800372c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003730:	4618      	mov	r0, r3
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <_exit>:

void _exit (int status)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003740:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f7ff ffe7 	bl	8003718 <_kill>
	while (1) {}		/* Make sure we hang here */
 800374a:	e7fe      	b.n	800374a <_exit+0x12>

0800374c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003758:	2300      	movs	r3, #0
 800375a:	617b      	str	r3, [r7, #20]
 800375c:	e00a      	b.n	8003774 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800375e:	f3af 8000 	nop.w
 8003762:	4601      	mov	r1, r0
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	1c5a      	adds	r2, r3, #1
 8003768:	60ba      	str	r2, [r7, #8]
 800376a:	b2ca      	uxtb	r2, r1
 800376c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	3301      	adds	r3, #1
 8003772:	617b      	str	r3, [r7, #20]
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	429a      	cmp	r2, r3
 800377a:	dbf0      	blt.n	800375e <_read+0x12>
	}

return len;
 800377c:	687b      	ldr	r3, [r7, #4]
}
 800377e:	4618      	mov	r0, r3
 8003780:	3718      	adds	r7, #24
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b086      	sub	sp, #24
 800378a:	af00      	add	r7, sp, #0
 800378c:	60f8      	str	r0, [r7, #12]
 800378e:	60b9      	str	r1, [r7, #8]
 8003790:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003792:	2300      	movs	r3, #0
 8003794:	617b      	str	r3, [r7, #20]
 8003796:	e009      	b.n	80037ac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	1c5a      	adds	r2, r3, #1
 800379c:	60ba      	str	r2, [r7, #8]
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	3301      	adds	r3, #1
 80037aa:	617b      	str	r3, [r7, #20]
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	dbf1      	blt.n	8003798 <_write+0x12>
	}
	return len;
 80037b4:	687b      	ldr	r3, [r7, #4]
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3718      	adds	r7, #24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <_close>:

int _close(int file)
{
 80037be:	b480      	push	{r7}
 80037c0:	b083      	sub	sp, #12
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
	return -1;
 80037c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr

080037d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80037d6:	b480      	push	{r7}
 80037d8:	b083      	sub	sp, #12
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
 80037de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80037e6:	605a      	str	r2, [r3, #4]
	return 0;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr

080037f6 <_isatty>:

int _isatty(int file)
{
 80037f6:	b480      	push	{r7}
 80037f8:	b083      	sub	sp, #12
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
	return 1;
 80037fe:	2301      	movs	r3, #1
}
 8003800:	4618      	mov	r0, r3
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
	return 0;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3714      	adds	r7, #20
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
	...

08003828 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003830:	4a14      	ldr	r2, [pc, #80]	; (8003884 <_sbrk+0x5c>)
 8003832:	4b15      	ldr	r3, [pc, #84]	; (8003888 <_sbrk+0x60>)
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800383c:	4b13      	ldr	r3, [pc, #76]	; (800388c <_sbrk+0x64>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d102      	bne.n	800384a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003844:	4b11      	ldr	r3, [pc, #68]	; (800388c <_sbrk+0x64>)
 8003846:	4a12      	ldr	r2, [pc, #72]	; (8003890 <_sbrk+0x68>)
 8003848:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800384a:	4b10      	ldr	r3, [pc, #64]	; (800388c <_sbrk+0x64>)
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4413      	add	r3, r2
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	429a      	cmp	r2, r3
 8003856:	d207      	bcs.n	8003868 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003858:	f012 fe7a 	bl	8016550 <__errno>
 800385c:	4603      	mov	r3, r0
 800385e:	220c      	movs	r2, #12
 8003860:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003862:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003866:	e009      	b.n	800387c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003868:	4b08      	ldr	r3, [pc, #32]	; (800388c <_sbrk+0x64>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800386e:	4b07      	ldr	r3, [pc, #28]	; (800388c <_sbrk+0x64>)
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4413      	add	r3, r2
 8003876:	4a05      	ldr	r2, [pc, #20]	; (800388c <_sbrk+0x64>)
 8003878:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800387a:	68fb      	ldr	r3, [r7, #12]
}
 800387c:	4618      	mov	r0, r3
 800387e:	3718      	adds	r7, #24
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	20020000 	.word	0x20020000
 8003888:	00000400 	.word	0x00000400
 800388c:	20004938 	.word	0x20004938
 8003890:	2000dfc0 	.word	0x2000dfc0

08003894 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003898:	4b06      	ldr	r3, [pc, #24]	; (80038b4 <SystemInit+0x20>)
 800389a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800389e:	4a05      	ldr	r2, [pc, #20]	; (80038b4 <SystemInit+0x20>)
 80038a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80038a8:	bf00      	nop
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	e000ed00 	.word	0xe000ed00

080038b8 <SystemClock_Config>:


#include "main.h"

void SystemClock_Config(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b094      	sub	sp, #80	; 0x50
 80038bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80038be:	f107 0320 	add.w	r3, r7, #32
 80038c2:	2230      	movs	r2, #48	; 0x30
 80038c4:	2100      	movs	r1, #0
 80038c6:	4618      	mov	r0, r3
 80038c8:	f012 fd58 	bl	801637c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80038cc:	f107 030c 	add.w	r3, r7, #12
 80038d0:	2200      	movs	r2, #0
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	605a      	str	r2, [r3, #4]
 80038d6:	609a      	str	r2, [r3, #8]
 80038d8:	60da      	str	r2, [r3, #12]
 80038da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80038dc:	2300      	movs	r3, #0
 80038de:	60bb      	str	r3, [r7, #8]
 80038e0:	4b28      	ldr	r3, [pc, #160]	; (8003984 <SystemClock_Config+0xcc>)
 80038e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e4:	4a27      	ldr	r2, [pc, #156]	; (8003984 <SystemClock_Config+0xcc>)
 80038e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ea:	6413      	str	r3, [r2, #64]	; 0x40
 80038ec:	4b25      	ldr	r3, [pc, #148]	; (8003984 <SystemClock_Config+0xcc>)
 80038ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f4:	60bb      	str	r3, [r7, #8]
 80038f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80038f8:	2300      	movs	r3, #0
 80038fa:	607b      	str	r3, [r7, #4]
 80038fc:	4b22      	ldr	r3, [pc, #136]	; (8003988 <SystemClock_Config+0xd0>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a21      	ldr	r2, [pc, #132]	; (8003988 <SystemClock_Config+0xd0>)
 8003902:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003906:	6013      	str	r3, [r2, #0]
 8003908:	4b1f      	ldr	r3, [pc, #124]	; (8003988 <SystemClock_Config+0xd0>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003910:	607b      	str	r3, [r7, #4]
 8003912:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003914:	2301      	movs	r3, #1
 8003916:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003918:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800391c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800391e:	2302      	movs	r3, #2
 8003920:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003922:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003926:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003928:	2308      	movs	r3, #8
 800392a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 800392c:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8003930:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8003932:	2306      	movs	r3, #6
 8003934:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003936:	2304      	movs	r3, #4
 8003938:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800393a:	f107 0320 	add.w	r3, r7, #32
 800393e:	4618      	mov	r0, r3
 8003940:	f003 fe94 	bl	800766c <HAL_RCC_OscConfig>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800394a:	f7ff f817 	bl	800297c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800394e:	230f      	movs	r3, #15
 8003950:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003952:	2302      	movs	r3, #2
 8003954:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003956:	2300      	movs	r3, #0
 8003958:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800395a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800395e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8003960:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003964:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003966:	f107 030c 	add.w	r3, r7, #12
 800396a:	2102      	movs	r1, #2
 800396c:	4618      	mov	r0, r3
 800396e:	f004 f8f5 	bl	8007b5c <HAL_RCC_ClockConfig>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003978:	f7ff f800 	bl	800297c <Error_Handler>
  }
}
 800397c:	bf00      	nop
 800397e:	3750      	adds	r7, #80	; 0x50
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	40023800 	.word	0x40023800
 8003988:	40007000 	.word	0x40007000

0800398c <num2str>:
#include "util.h"

//=================================================================
void num2str(char *s, unsigned int number, unsigned int base, unsigned int size, int sp)
{
 800398c:	b480      	push	{r7}
 800398e:	b089      	sub	sp, #36	; 0x24
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
 8003998:	603b      	str	r3, [r7, #0]
        static char  hexChars[] = "0123456789ABCDEF";

        char *p=s;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	617b      	str	r3, [r7, #20]
        unsigned int i;
        char tmp;

        // get digits
        do {
                *s++=hexChars[number % base];
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80039a6:	6879      	ldr	r1, [r7, #4]
 80039a8:	fb01 f202 	mul.w	r2, r1, r2
 80039ac:	1a9a      	subs	r2, r3, r2
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	1c59      	adds	r1, r3, #1
 80039b2:	60f9      	str	r1, [r7, #12]
 80039b4:	4936      	ldr	r1, [pc, #216]	; (8003a90 <num2str+0x104>)
 80039b6:	5c8a      	ldrb	r2, [r1, r2]
 80039b8:	701a      	strb	r2, [r3, #0]
        } while (number /= base);
 80039ba:	68ba      	ldr	r2, [r7, #8]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c2:	60bb      	str	r3, [r7, #8]
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1e9      	bne.n	800399e <num2str+0x12>
        *s='\0';
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	701a      	strb	r2, [r3, #0]

        // reverse string
        cnt=s-p;
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	613b      	str	r3, [r7, #16]
        for (i=0;i<cnt/2;i++) {
 80039d8:	2300      	movs	r3, #0
 80039da:	61fb      	str	r3, [r7, #28]
 80039dc:	e01a      	b.n	8003a14 <num2str+0x88>
                tmp=p[i]; p[i] = p[cnt-i-1]; p[cnt-i-1]=tmp;
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	4413      	add	r3, r2
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	76fb      	strb	r3, [r7, #27]
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	3b01      	subs	r3, #1
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	441a      	add	r2, r3
 80039f4:	6979      	ldr	r1, [r7, #20]
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	440b      	add	r3, r1
 80039fa:	7812      	ldrb	r2, [r2, #0]
 80039fc:	701a      	strb	r2, [r3, #0]
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	3b01      	subs	r3, #1
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	4413      	add	r3, r2
 8003a0a:	7efa      	ldrb	r2, [r7, #27]
 8003a0c:	701a      	strb	r2, [r3, #0]
        for (i=0;i<cnt/2;i++) {
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	3301      	adds	r3, #1
 8003a12:	61fb      	str	r3, [r7, #28]
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	085b      	lsrs	r3, r3, #1
 8003a18:	69fa      	ldr	r2, [r7, #28]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d3df      	bcc.n	80039de <num2str+0x52>
        }

        // add extra space
        if (cnt<size) {
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d22d      	bcs.n	8003a82 <num2str+0xf6>
                for (i=cnt;i==0;i--)
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	61fb      	str	r3, [r7, #28]
 8003a2a:	e00e      	b.n	8003a4a <num2str+0xbe>
                		{p[i+size-cnt]=p[i];}
 8003a2c:	697a      	ldr	r2, [r7, #20]
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	441a      	add	r2, r3
 8003a32:	69f9      	ldr	r1, [r7, #28]
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	4419      	add	r1, r3
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1acb      	subs	r3, r1, r3
 8003a3c:	6979      	ldr	r1, [r7, #20]
 8003a3e:	440b      	add	r3, r1
 8003a40:	7812      	ldrb	r2, [r2, #0]
 8003a42:	701a      	strb	r2, [r3, #0]
                for (i=cnt;i==0;i--)
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	3b01      	subs	r3, #1
 8003a48:	61fb      	str	r3, [r7, #28]
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d0ed      	beq.n	8003a2c <num2str+0xa0>
                if (sp) tmp=' '; else tmp='0';
 8003a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d002      	beq.n	8003a5c <num2str+0xd0>
 8003a56:	2320      	movs	r3, #32
 8003a58:	76fb      	strb	r3, [r7, #27]
 8003a5a:	e001      	b.n	8003a60 <num2str+0xd4>
 8003a5c:	2330      	movs	r3, #48	; 0x30
 8003a5e:	76fb      	strb	r3, [r7, #27]
                for (i=0;i<size-cnt;i++) p[i]=tmp;
 8003a60:	2300      	movs	r3, #0
 8003a62:	61fb      	str	r3, [r7, #28]
 8003a64:	e007      	b.n	8003a76 <num2str+0xea>
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	7efa      	ldrb	r2, [r7, #27]
 8003a6e:	701a      	strb	r2, [r3, #0]
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	3301      	adds	r3, #1
 8003a74:	61fb      	str	r3, [r7, #28]
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	69fa      	ldr	r2, [r7, #28]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d3f1      	bcc.n	8003a66 <num2str+0xda>
        }
}
 8003a82:	bf00      	nop
 8003a84:	3724      	adds	r7, #36	; 0x24
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	20000008 	.word	0x20000008

08003a94 <str2num>:

//=================================================================
unsigned int str2num(char *s, unsigned base)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b087      	sub	sp, #28
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
	unsigned int u=0, d;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	617b      	str	r3, [r7, #20]
	char ch=*s++;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	1c5a      	adds	r2, r3, #1
 8003aa6:	607a      	str	r2, [r7, #4]
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	73fb      	strb	r3, [r7, #15]
	while (ch) {
 8003aac:	e02e      	b.n	8003b0c <str2num+0x78>
		if ((ch>='0') && (ch<='9')) d=ch-'0';
 8003aae:	7bfb      	ldrb	r3, [r7, #15]
 8003ab0:	2b2f      	cmp	r3, #47	; 0x2f
 8003ab2:	d906      	bls.n	8003ac2 <str2num+0x2e>
 8003ab4:	7bfb      	ldrb	r3, [r7, #15]
 8003ab6:	2b39      	cmp	r3, #57	; 0x39
 8003ab8:	d803      	bhi.n	8003ac2 <str2num+0x2e>
 8003aba:	7bfb      	ldrb	r3, [r7, #15]
 8003abc:	3b30      	subs	r3, #48	; 0x30
 8003abe:	613b      	str	r3, [r7, #16]
 8003ac0:	e018      	b.n	8003af4 <str2num+0x60>
		else if ((base==16) && (ch>='A') && (ch<='F')) d=ch-'A'+10;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	2b10      	cmp	r3, #16
 8003ac6:	d109      	bne.n	8003adc <str2num+0x48>
 8003ac8:	7bfb      	ldrb	r3, [r7, #15]
 8003aca:	2b40      	cmp	r3, #64	; 0x40
 8003acc:	d906      	bls.n	8003adc <str2num+0x48>
 8003ace:	7bfb      	ldrb	r3, [r7, #15]
 8003ad0:	2b46      	cmp	r3, #70	; 0x46
 8003ad2:	d803      	bhi.n	8003adc <str2num+0x48>
 8003ad4:	7bfb      	ldrb	r3, [r7, #15]
 8003ad6:	3b37      	subs	r3, #55	; 0x37
 8003ad8:	613b      	str	r3, [r7, #16]
 8003ada:	e00b      	b.n	8003af4 <str2num+0x60>
		else if ((base==16) && (ch>='a') && (ch<='f')) d=ch-'a'+10;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	2b10      	cmp	r3, #16
 8003ae0:	d117      	bne.n	8003b12 <str2num+0x7e>
 8003ae2:	7bfb      	ldrb	r3, [r7, #15]
 8003ae4:	2b60      	cmp	r3, #96	; 0x60
 8003ae6:	d914      	bls.n	8003b12 <str2num+0x7e>
 8003ae8:	7bfb      	ldrb	r3, [r7, #15]
 8003aea:	2b66      	cmp	r3, #102	; 0x66
 8003aec:	d811      	bhi.n	8003b12 <str2num+0x7e>
 8003aee:	7bfb      	ldrb	r3, [r7, #15]
 8003af0:	3b57      	subs	r3, #87	; 0x57
 8003af2:	613b      	str	r3, [r7, #16]
		else break;
		u=d+base*u;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	fb02 f303 	mul.w	r3, r2, r3
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	4413      	add	r3, r2
 8003b00:	617b      	str	r3, [r7, #20]
		ch=*s++;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	1c5a      	adds	r2, r3, #1
 8003b06:	607a      	str	r2, [r7, #4]
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	73fb      	strb	r3, [r7, #15]
	while (ch) {
 8003b0c:	7bfb      	ldrb	r3, [r7, #15]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1cd      	bne.n	8003aae <str2num+0x1a>
	}
	return u;
 8003b12:	697b      	ldr	r3, [r7, #20]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	371c      	adds	r7, #28
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <reverse>:

//=================================================================
void reverse(char *str, int len)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b087      	sub	sp, #28
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
    int i=0, j=len-1, temp;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	617b      	str	r3, [r7, #20]
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	3b01      	subs	r3, #1
 8003b32:	613b      	str	r3, [r7, #16]
    while (i<j)
 8003b34:	e018      	b.n	8003b68 <reverse+0x48>
    {
        temp = str[i];
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	441a      	add	r2, r3
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	6879      	ldr	r1, [r7, #4]
 8003b4a:	440b      	add	r3, r1
 8003b4c:	7812      	ldrb	r2, [r2, #0]
 8003b4e:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	4413      	add	r3, r2
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	b2d2      	uxtb	r2, r2
 8003b5a:	701a      	strb	r2, [r3, #0]
        i++; j--;
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	3301      	adds	r3, #1
 8003b60:	617b      	str	r3, [r7, #20]
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	3b01      	subs	r3, #1
 8003b66:	613b      	str	r3, [r7, #16]
    while (i<j)
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	dbe2      	blt.n	8003b36 <reverse+0x16>
    }
}
 8003b70:	bf00      	nop
 8003b72:	bf00      	nop
 8003b74:	371c      	adds	r7, #28
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
	...

08003b80 <intToStr>:

//=================================================================
int intToStr(int x, char str[], int d)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
    int i = 0;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	617b      	str	r3, [r7, #20]
    while (x)
 8003b90:	e01d      	b.n	8003bce <intToStr+0x4e>
    {
        str[i++] = (x%10) + '0';
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	4b1d      	ldr	r3, [pc, #116]	; (8003c0c <intToStr+0x8c>)
 8003b96:	fb83 1302 	smull	r1, r3, r3, r2
 8003b9a:	1099      	asrs	r1, r3, #2
 8003b9c:	17d3      	asrs	r3, r2, #31
 8003b9e:	1ac9      	subs	r1, r1, r3
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	440b      	add	r3, r1
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	1ad1      	subs	r1, r2, r3
 8003baa:	b2ca      	uxtb	r2, r1
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	1c59      	adds	r1, r3, #1
 8003bb0:	6179      	str	r1, [r7, #20]
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	440b      	add	r3, r1
 8003bb8:	3230      	adds	r2, #48	; 0x30
 8003bba:	b2d2      	uxtb	r2, r2
 8003bbc:	701a      	strb	r2, [r3, #0]
        x = x/10;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	4a12      	ldr	r2, [pc, #72]	; (8003c0c <intToStr+0x8c>)
 8003bc2:	fb82 1203 	smull	r1, r2, r2, r3
 8003bc6:	1092      	asrs	r2, r2, #2
 8003bc8:	17db      	asrs	r3, r3, #31
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	60fb      	str	r3, [r7, #12]
    while (x)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1de      	bne.n	8003b92 <intToStr+0x12>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 8003bd4:	e007      	b.n	8003be6 <intToStr+0x66>
        str[i++] = '0';
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	1c5a      	adds	r2, r3, #1
 8003bda:	617a      	str	r2, [r7, #20]
 8003bdc:	461a      	mov	r2, r3
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	4413      	add	r3, r2
 8003be2:	2230      	movs	r2, #48	; 0x30
 8003be4:	701a      	strb	r2, [r3, #0]
    while (i < d)
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	dbf3      	blt.n	8003bd6 <intToStr+0x56>

    reverse(str, i);
 8003bee:	6979      	ldr	r1, [r7, #20]
 8003bf0:	68b8      	ldr	r0, [r7, #8]
 8003bf2:	f7ff ff95 	bl	8003b20 <reverse>
    str[i] = '\0';
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	68ba      	ldr	r2, [r7, #8]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	701a      	strb	r2, [r3, #0]
    return i;
 8003c00:	697b      	ldr	r3, [r7, #20]
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	66666667 	.word	0x66666667

08003c10 <float2str>:
//=================================================================
void float2str( char *res, float n, int afterpoint)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b088      	sub	sp, #32
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	ed87 0a02 	vstr	s0, [r7, #8]
 8003c1c:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 8003c1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c26:	ee17 3a90 	vmov	r3, s15
 8003c2a:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	ee07 3a90 	vmov	s15, r3
 8003c32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c36:	ed97 7a02 	vldr	s14, [r7, #8]
 8003c3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c3e:	edc7 7a06 	vstr	s15, [r7, #24]

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 8003c42:	2200      	movs	r2, #0
 8003c44:	68f9      	ldr	r1, [r7, #12]
 8003c46:	69f8      	ldr	r0, [r7, #28]
 8003c48:	f7ff ff9a 	bl	8003b80 <intToStr>
 8003c4c:	6178      	str	r0, [r7, #20]

    // check for display option after point
    if (afterpoint != 0)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d025      	beq.n	8003ca0 <float2str+0x90>
    {
        res[i] = '.';  // add dot
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	4413      	add	r3, r2
 8003c5a:	222e      	movs	r2, #46	; 0x2e
 8003c5c:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter is needed
        // to handle cases like 233.007
        fpart = fpart * (float)myPow(10.0, afterpoint);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8003ca8 <float2str+0x98>
 8003c64:	f000 f824 	bl	8003cb0 <myPow>
 8003c68:	ec53 2b10 	vmov	r2, r3, d0
 8003c6c:	4610      	mov	r0, r2
 8003c6e:	4619      	mov	r1, r3
 8003c70:	f7fc ff74 	bl	8000b5c <__aeabi_d2f>
 8003c74:	ee07 0a10 	vmov	s14, r0
 8003c78:	edd7 7a06 	vldr	s15, [r7, #24]
 8003c7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c80:	edc7 7a06 	vstr	s15, [r7, #24]

        intToStr((int)fpart, res + i + 1, afterpoint);
 8003c84:	edd7 7a06 	vldr	s15, [r7, #24]
 8003c88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	3301      	adds	r3, #1
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	4413      	add	r3, r2
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	4619      	mov	r1, r3
 8003c98:	ee17 0a90 	vmov	r0, s15
 8003c9c:	f7ff ff70 	bl	8003b80 <intToStr>
    }
}
 8003ca0:	bf00      	nop
 8003ca2:	3720      	adds	r7, #32
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	00000000 	.word	0x00000000
 8003cac:	40240000 	.word	0x40240000

08003cb0 <myPow>:
//=================================================================
double myPow(double x, int n) {
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b088      	sub	sp, #32
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	ed87 0b02 	vstr	d0, [r7, #8]
 8003cba:	6078      	str	r0, [r7, #4]
    unsigned int p = abs(n);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	bfb8      	it	lt
 8003cc2:	425b      	neglt	r3, r3
 8003cc4:	61fb      	str	r3, [r7, #28]
    double result = 1;
 8003cc6:	f04f 0200 	mov.w	r2, #0
 8003cca:	4b1d      	ldr	r3, [pc, #116]	; (8003d40 <myPow+0x90>)
 8003ccc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    while(p > 0)
 8003cd0:	e01b      	b.n	8003d0a <myPow+0x5a>
    {
        if(p & 1) // if bit is set
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d009      	beq.n	8003cf0 <myPow+0x40>
        {
            result = result * x;
 8003cdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ce0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003ce4:	f7fc fca0 	bl	8000628 <__aeabi_dmul>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	460b      	mov	r3, r1
 8003cec:	e9c7 2304 	strd	r2, r3, [r7, #16]
        }
        p = p >> 1;
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	085b      	lsrs	r3, r3, #1
 8003cf4:	61fb      	str	r3, [r7, #28]
        x = x * x;
 8003cf6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cfa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003cfe:	f7fc fc93 	bl	8000628 <__aeabi_dmul>
 8003d02:	4602      	mov	r2, r0
 8003d04:	460b      	mov	r3, r1
 8003d06:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while(p > 0)
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1e0      	bne.n	8003cd2 <myPow+0x22>
    }

    if(n < 0)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	da09      	bge.n	8003d2a <myPow+0x7a>
    {
        return 1/result;
 8003d16:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003d1a:	f04f 0000 	mov.w	r0, #0
 8003d1e:	4908      	ldr	r1, [pc, #32]	; (8003d40 <myPow+0x90>)
 8003d20:	f7fc fdac 	bl	800087c <__aeabi_ddiv>
 8003d24:	4602      	mov	r2, r0
 8003d26:	460b      	mov	r3, r1
 8003d28:	e001      	b.n	8003d2e <myPow+0x7e>
    }
    return result;
 8003d2a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8003d2e:	ec43 2b17 	vmov	d7, r2, r3
 8003d32:	eeb0 0a47 	vmov.f32	s0, s14
 8003d36:	eef0 0a67 	vmov.f32	s1, s15
 8003d3a:	3720      	adds	r7, #32
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	3ff00000 	.word	0x3ff00000

08003d44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003d44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003d48:	480d      	ldr	r0, [pc, #52]	; (8003d80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003d4a:	490e      	ldr	r1, [pc, #56]	; (8003d84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003d4c:	4a0e      	ldr	r2, [pc, #56]	; (8003d88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003d4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d50:	e002      	b.n	8003d58 <LoopCopyDataInit>

08003d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d56:	3304      	adds	r3, #4

08003d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d5c:	d3f9      	bcc.n	8003d52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d5e:	4a0b      	ldr	r2, [pc, #44]	; (8003d8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003d60:	4c0b      	ldr	r4, [pc, #44]	; (8003d90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d64:	e001      	b.n	8003d6a <LoopFillZerobss>

08003d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d68:	3204      	adds	r2, #4

08003d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d6c:	d3fb      	bcc.n	8003d66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003d6e:	f7ff fd91 	bl	8003894 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d72:	f012 fbf3 	bl	801655c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d76:	f7fe fc21 	bl	80025bc <main>
  bx  lr    
 8003d7a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003d7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d84:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 8003d88:	08017ef4 	.word	0x08017ef4
  ldr r2, =_sbss
 8003d8c:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 8003d90:	2000dfc0 	.word	0x2000dfc0

08003d94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d94:	e7fe      	b.n	8003d94 <ADC_IRQHandler>
	...

08003d98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d9c:	4b0e      	ldr	r3, [pc, #56]	; (8003dd8 <HAL_Init+0x40>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a0d      	ldr	r2, [pc, #52]	; (8003dd8 <HAL_Init+0x40>)
 8003da2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003da6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003da8:	4b0b      	ldr	r3, [pc, #44]	; (8003dd8 <HAL_Init+0x40>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a0a      	ldr	r2, [pc, #40]	; (8003dd8 <HAL_Init+0x40>)
 8003dae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003db2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003db4:	4b08      	ldr	r3, [pc, #32]	; (8003dd8 <HAL_Init+0x40>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a07      	ldr	r2, [pc, #28]	; (8003dd8 <HAL_Init+0x40>)
 8003dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003dc0:	2003      	movs	r0, #3
 8003dc2:	f000 fa10 	bl	80041e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003dc6:	200f      	movs	r0, #15
 8003dc8:	f7ff fbaa 	bl	8003520 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003dcc:	f7ff f87a 	bl	8002ec4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	40023c00 	.word	0x40023c00

08003ddc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003de0:	4b06      	ldr	r3, [pc, #24]	; (8003dfc <HAL_IncTick+0x20>)
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	461a      	mov	r2, r3
 8003de6:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <HAL_IncTick+0x24>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4413      	add	r3, r2
 8003dec:	4a04      	ldr	r2, [pc, #16]	; (8003e00 <HAL_IncTick+0x24>)
 8003dee:	6013      	str	r3, [r2, #0]
}
 8003df0:	bf00      	nop
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	20000020 	.word	0x20000020
 8003e00:	2000493c 	.word	0x2000493c

08003e04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0
  return uwTick;
 8003e08:	4b03      	ldr	r3, [pc, #12]	; (8003e18 <HAL_GetTick+0x14>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	2000493c 	.word	0x2000493c

08003e1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e24:	f7ff ffee 	bl	8003e04 <HAL_GetTick>
 8003e28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e34:	d005      	beq.n	8003e42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e36:	4b0a      	ldr	r3, [pc, #40]	; (8003e60 <HAL_Delay+0x44>)
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	4413      	add	r3, r2
 8003e40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e42:	bf00      	nop
 8003e44:	f7ff ffde 	bl	8003e04 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d8f7      	bhi.n	8003e44 <HAL_Delay+0x28>
  {
  }
}
 8003e54:	bf00      	nop
 8003e56:	bf00      	nop
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	20000020 	.word	0x20000020

08003e64 <HAL_ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Check ADC handle */
  if(hadc == NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_ADC_Init+0x12>
  {
     return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e01b      	b.n	8003eae <HAL_ADC_Init+0x4a>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d102      	bne.n	8003e88 <HAL_ADC_Init+0x24>
  {
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f817 	bl	8003eb6 <HAL_ADC_MspInit>
  }
  
  /* Initialize the ADC state */
  hadc->State = HAL_ADC_STATE_BUSY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set ADC parameters */
  ADC_Init(hadc);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 f81b 	bl	8003ecc <ADC_Init>
  
  /* Set ADC error code to none */
  hadc->ErrorCode = HAL_ADC_ERROR_NONE;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Initialize the ADC state */
  hadc->State = HAL_ADC_STATE_READY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3708      	adds	r7, #8
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <HAL_ADC_MspInit>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b083      	sub	sp, #12
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */ 
}
 8003ebe:	bf00      	nop
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
	...

08003ecc <ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003ed4:	4b6c      	ldr	r3, [pc, #432]	; (8004088 <ADC_Init+0x1bc>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	4a6b      	ldr	r2, [pc, #428]	; (8004088 <ADC_Init+0x1bc>)
 8003eda:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003ede:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003ee0:	4b69      	ldr	r3, [pc, #420]	; (8004088 <ADC_Init+0x1bc>)
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	4967      	ldr	r1, [pc, #412]	; (8004088 <ADC_Init+0x1bc>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	685a      	ldr	r2, [r3, #4]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003efc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	6859      	ldr	r1, [r3, #4]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	021a      	lsls	r2, r3, #8
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	685a      	ldr	r2, [r3, #4]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003f20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	6859      	ldr	r1, [r3, #4]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689a      	ldr	r2, [r3, #8]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	430a      	orrs	r2, r1
 8003f32:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	689a      	ldr	r2, [r3, #8]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6899      	ldr	r1, [r3, #8]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	68da      	ldr	r2, [r3, #12]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	430a      	orrs	r2, r1
 8003f54:	609a      	str	r2, [r3, #8]
  
  /* Select external trigger to start conversion */
  hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	689a      	ldr	r2, [r3, #8]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	6899      	ldr	r1, [r3, #8]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	430a      	orrs	r2, r1
 8003f76:	609a      	str	r2, [r3, #8]

  /* Select external trigger polarity */
  hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689a      	ldr	r2, [r3, #8]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003f86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6899      	ldr	r1, [r3, #8]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	430a      	orrs	r2, r1
 8003f98:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	689a      	ldr	r2, [r3, #8]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f022 0202 	bic.w	r2, r2, #2
 8003fa8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	6899      	ldr	r1, [r3, #8]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	005a      	lsls	r2, r3, #1
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	609a      	str	r2, [r3, #8]
  
  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d01b      	beq.n	8003ffe <ADC_Init+0x132>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fd4:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003fe4:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6859      	ldr	r1, [r3, #4]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	035a      	lsls	r2, r3, #13
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	605a      	str	r2, [r3, #4]
 8003ffc:	e007      	b.n	800400e <ADC_Init+0x142>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800400c:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800401c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	3b01      	subs	r3, #1
 800402a:	051a      	lsls	r2, r3, #20
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	430a      	orrs	r2, r1
 8004032:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	689a      	ldr	r2, [r3, #8]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004042:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6899      	ldr	r1, [r3, #8]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	69db      	ldr	r3, [r3, #28]
 800404e:	025a      	lsls	r2, r3, #9
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	430a      	orrs	r2, r1
 8004056:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	689a      	ldr	r2, [r3, #8]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004066:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	6899      	ldr	r1, [r3, #8]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	029a      	lsls	r2, r3, #10
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	430a      	orrs	r2, r1
 800407a:	609a      	str	r2, [r3, #8]
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr
 8004088:	40012300 	.word	0x40012300

0800408c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f003 0307 	and.w	r3, r3, #7
 800409a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800409c:	4b0c      	ldr	r3, [pc, #48]	; (80040d0 <__NVIC_SetPriorityGrouping+0x44>)
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040a2:	68ba      	ldr	r2, [r7, #8]
 80040a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040a8:	4013      	ands	r3, r2
 80040aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040be:	4a04      	ldr	r2, [pc, #16]	; (80040d0 <__NVIC_SetPriorityGrouping+0x44>)
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	60d3      	str	r3, [r2, #12]
}
 80040c4:	bf00      	nop
 80040c6:	3714      	adds	r7, #20
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	e000ed00 	.word	0xe000ed00

080040d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040d4:	b480      	push	{r7}
 80040d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040d8:	4b04      	ldr	r3, [pc, #16]	; (80040ec <__NVIC_GetPriorityGrouping+0x18>)
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	0a1b      	lsrs	r3, r3, #8
 80040de:	f003 0307 	and.w	r3, r3, #7
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr
 80040ec:	e000ed00 	.word	0xe000ed00

080040f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	4603      	mov	r3, r0
 80040f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	db0b      	blt.n	800411a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004102:	79fb      	ldrb	r3, [r7, #7]
 8004104:	f003 021f 	and.w	r2, r3, #31
 8004108:	4907      	ldr	r1, [pc, #28]	; (8004128 <__NVIC_EnableIRQ+0x38>)
 800410a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800410e:	095b      	lsrs	r3, r3, #5
 8004110:	2001      	movs	r0, #1
 8004112:	fa00 f202 	lsl.w	r2, r0, r2
 8004116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800411a:	bf00      	nop
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	e000e100 	.word	0xe000e100

0800412c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	4603      	mov	r3, r0
 8004134:	6039      	str	r1, [r7, #0]
 8004136:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800413c:	2b00      	cmp	r3, #0
 800413e:	db0a      	blt.n	8004156 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	b2da      	uxtb	r2, r3
 8004144:	490c      	ldr	r1, [pc, #48]	; (8004178 <__NVIC_SetPriority+0x4c>)
 8004146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800414a:	0112      	lsls	r2, r2, #4
 800414c:	b2d2      	uxtb	r2, r2
 800414e:	440b      	add	r3, r1
 8004150:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004154:	e00a      	b.n	800416c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	b2da      	uxtb	r2, r3
 800415a:	4908      	ldr	r1, [pc, #32]	; (800417c <__NVIC_SetPriority+0x50>)
 800415c:	79fb      	ldrb	r3, [r7, #7]
 800415e:	f003 030f 	and.w	r3, r3, #15
 8004162:	3b04      	subs	r3, #4
 8004164:	0112      	lsls	r2, r2, #4
 8004166:	b2d2      	uxtb	r2, r2
 8004168:	440b      	add	r3, r1
 800416a:	761a      	strb	r2, [r3, #24]
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr
 8004178:	e000e100 	.word	0xe000e100
 800417c:	e000ed00 	.word	0xe000ed00

08004180 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004180:	b480      	push	{r7}
 8004182:	b089      	sub	sp, #36	; 0x24
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f003 0307 	and.w	r3, r3, #7
 8004192:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	f1c3 0307 	rsb	r3, r3, #7
 800419a:	2b04      	cmp	r3, #4
 800419c:	bf28      	it	cs
 800419e:	2304      	movcs	r3, #4
 80041a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	3304      	adds	r3, #4
 80041a6:	2b06      	cmp	r3, #6
 80041a8:	d902      	bls.n	80041b0 <NVIC_EncodePriority+0x30>
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	3b03      	subs	r3, #3
 80041ae:	e000      	b.n	80041b2 <NVIC_EncodePriority+0x32>
 80041b0:	2300      	movs	r3, #0
 80041b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	fa02 f303 	lsl.w	r3, r2, r3
 80041be:	43da      	mvns	r2, r3
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	401a      	ands	r2, r3
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	fa01 f303 	lsl.w	r3, r1, r3
 80041d2:	43d9      	mvns	r1, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041d8:	4313      	orrs	r3, r2
         );
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3724      	adds	r7, #36	; 0x24
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr

080041e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b082      	sub	sp, #8
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7ff ff4c 	bl	800408c <__NVIC_SetPriorityGrouping>
}
 80041f4:	bf00      	nop
 80041f6:	3708      	adds	r7, #8
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af00      	add	r7, sp, #0
 8004202:	4603      	mov	r3, r0
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
 8004208:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800420a:	2300      	movs	r3, #0
 800420c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800420e:	f7ff ff61 	bl	80040d4 <__NVIC_GetPriorityGrouping>
 8004212:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	68b9      	ldr	r1, [r7, #8]
 8004218:	6978      	ldr	r0, [r7, #20]
 800421a:	f7ff ffb1 	bl	8004180 <NVIC_EncodePriority>
 800421e:	4602      	mov	r2, r0
 8004220:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004224:	4611      	mov	r1, r2
 8004226:	4618      	mov	r0, r3
 8004228:	f7ff ff80 	bl	800412c <__NVIC_SetPriority>
}
 800422c:	bf00      	nop
 800422e:	3718      	adds	r7, #24
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	4603      	mov	r3, r0
 800423c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800423e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004242:	4618      	mov	r0, r3
 8004244:	f7ff ff54 	bl	80040f0 <__NVIC_EnableIRQ>
}
 8004248:	bf00      	nop
 800424a:	3708      	adds	r7, #8
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004258:	2300      	movs	r3, #0
 800425a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800425c:	f7ff fdd2 	bl	8003e04 <HAL_GetTick>
 8004260:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d101      	bne.n	800426c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e099      	b.n	80043a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2202      	movs	r2, #2
 8004270:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 0201 	bic.w	r2, r2, #1
 800428a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800428c:	e00f      	b.n	80042ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800428e:	f7ff fdb9 	bl	8003e04 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	2b05      	cmp	r3, #5
 800429a:	d908      	bls.n	80042ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2220      	movs	r2, #32
 80042a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2203      	movs	r2, #3
 80042a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e078      	b.n	80043a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0301 	and.w	r3, r3, #1
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d1e8      	bne.n	800428e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	4b38      	ldr	r3, [pc, #224]	; (80043a8 <HAL_DMA_Init+0x158>)
 80042c8:	4013      	ands	r3, r2
 80042ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685a      	ldr	r2, [r3, #4]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a1b      	ldr	r3, [r3, #32]
 80042f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042fa:	697a      	ldr	r2, [r7, #20]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004304:	2b04      	cmp	r3, #4
 8004306:	d107      	bne.n	8004318 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004310:	4313      	orrs	r3, r2
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	4313      	orrs	r3, r2
 8004316:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	f023 0307 	bic.w	r3, r3, #7
 800432e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	4313      	orrs	r3, r2
 8004338:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433e:	2b04      	cmp	r3, #4
 8004340:	d117      	bne.n	8004372 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	4313      	orrs	r3, r2
 800434a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00e      	beq.n	8004372 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 fb0f 	bl	8004978 <DMA_CheckFifoParam>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d008      	beq.n	8004372 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2240      	movs	r2, #64	; 0x40
 8004364:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800436e:	2301      	movs	r3, #1
 8004370:	e016      	b.n	80043a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 fac6 	bl	800490c <DMA_CalcBaseAndBitshift>
 8004380:	4603      	mov	r3, r0
 8004382:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004388:	223f      	movs	r2, #63	; 0x3f
 800438a:	409a      	lsls	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2201      	movs	r2, #1
 800439a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3718      	adds	r7, #24
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	f010803f 	.word	0xf010803f

080043ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b086      	sub	sp, #24
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
 80043b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043ba:	2300      	movs	r3, #0
 80043bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d101      	bne.n	80043d2 <HAL_DMA_Start_IT+0x26>
 80043ce:	2302      	movs	r3, #2
 80043d0:	e040      	b.n	8004454 <HAL_DMA_Start_IT+0xa8>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d12f      	bne.n	8004446 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2202      	movs	r2, #2
 80043ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	68b9      	ldr	r1, [r7, #8]
 80043fa:	68f8      	ldr	r0, [r7, #12]
 80043fc:	f000 fa58 	bl	80048b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004404:	223f      	movs	r2, #63	; 0x3f
 8004406:	409a      	lsls	r2, r3
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f042 0216 	orr.w	r2, r2, #22
 800441a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004420:	2b00      	cmp	r3, #0
 8004422:	d007      	beq.n	8004434 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f042 0208 	orr.w	r2, r2, #8
 8004432:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f042 0201 	orr.w	r2, r2, #1
 8004442:	601a      	str	r2, [r3, #0]
 8004444:	e005      	b.n	8004452 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800444e:	2302      	movs	r3, #2
 8004450:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004452:	7dfb      	ldrb	r3, [r7, #23]
}
 8004454:	4618      	mov	r0, r3
 8004456:	3718      	adds	r7, #24
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004468:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800446a:	f7ff fccb 	bl	8003e04 <HAL_GetTick>
 800446e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004476:	b2db      	uxtb	r3, r3
 8004478:	2b02      	cmp	r3, #2
 800447a:	d008      	beq.n	800448e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2280      	movs	r2, #128	; 0x80
 8004480:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e052      	b.n	8004534 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 0216 	bic.w	r2, r2, #22
 800449c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	695a      	ldr	r2, [r3, #20]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044ac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d103      	bne.n	80044be <HAL_DMA_Abort+0x62>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d007      	beq.n	80044ce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f022 0208 	bic.w	r2, r2, #8
 80044cc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 0201 	bic.w	r2, r2, #1
 80044dc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044de:	e013      	b.n	8004508 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80044e0:	f7ff fc90 	bl	8003e04 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b05      	cmp	r3, #5
 80044ec:	d90c      	bls.n	8004508 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2220      	movs	r2, #32
 80044f2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2203      	movs	r2, #3
 80044f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e015      	b.n	8004534 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1e4      	bne.n	80044e0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800451a:	223f      	movs	r2, #63	; 0x3f
 800451c:	409a      	lsls	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2201      	movs	r2, #1
 8004526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3710      	adds	r7, #16
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800454a:	b2db      	uxtb	r3, r3
 800454c:	2b02      	cmp	r3, #2
 800454e:	d004      	beq.n	800455a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2280      	movs	r2, #128	; 0x80
 8004554:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e00c      	b.n	8004574 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2205      	movs	r2, #5
 800455e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 0201 	bic.w	r2, r2, #1
 8004570:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b086      	sub	sp, #24
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004588:	2300      	movs	r3, #0
 800458a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800458c:	4b8e      	ldr	r3, [pc, #568]	; (80047c8 <HAL_DMA_IRQHandler+0x248>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a8e      	ldr	r2, [pc, #568]	; (80047cc <HAL_DMA_IRQHandler+0x24c>)
 8004592:	fba2 2303 	umull	r2, r3, r2, r3
 8004596:	0a9b      	lsrs	r3, r3, #10
 8004598:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800459e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045aa:	2208      	movs	r2, #8
 80045ac:	409a      	lsls	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	4013      	ands	r3, r2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d01a      	beq.n	80045ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0304 	and.w	r3, r3, #4
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d013      	beq.n	80045ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f022 0204 	bic.w	r2, r2, #4
 80045d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045d8:	2208      	movs	r2, #8
 80045da:	409a      	lsls	r2, r3
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e4:	f043 0201 	orr.w	r2, r3, #1
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f0:	2201      	movs	r2, #1
 80045f2:	409a      	lsls	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4013      	ands	r3, r2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d012      	beq.n	8004622 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00b      	beq.n	8004622 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800460e:	2201      	movs	r2, #1
 8004610:	409a      	lsls	r2, r3
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800461a:	f043 0202 	orr.w	r2, r3, #2
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004626:	2204      	movs	r2, #4
 8004628:	409a      	lsls	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	4013      	ands	r3, r2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d012      	beq.n	8004658 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00b      	beq.n	8004658 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004644:	2204      	movs	r2, #4
 8004646:	409a      	lsls	r2, r3
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004650:	f043 0204 	orr.w	r2, r3, #4
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800465c:	2210      	movs	r2, #16
 800465e:	409a      	lsls	r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	4013      	ands	r3, r2
 8004664:	2b00      	cmp	r3, #0
 8004666:	d043      	beq.n	80046f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0308 	and.w	r3, r3, #8
 8004672:	2b00      	cmp	r3, #0
 8004674:	d03c      	beq.n	80046f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800467a:	2210      	movs	r2, #16
 800467c:	409a      	lsls	r2, r3
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d018      	beq.n	80046c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d108      	bne.n	80046b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d024      	beq.n	80046f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	4798      	blx	r3
 80046ae:	e01f      	b.n	80046f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d01b      	beq.n	80046f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	4798      	blx	r3
 80046c0:	e016      	b.n	80046f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d107      	bne.n	80046e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 0208 	bic.w	r2, r2, #8
 80046de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d003      	beq.n	80046f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046f4:	2220      	movs	r2, #32
 80046f6:	409a      	lsls	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4013      	ands	r3, r2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f000 808f 	beq.w	8004820 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0310 	and.w	r3, r3, #16
 800470c:	2b00      	cmp	r3, #0
 800470e:	f000 8087 	beq.w	8004820 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004716:	2220      	movs	r2, #32
 8004718:	409a      	lsls	r2, r3
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b05      	cmp	r3, #5
 8004728:	d136      	bne.n	8004798 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 0216 	bic.w	r2, r2, #22
 8004738:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	695a      	ldr	r2, [r3, #20]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004748:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474e:	2b00      	cmp	r3, #0
 8004750:	d103      	bne.n	800475a <HAL_DMA_IRQHandler+0x1da>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004756:	2b00      	cmp	r3, #0
 8004758:	d007      	beq.n	800476a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f022 0208 	bic.w	r2, r2, #8
 8004768:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800476e:	223f      	movs	r2, #63	; 0x3f
 8004770:	409a      	lsls	r2, r3
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800478a:	2b00      	cmp	r3, #0
 800478c:	d07e      	beq.n	800488c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	4798      	blx	r3
        }
        return;
 8004796:	e079      	b.n	800488c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d01d      	beq.n	80047e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d10d      	bne.n	80047d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d031      	beq.n	8004820 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	4798      	blx	r3
 80047c4:	e02c      	b.n	8004820 <HAL_DMA_IRQHandler+0x2a0>
 80047c6:	bf00      	nop
 80047c8:	20000004 	.word	0x20000004
 80047cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d023      	beq.n	8004820 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	4798      	blx	r3
 80047e0:	e01e      	b.n	8004820 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10f      	bne.n	8004810 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 0210 	bic.w	r2, r2, #16
 80047fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004814:	2b00      	cmp	r3, #0
 8004816:	d003      	beq.n	8004820 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004824:	2b00      	cmp	r3, #0
 8004826:	d032      	beq.n	800488e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800482c:	f003 0301 	and.w	r3, r3, #1
 8004830:	2b00      	cmp	r3, #0
 8004832:	d022      	beq.n	800487a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2205      	movs	r2, #5
 8004838:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f022 0201 	bic.w	r2, r2, #1
 800484a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	3301      	adds	r3, #1
 8004850:	60bb      	str	r3, [r7, #8]
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	429a      	cmp	r2, r3
 8004856:	d307      	bcc.n	8004868 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1f2      	bne.n	800484c <HAL_DMA_IRQHandler+0x2cc>
 8004866:	e000      	b.n	800486a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004868:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800487e:	2b00      	cmp	r3, #0
 8004880:	d005      	beq.n	800488e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	4798      	blx	r3
 800488a:	e000      	b.n	800488e <HAL_DMA_IRQHandler+0x30e>
        return;
 800488c:	bf00      	nop
    }
  }
}
 800488e:	3718      	adds	r7, #24
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048a2:	b2db      	uxtb	r3, r3
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b085      	sub	sp, #20
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
 80048bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80048cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	683a      	ldr	r2, [r7, #0]
 80048d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	2b40      	cmp	r3, #64	; 0x40
 80048dc:	d108      	bne.n	80048f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68ba      	ldr	r2, [r7, #8]
 80048ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80048ee:	e007      	b.n	8004900 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	60da      	str	r2, [r3, #12]
}
 8004900:	bf00      	nop
 8004902:	3714      	adds	r7, #20
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	b2db      	uxtb	r3, r3
 800491a:	3b10      	subs	r3, #16
 800491c:	4a14      	ldr	r2, [pc, #80]	; (8004970 <DMA_CalcBaseAndBitshift+0x64>)
 800491e:	fba2 2303 	umull	r2, r3, r2, r3
 8004922:	091b      	lsrs	r3, r3, #4
 8004924:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004926:	4a13      	ldr	r2, [pc, #76]	; (8004974 <DMA_CalcBaseAndBitshift+0x68>)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	4413      	add	r3, r2
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	461a      	mov	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2b03      	cmp	r3, #3
 8004938:	d909      	bls.n	800494e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004942:	f023 0303 	bic.w	r3, r3, #3
 8004946:	1d1a      	adds	r2, r3, #4
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	659a      	str	r2, [r3, #88]	; 0x58
 800494c:	e007      	b.n	800495e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004956:	f023 0303 	bic.w	r3, r3, #3
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004962:	4618      	mov	r0, r3
 8004964:	3714      	adds	r7, #20
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	aaaaaaab 	.word	0xaaaaaaab
 8004974:	0801751c 	.word	0x0801751c

08004978 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004980:	2300      	movs	r3, #0
 8004982:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004988:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d11f      	bne.n	80049d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	2b03      	cmp	r3, #3
 8004996:	d856      	bhi.n	8004a46 <DMA_CheckFifoParam+0xce>
 8004998:	a201      	add	r2, pc, #4	; (adr r2, 80049a0 <DMA_CheckFifoParam+0x28>)
 800499a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800499e:	bf00      	nop
 80049a0:	080049b1 	.word	0x080049b1
 80049a4:	080049c3 	.word	0x080049c3
 80049a8:	080049b1 	.word	0x080049b1
 80049ac:	08004a47 	.word	0x08004a47
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d046      	beq.n	8004a4a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049c0:	e043      	b.n	8004a4a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80049ca:	d140      	bne.n	8004a4e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049d0:	e03d      	b.n	8004a4e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049da:	d121      	bne.n	8004a20 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	2b03      	cmp	r3, #3
 80049e0:	d837      	bhi.n	8004a52 <DMA_CheckFifoParam+0xda>
 80049e2:	a201      	add	r2, pc, #4	; (adr r2, 80049e8 <DMA_CheckFifoParam+0x70>)
 80049e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e8:	080049f9 	.word	0x080049f9
 80049ec:	080049ff 	.word	0x080049ff
 80049f0:	080049f9 	.word	0x080049f9
 80049f4:	08004a11 	.word	0x08004a11
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	73fb      	strb	r3, [r7, #15]
      break;
 80049fc:	e030      	b.n	8004a60 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d025      	beq.n	8004a56 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a0e:	e022      	b.n	8004a56 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a14:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a18:	d11f      	bne.n	8004a5a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004a1e:	e01c      	b.n	8004a5a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d903      	bls.n	8004a2e <DMA_CheckFifoParam+0xb6>
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	2b03      	cmp	r3, #3
 8004a2a:	d003      	beq.n	8004a34 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004a2c:	e018      	b.n	8004a60 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	73fb      	strb	r3, [r7, #15]
      break;
 8004a32:	e015      	b.n	8004a60 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00e      	beq.n	8004a5e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	73fb      	strb	r3, [r7, #15]
      break;
 8004a44:	e00b      	b.n	8004a5e <DMA_CheckFifoParam+0xe6>
      break;
 8004a46:	bf00      	nop
 8004a48:	e00a      	b.n	8004a60 <DMA_CheckFifoParam+0xe8>
      break;
 8004a4a:	bf00      	nop
 8004a4c:	e008      	b.n	8004a60 <DMA_CheckFifoParam+0xe8>
      break;
 8004a4e:	bf00      	nop
 8004a50:	e006      	b.n	8004a60 <DMA_CheckFifoParam+0xe8>
      break;
 8004a52:	bf00      	nop
 8004a54:	e004      	b.n	8004a60 <DMA_CheckFifoParam+0xe8>
      break;
 8004a56:	bf00      	nop
 8004a58:	e002      	b.n	8004a60 <DMA_CheckFifoParam+0xe8>
      break;   
 8004a5a:	bf00      	nop
 8004a5c:	e000      	b.n	8004a60 <DMA_CheckFifoParam+0xe8>
      break;
 8004a5e:	bf00      	nop
    }
  } 
  
  return status; 
 8004a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3714      	adds	r7, #20
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop

08004a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b089      	sub	sp, #36	; 0x24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004a82:	2300      	movs	r3, #0
 8004a84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a86:	2300      	movs	r3, #0
 8004a88:	61fb      	str	r3, [r7, #28]
 8004a8a:	e159      	b.n	8004d40 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	fa02 f303 	lsl.w	r3, r2, r3
 8004a94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004aa0:	693a      	ldr	r2, [r7, #16]
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	f040 8148 	bne.w	8004d3a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f003 0303 	and.w	r3, r3, #3
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d005      	beq.n	8004ac2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d130      	bne.n	8004b24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	005b      	lsls	r3, r3, #1
 8004acc:	2203      	movs	r2, #3
 8004ace:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad2:	43db      	mvns	r3, r3
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	68da      	ldr	r2, [r3, #12]
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae6:	69ba      	ldr	r2, [r7, #24]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	69ba      	ldr	r2, [r7, #24]
 8004af0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004af8:	2201      	movs	r2, #1
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	fa02 f303 	lsl.w	r3, r2, r3
 8004b00:	43db      	mvns	r3, r3
 8004b02:	69ba      	ldr	r2, [r7, #24]
 8004b04:	4013      	ands	r3, r2
 8004b06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	091b      	lsrs	r3, r3, #4
 8004b0e:	f003 0201 	and.w	r2, r3, #1
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	fa02 f303 	lsl.w	r3, r2, r3
 8004b18:	69ba      	ldr	r2, [r7, #24]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	69ba      	ldr	r2, [r7, #24]
 8004b22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f003 0303 	and.w	r3, r3, #3
 8004b2c:	2b03      	cmp	r3, #3
 8004b2e:	d017      	beq.n	8004b60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	005b      	lsls	r3, r3, #1
 8004b3a:	2203      	movs	r2, #3
 8004b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b40:	43db      	mvns	r3, r3
 8004b42:	69ba      	ldr	r2, [r7, #24]
 8004b44:	4013      	ands	r3, r2
 8004b46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	689a      	ldr	r2, [r3, #8]
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	005b      	lsls	r3, r3, #1
 8004b50:	fa02 f303 	lsl.w	r3, r2, r3
 8004b54:	69ba      	ldr	r2, [r7, #24]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	69ba      	ldr	r2, [r7, #24]
 8004b5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f003 0303 	and.w	r3, r3, #3
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d123      	bne.n	8004bb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	08da      	lsrs	r2, r3, #3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	3208      	adds	r2, #8
 8004b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	f003 0307 	and.w	r3, r3, #7
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	220f      	movs	r2, #15
 8004b84:	fa02 f303 	lsl.w	r3, r2, r3
 8004b88:	43db      	mvns	r3, r3
 8004b8a:	69ba      	ldr	r2, [r7, #24]
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	691a      	ldr	r2, [r3, #16]
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	f003 0307 	and.w	r3, r3, #7
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba0:	69ba      	ldr	r2, [r7, #24]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	08da      	lsrs	r2, r3, #3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	3208      	adds	r2, #8
 8004bae:	69b9      	ldr	r1, [r7, #24]
 8004bb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	005b      	lsls	r3, r3, #1
 8004bbe:	2203      	movs	r2, #3
 8004bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc4:	43db      	mvns	r3, r3
 8004bc6:	69ba      	ldr	r2, [r7, #24]
 8004bc8:	4013      	ands	r3, r2
 8004bca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f003 0203 	and.w	r2, r3, #3
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	005b      	lsls	r3, r3, #1
 8004bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bdc:	69ba      	ldr	r2, [r7, #24]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	69ba      	ldr	r2, [r7, #24]
 8004be6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f000 80a2 	beq.w	8004d3a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	60fb      	str	r3, [r7, #12]
 8004bfa:	4b57      	ldr	r3, [pc, #348]	; (8004d58 <HAL_GPIO_Init+0x2e8>)
 8004bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfe:	4a56      	ldr	r2, [pc, #344]	; (8004d58 <HAL_GPIO_Init+0x2e8>)
 8004c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c04:	6453      	str	r3, [r2, #68]	; 0x44
 8004c06:	4b54      	ldr	r3, [pc, #336]	; (8004d58 <HAL_GPIO_Init+0x2e8>)
 8004c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c0e:	60fb      	str	r3, [r7, #12]
 8004c10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c12:	4a52      	ldr	r2, [pc, #328]	; (8004d5c <HAL_GPIO_Init+0x2ec>)
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	089b      	lsrs	r3, r3, #2
 8004c18:	3302      	adds	r3, #2
 8004c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	f003 0303 	and.w	r3, r3, #3
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	220f      	movs	r2, #15
 8004c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2e:	43db      	mvns	r3, r3
 8004c30:	69ba      	ldr	r2, [r7, #24]
 8004c32:	4013      	ands	r3, r2
 8004c34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a49      	ldr	r2, [pc, #292]	; (8004d60 <HAL_GPIO_Init+0x2f0>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d019      	beq.n	8004c72 <HAL_GPIO_Init+0x202>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a48      	ldr	r2, [pc, #288]	; (8004d64 <HAL_GPIO_Init+0x2f4>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d013      	beq.n	8004c6e <HAL_GPIO_Init+0x1fe>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a47      	ldr	r2, [pc, #284]	; (8004d68 <HAL_GPIO_Init+0x2f8>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d00d      	beq.n	8004c6a <HAL_GPIO_Init+0x1fa>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a46      	ldr	r2, [pc, #280]	; (8004d6c <HAL_GPIO_Init+0x2fc>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d007      	beq.n	8004c66 <HAL_GPIO_Init+0x1f6>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a45      	ldr	r2, [pc, #276]	; (8004d70 <HAL_GPIO_Init+0x300>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d101      	bne.n	8004c62 <HAL_GPIO_Init+0x1f2>
 8004c5e:	2304      	movs	r3, #4
 8004c60:	e008      	b.n	8004c74 <HAL_GPIO_Init+0x204>
 8004c62:	2307      	movs	r3, #7
 8004c64:	e006      	b.n	8004c74 <HAL_GPIO_Init+0x204>
 8004c66:	2303      	movs	r3, #3
 8004c68:	e004      	b.n	8004c74 <HAL_GPIO_Init+0x204>
 8004c6a:	2302      	movs	r3, #2
 8004c6c:	e002      	b.n	8004c74 <HAL_GPIO_Init+0x204>
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e000      	b.n	8004c74 <HAL_GPIO_Init+0x204>
 8004c72:	2300      	movs	r3, #0
 8004c74:	69fa      	ldr	r2, [r7, #28]
 8004c76:	f002 0203 	and.w	r2, r2, #3
 8004c7a:	0092      	lsls	r2, r2, #2
 8004c7c:	4093      	lsls	r3, r2
 8004c7e:	69ba      	ldr	r2, [r7, #24]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c84:	4935      	ldr	r1, [pc, #212]	; (8004d5c <HAL_GPIO_Init+0x2ec>)
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	089b      	lsrs	r3, r3, #2
 8004c8a:	3302      	adds	r3, #2
 8004c8c:	69ba      	ldr	r2, [r7, #24]
 8004c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c92:	4b38      	ldr	r3, [pc, #224]	; (8004d74 <HAL_GPIO_Init+0x304>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	43db      	mvns	r3, r3
 8004c9c:	69ba      	ldr	r2, [r7, #24]
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d003      	beq.n	8004cb6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004cae:	69ba      	ldr	r2, [r7, #24]
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004cb6:	4a2f      	ldr	r2, [pc, #188]	; (8004d74 <HAL_GPIO_Init+0x304>)
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004cbc:	4b2d      	ldr	r3, [pc, #180]	; (8004d74 <HAL_GPIO_Init+0x304>)
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	43db      	mvns	r3, r3
 8004cc6:	69ba      	ldr	r2, [r7, #24]
 8004cc8:	4013      	ands	r3, r2
 8004cca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d003      	beq.n	8004ce0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004cd8:	69ba      	ldr	r2, [r7, #24]
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ce0:	4a24      	ldr	r2, [pc, #144]	; (8004d74 <HAL_GPIO_Init+0x304>)
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004ce6:	4b23      	ldr	r3, [pc, #140]	; (8004d74 <HAL_GPIO_Init+0x304>)
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	43db      	mvns	r3, r3
 8004cf0:	69ba      	ldr	r2, [r7, #24]
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004d02:	69ba      	ldr	r2, [r7, #24]
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d0a:	4a1a      	ldr	r2, [pc, #104]	; (8004d74 <HAL_GPIO_Init+0x304>)
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d10:	4b18      	ldr	r3, [pc, #96]	; (8004d74 <HAL_GPIO_Init+0x304>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	43db      	mvns	r3, r3
 8004d1a:	69ba      	ldr	r2, [r7, #24]
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d003      	beq.n	8004d34 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004d2c:	69ba      	ldr	r2, [r7, #24]
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d34:	4a0f      	ldr	r2, [pc, #60]	; (8004d74 <HAL_GPIO_Init+0x304>)
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	61fb      	str	r3, [r7, #28]
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	2b0f      	cmp	r3, #15
 8004d44:	f67f aea2 	bls.w	8004a8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d48:	bf00      	nop
 8004d4a:	bf00      	nop
 8004d4c:	3724      	adds	r7, #36	; 0x24
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	40023800 	.word	0x40023800
 8004d5c:	40013800 	.word	0x40013800
 8004d60:	40020000 	.word	0x40020000
 8004d64:	40020400 	.word	0x40020400
 8004d68:	40020800 	.word	0x40020800
 8004d6c:	40020c00 	.word	0x40020c00
 8004d70:	40021000 	.word	0x40021000
 8004d74:	40013c00 	.word	0x40013c00

08004d78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	460b      	mov	r3, r1
 8004d82:	807b      	strh	r3, [r7, #2]
 8004d84:	4613      	mov	r3, r2
 8004d86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d88:	787b      	ldrb	r3, [r7, #1]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d003      	beq.n	8004d96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d8e:	887a      	ldrh	r2, [r7, #2]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004d94:	e003      	b.n	8004d9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004d96:	887b      	ldrh	r3, [r7, #2]
 8004d98:	041a      	lsls	r2, r3, #16
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	619a      	str	r2, [r3, #24]
}
 8004d9e:	bf00      	nop
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
	...

08004dac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	4603      	mov	r3, r0
 8004db4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004db6:	4b08      	ldr	r3, [pc, #32]	; (8004dd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004db8:	695a      	ldr	r2, [r3, #20]
 8004dba:	88fb      	ldrh	r3, [r7, #6]
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d006      	beq.n	8004dd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004dc2:	4a05      	ldr	r2, [pc, #20]	; (8004dd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004dc4:	88fb      	ldrh	r3, [r7, #6]
 8004dc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004dc8:	88fb      	ldrh	r3, [r7, #6]
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7fc ff2e 	bl	8001c2c <HAL_GPIO_EXTI_Callback>
  }
}
 8004dd0:	bf00      	nop
 8004dd2:	3708      	adds	r7, #8
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	40013c00 	.word	0x40013c00

08004ddc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e12b      	b.n	8005046 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d106      	bne.n	8004e08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f7fe f9c6 	bl	8003194 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2224      	movs	r2, #36	; 0x24
 8004e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f022 0201 	bic.w	r2, r2, #1
 8004e1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004e40:	f003 f884 	bl	8007f4c <HAL_RCC_GetPCLK1Freq>
 8004e44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	4a81      	ldr	r2, [pc, #516]	; (8005050 <HAL_I2C_Init+0x274>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d807      	bhi.n	8004e60 <HAL_I2C_Init+0x84>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	4a80      	ldr	r2, [pc, #512]	; (8005054 <HAL_I2C_Init+0x278>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	bf94      	ite	ls
 8004e58:	2301      	movls	r3, #1
 8004e5a:	2300      	movhi	r3, #0
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	e006      	b.n	8004e6e <HAL_I2C_Init+0x92>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	4a7d      	ldr	r2, [pc, #500]	; (8005058 <HAL_I2C_Init+0x27c>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	bf94      	ite	ls
 8004e68:	2301      	movls	r3, #1
 8004e6a:	2300      	movhi	r3, #0
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d001      	beq.n	8004e76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e0e7      	b.n	8005046 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	4a78      	ldr	r2, [pc, #480]	; (800505c <HAL_I2C_Init+0x280>)
 8004e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7e:	0c9b      	lsrs	r3, r3, #18
 8004e80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68ba      	ldr	r2, [r7, #8]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	6a1b      	ldr	r3, [r3, #32]
 8004e9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	4a6a      	ldr	r2, [pc, #424]	; (8005050 <HAL_I2C_Init+0x274>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d802      	bhi.n	8004eb0 <HAL_I2C_Init+0xd4>
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	3301      	adds	r3, #1
 8004eae:	e009      	b.n	8004ec4 <HAL_I2C_Init+0xe8>
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004eb6:	fb02 f303 	mul.w	r3, r2, r3
 8004eba:	4a69      	ldr	r2, [pc, #420]	; (8005060 <HAL_I2C_Init+0x284>)
 8004ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec0:	099b      	lsrs	r3, r3, #6
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	6812      	ldr	r2, [r2, #0]
 8004ec8:	430b      	orrs	r3, r1
 8004eca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	69db      	ldr	r3, [r3, #28]
 8004ed2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004ed6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	495c      	ldr	r1, [pc, #368]	; (8005050 <HAL_I2C_Init+0x274>)
 8004ee0:	428b      	cmp	r3, r1
 8004ee2:	d819      	bhi.n	8004f18 <HAL_I2C_Init+0x13c>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	1e59      	subs	r1, r3, #1
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	005b      	lsls	r3, r3, #1
 8004eee:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ef2:	1c59      	adds	r1, r3, #1
 8004ef4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004ef8:	400b      	ands	r3, r1
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00a      	beq.n	8004f14 <HAL_I2C_Init+0x138>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	1e59      	subs	r1, r3, #1
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	005b      	lsls	r3, r3, #1
 8004f08:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f12:	e051      	b.n	8004fb8 <HAL_I2C_Init+0x1dc>
 8004f14:	2304      	movs	r3, #4
 8004f16:	e04f      	b.n	8004fb8 <HAL_I2C_Init+0x1dc>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d111      	bne.n	8004f44 <HAL_I2C_Init+0x168>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	1e58      	subs	r0, r3, #1
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6859      	ldr	r1, [r3, #4]
 8004f28:	460b      	mov	r3, r1
 8004f2a:	005b      	lsls	r3, r3, #1
 8004f2c:	440b      	add	r3, r1
 8004f2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f32:	3301      	adds	r3, #1
 8004f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	bf0c      	ite	eq
 8004f3c:	2301      	moveq	r3, #1
 8004f3e:	2300      	movne	r3, #0
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	e012      	b.n	8004f6a <HAL_I2C_Init+0x18e>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	1e58      	subs	r0, r3, #1
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6859      	ldr	r1, [r3, #4]
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	440b      	add	r3, r1
 8004f52:	0099      	lsls	r1, r3, #2
 8004f54:	440b      	add	r3, r1
 8004f56:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	bf0c      	ite	eq
 8004f64:	2301      	moveq	r3, #1
 8004f66:	2300      	movne	r3, #0
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d001      	beq.n	8004f72 <HAL_I2C_Init+0x196>
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e022      	b.n	8004fb8 <HAL_I2C_Init+0x1dc>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d10e      	bne.n	8004f98 <HAL_I2C_Init+0x1bc>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	1e58      	subs	r0, r3, #1
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6859      	ldr	r1, [r3, #4]
 8004f82:	460b      	mov	r3, r1
 8004f84:	005b      	lsls	r3, r3, #1
 8004f86:	440b      	add	r3, r1
 8004f88:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f96:	e00f      	b.n	8004fb8 <HAL_I2C_Init+0x1dc>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	1e58      	subs	r0, r3, #1
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6859      	ldr	r1, [r3, #4]
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	440b      	add	r3, r1
 8004fa6:	0099      	lsls	r1, r3, #2
 8004fa8:	440b      	add	r3, r1
 8004faa:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fae:	3301      	adds	r3, #1
 8004fb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fb8:	6879      	ldr	r1, [r7, #4]
 8004fba:	6809      	ldr	r1, [r1, #0]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	69da      	ldr	r2, [r3, #28]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	431a      	orrs	r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004fe6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	6911      	ldr	r1, [r2, #16]
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	68d2      	ldr	r2, [r2, #12]
 8004ff2:	4311      	orrs	r1, r2
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	6812      	ldr	r2, [r2, #0]
 8004ff8:	430b      	orrs	r3, r1
 8004ffa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	695a      	ldr	r2, [r3, #20]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	431a      	orrs	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	430a      	orrs	r2, r1
 8005016:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f042 0201 	orr.w	r2, r2, #1
 8005026:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2220      	movs	r2, #32
 8005032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3710      	adds	r7, #16
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	000186a0 	.word	0x000186a0
 8005054:	001e847f 	.word	0x001e847f
 8005058:	003d08ff 	.word	0x003d08ff
 800505c:	431bde83 	.word	0x431bde83
 8005060:	10624dd3 	.word	0x10624dd3

08005064 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b088      	sub	sp, #32
 8005068:	af02      	add	r7, sp, #8
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	607a      	str	r2, [r7, #4]
 800506e:	461a      	mov	r2, r3
 8005070:	460b      	mov	r3, r1
 8005072:	817b      	strh	r3, [r7, #10]
 8005074:	4613      	mov	r3, r2
 8005076:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005078:	f7fe fec4 	bl	8003e04 <HAL_GetTick>
 800507c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b20      	cmp	r3, #32
 8005088:	f040 80e0 	bne.w	800524c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	9300      	str	r3, [sp, #0]
 8005090:	2319      	movs	r3, #25
 8005092:	2201      	movs	r2, #1
 8005094:	4970      	ldr	r1, [pc, #448]	; (8005258 <HAL_I2C_Master_Transmit+0x1f4>)
 8005096:	68f8      	ldr	r0, [r7, #12]
 8005098:	f002 f8be 	bl	8007218 <I2C_WaitOnFlagUntilTimeout>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d001      	beq.n	80050a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80050a2:	2302      	movs	r3, #2
 80050a4:	e0d3      	b.n	800524e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d101      	bne.n	80050b4 <HAL_I2C_Master_Transmit+0x50>
 80050b0:	2302      	movs	r3, #2
 80050b2:	e0cc      	b.n	800524e <HAL_I2C_Master_Transmit+0x1ea>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0301 	and.w	r3, r3, #1
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d007      	beq.n	80050da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f042 0201 	orr.w	r2, r2, #1
 80050d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2221      	movs	r2, #33	; 0x21
 80050ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2210      	movs	r2, #16
 80050f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	893a      	ldrh	r2, [r7, #8]
 800510a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005110:	b29a      	uxth	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	4a50      	ldr	r2, [pc, #320]	; (800525c <HAL_I2C_Master_Transmit+0x1f8>)
 800511a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800511c:	8979      	ldrh	r1, [r7, #10]
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	6a3a      	ldr	r2, [r7, #32]
 8005122:	68f8      	ldr	r0, [r7, #12]
 8005124:	f001 fe80 	bl	8006e28 <I2C_MasterRequestWrite>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d001      	beq.n	8005132 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e08d      	b.n	800524e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005132:	2300      	movs	r3, #0
 8005134:	613b      	str	r3, [r7, #16]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	695b      	ldr	r3, [r3, #20]
 800513c:	613b      	str	r3, [r7, #16]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	613b      	str	r3, [r7, #16]
 8005146:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005148:	e066      	b.n	8005218 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	6a39      	ldr	r1, [r7, #32]
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f002 f938 	bl	80073c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00d      	beq.n	8005176 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515e:	2b04      	cmp	r3, #4
 8005160:	d107      	bne.n	8005172 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005170:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e06b      	b.n	800524e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517a:	781a      	ldrb	r2, [r3, #0]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005186:	1c5a      	adds	r2, r3, #1
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005190:	b29b      	uxth	r3, r3
 8005192:	3b01      	subs	r3, #1
 8005194:	b29a      	uxth	r2, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800519e:	3b01      	subs	r3, #1
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	695b      	ldr	r3, [r3, #20]
 80051ac:	f003 0304 	and.w	r3, r3, #4
 80051b0:	2b04      	cmp	r3, #4
 80051b2:	d11b      	bne.n	80051ec <HAL_I2C_Master_Transmit+0x188>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d017      	beq.n	80051ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c0:	781a      	ldrb	r2, [r3, #0]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051cc:	1c5a      	adds	r2, r3, #1
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	3b01      	subs	r3, #1
 80051da:	b29a      	uxth	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051e4:	3b01      	subs	r3, #1
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051ec:	697a      	ldr	r2, [r7, #20]
 80051ee:	6a39      	ldr	r1, [r7, #32]
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	f002 f928 	bl	8007446 <I2C_WaitOnBTFFlagUntilTimeout>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00d      	beq.n	8005218 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005200:	2b04      	cmp	r3, #4
 8005202:	d107      	bne.n	8005214 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005212:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e01a      	b.n	800524e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800521c:	2b00      	cmp	r3, #0
 800521e:	d194      	bne.n	800514a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800522e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2220      	movs	r2, #32
 8005234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005248:	2300      	movs	r3, #0
 800524a:	e000      	b.n	800524e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800524c:	2302      	movs	r3, #2
  }
}
 800524e:	4618      	mov	r0, r3
 8005250:	3718      	adds	r7, #24
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	00100002 	.word	0x00100002
 800525c:	ffff0000 	.word	0xffff0000

08005260 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b08c      	sub	sp, #48	; 0x30
 8005264:	af02      	add	r7, sp, #8
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	607a      	str	r2, [r7, #4]
 800526a:	461a      	mov	r2, r3
 800526c:	460b      	mov	r3, r1
 800526e:	817b      	strh	r3, [r7, #10]
 8005270:	4613      	mov	r3, r2
 8005272:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005274:	f7fe fdc6 	bl	8003e04 <HAL_GetTick>
 8005278:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b20      	cmp	r3, #32
 8005284:	f040 820b 	bne.w	800569e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528a:	9300      	str	r3, [sp, #0]
 800528c:	2319      	movs	r3, #25
 800528e:	2201      	movs	r2, #1
 8005290:	497c      	ldr	r1, [pc, #496]	; (8005484 <HAL_I2C_Master_Receive+0x224>)
 8005292:	68f8      	ldr	r0, [r7, #12]
 8005294:	f001 ffc0 	bl	8007218 <I2C_WaitOnFlagUntilTimeout>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800529e:	2302      	movs	r3, #2
 80052a0:	e1fe      	b.n	80056a0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d101      	bne.n	80052b0 <HAL_I2C_Master_Receive+0x50>
 80052ac:	2302      	movs	r3, #2
 80052ae:	e1f7      	b.n	80056a0 <HAL_I2C_Master_Receive+0x440>
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d007      	beq.n	80052d6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f042 0201 	orr.w	r2, r2, #1
 80052d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2222      	movs	r2, #34	; 0x22
 80052ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2210      	movs	r2, #16
 80052f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	893a      	ldrh	r2, [r7, #8]
 8005306:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800530c:	b29a      	uxth	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	4a5c      	ldr	r2, [pc, #368]	; (8005488 <HAL_I2C_Master_Receive+0x228>)
 8005316:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005318:	8979      	ldrh	r1, [r7, #10]
 800531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f001 fe04 	bl	8006f2c <I2C_MasterRequestRead>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e1b8      	b.n	80056a0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005332:	2b00      	cmp	r3, #0
 8005334:	d113      	bne.n	800535e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005336:	2300      	movs	r3, #0
 8005338:	623b      	str	r3, [r7, #32]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	695b      	ldr	r3, [r3, #20]
 8005340:	623b      	str	r3, [r7, #32]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	623b      	str	r3, [r7, #32]
 800534a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800535a:	601a      	str	r2, [r3, #0]
 800535c:	e18c      	b.n	8005678 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005362:	2b01      	cmp	r3, #1
 8005364:	d11b      	bne.n	800539e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005374:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005376:	2300      	movs	r3, #0
 8005378:	61fb      	str	r3, [r7, #28]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	695b      	ldr	r3, [r3, #20]
 8005380:	61fb      	str	r3, [r7, #28]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	61fb      	str	r3, [r7, #28]
 800538a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800539a:	601a      	str	r2, [r3, #0]
 800539c:	e16c      	b.n	8005678 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d11b      	bne.n	80053de <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053b4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053c6:	2300      	movs	r3, #0
 80053c8:	61bb      	str	r3, [r7, #24]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	695b      	ldr	r3, [r3, #20]
 80053d0:	61bb      	str	r3, [r7, #24]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	61bb      	str	r3, [r7, #24]
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	e14c      	b.n	8005678 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053ee:	2300      	movs	r3, #0
 80053f0:	617b      	str	r3, [r7, #20]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	695b      	ldr	r3, [r3, #20]
 80053f8:	617b      	str	r3, [r7, #20]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	699b      	ldr	r3, [r3, #24]
 8005400:	617b      	str	r3, [r7, #20]
 8005402:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005404:	e138      	b.n	8005678 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800540a:	2b03      	cmp	r3, #3
 800540c:	f200 80f1 	bhi.w	80055f2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005414:	2b01      	cmp	r3, #1
 8005416:	d123      	bne.n	8005460 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800541a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800541c:	68f8      	ldr	r0, [r7, #12]
 800541e:	f002 f885 	bl	800752c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d001      	beq.n	800542c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e139      	b.n	80056a0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	691a      	ldr	r2, [r3, #16]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005436:	b2d2      	uxtb	r2, r2
 8005438:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543e:	1c5a      	adds	r2, r3, #1
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005448:	3b01      	subs	r3, #1
 800544a:	b29a      	uxth	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005454:	b29b      	uxth	r3, r3
 8005456:	3b01      	subs	r3, #1
 8005458:	b29a      	uxth	r2, r3
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800545e:	e10b      	b.n	8005678 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005464:	2b02      	cmp	r3, #2
 8005466:	d14e      	bne.n	8005506 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546a:	9300      	str	r3, [sp, #0]
 800546c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546e:	2200      	movs	r2, #0
 8005470:	4906      	ldr	r1, [pc, #24]	; (800548c <HAL_I2C_Master_Receive+0x22c>)
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f001 fed0 	bl	8007218 <I2C_WaitOnFlagUntilTimeout>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d008      	beq.n	8005490 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e10e      	b.n	80056a0 <HAL_I2C_Master_Receive+0x440>
 8005482:	bf00      	nop
 8005484:	00100002 	.word	0x00100002
 8005488:	ffff0000 	.word	0xffff0000
 800548c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800549e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	691a      	ldr	r2, [r3, #16]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054aa:	b2d2      	uxtb	r2, r2
 80054ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b2:	1c5a      	adds	r2, r3, #1
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054bc:	3b01      	subs	r3, #1
 80054be:	b29a      	uxth	r2, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	3b01      	subs	r3, #1
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	691a      	ldr	r2, [r3, #16]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054dc:	b2d2      	uxtb	r2, r2
 80054de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e4:	1c5a      	adds	r2, r3, #1
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ee:	3b01      	subs	r3, #1
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	3b01      	subs	r3, #1
 80054fe:	b29a      	uxth	r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005504:	e0b8      	b.n	8005678 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005508:	9300      	str	r3, [sp, #0]
 800550a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550c:	2200      	movs	r2, #0
 800550e:	4966      	ldr	r1, [pc, #408]	; (80056a8 <HAL_I2C_Master_Receive+0x448>)
 8005510:	68f8      	ldr	r0, [r7, #12]
 8005512:	f001 fe81 	bl	8007218 <I2C_WaitOnFlagUntilTimeout>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d001      	beq.n	8005520 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e0bf      	b.n	80056a0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800552e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	691a      	ldr	r2, [r3, #16]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553a:	b2d2      	uxtb	r2, r2
 800553c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005542:	1c5a      	adds	r2, r3, #1
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800554c:	3b01      	subs	r3, #1
 800554e:	b29a      	uxth	r2, r3
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005558:	b29b      	uxth	r3, r3
 800555a:	3b01      	subs	r3, #1
 800555c:	b29a      	uxth	r2, r3
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005564:	9300      	str	r3, [sp, #0]
 8005566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005568:	2200      	movs	r2, #0
 800556a:	494f      	ldr	r1, [pc, #316]	; (80056a8 <HAL_I2C_Master_Receive+0x448>)
 800556c:	68f8      	ldr	r0, [r7, #12]
 800556e:	f001 fe53 	bl	8007218 <I2C_WaitOnFlagUntilTimeout>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d001      	beq.n	800557c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e091      	b.n	80056a0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800558a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	691a      	ldr	r2, [r3, #16]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005596:	b2d2      	uxtb	r2, r2
 8005598:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559e:	1c5a      	adds	r2, r3, #1
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055a8:	3b01      	subs	r3, #1
 80055aa:	b29a      	uxth	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	3b01      	subs	r3, #1
 80055b8:	b29a      	uxth	r2, r3
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	691a      	ldr	r2, [r3, #16]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c8:	b2d2      	uxtb	r2, r2
 80055ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d0:	1c5a      	adds	r2, r3, #1
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055da:	3b01      	subs	r3, #1
 80055dc:	b29a      	uxth	r2, r3
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	3b01      	subs	r3, #1
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80055f0:	e042      	b.n	8005678 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f001 ff98 	bl	800752c <I2C_WaitOnRXNEFlagUntilTimeout>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d001      	beq.n	8005606 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e04c      	b.n	80056a0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	691a      	ldr	r2, [r3, #16]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005610:	b2d2      	uxtb	r2, r2
 8005612:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005618:	1c5a      	adds	r2, r3, #1
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005622:	3b01      	subs	r3, #1
 8005624:	b29a      	uxth	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800562e:	b29b      	uxth	r3, r3
 8005630:	3b01      	subs	r3, #1
 8005632:	b29a      	uxth	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	f003 0304 	and.w	r3, r3, #4
 8005642:	2b04      	cmp	r3, #4
 8005644:	d118      	bne.n	8005678 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	691a      	ldr	r2, [r3, #16]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005650:	b2d2      	uxtb	r2, r2
 8005652:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005658:	1c5a      	adds	r2, r3, #1
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005662:	3b01      	subs	r3, #1
 8005664:	b29a      	uxth	r2, r3
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800566e:	b29b      	uxth	r3, r3
 8005670:	3b01      	subs	r3, #1
 8005672:	b29a      	uxth	r2, r3
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800567c:	2b00      	cmp	r3, #0
 800567e:	f47f aec2 	bne.w	8005406 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2220      	movs	r2, #32
 8005686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800569a:	2300      	movs	r3, #0
 800569c:	e000      	b.n	80056a0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800569e:	2302      	movs	r3, #2
  }
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3728      	adds	r7, #40	; 0x28
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	00010004 	.word	0x00010004

080056ac <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b088      	sub	sp, #32
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80056b4:	2300      	movs	r3, #0
 80056b6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056cc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056d4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80056d6:	7bfb      	ldrb	r3, [r7, #15]
 80056d8:	2b10      	cmp	r3, #16
 80056da:	d003      	beq.n	80056e4 <HAL_I2C_EV_IRQHandler+0x38>
 80056dc:	7bfb      	ldrb	r3, [r7, #15]
 80056de:	2b40      	cmp	r3, #64	; 0x40
 80056e0:	f040 80b1 	bne.w	8005846 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d10d      	bne.n	800571a <HAL_I2C_EV_IRQHandler+0x6e>
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005704:	d003      	beq.n	800570e <HAL_I2C_EV_IRQHandler+0x62>
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800570c:	d101      	bne.n	8005712 <HAL_I2C_EV_IRQHandler+0x66>
 800570e:	2301      	movs	r3, #1
 8005710:	e000      	b.n	8005714 <HAL_I2C_EV_IRQHandler+0x68>
 8005712:	2300      	movs	r3, #0
 8005714:	2b01      	cmp	r3, #1
 8005716:	f000 8114 	beq.w	8005942 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	f003 0301 	and.w	r3, r3, #1
 8005720:	2b00      	cmp	r3, #0
 8005722:	d00b      	beq.n	800573c <HAL_I2C_EV_IRQHandler+0x90>
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800572a:	2b00      	cmp	r3, #0
 800572c:	d006      	beq.n	800573c <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f001 ff81 	bl	8007636 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 fd5e 	bl	80061f6 <I2C_Master_SB>
 800573a:	e083      	b.n	8005844 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	f003 0308 	and.w	r3, r3, #8
 8005742:	2b00      	cmp	r3, #0
 8005744:	d008      	beq.n	8005758 <HAL_I2C_EV_IRQHandler+0xac>
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800574c:	2b00      	cmp	r3, #0
 800574e:	d003      	beq.n	8005758 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 fdd6 	bl	8006302 <I2C_Master_ADD10>
 8005756:	e075      	b.n	8005844 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	f003 0302 	and.w	r3, r3, #2
 800575e:	2b00      	cmp	r3, #0
 8005760:	d008      	beq.n	8005774 <HAL_I2C_EV_IRQHandler+0xc8>
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005768:	2b00      	cmp	r3, #0
 800576a:	d003      	beq.n	8005774 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 fdf2 	bl	8006356 <I2C_Master_ADDR>
 8005772:	e067      	b.n	8005844 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	f003 0304 	and.w	r3, r3, #4
 800577a:	2b00      	cmp	r3, #0
 800577c:	d036      	beq.n	80057ec <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005788:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800578c:	f000 80db 	beq.w	8005946 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00d      	beq.n	80057b6 <HAL_I2C_EV_IRQHandler+0x10a>
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d008      	beq.n	80057b6 <HAL_I2C_EV_IRQHandler+0x10a>
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	f003 0304 	and.w	r3, r3, #4
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d103      	bne.n	80057b6 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 f9d6 	bl	8005b60 <I2C_MasterTransmit_TXE>
 80057b4:	e046      	b.n	8005844 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	f003 0304 	and.w	r3, r3, #4
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f000 80c2 	beq.w	8005946 <HAL_I2C_EV_IRQHandler+0x29a>
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f000 80bc 	beq.w	8005946 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80057ce:	7bbb      	ldrb	r3, [r7, #14]
 80057d0:	2b21      	cmp	r3, #33	; 0x21
 80057d2:	d103      	bne.n	80057dc <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 fa5f 	bl	8005c98 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80057da:	e0b4      	b.n	8005946 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80057dc:	7bfb      	ldrb	r3, [r7, #15]
 80057de:	2b40      	cmp	r3, #64	; 0x40
 80057e0:	f040 80b1 	bne.w	8005946 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 facd 	bl	8005d84 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80057ea:	e0ac      	b.n	8005946 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057fa:	f000 80a4 	beq.w	8005946 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005804:	2b00      	cmp	r3, #0
 8005806:	d00d      	beq.n	8005824 <HAL_I2C_EV_IRQHandler+0x178>
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800580e:	2b00      	cmp	r3, #0
 8005810:	d008      	beq.n	8005824 <HAL_I2C_EV_IRQHandler+0x178>
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	f003 0304 	and.w	r3, r3, #4
 8005818:	2b00      	cmp	r3, #0
 800581a:	d103      	bne.n	8005824 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 fb45 	bl	8005eac <I2C_MasterReceive_RXNE>
 8005822:	e00f      	b.n	8005844 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	f003 0304 	and.w	r3, r3, #4
 800582a:	2b00      	cmp	r3, #0
 800582c:	f000 808b 	beq.w	8005946 <HAL_I2C_EV_IRQHandler+0x29a>
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005836:	2b00      	cmp	r3, #0
 8005838:	f000 8085 	beq.w	8005946 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 fbf0 	bl	8006022 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005842:	e080      	b.n	8005946 <HAL_I2C_EV_IRQHandler+0x29a>
 8005844:	e07f      	b.n	8005946 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584a:	2b00      	cmp	r3, #0
 800584c:	d004      	beq.n	8005858 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	695b      	ldr	r3, [r3, #20]
 8005854:	61fb      	str	r3, [r7, #28]
 8005856:	e007      	b.n	8005868 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	f003 0302 	and.w	r3, r3, #2
 800586e:	2b00      	cmp	r3, #0
 8005870:	d011      	beq.n	8005896 <HAL_I2C_EV_IRQHandler+0x1ea>
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00c      	beq.n	8005896 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005880:	2b00      	cmp	r3, #0
 8005882:	d003      	beq.n	800588c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800588c:	69b9      	ldr	r1, [r7, #24]
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 ffb0 	bl	80067f4 <I2C_Slave_ADDR>
 8005894:	e05a      	b.n	800594c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	f003 0310 	and.w	r3, r3, #16
 800589c:	2b00      	cmp	r3, #0
 800589e:	d008      	beq.n	80058b2 <HAL_I2C_EV_IRQHandler+0x206>
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d003      	beq.n	80058b2 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 ffea 	bl	8006884 <I2C_Slave_STOPF>
 80058b0:	e04c      	b.n	800594c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80058b2:	7bbb      	ldrb	r3, [r7, #14]
 80058b4:	2b21      	cmp	r3, #33	; 0x21
 80058b6:	d002      	beq.n	80058be <HAL_I2C_EV_IRQHandler+0x212>
 80058b8:	7bbb      	ldrb	r3, [r7, #14]
 80058ba:	2b29      	cmp	r3, #41	; 0x29
 80058bc:	d120      	bne.n	8005900 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00d      	beq.n	80058e4 <HAL_I2C_EV_IRQHandler+0x238>
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d008      	beq.n	80058e4 <HAL_I2C_EV_IRQHandler+0x238>
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	f003 0304 	and.w	r3, r3, #4
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d103      	bne.n	80058e4 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 fecb 	bl	8006678 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80058e2:	e032      	b.n	800594a <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	f003 0304 	and.w	r3, r3, #4
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d02d      	beq.n	800594a <HAL_I2C_EV_IRQHandler+0x29e>
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d028      	beq.n	800594a <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 fefa 	bl	80066f2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80058fe:	e024      	b.n	800594a <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00d      	beq.n	8005926 <HAL_I2C_EV_IRQHandler+0x27a>
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005910:	2b00      	cmp	r3, #0
 8005912:	d008      	beq.n	8005926 <HAL_I2C_EV_IRQHandler+0x27a>
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	f003 0304 	and.w	r3, r3, #4
 800591a:	2b00      	cmp	r3, #0
 800591c:	d103      	bne.n	8005926 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 ff08 	bl	8006734 <I2C_SlaveReceive_RXNE>
 8005924:	e012      	b.n	800594c <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	f003 0304 	and.w	r3, r3, #4
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00d      	beq.n	800594c <HAL_I2C_EV_IRQHandler+0x2a0>
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005936:	2b00      	cmp	r3, #0
 8005938:	d008      	beq.n	800594c <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 ff38 	bl	80067b0 <I2C_SlaveReceive_BTF>
 8005940:	e004      	b.n	800594c <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8005942:	bf00      	nop
 8005944:	e002      	b.n	800594c <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005946:	bf00      	nop
 8005948:	e000      	b.n	800594c <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800594a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800594c:	3720      	adds	r7, #32
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}

08005952 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005952:	b580      	push	{r7, lr}
 8005954:	b08a      	sub	sp, #40	; 0x28
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	695b      	ldr	r3, [r3, #20]
 8005960:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800596a:	2300      	movs	r3, #0
 800596c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005974:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005976:	6a3b      	ldr	r3, [r7, #32]
 8005978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00d      	beq.n	800599c <HAL_I2C_ER_IRQHandler+0x4a>
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005986:	2b00      	cmp	r3, #0
 8005988:	d008      	beq.n	800599c <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800598a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598c:	f043 0301 	orr.w	r3, r3, #1
 8005990:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800599a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800599c:	6a3b      	ldr	r3, [r7, #32]
 800599e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00d      	beq.n	80059c2 <HAL_I2C_ER_IRQHandler+0x70>
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d008      	beq.n	80059c2 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80059b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b2:	f043 0302 	orr.w	r3, r3, #2
 80059b6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80059c0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80059c2:	6a3b      	ldr	r3, [r7, #32]
 80059c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d03e      	beq.n	8005a4a <HAL_I2C_ER_IRQHandler+0xf8>
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d039      	beq.n	8005a4a <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 80059d6:	7efb      	ldrb	r3, [r7, #27]
 80059d8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059de:	b29b      	uxth	r3, r3
 80059e0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059e8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ee:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80059f0:	7ebb      	ldrb	r3, [r7, #26]
 80059f2:	2b20      	cmp	r3, #32
 80059f4:	d112      	bne.n	8005a1c <HAL_I2C_ER_IRQHandler+0xca>
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d10f      	bne.n	8005a1c <HAL_I2C_ER_IRQHandler+0xca>
 80059fc:	7cfb      	ldrb	r3, [r7, #19]
 80059fe:	2b21      	cmp	r3, #33	; 0x21
 8005a00:	d008      	beq.n	8005a14 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005a02:	7cfb      	ldrb	r3, [r7, #19]
 8005a04:	2b29      	cmp	r3, #41	; 0x29
 8005a06:	d005      	beq.n	8005a14 <HAL_I2C_ER_IRQHandler+0xc2>
 8005a08:	7cfb      	ldrb	r3, [r7, #19]
 8005a0a:	2b28      	cmp	r3, #40	; 0x28
 8005a0c:	d106      	bne.n	8005a1c <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2b21      	cmp	r3, #33	; 0x21
 8005a12:	d103      	bne.n	8005a1c <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f001 f865 	bl	8006ae4 <I2C_Slave_AF>
 8005a1a:	e016      	b.n	8005a4a <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a24:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a28:	f043 0304 	orr.w	r3, r3, #4
 8005a2c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005a2e:	7efb      	ldrb	r3, [r7, #27]
 8005a30:	2b10      	cmp	r3, #16
 8005a32:	d002      	beq.n	8005a3a <HAL_I2C_ER_IRQHandler+0xe8>
 8005a34:	7efb      	ldrb	r3, [r7, #27]
 8005a36:	2b40      	cmp	r3, #64	; 0x40
 8005a38:	d107      	bne.n	8005a4a <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a48:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005a4a:	6a3b      	ldr	r3, [r7, #32]
 8005a4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d00d      	beq.n	8005a70 <HAL_I2C_ER_IRQHandler+0x11e>
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d008      	beq.n	8005a70 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a60:	f043 0308 	orr.w	r3, r3, #8
 8005a64:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005a6e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d008      	beq.n	8005a88 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7c:	431a      	orrs	r2, r3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f001 f89e 	bl	8006bc4 <I2C_ITError>
  }
}
 8005a88:	bf00      	nop
 8005a8a:	3728      	adds	r7, #40	; 0x28
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005a98:	bf00      	nop
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005aac:	bf00      	nop
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005ac0:	bf00      	nop
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005ad4:	bf00      	nop
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	460b      	mov	r3, r1
 8005aea:	70fb      	strb	r3, [r7, #3]
 8005aec:	4613      	mov	r3, r2
 8005aee:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005b2c:	bf00      	nop
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005b40:	bf00      	nop
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005b54:	bf00      	nop
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b6e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b76:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d150      	bne.n	8005c28 <I2C_MasterTransmit_TXE+0xc8>
 8005b86:	7bfb      	ldrb	r3, [r7, #15]
 8005b88:	2b21      	cmp	r3, #33	; 0x21
 8005b8a:	d14d      	bne.n	8005c28 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	2b08      	cmp	r3, #8
 8005b90:	d01d      	beq.n	8005bce <I2C_MasterTransmit_TXE+0x6e>
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	2b20      	cmp	r3, #32
 8005b96:	d01a      	beq.n	8005bce <I2C_MasterTransmit_TXE+0x6e>
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b9e:	d016      	beq.n	8005bce <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	685a      	ldr	r2, [r3, #4]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005bae:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2211      	movs	r2, #17
 8005bb4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2220      	movs	r2, #32
 8005bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f7ff ff62 	bl	8005a90 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005bcc:	e060      	b.n	8005c90 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	685a      	ldr	r2, [r3, #4]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005bdc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bec:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2220      	movs	r2, #32
 8005bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	2b40      	cmp	r3, #64	; 0x40
 8005c06:	d107      	bne.n	8005c18 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f7ff ff7d 	bl	8005b10 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005c16:	e03b      	b.n	8005c90 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f7ff ff35 	bl	8005a90 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005c26:	e033      	b.n	8005c90 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005c28:	7bfb      	ldrb	r3, [r7, #15]
 8005c2a:	2b21      	cmp	r3, #33	; 0x21
 8005c2c:	d005      	beq.n	8005c3a <I2C_MasterTransmit_TXE+0xda>
 8005c2e:	7bbb      	ldrb	r3, [r7, #14]
 8005c30:	2b40      	cmp	r3, #64	; 0x40
 8005c32:	d12d      	bne.n	8005c90 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005c34:	7bfb      	ldrb	r3, [r7, #15]
 8005c36:	2b22      	cmp	r3, #34	; 0x22
 8005c38:	d12a      	bne.n	8005c90 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d108      	bne.n	8005c56 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	685a      	ldr	r2, [r3, #4]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c52:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005c54:	e01c      	b.n	8005c90 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	2b40      	cmp	r3, #64	; 0x40
 8005c60:	d103      	bne.n	8005c6a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 f88e 	bl	8005d84 <I2C_MemoryTransmit_TXE_BTF>
}
 8005c68:	e012      	b.n	8005c90 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6e:	781a      	ldrb	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7a:	1c5a      	adds	r2, r3, #1
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	3b01      	subs	r3, #1
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005c8e:	e7ff      	b.n	8005c90 <I2C_MasterTransmit_TXE+0x130>
 8005c90:	bf00      	nop
 8005c92:	3710      	adds	r7, #16
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	2b21      	cmp	r3, #33	; 0x21
 8005cb0:	d164      	bne.n	8005d7c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d012      	beq.n	8005ce2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc0:	781a      	ldrb	r2, [r3, #0]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ccc:	1c5a      	adds	r2, r3, #1
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	b29a      	uxth	r2, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005ce0:	e04c      	b.n	8005d7c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2b08      	cmp	r3, #8
 8005ce6:	d01d      	beq.n	8005d24 <I2C_MasterTransmit_BTF+0x8c>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2b20      	cmp	r3, #32
 8005cec:	d01a      	beq.n	8005d24 <I2C_MasterTransmit_BTF+0x8c>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005cf4:	d016      	beq.n	8005d24 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	685a      	ldr	r2, [r3, #4]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005d04:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2211      	movs	r2, #17
 8005d0a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2220      	movs	r2, #32
 8005d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f7ff feb7 	bl	8005a90 <HAL_I2C_MasterTxCpltCallback>
}
 8005d22:	e02b      	b.n	8005d7c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	685a      	ldr	r2, [r3, #4]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005d32:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d42:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2220      	movs	r2, #32
 8005d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	2b40      	cmp	r3, #64	; 0x40
 8005d5c:	d107      	bne.n	8005d6e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7ff fed2 	bl	8005b10 <HAL_I2C_MemTxCpltCallback>
}
 8005d6c:	e006      	b.n	8005d7c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f7ff fe8a 	bl	8005a90 <HAL_I2C_MasterTxCpltCallback>
}
 8005d7c:	bf00      	nop
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d92:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d11d      	bne.n	8005dd8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d10b      	bne.n	8005dbc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005da8:	b2da      	uxtb	r2, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005db4:	1c9a      	adds	r2, r3, #2
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005dba:	e073      	b.n	8005ea4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	121b      	asrs	r3, r3, #8
 8005dc4:	b2da      	uxtb	r2, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dd0:	1c5a      	adds	r2, r3, #1
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005dd6:	e065      	b.n	8005ea4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d10b      	bne.n	8005df8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005de4:	b2da      	uxtb	r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005df0:	1c5a      	adds	r2, r3, #1
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005df6:	e055      	b.n	8005ea4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d151      	bne.n	8005ea4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005e00:	7bfb      	ldrb	r3, [r7, #15]
 8005e02:	2b22      	cmp	r3, #34	; 0x22
 8005e04:	d10d      	bne.n	8005e22 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e14:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e1a:	1c5a      	adds	r2, r3, #1
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005e20:	e040      	b.n	8005ea4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d015      	beq.n	8005e58 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005e2c:	7bfb      	ldrb	r3, [r7, #15]
 8005e2e:	2b21      	cmp	r3, #33	; 0x21
 8005e30:	d112      	bne.n	8005e58 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e36:	781a      	ldrb	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e42:	1c5a      	adds	r2, r3, #1
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	b29a      	uxth	r2, r3
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005e56:	e025      	b.n	8005ea4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d120      	bne.n	8005ea4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005e62:	7bfb      	ldrb	r3, [r7, #15]
 8005e64:	2b21      	cmp	r3, #33	; 0x21
 8005e66:	d11d      	bne.n	8005ea4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	685a      	ldr	r2, [r3, #4]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e76:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e86:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2220      	movs	r2, #32
 8005e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f7ff fe36 	bl	8005b10 <HAL_I2C_MemTxCpltCallback>
}
 8005ea4:	bf00      	nop
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	2b22      	cmp	r3, #34	; 0x22
 8005ebe:	f040 80ac 	bne.w	800601a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2b03      	cmp	r3, #3
 8005ece:	d921      	bls.n	8005f14 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	691a      	ldr	r2, [r3, #16]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eda:	b2d2      	uxtb	r2, r2
 8005edc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee2:	1c5a      	adds	r2, r3, #1
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	b29a      	uxth	r2, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	2b03      	cmp	r3, #3
 8005efe:	f040 808c 	bne.w	800601a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	685a      	ldr	r2, [r3, #4]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f10:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005f12:	e082      	b.n	800601a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d075      	beq.n	8006008 <I2C_MasterReceive_RXNE+0x15c>
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d002      	beq.n	8005f28 <I2C_MasterReceive_RXNE+0x7c>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d16f      	bne.n	8006008 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f001 facd 	bl	80074c8 <I2C_WaitOnSTOPRequestThroughIT>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d142      	bne.n	8005fba <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f42:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	685a      	ldr	r2, [r3, #4]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f52:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	691a      	ldr	r2, [r3, #16]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5e:	b2d2      	uxtb	r2, r2
 8005f60:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f66:	1c5a      	adds	r2, r3, #1
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	3b01      	subs	r3, #1
 8005f74:	b29a      	uxth	r2, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2220      	movs	r2, #32
 8005f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	2b40      	cmp	r3, #64	; 0x40
 8005f8c:	d10a      	bne.n	8005fa4 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f7ff fdc1 	bl	8005b24 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005fa2:	e03a      	b.n	800601a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2212      	movs	r2, #18
 8005fb0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f7ff fd76 	bl	8005aa4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005fb8:	e02f      	b.n	800601a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	685a      	ldr	r2, [r3, #4]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005fc8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	691a      	ldr	r2, [r3, #16]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd4:	b2d2      	uxtb	r2, r2
 8005fd6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fdc:	1c5a      	adds	r2, r3, #1
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2220      	movs	r2, #32
 8005ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f7ff fd99 	bl	8005b38 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006006:	e008      	b.n	800601a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	685a      	ldr	r2, [r3, #4]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006016:	605a      	str	r2, [r3, #4]
}
 8006018:	e7ff      	b.n	800601a <I2C_MasterReceive_RXNE+0x16e>
 800601a:	bf00      	nop
 800601c:	3710      	adds	r7, #16
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}

08006022 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006022:	b580      	push	{r7, lr}
 8006024:	b084      	sub	sp, #16
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006034:	b29b      	uxth	r3, r3
 8006036:	2b04      	cmp	r3, #4
 8006038:	d11b      	bne.n	8006072 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	685a      	ldr	r2, [r3, #4]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006048:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	691a      	ldr	r2, [r3, #16]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006054:	b2d2      	uxtb	r2, r2
 8006056:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605c:	1c5a      	adds	r2, r3, #1
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006066:	b29b      	uxth	r3, r3
 8006068:	3b01      	subs	r3, #1
 800606a:	b29a      	uxth	r2, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006070:	e0bd      	b.n	80061ee <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006076:	b29b      	uxth	r3, r3
 8006078:	2b03      	cmp	r3, #3
 800607a:	d129      	bne.n	80060d0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	685a      	ldr	r2, [r3, #4]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800608a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2b04      	cmp	r3, #4
 8006090:	d00a      	beq.n	80060a8 <I2C_MasterReceive_BTF+0x86>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2b02      	cmp	r3, #2
 8006096:	d007      	beq.n	80060a8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060a6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	691a      	ldr	r2, [r3, #16]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b2:	b2d2      	uxtb	r2, r2
 80060b4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ba:	1c5a      	adds	r2, r3, #1
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	3b01      	subs	r3, #1
 80060c8:	b29a      	uxth	r2, r3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80060ce:	e08e      	b.n	80061ee <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d176      	bne.n	80061c8 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d002      	beq.n	80060e6 <I2C_MasterReceive_BTF+0xc4>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2b10      	cmp	r3, #16
 80060e4:	d108      	bne.n	80060f8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060f4:	601a      	str	r2, [r3, #0]
 80060f6:	e019      	b.n	800612c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2b04      	cmp	r3, #4
 80060fc:	d002      	beq.n	8006104 <I2C_MasterReceive_BTF+0xe2>
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2b02      	cmp	r3, #2
 8006102:	d108      	bne.n	8006116 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006112:	601a      	str	r2, [r3, #0]
 8006114:	e00a      	b.n	800612c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2b10      	cmp	r3, #16
 800611a:	d007      	beq.n	800612c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800612a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	691a      	ldr	r2, [r3, #16]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006136:	b2d2      	uxtb	r2, r2
 8006138:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613e:	1c5a      	adds	r2, r3, #1
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006148:	b29b      	uxth	r3, r3
 800614a:	3b01      	subs	r3, #1
 800614c:	b29a      	uxth	r2, r3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	691a      	ldr	r2, [r3, #16]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615c:	b2d2      	uxtb	r2, r2
 800615e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006164:	1c5a      	adds	r2, r3, #1
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800616e:	b29b      	uxth	r3, r3
 8006170:	3b01      	subs	r3, #1
 8006172:	b29a      	uxth	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	685a      	ldr	r2, [r3, #4]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006186:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2220      	movs	r2, #32
 800618c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006196:	b2db      	uxtb	r3, r3
 8006198:	2b40      	cmp	r3, #64	; 0x40
 800619a:	d10a      	bne.n	80061b2 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f7ff fcba 	bl	8005b24 <HAL_I2C_MemRxCpltCallback>
}
 80061b0:	e01d      	b.n	80061ee <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2212      	movs	r2, #18
 80061be:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f7ff fc6f 	bl	8005aa4 <HAL_I2C_MasterRxCpltCallback>
}
 80061c6:	e012      	b.n	80061ee <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	691a      	ldr	r2, [r3, #16]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d2:	b2d2      	uxtb	r2, r2
 80061d4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061da:	1c5a      	adds	r2, r3, #1
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	3b01      	subs	r3, #1
 80061e8:	b29a      	uxth	r2, r3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80061ee:	bf00      	nop
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80061f6:	b480      	push	{r7}
 80061f8:	b083      	sub	sp, #12
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006204:	b2db      	uxtb	r3, r3
 8006206:	2b40      	cmp	r3, #64	; 0x40
 8006208:	d117      	bne.n	800623a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800620e:	2b00      	cmp	r3, #0
 8006210:	d109      	bne.n	8006226 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006216:	b2db      	uxtb	r3, r3
 8006218:	461a      	mov	r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006222:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006224:	e067      	b.n	80062f6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800622a:	b2db      	uxtb	r3, r3
 800622c:	f043 0301 	orr.w	r3, r3, #1
 8006230:	b2da      	uxtb	r2, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	611a      	str	r2, [r3, #16]
}
 8006238:	e05d      	b.n	80062f6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006242:	d133      	bne.n	80062ac <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800624a:	b2db      	uxtb	r3, r3
 800624c:	2b21      	cmp	r3, #33	; 0x21
 800624e:	d109      	bne.n	8006264 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006254:	b2db      	uxtb	r3, r3
 8006256:	461a      	mov	r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006260:	611a      	str	r2, [r3, #16]
 8006262:	e008      	b.n	8006276 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006268:	b2db      	uxtb	r3, r3
 800626a:	f043 0301 	orr.w	r3, r3, #1
 800626e:	b2da      	uxtb	r2, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800627a:	2b00      	cmp	r3, #0
 800627c:	d004      	beq.n	8006288 <I2C_Master_SB+0x92>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006284:	2b00      	cmp	r3, #0
 8006286:	d108      	bne.n	800629a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628c:	2b00      	cmp	r3, #0
 800628e:	d032      	beq.n	80062f6 <I2C_Master_SB+0x100>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006296:	2b00      	cmp	r3, #0
 8006298:	d02d      	beq.n	80062f6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	685a      	ldr	r2, [r3, #4]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062a8:	605a      	str	r2, [r3, #4]
}
 80062aa:	e024      	b.n	80062f6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d10e      	bne.n	80062d2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	11db      	asrs	r3, r3, #7
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	f003 0306 	and.w	r3, r3, #6
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	f063 030f 	orn	r3, r3, #15
 80062c8:	b2da      	uxtb	r2, r3
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	611a      	str	r2, [r3, #16]
}
 80062d0:	e011      	b.n	80062f6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d10d      	bne.n	80062f6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062de:	b29b      	uxth	r3, r3
 80062e0:	11db      	asrs	r3, r3, #7
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	f003 0306 	and.w	r3, r3, #6
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	f063 030e 	orn	r3, r3, #14
 80062ee:	b2da      	uxtb	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	611a      	str	r2, [r3, #16]
}
 80062f6:	bf00      	nop
 80062f8:	370c      	adds	r7, #12
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr

08006302 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006302:	b480      	push	{r7}
 8006304:	b083      	sub	sp, #12
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800630e:	b2da      	uxtb	r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800631a:	2b00      	cmp	r3, #0
 800631c:	d004      	beq.n	8006328 <I2C_Master_ADD10+0x26>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006324:	2b00      	cmp	r3, #0
 8006326:	d108      	bne.n	800633a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00c      	beq.n	800634a <I2C_Master_ADD10+0x48>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006336:	2b00      	cmp	r3, #0
 8006338:	d007      	beq.n	800634a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	685a      	ldr	r2, [r3, #4]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006348:	605a      	str	r2, [r3, #4]
  }
}
 800634a:	bf00      	nop
 800634c:	370c      	adds	r7, #12
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr

08006356 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006356:	b480      	push	{r7}
 8006358:	b091      	sub	sp, #68	; 0x44
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006364:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800636c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006372:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800637a:	b2db      	uxtb	r3, r3
 800637c:	2b22      	cmp	r3, #34	; 0x22
 800637e:	f040 8169 	bne.w	8006654 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006386:	2b00      	cmp	r3, #0
 8006388:	d10f      	bne.n	80063aa <I2C_Master_ADDR+0x54>
 800638a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800638e:	2b40      	cmp	r3, #64	; 0x40
 8006390:	d10b      	bne.n	80063aa <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006392:	2300      	movs	r3, #0
 8006394:	633b      	str	r3, [r7, #48]	; 0x30
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	695b      	ldr	r3, [r3, #20]
 800639c:	633b      	str	r3, [r7, #48]	; 0x30
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	699b      	ldr	r3, [r3, #24]
 80063a4:	633b      	str	r3, [r7, #48]	; 0x30
 80063a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a8:	e160      	b.n	800666c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d11d      	bne.n	80063ee <I2C_Master_ADDR+0x98>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80063ba:	d118      	bne.n	80063ee <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063bc:	2300      	movs	r3, #0
 80063be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	695b      	ldr	r3, [r3, #20]
 80063c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063e0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063e6:	1c5a      	adds	r2, r3, #1
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	651a      	str	r2, [r3, #80]	; 0x50
 80063ec:	e13e      	b.n	800666c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d113      	bne.n	8006420 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063f8:	2300      	movs	r3, #0
 80063fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	695b      	ldr	r3, [r3, #20]
 8006402:	62bb      	str	r3, [r7, #40]	; 0x28
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	699b      	ldr	r3, [r3, #24]
 800640a:	62bb      	str	r3, [r7, #40]	; 0x28
 800640c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800641c:	601a      	str	r2, [r3, #0]
 800641e:	e115      	b.n	800664c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006424:	b29b      	uxth	r3, r3
 8006426:	2b01      	cmp	r3, #1
 8006428:	f040 808a 	bne.w	8006540 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800642c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800642e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006432:	d137      	bne.n	80064a4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006442:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800644e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006452:	d113      	bne.n	800647c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006462:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006464:	2300      	movs	r3, #0
 8006466:	627b      	str	r3, [r7, #36]	; 0x24
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	695b      	ldr	r3, [r3, #20]
 800646e:	627b      	str	r3, [r7, #36]	; 0x24
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	699b      	ldr	r3, [r3, #24]
 8006476:	627b      	str	r3, [r7, #36]	; 0x24
 8006478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647a:	e0e7      	b.n	800664c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800647c:	2300      	movs	r3, #0
 800647e:	623b      	str	r3, [r7, #32]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	695b      	ldr	r3, [r3, #20]
 8006486:	623b      	str	r3, [r7, #32]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	699b      	ldr	r3, [r3, #24]
 800648e:	623b      	str	r3, [r7, #32]
 8006490:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064a0:	601a      	str	r2, [r3, #0]
 80064a2:	e0d3      	b.n	800664c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80064a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a6:	2b08      	cmp	r3, #8
 80064a8:	d02e      	beq.n	8006508 <I2C_Master_ADDR+0x1b2>
 80064aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ac:	2b20      	cmp	r3, #32
 80064ae:	d02b      	beq.n	8006508 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80064b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b2:	2b12      	cmp	r3, #18
 80064b4:	d102      	bne.n	80064bc <I2C_Master_ADDR+0x166>
 80064b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d125      	bne.n	8006508 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80064bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064be:	2b04      	cmp	r3, #4
 80064c0:	d00e      	beq.n	80064e0 <I2C_Master_ADDR+0x18a>
 80064c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d00b      	beq.n	80064e0 <I2C_Master_ADDR+0x18a>
 80064c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ca:	2b10      	cmp	r3, #16
 80064cc:	d008      	beq.n	80064e0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064dc:	601a      	str	r2, [r3, #0]
 80064de:	e007      	b.n	80064f0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80064ee:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064f0:	2300      	movs	r3, #0
 80064f2:	61fb      	str	r3, [r7, #28]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	695b      	ldr	r3, [r3, #20]
 80064fa:	61fb      	str	r3, [r7, #28]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	699b      	ldr	r3, [r3, #24]
 8006502:	61fb      	str	r3, [r7, #28]
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	e0a1      	b.n	800664c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006516:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006518:	2300      	movs	r3, #0
 800651a:	61bb      	str	r3, [r7, #24]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	695b      	ldr	r3, [r3, #20]
 8006522:	61bb      	str	r3, [r7, #24]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	61bb      	str	r3, [r7, #24]
 800652c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800653c:	601a      	str	r2, [r3, #0]
 800653e:	e085      	b.n	800664c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006544:	b29b      	uxth	r3, r3
 8006546:	2b02      	cmp	r3, #2
 8006548:	d14d      	bne.n	80065e6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800654a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800654c:	2b04      	cmp	r3, #4
 800654e:	d016      	beq.n	800657e <I2C_Master_ADDR+0x228>
 8006550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006552:	2b02      	cmp	r3, #2
 8006554:	d013      	beq.n	800657e <I2C_Master_ADDR+0x228>
 8006556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006558:	2b10      	cmp	r3, #16
 800655a:	d010      	beq.n	800657e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800656a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800657a:	601a      	str	r2, [r3, #0]
 800657c:	e007      	b.n	800658e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800658c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006598:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800659c:	d117      	bne.n	80065ce <I2C_Master_ADDR+0x278>
 800659e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80065a4:	d00b      	beq.n	80065be <I2C_Master_ADDR+0x268>
 80065a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d008      	beq.n	80065be <I2C_Master_ADDR+0x268>
 80065ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ae:	2b08      	cmp	r3, #8
 80065b0:	d005      	beq.n	80065be <I2C_Master_ADDR+0x268>
 80065b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b4:	2b10      	cmp	r3, #16
 80065b6:	d002      	beq.n	80065be <I2C_Master_ADDR+0x268>
 80065b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ba:	2b20      	cmp	r3, #32
 80065bc:	d107      	bne.n	80065ce <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	685a      	ldr	r2, [r3, #4]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80065cc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065ce:	2300      	movs	r3, #0
 80065d0:	617b      	str	r3, [r7, #20]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	695b      	ldr	r3, [r3, #20]
 80065d8:	617b      	str	r3, [r7, #20]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	699b      	ldr	r3, [r3, #24]
 80065e0:	617b      	str	r3, [r7, #20]
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	e032      	b.n	800664c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80065f4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006600:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006604:	d117      	bne.n	8006636 <I2C_Master_ADDR+0x2e0>
 8006606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006608:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800660c:	d00b      	beq.n	8006626 <I2C_Master_ADDR+0x2d0>
 800660e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006610:	2b01      	cmp	r3, #1
 8006612:	d008      	beq.n	8006626 <I2C_Master_ADDR+0x2d0>
 8006614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006616:	2b08      	cmp	r3, #8
 8006618:	d005      	beq.n	8006626 <I2C_Master_ADDR+0x2d0>
 800661a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800661c:	2b10      	cmp	r3, #16
 800661e:	d002      	beq.n	8006626 <I2C_Master_ADDR+0x2d0>
 8006620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006622:	2b20      	cmp	r3, #32
 8006624:	d107      	bne.n	8006636 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	685a      	ldr	r2, [r3, #4]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006634:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006636:	2300      	movs	r3, #0
 8006638:	613b      	str	r3, [r7, #16]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	695b      	ldr	r3, [r3, #20]
 8006640:	613b      	str	r3, [r7, #16]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	699b      	ldr	r3, [r3, #24]
 8006648:	613b      	str	r3, [r7, #16]
 800664a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006652:	e00b      	b.n	800666c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006654:	2300      	movs	r3, #0
 8006656:	60fb      	str	r3, [r7, #12]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	60fb      	str	r3, [r7, #12]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	60fb      	str	r3, [r7, #12]
 8006668:	68fb      	ldr	r3, [r7, #12]
}
 800666a:	e7ff      	b.n	800666c <I2C_Master_ADDR+0x316>
 800666c:	bf00      	nop
 800666e:	3744      	adds	r7, #68	; 0x44
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006686:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800668c:	b29b      	uxth	r3, r3
 800668e:	2b00      	cmp	r3, #0
 8006690:	d02b      	beq.n	80066ea <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006696:	781a      	ldrb	r2, [r3, #0]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a2:	1c5a      	adds	r2, r3, #1
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	3b01      	subs	r3, #1
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d114      	bne.n	80066ea <I2C_SlaveTransmit_TXE+0x72>
 80066c0:	7bfb      	ldrb	r3, [r7, #15]
 80066c2:	2b29      	cmp	r3, #41	; 0x29
 80066c4:	d111      	bne.n	80066ea <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	685a      	ldr	r2, [r3, #4]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066d4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2221      	movs	r2, #33	; 0x21
 80066da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2228      	movs	r2, #40	; 0x28
 80066e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f7ff f9e7 	bl	8005ab8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80066ea:	bf00      	nop
 80066ec:	3710      	adds	r7, #16
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80066f2:	b480      	push	{r7}
 80066f4:	b083      	sub	sp, #12
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066fe:	b29b      	uxth	r3, r3
 8006700:	2b00      	cmp	r3, #0
 8006702:	d011      	beq.n	8006728 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006708:	781a      	ldrb	r2, [r3, #0]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006714:	1c5a      	adds	r2, r3, #1
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800671e:	b29b      	uxth	r3, r3
 8006720:	3b01      	subs	r3, #1
 8006722:	b29a      	uxth	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006728:	bf00      	nop
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006742:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006748:	b29b      	uxth	r3, r3
 800674a:	2b00      	cmp	r3, #0
 800674c:	d02c      	beq.n	80067a8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	691a      	ldr	r2, [r3, #16]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006758:	b2d2      	uxtb	r2, r2
 800675a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006760:	1c5a      	adds	r2, r3, #1
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800676a:	b29b      	uxth	r3, r3
 800676c:	3b01      	subs	r3, #1
 800676e:	b29a      	uxth	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006778:	b29b      	uxth	r3, r3
 800677a:	2b00      	cmp	r3, #0
 800677c:	d114      	bne.n	80067a8 <I2C_SlaveReceive_RXNE+0x74>
 800677e:	7bfb      	ldrb	r3, [r7, #15]
 8006780:	2b2a      	cmp	r3, #42	; 0x2a
 8006782:	d111      	bne.n	80067a8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	685a      	ldr	r2, [r3, #4]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006792:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2222      	movs	r2, #34	; 0x22
 8006798:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2228      	movs	r2, #40	; 0x28
 800679e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f7ff f992 	bl	8005acc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80067a8:	bf00      	nop
 80067aa:	3710      	adds	r7, #16
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067bc:	b29b      	uxth	r3, r3
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d012      	beq.n	80067e8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	691a      	ldr	r2, [r3, #16]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067cc:	b2d2      	uxtb	r2, r2
 80067ce:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d4:	1c5a      	adds	r2, r3, #1
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067de:	b29b      	uxth	r3, r3
 80067e0:	3b01      	subs	r3, #1
 80067e2:	b29a      	uxth	r2, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80067e8:	bf00      	nop
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80067fe:	2300      	movs	r3, #0
 8006800:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006808:	b2db      	uxtb	r3, r3
 800680a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800680e:	2b28      	cmp	r3, #40	; 0x28
 8006810:	d125      	bne.n	800685e <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	685a      	ldr	r2, [r3, #4]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006820:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	f003 0304 	and.w	r3, r3, #4
 8006828:	2b00      	cmp	r3, #0
 800682a:	d101      	bne.n	8006830 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800682c:	2301      	movs	r3, #1
 800682e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006836:	2b00      	cmp	r3, #0
 8006838:	d103      	bne.n	8006842 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	81bb      	strh	r3, [r7, #12]
 8006840:	e002      	b.n	8006848 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006850:	89ba      	ldrh	r2, [r7, #12]
 8006852:	7bfb      	ldrb	r3, [r7, #15]
 8006854:	4619      	mov	r1, r3
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f7ff f942 	bl	8005ae0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800685c:	e00e      	b.n	800687c <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800685e:	2300      	movs	r3, #0
 8006860:	60bb      	str	r3, [r7, #8]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	695b      	ldr	r3, [r3, #20]
 8006868:	60bb      	str	r3, [r7, #8]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	60bb      	str	r3, [r7, #8]
 8006872:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800687c:	bf00      	nop
 800687e:	3710      	adds	r7, #16
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006892:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	685a      	ldr	r2, [r3, #4]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80068a2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80068a4:	2300      	movs	r3, #0
 80068a6:	60bb      	str	r3, [r7, #8]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	60bb      	str	r3, [r7, #8]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f042 0201 	orr.w	r2, r2, #1
 80068be:	601a      	str	r2, [r3, #0]
 80068c0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068d0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068e0:	d172      	bne.n	80069c8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80068e2:	7bfb      	ldrb	r3, [r7, #15]
 80068e4:	2b22      	cmp	r3, #34	; 0x22
 80068e6:	d002      	beq.n	80068ee <I2C_Slave_STOPF+0x6a>
 80068e8:	7bfb      	ldrb	r3, [r7, #15]
 80068ea:	2b2a      	cmp	r3, #42	; 0x2a
 80068ec:	d135      	bne.n	800695a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	b29a      	uxth	r2, r3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006900:	b29b      	uxth	r3, r3
 8006902:	2b00      	cmp	r3, #0
 8006904:	d005      	beq.n	8006912 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690a:	f043 0204 	orr.w	r2, r3, #4
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	685a      	ldr	r2, [r3, #4]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006920:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006926:	4618      	mov	r0, r3
 8006928:	f7fd ffb4 	bl	8004894 <HAL_DMA_GetState>
 800692c:	4603      	mov	r3, r0
 800692e:	2b01      	cmp	r3, #1
 8006930:	d049      	beq.n	80069c6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006936:	4a69      	ldr	r2, [pc, #420]	; (8006adc <I2C_Slave_STOPF+0x258>)
 8006938:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693e:	4618      	mov	r0, r3
 8006940:	f7fd fdfc 	bl	800453c <HAL_DMA_Abort_IT>
 8006944:	4603      	mov	r3, r0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d03d      	beq.n	80069c6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800694e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006954:	4610      	mov	r0, r2
 8006956:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006958:	e035      	b.n	80069c6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	b29a      	uxth	r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800696c:	b29b      	uxth	r3, r3
 800696e:	2b00      	cmp	r3, #0
 8006970:	d005      	beq.n	800697e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006976:	f043 0204 	orr.w	r2, r3, #4
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	685a      	ldr	r2, [r3, #4]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800698c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006992:	4618      	mov	r0, r3
 8006994:	f7fd ff7e 	bl	8004894 <HAL_DMA_GetState>
 8006998:	4603      	mov	r3, r0
 800699a:	2b01      	cmp	r3, #1
 800699c:	d014      	beq.n	80069c8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069a2:	4a4e      	ldr	r2, [pc, #312]	; (8006adc <I2C_Slave_STOPF+0x258>)
 80069a4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7fd fdc6 	bl	800453c <HAL_DMA_Abort_IT>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d008      	beq.n	80069c8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80069c0:	4610      	mov	r0, r2
 80069c2:	4798      	blx	r3
 80069c4:	e000      	b.n	80069c8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80069c6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d03e      	beq.n	8006a50 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	695b      	ldr	r3, [r3, #20]
 80069d8:	f003 0304 	and.w	r3, r3, #4
 80069dc:	2b04      	cmp	r3, #4
 80069de:	d112      	bne.n	8006a06 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	691a      	ldr	r2, [r3, #16]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ea:	b2d2      	uxtb	r2, r2
 80069ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f2:	1c5a      	adds	r2, r3, #1
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	3b01      	subs	r3, #1
 8006a00:	b29a      	uxth	r2, r3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	695b      	ldr	r3, [r3, #20]
 8006a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a10:	2b40      	cmp	r3, #64	; 0x40
 8006a12:	d112      	bne.n	8006a3a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	691a      	ldr	r2, [r3, #16]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1e:	b2d2      	uxtb	r2, r2
 8006a20:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a26:	1c5a      	adds	r2, r3, #1
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	3b01      	subs	r3, #1
 8006a34:	b29a      	uxth	r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d005      	beq.n	8006a50 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a48:	f043 0204 	orr.w	r2, r3, #4
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d003      	beq.n	8006a60 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 f8b3 	bl	8006bc4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006a5e:	e039      	b.n	8006ad4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006a60:	7bfb      	ldrb	r3, [r7, #15]
 8006a62:	2b2a      	cmp	r3, #42	; 0x2a
 8006a64:	d109      	bne.n	8006a7a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2228      	movs	r2, #40	; 0x28
 8006a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f7ff f829 	bl	8005acc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	2b28      	cmp	r3, #40	; 0x28
 8006a84:	d111      	bne.n	8006aaa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4a15      	ldr	r2, [pc, #84]	; (8006ae0 <I2C_Slave_STOPF+0x25c>)
 8006a8a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2220      	movs	r2, #32
 8006a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f7ff f82a 	bl	8005afc <HAL_I2C_ListenCpltCallback>
}
 8006aa8:	e014      	b.n	8006ad4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aae:	2b22      	cmp	r3, #34	; 0x22
 8006ab0:	d002      	beq.n	8006ab8 <I2C_Slave_STOPF+0x234>
 8006ab2:	7bfb      	ldrb	r3, [r7, #15]
 8006ab4:	2b22      	cmp	r3, #34	; 0x22
 8006ab6:	d10d      	bne.n	8006ad4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2220      	movs	r2, #32
 8006ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f7fe fffc 	bl	8005acc <HAL_I2C_SlaveRxCpltCallback>
}
 8006ad4:	bf00      	nop
 8006ad6:	3710      	adds	r7, #16
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	080070c9 	.word	0x080070c9
 8006ae0:	ffff0000 	.word	0xffff0000

08006ae4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006af2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	2b08      	cmp	r3, #8
 8006afe:	d002      	beq.n	8006b06 <I2C_Slave_AF+0x22>
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	2b20      	cmp	r3, #32
 8006b04:	d129      	bne.n	8006b5a <I2C_Slave_AF+0x76>
 8006b06:	7bfb      	ldrb	r3, [r7, #15]
 8006b08:	2b28      	cmp	r3, #40	; 0x28
 8006b0a:	d126      	bne.n	8006b5a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a2c      	ldr	r2, [pc, #176]	; (8006bc0 <I2C_Slave_AF+0xdc>)
 8006b10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	685a      	ldr	r2, [r3, #4]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006b20:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b2a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b3a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2220      	movs	r2, #32
 8006b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f7fe ffd2 	bl	8005afc <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006b58:	e02e      	b.n	8006bb8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006b5a:	7bfb      	ldrb	r3, [r7, #15]
 8006b5c:	2b21      	cmp	r3, #33	; 0x21
 8006b5e:	d126      	bne.n	8006bae <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a17      	ldr	r2, [pc, #92]	; (8006bc0 <I2C_Slave_AF+0xdc>)
 8006b64:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2221      	movs	r2, #33	; 0x21
 8006b6a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2220      	movs	r2, #32
 8006b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	685a      	ldr	r2, [r3, #4]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006b8a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b94:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ba4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f7fe ff86 	bl	8005ab8 <HAL_I2C_SlaveTxCpltCallback>
}
 8006bac:	e004      	b.n	8006bb8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006bb6:	615a      	str	r2, [r3, #20]
}
 8006bb8:	bf00      	nop
 8006bba:	3710      	adds	r7, #16
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	ffff0000 	.word	0xffff0000

08006bc4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bd2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bda:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006bdc:	7bbb      	ldrb	r3, [r7, #14]
 8006bde:	2b10      	cmp	r3, #16
 8006be0:	d002      	beq.n	8006be8 <I2C_ITError+0x24>
 8006be2:	7bbb      	ldrb	r3, [r7, #14]
 8006be4:	2b40      	cmp	r3, #64	; 0x40
 8006be6:	d10a      	bne.n	8006bfe <I2C_ITError+0x3a>
 8006be8:	7bfb      	ldrb	r3, [r7, #15]
 8006bea:	2b22      	cmp	r3, #34	; 0x22
 8006bec:	d107      	bne.n	8006bfe <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006bfc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006bfe:	7bfb      	ldrb	r3, [r7, #15]
 8006c00:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006c04:	2b28      	cmp	r3, #40	; 0x28
 8006c06:	d107      	bne.n	8006c18 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2228      	movs	r2, #40	; 0x28
 8006c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006c16:	e015      	b.n	8006c44 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c26:	d00a      	beq.n	8006c3e <I2C_ITError+0x7a>
 8006c28:	7bfb      	ldrb	r3, [r7, #15]
 8006c2a:	2b60      	cmp	r3, #96	; 0x60
 8006c2c:	d007      	beq.n	8006c3e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2220      	movs	r2, #32
 8006c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c52:	d162      	bne.n	8006d1a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	685a      	ldr	r2, [r3, #4]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c62:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d020      	beq.n	8006cb4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c76:	4a6a      	ldr	r2, [pc, #424]	; (8006e20 <I2C_ITError+0x25c>)
 8006c78:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f7fd fc5c 	bl	800453c <HAL_DMA_Abort_IT>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	f000 8089 	beq.w	8006d9e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f022 0201 	bic.w	r2, r2, #1
 8006c9a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2220      	movs	r2, #32
 8006ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006cae:	4610      	mov	r0, r2
 8006cb0:	4798      	blx	r3
 8006cb2:	e074      	b.n	8006d9e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb8:	4a59      	ldr	r2, [pc, #356]	; (8006e20 <I2C_ITError+0x25c>)
 8006cba:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f7fd fc3b 	bl	800453c <HAL_DMA_Abort_IT>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d068      	beq.n	8006d9e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	695b      	ldr	r3, [r3, #20]
 8006cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd6:	2b40      	cmp	r3, #64	; 0x40
 8006cd8:	d10b      	bne.n	8006cf2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	691a      	ldr	r2, [r3, #16]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce4:	b2d2      	uxtb	r2, r2
 8006ce6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cec:	1c5a      	adds	r2, r3, #1
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f022 0201 	bic.w	r2, r2, #1
 8006d00:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2220      	movs	r2, #32
 8006d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006d14:	4610      	mov	r0, r2
 8006d16:	4798      	blx	r3
 8006d18:	e041      	b.n	8006d9e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	2b60      	cmp	r3, #96	; 0x60
 8006d24:	d125      	bne.n	8006d72 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2220      	movs	r2, #32
 8006d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	695b      	ldr	r3, [r3, #20]
 8006d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d3e:	2b40      	cmp	r3, #64	; 0x40
 8006d40:	d10b      	bne.n	8006d5a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	691a      	ldr	r2, [r3, #16]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4c:	b2d2      	uxtb	r2, r2
 8006d4e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d54:	1c5a      	adds	r2, r3, #1
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f022 0201 	bic.w	r2, r2, #1
 8006d68:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f7fe feee 	bl	8005b4c <HAL_I2C_AbortCpltCallback>
 8006d70:	e015      	b.n	8006d9e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	695b      	ldr	r3, [r3, #20]
 8006d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d7c:	2b40      	cmp	r3, #64	; 0x40
 8006d7e:	d10b      	bne.n	8006d98 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	691a      	ldr	r2, [r3, #16]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8a:	b2d2      	uxtb	r2, r2
 8006d8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d92:	1c5a      	adds	r2, r3, #1
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f7fe fecd 	bl	8005b38 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	f003 0301 	and.w	r3, r3, #1
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d10e      	bne.n	8006dcc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d109      	bne.n	8006dcc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d104      	bne.n	8006dcc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d007      	beq.n	8006ddc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	685a      	ldr	r2, [r3, #4]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006dda:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006de2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de8:	f003 0304 	and.w	r3, r3, #4
 8006dec:	2b04      	cmp	r3, #4
 8006dee:	d113      	bne.n	8006e18 <I2C_ITError+0x254>
 8006df0:	7bfb      	ldrb	r3, [r7, #15]
 8006df2:	2b28      	cmp	r3, #40	; 0x28
 8006df4:	d110      	bne.n	8006e18 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a0a      	ldr	r2, [pc, #40]	; (8006e24 <I2C_ITError+0x260>)
 8006dfa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2220      	movs	r2, #32
 8006e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f7fe fe72 	bl	8005afc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006e18:	bf00      	nop
 8006e1a:	3710      	adds	r7, #16
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	080070c9 	.word	0x080070c9
 8006e24:	ffff0000 	.word	0xffff0000

08006e28 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b088      	sub	sp, #32
 8006e2c:	af02      	add	r7, sp, #8
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	607a      	str	r2, [r7, #4]
 8006e32:	603b      	str	r3, [r7, #0]
 8006e34:	460b      	mov	r3, r1
 8006e36:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e3c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	2b08      	cmp	r3, #8
 8006e42:	d006      	beq.n	8006e52 <I2C_MasterRequestWrite+0x2a>
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d003      	beq.n	8006e52 <I2C_MasterRequestWrite+0x2a>
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006e50:	d108      	bne.n	8006e64 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e60:	601a      	str	r2, [r3, #0]
 8006e62:	e00b      	b.n	8006e7c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e68:	2b12      	cmp	r3, #18
 8006e6a:	d107      	bne.n	8006e7c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e7a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	9300      	str	r3, [sp, #0]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006e88:	68f8      	ldr	r0, [r7, #12]
 8006e8a:	f000 f9c5 	bl	8007218 <I2C_WaitOnFlagUntilTimeout>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d00d      	beq.n	8006eb0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ea2:	d103      	bne.n	8006eac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006eaa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006eac:	2303      	movs	r3, #3
 8006eae:	e035      	b.n	8006f1c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	691b      	ldr	r3, [r3, #16]
 8006eb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006eb8:	d108      	bne.n	8006ecc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006eba:	897b      	ldrh	r3, [r7, #10]
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006ec8:	611a      	str	r2, [r3, #16]
 8006eca:	e01b      	b.n	8006f04 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006ecc:	897b      	ldrh	r3, [r7, #10]
 8006ece:	11db      	asrs	r3, r3, #7
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	f003 0306 	and.w	r3, r3, #6
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	f063 030f 	orn	r3, r3, #15
 8006edc:	b2da      	uxtb	r2, r3
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	490e      	ldr	r1, [pc, #56]	; (8006f24 <I2C_MasterRequestWrite+0xfc>)
 8006eea:	68f8      	ldr	r0, [r7, #12]
 8006eec:	f000 f9eb 	bl	80072c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d001      	beq.n	8006efa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e010      	b.n	8006f1c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006efa:	897b      	ldrh	r3, [r7, #10]
 8006efc:	b2da      	uxtb	r2, r3
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	4907      	ldr	r1, [pc, #28]	; (8006f28 <I2C_MasterRequestWrite+0x100>)
 8006f0a:	68f8      	ldr	r0, [r7, #12]
 8006f0c:	f000 f9db 	bl	80072c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d001      	beq.n	8006f1a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e000      	b.n	8006f1c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006f1a:	2300      	movs	r3, #0
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3718      	adds	r7, #24
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	00010008 	.word	0x00010008
 8006f28:	00010002 	.word	0x00010002

08006f2c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b088      	sub	sp, #32
 8006f30:	af02      	add	r7, sp, #8
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	607a      	str	r2, [r7, #4]
 8006f36:	603b      	str	r3, [r7, #0]
 8006f38:	460b      	mov	r3, r1
 8006f3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f40:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f50:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	2b08      	cmp	r3, #8
 8006f56:	d006      	beq.n	8006f66 <I2C_MasterRequestRead+0x3a>
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d003      	beq.n	8006f66 <I2C_MasterRequestRead+0x3a>
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006f64:	d108      	bne.n	8006f78 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f74:	601a      	str	r2, [r3, #0]
 8006f76:	e00b      	b.n	8006f90 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f7c:	2b11      	cmp	r3, #17
 8006f7e:	d107      	bne.n	8006f90 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f8e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	9300      	str	r3, [sp, #0]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006f9c:	68f8      	ldr	r0, [r7, #12]
 8006f9e:	f000 f93b 	bl	8007218 <I2C_WaitOnFlagUntilTimeout>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d00d      	beq.n	8006fc4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fb6:	d103      	bne.n	8006fc0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fbe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006fc0:	2303      	movs	r3, #3
 8006fc2:	e079      	b.n	80070b8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fcc:	d108      	bne.n	8006fe0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006fce:	897b      	ldrh	r3, [r7, #10]
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	f043 0301 	orr.w	r3, r3, #1
 8006fd6:	b2da      	uxtb	r2, r3
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	611a      	str	r2, [r3, #16]
 8006fde:	e05f      	b.n	80070a0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006fe0:	897b      	ldrh	r3, [r7, #10]
 8006fe2:	11db      	asrs	r3, r3, #7
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	f003 0306 	and.w	r3, r3, #6
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	f063 030f 	orn	r3, r3, #15
 8006ff0:	b2da      	uxtb	r2, r3
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	4930      	ldr	r1, [pc, #192]	; (80070c0 <I2C_MasterRequestRead+0x194>)
 8006ffe:	68f8      	ldr	r0, [r7, #12]
 8007000:	f000 f961 	bl	80072c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007004:	4603      	mov	r3, r0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d001      	beq.n	800700e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	e054      	b.n	80070b8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800700e:	897b      	ldrh	r3, [r7, #10]
 8007010:	b2da      	uxtb	r2, r3
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	4929      	ldr	r1, [pc, #164]	; (80070c4 <I2C_MasterRequestRead+0x198>)
 800701e:	68f8      	ldr	r0, [r7, #12]
 8007020:	f000 f951 	bl	80072c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007024:	4603      	mov	r3, r0
 8007026:	2b00      	cmp	r3, #0
 8007028:	d001      	beq.n	800702e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	e044      	b.n	80070b8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800702e:	2300      	movs	r3, #0
 8007030:	613b      	str	r3, [r7, #16]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	695b      	ldr	r3, [r3, #20]
 8007038:	613b      	str	r3, [r7, #16]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	699b      	ldr	r3, [r3, #24]
 8007040:	613b      	str	r3, [r7, #16]
 8007042:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007052:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	9300      	str	r3, [sp, #0]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007060:	68f8      	ldr	r0, [r7, #12]
 8007062:	f000 f8d9 	bl	8007218 <I2C_WaitOnFlagUntilTimeout>
 8007066:	4603      	mov	r3, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00d      	beq.n	8007088 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800707a:	d103      	bne.n	8007084 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007082:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8007084:	2303      	movs	r3, #3
 8007086:	e017      	b.n	80070b8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007088:	897b      	ldrh	r3, [r7, #10]
 800708a:	11db      	asrs	r3, r3, #7
 800708c:	b2db      	uxtb	r3, r3
 800708e:	f003 0306 	and.w	r3, r3, #6
 8007092:	b2db      	uxtb	r3, r3
 8007094:	f063 030e 	orn	r3, r3, #14
 8007098:	b2da      	uxtb	r2, r3
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	4907      	ldr	r1, [pc, #28]	; (80070c4 <I2C_MasterRequestRead+0x198>)
 80070a6:	68f8      	ldr	r0, [r7, #12]
 80070a8:	f000 f90d 	bl	80072c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d001      	beq.n	80070b6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	e000      	b.n	80070b8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80070b6:	2300      	movs	r3, #0
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3718      	adds	r7, #24
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	00010008 	.word	0x00010008
 80070c4:	00010002 	.word	0x00010002

080070c8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b086      	sub	sp, #24
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80070d0:	2300      	movs	r3, #0
 80070d2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070e0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80070e2:	4b4b      	ldr	r3, [pc, #300]	; (8007210 <I2C_DMAAbort+0x148>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	08db      	lsrs	r3, r3, #3
 80070e8:	4a4a      	ldr	r2, [pc, #296]	; (8007214 <I2C_DMAAbort+0x14c>)
 80070ea:	fba2 2303 	umull	r2, r3, r2, r3
 80070ee:	0a1a      	lsrs	r2, r3, #8
 80070f0:	4613      	mov	r3, r2
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	4413      	add	r3, r2
 80070f6:	00da      	lsls	r2, r3, #3
 80070f8:	1ad3      	subs	r3, r2, r3
 80070fa:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d106      	bne.n	8007110 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007106:	f043 0220 	orr.w	r2, r3, #32
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800710e:	e00a      	b.n	8007126 <I2C_DMAAbort+0x5e>
    }
    count--;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	3b01      	subs	r3, #1
 8007114:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007124:	d0ea      	beq.n	80070fc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800712a:	2b00      	cmp	r3, #0
 800712c:	d003      	beq.n	8007136 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007132:	2200      	movs	r2, #0
 8007134:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800713a:	2b00      	cmp	r3, #0
 800713c:	d003      	beq.n	8007146 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007142:	2200      	movs	r2, #0
 8007144:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007154:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	2200      	movs	r2, #0
 800715a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007160:	2b00      	cmp	r3, #0
 8007162:	d003      	beq.n	800716c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007168:	2200      	movs	r2, #0
 800716a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007170:	2b00      	cmp	r3, #0
 8007172:	d003      	beq.n	800717c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007178:	2200      	movs	r2, #0
 800717a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f022 0201 	bic.w	r2, r2, #1
 800718a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007192:	b2db      	uxtb	r3, r3
 8007194:	2b60      	cmp	r3, #96	; 0x60
 8007196:	d10e      	bne.n	80071b6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	2220      	movs	r2, #32
 800719c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	2200      	movs	r2, #0
 80071ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80071ae:	6978      	ldr	r0, [r7, #20]
 80071b0:	f7fe fccc 	bl	8005b4c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80071b4:	e027      	b.n	8007206 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80071b6:	7cfb      	ldrb	r3, [r7, #19]
 80071b8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80071bc:	2b28      	cmp	r3, #40	; 0x28
 80071be:	d117      	bne.n	80071f0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f042 0201 	orr.w	r2, r2, #1
 80071ce:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80071de:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	2200      	movs	r2, #0
 80071e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	2228      	movs	r2, #40	; 0x28
 80071ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80071ee:	e007      	b.n	8007200 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	2220      	movs	r2, #32
 80071f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	2200      	movs	r2, #0
 80071fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007200:	6978      	ldr	r0, [r7, #20]
 8007202:	f7fe fc99 	bl	8005b38 <HAL_I2C_ErrorCallback>
}
 8007206:	bf00      	nop
 8007208:	3718      	adds	r7, #24
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	20000004 	.word	0x20000004
 8007214:	14f8b589 	.word	0x14f8b589

08007218 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	603b      	str	r3, [r7, #0]
 8007224:	4613      	mov	r3, r2
 8007226:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007228:	e025      	b.n	8007276 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007230:	d021      	beq.n	8007276 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007232:	f7fc fde7 	bl	8003e04 <HAL_GetTick>
 8007236:	4602      	mov	r2, r0
 8007238:	69bb      	ldr	r3, [r7, #24]
 800723a:	1ad3      	subs	r3, r2, r3
 800723c:	683a      	ldr	r2, [r7, #0]
 800723e:	429a      	cmp	r2, r3
 8007240:	d302      	bcc.n	8007248 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d116      	bne.n	8007276 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2200      	movs	r2, #0
 800724c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2220      	movs	r2, #32
 8007252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2200      	movs	r2, #0
 800725a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007262:	f043 0220 	orr.w	r2, r3, #32
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2200      	movs	r2, #0
 800726e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	e023      	b.n	80072be <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	0c1b      	lsrs	r3, r3, #16
 800727a:	b2db      	uxtb	r3, r3
 800727c:	2b01      	cmp	r3, #1
 800727e:	d10d      	bne.n	800729c <I2C_WaitOnFlagUntilTimeout+0x84>
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	43da      	mvns	r2, r3
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	4013      	ands	r3, r2
 800728c:	b29b      	uxth	r3, r3
 800728e:	2b00      	cmp	r3, #0
 8007290:	bf0c      	ite	eq
 8007292:	2301      	moveq	r3, #1
 8007294:	2300      	movne	r3, #0
 8007296:	b2db      	uxtb	r3, r3
 8007298:	461a      	mov	r2, r3
 800729a:	e00c      	b.n	80072b6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	699b      	ldr	r3, [r3, #24]
 80072a2:	43da      	mvns	r2, r3
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	4013      	ands	r3, r2
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	bf0c      	ite	eq
 80072ae:	2301      	moveq	r3, #1
 80072b0:	2300      	movne	r3, #0
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	461a      	mov	r2, r3
 80072b6:	79fb      	ldrb	r3, [r7, #7]
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d0b6      	beq.n	800722a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80072bc:	2300      	movs	r3, #0
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3710      	adds	r7, #16
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}

080072c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80072c6:	b580      	push	{r7, lr}
 80072c8:	b084      	sub	sp, #16
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	60f8      	str	r0, [r7, #12]
 80072ce:	60b9      	str	r1, [r7, #8]
 80072d0:	607a      	str	r2, [r7, #4]
 80072d2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80072d4:	e051      	b.n	800737a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	695b      	ldr	r3, [r3, #20]
 80072dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072e4:	d123      	bne.n	800732e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072f4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80072fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2200      	movs	r2, #0
 8007304:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2220      	movs	r2, #32
 800730a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731a:	f043 0204 	orr.w	r2, r3, #4
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2200      	movs	r2, #0
 8007326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	e046      	b.n	80073bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007334:	d021      	beq.n	800737a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007336:	f7fc fd65 	bl	8003e04 <HAL_GetTick>
 800733a:	4602      	mov	r2, r0
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	429a      	cmp	r2, r3
 8007344:	d302      	bcc.n	800734c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d116      	bne.n	800737a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2200      	movs	r2, #0
 8007350:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2220      	movs	r2, #32
 8007356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2200      	movs	r2, #0
 800735e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007366:	f043 0220 	orr.w	r2, r3, #32
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2200      	movs	r2, #0
 8007372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	e020      	b.n	80073bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	0c1b      	lsrs	r3, r3, #16
 800737e:	b2db      	uxtb	r3, r3
 8007380:	2b01      	cmp	r3, #1
 8007382:	d10c      	bne.n	800739e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	695b      	ldr	r3, [r3, #20]
 800738a:	43da      	mvns	r2, r3
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	4013      	ands	r3, r2
 8007390:	b29b      	uxth	r3, r3
 8007392:	2b00      	cmp	r3, #0
 8007394:	bf14      	ite	ne
 8007396:	2301      	movne	r3, #1
 8007398:	2300      	moveq	r3, #0
 800739a:	b2db      	uxtb	r3, r3
 800739c:	e00b      	b.n	80073b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	699b      	ldr	r3, [r3, #24]
 80073a4:	43da      	mvns	r2, r3
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	4013      	ands	r3, r2
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	bf14      	ite	ne
 80073b0:	2301      	movne	r3, #1
 80073b2:	2300      	moveq	r3, #0
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d18d      	bne.n	80072d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80073ba:	2300      	movs	r3, #0
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3710      	adds	r7, #16
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80073d0:	e02d      	b.n	800742e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80073d2:	68f8      	ldr	r0, [r7, #12]
 80073d4:	f000 f900 	bl	80075d8 <I2C_IsAcknowledgeFailed>
 80073d8:	4603      	mov	r3, r0
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d001      	beq.n	80073e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	e02d      	b.n	800743e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073e8:	d021      	beq.n	800742e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073ea:	f7fc fd0b 	bl	8003e04 <HAL_GetTick>
 80073ee:	4602      	mov	r2, r0
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	68ba      	ldr	r2, [r7, #8]
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d302      	bcc.n	8007400 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d116      	bne.n	800742e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2200      	movs	r2, #0
 8007404:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2220      	movs	r2, #32
 800740a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2200      	movs	r2, #0
 8007412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741a:	f043 0220 	orr.w	r2, r3, #32
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2200      	movs	r2, #0
 8007426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	e007      	b.n	800743e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	695b      	ldr	r3, [r3, #20]
 8007434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007438:	2b80      	cmp	r3, #128	; 0x80
 800743a:	d1ca      	bne.n	80073d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	3710      	adds	r7, #16
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007446:	b580      	push	{r7, lr}
 8007448:	b084      	sub	sp, #16
 800744a:	af00      	add	r7, sp, #0
 800744c:	60f8      	str	r0, [r7, #12]
 800744e:	60b9      	str	r1, [r7, #8]
 8007450:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007452:	e02d      	b.n	80074b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007454:	68f8      	ldr	r0, [r7, #12]
 8007456:	f000 f8bf 	bl	80075d8 <I2C_IsAcknowledgeFailed>
 800745a:	4603      	mov	r3, r0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d001      	beq.n	8007464 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007460:	2301      	movs	r3, #1
 8007462:	e02d      	b.n	80074c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800746a:	d021      	beq.n	80074b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800746c:	f7fc fcca 	bl	8003e04 <HAL_GetTick>
 8007470:	4602      	mov	r2, r0
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	1ad3      	subs	r3, r2, r3
 8007476:	68ba      	ldr	r2, [r7, #8]
 8007478:	429a      	cmp	r2, r3
 800747a:	d302      	bcc.n	8007482 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d116      	bne.n	80074b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2200      	movs	r2, #0
 8007486:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2220      	movs	r2, #32
 800748c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2200      	movs	r2, #0
 8007494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800749c:	f043 0220 	orr.w	r2, r3, #32
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2200      	movs	r2, #0
 80074a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80074ac:	2301      	movs	r3, #1
 80074ae:	e007      	b.n	80074c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	695b      	ldr	r3, [r3, #20]
 80074b6:	f003 0304 	and.w	r3, r3, #4
 80074ba:	2b04      	cmp	r3, #4
 80074bc:	d1ca      	bne.n	8007454 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80074be:	2300      	movs	r3, #0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3710      	adds	r7, #16
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b085      	sub	sp, #20
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074d0:	2300      	movs	r3, #0
 80074d2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80074d4:	4b13      	ldr	r3, [pc, #76]	; (8007524 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	08db      	lsrs	r3, r3, #3
 80074da:	4a13      	ldr	r2, [pc, #76]	; (8007528 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80074dc:	fba2 2303 	umull	r2, r3, r2, r3
 80074e0:	0a1a      	lsrs	r2, r3, #8
 80074e2:	4613      	mov	r3, r2
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	4413      	add	r3, r2
 80074e8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	3b01      	subs	r3, #1
 80074ee:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d107      	bne.n	8007506 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074fa:	f043 0220 	orr.w	r2, r3, #32
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	e008      	b.n	8007518 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007514:	d0e9      	beq.n	80074ea <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007516:	2300      	movs	r3, #0
}
 8007518:	4618      	mov	r0, r3
 800751a:	3714      	adds	r7, #20
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr
 8007524:	20000004 	.word	0x20000004
 8007528:	14f8b589 	.word	0x14f8b589

0800752c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	60b9      	str	r1, [r7, #8]
 8007536:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007538:	e042      	b.n	80075c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	695b      	ldr	r3, [r3, #20]
 8007540:	f003 0310 	and.w	r3, r3, #16
 8007544:	2b10      	cmp	r3, #16
 8007546:	d119      	bne.n	800757c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f06f 0210 	mvn.w	r2, #16
 8007550:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2200      	movs	r2, #0
 8007556:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2220      	movs	r2, #32
 800755c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2200      	movs	r2, #0
 8007564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2200      	movs	r2, #0
 8007574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007578:	2301      	movs	r3, #1
 800757a:	e029      	b.n	80075d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800757c:	f7fc fc42 	bl	8003e04 <HAL_GetTick>
 8007580:	4602      	mov	r2, r0
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	1ad3      	subs	r3, r2, r3
 8007586:	68ba      	ldr	r2, [r7, #8]
 8007588:	429a      	cmp	r2, r3
 800758a:	d302      	bcc.n	8007592 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d116      	bne.n	80075c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2200      	movs	r2, #0
 8007596:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2220      	movs	r2, #32
 800759c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ac:	f043 0220 	orr.w	r2, r3, #32
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2200      	movs	r2, #0
 80075b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80075bc:	2301      	movs	r3, #1
 80075be:	e007      	b.n	80075d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	695b      	ldr	r3, [r3, #20]
 80075c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ca:	2b40      	cmp	r3, #64	; 0x40
 80075cc:	d1b5      	bne.n	800753a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80075ce:	2300      	movs	r3, #0
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3710      	adds	r7, #16
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	695b      	ldr	r3, [r3, #20]
 80075e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075ee:	d11b      	bne.n	8007628 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80075f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2220      	movs	r2, #32
 8007604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007614:	f043 0204 	orr.w	r2, r3, #4
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	e000      	b.n	800762a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	370c      	adds	r7, #12
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr

08007636 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007636:	b480      	push	{r7}
 8007638:	b083      	sub	sp, #12
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007642:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007646:	d103      	bne.n	8007650 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2201      	movs	r2, #1
 800764c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800764e:	e007      	b.n	8007660 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007654:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007658:	d102      	bne.n	8007660 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2208      	movs	r2, #8
 800765e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007660:	bf00      	nop
 8007662:	370c      	adds	r7, #12
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b086      	sub	sp, #24
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d101      	bne.n	800767e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	e267      	b.n	8007b4e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 0301 	and.w	r3, r3, #1
 8007686:	2b00      	cmp	r3, #0
 8007688:	d075      	beq.n	8007776 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800768a:	4b88      	ldr	r3, [pc, #544]	; (80078ac <HAL_RCC_OscConfig+0x240>)
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	f003 030c 	and.w	r3, r3, #12
 8007692:	2b04      	cmp	r3, #4
 8007694:	d00c      	beq.n	80076b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007696:	4b85      	ldr	r3, [pc, #532]	; (80078ac <HAL_RCC_OscConfig+0x240>)
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800769e:	2b08      	cmp	r3, #8
 80076a0:	d112      	bne.n	80076c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80076a2:	4b82      	ldr	r3, [pc, #520]	; (80078ac <HAL_RCC_OscConfig+0x240>)
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076ae:	d10b      	bne.n	80076c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076b0:	4b7e      	ldr	r3, [pc, #504]	; (80078ac <HAL_RCC_OscConfig+0x240>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d05b      	beq.n	8007774 <HAL_RCC_OscConfig+0x108>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d157      	bne.n	8007774 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	e242      	b.n	8007b4e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076d0:	d106      	bne.n	80076e0 <HAL_RCC_OscConfig+0x74>
 80076d2:	4b76      	ldr	r3, [pc, #472]	; (80078ac <HAL_RCC_OscConfig+0x240>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a75      	ldr	r2, [pc, #468]	; (80078ac <HAL_RCC_OscConfig+0x240>)
 80076d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076dc:	6013      	str	r3, [r2, #0]
 80076de:	e01d      	b.n	800771c <HAL_RCC_OscConfig+0xb0>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80076e8:	d10c      	bne.n	8007704 <HAL_RCC_OscConfig+0x98>
 80076ea:	4b70      	ldr	r3, [pc, #448]	; (80078ac <HAL_RCC_OscConfig+0x240>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a6f      	ldr	r2, [pc, #444]	; (80078ac <HAL_RCC_OscConfig+0x240>)
 80076f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80076f4:	6013      	str	r3, [r2, #0]
 80076f6:	4b6d      	ldr	r3, [pc, #436]	; (80078ac <HAL_RCC_OscConfig+0x240>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a6c      	ldr	r2, [pc, #432]	; (80078ac <HAL_RCC_OscConfig+0x240>)
 80076fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007700:	6013      	str	r3, [r2, #0]
 8007702:	e00b      	b.n	800771c <HAL_RCC_OscConfig+0xb0>
 8007704:	4b69      	ldr	r3, [pc, #420]	; (80078ac <HAL_RCC_OscConfig+0x240>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a68      	ldr	r2, [pc, #416]	; (80078ac <HAL_RCC_OscConfig+0x240>)
 800770a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800770e:	6013      	str	r3, [r2, #0]
 8007710:	4b66      	ldr	r3, [pc, #408]	; (80078ac <HAL_RCC_OscConfig+0x240>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a65      	ldr	r2, [pc, #404]	; (80078ac <HAL_RCC_OscConfig+0x240>)
 8007716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800771a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d013      	beq.n	800774c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007724:	f7fc fb6e 	bl	8003e04 <HAL_GetTick>
 8007728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800772a:	e008      	b.n	800773e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800772c:	f7fc fb6a 	bl	8003e04 <HAL_GetTick>
 8007730:	4602      	mov	r2, r0
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	1ad3      	subs	r3, r2, r3
 8007736:	2b64      	cmp	r3, #100	; 0x64
 8007738:	d901      	bls.n	800773e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800773a:	2303      	movs	r3, #3
 800773c:	e207      	b.n	8007b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800773e:	4b5b      	ldr	r3, [pc, #364]	; (80078ac <HAL_RCC_OscConfig+0x240>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007746:	2b00      	cmp	r3, #0
 8007748:	d0f0      	beq.n	800772c <HAL_RCC_OscConfig+0xc0>
 800774a:	e014      	b.n	8007776 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800774c:	f7fc fb5a 	bl	8003e04 <HAL_GetTick>
 8007750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007752:	e008      	b.n	8007766 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007754:	f7fc fb56 	bl	8003e04 <HAL_GetTick>
 8007758:	4602      	mov	r2, r0
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	1ad3      	subs	r3, r2, r3
 800775e:	2b64      	cmp	r3, #100	; 0x64
 8007760:	d901      	bls.n	8007766 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007762:	2303      	movs	r3, #3
 8007764:	e1f3      	b.n	8007b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007766:	4b51      	ldr	r3, [pc, #324]	; (80078ac <HAL_RCC_OscConfig+0x240>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800776e:	2b00      	cmp	r3, #0
 8007770:	d1f0      	bne.n	8007754 <HAL_RCC_OscConfig+0xe8>
 8007772:	e000      	b.n	8007776 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007774:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f003 0302 	and.w	r3, r3, #2
 800777e:	2b00      	cmp	r3, #0
 8007780:	d063      	beq.n	800784a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007782:	4b4a      	ldr	r3, [pc, #296]	; (80078ac <HAL_RCC_OscConfig+0x240>)
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	f003 030c 	and.w	r3, r3, #12
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00b      	beq.n	80077a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800778e:	4b47      	ldr	r3, [pc, #284]	; (80078ac <HAL_RCC_OscConfig+0x240>)
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007796:	2b08      	cmp	r3, #8
 8007798:	d11c      	bne.n	80077d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800779a:	4b44      	ldr	r3, [pc, #272]	; (80078ac <HAL_RCC_OscConfig+0x240>)
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d116      	bne.n	80077d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077a6:	4b41      	ldr	r3, [pc, #260]	; (80078ac <HAL_RCC_OscConfig+0x240>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f003 0302 	and.w	r3, r3, #2
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d005      	beq.n	80077be <HAL_RCC_OscConfig+0x152>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	68db      	ldr	r3, [r3, #12]
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d001      	beq.n	80077be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	e1c7      	b.n	8007b4e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077be:	4b3b      	ldr	r3, [pc, #236]	; (80078ac <HAL_RCC_OscConfig+0x240>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	00db      	lsls	r3, r3, #3
 80077cc:	4937      	ldr	r1, [pc, #220]	; (80078ac <HAL_RCC_OscConfig+0x240>)
 80077ce:	4313      	orrs	r3, r2
 80077d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077d2:	e03a      	b.n	800784a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d020      	beq.n	800781e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80077dc:	4b34      	ldr	r3, [pc, #208]	; (80078b0 <HAL_RCC_OscConfig+0x244>)
 80077de:	2201      	movs	r2, #1
 80077e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077e2:	f7fc fb0f 	bl	8003e04 <HAL_GetTick>
 80077e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077e8:	e008      	b.n	80077fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80077ea:	f7fc fb0b 	bl	8003e04 <HAL_GetTick>
 80077ee:	4602      	mov	r2, r0
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	1ad3      	subs	r3, r2, r3
 80077f4:	2b02      	cmp	r3, #2
 80077f6:	d901      	bls.n	80077fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80077f8:	2303      	movs	r3, #3
 80077fa:	e1a8      	b.n	8007b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077fc:	4b2b      	ldr	r3, [pc, #172]	; (80078ac <HAL_RCC_OscConfig+0x240>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f003 0302 	and.w	r3, r3, #2
 8007804:	2b00      	cmp	r3, #0
 8007806:	d0f0      	beq.n	80077ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007808:	4b28      	ldr	r3, [pc, #160]	; (80078ac <HAL_RCC_OscConfig+0x240>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	691b      	ldr	r3, [r3, #16]
 8007814:	00db      	lsls	r3, r3, #3
 8007816:	4925      	ldr	r1, [pc, #148]	; (80078ac <HAL_RCC_OscConfig+0x240>)
 8007818:	4313      	orrs	r3, r2
 800781a:	600b      	str	r3, [r1, #0]
 800781c:	e015      	b.n	800784a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800781e:	4b24      	ldr	r3, [pc, #144]	; (80078b0 <HAL_RCC_OscConfig+0x244>)
 8007820:	2200      	movs	r2, #0
 8007822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007824:	f7fc faee 	bl	8003e04 <HAL_GetTick>
 8007828:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800782a:	e008      	b.n	800783e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800782c:	f7fc faea 	bl	8003e04 <HAL_GetTick>
 8007830:	4602      	mov	r2, r0
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	1ad3      	subs	r3, r2, r3
 8007836:	2b02      	cmp	r3, #2
 8007838:	d901      	bls.n	800783e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800783a:	2303      	movs	r3, #3
 800783c:	e187      	b.n	8007b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800783e:	4b1b      	ldr	r3, [pc, #108]	; (80078ac <HAL_RCC_OscConfig+0x240>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f003 0302 	and.w	r3, r3, #2
 8007846:	2b00      	cmp	r3, #0
 8007848:	d1f0      	bne.n	800782c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f003 0308 	and.w	r3, r3, #8
 8007852:	2b00      	cmp	r3, #0
 8007854:	d036      	beq.n	80078c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	695b      	ldr	r3, [r3, #20]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d016      	beq.n	800788c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800785e:	4b15      	ldr	r3, [pc, #84]	; (80078b4 <HAL_RCC_OscConfig+0x248>)
 8007860:	2201      	movs	r2, #1
 8007862:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007864:	f7fc face 	bl	8003e04 <HAL_GetTick>
 8007868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800786a:	e008      	b.n	800787e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800786c:	f7fc faca 	bl	8003e04 <HAL_GetTick>
 8007870:	4602      	mov	r2, r0
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	1ad3      	subs	r3, r2, r3
 8007876:	2b02      	cmp	r3, #2
 8007878:	d901      	bls.n	800787e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800787a:	2303      	movs	r3, #3
 800787c:	e167      	b.n	8007b4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800787e:	4b0b      	ldr	r3, [pc, #44]	; (80078ac <HAL_RCC_OscConfig+0x240>)
 8007880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007882:	f003 0302 	and.w	r3, r3, #2
 8007886:	2b00      	cmp	r3, #0
 8007888:	d0f0      	beq.n	800786c <HAL_RCC_OscConfig+0x200>
 800788a:	e01b      	b.n	80078c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800788c:	4b09      	ldr	r3, [pc, #36]	; (80078b4 <HAL_RCC_OscConfig+0x248>)
 800788e:	2200      	movs	r2, #0
 8007890:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007892:	f7fc fab7 	bl	8003e04 <HAL_GetTick>
 8007896:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007898:	e00e      	b.n	80078b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800789a:	f7fc fab3 	bl	8003e04 <HAL_GetTick>
 800789e:	4602      	mov	r2, r0
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	1ad3      	subs	r3, r2, r3
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	d907      	bls.n	80078b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80078a8:	2303      	movs	r3, #3
 80078aa:	e150      	b.n	8007b4e <HAL_RCC_OscConfig+0x4e2>
 80078ac:	40023800 	.word	0x40023800
 80078b0:	42470000 	.word	0x42470000
 80078b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80078b8:	4b88      	ldr	r3, [pc, #544]	; (8007adc <HAL_RCC_OscConfig+0x470>)
 80078ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078bc:	f003 0302 	and.w	r3, r3, #2
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d1ea      	bne.n	800789a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f003 0304 	and.w	r3, r3, #4
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	f000 8097 	beq.w	8007a00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80078d2:	2300      	movs	r3, #0
 80078d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80078d6:	4b81      	ldr	r3, [pc, #516]	; (8007adc <HAL_RCC_OscConfig+0x470>)
 80078d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d10f      	bne.n	8007902 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80078e2:	2300      	movs	r3, #0
 80078e4:	60bb      	str	r3, [r7, #8]
 80078e6:	4b7d      	ldr	r3, [pc, #500]	; (8007adc <HAL_RCC_OscConfig+0x470>)
 80078e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ea:	4a7c      	ldr	r2, [pc, #496]	; (8007adc <HAL_RCC_OscConfig+0x470>)
 80078ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078f0:	6413      	str	r3, [r2, #64]	; 0x40
 80078f2:	4b7a      	ldr	r3, [pc, #488]	; (8007adc <HAL_RCC_OscConfig+0x470>)
 80078f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078fa:	60bb      	str	r3, [r7, #8]
 80078fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80078fe:	2301      	movs	r3, #1
 8007900:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007902:	4b77      	ldr	r3, [pc, #476]	; (8007ae0 <HAL_RCC_OscConfig+0x474>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800790a:	2b00      	cmp	r3, #0
 800790c:	d118      	bne.n	8007940 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800790e:	4b74      	ldr	r3, [pc, #464]	; (8007ae0 <HAL_RCC_OscConfig+0x474>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a73      	ldr	r2, [pc, #460]	; (8007ae0 <HAL_RCC_OscConfig+0x474>)
 8007914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007918:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800791a:	f7fc fa73 	bl	8003e04 <HAL_GetTick>
 800791e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007920:	e008      	b.n	8007934 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007922:	f7fc fa6f 	bl	8003e04 <HAL_GetTick>
 8007926:	4602      	mov	r2, r0
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	1ad3      	subs	r3, r2, r3
 800792c:	2b02      	cmp	r3, #2
 800792e:	d901      	bls.n	8007934 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007930:	2303      	movs	r3, #3
 8007932:	e10c      	b.n	8007b4e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007934:	4b6a      	ldr	r3, [pc, #424]	; (8007ae0 <HAL_RCC_OscConfig+0x474>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800793c:	2b00      	cmp	r3, #0
 800793e:	d0f0      	beq.n	8007922 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	2b01      	cmp	r3, #1
 8007946:	d106      	bne.n	8007956 <HAL_RCC_OscConfig+0x2ea>
 8007948:	4b64      	ldr	r3, [pc, #400]	; (8007adc <HAL_RCC_OscConfig+0x470>)
 800794a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800794c:	4a63      	ldr	r2, [pc, #396]	; (8007adc <HAL_RCC_OscConfig+0x470>)
 800794e:	f043 0301 	orr.w	r3, r3, #1
 8007952:	6713      	str	r3, [r2, #112]	; 0x70
 8007954:	e01c      	b.n	8007990 <HAL_RCC_OscConfig+0x324>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	2b05      	cmp	r3, #5
 800795c:	d10c      	bne.n	8007978 <HAL_RCC_OscConfig+0x30c>
 800795e:	4b5f      	ldr	r3, [pc, #380]	; (8007adc <HAL_RCC_OscConfig+0x470>)
 8007960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007962:	4a5e      	ldr	r2, [pc, #376]	; (8007adc <HAL_RCC_OscConfig+0x470>)
 8007964:	f043 0304 	orr.w	r3, r3, #4
 8007968:	6713      	str	r3, [r2, #112]	; 0x70
 800796a:	4b5c      	ldr	r3, [pc, #368]	; (8007adc <HAL_RCC_OscConfig+0x470>)
 800796c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800796e:	4a5b      	ldr	r2, [pc, #364]	; (8007adc <HAL_RCC_OscConfig+0x470>)
 8007970:	f043 0301 	orr.w	r3, r3, #1
 8007974:	6713      	str	r3, [r2, #112]	; 0x70
 8007976:	e00b      	b.n	8007990 <HAL_RCC_OscConfig+0x324>
 8007978:	4b58      	ldr	r3, [pc, #352]	; (8007adc <HAL_RCC_OscConfig+0x470>)
 800797a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800797c:	4a57      	ldr	r2, [pc, #348]	; (8007adc <HAL_RCC_OscConfig+0x470>)
 800797e:	f023 0301 	bic.w	r3, r3, #1
 8007982:	6713      	str	r3, [r2, #112]	; 0x70
 8007984:	4b55      	ldr	r3, [pc, #340]	; (8007adc <HAL_RCC_OscConfig+0x470>)
 8007986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007988:	4a54      	ldr	r2, [pc, #336]	; (8007adc <HAL_RCC_OscConfig+0x470>)
 800798a:	f023 0304 	bic.w	r3, r3, #4
 800798e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d015      	beq.n	80079c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007998:	f7fc fa34 	bl	8003e04 <HAL_GetTick>
 800799c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800799e:	e00a      	b.n	80079b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079a0:	f7fc fa30 	bl	8003e04 <HAL_GetTick>
 80079a4:	4602      	mov	r2, r0
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	1ad3      	subs	r3, r2, r3
 80079aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d901      	bls.n	80079b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80079b2:	2303      	movs	r3, #3
 80079b4:	e0cb      	b.n	8007b4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079b6:	4b49      	ldr	r3, [pc, #292]	; (8007adc <HAL_RCC_OscConfig+0x470>)
 80079b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ba:	f003 0302 	and.w	r3, r3, #2
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d0ee      	beq.n	80079a0 <HAL_RCC_OscConfig+0x334>
 80079c2:	e014      	b.n	80079ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079c4:	f7fc fa1e 	bl	8003e04 <HAL_GetTick>
 80079c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079ca:	e00a      	b.n	80079e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079cc:	f7fc fa1a 	bl	8003e04 <HAL_GetTick>
 80079d0:	4602      	mov	r2, r0
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	1ad3      	subs	r3, r2, r3
 80079d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80079da:	4293      	cmp	r3, r2
 80079dc:	d901      	bls.n	80079e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80079de:	2303      	movs	r3, #3
 80079e0:	e0b5      	b.n	8007b4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079e2:	4b3e      	ldr	r3, [pc, #248]	; (8007adc <HAL_RCC_OscConfig+0x470>)
 80079e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079e6:	f003 0302 	and.w	r3, r3, #2
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d1ee      	bne.n	80079cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80079ee:	7dfb      	ldrb	r3, [r7, #23]
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d105      	bne.n	8007a00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079f4:	4b39      	ldr	r3, [pc, #228]	; (8007adc <HAL_RCC_OscConfig+0x470>)
 80079f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f8:	4a38      	ldr	r2, [pc, #224]	; (8007adc <HAL_RCC_OscConfig+0x470>)
 80079fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	699b      	ldr	r3, [r3, #24]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	f000 80a1 	beq.w	8007b4c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007a0a:	4b34      	ldr	r3, [pc, #208]	; (8007adc <HAL_RCC_OscConfig+0x470>)
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	f003 030c 	and.w	r3, r3, #12
 8007a12:	2b08      	cmp	r3, #8
 8007a14:	d05c      	beq.n	8007ad0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	699b      	ldr	r3, [r3, #24]
 8007a1a:	2b02      	cmp	r3, #2
 8007a1c:	d141      	bne.n	8007aa2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a1e:	4b31      	ldr	r3, [pc, #196]	; (8007ae4 <HAL_RCC_OscConfig+0x478>)
 8007a20:	2200      	movs	r2, #0
 8007a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a24:	f7fc f9ee 	bl	8003e04 <HAL_GetTick>
 8007a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a2a:	e008      	b.n	8007a3e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a2c:	f7fc f9ea 	bl	8003e04 <HAL_GetTick>
 8007a30:	4602      	mov	r2, r0
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	1ad3      	subs	r3, r2, r3
 8007a36:	2b02      	cmp	r3, #2
 8007a38:	d901      	bls.n	8007a3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007a3a:	2303      	movs	r3, #3
 8007a3c:	e087      	b.n	8007b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a3e:	4b27      	ldr	r3, [pc, #156]	; (8007adc <HAL_RCC_OscConfig+0x470>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d1f0      	bne.n	8007a2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	69da      	ldr	r2, [r3, #28]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6a1b      	ldr	r3, [r3, #32]
 8007a52:	431a      	orrs	r2, r3
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a58:	019b      	lsls	r3, r3, #6
 8007a5a:	431a      	orrs	r2, r3
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a60:	085b      	lsrs	r3, r3, #1
 8007a62:	3b01      	subs	r3, #1
 8007a64:	041b      	lsls	r3, r3, #16
 8007a66:	431a      	orrs	r2, r3
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a6c:	061b      	lsls	r3, r3, #24
 8007a6e:	491b      	ldr	r1, [pc, #108]	; (8007adc <HAL_RCC_OscConfig+0x470>)
 8007a70:	4313      	orrs	r3, r2
 8007a72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a74:	4b1b      	ldr	r3, [pc, #108]	; (8007ae4 <HAL_RCC_OscConfig+0x478>)
 8007a76:	2201      	movs	r2, #1
 8007a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a7a:	f7fc f9c3 	bl	8003e04 <HAL_GetTick>
 8007a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a80:	e008      	b.n	8007a94 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a82:	f7fc f9bf 	bl	8003e04 <HAL_GetTick>
 8007a86:	4602      	mov	r2, r0
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	1ad3      	subs	r3, r2, r3
 8007a8c:	2b02      	cmp	r3, #2
 8007a8e:	d901      	bls.n	8007a94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007a90:	2303      	movs	r3, #3
 8007a92:	e05c      	b.n	8007b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a94:	4b11      	ldr	r3, [pc, #68]	; (8007adc <HAL_RCC_OscConfig+0x470>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d0f0      	beq.n	8007a82 <HAL_RCC_OscConfig+0x416>
 8007aa0:	e054      	b.n	8007b4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007aa2:	4b10      	ldr	r3, [pc, #64]	; (8007ae4 <HAL_RCC_OscConfig+0x478>)
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007aa8:	f7fc f9ac 	bl	8003e04 <HAL_GetTick>
 8007aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007aae:	e008      	b.n	8007ac2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ab0:	f7fc f9a8 	bl	8003e04 <HAL_GetTick>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	1ad3      	subs	r3, r2, r3
 8007aba:	2b02      	cmp	r3, #2
 8007abc:	d901      	bls.n	8007ac2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007abe:	2303      	movs	r3, #3
 8007ac0:	e045      	b.n	8007b4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ac2:	4b06      	ldr	r3, [pc, #24]	; (8007adc <HAL_RCC_OscConfig+0x470>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d1f0      	bne.n	8007ab0 <HAL_RCC_OscConfig+0x444>
 8007ace:	e03d      	b.n	8007b4c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	699b      	ldr	r3, [r3, #24]
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d107      	bne.n	8007ae8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e038      	b.n	8007b4e <HAL_RCC_OscConfig+0x4e2>
 8007adc:	40023800 	.word	0x40023800
 8007ae0:	40007000 	.word	0x40007000
 8007ae4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007ae8:	4b1b      	ldr	r3, [pc, #108]	; (8007b58 <HAL_RCC_OscConfig+0x4ec>)
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	699b      	ldr	r3, [r3, #24]
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d028      	beq.n	8007b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d121      	bne.n	8007b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d11a      	bne.n	8007b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b12:	68fa      	ldr	r2, [r7, #12]
 8007b14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007b18:	4013      	ands	r3, r2
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007b1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d111      	bne.n	8007b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b2e:	085b      	lsrs	r3, r3, #1
 8007b30:	3b01      	subs	r3, #1
 8007b32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d107      	bne.n	8007b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d001      	beq.n	8007b4c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	e000      	b.n	8007b4e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007b4c:	2300      	movs	r3, #0
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3718      	adds	r7, #24
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	40023800 	.word	0x40023800

08007b5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d101      	bne.n	8007b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e0cc      	b.n	8007d0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007b70:	4b68      	ldr	r3, [pc, #416]	; (8007d14 <HAL_RCC_ClockConfig+0x1b8>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f003 0307 	and.w	r3, r3, #7
 8007b78:	683a      	ldr	r2, [r7, #0]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d90c      	bls.n	8007b98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b7e:	4b65      	ldr	r3, [pc, #404]	; (8007d14 <HAL_RCC_ClockConfig+0x1b8>)
 8007b80:	683a      	ldr	r2, [r7, #0]
 8007b82:	b2d2      	uxtb	r2, r2
 8007b84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b86:	4b63      	ldr	r3, [pc, #396]	; (8007d14 <HAL_RCC_ClockConfig+0x1b8>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f003 0307 	and.w	r3, r3, #7
 8007b8e:	683a      	ldr	r2, [r7, #0]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d001      	beq.n	8007b98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007b94:	2301      	movs	r3, #1
 8007b96:	e0b8      	b.n	8007d0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f003 0302 	and.w	r3, r3, #2
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d020      	beq.n	8007be6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f003 0304 	and.w	r3, r3, #4
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d005      	beq.n	8007bbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007bb0:	4b59      	ldr	r3, [pc, #356]	; (8007d18 <HAL_RCC_ClockConfig+0x1bc>)
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	4a58      	ldr	r2, [pc, #352]	; (8007d18 <HAL_RCC_ClockConfig+0x1bc>)
 8007bb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007bba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f003 0308 	and.w	r3, r3, #8
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d005      	beq.n	8007bd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007bc8:	4b53      	ldr	r3, [pc, #332]	; (8007d18 <HAL_RCC_ClockConfig+0x1bc>)
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	4a52      	ldr	r2, [pc, #328]	; (8007d18 <HAL_RCC_ClockConfig+0x1bc>)
 8007bce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007bd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007bd4:	4b50      	ldr	r3, [pc, #320]	; (8007d18 <HAL_RCC_ClockConfig+0x1bc>)
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	494d      	ldr	r1, [pc, #308]	; (8007d18 <HAL_RCC_ClockConfig+0x1bc>)
 8007be2:	4313      	orrs	r3, r2
 8007be4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f003 0301 	and.w	r3, r3, #1
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d044      	beq.n	8007c7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d107      	bne.n	8007c0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bfa:	4b47      	ldr	r3, [pc, #284]	; (8007d18 <HAL_RCC_ClockConfig+0x1bc>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d119      	bne.n	8007c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e07f      	b.n	8007d0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	2b02      	cmp	r3, #2
 8007c10:	d003      	beq.n	8007c1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c16:	2b03      	cmp	r3, #3
 8007c18:	d107      	bne.n	8007c2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c1a:	4b3f      	ldr	r3, [pc, #252]	; (8007d18 <HAL_RCC_ClockConfig+0x1bc>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d109      	bne.n	8007c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	e06f      	b.n	8007d0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c2a:	4b3b      	ldr	r3, [pc, #236]	; (8007d18 <HAL_RCC_ClockConfig+0x1bc>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f003 0302 	and.w	r3, r3, #2
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d101      	bne.n	8007c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	e067      	b.n	8007d0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007c3a:	4b37      	ldr	r3, [pc, #220]	; (8007d18 <HAL_RCC_ClockConfig+0x1bc>)
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	f023 0203 	bic.w	r2, r3, #3
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	4934      	ldr	r1, [pc, #208]	; (8007d18 <HAL_RCC_ClockConfig+0x1bc>)
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007c4c:	f7fc f8da 	bl	8003e04 <HAL_GetTick>
 8007c50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c52:	e00a      	b.n	8007c6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c54:	f7fc f8d6 	bl	8003e04 <HAL_GetTick>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	1ad3      	subs	r3, r2, r3
 8007c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d901      	bls.n	8007c6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007c66:	2303      	movs	r3, #3
 8007c68:	e04f      	b.n	8007d0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c6a:	4b2b      	ldr	r3, [pc, #172]	; (8007d18 <HAL_RCC_ClockConfig+0x1bc>)
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	f003 020c 	and.w	r2, r3, #12
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d1eb      	bne.n	8007c54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007c7c:	4b25      	ldr	r3, [pc, #148]	; (8007d14 <HAL_RCC_ClockConfig+0x1b8>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f003 0307 	and.w	r3, r3, #7
 8007c84:	683a      	ldr	r2, [r7, #0]
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d20c      	bcs.n	8007ca4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c8a:	4b22      	ldr	r3, [pc, #136]	; (8007d14 <HAL_RCC_ClockConfig+0x1b8>)
 8007c8c:	683a      	ldr	r2, [r7, #0]
 8007c8e:	b2d2      	uxtb	r2, r2
 8007c90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c92:	4b20      	ldr	r3, [pc, #128]	; (8007d14 <HAL_RCC_ClockConfig+0x1b8>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f003 0307 	and.w	r3, r3, #7
 8007c9a:	683a      	ldr	r2, [r7, #0]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d001      	beq.n	8007ca4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	e032      	b.n	8007d0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f003 0304 	and.w	r3, r3, #4
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d008      	beq.n	8007cc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007cb0:	4b19      	ldr	r3, [pc, #100]	; (8007d18 <HAL_RCC_ClockConfig+0x1bc>)
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	68db      	ldr	r3, [r3, #12]
 8007cbc:	4916      	ldr	r1, [pc, #88]	; (8007d18 <HAL_RCC_ClockConfig+0x1bc>)
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f003 0308 	and.w	r3, r3, #8
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d009      	beq.n	8007ce2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007cce:	4b12      	ldr	r3, [pc, #72]	; (8007d18 <HAL_RCC_ClockConfig+0x1bc>)
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	691b      	ldr	r3, [r3, #16]
 8007cda:	00db      	lsls	r3, r3, #3
 8007cdc:	490e      	ldr	r1, [pc, #56]	; (8007d18 <HAL_RCC_ClockConfig+0x1bc>)
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007ce2:	f000 f821 	bl	8007d28 <HAL_RCC_GetSysClockFreq>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	4b0b      	ldr	r3, [pc, #44]	; (8007d18 <HAL_RCC_ClockConfig+0x1bc>)
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	091b      	lsrs	r3, r3, #4
 8007cee:	f003 030f 	and.w	r3, r3, #15
 8007cf2:	490a      	ldr	r1, [pc, #40]	; (8007d1c <HAL_RCC_ClockConfig+0x1c0>)
 8007cf4:	5ccb      	ldrb	r3, [r1, r3]
 8007cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8007cfa:	4a09      	ldr	r2, [pc, #36]	; (8007d20 <HAL_RCC_ClockConfig+0x1c4>)
 8007cfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007cfe:	4b09      	ldr	r3, [pc, #36]	; (8007d24 <HAL_RCC_ClockConfig+0x1c8>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7fb fc0c 	bl	8003520 <HAL_InitTick>

  return HAL_OK;
 8007d08:	2300      	movs	r3, #0
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	40023c00 	.word	0x40023c00
 8007d18:	40023800 	.word	0x40023800
 8007d1c:	08017504 	.word	0x08017504
 8007d20:	20000004 	.word	0x20000004
 8007d24:	2000001c 	.word	0x2000001c

08007d28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d2c:	b094      	sub	sp, #80	; 0x50
 8007d2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007d30:	2300      	movs	r3, #0
 8007d32:	647b      	str	r3, [r7, #68]	; 0x44
 8007d34:	2300      	movs	r3, #0
 8007d36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d38:	2300      	movs	r3, #0
 8007d3a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007d40:	4b79      	ldr	r3, [pc, #484]	; (8007f28 <HAL_RCC_GetSysClockFreq+0x200>)
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	f003 030c 	and.w	r3, r3, #12
 8007d48:	2b08      	cmp	r3, #8
 8007d4a:	d00d      	beq.n	8007d68 <HAL_RCC_GetSysClockFreq+0x40>
 8007d4c:	2b08      	cmp	r3, #8
 8007d4e:	f200 80e1 	bhi.w	8007f14 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d002      	beq.n	8007d5c <HAL_RCC_GetSysClockFreq+0x34>
 8007d56:	2b04      	cmp	r3, #4
 8007d58:	d003      	beq.n	8007d62 <HAL_RCC_GetSysClockFreq+0x3a>
 8007d5a:	e0db      	b.n	8007f14 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007d5c:	4b73      	ldr	r3, [pc, #460]	; (8007f2c <HAL_RCC_GetSysClockFreq+0x204>)
 8007d5e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007d60:	e0db      	b.n	8007f1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007d62:	4b73      	ldr	r3, [pc, #460]	; (8007f30 <HAL_RCC_GetSysClockFreq+0x208>)
 8007d64:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007d66:	e0d8      	b.n	8007f1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007d68:	4b6f      	ldr	r3, [pc, #444]	; (8007f28 <HAL_RCC_GetSysClockFreq+0x200>)
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d70:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007d72:	4b6d      	ldr	r3, [pc, #436]	; (8007f28 <HAL_RCC_GetSysClockFreq+0x200>)
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d063      	beq.n	8007e46 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d7e:	4b6a      	ldr	r3, [pc, #424]	; (8007f28 <HAL_RCC_GetSysClockFreq+0x200>)
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	099b      	lsrs	r3, r3, #6
 8007d84:	2200      	movs	r2, #0
 8007d86:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d88:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d90:	633b      	str	r3, [r7, #48]	; 0x30
 8007d92:	2300      	movs	r3, #0
 8007d94:	637b      	str	r3, [r7, #52]	; 0x34
 8007d96:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007d9a:	4622      	mov	r2, r4
 8007d9c:	462b      	mov	r3, r5
 8007d9e:	f04f 0000 	mov.w	r0, #0
 8007da2:	f04f 0100 	mov.w	r1, #0
 8007da6:	0159      	lsls	r1, r3, #5
 8007da8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007dac:	0150      	lsls	r0, r2, #5
 8007dae:	4602      	mov	r2, r0
 8007db0:	460b      	mov	r3, r1
 8007db2:	4621      	mov	r1, r4
 8007db4:	1a51      	subs	r1, r2, r1
 8007db6:	6139      	str	r1, [r7, #16]
 8007db8:	4629      	mov	r1, r5
 8007dba:	eb63 0301 	sbc.w	r3, r3, r1
 8007dbe:	617b      	str	r3, [r7, #20]
 8007dc0:	f04f 0200 	mov.w	r2, #0
 8007dc4:	f04f 0300 	mov.w	r3, #0
 8007dc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007dcc:	4659      	mov	r1, fp
 8007dce:	018b      	lsls	r3, r1, #6
 8007dd0:	4651      	mov	r1, sl
 8007dd2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007dd6:	4651      	mov	r1, sl
 8007dd8:	018a      	lsls	r2, r1, #6
 8007dda:	4651      	mov	r1, sl
 8007ddc:	ebb2 0801 	subs.w	r8, r2, r1
 8007de0:	4659      	mov	r1, fp
 8007de2:	eb63 0901 	sbc.w	r9, r3, r1
 8007de6:	f04f 0200 	mov.w	r2, #0
 8007dea:	f04f 0300 	mov.w	r3, #0
 8007dee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007df2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007df6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007dfa:	4690      	mov	r8, r2
 8007dfc:	4699      	mov	r9, r3
 8007dfe:	4623      	mov	r3, r4
 8007e00:	eb18 0303 	adds.w	r3, r8, r3
 8007e04:	60bb      	str	r3, [r7, #8]
 8007e06:	462b      	mov	r3, r5
 8007e08:	eb49 0303 	adc.w	r3, r9, r3
 8007e0c:	60fb      	str	r3, [r7, #12]
 8007e0e:	f04f 0200 	mov.w	r2, #0
 8007e12:	f04f 0300 	mov.w	r3, #0
 8007e16:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007e1a:	4629      	mov	r1, r5
 8007e1c:	024b      	lsls	r3, r1, #9
 8007e1e:	4621      	mov	r1, r4
 8007e20:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007e24:	4621      	mov	r1, r4
 8007e26:	024a      	lsls	r2, r1, #9
 8007e28:	4610      	mov	r0, r2
 8007e2a:	4619      	mov	r1, r3
 8007e2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e2e:	2200      	movs	r2, #0
 8007e30:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e38:	f7f8 ff30 	bl	8000c9c <__aeabi_uldivmod>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	460b      	mov	r3, r1
 8007e40:	4613      	mov	r3, r2
 8007e42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e44:	e058      	b.n	8007ef8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e46:	4b38      	ldr	r3, [pc, #224]	; (8007f28 <HAL_RCC_GetSysClockFreq+0x200>)
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	099b      	lsrs	r3, r3, #6
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	4618      	mov	r0, r3
 8007e50:	4611      	mov	r1, r2
 8007e52:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007e56:	623b      	str	r3, [r7, #32]
 8007e58:	2300      	movs	r3, #0
 8007e5a:	627b      	str	r3, [r7, #36]	; 0x24
 8007e5c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007e60:	4642      	mov	r2, r8
 8007e62:	464b      	mov	r3, r9
 8007e64:	f04f 0000 	mov.w	r0, #0
 8007e68:	f04f 0100 	mov.w	r1, #0
 8007e6c:	0159      	lsls	r1, r3, #5
 8007e6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007e72:	0150      	lsls	r0, r2, #5
 8007e74:	4602      	mov	r2, r0
 8007e76:	460b      	mov	r3, r1
 8007e78:	4641      	mov	r1, r8
 8007e7a:	ebb2 0a01 	subs.w	sl, r2, r1
 8007e7e:	4649      	mov	r1, r9
 8007e80:	eb63 0b01 	sbc.w	fp, r3, r1
 8007e84:	f04f 0200 	mov.w	r2, #0
 8007e88:	f04f 0300 	mov.w	r3, #0
 8007e8c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007e90:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007e94:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007e98:	ebb2 040a 	subs.w	r4, r2, sl
 8007e9c:	eb63 050b 	sbc.w	r5, r3, fp
 8007ea0:	f04f 0200 	mov.w	r2, #0
 8007ea4:	f04f 0300 	mov.w	r3, #0
 8007ea8:	00eb      	lsls	r3, r5, #3
 8007eaa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007eae:	00e2      	lsls	r2, r4, #3
 8007eb0:	4614      	mov	r4, r2
 8007eb2:	461d      	mov	r5, r3
 8007eb4:	4643      	mov	r3, r8
 8007eb6:	18e3      	adds	r3, r4, r3
 8007eb8:	603b      	str	r3, [r7, #0]
 8007eba:	464b      	mov	r3, r9
 8007ebc:	eb45 0303 	adc.w	r3, r5, r3
 8007ec0:	607b      	str	r3, [r7, #4]
 8007ec2:	f04f 0200 	mov.w	r2, #0
 8007ec6:	f04f 0300 	mov.w	r3, #0
 8007eca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007ece:	4629      	mov	r1, r5
 8007ed0:	028b      	lsls	r3, r1, #10
 8007ed2:	4621      	mov	r1, r4
 8007ed4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007ed8:	4621      	mov	r1, r4
 8007eda:	028a      	lsls	r2, r1, #10
 8007edc:	4610      	mov	r0, r2
 8007ede:	4619      	mov	r1, r3
 8007ee0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	61bb      	str	r3, [r7, #24]
 8007ee6:	61fa      	str	r2, [r7, #28]
 8007ee8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007eec:	f7f8 fed6 	bl	8000c9c <__aeabi_uldivmod>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	4613      	mov	r3, r2
 8007ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007ef8:	4b0b      	ldr	r3, [pc, #44]	; (8007f28 <HAL_RCC_GetSysClockFreq+0x200>)
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	0c1b      	lsrs	r3, r3, #16
 8007efe:	f003 0303 	and.w	r3, r3, #3
 8007f02:	3301      	adds	r3, #1
 8007f04:	005b      	lsls	r3, r3, #1
 8007f06:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007f08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007f12:	e002      	b.n	8007f1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007f14:	4b05      	ldr	r3, [pc, #20]	; (8007f2c <HAL_RCC_GetSysClockFreq+0x204>)
 8007f16:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007f18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007f1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3750      	adds	r7, #80	; 0x50
 8007f20:	46bd      	mov	sp, r7
 8007f22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f26:	bf00      	nop
 8007f28:	40023800 	.word	0x40023800
 8007f2c:	00f42400 	.word	0x00f42400
 8007f30:	007a1200 	.word	0x007a1200

08007f34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f34:	b480      	push	{r7}
 8007f36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007f38:	4b03      	ldr	r3, [pc, #12]	; (8007f48 <HAL_RCC_GetHCLKFreq+0x14>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr
 8007f46:	bf00      	nop
 8007f48:	20000004 	.word	0x20000004

08007f4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007f50:	f7ff fff0 	bl	8007f34 <HAL_RCC_GetHCLKFreq>
 8007f54:	4602      	mov	r2, r0
 8007f56:	4b05      	ldr	r3, [pc, #20]	; (8007f6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	0a9b      	lsrs	r3, r3, #10
 8007f5c:	f003 0307 	and.w	r3, r3, #7
 8007f60:	4903      	ldr	r1, [pc, #12]	; (8007f70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f62:	5ccb      	ldrb	r3, [r1, r3]
 8007f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	bd80      	pop	{r7, pc}
 8007f6c:	40023800 	.word	0x40023800
 8007f70:	08017514 	.word	0x08017514

08007f74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007f78:	f7ff ffdc 	bl	8007f34 <HAL_RCC_GetHCLKFreq>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	4b05      	ldr	r3, [pc, #20]	; (8007f94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	0b5b      	lsrs	r3, r3, #13
 8007f84:	f003 0307 	and.w	r3, r3, #7
 8007f88:	4903      	ldr	r1, [pc, #12]	; (8007f98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f8a:	5ccb      	ldrb	r3, [r1, r3]
 8007f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	40023800 	.word	0x40023800
 8007f98:	08017514 	.word	0x08017514

08007f9c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	220f      	movs	r2, #15
 8007faa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007fac:	4b12      	ldr	r3, [pc, #72]	; (8007ff8 <HAL_RCC_GetClockConfig+0x5c>)
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	f003 0203 	and.w	r2, r3, #3
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007fb8:	4b0f      	ldr	r3, [pc, #60]	; (8007ff8 <HAL_RCC_GetClockConfig+0x5c>)
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007fc4:	4b0c      	ldr	r3, [pc, #48]	; (8007ff8 <HAL_RCC_GetClockConfig+0x5c>)
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007fd0:	4b09      	ldr	r3, [pc, #36]	; (8007ff8 <HAL_RCC_GetClockConfig+0x5c>)
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	08db      	lsrs	r3, r3, #3
 8007fd6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007fde:	4b07      	ldr	r3, [pc, #28]	; (8007ffc <HAL_RCC_GetClockConfig+0x60>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f003 0207 	and.w	r2, r3, #7
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	601a      	str	r2, [r3, #0]
}
 8007fea:	bf00      	nop
 8007fec:	370c      	adds	r7, #12
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr
 8007ff6:	bf00      	nop
 8007ff8:	40023800 	.word	0x40023800
 8007ffc:	40023c00 	.word	0x40023c00

08008000 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b082      	sub	sp, #8
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d101      	bne.n	8008012 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	e041      	b.n	8008096 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008018:	b2db      	uxtb	r3, r3
 800801a:	2b00      	cmp	r3, #0
 800801c:	d106      	bne.n	800802c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 f839 	bl	800809e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2202      	movs	r2, #2
 8008030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	3304      	adds	r3, #4
 800803c:	4619      	mov	r1, r3
 800803e:	4610      	mov	r0, r2
 8008040:	f000 fc7a 	bl	8008938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2201      	movs	r2, #1
 8008048:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2201      	movs	r2, #1
 8008050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2201      	movs	r2, #1
 8008070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2201      	movs	r2, #1
 8008078:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2201      	movs	r2, #1
 8008080:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2201      	movs	r2, #1
 8008088:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008094:	2300      	movs	r3, #0
}
 8008096:	4618      	mov	r0, r3
 8008098:	3708      	adds	r7, #8
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}

0800809e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800809e:	b480      	push	{r7}
 80080a0:	b083      	sub	sp, #12
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80080a6:	bf00      	nop
 80080a8:	370c      	adds	r7, #12
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr
	...

080080b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b085      	sub	sp, #20
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d001      	beq.n	80080cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80080c8:	2301      	movs	r3, #1
 80080ca:	e044      	b.n	8008156 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2202      	movs	r2, #2
 80080d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	68da      	ldr	r2, [r3, #12]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f042 0201 	orr.w	r2, r2, #1
 80080e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a1e      	ldr	r2, [pc, #120]	; (8008164 <HAL_TIM_Base_Start_IT+0xb0>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d018      	beq.n	8008120 <HAL_TIM_Base_Start_IT+0x6c>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080f6:	d013      	beq.n	8008120 <HAL_TIM_Base_Start_IT+0x6c>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a1a      	ldr	r2, [pc, #104]	; (8008168 <HAL_TIM_Base_Start_IT+0xb4>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d00e      	beq.n	8008120 <HAL_TIM_Base_Start_IT+0x6c>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a19      	ldr	r2, [pc, #100]	; (800816c <HAL_TIM_Base_Start_IT+0xb8>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d009      	beq.n	8008120 <HAL_TIM_Base_Start_IT+0x6c>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a17      	ldr	r2, [pc, #92]	; (8008170 <HAL_TIM_Base_Start_IT+0xbc>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d004      	beq.n	8008120 <HAL_TIM_Base_Start_IT+0x6c>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a16      	ldr	r2, [pc, #88]	; (8008174 <HAL_TIM_Base_Start_IT+0xc0>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d111      	bne.n	8008144 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	f003 0307 	and.w	r3, r3, #7
 800812a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2b06      	cmp	r3, #6
 8008130:	d010      	beq.n	8008154 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f042 0201 	orr.w	r2, r2, #1
 8008140:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008142:	e007      	b.n	8008154 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f042 0201 	orr.w	r2, r2, #1
 8008152:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008154:	2300      	movs	r3, #0
}
 8008156:	4618      	mov	r0, r3
 8008158:	3714      	adds	r7, #20
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr
 8008162:	bf00      	nop
 8008164:	40010000 	.word	0x40010000
 8008168:	40000400 	.word	0x40000400
 800816c:	40000800 	.word	0x40000800
 8008170:	40000c00 	.word	0x40000c00
 8008174:	40014000 	.word	0x40014000

08008178 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b084      	sub	sp, #16
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d109      	bne.n	800819c <HAL_TIM_PWM_Start+0x24>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800818e:	b2db      	uxtb	r3, r3
 8008190:	2b01      	cmp	r3, #1
 8008192:	bf14      	ite	ne
 8008194:	2301      	movne	r3, #1
 8008196:	2300      	moveq	r3, #0
 8008198:	b2db      	uxtb	r3, r3
 800819a:	e022      	b.n	80081e2 <HAL_TIM_PWM_Start+0x6a>
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	2b04      	cmp	r3, #4
 80081a0:	d109      	bne.n	80081b6 <HAL_TIM_PWM_Start+0x3e>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	bf14      	ite	ne
 80081ae:	2301      	movne	r3, #1
 80081b0:	2300      	moveq	r3, #0
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	e015      	b.n	80081e2 <HAL_TIM_PWM_Start+0x6a>
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	2b08      	cmp	r3, #8
 80081ba:	d109      	bne.n	80081d0 <HAL_TIM_PWM_Start+0x58>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	bf14      	ite	ne
 80081c8:	2301      	movne	r3, #1
 80081ca:	2300      	moveq	r3, #0
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	e008      	b.n	80081e2 <HAL_TIM_PWM_Start+0x6a>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081d6:	b2db      	uxtb	r3, r3
 80081d8:	2b01      	cmp	r3, #1
 80081da:	bf14      	ite	ne
 80081dc:	2301      	movne	r3, #1
 80081de:	2300      	moveq	r3, #0
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d001      	beq.n	80081ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80081e6:	2301      	movs	r3, #1
 80081e8:	e068      	b.n	80082bc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d104      	bne.n	80081fa <HAL_TIM_PWM_Start+0x82>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2202      	movs	r2, #2
 80081f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081f8:	e013      	b.n	8008222 <HAL_TIM_PWM_Start+0xaa>
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	2b04      	cmp	r3, #4
 80081fe:	d104      	bne.n	800820a <HAL_TIM_PWM_Start+0x92>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2202      	movs	r2, #2
 8008204:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008208:	e00b      	b.n	8008222 <HAL_TIM_PWM_Start+0xaa>
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	2b08      	cmp	r3, #8
 800820e:	d104      	bne.n	800821a <HAL_TIM_PWM_Start+0xa2>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2202      	movs	r2, #2
 8008214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008218:	e003      	b.n	8008222 <HAL_TIM_PWM_Start+0xaa>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2202      	movs	r2, #2
 800821e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	2201      	movs	r2, #1
 8008228:	6839      	ldr	r1, [r7, #0]
 800822a:	4618      	mov	r0, r3
 800822c:	f000 fd90 	bl	8008d50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a23      	ldr	r2, [pc, #140]	; (80082c4 <HAL_TIM_PWM_Start+0x14c>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d107      	bne.n	800824a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008248:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a1d      	ldr	r2, [pc, #116]	; (80082c4 <HAL_TIM_PWM_Start+0x14c>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d018      	beq.n	8008286 <HAL_TIM_PWM_Start+0x10e>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800825c:	d013      	beq.n	8008286 <HAL_TIM_PWM_Start+0x10e>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a19      	ldr	r2, [pc, #100]	; (80082c8 <HAL_TIM_PWM_Start+0x150>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d00e      	beq.n	8008286 <HAL_TIM_PWM_Start+0x10e>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a17      	ldr	r2, [pc, #92]	; (80082cc <HAL_TIM_PWM_Start+0x154>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d009      	beq.n	8008286 <HAL_TIM_PWM_Start+0x10e>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a16      	ldr	r2, [pc, #88]	; (80082d0 <HAL_TIM_PWM_Start+0x158>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d004      	beq.n	8008286 <HAL_TIM_PWM_Start+0x10e>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a14      	ldr	r2, [pc, #80]	; (80082d4 <HAL_TIM_PWM_Start+0x15c>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d111      	bne.n	80082aa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	f003 0307 	and.w	r3, r3, #7
 8008290:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2b06      	cmp	r3, #6
 8008296:	d010      	beq.n	80082ba <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f042 0201 	orr.w	r2, r2, #1
 80082a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082a8:	e007      	b.n	80082ba <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f042 0201 	orr.w	r2, r2, #1
 80082b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80082ba:	2300      	movs	r3, #0
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3710      	adds	r7, #16
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}
 80082c4:	40010000 	.word	0x40010000
 80082c8:	40000400 	.word	0x40000400
 80082cc:	40000800 	.word	0x40000800
 80082d0:	40000c00 	.word	0x40000c00
 80082d4:	40014000 	.word	0x40014000

080082d8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b086      	sub	sp, #24
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d101      	bne.n	80082ec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80082e8:	2301      	movs	r3, #1
 80082ea:	e097      	b.n	800841c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d106      	bne.n	8008306 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2200      	movs	r2, #0
 80082fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 f88f 	bl	8008424 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2202      	movs	r2, #2
 800830a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	6812      	ldr	r2, [r2, #0]
 8008318:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800831c:	f023 0307 	bic.w	r3, r3, #7
 8008320:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	3304      	adds	r3, #4
 800832a:	4619      	mov	r1, r3
 800832c:	4610      	mov	r0, r2
 800832e:	f000 fb03 	bl	8008938 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	699b      	ldr	r3, [r3, #24]
 8008340:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	6a1b      	ldr	r3, [r3, #32]
 8008348:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	697a      	ldr	r2, [r7, #20]
 8008350:	4313      	orrs	r3, r2
 8008352:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800835a:	f023 0303 	bic.w	r3, r3, #3
 800835e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	689a      	ldr	r2, [r3, #8]
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	699b      	ldr	r3, [r3, #24]
 8008368:	021b      	lsls	r3, r3, #8
 800836a:	4313      	orrs	r3, r2
 800836c:	693a      	ldr	r2, [r7, #16]
 800836e:	4313      	orrs	r3, r2
 8008370:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008378:	f023 030c 	bic.w	r3, r3, #12
 800837c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008384:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008388:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	68da      	ldr	r2, [r3, #12]
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	69db      	ldr	r3, [r3, #28]
 8008392:	021b      	lsls	r3, r3, #8
 8008394:	4313      	orrs	r3, r2
 8008396:	693a      	ldr	r2, [r7, #16]
 8008398:	4313      	orrs	r3, r2
 800839a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	691b      	ldr	r3, [r3, #16]
 80083a0:	011a      	lsls	r2, r3, #4
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	6a1b      	ldr	r3, [r3, #32]
 80083a6:	031b      	lsls	r3, r3, #12
 80083a8:	4313      	orrs	r3, r2
 80083aa:	693a      	ldr	r2, [r7, #16]
 80083ac:	4313      	orrs	r3, r2
 80083ae:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80083b6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80083be:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	685a      	ldr	r2, [r3, #4]
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	695b      	ldr	r3, [r3, #20]
 80083c8:	011b      	lsls	r3, r3, #4
 80083ca:	4313      	orrs	r3, r2
 80083cc:	68fa      	ldr	r2, [r7, #12]
 80083ce:	4313      	orrs	r3, r2
 80083d0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	697a      	ldr	r2, [r7, #20]
 80083d8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	693a      	ldr	r2, [r7, #16]
 80083e0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	68fa      	ldr	r2, [r7, #12]
 80083e8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2201      	movs	r2, #1
 80083ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2201      	movs	r2, #1
 80083f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2201      	movs	r2, #1
 80083fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2201      	movs	r2, #1
 8008406:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2201      	movs	r2, #1
 800840e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2201      	movs	r2, #1
 8008416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800841a:	2300      	movs	r3, #0
}
 800841c:	4618      	mov	r0, r3
 800841e:	3718      	adds	r7, #24
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 8008424:	b480      	push	{r7}
 8008426:	b083      	sub	sp, #12
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 800842c:	bf00      	nop
 800842e:	370c      	adds	r7, #12
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr

08008438 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b084      	sub	sp, #16
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008448:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008450:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008458:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008460:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d110      	bne.n	800848a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008468:	7bfb      	ldrb	r3, [r7, #15]
 800846a:	2b01      	cmp	r3, #1
 800846c:	d102      	bne.n	8008474 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800846e:	7b7b      	ldrb	r3, [r7, #13]
 8008470:	2b01      	cmp	r3, #1
 8008472:	d001      	beq.n	8008478 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008474:	2301      	movs	r3, #1
 8008476:	e069      	b.n	800854c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2202      	movs	r2, #2
 800847c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2202      	movs	r2, #2
 8008484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008488:	e031      	b.n	80084ee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	2b04      	cmp	r3, #4
 800848e:	d110      	bne.n	80084b2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008490:	7bbb      	ldrb	r3, [r7, #14]
 8008492:	2b01      	cmp	r3, #1
 8008494:	d102      	bne.n	800849c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008496:	7b3b      	ldrb	r3, [r7, #12]
 8008498:	2b01      	cmp	r3, #1
 800849a:	d001      	beq.n	80084a0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	e055      	b.n	800854c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2202      	movs	r2, #2
 80084a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2202      	movs	r2, #2
 80084ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80084b0:	e01d      	b.n	80084ee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80084b2:	7bfb      	ldrb	r3, [r7, #15]
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d108      	bne.n	80084ca <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80084b8:	7bbb      	ldrb	r3, [r7, #14]
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d105      	bne.n	80084ca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80084be:	7b7b      	ldrb	r3, [r7, #13]
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d102      	bne.n	80084ca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80084c4:	7b3b      	ldrb	r3, [r7, #12]
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d001      	beq.n	80084ce <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80084ca:	2301      	movs	r3, #1
 80084cc:	e03e      	b.n	800854c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2202      	movs	r2, #2
 80084d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2202      	movs	r2, #2
 80084da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2202      	movs	r2, #2
 80084e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2202      	movs	r2, #2
 80084ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d003      	beq.n	80084fc <HAL_TIM_Encoder_Start+0xc4>
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	2b04      	cmp	r3, #4
 80084f8:	d008      	beq.n	800850c <HAL_TIM_Encoder_Start+0xd4>
 80084fa:	e00f      	b.n	800851c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2201      	movs	r2, #1
 8008502:	2100      	movs	r1, #0
 8008504:	4618      	mov	r0, r3
 8008506:	f000 fc23 	bl	8008d50 <TIM_CCxChannelCmd>
      break;
 800850a:	e016      	b.n	800853a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	2201      	movs	r2, #1
 8008512:	2104      	movs	r1, #4
 8008514:	4618      	mov	r0, r3
 8008516:	f000 fc1b 	bl	8008d50 <TIM_CCxChannelCmd>
      break;
 800851a:	e00e      	b.n	800853a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	2201      	movs	r2, #1
 8008522:	2100      	movs	r1, #0
 8008524:	4618      	mov	r0, r3
 8008526:	f000 fc13 	bl	8008d50 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	2201      	movs	r2, #1
 8008530:	2104      	movs	r1, #4
 8008532:	4618      	mov	r0, r3
 8008534:	f000 fc0c 	bl	8008d50 <TIM_CCxChannelCmd>
      break;
 8008538:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f042 0201 	orr.w	r2, r2, #1
 8008548:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800854a:	2300      	movs	r3, #0
}
 800854c:	4618      	mov	r0, r3
 800854e:	3710      	adds	r7, #16
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	691b      	ldr	r3, [r3, #16]
 8008562:	f003 0302 	and.w	r3, r3, #2
 8008566:	2b02      	cmp	r3, #2
 8008568:	d122      	bne.n	80085b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	f003 0302 	and.w	r3, r3, #2
 8008574:	2b02      	cmp	r3, #2
 8008576:	d11b      	bne.n	80085b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f06f 0202 	mvn.w	r2, #2
 8008580:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2201      	movs	r2, #1
 8008586:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	699b      	ldr	r3, [r3, #24]
 800858e:	f003 0303 	and.w	r3, r3, #3
 8008592:	2b00      	cmp	r3, #0
 8008594:	d003      	beq.n	800859e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 f9b0 	bl	80088fc <HAL_TIM_IC_CaptureCallback>
 800859c:	e005      	b.n	80085aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 f9a2 	bl	80088e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 f9b3 	bl	8008910 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	691b      	ldr	r3, [r3, #16]
 80085b6:	f003 0304 	and.w	r3, r3, #4
 80085ba:	2b04      	cmp	r3, #4
 80085bc:	d122      	bne.n	8008604 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	68db      	ldr	r3, [r3, #12]
 80085c4:	f003 0304 	and.w	r3, r3, #4
 80085c8:	2b04      	cmp	r3, #4
 80085ca:	d11b      	bne.n	8008604 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f06f 0204 	mvn.w	r2, #4
 80085d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2202      	movs	r2, #2
 80085da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	699b      	ldr	r3, [r3, #24]
 80085e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d003      	beq.n	80085f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 f986 	bl	80088fc <HAL_TIM_IC_CaptureCallback>
 80085f0:	e005      	b.n	80085fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 f978 	bl	80088e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 f989 	bl	8008910 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	691b      	ldr	r3, [r3, #16]
 800860a:	f003 0308 	and.w	r3, r3, #8
 800860e:	2b08      	cmp	r3, #8
 8008610:	d122      	bne.n	8008658 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	68db      	ldr	r3, [r3, #12]
 8008618:	f003 0308 	and.w	r3, r3, #8
 800861c:	2b08      	cmp	r3, #8
 800861e:	d11b      	bne.n	8008658 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f06f 0208 	mvn.w	r2, #8
 8008628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2204      	movs	r2, #4
 800862e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	69db      	ldr	r3, [r3, #28]
 8008636:	f003 0303 	and.w	r3, r3, #3
 800863a:	2b00      	cmp	r3, #0
 800863c:	d003      	beq.n	8008646 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 f95c 	bl	80088fc <HAL_TIM_IC_CaptureCallback>
 8008644:	e005      	b.n	8008652 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 f94e 	bl	80088e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 f95f 	bl	8008910 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2200      	movs	r2, #0
 8008656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	691b      	ldr	r3, [r3, #16]
 800865e:	f003 0310 	and.w	r3, r3, #16
 8008662:	2b10      	cmp	r3, #16
 8008664:	d122      	bne.n	80086ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	68db      	ldr	r3, [r3, #12]
 800866c:	f003 0310 	and.w	r3, r3, #16
 8008670:	2b10      	cmp	r3, #16
 8008672:	d11b      	bne.n	80086ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f06f 0210 	mvn.w	r2, #16
 800867c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2208      	movs	r2, #8
 8008682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	69db      	ldr	r3, [r3, #28]
 800868a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800868e:	2b00      	cmp	r3, #0
 8008690:	d003      	beq.n	800869a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 f932 	bl	80088fc <HAL_TIM_IC_CaptureCallback>
 8008698:	e005      	b.n	80086a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 f924 	bl	80088e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 f935 	bl	8008910 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	691b      	ldr	r3, [r3, #16]
 80086b2:	f003 0301 	and.w	r3, r3, #1
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d10e      	bne.n	80086d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	68db      	ldr	r3, [r3, #12]
 80086c0:	f003 0301 	and.w	r3, r3, #1
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d107      	bne.n	80086d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f06f 0201 	mvn.w	r2, #1
 80086d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f7fa f940 	bl	8002958 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	691b      	ldr	r3, [r3, #16]
 80086de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086e2:	2b80      	cmp	r3, #128	; 0x80
 80086e4:	d10e      	bne.n	8008704 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	68db      	ldr	r3, [r3, #12]
 80086ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086f0:	2b80      	cmp	r3, #128	; 0x80
 80086f2:	d107      	bne.n	8008704 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80086fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f000 fb55 	bl	8008dae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800870e:	2b40      	cmp	r3, #64	; 0x40
 8008710:	d10e      	bne.n	8008730 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	68db      	ldr	r3, [r3, #12]
 8008718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800871c:	2b40      	cmp	r3, #64	; 0x40
 800871e:	d107      	bne.n	8008730 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 f8fa 	bl	8008924 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	691b      	ldr	r3, [r3, #16]
 8008736:	f003 0320 	and.w	r3, r3, #32
 800873a:	2b20      	cmp	r3, #32
 800873c:	d10e      	bne.n	800875c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	68db      	ldr	r3, [r3, #12]
 8008744:	f003 0320 	and.w	r3, r3, #32
 8008748:	2b20      	cmp	r3, #32
 800874a:	d107      	bne.n	800875c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f06f 0220 	mvn.w	r2, #32
 8008754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 fb1f 	bl	8008d9a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800875c:	bf00      	nop
 800875e:	3708      	adds	r7, #8
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b086      	sub	sp, #24
 8008768:	af00      	add	r7, sp, #0
 800876a:	60f8      	str	r0, [r7, #12]
 800876c:	60b9      	str	r1, [r7, #8]
 800876e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008770:	2300      	movs	r3, #0
 8008772:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800877a:	2b01      	cmp	r3, #1
 800877c:	d101      	bne.n	8008782 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800877e:	2302      	movs	r3, #2
 8008780:	e0ae      	b.n	80088e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2201      	movs	r2, #1
 8008786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2b0c      	cmp	r3, #12
 800878e:	f200 809f 	bhi.w	80088d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008792:	a201      	add	r2, pc, #4	; (adr r2, 8008798 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008798:	080087cd 	.word	0x080087cd
 800879c:	080088d1 	.word	0x080088d1
 80087a0:	080088d1 	.word	0x080088d1
 80087a4:	080088d1 	.word	0x080088d1
 80087a8:	0800880d 	.word	0x0800880d
 80087ac:	080088d1 	.word	0x080088d1
 80087b0:	080088d1 	.word	0x080088d1
 80087b4:	080088d1 	.word	0x080088d1
 80087b8:	0800884f 	.word	0x0800884f
 80087bc:	080088d1 	.word	0x080088d1
 80087c0:	080088d1 	.word	0x080088d1
 80087c4:	080088d1 	.word	0x080088d1
 80087c8:	0800888f 	.word	0x0800888f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	68b9      	ldr	r1, [r7, #8]
 80087d2:	4618      	mov	r0, r3
 80087d4:	f000 f930 	bl	8008a38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	699a      	ldr	r2, [r3, #24]
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f042 0208 	orr.w	r2, r2, #8
 80087e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	699a      	ldr	r2, [r3, #24]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f022 0204 	bic.w	r2, r2, #4
 80087f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	6999      	ldr	r1, [r3, #24]
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	691a      	ldr	r2, [r3, #16]
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	430a      	orrs	r2, r1
 8008808:	619a      	str	r2, [r3, #24]
      break;
 800880a:	e064      	b.n	80088d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	68b9      	ldr	r1, [r7, #8]
 8008812:	4618      	mov	r0, r3
 8008814:	f000 f976 	bl	8008b04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	699a      	ldr	r2, [r3, #24]
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008826:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	699a      	ldr	r2, [r3, #24]
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008836:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	6999      	ldr	r1, [r3, #24]
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	691b      	ldr	r3, [r3, #16]
 8008842:	021a      	lsls	r2, r3, #8
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	430a      	orrs	r2, r1
 800884a:	619a      	str	r2, [r3, #24]
      break;
 800884c:	e043      	b.n	80088d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	68b9      	ldr	r1, [r7, #8]
 8008854:	4618      	mov	r0, r3
 8008856:	f000 f9c1 	bl	8008bdc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	69da      	ldr	r2, [r3, #28]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f042 0208 	orr.w	r2, r2, #8
 8008868:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	69da      	ldr	r2, [r3, #28]
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f022 0204 	bic.w	r2, r2, #4
 8008878:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	69d9      	ldr	r1, [r3, #28]
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	691a      	ldr	r2, [r3, #16]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	430a      	orrs	r2, r1
 800888a:	61da      	str	r2, [r3, #28]
      break;
 800888c:	e023      	b.n	80088d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	68b9      	ldr	r1, [r7, #8]
 8008894:	4618      	mov	r0, r3
 8008896:	f000 fa0b 	bl	8008cb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	69da      	ldr	r2, [r3, #28]
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	69da      	ldr	r2, [r3, #28]
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	69d9      	ldr	r1, [r3, #28]
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	691b      	ldr	r3, [r3, #16]
 80088c4:	021a      	lsls	r2, r3, #8
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	430a      	orrs	r2, r1
 80088cc:	61da      	str	r2, [r3, #28]
      break;
 80088ce:	e002      	b.n	80088d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80088d0:	2301      	movs	r3, #1
 80088d2:	75fb      	strb	r3, [r7, #23]
      break;
 80088d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2200      	movs	r2, #0
 80088da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80088de:	7dfb      	ldrb	r3, [r7, #23]
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3718      	adds	r7, #24
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b083      	sub	sp, #12
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80088f0:	bf00      	nop
 80088f2:	370c      	adds	r7, #12
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr

080088fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b083      	sub	sp, #12
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008904:	bf00      	nop
 8008906:	370c      	adds	r7, #12
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr

08008910 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008910:	b480      	push	{r7}
 8008912:	b083      	sub	sp, #12
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008918:	bf00      	nop
 800891a:	370c      	adds	r7, #12
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr

08008924 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008924:	b480      	push	{r7}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800892c:	bf00      	nop
 800892e:	370c      	adds	r7, #12
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008938:	b480      	push	{r7}
 800893a:	b085      	sub	sp, #20
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	4a34      	ldr	r2, [pc, #208]	; (8008a1c <TIM_Base_SetConfig+0xe4>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d00f      	beq.n	8008970 <TIM_Base_SetConfig+0x38>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008956:	d00b      	beq.n	8008970 <TIM_Base_SetConfig+0x38>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	4a31      	ldr	r2, [pc, #196]	; (8008a20 <TIM_Base_SetConfig+0xe8>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d007      	beq.n	8008970 <TIM_Base_SetConfig+0x38>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	4a30      	ldr	r2, [pc, #192]	; (8008a24 <TIM_Base_SetConfig+0xec>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d003      	beq.n	8008970 <TIM_Base_SetConfig+0x38>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	4a2f      	ldr	r2, [pc, #188]	; (8008a28 <TIM_Base_SetConfig+0xf0>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d108      	bne.n	8008982 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008976:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	68fa      	ldr	r2, [r7, #12]
 800897e:	4313      	orrs	r3, r2
 8008980:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	4a25      	ldr	r2, [pc, #148]	; (8008a1c <TIM_Base_SetConfig+0xe4>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d01b      	beq.n	80089c2 <TIM_Base_SetConfig+0x8a>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008990:	d017      	beq.n	80089c2 <TIM_Base_SetConfig+0x8a>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	4a22      	ldr	r2, [pc, #136]	; (8008a20 <TIM_Base_SetConfig+0xe8>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d013      	beq.n	80089c2 <TIM_Base_SetConfig+0x8a>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	4a21      	ldr	r2, [pc, #132]	; (8008a24 <TIM_Base_SetConfig+0xec>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d00f      	beq.n	80089c2 <TIM_Base_SetConfig+0x8a>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	4a20      	ldr	r2, [pc, #128]	; (8008a28 <TIM_Base_SetConfig+0xf0>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d00b      	beq.n	80089c2 <TIM_Base_SetConfig+0x8a>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	4a1f      	ldr	r2, [pc, #124]	; (8008a2c <TIM_Base_SetConfig+0xf4>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d007      	beq.n	80089c2 <TIM_Base_SetConfig+0x8a>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	4a1e      	ldr	r2, [pc, #120]	; (8008a30 <TIM_Base_SetConfig+0xf8>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d003      	beq.n	80089c2 <TIM_Base_SetConfig+0x8a>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	4a1d      	ldr	r2, [pc, #116]	; (8008a34 <TIM_Base_SetConfig+0xfc>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d108      	bne.n	80089d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	68db      	ldr	r3, [r3, #12]
 80089ce:	68fa      	ldr	r2, [r7, #12]
 80089d0:	4313      	orrs	r3, r2
 80089d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	695b      	ldr	r3, [r3, #20]
 80089de:	4313      	orrs	r3, r2
 80089e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	68fa      	ldr	r2, [r7, #12]
 80089e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	689a      	ldr	r2, [r3, #8]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	681a      	ldr	r2, [r3, #0]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	4a08      	ldr	r2, [pc, #32]	; (8008a1c <TIM_Base_SetConfig+0xe4>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d103      	bne.n	8008a08 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	691a      	ldr	r2, [r3, #16]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	615a      	str	r2, [r3, #20]
}
 8008a0e:	bf00      	nop
 8008a10:	3714      	adds	r7, #20
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr
 8008a1a:	bf00      	nop
 8008a1c:	40010000 	.word	0x40010000
 8008a20:	40000400 	.word	0x40000400
 8008a24:	40000800 	.word	0x40000800
 8008a28:	40000c00 	.word	0x40000c00
 8008a2c:	40014000 	.word	0x40014000
 8008a30:	40014400 	.word	0x40014400
 8008a34:	40014800 	.word	0x40014800

08008a38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b087      	sub	sp, #28
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6a1b      	ldr	r3, [r3, #32]
 8008a46:	f023 0201 	bic.w	r2, r3, #1
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6a1b      	ldr	r3, [r3, #32]
 8008a52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	699b      	ldr	r3, [r3, #24]
 8008a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f023 0303 	bic.w	r3, r3, #3
 8008a6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	68fa      	ldr	r2, [r7, #12]
 8008a76:	4313      	orrs	r3, r2
 8008a78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	f023 0302 	bic.w	r3, r3, #2
 8008a80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	697a      	ldr	r2, [r7, #20]
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	4a1c      	ldr	r2, [pc, #112]	; (8008b00 <TIM_OC1_SetConfig+0xc8>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d10c      	bne.n	8008aae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	f023 0308 	bic.w	r3, r3, #8
 8008a9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	68db      	ldr	r3, [r3, #12]
 8008aa0:	697a      	ldr	r2, [r7, #20]
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	f023 0304 	bic.w	r3, r3, #4
 8008aac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	4a13      	ldr	r2, [pc, #76]	; (8008b00 <TIM_OC1_SetConfig+0xc8>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d111      	bne.n	8008ada <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008abc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ac4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	695b      	ldr	r3, [r3, #20]
 8008aca:	693a      	ldr	r2, [r7, #16]
 8008acc:	4313      	orrs	r3, r2
 8008ace:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	699b      	ldr	r3, [r3, #24]
 8008ad4:	693a      	ldr	r2, [r7, #16]
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	693a      	ldr	r2, [r7, #16]
 8008ade:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	68fa      	ldr	r2, [r7, #12]
 8008ae4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	685a      	ldr	r2, [r3, #4]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	697a      	ldr	r2, [r7, #20]
 8008af2:	621a      	str	r2, [r3, #32]
}
 8008af4:	bf00      	nop
 8008af6:	371c      	adds	r7, #28
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr
 8008b00:	40010000 	.word	0x40010000

08008b04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b087      	sub	sp, #28
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6a1b      	ldr	r3, [r3, #32]
 8008b12:	f023 0210 	bic.w	r2, r3, #16
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6a1b      	ldr	r3, [r3, #32]
 8008b1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	699b      	ldr	r3, [r3, #24]
 8008b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	021b      	lsls	r3, r3, #8
 8008b42:	68fa      	ldr	r2, [r7, #12]
 8008b44:	4313      	orrs	r3, r2
 8008b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	f023 0320 	bic.w	r3, r3, #32
 8008b4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	011b      	lsls	r3, r3, #4
 8008b56:	697a      	ldr	r2, [r7, #20]
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	4a1e      	ldr	r2, [pc, #120]	; (8008bd8 <TIM_OC2_SetConfig+0xd4>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d10d      	bne.n	8008b80 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	68db      	ldr	r3, [r3, #12]
 8008b70:	011b      	lsls	r3, r3, #4
 8008b72:	697a      	ldr	r2, [r7, #20]
 8008b74:	4313      	orrs	r3, r2
 8008b76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	4a15      	ldr	r2, [pc, #84]	; (8008bd8 <TIM_OC2_SetConfig+0xd4>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d113      	bne.n	8008bb0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	695b      	ldr	r3, [r3, #20]
 8008b9c:	009b      	lsls	r3, r3, #2
 8008b9e:	693a      	ldr	r2, [r7, #16]
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	699b      	ldr	r3, [r3, #24]
 8008ba8:	009b      	lsls	r3, r3, #2
 8008baa:	693a      	ldr	r2, [r7, #16]
 8008bac:	4313      	orrs	r3, r2
 8008bae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	693a      	ldr	r2, [r7, #16]
 8008bb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	68fa      	ldr	r2, [r7, #12]
 8008bba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	685a      	ldr	r2, [r3, #4]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	697a      	ldr	r2, [r7, #20]
 8008bc8:	621a      	str	r2, [r3, #32]
}
 8008bca:	bf00      	nop
 8008bcc:	371c      	adds	r7, #28
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd4:	4770      	bx	lr
 8008bd6:	bf00      	nop
 8008bd8:	40010000 	.word	0x40010000

08008bdc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b087      	sub	sp, #28
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6a1b      	ldr	r3, [r3, #32]
 8008bea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6a1b      	ldr	r3, [r3, #32]
 8008bf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	69db      	ldr	r3, [r3, #28]
 8008c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f023 0303 	bic.w	r3, r3, #3
 8008c12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	68fa      	ldr	r2, [r7, #12]
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008c24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	021b      	lsls	r3, r3, #8
 8008c2c:	697a      	ldr	r2, [r7, #20]
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	4a1d      	ldr	r2, [pc, #116]	; (8008cac <TIM_OC3_SetConfig+0xd0>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d10d      	bne.n	8008c56 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008c40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	68db      	ldr	r3, [r3, #12]
 8008c46:	021b      	lsls	r3, r3, #8
 8008c48:	697a      	ldr	r2, [r7, #20]
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	4a14      	ldr	r2, [pc, #80]	; (8008cac <TIM_OC3_SetConfig+0xd0>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d113      	bne.n	8008c86 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008c6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	695b      	ldr	r3, [r3, #20]
 8008c72:	011b      	lsls	r3, r3, #4
 8008c74:	693a      	ldr	r2, [r7, #16]
 8008c76:	4313      	orrs	r3, r2
 8008c78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	699b      	ldr	r3, [r3, #24]
 8008c7e:	011b      	lsls	r3, r3, #4
 8008c80:	693a      	ldr	r2, [r7, #16]
 8008c82:	4313      	orrs	r3, r2
 8008c84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	693a      	ldr	r2, [r7, #16]
 8008c8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	68fa      	ldr	r2, [r7, #12]
 8008c90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	685a      	ldr	r2, [r3, #4]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	697a      	ldr	r2, [r7, #20]
 8008c9e:	621a      	str	r2, [r3, #32]
}
 8008ca0:	bf00      	nop
 8008ca2:	371c      	adds	r7, #28
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr
 8008cac:	40010000 	.word	0x40010000

08008cb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b087      	sub	sp, #28
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6a1b      	ldr	r3, [r3, #32]
 8008cbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6a1b      	ldr	r3, [r3, #32]
 8008cca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	69db      	ldr	r3, [r3, #28]
 8008cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ce6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	021b      	lsls	r3, r3, #8
 8008cee:	68fa      	ldr	r2, [r7, #12]
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008cfa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	031b      	lsls	r3, r3, #12
 8008d02:	693a      	ldr	r2, [r7, #16]
 8008d04:	4313      	orrs	r3, r2
 8008d06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	4a10      	ldr	r2, [pc, #64]	; (8008d4c <TIM_OC4_SetConfig+0x9c>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d109      	bne.n	8008d24 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	695b      	ldr	r3, [r3, #20]
 8008d1c:	019b      	lsls	r3, r3, #6
 8008d1e:	697a      	ldr	r2, [r7, #20]
 8008d20:	4313      	orrs	r3, r2
 8008d22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	697a      	ldr	r2, [r7, #20]
 8008d28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	68fa      	ldr	r2, [r7, #12]
 8008d2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	685a      	ldr	r2, [r3, #4]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	693a      	ldr	r2, [r7, #16]
 8008d3c:	621a      	str	r2, [r3, #32]
}
 8008d3e:	bf00      	nop
 8008d40:	371c      	adds	r7, #28
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr
 8008d4a:	bf00      	nop
 8008d4c:	40010000 	.word	0x40010000

08008d50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b087      	sub	sp, #28
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	60b9      	str	r1, [r7, #8]
 8008d5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	f003 031f 	and.w	r3, r3, #31
 8008d62:	2201      	movs	r2, #1
 8008d64:	fa02 f303 	lsl.w	r3, r2, r3
 8008d68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	6a1a      	ldr	r2, [r3, #32]
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	43db      	mvns	r3, r3
 8008d72:	401a      	ands	r2, r3
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	6a1a      	ldr	r2, [r3, #32]
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	f003 031f 	and.w	r3, r3, #31
 8008d82:	6879      	ldr	r1, [r7, #4]
 8008d84:	fa01 f303 	lsl.w	r3, r1, r3
 8008d88:	431a      	orrs	r2, r3
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	621a      	str	r2, [r3, #32]
}
 8008d8e:	bf00      	nop
 8008d90:	371c      	adds	r7, #28
 8008d92:	46bd      	mov	sp, r7
 8008d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d98:	4770      	bx	lr

08008d9a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d9a:	b480      	push	{r7}
 8008d9c:	b083      	sub	sp, #12
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008da2:	bf00      	nop
 8008da4:	370c      	adds	r7, #12
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr

08008dae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008dae:	b480      	push	{r7}
 8008db0:	b083      	sub	sp, #12
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008db6:	bf00      	nop
 8008db8:	370c      	adds	r7, #12
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc0:	4770      	bx	lr

08008dc2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008dc2:	b580      	push	{r7, lr}
 8008dc4:	b082      	sub	sp, #8
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d101      	bne.n	8008dd4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	e03f      	b.n	8008e54 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dda:	b2db      	uxtb	r3, r3
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d106      	bne.n	8008dee <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2200      	movs	r2, #0
 8008de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f7fa fa2b 	bl	8003244 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2224      	movs	r2, #36	; 0x24
 8008df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	68da      	ldr	r2, [r3, #12]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008e04:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 ffd6 	bl	8009db8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	691a      	ldr	r2, [r3, #16]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008e1a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	695a      	ldr	r2, [r3, #20]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008e2a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	68da      	ldr	r2, [r3, #12]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008e3a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2220      	movs	r2, #32
 8008e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2220      	movs	r2, #32
 8008e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008e52:	2300      	movs	r3, #0
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3708      	adds	r7, #8
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b08c      	sub	sp, #48	; 0x30
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	60f8      	str	r0, [r7, #12]
 8008e64:	60b9      	str	r1, [r7, #8]
 8008e66:	4613      	mov	r3, r2
 8008e68:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e70:	b2db      	uxtb	r3, r3
 8008e72:	2b20      	cmp	r3, #32
 8008e74:	d165      	bne.n	8008f42 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d002      	beq.n	8008e82 <HAL_UART_Transmit_DMA+0x26>
 8008e7c:	88fb      	ldrh	r3, [r7, #6]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d101      	bne.n	8008e86 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008e82:	2301      	movs	r3, #1
 8008e84:	e05e      	b.n	8008f44 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d101      	bne.n	8008e94 <HAL_UART_Transmit_DMA+0x38>
 8008e90:	2302      	movs	r3, #2
 8008e92:	e057      	b.n	8008f44 <HAL_UART_Transmit_DMA+0xe8>
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	2201      	movs	r2, #1
 8008e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008e9c:	68ba      	ldr	r2, [r7, #8]
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	88fa      	ldrh	r2, [r7, #6]
 8008ea6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	88fa      	ldrh	r2, [r7, #6]
 8008eac:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2221      	movs	r2, #33	; 0x21
 8008eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ec0:	4a22      	ldr	r2, [pc, #136]	; (8008f4c <HAL_UART_Transmit_DMA+0xf0>)
 8008ec2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ec8:	4a21      	ldr	r2, [pc, #132]	; (8008f50 <HAL_UART_Transmit_DMA+0xf4>)
 8008eca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ed0:	4a20      	ldr	r2, [pc, #128]	; (8008f54 <HAL_UART_Transmit_DMA+0xf8>)
 8008ed2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ed8:	2200      	movs	r2, #0
 8008eda:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008edc:	f107 0308 	add.w	r3, r7, #8
 8008ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ee8:	6819      	ldr	r1, [r3, #0]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	3304      	adds	r3, #4
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	88fb      	ldrh	r3, [r7, #6]
 8008ef4:	f7fb fa5a 	bl	80043ac <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008f00:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2200      	movs	r2, #0
 8008f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	3314      	adds	r3, #20
 8008f10:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f12:	69bb      	ldr	r3, [r7, #24]
 8008f14:	e853 3f00 	ldrex	r3, [r3]
 8008f18:	617b      	str	r3, [r7, #20]
   return(result);
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f20:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	3314      	adds	r3, #20
 8008f28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f2a:	627a      	str	r2, [r7, #36]	; 0x24
 8008f2c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f2e:	6a39      	ldr	r1, [r7, #32]
 8008f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f32:	e841 2300 	strex	r3, r2, [r1]
 8008f36:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f38:	69fb      	ldr	r3, [r7, #28]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d1e5      	bne.n	8008f0a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	e000      	b.n	8008f44 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8008f42:	2302      	movs	r3, #2
  }
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3730      	adds	r7, #48	; 0x30
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}
 8008f4c:	08009651 	.word	0x08009651
 8008f50:	080096eb 	.word	0x080096eb
 8008f54:	08009863 	.word	0x08009863

08008f58 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	60b9      	str	r1, [r7, #8]
 8008f62:	4613      	mov	r3, r2
 8008f64:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f6c:	b2db      	uxtb	r3, r3
 8008f6e:	2b20      	cmp	r3, #32
 8008f70:	d11d      	bne.n	8008fae <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d002      	beq.n	8008f7e <HAL_UART_Receive_DMA+0x26>
 8008f78:	88fb      	ldrh	r3, [r7, #6]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d101      	bne.n	8008f82 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	e016      	b.n	8008fb0 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d101      	bne.n	8008f90 <HAL_UART_Receive_DMA+0x38>
 8008f8c:	2302      	movs	r3, #2
 8008f8e:	e00f      	b.n	8008fb0 <HAL_UART_Receive_DMA+0x58>
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2201      	movs	r2, #1
 8008f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008f9e:	88fb      	ldrh	r3, [r7, #6]
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	68b9      	ldr	r1, [r7, #8]
 8008fa4:	68f8      	ldr	r0, [r7, #12]
 8008fa6:	f000 fca7 	bl	80098f8 <UART_Start_Receive_DMA>
 8008faa:	4603      	mov	r3, r0
 8008fac:	e000      	b.n	8008fb0 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008fae:	2302      	movs	r3, #2
  }
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3710      	adds	r7, #16
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b090      	sub	sp, #64	; 0x40
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	695b      	ldr	r3, [r3, #20]
 8008fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fce:	2b80      	cmp	r3, #128	; 0x80
 8008fd0:	bf0c      	ite	eq
 8008fd2:	2301      	moveq	r3, #1
 8008fd4:	2300      	movne	r3, #0
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fe0:	b2db      	uxtb	r3, r3
 8008fe2:	2b21      	cmp	r3, #33	; 0x21
 8008fe4:	d128      	bne.n	8009038 <HAL_UART_DMAStop+0x80>
 8008fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d025      	beq.n	8009038 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	3314      	adds	r3, #20
 8008ff2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff6:	e853 3f00 	ldrex	r3, [r3]
 8008ffa:	623b      	str	r3, [r7, #32]
   return(result);
 8008ffc:	6a3b      	ldr	r3, [r7, #32]
 8008ffe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009002:	63bb      	str	r3, [r7, #56]	; 0x38
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	3314      	adds	r3, #20
 800900a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800900c:	633a      	str	r2, [r7, #48]	; 0x30
 800900e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009010:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009012:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009014:	e841 2300 	strex	r3, r2, [r1]
 8009018:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800901a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901c:	2b00      	cmp	r3, #0
 800901e:	d1e5      	bne.n	8008fec <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009024:	2b00      	cmp	r3, #0
 8009026:	d004      	beq.n	8009032 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800902c:	4618      	mov	r0, r3
 800902e:	f7fb fa15 	bl	800445c <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 fcfe 	bl	8009a34 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	695b      	ldr	r3, [r3, #20]
 800903e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009042:	2b40      	cmp	r3, #64	; 0x40
 8009044:	bf0c      	ite	eq
 8009046:	2301      	moveq	r3, #1
 8009048:	2300      	movne	r3, #0
 800904a:	b2db      	uxtb	r3, r3
 800904c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009054:	b2db      	uxtb	r3, r3
 8009056:	2b22      	cmp	r3, #34	; 0x22
 8009058:	d128      	bne.n	80090ac <HAL_UART_DMAStop+0xf4>
 800905a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800905c:	2b00      	cmp	r3, #0
 800905e:	d025      	beq.n	80090ac <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	3314      	adds	r3, #20
 8009066:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	e853 3f00 	ldrex	r3, [r3]
 800906e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009076:	637b      	str	r3, [r7, #52]	; 0x34
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	3314      	adds	r3, #20
 800907e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009080:	61fa      	str	r2, [r7, #28]
 8009082:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009084:	69b9      	ldr	r1, [r7, #24]
 8009086:	69fa      	ldr	r2, [r7, #28]
 8009088:	e841 2300 	strex	r3, r2, [r1]
 800908c:	617b      	str	r3, [r7, #20]
   return(result);
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d1e5      	bne.n	8009060 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009098:	2b00      	cmp	r3, #0
 800909a:	d004      	beq.n	80090a6 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090a0:	4618      	mov	r0, r3
 80090a2:	f7fb f9db 	bl	800445c <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 fcec 	bl	8009a84 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80090ac:	2300      	movs	r3, #0
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3740      	adds	r7, #64	; 0x40
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
	...

080090b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b0ba      	sub	sp, #232	; 0xe8
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	68db      	ldr	r3, [r3, #12]
 80090d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	695b      	ldr	r3, [r3, #20]
 80090da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80090de:	2300      	movs	r3, #0
 80090e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80090e4:	2300      	movs	r3, #0
 80090e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80090ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090ee:	f003 030f 	and.w	r3, r3, #15
 80090f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80090f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d10f      	bne.n	800911e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80090fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009102:	f003 0320 	and.w	r3, r3, #32
 8009106:	2b00      	cmp	r3, #0
 8009108:	d009      	beq.n	800911e <HAL_UART_IRQHandler+0x66>
 800910a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800910e:	f003 0320 	and.w	r3, r3, #32
 8009112:	2b00      	cmp	r3, #0
 8009114:	d003      	beq.n	800911e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 fd93 	bl	8009c42 <UART_Receive_IT>
      return;
 800911c:	e256      	b.n	80095cc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800911e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009122:	2b00      	cmp	r3, #0
 8009124:	f000 80de 	beq.w	80092e4 <HAL_UART_IRQHandler+0x22c>
 8009128:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800912c:	f003 0301 	and.w	r3, r3, #1
 8009130:	2b00      	cmp	r3, #0
 8009132:	d106      	bne.n	8009142 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009138:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800913c:	2b00      	cmp	r3, #0
 800913e:	f000 80d1 	beq.w	80092e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009146:	f003 0301 	and.w	r3, r3, #1
 800914a:	2b00      	cmp	r3, #0
 800914c:	d00b      	beq.n	8009166 <HAL_UART_IRQHandler+0xae>
 800914e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009156:	2b00      	cmp	r3, #0
 8009158:	d005      	beq.n	8009166 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800915e:	f043 0201 	orr.w	r2, r3, #1
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800916a:	f003 0304 	and.w	r3, r3, #4
 800916e:	2b00      	cmp	r3, #0
 8009170:	d00b      	beq.n	800918a <HAL_UART_IRQHandler+0xd2>
 8009172:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009176:	f003 0301 	and.w	r3, r3, #1
 800917a:	2b00      	cmp	r3, #0
 800917c:	d005      	beq.n	800918a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009182:	f043 0202 	orr.w	r2, r3, #2
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800918a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800918e:	f003 0302 	and.w	r3, r3, #2
 8009192:	2b00      	cmp	r3, #0
 8009194:	d00b      	beq.n	80091ae <HAL_UART_IRQHandler+0xf6>
 8009196:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800919a:	f003 0301 	and.w	r3, r3, #1
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d005      	beq.n	80091ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091a6:	f043 0204 	orr.w	r2, r3, #4
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80091ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091b2:	f003 0308 	and.w	r3, r3, #8
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d011      	beq.n	80091de <HAL_UART_IRQHandler+0x126>
 80091ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091be:	f003 0320 	and.w	r3, r3, #32
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d105      	bne.n	80091d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80091c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80091ca:	f003 0301 	and.w	r3, r3, #1
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d005      	beq.n	80091de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091d6:	f043 0208 	orr.w	r2, r3, #8
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	f000 81ed 	beq.w	80095c2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80091e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091ec:	f003 0320 	and.w	r3, r3, #32
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d008      	beq.n	8009206 <HAL_UART_IRQHandler+0x14e>
 80091f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091f8:	f003 0320 	and.w	r3, r3, #32
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d002      	beq.n	8009206 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f000 fd1e 	bl	8009c42 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	695b      	ldr	r3, [r3, #20]
 800920c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009210:	2b40      	cmp	r3, #64	; 0x40
 8009212:	bf0c      	ite	eq
 8009214:	2301      	moveq	r3, #1
 8009216:	2300      	movne	r3, #0
 8009218:	b2db      	uxtb	r3, r3
 800921a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009222:	f003 0308 	and.w	r3, r3, #8
 8009226:	2b00      	cmp	r3, #0
 8009228:	d103      	bne.n	8009232 <HAL_UART_IRQHandler+0x17a>
 800922a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800922e:	2b00      	cmp	r3, #0
 8009230:	d04f      	beq.n	80092d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f000 fc26 	bl	8009a84 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	695b      	ldr	r3, [r3, #20]
 800923e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009242:	2b40      	cmp	r3, #64	; 0x40
 8009244:	d141      	bne.n	80092ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	3314      	adds	r3, #20
 800924c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009250:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009254:	e853 3f00 	ldrex	r3, [r3]
 8009258:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800925c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009260:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009264:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	3314      	adds	r3, #20
 800926e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009272:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009276:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800927a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800927e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009282:	e841 2300 	strex	r3, r2, [r1]
 8009286:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800928a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800928e:	2b00      	cmp	r3, #0
 8009290:	d1d9      	bne.n	8009246 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009296:	2b00      	cmp	r3, #0
 8009298:	d013      	beq.n	80092c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800929e:	4a7d      	ldr	r2, [pc, #500]	; (8009494 <HAL_UART_IRQHandler+0x3dc>)
 80092a0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092a6:	4618      	mov	r0, r3
 80092a8:	f7fb f948 	bl	800453c <HAL_DMA_Abort_IT>
 80092ac:	4603      	mov	r3, r0
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d016      	beq.n	80092e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80092bc:	4610      	mov	r0, r2
 80092be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092c0:	e00e      	b.n	80092e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 f9ae 	bl	8009624 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092c8:	e00a      	b.n	80092e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 f9aa 	bl	8009624 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092d0:	e006      	b.n	80092e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f000 f9a6 	bl	8009624 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2200      	movs	r2, #0
 80092dc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80092de:	e170      	b.n	80095c2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092e0:	bf00      	nop
    return;
 80092e2:	e16e      	b.n	80095c2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	f040 814a 	bne.w	8009582 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80092ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092f2:	f003 0310 	and.w	r3, r3, #16
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	f000 8143 	beq.w	8009582 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80092fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009300:	f003 0310 	and.w	r3, r3, #16
 8009304:	2b00      	cmp	r3, #0
 8009306:	f000 813c 	beq.w	8009582 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800930a:	2300      	movs	r3, #0
 800930c:	60bb      	str	r3, [r7, #8]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	60bb      	str	r3, [r7, #8]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	60bb      	str	r3, [r7, #8]
 800931e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	695b      	ldr	r3, [r3, #20]
 8009326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800932a:	2b40      	cmp	r3, #64	; 0x40
 800932c:	f040 80b4 	bne.w	8009498 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800933c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009340:	2b00      	cmp	r3, #0
 8009342:	f000 8140 	beq.w	80095c6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800934a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800934e:	429a      	cmp	r2, r3
 8009350:	f080 8139 	bcs.w	80095c6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800935a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009360:	69db      	ldr	r3, [r3, #28]
 8009362:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009366:	f000 8088 	beq.w	800947a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	330c      	adds	r3, #12
 8009370:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009374:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009378:	e853 3f00 	ldrex	r3, [r3]
 800937c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009380:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009384:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009388:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	330c      	adds	r3, #12
 8009392:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009396:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800939a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800939e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80093a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80093a6:	e841 2300 	strex	r3, r2, [r1]
 80093aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80093ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d1d9      	bne.n	800936a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	3314      	adds	r3, #20
 80093bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80093c0:	e853 3f00 	ldrex	r3, [r3]
 80093c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80093c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80093c8:	f023 0301 	bic.w	r3, r3, #1
 80093cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	3314      	adds	r3, #20
 80093d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80093da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80093de:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80093e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80093e6:	e841 2300 	strex	r3, r2, [r1]
 80093ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80093ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d1e1      	bne.n	80093b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	3314      	adds	r3, #20
 80093f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80093fc:	e853 3f00 	ldrex	r3, [r3]
 8009400:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009402:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009404:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009408:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	3314      	adds	r3, #20
 8009412:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009416:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009418:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800941a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800941c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800941e:	e841 2300 	strex	r3, r2, [r1]
 8009422:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009424:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009426:	2b00      	cmp	r3, #0
 8009428:	d1e3      	bne.n	80093f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2220      	movs	r2, #32
 800942e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2200      	movs	r2, #0
 8009436:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	330c      	adds	r3, #12
 800943e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009442:	e853 3f00 	ldrex	r3, [r3]
 8009446:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009448:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800944a:	f023 0310 	bic.w	r3, r3, #16
 800944e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	330c      	adds	r3, #12
 8009458:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800945c:	65ba      	str	r2, [r7, #88]	; 0x58
 800945e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009460:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009462:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009464:	e841 2300 	strex	r3, r2, [r1]
 8009468:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800946a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800946c:	2b00      	cmp	r3, #0
 800946e:	d1e3      	bne.n	8009438 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009474:	4618      	mov	r0, r3
 8009476:	f7fa fff1 	bl	800445c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009482:	b29b      	uxth	r3, r3
 8009484:	1ad3      	subs	r3, r2, r3
 8009486:	b29b      	uxth	r3, r3
 8009488:	4619      	mov	r1, r3
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 f8d4 	bl	8009638 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009490:	e099      	b.n	80095c6 <HAL_UART_IRQHandler+0x50e>
 8009492:	bf00      	nop
 8009494:	08009b4b 	.word	0x08009b4b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80094a0:	b29b      	uxth	r3, r3
 80094a2:	1ad3      	subs	r3, r2, r3
 80094a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80094ac:	b29b      	uxth	r3, r3
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	f000 808b 	beq.w	80095ca <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80094b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	f000 8086 	beq.w	80095ca <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	330c      	adds	r3, #12
 80094c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c8:	e853 3f00 	ldrex	r3, [r3]
 80094cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80094ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80094d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	330c      	adds	r3, #12
 80094de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80094e2:	647a      	str	r2, [r7, #68]	; 0x44
 80094e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80094e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80094ea:	e841 2300 	strex	r3, r2, [r1]
 80094ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80094f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d1e3      	bne.n	80094be <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	3314      	adds	r3, #20
 80094fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009500:	e853 3f00 	ldrex	r3, [r3]
 8009504:	623b      	str	r3, [r7, #32]
   return(result);
 8009506:	6a3b      	ldr	r3, [r7, #32]
 8009508:	f023 0301 	bic.w	r3, r3, #1
 800950c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	3314      	adds	r3, #20
 8009516:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800951a:	633a      	str	r2, [r7, #48]	; 0x30
 800951c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800951e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009522:	e841 2300 	strex	r3, r2, [r1]
 8009526:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800952a:	2b00      	cmp	r3, #0
 800952c:	d1e3      	bne.n	80094f6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2220      	movs	r2, #32
 8009532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2200      	movs	r2, #0
 800953a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	330c      	adds	r3, #12
 8009542:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	e853 3f00 	ldrex	r3, [r3]
 800954a:	60fb      	str	r3, [r7, #12]
   return(result);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f023 0310 	bic.w	r3, r3, #16
 8009552:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	330c      	adds	r3, #12
 800955c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009560:	61fa      	str	r2, [r7, #28]
 8009562:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009564:	69b9      	ldr	r1, [r7, #24]
 8009566:	69fa      	ldr	r2, [r7, #28]
 8009568:	e841 2300 	strex	r3, r2, [r1]
 800956c:	617b      	str	r3, [r7, #20]
   return(result);
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d1e3      	bne.n	800953c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009574:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009578:	4619      	mov	r1, r3
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 f85c 	bl	8009638 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009580:	e023      	b.n	80095ca <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800958a:	2b00      	cmp	r3, #0
 800958c:	d009      	beq.n	80095a2 <HAL_UART_IRQHandler+0x4ea>
 800958e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009596:	2b00      	cmp	r3, #0
 8009598:	d003      	beq.n	80095a2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f000 fae9 	bl	8009b72 <UART_Transmit_IT>
    return;
 80095a0:	e014      	b.n	80095cc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80095a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d00e      	beq.n	80095cc <HAL_UART_IRQHandler+0x514>
 80095ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d008      	beq.n	80095cc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f000 fb29 	bl	8009c12 <UART_EndTransmit_IT>
    return;
 80095c0:	e004      	b.n	80095cc <HAL_UART_IRQHandler+0x514>
    return;
 80095c2:	bf00      	nop
 80095c4:	e002      	b.n	80095cc <HAL_UART_IRQHandler+0x514>
      return;
 80095c6:	bf00      	nop
 80095c8:	e000      	b.n	80095cc <HAL_UART_IRQHandler+0x514>
      return;
 80095ca:	bf00      	nop
  }
}
 80095cc:	37e8      	adds	r7, #232	; 0xe8
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	bf00      	nop

080095d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b083      	sub	sp, #12
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80095dc:	bf00      	nop
 80095de:	370c      	adds	r7, #12
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr

080095e8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b083      	sub	sp, #12
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80095f0:	bf00      	nop
 80095f2:	370c      	adds	r7, #12
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr

080095fc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b083      	sub	sp, #12
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009604:	bf00      	nop
 8009606:	370c      	adds	r7, #12
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr

08009610 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009610:	b480      	push	{r7}
 8009612:	b083      	sub	sp, #12
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009618:	bf00      	nop
 800961a:	370c      	adds	r7, #12
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr

08009624 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009624:	b480      	push	{r7}
 8009626:	b083      	sub	sp, #12
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800962c:	bf00      	nop
 800962e:	370c      	adds	r7, #12
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr

08009638 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009638:	b480      	push	{r7}
 800963a:	b083      	sub	sp, #12
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	460b      	mov	r3, r1
 8009642:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009644:	bf00      	nop
 8009646:	370c      	adds	r7, #12
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr

08009650 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b090      	sub	sp, #64	; 0x40
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800965c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009668:	2b00      	cmp	r3, #0
 800966a:	d137      	bne.n	80096dc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800966c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800966e:	2200      	movs	r2, #0
 8009670:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	3314      	adds	r3, #20
 8009678:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800967a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800967c:	e853 3f00 	ldrex	r3, [r3]
 8009680:	623b      	str	r3, [r7, #32]
   return(result);
 8009682:	6a3b      	ldr	r3, [r7, #32]
 8009684:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009688:	63bb      	str	r3, [r7, #56]	; 0x38
 800968a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	3314      	adds	r3, #20
 8009690:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009692:	633a      	str	r2, [r7, #48]	; 0x30
 8009694:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009696:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009698:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800969a:	e841 2300 	strex	r3, r2, [r1]
 800969e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80096a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d1e5      	bne.n	8009672 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80096a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	330c      	adds	r3, #12
 80096ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	e853 3f00 	ldrex	r3, [r3]
 80096b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096bc:	637b      	str	r3, [r7, #52]	; 0x34
 80096be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	330c      	adds	r3, #12
 80096c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80096c6:	61fa      	str	r2, [r7, #28]
 80096c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ca:	69b9      	ldr	r1, [r7, #24]
 80096cc:	69fa      	ldr	r2, [r7, #28]
 80096ce:	e841 2300 	strex	r3, r2, [r1]
 80096d2:	617b      	str	r3, [r7, #20]
   return(result);
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d1e5      	bne.n	80096a6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80096da:	e002      	b.n	80096e2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80096dc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80096de:	f7ff ff79 	bl	80095d4 <HAL_UART_TxCpltCallback>
}
 80096e2:	bf00      	nop
 80096e4:	3740      	adds	r7, #64	; 0x40
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}

080096ea <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80096ea:	b580      	push	{r7, lr}
 80096ec:	b084      	sub	sp, #16
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096f6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80096f8:	68f8      	ldr	r0, [r7, #12]
 80096fa:	f7ff ff75 	bl	80095e8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096fe:	bf00      	nop
 8009700:	3710      	adds	r7, #16
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}

08009706 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009706:	b580      	push	{r7, lr}
 8009708:	b09c      	sub	sp, #112	; 0x70
 800970a:	af00      	add	r7, sp, #0
 800970c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009712:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800971e:	2b00      	cmp	r3, #0
 8009720:	d172      	bne.n	8009808 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009724:	2200      	movs	r2, #0
 8009726:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	330c      	adds	r3, #12
 800972e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009732:	e853 3f00 	ldrex	r3, [r3]
 8009736:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009738:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800973a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800973e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	330c      	adds	r3, #12
 8009746:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009748:	65ba      	str	r2, [r7, #88]	; 0x58
 800974a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800974c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800974e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009750:	e841 2300 	strex	r3, r2, [r1]
 8009754:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009756:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009758:	2b00      	cmp	r3, #0
 800975a:	d1e5      	bne.n	8009728 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800975c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	3314      	adds	r3, #20
 8009762:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009766:	e853 3f00 	ldrex	r3, [r3]
 800976a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800976c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800976e:	f023 0301 	bic.w	r3, r3, #1
 8009772:	667b      	str	r3, [r7, #100]	; 0x64
 8009774:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	3314      	adds	r3, #20
 800977a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800977c:	647a      	str	r2, [r7, #68]	; 0x44
 800977e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009780:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009782:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009784:	e841 2300 	strex	r3, r2, [r1]
 8009788:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800978a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800978c:	2b00      	cmp	r3, #0
 800978e:	d1e5      	bne.n	800975c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	3314      	adds	r3, #20
 8009796:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800979a:	e853 3f00 	ldrex	r3, [r3]
 800979e:	623b      	str	r3, [r7, #32]
   return(result);
 80097a0:	6a3b      	ldr	r3, [r7, #32]
 80097a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097a6:	663b      	str	r3, [r7, #96]	; 0x60
 80097a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	3314      	adds	r3, #20
 80097ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80097b0:	633a      	str	r2, [r7, #48]	; 0x30
 80097b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80097b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097b8:	e841 2300 	strex	r3, r2, [r1]
 80097bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80097be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d1e5      	bne.n	8009790 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80097c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097c6:	2220      	movs	r2, #32
 80097c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	d119      	bne.n	8009808 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	330c      	adds	r3, #12
 80097da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	e853 3f00 	ldrex	r3, [r3]
 80097e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	f023 0310 	bic.w	r3, r3, #16
 80097ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80097ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	330c      	adds	r3, #12
 80097f2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80097f4:	61fa      	str	r2, [r7, #28]
 80097f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097f8:	69b9      	ldr	r1, [r7, #24]
 80097fa:	69fa      	ldr	r2, [r7, #28]
 80097fc:	e841 2300 	strex	r3, r2, [r1]
 8009800:	617b      	str	r3, [r7, #20]
   return(result);
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d1e5      	bne.n	80097d4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800980a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800980c:	2b01      	cmp	r3, #1
 800980e:	d106      	bne.n	800981e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009812:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009814:	4619      	mov	r1, r3
 8009816:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009818:	f7ff ff0e 	bl	8009638 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800981c:	e002      	b.n	8009824 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800981e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009820:	f7ff feec 	bl	80095fc <HAL_UART_RxCpltCallback>
}
 8009824:	bf00      	nop
 8009826:	3770      	adds	r7, #112	; 0x70
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}

0800982c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b084      	sub	sp, #16
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009838:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800983e:	2b01      	cmp	r3, #1
 8009840:	d108      	bne.n	8009854 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009846:	085b      	lsrs	r3, r3, #1
 8009848:	b29b      	uxth	r3, r3
 800984a:	4619      	mov	r1, r3
 800984c:	68f8      	ldr	r0, [r7, #12]
 800984e:	f7ff fef3 	bl	8009638 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009852:	e002      	b.n	800985a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009854:	68f8      	ldr	r0, [r7, #12]
 8009856:	f7ff fedb 	bl	8009610 <HAL_UART_RxHalfCpltCallback>
}
 800985a:	bf00      	nop
 800985c:	3710      	adds	r7, #16
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}

08009862 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009862:	b580      	push	{r7, lr}
 8009864:	b084      	sub	sp, #16
 8009866:	af00      	add	r7, sp, #0
 8009868:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800986a:	2300      	movs	r3, #0
 800986c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009872:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	695b      	ldr	r3, [r3, #20]
 800987a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800987e:	2b80      	cmp	r3, #128	; 0x80
 8009880:	bf0c      	ite	eq
 8009882:	2301      	moveq	r3, #1
 8009884:	2300      	movne	r3, #0
 8009886:	b2db      	uxtb	r3, r3
 8009888:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009890:	b2db      	uxtb	r3, r3
 8009892:	2b21      	cmp	r3, #33	; 0x21
 8009894:	d108      	bne.n	80098a8 <UART_DMAError+0x46>
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d005      	beq.n	80098a8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	2200      	movs	r2, #0
 80098a0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80098a2:	68b8      	ldr	r0, [r7, #8]
 80098a4:	f000 f8c6 	bl	8009a34 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	695b      	ldr	r3, [r3, #20]
 80098ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098b2:	2b40      	cmp	r3, #64	; 0x40
 80098b4:	bf0c      	ite	eq
 80098b6:	2301      	moveq	r3, #1
 80098b8:	2300      	movne	r3, #0
 80098ba:	b2db      	uxtb	r3, r3
 80098bc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80098c4:	b2db      	uxtb	r3, r3
 80098c6:	2b22      	cmp	r3, #34	; 0x22
 80098c8:	d108      	bne.n	80098dc <UART_DMAError+0x7a>
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d005      	beq.n	80098dc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	2200      	movs	r2, #0
 80098d4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80098d6:	68b8      	ldr	r0, [r7, #8]
 80098d8:	f000 f8d4 	bl	8009a84 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098e0:	f043 0210 	orr.w	r2, r3, #16
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80098e8:	68b8      	ldr	r0, [r7, #8]
 80098ea:	f7ff fe9b 	bl	8009624 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098ee:	bf00      	nop
 80098f0:	3710      	adds	r7, #16
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}
	...

080098f8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b098      	sub	sp, #96	; 0x60
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	60f8      	str	r0, [r7, #12]
 8009900:	60b9      	str	r1, [r7, #8]
 8009902:	4613      	mov	r3, r2
 8009904:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009906:	68ba      	ldr	r2, [r7, #8]
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	88fa      	ldrh	r2, [r7, #6]
 8009910:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2200      	movs	r2, #0
 8009916:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2222      	movs	r2, #34	; 0x22
 800991c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009924:	4a40      	ldr	r2, [pc, #256]	; (8009a28 <UART_Start_Receive_DMA+0x130>)
 8009926:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800992c:	4a3f      	ldr	r2, [pc, #252]	; (8009a2c <UART_Start_Receive_DMA+0x134>)
 800992e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009934:	4a3e      	ldr	r2, [pc, #248]	; (8009a30 <UART_Start_Receive_DMA+0x138>)
 8009936:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800993c:	2200      	movs	r2, #0
 800993e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009940:	f107 0308 	add.w	r3, r7, #8
 8009944:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	3304      	adds	r3, #4
 8009950:	4619      	mov	r1, r3
 8009952:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009954:	681a      	ldr	r2, [r3, #0]
 8009956:	88fb      	ldrh	r3, [r7, #6]
 8009958:	f7fa fd28 	bl	80043ac <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800995c:	2300      	movs	r3, #0
 800995e:	613b      	str	r3, [r7, #16]
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	613b      	str	r3, [r7, #16]
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	613b      	str	r3, [r7, #16]
 8009970:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	2200      	movs	r2, #0
 8009976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	691b      	ldr	r3, [r3, #16]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d019      	beq.n	80099b6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	330c      	adds	r3, #12
 8009988:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800998a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800998c:	e853 3f00 	ldrex	r3, [r3]
 8009990:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009998:	65bb      	str	r3, [r7, #88]	; 0x58
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	330c      	adds	r3, #12
 80099a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80099a2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80099a4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099a6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80099a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80099aa:	e841 2300 	strex	r3, r2, [r1]
 80099ae:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80099b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d1e5      	bne.n	8009982 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	3314      	adds	r3, #20
 80099bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099c0:	e853 3f00 	ldrex	r3, [r3]
 80099c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80099c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c8:	f043 0301 	orr.w	r3, r3, #1
 80099cc:	657b      	str	r3, [r7, #84]	; 0x54
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	3314      	adds	r3, #20
 80099d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80099d6:	63ba      	str	r2, [r7, #56]	; 0x38
 80099d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099da:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80099dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80099de:	e841 2300 	strex	r3, r2, [r1]
 80099e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80099e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d1e5      	bne.n	80099b6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	3314      	adds	r3, #20
 80099f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f2:	69bb      	ldr	r3, [r7, #24]
 80099f4:	e853 3f00 	ldrex	r3, [r3]
 80099f8:	617b      	str	r3, [r7, #20]
   return(result);
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a00:	653b      	str	r3, [r7, #80]	; 0x50
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	3314      	adds	r3, #20
 8009a08:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009a0a:	627a      	str	r2, [r7, #36]	; 0x24
 8009a0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a0e:	6a39      	ldr	r1, [r7, #32]
 8009a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a12:	e841 2300 	strex	r3, r2, [r1]
 8009a16:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a18:	69fb      	ldr	r3, [r7, #28]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d1e5      	bne.n	80099ea <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8009a1e:	2300      	movs	r3, #0
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	3760      	adds	r7, #96	; 0x60
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}
 8009a28:	08009707 	.word	0x08009707
 8009a2c:	0800982d 	.word	0x0800982d
 8009a30:	08009863 	.word	0x08009863

08009a34 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b089      	sub	sp, #36	; 0x24
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	330c      	adds	r3, #12
 8009a42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	e853 3f00 	ldrex	r3, [r3]
 8009a4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009a52:	61fb      	str	r3, [r7, #28]
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	330c      	adds	r3, #12
 8009a5a:	69fa      	ldr	r2, [r7, #28]
 8009a5c:	61ba      	str	r2, [r7, #24]
 8009a5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a60:	6979      	ldr	r1, [r7, #20]
 8009a62:	69ba      	ldr	r2, [r7, #24]
 8009a64:	e841 2300 	strex	r3, r2, [r1]
 8009a68:	613b      	str	r3, [r7, #16]
   return(result);
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d1e5      	bne.n	8009a3c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2220      	movs	r2, #32
 8009a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009a78:	bf00      	nop
 8009a7a:	3724      	adds	r7, #36	; 0x24
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a82:	4770      	bx	lr

08009a84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b095      	sub	sp, #84	; 0x54
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	330c      	adds	r3, #12
 8009a92:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a96:	e853 3f00 	ldrex	r3, [r3]
 8009a9a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	330c      	adds	r3, #12
 8009aaa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009aac:	643a      	str	r2, [r7, #64]	; 0x40
 8009aae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009ab2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009ab4:	e841 2300 	strex	r3, r2, [r1]
 8009ab8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d1e5      	bne.n	8009a8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	3314      	adds	r3, #20
 8009ac6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ac8:	6a3b      	ldr	r3, [r7, #32]
 8009aca:	e853 3f00 	ldrex	r3, [r3]
 8009ace:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ad0:	69fb      	ldr	r3, [r7, #28]
 8009ad2:	f023 0301 	bic.w	r3, r3, #1
 8009ad6:	64bb      	str	r3, [r7, #72]	; 0x48
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	3314      	adds	r3, #20
 8009ade:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ae0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009ae2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ae4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ae6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ae8:	e841 2300 	strex	r3, r2, [r1]
 8009aec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d1e5      	bne.n	8009ac0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d119      	bne.n	8009b30 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	330c      	adds	r3, #12
 8009b02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	e853 3f00 	ldrex	r3, [r3]
 8009b0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	f023 0310 	bic.w	r3, r3, #16
 8009b12:	647b      	str	r3, [r7, #68]	; 0x44
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	330c      	adds	r3, #12
 8009b1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b1c:	61ba      	str	r2, [r7, #24]
 8009b1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b20:	6979      	ldr	r1, [r7, #20]
 8009b22:	69ba      	ldr	r2, [r7, #24]
 8009b24:	e841 2300 	strex	r3, r2, [r1]
 8009b28:	613b      	str	r3, [r7, #16]
   return(result);
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d1e5      	bne.n	8009afc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2220      	movs	r2, #32
 8009b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009b3e:	bf00      	nop
 8009b40:	3754      	adds	r7, #84	; 0x54
 8009b42:	46bd      	mov	sp, r7
 8009b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b48:	4770      	bx	lr

08009b4a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009b4a:	b580      	push	{r7, lr}
 8009b4c:	b084      	sub	sp, #16
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b56:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	2200      	movs	r2, #0
 8009b62:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009b64:	68f8      	ldr	r0, [r7, #12]
 8009b66:	f7ff fd5d 	bl	8009624 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b6a:	bf00      	nop
 8009b6c:	3710      	adds	r7, #16
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}

08009b72 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009b72:	b480      	push	{r7}
 8009b74:	b085      	sub	sp, #20
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b80:	b2db      	uxtb	r3, r3
 8009b82:	2b21      	cmp	r3, #33	; 0x21
 8009b84:	d13e      	bne.n	8009c04 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	689b      	ldr	r3, [r3, #8]
 8009b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b8e:	d114      	bne.n	8009bba <UART_Transmit_IT+0x48>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	691b      	ldr	r3, [r3, #16]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d110      	bne.n	8009bba <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6a1b      	ldr	r3, [r3, #32]
 8009b9c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	881b      	ldrh	r3, [r3, #0]
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009bac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6a1b      	ldr	r3, [r3, #32]
 8009bb2:	1c9a      	adds	r2, r3, #2
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	621a      	str	r2, [r3, #32]
 8009bb8:	e008      	b.n	8009bcc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6a1b      	ldr	r3, [r3, #32]
 8009bbe:	1c59      	adds	r1, r3, #1
 8009bc0:	687a      	ldr	r2, [r7, #4]
 8009bc2:	6211      	str	r1, [r2, #32]
 8009bc4:	781a      	ldrb	r2, [r3, #0]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	3b01      	subs	r3, #1
 8009bd4:	b29b      	uxth	r3, r3
 8009bd6:	687a      	ldr	r2, [r7, #4]
 8009bd8:	4619      	mov	r1, r3
 8009bda:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d10f      	bne.n	8009c00 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	68da      	ldr	r2, [r3, #12]
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009bee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	68da      	ldr	r2, [r3, #12]
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009bfe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009c00:	2300      	movs	r3, #0
 8009c02:	e000      	b.n	8009c06 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009c04:	2302      	movs	r3, #2
  }
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3714      	adds	r7, #20
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c10:	4770      	bx	lr

08009c12 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009c12:	b580      	push	{r7, lr}
 8009c14:	b082      	sub	sp, #8
 8009c16:	af00      	add	r7, sp, #0
 8009c18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	68da      	ldr	r2, [r3, #12]
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c28:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2220      	movs	r2, #32
 8009c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f7ff fcce 	bl	80095d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009c38:	2300      	movs	r3, #0
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3708      	adds	r7, #8
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}

08009c42 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009c42:	b580      	push	{r7, lr}
 8009c44:	b08c      	sub	sp, #48	; 0x30
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009c50:	b2db      	uxtb	r3, r3
 8009c52:	2b22      	cmp	r3, #34	; 0x22
 8009c54:	f040 80ab 	bne.w	8009dae <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	689b      	ldr	r3, [r3, #8]
 8009c5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c60:	d117      	bne.n	8009c92 <UART_Receive_IT+0x50>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	691b      	ldr	r3, [r3, #16]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d113      	bne.n	8009c92 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c72:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	685b      	ldr	r3, [r3, #4]
 8009c7a:	b29b      	uxth	r3, r3
 8009c7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c80:	b29a      	uxth	r2, r3
 8009c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c84:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c8a:	1c9a      	adds	r2, r3, #2
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	629a      	str	r2, [r3, #40]	; 0x28
 8009c90:	e026      	b.n	8009ce0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c96:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	689b      	ldr	r3, [r3, #8]
 8009ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ca4:	d007      	beq.n	8009cb6 <UART_Receive_IT+0x74>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	689b      	ldr	r3, [r3, #8]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d10a      	bne.n	8009cc4 <UART_Receive_IT+0x82>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	691b      	ldr	r3, [r3, #16]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d106      	bne.n	8009cc4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	b2da      	uxtb	r2, r3
 8009cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cc0:	701a      	strb	r2, [r3, #0]
 8009cc2:	e008      	b.n	8009cd6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	685b      	ldr	r3, [r3, #4]
 8009cca:	b2db      	uxtb	r3, r3
 8009ccc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cd0:	b2da      	uxtb	r2, r3
 8009cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cd4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cda:	1c5a      	adds	r2, r3, #1
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009ce4:	b29b      	uxth	r3, r3
 8009ce6:	3b01      	subs	r3, #1
 8009ce8:	b29b      	uxth	r3, r3
 8009cea:	687a      	ldr	r2, [r7, #4]
 8009cec:	4619      	mov	r1, r3
 8009cee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d15a      	bne.n	8009daa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	68da      	ldr	r2, [r3, #12]
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f022 0220 	bic.w	r2, r2, #32
 8009d02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	68da      	ldr	r2, [r3, #12]
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009d12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	695a      	ldr	r2, [r3, #20]
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f022 0201 	bic.w	r2, r2, #1
 8009d22:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2220      	movs	r2, #32
 8009d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d30:	2b01      	cmp	r3, #1
 8009d32:	d135      	bne.n	8009da0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2200      	movs	r2, #0
 8009d38:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	330c      	adds	r3, #12
 8009d40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	e853 3f00 	ldrex	r3, [r3]
 8009d48:	613b      	str	r3, [r7, #16]
   return(result);
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	f023 0310 	bic.w	r3, r3, #16
 8009d50:	627b      	str	r3, [r7, #36]	; 0x24
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	330c      	adds	r3, #12
 8009d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d5a:	623a      	str	r2, [r7, #32]
 8009d5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d5e:	69f9      	ldr	r1, [r7, #28]
 8009d60:	6a3a      	ldr	r2, [r7, #32]
 8009d62:	e841 2300 	strex	r3, r2, [r1]
 8009d66:	61bb      	str	r3, [r7, #24]
   return(result);
 8009d68:	69bb      	ldr	r3, [r7, #24]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d1e5      	bne.n	8009d3a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f003 0310 	and.w	r3, r3, #16
 8009d78:	2b10      	cmp	r3, #16
 8009d7a:	d10a      	bne.n	8009d92 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	60fb      	str	r3, [r7, #12]
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	60fb      	str	r3, [r7, #12]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	60fb      	str	r3, [r7, #12]
 8009d90:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009d96:	4619      	mov	r1, r3
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f7ff fc4d 	bl	8009638 <HAL_UARTEx_RxEventCallback>
 8009d9e:	e002      	b.n	8009da6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f7ff fc2b 	bl	80095fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009da6:	2300      	movs	r3, #0
 8009da8:	e002      	b.n	8009db0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009daa:	2300      	movs	r3, #0
 8009dac:	e000      	b.n	8009db0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009dae:	2302      	movs	r3, #2
  }
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3730      	adds	r7, #48	; 0x30
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}

08009db8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009db8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009dbc:	b0c0      	sub	sp, #256	; 0x100
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	691b      	ldr	r3, [r3, #16]
 8009dcc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dd4:	68d9      	ldr	r1, [r3, #12]
 8009dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dda:	681a      	ldr	r2, [r3, #0]
 8009ddc:	ea40 0301 	orr.w	r3, r0, r1
 8009de0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009de6:	689a      	ldr	r2, [r3, #8]
 8009de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dec:	691b      	ldr	r3, [r3, #16]
 8009dee:	431a      	orrs	r2, r3
 8009df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009df4:	695b      	ldr	r3, [r3, #20]
 8009df6:	431a      	orrs	r2, r3
 8009df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dfc:	69db      	ldr	r3, [r3, #28]
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	68db      	ldr	r3, [r3, #12]
 8009e0c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009e10:	f021 010c 	bic.w	r1, r1, #12
 8009e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e18:	681a      	ldr	r2, [r3, #0]
 8009e1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009e1e:	430b      	orrs	r3, r1
 8009e20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	695b      	ldr	r3, [r3, #20]
 8009e2a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e32:	6999      	ldr	r1, [r3, #24]
 8009e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e38:	681a      	ldr	r2, [r3, #0]
 8009e3a:	ea40 0301 	orr.w	r3, r0, r1
 8009e3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e44:	681a      	ldr	r2, [r3, #0]
 8009e46:	4b8f      	ldr	r3, [pc, #572]	; (800a084 <UART_SetConfig+0x2cc>)
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d005      	beq.n	8009e58 <UART_SetConfig+0xa0>
 8009e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e50:	681a      	ldr	r2, [r3, #0]
 8009e52:	4b8d      	ldr	r3, [pc, #564]	; (800a088 <UART_SetConfig+0x2d0>)
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d104      	bne.n	8009e62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009e58:	f7fe f88c 	bl	8007f74 <HAL_RCC_GetPCLK2Freq>
 8009e5c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009e60:	e003      	b.n	8009e6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009e62:	f7fe f873 	bl	8007f4c <HAL_RCC_GetPCLK1Freq>
 8009e66:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e6e:	69db      	ldr	r3, [r3, #28]
 8009e70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e74:	f040 810c 	bne.w	800a090 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009e78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009e82:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009e86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009e8a:	4622      	mov	r2, r4
 8009e8c:	462b      	mov	r3, r5
 8009e8e:	1891      	adds	r1, r2, r2
 8009e90:	65b9      	str	r1, [r7, #88]	; 0x58
 8009e92:	415b      	adcs	r3, r3
 8009e94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009e96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009e9a:	4621      	mov	r1, r4
 8009e9c:	eb12 0801 	adds.w	r8, r2, r1
 8009ea0:	4629      	mov	r1, r5
 8009ea2:	eb43 0901 	adc.w	r9, r3, r1
 8009ea6:	f04f 0200 	mov.w	r2, #0
 8009eaa:	f04f 0300 	mov.w	r3, #0
 8009eae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009eb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009eb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009eba:	4690      	mov	r8, r2
 8009ebc:	4699      	mov	r9, r3
 8009ebe:	4623      	mov	r3, r4
 8009ec0:	eb18 0303 	adds.w	r3, r8, r3
 8009ec4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009ec8:	462b      	mov	r3, r5
 8009eca:	eb49 0303 	adc.w	r3, r9, r3
 8009ece:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009ede:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009ee2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009ee6:	460b      	mov	r3, r1
 8009ee8:	18db      	adds	r3, r3, r3
 8009eea:	653b      	str	r3, [r7, #80]	; 0x50
 8009eec:	4613      	mov	r3, r2
 8009eee:	eb42 0303 	adc.w	r3, r2, r3
 8009ef2:	657b      	str	r3, [r7, #84]	; 0x54
 8009ef4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009ef8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009efc:	f7f6 fece 	bl	8000c9c <__aeabi_uldivmod>
 8009f00:	4602      	mov	r2, r0
 8009f02:	460b      	mov	r3, r1
 8009f04:	4b61      	ldr	r3, [pc, #388]	; (800a08c <UART_SetConfig+0x2d4>)
 8009f06:	fba3 2302 	umull	r2, r3, r3, r2
 8009f0a:	095b      	lsrs	r3, r3, #5
 8009f0c:	011c      	lsls	r4, r3, #4
 8009f0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f12:	2200      	movs	r2, #0
 8009f14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009f18:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009f1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009f20:	4642      	mov	r2, r8
 8009f22:	464b      	mov	r3, r9
 8009f24:	1891      	adds	r1, r2, r2
 8009f26:	64b9      	str	r1, [r7, #72]	; 0x48
 8009f28:	415b      	adcs	r3, r3
 8009f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009f30:	4641      	mov	r1, r8
 8009f32:	eb12 0a01 	adds.w	sl, r2, r1
 8009f36:	4649      	mov	r1, r9
 8009f38:	eb43 0b01 	adc.w	fp, r3, r1
 8009f3c:	f04f 0200 	mov.w	r2, #0
 8009f40:	f04f 0300 	mov.w	r3, #0
 8009f44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009f48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009f4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009f50:	4692      	mov	sl, r2
 8009f52:	469b      	mov	fp, r3
 8009f54:	4643      	mov	r3, r8
 8009f56:	eb1a 0303 	adds.w	r3, sl, r3
 8009f5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009f5e:	464b      	mov	r3, r9
 8009f60:	eb4b 0303 	adc.w	r3, fp, r3
 8009f64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009f74:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009f78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	18db      	adds	r3, r3, r3
 8009f80:	643b      	str	r3, [r7, #64]	; 0x40
 8009f82:	4613      	mov	r3, r2
 8009f84:	eb42 0303 	adc.w	r3, r2, r3
 8009f88:	647b      	str	r3, [r7, #68]	; 0x44
 8009f8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009f8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009f92:	f7f6 fe83 	bl	8000c9c <__aeabi_uldivmod>
 8009f96:	4602      	mov	r2, r0
 8009f98:	460b      	mov	r3, r1
 8009f9a:	4611      	mov	r1, r2
 8009f9c:	4b3b      	ldr	r3, [pc, #236]	; (800a08c <UART_SetConfig+0x2d4>)
 8009f9e:	fba3 2301 	umull	r2, r3, r3, r1
 8009fa2:	095b      	lsrs	r3, r3, #5
 8009fa4:	2264      	movs	r2, #100	; 0x64
 8009fa6:	fb02 f303 	mul.w	r3, r2, r3
 8009faa:	1acb      	subs	r3, r1, r3
 8009fac:	00db      	lsls	r3, r3, #3
 8009fae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009fb2:	4b36      	ldr	r3, [pc, #216]	; (800a08c <UART_SetConfig+0x2d4>)
 8009fb4:	fba3 2302 	umull	r2, r3, r3, r2
 8009fb8:	095b      	lsrs	r3, r3, #5
 8009fba:	005b      	lsls	r3, r3, #1
 8009fbc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009fc0:	441c      	add	r4, r3
 8009fc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009fcc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009fd0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009fd4:	4642      	mov	r2, r8
 8009fd6:	464b      	mov	r3, r9
 8009fd8:	1891      	adds	r1, r2, r2
 8009fda:	63b9      	str	r1, [r7, #56]	; 0x38
 8009fdc:	415b      	adcs	r3, r3
 8009fde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fe0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009fe4:	4641      	mov	r1, r8
 8009fe6:	1851      	adds	r1, r2, r1
 8009fe8:	6339      	str	r1, [r7, #48]	; 0x30
 8009fea:	4649      	mov	r1, r9
 8009fec:	414b      	adcs	r3, r1
 8009fee:	637b      	str	r3, [r7, #52]	; 0x34
 8009ff0:	f04f 0200 	mov.w	r2, #0
 8009ff4:	f04f 0300 	mov.w	r3, #0
 8009ff8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009ffc:	4659      	mov	r1, fp
 8009ffe:	00cb      	lsls	r3, r1, #3
 800a000:	4651      	mov	r1, sl
 800a002:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a006:	4651      	mov	r1, sl
 800a008:	00ca      	lsls	r2, r1, #3
 800a00a:	4610      	mov	r0, r2
 800a00c:	4619      	mov	r1, r3
 800a00e:	4603      	mov	r3, r0
 800a010:	4642      	mov	r2, r8
 800a012:	189b      	adds	r3, r3, r2
 800a014:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a018:	464b      	mov	r3, r9
 800a01a:	460a      	mov	r2, r1
 800a01c:	eb42 0303 	adc.w	r3, r2, r3
 800a020:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a028:	685b      	ldr	r3, [r3, #4]
 800a02a:	2200      	movs	r2, #0
 800a02c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a030:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a034:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a038:	460b      	mov	r3, r1
 800a03a:	18db      	adds	r3, r3, r3
 800a03c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a03e:	4613      	mov	r3, r2
 800a040:	eb42 0303 	adc.w	r3, r2, r3
 800a044:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a046:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a04a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a04e:	f7f6 fe25 	bl	8000c9c <__aeabi_uldivmod>
 800a052:	4602      	mov	r2, r0
 800a054:	460b      	mov	r3, r1
 800a056:	4b0d      	ldr	r3, [pc, #52]	; (800a08c <UART_SetConfig+0x2d4>)
 800a058:	fba3 1302 	umull	r1, r3, r3, r2
 800a05c:	095b      	lsrs	r3, r3, #5
 800a05e:	2164      	movs	r1, #100	; 0x64
 800a060:	fb01 f303 	mul.w	r3, r1, r3
 800a064:	1ad3      	subs	r3, r2, r3
 800a066:	00db      	lsls	r3, r3, #3
 800a068:	3332      	adds	r3, #50	; 0x32
 800a06a:	4a08      	ldr	r2, [pc, #32]	; (800a08c <UART_SetConfig+0x2d4>)
 800a06c:	fba2 2303 	umull	r2, r3, r2, r3
 800a070:	095b      	lsrs	r3, r3, #5
 800a072:	f003 0207 	and.w	r2, r3, #7
 800a076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	4422      	add	r2, r4
 800a07e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a080:	e106      	b.n	800a290 <UART_SetConfig+0x4d8>
 800a082:	bf00      	nop
 800a084:	40011000 	.word	0x40011000
 800a088:	40011400 	.word	0x40011400
 800a08c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a090:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a094:	2200      	movs	r2, #0
 800a096:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a09a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a09e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a0a2:	4642      	mov	r2, r8
 800a0a4:	464b      	mov	r3, r9
 800a0a6:	1891      	adds	r1, r2, r2
 800a0a8:	6239      	str	r1, [r7, #32]
 800a0aa:	415b      	adcs	r3, r3
 800a0ac:	627b      	str	r3, [r7, #36]	; 0x24
 800a0ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a0b2:	4641      	mov	r1, r8
 800a0b4:	1854      	adds	r4, r2, r1
 800a0b6:	4649      	mov	r1, r9
 800a0b8:	eb43 0501 	adc.w	r5, r3, r1
 800a0bc:	f04f 0200 	mov.w	r2, #0
 800a0c0:	f04f 0300 	mov.w	r3, #0
 800a0c4:	00eb      	lsls	r3, r5, #3
 800a0c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a0ca:	00e2      	lsls	r2, r4, #3
 800a0cc:	4614      	mov	r4, r2
 800a0ce:	461d      	mov	r5, r3
 800a0d0:	4643      	mov	r3, r8
 800a0d2:	18e3      	adds	r3, r4, r3
 800a0d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a0d8:	464b      	mov	r3, r9
 800a0da:	eb45 0303 	adc.w	r3, r5, r3
 800a0de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a0e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0e6:	685b      	ldr	r3, [r3, #4]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a0ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a0f2:	f04f 0200 	mov.w	r2, #0
 800a0f6:	f04f 0300 	mov.w	r3, #0
 800a0fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a0fe:	4629      	mov	r1, r5
 800a100:	008b      	lsls	r3, r1, #2
 800a102:	4621      	mov	r1, r4
 800a104:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a108:	4621      	mov	r1, r4
 800a10a:	008a      	lsls	r2, r1, #2
 800a10c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a110:	f7f6 fdc4 	bl	8000c9c <__aeabi_uldivmod>
 800a114:	4602      	mov	r2, r0
 800a116:	460b      	mov	r3, r1
 800a118:	4b60      	ldr	r3, [pc, #384]	; (800a29c <UART_SetConfig+0x4e4>)
 800a11a:	fba3 2302 	umull	r2, r3, r3, r2
 800a11e:	095b      	lsrs	r3, r3, #5
 800a120:	011c      	lsls	r4, r3, #4
 800a122:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a126:	2200      	movs	r2, #0
 800a128:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a12c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a130:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a134:	4642      	mov	r2, r8
 800a136:	464b      	mov	r3, r9
 800a138:	1891      	adds	r1, r2, r2
 800a13a:	61b9      	str	r1, [r7, #24]
 800a13c:	415b      	adcs	r3, r3
 800a13e:	61fb      	str	r3, [r7, #28]
 800a140:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a144:	4641      	mov	r1, r8
 800a146:	1851      	adds	r1, r2, r1
 800a148:	6139      	str	r1, [r7, #16]
 800a14a:	4649      	mov	r1, r9
 800a14c:	414b      	adcs	r3, r1
 800a14e:	617b      	str	r3, [r7, #20]
 800a150:	f04f 0200 	mov.w	r2, #0
 800a154:	f04f 0300 	mov.w	r3, #0
 800a158:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a15c:	4659      	mov	r1, fp
 800a15e:	00cb      	lsls	r3, r1, #3
 800a160:	4651      	mov	r1, sl
 800a162:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a166:	4651      	mov	r1, sl
 800a168:	00ca      	lsls	r2, r1, #3
 800a16a:	4610      	mov	r0, r2
 800a16c:	4619      	mov	r1, r3
 800a16e:	4603      	mov	r3, r0
 800a170:	4642      	mov	r2, r8
 800a172:	189b      	adds	r3, r3, r2
 800a174:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a178:	464b      	mov	r3, r9
 800a17a:	460a      	mov	r2, r1
 800a17c:	eb42 0303 	adc.w	r3, r2, r3
 800a180:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	2200      	movs	r2, #0
 800a18c:	67bb      	str	r3, [r7, #120]	; 0x78
 800a18e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a190:	f04f 0200 	mov.w	r2, #0
 800a194:	f04f 0300 	mov.w	r3, #0
 800a198:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a19c:	4649      	mov	r1, r9
 800a19e:	008b      	lsls	r3, r1, #2
 800a1a0:	4641      	mov	r1, r8
 800a1a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a1a6:	4641      	mov	r1, r8
 800a1a8:	008a      	lsls	r2, r1, #2
 800a1aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a1ae:	f7f6 fd75 	bl	8000c9c <__aeabi_uldivmod>
 800a1b2:	4602      	mov	r2, r0
 800a1b4:	460b      	mov	r3, r1
 800a1b6:	4611      	mov	r1, r2
 800a1b8:	4b38      	ldr	r3, [pc, #224]	; (800a29c <UART_SetConfig+0x4e4>)
 800a1ba:	fba3 2301 	umull	r2, r3, r3, r1
 800a1be:	095b      	lsrs	r3, r3, #5
 800a1c0:	2264      	movs	r2, #100	; 0x64
 800a1c2:	fb02 f303 	mul.w	r3, r2, r3
 800a1c6:	1acb      	subs	r3, r1, r3
 800a1c8:	011b      	lsls	r3, r3, #4
 800a1ca:	3332      	adds	r3, #50	; 0x32
 800a1cc:	4a33      	ldr	r2, [pc, #204]	; (800a29c <UART_SetConfig+0x4e4>)
 800a1ce:	fba2 2303 	umull	r2, r3, r2, r3
 800a1d2:	095b      	lsrs	r3, r3, #5
 800a1d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a1d8:	441c      	add	r4, r3
 800a1da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a1de:	2200      	movs	r2, #0
 800a1e0:	673b      	str	r3, [r7, #112]	; 0x70
 800a1e2:	677a      	str	r2, [r7, #116]	; 0x74
 800a1e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a1e8:	4642      	mov	r2, r8
 800a1ea:	464b      	mov	r3, r9
 800a1ec:	1891      	adds	r1, r2, r2
 800a1ee:	60b9      	str	r1, [r7, #8]
 800a1f0:	415b      	adcs	r3, r3
 800a1f2:	60fb      	str	r3, [r7, #12]
 800a1f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a1f8:	4641      	mov	r1, r8
 800a1fa:	1851      	adds	r1, r2, r1
 800a1fc:	6039      	str	r1, [r7, #0]
 800a1fe:	4649      	mov	r1, r9
 800a200:	414b      	adcs	r3, r1
 800a202:	607b      	str	r3, [r7, #4]
 800a204:	f04f 0200 	mov.w	r2, #0
 800a208:	f04f 0300 	mov.w	r3, #0
 800a20c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a210:	4659      	mov	r1, fp
 800a212:	00cb      	lsls	r3, r1, #3
 800a214:	4651      	mov	r1, sl
 800a216:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a21a:	4651      	mov	r1, sl
 800a21c:	00ca      	lsls	r2, r1, #3
 800a21e:	4610      	mov	r0, r2
 800a220:	4619      	mov	r1, r3
 800a222:	4603      	mov	r3, r0
 800a224:	4642      	mov	r2, r8
 800a226:	189b      	adds	r3, r3, r2
 800a228:	66bb      	str	r3, [r7, #104]	; 0x68
 800a22a:	464b      	mov	r3, r9
 800a22c:	460a      	mov	r2, r1
 800a22e:	eb42 0303 	adc.w	r3, r2, r3
 800a232:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	2200      	movs	r2, #0
 800a23c:	663b      	str	r3, [r7, #96]	; 0x60
 800a23e:	667a      	str	r2, [r7, #100]	; 0x64
 800a240:	f04f 0200 	mov.w	r2, #0
 800a244:	f04f 0300 	mov.w	r3, #0
 800a248:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a24c:	4649      	mov	r1, r9
 800a24e:	008b      	lsls	r3, r1, #2
 800a250:	4641      	mov	r1, r8
 800a252:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a256:	4641      	mov	r1, r8
 800a258:	008a      	lsls	r2, r1, #2
 800a25a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a25e:	f7f6 fd1d 	bl	8000c9c <__aeabi_uldivmod>
 800a262:	4602      	mov	r2, r0
 800a264:	460b      	mov	r3, r1
 800a266:	4b0d      	ldr	r3, [pc, #52]	; (800a29c <UART_SetConfig+0x4e4>)
 800a268:	fba3 1302 	umull	r1, r3, r3, r2
 800a26c:	095b      	lsrs	r3, r3, #5
 800a26e:	2164      	movs	r1, #100	; 0x64
 800a270:	fb01 f303 	mul.w	r3, r1, r3
 800a274:	1ad3      	subs	r3, r2, r3
 800a276:	011b      	lsls	r3, r3, #4
 800a278:	3332      	adds	r3, #50	; 0x32
 800a27a:	4a08      	ldr	r2, [pc, #32]	; (800a29c <UART_SetConfig+0x4e4>)
 800a27c:	fba2 2303 	umull	r2, r3, r2, r3
 800a280:	095b      	lsrs	r3, r3, #5
 800a282:	f003 020f 	and.w	r2, r3, #15
 800a286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4422      	add	r2, r4
 800a28e:	609a      	str	r2, [r3, #8]
}
 800a290:	bf00      	nop
 800a292:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a296:	46bd      	mov	sp, r7
 800a298:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a29c:	51eb851f 	.word	0x51eb851f

0800a2a0 <__NVIC_SetPriority>:
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b083      	sub	sp, #12
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	6039      	str	r1, [r7, #0]
 800a2aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a2ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	db0a      	blt.n	800a2ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	b2da      	uxtb	r2, r3
 800a2b8:	490c      	ldr	r1, [pc, #48]	; (800a2ec <__NVIC_SetPriority+0x4c>)
 800a2ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a2be:	0112      	lsls	r2, r2, #4
 800a2c0:	b2d2      	uxtb	r2, r2
 800a2c2:	440b      	add	r3, r1
 800a2c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a2c8:	e00a      	b.n	800a2e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	b2da      	uxtb	r2, r3
 800a2ce:	4908      	ldr	r1, [pc, #32]	; (800a2f0 <__NVIC_SetPriority+0x50>)
 800a2d0:	79fb      	ldrb	r3, [r7, #7]
 800a2d2:	f003 030f 	and.w	r3, r3, #15
 800a2d6:	3b04      	subs	r3, #4
 800a2d8:	0112      	lsls	r2, r2, #4
 800a2da:	b2d2      	uxtb	r2, r2
 800a2dc:	440b      	add	r3, r1
 800a2de:	761a      	strb	r2, [r3, #24]
}
 800a2e0:	bf00      	nop
 800a2e2:	370c      	adds	r7, #12
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr
 800a2ec:	e000e100 	.word	0xe000e100
 800a2f0:	e000ed00 	.word	0xe000ed00

0800a2f4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a2f8:	4b05      	ldr	r3, [pc, #20]	; (800a310 <SysTick_Handler+0x1c>)
 800a2fa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a2fc:	f001 fe1a 	bl	800bf34 <xTaskGetSchedulerState>
 800a300:	4603      	mov	r3, r0
 800a302:	2b01      	cmp	r3, #1
 800a304:	d001      	beq.n	800a30a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a306:	f002 fcff 	bl	800cd08 <xPortSysTickHandler>
  }
}
 800a30a:	bf00      	nop
 800a30c:	bd80      	pop	{r7, pc}
 800a30e:	bf00      	nop
 800a310:	e000e010 	.word	0xe000e010

0800a314 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a314:	b580      	push	{r7, lr}
 800a316:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a318:	2100      	movs	r1, #0
 800a31a:	f06f 0004 	mvn.w	r0, #4
 800a31e:	f7ff ffbf 	bl	800a2a0 <__NVIC_SetPriority>
#endif
}
 800a322:	bf00      	nop
 800a324:	bd80      	pop	{r7, pc}
	...

0800a328 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a328:	b480      	push	{r7}
 800a32a:	b083      	sub	sp, #12
 800a32c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a32e:	f3ef 8305 	mrs	r3, IPSR
 800a332:	603b      	str	r3, [r7, #0]
  return(result);
 800a334:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a336:	2b00      	cmp	r3, #0
 800a338:	d003      	beq.n	800a342 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a33a:	f06f 0305 	mvn.w	r3, #5
 800a33e:	607b      	str	r3, [r7, #4]
 800a340:	e00c      	b.n	800a35c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a342:	4b0a      	ldr	r3, [pc, #40]	; (800a36c <osKernelInitialize+0x44>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d105      	bne.n	800a356 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a34a:	4b08      	ldr	r3, [pc, #32]	; (800a36c <osKernelInitialize+0x44>)
 800a34c:	2201      	movs	r2, #1
 800a34e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a350:	2300      	movs	r3, #0
 800a352:	607b      	str	r3, [r7, #4]
 800a354:	e002      	b.n	800a35c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a356:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a35a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a35c:	687b      	ldr	r3, [r7, #4]
}
 800a35e:	4618      	mov	r0, r3
 800a360:	370c      	adds	r7, #12
 800a362:	46bd      	mov	sp, r7
 800a364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a368:	4770      	bx	lr
 800a36a:	bf00      	nop
 800a36c:	20004940 	.word	0x20004940

0800a370 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a370:	b580      	push	{r7, lr}
 800a372:	b082      	sub	sp, #8
 800a374:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a376:	f3ef 8305 	mrs	r3, IPSR
 800a37a:	603b      	str	r3, [r7, #0]
  return(result);
 800a37c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d003      	beq.n	800a38a <osKernelStart+0x1a>
    stat = osErrorISR;
 800a382:	f06f 0305 	mvn.w	r3, #5
 800a386:	607b      	str	r3, [r7, #4]
 800a388:	e010      	b.n	800a3ac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a38a:	4b0b      	ldr	r3, [pc, #44]	; (800a3b8 <osKernelStart+0x48>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	2b01      	cmp	r3, #1
 800a390:	d109      	bne.n	800a3a6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a392:	f7ff ffbf 	bl	800a314 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a396:	4b08      	ldr	r3, [pc, #32]	; (800a3b8 <osKernelStart+0x48>)
 800a398:	2202      	movs	r2, #2
 800a39a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a39c:	f001 f948 	bl	800b630 <vTaskStartScheduler>
      stat = osOK;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	607b      	str	r3, [r7, #4]
 800a3a4:	e002      	b.n	800a3ac <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a3a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a3aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a3ac:	687b      	ldr	r3, [r7, #4]
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3708      	adds	r7, #8
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}
 800a3b6:	bf00      	nop
 800a3b8:	20004940 	.word	0x20004940

0800a3bc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b084      	sub	sp, #16
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3c4:	f3ef 8305 	mrs	r3, IPSR
 800a3c8:	60bb      	str	r3, [r7, #8]
  return(result);
 800a3ca:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d003      	beq.n	800a3d8 <osDelay+0x1c>
    stat = osErrorISR;
 800a3d0:	f06f 0305 	mvn.w	r3, #5
 800a3d4:	60fb      	str	r3, [r7, #12]
 800a3d6:	e007      	b.n	800a3e8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d002      	beq.n	800a3e8 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f001 f8f0 	bl	800b5c8 <vTaskDelay>
    }
  }

  return (stat);
 800a3e8:	68fb      	ldr	r3, [r7, #12]
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3710      	adds	r7, #16
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}
	...

0800a3f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a3f4:	b480      	push	{r7}
 800a3f6:	b085      	sub	sp, #20
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	60f8      	str	r0, [r7, #12]
 800a3fc:	60b9      	str	r1, [r7, #8]
 800a3fe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	4a07      	ldr	r2, [pc, #28]	; (800a420 <vApplicationGetIdleTaskMemory+0x2c>)
 800a404:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	4a06      	ldr	r2, [pc, #24]	; (800a424 <vApplicationGetIdleTaskMemory+0x30>)
 800a40a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2280      	movs	r2, #128	; 0x80
 800a410:	601a      	str	r2, [r3, #0]
}
 800a412:	bf00      	nop
 800a414:	3714      	adds	r7, #20
 800a416:	46bd      	mov	sp, r7
 800a418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41c:	4770      	bx	lr
 800a41e:	bf00      	nop
 800a420:	20004944 	.word	0x20004944
 800a424:	200049ec 	.word	0x200049ec

0800a428 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a428:	b480      	push	{r7}
 800a42a:	b085      	sub	sp, #20
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	60f8      	str	r0, [r7, #12]
 800a430:	60b9      	str	r1, [r7, #8]
 800a432:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	4a07      	ldr	r2, [pc, #28]	; (800a454 <vApplicationGetTimerTaskMemory+0x2c>)
 800a438:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	4a06      	ldr	r2, [pc, #24]	; (800a458 <vApplicationGetTimerTaskMemory+0x30>)
 800a43e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a446:	601a      	str	r2, [r3, #0]
}
 800a448:	bf00      	nop
 800a44a:	3714      	adds	r7, #20
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr
 800a454:	20004bec 	.word	0x20004bec
 800a458:	20004c94 	.word	0x20004c94

0800a45c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a45c:	b480      	push	{r7}
 800a45e:	b083      	sub	sp, #12
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f103 0208 	add.w	r2, r3, #8
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a474:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f103 0208 	add.w	r2, r3, #8
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f103 0208 	add.w	r2, r3, #8
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2200      	movs	r2, #0
 800a48e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a490:	bf00      	nop
 800a492:	370c      	adds	r7, #12
 800a494:	46bd      	mov	sp, r7
 800a496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49a:	4770      	bx	lr

0800a49c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a49c:	b480      	push	{r7}
 800a49e:	b083      	sub	sp, #12
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a4aa:	bf00      	nop
 800a4ac:	370c      	adds	r7, #12
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b4:	4770      	bx	lr

0800a4b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a4b6:	b480      	push	{r7}
 800a4b8:	b085      	sub	sp, #20
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	6078      	str	r0, [r7, #4]
 800a4be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	68fa      	ldr	r2, [r7, #12]
 800a4ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	689a      	ldr	r2, [r3, #8]
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	689b      	ldr	r3, [r3, #8]
 800a4d8:	683a      	ldr	r2, [r7, #0]
 800a4da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	683a      	ldr	r2, [r7, #0]
 800a4e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	687a      	ldr	r2, [r7, #4]
 800a4e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	1c5a      	adds	r2, r3, #1
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	601a      	str	r2, [r3, #0]
}
 800a4f2:	bf00      	nop
 800a4f4:	3714      	adds	r7, #20
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr

0800a4fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a4fe:	b480      	push	{r7}
 800a500:	b085      	sub	sp, #20
 800a502:	af00      	add	r7, sp, #0
 800a504:	6078      	str	r0, [r7, #4]
 800a506:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a514:	d103      	bne.n	800a51e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	691b      	ldr	r3, [r3, #16]
 800a51a:	60fb      	str	r3, [r7, #12]
 800a51c:	e00c      	b.n	800a538 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	3308      	adds	r3, #8
 800a522:	60fb      	str	r3, [r7, #12]
 800a524:	e002      	b.n	800a52c <vListInsert+0x2e>
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	685b      	ldr	r3, [r3, #4]
 800a52a:	60fb      	str	r3, [r7, #12]
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	685b      	ldr	r3, [r3, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	68ba      	ldr	r2, [r7, #8]
 800a534:	429a      	cmp	r2, r3
 800a536:	d2f6      	bcs.n	800a526 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	685a      	ldr	r2, [r3, #4]
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	683a      	ldr	r2, [r7, #0]
 800a546:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	68fa      	ldr	r2, [r7, #12]
 800a54c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	683a      	ldr	r2, [r7, #0]
 800a552:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	687a      	ldr	r2, [r7, #4]
 800a558:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	1c5a      	adds	r2, r3, #1
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	601a      	str	r2, [r3, #0]
}
 800a564:	bf00      	nop
 800a566:	3714      	adds	r7, #20
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr

0800a570 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a570:	b480      	push	{r7}
 800a572:	b085      	sub	sp, #20
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	691b      	ldr	r3, [r3, #16]
 800a57c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	685b      	ldr	r3, [r3, #4]
 800a582:	687a      	ldr	r2, [r7, #4]
 800a584:	6892      	ldr	r2, [r2, #8]
 800a586:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	689b      	ldr	r3, [r3, #8]
 800a58c:	687a      	ldr	r2, [r7, #4]
 800a58e:	6852      	ldr	r2, [r2, #4]
 800a590:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	685b      	ldr	r3, [r3, #4]
 800a596:	687a      	ldr	r2, [r7, #4]
 800a598:	429a      	cmp	r2, r3
 800a59a:	d103      	bne.n	800a5a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	689a      	ldr	r2, [r3, #8]
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	1e5a      	subs	r2, r3, #1
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3714      	adds	r7, #20
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c2:	4770      	bx	lr

0800a5c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b084      	sub	sp, #16
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
 800a5cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d10a      	bne.n	800a5ee <xQueueGenericReset+0x2a>
	__asm volatile
 800a5d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5dc:	f383 8811 	msr	BASEPRI, r3
 800a5e0:	f3bf 8f6f 	isb	sy
 800a5e4:	f3bf 8f4f 	dsb	sy
 800a5e8:	60bb      	str	r3, [r7, #8]
}
 800a5ea:	bf00      	nop
 800a5ec:	e7fe      	b.n	800a5ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a5ee:	f002 faf9 	bl	800cbe4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681a      	ldr	r2, [r3, #0]
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5fa:	68f9      	ldr	r1, [r7, #12]
 800a5fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a5fe:	fb01 f303 	mul.w	r3, r1, r3
 800a602:	441a      	add	r2, r3
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	2200      	movs	r2, #0
 800a60c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	681a      	ldr	r2, [r3, #0]
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681a      	ldr	r2, [r3, #0]
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a61e:	3b01      	subs	r3, #1
 800a620:	68f9      	ldr	r1, [r7, #12]
 800a622:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a624:	fb01 f303 	mul.w	r3, r1, r3
 800a628:	441a      	add	r2, r3
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	22ff      	movs	r2, #255	; 0xff
 800a632:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	22ff      	movs	r2, #255	; 0xff
 800a63a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d114      	bne.n	800a66e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	691b      	ldr	r3, [r3, #16]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d01a      	beq.n	800a682 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	3310      	adds	r3, #16
 800a650:	4618      	mov	r0, r3
 800a652:	f001 fa87 	bl	800bb64 <xTaskRemoveFromEventList>
 800a656:	4603      	mov	r3, r0
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d012      	beq.n	800a682 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a65c:	4b0c      	ldr	r3, [pc, #48]	; (800a690 <xQueueGenericReset+0xcc>)
 800a65e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a662:	601a      	str	r2, [r3, #0]
 800a664:	f3bf 8f4f 	dsb	sy
 800a668:	f3bf 8f6f 	isb	sy
 800a66c:	e009      	b.n	800a682 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	3310      	adds	r3, #16
 800a672:	4618      	mov	r0, r3
 800a674:	f7ff fef2 	bl	800a45c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	3324      	adds	r3, #36	; 0x24
 800a67c:	4618      	mov	r0, r3
 800a67e:	f7ff feed 	bl	800a45c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a682:	f002 fadf 	bl	800cc44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a686:	2301      	movs	r3, #1
}
 800a688:	4618      	mov	r0, r3
 800a68a:	3710      	adds	r7, #16
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}
 800a690:	e000ed04 	.word	0xe000ed04

0800a694 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a694:	b580      	push	{r7, lr}
 800a696:	b08e      	sub	sp, #56	; 0x38
 800a698:	af02      	add	r7, sp, #8
 800a69a:	60f8      	str	r0, [r7, #12]
 800a69c:	60b9      	str	r1, [r7, #8]
 800a69e:	607a      	str	r2, [r7, #4]
 800a6a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d10a      	bne.n	800a6be <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a6a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ac:	f383 8811 	msr	BASEPRI, r3
 800a6b0:	f3bf 8f6f 	isb	sy
 800a6b4:	f3bf 8f4f 	dsb	sy
 800a6b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a6ba:	bf00      	nop
 800a6bc:	e7fe      	b.n	800a6bc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d10a      	bne.n	800a6da <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a6c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c8:	f383 8811 	msr	BASEPRI, r3
 800a6cc:	f3bf 8f6f 	isb	sy
 800a6d0:	f3bf 8f4f 	dsb	sy
 800a6d4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a6d6:	bf00      	nop
 800a6d8:	e7fe      	b.n	800a6d8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d002      	beq.n	800a6e6 <xQueueGenericCreateStatic+0x52>
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d001      	beq.n	800a6ea <xQueueGenericCreateStatic+0x56>
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	e000      	b.n	800a6ec <xQueueGenericCreateStatic+0x58>
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d10a      	bne.n	800a706 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a6f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6f4:	f383 8811 	msr	BASEPRI, r3
 800a6f8:	f3bf 8f6f 	isb	sy
 800a6fc:	f3bf 8f4f 	dsb	sy
 800a700:	623b      	str	r3, [r7, #32]
}
 800a702:	bf00      	nop
 800a704:	e7fe      	b.n	800a704 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d102      	bne.n	800a712 <xQueueGenericCreateStatic+0x7e>
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d101      	bne.n	800a716 <xQueueGenericCreateStatic+0x82>
 800a712:	2301      	movs	r3, #1
 800a714:	e000      	b.n	800a718 <xQueueGenericCreateStatic+0x84>
 800a716:	2300      	movs	r3, #0
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d10a      	bne.n	800a732 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a71c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a720:	f383 8811 	msr	BASEPRI, r3
 800a724:	f3bf 8f6f 	isb	sy
 800a728:	f3bf 8f4f 	dsb	sy
 800a72c:	61fb      	str	r3, [r7, #28]
}
 800a72e:	bf00      	nop
 800a730:	e7fe      	b.n	800a730 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a732:	2350      	movs	r3, #80	; 0x50
 800a734:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	2b50      	cmp	r3, #80	; 0x50
 800a73a:	d00a      	beq.n	800a752 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a73c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a740:	f383 8811 	msr	BASEPRI, r3
 800a744:	f3bf 8f6f 	isb	sy
 800a748:	f3bf 8f4f 	dsb	sy
 800a74c:	61bb      	str	r3, [r7, #24]
}
 800a74e:	bf00      	nop
 800a750:	e7fe      	b.n	800a750 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a752:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d00d      	beq.n	800a77a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a75e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a760:	2201      	movs	r2, #1
 800a762:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a766:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a76a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a76c:	9300      	str	r3, [sp, #0]
 800a76e:	4613      	mov	r3, r2
 800a770:	687a      	ldr	r2, [r7, #4]
 800a772:	68b9      	ldr	r1, [r7, #8]
 800a774:	68f8      	ldr	r0, [r7, #12]
 800a776:	f000 f83f 	bl	800a7f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a77c:	4618      	mov	r0, r3
 800a77e:	3730      	adds	r7, #48	; 0x30
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}

0800a784 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a784:	b580      	push	{r7, lr}
 800a786:	b08a      	sub	sp, #40	; 0x28
 800a788:	af02      	add	r7, sp, #8
 800a78a:	60f8      	str	r0, [r7, #12]
 800a78c:	60b9      	str	r1, [r7, #8]
 800a78e:	4613      	mov	r3, r2
 800a790:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d10a      	bne.n	800a7ae <xQueueGenericCreate+0x2a>
	__asm volatile
 800a798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a79c:	f383 8811 	msr	BASEPRI, r3
 800a7a0:	f3bf 8f6f 	isb	sy
 800a7a4:	f3bf 8f4f 	dsb	sy
 800a7a8:	613b      	str	r3, [r7, #16]
}
 800a7aa:	bf00      	nop
 800a7ac:	e7fe      	b.n	800a7ac <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	68ba      	ldr	r2, [r7, #8]
 800a7b2:	fb02 f303 	mul.w	r3, r2, r3
 800a7b6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a7b8:	69fb      	ldr	r3, [r7, #28]
 800a7ba:	3350      	adds	r3, #80	; 0x50
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f002 fb33 	bl	800ce28 <pvPortMalloc>
 800a7c2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a7c4:	69bb      	ldr	r3, [r7, #24]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d011      	beq.n	800a7ee <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a7ca:	69bb      	ldr	r3, [r7, #24]
 800a7cc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	3350      	adds	r3, #80	; 0x50
 800a7d2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a7d4:	69bb      	ldr	r3, [r7, #24]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a7dc:	79fa      	ldrb	r2, [r7, #7]
 800a7de:	69bb      	ldr	r3, [r7, #24]
 800a7e0:	9300      	str	r3, [sp, #0]
 800a7e2:	4613      	mov	r3, r2
 800a7e4:	697a      	ldr	r2, [r7, #20]
 800a7e6:	68b9      	ldr	r1, [r7, #8]
 800a7e8:	68f8      	ldr	r0, [r7, #12]
 800a7ea:	f000 f805 	bl	800a7f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a7ee:	69bb      	ldr	r3, [r7, #24]
	}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3720      	adds	r7, #32
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}

0800a7f8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b084      	sub	sp, #16
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	60f8      	str	r0, [r7, #12]
 800a800:	60b9      	str	r1, [r7, #8]
 800a802:	607a      	str	r2, [r7, #4]
 800a804:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d103      	bne.n	800a814 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a80c:	69bb      	ldr	r3, [r7, #24]
 800a80e:	69ba      	ldr	r2, [r7, #24]
 800a810:	601a      	str	r2, [r3, #0]
 800a812:	e002      	b.n	800a81a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a814:	69bb      	ldr	r3, [r7, #24]
 800a816:	687a      	ldr	r2, [r7, #4]
 800a818:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a81a:	69bb      	ldr	r3, [r7, #24]
 800a81c:	68fa      	ldr	r2, [r7, #12]
 800a81e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a820:	69bb      	ldr	r3, [r7, #24]
 800a822:	68ba      	ldr	r2, [r7, #8]
 800a824:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a826:	2101      	movs	r1, #1
 800a828:	69b8      	ldr	r0, [r7, #24]
 800a82a:	f7ff fecb 	bl	800a5c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a82e:	69bb      	ldr	r3, [r7, #24]
 800a830:	78fa      	ldrb	r2, [r7, #3]
 800a832:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a836:	bf00      	nop
 800a838:	3710      	adds	r7, #16
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
	...

0800a840 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b08e      	sub	sp, #56	; 0x38
 800a844:	af00      	add	r7, sp, #0
 800a846:	60f8      	str	r0, [r7, #12]
 800a848:	60b9      	str	r1, [r7, #8]
 800a84a:	607a      	str	r2, [r7, #4]
 800a84c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a84e:	2300      	movs	r3, #0
 800a850:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d10a      	bne.n	800a872 <xQueueGenericSend+0x32>
	__asm volatile
 800a85c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a860:	f383 8811 	msr	BASEPRI, r3
 800a864:	f3bf 8f6f 	isb	sy
 800a868:	f3bf 8f4f 	dsb	sy
 800a86c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a86e:	bf00      	nop
 800a870:	e7fe      	b.n	800a870 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d103      	bne.n	800a880 <xQueueGenericSend+0x40>
 800a878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a87a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d101      	bne.n	800a884 <xQueueGenericSend+0x44>
 800a880:	2301      	movs	r3, #1
 800a882:	e000      	b.n	800a886 <xQueueGenericSend+0x46>
 800a884:	2300      	movs	r3, #0
 800a886:	2b00      	cmp	r3, #0
 800a888:	d10a      	bne.n	800a8a0 <xQueueGenericSend+0x60>
	__asm volatile
 800a88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a88e:	f383 8811 	msr	BASEPRI, r3
 800a892:	f3bf 8f6f 	isb	sy
 800a896:	f3bf 8f4f 	dsb	sy
 800a89a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a89c:	bf00      	nop
 800a89e:	e7fe      	b.n	800a89e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	2b02      	cmp	r3, #2
 800a8a4:	d103      	bne.n	800a8ae <xQueueGenericSend+0x6e>
 800a8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8aa:	2b01      	cmp	r3, #1
 800a8ac:	d101      	bne.n	800a8b2 <xQueueGenericSend+0x72>
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	e000      	b.n	800a8b4 <xQueueGenericSend+0x74>
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d10a      	bne.n	800a8ce <xQueueGenericSend+0x8e>
	__asm volatile
 800a8b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8bc:	f383 8811 	msr	BASEPRI, r3
 800a8c0:	f3bf 8f6f 	isb	sy
 800a8c4:	f3bf 8f4f 	dsb	sy
 800a8c8:	623b      	str	r3, [r7, #32]
}
 800a8ca:	bf00      	nop
 800a8cc:	e7fe      	b.n	800a8cc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a8ce:	f001 fb31 	bl	800bf34 <xTaskGetSchedulerState>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d102      	bne.n	800a8de <xQueueGenericSend+0x9e>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d101      	bne.n	800a8e2 <xQueueGenericSend+0xa2>
 800a8de:	2301      	movs	r3, #1
 800a8e0:	e000      	b.n	800a8e4 <xQueueGenericSend+0xa4>
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d10a      	bne.n	800a8fe <xQueueGenericSend+0xbe>
	__asm volatile
 800a8e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ec:	f383 8811 	msr	BASEPRI, r3
 800a8f0:	f3bf 8f6f 	isb	sy
 800a8f4:	f3bf 8f4f 	dsb	sy
 800a8f8:	61fb      	str	r3, [r7, #28]
}
 800a8fa:	bf00      	nop
 800a8fc:	e7fe      	b.n	800a8fc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a8fe:	f002 f971 	bl	800cbe4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a904:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a90a:	429a      	cmp	r2, r3
 800a90c:	d302      	bcc.n	800a914 <xQueueGenericSend+0xd4>
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	2b02      	cmp	r3, #2
 800a912:	d129      	bne.n	800a968 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a914:	683a      	ldr	r2, [r7, #0]
 800a916:	68b9      	ldr	r1, [r7, #8]
 800a918:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a91a:	f000 fb2f 	bl	800af7c <prvCopyDataToQueue>
 800a91e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a924:	2b00      	cmp	r3, #0
 800a926:	d010      	beq.n	800a94a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a92a:	3324      	adds	r3, #36	; 0x24
 800a92c:	4618      	mov	r0, r3
 800a92e:	f001 f919 	bl	800bb64 <xTaskRemoveFromEventList>
 800a932:	4603      	mov	r3, r0
 800a934:	2b00      	cmp	r3, #0
 800a936:	d013      	beq.n	800a960 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a938:	4b3f      	ldr	r3, [pc, #252]	; (800aa38 <xQueueGenericSend+0x1f8>)
 800a93a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a93e:	601a      	str	r2, [r3, #0]
 800a940:	f3bf 8f4f 	dsb	sy
 800a944:	f3bf 8f6f 	isb	sy
 800a948:	e00a      	b.n	800a960 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a94a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d007      	beq.n	800a960 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a950:	4b39      	ldr	r3, [pc, #228]	; (800aa38 <xQueueGenericSend+0x1f8>)
 800a952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a956:	601a      	str	r2, [r3, #0]
 800a958:	f3bf 8f4f 	dsb	sy
 800a95c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a960:	f002 f970 	bl	800cc44 <vPortExitCritical>
				return pdPASS;
 800a964:	2301      	movs	r3, #1
 800a966:	e063      	b.n	800aa30 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d103      	bne.n	800a976 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a96e:	f002 f969 	bl	800cc44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a972:	2300      	movs	r3, #0
 800a974:	e05c      	b.n	800aa30 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d106      	bne.n	800a98a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a97c:	f107 0314 	add.w	r3, r7, #20
 800a980:	4618      	mov	r0, r3
 800a982:	f001 f979 	bl	800bc78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a986:	2301      	movs	r3, #1
 800a988:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a98a:	f002 f95b 	bl	800cc44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a98e:	f000 febf 	bl	800b710 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a992:	f002 f927 	bl	800cbe4 <vPortEnterCritical>
 800a996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a998:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a99c:	b25b      	sxtb	r3, r3
 800a99e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9a2:	d103      	bne.n	800a9ac <xQueueGenericSend+0x16c>
 800a9a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9b2:	b25b      	sxtb	r3, r3
 800a9b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9b8:	d103      	bne.n	800a9c2 <xQueueGenericSend+0x182>
 800a9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9bc:	2200      	movs	r2, #0
 800a9be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a9c2:	f002 f93f 	bl	800cc44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a9c6:	1d3a      	adds	r2, r7, #4
 800a9c8:	f107 0314 	add.w	r3, r7, #20
 800a9cc:	4611      	mov	r1, r2
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f001 f968 	bl	800bca4 <xTaskCheckForTimeOut>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d124      	bne.n	800aa24 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a9da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9dc:	f000 fbc6 	bl	800b16c <prvIsQueueFull>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d018      	beq.n	800aa18 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e8:	3310      	adds	r3, #16
 800a9ea:	687a      	ldr	r2, [r7, #4]
 800a9ec:	4611      	mov	r1, r2
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f001 f868 	bl	800bac4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a9f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9f6:	f000 fb51 	bl	800b09c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a9fa:	f000 fe97 	bl	800b72c <xTaskResumeAll>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	f47f af7c 	bne.w	800a8fe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800aa06:	4b0c      	ldr	r3, [pc, #48]	; (800aa38 <xQueueGenericSend+0x1f8>)
 800aa08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa0c:	601a      	str	r2, [r3, #0]
 800aa0e:	f3bf 8f4f 	dsb	sy
 800aa12:	f3bf 8f6f 	isb	sy
 800aa16:	e772      	b.n	800a8fe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800aa18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa1a:	f000 fb3f 	bl	800b09c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa1e:	f000 fe85 	bl	800b72c <xTaskResumeAll>
 800aa22:	e76c      	b.n	800a8fe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800aa24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa26:	f000 fb39 	bl	800b09c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa2a:	f000 fe7f 	bl	800b72c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800aa2e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	3738      	adds	r7, #56	; 0x38
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}
 800aa38:	e000ed04 	.word	0xe000ed04

0800aa3c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b090      	sub	sp, #64	; 0x40
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	60f8      	str	r0, [r7, #12]
 800aa44:	60b9      	str	r1, [r7, #8]
 800aa46:	607a      	str	r2, [r7, #4]
 800aa48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800aa4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d10a      	bne.n	800aa6a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800aa54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa58:	f383 8811 	msr	BASEPRI, r3
 800aa5c:	f3bf 8f6f 	isb	sy
 800aa60:	f3bf 8f4f 	dsb	sy
 800aa64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aa66:	bf00      	nop
 800aa68:	e7fe      	b.n	800aa68 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d103      	bne.n	800aa78 <xQueueGenericSendFromISR+0x3c>
 800aa70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d101      	bne.n	800aa7c <xQueueGenericSendFromISR+0x40>
 800aa78:	2301      	movs	r3, #1
 800aa7a:	e000      	b.n	800aa7e <xQueueGenericSendFromISR+0x42>
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d10a      	bne.n	800aa98 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800aa82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa86:	f383 8811 	msr	BASEPRI, r3
 800aa8a:	f3bf 8f6f 	isb	sy
 800aa8e:	f3bf 8f4f 	dsb	sy
 800aa92:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aa94:	bf00      	nop
 800aa96:	e7fe      	b.n	800aa96 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	2b02      	cmp	r3, #2
 800aa9c:	d103      	bne.n	800aaa6 <xQueueGenericSendFromISR+0x6a>
 800aa9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaa2:	2b01      	cmp	r3, #1
 800aaa4:	d101      	bne.n	800aaaa <xQueueGenericSendFromISR+0x6e>
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	e000      	b.n	800aaac <xQueueGenericSendFromISR+0x70>
 800aaaa:	2300      	movs	r3, #0
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d10a      	bne.n	800aac6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800aab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab4:	f383 8811 	msr	BASEPRI, r3
 800aab8:	f3bf 8f6f 	isb	sy
 800aabc:	f3bf 8f4f 	dsb	sy
 800aac0:	623b      	str	r3, [r7, #32]
}
 800aac2:	bf00      	nop
 800aac4:	e7fe      	b.n	800aac4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aac6:	f002 f96f 	bl	800cda8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800aaca:	f3ef 8211 	mrs	r2, BASEPRI
 800aace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad2:	f383 8811 	msr	BASEPRI, r3
 800aad6:	f3bf 8f6f 	isb	sy
 800aada:	f3bf 8f4f 	dsb	sy
 800aade:	61fa      	str	r2, [r7, #28]
 800aae0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800aae2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aae4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aae8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aaea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	d302      	bcc.n	800aaf8 <xQueueGenericSendFromISR+0xbc>
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	2b02      	cmp	r3, #2
 800aaf6:	d12f      	bne.n	800ab58 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800aaf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aafa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aafe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab06:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ab08:	683a      	ldr	r2, [r7, #0]
 800ab0a:	68b9      	ldr	r1, [r7, #8]
 800ab0c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ab0e:	f000 fa35 	bl	800af7c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ab12:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ab16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab1a:	d112      	bne.n	800ab42 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d016      	beq.n	800ab52 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab26:	3324      	adds	r3, #36	; 0x24
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f001 f81b 	bl	800bb64 <xTaskRemoveFromEventList>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d00e      	beq.n	800ab52 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d00b      	beq.n	800ab52 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2201      	movs	r2, #1
 800ab3e:	601a      	str	r2, [r3, #0]
 800ab40:	e007      	b.n	800ab52 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ab42:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ab46:	3301      	adds	r3, #1
 800ab48:	b2db      	uxtb	r3, r3
 800ab4a:	b25a      	sxtb	r2, r3
 800ab4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ab52:	2301      	movs	r3, #1
 800ab54:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ab56:	e001      	b.n	800ab5c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab5e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ab66:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ab68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3740      	adds	r7, #64	; 0x40
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}
	...

0800ab74 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b08c      	sub	sp, #48	; 0x30
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	60f8      	str	r0, [r7, #12]
 800ab7c:	60b9      	str	r1, [r7, #8]
 800ab7e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ab80:	2300      	movs	r3, #0
 800ab82:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ab88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d10a      	bne.n	800aba4 <xQueueReceive+0x30>
	__asm volatile
 800ab8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab92:	f383 8811 	msr	BASEPRI, r3
 800ab96:	f3bf 8f6f 	isb	sy
 800ab9a:	f3bf 8f4f 	dsb	sy
 800ab9e:	623b      	str	r3, [r7, #32]
}
 800aba0:	bf00      	nop
 800aba2:	e7fe      	b.n	800aba2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d103      	bne.n	800abb2 <xQueueReceive+0x3e>
 800abaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d101      	bne.n	800abb6 <xQueueReceive+0x42>
 800abb2:	2301      	movs	r3, #1
 800abb4:	e000      	b.n	800abb8 <xQueueReceive+0x44>
 800abb6:	2300      	movs	r3, #0
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d10a      	bne.n	800abd2 <xQueueReceive+0x5e>
	__asm volatile
 800abbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc0:	f383 8811 	msr	BASEPRI, r3
 800abc4:	f3bf 8f6f 	isb	sy
 800abc8:	f3bf 8f4f 	dsb	sy
 800abcc:	61fb      	str	r3, [r7, #28]
}
 800abce:	bf00      	nop
 800abd0:	e7fe      	b.n	800abd0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800abd2:	f001 f9af 	bl	800bf34 <xTaskGetSchedulerState>
 800abd6:	4603      	mov	r3, r0
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d102      	bne.n	800abe2 <xQueueReceive+0x6e>
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d101      	bne.n	800abe6 <xQueueReceive+0x72>
 800abe2:	2301      	movs	r3, #1
 800abe4:	e000      	b.n	800abe8 <xQueueReceive+0x74>
 800abe6:	2300      	movs	r3, #0
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d10a      	bne.n	800ac02 <xQueueReceive+0x8e>
	__asm volatile
 800abec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf0:	f383 8811 	msr	BASEPRI, r3
 800abf4:	f3bf 8f6f 	isb	sy
 800abf8:	f3bf 8f4f 	dsb	sy
 800abfc:	61bb      	str	r3, [r7, #24]
}
 800abfe:	bf00      	nop
 800ac00:	e7fe      	b.n	800ac00 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ac02:	f001 ffef 	bl	800cbe4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac0a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d01f      	beq.n	800ac52 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ac12:	68b9      	ldr	r1, [r7, #8]
 800ac14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac16:	f000 fa1b 	bl	800b050 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ac1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac1c:	1e5a      	subs	r2, r3, #1
 800ac1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac20:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac24:	691b      	ldr	r3, [r3, #16]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d00f      	beq.n	800ac4a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac2c:	3310      	adds	r3, #16
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f000 ff98 	bl	800bb64 <xTaskRemoveFromEventList>
 800ac34:	4603      	mov	r3, r0
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d007      	beq.n	800ac4a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ac3a:	4b3d      	ldr	r3, [pc, #244]	; (800ad30 <xQueueReceive+0x1bc>)
 800ac3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac40:	601a      	str	r2, [r3, #0]
 800ac42:	f3bf 8f4f 	dsb	sy
 800ac46:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ac4a:	f001 fffb 	bl	800cc44 <vPortExitCritical>
				return pdPASS;
 800ac4e:	2301      	movs	r3, #1
 800ac50:	e069      	b.n	800ad26 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d103      	bne.n	800ac60 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ac58:	f001 fff4 	bl	800cc44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	e062      	b.n	800ad26 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ac60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d106      	bne.n	800ac74 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ac66:	f107 0310 	add.w	r3, r7, #16
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f001 f804 	bl	800bc78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ac70:	2301      	movs	r3, #1
 800ac72:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ac74:	f001 ffe6 	bl	800cc44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ac78:	f000 fd4a 	bl	800b710 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ac7c:	f001 ffb2 	bl	800cbe4 <vPortEnterCritical>
 800ac80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac86:	b25b      	sxtb	r3, r3
 800ac88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac8c:	d103      	bne.n	800ac96 <xQueueReceive+0x122>
 800ac8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac90:	2200      	movs	r2, #0
 800ac92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac9c:	b25b      	sxtb	r3, r3
 800ac9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aca2:	d103      	bne.n	800acac <xQueueReceive+0x138>
 800aca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca6:	2200      	movs	r2, #0
 800aca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800acac:	f001 ffca 	bl	800cc44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800acb0:	1d3a      	adds	r2, r7, #4
 800acb2:	f107 0310 	add.w	r3, r7, #16
 800acb6:	4611      	mov	r1, r2
 800acb8:	4618      	mov	r0, r3
 800acba:	f000 fff3 	bl	800bca4 <xTaskCheckForTimeOut>
 800acbe:	4603      	mov	r3, r0
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d123      	bne.n	800ad0c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800acc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acc6:	f000 fa3b 	bl	800b140 <prvIsQueueEmpty>
 800acca:	4603      	mov	r3, r0
 800accc:	2b00      	cmp	r3, #0
 800acce:	d017      	beq.n	800ad00 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800acd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acd2:	3324      	adds	r3, #36	; 0x24
 800acd4:	687a      	ldr	r2, [r7, #4]
 800acd6:	4611      	mov	r1, r2
 800acd8:	4618      	mov	r0, r3
 800acda:	f000 fef3 	bl	800bac4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800acde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ace0:	f000 f9dc 	bl	800b09c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ace4:	f000 fd22 	bl	800b72c <xTaskResumeAll>
 800ace8:	4603      	mov	r3, r0
 800acea:	2b00      	cmp	r3, #0
 800acec:	d189      	bne.n	800ac02 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800acee:	4b10      	ldr	r3, [pc, #64]	; (800ad30 <xQueueReceive+0x1bc>)
 800acf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acf4:	601a      	str	r2, [r3, #0]
 800acf6:	f3bf 8f4f 	dsb	sy
 800acfa:	f3bf 8f6f 	isb	sy
 800acfe:	e780      	b.n	800ac02 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ad00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad02:	f000 f9cb 	bl	800b09c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ad06:	f000 fd11 	bl	800b72c <xTaskResumeAll>
 800ad0a:	e77a      	b.n	800ac02 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ad0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad0e:	f000 f9c5 	bl	800b09c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ad12:	f000 fd0b 	bl	800b72c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad18:	f000 fa12 	bl	800b140 <prvIsQueueEmpty>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	f43f af6f 	beq.w	800ac02 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ad24:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3730      	adds	r7, #48	; 0x30
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
 800ad2e:	bf00      	nop
 800ad30:	e000ed04 	.word	0xe000ed04

0800ad34 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b08e      	sub	sp, #56	; 0x38
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
 800ad3c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ad46:	2300      	movs	r3, #0
 800ad48:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ad4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d10a      	bne.n	800ad66 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ad50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad54:	f383 8811 	msr	BASEPRI, r3
 800ad58:	f3bf 8f6f 	isb	sy
 800ad5c:	f3bf 8f4f 	dsb	sy
 800ad60:	623b      	str	r3, [r7, #32]
}
 800ad62:	bf00      	nop
 800ad64:	e7fe      	b.n	800ad64 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ad66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d00a      	beq.n	800ad84 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800ad6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad72:	f383 8811 	msr	BASEPRI, r3
 800ad76:	f3bf 8f6f 	isb	sy
 800ad7a:	f3bf 8f4f 	dsb	sy
 800ad7e:	61fb      	str	r3, [r7, #28]
}
 800ad80:	bf00      	nop
 800ad82:	e7fe      	b.n	800ad82 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ad84:	f001 f8d6 	bl	800bf34 <xTaskGetSchedulerState>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d102      	bne.n	800ad94 <xQueueSemaphoreTake+0x60>
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d101      	bne.n	800ad98 <xQueueSemaphoreTake+0x64>
 800ad94:	2301      	movs	r3, #1
 800ad96:	e000      	b.n	800ad9a <xQueueSemaphoreTake+0x66>
 800ad98:	2300      	movs	r3, #0
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d10a      	bne.n	800adb4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800ad9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada2:	f383 8811 	msr	BASEPRI, r3
 800ada6:	f3bf 8f6f 	isb	sy
 800adaa:	f3bf 8f4f 	dsb	sy
 800adae:	61bb      	str	r3, [r7, #24]
}
 800adb0:	bf00      	nop
 800adb2:	e7fe      	b.n	800adb2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800adb4:	f001 ff16 	bl	800cbe4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800adb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adbc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800adbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d024      	beq.n	800ae0e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800adc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adc6:	1e5a      	subs	r2, r3, #1
 800adc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adca:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800adcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d104      	bne.n	800adde <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800add4:	f001 fa24 	bl	800c220 <pvTaskIncrementMutexHeldCount>
 800add8:	4602      	mov	r2, r0
 800adda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800addc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800adde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ade0:	691b      	ldr	r3, [r3, #16]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d00f      	beq.n	800ae06 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ade6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ade8:	3310      	adds	r3, #16
 800adea:	4618      	mov	r0, r3
 800adec:	f000 feba 	bl	800bb64 <xTaskRemoveFromEventList>
 800adf0:	4603      	mov	r3, r0
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d007      	beq.n	800ae06 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800adf6:	4b54      	ldr	r3, [pc, #336]	; (800af48 <xQueueSemaphoreTake+0x214>)
 800adf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adfc:	601a      	str	r2, [r3, #0]
 800adfe:	f3bf 8f4f 	dsb	sy
 800ae02:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ae06:	f001 ff1d 	bl	800cc44 <vPortExitCritical>
				return pdPASS;
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	e097      	b.n	800af3e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d111      	bne.n	800ae38 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ae14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d00a      	beq.n	800ae30 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800ae1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae1e:	f383 8811 	msr	BASEPRI, r3
 800ae22:	f3bf 8f6f 	isb	sy
 800ae26:	f3bf 8f4f 	dsb	sy
 800ae2a:	617b      	str	r3, [r7, #20]
}
 800ae2c:	bf00      	nop
 800ae2e:	e7fe      	b.n	800ae2e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ae30:	f001 ff08 	bl	800cc44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ae34:	2300      	movs	r3, #0
 800ae36:	e082      	b.n	800af3e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d106      	bne.n	800ae4c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae3e:	f107 030c 	add.w	r3, r7, #12
 800ae42:	4618      	mov	r0, r3
 800ae44:	f000 ff18 	bl	800bc78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae48:	2301      	movs	r3, #1
 800ae4a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae4c:	f001 fefa 	bl	800cc44 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae50:	f000 fc5e 	bl	800b710 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae54:	f001 fec6 	bl	800cbe4 <vPortEnterCritical>
 800ae58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae5e:	b25b      	sxtb	r3, r3
 800ae60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae64:	d103      	bne.n	800ae6e <xQueueSemaphoreTake+0x13a>
 800ae66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae68:	2200      	movs	r2, #0
 800ae6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae74:	b25b      	sxtb	r3, r3
 800ae76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae7a:	d103      	bne.n	800ae84 <xQueueSemaphoreTake+0x150>
 800ae7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae7e:	2200      	movs	r2, #0
 800ae80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae84:	f001 fede 	bl	800cc44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ae88:	463a      	mov	r2, r7
 800ae8a:	f107 030c 	add.w	r3, r7, #12
 800ae8e:	4611      	mov	r1, r2
 800ae90:	4618      	mov	r0, r3
 800ae92:	f000 ff07 	bl	800bca4 <xTaskCheckForTimeOut>
 800ae96:	4603      	mov	r3, r0
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d132      	bne.n	800af02 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae9e:	f000 f94f 	bl	800b140 <prvIsQueueEmpty>
 800aea2:	4603      	mov	r3, r0
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d026      	beq.n	800aef6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d109      	bne.n	800aec4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800aeb0:	f001 fe98 	bl	800cbe4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aeb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeb6:	689b      	ldr	r3, [r3, #8]
 800aeb8:	4618      	mov	r0, r3
 800aeba:	f001 f859 	bl	800bf70 <xTaskPriorityInherit>
 800aebe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800aec0:	f001 fec0 	bl	800cc44 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aec6:	3324      	adds	r3, #36	; 0x24
 800aec8:	683a      	ldr	r2, [r7, #0]
 800aeca:	4611      	mov	r1, r2
 800aecc:	4618      	mov	r0, r3
 800aece:	f000 fdf9 	bl	800bac4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aed2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aed4:	f000 f8e2 	bl	800b09c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aed8:	f000 fc28 	bl	800b72c <xTaskResumeAll>
 800aedc:	4603      	mov	r3, r0
 800aede:	2b00      	cmp	r3, #0
 800aee0:	f47f af68 	bne.w	800adb4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800aee4:	4b18      	ldr	r3, [pc, #96]	; (800af48 <xQueueSemaphoreTake+0x214>)
 800aee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aeea:	601a      	str	r2, [r3, #0]
 800aeec:	f3bf 8f4f 	dsb	sy
 800aef0:	f3bf 8f6f 	isb	sy
 800aef4:	e75e      	b.n	800adb4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800aef6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aef8:	f000 f8d0 	bl	800b09c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aefc:	f000 fc16 	bl	800b72c <xTaskResumeAll>
 800af00:	e758      	b.n	800adb4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800af02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af04:	f000 f8ca 	bl	800b09c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af08:	f000 fc10 	bl	800b72c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800af0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af0e:	f000 f917 	bl	800b140 <prvIsQueueEmpty>
 800af12:	4603      	mov	r3, r0
 800af14:	2b00      	cmp	r3, #0
 800af16:	f43f af4d 	beq.w	800adb4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800af1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d00d      	beq.n	800af3c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800af20:	f001 fe60 	bl	800cbe4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800af24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af26:	f000 f811 	bl	800af4c <prvGetDisinheritPriorityAfterTimeout>
 800af2a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800af2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af2e:	689b      	ldr	r3, [r3, #8]
 800af30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800af32:	4618      	mov	r0, r3
 800af34:	f001 f8f2 	bl	800c11c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800af38:	f001 fe84 	bl	800cc44 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800af3c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3738      	adds	r7, #56	; 0x38
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}
 800af46:	bf00      	nop
 800af48:	e000ed04 	.word	0xe000ed04

0800af4c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800af4c:	b480      	push	{r7}
 800af4e:	b085      	sub	sp, #20
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d006      	beq.n	800af6a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800af66:	60fb      	str	r3, [r7, #12]
 800af68:	e001      	b.n	800af6e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800af6a:	2300      	movs	r3, #0
 800af6c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800af6e:	68fb      	ldr	r3, [r7, #12]
	}
 800af70:	4618      	mov	r0, r3
 800af72:	3714      	adds	r7, #20
 800af74:	46bd      	mov	sp, r7
 800af76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7a:	4770      	bx	lr

0800af7c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b086      	sub	sp, #24
 800af80:	af00      	add	r7, sp, #0
 800af82:	60f8      	str	r0, [r7, #12]
 800af84:	60b9      	str	r1, [r7, #8]
 800af86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800af88:	2300      	movs	r3, #0
 800af8a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af90:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af96:	2b00      	cmp	r3, #0
 800af98:	d10d      	bne.n	800afb6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d14d      	bne.n	800b03e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	689b      	ldr	r3, [r3, #8]
 800afa6:	4618      	mov	r0, r3
 800afa8:	f001 f84a 	bl	800c040 <xTaskPriorityDisinherit>
 800afac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	2200      	movs	r2, #0
 800afb2:	609a      	str	r2, [r3, #8]
 800afb4:	e043      	b.n	800b03e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d119      	bne.n	800aff0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	6858      	ldr	r0, [r3, #4]
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afc4:	461a      	mov	r2, r3
 800afc6:	68b9      	ldr	r1, [r7, #8]
 800afc8:	f00b faf6 	bl	80165b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	685a      	ldr	r2, [r3, #4]
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afd4:	441a      	add	r2, r3
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	685a      	ldr	r2, [r3, #4]
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	689b      	ldr	r3, [r3, #8]
 800afe2:	429a      	cmp	r2, r3
 800afe4:	d32b      	bcc.n	800b03e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	681a      	ldr	r2, [r3, #0]
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	605a      	str	r2, [r3, #4]
 800afee:	e026      	b.n	800b03e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	68d8      	ldr	r0, [r3, #12]
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aff8:	461a      	mov	r2, r3
 800affa:	68b9      	ldr	r1, [r7, #8]
 800affc:	f00b fadc 	bl	80165b8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	68da      	ldr	r2, [r3, #12]
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b008:	425b      	negs	r3, r3
 800b00a:	441a      	add	r2, r3
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	68da      	ldr	r2, [r3, #12]
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	429a      	cmp	r2, r3
 800b01a:	d207      	bcs.n	800b02c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	689a      	ldr	r2, [r3, #8]
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b024:	425b      	negs	r3, r3
 800b026:	441a      	add	r2, r3
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2b02      	cmp	r3, #2
 800b030:	d105      	bne.n	800b03e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d002      	beq.n	800b03e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	3b01      	subs	r3, #1
 800b03c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b03e:	693b      	ldr	r3, [r7, #16]
 800b040:	1c5a      	adds	r2, r3, #1
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b046:	697b      	ldr	r3, [r7, #20]
}
 800b048:	4618      	mov	r0, r3
 800b04a:	3718      	adds	r7, #24
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}

0800b050 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b082      	sub	sp, #8
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
 800b058:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d018      	beq.n	800b094 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	68da      	ldr	r2, [r3, #12]
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b06a:	441a      	add	r2, r3
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	68da      	ldr	r2, [r3, #12]
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	689b      	ldr	r3, [r3, #8]
 800b078:	429a      	cmp	r2, r3
 800b07a:	d303      	bcc.n	800b084 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681a      	ldr	r2, [r3, #0]
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	68d9      	ldr	r1, [r3, #12]
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b08c:	461a      	mov	r2, r3
 800b08e:	6838      	ldr	r0, [r7, #0]
 800b090:	f00b fa92 	bl	80165b8 <memcpy>
	}
}
 800b094:	bf00      	nop
 800b096:	3708      	adds	r7, #8
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}

0800b09c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b084      	sub	sp, #16
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b0a4:	f001 fd9e 	bl	800cbe4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b0b0:	e011      	b.n	800b0d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d012      	beq.n	800b0e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	3324      	adds	r3, #36	; 0x24
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f000 fd50 	bl	800bb64 <xTaskRemoveFromEventList>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d001      	beq.n	800b0ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b0ca:	f000 fe4d 	bl	800bd68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b0ce:	7bfb      	ldrb	r3, [r7, #15]
 800b0d0:	3b01      	subs	r3, #1
 800b0d2:	b2db      	uxtb	r3, r3
 800b0d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b0d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	dce9      	bgt.n	800b0b2 <prvUnlockQueue+0x16>
 800b0de:	e000      	b.n	800b0e2 <prvUnlockQueue+0x46>
					break;
 800b0e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	22ff      	movs	r2, #255	; 0xff
 800b0e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b0ea:	f001 fdab 	bl	800cc44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b0ee:	f001 fd79 	bl	800cbe4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b0f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b0fa:	e011      	b.n	800b120 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	691b      	ldr	r3, [r3, #16]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d012      	beq.n	800b12a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	3310      	adds	r3, #16
 800b108:	4618      	mov	r0, r3
 800b10a:	f000 fd2b 	bl	800bb64 <xTaskRemoveFromEventList>
 800b10e:	4603      	mov	r3, r0
 800b110:	2b00      	cmp	r3, #0
 800b112:	d001      	beq.n	800b118 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b114:	f000 fe28 	bl	800bd68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b118:	7bbb      	ldrb	r3, [r7, #14]
 800b11a:	3b01      	subs	r3, #1
 800b11c:	b2db      	uxtb	r3, r3
 800b11e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b120:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b124:	2b00      	cmp	r3, #0
 800b126:	dce9      	bgt.n	800b0fc <prvUnlockQueue+0x60>
 800b128:	e000      	b.n	800b12c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b12a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	22ff      	movs	r2, #255	; 0xff
 800b130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b134:	f001 fd86 	bl	800cc44 <vPortExitCritical>
}
 800b138:	bf00      	nop
 800b13a:	3710      	adds	r7, #16
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}

0800b140 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b084      	sub	sp, #16
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b148:	f001 fd4c 	bl	800cbe4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b150:	2b00      	cmp	r3, #0
 800b152:	d102      	bne.n	800b15a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b154:	2301      	movs	r3, #1
 800b156:	60fb      	str	r3, [r7, #12]
 800b158:	e001      	b.n	800b15e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b15a:	2300      	movs	r3, #0
 800b15c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b15e:	f001 fd71 	bl	800cc44 <vPortExitCritical>

	return xReturn;
 800b162:	68fb      	ldr	r3, [r7, #12]
}
 800b164:	4618      	mov	r0, r3
 800b166:	3710      	adds	r7, #16
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}

0800b16c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b084      	sub	sp, #16
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b174:	f001 fd36 	bl	800cbe4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b180:	429a      	cmp	r2, r3
 800b182:	d102      	bne.n	800b18a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b184:	2301      	movs	r3, #1
 800b186:	60fb      	str	r3, [r7, #12]
 800b188:	e001      	b.n	800b18e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b18a:	2300      	movs	r3, #0
 800b18c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b18e:	f001 fd59 	bl	800cc44 <vPortExitCritical>

	return xReturn;
 800b192:	68fb      	ldr	r3, [r7, #12]
}
 800b194:	4618      	mov	r0, r3
 800b196:	3710      	adds	r7, #16
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd80      	pop	{r7, pc}

0800b19c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b19c:	b480      	push	{r7}
 800b19e:	b085      	sub	sp, #20
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
 800b1a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	60fb      	str	r3, [r7, #12]
 800b1aa:	e014      	b.n	800b1d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b1ac:	4a0f      	ldr	r2, [pc, #60]	; (800b1ec <vQueueAddToRegistry+0x50>)
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d10b      	bne.n	800b1d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b1b8:	490c      	ldr	r1, [pc, #48]	; (800b1ec <vQueueAddToRegistry+0x50>)
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	683a      	ldr	r2, [r7, #0]
 800b1be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b1c2:	4a0a      	ldr	r2, [pc, #40]	; (800b1ec <vQueueAddToRegistry+0x50>)
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	00db      	lsls	r3, r3, #3
 800b1c8:	4413      	add	r3, r2
 800b1ca:	687a      	ldr	r2, [r7, #4]
 800b1cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b1ce:	e006      	b.n	800b1de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	3301      	adds	r3, #1
 800b1d4:	60fb      	str	r3, [r7, #12]
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	2b07      	cmp	r3, #7
 800b1da:	d9e7      	bls.n	800b1ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b1dc:	bf00      	nop
 800b1de:	bf00      	nop
 800b1e0:	3714      	adds	r7, #20
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e8:	4770      	bx	lr
 800b1ea:	bf00      	nop
 800b1ec:	20005094 	.word	0x20005094

0800b1f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b086      	sub	sp, #24
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	60f8      	str	r0, [r7, #12]
 800b1f8:	60b9      	str	r1, [r7, #8]
 800b1fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b200:	f001 fcf0 	bl	800cbe4 <vPortEnterCritical>
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b20a:	b25b      	sxtb	r3, r3
 800b20c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b210:	d103      	bne.n	800b21a <vQueueWaitForMessageRestricted+0x2a>
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	2200      	movs	r2, #0
 800b216:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b220:	b25b      	sxtb	r3, r3
 800b222:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b226:	d103      	bne.n	800b230 <vQueueWaitForMessageRestricted+0x40>
 800b228:	697b      	ldr	r3, [r7, #20]
 800b22a:	2200      	movs	r2, #0
 800b22c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b230:	f001 fd08 	bl	800cc44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d106      	bne.n	800b24a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	3324      	adds	r3, #36	; 0x24
 800b240:	687a      	ldr	r2, [r7, #4]
 800b242:	68b9      	ldr	r1, [r7, #8]
 800b244:	4618      	mov	r0, r3
 800b246:	f000 fc61 	bl	800bb0c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b24a:	6978      	ldr	r0, [r7, #20]
 800b24c:	f7ff ff26 	bl	800b09c <prvUnlockQueue>
	}
 800b250:	bf00      	nop
 800b252:	3718      	adds	r7, #24
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}

0800b258 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b08e      	sub	sp, #56	; 0x38
 800b25c:	af04      	add	r7, sp, #16
 800b25e:	60f8      	str	r0, [r7, #12]
 800b260:	60b9      	str	r1, [r7, #8]
 800b262:	607a      	str	r2, [r7, #4]
 800b264:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d10a      	bne.n	800b282 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b26c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b270:	f383 8811 	msr	BASEPRI, r3
 800b274:	f3bf 8f6f 	isb	sy
 800b278:	f3bf 8f4f 	dsb	sy
 800b27c:	623b      	str	r3, [r7, #32]
}
 800b27e:	bf00      	nop
 800b280:	e7fe      	b.n	800b280 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b284:	2b00      	cmp	r3, #0
 800b286:	d10a      	bne.n	800b29e <xTaskCreateStatic+0x46>
	__asm volatile
 800b288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b28c:	f383 8811 	msr	BASEPRI, r3
 800b290:	f3bf 8f6f 	isb	sy
 800b294:	f3bf 8f4f 	dsb	sy
 800b298:	61fb      	str	r3, [r7, #28]
}
 800b29a:	bf00      	nop
 800b29c:	e7fe      	b.n	800b29c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b29e:	23a8      	movs	r3, #168	; 0xa8
 800b2a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	2ba8      	cmp	r3, #168	; 0xa8
 800b2a6:	d00a      	beq.n	800b2be <xTaskCreateStatic+0x66>
	__asm volatile
 800b2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ac:	f383 8811 	msr	BASEPRI, r3
 800b2b0:	f3bf 8f6f 	isb	sy
 800b2b4:	f3bf 8f4f 	dsb	sy
 800b2b8:	61bb      	str	r3, [r7, #24]
}
 800b2ba:	bf00      	nop
 800b2bc:	e7fe      	b.n	800b2bc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b2be:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d01e      	beq.n	800b304 <xTaskCreateStatic+0xac>
 800b2c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d01b      	beq.n	800b304 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b2d4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d8:	2202      	movs	r2, #2
 800b2da:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b2de:	2300      	movs	r3, #0
 800b2e0:	9303      	str	r3, [sp, #12]
 800b2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e4:	9302      	str	r3, [sp, #8]
 800b2e6:	f107 0314 	add.w	r3, r7, #20
 800b2ea:	9301      	str	r3, [sp, #4]
 800b2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ee:	9300      	str	r3, [sp, #0]
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	687a      	ldr	r2, [r7, #4]
 800b2f4:	68b9      	ldr	r1, [r7, #8]
 800b2f6:	68f8      	ldr	r0, [r7, #12]
 800b2f8:	f000 f850 	bl	800b39c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b2fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b2fe:	f000 f8f3 	bl	800b4e8 <prvAddNewTaskToReadyList>
 800b302:	e001      	b.n	800b308 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b304:	2300      	movs	r3, #0
 800b306:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b308:	697b      	ldr	r3, [r7, #20]
	}
 800b30a:	4618      	mov	r0, r3
 800b30c:	3728      	adds	r7, #40	; 0x28
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}

0800b312 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b312:	b580      	push	{r7, lr}
 800b314:	b08c      	sub	sp, #48	; 0x30
 800b316:	af04      	add	r7, sp, #16
 800b318:	60f8      	str	r0, [r7, #12]
 800b31a:	60b9      	str	r1, [r7, #8]
 800b31c:	603b      	str	r3, [r7, #0]
 800b31e:	4613      	mov	r3, r2
 800b320:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b322:	88fb      	ldrh	r3, [r7, #6]
 800b324:	009b      	lsls	r3, r3, #2
 800b326:	4618      	mov	r0, r3
 800b328:	f001 fd7e 	bl	800ce28 <pvPortMalloc>
 800b32c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b32e:	697b      	ldr	r3, [r7, #20]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d00e      	beq.n	800b352 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b334:	20a8      	movs	r0, #168	; 0xa8
 800b336:	f001 fd77 	bl	800ce28 <pvPortMalloc>
 800b33a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b33c:	69fb      	ldr	r3, [r7, #28]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d003      	beq.n	800b34a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b342:	69fb      	ldr	r3, [r7, #28]
 800b344:	697a      	ldr	r2, [r7, #20]
 800b346:	631a      	str	r2, [r3, #48]	; 0x30
 800b348:	e005      	b.n	800b356 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b34a:	6978      	ldr	r0, [r7, #20]
 800b34c:	f001 fe38 	bl	800cfc0 <vPortFree>
 800b350:	e001      	b.n	800b356 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b352:	2300      	movs	r3, #0
 800b354:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b356:	69fb      	ldr	r3, [r7, #28]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d017      	beq.n	800b38c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b35c:	69fb      	ldr	r3, [r7, #28]
 800b35e:	2200      	movs	r2, #0
 800b360:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b364:	88fa      	ldrh	r2, [r7, #6]
 800b366:	2300      	movs	r3, #0
 800b368:	9303      	str	r3, [sp, #12]
 800b36a:	69fb      	ldr	r3, [r7, #28]
 800b36c:	9302      	str	r3, [sp, #8]
 800b36e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b370:	9301      	str	r3, [sp, #4]
 800b372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b374:	9300      	str	r3, [sp, #0]
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	68b9      	ldr	r1, [r7, #8]
 800b37a:	68f8      	ldr	r0, [r7, #12]
 800b37c:	f000 f80e 	bl	800b39c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b380:	69f8      	ldr	r0, [r7, #28]
 800b382:	f000 f8b1 	bl	800b4e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b386:	2301      	movs	r3, #1
 800b388:	61bb      	str	r3, [r7, #24]
 800b38a:	e002      	b.n	800b392 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b38c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b390:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b392:	69bb      	ldr	r3, [r7, #24]
	}
 800b394:	4618      	mov	r0, r3
 800b396:	3720      	adds	r7, #32
 800b398:	46bd      	mov	sp, r7
 800b39a:	bd80      	pop	{r7, pc}

0800b39c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b088      	sub	sp, #32
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	60f8      	str	r0, [r7, #12]
 800b3a4:	60b9      	str	r1, [r7, #8]
 800b3a6:	607a      	str	r2, [r7, #4]
 800b3a8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	009b      	lsls	r3, r3, #2
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	21a5      	movs	r1, #165	; 0xa5
 800b3b6:	f00a ffe1 	bl	801637c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b3c4:	3b01      	subs	r3, #1
 800b3c6:	009b      	lsls	r3, r3, #2
 800b3c8:	4413      	add	r3, r2
 800b3ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b3cc:	69bb      	ldr	r3, [r7, #24]
 800b3ce:	f023 0307 	bic.w	r3, r3, #7
 800b3d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b3d4:	69bb      	ldr	r3, [r7, #24]
 800b3d6:	f003 0307 	and.w	r3, r3, #7
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d00a      	beq.n	800b3f4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e2:	f383 8811 	msr	BASEPRI, r3
 800b3e6:	f3bf 8f6f 	isb	sy
 800b3ea:	f3bf 8f4f 	dsb	sy
 800b3ee:	617b      	str	r3, [r7, #20]
}
 800b3f0:	bf00      	nop
 800b3f2:	e7fe      	b.n	800b3f2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d01f      	beq.n	800b43a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	61fb      	str	r3, [r7, #28]
 800b3fe:	e012      	b.n	800b426 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b400:	68ba      	ldr	r2, [r7, #8]
 800b402:	69fb      	ldr	r3, [r7, #28]
 800b404:	4413      	add	r3, r2
 800b406:	7819      	ldrb	r1, [r3, #0]
 800b408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b40a:	69fb      	ldr	r3, [r7, #28]
 800b40c:	4413      	add	r3, r2
 800b40e:	3334      	adds	r3, #52	; 0x34
 800b410:	460a      	mov	r2, r1
 800b412:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b414:	68ba      	ldr	r2, [r7, #8]
 800b416:	69fb      	ldr	r3, [r7, #28]
 800b418:	4413      	add	r3, r2
 800b41a:	781b      	ldrb	r3, [r3, #0]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d006      	beq.n	800b42e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b420:	69fb      	ldr	r3, [r7, #28]
 800b422:	3301      	adds	r3, #1
 800b424:	61fb      	str	r3, [r7, #28]
 800b426:	69fb      	ldr	r3, [r7, #28]
 800b428:	2b0f      	cmp	r3, #15
 800b42a:	d9e9      	bls.n	800b400 <prvInitialiseNewTask+0x64>
 800b42c:	e000      	b.n	800b430 <prvInitialiseNewTask+0x94>
			{
				break;
 800b42e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b432:	2200      	movs	r2, #0
 800b434:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b438:	e003      	b.n	800b442 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b43c:	2200      	movs	r2, #0
 800b43e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b444:	2b37      	cmp	r3, #55	; 0x37
 800b446:	d901      	bls.n	800b44c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b448:	2337      	movs	r3, #55	; 0x37
 800b44a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b44e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b450:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b454:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b456:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b45a:	2200      	movs	r2, #0
 800b45c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b460:	3304      	adds	r3, #4
 800b462:	4618      	mov	r0, r3
 800b464:	f7ff f81a 	bl	800a49c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b46a:	3318      	adds	r3, #24
 800b46c:	4618      	mov	r0, r3
 800b46e:	f7ff f815 	bl	800a49c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b474:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b476:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b47a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b480:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b484:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b486:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b48a:	2200      	movs	r2, #0
 800b48c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b492:	2200      	movs	r2, #0
 800b494:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b49a:	3354      	adds	r3, #84	; 0x54
 800b49c:	224c      	movs	r2, #76	; 0x4c
 800b49e:	2100      	movs	r1, #0
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f00a ff6b 	bl	801637c <memset>
 800b4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a8:	4a0c      	ldr	r2, [pc, #48]	; (800b4dc <prvInitialiseNewTask+0x140>)
 800b4aa:	659a      	str	r2, [r3, #88]	; 0x58
 800b4ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ae:	4a0c      	ldr	r2, [pc, #48]	; (800b4e0 <prvInitialiseNewTask+0x144>)
 800b4b0:	65da      	str	r2, [r3, #92]	; 0x5c
 800b4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b4:	4a0b      	ldr	r2, [pc, #44]	; (800b4e4 <prvInitialiseNewTask+0x148>)
 800b4b6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b4b8:	683a      	ldr	r2, [r7, #0]
 800b4ba:	68f9      	ldr	r1, [r7, #12]
 800b4bc:	69b8      	ldr	r0, [r7, #24]
 800b4be:	f001 fa65 	bl	800c98c <pxPortInitialiseStack>
 800b4c2:	4602      	mov	r2, r0
 800b4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b4c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d002      	beq.n	800b4d4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4d2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b4d4:	bf00      	nop
 800b4d6:	3720      	adds	r7, #32
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}
 800b4dc:	200094b0 	.word	0x200094b0
 800b4e0:	20009518 	.word	0x20009518
 800b4e4:	20009580 	.word	0x20009580

0800b4e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b082      	sub	sp, #8
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b4f0:	f001 fb78 	bl	800cbe4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b4f4:	4b2d      	ldr	r3, [pc, #180]	; (800b5ac <prvAddNewTaskToReadyList+0xc4>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	3301      	adds	r3, #1
 800b4fa:	4a2c      	ldr	r2, [pc, #176]	; (800b5ac <prvAddNewTaskToReadyList+0xc4>)
 800b4fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b4fe:	4b2c      	ldr	r3, [pc, #176]	; (800b5b0 <prvAddNewTaskToReadyList+0xc8>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d109      	bne.n	800b51a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b506:	4a2a      	ldr	r2, [pc, #168]	; (800b5b0 <prvAddNewTaskToReadyList+0xc8>)
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b50c:	4b27      	ldr	r3, [pc, #156]	; (800b5ac <prvAddNewTaskToReadyList+0xc4>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	2b01      	cmp	r3, #1
 800b512:	d110      	bne.n	800b536 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b514:	f000 fc4c 	bl	800bdb0 <prvInitialiseTaskLists>
 800b518:	e00d      	b.n	800b536 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b51a:	4b26      	ldr	r3, [pc, #152]	; (800b5b4 <prvAddNewTaskToReadyList+0xcc>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d109      	bne.n	800b536 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b522:	4b23      	ldr	r3, [pc, #140]	; (800b5b0 <prvAddNewTaskToReadyList+0xc8>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b52c:	429a      	cmp	r2, r3
 800b52e:	d802      	bhi.n	800b536 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b530:	4a1f      	ldr	r2, [pc, #124]	; (800b5b0 <prvAddNewTaskToReadyList+0xc8>)
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b536:	4b20      	ldr	r3, [pc, #128]	; (800b5b8 <prvAddNewTaskToReadyList+0xd0>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	3301      	adds	r3, #1
 800b53c:	4a1e      	ldr	r2, [pc, #120]	; (800b5b8 <prvAddNewTaskToReadyList+0xd0>)
 800b53e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b540:	4b1d      	ldr	r3, [pc, #116]	; (800b5b8 <prvAddNewTaskToReadyList+0xd0>)
 800b542:	681a      	ldr	r2, [r3, #0]
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b54c:	4b1b      	ldr	r3, [pc, #108]	; (800b5bc <prvAddNewTaskToReadyList+0xd4>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	429a      	cmp	r2, r3
 800b552:	d903      	bls.n	800b55c <prvAddNewTaskToReadyList+0x74>
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b558:	4a18      	ldr	r2, [pc, #96]	; (800b5bc <prvAddNewTaskToReadyList+0xd4>)
 800b55a:	6013      	str	r3, [r2, #0]
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b560:	4613      	mov	r3, r2
 800b562:	009b      	lsls	r3, r3, #2
 800b564:	4413      	add	r3, r2
 800b566:	009b      	lsls	r3, r3, #2
 800b568:	4a15      	ldr	r2, [pc, #84]	; (800b5c0 <prvAddNewTaskToReadyList+0xd8>)
 800b56a:	441a      	add	r2, r3
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	3304      	adds	r3, #4
 800b570:	4619      	mov	r1, r3
 800b572:	4610      	mov	r0, r2
 800b574:	f7fe ff9f 	bl	800a4b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b578:	f001 fb64 	bl	800cc44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b57c:	4b0d      	ldr	r3, [pc, #52]	; (800b5b4 <prvAddNewTaskToReadyList+0xcc>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d00e      	beq.n	800b5a2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b584:	4b0a      	ldr	r3, [pc, #40]	; (800b5b0 <prvAddNewTaskToReadyList+0xc8>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b58e:	429a      	cmp	r2, r3
 800b590:	d207      	bcs.n	800b5a2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b592:	4b0c      	ldr	r3, [pc, #48]	; (800b5c4 <prvAddNewTaskToReadyList+0xdc>)
 800b594:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b598:	601a      	str	r2, [r3, #0]
 800b59a:	f3bf 8f4f 	dsb	sy
 800b59e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b5a2:	bf00      	nop
 800b5a4:	3708      	adds	r7, #8
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}
 800b5aa:	bf00      	nop
 800b5ac:	200055a8 	.word	0x200055a8
 800b5b0:	200050d4 	.word	0x200050d4
 800b5b4:	200055b4 	.word	0x200055b4
 800b5b8:	200055c4 	.word	0x200055c4
 800b5bc:	200055b0 	.word	0x200055b0
 800b5c0:	200050d8 	.word	0x200050d8
 800b5c4:	e000ed04 	.word	0xe000ed04

0800b5c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b084      	sub	sp, #16
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d017      	beq.n	800b60a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b5da:	4b13      	ldr	r3, [pc, #76]	; (800b628 <vTaskDelay+0x60>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d00a      	beq.n	800b5f8 <vTaskDelay+0x30>
	__asm volatile
 800b5e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e6:	f383 8811 	msr	BASEPRI, r3
 800b5ea:	f3bf 8f6f 	isb	sy
 800b5ee:	f3bf 8f4f 	dsb	sy
 800b5f2:	60bb      	str	r3, [r7, #8]
}
 800b5f4:	bf00      	nop
 800b5f6:	e7fe      	b.n	800b5f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b5f8:	f000 f88a 	bl	800b710 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b5fc:	2100      	movs	r1, #0
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f000 fe22 	bl	800c248 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b604:	f000 f892 	bl	800b72c <xTaskResumeAll>
 800b608:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d107      	bne.n	800b620 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b610:	4b06      	ldr	r3, [pc, #24]	; (800b62c <vTaskDelay+0x64>)
 800b612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b616:	601a      	str	r2, [r3, #0]
 800b618:	f3bf 8f4f 	dsb	sy
 800b61c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b620:	bf00      	nop
 800b622:	3710      	adds	r7, #16
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}
 800b628:	200055d0 	.word	0x200055d0
 800b62c:	e000ed04 	.word	0xe000ed04

0800b630 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b08a      	sub	sp, #40	; 0x28
 800b634:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b636:	2300      	movs	r3, #0
 800b638:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b63a:	2300      	movs	r3, #0
 800b63c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b63e:	463a      	mov	r2, r7
 800b640:	1d39      	adds	r1, r7, #4
 800b642:	f107 0308 	add.w	r3, r7, #8
 800b646:	4618      	mov	r0, r3
 800b648:	f7fe fed4 	bl	800a3f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b64c:	6839      	ldr	r1, [r7, #0]
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	68ba      	ldr	r2, [r7, #8]
 800b652:	9202      	str	r2, [sp, #8]
 800b654:	9301      	str	r3, [sp, #4]
 800b656:	2300      	movs	r3, #0
 800b658:	9300      	str	r3, [sp, #0]
 800b65a:	2300      	movs	r3, #0
 800b65c:	460a      	mov	r2, r1
 800b65e:	4924      	ldr	r1, [pc, #144]	; (800b6f0 <vTaskStartScheduler+0xc0>)
 800b660:	4824      	ldr	r0, [pc, #144]	; (800b6f4 <vTaskStartScheduler+0xc4>)
 800b662:	f7ff fdf9 	bl	800b258 <xTaskCreateStatic>
 800b666:	4603      	mov	r3, r0
 800b668:	4a23      	ldr	r2, [pc, #140]	; (800b6f8 <vTaskStartScheduler+0xc8>)
 800b66a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b66c:	4b22      	ldr	r3, [pc, #136]	; (800b6f8 <vTaskStartScheduler+0xc8>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d002      	beq.n	800b67a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b674:	2301      	movs	r3, #1
 800b676:	617b      	str	r3, [r7, #20]
 800b678:	e001      	b.n	800b67e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b67a:	2300      	movs	r3, #0
 800b67c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b67e:	697b      	ldr	r3, [r7, #20]
 800b680:	2b01      	cmp	r3, #1
 800b682:	d102      	bne.n	800b68a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b684:	f000 fe34 	bl	800c2f0 <xTimerCreateTimerTask>
 800b688:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b68a:	697b      	ldr	r3, [r7, #20]
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	d11b      	bne.n	800b6c8 <vTaskStartScheduler+0x98>
	__asm volatile
 800b690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b694:	f383 8811 	msr	BASEPRI, r3
 800b698:	f3bf 8f6f 	isb	sy
 800b69c:	f3bf 8f4f 	dsb	sy
 800b6a0:	613b      	str	r3, [r7, #16]
}
 800b6a2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b6a4:	4b15      	ldr	r3, [pc, #84]	; (800b6fc <vTaskStartScheduler+0xcc>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	3354      	adds	r3, #84	; 0x54
 800b6aa:	4a15      	ldr	r2, [pc, #84]	; (800b700 <vTaskStartScheduler+0xd0>)
 800b6ac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b6ae:	4b15      	ldr	r3, [pc, #84]	; (800b704 <vTaskStartScheduler+0xd4>)
 800b6b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b6b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b6b6:	4b14      	ldr	r3, [pc, #80]	; (800b708 <vTaskStartScheduler+0xd8>)
 800b6b8:	2201      	movs	r2, #1
 800b6ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b6bc:	4b13      	ldr	r3, [pc, #76]	; (800b70c <vTaskStartScheduler+0xdc>)
 800b6be:	2200      	movs	r2, #0
 800b6c0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b6c2:	f001 f9ed 	bl	800caa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b6c6:	e00e      	b.n	800b6e6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b6c8:	697b      	ldr	r3, [r7, #20]
 800b6ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b6ce:	d10a      	bne.n	800b6e6 <vTaskStartScheduler+0xb6>
	__asm volatile
 800b6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d4:	f383 8811 	msr	BASEPRI, r3
 800b6d8:	f3bf 8f6f 	isb	sy
 800b6dc:	f3bf 8f4f 	dsb	sy
 800b6e0:	60fb      	str	r3, [r7, #12]
}
 800b6e2:	bf00      	nop
 800b6e4:	e7fe      	b.n	800b6e4 <vTaskStartScheduler+0xb4>
}
 800b6e6:	bf00      	nop
 800b6e8:	3718      	adds	r7, #24
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}
 800b6ee:	bf00      	nop
 800b6f0:	080174d4 	.word	0x080174d4
 800b6f4:	0800bd81 	.word	0x0800bd81
 800b6f8:	200055cc 	.word	0x200055cc
 800b6fc:	200050d4 	.word	0x200050d4
 800b700:	200000d8 	.word	0x200000d8
 800b704:	200055c8 	.word	0x200055c8
 800b708:	200055b4 	.word	0x200055b4
 800b70c:	200055ac 	.word	0x200055ac

0800b710 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b710:	b480      	push	{r7}
 800b712:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b714:	4b04      	ldr	r3, [pc, #16]	; (800b728 <vTaskSuspendAll+0x18>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	3301      	adds	r3, #1
 800b71a:	4a03      	ldr	r2, [pc, #12]	; (800b728 <vTaskSuspendAll+0x18>)
 800b71c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b71e:	bf00      	nop
 800b720:	46bd      	mov	sp, r7
 800b722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b726:	4770      	bx	lr
 800b728:	200055d0 	.word	0x200055d0

0800b72c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b084      	sub	sp, #16
 800b730:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b732:	2300      	movs	r3, #0
 800b734:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b736:	2300      	movs	r3, #0
 800b738:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b73a:	4b42      	ldr	r3, [pc, #264]	; (800b844 <xTaskResumeAll+0x118>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d10a      	bne.n	800b758 <xTaskResumeAll+0x2c>
	__asm volatile
 800b742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b746:	f383 8811 	msr	BASEPRI, r3
 800b74a:	f3bf 8f6f 	isb	sy
 800b74e:	f3bf 8f4f 	dsb	sy
 800b752:	603b      	str	r3, [r7, #0]
}
 800b754:	bf00      	nop
 800b756:	e7fe      	b.n	800b756 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b758:	f001 fa44 	bl	800cbe4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b75c:	4b39      	ldr	r3, [pc, #228]	; (800b844 <xTaskResumeAll+0x118>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	3b01      	subs	r3, #1
 800b762:	4a38      	ldr	r2, [pc, #224]	; (800b844 <xTaskResumeAll+0x118>)
 800b764:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b766:	4b37      	ldr	r3, [pc, #220]	; (800b844 <xTaskResumeAll+0x118>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d162      	bne.n	800b834 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b76e:	4b36      	ldr	r3, [pc, #216]	; (800b848 <xTaskResumeAll+0x11c>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d05e      	beq.n	800b834 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b776:	e02f      	b.n	800b7d8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b778:	4b34      	ldr	r3, [pc, #208]	; (800b84c <xTaskResumeAll+0x120>)
 800b77a:	68db      	ldr	r3, [r3, #12]
 800b77c:	68db      	ldr	r3, [r3, #12]
 800b77e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	3318      	adds	r3, #24
 800b784:	4618      	mov	r0, r3
 800b786:	f7fe fef3 	bl	800a570 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	3304      	adds	r3, #4
 800b78e:	4618      	mov	r0, r3
 800b790:	f7fe feee 	bl	800a570 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b798:	4b2d      	ldr	r3, [pc, #180]	; (800b850 <xTaskResumeAll+0x124>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	429a      	cmp	r2, r3
 800b79e:	d903      	bls.n	800b7a8 <xTaskResumeAll+0x7c>
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7a4:	4a2a      	ldr	r2, [pc, #168]	; (800b850 <xTaskResumeAll+0x124>)
 800b7a6:	6013      	str	r3, [r2, #0]
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7ac:	4613      	mov	r3, r2
 800b7ae:	009b      	lsls	r3, r3, #2
 800b7b0:	4413      	add	r3, r2
 800b7b2:	009b      	lsls	r3, r3, #2
 800b7b4:	4a27      	ldr	r2, [pc, #156]	; (800b854 <xTaskResumeAll+0x128>)
 800b7b6:	441a      	add	r2, r3
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	3304      	adds	r3, #4
 800b7bc:	4619      	mov	r1, r3
 800b7be:	4610      	mov	r0, r2
 800b7c0:	f7fe fe79 	bl	800a4b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7c8:	4b23      	ldr	r3, [pc, #140]	; (800b858 <xTaskResumeAll+0x12c>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ce:	429a      	cmp	r2, r3
 800b7d0:	d302      	bcc.n	800b7d8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b7d2:	4b22      	ldr	r3, [pc, #136]	; (800b85c <xTaskResumeAll+0x130>)
 800b7d4:	2201      	movs	r2, #1
 800b7d6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b7d8:	4b1c      	ldr	r3, [pc, #112]	; (800b84c <xTaskResumeAll+0x120>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d1cb      	bne.n	800b778 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d001      	beq.n	800b7ea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b7e6:	f000 fb85 	bl	800bef4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b7ea:	4b1d      	ldr	r3, [pc, #116]	; (800b860 <xTaskResumeAll+0x134>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d010      	beq.n	800b818 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b7f6:	f000 f847 	bl	800b888 <xTaskIncrementTick>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d002      	beq.n	800b806 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b800:	4b16      	ldr	r3, [pc, #88]	; (800b85c <xTaskResumeAll+0x130>)
 800b802:	2201      	movs	r2, #1
 800b804:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	3b01      	subs	r3, #1
 800b80a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d1f1      	bne.n	800b7f6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b812:	4b13      	ldr	r3, [pc, #76]	; (800b860 <xTaskResumeAll+0x134>)
 800b814:	2200      	movs	r2, #0
 800b816:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b818:	4b10      	ldr	r3, [pc, #64]	; (800b85c <xTaskResumeAll+0x130>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d009      	beq.n	800b834 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b820:	2301      	movs	r3, #1
 800b822:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b824:	4b0f      	ldr	r3, [pc, #60]	; (800b864 <xTaskResumeAll+0x138>)
 800b826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b82a:	601a      	str	r2, [r3, #0]
 800b82c:	f3bf 8f4f 	dsb	sy
 800b830:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b834:	f001 fa06 	bl	800cc44 <vPortExitCritical>

	return xAlreadyYielded;
 800b838:	68bb      	ldr	r3, [r7, #8]
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3710      	adds	r7, #16
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}
 800b842:	bf00      	nop
 800b844:	200055d0 	.word	0x200055d0
 800b848:	200055a8 	.word	0x200055a8
 800b84c:	20005568 	.word	0x20005568
 800b850:	200055b0 	.word	0x200055b0
 800b854:	200050d8 	.word	0x200050d8
 800b858:	200050d4 	.word	0x200050d4
 800b85c:	200055bc 	.word	0x200055bc
 800b860:	200055b8 	.word	0x200055b8
 800b864:	e000ed04 	.word	0xe000ed04

0800b868 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b868:	b480      	push	{r7}
 800b86a:	b083      	sub	sp, #12
 800b86c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b86e:	4b05      	ldr	r3, [pc, #20]	; (800b884 <xTaskGetTickCount+0x1c>)
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b874:	687b      	ldr	r3, [r7, #4]
}
 800b876:	4618      	mov	r0, r3
 800b878:	370c      	adds	r7, #12
 800b87a:	46bd      	mov	sp, r7
 800b87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b880:	4770      	bx	lr
 800b882:	bf00      	nop
 800b884:	200055ac 	.word	0x200055ac

0800b888 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b086      	sub	sp, #24
 800b88c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b88e:	2300      	movs	r3, #0
 800b890:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b892:	4b4f      	ldr	r3, [pc, #316]	; (800b9d0 <xTaskIncrementTick+0x148>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	2b00      	cmp	r3, #0
 800b898:	f040 808f 	bne.w	800b9ba <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b89c:	4b4d      	ldr	r3, [pc, #308]	; (800b9d4 <xTaskIncrementTick+0x14c>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	3301      	adds	r3, #1
 800b8a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b8a4:	4a4b      	ldr	r2, [pc, #300]	; (800b9d4 <xTaskIncrementTick+0x14c>)
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d120      	bne.n	800b8f2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b8b0:	4b49      	ldr	r3, [pc, #292]	; (800b9d8 <xTaskIncrementTick+0x150>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d00a      	beq.n	800b8d0 <xTaskIncrementTick+0x48>
	__asm volatile
 800b8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8be:	f383 8811 	msr	BASEPRI, r3
 800b8c2:	f3bf 8f6f 	isb	sy
 800b8c6:	f3bf 8f4f 	dsb	sy
 800b8ca:	603b      	str	r3, [r7, #0]
}
 800b8cc:	bf00      	nop
 800b8ce:	e7fe      	b.n	800b8ce <xTaskIncrementTick+0x46>
 800b8d0:	4b41      	ldr	r3, [pc, #260]	; (800b9d8 <xTaskIncrementTick+0x150>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	60fb      	str	r3, [r7, #12]
 800b8d6:	4b41      	ldr	r3, [pc, #260]	; (800b9dc <xTaskIncrementTick+0x154>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	4a3f      	ldr	r2, [pc, #252]	; (800b9d8 <xTaskIncrementTick+0x150>)
 800b8dc:	6013      	str	r3, [r2, #0]
 800b8de:	4a3f      	ldr	r2, [pc, #252]	; (800b9dc <xTaskIncrementTick+0x154>)
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	6013      	str	r3, [r2, #0]
 800b8e4:	4b3e      	ldr	r3, [pc, #248]	; (800b9e0 <xTaskIncrementTick+0x158>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	3301      	adds	r3, #1
 800b8ea:	4a3d      	ldr	r2, [pc, #244]	; (800b9e0 <xTaskIncrementTick+0x158>)
 800b8ec:	6013      	str	r3, [r2, #0]
 800b8ee:	f000 fb01 	bl	800bef4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b8f2:	4b3c      	ldr	r3, [pc, #240]	; (800b9e4 <xTaskIncrementTick+0x15c>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	693a      	ldr	r2, [r7, #16]
 800b8f8:	429a      	cmp	r2, r3
 800b8fa:	d349      	bcc.n	800b990 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b8fc:	4b36      	ldr	r3, [pc, #216]	; (800b9d8 <xTaskIncrementTick+0x150>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d104      	bne.n	800b910 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b906:	4b37      	ldr	r3, [pc, #220]	; (800b9e4 <xTaskIncrementTick+0x15c>)
 800b908:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b90c:	601a      	str	r2, [r3, #0]
					break;
 800b90e:	e03f      	b.n	800b990 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b910:	4b31      	ldr	r3, [pc, #196]	; (800b9d8 <xTaskIncrementTick+0x150>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	68db      	ldr	r3, [r3, #12]
 800b916:	68db      	ldr	r3, [r3, #12]
 800b918:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	685b      	ldr	r3, [r3, #4]
 800b91e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b920:	693a      	ldr	r2, [r7, #16]
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	429a      	cmp	r2, r3
 800b926:	d203      	bcs.n	800b930 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b928:	4a2e      	ldr	r2, [pc, #184]	; (800b9e4 <xTaskIncrementTick+0x15c>)
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b92e:	e02f      	b.n	800b990 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	3304      	adds	r3, #4
 800b934:	4618      	mov	r0, r3
 800b936:	f7fe fe1b 	bl	800a570 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d004      	beq.n	800b94c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	3318      	adds	r3, #24
 800b946:	4618      	mov	r0, r3
 800b948:	f7fe fe12 	bl	800a570 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b950:	4b25      	ldr	r3, [pc, #148]	; (800b9e8 <xTaskIncrementTick+0x160>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	429a      	cmp	r2, r3
 800b956:	d903      	bls.n	800b960 <xTaskIncrementTick+0xd8>
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b95c:	4a22      	ldr	r2, [pc, #136]	; (800b9e8 <xTaskIncrementTick+0x160>)
 800b95e:	6013      	str	r3, [r2, #0]
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b964:	4613      	mov	r3, r2
 800b966:	009b      	lsls	r3, r3, #2
 800b968:	4413      	add	r3, r2
 800b96a:	009b      	lsls	r3, r3, #2
 800b96c:	4a1f      	ldr	r2, [pc, #124]	; (800b9ec <xTaskIncrementTick+0x164>)
 800b96e:	441a      	add	r2, r3
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	3304      	adds	r3, #4
 800b974:	4619      	mov	r1, r3
 800b976:	4610      	mov	r0, r2
 800b978:	f7fe fd9d 	bl	800a4b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b980:	4b1b      	ldr	r3, [pc, #108]	; (800b9f0 <xTaskIncrementTick+0x168>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b986:	429a      	cmp	r2, r3
 800b988:	d3b8      	bcc.n	800b8fc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b98a:	2301      	movs	r3, #1
 800b98c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b98e:	e7b5      	b.n	800b8fc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b990:	4b17      	ldr	r3, [pc, #92]	; (800b9f0 <xTaskIncrementTick+0x168>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b996:	4915      	ldr	r1, [pc, #84]	; (800b9ec <xTaskIncrementTick+0x164>)
 800b998:	4613      	mov	r3, r2
 800b99a:	009b      	lsls	r3, r3, #2
 800b99c:	4413      	add	r3, r2
 800b99e:	009b      	lsls	r3, r3, #2
 800b9a0:	440b      	add	r3, r1
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	2b01      	cmp	r3, #1
 800b9a6:	d901      	bls.n	800b9ac <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b9ac:	4b11      	ldr	r3, [pc, #68]	; (800b9f4 <xTaskIncrementTick+0x16c>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d007      	beq.n	800b9c4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	617b      	str	r3, [r7, #20]
 800b9b8:	e004      	b.n	800b9c4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b9ba:	4b0f      	ldr	r3, [pc, #60]	; (800b9f8 <xTaskIncrementTick+0x170>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	3301      	adds	r3, #1
 800b9c0:	4a0d      	ldr	r2, [pc, #52]	; (800b9f8 <xTaskIncrementTick+0x170>)
 800b9c2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b9c4:	697b      	ldr	r3, [r7, #20]
}
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	3718      	adds	r7, #24
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}
 800b9ce:	bf00      	nop
 800b9d0:	200055d0 	.word	0x200055d0
 800b9d4:	200055ac 	.word	0x200055ac
 800b9d8:	20005560 	.word	0x20005560
 800b9dc:	20005564 	.word	0x20005564
 800b9e0:	200055c0 	.word	0x200055c0
 800b9e4:	200055c8 	.word	0x200055c8
 800b9e8:	200055b0 	.word	0x200055b0
 800b9ec:	200050d8 	.word	0x200050d8
 800b9f0:	200050d4 	.word	0x200050d4
 800b9f4:	200055bc 	.word	0x200055bc
 800b9f8:	200055b8 	.word	0x200055b8

0800b9fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b085      	sub	sp, #20
 800ba00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ba02:	4b2a      	ldr	r3, [pc, #168]	; (800baac <vTaskSwitchContext+0xb0>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d003      	beq.n	800ba12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ba0a:	4b29      	ldr	r3, [pc, #164]	; (800bab0 <vTaskSwitchContext+0xb4>)
 800ba0c:	2201      	movs	r2, #1
 800ba0e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ba10:	e046      	b.n	800baa0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800ba12:	4b27      	ldr	r3, [pc, #156]	; (800bab0 <vTaskSwitchContext+0xb4>)
 800ba14:	2200      	movs	r2, #0
 800ba16:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba18:	4b26      	ldr	r3, [pc, #152]	; (800bab4 <vTaskSwitchContext+0xb8>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	60fb      	str	r3, [r7, #12]
 800ba1e:	e010      	b.n	800ba42 <vTaskSwitchContext+0x46>
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d10a      	bne.n	800ba3c <vTaskSwitchContext+0x40>
	__asm volatile
 800ba26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba2a:	f383 8811 	msr	BASEPRI, r3
 800ba2e:	f3bf 8f6f 	isb	sy
 800ba32:	f3bf 8f4f 	dsb	sy
 800ba36:	607b      	str	r3, [r7, #4]
}
 800ba38:	bf00      	nop
 800ba3a:	e7fe      	b.n	800ba3a <vTaskSwitchContext+0x3e>
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	3b01      	subs	r3, #1
 800ba40:	60fb      	str	r3, [r7, #12]
 800ba42:	491d      	ldr	r1, [pc, #116]	; (800bab8 <vTaskSwitchContext+0xbc>)
 800ba44:	68fa      	ldr	r2, [r7, #12]
 800ba46:	4613      	mov	r3, r2
 800ba48:	009b      	lsls	r3, r3, #2
 800ba4a:	4413      	add	r3, r2
 800ba4c:	009b      	lsls	r3, r3, #2
 800ba4e:	440b      	add	r3, r1
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d0e4      	beq.n	800ba20 <vTaskSwitchContext+0x24>
 800ba56:	68fa      	ldr	r2, [r7, #12]
 800ba58:	4613      	mov	r3, r2
 800ba5a:	009b      	lsls	r3, r3, #2
 800ba5c:	4413      	add	r3, r2
 800ba5e:	009b      	lsls	r3, r3, #2
 800ba60:	4a15      	ldr	r2, [pc, #84]	; (800bab8 <vTaskSwitchContext+0xbc>)
 800ba62:	4413      	add	r3, r2
 800ba64:	60bb      	str	r3, [r7, #8]
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	685b      	ldr	r3, [r3, #4]
 800ba6a:	685a      	ldr	r2, [r3, #4]
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	605a      	str	r2, [r3, #4]
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	685a      	ldr	r2, [r3, #4]
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	3308      	adds	r3, #8
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	d104      	bne.n	800ba86 <vTaskSwitchContext+0x8a>
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	685b      	ldr	r3, [r3, #4]
 800ba80:	685a      	ldr	r2, [r3, #4]
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	605a      	str	r2, [r3, #4]
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	685b      	ldr	r3, [r3, #4]
 800ba8a:	68db      	ldr	r3, [r3, #12]
 800ba8c:	4a0b      	ldr	r2, [pc, #44]	; (800babc <vTaskSwitchContext+0xc0>)
 800ba8e:	6013      	str	r3, [r2, #0]
 800ba90:	4a08      	ldr	r2, [pc, #32]	; (800bab4 <vTaskSwitchContext+0xb8>)
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ba96:	4b09      	ldr	r3, [pc, #36]	; (800babc <vTaskSwitchContext+0xc0>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	3354      	adds	r3, #84	; 0x54
 800ba9c:	4a08      	ldr	r2, [pc, #32]	; (800bac0 <vTaskSwitchContext+0xc4>)
 800ba9e:	6013      	str	r3, [r2, #0]
}
 800baa0:	bf00      	nop
 800baa2:	3714      	adds	r7, #20
 800baa4:	46bd      	mov	sp, r7
 800baa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baaa:	4770      	bx	lr
 800baac:	200055d0 	.word	0x200055d0
 800bab0:	200055bc 	.word	0x200055bc
 800bab4:	200055b0 	.word	0x200055b0
 800bab8:	200050d8 	.word	0x200050d8
 800babc:	200050d4 	.word	0x200050d4
 800bac0:	200000d8 	.word	0x200000d8

0800bac4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b084      	sub	sp, #16
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
 800bacc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d10a      	bne.n	800baea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad8:	f383 8811 	msr	BASEPRI, r3
 800badc:	f3bf 8f6f 	isb	sy
 800bae0:	f3bf 8f4f 	dsb	sy
 800bae4:	60fb      	str	r3, [r7, #12]
}
 800bae6:	bf00      	nop
 800bae8:	e7fe      	b.n	800bae8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800baea:	4b07      	ldr	r3, [pc, #28]	; (800bb08 <vTaskPlaceOnEventList+0x44>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	3318      	adds	r3, #24
 800baf0:	4619      	mov	r1, r3
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f7fe fd03 	bl	800a4fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800baf8:	2101      	movs	r1, #1
 800bafa:	6838      	ldr	r0, [r7, #0]
 800bafc:	f000 fba4 	bl	800c248 <prvAddCurrentTaskToDelayedList>
}
 800bb00:	bf00      	nop
 800bb02:	3710      	adds	r7, #16
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}
 800bb08:	200050d4 	.word	0x200050d4

0800bb0c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b086      	sub	sp, #24
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	60f8      	str	r0, [r7, #12]
 800bb14:	60b9      	str	r1, [r7, #8]
 800bb16:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d10a      	bne.n	800bb34 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bb1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb22:	f383 8811 	msr	BASEPRI, r3
 800bb26:	f3bf 8f6f 	isb	sy
 800bb2a:	f3bf 8f4f 	dsb	sy
 800bb2e:	617b      	str	r3, [r7, #20]
}
 800bb30:	bf00      	nop
 800bb32:	e7fe      	b.n	800bb32 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bb34:	4b0a      	ldr	r3, [pc, #40]	; (800bb60 <vTaskPlaceOnEventListRestricted+0x54>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	3318      	adds	r3, #24
 800bb3a:	4619      	mov	r1, r3
 800bb3c:	68f8      	ldr	r0, [r7, #12]
 800bb3e:	f7fe fcba 	bl	800a4b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d002      	beq.n	800bb4e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bb48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bb4c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bb4e:	6879      	ldr	r1, [r7, #4]
 800bb50:	68b8      	ldr	r0, [r7, #8]
 800bb52:	f000 fb79 	bl	800c248 <prvAddCurrentTaskToDelayedList>
	}
 800bb56:	bf00      	nop
 800bb58:	3718      	adds	r7, #24
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}
 800bb5e:	bf00      	nop
 800bb60:	200050d4 	.word	0x200050d4

0800bb64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b086      	sub	sp, #24
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	68db      	ldr	r3, [r3, #12]
 800bb70:	68db      	ldr	r3, [r3, #12]
 800bb72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bb74:	693b      	ldr	r3, [r7, #16]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d10a      	bne.n	800bb90 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bb7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb7e:	f383 8811 	msr	BASEPRI, r3
 800bb82:	f3bf 8f6f 	isb	sy
 800bb86:	f3bf 8f4f 	dsb	sy
 800bb8a:	60fb      	str	r3, [r7, #12]
}
 800bb8c:	bf00      	nop
 800bb8e:	e7fe      	b.n	800bb8e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bb90:	693b      	ldr	r3, [r7, #16]
 800bb92:	3318      	adds	r3, #24
 800bb94:	4618      	mov	r0, r3
 800bb96:	f7fe fceb 	bl	800a570 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb9a:	4b1e      	ldr	r3, [pc, #120]	; (800bc14 <xTaskRemoveFromEventList+0xb0>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d11d      	bne.n	800bbde <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bba2:	693b      	ldr	r3, [r7, #16]
 800bba4:	3304      	adds	r3, #4
 800bba6:	4618      	mov	r0, r3
 800bba8:	f7fe fce2 	bl	800a570 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbb0:	4b19      	ldr	r3, [pc, #100]	; (800bc18 <xTaskRemoveFromEventList+0xb4>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	429a      	cmp	r2, r3
 800bbb6:	d903      	bls.n	800bbc0 <xTaskRemoveFromEventList+0x5c>
 800bbb8:	693b      	ldr	r3, [r7, #16]
 800bbba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbbc:	4a16      	ldr	r2, [pc, #88]	; (800bc18 <xTaskRemoveFromEventList+0xb4>)
 800bbbe:	6013      	str	r3, [r2, #0]
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbc4:	4613      	mov	r3, r2
 800bbc6:	009b      	lsls	r3, r3, #2
 800bbc8:	4413      	add	r3, r2
 800bbca:	009b      	lsls	r3, r3, #2
 800bbcc:	4a13      	ldr	r2, [pc, #76]	; (800bc1c <xTaskRemoveFromEventList+0xb8>)
 800bbce:	441a      	add	r2, r3
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	3304      	adds	r3, #4
 800bbd4:	4619      	mov	r1, r3
 800bbd6:	4610      	mov	r0, r2
 800bbd8:	f7fe fc6d 	bl	800a4b6 <vListInsertEnd>
 800bbdc:	e005      	b.n	800bbea <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	3318      	adds	r3, #24
 800bbe2:	4619      	mov	r1, r3
 800bbe4:	480e      	ldr	r0, [pc, #56]	; (800bc20 <xTaskRemoveFromEventList+0xbc>)
 800bbe6:	f7fe fc66 	bl	800a4b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bbea:	693b      	ldr	r3, [r7, #16]
 800bbec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbee:	4b0d      	ldr	r3, [pc, #52]	; (800bc24 <xTaskRemoveFromEventList+0xc0>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	d905      	bls.n	800bc04 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bbfc:	4b0a      	ldr	r3, [pc, #40]	; (800bc28 <xTaskRemoveFromEventList+0xc4>)
 800bbfe:	2201      	movs	r2, #1
 800bc00:	601a      	str	r2, [r3, #0]
 800bc02:	e001      	b.n	800bc08 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bc04:	2300      	movs	r3, #0
 800bc06:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bc08:	697b      	ldr	r3, [r7, #20]
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	3718      	adds	r7, #24
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}
 800bc12:	bf00      	nop
 800bc14:	200055d0 	.word	0x200055d0
 800bc18:	200055b0 	.word	0x200055b0
 800bc1c:	200050d8 	.word	0x200050d8
 800bc20:	20005568 	.word	0x20005568
 800bc24:	200050d4 	.word	0x200050d4
 800bc28:	200055bc 	.word	0x200055bc

0800bc2c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b084      	sub	sp, #16
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d10a      	bne.n	800bc50 <vTaskSetTimeOutState+0x24>
	__asm volatile
 800bc3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc3e:	f383 8811 	msr	BASEPRI, r3
 800bc42:	f3bf 8f6f 	isb	sy
 800bc46:	f3bf 8f4f 	dsb	sy
 800bc4a:	60fb      	str	r3, [r7, #12]
}
 800bc4c:	bf00      	nop
 800bc4e:	e7fe      	b.n	800bc4e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800bc50:	f000 ffc8 	bl	800cbe4 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bc54:	4b06      	ldr	r3, [pc, #24]	; (800bc70 <vTaskSetTimeOutState+0x44>)
 800bc56:	681a      	ldr	r2, [r3, #0]
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800bc5c:	4b05      	ldr	r3, [pc, #20]	; (800bc74 <vTaskSetTimeOutState+0x48>)
 800bc5e:	681a      	ldr	r2, [r3, #0]
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800bc64:	f000 ffee 	bl	800cc44 <vPortExitCritical>
}
 800bc68:	bf00      	nop
 800bc6a:	3710      	adds	r7, #16
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bd80      	pop	{r7, pc}
 800bc70:	200055c0 	.word	0x200055c0
 800bc74:	200055ac 	.word	0x200055ac

0800bc78 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bc78:	b480      	push	{r7}
 800bc7a:	b083      	sub	sp, #12
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bc80:	4b06      	ldr	r3, [pc, #24]	; (800bc9c <vTaskInternalSetTimeOutState+0x24>)
 800bc82:	681a      	ldr	r2, [r3, #0]
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bc88:	4b05      	ldr	r3, [pc, #20]	; (800bca0 <vTaskInternalSetTimeOutState+0x28>)
 800bc8a:	681a      	ldr	r2, [r3, #0]
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	605a      	str	r2, [r3, #4]
}
 800bc90:	bf00      	nop
 800bc92:	370c      	adds	r7, #12
 800bc94:	46bd      	mov	sp, r7
 800bc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9a:	4770      	bx	lr
 800bc9c:	200055c0 	.word	0x200055c0
 800bca0:	200055ac 	.word	0x200055ac

0800bca4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b088      	sub	sp, #32
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d10a      	bne.n	800bcca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bcb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb8:	f383 8811 	msr	BASEPRI, r3
 800bcbc:	f3bf 8f6f 	isb	sy
 800bcc0:	f3bf 8f4f 	dsb	sy
 800bcc4:	613b      	str	r3, [r7, #16]
}
 800bcc6:	bf00      	nop
 800bcc8:	e7fe      	b.n	800bcc8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d10a      	bne.n	800bce6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bcd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd4:	f383 8811 	msr	BASEPRI, r3
 800bcd8:	f3bf 8f6f 	isb	sy
 800bcdc:	f3bf 8f4f 	dsb	sy
 800bce0:	60fb      	str	r3, [r7, #12]
}
 800bce2:	bf00      	nop
 800bce4:	e7fe      	b.n	800bce4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bce6:	f000 ff7d 	bl	800cbe4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bcea:	4b1d      	ldr	r3, [pc, #116]	; (800bd60 <xTaskCheckForTimeOut+0xbc>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	685b      	ldr	r3, [r3, #4]
 800bcf4:	69ba      	ldr	r2, [r7, #24]
 800bcf6:	1ad3      	subs	r3, r2, r3
 800bcf8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd02:	d102      	bne.n	800bd0a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bd04:	2300      	movs	r3, #0
 800bd06:	61fb      	str	r3, [r7, #28]
 800bd08:	e023      	b.n	800bd52 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681a      	ldr	r2, [r3, #0]
 800bd0e:	4b15      	ldr	r3, [pc, #84]	; (800bd64 <xTaskCheckForTimeOut+0xc0>)
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	429a      	cmp	r2, r3
 800bd14:	d007      	beq.n	800bd26 <xTaskCheckForTimeOut+0x82>
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	685b      	ldr	r3, [r3, #4]
 800bd1a:	69ba      	ldr	r2, [r7, #24]
 800bd1c:	429a      	cmp	r2, r3
 800bd1e:	d302      	bcc.n	800bd26 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bd20:	2301      	movs	r3, #1
 800bd22:	61fb      	str	r3, [r7, #28]
 800bd24:	e015      	b.n	800bd52 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	697a      	ldr	r2, [r7, #20]
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	d20b      	bcs.n	800bd48 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	681a      	ldr	r2, [r3, #0]
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	1ad2      	subs	r2, r2, r3
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	f7ff ff9b 	bl	800bc78 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bd42:	2300      	movs	r3, #0
 800bd44:	61fb      	str	r3, [r7, #28]
 800bd46:	e004      	b.n	800bd52 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bd4e:	2301      	movs	r3, #1
 800bd50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bd52:	f000 ff77 	bl	800cc44 <vPortExitCritical>

	return xReturn;
 800bd56:	69fb      	ldr	r3, [r7, #28]
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3720      	adds	r7, #32
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}
 800bd60:	200055ac 	.word	0x200055ac
 800bd64:	200055c0 	.word	0x200055c0

0800bd68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bd68:	b480      	push	{r7}
 800bd6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bd6c:	4b03      	ldr	r3, [pc, #12]	; (800bd7c <vTaskMissedYield+0x14>)
 800bd6e:	2201      	movs	r2, #1
 800bd70:	601a      	str	r2, [r3, #0]
}
 800bd72:	bf00      	nop
 800bd74:	46bd      	mov	sp, r7
 800bd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7a:	4770      	bx	lr
 800bd7c:	200055bc 	.word	0x200055bc

0800bd80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b082      	sub	sp, #8
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bd88:	f000 f852 	bl	800be30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bd8c:	4b06      	ldr	r3, [pc, #24]	; (800bda8 <prvIdleTask+0x28>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	2b01      	cmp	r3, #1
 800bd92:	d9f9      	bls.n	800bd88 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bd94:	4b05      	ldr	r3, [pc, #20]	; (800bdac <prvIdleTask+0x2c>)
 800bd96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd9a:	601a      	str	r2, [r3, #0]
 800bd9c:	f3bf 8f4f 	dsb	sy
 800bda0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bda4:	e7f0      	b.n	800bd88 <prvIdleTask+0x8>
 800bda6:	bf00      	nop
 800bda8:	200050d8 	.word	0x200050d8
 800bdac:	e000ed04 	.word	0xe000ed04

0800bdb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b082      	sub	sp, #8
 800bdb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	607b      	str	r3, [r7, #4]
 800bdba:	e00c      	b.n	800bdd6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bdbc:	687a      	ldr	r2, [r7, #4]
 800bdbe:	4613      	mov	r3, r2
 800bdc0:	009b      	lsls	r3, r3, #2
 800bdc2:	4413      	add	r3, r2
 800bdc4:	009b      	lsls	r3, r3, #2
 800bdc6:	4a12      	ldr	r2, [pc, #72]	; (800be10 <prvInitialiseTaskLists+0x60>)
 800bdc8:	4413      	add	r3, r2
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f7fe fb46 	bl	800a45c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	3301      	adds	r3, #1
 800bdd4:	607b      	str	r3, [r7, #4]
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2b37      	cmp	r3, #55	; 0x37
 800bdda:	d9ef      	bls.n	800bdbc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bddc:	480d      	ldr	r0, [pc, #52]	; (800be14 <prvInitialiseTaskLists+0x64>)
 800bdde:	f7fe fb3d 	bl	800a45c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bde2:	480d      	ldr	r0, [pc, #52]	; (800be18 <prvInitialiseTaskLists+0x68>)
 800bde4:	f7fe fb3a 	bl	800a45c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bde8:	480c      	ldr	r0, [pc, #48]	; (800be1c <prvInitialiseTaskLists+0x6c>)
 800bdea:	f7fe fb37 	bl	800a45c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bdee:	480c      	ldr	r0, [pc, #48]	; (800be20 <prvInitialiseTaskLists+0x70>)
 800bdf0:	f7fe fb34 	bl	800a45c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bdf4:	480b      	ldr	r0, [pc, #44]	; (800be24 <prvInitialiseTaskLists+0x74>)
 800bdf6:	f7fe fb31 	bl	800a45c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bdfa:	4b0b      	ldr	r3, [pc, #44]	; (800be28 <prvInitialiseTaskLists+0x78>)
 800bdfc:	4a05      	ldr	r2, [pc, #20]	; (800be14 <prvInitialiseTaskLists+0x64>)
 800bdfe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800be00:	4b0a      	ldr	r3, [pc, #40]	; (800be2c <prvInitialiseTaskLists+0x7c>)
 800be02:	4a05      	ldr	r2, [pc, #20]	; (800be18 <prvInitialiseTaskLists+0x68>)
 800be04:	601a      	str	r2, [r3, #0]
}
 800be06:	bf00      	nop
 800be08:	3708      	adds	r7, #8
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}
 800be0e:	bf00      	nop
 800be10:	200050d8 	.word	0x200050d8
 800be14:	20005538 	.word	0x20005538
 800be18:	2000554c 	.word	0x2000554c
 800be1c:	20005568 	.word	0x20005568
 800be20:	2000557c 	.word	0x2000557c
 800be24:	20005594 	.word	0x20005594
 800be28:	20005560 	.word	0x20005560
 800be2c:	20005564 	.word	0x20005564

0800be30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b082      	sub	sp, #8
 800be34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800be36:	e019      	b.n	800be6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800be38:	f000 fed4 	bl	800cbe4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be3c:	4b10      	ldr	r3, [pc, #64]	; (800be80 <prvCheckTasksWaitingTermination+0x50>)
 800be3e:	68db      	ldr	r3, [r3, #12]
 800be40:	68db      	ldr	r3, [r3, #12]
 800be42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	3304      	adds	r3, #4
 800be48:	4618      	mov	r0, r3
 800be4a:	f7fe fb91 	bl	800a570 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800be4e:	4b0d      	ldr	r3, [pc, #52]	; (800be84 <prvCheckTasksWaitingTermination+0x54>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	3b01      	subs	r3, #1
 800be54:	4a0b      	ldr	r2, [pc, #44]	; (800be84 <prvCheckTasksWaitingTermination+0x54>)
 800be56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800be58:	4b0b      	ldr	r3, [pc, #44]	; (800be88 <prvCheckTasksWaitingTermination+0x58>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	3b01      	subs	r3, #1
 800be5e:	4a0a      	ldr	r2, [pc, #40]	; (800be88 <prvCheckTasksWaitingTermination+0x58>)
 800be60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800be62:	f000 feef 	bl	800cc44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f000 f810 	bl	800be8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800be6c:	4b06      	ldr	r3, [pc, #24]	; (800be88 <prvCheckTasksWaitingTermination+0x58>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d1e1      	bne.n	800be38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800be74:	bf00      	nop
 800be76:	bf00      	nop
 800be78:	3708      	adds	r7, #8
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}
 800be7e:	bf00      	nop
 800be80:	2000557c 	.word	0x2000557c
 800be84:	200055a8 	.word	0x200055a8
 800be88:	20005590 	.word	0x20005590

0800be8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b084      	sub	sp, #16
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	3354      	adds	r3, #84	; 0x54
 800be98:	4618      	mov	r0, r3
 800be9a:	f00a fabd 	bl	8016418 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d108      	bne.n	800beba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800beac:	4618      	mov	r0, r3
 800beae:	f001 f887 	bl	800cfc0 <vPortFree>
				vPortFree( pxTCB );
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	f001 f884 	bl	800cfc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800beb8:	e018      	b.n	800beec <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800bec0:	2b01      	cmp	r3, #1
 800bec2:	d103      	bne.n	800becc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f001 f87b 	bl	800cfc0 <vPortFree>
	}
 800beca:	e00f      	b.n	800beec <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800bed2:	2b02      	cmp	r3, #2
 800bed4:	d00a      	beq.n	800beec <prvDeleteTCB+0x60>
	__asm volatile
 800bed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beda:	f383 8811 	msr	BASEPRI, r3
 800bede:	f3bf 8f6f 	isb	sy
 800bee2:	f3bf 8f4f 	dsb	sy
 800bee6:	60fb      	str	r3, [r7, #12]
}
 800bee8:	bf00      	nop
 800beea:	e7fe      	b.n	800beea <prvDeleteTCB+0x5e>
	}
 800beec:	bf00      	nop
 800beee:	3710      	adds	r7, #16
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}

0800bef4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bef4:	b480      	push	{r7}
 800bef6:	b083      	sub	sp, #12
 800bef8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800befa:	4b0c      	ldr	r3, [pc, #48]	; (800bf2c <prvResetNextTaskUnblockTime+0x38>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d104      	bne.n	800bf0e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bf04:	4b0a      	ldr	r3, [pc, #40]	; (800bf30 <prvResetNextTaskUnblockTime+0x3c>)
 800bf06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bf0a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bf0c:	e008      	b.n	800bf20 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf0e:	4b07      	ldr	r3, [pc, #28]	; (800bf2c <prvResetNextTaskUnblockTime+0x38>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	68db      	ldr	r3, [r3, #12]
 800bf14:	68db      	ldr	r3, [r3, #12]
 800bf16:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	685b      	ldr	r3, [r3, #4]
 800bf1c:	4a04      	ldr	r2, [pc, #16]	; (800bf30 <prvResetNextTaskUnblockTime+0x3c>)
 800bf1e:	6013      	str	r3, [r2, #0]
}
 800bf20:	bf00      	nop
 800bf22:	370c      	adds	r7, #12
 800bf24:	46bd      	mov	sp, r7
 800bf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2a:	4770      	bx	lr
 800bf2c:	20005560 	.word	0x20005560
 800bf30:	200055c8 	.word	0x200055c8

0800bf34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bf34:	b480      	push	{r7}
 800bf36:	b083      	sub	sp, #12
 800bf38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bf3a:	4b0b      	ldr	r3, [pc, #44]	; (800bf68 <xTaskGetSchedulerState+0x34>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d102      	bne.n	800bf48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bf42:	2301      	movs	r3, #1
 800bf44:	607b      	str	r3, [r7, #4]
 800bf46:	e008      	b.n	800bf5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf48:	4b08      	ldr	r3, [pc, #32]	; (800bf6c <xTaskGetSchedulerState+0x38>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d102      	bne.n	800bf56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bf50:	2302      	movs	r3, #2
 800bf52:	607b      	str	r3, [r7, #4]
 800bf54:	e001      	b.n	800bf5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bf56:	2300      	movs	r3, #0
 800bf58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bf5a:	687b      	ldr	r3, [r7, #4]
	}
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	370c      	adds	r7, #12
 800bf60:	46bd      	mov	sp, r7
 800bf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf66:	4770      	bx	lr
 800bf68:	200055b4 	.word	0x200055b4
 800bf6c:	200055d0 	.word	0x200055d0

0800bf70 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b084      	sub	sp, #16
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d051      	beq.n	800c02a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bf86:	68bb      	ldr	r3, [r7, #8]
 800bf88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf8a:	4b2a      	ldr	r3, [pc, #168]	; (800c034 <xTaskPriorityInherit+0xc4>)
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf90:	429a      	cmp	r2, r3
 800bf92:	d241      	bcs.n	800c018 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	699b      	ldr	r3, [r3, #24]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	db06      	blt.n	800bfaa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf9c:	4b25      	ldr	r3, [pc, #148]	; (800c034 <xTaskPriorityInherit+0xc4>)
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfa2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	6959      	ldr	r1, [r3, #20]
 800bfae:	68bb      	ldr	r3, [r7, #8]
 800bfb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfb2:	4613      	mov	r3, r2
 800bfb4:	009b      	lsls	r3, r3, #2
 800bfb6:	4413      	add	r3, r2
 800bfb8:	009b      	lsls	r3, r3, #2
 800bfba:	4a1f      	ldr	r2, [pc, #124]	; (800c038 <xTaskPriorityInherit+0xc8>)
 800bfbc:	4413      	add	r3, r2
 800bfbe:	4299      	cmp	r1, r3
 800bfc0:	d122      	bne.n	800c008 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bfc2:	68bb      	ldr	r3, [r7, #8]
 800bfc4:	3304      	adds	r3, #4
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f7fe fad2 	bl	800a570 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bfcc:	4b19      	ldr	r3, [pc, #100]	; (800c034 <xTaskPriorityInherit+0xc4>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfd2:	68bb      	ldr	r3, [r7, #8]
 800bfd4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bfd6:	68bb      	ldr	r3, [r7, #8]
 800bfd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfda:	4b18      	ldr	r3, [pc, #96]	; (800c03c <xTaskPriorityInherit+0xcc>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	d903      	bls.n	800bfea <xTaskPriorityInherit+0x7a>
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfe6:	4a15      	ldr	r2, [pc, #84]	; (800c03c <xTaskPriorityInherit+0xcc>)
 800bfe8:	6013      	str	r3, [r2, #0]
 800bfea:	68bb      	ldr	r3, [r7, #8]
 800bfec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfee:	4613      	mov	r3, r2
 800bff0:	009b      	lsls	r3, r3, #2
 800bff2:	4413      	add	r3, r2
 800bff4:	009b      	lsls	r3, r3, #2
 800bff6:	4a10      	ldr	r2, [pc, #64]	; (800c038 <xTaskPriorityInherit+0xc8>)
 800bff8:	441a      	add	r2, r3
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	3304      	adds	r3, #4
 800bffe:	4619      	mov	r1, r3
 800c000:	4610      	mov	r0, r2
 800c002:	f7fe fa58 	bl	800a4b6 <vListInsertEnd>
 800c006:	e004      	b.n	800c012 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c008:	4b0a      	ldr	r3, [pc, #40]	; (800c034 <xTaskPriorityInherit+0xc4>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c00e:	68bb      	ldr	r3, [r7, #8]
 800c010:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c012:	2301      	movs	r3, #1
 800c014:	60fb      	str	r3, [r7, #12]
 800c016:	e008      	b.n	800c02a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c01c:	4b05      	ldr	r3, [pc, #20]	; (800c034 <xTaskPriorityInherit+0xc4>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c022:	429a      	cmp	r2, r3
 800c024:	d201      	bcs.n	800c02a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c026:	2301      	movs	r3, #1
 800c028:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c02a:	68fb      	ldr	r3, [r7, #12]
	}
 800c02c:	4618      	mov	r0, r3
 800c02e:	3710      	adds	r7, #16
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}
 800c034:	200050d4 	.word	0x200050d4
 800c038:	200050d8 	.word	0x200050d8
 800c03c:	200055b0 	.word	0x200055b0

0800c040 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c040:	b580      	push	{r7, lr}
 800c042:	b086      	sub	sp, #24
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c04c:	2300      	movs	r3, #0
 800c04e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d056      	beq.n	800c104 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c056:	4b2e      	ldr	r3, [pc, #184]	; (800c110 <xTaskPriorityDisinherit+0xd0>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	693a      	ldr	r2, [r7, #16]
 800c05c:	429a      	cmp	r2, r3
 800c05e:	d00a      	beq.n	800c076 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c064:	f383 8811 	msr	BASEPRI, r3
 800c068:	f3bf 8f6f 	isb	sy
 800c06c:	f3bf 8f4f 	dsb	sy
 800c070:	60fb      	str	r3, [r7, #12]
}
 800c072:	bf00      	nop
 800c074:	e7fe      	b.n	800c074 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d10a      	bne.n	800c094 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c082:	f383 8811 	msr	BASEPRI, r3
 800c086:	f3bf 8f6f 	isb	sy
 800c08a:	f3bf 8f4f 	dsb	sy
 800c08e:	60bb      	str	r3, [r7, #8]
}
 800c090:	bf00      	nop
 800c092:	e7fe      	b.n	800c092 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c094:	693b      	ldr	r3, [r7, #16]
 800c096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c098:	1e5a      	subs	r2, r3, #1
 800c09a:	693b      	ldr	r3, [r7, #16]
 800c09c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c09e:	693b      	ldr	r3, [r7, #16]
 800c0a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0a2:	693b      	ldr	r3, [r7, #16]
 800c0a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0a6:	429a      	cmp	r2, r3
 800c0a8:	d02c      	beq.n	800c104 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c0aa:	693b      	ldr	r3, [r7, #16]
 800c0ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d128      	bne.n	800c104 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c0b2:	693b      	ldr	r3, [r7, #16]
 800c0b4:	3304      	adds	r3, #4
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f7fe fa5a 	bl	800a570 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c0bc:	693b      	ldr	r3, [r7, #16]
 800c0be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c0c0:	693b      	ldr	r3, [r7, #16]
 800c0c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c0c4:	693b      	ldr	r3, [r7, #16]
 800c0c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0c8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c0cc:	693b      	ldr	r3, [r7, #16]
 800c0ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c0d0:	693b      	ldr	r3, [r7, #16]
 800c0d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0d4:	4b0f      	ldr	r3, [pc, #60]	; (800c114 <xTaskPriorityDisinherit+0xd4>)
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	429a      	cmp	r2, r3
 800c0da:	d903      	bls.n	800c0e4 <xTaskPriorityDisinherit+0xa4>
 800c0dc:	693b      	ldr	r3, [r7, #16]
 800c0de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0e0:	4a0c      	ldr	r2, [pc, #48]	; (800c114 <xTaskPriorityDisinherit+0xd4>)
 800c0e2:	6013      	str	r3, [r2, #0]
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0e8:	4613      	mov	r3, r2
 800c0ea:	009b      	lsls	r3, r3, #2
 800c0ec:	4413      	add	r3, r2
 800c0ee:	009b      	lsls	r3, r3, #2
 800c0f0:	4a09      	ldr	r2, [pc, #36]	; (800c118 <xTaskPriorityDisinherit+0xd8>)
 800c0f2:	441a      	add	r2, r3
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	3304      	adds	r3, #4
 800c0f8:	4619      	mov	r1, r3
 800c0fa:	4610      	mov	r0, r2
 800c0fc:	f7fe f9db 	bl	800a4b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c100:	2301      	movs	r3, #1
 800c102:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c104:	697b      	ldr	r3, [r7, #20]
	}
 800c106:	4618      	mov	r0, r3
 800c108:	3718      	adds	r7, #24
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}
 800c10e:	bf00      	nop
 800c110:	200050d4 	.word	0x200050d4
 800c114:	200055b0 	.word	0x200055b0
 800c118:	200050d8 	.word	0x200050d8

0800c11c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b088      	sub	sp, #32
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c12a:	2301      	movs	r3, #1
 800c12c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d06a      	beq.n	800c20a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c134:	69bb      	ldr	r3, [r7, #24]
 800c136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d10a      	bne.n	800c152 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c140:	f383 8811 	msr	BASEPRI, r3
 800c144:	f3bf 8f6f 	isb	sy
 800c148:	f3bf 8f4f 	dsb	sy
 800c14c:	60fb      	str	r3, [r7, #12]
}
 800c14e:	bf00      	nop
 800c150:	e7fe      	b.n	800c150 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c152:	69bb      	ldr	r3, [r7, #24]
 800c154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c156:	683a      	ldr	r2, [r7, #0]
 800c158:	429a      	cmp	r2, r3
 800c15a:	d902      	bls.n	800c162 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	61fb      	str	r3, [r7, #28]
 800c160:	e002      	b.n	800c168 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c162:	69bb      	ldr	r3, [r7, #24]
 800c164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c166:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c168:	69bb      	ldr	r3, [r7, #24]
 800c16a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c16c:	69fa      	ldr	r2, [r7, #28]
 800c16e:	429a      	cmp	r2, r3
 800c170:	d04b      	beq.n	800c20a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c172:	69bb      	ldr	r3, [r7, #24]
 800c174:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c176:	697a      	ldr	r2, [r7, #20]
 800c178:	429a      	cmp	r2, r3
 800c17a:	d146      	bne.n	800c20a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c17c:	4b25      	ldr	r3, [pc, #148]	; (800c214 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	69ba      	ldr	r2, [r7, #24]
 800c182:	429a      	cmp	r2, r3
 800c184:	d10a      	bne.n	800c19c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c18a:	f383 8811 	msr	BASEPRI, r3
 800c18e:	f3bf 8f6f 	isb	sy
 800c192:	f3bf 8f4f 	dsb	sy
 800c196:	60bb      	str	r3, [r7, #8]
}
 800c198:	bf00      	nop
 800c19a:	e7fe      	b.n	800c19a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c19c:	69bb      	ldr	r3, [r7, #24]
 800c19e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1a0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c1a2:	69bb      	ldr	r3, [r7, #24]
 800c1a4:	69fa      	ldr	r2, [r7, #28]
 800c1a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c1a8:	69bb      	ldr	r3, [r7, #24]
 800c1aa:	699b      	ldr	r3, [r3, #24]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	db04      	blt.n	800c1ba <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1b0:	69fb      	ldr	r3, [r7, #28]
 800c1b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c1b6:	69bb      	ldr	r3, [r7, #24]
 800c1b8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c1ba:	69bb      	ldr	r3, [r7, #24]
 800c1bc:	6959      	ldr	r1, [r3, #20]
 800c1be:	693a      	ldr	r2, [r7, #16]
 800c1c0:	4613      	mov	r3, r2
 800c1c2:	009b      	lsls	r3, r3, #2
 800c1c4:	4413      	add	r3, r2
 800c1c6:	009b      	lsls	r3, r3, #2
 800c1c8:	4a13      	ldr	r2, [pc, #76]	; (800c218 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c1ca:	4413      	add	r3, r2
 800c1cc:	4299      	cmp	r1, r3
 800c1ce:	d11c      	bne.n	800c20a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c1d0:	69bb      	ldr	r3, [r7, #24]
 800c1d2:	3304      	adds	r3, #4
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f7fe f9cb 	bl	800a570 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c1da:	69bb      	ldr	r3, [r7, #24]
 800c1dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1de:	4b0f      	ldr	r3, [pc, #60]	; (800c21c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	429a      	cmp	r2, r3
 800c1e4:	d903      	bls.n	800c1ee <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800c1e6:	69bb      	ldr	r3, [r7, #24]
 800c1e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ea:	4a0c      	ldr	r2, [pc, #48]	; (800c21c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c1ec:	6013      	str	r3, [r2, #0]
 800c1ee:	69bb      	ldr	r3, [r7, #24]
 800c1f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1f2:	4613      	mov	r3, r2
 800c1f4:	009b      	lsls	r3, r3, #2
 800c1f6:	4413      	add	r3, r2
 800c1f8:	009b      	lsls	r3, r3, #2
 800c1fa:	4a07      	ldr	r2, [pc, #28]	; (800c218 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c1fc:	441a      	add	r2, r3
 800c1fe:	69bb      	ldr	r3, [r7, #24]
 800c200:	3304      	adds	r3, #4
 800c202:	4619      	mov	r1, r3
 800c204:	4610      	mov	r0, r2
 800c206:	f7fe f956 	bl	800a4b6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c20a:	bf00      	nop
 800c20c:	3720      	adds	r7, #32
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}
 800c212:	bf00      	nop
 800c214:	200050d4 	.word	0x200050d4
 800c218:	200050d8 	.word	0x200050d8
 800c21c:	200055b0 	.word	0x200055b0

0800c220 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c220:	b480      	push	{r7}
 800c222:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c224:	4b07      	ldr	r3, [pc, #28]	; (800c244 <pvTaskIncrementMutexHeldCount+0x24>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d004      	beq.n	800c236 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c22c:	4b05      	ldr	r3, [pc, #20]	; (800c244 <pvTaskIncrementMutexHeldCount+0x24>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c232:	3201      	adds	r2, #1
 800c234:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800c236:	4b03      	ldr	r3, [pc, #12]	; (800c244 <pvTaskIncrementMutexHeldCount+0x24>)
 800c238:	681b      	ldr	r3, [r3, #0]
	}
 800c23a:	4618      	mov	r0, r3
 800c23c:	46bd      	mov	sp, r7
 800c23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c242:	4770      	bx	lr
 800c244:	200050d4 	.word	0x200050d4

0800c248 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b084      	sub	sp, #16
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
 800c250:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c252:	4b21      	ldr	r3, [pc, #132]	; (800c2d8 <prvAddCurrentTaskToDelayedList+0x90>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c258:	4b20      	ldr	r3, [pc, #128]	; (800c2dc <prvAddCurrentTaskToDelayedList+0x94>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	3304      	adds	r3, #4
 800c25e:	4618      	mov	r0, r3
 800c260:	f7fe f986 	bl	800a570 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c26a:	d10a      	bne.n	800c282 <prvAddCurrentTaskToDelayedList+0x3a>
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d007      	beq.n	800c282 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c272:	4b1a      	ldr	r3, [pc, #104]	; (800c2dc <prvAddCurrentTaskToDelayedList+0x94>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	3304      	adds	r3, #4
 800c278:	4619      	mov	r1, r3
 800c27a:	4819      	ldr	r0, [pc, #100]	; (800c2e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800c27c:	f7fe f91b 	bl	800a4b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c280:	e026      	b.n	800c2d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c282:	68fa      	ldr	r2, [r7, #12]
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	4413      	add	r3, r2
 800c288:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c28a:	4b14      	ldr	r3, [pc, #80]	; (800c2dc <prvAddCurrentTaskToDelayedList+0x94>)
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	68ba      	ldr	r2, [r7, #8]
 800c290:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c292:	68ba      	ldr	r2, [r7, #8]
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	429a      	cmp	r2, r3
 800c298:	d209      	bcs.n	800c2ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c29a:	4b12      	ldr	r3, [pc, #72]	; (800c2e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c29c:	681a      	ldr	r2, [r3, #0]
 800c29e:	4b0f      	ldr	r3, [pc, #60]	; (800c2dc <prvAddCurrentTaskToDelayedList+0x94>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	3304      	adds	r3, #4
 800c2a4:	4619      	mov	r1, r3
 800c2a6:	4610      	mov	r0, r2
 800c2a8:	f7fe f929 	bl	800a4fe <vListInsert>
}
 800c2ac:	e010      	b.n	800c2d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2ae:	4b0e      	ldr	r3, [pc, #56]	; (800c2e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c2b0:	681a      	ldr	r2, [r3, #0]
 800c2b2:	4b0a      	ldr	r3, [pc, #40]	; (800c2dc <prvAddCurrentTaskToDelayedList+0x94>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	3304      	adds	r3, #4
 800c2b8:	4619      	mov	r1, r3
 800c2ba:	4610      	mov	r0, r2
 800c2bc:	f7fe f91f 	bl	800a4fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c2c0:	4b0a      	ldr	r3, [pc, #40]	; (800c2ec <prvAddCurrentTaskToDelayedList+0xa4>)
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	68ba      	ldr	r2, [r7, #8]
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	d202      	bcs.n	800c2d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c2ca:	4a08      	ldr	r2, [pc, #32]	; (800c2ec <prvAddCurrentTaskToDelayedList+0xa4>)
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	6013      	str	r3, [r2, #0]
}
 800c2d0:	bf00      	nop
 800c2d2:	3710      	adds	r7, #16
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	bd80      	pop	{r7, pc}
 800c2d8:	200055ac 	.word	0x200055ac
 800c2dc:	200050d4 	.word	0x200050d4
 800c2e0:	20005594 	.word	0x20005594
 800c2e4:	20005564 	.word	0x20005564
 800c2e8:	20005560 	.word	0x20005560
 800c2ec:	200055c8 	.word	0x200055c8

0800c2f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b08a      	sub	sp, #40	; 0x28
 800c2f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c2fa:	f000 fb07 	bl	800c90c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c2fe:	4b1c      	ldr	r3, [pc, #112]	; (800c370 <xTimerCreateTimerTask+0x80>)
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d021      	beq.n	800c34a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c306:	2300      	movs	r3, #0
 800c308:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c30a:	2300      	movs	r3, #0
 800c30c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c30e:	1d3a      	adds	r2, r7, #4
 800c310:	f107 0108 	add.w	r1, r7, #8
 800c314:	f107 030c 	add.w	r3, r7, #12
 800c318:	4618      	mov	r0, r3
 800c31a:	f7fe f885 	bl	800a428 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c31e:	6879      	ldr	r1, [r7, #4]
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	68fa      	ldr	r2, [r7, #12]
 800c324:	9202      	str	r2, [sp, #8]
 800c326:	9301      	str	r3, [sp, #4]
 800c328:	2302      	movs	r3, #2
 800c32a:	9300      	str	r3, [sp, #0]
 800c32c:	2300      	movs	r3, #0
 800c32e:	460a      	mov	r2, r1
 800c330:	4910      	ldr	r1, [pc, #64]	; (800c374 <xTimerCreateTimerTask+0x84>)
 800c332:	4811      	ldr	r0, [pc, #68]	; (800c378 <xTimerCreateTimerTask+0x88>)
 800c334:	f7fe ff90 	bl	800b258 <xTaskCreateStatic>
 800c338:	4603      	mov	r3, r0
 800c33a:	4a10      	ldr	r2, [pc, #64]	; (800c37c <xTimerCreateTimerTask+0x8c>)
 800c33c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c33e:	4b0f      	ldr	r3, [pc, #60]	; (800c37c <xTimerCreateTimerTask+0x8c>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d001      	beq.n	800c34a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c346:	2301      	movs	r3, #1
 800c348:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c34a:	697b      	ldr	r3, [r7, #20]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d10a      	bne.n	800c366 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c354:	f383 8811 	msr	BASEPRI, r3
 800c358:	f3bf 8f6f 	isb	sy
 800c35c:	f3bf 8f4f 	dsb	sy
 800c360:	613b      	str	r3, [r7, #16]
}
 800c362:	bf00      	nop
 800c364:	e7fe      	b.n	800c364 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c366:	697b      	ldr	r3, [r7, #20]
}
 800c368:	4618      	mov	r0, r3
 800c36a:	3718      	adds	r7, #24
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}
 800c370:	20005604 	.word	0x20005604
 800c374:	080174dc 	.word	0x080174dc
 800c378:	0800c4b5 	.word	0x0800c4b5
 800c37c:	20005608 	.word	0x20005608

0800c380 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b08a      	sub	sp, #40	; 0x28
 800c384:	af00      	add	r7, sp, #0
 800c386:	60f8      	str	r0, [r7, #12]
 800c388:	60b9      	str	r1, [r7, #8]
 800c38a:	607a      	str	r2, [r7, #4]
 800c38c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c38e:	2300      	movs	r3, #0
 800c390:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d10a      	bne.n	800c3ae <xTimerGenericCommand+0x2e>
	__asm volatile
 800c398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c39c:	f383 8811 	msr	BASEPRI, r3
 800c3a0:	f3bf 8f6f 	isb	sy
 800c3a4:	f3bf 8f4f 	dsb	sy
 800c3a8:	623b      	str	r3, [r7, #32]
}
 800c3aa:	bf00      	nop
 800c3ac:	e7fe      	b.n	800c3ac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c3ae:	4b1a      	ldr	r3, [pc, #104]	; (800c418 <xTimerGenericCommand+0x98>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d02a      	beq.n	800c40c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	2b05      	cmp	r3, #5
 800c3c6:	dc18      	bgt.n	800c3fa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c3c8:	f7ff fdb4 	bl	800bf34 <xTaskGetSchedulerState>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	2b02      	cmp	r3, #2
 800c3d0:	d109      	bne.n	800c3e6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c3d2:	4b11      	ldr	r3, [pc, #68]	; (800c418 <xTimerGenericCommand+0x98>)
 800c3d4:	6818      	ldr	r0, [r3, #0]
 800c3d6:	f107 0110 	add.w	r1, r7, #16
 800c3da:	2300      	movs	r3, #0
 800c3dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3de:	f7fe fa2f 	bl	800a840 <xQueueGenericSend>
 800c3e2:	6278      	str	r0, [r7, #36]	; 0x24
 800c3e4:	e012      	b.n	800c40c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c3e6:	4b0c      	ldr	r3, [pc, #48]	; (800c418 <xTimerGenericCommand+0x98>)
 800c3e8:	6818      	ldr	r0, [r3, #0]
 800c3ea:	f107 0110 	add.w	r1, r7, #16
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	f7fe fa25 	bl	800a840 <xQueueGenericSend>
 800c3f6:	6278      	str	r0, [r7, #36]	; 0x24
 800c3f8:	e008      	b.n	800c40c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c3fa:	4b07      	ldr	r3, [pc, #28]	; (800c418 <xTimerGenericCommand+0x98>)
 800c3fc:	6818      	ldr	r0, [r3, #0]
 800c3fe:	f107 0110 	add.w	r1, r7, #16
 800c402:	2300      	movs	r3, #0
 800c404:	683a      	ldr	r2, [r7, #0]
 800c406:	f7fe fb19 	bl	800aa3c <xQueueGenericSendFromISR>
 800c40a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c40e:	4618      	mov	r0, r3
 800c410:	3728      	adds	r7, #40	; 0x28
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}
 800c416:	bf00      	nop
 800c418:	20005604 	.word	0x20005604

0800c41c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b088      	sub	sp, #32
 800c420:	af02      	add	r7, sp, #8
 800c422:	6078      	str	r0, [r7, #4]
 800c424:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c426:	4b22      	ldr	r3, [pc, #136]	; (800c4b0 <prvProcessExpiredTimer+0x94>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	68db      	ldr	r3, [r3, #12]
 800c42c:	68db      	ldr	r3, [r3, #12]
 800c42e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c430:	697b      	ldr	r3, [r7, #20]
 800c432:	3304      	adds	r3, #4
 800c434:	4618      	mov	r0, r3
 800c436:	f7fe f89b 	bl	800a570 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c43a:	697b      	ldr	r3, [r7, #20]
 800c43c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c440:	f003 0304 	and.w	r3, r3, #4
 800c444:	2b00      	cmp	r3, #0
 800c446:	d022      	beq.n	800c48e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c448:	697b      	ldr	r3, [r7, #20]
 800c44a:	699a      	ldr	r2, [r3, #24]
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	18d1      	adds	r1, r2, r3
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	683a      	ldr	r2, [r7, #0]
 800c454:	6978      	ldr	r0, [r7, #20]
 800c456:	f000 f8d1 	bl	800c5fc <prvInsertTimerInActiveList>
 800c45a:	4603      	mov	r3, r0
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d01f      	beq.n	800c4a0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c460:	2300      	movs	r3, #0
 800c462:	9300      	str	r3, [sp, #0]
 800c464:	2300      	movs	r3, #0
 800c466:	687a      	ldr	r2, [r7, #4]
 800c468:	2100      	movs	r1, #0
 800c46a:	6978      	ldr	r0, [r7, #20]
 800c46c:	f7ff ff88 	bl	800c380 <xTimerGenericCommand>
 800c470:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c472:	693b      	ldr	r3, [r7, #16]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d113      	bne.n	800c4a0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c47c:	f383 8811 	msr	BASEPRI, r3
 800c480:	f3bf 8f6f 	isb	sy
 800c484:	f3bf 8f4f 	dsb	sy
 800c488:	60fb      	str	r3, [r7, #12]
}
 800c48a:	bf00      	nop
 800c48c:	e7fe      	b.n	800c48c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c48e:	697b      	ldr	r3, [r7, #20]
 800c490:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c494:	f023 0301 	bic.w	r3, r3, #1
 800c498:	b2da      	uxtb	r2, r3
 800c49a:	697b      	ldr	r3, [r7, #20]
 800c49c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c4a0:	697b      	ldr	r3, [r7, #20]
 800c4a2:	6a1b      	ldr	r3, [r3, #32]
 800c4a4:	6978      	ldr	r0, [r7, #20]
 800c4a6:	4798      	blx	r3
}
 800c4a8:	bf00      	nop
 800c4aa:	3718      	adds	r7, #24
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}
 800c4b0:	200055fc 	.word	0x200055fc

0800c4b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b084      	sub	sp, #16
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c4bc:	f107 0308 	add.w	r3, r7, #8
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f000 f857 	bl	800c574 <prvGetNextExpireTime>
 800c4c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c4c8:	68bb      	ldr	r3, [r7, #8]
 800c4ca:	4619      	mov	r1, r3
 800c4cc:	68f8      	ldr	r0, [r7, #12]
 800c4ce:	f000 f803 	bl	800c4d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c4d2:	f000 f8d5 	bl	800c680 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c4d6:	e7f1      	b.n	800c4bc <prvTimerTask+0x8>

0800c4d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b084      	sub	sp, #16
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
 800c4e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c4e2:	f7ff f915 	bl	800b710 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c4e6:	f107 0308 	add.w	r3, r7, #8
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f000 f866 	bl	800c5bc <prvSampleTimeNow>
 800c4f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c4f2:	68bb      	ldr	r3, [r7, #8]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d130      	bne.n	800c55a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d10a      	bne.n	800c514 <prvProcessTimerOrBlockTask+0x3c>
 800c4fe:	687a      	ldr	r2, [r7, #4]
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	429a      	cmp	r2, r3
 800c504:	d806      	bhi.n	800c514 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c506:	f7ff f911 	bl	800b72c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c50a:	68f9      	ldr	r1, [r7, #12]
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f7ff ff85 	bl	800c41c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c512:	e024      	b.n	800c55e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d008      	beq.n	800c52c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c51a:	4b13      	ldr	r3, [pc, #76]	; (800c568 <prvProcessTimerOrBlockTask+0x90>)
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d101      	bne.n	800c528 <prvProcessTimerOrBlockTask+0x50>
 800c524:	2301      	movs	r3, #1
 800c526:	e000      	b.n	800c52a <prvProcessTimerOrBlockTask+0x52>
 800c528:	2300      	movs	r3, #0
 800c52a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c52c:	4b0f      	ldr	r3, [pc, #60]	; (800c56c <prvProcessTimerOrBlockTask+0x94>)
 800c52e:	6818      	ldr	r0, [r3, #0]
 800c530:	687a      	ldr	r2, [r7, #4]
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	1ad3      	subs	r3, r2, r3
 800c536:	683a      	ldr	r2, [r7, #0]
 800c538:	4619      	mov	r1, r3
 800c53a:	f7fe fe59 	bl	800b1f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c53e:	f7ff f8f5 	bl	800b72c <xTaskResumeAll>
 800c542:	4603      	mov	r3, r0
 800c544:	2b00      	cmp	r3, #0
 800c546:	d10a      	bne.n	800c55e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c548:	4b09      	ldr	r3, [pc, #36]	; (800c570 <prvProcessTimerOrBlockTask+0x98>)
 800c54a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c54e:	601a      	str	r2, [r3, #0]
 800c550:	f3bf 8f4f 	dsb	sy
 800c554:	f3bf 8f6f 	isb	sy
}
 800c558:	e001      	b.n	800c55e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c55a:	f7ff f8e7 	bl	800b72c <xTaskResumeAll>
}
 800c55e:	bf00      	nop
 800c560:	3710      	adds	r7, #16
 800c562:	46bd      	mov	sp, r7
 800c564:	bd80      	pop	{r7, pc}
 800c566:	bf00      	nop
 800c568:	20005600 	.word	0x20005600
 800c56c:	20005604 	.word	0x20005604
 800c570:	e000ed04 	.word	0xe000ed04

0800c574 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c574:	b480      	push	{r7}
 800c576:	b085      	sub	sp, #20
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c57c:	4b0e      	ldr	r3, [pc, #56]	; (800c5b8 <prvGetNextExpireTime+0x44>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d101      	bne.n	800c58a <prvGetNextExpireTime+0x16>
 800c586:	2201      	movs	r2, #1
 800c588:	e000      	b.n	800c58c <prvGetNextExpireTime+0x18>
 800c58a:	2200      	movs	r2, #0
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d105      	bne.n	800c5a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c598:	4b07      	ldr	r3, [pc, #28]	; (800c5b8 <prvGetNextExpireTime+0x44>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	68db      	ldr	r3, [r3, #12]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	60fb      	str	r3, [r7, #12]
 800c5a2:	e001      	b.n	800c5a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c5a8:	68fb      	ldr	r3, [r7, #12]
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	3714      	adds	r7, #20
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b4:	4770      	bx	lr
 800c5b6:	bf00      	nop
 800c5b8:	200055fc 	.word	0x200055fc

0800c5bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b084      	sub	sp, #16
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c5c4:	f7ff f950 	bl	800b868 <xTaskGetTickCount>
 800c5c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c5ca:	4b0b      	ldr	r3, [pc, #44]	; (800c5f8 <prvSampleTimeNow+0x3c>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	68fa      	ldr	r2, [r7, #12]
 800c5d0:	429a      	cmp	r2, r3
 800c5d2:	d205      	bcs.n	800c5e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c5d4:	f000 f936 	bl	800c844 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2201      	movs	r2, #1
 800c5dc:	601a      	str	r2, [r3, #0]
 800c5de:	e002      	b.n	800c5e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c5e6:	4a04      	ldr	r2, [pc, #16]	; (800c5f8 <prvSampleTimeNow+0x3c>)
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3710      	adds	r7, #16
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}
 800c5f6:	bf00      	nop
 800c5f8:	2000560c 	.word	0x2000560c

0800c5fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b086      	sub	sp, #24
 800c600:	af00      	add	r7, sp, #0
 800c602:	60f8      	str	r0, [r7, #12]
 800c604:	60b9      	str	r1, [r7, #8]
 800c606:	607a      	str	r2, [r7, #4]
 800c608:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c60a:	2300      	movs	r3, #0
 800c60c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	68ba      	ldr	r2, [r7, #8]
 800c612:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	68fa      	ldr	r2, [r7, #12]
 800c618:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c61a:	68ba      	ldr	r2, [r7, #8]
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	429a      	cmp	r2, r3
 800c620:	d812      	bhi.n	800c648 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c622:	687a      	ldr	r2, [r7, #4]
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	1ad2      	subs	r2, r2, r3
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	699b      	ldr	r3, [r3, #24]
 800c62c:	429a      	cmp	r2, r3
 800c62e:	d302      	bcc.n	800c636 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c630:	2301      	movs	r3, #1
 800c632:	617b      	str	r3, [r7, #20]
 800c634:	e01b      	b.n	800c66e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c636:	4b10      	ldr	r3, [pc, #64]	; (800c678 <prvInsertTimerInActiveList+0x7c>)
 800c638:	681a      	ldr	r2, [r3, #0]
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	3304      	adds	r3, #4
 800c63e:	4619      	mov	r1, r3
 800c640:	4610      	mov	r0, r2
 800c642:	f7fd ff5c 	bl	800a4fe <vListInsert>
 800c646:	e012      	b.n	800c66e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c648:	687a      	ldr	r2, [r7, #4]
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	429a      	cmp	r2, r3
 800c64e:	d206      	bcs.n	800c65e <prvInsertTimerInActiveList+0x62>
 800c650:	68ba      	ldr	r2, [r7, #8]
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	429a      	cmp	r2, r3
 800c656:	d302      	bcc.n	800c65e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c658:	2301      	movs	r3, #1
 800c65a:	617b      	str	r3, [r7, #20]
 800c65c:	e007      	b.n	800c66e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c65e:	4b07      	ldr	r3, [pc, #28]	; (800c67c <prvInsertTimerInActiveList+0x80>)
 800c660:	681a      	ldr	r2, [r3, #0]
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	3304      	adds	r3, #4
 800c666:	4619      	mov	r1, r3
 800c668:	4610      	mov	r0, r2
 800c66a:	f7fd ff48 	bl	800a4fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c66e:	697b      	ldr	r3, [r7, #20]
}
 800c670:	4618      	mov	r0, r3
 800c672:	3718      	adds	r7, #24
 800c674:	46bd      	mov	sp, r7
 800c676:	bd80      	pop	{r7, pc}
 800c678:	20005600 	.word	0x20005600
 800c67c:	200055fc 	.word	0x200055fc

0800c680 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b08e      	sub	sp, #56	; 0x38
 800c684:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c686:	e0ca      	b.n	800c81e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	da18      	bge.n	800c6c0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c68e:	1d3b      	adds	r3, r7, #4
 800c690:	3304      	adds	r3, #4
 800c692:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c696:	2b00      	cmp	r3, #0
 800c698:	d10a      	bne.n	800c6b0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c69a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c69e:	f383 8811 	msr	BASEPRI, r3
 800c6a2:	f3bf 8f6f 	isb	sy
 800c6a6:	f3bf 8f4f 	dsb	sy
 800c6aa:	61fb      	str	r3, [r7, #28]
}
 800c6ac:	bf00      	nop
 800c6ae:	e7fe      	b.n	800c6ae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c6b6:	6850      	ldr	r0, [r2, #4]
 800c6b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c6ba:	6892      	ldr	r2, [r2, #8]
 800c6bc:	4611      	mov	r1, r2
 800c6be:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	f2c0 80ab 	blt.w	800c81e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ce:	695b      	ldr	r3, [r3, #20]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d004      	beq.n	800c6de <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6d6:	3304      	adds	r3, #4
 800c6d8:	4618      	mov	r0, r3
 800c6da:	f7fd ff49 	bl	800a570 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c6de:	463b      	mov	r3, r7
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	f7ff ff6b 	bl	800c5bc <prvSampleTimeNow>
 800c6e6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2b09      	cmp	r3, #9
 800c6ec:	f200 8096 	bhi.w	800c81c <prvProcessReceivedCommands+0x19c>
 800c6f0:	a201      	add	r2, pc, #4	; (adr r2, 800c6f8 <prvProcessReceivedCommands+0x78>)
 800c6f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6f6:	bf00      	nop
 800c6f8:	0800c721 	.word	0x0800c721
 800c6fc:	0800c721 	.word	0x0800c721
 800c700:	0800c721 	.word	0x0800c721
 800c704:	0800c795 	.word	0x0800c795
 800c708:	0800c7a9 	.word	0x0800c7a9
 800c70c:	0800c7f3 	.word	0x0800c7f3
 800c710:	0800c721 	.word	0x0800c721
 800c714:	0800c721 	.word	0x0800c721
 800c718:	0800c795 	.word	0x0800c795
 800c71c:	0800c7a9 	.word	0x0800c7a9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c722:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c726:	f043 0301 	orr.w	r3, r3, #1
 800c72a:	b2da      	uxtb	r2, r3
 800c72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c72e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c732:	68ba      	ldr	r2, [r7, #8]
 800c734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c736:	699b      	ldr	r3, [r3, #24]
 800c738:	18d1      	adds	r1, r2, r3
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c73e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c740:	f7ff ff5c 	bl	800c5fc <prvInsertTimerInActiveList>
 800c744:	4603      	mov	r3, r0
 800c746:	2b00      	cmp	r3, #0
 800c748:	d069      	beq.n	800c81e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c74c:	6a1b      	ldr	r3, [r3, #32]
 800c74e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c750:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c754:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c758:	f003 0304 	and.w	r3, r3, #4
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d05e      	beq.n	800c81e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c760:	68ba      	ldr	r2, [r7, #8]
 800c762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c764:	699b      	ldr	r3, [r3, #24]
 800c766:	441a      	add	r2, r3
 800c768:	2300      	movs	r3, #0
 800c76a:	9300      	str	r3, [sp, #0]
 800c76c:	2300      	movs	r3, #0
 800c76e:	2100      	movs	r1, #0
 800c770:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c772:	f7ff fe05 	bl	800c380 <xTimerGenericCommand>
 800c776:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c778:	6a3b      	ldr	r3, [r7, #32]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d14f      	bne.n	800c81e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c782:	f383 8811 	msr	BASEPRI, r3
 800c786:	f3bf 8f6f 	isb	sy
 800c78a:	f3bf 8f4f 	dsb	sy
 800c78e:	61bb      	str	r3, [r7, #24]
}
 800c790:	bf00      	nop
 800c792:	e7fe      	b.n	800c792 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c796:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c79a:	f023 0301 	bic.w	r3, r3, #1
 800c79e:	b2da      	uxtb	r2, r3
 800c7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c7a6:	e03a      	b.n	800c81e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7ae:	f043 0301 	orr.w	r3, r3, #1
 800c7b2:	b2da      	uxtb	r2, r3
 800c7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c7ba:	68ba      	ldr	r2, [r7, #8]
 800c7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7be:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c2:	699b      	ldr	r3, [r3, #24]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d10a      	bne.n	800c7de <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c7c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7cc:	f383 8811 	msr	BASEPRI, r3
 800c7d0:	f3bf 8f6f 	isb	sy
 800c7d4:	f3bf 8f4f 	dsb	sy
 800c7d8:	617b      	str	r3, [r7, #20]
}
 800c7da:	bf00      	nop
 800c7dc:	e7fe      	b.n	800c7dc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7e0:	699a      	ldr	r2, [r3, #24]
 800c7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7e4:	18d1      	adds	r1, r2, r3
 800c7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7ec:	f7ff ff06 	bl	800c5fc <prvInsertTimerInActiveList>
					break;
 800c7f0:	e015      	b.n	800c81e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c7f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7f8:	f003 0302 	and.w	r3, r3, #2
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d103      	bne.n	800c808 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c800:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c802:	f000 fbdd 	bl	800cfc0 <vPortFree>
 800c806:	e00a      	b.n	800c81e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c80a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c80e:	f023 0301 	bic.w	r3, r3, #1
 800c812:	b2da      	uxtb	r2, r3
 800c814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c816:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c81a:	e000      	b.n	800c81e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800c81c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c81e:	4b08      	ldr	r3, [pc, #32]	; (800c840 <prvProcessReceivedCommands+0x1c0>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	1d39      	adds	r1, r7, #4
 800c824:	2200      	movs	r2, #0
 800c826:	4618      	mov	r0, r3
 800c828:	f7fe f9a4 	bl	800ab74 <xQueueReceive>
 800c82c:	4603      	mov	r3, r0
 800c82e:	2b00      	cmp	r3, #0
 800c830:	f47f af2a 	bne.w	800c688 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c834:	bf00      	nop
 800c836:	bf00      	nop
 800c838:	3730      	adds	r7, #48	; 0x30
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}
 800c83e:	bf00      	nop
 800c840:	20005604 	.word	0x20005604

0800c844 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b088      	sub	sp, #32
 800c848:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c84a:	e048      	b.n	800c8de <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c84c:	4b2d      	ldr	r3, [pc, #180]	; (800c904 <prvSwitchTimerLists+0xc0>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	68db      	ldr	r3, [r3, #12]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c856:	4b2b      	ldr	r3, [pc, #172]	; (800c904 <prvSwitchTimerLists+0xc0>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	68db      	ldr	r3, [r3, #12]
 800c85c:	68db      	ldr	r3, [r3, #12]
 800c85e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	3304      	adds	r3, #4
 800c864:	4618      	mov	r0, r3
 800c866:	f7fd fe83 	bl	800a570 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	6a1b      	ldr	r3, [r3, #32]
 800c86e:	68f8      	ldr	r0, [r7, #12]
 800c870:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c878:	f003 0304 	and.w	r3, r3, #4
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d02e      	beq.n	800c8de <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	699b      	ldr	r3, [r3, #24]
 800c884:	693a      	ldr	r2, [r7, #16]
 800c886:	4413      	add	r3, r2
 800c888:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c88a:	68ba      	ldr	r2, [r7, #8]
 800c88c:	693b      	ldr	r3, [r7, #16]
 800c88e:	429a      	cmp	r2, r3
 800c890:	d90e      	bls.n	800c8b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	68ba      	ldr	r2, [r7, #8]
 800c896:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	68fa      	ldr	r2, [r7, #12]
 800c89c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c89e:	4b19      	ldr	r3, [pc, #100]	; (800c904 <prvSwitchTimerLists+0xc0>)
 800c8a0:	681a      	ldr	r2, [r3, #0]
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	3304      	adds	r3, #4
 800c8a6:	4619      	mov	r1, r3
 800c8a8:	4610      	mov	r0, r2
 800c8aa:	f7fd fe28 	bl	800a4fe <vListInsert>
 800c8ae:	e016      	b.n	800c8de <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	9300      	str	r3, [sp, #0]
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	693a      	ldr	r2, [r7, #16]
 800c8b8:	2100      	movs	r1, #0
 800c8ba:	68f8      	ldr	r0, [r7, #12]
 800c8bc:	f7ff fd60 	bl	800c380 <xTimerGenericCommand>
 800c8c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d10a      	bne.n	800c8de <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c8c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8cc:	f383 8811 	msr	BASEPRI, r3
 800c8d0:	f3bf 8f6f 	isb	sy
 800c8d4:	f3bf 8f4f 	dsb	sy
 800c8d8:	603b      	str	r3, [r7, #0]
}
 800c8da:	bf00      	nop
 800c8dc:	e7fe      	b.n	800c8dc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c8de:	4b09      	ldr	r3, [pc, #36]	; (800c904 <prvSwitchTimerLists+0xc0>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d1b1      	bne.n	800c84c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c8e8:	4b06      	ldr	r3, [pc, #24]	; (800c904 <prvSwitchTimerLists+0xc0>)
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c8ee:	4b06      	ldr	r3, [pc, #24]	; (800c908 <prvSwitchTimerLists+0xc4>)
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	4a04      	ldr	r2, [pc, #16]	; (800c904 <prvSwitchTimerLists+0xc0>)
 800c8f4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c8f6:	4a04      	ldr	r2, [pc, #16]	; (800c908 <prvSwitchTimerLists+0xc4>)
 800c8f8:	697b      	ldr	r3, [r7, #20]
 800c8fa:	6013      	str	r3, [r2, #0]
}
 800c8fc:	bf00      	nop
 800c8fe:	3718      	adds	r7, #24
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}
 800c904:	200055fc 	.word	0x200055fc
 800c908:	20005600 	.word	0x20005600

0800c90c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b082      	sub	sp, #8
 800c910:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c912:	f000 f967 	bl	800cbe4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c916:	4b15      	ldr	r3, [pc, #84]	; (800c96c <prvCheckForValidListAndQueue+0x60>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d120      	bne.n	800c960 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c91e:	4814      	ldr	r0, [pc, #80]	; (800c970 <prvCheckForValidListAndQueue+0x64>)
 800c920:	f7fd fd9c 	bl	800a45c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c924:	4813      	ldr	r0, [pc, #76]	; (800c974 <prvCheckForValidListAndQueue+0x68>)
 800c926:	f7fd fd99 	bl	800a45c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c92a:	4b13      	ldr	r3, [pc, #76]	; (800c978 <prvCheckForValidListAndQueue+0x6c>)
 800c92c:	4a10      	ldr	r2, [pc, #64]	; (800c970 <prvCheckForValidListAndQueue+0x64>)
 800c92e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c930:	4b12      	ldr	r3, [pc, #72]	; (800c97c <prvCheckForValidListAndQueue+0x70>)
 800c932:	4a10      	ldr	r2, [pc, #64]	; (800c974 <prvCheckForValidListAndQueue+0x68>)
 800c934:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c936:	2300      	movs	r3, #0
 800c938:	9300      	str	r3, [sp, #0]
 800c93a:	4b11      	ldr	r3, [pc, #68]	; (800c980 <prvCheckForValidListAndQueue+0x74>)
 800c93c:	4a11      	ldr	r2, [pc, #68]	; (800c984 <prvCheckForValidListAndQueue+0x78>)
 800c93e:	2110      	movs	r1, #16
 800c940:	200a      	movs	r0, #10
 800c942:	f7fd fea7 	bl	800a694 <xQueueGenericCreateStatic>
 800c946:	4603      	mov	r3, r0
 800c948:	4a08      	ldr	r2, [pc, #32]	; (800c96c <prvCheckForValidListAndQueue+0x60>)
 800c94a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c94c:	4b07      	ldr	r3, [pc, #28]	; (800c96c <prvCheckForValidListAndQueue+0x60>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d005      	beq.n	800c960 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c954:	4b05      	ldr	r3, [pc, #20]	; (800c96c <prvCheckForValidListAndQueue+0x60>)
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	490b      	ldr	r1, [pc, #44]	; (800c988 <prvCheckForValidListAndQueue+0x7c>)
 800c95a:	4618      	mov	r0, r3
 800c95c:	f7fe fc1e 	bl	800b19c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c960:	f000 f970 	bl	800cc44 <vPortExitCritical>
}
 800c964:	bf00      	nop
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}
 800c96a:	bf00      	nop
 800c96c:	20005604 	.word	0x20005604
 800c970:	200055d4 	.word	0x200055d4
 800c974:	200055e8 	.word	0x200055e8
 800c978:	200055fc 	.word	0x200055fc
 800c97c:	20005600 	.word	0x20005600
 800c980:	200056b0 	.word	0x200056b0
 800c984:	20005610 	.word	0x20005610
 800c988:	080174e4 	.word	0x080174e4

0800c98c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c98c:	b480      	push	{r7}
 800c98e:	b085      	sub	sp, #20
 800c990:	af00      	add	r7, sp, #0
 800c992:	60f8      	str	r0, [r7, #12]
 800c994:	60b9      	str	r1, [r7, #8]
 800c996:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	3b04      	subs	r3, #4
 800c99c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c9a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	3b04      	subs	r3, #4
 800c9aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	f023 0201 	bic.w	r2, r3, #1
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	3b04      	subs	r3, #4
 800c9ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c9bc:	4a0c      	ldr	r2, [pc, #48]	; (800c9f0 <pxPortInitialiseStack+0x64>)
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	3b14      	subs	r3, #20
 800c9c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c9c8:	687a      	ldr	r2, [r7, #4]
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	3b04      	subs	r3, #4
 800c9d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	f06f 0202 	mvn.w	r2, #2
 800c9da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	3b20      	subs	r3, #32
 800c9e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c9e2:	68fb      	ldr	r3, [r7, #12]
}
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	3714      	adds	r7, #20
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ee:	4770      	bx	lr
 800c9f0:	0800c9f5 	.word	0x0800c9f5

0800c9f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c9f4:	b480      	push	{r7}
 800c9f6:	b085      	sub	sp, #20
 800c9f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c9fe:	4b12      	ldr	r3, [pc, #72]	; (800ca48 <prvTaskExitError+0x54>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca06:	d00a      	beq.n	800ca1e <prvTaskExitError+0x2a>
	__asm volatile
 800ca08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca0c:	f383 8811 	msr	BASEPRI, r3
 800ca10:	f3bf 8f6f 	isb	sy
 800ca14:	f3bf 8f4f 	dsb	sy
 800ca18:	60fb      	str	r3, [r7, #12]
}
 800ca1a:	bf00      	nop
 800ca1c:	e7fe      	b.n	800ca1c <prvTaskExitError+0x28>
	__asm volatile
 800ca1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca22:	f383 8811 	msr	BASEPRI, r3
 800ca26:	f3bf 8f6f 	isb	sy
 800ca2a:	f3bf 8f4f 	dsb	sy
 800ca2e:	60bb      	str	r3, [r7, #8]
}
 800ca30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ca32:	bf00      	nop
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d0fc      	beq.n	800ca34 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ca3a:	bf00      	nop
 800ca3c:	bf00      	nop
 800ca3e:	3714      	adds	r7, #20
 800ca40:	46bd      	mov	sp, r7
 800ca42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca46:	4770      	bx	lr
 800ca48:	20000024 	.word	0x20000024
 800ca4c:	00000000 	.word	0x00000000

0800ca50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ca50:	4b07      	ldr	r3, [pc, #28]	; (800ca70 <pxCurrentTCBConst2>)
 800ca52:	6819      	ldr	r1, [r3, #0]
 800ca54:	6808      	ldr	r0, [r1, #0]
 800ca56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca5a:	f380 8809 	msr	PSP, r0
 800ca5e:	f3bf 8f6f 	isb	sy
 800ca62:	f04f 0000 	mov.w	r0, #0
 800ca66:	f380 8811 	msr	BASEPRI, r0
 800ca6a:	4770      	bx	lr
 800ca6c:	f3af 8000 	nop.w

0800ca70 <pxCurrentTCBConst2>:
 800ca70:	200050d4 	.word	0x200050d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ca74:	bf00      	nop
 800ca76:	bf00      	nop

0800ca78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ca78:	4808      	ldr	r0, [pc, #32]	; (800ca9c <prvPortStartFirstTask+0x24>)
 800ca7a:	6800      	ldr	r0, [r0, #0]
 800ca7c:	6800      	ldr	r0, [r0, #0]
 800ca7e:	f380 8808 	msr	MSP, r0
 800ca82:	f04f 0000 	mov.w	r0, #0
 800ca86:	f380 8814 	msr	CONTROL, r0
 800ca8a:	b662      	cpsie	i
 800ca8c:	b661      	cpsie	f
 800ca8e:	f3bf 8f4f 	dsb	sy
 800ca92:	f3bf 8f6f 	isb	sy
 800ca96:	df00      	svc	0
 800ca98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ca9a:	bf00      	nop
 800ca9c:	e000ed08 	.word	0xe000ed08

0800caa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b086      	sub	sp, #24
 800caa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800caa6:	4b46      	ldr	r3, [pc, #280]	; (800cbc0 <xPortStartScheduler+0x120>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	4a46      	ldr	r2, [pc, #280]	; (800cbc4 <xPortStartScheduler+0x124>)
 800caac:	4293      	cmp	r3, r2
 800caae:	d10a      	bne.n	800cac6 <xPortStartScheduler+0x26>
	__asm volatile
 800cab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cab4:	f383 8811 	msr	BASEPRI, r3
 800cab8:	f3bf 8f6f 	isb	sy
 800cabc:	f3bf 8f4f 	dsb	sy
 800cac0:	613b      	str	r3, [r7, #16]
}
 800cac2:	bf00      	nop
 800cac4:	e7fe      	b.n	800cac4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cac6:	4b3e      	ldr	r3, [pc, #248]	; (800cbc0 <xPortStartScheduler+0x120>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	4a3f      	ldr	r2, [pc, #252]	; (800cbc8 <xPortStartScheduler+0x128>)
 800cacc:	4293      	cmp	r3, r2
 800cace:	d10a      	bne.n	800cae6 <xPortStartScheduler+0x46>
	__asm volatile
 800cad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cad4:	f383 8811 	msr	BASEPRI, r3
 800cad8:	f3bf 8f6f 	isb	sy
 800cadc:	f3bf 8f4f 	dsb	sy
 800cae0:	60fb      	str	r3, [r7, #12]
}
 800cae2:	bf00      	nop
 800cae4:	e7fe      	b.n	800cae4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cae6:	4b39      	ldr	r3, [pc, #228]	; (800cbcc <xPortStartScheduler+0x12c>)
 800cae8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800caea:	697b      	ldr	r3, [r7, #20]
 800caec:	781b      	ldrb	r3, [r3, #0]
 800caee:	b2db      	uxtb	r3, r3
 800caf0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800caf2:	697b      	ldr	r3, [r7, #20]
 800caf4:	22ff      	movs	r2, #255	; 0xff
 800caf6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800caf8:	697b      	ldr	r3, [r7, #20]
 800cafa:	781b      	ldrb	r3, [r3, #0]
 800cafc:	b2db      	uxtb	r3, r3
 800cafe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cb00:	78fb      	ldrb	r3, [r7, #3]
 800cb02:	b2db      	uxtb	r3, r3
 800cb04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cb08:	b2da      	uxtb	r2, r3
 800cb0a:	4b31      	ldr	r3, [pc, #196]	; (800cbd0 <xPortStartScheduler+0x130>)
 800cb0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cb0e:	4b31      	ldr	r3, [pc, #196]	; (800cbd4 <xPortStartScheduler+0x134>)
 800cb10:	2207      	movs	r2, #7
 800cb12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cb14:	e009      	b.n	800cb2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cb16:	4b2f      	ldr	r3, [pc, #188]	; (800cbd4 <xPortStartScheduler+0x134>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	3b01      	subs	r3, #1
 800cb1c:	4a2d      	ldr	r2, [pc, #180]	; (800cbd4 <xPortStartScheduler+0x134>)
 800cb1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cb20:	78fb      	ldrb	r3, [r7, #3]
 800cb22:	b2db      	uxtb	r3, r3
 800cb24:	005b      	lsls	r3, r3, #1
 800cb26:	b2db      	uxtb	r3, r3
 800cb28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cb2a:	78fb      	ldrb	r3, [r7, #3]
 800cb2c:	b2db      	uxtb	r3, r3
 800cb2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb32:	2b80      	cmp	r3, #128	; 0x80
 800cb34:	d0ef      	beq.n	800cb16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cb36:	4b27      	ldr	r3, [pc, #156]	; (800cbd4 <xPortStartScheduler+0x134>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	f1c3 0307 	rsb	r3, r3, #7
 800cb3e:	2b04      	cmp	r3, #4
 800cb40:	d00a      	beq.n	800cb58 <xPortStartScheduler+0xb8>
	__asm volatile
 800cb42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb46:	f383 8811 	msr	BASEPRI, r3
 800cb4a:	f3bf 8f6f 	isb	sy
 800cb4e:	f3bf 8f4f 	dsb	sy
 800cb52:	60bb      	str	r3, [r7, #8]
}
 800cb54:	bf00      	nop
 800cb56:	e7fe      	b.n	800cb56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cb58:	4b1e      	ldr	r3, [pc, #120]	; (800cbd4 <xPortStartScheduler+0x134>)
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	021b      	lsls	r3, r3, #8
 800cb5e:	4a1d      	ldr	r2, [pc, #116]	; (800cbd4 <xPortStartScheduler+0x134>)
 800cb60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cb62:	4b1c      	ldr	r3, [pc, #112]	; (800cbd4 <xPortStartScheduler+0x134>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cb6a:	4a1a      	ldr	r2, [pc, #104]	; (800cbd4 <xPortStartScheduler+0x134>)
 800cb6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	b2da      	uxtb	r2, r3
 800cb72:	697b      	ldr	r3, [r7, #20]
 800cb74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cb76:	4b18      	ldr	r3, [pc, #96]	; (800cbd8 <xPortStartScheduler+0x138>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	4a17      	ldr	r2, [pc, #92]	; (800cbd8 <xPortStartScheduler+0x138>)
 800cb7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cb80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cb82:	4b15      	ldr	r3, [pc, #84]	; (800cbd8 <xPortStartScheduler+0x138>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	4a14      	ldr	r2, [pc, #80]	; (800cbd8 <xPortStartScheduler+0x138>)
 800cb88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cb8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cb8e:	f000 f8dd 	bl	800cd4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cb92:	4b12      	ldr	r3, [pc, #72]	; (800cbdc <xPortStartScheduler+0x13c>)
 800cb94:	2200      	movs	r2, #0
 800cb96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cb98:	f000 f8fc 	bl	800cd94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cb9c:	4b10      	ldr	r3, [pc, #64]	; (800cbe0 <xPortStartScheduler+0x140>)
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	4a0f      	ldr	r2, [pc, #60]	; (800cbe0 <xPortStartScheduler+0x140>)
 800cba2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cba6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cba8:	f7ff ff66 	bl	800ca78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cbac:	f7fe ff26 	bl	800b9fc <vTaskSwitchContext>
	prvTaskExitError();
 800cbb0:	f7ff ff20 	bl	800c9f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cbb4:	2300      	movs	r3, #0
}
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	3718      	adds	r7, #24
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd80      	pop	{r7, pc}
 800cbbe:	bf00      	nop
 800cbc0:	e000ed00 	.word	0xe000ed00
 800cbc4:	410fc271 	.word	0x410fc271
 800cbc8:	410fc270 	.word	0x410fc270
 800cbcc:	e000e400 	.word	0xe000e400
 800cbd0:	20005700 	.word	0x20005700
 800cbd4:	20005704 	.word	0x20005704
 800cbd8:	e000ed20 	.word	0xe000ed20
 800cbdc:	20000024 	.word	0x20000024
 800cbe0:	e000ef34 	.word	0xe000ef34

0800cbe4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cbe4:	b480      	push	{r7}
 800cbe6:	b083      	sub	sp, #12
 800cbe8:	af00      	add	r7, sp, #0
	__asm volatile
 800cbea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbee:	f383 8811 	msr	BASEPRI, r3
 800cbf2:	f3bf 8f6f 	isb	sy
 800cbf6:	f3bf 8f4f 	dsb	sy
 800cbfa:	607b      	str	r3, [r7, #4]
}
 800cbfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cbfe:	4b0f      	ldr	r3, [pc, #60]	; (800cc3c <vPortEnterCritical+0x58>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	3301      	adds	r3, #1
 800cc04:	4a0d      	ldr	r2, [pc, #52]	; (800cc3c <vPortEnterCritical+0x58>)
 800cc06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cc08:	4b0c      	ldr	r3, [pc, #48]	; (800cc3c <vPortEnterCritical+0x58>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	2b01      	cmp	r3, #1
 800cc0e:	d10f      	bne.n	800cc30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cc10:	4b0b      	ldr	r3, [pc, #44]	; (800cc40 <vPortEnterCritical+0x5c>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	b2db      	uxtb	r3, r3
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d00a      	beq.n	800cc30 <vPortEnterCritical+0x4c>
	__asm volatile
 800cc1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc1e:	f383 8811 	msr	BASEPRI, r3
 800cc22:	f3bf 8f6f 	isb	sy
 800cc26:	f3bf 8f4f 	dsb	sy
 800cc2a:	603b      	str	r3, [r7, #0]
}
 800cc2c:	bf00      	nop
 800cc2e:	e7fe      	b.n	800cc2e <vPortEnterCritical+0x4a>
	}
}
 800cc30:	bf00      	nop
 800cc32:	370c      	adds	r7, #12
 800cc34:	46bd      	mov	sp, r7
 800cc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3a:	4770      	bx	lr
 800cc3c:	20000024 	.word	0x20000024
 800cc40:	e000ed04 	.word	0xe000ed04

0800cc44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cc44:	b480      	push	{r7}
 800cc46:	b083      	sub	sp, #12
 800cc48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cc4a:	4b12      	ldr	r3, [pc, #72]	; (800cc94 <vPortExitCritical+0x50>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d10a      	bne.n	800cc68 <vPortExitCritical+0x24>
	__asm volatile
 800cc52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc56:	f383 8811 	msr	BASEPRI, r3
 800cc5a:	f3bf 8f6f 	isb	sy
 800cc5e:	f3bf 8f4f 	dsb	sy
 800cc62:	607b      	str	r3, [r7, #4]
}
 800cc64:	bf00      	nop
 800cc66:	e7fe      	b.n	800cc66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cc68:	4b0a      	ldr	r3, [pc, #40]	; (800cc94 <vPortExitCritical+0x50>)
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	3b01      	subs	r3, #1
 800cc6e:	4a09      	ldr	r2, [pc, #36]	; (800cc94 <vPortExitCritical+0x50>)
 800cc70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cc72:	4b08      	ldr	r3, [pc, #32]	; (800cc94 <vPortExitCritical+0x50>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d105      	bne.n	800cc86 <vPortExitCritical+0x42>
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	f383 8811 	msr	BASEPRI, r3
}
 800cc84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cc86:	bf00      	nop
 800cc88:	370c      	adds	r7, #12
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc90:	4770      	bx	lr
 800cc92:	bf00      	nop
 800cc94:	20000024 	.word	0x20000024
	...

0800cca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cca0:	f3ef 8009 	mrs	r0, PSP
 800cca4:	f3bf 8f6f 	isb	sy
 800cca8:	4b15      	ldr	r3, [pc, #84]	; (800cd00 <pxCurrentTCBConst>)
 800ccaa:	681a      	ldr	r2, [r3, #0]
 800ccac:	f01e 0f10 	tst.w	lr, #16
 800ccb0:	bf08      	it	eq
 800ccb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ccb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccba:	6010      	str	r0, [r2, #0]
 800ccbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ccc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ccc4:	f380 8811 	msr	BASEPRI, r0
 800ccc8:	f3bf 8f4f 	dsb	sy
 800cccc:	f3bf 8f6f 	isb	sy
 800ccd0:	f7fe fe94 	bl	800b9fc <vTaskSwitchContext>
 800ccd4:	f04f 0000 	mov.w	r0, #0
 800ccd8:	f380 8811 	msr	BASEPRI, r0
 800ccdc:	bc09      	pop	{r0, r3}
 800ccde:	6819      	ldr	r1, [r3, #0]
 800cce0:	6808      	ldr	r0, [r1, #0]
 800cce2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cce6:	f01e 0f10 	tst.w	lr, #16
 800ccea:	bf08      	it	eq
 800ccec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ccf0:	f380 8809 	msr	PSP, r0
 800ccf4:	f3bf 8f6f 	isb	sy
 800ccf8:	4770      	bx	lr
 800ccfa:	bf00      	nop
 800ccfc:	f3af 8000 	nop.w

0800cd00 <pxCurrentTCBConst>:
 800cd00:	200050d4 	.word	0x200050d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cd04:	bf00      	nop
 800cd06:	bf00      	nop

0800cd08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b082      	sub	sp, #8
 800cd0c:	af00      	add	r7, sp, #0
	__asm volatile
 800cd0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd12:	f383 8811 	msr	BASEPRI, r3
 800cd16:	f3bf 8f6f 	isb	sy
 800cd1a:	f3bf 8f4f 	dsb	sy
 800cd1e:	607b      	str	r3, [r7, #4]
}
 800cd20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cd22:	f7fe fdb1 	bl	800b888 <xTaskIncrementTick>
 800cd26:	4603      	mov	r3, r0
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d003      	beq.n	800cd34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cd2c:	4b06      	ldr	r3, [pc, #24]	; (800cd48 <xPortSysTickHandler+0x40>)
 800cd2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd32:	601a      	str	r2, [r3, #0]
 800cd34:	2300      	movs	r3, #0
 800cd36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	f383 8811 	msr	BASEPRI, r3
}
 800cd3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cd40:	bf00      	nop
 800cd42:	3708      	adds	r7, #8
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}
 800cd48:	e000ed04 	.word	0xe000ed04

0800cd4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cd4c:	b480      	push	{r7}
 800cd4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cd50:	4b0b      	ldr	r3, [pc, #44]	; (800cd80 <vPortSetupTimerInterrupt+0x34>)
 800cd52:	2200      	movs	r2, #0
 800cd54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cd56:	4b0b      	ldr	r3, [pc, #44]	; (800cd84 <vPortSetupTimerInterrupt+0x38>)
 800cd58:	2200      	movs	r2, #0
 800cd5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cd5c:	4b0a      	ldr	r3, [pc, #40]	; (800cd88 <vPortSetupTimerInterrupt+0x3c>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	4a0a      	ldr	r2, [pc, #40]	; (800cd8c <vPortSetupTimerInterrupt+0x40>)
 800cd62:	fba2 2303 	umull	r2, r3, r2, r3
 800cd66:	099b      	lsrs	r3, r3, #6
 800cd68:	4a09      	ldr	r2, [pc, #36]	; (800cd90 <vPortSetupTimerInterrupt+0x44>)
 800cd6a:	3b01      	subs	r3, #1
 800cd6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cd6e:	4b04      	ldr	r3, [pc, #16]	; (800cd80 <vPortSetupTimerInterrupt+0x34>)
 800cd70:	2207      	movs	r2, #7
 800cd72:	601a      	str	r2, [r3, #0]
}
 800cd74:	bf00      	nop
 800cd76:	46bd      	mov	sp, r7
 800cd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7c:	4770      	bx	lr
 800cd7e:	bf00      	nop
 800cd80:	e000e010 	.word	0xe000e010
 800cd84:	e000e018 	.word	0xe000e018
 800cd88:	20000004 	.word	0x20000004
 800cd8c:	10624dd3 	.word	0x10624dd3
 800cd90:	e000e014 	.word	0xe000e014

0800cd94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cd94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cda4 <vPortEnableVFP+0x10>
 800cd98:	6801      	ldr	r1, [r0, #0]
 800cd9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cd9e:	6001      	str	r1, [r0, #0]
 800cda0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cda2:	bf00      	nop
 800cda4:	e000ed88 	.word	0xe000ed88

0800cda8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cda8:	b480      	push	{r7}
 800cdaa:	b085      	sub	sp, #20
 800cdac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cdae:	f3ef 8305 	mrs	r3, IPSR
 800cdb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	2b0f      	cmp	r3, #15
 800cdb8:	d914      	bls.n	800cde4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cdba:	4a17      	ldr	r2, [pc, #92]	; (800ce18 <vPortValidateInterruptPriority+0x70>)
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	4413      	add	r3, r2
 800cdc0:	781b      	ldrb	r3, [r3, #0]
 800cdc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cdc4:	4b15      	ldr	r3, [pc, #84]	; (800ce1c <vPortValidateInterruptPriority+0x74>)
 800cdc6:	781b      	ldrb	r3, [r3, #0]
 800cdc8:	7afa      	ldrb	r2, [r7, #11]
 800cdca:	429a      	cmp	r2, r3
 800cdcc:	d20a      	bcs.n	800cde4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cdce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdd2:	f383 8811 	msr	BASEPRI, r3
 800cdd6:	f3bf 8f6f 	isb	sy
 800cdda:	f3bf 8f4f 	dsb	sy
 800cdde:	607b      	str	r3, [r7, #4]
}
 800cde0:	bf00      	nop
 800cde2:	e7fe      	b.n	800cde2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cde4:	4b0e      	ldr	r3, [pc, #56]	; (800ce20 <vPortValidateInterruptPriority+0x78>)
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cdec:	4b0d      	ldr	r3, [pc, #52]	; (800ce24 <vPortValidateInterruptPriority+0x7c>)
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	429a      	cmp	r2, r3
 800cdf2:	d90a      	bls.n	800ce0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cdf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdf8:	f383 8811 	msr	BASEPRI, r3
 800cdfc:	f3bf 8f6f 	isb	sy
 800ce00:	f3bf 8f4f 	dsb	sy
 800ce04:	603b      	str	r3, [r7, #0]
}
 800ce06:	bf00      	nop
 800ce08:	e7fe      	b.n	800ce08 <vPortValidateInterruptPriority+0x60>
	}
 800ce0a:	bf00      	nop
 800ce0c:	3714      	adds	r7, #20
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce14:	4770      	bx	lr
 800ce16:	bf00      	nop
 800ce18:	e000e3f0 	.word	0xe000e3f0
 800ce1c:	20005700 	.word	0x20005700
 800ce20:	e000ed0c 	.word	0xe000ed0c
 800ce24:	20005704 	.word	0x20005704

0800ce28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b08a      	sub	sp, #40	; 0x28
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ce30:	2300      	movs	r3, #0
 800ce32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ce34:	f7fe fc6c 	bl	800b710 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ce38:	4b5b      	ldr	r3, [pc, #364]	; (800cfa8 <pvPortMalloc+0x180>)
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d101      	bne.n	800ce44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ce40:	f000 f920 	bl	800d084 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ce44:	4b59      	ldr	r3, [pc, #356]	; (800cfac <pvPortMalloc+0x184>)
 800ce46:	681a      	ldr	r2, [r3, #0]
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	4013      	ands	r3, r2
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	f040 8093 	bne.w	800cf78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d01d      	beq.n	800ce94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ce58:	2208      	movs	r2, #8
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	4413      	add	r3, r2
 800ce5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f003 0307 	and.w	r3, r3, #7
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d014      	beq.n	800ce94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	f023 0307 	bic.w	r3, r3, #7
 800ce70:	3308      	adds	r3, #8
 800ce72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f003 0307 	and.w	r3, r3, #7
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d00a      	beq.n	800ce94 <pvPortMalloc+0x6c>
	__asm volatile
 800ce7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce82:	f383 8811 	msr	BASEPRI, r3
 800ce86:	f3bf 8f6f 	isb	sy
 800ce8a:	f3bf 8f4f 	dsb	sy
 800ce8e:	617b      	str	r3, [r7, #20]
}
 800ce90:	bf00      	nop
 800ce92:	e7fe      	b.n	800ce92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d06e      	beq.n	800cf78 <pvPortMalloc+0x150>
 800ce9a:	4b45      	ldr	r3, [pc, #276]	; (800cfb0 <pvPortMalloc+0x188>)
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	687a      	ldr	r2, [r7, #4]
 800cea0:	429a      	cmp	r2, r3
 800cea2:	d869      	bhi.n	800cf78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cea4:	4b43      	ldr	r3, [pc, #268]	; (800cfb4 <pvPortMalloc+0x18c>)
 800cea6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cea8:	4b42      	ldr	r3, [pc, #264]	; (800cfb4 <pvPortMalloc+0x18c>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ceae:	e004      	b.n	800ceba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ceb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ceb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ceba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cebc:	685b      	ldr	r3, [r3, #4]
 800cebe:	687a      	ldr	r2, [r7, #4]
 800cec0:	429a      	cmp	r2, r3
 800cec2:	d903      	bls.n	800cecc <pvPortMalloc+0xa4>
 800cec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d1f1      	bne.n	800ceb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cecc:	4b36      	ldr	r3, [pc, #216]	; (800cfa8 <pvPortMalloc+0x180>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ced2:	429a      	cmp	r2, r3
 800ced4:	d050      	beq.n	800cf78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ced6:	6a3b      	ldr	r3, [r7, #32]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	2208      	movs	r2, #8
 800cedc:	4413      	add	r3, r2
 800cede:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cee2:	681a      	ldr	r2, [r3, #0]
 800cee4:	6a3b      	ldr	r3, [r7, #32]
 800cee6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceea:	685a      	ldr	r2, [r3, #4]
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	1ad2      	subs	r2, r2, r3
 800cef0:	2308      	movs	r3, #8
 800cef2:	005b      	lsls	r3, r3, #1
 800cef4:	429a      	cmp	r2, r3
 800cef6:	d91f      	bls.n	800cf38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	4413      	add	r3, r2
 800cefe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cf00:	69bb      	ldr	r3, [r7, #24]
 800cf02:	f003 0307 	and.w	r3, r3, #7
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d00a      	beq.n	800cf20 <pvPortMalloc+0xf8>
	__asm volatile
 800cf0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf0e:	f383 8811 	msr	BASEPRI, r3
 800cf12:	f3bf 8f6f 	isb	sy
 800cf16:	f3bf 8f4f 	dsb	sy
 800cf1a:	613b      	str	r3, [r7, #16]
}
 800cf1c:	bf00      	nop
 800cf1e:	e7fe      	b.n	800cf1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cf20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf22:	685a      	ldr	r2, [r3, #4]
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	1ad2      	subs	r2, r2, r3
 800cf28:	69bb      	ldr	r3, [r7, #24]
 800cf2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cf2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf2e:	687a      	ldr	r2, [r7, #4]
 800cf30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cf32:	69b8      	ldr	r0, [r7, #24]
 800cf34:	f000 f908 	bl	800d148 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cf38:	4b1d      	ldr	r3, [pc, #116]	; (800cfb0 <pvPortMalloc+0x188>)
 800cf3a:	681a      	ldr	r2, [r3, #0]
 800cf3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf3e:	685b      	ldr	r3, [r3, #4]
 800cf40:	1ad3      	subs	r3, r2, r3
 800cf42:	4a1b      	ldr	r2, [pc, #108]	; (800cfb0 <pvPortMalloc+0x188>)
 800cf44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cf46:	4b1a      	ldr	r3, [pc, #104]	; (800cfb0 <pvPortMalloc+0x188>)
 800cf48:	681a      	ldr	r2, [r3, #0]
 800cf4a:	4b1b      	ldr	r3, [pc, #108]	; (800cfb8 <pvPortMalloc+0x190>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	429a      	cmp	r2, r3
 800cf50:	d203      	bcs.n	800cf5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cf52:	4b17      	ldr	r3, [pc, #92]	; (800cfb0 <pvPortMalloc+0x188>)
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	4a18      	ldr	r2, [pc, #96]	; (800cfb8 <pvPortMalloc+0x190>)
 800cf58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cf5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf5c:	685a      	ldr	r2, [r3, #4]
 800cf5e:	4b13      	ldr	r3, [pc, #76]	; (800cfac <pvPortMalloc+0x184>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	431a      	orrs	r2, r3
 800cf64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cf68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cf6e:	4b13      	ldr	r3, [pc, #76]	; (800cfbc <pvPortMalloc+0x194>)
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	3301      	adds	r3, #1
 800cf74:	4a11      	ldr	r2, [pc, #68]	; (800cfbc <pvPortMalloc+0x194>)
 800cf76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cf78:	f7fe fbd8 	bl	800b72c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cf7c:	69fb      	ldr	r3, [r7, #28]
 800cf7e:	f003 0307 	and.w	r3, r3, #7
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d00a      	beq.n	800cf9c <pvPortMalloc+0x174>
	__asm volatile
 800cf86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf8a:	f383 8811 	msr	BASEPRI, r3
 800cf8e:	f3bf 8f6f 	isb	sy
 800cf92:	f3bf 8f4f 	dsb	sy
 800cf96:	60fb      	str	r3, [r7, #12]
}
 800cf98:	bf00      	nop
 800cf9a:	e7fe      	b.n	800cf9a <pvPortMalloc+0x172>
	return pvReturn;
 800cf9c:	69fb      	ldr	r3, [r7, #28]
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	3728      	adds	r7, #40	; 0x28
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}
 800cfa6:	bf00      	nop
 800cfa8:	20009310 	.word	0x20009310
 800cfac:	20009324 	.word	0x20009324
 800cfb0:	20009314 	.word	0x20009314
 800cfb4:	20009308 	.word	0x20009308
 800cfb8:	20009318 	.word	0x20009318
 800cfbc:	2000931c 	.word	0x2000931c

0800cfc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b086      	sub	sp, #24
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d04d      	beq.n	800d06e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cfd2:	2308      	movs	r3, #8
 800cfd4:	425b      	negs	r3, r3
 800cfd6:	697a      	ldr	r2, [r7, #20]
 800cfd8:	4413      	add	r3, r2
 800cfda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cfdc:	697b      	ldr	r3, [r7, #20]
 800cfde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cfe0:	693b      	ldr	r3, [r7, #16]
 800cfe2:	685a      	ldr	r2, [r3, #4]
 800cfe4:	4b24      	ldr	r3, [pc, #144]	; (800d078 <vPortFree+0xb8>)
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	4013      	ands	r3, r2
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d10a      	bne.n	800d004 <vPortFree+0x44>
	__asm volatile
 800cfee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff2:	f383 8811 	msr	BASEPRI, r3
 800cff6:	f3bf 8f6f 	isb	sy
 800cffa:	f3bf 8f4f 	dsb	sy
 800cffe:	60fb      	str	r3, [r7, #12]
}
 800d000:	bf00      	nop
 800d002:	e7fe      	b.n	800d002 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d004:	693b      	ldr	r3, [r7, #16]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d00a      	beq.n	800d022 <vPortFree+0x62>
	__asm volatile
 800d00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d010:	f383 8811 	msr	BASEPRI, r3
 800d014:	f3bf 8f6f 	isb	sy
 800d018:	f3bf 8f4f 	dsb	sy
 800d01c:	60bb      	str	r3, [r7, #8]
}
 800d01e:	bf00      	nop
 800d020:	e7fe      	b.n	800d020 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d022:	693b      	ldr	r3, [r7, #16]
 800d024:	685a      	ldr	r2, [r3, #4]
 800d026:	4b14      	ldr	r3, [pc, #80]	; (800d078 <vPortFree+0xb8>)
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	4013      	ands	r3, r2
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d01e      	beq.n	800d06e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d030:	693b      	ldr	r3, [r7, #16]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d11a      	bne.n	800d06e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d038:	693b      	ldr	r3, [r7, #16]
 800d03a:	685a      	ldr	r2, [r3, #4]
 800d03c:	4b0e      	ldr	r3, [pc, #56]	; (800d078 <vPortFree+0xb8>)
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	43db      	mvns	r3, r3
 800d042:	401a      	ands	r2, r3
 800d044:	693b      	ldr	r3, [r7, #16]
 800d046:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d048:	f7fe fb62 	bl	800b710 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d04c:	693b      	ldr	r3, [r7, #16]
 800d04e:	685a      	ldr	r2, [r3, #4]
 800d050:	4b0a      	ldr	r3, [pc, #40]	; (800d07c <vPortFree+0xbc>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	4413      	add	r3, r2
 800d056:	4a09      	ldr	r2, [pc, #36]	; (800d07c <vPortFree+0xbc>)
 800d058:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d05a:	6938      	ldr	r0, [r7, #16]
 800d05c:	f000 f874 	bl	800d148 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d060:	4b07      	ldr	r3, [pc, #28]	; (800d080 <vPortFree+0xc0>)
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	3301      	adds	r3, #1
 800d066:	4a06      	ldr	r2, [pc, #24]	; (800d080 <vPortFree+0xc0>)
 800d068:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d06a:	f7fe fb5f 	bl	800b72c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d06e:	bf00      	nop
 800d070:	3718      	adds	r7, #24
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}
 800d076:	bf00      	nop
 800d078:	20009324 	.word	0x20009324
 800d07c:	20009314 	.word	0x20009314
 800d080:	20009320 	.word	0x20009320

0800d084 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d084:	b480      	push	{r7}
 800d086:	b085      	sub	sp, #20
 800d088:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d08a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d08e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d090:	4b27      	ldr	r3, [pc, #156]	; (800d130 <prvHeapInit+0xac>)
 800d092:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	f003 0307 	and.w	r3, r3, #7
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d00c      	beq.n	800d0b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	3307      	adds	r3, #7
 800d0a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	f023 0307 	bic.w	r3, r3, #7
 800d0aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d0ac:	68ba      	ldr	r2, [r7, #8]
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	1ad3      	subs	r3, r2, r3
 800d0b2:	4a1f      	ldr	r2, [pc, #124]	; (800d130 <prvHeapInit+0xac>)
 800d0b4:	4413      	add	r3, r2
 800d0b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d0bc:	4a1d      	ldr	r2, [pc, #116]	; (800d134 <prvHeapInit+0xb0>)
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d0c2:	4b1c      	ldr	r3, [pc, #112]	; (800d134 <prvHeapInit+0xb0>)
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	68ba      	ldr	r2, [r7, #8]
 800d0cc:	4413      	add	r3, r2
 800d0ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d0d0:	2208      	movs	r2, #8
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	1a9b      	subs	r3, r3, r2
 800d0d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	f023 0307 	bic.w	r3, r3, #7
 800d0de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	4a15      	ldr	r2, [pc, #84]	; (800d138 <prvHeapInit+0xb4>)
 800d0e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d0e6:	4b14      	ldr	r3, [pc, #80]	; (800d138 <prvHeapInit+0xb4>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d0ee:	4b12      	ldr	r3, [pc, #72]	; (800d138 <prvHeapInit+0xb4>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	68fa      	ldr	r2, [r7, #12]
 800d0fe:	1ad2      	subs	r2, r2, r3
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d104:	4b0c      	ldr	r3, [pc, #48]	; (800d138 <prvHeapInit+0xb4>)
 800d106:	681a      	ldr	r2, [r3, #0]
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d10c:	683b      	ldr	r3, [r7, #0]
 800d10e:	685b      	ldr	r3, [r3, #4]
 800d110:	4a0a      	ldr	r2, [pc, #40]	; (800d13c <prvHeapInit+0xb8>)
 800d112:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d114:	683b      	ldr	r3, [r7, #0]
 800d116:	685b      	ldr	r3, [r3, #4]
 800d118:	4a09      	ldr	r2, [pc, #36]	; (800d140 <prvHeapInit+0xbc>)
 800d11a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d11c:	4b09      	ldr	r3, [pc, #36]	; (800d144 <prvHeapInit+0xc0>)
 800d11e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d122:	601a      	str	r2, [r3, #0]
}
 800d124:	bf00      	nop
 800d126:	3714      	adds	r7, #20
 800d128:	46bd      	mov	sp, r7
 800d12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12e:	4770      	bx	lr
 800d130:	20005708 	.word	0x20005708
 800d134:	20009308 	.word	0x20009308
 800d138:	20009310 	.word	0x20009310
 800d13c:	20009318 	.word	0x20009318
 800d140:	20009314 	.word	0x20009314
 800d144:	20009324 	.word	0x20009324

0800d148 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d148:	b480      	push	{r7}
 800d14a:	b085      	sub	sp, #20
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d150:	4b28      	ldr	r3, [pc, #160]	; (800d1f4 <prvInsertBlockIntoFreeList+0xac>)
 800d152:	60fb      	str	r3, [r7, #12]
 800d154:	e002      	b.n	800d15c <prvInsertBlockIntoFreeList+0x14>
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	60fb      	str	r3, [r7, #12]
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	687a      	ldr	r2, [r7, #4]
 800d162:	429a      	cmp	r2, r3
 800d164:	d8f7      	bhi.n	800d156 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	685b      	ldr	r3, [r3, #4]
 800d16e:	68ba      	ldr	r2, [r7, #8]
 800d170:	4413      	add	r3, r2
 800d172:	687a      	ldr	r2, [r7, #4]
 800d174:	429a      	cmp	r2, r3
 800d176:	d108      	bne.n	800d18a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	685a      	ldr	r2, [r3, #4]
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	685b      	ldr	r3, [r3, #4]
 800d180:	441a      	add	r2, r3
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	685b      	ldr	r3, [r3, #4]
 800d192:	68ba      	ldr	r2, [r7, #8]
 800d194:	441a      	add	r2, r3
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	429a      	cmp	r2, r3
 800d19c:	d118      	bne.n	800d1d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	681a      	ldr	r2, [r3, #0]
 800d1a2:	4b15      	ldr	r3, [pc, #84]	; (800d1f8 <prvInsertBlockIntoFreeList+0xb0>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	429a      	cmp	r2, r3
 800d1a8:	d00d      	beq.n	800d1c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	685a      	ldr	r2, [r3, #4]
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	685b      	ldr	r3, [r3, #4]
 800d1b4:	441a      	add	r2, r3
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	681a      	ldr	r2, [r3, #0]
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	601a      	str	r2, [r3, #0]
 800d1c4:	e008      	b.n	800d1d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d1c6:	4b0c      	ldr	r3, [pc, #48]	; (800d1f8 <prvInsertBlockIntoFreeList+0xb0>)
 800d1c8:	681a      	ldr	r2, [r3, #0]
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	601a      	str	r2, [r3, #0]
 800d1ce:	e003      	b.n	800d1d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	681a      	ldr	r2, [r3, #0]
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d1d8:	68fa      	ldr	r2, [r7, #12]
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	429a      	cmp	r2, r3
 800d1de:	d002      	beq.n	800d1e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	687a      	ldr	r2, [r7, #4]
 800d1e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d1e6:	bf00      	nop
 800d1e8:	3714      	adds	r7, #20
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f0:	4770      	bx	lr
 800d1f2:	bf00      	nop
 800d1f4:	20009308 	.word	0x20009308
 800d1f8:	20009310 	.word	0x20009310

0800d1fc <rcl_get_zero_initialized_publisher>:
 800d1fc:	4b01      	ldr	r3, [pc, #4]	; (800d204 <rcl_get_zero_initialized_publisher+0x8>)
 800d1fe:	6818      	ldr	r0, [r3, #0]
 800d200:	4770      	bx	lr
 800d202:	bf00      	nop
 800d204:	08017524 	.word	0x08017524

0800d208 <rcl_publisher_init>:
 800d208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d20c:	b091      	sub	sp, #68	; 0x44
 800d20e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800d210:	b3d7      	cbz	r7, 800d288 <rcl_publisher_init+0x80>
 800d212:	f107 0950 	add.w	r9, r7, #80	; 0x50
 800d216:	4604      	mov	r4, r0
 800d218:	4648      	mov	r0, r9
 800d21a:	4688      	mov	r8, r1
 800d21c:	4616      	mov	r6, r2
 800d21e:	461d      	mov	r5, r3
 800d220:	f000 fa30 	bl	800d684 <rcutils_allocator_is_valid>
 800d224:	b380      	cbz	r0, 800d288 <rcl_publisher_init+0x80>
 800d226:	b37c      	cbz	r4, 800d288 <rcl_publisher_init+0x80>
 800d228:	f8d4 a000 	ldr.w	sl, [r4]
 800d22c:	f1ba 0f00 	cmp.w	sl, #0
 800d230:	d004      	beq.n	800d23c <rcl_publisher_init+0x34>
 800d232:	2564      	movs	r5, #100	; 0x64
 800d234:	4628      	mov	r0, r5
 800d236:	b011      	add	sp, #68	; 0x44
 800d238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d23c:	4640      	mov	r0, r8
 800d23e:	f004 fc15 	bl	8011a6c <rcl_node_is_valid>
 800d242:	b330      	cbz	r0, 800d292 <rcl_publisher_init+0x8a>
 800d244:	b306      	cbz	r6, 800d288 <rcl_publisher_init+0x80>
 800d246:	b1fd      	cbz	r5, 800d288 <rcl_publisher_init+0x80>
 800d248:	46ce      	mov	lr, r9
 800d24a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d24e:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 800d252:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d256:	f8de 3000 	ldr.w	r3, [lr]
 800d25a:	f8cc 3000 	str.w	r3, [ip]
 800d25e:	f000 fa4d 	bl	800d6fc <rcutils_get_zero_initialized_string_map>
 800d262:	ab10      	add	r3, sp, #64	; 0x40
 800d264:	4684      	mov	ip, r0
 800d266:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800d26a:	f8cd c020 	str.w	ip, [sp, #32]
 800d26e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800d272:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 800d276:	4651      	mov	r1, sl
 800d278:	a808      	add	r0, sp, #32
 800d27a:	f000 fab9 	bl	800d7f0 <rcutils_string_map_init>
 800d27e:	b150      	cbz	r0, 800d296 <rcl_publisher_init+0x8e>
 800d280:	280a      	cmp	r0, #10
 800d282:	d013      	beq.n	800d2ac <rcl_publisher_init+0xa4>
 800d284:	2501      	movs	r5, #1
 800d286:	e7d5      	b.n	800d234 <rcl_publisher_init+0x2c>
 800d288:	250b      	movs	r5, #11
 800d28a:	4628      	mov	r0, r5
 800d28c:	b011      	add	sp, #68	; 0x44
 800d28e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d292:	25c8      	movs	r5, #200	; 0xc8
 800d294:	e7ce      	b.n	800d234 <rcl_publisher_init+0x2c>
 800d296:	a808      	add	r0, sp, #32
 800d298:	f004 f81e 	bl	80112d8 <rcl_get_default_topic_name_substitutions>
 800d29c:	4682      	mov	sl, r0
 800d29e:	b138      	cbz	r0, 800d2b0 <rcl_publisher_init+0xa8>
 800d2a0:	a808      	add	r0, sp, #32
 800d2a2:	f000 fae5 	bl	800d870 <rcutils_string_map_fini>
 800d2a6:	f1ba 0f0a 	cmp.w	sl, #10
 800d2aa:	d1eb      	bne.n	800d284 <rcl_publisher_init+0x7c>
 800d2ac:	250a      	movs	r5, #10
 800d2ae:	e7c1      	b.n	800d234 <rcl_publisher_init+0x2c>
 800d2b0:	4640      	mov	r0, r8
 800d2b2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800d2b6:	f004 fbe3 	bl	8011a80 <rcl_node_get_name>
 800d2ba:	4682      	mov	sl, r0
 800d2bc:	4640      	mov	r0, r8
 800d2be:	f004 fbe7 	bl	8011a90 <rcl_node_get_namespace>
 800d2c2:	4686      	mov	lr, r0
 800d2c4:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800d2c8:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 800d2cc:	46ec      	mov	ip, sp
 800d2ce:	f8cd b014 	str.w	fp, [sp, #20]
 800d2d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d2d6:	f8d9 3000 	ldr.w	r3, [r9]
 800d2da:	f8cc 3000 	str.w	r3, [ip]
 800d2de:	4628      	mov	r0, r5
 800d2e0:	4651      	mov	r1, sl
 800d2e2:	4672      	mov	r2, lr
 800d2e4:	ab08      	add	r3, sp, #32
 800d2e6:	f003 fe91 	bl	801100c <rcl_expand_topic_name>
 800d2ea:	4605      	mov	r5, r0
 800d2ec:	a808      	add	r0, sp, #32
 800d2ee:	f000 fabf 	bl	800d870 <rcutils_string_map_fini>
 800d2f2:	b920      	cbnz	r0, 800d2fe <rcl_publisher_init+0xf6>
 800d2f4:	b15d      	cbz	r5, 800d30e <rcl_publisher_init+0x106>
 800d2f6:	2d67      	cmp	r5, #103	; 0x67
 800d2f8:	d002      	beq.n	800d300 <rcl_publisher_init+0xf8>
 800d2fa:	2d69      	cmp	r5, #105	; 0x69
 800d2fc:	d05f      	beq.n	800d3be <rcl_publisher_init+0x1b6>
 800d2fe:	2501      	movs	r5, #1
 800d300:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d302:	2800      	cmp	r0, #0
 800d304:	d096      	beq.n	800d234 <rcl_publisher_init+0x2c>
 800d306:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d308:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d30a:	4798      	blx	r3
 800d30c:	e792      	b.n	800d234 <rcl_publisher_init+0x2c>
 800d30e:	4640      	mov	r0, r8
 800d310:	f004 fbc6 	bl	8011aa0 <rcl_node_get_options>
 800d314:	2800      	cmp	r0, #0
 800d316:	d0f2      	beq.n	800d2fe <rcl_publisher_init+0xf6>
 800d318:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d31a:	f7f2 ff6b 	bl	80001f4 <strlen>
 800d31e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d320:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d322:	3001      	adds	r0, #1
 800d324:	4798      	blx	r3
 800d326:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d328:	9107      	str	r1, [sp, #28]
 800d32a:	4681      	mov	r9, r0
 800d32c:	4608      	mov	r0, r1
 800d32e:	f7f2 ff61 	bl	80001f4 <strlen>
 800d332:	9907      	ldr	r1, [sp, #28]
 800d334:	1c42      	adds	r2, r0, #1
 800d336:	4648      	mov	r0, r9
 800d338:	f009 f93e 	bl	80165b8 <memcpy>
 800d33c:	462a      	mov	r2, r5
 800d33e:	4648      	mov	r0, r9
 800d340:	a90a      	add	r1, sp, #40	; 0x28
 800d342:	f000 fb0d 	bl	800d960 <rmw_validate_full_topic_name>
 800d346:	2800      	cmp	r0, #0
 800d348:	d137      	bne.n	800d3ba <rcl_publisher_init+0x1b2>
 800d34a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d138      	bne.n	800d3c2 <rcl_publisher_init+0x1ba>
 800d350:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d352:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d354:	20c0      	movs	r0, #192	; 0xc0
 800d356:	4798      	blx	r3
 800d358:	6020      	str	r0, [r4, #0]
 800d35a:	b3a0      	cbz	r0, 800d3c6 <rcl_publisher_init+0x1be>
 800d35c:	4640      	mov	r0, r8
 800d35e:	f004 fba7 	bl	8011ab0 <rcl_node_get_rmw_handle>
 800d362:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800d366:	9300      	str	r3, [sp, #0]
 800d368:	4631      	mov	r1, r6
 800d36a:	463b      	mov	r3, r7
 800d36c:	464a      	mov	r2, r9
 800d36e:	6825      	ldr	r5, [r4, #0]
 800d370:	f000 fbf6 	bl	800db60 <rmw_create_publisher>
 800d374:	6821      	ldr	r1, [r4, #0]
 800d376:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
 800d37a:	f8d1 00bc 	ldr.w	r0, [r1, #188]	; 0xbc
 800d37e:	b388      	cbz	r0, 800d3e4 <rcl_publisher_init+0x1dc>
 800d380:	3168      	adds	r1, #104	; 0x68
 800d382:	f000 fccb 	bl	800dd1c <rmw_publisher_get_actual_qos>
 800d386:	6823      	ldr	r3, [r4, #0]
 800d388:	4605      	mov	r5, r0
 800d38a:	b9f0      	cbnz	r0, 800d3ca <rcl_publisher_init+0x1c2>
 800d38c:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800d390:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 800d394:	4618      	mov	r0, r3
 800d396:	2268      	movs	r2, #104	; 0x68
 800d398:	4639      	mov	r1, r7
 800d39a:	f009 f90d 	bl	80165b8 <memcpy>
 800d39e:	f8d8 2000 	ldr.w	r2, [r8]
 800d3a2:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
 800d3a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d3a8:	b110      	cbz	r0, 800d3b0 <rcl_publisher_init+0x1a8>
 800d3aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d3ac:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d3ae:	4798      	blx	r3
 800d3b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d3b2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d3b4:	4648      	mov	r0, r9
 800d3b6:	4798      	blx	r3
 800d3b8:	e73c      	b.n	800d234 <rcl_publisher_init+0x2c>
 800d3ba:	2501      	movs	r5, #1
 800d3bc:	e7f3      	b.n	800d3a6 <rcl_publisher_init+0x19e>
 800d3be:	2567      	movs	r5, #103	; 0x67
 800d3c0:	e79e      	b.n	800d300 <rcl_publisher_init+0xf8>
 800d3c2:	2567      	movs	r5, #103	; 0x67
 800d3c4:	e7ef      	b.n	800d3a6 <rcl_publisher_init+0x19e>
 800d3c6:	250a      	movs	r5, #10
 800d3c8:	e7ed      	b.n	800d3a6 <rcl_publisher_init+0x19e>
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d0f5      	beq.n	800d3ba <rcl_publisher_init+0x1b2>
 800d3ce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800d3d2:	b13b      	cbz	r3, 800d3e4 <rcl_publisher_init+0x1dc>
 800d3d4:	4640      	mov	r0, r8
 800d3d6:	f004 fb6b 	bl	8011ab0 <rcl_node_get_rmw_handle>
 800d3da:	6823      	ldr	r3, [r4, #0]
 800d3dc:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 800d3e0:	f000 fc9e 	bl	800dd20 <rmw_destroy_publisher>
 800d3e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d3e6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d3e8:	6820      	ldr	r0, [r4, #0]
 800d3ea:	4798      	blx	r3
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	6023      	str	r3, [r4, #0]
 800d3f0:	2501      	movs	r5, #1
 800d3f2:	e7d8      	b.n	800d3a6 <rcl_publisher_init+0x19e>

0800d3f4 <rcl_publisher_get_default_options>:
 800d3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3f6:	4f0e      	ldr	r7, [pc, #56]	; (800d430 <rcl_publisher_get_default_options+0x3c>)
 800d3f8:	490e      	ldr	r1, [pc, #56]	; (800d434 <rcl_publisher_get_default_options+0x40>)
 800d3fa:	b087      	sub	sp, #28
 800d3fc:	4606      	mov	r6, r0
 800d3fe:	2250      	movs	r2, #80	; 0x50
 800d400:	4638      	mov	r0, r7
 800d402:	f009 f8d9 	bl	80165b8 <memcpy>
 800d406:	466c      	mov	r4, sp
 800d408:	4668      	mov	r0, sp
 800d40a:	f000 f92d 	bl	800d668 <rcutils_get_default_allocator>
 800d40e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d410:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800d414:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d416:	6823      	ldr	r3, [r4, #0]
 800d418:	602b      	str	r3, [r5, #0]
 800d41a:	f000 fa9f 	bl	800d95c <rmw_get_default_publisher_options>
 800d41e:	4639      	mov	r1, r7
 800d420:	6678      	str	r0, [r7, #100]	; 0x64
 800d422:	2268      	movs	r2, #104	; 0x68
 800d424:	4630      	mov	r0, r6
 800d426:	f009 f8c7 	bl	80165b8 <memcpy>
 800d42a:	4630      	mov	r0, r6
 800d42c:	b007      	add	sp, #28
 800d42e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d430:	20009328 	.word	0x20009328
 800d434:	08017528 	.word	0x08017528

0800d438 <rcl_publish>:
 800d438:	b1f8      	cbz	r0, 800d47a <rcl_publish+0x42>
 800d43a:	6803      	ldr	r3, [r0, #0]
 800d43c:	b570      	push	{r4, r5, r6, lr}
 800d43e:	4604      	mov	r4, r0
 800d440:	b1b3      	cbz	r3, 800d470 <rcl_publish+0x38>
 800d442:	4616      	mov	r6, r2
 800d444:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800d448:	b192      	cbz	r2, 800d470 <rcl_publish+0x38>
 800d44a:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800d44e:	460d      	mov	r5, r1
 800d450:	f003 fd72 	bl	8010f38 <rcl_context_is_valid>
 800d454:	b160      	cbz	r0, 800d470 <rcl_publish+0x38>
 800d456:	6823      	ldr	r3, [r4, #0]
 800d458:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 800d45c:	b140      	cbz	r0, 800d470 <rcl_publish+0x38>
 800d45e:	b155      	cbz	r5, 800d476 <rcl_publish+0x3e>
 800d460:	4632      	mov	r2, r6
 800d462:	4629      	mov	r1, r5
 800d464:	f000 fb1c 	bl	800daa0 <rmw_publish>
 800d468:	3800      	subs	r0, #0
 800d46a:	bf18      	it	ne
 800d46c:	2001      	movne	r0, #1
 800d46e:	bd70      	pop	{r4, r5, r6, pc}
 800d470:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800d474:	bd70      	pop	{r4, r5, r6, pc}
 800d476:	200b      	movs	r0, #11
 800d478:	bd70      	pop	{r4, r5, r6, pc}
 800d47a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800d47e:	4770      	bx	lr

0800d480 <rclc_support_init>:
 800d480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d484:	b086      	sub	sp, #24
 800d486:	2800      	cmp	r0, #0
 800d488:	d042      	beq.n	800d510 <rclc_support_init+0x90>
 800d48a:	461c      	mov	r4, r3
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d03f      	beq.n	800d510 <rclc_support_init+0x90>
 800d490:	460f      	mov	r7, r1
 800d492:	4690      	mov	r8, r2
 800d494:	4606      	mov	r6, r0
 800d496:	f004 f82f 	bl	80114f8 <rcl_get_zero_initialized_init_options>
 800d49a:	4603      	mov	r3, r0
 800d49c:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 800d4a0:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d4a4:	9305      	str	r3, [sp, #20]
 800d4a6:	a805      	add	r0, sp, #20
 800d4a8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800d4ac:	f004 f826 	bl	80114fc <rcl_init_options_init>
 800d4b0:	4605      	mov	r5, r0
 800d4b2:	bb38      	cbnz	r0, 800d504 <rclc_support_init+0x84>
 800d4b4:	f004 f820 	bl	80114f8 <rcl_get_zero_initialized_init_options>
 800d4b8:	4631      	mov	r1, r6
 800d4ba:	6030      	str	r0, [r6, #0]
 800d4bc:	a805      	add	r0, sp, #20
 800d4be:	f004 f893 	bl	80115e8 <rcl_init_options_copy>
 800d4c2:	4605      	mov	r5, r0
 800d4c4:	b9c0      	cbnz	r0, 800d4f8 <rclc_support_init+0x78>
 800d4c6:	ad02      	add	r5, sp, #8
 800d4c8:	4628      	mov	r0, r5
 800d4ca:	f003 fd2b 	bl	8010f24 <rcl_get_zero_initialized_context>
 800d4ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d4d2:	1d33      	adds	r3, r6, #4
 800d4d4:	e883 0003 	stmia.w	r3, {r0, r1}
 800d4d8:	4632      	mov	r2, r6
 800d4da:	4641      	mov	r1, r8
 800d4dc:	4638      	mov	r0, r7
 800d4de:	f003 ff01 	bl	80112e4 <rcl_init>
 800d4e2:	4605      	mov	r5, r0
 800d4e4:	b940      	cbnz	r0, 800d4f8 <rclc_support_init+0x78>
 800d4e6:	60f4      	str	r4, [r6, #12]
 800d4e8:	4622      	mov	r2, r4
 800d4ea:	f106 0110 	add.w	r1, r6, #16
 800d4ee:	2003      	movs	r0, #3
 800d4f0:	f004 fc2a 	bl	8011d48 <rcl_clock_init>
 800d4f4:	4605      	mov	r5, r0
 800d4f6:	b108      	cbz	r0, 800d4fc <rclc_support_init+0x7c>
 800d4f8:	f000 f8e8 	bl	800d6cc <rcutils_reset_error>
 800d4fc:	a805      	add	r0, sp, #20
 800d4fe:	f004 f84f 	bl	80115a0 <rcl_init_options_fini>
 800d502:	b108      	cbz	r0, 800d508 <rclc_support_init+0x88>
 800d504:	f000 f8e2 	bl	800d6cc <rcutils_reset_error>
 800d508:	4628      	mov	r0, r5
 800d50a:	b006      	add	sp, #24
 800d50c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d510:	250b      	movs	r5, #11
 800d512:	4628      	mov	r0, r5
 800d514:	b006      	add	sp, #24
 800d516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d51a:	bf00      	nop

0800d51c <rclc_node_init_default>:
 800d51c:	b3b8      	cbz	r0, 800d58e <rclc_node_init_default+0x72>
 800d51e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d522:	460d      	mov	r5, r1
 800d524:	b08f      	sub	sp, #60	; 0x3c
 800d526:	b329      	cbz	r1, 800d574 <rclc_node_init_default+0x58>
 800d528:	4616      	mov	r6, r2
 800d52a:	b31a      	cbz	r2, 800d574 <rclc_node_init_default+0x58>
 800d52c:	461f      	mov	r7, r3
 800d52e:	b30b      	cbz	r3, 800d574 <rclc_node_init_default+0x58>
 800d530:	f10d 0810 	add.w	r8, sp, #16
 800d534:	4604      	mov	r4, r0
 800d536:	4640      	mov	r0, r8
 800d538:	f004 f91e 	bl	8011778 <rcl_get_zero_initialized_node>
 800d53c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800d540:	f10d 091c 	add.w	r9, sp, #28
 800d544:	e884 0003 	stmia.w	r4, {r0, r1}
 800d548:	4648      	mov	r0, r9
 800d54a:	f004 fab7 	bl	8011abc <rcl_node_get_default_options>
 800d54e:	4640      	mov	r0, r8
 800d550:	f004 f912 	bl	8011778 <rcl_get_zero_initialized_node>
 800d554:	e898 0003 	ldmia.w	r8, {r0, r1}
 800d558:	1d3b      	adds	r3, r7, #4
 800d55a:	f8cd 9000 	str.w	r9, [sp]
 800d55e:	4632      	mov	r2, r6
 800d560:	e884 0003 	stmia.w	r4, {r0, r1}
 800d564:	4629      	mov	r1, r5
 800d566:	4620      	mov	r0, r4
 800d568:	f004 f910 	bl	801178c <rcl_node_init>
 800d56c:	b930      	cbnz	r0, 800d57c <rclc_node_init_default+0x60>
 800d56e:	b00f      	add	sp, #60	; 0x3c
 800d570:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d574:	200b      	movs	r0, #11
 800d576:	b00f      	add	sp, #60	; 0x3c
 800d578:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d57c:	9003      	str	r0, [sp, #12]
 800d57e:	f000 f8a5 	bl	800d6cc <rcutils_reset_error>
 800d582:	f000 f8a3 	bl	800d6cc <rcutils_reset_error>
 800d586:	9803      	ldr	r0, [sp, #12]
 800d588:	b00f      	add	sp, #60	; 0x3c
 800d58a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d58e:	200b      	movs	r0, #11
 800d590:	4770      	bx	lr
 800d592:	bf00      	nop

0800d594 <rclc_publisher_init_default>:
 800d594:	b368      	cbz	r0, 800d5f2 <rclc_publisher_init_default+0x5e>
 800d596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d59a:	460d      	mov	r5, r1
 800d59c:	b09e      	sub	sp, #120	; 0x78
 800d59e:	b321      	cbz	r1, 800d5ea <rclc_publisher_init_default+0x56>
 800d5a0:	4616      	mov	r6, r2
 800d5a2:	b312      	cbz	r2, 800d5ea <rclc_publisher_init_default+0x56>
 800d5a4:	461f      	mov	r7, r3
 800d5a6:	b303      	cbz	r3, 800d5ea <rclc_publisher_init_default+0x56>
 800d5a8:	4604      	mov	r4, r0
 800d5aa:	f7ff fe27 	bl	800d1fc <rcl_get_zero_initialized_publisher>
 800d5ae:	f10d 0810 	add.w	r8, sp, #16
 800d5b2:	6020      	str	r0, [r4, #0]
 800d5b4:	4640      	mov	r0, r8
 800d5b6:	f7ff ff1d 	bl	800d3f4 <rcl_publisher_get_default_options>
 800d5ba:	490f      	ldr	r1, [pc, #60]	; (800d5f8 <rclc_publisher_init_default+0x64>)
 800d5bc:	2250      	movs	r2, #80	; 0x50
 800d5be:	4640      	mov	r0, r8
 800d5c0:	f008 fffa 	bl	80165b8 <memcpy>
 800d5c4:	f8cd 8000 	str.w	r8, [sp]
 800d5c8:	463b      	mov	r3, r7
 800d5ca:	4632      	mov	r2, r6
 800d5cc:	4629      	mov	r1, r5
 800d5ce:	4620      	mov	r0, r4
 800d5d0:	f7ff fe1a 	bl	800d208 <rcl_publisher_init>
 800d5d4:	b910      	cbnz	r0, 800d5dc <rclc_publisher_init_default+0x48>
 800d5d6:	b01e      	add	sp, #120	; 0x78
 800d5d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5dc:	9003      	str	r0, [sp, #12]
 800d5de:	f000 f875 	bl	800d6cc <rcutils_reset_error>
 800d5e2:	9803      	ldr	r0, [sp, #12]
 800d5e4:	b01e      	add	sp, #120	; 0x78
 800d5e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5ea:	200b      	movs	r0, #11
 800d5ec:	b01e      	add	sp, #120	; 0x78
 800d5ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5f2:	200b      	movs	r0, #11
 800d5f4:	4770      	bx	lr
 800d5f6:	bf00      	nop
 800d5f8:	08017578 	.word	0x08017578

0800d5fc <__default_zero_allocate>:
 800d5fc:	f008 baea 	b.w	8015bd4 <calloc>

0800d600 <__default_reallocate>:
 800d600:	f008 bc76 	b.w	8015ef0 <realloc>

0800d604 <__default_deallocate>:
 800d604:	f008 bb54 	b.w	8015cb0 <free>

0800d608 <__default_allocate>:
 800d608:	f008 bb4a 	b.w	8015ca0 <malloc>

0800d60c <rcutils_get_zero_initialized_allocator>:
 800d60c:	b470      	push	{r4, r5, r6}
 800d60e:	4d05      	ldr	r5, [pc, #20]	; (800d624 <rcutils_get_zero_initialized_allocator+0x18>)
 800d610:	4606      	mov	r6, r0
 800d612:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d614:	4634      	mov	r4, r6
 800d616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d618:	682b      	ldr	r3, [r5, #0]
 800d61a:	6023      	str	r3, [r4, #0]
 800d61c:	4630      	mov	r0, r6
 800d61e:	bc70      	pop	{r4, r5, r6}
 800d620:	4770      	bx	lr
 800d622:	bf00      	nop
 800d624:	080175c8 	.word	0x080175c8

0800d628 <rcutils_set_default_allocator>:
 800d628:	b1a0      	cbz	r0, 800d654 <rcutils_set_default_allocator+0x2c>
 800d62a:	6801      	ldr	r1, [r0, #0]
 800d62c:	b199      	cbz	r1, 800d656 <rcutils_set_default_allocator+0x2e>
 800d62e:	b430      	push	{r4, r5}
 800d630:	6844      	ldr	r4, [r0, #4]
 800d632:	b194      	cbz	r4, 800d65a <rcutils_set_default_allocator+0x32>
 800d634:	68c5      	ldr	r5, [r0, #12]
 800d636:	b15d      	cbz	r5, 800d650 <rcutils_set_default_allocator+0x28>
 800d638:	6883      	ldr	r3, [r0, #8]
 800d63a:	b18b      	cbz	r3, 800d660 <rcutils_set_default_allocator+0x38>
 800d63c:	4a09      	ldr	r2, [pc, #36]	; (800d664 <rcutils_set_default_allocator+0x3c>)
 800d63e:	e9c2 1400 	strd	r1, r4, [r2]
 800d642:	e9c2 3502 	strd	r3, r5, [r2, #8]
 800d646:	2000      	movs	r0, #0
 800d648:	6110      	str	r0, [r2, #16]
 800d64a:	2001      	movs	r0, #1
 800d64c:	bc30      	pop	{r4, r5}
 800d64e:	4770      	bx	lr
 800d650:	4628      	mov	r0, r5
 800d652:	e7fb      	b.n	800d64c <rcutils_set_default_allocator+0x24>
 800d654:	4770      	bx	lr
 800d656:	4608      	mov	r0, r1
 800d658:	4770      	bx	lr
 800d65a:	4620      	mov	r0, r4
 800d65c:	bc30      	pop	{r4, r5}
 800d65e:	4770      	bx	lr
 800d660:	4618      	mov	r0, r3
 800d662:	e7f3      	b.n	800d64c <rcutils_set_default_allocator+0x24>
 800d664:	20000028 	.word	0x20000028

0800d668 <rcutils_get_default_allocator>:
 800d668:	b470      	push	{r4, r5, r6}
 800d66a:	4d05      	ldr	r5, [pc, #20]	; (800d680 <rcutils_get_default_allocator+0x18>)
 800d66c:	4606      	mov	r6, r0
 800d66e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d670:	4634      	mov	r4, r6
 800d672:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d674:	682b      	ldr	r3, [r5, #0]
 800d676:	6023      	str	r3, [r4, #0]
 800d678:	4630      	mov	r0, r6
 800d67a:	bc70      	pop	{r4, r5, r6}
 800d67c:	4770      	bx	lr
 800d67e:	bf00      	nop
 800d680:	20000028 	.word	0x20000028

0800d684 <rcutils_allocator_is_valid>:
 800d684:	b158      	cbz	r0, 800d69e <rcutils_allocator_is_valid+0x1a>
 800d686:	6803      	ldr	r3, [r0, #0]
 800d688:	b143      	cbz	r3, 800d69c <rcutils_allocator_is_valid+0x18>
 800d68a:	6843      	ldr	r3, [r0, #4]
 800d68c:	b133      	cbz	r3, 800d69c <rcutils_allocator_is_valid+0x18>
 800d68e:	68c3      	ldr	r3, [r0, #12]
 800d690:	b123      	cbz	r3, 800d69c <rcutils_allocator_is_valid+0x18>
 800d692:	6880      	ldr	r0, [r0, #8]
 800d694:	3800      	subs	r0, #0
 800d696:	bf18      	it	ne
 800d698:	2001      	movne	r0, #1
 800d69a:	4770      	bx	lr
 800d69c:	4618      	mov	r0, r3
 800d69e:	4770      	bx	lr

0800d6a0 <rcutils_get_error_string>:
 800d6a0:	4b06      	ldr	r3, [pc, #24]	; (800d6bc <rcutils_get_error_string+0x1c>)
 800d6a2:	781b      	ldrb	r3, [r3, #0]
 800d6a4:	b13b      	cbz	r3, 800d6b6 <rcutils_get_error_string+0x16>
 800d6a6:	4b06      	ldr	r3, [pc, #24]	; (800d6c0 <rcutils_get_error_string+0x20>)
 800d6a8:	781a      	ldrb	r2, [r3, #0]
 800d6aa:	b90a      	cbnz	r2, 800d6b0 <rcutils_get_error_string+0x10>
 800d6ac:	2201      	movs	r2, #1
 800d6ae:	701a      	strb	r2, [r3, #0]
 800d6b0:	4b04      	ldr	r3, [pc, #16]	; (800d6c4 <rcutils_get_error_string+0x24>)
 800d6b2:	7818      	ldrb	r0, [r3, #0]
 800d6b4:	4770      	bx	lr
 800d6b6:	4b04      	ldr	r3, [pc, #16]	; (800d6c8 <rcutils_get_error_string+0x28>)
 800d6b8:	7818      	ldrb	r0, [r3, #0]
 800d6ba:	4770      	bx	lr
 800d6bc:	20009390 	.word	0x20009390
 800d6c0:	20009391 	.word	0x20009391
 800d6c4:	200095f8 	.word	0x200095f8
 800d6c8:	080175dc 	.word	0x080175dc

0800d6cc <rcutils_reset_error>:
 800d6cc:	b4d0      	push	{r4, r6, r7}
 800d6ce:	4a07      	ldr	r2, [pc, #28]	; (800d6ec <rcutils_reset_error+0x20>)
 800d6d0:	4807      	ldr	r0, [pc, #28]	; (800d6f0 <rcutils_reset_error+0x24>)
 800d6d2:	4c08      	ldr	r4, [pc, #32]	; (800d6f4 <rcutils_reset_error+0x28>)
 800d6d4:	4908      	ldr	r1, [pc, #32]	; (800d6f8 <rcutils_reset_error+0x2c>)
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	2600      	movs	r6, #0
 800d6da:	2700      	movs	r7, #0
 800d6dc:	8013      	strh	r3, [r2, #0]
 800d6de:	7003      	strb	r3, [r0, #0]
 800d6e0:	e9c2 6702 	strd	r6, r7, [r2, #8]
 800d6e4:	7023      	strb	r3, [r4, #0]
 800d6e6:	700b      	strb	r3, [r1, #0]
 800d6e8:	bcd0      	pop	{r4, r6, r7}
 800d6ea:	4770      	bx	lr
 800d6ec:	20009600 	.word	0x20009600
 800d6f0:	200095f8 	.word	0x200095f8
 800d6f4:	20009391 	.word	0x20009391
 800d6f8:	20009390 	.word	0x20009390

0800d6fc <rcutils_get_zero_initialized_string_map>:
 800d6fc:	4b01      	ldr	r3, [pc, #4]	; (800d704 <rcutils_get_zero_initialized_string_map+0x8>)
 800d6fe:	2000      	movs	r0, #0
 800d700:	6018      	str	r0, [r3, #0]
 800d702:	4770      	bx	lr
 800d704:	20009394 	.word	0x20009394

0800d708 <rcutils_string_map_reserve>:
 800d708:	2800      	cmp	r0, #0
 800d70a:	d061      	beq.n	800d7d0 <rcutils_string_map_reserve+0xc8>
 800d70c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d710:	6805      	ldr	r5, [r0, #0]
 800d712:	b083      	sub	sp, #12
 800d714:	460c      	mov	r4, r1
 800d716:	4606      	mov	r6, r0
 800d718:	b12d      	cbz	r5, 800d726 <rcutils_string_map_reserve+0x1e>
 800d71a:	68eb      	ldr	r3, [r5, #12]
 800d71c:	42a3      	cmp	r3, r4
 800d71e:	d906      	bls.n	800d72e <rcutils_string_map_reserve+0x26>
 800d720:	461c      	mov	r4, r3
 800d722:	2d00      	cmp	r5, #0
 800d724:	d1f9      	bne.n	800d71a <rcutils_string_map_reserve+0x12>
 800d726:	201f      	movs	r0, #31
 800d728:	b003      	add	sp, #12
 800d72a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d72e:	68ab      	ldr	r3, [r5, #8]
 800d730:	42a3      	cmp	r3, r4
 800d732:	d049      	beq.n	800d7c8 <rcutils_string_map_reserve+0xc0>
 800d734:	6a2f      	ldr	r7, [r5, #32]
 800d736:	2c00      	cmp	r4, #0
 800d738:	d035      	beq.n	800d7a6 <rcutils_string_map_reserve+0x9e>
 800d73a:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800d73e:	d245      	bcs.n	800d7cc <rcutils_string_map_reserve+0xc4>
 800d740:	ea4f 0884 	mov.w	r8, r4, lsl #2
 800d744:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800d748:	6828      	ldr	r0, [r5, #0]
 800d74a:	4641      	mov	r1, r8
 800d74c:	463a      	mov	r2, r7
 800d74e:	47c8      	blx	r9
 800d750:	2800      	cmp	r0, #0
 800d752:	d03b      	beq.n	800d7cc <rcutils_string_map_reserve+0xc4>
 800d754:	6833      	ldr	r3, [r6, #0]
 800d756:	463a      	mov	r2, r7
 800d758:	6018      	str	r0, [r3, #0]
 800d75a:	4641      	mov	r1, r8
 800d75c:	6858      	ldr	r0, [r3, #4]
 800d75e:	47c8      	blx	r9
 800d760:	2800      	cmp	r0, #0
 800d762:	d033      	beq.n	800d7cc <rcutils_string_map_reserve+0xc4>
 800d764:	6835      	ldr	r5, [r6, #0]
 800d766:	68ab      	ldr	r3, [r5, #8]
 800d768:	6068      	str	r0, [r5, #4]
 800d76a:	42a3      	cmp	r3, r4
 800d76c:	d227      	bcs.n	800d7be <rcutils_string_map_reserve+0xb6>
 800d76e:	682a      	ldr	r2, [r5, #0]
 800d770:	eb00 0108 	add.w	r1, r0, r8
 800d774:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 800d778:	428f      	cmp	r7, r1
 800d77a:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800d77e:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800d782:	d203      	bcs.n	800d78c <rcutils_string_map_reserve+0x84>
 800d784:	eb02 0108 	add.w	r1, r2, r8
 800d788:	428e      	cmp	r6, r1
 800d78a:	d323      	bcc.n	800d7d4 <rcutils_string_map_reserve+0xcc>
 800d78c:	1ae3      	subs	r3, r4, r3
 800d78e:	009a      	lsls	r2, r3, #2
 800d790:	4638      	mov	r0, r7
 800d792:	2100      	movs	r1, #0
 800d794:	9201      	str	r2, [sp, #4]
 800d796:	f008 fdf1 	bl	801637c <memset>
 800d79a:	9a01      	ldr	r2, [sp, #4]
 800d79c:	4630      	mov	r0, r6
 800d79e:	2100      	movs	r1, #0
 800d7a0:	f008 fdec 	bl	801637c <memset>
 800d7a4:	e00b      	b.n	800d7be <rcutils_string_map_reserve+0xb6>
 800d7a6:	f8d5 8014 	ldr.w	r8, [r5, #20]
 800d7aa:	6828      	ldr	r0, [r5, #0]
 800d7ac:	4639      	mov	r1, r7
 800d7ae:	47c0      	blx	r8
 800d7b0:	6833      	ldr	r3, [r6, #0]
 800d7b2:	4639      	mov	r1, r7
 800d7b4:	6858      	ldr	r0, [r3, #4]
 800d7b6:	601c      	str	r4, [r3, #0]
 800d7b8:	47c0      	blx	r8
 800d7ba:	6835      	ldr	r5, [r6, #0]
 800d7bc:	606c      	str	r4, [r5, #4]
 800d7be:	2000      	movs	r0, #0
 800d7c0:	60ac      	str	r4, [r5, #8]
 800d7c2:	b003      	add	sp, #12
 800d7c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7c8:	2000      	movs	r0, #0
 800d7ca:	e7ad      	b.n	800d728 <rcutils_string_map_reserve+0x20>
 800d7cc:	200a      	movs	r0, #10
 800d7ce:	e7ab      	b.n	800d728 <rcutils_string_map_reserve+0x20>
 800d7d0:	200b      	movs	r0, #11
 800d7d2:	4770      	bx	lr
 800d7d4:	1f13      	subs	r3, r2, #4
 800d7d6:	f1ac 0c04 	sub.w	ip, ip, #4
 800d7da:	4498      	add	r8, r3
 800d7dc:	4460      	add	r0, ip
 800d7de:	4462      	add	r2, ip
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	f842 3f04 	str.w	r3, [r2, #4]!
 800d7e6:	4542      	cmp	r2, r8
 800d7e8:	f840 3f04 	str.w	r3, [r0, #4]!
 800d7ec:	d1f9      	bne.n	800d7e2 <rcutils_string_map_reserve+0xda>
 800d7ee:	e7e6      	b.n	800d7be <rcutils_string_map_reserve+0xb6>

0800d7f0 <rcutils_string_map_init>:
 800d7f0:	b082      	sub	sp, #8
 800d7f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7f4:	460e      	mov	r6, r1
 800d7f6:	a906      	add	r1, sp, #24
 800d7f8:	e881 000c 	stmia.w	r1, {r2, r3}
 800d7fc:	b380      	cbz	r0, 800d860 <rcutils_string_map_init+0x70>
 800d7fe:	6807      	ldr	r7, [r0, #0]
 800d800:	4604      	mov	r4, r0
 800d802:	b12f      	cbz	r7, 800d810 <rcutils_string_map_init+0x20>
 800d804:	251e      	movs	r5, #30
 800d806:	4628      	mov	r0, r5
 800d808:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d80c:	b002      	add	sp, #8
 800d80e:	4770      	bx	lr
 800d810:	a806      	add	r0, sp, #24
 800d812:	f7ff ff37 	bl	800d684 <rcutils_allocator_is_valid>
 800d816:	b318      	cbz	r0, 800d860 <rcutils_string_map_init+0x70>
 800d818:	9b06      	ldr	r3, [sp, #24]
 800d81a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d81c:	2024      	movs	r0, #36	; 0x24
 800d81e:	4798      	blx	r3
 800d820:	4605      	mov	r5, r0
 800d822:	6020      	str	r0, [r4, #0]
 800d824:	b310      	cbz	r0, 800d86c <rcutils_string_map_init+0x7c>
 800d826:	f10d 0e18 	add.w	lr, sp, #24
 800d82a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d82e:	f105 0c10 	add.w	ip, r5, #16
 800d832:	e9c5 7700 	strd	r7, r7, [r5]
 800d836:	e9c5 7702 	strd	r7, r7, [r5, #8]
 800d83a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d83e:	f8de 3000 	ldr.w	r3, [lr]
 800d842:	f8cc 3000 	str.w	r3, [ip]
 800d846:	4631      	mov	r1, r6
 800d848:	4620      	mov	r0, r4
 800d84a:	f7ff ff5d 	bl	800d708 <rcutils_string_map_reserve>
 800d84e:	4605      	mov	r5, r0
 800d850:	2800      	cmp	r0, #0
 800d852:	d0d8      	beq.n	800d806 <rcutils_string_map_init+0x16>
 800d854:	9b07      	ldr	r3, [sp, #28]
 800d856:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d858:	6820      	ldr	r0, [r4, #0]
 800d85a:	4798      	blx	r3
 800d85c:	6027      	str	r7, [r4, #0]
 800d85e:	e7d2      	b.n	800d806 <rcutils_string_map_init+0x16>
 800d860:	250b      	movs	r5, #11
 800d862:	4628      	mov	r0, r5
 800d864:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d868:	b002      	add	sp, #8
 800d86a:	4770      	bx	lr
 800d86c:	250a      	movs	r5, #10
 800d86e:	e7ca      	b.n	800d806 <rcutils_string_map_init+0x16>

0800d870 <rcutils_string_map_fini>:
 800d870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d874:	b082      	sub	sp, #8
 800d876:	2800      	cmp	r0, #0
 800d878:	d039      	beq.n	800d8ee <rcutils_string_map_fini+0x7e>
 800d87a:	6804      	ldr	r4, [r0, #0]
 800d87c:	4606      	mov	r6, r0
 800d87e:	2c00      	cmp	r4, #0
 800d880:	d031      	beq.n	800d8e6 <rcutils_string_map_fini+0x76>
 800d882:	68a3      	ldr	r3, [r4, #8]
 800d884:	b323      	cbz	r3, 800d8d0 <rcutils_string_map_fini+0x60>
 800d886:	2500      	movs	r5, #0
 800d888:	6822      	ldr	r2, [r4, #0]
 800d88a:	46a8      	mov	r8, r5
 800d88c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800d890:	b1d8      	cbz	r0, 800d8ca <rcutils_string_map_fini+0x5a>
 800d892:	6a21      	ldr	r1, [r4, #32]
 800d894:	6967      	ldr	r7, [r4, #20]
 800d896:	9101      	str	r1, [sp, #4]
 800d898:	47b8      	blx	r7
 800d89a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d89e:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800d8a2:	9901      	ldr	r1, [sp, #4]
 800d8a4:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d8a8:	47b8      	blx	r7
 800d8aa:	68e3      	ldr	r3, [r4, #12]
 800d8ac:	6862      	ldr	r2, [r4, #4]
 800d8ae:	3b01      	subs	r3, #1
 800d8b0:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800d8b4:	60e3      	str	r3, [r4, #12]
 800d8b6:	6834      	ldr	r4, [r6, #0]
 800d8b8:	68a3      	ldr	r3, [r4, #8]
 800d8ba:	3501      	adds	r5, #1
 800d8bc:	429d      	cmp	r5, r3
 800d8be:	d207      	bcs.n	800d8d0 <rcutils_string_map_fini+0x60>
 800d8c0:	6822      	ldr	r2, [r4, #0]
 800d8c2:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800d8c6:	2800      	cmp	r0, #0
 800d8c8:	d1e3      	bne.n	800d892 <rcutils_string_map_fini+0x22>
 800d8ca:	3501      	adds	r5, #1
 800d8cc:	429d      	cmp	r5, r3
 800d8ce:	d3dd      	bcc.n	800d88c <rcutils_string_map_fini+0x1c>
 800d8d0:	2100      	movs	r1, #0
 800d8d2:	4630      	mov	r0, r6
 800d8d4:	f7ff ff18 	bl	800d708 <rcutils_string_map_reserve>
 800d8d8:	4604      	mov	r4, r0
 800d8da:	b920      	cbnz	r0, 800d8e6 <rcutils_string_map_fini+0x76>
 800d8dc:	6830      	ldr	r0, [r6, #0]
 800d8de:	6943      	ldr	r3, [r0, #20]
 800d8e0:	6a01      	ldr	r1, [r0, #32]
 800d8e2:	4798      	blx	r3
 800d8e4:	6034      	str	r4, [r6, #0]
 800d8e6:	4620      	mov	r0, r4
 800d8e8:	b002      	add	sp, #8
 800d8ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8ee:	240b      	movs	r4, #11
 800d8f0:	4620      	mov	r0, r4
 800d8f2:	b002      	add	sp, #8
 800d8f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d8f8 <rcutils_string_map_getn>:
 800d8f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8fc:	b082      	sub	sp, #8
 800d8fe:	b308      	cbz	r0, 800d944 <rcutils_string_map_getn+0x4c>
 800d900:	6804      	ldr	r4, [r0, #0]
 800d902:	b304      	cbz	r4, 800d946 <rcutils_string_map_getn+0x4e>
 800d904:	460d      	mov	r5, r1
 800d906:	b1e9      	cbz	r1, 800d944 <rcutils_string_map_getn+0x4c>
 800d908:	f8d4 9008 	ldr.w	r9, [r4, #8]
 800d90c:	6827      	ldr	r7, [r4, #0]
 800d90e:	f1b9 0f00 	cmp.w	r9, #0
 800d912:	d017      	beq.n	800d944 <rcutils_string_map_getn+0x4c>
 800d914:	4690      	mov	r8, r2
 800d916:	3f04      	subs	r7, #4
 800d918:	2600      	movs	r6, #0
 800d91a:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800d91e:	9101      	str	r1, [sp, #4]
 800d920:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800d924:	4608      	mov	r0, r1
 800d926:	3601      	adds	r6, #1
 800d928:	b151      	cbz	r1, 800d940 <rcutils_string_map_getn+0x48>
 800d92a:	f7f2 fc63 	bl	80001f4 <strlen>
 800d92e:	4540      	cmp	r0, r8
 800d930:	4602      	mov	r2, r0
 800d932:	9901      	ldr	r1, [sp, #4]
 800d934:	bf38      	it	cc
 800d936:	4642      	movcc	r2, r8
 800d938:	4628      	mov	r0, r5
 800d93a:	f008 fd34 	bl	80163a6 <strncmp>
 800d93e:	b130      	cbz	r0, 800d94e <rcutils_string_map_getn+0x56>
 800d940:	45b1      	cmp	r9, r6
 800d942:	d1ea      	bne.n	800d91a <rcutils_string_map_getn+0x22>
 800d944:	2400      	movs	r4, #0
 800d946:	4620      	mov	r0, r4
 800d948:	b002      	add	sp, #8
 800d94a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d94e:	6863      	ldr	r3, [r4, #4]
 800d950:	f853 400a 	ldr.w	r4, [r3, sl]
 800d954:	4620      	mov	r0, r4
 800d956:	b002      	add	sp, #8
 800d958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800d95c <rmw_get_default_publisher_options>:
 800d95c:	2000      	movs	r0, #0
 800d95e:	4770      	bx	lr

0800d960 <rmw_validate_full_topic_name>:
 800d960:	2800      	cmp	r0, #0
 800d962:	d062      	beq.n	800da2a <rmw_validate_full_topic_name+0xca>
 800d964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d968:	460d      	mov	r5, r1
 800d96a:	2900      	cmp	r1, #0
 800d96c:	d05f      	beq.n	800da2e <rmw_validate_full_topic_name+0xce>
 800d96e:	4616      	mov	r6, r2
 800d970:	4604      	mov	r4, r0
 800d972:	f7f2 fc3f 	bl	80001f4 <strlen>
 800d976:	b148      	cbz	r0, 800d98c <rmw_validate_full_topic_name+0x2c>
 800d978:	7823      	ldrb	r3, [r4, #0]
 800d97a:	2b2f      	cmp	r3, #47	; 0x2f
 800d97c:	d00d      	beq.n	800d99a <rmw_validate_full_topic_name+0x3a>
 800d97e:	2302      	movs	r3, #2
 800d980:	602b      	str	r3, [r5, #0]
 800d982:	b13e      	cbz	r6, 800d994 <rmw_validate_full_topic_name+0x34>
 800d984:	2000      	movs	r0, #0
 800d986:	6030      	str	r0, [r6, #0]
 800d988:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d98c:	2301      	movs	r3, #1
 800d98e:	602b      	str	r3, [r5, #0]
 800d990:	2e00      	cmp	r6, #0
 800d992:	d1f7      	bne.n	800d984 <rmw_validate_full_topic_name+0x24>
 800d994:	2000      	movs	r0, #0
 800d996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d99a:	1e47      	subs	r7, r0, #1
 800d99c:	5de3      	ldrb	r3, [r4, r7]
 800d99e:	2b2f      	cmp	r3, #47	; 0x2f
 800d9a0:	d047      	beq.n	800da32 <rmw_validate_full_topic_name+0xd2>
 800d9a2:	1e63      	subs	r3, r4, #1
 800d9a4:	eb03 0900 	add.w	r9, r3, r0
 800d9a8:	f1c4 0e01 	rsb	lr, r4, #1
 800d9ac:	eb0e 0803 	add.w	r8, lr, r3
 800d9b0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800d9b4:	f021 0220 	bic.w	r2, r1, #32
 800d9b8:	3a41      	subs	r2, #65	; 0x41
 800d9ba:	2a19      	cmp	r2, #25
 800d9bc:	f1a1 0c2f 	sub.w	ip, r1, #47	; 0x2f
 800d9c0:	d90c      	bls.n	800d9dc <rmw_validate_full_topic_name+0x7c>
 800d9c2:	295f      	cmp	r1, #95	; 0x5f
 800d9c4:	d00a      	beq.n	800d9dc <rmw_validate_full_topic_name+0x7c>
 800d9c6:	f1bc 0f0a 	cmp.w	ip, #10
 800d9ca:	d907      	bls.n	800d9dc <rmw_validate_full_topic_name+0x7c>
 800d9cc:	2304      	movs	r3, #4
 800d9ce:	602b      	str	r3, [r5, #0]
 800d9d0:	2e00      	cmp	r6, #0
 800d9d2:	d0df      	beq.n	800d994 <rmw_validate_full_topic_name+0x34>
 800d9d4:	f8c6 8000 	str.w	r8, [r6]
 800d9d8:	2000      	movs	r0, #0
 800d9da:	e7d5      	b.n	800d988 <rmw_validate_full_topic_name+0x28>
 800d9dc:	454b      	cmp	r3, r9
 800d9de:	d1e5      	bne.n	800d9ac <rmw_validate_full_topic_name+0x4c>
 800d9e0:	f8df e084 	ldr.w	lr, [pc, #132]	; 800da68 <rmw_validate_full_topic_name+0x108>
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	f107 0801 	add.w	r8, r7, #1
 800d9ea:	e005      	b.n	800d9f8 <rmw_validate_full_topic_name+0x98>
 800d9ec:	4611      	mov	r1, r2
 800d9ee:	4288      	cmp	r0, r1
 800d9f0:	4613      	mov	r3, r2
 800d9f2:	f104 0401 	add.w	r4, r4, #1
 800d9f6:	d925      	bls.n	800da44 <rmw_validate_full_topic_name+0xe4>
 800d9f8:	429f      	cmp	r7, r3
 800d9fa:	f103 0201 	add.w	r2, r3, #1
 800d9fe:	d01e      	beq.n	800da3e <rmw_validate_full_topic_name+0xde>
 800da00:	7821      	ldrb	r1, [r4, #0]
 800da02:	292f      	cmp	r1, #47	; 0x2f
 800da04:	d1f2      	bne.n	800d9ec <rmw_validate_full_topic_name+0x8c>
 800da06:	f894 c001 	ldrb.w	ip, [r4, #1]
 800da0a:	1c5a      	adds	r2, r3, #1
 800da0c:	f1bc 0f2f 	cmp.w	ip, #47	; 0x2f
 800da10:	4611      	mov	r1, r2
 800da12:	d024      	beq.n	800da5e <rmw_validate_full_topic_name+0xfe>
 800da14:	f81c 300e 	ldrb.w	r3, [ip, lr]
 800da18:	075b      	lsls	r3, r3, #29
 800da1a:	d5e8      	bpl.n	800d9ee <rmw_validate_full_topic_name+0x8e>
 800da1c:	2306      	movs	r3, #6
 800da1e:	602b      	str	r3, [r5, #0]
 800da20:	2e00      	cmp	r6, #0
 800da22:	d0b7      	beq.n	800d994 <rmw_validate_full_topic_name+0x34>
 800da24:	6032      	str	r2, [r6, #0]
 800da26:	2000      	movs	r0, #0
 800da28:	e7ae      	b.n	800d988 <rmw_validate_full_topic_name+0x28>
 800da2a:	200b      	movs	r0, #11
 800da2c:	4770      	bx	lr
 800da2e:	200b      	movs	r0, #11
 800da30:	e7aa      	b.n	800d988 <rmw_validate_full_topic_name+0x28>
 800da32:	2303      	movs	r3, #3
 800da34:	602b      	str	r3, [r5, #0]
 800da36:	2e00      	cmp	r6, #0
 800da38:	d0ac      	beq.n	800d994 <rmw_validate_full_topic_name+0x34>
 800da3a:	6037      	str	r7, [r6, #0]
 800da3c:	e7aa      	b.n	800d994 <rmw_validate_full_topic_name+0x34>
 800da3e:	4641      	mov	r1, r8
 800da40:	1c7a      	adds	r2, r7, #1
 800da42:	e7d4      	b.n	800d9ee <rmw_validate_full_topic_name+0x8e>
 800da44:	28f7      	cmp	r0, #247	; 0xf7
 800da46:	d802      	bhi.n	800da4e <rmw_validate_full_topic_name+0xee>
 800da48:	2000      	movs	r0, #0
 800da4a:	6028      	str	r0, [r5, #0]
 800da4c:	e79c      	b.n	800d988 <rmw_validate_full_topic_name+0x28>
 800da4e:	2307      	movs	r3, #7
 800da50:	602b      	str	r3, [r5, #0]
 800da52:	2e00      	cmp	r6, #0
 800da54:	d09e      	beq.n	800d994 <rmw_validate_full_topic_name+0x34>
 800da56:	23f6      	movs	r3, #246	; 0xf6
 800da58:	6033      	str	r3, [r6, #0]
 800da5a:	2000      	movs	r0, #0
 800da5c:	e794      	b.n	800d988 <rmw_validate_full_topic_name+0x28>
 800da5e:	2305      	movs	r3, #5
 800da60:	602b      	str	r3, [r5, #0]
 800da62:	2e00      	cmp	r6, #0
 800da64:	d1de      	bne.n	800da24 <rmw_validate_full_topic_name+0xc4>
 800da66:	e795      	b.n	800d994 <rmw_validate_full_topic_name+0x34>
 800da68:	08017d74 	.word	0x08017d74

0800da6c <rmw_uros_set_custom_transport>:
 800da6c:	b470      	push	{r4, r5, r6}
 800da6e:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800da72:	b162      	cbz	r2, 800da8e <rmw_uros_set_custom_transport+0x22>
 800da74:	b15b      	cbz	r3, 800da8e <rmw_uros_set_custom_transport+0x22>
 800da76:	b155      	cbz	r5, 800da8e <rmw_uros_set_custom_transport+0x22>
 800da78:	b14e      	cbz	r6, 800da8e <rmw_uros_set_custom_transport+0x22>
 800da7a:	4c06      	ldr	r4, [pc, #24]	; (800da94 <rmw_uros_set_custom_transport+0x28>)
 800da7c:	7020      	strb	r0, [r4, #0]
 800da7e:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800da82:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800da86:	6166      	str	r6, [r4, #20]
 800da88:	2000      	movs	r0, #0
 800da8a:	bc70      	pop	{r4, r5, r6}
 800da8c:	4770      	bx	lr
 800da8e:	200b      	movs	r0, #11
 800da90:	bc70      	pop	{r4, r5, r6}
 800da92:	4770      	bx	lr
 800da94:	20009610 	.word	0x20009610

0800da98 <flush_session>:
 800da98:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 800da9a:	f001 bbcb 	b.w	800f234 <uxr_run_session_until_confirm_delivery>
 800da9e:	bf00      	nop

0800daa0 <rmw_publish>:
 800daa0:	2800      	cmp	r0, #0
 800daa2:	d053      	beq.n	800db4c <rmw_publish+0xac>
 800daa4:	b570      	push	{r4, r5, r6, lr}
 800daa6:	460d      	mov	r5, r1
 800daa8:	b08e      	sub	sp, #56	; 0x38
 800daaa:	2900      	cmp	r1, #0
 800daac:	d04b      	beq.n	800db46 <rmw_publish+0xa6>
 800daae:	4604      	mov	r4, r0
 800dab0:	6800      	ldr	r0, [r0, #0]
 800dab2:	f000 fbfd 	bl	800e2b0 <is_uxrce_rmw_identifier_valid>
 800dab6:	2800      	cmp	r0, #0
 800dab8:	d045      	beq.n	800db46 <rmw_publish+0xa6>
 800daba:	6866      	ldr	r6, [r4, #4]
 800dabc:	2e00      	cmp	r6, #0
 800dabe:	d042      	beq.n	800db46 <rmw_publish+0xa6>
 800dac0:	69b4      	ldr	r4, [r6, #24]
 800dac2:	4628      	mov	r0, r5
 800dac4:	6923      	ldr	r3, [r4, #16]
 800dac6:	4798      	blx	r3
 800dac8:	69f3      	ldr	r3, [r6, #28]
 800daca:	9005      	str	r0, [sp, #20]
 800dacc:	b113      	cbz	r3, 800dad4 <rmw_publish+0x34>
 800dace:	a805      	add	r0, sp, #20
 800dad0:	4798      	blx	r3
 800dad2:	9805      	ldr	r0, [sp, #20]
 800dad4:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800dad8:	691b      	ldr	r3, [r3, #16]
 800dada:	9000      	str	r0, [sp, #0]
 800dadc:	6972      	ldr	r2, [r6, #20]
 800dade:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800dae0:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800dae4:	ab06      	add	r3, sp, #24
 800dae6:	f002 f9ad 	bl	800fe44 <uxr_prepare_output_stream>
 800daea:	b1d8      	cbz	r0, 800db24 <rmw_publish+0x84>
 800daec:	68a3      	ldr	r3, [r4, #8]
 800daee:	4628      	mov	r0, r5
 800daf0:	a906      	add	r1, sp, #24
 800daf2:	4798      	blx	r3
 800daf4:	6a33      	ldr	r3, [r6, #32]
 800daf6:	4604      	mov	r4, r0
 800daf8:	b10b      	cbz	r3, 800dafe <rmw_publish+0x5e>
 800dafa:	a806      	add	r0, sp, #24
 800dafc:	4798      	blx	r3
 800dafe:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 800db02:	2b01      	cmp	r3, #1
 800db04:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800db08:	d022      	beq.n	800db50 <rmw_publish+0xb0>
 800db0a:	6918      	ldr	r0, [r3, #16]
 800db0c:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 800db0e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800db12:	f001 fb8f 	bl	800f234 <uxr_run_session_until_confirm_delivery>
 800db16:	4020      	ands	r0, r4
 800db18:	b2c4      	uxtb	r4, r0
 800db1a:	f084 0001 	eor.w	r0, r4, #1
 800db1e:	b2c0      	uxtb	r0, r0
 800db20:	b00e      	add	sp, #56	; 0x38
 800db22:	bd70      	pop	{r4, r5, r6, pc}
 800db24:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800db28:	4a0c      	ldr	r2, [pc, #48]	; (800db5c <rmw_publish+0xbc>)
 800db2a:	6918      	ldr	r0, [r3, #16]
 800db2c:	9b05      	ldr	r3, [sp, #20]
 800db2e:	9300      	str	r3, [sp, #0]
 800db30:	e9cd 2601 	strd	r2, r6, [sp, #4]
 800db34:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800db38:	6972      	ldr	r2, [r6, #20]
 800db3a:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800db3c:	ab06      	add	r3, sp, #24
 800db3e:	f002 f9b1 	bl	800fea4 <uxr_prepare_output_stream_fragmented>
 800db42:	2800      	cmp	r0, #0
 800db44:	d1d2      	bne.n	800daec <rmw_publish+0x4c>
 800db46:	2001      	movs	r0, #1
 800db48:	b00e      	add	sp, #56	; 0x38
 800db4a:	bd70      	pop	{r4, r5, r6, pc}
 800db4c:	2001      	movs	r0, #1
 800db4e:	4770      	bx	lr
 800db50:	6918      	ldr	r0, [r3, #16]
 800db52:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800db56:	f000 ffeb 	bl	800eb30 <uxr_flash_output_streams>
 800db5a:	e7de      	b.n	800db1a <rmw_publish+0x7a>
 800db5c:	0800da99 	.word	0x0800da99

0800db60 <rmw_create_publisher>:
 800db60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db64:	b087      	sub	sp, #28
 800db66:	2800      	cmp	r0, #0
 800db68:	f000 80cc 	beq.w	800dd04 <rmw_create_publisher+0x1a4>
 800db6c:	460e      	mov	r6, r1
 800db6e:	2900      	cmp	r1, #0
 800db70:	f000 80c8 	beq.w	800dd04 <rmw_create_publisher+0x1a4>
 800db74:	4604      	mov	r4, r0
 800db76:	6800      	ldr	r0, [r0, #0]
 800db78:	4615      	mov	r5, r2
 800db7a:	4698      	mov	r8, r3
 800db7c:	f000 fb98 	bl	800e2b0 <is_uxrce_rmw_identifier_valid>
 800db80:	2800      	cmp	r0, #0
 800db82:	f000 80bf 	beq.w	800dd04 <rmw_create_publisher+0x1a4>
 800db86:	2d00      	cmp	r5, #0
 800db88:	f000 80bc 	beq.w	800dd04 <rmw_create_publisher+0x1a4>
 800db8c:	782b      	ldrb	r3, [r5, #0]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	f000 80b8 	beq.w	800dd04 <rmw_create_publisher+0x1a4>
 800db94:	f1b8 0f00 	cmp.w	r8, #0
 800db98:	f000 80b4 	beq.w	800dd04 <rmw_create_publisher+0x1a4>
 800db9c:	485c      	ldr	r0, [pc, #368]	; (800dd10 <rmw_create_publisher+0x1b0>)
 800db9e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800dba2:	f004 fd81 	bl	80126a8 <get_memory>
 800dba6:	2800      	cmp	r0, #0
 800dba8:	f000 80ac 	beq.w	800dd04 <rmw_create_publisher+0x1a4>
 800dbac:	68c4      	ldr	r4, [r0, #12]
 800dbae:	2300      	movs	r3, #0
 800dbb0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800dbb4:	f004 fd9c 	bl	80126f0 <rmw_get_implementation_identifier>
 800dbb8:	f104 0a98 	add.w	sl, r4, #152	; 0x98
 800dbbc:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800dbc0:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 800dbc4:	4628      	mov	r0, r5
 800dbc6:	f7f2 fb15 	bl	80001f4 <strlen>
 800dbca:	3001      	adds	r0, #1
 800dbcc:	283c      	cmp	r0, #60	; 0x3c
 800dbce:	f104 0784 	add.w	r7, r4, #132	; 0x84
 800dbd2:	f200 8094 	bhi.w	800dcfe <rmw_create_publisher+0x19e>
 800dbd6:	4a4f      	ldr	r2, [pc, #316]	; (800dd14 <rmw_create_publisher+0x1b4>)
 800dbd8:	462b      	mov	r3, r5
 800dbda:	213c      	movs	r1, #60	; 0x3c
 800dbdc:	4650      	mov	r0, sl
 800dbde:	f008 fafd 	bl	80161dc <sniprintf>
 800dbe2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dbe6:	e9c4 391f 	strd	r3, r9, [r4, #124]	; 0x7c
 800dbea:	4641      	mov	r1, r8
 800dbec:	2250      	movs	r2, #80	; 0x50
 800dbee:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800dbf2:	f008 fce1 	bl	80165b8 <memcpy>
 800dbf6:	f898 3008 	ldrb.w	r3, [r8, #8]
 800dbfa:	4947      	ldr	r1, [pc, #284]	; (800dd18 <rmw_create_publisher+0x1b8>)
 800dbfc:	2b02      	cmp	r3, #2
 800dbfe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dc02:	bf0c      	ite	eq
 800dc04:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 800dc08:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 800dc0c:	67a3      	str	r3, [r4, #120]	; 0x78
 800dc0e:	2300      	movs	r3, #0
 800dc10:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800dc14:	4630      	mov	r0, r6
 800dc16:	f000 fb59 	bl	800e2cc <get_message_typesupport_handle>
 800dc1a:	2800      	cmp	r0, #0
 800dc1c:	d06f      	beq.n	800dcfe <rmw_create_publisher+0x19e>
 800dc1e:	6842      	ldr	r2, [r0, #4]
 800dc20:	61a2      	str	r2, [r4, #24]
 800dc22:	2a00      	cmp	r2, #0
 800dc24:	d06b      	beq.n	800dcfe <rmw_create_publisher+0x19e>
 800dc26:	4629      	mov	r1, r5
 800dc28:	4643      	mov	r3, r8
 800dc2a:	4648      	mov	r0, r9
 800dc2c:	f004 ffaa 	bl	8012b84 <create_topic>
 800dc30:	6260      	str	r0, [r4, #36]	; 0x24
 800dc32:	2800      	cmp	r0, #0
 800dc34:	d063      	beq.n	800dcfe <rmw_create_publisher+0x19e>
 800dc36:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800dc3a:	f241 5398 	movw	r3, #5528	; 0x1598
 800dc3e:	2103      	movs	r1, #3
 800dc40:	5ad0      	ldrh	r0, [r2, r3]
 800dc42:	1c45      	adds	r5, r0, #1
 800dc44:	52d5      	strh	r5, [r2, r3]
 800dc46:	f000 fe27 	bl	800e898 <uxr_object_id>
 800dc4a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dc4e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800dc52:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800dc56:	6912      	ldr	r2, [r2, #16]
 800dc58:	6120      	str	r0, [r4, #16]
 800dc5a:	f04f 0a06 	mov.w	sl, #6
 800dc5e:	f8cd a000 	str.w	sl, [sp]
 800dc62:	6819      	ldr	r1, [r3, #0]
 800dc64:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800dc68:	f502 7028 	add.w	r0, r2, #672	; 0x2a0
 800dc6c:	6922      	ldr	r2, [r4, #16]
 800dc6e:	f000 fd6d 	bl	800e74c <uxr_buffer_create_publisher_bin>
 800dc72:	4602      	mov	r2, r0
 800dc74:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800dc78:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800dc7c:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800dc80:	f000 fa96 	bl	800e1b0 <run_xrce_session>
 800dc84:	b3b8      	cbz	r0, 800dcf6 <rmw_create_publisher+0x196>
 800dc86:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800dc8a:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 800dc8e:	f241 539a 	movw	r3, #5530	; 0x159a
 800dc92:	2105      	movs	r1, #5
 800dc94:	5ad0      	ldrh	r0, [r2, r3]
 800dc96:	1c45      	adds	r5, r0, #1
 800dc98:	52d5      	strh	r5, [r2, r3]
 800dc9a:	f000 fdfd 	bl	800e898 <uxr_object_id>
 800dc9e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800dca2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dca6:	6915      	ldr	r5, [r2, #16]
 800dca8:	6160      	str	r0, [r4, #20]
 800dcaa:	ae04      	add	r6, sp, #16
 800dcac:	4641      	mov	r1, r8
 800dcae:	4630      	mov	r0, r6
 800dcb0:	f8d3 8384 	ldr.w	r8, [r3, #900]	; 0x384
 800dcb4:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800dcb8:	f000 fa96 	bl	800e1e8 <convert_qos_profile>
 800dcbc:	e896 0003 	ldmia.w	r6, {r0, r1}
 800dcc0:	f8cd a00c 	str.w	sl, [sp, #12]
 800dcc4:	9001      	str	r0, [sp, #4]
 800dcc6:	f8ad 1008 	strh.w	r1, [sp, #8]
 800dcca:	f8db 3010 	ldr.w	r3, [fp, #16]
 800dcce:	9300      	str	r3, [sp, #0]
 800dcd0:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
 800dcd4:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800dcd8:	f8d8 1000 	ldr.w	r1, [r8]
 800dcdc:	4628      	mov	r0, r5
 800dcde:	f000 fd63 	bl	800e7a8 <uxr_buffer_create_datawriter_bin>
 800dce2:	4602      	mov	r2, r0
 800dce4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800dce8:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800dcec:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800dcf0:	f000 fa5e 	bl	800e1b0 <run_xrce_session>
 800dcf4:	b938      	cbnz	r0, 800dd06 <rmw_create_publisher+0x1a6>
 800dcf6:	4806      	ldr	r0, [pc, #24]	; (800dd10 <rmw_create_publisher+0x1b0>)
 800dcf8:	4621      	mov	r1, r4
 800dcfa:	f004 fce5 	bl	80126c8 <put_memory>
 800dcfe:	4638      	mov	r0, r7
 800dd00:	f000 f9a6 	bl	800e050 <rmw_uxrce_fini_publisher_memory>
 800dd04:	2700      	movs	r7, #0
 800dd06:	4638      	mov	r0, r7
 800dd08:	b007      	add	sp, #28
 800dd0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd0e:	bf00      	nop
 800dd10:	20009640 	.word	0x20009640
 800dd14:	08017614 	.word	0x08017614
 800dd18:	080175e0 	.word	0x080175e0

0800dd1c <rmw_publisher_get_actual_qos>:
 800dd1c:	2000      	movs	r0, #0
 800dd1e:	4770      	bx	lr

0800dd20 <rmw_destroy_publisher>:
 800dd20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd22:	b128      	cbz	r0, 800dd30 <rmw_destroy_publisher+0x10>
 800dd24:	4604      	mov	r4, r0
 800dd26:	6800      	ldr	r0, [r0, #0]
 800dd28:	460d      	mov	r5, r1
 800dd2a:	f000 fac1 	bl	800e2b0 <is_uxrce_rmw_identifier_valid>
 800dd2e:	b910      	cbnz	r0, 800dd36 <rmw_destroy_publisher+0x16>
 800dd30:	2401      	movs	r4, #1
 800dd32:	4620      	mov	r0, r4
 800dd34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd36:	6863      	ldr	r3, [r4, #4]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d0f9      	beq.n	800dd30 <rmw_destroy_publisher+0x10>
 800dd3c:	2d00      	cmp	r5, #0
 800dd3e:	d0f7      	beq.n	800dd30 <rmw_destroy_publisher+0x10>
 800dd40:	6828      	ldr	r0, [r5, #0]
 800dd42:	f000 fab5 	bl	800e2b0 <is_uxrce_rmw_identifier_valid>
 800dd46:	2800      	cmp	r0, #0
 800dd48:	d0f2      	beq.n	800dd30 <rmw_destroy_publisher+0x10>
 800dd4a:	686c      	ldr	r4, [r5, #4]
 800dd4c:	2c00      	cmp	r4, #0
 800dd4e:	d0ef      	beq.n	800dd30 <rmw_destroy_publisher+0x10>
 800dd50:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800dd52:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 800dd56:	f004 ff77 	bl	8012c48 <destroy_topic>
 800dd5a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800dd5e:	6962      	ldr	r2, [r4, #20]
 800dd60:	6918      	ldr	r0, [r3, #16]
 800dd62:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800dd66:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800dd6a:	6819      	ldr	r1, [r3, #0]
 800dd6c:	f000 fc3c 	bl	800e5e8 <uxr_buffer_delete_entity>
 800dd70:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800dd74:	6922      	ldr	r2, [r4, #16]
 800dd76:	4603      	mov	r3, r0
 800dd78:	6908      	ldr	r0, [r1, #16]
 800dd7a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800dd7e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800dd82:	6809      	ldr	r1, [r1, #0]
 800dd84:	461c      	mov	r4, r3
 800dd86:	f000 fc2f 	bl	800e5e8 <uxr_buffer_delete_entity>
 800dd8a:	4606      	mov	r6, r0
 800dd8c:	6938      	ldr	r0, [r7, #16]
 800dd8e:	4622      	mov	r2, r4
 800dd90:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800dd94:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800dd98:	f000 fa0a 	bl	800e1b0 <run_xrce_session>
 800dd9c:	4604      	mov	r4, r0
 800dd9e:	6938      	ldr	r0, [r7, #16]
 800dda0:	4632      	mov	r2, r6
 800dda2:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800dda6:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800ddaa:	f000 fa01 	bl	800e1b0 <run_xrce_session>
 800ddae:	b12c      	cbz	r4, 800ddbc <rmw_destroy_publisher+0x9c>
 800ddb0:	b120      	cbz	r0, 800ddbc <rmw_destroy_publisher+0x9c>
 800ddb2:	2400      	movs	r4, #0
 800ddb4:	4628      	mov	r0, r5
 800ddb6:	f000 f94b 	bl	800e050 <rmw_uxrce_fini_publisher_memory>
 800ddba:	e7ba      	b.n	800dd32 <rmw_destroy_publisher+0x12>
 800ddbc:	2402      	movs	r4, #2
 800ddbe:	e7f9      	b.n	800ddb4 <rmw_destroy_publisher+0x94>

0800ddc0 <rmw_uxrce_init_service_memory>:
 800ddc0:	b1b2      	cbz	r2, 800ddf0 <rmw_uxrce_init_service_memory+0x30>
 800ddc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddc4:	7a07      	ldrb	r7, [r0, #8]
 800ddc6:	4605      	mov	r5, r0
 800ddc8:	b98f      	cbnz	r7, 800ddee <rmw_uxrce_init_service_memory+0x2e>
 800ddca:	e9c0 7700 	strd	r7, r7, [r0]
 800ddce:	460c      	mov	r4, r1
 800ddd0:	23c8      	movs	r3, #200	; 0xc8
 800ddd2:	2101      	movs	r1, #1
 800ddd4:	fb03 4602 	mla	r6, r3, r2, r4
 800ddd8:	60c3      	str	r3, [r0, #12]
 800ddda:	7201      	strb	r1, [r0, #8]
 800dddc:	4621      	mov	r1, r4
 800ddde:	4628      	mov	r0, r5
 800dde0:	f004 fc72 	bl	80126c8 <put_memory>
 800dde4:	60e4      	str	r4, [r4, #12]
 800dde6:	f804 7bc8 	strb.w	r7, [r4], #200
 800ddea:	42a6      	cmp	r6, r4
 800ddec:	d1f6      	bne.n	800dddc <rmw_uxrce_init_service_memory+0x1c>
 800ddee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ddf0:	4770      	bx	lr
 800ddf2:	bf00      	nop

0800ddf4 <rmw_uxrce_init_client_memory>:
 800ddf4:	b1b2      	cbz	r2, 800de24 <rmw_uxrce_init_client_memory+0x30>
 800ddf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddf8:	7a07      	ldrb	r7, [r0, #8]
 800ddfa:	4605      	mov	r5, r0
 800ddfc:	b98f      	cbnz	r7, 800de22 <rmw_uxrce_init_client_memory+0x2e>
 800ddfe:	e9c0 7700 	strd	r7, r7, [r0]
 800de02:	460c      	mov	r4, r1
 800de04:	23c8      	movs	r3, #200	; 0xc8
 800de06:	2101      	movs	r1, #1
 800de08:	fb03 4602 	mla	r6, r3, r2, r4
 800de0c:	60c3      	str	r3, [r0, #12]
 800de0e:	7201      	strb	r1, [r0, #8]
 800de10:	4621      	mov	r1, r4
 800de12:	4628      	mov	r0, r5
 800de14:	f004 fc58 	bl	80126c8 <put_memory>
 800de18:	60e4      	str	r4, [r4, #12]
 800de1a:	f804 7bc8 	strb.w	r7, [r4], #200
 800de1e:	42a6      	cmp	r6, r4
 800de20:	d1f6      	bne.n	800de10 <rmw_uxrce_init_client_memory+0x1c>
 800de22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de24:	4770      	bx	lr
 800de26:	bf00      	nop

0800de28 <rmw_uxrce_init_publisher_memory>:
 800de28:	b1b2      	cbz	r2, 800de58 <rmw_uxrce_init_publisher_memory+0x30>
 800de2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de2c:	7a07      	ldrb	r7, [r0, #8]
 800de2e:	4605      	mov	r5, r0
 800de30:	b98f      	cbnz	r7, 800de56 <rmw_uxrce_init_publisher_memory+0x2e>
 800de32:	e9c0 7700 	strd	r7, r7, [r0]
 800de36:	460c      	mov	r4, r1
 800de38:	23d8      	movs	r3, #216	; 0xd8
 800de3a:	2101      	movs	r1, #1
 800de3c:	fb03 4602 	mla	r6, r3, r2, r4
 800de40:	60c3      	str	r3, [r0, #12]
 800de42:	7201      	strb	r1, [r0, #8]
 800de44:	4621      	mov	r1, r4
 800de46:	4628      	mov	r0, r5
 800de48:	f004 fc3e 	bl	80126c8 <put_memory>
 800de4c:	60e4      	str	r4, [r4, #12]
 800de4e:	f804 7bd8 	strb.w	r7, [r4], #216
 800de52:	42a6      	cmp	r6, r4
 800de54:	d1f6      	bne.n	800de44 <rmw_uxrce_init_publisher_memory+0x1c>
 800de56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de58:	4770      	bx	lr
 800de5a:	bf00      	nop

0800de5c <rmw_uxrce_init_subscription_memory>:
 800de5c:	b1b2      	cbz	r2, 800de8c <rmw_uxrce_init_subscription_memory+0x30>
 800de5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de60:	7a07      	ldrb	r7, [r0, #8]
 800de62:	4605      	mov	r5, r0
 800de64:	b98f      	cbnz	r7, 800de8a <rmw_uxrce_init_subscription_memory+0x2e>
 800de66:	e9c0 7700 	strd	r7, r7, [r0]
 800de6a:	460c      	mov	r4, r1
 800de6c:	23d0      	movs	r3, #208	; 0xd0
 800de6e:	2101      	movs	r1, #1
 800de70:	fb03 4602 	mla	r6, r3, r2, r4
 800de74:	60c3      	str	r3, [r0, #12]
 800de76:	7201      	strb	r1, [r0, #8]
 800de78:	4621      	mov	r1, r4
 800de7a:	4628      	mov	r0, r5
 800de7c:	f004 fc24 	bl	80126c8 <put_memory>
 800de80:	60e4      	str	r4, [r4, #12]
 800de82:	f804 7bd0 	strb.w	r7, [r4], #208
 800de86:	42a6      	cmp	r6, r4
 800de88:	d1f6      	bne.n	800de78 <rmw_uxrce_init_subscription_memory+0x1c>
 800de8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de8c:	4770      	bx	lr
 800de8e:	bf00      	nop

0800de90 <rmw_uxrce_init_node_memory>:
 800de90:	b1b2      	cbz	r2, 800dec0 <rmw_uxrce_init_node_memory+0x30>
 800de92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de94:	7a07      	ldrb	r7, [r0, #8]
 800de96:	4605      	mov	r5, r0
 800de98:	b98f      	cbnz	r7, 800debe <rmw_uxrce_init_node_memory+0x2e>
 800de9a:	e9c0 7700 	strd	r7, r7, [r0]
 800de9e:	460c      	mov	r4, r1
 800dea0:	23a4      	movs	r3, #164	; 0xa4
 800dea2:	2101      	movs	r1, #1
 800dea4:	fb03 4602 	mla	r6, r3, r2, r4
 800dea8:	60c3      	str	r3, [r0, #12]
 800deaa:	7201      	strb	r1, [r0, #8]
 800deac:	4621      	mov	r1, r4
 800deae:	4628      	mov	r0, r5
 800deb0:	f004 fc0a 	bl	80126c8 <put_memory>
 800deb4:	60e4      	str	r4, [r4, #12]
 800deb6:	f804 7ba4 	strb.w	r7, [r4], #164
 800deba:	42a6      	cmp	r6, r4
 800debc:	d1f6      	bne.n	800deac <rmw_uxrce_init_node_memory+0x1c>
 800debe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dec0:	4770      	bx	lr
 800dec2:	bf00      	nop

0800dec4 <rmw_uxrce_init_session_memory>:
 800dec4:	b1d2      	cbz	r2, 800defc <rmw_uxrce_init_session_memory+0x38>
 800dec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800deca:	7a07      	ldrb	r7, [r0, #8]
 800decc:	4605      	mov	r5, r0
 800dece:	b99f      	cbnz	r7, 800def8 <rmw_uxrce_init_session_memory+0x34>
 800ded0:	e9c0 7700 	strd	r7, r7, [r0]
 800ded4:	f241 53a8 	movw	r3, #5544	; 0x15a8
 800ded8:	460c      	mov	r4, r1
 800deda:	2101      	movs	r1, #1
 800dedc:	fb03 4602 	mla	r6, r3, r2, r4
 800dee0:	60c3      	str	r3, [r0, #12]
 800dee2:	4698      	mov	r8, r3
 800dee4:	7201      	strb	r1, [r0, #8]
 800dee6:	4621      	mov	r1, r4
 800dee8:	4628      	mov	r0, r5
 800deea:	f004 fbed 	bl	80126c8 <put_memory>
 800deee:	60e4      	str	r4, [r4, #12]
 800def0:	7027      	strb	r7, [r4, #0]
 800def2:	4444      	add	r4, r8
 800def4:	42a6      	cmp	r6, r4
 800def6:	d1f6      	bne.n	800dee6 <rmw_uxrce_init_session_memory+0x22>
 800def8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800defc:	4770      	bx	lr
 800defe:	bf00      	nop

0800df00 <rmw_uxrce_init_topic_memory>:
 800df00:	b1c2      	cbz	r2, 800df34 <rmw_uxrce_init_topic_memory+0x34>
 800df02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df04:	7a07      	ldrb	r7, [r0, #8]
 800df06:	4606      	mov	r6, r0
 800df08:	b99f      	cbnz	r7, 800df32 <rmw_uxrce_init_topic_memory+0x32>
 800df0a:	e9c0 7700 	strd	r7, r7, [r0]
 800df0e:	460c      	mov	r4, r1
 800df10:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800df14:	2101      	movs	r1, #1
 800df16:	231c      	movs	r3, #28
 800df18:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800df1c:	7201      	strb	r1, [r0, #8]
 800df1e:	60c3      	str	r3, [r0, #12]
 800df20:	4621      	mov	r1, r4
 800df22:	4630      	mov	r0, r6
 800df24:	f004 fbd0 	bl	80126c8 <put_memory>
 800df28:	60e4      	str	r4, [r4, #12]
 800df2a:	f804 7b1c 	strb.w	r7, [r4], #28
 800df2e:	42a5      	cmp	r5, r4
 800df30:	d1f6      	bne.n	800df20 <rmw_uxrce_init_topic_memory+0x20>
 800df32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df34:	4770      	bx	lr
 800df36:	bf00      	nop

0800df38 <rmw_uxrce_init_static_input_buffer_memory>:
 800df38:	b1d2      	cbz	r2, 800df70 <rmw_uxrce_init_static_input_buffer_memory+0x38>
 800df3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df3c:	7a07      	ldrb	r7, [r0, #8]
 800df3e:	4606      	mov	r6, r0
 800df40:	b9af      	cbnz	r7, 800df6e <rmw_uxrce_init_static_input_buffer_memory+0x36>
 800df42:	e9c0 7700 	strd	r7, r7, [r0]
 800df46:	460c      	mov	r4, r1
 800df48:	eb02 1242 	add.w	r2, r2, r2, lsl #5
 800df4c:	2101      	movs	r1, #1
 800df4e:	f44f 6304 	mov.w	r3, #2112	; 0x840
 800df52:	eb04 1582 	add.w	r5, r4, r2, lsl #6
 800df56:	7201      	strb	r1, [r0, #8]
 800df58:	60c3      	str	r3, [r0, #12]
 800df5a:	4621      	mov	r1, r4
 800df5c:	4630      	mov	r0, r6
 800df5e:	f004 fbb3 	bl	80126c8 <put_memory>
 800df62:	60e4      	str	r4, [r4, #12]
 800df64:	7027      	strb	r7, [r4, #0]
 800df66:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 800df6a:	42a5      	cmp	r5, r4
 800df6c:	d1f5      	bne.n	800df5a <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800df6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df70:	4770      	bx	lr
 800df72:	bf00      	nop

0800df74 <rmw_uxrce_init_init_options_impl_memory>:
 800df74:	b1b2      	cbz	r2, 800dfa4 <rmw_uxrce_init_init_options_impl_memory+0x30>
 800df76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df78:	7a07      	ldrb	r7, [r0, #8]
 800df7a:	4605      	mov	r5, r0
 800df7c:	b98f      	cbnz	r7, 800dfa2 <rmw_uxrce_init_init_options_impl_memory+0x2e>
 800df7e:	e9c0 7700 	strd	r7, r7, [r0]
 800df82:	460c      	mov	r4, r1
 800df84:	232c      	movs	r3, #44	; 0x2c
 800df86:	2101      	movs	r1, #1
 800df88:	fb03 4602 	mla	r6, r3, r2, r4
 800df8c:	60c3      	str	r3, [r0, #12]
 800df8e:	7201      	strb	r1, [r0, #8]
 800df90:	4621      	mov	r1, r4
 800df92:	4628      	mov	r0, r5
 800df94:	f004 fb98 	bl	80126c8 <put_memory>
 800df98:	60e4      	str	r4, [r4, #12]
 800df9a:	f804 7b2c 	strb.w	r7, [r4], #44
 800df9e:	42a6      	cmp	r6, r4
 800dfa0:	d1f6      	bne.n	800df90 <rmw_uxrce_init_init_options_impl_memory+0x1c>
 800dfa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dfa4:	4770      	bx	lr
 800dfa6:	bf00      	nop

0800dfa8 <rmw_uxrce_init_wait_set_memory>:
 800dfa8:	b1c2      	cbz	r2, 800dfdc <rmw_uxrce_init_wait_set_memory+0x34>
 800dfaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfac:	7a07      	ldrb	r7, [r0, #8]
 800dfae:	4606      	mov	r6, r0
 800dfb0:	b99f      	cbnz	r7, 800dfda <rmw_uxrce_init_wait_set_memory+0x32>
 800dfb2:	e9c0 7700 	strd	r7, r7, [r0]
 800dfb6:	460c      	mov	r4, r1
 800dfb8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800dfbc:	2101      	movs	r1, #1
 800dfbe:	231c      	movs	r3, #28
 800dfc0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800dfc4:	7201      	strb	r1, [r0, #8]
 800dfc6:	60c3      	str	r3, [r0, #12]
 800dfc8:	4621      	mov	r1, r4
 800dfca:	4630      	mov	r0, r6
 800dfcc:	f004 fb7c 	bl	80126c8 <put_memory>
 800dfd0:	60e4      	str	r4, [r4, #12]
 800dfd2:	f804 7b1c 	strb.w	r7, [r4], #28
 800dfd6:	42a5      	cmp	r5, r4
 800dfd8:	d1f6      	bne.n	800dfc8 <rmw_uxrce_init_wait_set_memory+0x20>
 800dfda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dfdc:	4770      	bx	lr
 800dfde:	bf00      	nop

0800dfe0 <rmw_uxrce_init_guard_condition_memory>:
 800dfe0:	b1b2      	cbz	r2, 800e010 <rmw_uxrce_init_guard_condition_memory+0x30>
 800dfe2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfe4:	7a07      	ldrb	r7, [r0, #8]
 800dfe6:	4605      	mov	r5, r0
 800dfe8:	b98f      	cbnz	r7, 800e00e <rmw_uxrce_init_guard_condition_memory+0x2e>
 800dfea:	e9c0 7700 	strd	r7, r7, [r0]
 800dfee:	460c      	mov	r4, r1
 800dff0:	2320      	movs	r3, #32
 800dff2:	2101      	movs	r1, #1
 800dff4:	eb04 1642 	add.w	r6, r4, r2, lsl #5
 800dff8:	7201      	strb	r1, [r0, #8]
 800dffa:	60c3      	str	r3, [r0, #12]
 800dffc:	4621      	mov	r1, r4
 800dffe:	4628      	mov	r0, r5
 800e000:	f004 fb62 	bl	80126c8 <put_memory>
 800e004:	60e4      	str	r4, [r4, #12]
 800e006:	f804 7b20 	strb.w	r7, [r4], #32
 800e00a:	42a6      	cmp	r6, r4
 800e00c:	d1f6      	bne.n	800dffc <rmw_uxrce_init_guard_condition_memory+0x1c>
 800e00e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e010:	4770      	bx	lr
 800e012:	bf00      	nop

0800e014 <rmw_uxrce_fini_session_memory>:
 800e014:	4601      	mov	r1, r0
 800e016:	4801      	ldr	r0, [pc, #4]	; (800e01c <rmw_uxrce_fini_session_memory+0x8>)
 800e018:	f004 bb56 	b.w	80126c8 <put_memory>
 800e01c:	2000c7d8 	.word	0x2000c7d8

0800e020 <rmw_uxrce_fini_node_memory>:
 800e020:	b538      	push	{r3, r4, r5, lr}
 800e022:	4604      	mov	r4, r0
 800e024:	6800      	ldr	r0, [r0, #0]
 800e026:	b128      	cbz	r0, 800e034 <rmw_uxrce_fini_node_memory+0x14>
 800e028:	4b07      	ldr	r3, [pc, #28]	; (800e048 <rmw_uxrce_fini_node_memory+0x28>)
 800e02a:	6819      	ldr	r1, [r3, #0]
 800e02c:	f7f2 f8d8 	bl	80001e0 <strcmp>
 800e030:	b940      	cbnz	r0, 800e044 <rmw_uxrce_fini_node_memory+0x24>
 800e032:	6020      	str	r0, [r4, #0]
 800e034:	6861      	ldr	r1, [r4, #4]
 800e036:	b129      	cbz	r1, 800e044 <rmw_uxrce_fini_node_memory+0x24>
 800e038:	2500      	movs	r5, #0
 800e03a:	4804      	ldr	r0, [pc, #16]	; (800e04c <rmw_uxrce_fini_node_memory+0x2c>)
 800e03c:	610d      	str	r5, [r1, #16]
 800e03e:	f004 fb43 	bl	80126c8 <put_memory>
 800e042:	6065      	str	r5, [r4, #4]
 800e044:	bd38      	pop	{r3, r4, r5, pc}
 800e046:	bf00      	nop
 800e048:	08017ae8 	.word	0x08017ae8
 800e04c:	2000c604 	.word	0x2000c604

0800e050 <rmw_uxrce_fini_publisher_memory>:
 800e050:	b510      	push	{r4, lr}
 800e052:	4604      	mov	r4, r0
 800e054:	6800      	ldr	r0, [r0, #0]
 800e056:	b128      	cbz	r0, 800e064 <rmw_uxrce_fini_publisher_memory+0x14>
 800e058:	4b06      	ldr	r3, [pc, #24]	; (800e074 <rmw_uxrce_fini_publisher_memory+0x24>)
 800e05a:	6819      	ldr	r1, [r3, #0]
 800e05c:	f7f2 f8c0 	bl	80001e0 <strcmp>
 800e060:	b938      	cbnz	r0, 800e072 <rmw_uxrce_fini_publisher_memory+0x22>
 800e062:	6020      	str	r0, [r4, #0]
 800e064:	6861      	ldr	r1, [r4, #4]
 800e066:	b121      	cbz	r1, 800e072 <rmw_uxrce_fini_publisher_memory+0x22>
 800e068:	4803      	ldr	r0, [pc, #12]	; (800e078 <rmw_uxrce_fini_publisher_memory+0x28>)
 800e06a:	f004 fb2d 	bl	80126c8 <put_memory>
 800e06e:	2300      	movs	r3, #0
 800e070:	6063      	str	r3, [r4, #4]
 800e072:	bd10      	pop	{r4, pc}
 800e074:	08017ae8 	.word	0x08017ae8
 800e078:	20009640 	.word	0x20009640

0800e07c <rmw_uxrce_fini_subscription_memory>:
 800e07c:	b510      	push	{r4, lr}
 800e07e:	4604      	mov	r4, r0
 800e080:	6800      	ldr	r0, [r0, #0]
 800e082:	b128      	cbz	r0, 800e090 <rmw_uxrce_fini_subscription_memory+0x14>
 800e084:	4b06      	ldr	r3, [pc, #24]	; (800e0a0 <rmw_uxrce_fini_subscription_memory+0x24>)
 800e086:	6819      	ldr	r1, [r3, #0]
 800e088:	f7f2 f8aa 	bl	80001e0 <strcmp>
 800e08c:	b938      	cbnz	r0, 800e09e <rmw_uxrce_fini_subscription_memory+0x22>
 800e08e:	6020      	str	r0, [r4, #0]
 800e090:	6861      	ldr	r1, [r4, #4]
 800e092:	b121      	cbz	r1, 800e09e <rmw_uxrce_fini_subscription_memory+0x22>
 800e094:	4803      	ldr	r0, [pc, #12]	; (800e0a4 <rmw_uxrce_fini_subscription_memory+0x28>)
 800e096:	f004 fb17 	bl	80126c8 <put_memory>
 800e09a:	2300      	movs	r3, #0
 800e09c:	6063      	str	r3, [r4, #4]
 800e09e:	bd10      	pop	{r4, pc}
 800e0a0:	08017ae8 	.word	0x08017ae8
 800e0a4:	2000c89c 	.word	0x2000c89c

0800e0a8 <rmw_uxrce_fini_service_memory>:
 800e0a8:	b510      	push	{r4, lr}
 800e0aa:	4604      	mov	r4, r0
 800e0ac:	6800      	ldr	r0, [r0, #0]
 800e0ae:	b128      	cbz	r0, 800e0bc <rmw_uxrce_fini_service_memory+0x14>
 800e0b0:	4b06      	ldr	r3, [pc, #24]	; (800e0cc <rmw_uxrce_fini_service_memory+0x24>)
 800e0b2:	6819      	ldr	r1, [r3, #0]
 800e0b4:	f7f2 f894 	bl	80001e0 <strcmp>
 800e0b8:	b938      	cbnz	r0, 800e0ca <rmw_uxrce_fini_service_memory+0x22>
 800e0ba:	6020      	str	r0, [r4, #0]
 800e0bc:	6861      	ldr	r1, [r4, #4]
 800e0be:	b121      	cbz	r1, 800e0ca <rmw_uxrce_fini_service_memory+0x22>
 800e0c0:	4803      	ldr	r0, [pc, #12]	; (800e0d0 <rmw_uxrce_fini_service_memory+0x28>)
 800e0c2:	f004 fb01 	bl	80126c8 <put_memory>
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	6063      	str	r3, [r4, #4]
 800e0ca:	bd10      	pop	{r4, pc}
 800e0cc:	08017ae8 	.word	0x08017ae8
 800e0d0:	2000c88c 	.word	0x2000c88c

0800e0d4 <rmw_uxrce_fini_client_memory>:
 800e0d4:	b510      	push	{r4, lr}
 800e0d6:	4604      	mov	r4, r0
 800e0d8:	6800      	ldr	r0, [r0, #0]
 800e0da:	b128      	cbz	r0, 800e0e8 <rmw_uxrce_fini_client_memory+0x14>
 800e0dc:	4b06      	ldr	r3, [pc, #24]	; (800e0f8 <rmw_uxrce_fini_client_memory+0x24>)
 800e0de:	6819      	ldr	r1, [r3, #0]
 800e0e0:	f7f2 f87e 	bl	80001e0 <strcmp>
 800e0e4:	b938      	cbnz	r0, 800e0f6 <rmw_uxrce_fini_client_memory+0x22>
 800e0e6:	6020      	str	r0, [r4, #0]
 800e0e8:	6861      	ldr	r1, [r4, #4]
 800e0ea:	b121      	cbz	r1, 800e0f6 <rmw_uxrce_fini_client_memory+0x22>
 800e0ec:	4803      	ldr	r0, [pc, #12]	; (800e0fc <rmw_uxrce_fini_client_memory+0x28>)
 800e0ee:	f004 faeb 	bl	80126c8 <put_memory>
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	6063      	str	r3, [r4, #4]
 800e0f6:	bd10      	pop	{r4, pc}
 800e0f8:	08017ae8 	.word	0x08017ae8
 800e0fc:	20009ec0 	.word	0x20009ec0

0800e100 <rmw_uxrce_fini_topic_memory>:
 800e100:	b510      	push	{r4, lr}
 800e102:	4601      	mov	r1, r0
 800e104:	4604      	mov	r4, r0
 800e106:	4803      	ldr	r0, [pc, #12]	; (800e114 <rmw_uxrce_fini_topic_memory+0x14>)
 800e108:	f004 fade 	bl	80126c8 <put_memory>
 800e10c:	2300      	movs	r3, #0
 800e10e:	61a3      	str	r3, [r4, #24]
 800e110:	bd10      	pop	{r4, pc}
 800e112:	bf00      	nop
 800e114:	2000c7c8 	.word	0x2000c7c8

0800e118 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800e118:	b082      	sub	sp, #8
 800e11a:	b4f0      	push	{r4, r5, r6, r7}
 800e11c:	4923      	ldr	r1, [pc, #140]	; (800e1ac <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 800e11e:	ac04      	add	r4, sp, #16
 800e120:	e884 000c 	stmia.w	r4, {r2, r3}
 800e124:	680d      	ldr	r5, [r1, #0]
 800e126:	9c05      	ldr	r4, [sp, #20]
 800e128:	2d00      	cmp	r5, #0
 800e12a:	d03d      	beq.n	800e1a8 <rmw_uxrce_get_static_input_buffer_for_entity+0x90>
 800e12c:	462b      	mov	r3, r5
 800e12e:	2100      	movs	r1, #0
 800e130:	68da      	ldr	r2, [r3, #12]
 800e132:	689b      	ldr	r3, [r3, #8]
 800e134:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 800e138:	4290      	cmp	r0, r2
 800e13a:	bf08      	it	eq
 800e13c:	3101      	addeq	r1, #1
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d1f6      	bne.n	800e130 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800e142:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800e146:	2b02      	cmp	r3, #2
 800e148:	d026      	beq.n	800e198 <rmw_uxrce_get_static_input_buffer_for_entity+0x80>
 800e14a:	d906      	bls.n	800e15a <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 800e14c:	2b03      	cmp	r3, #3
 800e14e:	d004      	beq.n	800e15a <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 800e150:	2100      	movs	r1, #0
 800e152:	bcf0      	pop	{r4, r5, r6, r7}
 800e154:	4608      	mov	r0, r1
 800e156:	b002      	add	sp, #8
 800e158:	4770      	bx	lr
 800e15a:	b304      	cbz	r4, 800e19e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800e15c:	428c      	cmp	r4, r1
 800e15e:	d81e      	bhi.n	800e19e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800e160:	2d00      	cmp	r5, #0
 800e162:	d0f5      	beq.n	800e150 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800e164:	2100      	movs	r1, #0
 800e166:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800e16a:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 800e16e:	e002      	b.n	800e176 <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 800e170:	68ad      	ldr	r5, [r5, #8]
 800e172:	2d00      	cmp	r5, #0
 800e174:	d0ed      	beq.n	800e152 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800e176:	68eb      	ldr	r3, [r5, #12]
 800e178:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 800e17c:	4290      	cmp	r0, r2
 800e17e:	d1f7      	bne.n	800e170 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800e180:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800e184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e188:	42b2      	cmp	r2, r6
 800e18a:	eb73 0407 	sbcs.w	r4, r3, r7
 800e18e:	daef      	bge.n	800e170 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800e190:	4616      	mov	r6, r2
 800e192:	461f      	mov	r7, r3
 800e194:	4629      	mov	r1, r5
 800e196:	e7eb      	b.n	800e170 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800e198:	b10c      	cbz	r4, 800e19e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800e19a:	428c      	cmp	r4, r1
 800e19c:	d9d8      	bls.n	800e150 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800e19e:	bcf0      	pop	{r4, r5, r6, r7}
 800e1a0:	4802      	ldr	r0, [pc, #8]	; (800e1ac <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 800e1a2:	b002      	add	sp, #8
 800e1a4:	f004 ba80 	b.w	80126a8 <get_memory>
 800e1a8:	4629      	mov	r1, r5
 800e1aa:	e7ca      	b.n	800e142 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800e1ac:	20009630 	.word	0x20009630

0800e1b0 <run_xrce_session>:
 800e1b0:	b510      	push	{r4, lr}
 800e1b2:	788c      	ldrb	r4, [r1, #2]
 800e1b4:	b086      	sub	sp, #24
 800e1b6:	2c01      	cmp	r4, #1
 800e1b8:	f8ad 200e 	strh.w	r2, [sp, #14]
 800e1bc:	d00c      	beq.n	800e1d8 <run_xrce_session+0x28>
 800e1be:	4619      	mov	r1, r3
 800e1c0:	2301      	movs	r3, #1
 800e1c2:	9300      	str	r3, [sp, #0]
 800e1c4:	f10d 020e 	add.w	r2, sp, #14
 800e1c8:	f10d 0317 	add.w	r3, sp, #23
 800e1cc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e1d0:	f001 f856 	bl	800f280 <uxr_run_session_until_all_status>
 800e1d4:	b006      	add	sp, #24
 800e1d6:	bd10      	pop	{r4, pc}
 800e1d8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e1dc:	f000 fca8 	bl	800eb30 <uxr_flash_output_streams>
 800e1e0:	4620      	mov	r0, r4
 800e1e2:	b006      	add	sp, #24
 800e1e4:	bd10      	pop	{r4, pc}
 800e1e6:	bf00      	nop

0800e1e8 <convert_qos_profile>:
 800e1e8:	b430      	push	{r4, r5}
 800e1ea:	7a0d      	ldrb	r5, [r1, #8]
 800e1ec:	780c      	ldrb	r4, [r1, #0]
 800e1ee:	7a4a      	ldrb	r2, [r1, #9]
 800e1f0:	8889      	ldrh	r1, [r1, #4]
 800e1f2:	8081      	strh	r1, [r0, #4]
 800e1f4:	f1a5 0502 	sub.w	r5, r5, #2
 800e1f8:	f1a4 0402 	sub.w	r4, r4, #2
 800e1fc:	2a02      	cmp	r2, #2
 800e1fe:	fab5 f585 	clz	r5, r5
 800e202:	fab4 f484 	clz	r4, r4
 800e206:	ea4f 1555 	mov.w	r5, r5, lsr #5
 800e20a:	ea4f 1454 	mov.w	r4, r4, lsr #5
 800e20e:	bf18      	it	ne
 800e210:	2200      	movne	r2, #0
 800e212:	7045      	strb	r5, [r0, #1]
 800e214:	7084      	strb	r4, [r0, #2]
 800e216:	7002      	strb	r2, [r0, #0]
 800e218:	bc30      	pop	{r4, r5}
 800e21a:	4770      	bx	lr

0800e21c <generate_type_name>:
 800e21c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e21e:	2300      	movs	r3, #0
 800e220:	700b      	strb	r3, [r1, #0]
 800e222:	6803      	ldr	r3, [r0, #0]
 800e224:	b087      	sub	sp, #28
 800e226:	4614      	mov	r4, r2
 800e228:	b1d3      	cbz	r3, 800e260 <generate_type_name+0x44>
 800e22a:	4d0f      	ldr	r5, [pc, #60]	; (800e268 <generate_type_name+0x4c>)
 800e22c:	462f      	mov	r7, r5
 800e22e:	4a0f      	ldr	r2, [pc, #60]	; (800e26c <generate_type_name+0x50>)
 800e230:	4e0f      	ldr	r6, [pc, #60]	; (800e270 <generate_type_name+0x54>)
 800e232:	6840      	ldr	r0, [r0, #4]
 800e234:	9004      	str	r0, [sp, #16]
 800e236:	e9cd 6201 	strd	r6, r2, [sp, #4]
 800e23a:	4608      	mov	r0, r1
 800e23c:	9205      	str	r2, [sp, #20]
 800e23e:	9503      	str	r5, [sp, #12]
 800e240:	4a0c      	ldr	r2, [pc, #48]	; (800e274 <generate_type_name+0x58>)
 800e242:	9700      	str	r7, [sp, #0]
 800e244:	4621      	mov	r1, r4
 800e246:	f007 ffc9 	bl	80161dc <sniprintf>
 800e24a:	2800      	cmp	r0, #0
 800e24c:	db05      	blt.n	800e25a <generate_type_name+0x3e>
 800e24e:	4284      	cmp	r4, r0
 800e250:	bfd4      	ite	le
 800e252:	2000      	movle	r0, #0
 800e254:	2001      	movgt	r0, #1
 800e256:	b007      	add	sp, #28
 800e258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e25a:	2000      	movs	r0, #0
 800e25c:	b007      	add	sp, #28
 800e25e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e260:	4b05      	ldr	r3, [pc, #20]	; (800e278 <generate_type_name+0x5c>)
 800e262:	4d01      	ldr	r5, [pc, #4]	; (800e268 <generate_type_name+0x4c>)
 800e264:	461f      	mov	r7, r3
 800e266:	e7e2      	b.n	800e22e <generate_type_name+0x12>
 800e268:	08017604 	.word	0x08017604
 800e26c:	08017618 	.word	0x08017618
 800e270:	0801761c 	.word	0x0801761c
 800e274:	08017608 	.word	0x08017608
 800e278:	080178c0 	.word	0x080178c0

0800e27c <generate_topic_name>:
 800e27c:	b510      	push	{r4, lr}
 800e27e:	b082      	sub	sp, #8
 800e280:	4b09      	ldr	r3, [pc, #36]	; (800e2a8 <generate_topic_name+0x2c>)
 800e282:	9000      	str	r0, [sp, #0]
 800e284:	4614      	mov	r4, r2
 800e286:	4608      	mov	r0, r1
 800e288:	4611      	mov	r1, r2
 800e28a:	4a08      	ldr	r2, [pc, #32]	; (800e2ac <generate_topic_name+0x30>)
 800e28c:	f007 ffa6 	bl	80161dc <sniprintf>
 800e290:	2800      	cmp	r0, #0
 800e292:	db05      	blt.n	800e2a0 <generate_topic_name+0x24>
 800e294:	4284      	cmp	r4, r0
 800e296:	bfd4      	ite	le
 800e298:	2000      	movle	r0, #0
 800e29a:	2001      	movgt	r0, #1
 800e29c:	b002      	add	sp, #8
 800e29e:	bd10      	pop	{r4, pc}
 800e2a0:	2000      	movs	r0, #0
 800e2a2:	b002      	add	sp, #8
 800e2a4:	bd10      	pop	{r4, pc}
 800e2a6:	bf00      	nop
 800e2a8:	08017628 	.word	0x08017628
 800e2ac:	08017620 	.word	0x08017620

0800e2b0 <is_uxrce_rmw_identifier_valid>:
 800e2b0:	b510      	push	{r4, lr}
 800e2b2:	4604      	mov	r4, r0
 800e2b4:	b140      	cbz	r0, 800e2c8 <is_uxrce_rmw_identifier_valid+0x18>
 800e2b6:	f004 fa1b 	bl	80126f0 <rmw_get_implementation_identifier>
 800e2ba:	4601      	mov	r1, r0
 800e2bc:	4620      	mov	r0, r4
 800e2be:	f7f1 ff8f 	bl	80001e0 <strcmp>
 800e2c2:	fab0 f080 	clz	r0, r0
 800e2c6:	0940      	lsrs	r0, r0, #5
 800e2c8:	bd10      	pop	{r4, pc}
 800e2ca:	bf00      	nop

0800e2cc <get_message_typesupport_handle>:
 800e2cc:	6883      	ldr	r3, [r0, #8]
 800e2ce:	4718      	bx	r3

0800e2d0 <get_message_typesupport_handle_function>:
 800e2d0:	b510      	push	{r4, lr}
 800e2d2:	4604      	mov	r4, r0
 800e2d4:	6800      	ldr	r0, [r0, #0]
 800e2d6:	f7f1 ff83 	bl	80001e0 <strcmp>
 800e2da:	2800      	cmp	r0, #0
 800e2dc:	bf0c      	ite	eq
 800e2de:	4620      	moveq	r0, r4
 800e2e0:	2000      	movne	r0, #0
 800e2e2:	bd10      	pop	{r4, pc}

0800e2e4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 800e2e4:	f000 b862 	b.w	800e3ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String>

0800e2e8 <_String__max_serialized_size>:
 800e2e8:	2000      	movs	r0, #0
 800e2ea:	4770      	bx	lr

0800e2ec <_String__cdr_serialize>:
 800e2ec:	b1c0      	cbz	r0, 800e320 <_String__cdr_serialize+0x34>
 800e2ee:	b570      	push	{r4, r5, r6, lr}
 800e2f0:	6806      	ldr	r6, [r0, #0]
 800e2f2:	460d      	mov	r5, r1
 800e2f4:	4604      	mov	r4, r0
 800e2f6:	b156      	cbz	r6, 800e30e <_String__cdr_serialize+0x22>
 800e2f8:	4630      	mov	r0, r6
 800e2fa:	f7f1 ff7b 	bl	80001f4 <strlen>
 800e2fe:	4631      	mov	r1, r6
 800e300:	6060      	str	r0, [r4, #4]
 800e302:	1c42      	adds	r2, r0, #1
 800e304:	4628      	mov	r0, r5
 800e306:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e30a:	f000 b915 	b.w	800e538 <ucdr_serialize_sequence_char>
 800e30e:	4630      	mov	r0, r6
 800e310:	6060      	str	r0, [r4, #4]
 800e312:	4632      	mov	r2, r6
 800e314:	4631      	mov	r1, r6
 800e316:	4628      	mov	r0, r5
 800e318:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e31c:	f000 b90c 	b.w	800e538 <ucdr_serialize_sequence_char>
 800e320:	4770      	bx	lr
 800e322:	bf00      	nop

0800e324 <get_serialized_size_std_msgs__msg__String>:
 800e324:	b510      	push	{r4, lr}
 800e326:	4604      	mov	r4, r0
 800e328:	b130      	cbz	r0, 800e338 <get_serialized_size_std_msgs__msg__String+0x14>
 800e32a:	4608      	mov	r0, r1
 800e32c:	2104      	movs	r1, #4
 800e32e:	f000 f897 	bl	800e460 <ucdr_alignment>
 800e332:	6863      	ldr	r3, [r4, #4]
 800e334:	3305      	adds	r3, #5
 800e336:	4418      	add	r0, r3
 800e338:	bd10      	pop	{r4, pc}
 800e33a:	bf00      	nop

0800e33c <_String__cdr_deserialize>:
 800e33c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e33e:	460c      	mov	r4, r1
 800e340:	b083      	sub	sp, #12
 800e342:	b1a1      	cbz	r1, 800e36e <_String__cdr_deserialize+0x32>
 800e344:	688f      	ldr	r7, [r1, #8]
 800e346:	6809      	ldr	r1, [r1, #0]
 800e348:	ab01      	add	r3, sp, #4
 800e34a:	463a      	mov	r2, r7
 800e34c:	4606      	mov	r6, r0
 800e34e:	f000 f905 	bl	800e55c <ucdr_deserialize_sequence_char>
 800e352:	9b01      	ldr	r3, [sp, #4]
 800e354:	4605      	mov	r5, r0
 800e356:	b920      	cbnz	r0, 800e362 <_String__cdr_deserialize+0x26>
 800e358:	429f      	cmp	r7, r3
 800e35a:	d30c      	bcc.n	800e376 <_String__cdr_deserialize+0x3a>
 800e35c:	4628      	mov	r0, r5
 800e35e:	b003      	add	sp, #12
 800e360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e362:	b103      	cbz	r3, 800e366 <_String__cdr_deserialize+0x2a>
 800e364:	3b01      	subs	r3, #1
 800e366:	4628      	mov	r0, r5
 800e368:	6063      	str	r3, [r4, #4]
 800e36a:	b003      	add	sp, #12
 800e36c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e36e:	460d      	mov	r5, r1
 800e370:	4628      	mov	r0, r5
 800e372:	b003      	add	sp, #12
 800e374:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e376:	2101      	movs	r1, #1
 800e378:	75b0      	strb	r0, [r6, #22]
 800e37a:	7571      	strb	r1, [r6, #21]
 800e37c:	6060      	str	r0, [r4, #4]
 800e37e:	4630      	mov	r0, r6
 800e380:	f000 f884 	bl	800e48c <ucdr_align_to>
 800e384:	4630      	mov	r0, r6
 800e386:	9901      	ldr	r1, [sp, #4]
 800e388:	f000 f8b6 	bl	800e4f8 <ucdr_advance_buffer>
 800e38c:	4628      	mov	r0, r5
 800e38e:	b003      	add	sp, #12
 800e390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e392:	bf00      	nop

0800e394 <_String__get_serialized_size>:
 800e394:	b510      	push	{r4, lr}
 800e396:	4604      	mov	r4, r0
 800e398:	b130      	cbz	r0, 800e3a8 <_String__get_serialized_size+0x14>
 800e39a:	2104      	movs	r1, #4
 800e39c:	2000      	movs	r0, #0
 800e39e:	f000 f85f 	bl	800e460 <ucdr_alignment>
 800e3a2:	6863      	ldr	r3, [r4, #4]
 800e3a4:	3305      	adds	r3, #5
 800e3a6:	4418      	add	r0, r3
 800e3a8:	bd10      	pop	{r4, pc}
 800e3aa:	bf00      	nop

0800e3ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String>:
 800e3ac:	4800      	ldr	r0, [pc, #0]	; (800e3b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String+0x4>)
 800e3ae:	4770      	bx	lr
 800e3b0:	2000003c 	.word	0x2000003c

0800e3b4 <ucdr_check_buffer_available_for>:
 800e3b4:	7d83      	ldrb	r3, [r0, #22]
 800e3b6:	b93b      	cbnz	r3, 800e3c8 <ucdr_check_buffer_available_for+0x14>
 800e3b8:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800e3bc:	4419      	add	r1, r3
 800e3be:	4288      	cmp	r0, r1
 800e3c0:	bf34      	ite	cc
 800e3c2:	2000      	movcc	r0, #0
 800e3c4:	2001      	movcs	r0, #1
 800e3c6:	4770      	bx	lr
 800e3c8:	2000      	movs	r0, #0
 800e3ca:	4770      	bx	lr

0800e3cc <ucdr_check_final_buffer_behavior>:
 800e3cc:	7d83      	ldrb	r3, [r0, #22]
 800e3ce:	b943      	cbnz	r3, 800e3e2 <ucdr_check_final_buffer_behavior+0x16>
 800e3d0:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800e3d4:	4291      	cmp	r1, r2
 800e3d6:	b510      	push	{r4, lr}
 800e3d8:	4604      	mov	r4, r0
 800e3da:	d205      	bcs.n	800e3e8 <ucdr_check_final_buffer_behavior+0x1c>
 800e3dc:	2301      	movs	r3, #1
 800e3de:	4618      	mov	r0, r3
 800e3e0:	bd10      	pop	{r4, pc}
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	4770      	bx	lr
 800e3e8:	6982      	ldr	r2, [r0, #24]
 800e3ea:	b13a      	cbz	r2, 800e3fc <ucdr_check_final_buffer_behavior+0x30>
 800e3ec:	69c1      	ldr	r1, [r0, #28]
 800e3ee:	4790      	blx	r2
 800e3f0:	f080 0301 	eor.w	r3, r0, #1
 800e3f4:	b2db      	uxtb	r3, r3
 800e3f6:	75a0      	strb	r0, [r4, #22]
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	bd10      	pop	{r4, pc}
 800e3fc:	2001      	movs	r0, #1
 800e3fe:	75a0      	strb	r0, [r4, #22]
 800e400:	e7fa      	b.n	800e3f8 <ucdr_check_final_buffer_behavior+0x2c>
 800e402:	bf00      	nop

0800e404 <ucdr_set_on_full_buffer_callback>:
 800e404:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800e408:	4770      	bx	lr
 800e40a:	bf00      	nop

0800e40c <ucdr_init_buffer_origin_offset_endian>:
 800e40c:	b430      	push	{r4, r5}
 800e40e:	9c02      	ldr	r4, [sp, #8]
 800e410:	f89d 500c 	ldrb.w	r5, [sp, #12]
 800e414:	6001      	str	r1, [r0, #0]
 800e416:	440a      	add	r2, r1
 800e418:	60c3      	str	r3, [r0, #12]
 800e41a:	4421      	add	r1, r4
 800e41c:	441c      	add	r4, r3
 800e41e:	2300      	movs	r3, #0
 800e420:	6104      	str	r4, [r0, #16]
 800e422:	7505      	strb	r5, [r0, #20]
 800e424:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800e428:	bc30      	pop	{r4, r5}
 800e42a:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800e42e:	7543      	strb	r3, [r0, #21]
 800e430:	7583      	strb	r3, [r0, #22]
 800e432:	4770      	bx	lr

0800e434 <ucdr_init_buffer_origin_offset>:
 800e434:	b510      	push	{r4, lr}
 800e436:	b082      	sub	sp, #8
 800e438:	9c04      	ldr	r4, [sp, #16]
 800e43a:	9400      	str	r4, [sp, #0]
 800e43c:	2401      	movs	r4, #1
 800e43e:	9401      	str	r4, [sp, #4]
 800e440:	f7ff ffe4 	bl	800e40c <ucdr_init_buffer_origin_offset_endian>
 800e444:	b002      	add	sp, #8
 800e446:	bd10      	pop	{r4, pc}

0800e448 <ucdr_init_buffer_origin>:
 800e448:	b510      	push	{r4, lr}
 800e44a:	b082      	sub	sp, #8
 800e44c:	2400      	movs	r4, #0
 800e44e:	9400      	str	r4, [sp, #0]
 800e450:	f7ff fff0 	bl	800e434 <ucdr_init_buffer_origin_offset>
 800e454:	b002      	add	sp, #8
 800e456:	bd10      	pop	{r4, pc}

0800e458 <ucdr_init_buffer>:
 800e458:	2300      	movs	r3, #0
 800e45a:	f7ff bff5 	b.w	800e448 <ucdr_init_buffer_origin>
 800e45e:	bf00      	nop

0800e460 <ucdr_alignment>:
 800e460:	fbb0 f3f1 	udiv	r3, r0, r1
 800e464:	fb03 0011 	mls	r0, r3, r1, r0
 800e468:	1a08      	subs	r0, r1, r0
 800e46a:	3901      	subs	r1, #1
 800e46c:	4008      	ands	r0, r1
 800e46e:	4770      	bx	lr

0800e470 <ucdr_buffer_alignment>:
 800e470:	7d43      	ldrb	r3, [r0, #21]
 800e472:	428b      	cmp	r3, r1
 800e474:	d208      	bcs.n	800e488 <ucdr_buffer_alignment+0x18>
 800e476:	6903      	ldr	r3, [r0, #16]
 800e478:	fbb3 f0f1 	udiv	r0, r3, r1
 800e47c:	fb01 3010 	mls	r0, r1, r0, r3
 800e480:	1a08      	subs	r0, r1, r0
 800e482:	3901      	subs	r1, #1
 800e484:	4008      	ands	r0, r1
 800e486:	4770      	bx	lr
 800e488:	2000      	movs	r0, #0
 800e48a:	4770      	bx	lr

0800e48c <ucdr_align_to>:
 800e48c:	b570      	push	{r4, r5, r6, lr}
 800e48e:	4604      	mov	r4, r0
 800e490:	460e      	mov	r6, r1
 800e492:	f7ff ffed 	bl	800e470 <ucdr_buffer_alignment>
 800e496:	68a5      	ldr	r5, [r4, #8]
 800e498:	6863      	ldr	r3, [r4, #4]
 800e49a:	6922      	ldr	r2, [r4, #16]
 800e49c:	7566      	strb	r6, [r4, #21]
 800e49e:	4405      	add	r5, r0
 800e4a0:	42ab      	cmp	r3, r5
 800e4a2:	4410      	add	r0, r2
 800e4a4:	bf28      	it	cs
 800e4a6:	462b      	movcs	r3, r5
 800e4a8:	6120      	str	r0, [r4, #16]
 800e4aa:	60a3      	str	r3, [r4, #8]
 800e4ac:	bd70      	pop	{r4, r5, r6, pc}
 800e4ae:	bf00      	nop

0800e4b0 <ucdr_buffer_length>:
 800e4b0:	6882      	ldr	r2, [r0, #8]
 800e4b2:	6800      	ldr	r0, [r0, #0]
 800e4b4:	1a10      	subs	r0, r2, r0
 800e4b6:	4770      	bx	lr

0800e4b8 <ucdr_buffer_remaining>:
 800e4b8:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800e4bc:	1a10      	subs	r0, r2, r0
 800e4be:	4770      	bx	lr

0800e4c0 <ucdr_check_final_buffer_behavior_array>:
 800e4c0:	b538      	push	{r3, r4, r5, lr}
 800e4c2:	7d83      	ldrb	r3, [r0, #22]
 800e4c4:	b963      	cbnz	r3, 800e4e0 <ucdr_check_final_buffer_behavior_array+0x20>
 800e4c6:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800e4ca:	429a      	cmp	r2, r3
 800e4cc:	4604      	mov	r4, r0
 800e4ce:	460d      	mov	r5, r1
 800e4d0:	d308      	bcc.n	800e4e4 <ucdr_check_final_buffer_behavior_array+0x24>
 800e4d2:	b139      	cbz	r1, 800e4e4 <ucdr_check_final_buffer_behavior_array+0x24>
 800e4d4:	6983      	ldr	r3, [r0, #24]
 800e4d6:	b163      	cbz	r3, 800e4f2 <ucdr_check_final_buffer_behavior_array+0x32>
 800e4d8:	69c1      	ldr	r1, [r0, #28]
 800e4da:	4798      	blx	r3
 800e4dc:	75a0      	strb	r0, [r4, #22]
 800e4de:	b108      	cbz	r0, 800e4e4 <ucdr_check_final_buffer_behavior_array+0x24>
 800e4e0:	2000      	movs	r0, #0
 800e4e2:	bd38      	pop	{r3, r4, r5, pc}
 800e4e4:	4620      	mov	r0, r4
 800e4e6:	f7ff ffe7 	bl	800e4b8 <ucdr_buffer_remaining>
 800e4ea:	42a8      	cmp	r0, r5
 800e4ec:	bf28      	it	cs
 800e4ee:	4628      	movcs	r0, r5
 800e4f0:	bd38      	pop	{r3, r4, r5, pc}
 800e4f2:	2301      	movs	r3, #1
 800e4f4:	7583      	strb	r3, [r0, #22]
 800e4f6:	e7f3      	b.n	800e4e0 <ucdr_check_final_buffer_behavior_array+0x20>

0800e4f8 <ucdr_advance_buffer>:
 800e4f8:	b538      	push	{r3, r4, r5, lr}
 800e4fa:	4604      	mov	r4, r0
 800e4fc:	460d      	mov	r5, r1
 800e4fe:	f7ff ff59 	bl	800e3b4 <ucdr_check_buffer_available_for>
 800e502:	b178      	cbz	r0, 800e524 <ucdr_advance_buffer+0x2c>
 800e504:	68a3      	ldr	r3, [r4, #8]
 800e506:	6921      	ldr	r1, [r4, #16]
 800e508:	442b      	add	r3, r5
 800e50a:	60a3      	str	r3, [r4, #8]
 800e50c:	2301      	movs	r3, #1
 800e50e:	4429      	add	r1, r5
 800e510:	7563      	strb	r3, [r4, #21]
 800e512:	6121      	str	r1, [r4, #16]
 800e514:	bd38      	pop	{r3, r4, r5, pc}
 800e516:	68a2      	ldr	r2, [r4, #8]
 800e518:	6923      	ldr	r3, [r4, #16]
 800e51a:	4402      	add	r2, r0
 800e51c:	4403      	add	r3, r0
 800e51e:	1a2d      	subs	r5, r5, r0
 800e520:	60a2      	str	r2, [r4, #8]
 800e522:	6123      	str	r3, [r4, #16]
 800e524:	2201      	movs	r2, #1
 800e526:	4629      	mov	r1, r5
 800e528:	4620      	mov	r0, r4
 800e52a:	f7ff ffc9 	bl	800e4c0 <ucdr_check_final_buffer_behavior_array>
 800e52e:	2800      	cmp	r0, #0
 800e530:	d1f1      	bne.n	800e516 <ucdr_advance_buffer+0x1e>
 800e532:	2301      	movs	r3, #1
 800e534:	7563      	strb	r3, [r4, #21]
 800e536:	bd38      	pop	{r3, r4, r5, pc}

0800e538 <ucdr_serialize_sequence_char>:
 800e538:	b570      	push	{r4, r5, r6, lr}
 800e53a:	460e      	mov	r6, r1
 800e53c:	4615      	mov	r5, r2
 800e53e:	7d01      	ldrb	r1, [r0, #20]
 800e540:	4604      	mov	r4, r0
 800e542:	f005 f987 	bl	8013854 <ucdr_serialize_endian_uint32_t>
 800e546:	b90d      	cbnz	r5, 800e54c <ucdr_serialize_sequence_char+0x14>
 800e548:	2001      	movs	r0, #1
 800e54a:	bd70      	pop	{r4, r5, r6, pc}
 800e54c:	7d21      	ldrb	r1, [r4, #20]
 800e54e:	462b      	mov	r3, r5
 800e550:	4632      	mov	r2, r6
 800e552:	4620      	mov	r0, r4
 800e554:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e558:	f004 bd72 	b.w	8013040 <ucdr_serialize_endian_array_char>

0800e55c <ucdr_deserialize_sequence_char>:
 800e55c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e560:	461d      	mov	r5, r3
 800e562:	4616      	mov	r6, r2
 800e564:	460f      	mov	r7, r1
 800e566:	461a      	mov	r2, r3
 800e568:	7d01      	ldrb	r1, [r0, #20]
 800e56a:	4604      	mov	r4, r0
 800e56c:	f005 fa9a 	bl	8013aa4 <ucdr_deserialize_endian_uint32_t>
 800e570:	682b      	ldr	r3, [r5, #0]
 800e572:	429e      	cmp	r6, r3
 800e574:	bf3c      	itt	cc
 800e576:	2201      	movcc	r2, #1
 800e578:	75a2      	strbcc	r2, [r4, #22]
 800e57a:	b913      	cbnz	r3, 800e582 <ucdr_deserialize_sequence_char+0x26>
 800e57c:	2001      	movs	r0, #1
 800e57e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e582:	7d21      	ldrb	r1, [r4, #20]
 800e584:	463a      	mov	r2, r7
 800e586:	4620      	mov	r0, r4
 800e588:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e58c:	f004 bd8a 	b.w	80130a4 <ucdr_deserialize_endian_array_char>

0800e590 <ucdr_serialize_sequence_uint8_t>:
 800e590:	b570      	push	{r4, r5, r6, lr}
 800e592:	460e      	mov	r6, r1
 800e594:	4615      	mov	r5, r2
 800e596:	7d01      	ldrb	r1, [r0, #20]
 800e598:	4604      	mov	r4, r0
 800e59a:	f005 f95b 	bl	8013854 <ucdr_serialize_endian_uint32_t>
 800e59e:	b90d      	cbnz	r5, 800e5a4 <ucdr_serialize_sequence_uint8_t+0x14>
 800e5a0:	2001      	movs	r0, #1
 800e5a2:	bd70      	pop	{r4, r5, r6, pc}
 800e5a4:	7d21      	ldrb	r1, [r4, #20]
 800e5a6:	462b      	mov	r3, r5
 800e5a8:	4632      	mov	r2, r6
 800e5aa:	4620      	mov	r0, r4
 800e5ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e5b0:	f004 bddc 	b.w	801316c <ucdr_serialize_endian_array_uint8_t>

0800e5b4 <ucdr_deserialize_sequence_uint8_t>:
 800e5b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5b8:	461d      	mov	r5, r3
 800e5ba:	4616      	mov	r6, r2
 800e5bc:	460f      	mov	r7, r1
 800e5be:	461a      	mov	r2, r3
 800e5c0:	7d01      	ldrb	r1, [r0, #20]
 800e5c2:	4604      	mov	r4, r0
 800e5c4:	f005 fa6e 	bl	8013aa4 <ucdr_deserialize_endian_uint32_t>
 800e5c8:	682b      	ldr	r3, [r5, #0]
 800e5ca:	429e      	cmp	r6, r3
 800e5cc:	bf3c      	itt	cc
 800e5ce:	2201      	movcc	r2, #1
 800e5d0:	75a2      	strbcc	r2, [r4, #22]
 800e5d2:	b913      	cbnz	r3, 800e5da <ucdr_deserialize_sequence_uint8_t+0x26>
 800e5d4:	2001      	movs	r0, #1
 800e5d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5da:	7d21      	ldrb	r1, [r4, #20]
 800e5dc:	463a      	mov	r2, r7
 800e5de:	4620      	mov	r0, r4
 800e5e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e5e4:	f004 be26 	b.w	8013234 <ucdr_deserialize_endian_array_uint8_t>

0800e5e8 <uxr_buffer_delete_entity>:
 800e5e8:	b530      	push	{r4, r5, lr}
 800e5ea:	b08f      	sub	sp, #60	; 0x3c
 800e5ec:	2403      	movs	r4, #3
 800e5ee:	2500      	movs	r5, #0
 800e5f0:	e9cd 4500 	strd	r4, r5, [sp]
 800e5f4:	9202      	str	r2, [sp, #8]
 800e5f6:	ab06      	add	r3, sp, #24
 800e5f8:	2204      	movs	r2, #4
 800e5fa:	9103      	str	r1, [sp, #12]
 800e5fc:	4604      	mov	r4, r0
 800e5fe:	f001 f87b 	bl	800f6f8 <uxr_prepare_stream_to_write_submessage>
 800e602:	b918      	cbnz	r0, 800e60c <uxr_buffer_delete_entity+0x24>
 800e604:	4604      	mov	r4, r0
 800e606:	4620      	mov	r0, r4
 800e608:	b00f      	add	sp, #60	; 0x3c
 800e60a:	bd30      	pop	{r4, r5, pc}
 800e60c:	9902      	ldr	r1, [sp, #8]
 800e60e:	aa05      	add	r2, sp, #20
 800e610:	4620      	mov	r0, r4
 800e612:	f001 f9ab 	bl	800f96c <uxr_init_base_object_request>
 800e616:	a905      	add	r1, sp, #20
 800e618:	4604      	mov	r4, r0
 800e61a:	a806      	add	r0, sp, #24
 800e61c:	f002 fafa 	bl	8010c14 <uxr_serialize_DELETE_Payload>
 800e620:	4620      	mov	r0, r4
 800e622:	b00f      	add	sp, #60	; 0x3c
 800e624:	bd30      	pop	{r4, r5, pc}
 800e626:	bf00      	nop

0800e628 <uxr_common_create_entity>:
 800e628:	b530      	push	{r4, r5, lr}
 800e62a:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800e62e:	b08d      	sub	sp, #52	; 0x34
 800e630:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800e634:	2d01      	cmp	r5, #1
 800e636:	bf0c      	ite	eq
 800e638:	f003 0201 	andeq.w	r2, r3, #1
 800e63c:	2200      	movne	r2, #0
 800e63e:	330e      	adds	r3, #14
 800e640:	4604      	mov	r4, r0
 800e642:	441a      	add	r2, r3
 800e644:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 800e648:	9001      	str	r0, [sp, #4]
 800e64a:	2101      	movs	r1, #1
 800e64c:	9100      	str	r1, [sp, #0]
 800e64e:	b292      	uxth	r2, r2
 800e650:	9903      	ldr	r1, [sp, #12]
 800e652:	ab04      	add	r3, sp, #16
 800e654:	4620      	mov	r0, r4
 800e656:	f001 f84f 	bl	800f6f8 <uxr_prepare_stream_to_write_submessage>
 800e65a:	b918      	cbnz	r0, 800e664 <uxr_common_create_entity+0x3c>
 800e65c:	4604      	mov	r4, r0
 800e65e:	4620      	mov	r0, r4
 800e660:	b00d      	add	sp, #52	; 0x34
 800e662:	bd30      	pop	{r4, r5, pc}
 800e664:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e666:	9902      	ldr	r1, [sp, #8]
 800e668:	4620      	mov	r0, r4
 800e66a:	f001 f97f 	bl	800f96c <uxr_init_base_object_request>
 800e66e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e670:	4604      	mov	r4, r0
 800e672:	a804      	add	r0, sp, #16
 800e674:	f002 fa22 	bl	8010abc <uxr_serialize_CREATE_Payload>
 800e678:	4620      	mov	r0, r4
 800e67a:	b00d      	add	sp, #52	; 0x34
 800e67c:	bd30      	pop	{r4, r5, pc}
 800e67e:	bf00      	nop

0800e680 <uxr_buffer_create_participant_bin>:
 800e680:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e682:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 800e686:	ac11      	add	r4, sp, #68	; 0x44
 800e688:	9103      	str	r1, [sp, #12]
 800e68a:	9e9c      	ldr	r6, [sp, #624]	; 0x270
 800e68c:	f8a4 3210 	strh.w	r3, [r4, #528]	; 0x210
 800e690:	2103      	movs	r1, #3
 800e692:	7221      	strb	r1, [r4, #8]
 800e694:	2301      	movs	r3, #1
 800e696:	2100      	movs	r1, #0
 800e698:	7123      	strb	r3, [r4, #4]
 800e69a:	f89d 7274 	ldrb.w	r7, [sp, #628]	; 0x274
 800e69e:	9202      	str	r2, [sp, #8]
 800e6a0:	4605      	mov	r5, r0
 800e6a2:	f88d 1014 	strb.w	r1, [sp, #20]
 800e6a6:	b1ce      	cbz	r6, 800e6dc <uxr_buffer_create_participant_bin+0x5c>
 800e6a8:	f88d 301c 	strb.w	r3, [sp, #28]
 800e6ac:	9608      	str	r6, [sp, #32]
 800e6ae:	a809      	add	r0, sp, #36	; 0x24
 800e6b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e6b4:	a915      	add	r1, sp, #84	; 0x54
 800e6b6:	f7ff fecf 	bl	800e458 <ucdr_init_buffer>
 800e6ba:	a905      	add	r1, sp, #20
 800e6bc:	a809      	add	r0, sp, #36	; 0x24
 800e6be:	f001 feb1 	bl	8010424 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800e6c2:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e6c4:	9401      	str	r4, [sp, #4]
 800e6c6:	b283      	uxth	r3, r0
 800e6c8:	9700      	str	r7, [sp, #0]
 800e6ca:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e6ce:	60e0      	str	r0, [r4, #12]
 800e6d0:	4628      	mov	r0, r5
 800e6d2:	f7ff ffa9 	bl	800e628 <uxr_common_create_entity>
 800e6d6:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
 800e6da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e6dc:	f88d 601c 	strb.w	r6, [sp, #28]
 800e6e0:	e7e5      	b.n	800e6ae <uxr_buffer_create_participant_bin+0x2e>
 800e6e2:	bf00      	nop

0800e6e4 <uxr_buffer_create_topic_bin>:
 800e6e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6e6:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800e6ea:	ac13      	add	r4, sp, #76	; 0x4c
 800e6ec:	4605      	mov	r5, r0
 800e6ee:	9105      	str	r1, [sp, #20]
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	a997      	add	r1, sp, #604	; 0x25c
 800e6f4:	2602      	movs	r6, #2
 800e6f6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800e6fa:	f89d 7280 	ldrb.w	r7, [sp, #640]	; 0x280
 800e6fe:	f88d 6050 	strb.w	r6, [sp, #80]	; 0x50
 800e702:	9e9f      	ldr	r6, [sp, #636]	; 0x27c
 800e704:	f000 f8ea 	bl	800e8dc <uxr_object_id_to_raw>
 800e708:	9a9e      	ldr	r2, [sp, #632]	; 0x278
 800e70a:	9206      	str	r2, [sp, #24]
 800e70c:	2303      	movs	r3, #3
 800e70e:	2101      	movs	r1, #1
 800e710:	7223      	strb	r3, [r4, #8]
 800e712:	a80b      	add	r0, sp, #44	; 0x2c
 800e714:	2300      	movs	r3, #0
 800e716:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e71a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 800e71e:	a917      	add	r1, sp, #92	; 0x5c
 800e720:	f88d 301c 	strb.w	r3, [sp, #28]
 800e724:	960a      	str	r6, [sp, #40]	; 0x28
 800e726:	f7ff fe97 	bl	800e458 <ucdr_init_buffer>
 800e72a:	a906      	add	r1, sp, #24
 800e72c:	a80b      	add	r0, sp, #44	; 0x2c
 800e72e:	f001 fe9b 	bl	8010468 <uxr_serialize_OBJK_Topic_Binary>
 800e732:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800e734:	9401      	str	r4, [sp, #4]
 800e736:	9700      	str	r7, [sp, #0]
 800e738:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800e73c:	4628      	mov	r0, r5
 800e73e:	b2b3      	uxth	r3, r6
 800e740:	60e6      	str	r6, [r4, #12]
 800e742:	f7ff ff71 	bl	800e628 <uxr_common_create_entity>
 800e746:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800e74a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e74c <uxr_buffer_create_publisher_bin>:
 800e74c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e74e:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 800e752:	ac0e      	add	r4, sp, #56	; 0x38
 800e754:	4605      	mov	r5, r0
 800e756:	9105      	str	r1, [sp, #20]
 800e758:	4618      	mov	r0, r3
 800e75a:	2603      	movs	r6, #3
 800e75c:	a992      	add	r1, sp, #584	; 0x248
 800e75e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800e762:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 800e766:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 800e76a:	f000 f8b7 	bl	800e8dc <uxr_object_id_to_raw>
 800e76e:	2300      	movs	r3, #0
 800e770:	a806      	add	r0, sp, #24
 800e772:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e776:	a912      	add	r1, sp, #72	; 0x48
 800e778:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800e77c:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800e780:	7226      	strb	r6, [r4, #8]
 800e782:	f7ff fe69 	bl	800e458 <ucdr_init_buffer>
 800e786:	a993      	add	r1, sp, #588	; 0x24c
 800e788:	a806      	add	r0, sp, #24
 800e78a:	f001 ff21 	bl	80105d0 <uxr_serialize_OBJK_Publisher_Binary>
 800e78e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800e790:	9700      	str	r7, [sp, #0]
 800e792:	9401      	str	r4, [sp, #4]
 800e794:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800e798:	4628      	mov	r0, r5
 800e79a:	b2b3      	uxth	r3, r6
 800e79c:	60e6      	str	r6, [r4, #12]
 800e79e:	f7ff ff43 	bl	800e628 <uxr_common_create_entity>
 800e7a2:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 800e7a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e7a8 <uxr_buffer_create_datawriter_bin>:
 800e7a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7ac:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800e7b0:	ac1d      	add	r4, sp, #116	; 0x74
 800e7b2:	2505      	movs	r5, #5
 800e7b4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800e7b8:	9105      	str	r1, [sp, #20]
 800e7ba:	4606      	mov	r6, r0
 800e7bc:	a9a1      	add	r1, sp, #644	; 0x284
 800e7be:	4618      	mov	r0, r3
 800e7c0:	7125      	strb	r5, [r4, #4]
 800e7c2:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 800e7c6:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 800e7ca:	2703      	movs	r7, #3
 800e7cc:	f000 f886 	bl	800e8dc <uxr_object_id_to_raw>
 800e7d0:	a90e      	add	r1, sp, #56	; 0x38
 800e7d2:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 800e7d4:	7227      	strb	r7, [r4, #8]
 800e7d6:	f000 f881 	bl	800e8dc <uxr_object_id_to_raw>
 800e7da:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 800e7de:	f89d 12a5 	ldrb.w	r1, [sp, #677]	; 0x2a5
 800e7e2:	3d00      	subs	r5, #0
 800e7e4:	f04f 0300 	mov.w	r3, #0
 800e7e8:	bf18      	it	ne
 800e7ea:	2501      	movne	r5, #1
 800e7ec:	2201      	movs	r2, #1
 800e7ee:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 800e7f2:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 800e7f6:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800e7fa:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800e7fe:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800e802:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800e806:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800e80a:	bb89      	cbnz	r1, 800e870 <uxr_buffer_create_datawriter_bin+0xc8>
 800e80c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800e810:	f04f 0e23 	mov.w	lr, #35	; 0x23
 800e814:	f04f 0c13 	mov.w	ip, #19
 800e818:	250b      	movs	r5, #11
 800e81a:	2221      	movs	r2, #33	; 0x21
 800e81c:	2111      	movs	r1, #17
 800e81e:	2009      	movs	r0, #9
 800e820:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 800e824:	b923      	cbnz	r3, 800e830 <uxr_buffer_create_datawriter_bin+0x88>
 800e826:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 800e82a:	4672      	mov	r2, lr
 800e82c:	4661      	mov	r1, ip
 800e82e:	4628      	mov	r0, r5
 800e830:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 800e834:	2b01      	cmp	r3, #1
 800e836:	d025      	beq.n	800e884 <uxr_buffer_create_datawriter_bin+0xdc>
 800e838:	2b03      	cmp	r3, #3
 800e83a:	d029      	beq.n	800e890 <uxr_buffer_create_datawriter_bin+0xe8>
 800e83c:	b32b      	cbz	r3, 800e88a <uxr_buffer_create_datawriter_bin+0xe2>
 800e83e:	a806      	add	r0, sp, #24
 800e840:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e844:	a921      	add	r1, sp, #132	; 0x84
 800e846:	f7ff fe07 	bl	800e458 <ucdr_init_buffer>
 800e84a:	a90e      	add	r1, sp, #56	; 0x38
 800e84c:	a806      	add	r0, sp, #24
 800e84e:	f001 ff35 	bl	80106bc <uxr_serialize_OBJK_DataWriter_Binary>
 800e852:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e854:	9401      	str	r4, [sp, #4]
 800e856:	b283      	uxth	r3, r0
 800e858:	f8cd 8000 	str.w	r8, [sp]
 800e85c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800e860:	60e0      	str	r0, [r4, #12]
 800e862:	4630      	mov	r0, r6
 800e864:	f7ff fee0 	bl	800e628 <uxr_common_create_entity>
 800e868:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800e86c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e870:	f04f 0e22 	mov.w	lr, #34	; 0x22
 800e874:	f04f 0c12 	mov.w	ip, #18
 800e878:	250a      	movs	r5, #10
 800e87a:	2220      	movs	r2, #32
 800e87c:	2110      	movs	r1, #16
 800e87e:	2008      	movs	r0, #8
 800e880:	2702      	movs	r7, #2
 800e882:	e7cd      	b.n	800e820 <uxr_buffer_create_datawriter_bin+0x78>
 800e884:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800e888:	e7d9      	b.n	800e83e <uxr_buffer_create_datawriter_bin+0x96>
 800e88a:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800e88e:	e7d6      	b.n	800e83e <uxr_buffer_create_datawriter_bin+0x96>
 800e890:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800e894:	e7d3      	b.n	800e83e <uxr_buffer_create_datawriter_bin+0x96>
 800e896:	bf00      	nop

0800e898 <uxr_object_id>:
 800e898:	b082      	sub	sp, #8
 800e89a:	2300      	movs	r3, #0
 800e89c:	f88d 1006 	strb.w	r1, [sp, #6]
 800e8a0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e8a4:	f360 030f 	bfi	r3, r0, #0, #16
 800e8a8:	f362 431f 	bfi	r3, r2, #16, #16
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	b002      	add	sp, #8
 800e8b0:	4770      	bx	lr
 800e8b2:	bf00      	nop

0800e8b4 <uxr_object_id_from_raw>:
 800e8b4:	7843      	ldrb	r3, [r0, #1]
 800e8b6:	7801      	ldrb	r1, [r0, #0]
 800e8b8:	b082      	sub	sp, #8
 800e8ba:	f003 000f 	and.w	r0, r3, #15
 800e8be:	f88d 0006 	strb.w	r0, [sp, #6]
 800e8c2:	091b      	lsrs	r3, r3, #4
 800e8c4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800e8ce:	f363 020f 	bfi	r2, r3, #0, #16
 800e8d2:	f361 421f 	bfi	r2, r1, #16, #16
 800e8d6:	4610      	mov	r0, r2
 800e8d8:	b002      	add	sp, #8
 800e8da:	4770      	bx	lr

0800e8dc <uxr_object_id_to_raw>:
 800e8dc:	4602      	mov	r2, r0
 800e8de:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800e8e2:	b082      	sub	sp, #8
 800e8e4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800e8e8:	f3c2 120b 	ubfx	r2, r2, #4, #12
 800e8ec:	700a      	strb	r2, [r1, #0]
 800e8ee:	704b      	strb	r3, [r1, #1]
 800e8f0:	b002      	add	sp, #8
 800e8f2:	4770      	bx	lr

0800e8f4 <on_get_fragmentation_info>:
 800e8f4:	b500      	push	{lr}
 800e8f6:	b08b      	sub	sp, #44	; 0x2c
 800e8f8:	4601      	mov	r1, r0
 800e8fa:	2204      	movs	r2, #4
 800e8fc:	a802      	add	r0, sp, #8
 800e8fe:	f7ff fdab 	bl	800e458 <ucdr_init_buffer>
 800e902:	f10d 0305 	add.w	r3, sp, #5
 800e906:	a802      	add	r0, sp, #8
 800e908:	f10d 0206 	add.w	r2, sp, #6
 800e90c:	a901      	add	r1, sp, #4
 800e90e:	f001 f9b1 	bl	800fc74 <uxr_read_submessage_header>
 800e912:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e916:	2b0d      	cmp	r3, #13
 800e918:	d003      	beq.n	800e922 <on_get_fragmentation_info+0x2e>
 800e91a:	2000      	movs	r0, #0
 800e91c:	b00b      	add	sp, #44	; 0x2c
 800e91e:	f85d fb04 	ldr.w	pc, [sp], #4
 800e922:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e926:	f013 0f02 	tst.w	r3, #2
 800e92a:	bf14      	ite	ne
 800e92c:	2002      	movne	r0, #2
 800e92e:	2001      	moveq	r0, #1
 800e930:	b00b      	add	sp, #44	; 0x2c
 800e932:	f85d fb04 	ldr.w	pc, [sp], #4
 800e936:	bf00      	nop

0800e938 <read_submessage_get_info>:
 800e938:	b570      	push	{r4, r5, r6, lr}
 800e93a:	2500      	movs	r5, #0
 800e93c:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 800e940:	4604      	mov	r4, r0
 800e942:	f44f 7224 	mov.w	r2, #656	; 0x290
 800e946:	460e      	mov	r6, r1
 800e948:	a810      	add	r0, sp, #64	; 0x40
 800e94a:	4629      	mov	r1, r5
 800e94c:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800e950:	f007 fd14 	bl	801637c <memset>
 800e954:	a903      	add	r1, sp, #12
 800e956:	4630      	mov	r0, r6
 800e958:	f002 f948 	bl	8010bec <uxr_deserialize_GET_INFO_Payload>
 800e95c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800e960:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800e964:	4620      	mov	r0, r4
 800e966:	f000 fff9 	bl	800f95c <uxr_session_header_offset>
 800e96a:	462b      	mov	r3, r5
 800e96c:	9000      	str	r0, [sp, #0]
 800e96e:	a905      	add	r1, sp, #20
 800e970:	a808      	add	r0, sp, #32
 800e972:	220c      	movs	r2, #12
 800e974:	f7ff fd5e 	bl	800e434 <ucdr_init_buffer_origin_offset>
 800e978:	a910      	add	r1, sp, #64	; 0x40
 800e97a:	a808      	add	r0, sp, #32
 800e97c:	f002 f9a8 	bl	8010cd0 <uxr_serialize_INFO_Payload>
 800e980:	9b08      	ldr	r3, [sp, #32]
 800e982:	462a      	mov	r2, r5
 800e984:	4629      	mov	r1, r5
 800e986:	4620      	mov	r0, r4
 800e988:	f000 ff90 	bl	800f8ac <uxr_stamp_session_header>
 800e98c:	a808      	add	r0, sp, #32
 800e98e:	f7ff fd8f 	bl	800e4b0 <ucdr_buffer_length>
 800e992:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e994:	4602      	mov	r2, r0
 800e996:	a905      	add	r1, sp, #20
 800e998:	e9d3 0400 	ldrd	r0, r4, [r3]
 800e99c:	47a0      	blx	r4
 800e99e:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 800e9a2:	bd70      	pop	{r4, r5, r6, pc}

0800e9a4 <write_submessage_acknack.isra.0>:
 800e9a4:	b570      	push	{r4, r5, r6, lr}
 800e9a6:	b092      	sub	sp, #72	; 0x48
 800e9a8:	4605      	mov	r5, r0
 800e9aa:	460e      	mov	r6, r1
 800e9ac:	4614      	mov	r4, r2
 800e9ae:	f000 ffd5 	bl	800f95c <uxr_session_header_offset>
 800e9b2:	a905      	add	r1, sp, #20
 800e9b4:	9000      	str	r0, [sp, #0]
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	a80a      	add	r0, sp, #40	; 0x28
 800e9ba:	2211      	movs	r2, #17
 800e9bc:	f7ff fd3a 	bl	800e434 <ucdr_init_buffer_origin_offset>
 800e9c0:	2218      	movs	r2, #24
 800e9c2:	fb02 5404 	mla	r4, r2, r4, r5
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	2205      	movs	r2, #5
 800e9ca:	3450      	adds	r4, #80	; 0x50
 800e9cc:	a80a      	add	r0, sp, #40	; 0x28
 800e9ce:	210a      	movs	r1, #10
 800e9d0:	f001 f936 	bl	800fc40 <uxr_buffer_submessage_header>
 800e9d4:	a903      	add	r1, sp, #12
 800e9d6:	4620      	mov	r0, r4
 800e9d8:	f005 fdbc 	bl	8014554 <uxr_compute_acknack>
 800e9dc:	a903      	add	r1, sp, #12
 800e9de:	ba43      	rev16	r3, r0
 800e9e0:	a80a      	add	r0, sp, #40	; 0x28
 800e9e2:	f8ad 300e 	strh.w	r3, [sp, #14]
 800e9e6:	f88d 6010 	strb.w	r6, [sp, #16]
 800e9ea:	f002 f9e1 	bl	8010db0 <uxr_serialize_ACKNACK_Payload>
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9f2:	4611      	mov	r1, r2
 800e9f4:	4628      	mov	r0, r5
 800e9f6:	f000 ff59 	bl	800f8ac <uxr_stamp_session_header>
 800e9fa:	a80a      	add	r0, sp, #40	; 0x28
 800e9fc:	f7ff fd58 	bl	800e4b0 <ucdr_buffer_length>
 800ea00:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800ea02:	4602      	mov	r2, r0
 800ea04:	a905      	add	r1, sp, #20
 800ea06:	e9d3 0400 	ldrd	r0, r4, [r3]
 800ea0a:	47a0      	blx	r4
 800ea0c:	b012      	add	sp, #72	; 0x48
 800ea0e:	bd70      	pop	{r4, r5, r6, pc}

0800ea10 <uxr_init_session>:
 800ea10:	b5d0      	push	{r4, r6, r7, lr}
 800ea12:	2300      	movs	r3, #0
 800ea14:	2600      	movs	r6, #0
 800ea16:	2700      	movs	r7, #0
 800ea18:	e9c0 6726 	strd	r6, r7, [r0, #152]	; 0x98
 800ea1c:	4604      	mov	r4, r0
 800ea1e:	6701      	str	r1, [r0, #112]	; 0x70
 800ea20:	e9c0 331d 	strd	r3, r3, [r0, #116]	; 0x74
 800ea24:	e9c0 331f 	strd	r3, r3, [r0, #124]	; 0x7c
 800ea28:	e9c0 3321 	strd	r3, r3, [r0, #132]	; 0x84
 800ea2c:	e9c0 3323 	strd	r3, r3, [r0, #140]	; 0x8c
 800ea30:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
 800ea34:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 800ea38:	2181      	movs	r1, #129	; 0x81
 800ea3a:	f000 fea1 	bl	800f780 <uxr_init_session_info>
 800ea3e:	f104 0008 	add.w	r0, r4, #8
 800ea42:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
 800ea46:	f001 b817 	b.w	800fa78 <uxr_init_stream_storage>
 800ea4a:	bf00      	nop

0800ea4c <uxr_set_status_callback>:
 800ea4c:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 800ea50:	4770      	bx	lr
 800ea52:	bf00      	nop

0800ea54 <uxr_set_topic_callback>:
 800ea54:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 800ea58:	4770      	bx	lr
 800ea5a:	bf00      	nop

0800ea5c <uxr_set_request_callback>:
 800ea5c:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 800ea60:	4770      	bx	lr
 800ea62:	bf00      	nop

0800ea64 <uxr_set_reply_callback>:
 800ea64:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 800ea68:	4770      	bx	lr
 800ea6a:	bf00      	nop

0800ea6c <uxr_create_output_best_effort_stream>:
 800ea6c:	b510      	push	{r4, lr}
 800ea6e:	b084      	sub	sp, #16
 800ea70:	e9cd 2100 	strd	r2, r1, [sp]
 800ea74:	4604      	mov	r4, r0
 800ea76:	f000 ff71 	bl	800f95c <uxr_session_header_offset>
 800ea7a:	e9dd 2100 	ldrd	r2, r1, [sp]
 800ea7e:	4603      	mov	r3, r0
 800ea80:	f104 0008 	add.w	r0, r4, #8
 800ea84:	b004      	add	sp, #16
 800ea86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea8a:	f001 b83f 	b.w	800fb0c <uxr_add_output_best_effort_buffer>
 800ea8e:	bf00      	nop

0800ea90 <uxr_create_output_reliable_stream>:
 800ea90:	b530      	push	{r4, r5, lr}
 800ea92:	b089      	sub	sp, #36	; 0x24
 800ea94:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800ea98:	9303      	str	r3, [sp, #12]
 800ea9a:	4604      	mov	r4, r0
 800ea9c:	f000 ff5e 	bl	800f95c <uxr_session_header_offset>
 800eaa0:	4605      	mov	r5, r0
 800eaa2:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800eaa6:	9905      	ldr	r1, [sp, #20]
 800eaa8:	9500      	str	r5, [sp, #0]
 800eaaa:	f104 0008 	add.w	r0, r4, #8
 800eaae:	f001 f83f 	bl	800fb30 <uxr_add_output_reliable_buffer>
 800eab2:	2200      	movs	r2, #0
 800eab4:	b2c3      	uxtb	r3, r0
 800eab6:	f363 0207 	bfi	r2, r3, #0, #8
 800eaba:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800eabe:	f363 220f 	bfi	r2, r3, #8, #8
 800eac2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800eac6:	f363 4217 	bfi	r2, r3, #16, #8
 800eaca:	0e03      	lsrs	r3, r0, #24
 800eacc:	f363 621f 	bfi	r2, r3, #24, #8
 800ead0:	4610      	mov	r0, r2
 800ead2:	b009      	add	sp, #36	; 0x24
 800ead4:	bd30      	pop	{r4, r5, pc}
 800ead6:	bf00      	nop

0800ead8 <uxr_create_input_best_effort_stream>:
 800ead8:	b082      	sub	sp, #8
 800eada:	3008      	adds	r0, #8
 800eadc:	b002      	add	sp, #8
 800eade:	f001 b841 	b.w	800fb64 <uxr_add_input_best_effort_buffer>
 800eae2:	bf00      	nop

0800eae4 <uxr_create_input_reliable_stream>:
 800eae4:	b510      	push	{r4, lr}
 800eae6:	b084      	sub	sp, #16
 800eae8:	4c0b      	ldr	r4, [pc, #44]	; (800eb18 <uxr_create_input_reliable_stream+0x34>)
 800eaea:	9400      	str	r4, [sp, #0]
 800eaec:	3008      	adds	r0, #8
 800eaee:	f001 f84f 	bl	800fb90 <uxr_add_input_reliable_buffer>
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	b2c3      	uxtb	r3, r0
 800eaf6:	f363 0207 	bfi	r2, r3, #0, #8
 800eafa:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800eafe:	f363 220f 	bfi	r2, r3, #8, #8
 800eb02:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800eb06:	f363 4217 	bfi	r2, r3, #16, #8
 800eb0a:	0e03      	lsrs	r3, r0, #24
 800eb0c:	f363 621f 	bfi	r2, r3, #24, #8
 800eb10:	4610      	mov	r0, r2
 800eb12:	b004      	add	sp, #16
 800eb14:	bd10      	pop	{r4, pc}
 800eb16:	bf00      	nop
 800eb18:	0800e8f5 	.word	0x0800e8f5

0800eb1c <uxr_epoch_nanos>:
 800eb1c:	b510      	push	{r4, lr}
 800eb1e:	4604      	mov	r4, r0
 800eb20:	f001 f8f0 	bl	800fd04 <uxr_nanos>
 800eb24:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 800eb28:	1ac0      	subs	r0, r0, r3
 800eb2a:	eb61 0102 	sbc.w	r1, r1, r2
 800eb2e:	bd10      	pop	{r4, pc}

0800eb30 <uxr_flash_output_streams>:
 800eb30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb34:	7e03      	ldrb	r3, [r0, #24]
 800eb36:	b084      	sub	sp, #16
 800eb38:	4604      	mov	r4, r0
 800eb3a:	b1fb      	cbz	r3, 800eb7c <uxr_flash_output_streams+0x4c>
 800eb3c:	f04f 0900 	mov.w	r9, #0
 800eb40:	4648      	mov	r0, r9
 800eb42:	f10d 0802 	add.w	r8, sp, #2
 800eb46:	af03      	add	r7, sp, #12
 800eb48:	ae02      	add	r6, sp, #8
 800eb4a:	2201      	movs	r2, #1
 800eb4c:	4611      	mov	r1, r2
 800eb4e:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800eb52:	f000 ff3b 	bl	800f9cc <uxr_stream_id>
 800eb56:	3508      	adds	r5, #8
 800eb58:	4684      	mov	ip, r0
 800eb5a:	4643      	mov	r3, r8
 800eb5c:	4628      	mov	r0, r5
 800eb5e:	463a      	mov	r2, r7
 800eb60:	4631      	mov	r1, r6
 800eb62:	f8cd c004 	str.w	ip, [sp, #4]
 800eb66:	f005 fd7d 	bl	8014664 <uxr_prepare_best_effort_buffer_to_send>
 800eb6a:	2800      	cmp	r0, #0
 800eb6c:	d13d      	bne.n	800ebea <uxr_flash_output_streams+0xba>
 800eb6e:	7e23      	ldrb	r3, [r4, #24]
 800eb70:	f109 0901 	add.w	r9, r9, #1
 800eb74:	fa5f f089 	uxtb.w	r0, r9
 800eb78:	4283      	cmp	r3, r0
 800eb7a:	d8e6      	bhi.n	800eb4a <uxr_flash_output_streams+0x1a>
 800eb7c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800eb80:	b383      	cbz	r3, 800ebe4 <uxr_flash_output_streams+0xb4>
 800eb82:	f04f 0900 	mov.w	r9, #0
 800eb86:	4648      	mov	r0, r9
 800eb88:	f10d 0802 	add.w	r8, sp, #2
 800eb8c:	af03      	add	r7, sp, #12
 800eb8e:	ae02      	add	r6, sp, #8
 800eb90:	2201      	movs	r2, #1
 800eb92:	2102      	movs	r1, #2
 800eb94:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800eb98:	f000 ff18 	bl	800f9cc <uxr_stream_id>
 800eb9c:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800eba0:	3520      	adds	r5, #32
 800eba2:	9001      	str	r0, [sp, #4]
 800eba4:	e00c      	b.n	800ebc0 <uxr_flash_output_streams+0x90>
 800eba6:	9b02      	ldr	r3, [sp, #8]
 800eba8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800ebac:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ebb0:	f000 fe7c 	bl	800f8ac <uxr_stamp_session_header>
 800ebb4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ebb6:	9a03      	ldr	r2, [sp, #12]
 800ebb8:	9902      	ldr	r1, [sp, #8]
 800ebba:	e9d3 0a00 	ldrd	r0, sl, [r3]
 800ebbe:	47d0      	blx	sl
 800ebc0:	4643      	mov	r3, r8
 800ebc2:	463a      	mov	r2, r7
 800ebc4:	4631      	mov	r1, r6
 800ebc6:	4628      	mov	r0, r5
 800ebc8:	f005 ff54 	bl	8014a74 <uxr_prepare_next_reliable_buffer_to_send>
 800ebcc:	4603      	mov	r3, r0
 800ebce:	4620      	mov	r0, r4
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d1e8      	bne.n	800eba6 <uxr_flash_output_streams+0x76>
 800ebd4:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800ebd8:	f109 0901 	add.w	r9, r9, #1
 800ebdc:	fa5f f089 	uxtb.w	r0, r9
 800ebe0:	4283      	cmp	r3, r0
 800ebe2:	d8d5      	bhi.n	800eb90 <uxr_flash_output_streams+0x60>
 800ebe4:	b004      	add	sp, #16
 800ebe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebea:	9b02      	ldr	r3, [sp, #8]
 800ebec:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800ebf0:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ebf4:	4620      	mov	r0, r4
 800ebf6:	f000 fe59 	bl	800f8ac <uxr_stamp_session_header>
 800ebfa:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ebfc:	9a03      	ldr	r2, [sp, #12]
 800ebfe:	9902      	ldr	r1, [sp, #8]
 800ec00:	e9d3 0500 	ldrd	r0, r5, [r3]
 800ec04:	47a8      	blx	r5
 800ec06:	f109 0901 	add.w	r9, r9, #1
 800ec0a:	7e23      	ldrb	r3, [r4, #24]
 800ec0c:	fa5f f089 	uxtb.w	r0, r9
 800ec10:	4283      	cmp	r3, r0
 800ec12:	d89a      	bhi.n	800eb4a <uxr_flash_output_streams+0x1a>
 800ec14:	e7b2      	b.n	800eb7c <uxr_flash_output_streams+0x4c>
 800ec16:	bf00      	nop

0800ec18 <read_submessage_info>:
 800ec18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec1c:	460d      	mov	r5, r1
 800ec1e:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800ec22:	4669      	mov	r1, sp
 800ec24:	4607      	mov	r7, r0
 800ec26:	4628      	mov	r0, r5
 800ec28:	f001 fee6 	bl	80109f8 <uxr_deserialize_BaseObjectReply>
 800ec2c:	a902      	add	r1, sp, #8
 800ec2e:	4604      	mov	r4, r0
 800ec30:	4628      	mov	r0, r5
 800ec32:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800ec36:	f004 fb45 	bl	80132c4 <ucdr_deserialize_bool>
 800ec3a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800ec3e:	4004      	ands	r4, r0
 800ec40:	b2e4      	uxtb	r4, r4
 800ec42:	b95b      	cbnz	r3, 800ec5c <read_submessage_info+0x44>
 800ec44:	a987      	add	r1, sp, #540	; 0x21c
 800ec46:	4628      	mov	r0, r5
 800ec48:	f004 fb3c 	bl	80132c4 <ucdr_deserialize_bool>
 800ec4c:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 800ec50:	4606      	mov	r6, r0
 800ec52:	b94b      	cbnz	r3, 800ec68 <read_submessage_info+0x50>
 800ec54:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800ec58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec5c:	a903      	add	r1, sp, #12
 800ec5e:	4628      	mov	r0, r5
 800ec60:	f001 fd58 	bl	8010714 <uxr_deserialize_ObjectVariant>
 800ec64:	4004      	ands	r4, r0
 800ec66:	e7ed      	b.n	800ec44 <read_submessage_info+0x2c>
 800ec68:	a988      	add	r1, sp, #544	; 0x220
 800ec6a:	4628      	mov	r0, r5
 800ec6c:	f004 fb5a 	bl	8013324 <ucdr_deserialize_uint8_t>
 800ec70:	4234      	tst	r4, r6
 800ec72:	d0ef      	beq.n	800ec54 <read_submessage_info+0x3c>
 800ec74:	2800      	cmp	r0, #0
 800ec76:	d0ed      	beq.n	800ec54 <read_submessage_info+0x3c>
 800ec78:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 800ec7c:	2b0d      	cmp	r3, #13
 800ec7e:	d1e9      	bne.n	800ec54 <read_submessage_info+0x3c>
 800ec80:	4628      	mov	r0, r5
 800ec82:	a98a      	add	r1, sp, #552	; 0x228
 800ec84:	f005 f8f4 	bl	8013e70 <ucdr_deserialize_int16_t>
 800ec88:	b140      	cbz	r0, 800ec9c <read_submessage_info+0x84>
 800ec8a:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	dd07      	ble.n	800eca2 <read_submessage_info+0x8a>
 800ec92:	f1b8 0f00 	cmp.w	r8, #0
 800ec96:	bf14      	ite	ne
 800ec98:	2001      	movne	r0, #1
 800ec9a:	2002      	moveq	r0, #2
 800ec9c:	f887 00b5 	strb.w	r0, [r7, #181]	; 0xb5
 800eca0:	e7d8      	b.n	800ec54 <read_submessage_info+0x3c>
 800eca2:	2000      	movs	r0, #0
 800eca4:	e7fa      	b.n	800ec9c <read_submessage_info+0x84>
 800eca6:	bf00      	nop

0800eca8 <read_submessage_list>:
 800eca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ecac:	b098      	sub	sp, #96	; 0x60
 800ecae:	f8df 9304 	ldr.w	r9, [pc, #772]	; 800efb4 <read_submessage_list+0x30c>
 800ecb2:	920b      	str	r2, [sp, #44]	; 0x2c
 800ecb4:	4604      	mov	r4, r0
 800ecb6:	4688      	mov	r8, r1
 800ecb8:	f10d 0337 	add.w	r3, sp, #55	; 0x37
 800ecbc:	aa0e      	add	r2, sp, #56	; 0x38
 800ecbe:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 800ecc2:	4640      	mov	r0, r8
 800ecc4:	f000 ffd6 	bl	800fc74 <uxr_read_submessage_header>
 800ecc8:	2800      	cmp	r0, #0
 800ecca:	f000 813d 	beq.w	800ef48 <read_submessage_list+0x2a0>
 800ecce:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 800ecd2:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 800ecd6:	3b02      	subs	r3, #2
 800ecd8:	2b0d      	cmp	r3, #13
 800ecda:	d8ed      	bhi.n	800ecb8 <read_submessage_list+0x10>
 800ecdc:	a101      	add	r1, pc, #4	; (adr r1, 800ece4 <read_submessage_list+0x3c>)
 800ecde:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ece2:	bf00      	nop
 800ece4:	0800ef3f 	.word	0x0800ef3f
 800ece8:	0800ecb9 	.word	0x0800ecb9
 800ecec:	0800ef2f 	.word	0x0800ef2f
 800ecf0:	0800eed3 	.word	0x0800eed3
 800ecf4:	0800eec9 	.word	0x0800eec9
 800ecf8:	0800ecb9 	.word	0x0800ecb9
 800ecfc:	0800ecb9 	.word	0x0800ecb9
 800ed00:	0800ee2b 	.word	0x0800ee2b
 800ed04:	0800edbd 	.word	0x0800edbd
 800ed08:	0800ed7b 	.word	0x0800ed7b
 800ed0c:	0800ecb9 	.word	0x0800ecb9
 800ed10:	0800ecb9 	.word	0x0800ecb9
 800ed14:	0800ecb9 	.word	0x0800ecb9
 800ed18:	0800ed1d 	.word	0x0800ed1d
 800ed1c:	a912      	add	r1, sp, #72	; 0x48
 800ed1e:	4640      	mov	r0, r8
 800ed20:	f002 f896 	bl	8010e50 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800ed24:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 800ed28:	2d00      	cmp	r5, #0
 800ed2a:	f000 8115 	beq.w	800ef58 <read_submessage_list+0x2b0>
 800ed2e:	f000 ffe9 	bl	800fd04 <uxr_nanos>
 800ed32:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ed34:	460b      	mov	r3, r1
 800ed36:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ed38:	2700      	movs	r7, #0
 800ed3a:	fbc9 6701 	smlal	r6, r7, r9, r1
 800ed3e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ed42:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ed44:	4602      	mov	r2, r0
 800ed46:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ed48:	460e      	mov	r6, r1
 800ed4a:	2700      	movs	r7, #0
 800ed4c:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800ed50:	9106      	str	r1, [sp, #24]
 800ed52:	fbc9 6700 	smlal	r6, r7, r9, r0
 800ed56:	9915      	ldr	r1, [sp, #84]	; 0x54
 800ed58:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800ed5c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800ed5e:	2700      	movs	r7, #0
 800ed60:	4608      	mov	r0, r1
 800ed62:	4639      	mov	r1, r7
 800ed64:	fbc9 0106 	smlal	r0, r1, r9, r6
 800ed68:	e9cd 0100 	strd	r0, r1, [sp]
 800ed6c:	4620      	mov	r0, r4
 800ed6e:	47a8      	blx	r5
 800ed70:	f04f 0301 	mov.w	r3, #1
 800ed74:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 800ed78:	e79e      	b.n	800ecb8 <read_submessage_list+0x10>
 800ed7a:	a912      	add	r1, sp, #72	; 0x48
 800ed7c:	4640      	mov	r0, r8
 800ed7e:	f002 f855 	bl	8010e2c <uxr_deserialize_HEARTBEAT_Payload>
 800ed82:	2100      	movs	r1, #0
 800ed84:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 800ed88:	f000 fe4a 	bl	800fa20 <uxr_stream_id_from_raw>
 800ed8c:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800ed90:	4603      	mov	r3, r0
 800ed92:	4629      	mov	r1, r5
 800ed94:	f104 0008 	add.w	r0, r4, #8
 800ed98:	9311      	str	r3, [sp, #68]	; 0x44
 800ed9a:	f000 ff2f 	bl	800fbfc <uxr_get_input_reliable_stream>
 800ed9e:	2800      	cmp	r0, #0
 800eda0:	d08a      	beq.n	800ecb8 <read_submessage_list+0x10>
 800eda2:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 800eda6:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
 800edaa:	f005 fbc7 	bl	801453c <uxr_process_heartbeat>
 800edae:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 800edb2:	462a      	mov	r2, r5
 800edb4:	4620      	mov	r0, r4
 800edb6:	f7ff fdf5 	bl	800e9a4 <write_submessage_acknack.isra.0>
 800edba:	e77d      	b.n	800ecb8 <read_submessage_list+0x10>
 800edbc:	a912      	add	r1, sp, #72	; 0x48
 800edbe:	4640      	mov	r0, r8
 800edc0:	f002 f80c 	bl	8010ddc <uxr_deserialize_ACKNACK_Payload>
 800edc4:	2100      	movs	r1, #0
 800edc6:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 800edca:	f000 fe29 	bl	800fa20 <uxr_stream_id_from_raw>
 800edce:	4603      	mov	r3, r0
 800edd0:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800edd4:	f104 0008 	add.w	r0, r4, #8
 800edd8:	930f      	str	r3, [sp, #60]	; 0x3c
 800edda:	f000 fef9 	bl	800fbd0 <uxr_get_output_reliable_stream>
 800edde:	4605      	mov	r5, r0
 800ede0:	2800      	cmp	r0, #0
 800ede2:	f43f af69 	beq.w	800ecb8 <read_submessage_list+0x10>
 800ede6:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 800edea:	f89d 104b 	ldrb.w	r1, [sp, #75]	; 0x4b
 800edee:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 800edf2:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800edf6:	b289      	uxth	r1, r1
 800edf8:	f005 fee4 	bl	8014bc4 <uxr_process_acknack>
 800edfc:	4628      	mov	r0, r5
 800edfe:	f005 fea7 	bl	8014b50 <uxr_begin_output_nack_buffer_it>
 800ee02:	af10      	add	r7, sp, #64	; 0x40
 800ee04:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
 800ee08:	e005      	b.n	800ee16 <read_submessage_list+0x16e>
 800ee0a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ee0c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ee0e:	9910      	ldr	r1, [sp, #64]	; 0x40
 800ee10:	e9d3 0600 	ldrd	r0, r6, [r3]
 800ee14:	47b0      	blx	r6
 800ee16:	f10d 033a 	add.w	r3, sp, #58	; 0x3a
 800ee1a:	aa11      	add	r2, sp, #68	; 0x44
 800ee1c:	4639      	mov	r1, r7
 800ee1e:	4628      	mov	r0, r5
 800ee20:	f005 fe98 	bl	8014b54 <uxr_next_reliable_nack_buffer_to_send>
 800ee24:	2800      	cmp	r0, #0
 800ee26:	d1f0      	bne.n	800ee0a <read_submessage_list+0x162>
 800ee28:	e746      	b.n	800ecb8 <read_submessage_list+0x10>
 800ee2a:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 800ee2e:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
 800ee32:	af10      	add	r7, sp, #64	; 0x40
 800ee34:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 800ee38:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
 800ee3c:	4639      	mov	r1, r7
 800ee3e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800ee42:	f89d 6037 	ldrb.w	r6, [sp, #55]	; 0x37
 800ee46:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 800ee4a:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
 800ee4e:	4640      	mov	r0, r8
 800ee50:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 800ee54:	f001 fd0c 	bl	8010870 <uxr_deserialize_BaseObjectRequest>
 800ee58:	4638      	mov	r0, r7
 800ee5a:	a911      	add	r1, sp, #68	; 0x44
 800ee5c:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 800ee60:	f000 fda2 	bl	800f9a8 <uxr_parse_base_object_request>
 800ee64:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 800ee68:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ee6a:	f8bd 703a 	ldrh.w	r7, [sp, #58]	; 0x3a
 800ee6e:	9112      	str	r1, [sp, #72]	; 0x48
 800ee70:	3d04      	subs	r5, #4
 800ee72:	f006 060e 	and.w	r6, r6, #14
 800ee76:	b2ad      	uxth	r5, r5
 800ee78:	f1ba 0f00 	cmp.w	sl, #0
 800ee7c:	d006      	beq.n	800ee8c <read_submessage_list+0x1e4>
 800ee7e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800ee82:	9300      	str	r3, [sp, #0]
 800ee84:	463a      	mov	r2, r7
 800ee86:	2300      	movs	r3, #0
 800ee88:	4620      	mov	r0, r4
 800ee8a:	47d0      	blx	sl
 800ee8c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800ee8e:	b168      	cbz	r0, 800eeac <read_submessage_list+0x204>
 800ee90:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800ee92:	2300      	movs	r3, #0
 800ee94:	3902      	subs	r1, #2
 800ee96:	e002      	b.n	800ee9e <read_submessage_list+0x1f6>
 800ee98:	3301      	adds	r3, #1
 800ee9a:	4283      	cmp	r3, r0
 800ee9c:	d006      	beq.n	800eeac <read_submessage_list+0x204>
 800ee9e:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 800eea2:	42ba      	cmp	r2, r7
 800eea4:	d1f8      	bne.n	800ee98 <read_submessage_list+0x1f0>
 800eea6:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800eea8:	2100      	movs	r1, #0
 800eeaa:	54d1      	strb	r1, [r2, r3]
 800eeac:	9811      	ldr	r0, [sp, #68]	; 0x44
 800eeae:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800eeb0:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 800eeb4:	9302      	str	r3, [sp, #8]
 800eeb6:	e9cd 1000 	strd	r1, r0, [sp]
 800eeba:	4633      	mov	r3, r6
 800eebc:	462a      	mov	r2, r5
 800eebe:	4641      	mov	r1, r8
 800eec0:	4620      	mov	r0, r4
 800eec2:	f005 ff03 	bl	8014ccc <read_submessage_format>
 800eec6:	e6f7      	b.n	800ecb8 <read_submessage_list+0x10>
 800eec8:	4641      	mov	r1, r8
 800eeca:	4620      	mov	r0, r4
 800eecc:	f7ff fea4 	bl	800ec18 <read_submessage_info>
 800eed0:	e6f2      	b.n	800ecb8 <read_submessage_list+0x10>
 800eed2:	2a00      	cmp	r2, #0
 800eed4:	d03b      	beq.n	800ef4e <read_submessage_list+0x2a6>
 800eed6:	a912      	add	r1, sp, #72	; 0x48
 800eed8:	4640      	mov	r0, r8
 800eeda:	f001 fedb 	bl	8010c94 <uxr_deserialize_STATUS_Payload>
 800eede:	a910      	add	r1, sp, #64	; 0x40
 800eee0:	aa0f      	add	r2, sp, #60	; 0x3c
 800eee2:	a812      	add	r0, sp, #72	; 0x48
 800eee4:	f000 fd60 	bl	800f9a8 <uxr_parse_base_object_request>
 800eee8:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 800eeec:	9910      	ldr	r1, [sp, #64]	; 0x40
 800eeee:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 800eef2:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 800eef6:	9111      	str	r1, [sp, #68]	; 0x44
 800eef8:	b135      	cbz	r5, 800ef08 <read_submessage_list+0x260>
 800eefa:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800eefe:	9300      	str	r3, [sp, #0]
 800ef00:	4632      	mov	r2, r6
 800ef02:	463b      	mov	r3, r7
 800ef04:	4620      	mov	r0, r4
 800ef06:	47a8      	blx	r5
 800ef08:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	f43f aed4 	beq.w	800ecb8 <read_submessage_list+0x10>
 800ef10:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800ef12:	2100      	movs	r1, #0
 800ef14:	3802      	subs	r0, #2
 800ef16:	e003      	b.n	800ef20 <read_submessage_list+0x278>
 800ef18:	3101      	adds	r1, #1
 800ef1a:	4299      	cmp	r1, r3
 800ef1c:	f43f aecc 	beq.w	800ecb8 <read_submessage_list+0x10>
 800ef20:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 800ef24:	42b2      	cmp	r2, r6
 800ef26:	d1f7      	bne.n	800ef18 <read_submessage_list+0x270>
 800ef28:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ef2a:	545f      	strb	r7, [r3, r1]
 800ef2c:	e6c4      	b.n	800ecb8 <read_submessage_list+0x10>
 800ef2e:	2a00      	cmp	r2, #0
 800ef30:	f47f aec2 	bne.w	800ecb8 <read_submessage_list+0x10>
 800ef34:	4641      	mov	r1, r8
 800ef36:	4620      	mov	r0, r4
 800ef38:	f000 fc7a 	bl	800f830 <uxr_read_create_session_status>
 800ef3c:	e6bc      	b.n	800ecb8 <read_submessage_list+0x10>
 800ef3e:	4641      	mov	r1, r8
 800ef40:	4620      	mov	r0, r4
 800ef42:	f7ff fcf9 	bl	800e938 <read_submessage_get_info>
 800ef46:	e6b7      	b.n	800ecb8 <read_submessage_list+0x10>
 800ef48:	b018      	add	sp, #96	; 0x60
 800ef4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef4e:	4641      	mov	r1, r8
 800ef50:	4620      	mov	r0, r4
 800ef52:	f000 fc79 	bl	800f848 <uxr_read_delete_session_status>
 800ef56:	e6af      	b.n	800ecb8 <read_submessage_list+0x10>
 800ef58:	f000 fed4 	bl	800fd04 <uxr_nanos>
 800ef5c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ef5e:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ef60:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ef62:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800ef64:	2700      	movs	r7, #0
 800ef66:	fbc9 6703 	smlal	r6, r7, r9, r3
 800ef6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ef6c:	eb16 0c00 	adds.w	ip, r6, r0
 800ef70:	4618      	mov	r0, r3
 800ef72:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ef74:	eb47 0e01 	adc.w	lr, r7, r1
 800ef78:	461e      	mov	r6, r3
 800ef7a:	2100      	movs	r1, #0
 800ef7c:	2700      	movs	r7, #0
 800ef7e:	fbc9 0105 	smlal	r0, r1, r9, r5
 800ef82:	fbc9 6702 	smlal	r6, r7, r9, r2
 800ef86:	1983      	adds	r3, r0, r6
 800ef88:	eb41 0207 	adc.w	r2, r1, r7
 800ef8c:	ebbc 0303 	subs.w	r3, ip, r3
 800ef90:	9308      	str	r3, [sp, #32]
 800ef92:	eb6e 0302 	sbc.w	r3, lr, r2
 800ef96:	9309      	str	r3, [sp, #36]	; 0x24
 800ef98:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800ef9c:	0fd3      	lsrs	r3, r2, #31
 800ef9e:	18c9      	adds	r1, r1, r3
 800efa0:	f142 0200 	adc.w	r2, r2, #0
 800efa4:	084b      	lsrs	r3, r1, #1
 800efa6:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 800efaa:	1052      	asrs	r2, r2, #1
 800efac:	e9c4 3226 	strd	r3, r2, [r4, #152]	; 0x98
 800efb0:	e6de      	b.n	800ed70 <read_submessage_list+0xc8>
 800efb2:	bf00      	nop
 800efb4:	3b9aca00 	.word	0x3b9aca00

0800efb8 <listen_message_reliably>:
 800efb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efbc:	1e0b      	subs	r3, r1, #0
 800efbe:	b09d      	sub	sp, #116	; 0x74
 800efc0:	bfb8      	it	lt
 800efc2:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800efc6:	9305      	str	r3, [sp, #20]
 800efc8:	4607      	mov	r7, r0
 800efca:	f000 fe7f 	bl	800fccc <uxr_millis>
 800efce:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800efd2:	4681      	mov	r9, r0
 800efd4:	2a00      	cmp	r2, #0
 800efd6:	f000 8095 	beq.w	800f104 <listen_message_reliably+0x14c>
 800efda:	2600      	movs	r6, #0
 800efdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800efe0:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800efe4:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800efe8:	4630      	mov	r0, r6
 800efea:	4688      	mov	r8, r1
 800efec:	46ca      	mov	sl, r9
 800efee:	e00f      	b.n	800f010 <listen_message_reliably+0x58>
 800eff0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800eff4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800eff8:	42a2      	cmp	r2, r4
 800effa:	eb73 0105 	sbcs.w	r1, r3, r5
 800effe:	bfb8      	it	lt
 800f000:	e9cd 2302 	strdlt	r2, r3, [sp, #8]
 800f004:	3601      	adds	r6, #1
 800f006:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800f00a:	b2f0      	uxtb	r0, r6
 800f00c:	4283      	cmp	r3, r0
 800f00e:	d951      	bls.n	800f0b4 <listen_message_reliably+0xfc>
 800f010:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800f014:	2201      	movs	r2, #1
 800f016:	2102      	movs	r1, #2
 800f018:	f000 fcd8 	bl	800f9cc <uxr_stream_id>
 800f01c:	00e4      	lsls	r4, r4, #3
 800f01e:	f104 0520 	add.w	r5, r4, #32
 800f022:	443d      	add	r5, r7
 800f024:	4601      	mov	r1, r0
 800f026:	4643      	mov	r3, r8
 800f028:	4652      	mov	r2, sl
 800f02a:	4628      	mov	r0, r5
 800f02c:	9109      	str	r1, [sp, #36]	; 0x24
 800f02e:	f005 fd63 	bl	8014af8 <uxr_update_output_stream_heartbeat_timestamp>
 800f032:	193b      	adds	r3, r7, r4
 800f034:	2800      	cmp	r0, #0
 800f036:	d0db      	beq.n	800eff0 <listen_message_reliably+0x38>
 800f038:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 800f03c:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 800f040:	4638      	mov	r0, r7
 800f042:	f000 fc8b 	bl	800f95c <uxr_session_header_offset>
 800f046:	3501      	adds	r5, #1
 800f048:	f10d 0b50 	add.w	fp, sp, #80	; 0x50
 800f04c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800f050:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 800f054:	9000      	str	r0, [sp, #0]
 800f056:	2300      	movs	r3, #0
 800f058:	4658      	mov	r0, fp
 800f05a:	2211      	movs	r2, #17
 800f05c:	a90c      	add	r1, sp, #48	; 0x30
 800f05e:	f7ff f9e9 	bl	800e434 <ucdr_init_buffer_origin_offset>
 800f062:	2300      	movs	r3, #0
 800f064:	2205      	movs	r2, #5
 800f066:	210b      	movs	r1, #11
 800f068:	4658      	mov	r0, fp
 800f06a:	f000 fde9 	bl	800fc40 <uxr_buffer_submessage_header>
 800f06e:	8968      	ldrh	r0, [r5, #10]
 800f070:	2101      	movs	r1, #1
 800f072:	f005 feeb 	bl	8014e4c <uxr_seq_num_add>
 800f076:	892a      	ldrh	r2, [r5, #8]
 800f078:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 800f07c:	4603      	mov	r3, r0
 800f07e:	a90a      	add	r1, sp, #40	; 0x28
 800f080:	4658      	mov	r0, fp
 800f082:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 800f086:	f88d 902c 	strb.w	r9, [sp, #44]	; 0x2c
 800f08a:	f001 febb 	bl	8010e04 <uxr_serialize_HEARTBEAT_Payload>
 800f08e:	2200      	movs	r2, #0
 800f090:	4611      	mov	r1, r2
 800f092:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f094:	4638      	mov	r0, r7
 800f096:	f000 fc09 	bl	800f8ac <uxr_stamp_session_header>
 800f09a:	4658      	mov	r0, fp
 800f09c:	f7ff fa08 	bl	800e4b0 <ucdr_buffer_length>
 800f0a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f0a2:	4602      	mov	r2, r0
 800f0a4:	a90c      	add	r1, sp, #48	; 0x30
 800f0a6:	e9d3 0500 	ldrd	r0, r5, [r3]
 800f0aa:	443c      	add	r4, r7
 800f0ac:	47a8      	blx	r5
 800f0ae:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800f0b2:	e79f      	b.n	800eff4 <listen_message_reliably+0x3c>
 800f0b4:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 800f0b8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800f0bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800f0c0:	4294      	cmp	r4, r2
 800f0c2:	bf08      	it	eq
 800f0c4:	428b      	cmpeq	r3, r1
 800f0c6:	d01d      	beq.n	800f104 <listen_message_reliably+0x14c>
 800f0c8:	eba3 030a 	sub.w	r3, r3, sl
 800f0cc:	9905      	ldr	r1, [sp, #20]
 800f0ce:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	bf08      	it	eq
 800f0d4:	2301      	moveq	r3, #1
 800f0d6:	4299      	cmp	r1, r3
 800f0d8:	bfa8      	it	ge
 800f0da:	4619      	movge	r1, r3
 800f0dc:	6894      	ldr	r4, [r2, #8]
 800f0de:	6810      	ldr	r0, [r2, #0]
 800f0e0:	4689      	mov	r9, r1
 800f0e2:	460b      	mov	r3, r1
 800f0e4:	aa08      	add	r2, sp, #32
 800f0e6:	a907      	add	r1, sp, #28
 800f0e8:	47a0      	blx	r4
 800f0ea:	b968      	cbnz	r0, 800f108 <listen_message_reliably+0x150>
 800f0ec:	9b05      	ldr	r3, [sp, #20]
 800f0ee:	eba3 0309 	sub.w	r3, r3, r9
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	9305      	str	r3, [sp, #20]
 800f0f6:	f73f af68 	bgt.w	800efca <listen_message_reliably+0x12>
 800f0fa:	4604      	mov	r4, r0
 800f0fc:	4620      	mov	r0, r4
 800f0fe:	b01d      	add	sp, #116	; 0x74
 800f100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f104:	9b05      	ldr	r3, [sp, #20]
 800f106:	e7e1      	b.n	800f0cc <listen_message_reliably+0x114>
 800f108:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800f10c:	4604      	mov	r4, r0
 800f10e:	a80c      	add	r0, sp, #48	; 0x30
 800f110:	f7ff f9a2 	bl	800e458 <ucdr_init_buffer>
 800f114:	2500      	movs	r5, #0
 800f116:	a90c      	add	r1, sp, #48	; 0x30
 800f118:	f10d 031a 	add.w	r3, sp, #26
 800f11c:	aa06      	add	r2, sp, #24
 800f11e:	4638      	mov	r0, r7
 800f120:	f88d 5018 	strb.w	r5, [sp, #24]
 800f124:	f000 fbd8 	bl	800f8d8 <uxr_read_session_header>
 800f128:	b918      	cbnz	r0, 800f132 <listen_message_reliably+0x17a>
 800f12a:	4620      	mov	r0, r4
 800f12c:	b01d      	add	sp, #116	; 0x74
 800f12e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f132:	4629      	mov	r1, r5
 800f134:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800f138:	f000 fc72 	bl	800fa20 <uxr_stream_id_from_raw>
 800f13c:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800f140:	2e01      	cmp	r6, #1
 800f142:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800f146:	900a      	str	r0, [sp, #40]	; 0x28
 800f148:	fa5f fa80 	uxtb.w	sl, r0
 800f14c:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800f150:	d04b      	beq.n	800f1ea <listen_message_reliably+0x232>
 800f152:	2e02      	cmp	r6, #2
 800f154:	d00f      	beq.n	800f176 <listen_message_reliably+0x1be>
 800f156:	2e00      	cmp	r6, #0
 800f158:	d1e7      	bne.n	800f12a <listen_message_reliably+0x172>
 800f15a:	4631      	mov	r1, r6
 800f15c:	4630      	mov	r0, r6
 800f15e:	f000 fc5f 	bl	800fa20 <uxr_stream_id_from_raw>
 800f162:	a90c      	add	r1, sp, #48	; 0x30
 800f164:	4602      	mov	r2, r0
 800f166:	4638      	mov	r0, r7
 800f168:	920a      	str	r2, [sp, #40]	; 0x28
 800f16a:	f7ff fd9d 	bl	800eca8 <read_submessage_list>
 800f16e:	4620      	mov	r0, r4
 800f170:	b01d      	add	sp, #116	; 0x74
 800f172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f176:	4629      	mov	r1, r5
 800f178:	f107 0008 	add.w	r0, r7, #8
 800f17c:	f000 fd3e 	bl	800fbfc <uxr_get_input_reliable_stream>
 800f180:	4680      	mov	r8, r0
 800f182:	b348      	cbz	r0, 800f1d8 <listen_message_reliably+0x220>
 800f184:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f186:	9202      	str	r2, [sp, #8]
 800f188:	a80c      	add	r0, sp, #48	; 0x30
 800f18a:	f7ff f995 	bl	800e4b8 <ucdr_buffer_remaining>
 800f18e:	4603      	mov	r3, r0
 800f190:	f10d 0019 	add.w	r0, sp, #25
 800f194:	9000      	str	r0, [sp, #0]
 800f196:	9a02      	ldr	r2, [sp, #8]
 800f198:	4649      	mov	r1, r9
 800f19a:	4640      	mov	r0, r8
 800f19c:	f005 f8d0 	bl	8014340 <uxr_receive_reliable_message>
 800f1a0:	b1d0      	cbz	r0, 800f1d8 <listen_message_reliably+0x220>
 800f1a2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d037      	beq.n	800f21a <listen_message_reliably+0x262>
 800f1aa:	ae14      	add	r6, sp, #80	; 0x50
 800f1ac:	f04f 0902 	mov.w	r9, #2
 800f1b0:	e008      	b.n	800f1c4 <listen_message_reliably+0x20c>
 800f1b2:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 800f1b6:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 800f1ba:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 800f1be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f1c0:	f7ff fd72 	bl	800eca8 <read_submessage_list>
 800f1c4:	4631      	mov	r1, r6
 800f1c6:	2204      	movs	r2, #4
 800f1c8:	4640      	mov	r0, r8
 800f1ca:	f005 f939 	bl	8014440 <uxr_next_input_reliable_buffer_available>
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	4631      	mov	r1, r6
 800f1d2:	4638      	mov	r0, r7
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d1ec      	bne.n	800f1b2 <listen_message_reliably+0x1fa>
 800f1d8:	4638      	mov	r0, r7
 800f1da:	462a      	mov	r2, r5
 800f1dc:	4651      	mov	r1, sl
 800f1de:	f7ff fbe1 	bl	800e9a4 <write_submessage_acknack.isra.0>
 800f1e2:	4620      	mov	r0, r4
 800f1e4:	b01d      	add	sp, #116	; 0x74
 800f1e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1ea:	4629      	mov	r1, r5
 800f1ec:	f107 0008 	add.w	r0, r7, #8
 800f1f0:	f000 fcfa 	bl	800fbe8 <uxr_get_input_best_effort_stream>
 800f1f4:	2800      	cmp	r0, #0
 800f1f6:	d098      	beq.n	800f12a <listen_message_reliably+0x172>
 800f1f8:	4649      	mov	r1, r9
 800f1fa:	f005 f81d 	bl	8014238 <uxr_receive_best_effort_message>
 800f1fe:	2800      	cmp	r0, #0
 800f200:	d093      	beq.n	800f12a <listen_message_reliably+0x172>
 800f202:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 800f206:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 800f20a:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800f20e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f210:	a90c      	add	r1, sp, #48	; 0x30
 800f212:	4638      	mov	r0, r7
 800f214:	f7ff fd48 	bl	800eca8 <read_submessage_list>
 800f218:	e787      	b.n	800f12a <listen_message_reliably+0x172>
 800f21a:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 800f21e:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 800f222:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800f226:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f228:	a90c      	add	r1, sp, #48	; 0x30
 800f22a:	4638      	mov	r0, r7
 800f22c:	f7ff fd3c 	bl	800eca8 <read_submessage_list>
 800f230:	e7bb      	b.n	800f1aa <listen_message_reliably+0x1f2>
 800f232:	bf00      	nop

0800f234 <uxr_run_session_until_confirm_delivery>:
 800f234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f238:	4606      	mov	r6, r0
 800f23a:	460d      	mov	r5, r1
 800f23c:	f000 fd46 	bl	800fccc <uxr_millis>
 800f240:	4607      	mov	r7, r0
 800f242:	4630      	mov	r0, r6
 800f244:	f7ff fc74 	bl	800eb30 <uxr_flash_output_streams>
 800f248:	2d00      	cmp	r5, #0
 800f24a:	f106 0808 	add.w	r8, r6, #8
 800f24e:	bfa8      	it	ge
 800f250:	462c      	movge	r4, r5
 800f252:	da07      	bge.n	800f264 <uxr_run_session_until_confirm_delivery+0x30>
 800f254:	e00e      	b.n	800f274 <uxr_run_session_until_confirm_delivery+0x40>
 800f256:	f7ff feaf 	bl	800efb8 <listen_message_reliably>
 800f25a:	f000 fd37 	bl	800fccc <uxr_millis>
 800f25e:	1bc3      	subs	r3, r0, r7
 800f260:	1aec      	subs	r4, r5, r3
 800f262:	d407      	bmi.n	800f274 <uxr_run_session_until_confirm_delivery+0x40>
 800f264:	4640      	mov	r0, r8
 800f266:	f000 fcd5 	bl	800fc14 <uxr_output_streams_confirmed>
 800f26a:	4603      	mov	r3, r0
 800f26c:	4621      	mov	r1, r4
 800f26e:	4630      	mov	r0, r6
 800f270:	2b00      	cmp	r3, #0
 800f272:	d0f0      	beq.n	800f256 <uxr_run_session_until_confirm_delivery+0x22>
 800f274:	4640      	mov	r0, r8
 800f276:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f27a:	f000 bccb 	b.w	800fc14 <uxr_output_streams_confirmed>
 800f27e:	bf00      	nop

0800f280 <uxr_run_session_until_all_status>:
 800f280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f284:	9d08      	ldr	r5, [sp, #32]
 800f286:	460f      	mov	r7, r1
 800f288:	4692      	mov	sl, r2
 800f28a:	461c      	mov	r4, r3
 800f28c:	4606      	mov	r6, r0
 800f28e:	f7ff fc4f 	bl	800eb30 <uxr_flash_output_streams>
 800f292:	b125      	cbz	r5, 800f29e <uxr_run_session_until_all_status+0x1e>
 800f294:	462a      	mov	r2, r5
 800f296:	21ff      	movs	r1, #255	; 0xff
 800f298:	4620      	mov	r0, r4
 800f29a:	f007 f86f 	bl	801637c <memset>
 800f29e:	e9c6 a41d 	strd	sl, r4, [r6, #116]	; 0x74
 800f2a2:	67f5      	str	r5, [r6, #124]	; 0x7c
 800f2a4:	f000 fd12 	bl	800fccc <uxr_millis>
 800f2a8:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 800f2ac:	f1aa 0a02 	sub.w	sl, sl, #2
 800f2b0:	4680      	mov	r8, r0
 800f2b2:	4639      	mov	r1, r7
 800f2b4:	4630      	mov	r0, r6
 800f2b6:	f7ff fe7f 	bl	800efb8 <listen_message_reliably>
 800f2ba:	f000 fd07 	bl	800fccc <uxr_millis>
 800f2be:	eba0 0008 	sub.w	r0, r0, r8
 800f2c2:	1a39      	subs	r1, r7, r0
 800f2c4:	b33d      	cbz	r5, 800f316 <uxr_run_session_until_all_status+0x96>
 800f2c6:	46cc      	mov	ip, r9
 800f2c8:	464a      	mov	r2, r9
 800f2ca:	2301      	movs	r3, #1
 800f2cc:	e002      	b.n	800f2d4 <uxr_run_session_until_all_status+0x54>
 800f2ce:	42ab      	cmp	r3, r5
 800f2d0:	d20c      	bcs.n	800f2ec <uxr_run_session_until_all_status+0x6c>
 800f2d2:	3301      	adds	r3, #1
 800f2d4:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 800f2d8:	2cff      	cmp	r4, #255	; 0xff
 800f2da:	d1f8      	bne.n	800f2ce <uxr_run_session_until_all_status+0x4e>
 800f2dc:	42ab      	cmp	r3, r5
 800f2de:	f83a 0013 	ldrh.w	r0, [sl, r3, lsl #1]
 800f2e2:	d213      	bcs.n	800f30c <uxr_run_session_until_all_status+0x8c>
 800f2e4:	2800      	cmp	r0, #0
 800f2e6:	d0f4      	beq.n	800f2d2 <uxr_run_session_until_all_status+0x52>
 800f2e8:	2900      	cmp	r1, #0
 800f2ea:	dce3      	bgt.n	800f2b4 <uxr_run_session_until_all_status+0x34>
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	444d      	add	r5, r9
 800f2f0:	67f3      	str	r3, [r6, #124]	; 0x7c
 800f2f2:	e001      	b.n	800f2f8 <uxr_run_session_until_all_status+0x78>
 800f2f4:	2b01      	cmp	r3, #1
 800f2f6:	d812      	bhi.n	800f31e <uxr_run_session_until_all_status+0x9e>
 800f2f8:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800f2fc:	4565      	cmp	r5, ip
 800f2fe:	d1f9      	bne.n	800f2f4 <uxr_run_session_until_all_status+0x74>
 800f300:	2b01      	cmp	r3, #1
 800f302:	bf8c      	ite	hi
 800f304:	2000      	movhi	r0, #0
 800f306:	2001      	movls	r0, #1
 800f308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f30c:	2900      	cmp	r1, #0
 800f30e:	dded      	ble.n	800f2ec <uxr_run_session_until_all_status+0x6c>
 800f310:	2800      	cmp	r0, #0
 800f312:	d1cf      	bne.n	800f2b4 <uxr_run_session_until_all_status+0x34>
 800f314:	e7ea      	b.n	800f2ec <uxr_run_session_until_all_status+0x6c>
 800f316:	67f5      	str	r5, [r6, #124]	; 0x7c
 800f318:	2001      	movs	r0, #1
 800f31a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f31e:	2000      	movs	r0, #0
 800f320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800f324 <uxr_create_session>:
 800f324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f328:	ed2d 8b02 	vpush	{d8}
 800f32c:	f100 0808 	add.w	r8, r0, #8
 800f330:	b0a9      	sub	sp, #164	; 0xa4
 800f332:	4604      	mov	r4, r0
 800f334:	4640      	mov	r0, r8
 800f336:	f000 fba9 	bl	800fa8c <uxr_reset_stream_storage>
 800f33a:	4620      	mov	r0, r4
 800f33c:	f000 fb0e 	bl	800f95c <uxr_session_header_offset>
 800f340:	a909      	add	r1, sp, #36	; 0x24
 800f342:	9000      	str	r0, [sp, #0]
 800f344:	2300      	movs	r3, #0
 800f346:	a810      	add	r0, sp, #64	; 0x40
 800f348:	221c      	movs	r2, #28
 800f34a:	f7ff f873 	bl	800e434 <ucdr_init_buffer_origin_offset>
 800f34e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800f350:	8a1a      	ldrh	r2, [r3, #16]
 800f352:	3a04      	subs	r2, #4
 800f354:	b292      	uxth	r2, r2
 800f356:	4620      	mov	r0, r4
 800f358:	a910      	add	r1, sp, #64	; 0x40
 800f35a:	f000 fa23 	bl	800f7a4 <uxr_buffer_create_session>
 800f35e:	9910      	ldr	r1, [sp, #64]	; 0x40
 800f360:	4620      	mov	r0, r4
 800f362:	f000 fa8f 	bl	800f884 <uxr_stamp_create_session_header>
 800f366:	a810      	add	r0, sp, #64	; 0x40
 800f368:	f7ff f8a2 	bl	800e4b0 <ucdr_buffer_length>
 800f36c:	23ff      	movs	r3, #255	; 0xff
 800f36e:	ee08 0a10 	vmov	s16, r0
 800f372:	7163      	strb	r3, [r4, #5]
 800f374:	f04f 090a 	mov.w	r9, #10
 800f378:	46c2      	mov	sl, r8
 800f37a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800f37c:	ee18 2a10 	vmov	r2, s16
 800f380:	e9d3 0500 	ldrd	r0, r5, [r3]
 800f384:	a909      	add	r1, sp, #36	; 0x24
 800f386:	47a8      	blx	r5
 800f388:	f000 fca0 	bl	800fccc <uxr_millis>
 800f38c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f390:	9002      	str	r0, [sp, #8]
 800f392:	e00c      	b.n	800f3ae <uxr_create_session+0x8a>
 800f394:	f000 fc9a 	bl	800fccc <uxr_millis>
 800f398:	9b02      	ldr	r3, [sp, #8]
 800f39a:	7962      	ldrb	r2, [r4, #5]
 800f39c:	1ac0      	subs	r0, r0, r3
 800f39e:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	f340 8094 	ble.w	800f4d0 <uxr_create_session+0x1ac>
 800f3a8:	2aff      	cmp	r2, #255	; 0xff
 800f3aa:	f040 8097 	bne.w	800f4dc <uxr_create_session+0x1b8>
 800f3ae:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800f3b0:	a905      	add	r1, sp, #20
 800f3b2:	6895      	ldr	r5, [r2, #8]
 800f3b4:	6810      	ldr	r0, [r2, #0]
 800f3b6:	aa06      	add	r2, sp, #24
 800f3b8:	47a8      	blx	r5
 800f3ba:	2800      	cmp	r0, #0
 800f3bc:	d0ea      	beq.n	800f394 <uxr_create_session+0x70>
 800f3be:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 800f3c2:	a818      	add	r0, sp, #96	; 0x60
 800f3c4:	f7ff f848 	bl	800e458 <ucdr_init_buffer>
 800f3c8:	2500      	movs	r5, #0
 800f3ca:	f10d 0312 	add.w	r3, sp, #18
 800f3ce:	aa04      	add	r2, sp, #16
 800f3d0:	a918      	add	r1, sp, #96	; 0x60
 800f3d2:	4620      	mov	r0, r4
 800f3d4:	f88d 5010 	strb.w	r5, [sp, #16]
 800f3d8:	f000 fa7e 	bl	800f8d8 <uxr_read_session_header>
 800f3dc:	2800      	cmp	r0, #0
 800f3de:	d0d9      	beq.n	800f394 <uxr_create_session+0x70>
 800f3e0:	4629      	mov	r1, r5
 800f3e2:	f89d 0010 	ldrb.w	r0, [sp, #16]
 800f3e6:	f000 fb1b 	bl	800fa20 <uxr_stream_id_from_raw>
 800f3ea:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800f3ee:	2f01      	cmp	r7, #1
 800f3f0:	e9cd 0007 	strd	r0, r0, [sp, #28]
 800f3f4:	f8bd b012 	ldrh.w	fp, [sp, #18]
 800f3f8:	fa5f f880 	uxtb.w	r8, r0
 800f3fc:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800f400:	d04d      	beq.n	800f49e <uxr_create_session+0x17a>
 800f402:	2f02      	cmp	r7, #2
 800f404:	d00c      	beq.n	800f420 <uxr_create_session+0xfc>
 800f406:	2f00      	cmp	r7, #0
 800f408:	d1c4      	bne.n	800f394 <uxr_create_session+0x70>
 800f40a:	4639      	mov	r1, r7
 800f40c:	4638      	mov	r0, r7
 800f40e:	f000 fb07 	bl	800fa20 <uxr_stream_id_from_raw>
 800f412:	a918      	add	r1, sp, #96	; 0x60
 800f414:	4602      	mov	r2, r0
 800f416:	4620      	mov	r0, r4
 800f418:	9208      	str	r2, [sp, #32]
 800f41a:	f7ff fc45 	bl	800eca8 <read_submessage_list>
 800f41e:	e7b9      	b.n	800f394 <uxr_create_session+0x70>
 800f420:	4629      	mov	r1, r5
 800f422:	4650      	mov	r0, sl
 800f424:	f000 fbea 	bl	800fbfc <uxr_get_input_reliable_stream>
 800f428:	4606      	mov	r6, r0
 800f42a:	b390      	cbz	r0, 800f492 <uxr_create_session+0x16e>
 800f42c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f42e:	9203      	str	r2, [sp, #12]
 800f430:	a818      	add	r0, sp, #96	; 0x60
 800f432:	f7ff f841 	bl	800e4b8 <ucdr_buffer_remaining>
 800f436:	4603      	mov	r3, r0
 800f438:	f10d 0011 	add.w	r0, sp, #17
 800f43c:	9000      	str	r0, [sp, #0]
 800f43e:	9a03      	ldr	r2, [sp, #12]
 800f440:	4659      	mov	r1, fp
 800f442:	4630      	mov	r0, r6
 800f444:	f004 ff7c 	bl	8014340 <uxr_receive_reliable_message>
 800f448:	b318      	cbz	r0, 800f492 <uxr_create_session+0x16e>
 800f44a:	f89d 3011 	ldrb.w	r3, [sp, #17]
 800f44e:	b9b3      	cbnz	r3, 800f47e <uxr_create_session+0x15a>
 800f450:	f88d 8020 	strb.w	r8, [sp, #32]
 800f454:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 800f458:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
 800f45c:	9a08      	ldr	r2, [sp, #32]
 800f45e:	a918      	add	r1, sp, #96	; 0x60
 800f460:	4620      	mov	r0, r4
 800f462:	f7ff fc21 	bl	800eca8 <read_submessage_list>
 800f466:	e00a      	b.n	800f47e <uxr_create_session+0x15a>
 800f468:	f04f 0302 	mov.w	r3, #2
 800f46c:	f88d 8020 	strb.w	r8, [sp, #32]
 800f470:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 800f474:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 800f478:	9a08      	ldr	r2, [sp, #32]
 800f47a:	f7ff fc15 	bl	800eca8 <read_submessage_list>
 800f47e:	a920      	add	r1, sp, #128	; 0x80
 800f480:	2204      	movs	r2, #4
 800f482:	4630      	mov	r0, r6
 800f484:	f004 ffdc 	bl	8014440 <uxr_next_input_reliable_buffer_available>
 800f488:	4603      	mov	r3, r0
 800f48a:	a920      	add	r1, sp, #128	; 0x80
 800f48c:	4620      	mov	r0, r4
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d1ea      	bne.n	800f468 <uxr_create_session+0x144>
 800f492:	462a      	mov	r2, r5
 800f494:	4641      	mov	r1, r8
 800f496:	4620      	mov	r0, r4
 800f498:	f7ff fa84 	bl	800e9a4 <write_submessage_acknack.isra.0>
 800f49c:	e77a      	b.n	800f394 <uxr_create_session+0x70>
 800f49e:	4629      	mov	r1, r5
 800f4a0:	4650      	mov	r0, sl
 800f4a2:	f000 fba1 	bl	800fbe8 <uxr_get_input_best_effort_stream>
 800f4a6:	2800      	cmp	r0, #0
 800f4a8:	f43f af74 	beq.w	800f394 <uxr_create_session+0x70>
 800f4ac:	4659      	mov	r1, fp
 800f4ae:	f004 fec3 	bl	8014238 <uxr_receive_best_effort_message>
 800f4b2:	2800      	cmp	r0, #0
 800f4b4:	f43f af6e 	beq.w	800f394 <uxr_create_session+0x70>
 800f4b8:	f88d 8020 	strb.w	r8, [sp, #32]
 800f4bc:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 800f4c0:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
 800f4c4:	9a08      	ldr	r2, [sp, #32]
 800f4c6:	a918      	add	r1, sp, #96	; 0x60
 800f4c8:	4620      	mov	r0, r4
 800f4ca:	f7ff fbed 	bl	800eca8 <read_submessage_list>
 800f4ce:	e761      	b.n	800f394 <uxr_create_session+0x70>
 800f4d0:	f1b9 0901 	subs.w	r9, r9, #1
 800f4d4:	d002      	beq.n	800f4dc <uxr_create_session+0x1b8>
 800f4d6:	2aff      	cmp	r2, #255	; 0xff
 800f4d8:	f43f af4f 	beq.w	800f37a <uxr_create_session+0x56>
 800f4dc:	b12a      	cbz	r2, 800f4ea <uxr_create_session+0x1c6>
 800f4de:	2000      	movs	r0, #0
 800f4e0:	b029      	add	sp, #164	; 0xa4
 800f4e2:	ecbd 8b02 	vpop	{d8}
 800f4e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4ea:	4650      	mov	r0, sl
 800f4ec:	f000 face 	bl	800fa8c <uxr_reset_stream_storage>
 800f4f0:	2001      	movs	r0, #1
 800f4f2:	b029      	add	sp, #164	; 0xa4
 800f4f4:	ecbd 8b02 	vpop	{d8}
 800f4f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f4fc <wait_session_status>:
 800f4fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f500:	4604      	mov	r4, r0
 800f502:	b09d      	sub	sp, #116	; 0x74
 800f504:	20ff      	movs	r0, #255	; 0xff
 800f506:	7160      	strb	r0, [r4, #5]
 800f508:	9304      	str	r3, [sp, #16]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	f000 80b8 	beq.w	800f680 <wait_session_status+0x184>
 800f510:	2300      	movs	r3, #0
 800f512:	468b      	mov	fp, r1
 800f514:	4692      	mov	sl, r2
 800f516:	9303      	str	r3, [sp, #12]
 800f518:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800f51a:	4652      	mov	r2, sl
 800f51c:	e9d3 0500 	ldrd	r0, r5, [r3]
 800f520:	4659      	mov	r1, fp
 800f522:	47a8      	blx	r5
 800f524:	f000 fbd2 	bl	800fccc <uxr_millis>
 800f528:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f52c:	4605      	mov	r5, r0
 800f52e:	e009      	b.n	800f544 <wait_session_status+0x48>
 800f530:	f000 fbcc 	bl	800fccc <uxr_millis>
 800f534:	1b40      	subs	r0, r0, r5
 800f536:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	dd42      	ble.n	800f5c4 <wait_session_status+0xc8>
 800f53e:	7960      	ldrb	r0, [r4, #5]
 800f540:	28ff      	cmp	r0, #255	; 0xff
 800f542:	d148      	bne.n	800f5d6 <wait_session_status+0xda>
 800f544:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800f546:	a908      	add	r1, sp, #32
 800f548:	6896      	ldr	r6, [r2, #8]
 800f54a:	6810      	ldr	r0, [r2, #0]
 800f54c:	aa09      	add	r2, sp, #36	; 0x24
 800f54e:	47b0      	blx	r6
 800f550:	2800      	cmp	r0, #0
 800f552:	d0ed      	beq.n	800f530 <wait_session_status+0x34>
 800f554:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800f558:	a80c      	add	r0, sp, #48	; 0x30
 800f55a:	f7fe ff7d 	bl	800e458 <ucdr_init_buffer>
 800f55e:	2600      	movs	r6, #0
 800f560:	f10d 031e 	add.w	r3, sp, #30
 800f564:	aa07      	add	r2, sp, #28
 800f566:	a90c      	add	r1, sp, #48	; 0x30
 800f568:	4620      	mov	r0, r4
 800f56a:	f88d 601c 	strb.w	r6, [sp, #28]
 800f56e:	f000 f9b3 	bl	800f8d8 <uxr_read_session_header>
 800f572:	2800      	cmp	r0, #0
 800f574:	d0dc      	beq.n	800f530 <wait_session_status+0x34>
 800f576:	4631      	mov	r1, r6
 800f578:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800f57c:	f000 fa50 	bl	800fa20 <uxr_stream_id_from_raw>
 800f580:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800f584:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800f588:	9302      	str	r3, [sp, #8]
 800f58a:	2f01      	cmp	r7, #1
 800f58c:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 800f590:	fa5f f880 	uxtb.w	r8, r0
 800f594:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800f598:	d058      	beq.n	800f64c <wait_session_status+0x150>
 800f59a:	2f02      	cmp	r7, #2
 800f59c:	d021      	beq.n	800f5e2 <wait_session_status+0xe6>
 800f59e:	2f00      	cmp	r7, #0
 800f5a0:	d1c6      	bne.n	800f530 <wait_session_status+0x34>
 800f5a2:	4639      	mov	r1, r7
 800f5a4:	4638      	mov	r0, r7
 800f5a6:	f000 fa3b 	bl	800fa20 <uxr_stream_id_from_raw>
 800f5aa:	a90c      	add	r1, sp, #48	; 0x30
 800f5ac:	4602      	mov	r2, r0
 800f5ae:	4620      	mov	r0, r4
 800f5b0:	920b      	str	r2, [sp, #44]	; 0x2c
 800f5b2:	f7ff fb79 	bl	800eca8 <read_submessage_list>
 800f5b6:	f000 fb89 	bl	800fccc <uxr_millis>
 800f5ba:	1b40      	subs	r0, r0, r5
 800f5bc:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	dcbc      	bgt.n	800f53e <wait_session_status+0x42>
 800f5c4:	9b03      	ldr	r3, [sp, #12]
 800f5c6:	9a04      	ldr	r2, [sp, #16]
 800f5c8:	7960      	ldrb	r0, [r4, #5]
 800f5ca:	3301      	adds	r3, #1
 800f5cc:	429a      	cmp	r2, r3
 800f5ce:	9303      	str	r3, [sp, #12]
 800f5d0:	d001      	beq.n	800f5d6 <wait_session_status+0xda>
 800f5d2:	28ff      	cmp	r0, #255	; 0xff
 800f5d4:	d0a0      	beq.n	800f518 <wait_session_status+0x1c>
 800f5d6:	38ff      	subs	r0, #255	; 0xff
 800f5d8:	bf18      	it	ne
 800f5da:	2001      	movne	r0, #1
 800f5dc:	b01d      	add	sp, #116	; 0x74
 800f5de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5e2:	4631      	mov	r1, r6
 800f5e4:	f104 0008 	add.w	r0, r4, #8
 800f5e8:	f000 fb08 	bl	800fbfc <uxr_get_input_reliable_stream>
 800f5ec:	4681      	mov	r9, r0
 800f5ee:	b338      	cbz	r0, 800f640 <wait_session_status+0x144>
 800f5f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f5f2:	9205      	str	r2, [sp, #20]
 800f5f4:	a80c      	add	r0, sp, #48	; 0x30
 800f5f6:	f7fe ff5f 	bl	800e4b8 <ucdr_buffer_remaining>
 800f5fa:	4603      	mov	r3, r0
 800f5fc:	f10d 001d 	add.w	r0, sp, #29
 800f600:	9000      	str	r0, [sp, #0]
 800f602:	9a05      	ldr	r2, [sp, #20]
 800f604:	9902      	ldr	r1, [sp, #8]
 800f606:	4648      	mov	r0, r9
 800f608:	f004 fe9a 	bl	8014340 <uxr_receive_reliable_message>
 800f60c:	b1c0      	cbz	r0, 800f640 <wait_session_status+0x144>
 800f60e:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800f612:	b95b      	cbnz	r3, 800f62c <wait_session_status+0x130>
 800f614:	e03c      	b.n	800f690 <wait_session_status+0x194>
 800f616:	f04f 0302 	mov.w	r3, #2
 800f61a:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 800f61e:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 800f622:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 800f626:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f628:	f7ff fb3e 	bl	800eca8 <read_submessage_list>
 800f62c:	a914      	add	r1, sp, #80	; 0x50
 800f62e:	2204      	movs	r2, #4
 800f630:	4648      	mov	r0, r9
 800f632:	f004 ff05 	bl	8014440 <uxr_next_input_reliable_buffer_available>
 800f636:	4603      	mov	r3, r0
 800f638:	a914      	add	r1, sp, #80	; 0x50
 800f63a:	4620      	mov	r0, r4
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d1ea      	bne.n	800f616 <wait_session_status+0x11a>
 800f640:	4632      	mov	r2, r6
 800f642:	4641      	mov	r1, r8
 800f644:	4620      	mov	r0, r4
 800f646:	f7ff f9ad 	bl	800e9a4 <write_submessage_acknack.isra.0>
 800f64a:	e771      	b.n	800f530 <wait_session_status+0x34>
 800f64c:	4631      	mov	r1, r6
 800f64e:	f104 0008 	add.w	r0, r4, #8
 800f652:	f000 fac9 	bl	800fbe8 <uxr_get_input_best_effort_stream>
 800f656:	2800      	cmp	r0, #0
 800f658:	f43f af6a 	beq.w	800f530 <wait_session_status+0x34>
 800f65c:	9902      	ldr	r1, [sp, #8]
 800f65e:	f004 fdeb 	bl	8014238 <uxr_receive_best_effort_message>
 800f662:	2800      	cmp	r0, #0
 800f664:	f43f af64 	beq.w	800f530 <wait_session_status+0x34>
 800f668:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 800f66c:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 800f670:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800f674:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f676:	a90c      	add	r1, sp, #48	; 0x30
 800f678:	4620      	mov	r0, r4
 800f67a:	f7ff fb15 	bl	800eca8 <read_submessage_list>
 800f67e:	e757      	b.n	800f530 <wait_session_status+0x34>
 800f680:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800f682:	e9d3 0400 	ldrd	r0, r4, [r3]
 800f686:	47a0      	blx	r4
 800f688:	2001      	movs	r0, #1
 800f68a:	b01d      	add	sp, #116	; 0x74
 800f68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f690:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 800f694:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 800f698:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800f69c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f69e:	a90c      	add	r1, sp, #48	; 0x30
 800f6a0:	4620      	mov	r0, r4
 800f6a2:	f7ff fb01 	bl	800eca8 <read_submessage_list>
 800f6a6:	e7c1      	b.n	800f62c <wait_session_status+0x130>

0800f6a8 <uxr_delete_session_retries>:
 800f6a8:	b530      	push	{r4, r5, lr}
 800f6aa:	b08f      	sub	sp, #60	; 0x3c
 800f6ac:	4604      	mov	r4, r0
 800f6ae:	460d      	mov	r5, r1
 800f6b0:	f000 f954 	bl	800f95c <uxr_session_header_offset>
 800f6b4:	2300      	movs	r3, #0
 800f6b6:	2210      	movs	r2, #16
 800f6b8:	9000      	str	r0, [sp, #0]
 800f6ba:	a902      	add	r1, sp, #8
 800f6bc:	a806      	add	r0, sp, #24
 800f6be:	f7fe feb9 	bl	800e434 <ucdr_init_buffer_origin_offset>
 800f6c2:	a906      	add	r1, sp, #24
 800f6c4:	4620      	mov	r0, r4
 800f6c6:	f000 f897 	bl	800f7f8 <uxr_buffer_delete_session>
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	4611      	mov	r1, r2
 800f6ce:	9b06      	ldr	r3, [sp, #24]
 800f6d0:	4620      	mov	r0, r4
 800f6d2:	f000 f8eb 	bl	800f8ac <uxr_stamp_session_header>
 800f6d6:	a806      	add	r0, sp, #24
 800f6d8:	f7fe feea 	bl	800e4b0 <ucdr_buffer_length>
 800f6dc:	462b      	mov	r3, r5
 800f6de:	4602      	mov	r2, r0
 800f6e0:	a902      	add	r1, sp, #8
 800f6e2:	4620      	mov	r0, r4
 800f6e4:	f7ff ff0a 	bl	800f4fc <wait_session_status>
 800f6e8:	b118      	cbz	r0, 800f6f2 <uxr_delete_session_retries+0x4a>
 800f6ea:	7960      	ldrb	r0, [r4, #5]
 800f6ec:	fab0 f080 	clz	r0, r0
 800f6f0:	0940      	lsrs	r0, r0, #5
 800f6f2:	b00f      	add	sp, #60	; 0x3c
 800f6f4:	bd30      	pop	{r4, r5, pc}
 800f6f6:	bf00      	nop

0800f6f8 <uxr_prepare_stream_to_write_submessage>:
 800f6f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6fc:	b082      	sub	sp, #8
 800f6fe:	4682      	mov	sl, r0
 800f700:	4610      	mov	r0, r2
 800f702:	4615      	mov	r5, r2
 800f704:	461e      	mov	r6, r3
 800f706:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800f70a:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800f70e:	9101      	str	r1, [sp, #4]
 800f710:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800f714:	f000 fad4 	bl	800fcc0 <uxr_submessage_padding>
 800f718:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f71c:	f105 0904 	add.w	r9, r5, #4
 800f720:	2b01      	cmp	r3, #1
 800f722:	4481      	add	r9, r0
 800f724:	d01d      	beq.n	800f762 <uxr_prepare_stream_to_write_submessage+0x6a>
 800f726:	2b02      	cmp	r3, #2
 800f728:	d116      	bne.n	800f758 <uxr_prepare_stream_to_write_submessage+0x60>
 800f72a:	4621      	mov	r1, r4
 800f72c:	f10a 0008 	add.w	r0, sl, #8
 800f730:	f000 fa4e 	bl	800fbd0 <uxr_get_output_reliable_stream>
 800f734:	4604      	mov	r4, r0
 800f736:	b158      	cbz	r0, 800f750 <uxr_prepare_stream_to_write_submessage+0x58>
 800f738:	4649      	mov	r1, r9
 800f73a:	4632      	mov	r2, r6
 800f73c:	f005 f836 	bl	80147ac <uxr_prepare_reliable_buffer_to_write>
 800f740:	4604      	mov	r4, r0
 800f742:	b12c      	cbz	r4, 800f750 <uxr_prepare_stream_to_write_submessage+0x58>
 800f744:	4643      	mov	r3, r8
 800f746:	b2aa      	uxth	r2, r5
 800f748:	4639      	mov	r1, r7
 800f74a:	4630      	mov	r0, r6
 800f74c:	f000 fa78 	bl	800fc40 <uxr_buffer_submessage_header>
 800f750:	4620      	mov	r0, r4
 800f752:	b002      	add	sp, #8
 800f754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f758:	2400      	movs	r4, #0
 800f75a:	4620      	mov	r0, r4
 800f75c:	b002      	add	sp, #8
 800f75e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f762:	4621      	mov	r1, r4
 800f764:	f10a 0008 	add.w	r0, sl, #8
 800f768:	f000 fa2a 	bl	800fbc0 <uxr_get_output_best_effort_stream>
 800f76c:	4604      	mov	r4, r0
 800f76e:	2800      	cmp	r0, #0
 800f770:	d0ee      	beq.n	800f750 <uxr_prepare_stream_to_write_submessage+0x58>
 800f772:	4649      	mov	r1, r9
 800f774:	4632      	mov	r2, r6
 800f776:	f004 ff55 	bl	8014624 <uxr_prepare_best_effort_buffer_to_write>
 800f77a:	4604      	mov	r4, r0
 800f77c:	e7e1      	b.n	800f742 <uxr_prepare_stream_to_write_submessage+0x4a>
 800f77e:	bf00      	nop

0800f780 <uxr_init_session_info>:
 800f780:	b470      	push	{r4, r5, r6}
 800f782:	7102      	strb	r2, [r0, #4]
 800f784:	0e16      	lsrs	r6, r2, #24
 800f786:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800f78a:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800f78e:	23ff      	movs	r3, #255	; 0xff
 800f790:	2209      	movs	r2, #9
 800f792:	7046      	strb	r6, [r0, #1]
 800f794:	7085      	strb	r5, [r0, #2]
 800f796:	70c4      	strb	r4, [r0, #3]
 800f798:	7001      	strb	r1, [r0, #0]
 800f79a:	bc70      	pop	{r4, r5, r6}
 800f79c:	80c2      	strh	r2, [r0, #6]
 800f79e:	7143      	strb	r3, [r0, #5]
 800f7a0:	4770      	bx	lr
 800f7a2:	bf00      	nop

0800f7a4 <uxr_buffer_create_session>:
 800f7a4:	b570      	push	{r4, r5, r6, lr}
 800f7a6:	b088      	sub	sp, #32
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	4d12      	ldr	r5, [pc, #72]	; (800f7f4 <uxr_buffer_create_session+0x50>)
 800f7ac:	9307      	str	r3, [sp, #28]
 800f7ae:	f8ad 201c 	strh.w	r2, [sp, #28]
 800f7b2:	7802      	ldrb	r2, [r0, #0]
 800f7b4:	9303      	str	r3, [sp, #12]
 800f7b6:	460c      	mov	r4, r1
 800f7b8:	f88d 200c 	strb.w	r2, [sp, #12]
 800f7bc:	2101      	movs	r1, #1
 800f7be:	682a      	ldr	r2, [r5, #0]
 800f7c0:	f8d0 6001 	ldr.w	r6, [r0, #1]
 800f7c4:	88ad      	ldrh	r5, [r5, #4]
 800f7c6:	80c1      	strh	r1, [r0, #6]
 800f7c8:	f8ad 1004 	strh.w	r1, [sp, #4]
 800f7cc:	9200      	str	r2, [sp, #0]
 800f7ce:	4619      	mov	r1, r3
 800f7d0:	2210      	movs	r2, #16
 800f7d2:	4620      	mov	r0, r4
 800f7d4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800f7d8:	9306      	str	r3, [sp, #24]
 800f7da:	f88d 300d 	strb.w	r3, [sp, #13]
 800f7de:	9602      	str	r6, [sp, #8]
 800f7e0:	f8ad 5006 	strh.w	r5, [sp, #6]
 800f7e4:	f000 fa2c 	bl	800fc40 <uxr_buffer_submessage_header>
 800f7e8:	4620      	mov	r0, r4
 800f7ea:	4669      	mov	r1, sp
 800f7ec:	f001 f964 	bl	8010ab8 <uxr_serialize_CREATE_CLIENT_Payload>
 800f7f0:	b008      	add	sp, #32
 800f7f2:	bd70      	pop	{r4, r5, r6, pc}
 800f7f4:	080174ec 	.word	0x080174ec

0800f7f8 <uxr_buffer_delete_session>:
 800f7f8:	b530      	push	{r4, r5, lr}
 800f7fa:	4b0c      	ldr	r3, [pc, #48]	; (800f82c <uxr_buffer_delete_session+0x34>)
 800f7fc:	b083      	sub	sp, #12
 800f7fe:	891b      	ldrh	r3, [r3, #8]
 800f800:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f804:	2202      	movs	r2, #2
 800f806:	460c      	mov	r4, r1
 800f808:	80c2      	strh	r2, [r0, #6]
 800f80a:	2300      	movs	r3, #0
 800f80c:	2204      	movs	r2, #4
 800f80e:	4608      	mov	r0, r1
 800f810:	f44f 7500 	mov.w	r5, #512	; 0x200
 800f814:	2103      	movs	r1, #3
 800f816:	f8ad 5004 	strh.w	r5, [sp, #4]
 800f81a:	f000 fa11 	bl	800fc40 <uxr_buffer_submessage_header>
 800f81e:	4620      	mov	r0, r4
 800f820:	a901      	add	r1, sp, #4
 800f822:	f001 f9f7 	bl	8010c14 <uxr_serialize_DELETE_Payload>
 800f826:	b003      	add	sp, #12
 800f828:	bd30      	pop	{r4, r5, pc}
 800f82a:	bf00      	nop
 800f82c:	080174ec 	.word	0x080174ec

0800f830 <uxr_read_create_session_status>:
 800f830:	b510      	push	{r4, lr}
 800f832:	b088      	sub	sp, #32
 800f834:	4604      	mov	r4, r0
 800f836:	4608      	mov	r0, r1
 800f838:	a901      	add	r1, sp, #4
 800f83a:	f001 f9fb 	bl	8010c34 <uxr_deserialize_STATUS_AGENT_Payload>
 800f83e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f842:	7163      	strb	r3, [r4, #5]
 800f844:	b008      	add	sp, #32
 800f846:	bd10      	pop	{r4, pc}

0800f848 <uxr_read_delete_session_status>:
 800f848:	b510      	push	{r4, lr}
 800f84a:	4604      	mov	r4, r0
 800f84c:	b084      	sub	sp, #16
 800f84e:	4608      	mov	r0, r1
 800f850:	a902      	add	r1, sp, #8
 800f852:	f001 fa1f 	bl	8010c94 <uxr_deserialize_STATUS_Payload>
 800f856:	88e3      	ldrh	r3, [r4, #6]
 800f858:	2b02      	cmp	r3, #2
 800f85a:	d001      	beq.n	800f860 <uxr_read_delete_session_status+0x18>
 800f85c:	b004      	add	sp, #16
 800f85e:	bd10      	pop	{r4, pc}
 800f860:	f10d 000a 	add.w	r0, sp, #10
 800f864:	f7ff f826 	bl	800e8b4 <uxr_object_id_from_raw>
 800f868:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800f86c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800f870:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800f874:	b29b      	uxth	r3, r3
 800f876:	2b02      	cmp	r3, #2
 800f878:	bf04      	itt	eq
 800f87a:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800f87e:	7163      	strbeq	r3, [r4, #5]
 800f880:	b004      	add	sp, #16
 800f882:	bd10      	pop	{r4, pc}

0800f884 <uxr_stamp_create_session_header>:
 800f884:	b510      	push	{r4, lr}
 800f886:	4604      	mov	r4, r0
 800f888:	b08a      	sub	sp, #40	; 0x28
 800f88a:	a802      	add	r0, sp, #8
 800f88c:	2208      	movs	r2, #8
 800f88e:	f7fe fde3 	bl	800e458 <ucdr_init_buffer>
 800f892:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f896:	9400      	str	r4, [sp, #0]
 800f898:	2300      	movs	r3, #0
 800f89a:	a802      	add	r0, sp, #8
 800f89c:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800f8a0:	461a      	mov	r2, r3
 800f8a2:	f000 fbcb 	bl	801003c <uxr_serialize_message_header>
 800f8a6:	b00a      	add	sp, #40	; 0x28
 800f8a8:	bd10      	pop	{r4, pc}
 800f8aa:	bf00      	nop

0800f8ac <uxr_stamp_session_header>:
 800f8ac:	b570      	push	{r4, r5, r6, lr}
 800f8ae:	4604      	mov	r4, r0
 800f8b0:	b08c      	sub	sp, #48	; 0x30
 800f8b2:	460d      	mov	r5, r1
 800f8b4:	4616      	mov	r6, r2
 800f8b6:	4619      	mov	r1, r3
 800f8b8:	a804      	add	r0, sp, #16
 800f8ba:	2208      	movs	r2, #8
 800f8bc:	9603      	str	r6, [sp, #12]
 800f8be:	f7fe fdcb 	bl	800e458 <ucdr_init_buffer>
 800f8c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8c6:	9b03      	ldr	r3, [sp, #12]
 800f8c8:	9400      	str	r4, [sp, #0]
 800f8ca:	462a      	mov	r2, r5
 800f8cc:	a804      	add	r0, sp, #16
 800f8ce:	f000 fbb5 	bl	801003c <uxr_serialize_message_header>
 800f8d2:	b00c      	add	sp, #48	; 0x30
 800f8d4:	bd70      	pop	{r4, r5, r6, pc}
 800f8d6:	bf00      	nop

0800f8d8 <uxr_read_session_header>:
 800f8d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8dc:	4607      	mov	r7, r0
 800f8de:	b084      	sub	sp, #16
 800f8e0:	4608      	mov	r0, r1
 800f8e2:	460c      	mov	r4, r1
 800f8e4:	4615      	mov	r5, r2
 800f8e6:	461e      	mov	r6, r3
 800f8e8:	f7fe fde6 	bl	800e4b8 <ucdr_buffer_remaining>
 800f8ec:	2808      	cmp	r0, #8
 800f8ee:	d803      	bhi.n	800f8f8 <uxr_read_session_header+0x20>
 800f8f0:	2000      	movs	r0, #0
 800f8f2:	b004      	add	sp, #16
 800f8f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8f8:	f10d 080c 	add.w	r8, sp, #12
 800f8fc:	4633      	mov	r3, r6
 800f8fe:	462a      	mov	r2, r5
 800f900:	4620      	mov	r0, r4
 800f902:	f8cd 8000 	str.w	r8, [sp]
 800f906:	f10d 010b 	add.w	r1, sp, #11
 800f90a:	f000 fbb5 	bl	8010078 <uxr_deserialize_message_header>
 800f90e:	783a      	ldrb	r2, [r7, #0]
 800f910:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800f914:	4293      	cmp	r3, r2
 800f916:	d1eb      	bne.n	800f8f0 <uxr_read_session_header+0x18>
 800f918:	061b      	lsls	r3, r3, #24
 800f91a:	d41c      	bmi.n	800f956 <uxr_read_session_header+0x7e>
 800f91c:	f898 2000 	ldrb.w	r2, [r8]
 800f920:	787b      	ldrb	r3, [r7, #1]
 800f922:	429a      	cmp	r2, r3
 800f924:	d003      	beq.n	800f92e <uxr_read_session_header+0x56>
 800f926:	2001      	movs	r0, #1
 800f928:	f080 0001 	eor.w	r0, r0, #1
 800f92c:	e7e1      	b.n	800f8f2 <uxr_read_session_header+0x1a>
 800f92e:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800f932:	78bb      	ldrb	r3, [r7, #2]
 800f934:	429a      	cmp	r2, r3
 800f936:	f107 0102 	add.w	r1, r7, #2
 800f93a:	d1f4      	bne.n	800f926 <uxr_read_session_header+0x4e>
 800f93c:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800f940:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f944:	429a      	cmp	r2, r3
 800f946:	d1ee      	bne.n	800f926 <uxr_read_session_header+0x4e>
 800f948:	784b      	ldrb	r3, [r1, #1]
 800f94a:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800f94e:	429a      	cmp	r2, r3
 800f950:	d1e9      	bne.n	800f926 <uxr_read_session_header+0x4e>
 800f952:	2000      	movs	r0, #0
 800f954:	e7e8      	b.n	800f928 <uxr_read_session_header+0x50>
 800f956:	2001      	movs	r0, #1
 800f958:	e7cb      	b.n	800f8f2 <uxr_read_session_header+0x1a>
 800f95a:	bf00      	nop

0800f95c <uxr_session_header_offset>:
 800f95c:	f990 3000 	ldrsb.w	r3, [r0]
 800f960:	2b00      	cmp	r3, #0
 800f962:	bfac      	ite	ge
 800f964:	2008      	movge	r0, #8
 800f966:	2004      	movlt	r0, #4
 800f968:	4770      	bx	lr
 800f96a:	bf00      	nop

0800f96c <uxr_init_base_object_request>:
 800f96c:	b530      	push	{r4, r5, lr}
 800f96e:	88c3      	ldrh	r3, [r0, #6]
 800f970:	b083      	sub	sp, #12
 800f972:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 800f976:	9101      	str	r1, [sp, #4]
 800f978:	f1a3 010a 	sub.w	r1, r3, #10
 800f97c:	b289      	uxth	r1, r1
 800f97e:	42a1      	cmp	r1, r4
 800f980:	d80e      	bhi.n	800f9a0 <uxr_init_base_object_request+0x34>
 800f982:	3301      	adds	r3, #1
 800f984:	b29c      	uxth	r4, r3
 800f986:	f3c3 2507 	ubfx	r5, r3, #8, #8
 800f98a:	b2db      	uxtb	r3, r3
 800f98c:	80c4      	strh	r4, [r0, #6]
 800f98e:	1c91      	adds	r1, r2, #2
 800f990:	9801      	ldr	r0, [sp, #4]
 800f992:	7015      	strb	r5, [r2, #0]
 800f994:	7053      	strb	r3, [r2, #1]
 800f996:	f7fe ffa1 	bl	800e8dc <uxr_object_id_to_raw>
 800f99a:	4620      	mov	r0, r4
 800f99c:	b003      	add	sp, #12
 800f99e:	bd30      	pop	{r4, r5, pc}
 800f9a0:	230a      	movs	r3, #10
 800f9a2:	461c      	mov	r4, r3
 800f9a4:	2500      	movs	r5, #0
 800f9a6:	e7f1      	b.n	800f98c <uxr_init_base_object_request+0x20>

0800f9a8 <uxr_parse_base_object_request>:
 800f9a8:	b570      	push	{r4, r5, r6, lr}
 800f9aa:	4604      	mov	r4, r0
 800f9ac:	3002      	adds	r0, #2
 800f9ae:	460d      	mov	r5, r1
 800f9b0:	4616      	mov	r6, r2
 800f9b2:	f7fe ff7f 	bl	800e8b4 <uxr_object_id_from_raw>
 800f9b6:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800f9ba:	8028      	strh	r0, [r5, #0]
 800f9bc:	806b      	strh	r3, [r5, #2]
 800f9be:	7822      	ldrb	r2, [r4, #0]
 800f9c0:	7863      	ldrb	r3, [r4, #1]
 800f9c2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800f9c6:	8033      	strh	r3, [r6, #0]
 800f9c8:	bd70      	pop	{r4, r5, r6, pc}
 800f9ca:	bf00      	nop

0800f9cc <uxr_stream_id>:
 800f9cc:	b410      	push	{r4}
 800f9ce:	2901      	cmp	r1, #1
 800f9d0:	b083      	sub	sp, #12
 800f9d2:	d01f      	beq.n	800fa14 <uxr_stream_id+0x48>
 800f9d4:	2902      	cmp	r1, #2
 800f9d6:	f04f 0400 	mov.w	r4, #0
 800f9da:	d01e      	beq.n	800fa1a <uxr_stream_id+0x4e>
 800f9dc:	2300      	movs	r3, #0
 800f9de:	f364 0307 	bfi	r3, r4, #0, #8
 800f9e2:	f360 230f 	bfi	r3, r0, #8, #8
 800f9e6:	f361 4317 	bfi	r3, r1, #16, #8
 800f9ea:	f362 631f 	bfi	r3, r2, #24, #8
 800f9ee:	b2da      	uxtb	r2, r3
 800f9f0:	2000      	movs	r0, #0
 800f9f2:	f362 0007 	bfi	r0, r2, #0, #8
 800f9f6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800f9fa:	f362 200f 	bfi	r0, r2, #8, #8
 800f9fe:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800fa02:	f362 4017 	bfi	r0, r2, #16, #8
 800fa06:	0e1b      	lsrs	r3, r3, #24
 800fa08:	f363 601f 	bfi	r0, r3, #24, #8
 800fa0c:	b003      	add	sp, #12
 800fa0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa12:	4770      	bx	lr
 800fa14:	1c44      	adds	r4, r0, #1
 800fa16:	b2e4      	uxtb	r4, r4
 800fa18:	e7e0      	b.n	800f9dc <uxr_stream_id+0x10>
 800fa1a:	f080 0480 	eor.w	r4, r0, #128	; 0x80
 800fa1e:	e7dd      	b.n	800f9dc <uxr_stream_id+0x10>

0800fa20 <uxr_stream_id_from_raw>:
 800fa20:	b410      	push	{r4}
 800fa22:	b083      	sub	sp, #12
 800fa24:	b128      	cbz	r0, 800fa32 <uxr_stream_id_from_raw+0x12>
 800fa26:	0603      	lsls	r3, r0, #24
 800fa28:	d421      	bmi.n	800fa6e <uxr_stream_id_from_raw+0x4e>
 800fa2a:	1e42      	subs	r2, r0, #1
 800fa2c:	b2d2      	uxtb	r2, r2
 800fa2e:	2401      	movs	r4, #1
 800fa30:	e001      	b.n	800fa36 <uxr_stream_id_from_raw+0x16>
 800fa32:	4604      	mov	r4, r0
 800fa34:	4602      	mov	r2, r0
 800fa36:	2300      	movs	r3, #0
 800fa38:	f360 0307 	bfi	r3, r0, #0, #8
 800fa3c:	f362 230f 	bfi	r3, r2, #8, #8
 800fa40:	f364 4317 	bfi	r3, r4, #16, #8
 800fa44:	f361 631f 	bfi	r3, r1, #24, #8
 800fa48:	b2da      	uxtb	r2, r3
 800fa4a:	2000      	movs	r0, #0
 800fa4c:	f362 0007 	bfi	r0, r2, #0, #8
 800fa50:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800fa54:	f362 200f 	bfi	r0, r2, #8, #8
 800fa58:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800fa5c:	f362 4017 	bfi	r0, r2, #16, #8
 800fa60:	0e1b      	lsrs	r3, r3, #24
 800fa62:	f363 601f 	bfi	r0, r3, #24, #8
 800fa66:	b003      	add	sp, #12
 800fa68:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa6c:	4770      	bx	lr
 800fa6e:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 800fa72:	2402      	movs	r4, #2
 800fa74:	e7df      	b.n	800fa36 <uxr_stream_id_from_raw+0x16>
 800fa76:	bf00      	nop

0800fa78 <uxr_init_stream_storage>:
 800fa78:	2300      	movs	r3, #0
 800fa7a:	7403      	strb	r3, [r0, #16]
 800fa7c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800fa80:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 800fa84:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 800fa88:	4770      	bx	lr
 800fa8a:	bf00      	nop

0800fa8c <uxr_reset_stream_storage>:
 800fa8c:	b570      	push	{r4, r5, r6, lr}
 800fa8e:	7c03      	ldrb	r3, [r0, #16]
 800fa90:	4604      	mov	r4, r0
 800fa92:	b153      	cbz	r3, 800faaa <uxr_reset_stream_storage+0x1e>
 800fa94:	4606      	mov	r6, r0
 800fa96:	2500      	movs	r5, #0
 800fa98:	4630      	mov	r0, r6
 800fa9a:	f004 fdbd 	bl	8014618 <uxr_reset_output_best_effort_stream>
 800fa9e:	7c23      	ldrb	r3, [r4, #16]
 800faa0:	3501      	adds	r5, #1
 800faa2:	42ab      	cmp	r3, r5
 800faa4:	f106 0610 	add.w	r6, r6, #16
 800faa8:	d8f6      	bhi.n	800fa98 <uxr_reset_stream_storage+0xc>
 800faaa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800faae:	b163      	cbz	r3, 800faca <uxr_reset_stream_storage+0x3e>
 800fab0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800fab4:	2500      	movs	r5, #0
 800fab6:	4630      	mov	r0, r6
 800fab8:	f004 fbba 	bl	8014230 <uxr_reset_input_best_effort_stream>
 800fabc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800fac0:	3501      	adds	r5, #1
 800fac2:	42ab      	cmp	r3, r5
 800fac4:	f106 0602 	add.w	r6, r6, #2
 800fac8:	d8f5      	bhi.n	800fab6 <uxr_reset_stream_storage+0x2a>
 800faca:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800face:	b163      	cbz	r3, 800faea <uxr_reset_stream_storage+0x5e>
 800fad0:	f104 0618 	add.w	r6, r4, #24
 800fad4:	2500      	movs	r5, #0
 800fad6:	4630      	mov	r0, r6
 800fad8:	f004 fe3e 	bl	8014758 <uxr_reset_output_reliable_stream>
 800fadc:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800fae0:	3501      	adds	r5, #1
 800fae2:	42ab      	cmp	r3, r5
 800fae4:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800fae8:	d8f5      	bhi.n	800fad6 <uxr_reset_stream_storage+0x4a>
 800faea:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800faee:	b163      	cbz	r3, 800fb0a <uxr_reset_stream_storage+0x7e>
 800faf0:	f104 0648 	add.w	r6, r4, #72	; 0x48
 800faf4:	2500      	movs	r5, #0
 800faf6:	4630      	mov	r0, r6
 800faf8:	f004 fc02 	bl	8014300 <uxr_reset_input_reliable_stream>
 800fafc:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800fb00:	3501      	adds	r5, #1
 800fb02:	42ab      	cmp	r3, r5
 800fb04:	f106 0618 	add.w	r6, r6, #24
 800fb08:	d8f5      	bhi.n	800faf6 <uxr_reset_stream_storage+0x6a>
 800fb0a:	bd70      	pop	{r4, r5, r6, pc}

0800fb0c <uxr_add_output_best_effort_buffer>:
 800fb0c:	b530      	push	{r4, r5, lr}
 800fb0e:	7c04      	ldrb	r4, [r0, #16]
 800fb10:	1c65      	adds	r5, r4, #1
 800fb12:	b083      	sub	sp, #12
 800fb14:	7405      	strb	r5, [r0, #16]
 800fb16:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800fb1a:	f004 fd71 	bl	8014600 <uxr_init_output_best_effort_stream>
 800fb1e:	2201      	movs	r2, #1
 800fb20:	4620      	mov	r0, r4
 800fb22:	4611      	mov	r1, r2
 800fb24:	b003      	add	sp, #12
 800fb26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fb2a:	f7ff bf4f 	b.w	800f9cc <uxr_stream_id>
 800fb2e:	bf00      	nop

0800fb30 <uxr_add_output_reliable_buffer>:
 800fb30:	b570      	push	{r4, r5, r6, lr}
 800fb32:	b084      	sub	sp, #16
 800fb34:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 800fb38:	f89d 6020 	ldrb.w	r6, [sp, #32]
 800fb3c:	9600      	str	r6, [sp, #0]
 800fb3e:	2528      	movs	r5, #40	; 0x28
 800fb40:	1c66      	adds	r6, r4, #1
 800fb42:	fb05 0504 	mla	r5, r5, r4, r0
 800fb46:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
 800fb4a:	f105 0018 	add.w	r0, r5, #24
 800fb4e:	f004 fdd1 	bl	80146f4 <uxr_init_output_reliable_stream>
 800fb52:	4620      	mov	r0, r4
 800fb54:	2201      	movs	r2, #1
 800fb56:	2102      	movs	r1, #2
 800fb58:	b004      	add	sp, #16
 800fb5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fb5e:	f7ff bf35 	b.w	800f9cc <uxr_stream_id>
 800fb62:	bf00      	nop

0800fb64 <uxr_add_input_best_effort_buffer>:
 800fb64:	b510      	push	{r4, lr}
 800fb66:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 800fb6a:	1c62      	adds	r2, r4, #1
 800fb6c:	f104 0321 	add.w	r3, r4, #33	; 0x21
 800fb70:	b082      	sub	sp, #8
 800fb72:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 800fb76:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800fb7a:	f004 fb55 	bl	8014228 <uxr_init_input_best_effort_stream>
 800fb7e:	4620      	mov	r0, r4
 800fb80:	2200      	movs	r2, #0
 800fb82:	2101      	movs	r1, #1
 800fb84:	b002      	add	sp, #8
 800fb86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb8a:	f7ff bf1f 	b.w	800f9cc <uxr_stream_id>
 800fb8e:	bf00      	nop

0800fb90 <uxr_add_input_reliable_buffer>:
 800fb90:	b570      	push	{r4, r5, r6, lr}
 800fb92:	b084      	sub	sp, #16
 800fb94:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 800fb98:	9e08      	ldr	r6, [sp, #32]
 800fb9a:	9600      	str	r6, [sp, #0]
 800fb9c:	2518      	movs	r5, #24
 800fb9e:	1c66      	adds	r6, r4, #1
 800fba0:	fb05 0504 	mla	r5, r5, r4, r0
 800fba4:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
 800fba8:	f105 0048 	add.w	r0, r5, #72	; 0x48
 800fbac:	f004 fb84 	bl	80142b8 <uxr_init_input_reliable_stream>
 800fbb0:	4620      	mov	r0, r4
 800fbb2:	2200      	movs	r2, #0
 800fbb4:	2102      	movs	r1, #2
 800fbb6:	b004      	add	sp, #16
 800fbb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fbbc:	f7ff bf06 	b.w	800f9cc <uxr_stream_id>

0800fbc0 <uxr_get_output_best_effort_stream>:
 800fbc0:	7c03      	ldrb	r3, [r0, #16]
 800fbc2:	428b      	cmp	r3, r1
 800fbc4:	bf8c      	ite	hi
 800fbc6:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800fbca:	2000      	movls	r0, #0
 800fbcc:	4770      	bx	lr
 800fbce:	bf00      	nop

0800fbd0 <uxr_get_output_reliable_stream>:
 800fbd0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800fbd4:	428b      	cmp	r3, r1
 800fbd6:	bf83      	ittte	hi
 800fbd8:	2328      	movhi	r3, #40	; 0x28
 800fbda:	fb03 0101 	mlahi	r1, r3, r1, r0
 800fbde:	f101 0018 	addhi.w	r0, r1, #24
 800fbe2:	2000      	movls	r0, #0
 800fbe4:	4770      	bx	lr
 800fbe6:	bf00      	nop

0800fbe8 <uxr_get_input_best_effort_stream>:
 800fbe8:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800fbec:	428b      	cmp	r3, r1
 800fbee:	bf86      	itte	hi
 800fbf0:	3121      	addhi	r1, #33	; 0x21
 800fbf2:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800fbf6:	2000      	movls	r0, #0
 800fbf8:	4770      	bx	lr
 800fbfa:	bf00      	nop

0800fbfc <uxr_get_input_reliable_stream>:
 800fbfc:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 800fc00:	428b      	cmp	r3, r1
 800fc02:	bf83      	ittte	hi
 800fc04:	2318      	movhi	r3, #24
 800fc06:	fb03 0101 	mlahi	r1, r3, r1, r0
 800fc0a:	f101 0048 	addhi.w	r0, r1, #72	; 0x48
 800fc0e:	2000      	movls	r0, #0
 800fc10:	4770      	bx	lr
 800fc12:	bf00      	nop

0800fc14 <uxr_output_streams_confirmed>:
 800fc14:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800fc18:	b183      	cbz	r3, 800fc3c <uxr_output_streams_confirmed+0x28>
 800fc1a:	b570      	push	{r4, r5, r6, lr}
 800fc1c:	4606      	mov	r6, r0
 800fc1e:	f100 0518 	add.w	r5, r0, #24
 800fc22:	2400      	movs	r4, #0
 800fc24:	e001      	b.n	800fc2a <uxr_output_streams_confirmed+0x16>
 800fc26:	3528      	adds	r5, #40	; 0x28
 800fc28:	b138      	cbz	r0, 800fc3a <uxr_output_streams_confirmed+0x26>
 800fc2a:	4628      	mov	r0, r5
 800fc2c:	f004 fff8 	bl	8014c20 <uxr_is_output_up_to_date>
 800fc30:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 800fc34:	3401      	adds	r4, #1
 800fc36:	42a3      	cmp	r3, r4
 800fc38:	d8f5      	bhi.n	800fc26 <uxr_output_streams_confirmed+0x12>
 800fc3a:	bd70      	pop	{r4, r5, r6, pc}
 800fc3c:	2001      	movs	r0, #1
 800fc3e:	4770      	bx	lr

0800fc40 <uxr_buffer_submessage_header>:
 800fc40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc42:	4604      	mov	r4, r0
 800fc44:	460e      	mov	r6, r1
 800fc46:	2104      	movs	r1, #4
 800fc48:	4615      	mov	r5, r2
 800fc4a:	461f      	mov	r7, r3
 800fc4c:	f7fe fc1e 	bl	800e48c <ucdr_align_to>
 800fc50:	2301      	movs	r3, #1
 800fc52:	ea47 0203 	orr.w	r2, r7, r3
 800fc56:	4631      	mov	r1, r6
 800fc58:	7523      	strb	r3, [r4, #20]
 800fc5a:	4620      	mov	r0, r4
 800fc5c:	462b      	mov	r3, r5
 800fc5e:	f000 fa2b 	bl	80100b8 <uxr_serialize_submessage_header>
 800fc62:	4620      	mov	r0, r4
 800fc64:	f7fe fc28 	bl	800e4b8 <ucdr_buffer_remaining>
 800fc68:	42a8      	cmp	r0, r5
 800fc6a:	bf34      	ite	cc
 800fc6c:	2000      	movcc	r0, #0
 800fc6e:	2001      	movcs	r0, #1
 800fc70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc72:	bf00      	nop

0800fc74 <uxr_read_submessage_header>:
 800fc74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc78:	4604      	mov	r4, r0
 800fc7a:	460d      	mov	r5, r1
 800fc7c:	2104      	movs	r1, #4
 800fc7e:	4616      	mov	r6, r2
 800fc80:	4698      	mov	r8, r3
 800fc82:	f7fe fc03 	bl	800e48c <ucdr_align_to>
 800fc86:	4620      	mov	r0, r4
 800fc88:	f7fe fc16 	bl	800e4b8 <ucdr_buffer_remaining>
 800fc8c:	2803      	cmp	r0, #3
 800fc8e:	bf8c      	ite	hi
 800fc90:	2701      	movhi	r7, #1
 800fc92:	2700      	movls	r7, #0
 800fc94:	d802      	bhi.n	800fc9c <uxr_read_submessage_header+0x28>
 800fc96:	4638      	mov	r0, r7
 800fc98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc9c:	4633      	mov	r3, r6
 800fc9e:	4642      	mov	r2, r8
 800fca0:	4620      	mov	r0, r4
 800fca2:	4629      	mov	r1, r5
 800fca4:	f000 fa1c 	bl	80100e0 <uxr_deserialize_submessage_header>
 800fca8:	f898 3000 	ldrb.w	r3, [r8]
 800fcac:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 800fcb0:	f003 0301 	and.w	r3, r3, #1
 800fcb4:	f888 2000 	strb.w	r2, [r8]
 800fcb8:	7523      	strb	r3, [r4, #20]
 800fcba:	4638      	mov	r0, r7
 800fcbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fcc0 <uxr_submessage_padding>:
 800fcc0:	f010 0003 	ands.w	r0, r0, #3
 800fcc4:	bf18      	it	ne
 800fcc6:	f1c0 0004 	rsbne	r0, r0, #4
 800fcca:	4770      	bx	lr

0800fccc <uxr_millis>:
 800fccc:	b510      	push	{r4, lr}
 800fcce:	b084      	sub	sp, #16
 800fcd0:	4669      	mov	r1, sp
 800fcd2:	2001      	movs	r0, #1
 800fcd4:	f7f2 ff44 	bl	8002b60 <clock_gettime>
 800fcd8:	e9dd 2400 	ldrd	r2, r4, [sp]
 800fcdc:	4907      	ldr	r1, [pc, #28]	; (800fcfc <uxr_millis+0x30>)
 800fcde:	9802      	ldr	r0, [sp, #8]
 800fce0:	fba2 2301 	umull	r2, r3, r2, r1
 800fce4:	fb01 3304 	mla	r3, r1, r4, r3
 800fce8:	4604      	mov	r4, r0
 800fcea:	1810      	adds	r0, r2, r0
 800fcec:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 800fcf0:	4a03      	ldr	r2, [pc, #12]	; (800fd00 <uxr_millis+0x34>)
 800fcf2:	2300      	movs	r3, #0
 800fcf4:	f7f0 ff82 	bl	8000bfc <__aeabi_ldivmod>
 800fcf8:	b004      	add	sp, #16
 800fcfa:	bd10      	pop	{r4, pc}
 800fcfc:	3b9aca00 	.word	0x3b9aca00
 800fd00:	000f4240 	.word	0x000f4240

0800fd04 <uxr_nanos>:
 800fd04:	b510      	push	{r4, lr}
 800fd06:	b084      	sub	sp, #16
 800fd08:	4669      	mov	r1, sp
 800fd0a:	2001      	movs	r0, #1
 800fd0c:	f7f2 ff28 	bl	8002b60 <clock_gettime>
 800fd10:	e9dd 2400 	ldrd	r2, r4, [sp]
 800fd14:	4905      	ldr	r1, [pc, #20]	; (800fd2c <uxr_nanos+0x28>)
 800fd16:	9802      	ldr	r0, [sp, #8]
 800fd18:	fba2 2301 	umull	r2, r3, r2, r1
 800fd1c:	fb01 3304 	mla	r3, r1, r4, r3
 800fd20:	4604      	mov	r4, r0
 800fd22:	1810      	adds	r0, r2, r0
 800fd24:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 800fd28:	b004      	add	sp, #16
 800fd2a:	bd10      	pop	{r4, pc}
 800fd2c:	3b9aca00 	.word	0x3b9aca00

0800fd30 <on_full_output_buffer_fragmented>:
 800fd30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd34:	460c      	mov	r4, r1
 800fd36:	b08a      	sub	sp, #40	; 0x28
 800fd38:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 800fd3c:	4606      	mov	r6, r0
 800fd3e:	f104 0008 	add.w	r0, r4, #8
 800fd42:	f7ff ff45 	bl	800fbd0 <uxr_get_output_reliable_stream>
 800fd46:	4605      	mov	r5, r0
 800fd48:	f004 ff74 	bl	8014c34 <get_available_free_slots>
 800fd4c:	b968      	cbnz	r0, 800fd6a <on_full_output_buffer_fragmented+0x3a>
 800fd4e:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 800fd52:	4620      	mov	r0, r4
 800fd54:	4798      	blx	r3
 800fd56:	b918      	cbnz	r0, 800fd60 <on_full_output_buffer_fragmented+0x30>
 800fd58:	2001      	movs	r0, #1
 800fd5a:	b00a      	add	sp, #40	; 0x28
 800fd5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd60:	4628      	mov	r0, r5
 800fd62:	f004 ff67 	bl	8014c34 <get_available_free_slots>
 800fd66:	2800      	cmp	r0, #0
 800fd68:	d0f6      	beq.n	800fd58 <on_full_output_buffer_fragmented+0x28>
 800fd6a:	8928      	ldrh	r0, [r5, #8]
 800fd6c:	89eb      	ldrh	r3, [r5, #14]
 800fd6e:	7b2a      	ldrb	r2, [r5, #12]
 800fd70:	fbb3 f1f0 	udiv	r1, r3, r0
 800fd74:	f5c2 427f 	rsb	r2, r2, #65280	; 0xff00
 800fd78:	fb00 3111 	mls	r1, r0, r1, r3
 800fd7c:	b28b      	uxth	r3, r1
 800fd7e:	32fc      	adds	r2, #252	; 0xfc
 800fd80:	6869      	ldr	r1, [r5, #4]
 800fd82:	fbb1 f1f0 	udiv	r1, r1, r0
 800fd86:	1f0f      	subs	r7, r1, #4
 800fd88:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
 800fd8c:	fb01 f103 	mul.w	r1, r1, r3
 800fd90:	443a      	add	r2, r7
 800fd92:	682b      	ldr	r3, [r5, #0]
 800fd94:	fa1f f882 	uxth.w	r8, r2
 800fd98:	3104      	adds	r1, #4
 800fd9a:	4419      	add	r1, r3
 800fd9c:	eba0 0008 	sub.w	r0, r0, r8
 800fda0:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 800fda4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fda8:	9300      	str	r3, [sp, #0]
 800fdaa:	463a      	mov	r2, r7
 800fdac:	2300      	movs	r3, #0
 800fdae:	a802      	add	r0, sp, #8
 800fdb0:	f7fe fb40 	bl	800e434 <ucdr_init_buffer_origin_offset>
 800fdb4:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800fdb8:	f102 0308 	add.w	r3, r2, #8
 800fdbc:	42bb      	cmp	r3, r7
 800fdbe:	d927      	bls.n	800fe10 <on_full_output_buffer_fragmented+0xe0>
 800fdc0:	4642      	mov	r2, r8
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	210d      	movs	r1, #13
 800fdc6:	a802      	add	r0, sp, #8
 800fdc8:	f7ff ff3a 	bl	800fc40 <uxr_buffer_submessage_header>
 800fdcc:	8928      	ldrh	r0, [r5, #8]
 800fdce:	89eb      	ldrh	r3, [r5, #14]
 800fdd0:	fbb3 f1f0 	udiv	r1, r3, r0
 800fdd4:	fb00 3111 	mls	r1, r0, r1, r3
 800fdd8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fddc:	b289      	uxth	r1, r1
 800fdde:	fbb3 f3f0 	udiv	r3, r3, r0
 800fde2:	fb03 f301 	mul.w	r3, r3, r1
 800fde6:	50d7      	str	r7, [r2, r3]
 800fde8:	89e8      	ldrh	r0, [r5, #14]
 800fdea:	2101      	movs	r1, #1
 800fdec:	f005 f82e 	bl	8014e4c <uxr_seq_num_add>
 800fdf0:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 800fdf4:	81e8      	strh	r0, [r5, #14]
 800fdf6:	1a52      	subs	r2, r2, r1
 800fdf8:	4630      	mov	r0, r6
 800fdfa:	f7fe fb2d 	bl	800e458 <ucdr_init_buffer>
 800fdfe:	4630      	mov	r0, r6
 800fe00:	490f      	ldr	r1, [pc, #60]	; (800fe40 <on_full_output_buffer_fragmented+0x110>)
 800fe02:	4622      	mov	r2, r4
 800fe04:	f7fe fafe 	bl	800e404 <ucdr_set_on_full_buffer_callback>
 800fe08:	2000      	movs	r0, #0
 800fe0a:	b00a      	add	sp, #40	; 0x28
 800fe0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe10:	b292      	uxth	r2, r2
 800fe12:	2302      	movs	r3, #2
 800fe14:	210d      	movs	r1, #13
 800fe16:	a802      	add	r0, sp, #8
 800fe18:	f7ff ff12 	bl	800fc40 <uxr_buffer_submessage_header>
 800fe1c:	8928      	ldrh	r0, [r5, #8]
 800fe1e:	89eb      	ldrh	r3, [r5, #14]
 800fe20:	fbb3 f2f0 	udiv	r2, r3, r0
 800fe24:	fb00 3212 	mls	r2, r0, r2, r3
 800fe28:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 800fe2c:	686b      	ldr	r3, [r5, #4]
 800fe2e:	fbb3 f3f0 	udiv	r3, r3, r0
 800fe32:	b292      	uxth	r2, r2
 800fe34:	6828      	ldr	r0, [r5, #0]
 800fe36:	fb03 f302 	mul.w	r3, r3, r2
 800fe3a:	3108      	adds	r1, #8
 800fe3c:	50c1      	str	r1, [r0, r3]
 800fe3e:	e7d3      	b.n	800fde8 <on_full_output_buffer_fragmented+0xb8>
 800fe40:	0800fd31 	.word	0x0800fd31

0800fe44 <uxr_prepare_output_stream>:
 800fe44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe46:	b087      	sub	sp, #28
 800fe48:	2407      	movs	r4, #7
 800fe4a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800fe4c:	9202      	str	r2, [sp, #8]
 800fe4e:	2500      	movs	r5, #0
 800fe50:	1d32      	adds	r2, r6, #4
 800fe52:	e9cd 4500 	strd	r4, r5, [sp]
 800fe56:	9103      	str	r1, [sp, #12]
 800fe58:	461c      	mov	r4, r3
 800fe5a:	4606      	mov	r6, r0
 800fe5c:	f7ff fc4c 	bl	800f6f8 <uxr_prepare_stream_to_write_submessage>
 800fe60:	f080 0201 	eor.w	r2, r0, #1
 800fe64:	b2d2      	uxtb	r2, r2
 800fe66:	75a2      	strb	r2, [r4, #22]
 800fe68:	b112      	cbz	r2, 800fe70 <uxr_prepare_output_stream+0x2c>
 800fe6a:	4628      	mov	r0, r5
 800fe6c:	b007      	add	sp, #28
 800fe6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe70:	aa05      	add	r2, sp, #20
 800fe72:	9902      	ldr	r1, [sp, #8]
 800fe74:	4630      	mov	r0, r6
 800fe76:	f7ff fd79 	bl	800f96c <uxr_init_base_object_request>
 800fe7a:	a905      	add	r1, sp, #20
 800fe7c:	4605      	mov	r5, r0
 800fe7e:	4620      	mov	r0, r4
 800fe80:	f000 ff86 	bl	8010d90 <uxr_serialize_WRITE_DATA_Payload_Data>
 800fe84:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800fe88:	e9d4 6706 	ldrd	r6, r7, [r4, #24]
 800fe8c:	1a52      	subs	r2, r2, r1
 800fe8e:	4620      	mov	r0, r4
 800fe90:	f7fe fae2 	bl	800e458 <ucdr_init_buffer>
 800fe94:	4620      	mov	r0, r4
 800fe96:	463a      	mov	r2, r7
 800fe98:	4631      	mov	r1, r6
 800fe9a:	f7fe fab3 	bl	800e404 <ucdr_set_on_full_buffer_callback>
 800fe9e:	4628      	mov	r0, r5
 800fea0:	b007      	add	sp, #28
 800fea2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fea4 <uxr_prepare_output_stream_fragmented>:
 800fea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fea8:	b093      	sub	sp, #76	; 0x4c
 800feaa:	4605      	mov	r5, r0
 800feac:	9107      	str	r1, [sp, #28]
 800feae:	3008      	adds	r0, #8
 800feb0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800feb4:	9303      	str	r3, [sp, #12]
 800feb6:	9206      	str	r2, [sp, #24]
 800feb8:	f7ff fe8a 	bl	800fbd0 <uxr_get_output_reliable_stream>
 800febc:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800fec0:	2b01      	cmp	r3, #1
 800fec2:	f000 8094 	beq.w	800ffee <uxr_prepare_output_stream_fragmented+0x14a>
 800fec6:	4604      	mov	r4, r0
 800fec8:	2800      	cmp	r0, #0
 800feca:	f000 8090 	beq.w	800ffee <uxr_prepare_output_stream_fragmented+0x14a>
 800fece:	f004 feb1 	bl	8014c34 <get_available_free_slots>
 800fed2:	2800      	cmp	r0, #0
 800fed4:	f000 8086 	beq.w	800ffe4 <uxr_prepare_output_stream_fragmented+0x140>
 800fed8:	8922      	ldrh	r2, [r4, #8]
 800feda:	89e7      	ldrh	r7, [r4, #14]
 800fedc:	fbb7 f8f2 	udiv	r8, r7, r2
 800fee0:	e9d4 3100 	ldrd	r3, r1, [r4]
 800fee4:	fb02 7818 	mls	r8, r2, r8, r7
 800fee8:	fa1f f888 	uxth.w	r8, r8
 800feec:	fbb1 f2f2 	udiv	r2, r1, r2
 800fef0:	fb02 f808 	mul.w	r8, r2, r8
 800fef4:	f108 0804 	add.w	r8, r8, #4
 800fef8:	4498      	add	r8, r3
 800fefa:	7b23      	ldrb	r3, [r4, #12]
 800fefc:	f858 ac04 	ldr.w	sl, [r8, #-4]
 800ff00:	9204      	str	r2, [sp, #16]
 800ff02:	4553      	cmp	r3, sl
 800ff04:	f1a2 0b04 	sub.w	fp, r2, #4
 800ff08:	d37d      	bcc.n	8010006 <uxr_prepare_output_stream_fragmented+0x162>
 800ff0a:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800ff0c:	f8cd a000 	str.w	sl, [sp]
 800ff10:	f1ab 0904 	sub.w	r9, fp, #4
 800ff14:	eba9 0903 	sub.w	r9, r9, r3
 800ff18:	3608      	adds	r6, #8
 800ff1a:	a80a      	add	r0, sp, #40	; 0x28
 800ff1c:	2300      	movs	r3, #0
 800ff1e:	465a      	mov	r2, fp
 800ff20:	4641      	mov	r1, r8
 800ff22:	fa1f f989 	uxth.w	r9, r9
 800ff26:	9605      	str	r6, [sp, #20]
 800ff28:	f7fe fa84 	bl	800e434 <ucdr_init_buffer_origin_offset>
 800ff2c:	455e      	cmp	r6, fp
 800ff2e:	bf34      	ite	cc
 800ff30:	2302      	movcc	r3, #2
 800ff32:	2300      	movcs	r3, #0
 800ff34:	464a      	mov	r2, r9
 800ff36:	210d      	movs	r1, #13
 800ff38:	a80a      	add	r0, sp, #40	; 0x28
 800ff3a:	f7ff fe81 	bl	800fc40 <uxr_buffer_submessage_header>
 800ff3e:	8920      	ldrh	r0, [r4, #8]
 800ff40:	fbb7 f3f0 	udiv	r3, r7, r0
 800ff44:	e9d4 2100 	ldrd	r2, r1, [r4]
 800ff48:	fb00 7313 	mls	r3, r0, r3, r7
 800ff4c:	b29b      	uxth	r3, r3
 800ff4e:	fbb1 f1f0 	udiv	r1, r1, r0
 800ff52:	fb03 f301 	mul.w	r3, r3, r1
 800ff56:	4638      	mov	r0, r7
 800ff58:	f842 b003 	str.w	fp, [r2, r3]
 800ff5c:	2101      	movs	r1, #1
 800ff5e:	f004 ff75 	bl	8014e4c <uxr_seq_num_add>
 800ff62:	9b04      	ldr	r3, [sp, #16]
 800ff64:	9e03      	ldr	r6, [sp, #12]
 800ff66:	f1a3 0208 	sub.w	r2, r3, #8
 800ff6a:	f10a 0104 	add.w	r1, sl, #4
 800ff6e:	4607      	mov	r7, r0
 800ff70:	eba2 020a 	sub.w	r2, r2, sl
 800ff74:	4441      	add	r1, r8
 800ff76:	4630      	mov	r0, r6
 800ff78:	f7fe fa6e 	bl	800e458 <ucdr_init_buffer>
 800ff7c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ff7e:	81e7      	strh	r7, [r4, #14]
 800ff80:	1d1a      	adds	r2, r3, #4
 800ff82:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800ff86:	bf28      	it	cs
 800ff88:	2200      	movcs	r2, #0
 800ff8a:	b292      	uxth	r2, r2
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	2107      	movs	r1, #7
 800ff90:	4630      	mov	r0, r6
 800ff92:	f7ff fe55 	bl	800fc40 <uxr_buffer_submessage_header>
 800ff96:	9906      	ldr	r1, [sp, #24]
 800ff98:	aa09      	add	r2, sp, #36	; 0x24
 800ff9a:	4628      	mov	r0, r5
 800ff9c:	f7ff fce6 	bl	800f96c <uxr_init_base_object_request>
 800ffa0:	4604      	mov	r4, r0
 800ffa2:	b328      	cbz	r0, 800fff0 <uxr_prepare_output_stream_fragmented+0x14c>
 800ffa4:	9e03      	ldr	r6, [sp, #12]
 800ffa6:	a909      	add	r1, sp, #36	; 0x24
 800ffa8:	4630      	mov	r0, r6
 800ffaa:	f000 fef1 	bl	8010d90 <uxr_serialize_WRITE_DATA_Payload_Data>
 800ffae:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800ffb2:	4630      	mov	r0, r6
 800ffb4:	1a52      	subs	r2, r2, r1
 800ffb6:	f7fe fa4f 	bl	800e458 <ucdr_init_buffer>
 800ffba:	9a05      	ldr	r2, [sp, #20]
 800ffbc:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 800ffc0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800ffc2:	9b07      	ldr	r3, [sp, #28]
 800ffc4:	f8c5 20b8 	str.w	r2, [r5, #184]	; 0xb8
 800ffc8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ffca:	f8c5 20bc 	str.w	r2, [r5, #188]	; 0xbc
 800ffce:	4630      	mov	r0, r6
 800ffd0:	4919      	ldr	r1, [pc, #100]	; (8010038 <uxr_prepare_output_stream_fragmented+0x194>)
 800ffd2:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 800ffd6:	462a      	mov	r2, r5
 800ffd8:	f7fe fa14 	bl	800e404 <ucdr_set_on_full_buffer_callback>
 800ffdc:	4620      	mov	r0, r4
 800ffde:	b013      	add	sp, #76	; 0x4c
 800ffe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffe4:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ffe6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ffe8:	4628      	mov	r0, r5
 800ffea:	4798      	blx	r3
 800ffec:	b920      	cbnz	r0, 800fff8 <uxr_prepare_output_stream_fragmented+0x154>
 800ffee:	2400      	movs	r4, #0
 800fff0:	4620      	mov	r0, r4
 800fff2:	b013      	add	sp, #76	; 0x4c
 800fff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fff8:	4620      	mov	r0, r4
 800fffa:	f004 fe1b 	bl	8014c34 <get_available_free_slots>
 800fffe:	2800      	cmp	r0, #0
 8010000:	f47f af6a 	bne.w	800fed8 <uxr_prepare_output_stream_fragmented+0x34>
 8010004:	e7f3      	b.n	800ffee <uxr_prepare_output_stream_fragmented+0x14a>
 8010006:	4638      	mov	r0, r7
 8010008:	2101      	movs	r1, #1
 801000a:	f004 ff1f 	bl	8014e4c <uxr_seq_num_add>
 801000e:	8922      	ldrh	r2, [r4, #8]
 8010010:	fbb0 f8f2 	udiv	r8, r0, r2
 8010014:	fb02 0818 	mls	r8, r2, r8, r0
 8010018:	fa1f f888 	uxth.w	r8, r8
 801001c:	6863      	ldr	r3, [r4, #4]
 801001e:	fbb3 f3f2 	udiv	r3, r3, r2
 8010022:	6822      	ldr	r2, [r4, #0]
 8010024:	fb08 f803 	mul.w	r8, r8, r3
 8010028:	f108 0804 	add.w	r8, r8, #4
 801002c:	4490      	add	r8, r2
 801002e:	7b23      	ldrb	r3, [r4, #12]
 8010030:	f858 ac04 	ldr.w	sl, [r8, #-4]
 8010034:	4607      	mov	r7, r0
 8010036:	e768      	b.n	800ff0a <uxr_prepare_output_stream_fragmented+0x66>
 8010038:	0800fd31 	.word	0x0800fd31

0801003c <uxr_serialize_message_header>:
 801003c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801003e:	b083      	sub	sp, #12
 8010040:	4616      	mov	r6, r2
 8010042:	4604      	mov	r4, r0
 8010044:	9301      	str	r3, [sp, #4]
 8010046:	460d      	mov	r5, r1
 8010048:	9f08      	ldr	r7, [sp, #32]
 801004a:	f003 f955 	bl	80132f8 <ucdr_serialize_uint8_t>
 801004e:	4631      	mov	r1, r6
 8010050:	4620      	mov	r0, r4
 8010052:	f003 f951 	bl	80132f8 <ucdr_serialize_uint8_t>
 8010056:	9a01      	ldr	r2, [sp, #4]
 8010058:	4620      	mov	r0, r4
 801005a:	2101      	movs	r1, #1
 801005c:	f003 f9f8 	bl	8013450 <ucdr_serialize_endian_uint16_t>
 8010060:	062b      	lsls	r3, r5, #24
 8010062:	d501      	bpl.n	8010068 <uxr_serialize_message_header+0x2c>
 8010064:	b003      	add	sp, #12
 8010066:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010068:	4639      	mov	r1, r7
 801006a:	4620      	mov	r0, r4
 801006c:	2204      	movs	r2, #4
 801006e:	b003      	add	sp, #12
 8010070:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010074:	f003 b848 	b.w	8013108 <ucdr_serialize_array_uint8_t>

08010078 <uxr_deserialize_message_header>:
 8010078:	b5f0      	push	{r4, r5, r6, r7, lr}
 801007a:	b083      	sub	sp, #12
 801007c:	4616      	mov	r6, r2
 801007e:	4604      	mov	r4, r0
 8010080:	9301      	str	r3, [sp, #4]
 8010082:	460d      	mov	r5, r1
 8010084:	9f08      	ldr	r7, [sp, #32]
 8010086:	f003 f94d 	bl	8013324 <ucdr_deserialize_uint8_t>
 801008a:	4631      	mov	r1, r6
 801008c:	4620      	mov	r0, r4
 801008e:	f003 f949 	bl	8013324 <ucdr_deserialize_uint8_t>
 8010092:	9a01      	ldr	r2, [sp, #4]
 8010094:	4620      	mov	r0, r4
 8010096:	2101      	movs	r1, #1
 8010098:	f003 face 	bl	8013638 <ucdr_deserialize_endian_uint16_t>
 801009c:	f995 3000 	ldrsb.w	r3, [r5]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	da01      	bge.n	80100a8 <uxr_deserialize_message_header+0x30>
 80100a4:	b003      	add	sp, #12
 80100a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80100a8:	4639      	mov	r1, r7
 80100aa:	4620      	mov	r0, r4
 80100ac:	2204      	movs	r2, #4
 80100ae:	b003      	add	sp, #12
 80100b0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80100b4:	f003 b88c 	b.w	80131d0 <ucdr_deserialize_array_uint8_t>

080100b8 <uxr_serialize_submessage_header>:
 80100b8:	b530      	push	{r4, r5, lr}
 80100ba:	b083      	sub	sp, #12
 80100bc:	4615      	mov	r5, r2
 80100be:	4604      	mov	r4, r0
 80100c0:	9301      	str	r3, [sp, #4]
 80100c2:	f003 f919 	bl	80132f8 <ucdr_serialize_uint8_t>
 80100c6:	4629      	mov	r1, r5
 80100c8:	4620      	mov	r0, r4
 80100ca:	f003 f915 	bl	80132f8 <ucdr_serialize_uint8_t>
 80100ce:	9a01      	ldr	r2, [sp, #4]
 80100d0:	4620      	mov	r0, r4
 80100d2:	2101      	movs	r1, #1
 80100d4:	b003      	add	sp, #12
 80100d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80100da:	f003 b9b9 	b.w	8013450 <ucdr_serialize_endian_uint16_t>
 80100de:	bf00      	nop

080100e0 <uxr_deserialize_submessage_header>:
 80100e0:	b530      	push	{r4, r5, lr}
 80100e2:	b083      	sub	sp, #12
 80100e4:	4615      	mov	r5, r2
 80100e6:	4604      	mov	r4, r0
 80100e8:	9301      	str	r3, [sp, #4]
 80100ea:	f003 f91b 	bl	8013324 <ucdr_deserialize_uint8_t>
 80100ee:	4629      	mov	r1, r5
 80100f0:	4620      	mov	r0, r4
 80100f2:	f003 f917 	bl	8013324 <ucdr_deserialize_uint8_t>
 80100f6:	9a01      	ldr	r2, [sp, #4]
 80100f8:	4620      	mov	r0, r4
 80100fa:	2101      	movs	r1, #1
 80100fc:	b003      	add	sp, #12
 80100fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010102:	f003 ba99 	b.w	8013638 <ucdr_deserialize_endian_uint16_t>
 8010106:	bf00      	nop

08010108 <uxr_serialize_CLIENT_Representation>:
 8010108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801010c:	2204      	movs	r2, #4
 801010e:	460c      	mov	r4, r1
 8010110:	4605      	mov	r5, r0
 8010112:	f002 fff9 	bl	8013108 <ucdr_serialize_array_uint8_t>
 8010116:	1d21      	adds	r1, r4, #4
 8010118:	4607      	mov	r7, r0
 801011a:	2202      	movs	r2, #2
 801011c:	4628      	mov	r0, r5
 801011e:	f002 fff3 	bl	8013108 <ucdr_serialize_array_uint8_t>
 8010122:	1da1      	adds	r1, r4, #6
 8010124:	4007      	ands	r7, r0
 8010126:	2202      	movs	r2, #2
 8010128:	4628      	mov	r0, r5
 801012a:	f002 ffed 	bl	8013108 <ucdr_serialize_array_uint8_t>
 801012e:	fa5f f887 	uxtb.w	r8, r7
 8010132:	2204      	movs	r2, #4
 8010134:	4607      	mov	r7, r0
 8010136:	f104 0108 	add.w	r1, r4, #8
 801013a:	4628      	mov	r0, r5
 801013c:	f002 ffe4 	bl	8013108 <ucdr_serialize_array_uint8_t>
 8010140:	ea08 0707 	and.w	r7, r8, r7
 8010144:	7b21      	ldrb	r1, [r4, #12]
 8010146:	4680      	mov	r8, r0
 8010148:	4628      	mov	r0, r5
 801014a:	f003 f8d5 	bl	80132f8 <ucdr_serialize_uint8_t>
 801014e:	ea08 0807 	and.w	r8, r8, r7
 8010152:	7b61      	ldrb	r1, [r4, #13]
 8010154:	4607      	mov	r7, r0
 8010156:	4628      	mov	r0, r5
 8010158:	f003 f89e 	bl	8013298 <ucdr_serialize_bool>
 801015c:	7b63      	ldrb	r3, [r4, #13]
 801015e:	ea08 0707 	and.w	r7, r8, r7
 8010162:	ea07 0600 	and.w	r6, r7, r0
 8010166:	b933      	cbnz	r3, 8010176 <uxr_serialize_CLIENT_Representation+0x6e>
 8010168:	8ba1      	ldrh	r1, [r4, #28]
 801016a:	4628      	mov	r0, r5
 801016c:	f003 f8f0 	bl	8013350 <ucdr_serialize_uint16_t>
 8010170:	4030      	ands	r0, r6
 8010172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010176:	6921      	ldr	r1, [r4, #16]
 8010178:	4628      	mov	r0, r5
 801017a:	f003 fad3 	bl	8013724 <ucdr_serialize_uint32_t>
 801017e:	6923      	ldr	r3, [r4, #16]
 8010180:	b1cb      	cbz	r3, 80101b6 <uxr_serialize_CLIENT_Representation+0xae>
 8010182:	b1d0      	cbz	r0, 80101ba <uxr_serialize_CLIENT_Representation+0xb2>
 8010184:	46a0      	mov	r8, r4
 8010186:	f04f 0900 	mov.w	r9, #0
 801018a:	e002      	b.n	8010192 <uxr_serialize_CLIENT_Representation+0x8a>
 801018c:	f108 0808 	add.w	r8, r8, #8
 8010190:	b198      	cbz	r0, 80101ba <uxr_serialize_CLIENT_Representation+0xb2>
 8010192:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8010196:	4628      	mov	r0, r5
 8010198:	f003 ff6e 	bl	8014078 <ucdr_serialize_string>
 801019c:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80101a0:	4607      	mov	r7, r0
 80101a2:	4628      	mov	r0, r5
 80101a4:	f003 ff68 	bl	8014078 <ucdr_serialize_string>
 80101a8:	6923      	ldr	r3, [r4, #16]
 80101aa:	f109 0901 	add.w	r9, r9, #1
 80101ae:	4038      	ands	r0, r7
 80101b0:	4599      	cmp	r9, r3
 80101b2:	b2c0      	uxtb	r0, r0
 80101b4:	d3ea      	bcc.n	801018c <uxr_serialize_CLIENT_Representation+0x84>
 80101b6:	4006      	ands	r6, r0
 80101b8:	e7d6      	b.n	8010168 <uxr_serialize_CLIENT_Representation+0x60>
 80101ba:	2600      	movs	r6, #0
 80101bc:	e7d4      	b.n	8010168 <uxr_serialize_CLIENT_Representation+0x60>
 80101be:	bf00      	nop

080101c0 <uxr_deserialize_CLIENT_Representation>:
 80101c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101c4:	2204      	movs	r2, #4
 80101c6:	460c      	mov	r4, r1
 80101c8:	4605      	mov	r5, r0
 80101ca:	f003 f801 	bl	80131d0 <ucdr_deserialize_array_uint8_t>
 80101ce:	1d21      	adds	r1, r4, #4
 80101d0:	4607      	mov	r7, r0
 80101d2:	2202      	movs	r2, #2
 80101d4:	4628      	mov	r0, r5
 80101d6:	f002 fffb 	bl	80131d0 <ucdr_deserialize_array_uint8_t>
 80101da:	1da1      	adds	r1, r4, #6
 80101dc:	4007      	ands	r7, r0
 80101de:	2202      	movs	r2, #2
 80101e0:	4628      	mov	r0, r5
 80101e2:	f002 fff5 	bl	80131d0 <ucdr_deserialize_array_uint8_t>
 80101e6:	fa5f f887 	uxtb.w	r8, r7
 80101ea:	2204      	movs	r2, #4
 80101ec:	4607      	mov	r7, r0
 80101ee:	f104 0108 	add.w	r1, r4, #8
 80101f2:	4628      	mov	r0, r5
 80101f4:	f002 ffec 	bl	80131d0 <ucdr_deserialize_array_uint8_t>
 80101f8:	ea08 0707 	and.w	r7, r8, r7
 80101fc:	f104 010c 	add.w	r1, r4, #12
 8010200:	4680      	mov	r8, r0
 8010202:	4628      	mov	r0, r5
 8010204:	f003 f88e 	bl	8013324 <ucdr_deserialize_uint8_t>
 8010208:	ea08 0807 	and.w	r8, r8, r7
 801020c:	f104 010d 	add.w	r1, r4, #13
 8010210:	4607      	mov	r7, r0
 8010212:	4628      	mov	r0, r5
 8010214:	f003 f856 	bl	80132c4 <ucdr_deserialize_bool>
 8010218:	7b63      	ldrb	r3, [r4, #13]
 801021a:	ea08 0707 	and.w	r7, r8, r7
 801021e:	ea07 0600 	and.w	r6, r7, r0
 8010222:	b93b      	cbnz	r3, 8010234 <uxr_deserialize_CLIENT_Representation+0x74>
 8010224:	f104 011c 	add.w	r1, r4, #28
 8010228:	4628      	mov	r0, r5
 801022a:	f003 f991 	bl	8013550 <ucdr_deserialize_uint16_t>
 801022e:	4030      	ands	r0, r6
 8010230:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010234:	f104 0110 	add.w	r1, r4, #16
 8010238:	4628      	mov	r0, r5
 801023a:	f003 fba3 	bl	8013984 <ucdr_deserialize_uint32_t>
 801023e:	6923      	ldr	r3, [r4, #16]
 8010240:	2b01      	cmp	r3, #1
 8010242:	d903      	bls.n	801024c <uxr_deserialize_CLIENT_Representation+0x8c>
 8010244:	2301      	movs	r3, #1
 8010246:	75ab      	strb	r3, [r5, #22]
 8010248:	2600      	movs	r6, #0
 801024a:	e7eb      	b.n	8010224 <uxr_deserialize_CLIENT_Representation+0x64>
 801024c:	b1fb      	cbz	r3, 801028e <uxr_deserialize_CLIENT_Representation+0xce>
 801024e:	2800      	cmp	r0, #0
 8010250:	d0fa      	beq.n	8010248 <uxr_deserialize_CLIENT_Representation+0x88>
 8010252:	46a0      	mov	r8, r4
 8010254:	f04f 0900 	mov.w	r9, #0
 8010258:	e003      	b.n	8010262 <uxr_deserialize_CLIENT_Representation+0xa2>
 801025a:	f108 0808 	add.w	r8, r8, #8
 801025e:	2800      	cmp	r0, #0
 8010260:	d0f2      	beq.n	8010248 <uxr_deserialize_CLIENT_Representation+0x88>
 8010262:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8010266:	f44f 7200 	mov.w	r2, #512	; 0x200
 801026a:	4628      	mov	r0, r5
 801026c:	f003 ff14 	bl	8014098 <ucdr_deserialize_string>
 8010270:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8010274:	4607      	mov	r7, r0
 8010276:	f44f 7200 	mov.w	r2, #512	; 0x200
 801027a:	4628      	mov	r0, r5
 801027c:	f003 ff0c 	bl	8014098 <ucdr_deserialize_string>
 8010280:	6923      	ldr	r3, [r4, #16]
 8010282:	f109 0901 	add.w	r9, r9, #1
 8010286:	4038      	ands	r0, r7
 8010288:	4599      	cmp	r9, r3
 801028a:	b2c0      	uxtb	r0, r0
 801028c:	d3e5      	bcc.n	801025a <uxr_deserialize_CLIENT_Representation+0x9a>
 801028e:	4006      	ands	r6, r0
 8010290:	e7c8      	b.n	8010224 <uxr_deserialize_CLIENT_Representation+0x64>
 8010292:	bf00      	nop

08010294 <uxr_serialize_AGENT_Representation>:
 8010294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010298:	2204      	movs	r2, #4
 801029a:	460c      	mov	r4, r1
 801029c:	4605      	mov	r5, r0
 801029e:	f002 ff33 	bl	8013108 <ucdr_serialize_array_uint8_t>
 80102a2:	1d21      	adds	r1, r4, #4
 80102a4:	4606      	mov	r6, r0
 80102a6:	2202      	movs	r2, #2
 80102a8:	4628      	mov	r0, r5
 80102aa:	f002 ff2d 	bl	8013108 <ucdr_serialize_array_uint8_t>
 80102ae:	1da1      	adds	r1, r4, #6
 80102b0:	4006      	ands	r6, r0
 80102b2:	2202      	movs	r2, #2
 80102b4:	4628      	mov	r0, r5
 80102b6:	f002 ff27 	bl	8013108 <ucdr_serialize_array_uint8_t>
 80102ba:	b2f6      	uxtb	r6, r6
 80102bc:	4603      	mov	r3, r0
 80102be:	7a21      	ldrb	r1, [r4, #8]
 80102c0:	4628      	mov	r0, r5
 80102c2:	401e      	ands	r6, r3
 80102c4:	f002 ffe8 	bl	8013298 <ucdr_serialize_bool>
 80102c8:	7a23      	ldrb	r3, [r4, #8]
 80102ca:	ea00 0706 	and.w	r7, r0, r6
 80102ce:	b913      	cbnz	r3, 80102d6 <uxr_serialize_AGENT_Representation+0x42>
 80102d0:	4638      	mov	r0, r7
 80102d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102d6:	68e1      	ldr	r1, [r4, #12]
 80102d8:	4628      	mov	r0, r5
 80102da:	f003 fa23 	bl	8013724 <ucdr_serialize_uint32_t>
 80102de:	68e3      	ldr	r3, [r4, #12]
 80102e0:	b313      	cbz	r3, 8010328 <uxr_serialize_AGENT_Representation+0x94>
 80102e2:	b1e8      	cbz	r0, 8010320 <uxr_serialize_AGENT_Representation+0x8c>
 80102e4:	46a0      	mov	r8, r4
 80102e6:	f04f 0900 	mov.w	r9, #0
 80102ea:	e002      	b.n	80102f2 <uxr_serialize_AGENT_Representation+0x5e>
 80102ec:	f108 0808 	add.w	r8, r8, #8
 80102f0:	b1b3      	cbz	r3, 8010320 <uxr_serialize_AGENT_Representation+0x8c>
 80102f2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80102f6:	4628      	mov	r0, r5
 80102f8:	f003 febe 	bl	8014078 <ucdr_serialize_string>
 80102fc:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8010300:	4606      	mov	r6, r0
 8010302:	4628      	mov	r0, r5
 8010304:	f003 feb8 	bl	8014078 <ucdr_serialize_string>
 8010308:	68e2      	ldr	r2, [r4, #12]
 801030a:	f109 0901 	add.w	r9, r9, #1
 801030e:	ea06 0300 	and.w	r3, r6, r0
 8010312:	4591      	cmp	r9, r2
 8010314:	b2db      	uxtb	r3, r3
 8010316:	d3e9      	bcc.n	80102ec <uxr_serialize_AGENT_Representation+0x58>
 8010318:	401f      	ands	r7, r3
 801031a:	4638      	mov	r0, r7
 801031c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010320:	2700      	movs	r7, #0
 8010322:	4638      	mov	r0, r7
 8010324:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010328:	4007      	ands	r7, r0
 801032a:	e7d1      	b.n	80102d0 <uxr_serialize_AGENT_Representation+0x3c>

0801032c <uxr_serialize_ObjectVariant.part.0>:
 801032c:	b570      	push	{r4, r5, r6, lr}
 801032e:	780b      	ldrb	r3, [r1, #0]
 8010330:	3b01      	subs	r3, #1
 8010332:	460c      	mov	r4, r1
 8010334:	4605      	mov	r5, r0
 8010336:	2b0d      	cmp	r3, #13
 8010338:	d869      	bhi.n	801040e <uxr_serialize_ObjectVariant.part.0+0xe2>
 801033a:	e8df f003 	tbb	[pc, r3]
 801033e:	074a      	.short	0x074a
 8010340:	07073030 	.word	0x07073030
 8010344:	21680707 	.word	0x21680707
 8010348:	45632121 	.word	0x45632121
 801034c:	7909      	ldrb	r1, [r1, #4]
 801034e:	f002 ffd3 	bl	80132f8 <ucdr_serialize_uint8_t>
 8010352:	4606      	mov	r6, r0
 8010354:	b158      	cbz	r0, 801036e <uxr_serialize_ObjectVariant.part.0+0x42>
 8010356:	7923      	ldrb	r3, [r4, #4]
 8010358:	2b02      	cmp	r3, #2
 801035a:	d003      	beq.n	8010364 <uxr_serialize_ObjectVariant.part.0+0x38>
 801035c:	2b03      	cmp	r3, #3
 801035e:	d029      	beq.n	80103b4 <uxr_serialize_ObjectVariant.part.0+0x88>
 8010360:	2b01      	cmp	r3, #1
 8010362:	d104      	bne.n	801036e <uxr_serialize_ObjectVariant.part.0+0x42>
 8010364:	68a1      	ldr	r1, [r4, #8]
 8010366:	4628      	mov	r0, r5
 8010368:	f003 fe86 	bl	8014078 <ucdr_serialize_string>
 801036c:	4606      	mov	r6, r0
 801036e:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8010372:	4628      	mov	r0, r5
 8010374:	2202      	movs	r2, #2
 8010376:	f002 fec7 	bl	8013108 <ucdr_serialize_array_uint8_t>
 801037a:	4030      	ands	r0, r6
 801037c:	b2c0      	uxtb	r0, r0
 801037e:	bd70      	pop	{r4, r5, r6, pc}
 8010380:	7909      	ldrb	r1, [r1, #4]
 8010382:	f002 ffb9 	bl	80132f8 <ucdr_serialize_uint8_t>
 8010386:	b1e8      	cbz	r0, 80103c4 <uxr_serialize_ObjectVariant.part.0+0x98>
 8010388:	7923      	ldrb	r3, [r4, #4]
 801038a:	2b01      	cmp	r3, #1
 801038c:	d001      	beq.n	8010392 <uxr_serialize_ObjectVariant.part.0+0x66>
 801038e:	2b02      	cmp	r3, #2
 8010390:	d13d      	bne.n	801040e <uxr_serialize_ObjectVariant.part.0+0xe2>
 8010392:	68a1      	ldr	r1, [r4, #8]
 8010394:	4628      	mov	r0, r5
 8010396:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801039a:	f003 be6d 	b.w	8014078 <ucdr_serialize_string>
 801039e:	7909      	ldrb	r1, [r1, #4]
 80103a0:	f002 ffaa 	bl	80132f8 <ucdr_serialize_uint8_t>
 80103a4:	4606      	mov	r6, r0
 80103a6:	2800      	cmp	r0, #0
 80103a8:	d0e1      	beq.n	801036e <uxr_serialize_ObjectVariant.part.0+0x42>
 80103aa:	7923      	ldrb	r3, [r4, #4]
 80103ac:	2b02      	cmp	r3, #2
 80103ae:	d0d9      	beq.n	8010364 <uxr_serialize_ObjectVariant.part.0+0x38>
 80103b0:	2b03      	cmp	r3, #3
 80103b2:	d1dc      	bne.n	801036e <uxr_serialize_ObjectVariant.part.0+0x42>
 80103b4:	68a2      	ldr	r2, [r4, #8]
 80103b6:	f104 010c 	add.w	r1, r4, #12
 80103ba:	4628      	mov	r0, r5
 80103bc:	f7fe f8e8 	bl	800e590 <ucdr_serialize_sequence_uint8_t>
 80103c0:	4606      	mov	r6, r0
 80103c2:	e7d4      	b.n	801036e <uxr_serialize_ObjectVariant.part.0+0x42>
 80103c4:	2000      	movs	r0, #0
 80103c6:	bd70      	pop	{r4, r5, r6, pc}
 80103c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80103cc:	3104      	adds	r1, #4
 80103ce:	f7ff be9b 	b.w	8010108 <uxr_serialize_CLIENT_Representation>
 80103d2:	7909      	ldrb	r1, [r1, #4]
 80103d4:	f002 ff90 	bl	80132f8 <ucdr_serialize_uint8_t>
 80103d8:	4606      	mov	r6, r0
 80103da:	b158      	cbz	r0, 80103f4 <uxr_serialize_ObjectVariant.part.0+0xc8>
 80103dc:	7923      	ldrb	r3, [r4, #4]
 80103de:	2b02      	cmp	r3, #2
 80103e0:	d003      	beq.n	80103ea <uxr_serialize_ObjectVariant.part.0+0xbe>
 80103e2:	2b03      	cmp	r3, #3
 80103e4:	d015      	beq.n	8010412 <uxr_serialize_ObjectVariant.part.0+0xe6>
 80103e6:	2b01      	cmp	r3, #1
 80103e8:	d104      	bne.n	80103f4 <uxr_serialize_ObjectVariant.part.0+0xc8>
 80103ea:	68a1      	ldr	r1, [r4, #8]
 80103ec:	4628      	mov	r0, r5
 80103ee:	f003 fe43 	bl	8014078 <ucdr_serialize_string>
 80103f2:	4606      	mov	r6, r0
 80103f4:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 80103f8:	4628      	mov	r0, r5
 80103fa:	f003 fcb9 	bl	8013d70 <ucdr_serialize_int16_t>
 80103fe:	4030      	ands	r0, r6
 8010400:	b2c0      	uxtb	r0, r0
 8010402:	bd70      	pop	{r4, r5, r6, pc}
 8010404:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010408:	3104      	adds	r1, #4
 801040a:	f7ff bf43 	b.w	8010294 <uxr_serialize_AGENT_Representation>
 801040e:	2001      	movs	r0, #1
 8010410:	bd70      	pop	{r4, r5, r6, pc}
 8010412:	68a2      	ldr	r2, [r4, #8]
 8010414:	f104 010c 	add.w	r1, r4, #12
 8010418:	4628      	mov	r0, r5
 801041a:	f7fe f8b9 	bl	800e590 <ucdr_serialize_sequence_uint8_t>
 801041e:	4606      	mov	r6, r0
 8010420:	e7e8      	b.n	80103f4 <uxr_serialize_ObjectVariant.part.0+0xc8>
 8010422:	bf00      	nop

08010424 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8010424:	b570      	push	{r4, r5, r6, lr}
 8010426:	460d      	mov	r5, r1
 8010428:	7809      	ldrb	r1, [r1, #0]
 801042a:	4606      	mov	r6, r0
 801042c:	f002 ff34 	bl	8013298 <ucdr_serialize_bool>
 8010430:	782b      	ldrb	r3, [r5, #0]
 8010432:	4604      	mov	r4, r0
 8010434:	b94b      	cbnz	r3, 801044a <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8010436:	7a29      	ldrb	r1, [r5, #8]
 8010438:	4630      	mov	r0, r6
 801043a:	f002 ff2d 	bl	8013298 <ucdr_serialize_bool>
 801043e:	7a2b      	ldrb	r3, [r5, #8]
 8010440:	4004      	ands	r4, r0
 8010442:	b2e4      	uxtb	r4, r4
 8010444:	b943      	cbnz	r3, 8010458 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8010446:	4620      	mov	r0, r4
 8010448:	bd70      	pop	{r4, r5, r6, pc}
 801044a:	6869      	ldr	r1, [r5, #4]
 801044c:	4630      	mov	r0, r6
 801044e:	f003 fe13 	bl	8014078 <ucdr_serialize_string>
 8010452:	4004      	ands	r4, r0
 8010454:	b2e4      	uxtb	r4, r4
 8010456:	e7ee      	b.n	8010436 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8010458:	68e9      	ldr	r1, [r5, #12]
 801045a:	4630      	mov	r0, r6
 801045c:	f003 fe0c 	bl	8014078 <ucdr_serialize_string>
 8010460:	4004      	ands	r4, r0
 8010462:	4620      	mov	r0, r4
 8010464:	bd70      	pop	{r4, r5, r6, pc}
 8010466:	bf00      	nop

08010468 <uxr_serialize_OBJK_Topic_Binary>:
 8010468:	b570      	push	{r4, r5, r6, lr}
 801046a:	460d      	mov	r5, r1
 801046c:	6809      	ldr	r1, [r1, #0]
 801046e:	4606      	mov	r6, r0
 8010470:	f003 fe02 	bl	8014078 <ucdr_serialize_string>
 8010474:	7929      	ldrb	r1, [r5, #4]
 8010476:	4604      	mov	r4, r0
 8010478:	4630      	mov	r0, r6
 801047a:	f002 ff0d 	bl	8013298 <ucdr_serialize_bool>
 801047e:	792b      	ldrb	r3, [r5, #4]
 8010480:	4004      	ands	r4, r0
 8010482:	b2e4      	uxtb	r4, r4
 8010484:	b943      	cbnz	r3, 8010498 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8010486:	7b29      	ldrb	r1, [r5, #12]
 8010488:	4630      	mov	r0, r6
 801048a:	f002 ff05 	bl	8013298 <ucdr_serialize_bool>
 801048e:	7b2b      	ldrb	r3, [r5, #12]
 8010490:	4004      	ands	r4, r0
 8010492:	b93b      	cbnz	r3, 80104a4 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8010494:	4620      	mov	r0, r4
 8010496:	bd70      	pop	{r4, r5, r6, pc}
 8010498:	68a9      	ldr	r1, [r5, #8]
 801049a:	4630      	mov	r0, r6
 801049c:	f003 fdec 	bl	8014078 <ucdr_serialize_string>
 80104a0:	4004      	ands	r4, r0
 80104a2:	e7f0      	b.n	8010486 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 80104a4:	6929      	ldr	r1, [r5, #16]
 80104a6:	4630      	mov	r0, r6
 80104a8:	f003 fde6 	bl	8014078 <ucdr_serialize_string>
 80104ac:	4004      	ands	r4, r0
 80104ae:	b2e4      	uxtb	r4, r4
 80104b0:	4620      	mov	r0, r4
 80104b2:	bd70      	pop	{r4, r5, r6, pc}

080104b4 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 80104b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104b8:	460c      	mov	r4, r1
 80104ba:	7809      	ldrb	r1, [r1, #0]
 80104bc:	4606      	mov	r6, r0
 80104be:	f002 feeb 	bl	8013298 <ucdr_serialize_bool>
 80104c2:	7823      	ldrb	r3, [r4, #0]
 80104c4:	4605      	mov	r5, r0
 80104c6:	b96b      	cbnz	r3, 80104e4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 80104c8:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 80104cc:	4630      	mov	r0, r6
 80104ce:	f002 fee3 	bl	8013298 <ucdr_serialize_bool>
 80104d2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80104d6:	4005      	ands	r5, r0
 80104d8:	b2ed      	uxtb	r5, r5
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d169      	bne.n	80105b2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 80104de:	4628      	mov	r0, r5
 80104e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104e4:	6861      	ldr	r1, [r4, #4]
 80104e6:	4630      	mov	r0, r6
 80104e8:	f003 f91c 	bl	8013724 <ucdr_serialize_uint32_t>
 80104ec:	6863      	ldr	r3, [r4, #4]
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d06b      	beq.n	80105ca <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 80104f2:	2800      	cmp	r0, #0
 80104f4:	d067      	beq.n	80105c6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80104f6:	68a1      	ldr	r1, [r4, #8]
 80104f8:	4630      	mov	r0, r6
 80104fa:	f003 fdbd 	bl	8014078 <ucdr_serialize_string>
 80104fe:	6863      	ldr	r3, [r4, #4]
 8010500:	2b01      	cmp	r3, #1
 8010502:	d953      	bls.n	80105ac <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010504:	2800      	cmp	r0, #0
 8010506:	d05e      	beq.n	80105c6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010508:	68e1      	ldr	r1, [r4, #12]
 801050a:	4630      	mov	r0, r6
 801050c:	f003 fdb4 	bl	8014078 <ucdr_serialize_string>
 8010510:	6863      	ldr	r3, [r4, #4]
 8010512:	2b02      	cmp	r3, #2
 8010514:	d94a      	bls.n	80105ac <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010516:	2800      	cmp	r0, #0
 8010518:	d055      	beq.n	80105c6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801051a:	6921      	ldr	r1, [r4, #16]
 801051c:	4630      	mov	r0, r6
 801051e:	f003 fdab 	bl	8014078 <ucdr_serialize_string>
 8010522:	6863      	ldr	r3, [r4, #4]
 8010524:	2b03      	cmp	r3, #3
 8010526:	d941      	bls.n	80105ac <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010528:	2800      	cmp	r0, #0
 801052a:	d04c      	beq.n	80105c6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801052c:	6961      	ldr	r1, [r4, #20]
 801052e:	4630      	mov	r0, r6
 8010530:	f003 fda2 	bl	8014078 <ucdr_serialize_string>
 8010534:	6863      	ldr	r3, [r4, #4]
 8010536:	2b04      	cmp	r3, #4
 8010538:	d938      	bls.n	80105ac <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801053a:	2800      	cmp	r0, #0
 801053c:	d043      	beq.n	80105c6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801053e:	69a1      	ldr	r1, [r4, #24]
 8010540:	4630      	mov	r0, r6
 8010542:	f003 fd99 	bl	8014078 <ucdr_serialize_string>
 8010546:	6863      	ldr	r3, [r4, #4]
 8010548:	2b05      	cmp	r3, #5
 801054a:	d92f      	bls.n	80105ac <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801054c:	2800      	cmp	r0, #0
 801054e:	d03a      	beq.n	80105c6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010550:	69e1      	ldr	r1, [r4, #28]
 8010552:	4630      	mov	r0, r6
 8010554:	f003 fd90 	bl	8014078 <ucdr_serialize_string>
 8010558:	6863      	ldr	r3, [r4, #4]
 801055a:	2b06      	cmp	r3, #6
 801055c:	d926      	bls.n	80105ac <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801055e:	b390      	cbz	r0, 80105c6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010560:	6a21      	ldr	r1, [r4, #32]
 8010562:	4630      	mov	r0, r6
 8010564:	f003 fd88 	bl	8014078 <ucdr_serialize_string>
 8010568:	6863      	ldr	r3, [r4, #4]
 801056a:	2b07      	cmp	r3, #7
 801056c:	d91e      	bls.n	80105ac <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801056e:	b350      	cbz	r0, 80105c6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010570:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010572:	4630      	mov	r0, r6
 8010574:	f003 fd80 	bl	8014078 <ucdr_serialize_string>
 8010578:	6863      	ldr	r3, [r4, #4]
 801057a:	2b08      	cmp	r3, #8
 801057c:	d916      	bls.n	80105ac <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801057e:	b310      	cbz	r0, 80105c6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010580:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8010582:	4630      	mov	r0, r6
 8010584:	f003 fd78 	bl	8014078 <ucdr_serialize_string>
 8010588:	6863      	ldr	r3, [r4, #4]
 801058a:	2b09      	cmp	r3, #9
 801058c:	d90e      	bls.n	80105ac <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801058e:	b1d0      	cbz	r0, 80105c6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010590:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8010594:	2709      	movs	r7, #9
 8010596:	e000      	b.n	801059a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8010598:	b1a8      	cbz	r0, 80105c6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801059a:	f858 1b04 	ldr.w	r1, [r8], #4
 801059e:	4630      	mov	r0, r6
 80105a0:	f003 fd6a 	bl	8014078 <ucdr_serialize_string>
 80105a4:	6862      	ldr	r2, [r4, #4]
 80105a6:	3701      	adds	r7, #1
 80105a8:	4297      	cmp	r7, r2
 80105aa:	d3f5      	bcc.n	8010598 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 80105ac:	4005      	ands	r5, r0
 80105ae:	b2ed      	uxtb	r5, r5
 80105b0:	e78a      	b.n	80104c8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80105b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80105b4:	4630      	mov	r0, r6
 80105b6:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80105ba:	f7fd ffe9 	bl	800e590 <ucdr_serialize_sequence_uint8_t>
 80105be:	4005      	ands	r5, r0
 80105c0:	4628      	mov	r0, r5
 80105c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105c6:	2500      	movs	r5, #0
 80105c8:	e77e      	b.n	80104c8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80105ca:	4028      	ands	r0, r5
 80105cc:	b2c5      	uxtb	r5, r0
 80105ce:	e77b      	b.n	80104c8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

080105d0 <uxr_serialize_OBJK_Publisher_Binary>:
 80105d0:	b570      	push	{r4, r5, r6, lr}
 80105d2:	460d      	mov	r5, r1
 80105d4:	7809      	ldrb	r1, [r1, #0]
 80105d6:	4606      	mov	r6, r0
 80105d8:	f002 fe5e 	bl	8013298 <ucdr_serialize_bool>
 80105dc:	782b      	ldrb	r3, [r5, #0]
 80105de:	4604      	mov	r4, r0
 80105e0:	b94b      	cbnz	r3, 80105f6 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 80105e2:	7a29      	ldrb	r1, [r5, #8]
 80105e4:	4630      	mov	r0, r6
 80105e6:	f002 fe57 	bl	8013298 <ucdr_serialize_bool>
 80105ea:	7a2b      	ldrb	r3, [r5, #8]
 80105ec:	4004      	ands	r4, r0
 80105ee:	b2e4      	uxtb	r4, r4
 80105f0:	b943      	cbnz	r3, 8010604 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 80105f2:	4620      	mov	r0, r4
 80105f4:	bd70      	pop	{r4, r5, r6, pc}
 80105f6:	6869      	ldr	r1, [r5, #4]
 80105f8:	4630      	mov	r0, r6
 80105fa:	f003 fd3d 	bl	8014078 <ucdr_serialize_string>
 80105fe:	4004      	ands	r4, r0
 8010600:	b2e4      	uxtb	r4, r4
 8010602:	e7ee      	b.n	80105e2 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8010604:	f105 010c 	add.w	r1, r5, #12
 8010608:	4630      	mov	r0, r6
 801060a:	f7ff ff53 	bl	80104b4 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 801060e:	4004      	ands	r4, r0
 8010610:	4620      	mov	r0, r4
 8010612:	bd70      	pop	{r4, r5, r6, pc}

08010614 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8010614:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8010618:	4688      	mov	r8, r1
 801061a:	8809      	ldrh	r1, [r1, #0]
 801061c:	4681      	mov	r9, r0
 801061e:	f002 fe97 	bl	8013350 <ucdr_serialize_uint16_t>
 8010622:	f898 1002 	ldrb.w	r1, [r8, #2]
 8010626:	4606      	mov	r6, r0
 8010628:	4648      	mov	r0, r9
 801062a:	f002 fe35 	bl	8013298 <ucdr_serialize_bool>
 801062e:	f898 3002 	ldrb.w	r3, [r8, #2]
 8010632:	4030      	ands	r0, r6
 8010634:	b2c5      	uxtb	r5, r0
 8010636:	b9eb      	cbnz	r3, 8010674 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8010638:	f898 1006 	ldrb.w	r1, [r8, #6]
 801063c:	4648      	mov	r0, r9
 801063e:	f002 fe2b 	bl	8013298 <ucdr_serialize_bool>
 8010642:	f898 3006 	ldrb.w	r3, [r8, #6]
 8010646:	4005      	ands	r5, r0
 8010648:	bb7b      	cbnz	r3, 80106aa <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 801064a:	f898 100c 	ldrb.w	r1, [r8, #12]
 801064e:	4648      	mov	r0, r9
 8010650:	f002 fe22 	bl	8013298 <ucdr_serialize_bool>
 8010654:	f898 300c 	ldrb.w	r3, [r8, #12]
 8010658:	4005      	ands	r5, r0
 801065a:	b9f3      	cbnz	r3, 801069a <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 801065c:	f898 1014 	ldrb.w	r1, [r8, #20]
 8010660:	4648      	mov	r0, r9
 8010662:	f002 fe19 	bl	8013298 <ucdr_serialize_bool>
 8010666:	f898 3014 	ldrb.w	r3, [r8, #20]
 801066a:	4005      	ands	r5, r0
 801066c:	b94b      	cbnz	r3, 8010682 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 801066e:	4628      	mov	r0, r5
 8010670:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8010674:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8010678:	4648      	mov	r0, r9
 801067a:	f002 fe69 	bl	8013350 <ucdr_serialize_uint16_t>
 801067e:	4005      	ands	r5, r0
 8010680:	e7da      	b.n	8010638 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8010682:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8010686:	4648      	mov	r0, r9
 8010688:	f108 011c 	add.w	r1, r8, #28
 801068c:	f7fd ff80 	bl	800e590 <ucdr_serialize_sequence_uint8_t>
 8010690:	4028      	ands	r0, r5
 8010692:	b2c5      	uxtb	r5, r0
 8010694:	4628      	mov	r0, r5
 8010696:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801069a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801069e:	4648      	mov	r0, r9
 80106a0:	f003 f840 	bl	8013724 <ucdr_serialize_uint32_t>
 80106a4:	4028      	ands	r0, r5
 80106a6:	b2c5      	uxtb	r5, r0
 80106a8:	e7d8      	b.n	801065c <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 80106aa:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80106ae:	4648      	mov	r0, r9
 80106b0:	f003 f838 	bl	8013724 <ucdr_serialize_uint32_t>
 80106b4:	4028      	ands	r0, r5
 80106b6:	b2c5      	uxtb	r5, r0
 80106b8:	e7c7      	b.n	801064a <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 80106ba:	bf00      	nop

080106bc <uxr_serialize_OBJK_DataWriter_Binary>:
 80106bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106be:	2202      	movs	r2, #2
 80106c0:	460d      	mov	r5, r1
 80106c2:	4606      	mov	r6, r0
 80106c4:	f002 fd20 	bl	8013108 <ucdr_serialize_array_uint8_t>
 80106c8:	78a9      	ldrb	r1, [r5, #2]
 80106ca:	4604      	mov	r4, r0
 80106cc:	4630      	mov	r0, r6
 80106ce:	f002 fde3 	bl	8013298 <ucdr_serialize_bool>
 80106d2:	78ab      	ldrb	r3, [r5, #2]
 80106d4:	4004      	ands	r4, r0
 80106d6:	b2e4      	uxtb	r4, r4
 80106d8:	b90b      	cbnz	r3, 80106de <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 80106da:	4620      	mov	r0, r4
 80106dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80106de:	f105 0108 	add.w	r1, r5, #8
 80106e2:	4630      	mov	r0, r6
 80106e4:	f7ff ff96 	bl	8010614 <uxr_serialize_OBJK_Endpoint_QosBinary>
 80106e8:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 80106ec:	4607      	mov	r7, r0
 80106ee:	4630      	mov	r0, r6
 80106f0:	f002 fdd2 	bl	8013298 <ucdr_serialize_bool>
 80106f4:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 80106f8:	4007      	ands	r7, r0
 80106fa:	b2ff      	uxtb	r7, r7
 80106fc:	b913      	cbnz	r3, 8010704 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 80106fe:	403c      	ands	r4, r7
 8010700:	4620      	mov	r0, r4
 8010702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010704:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 8010708:	4630      	mov	r0, r6
 801070a:	f003 fa61 	bl	8013bd0 <ucdr_serialize_uint64_t>
 801070e:	4007      	ands	r7, r0
 8010710:	e7f5      	b.n	80106fe <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8010712:	bf00      	nop

08010714 <uxr_deserialize_ObjectVariant>:
 8010714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010716:	4605      	mov	r5, r0
 8010718:	460e      	mov	r6, r1
 801071a:	f002 fe03 	bl	8013324 <ucdr_deserialize_uint8_t>
 801071e:	b320      	cbz	r0, 801076a <uxr_deserialize_ObjectVariant+0x56>
 8010720:	7833      	ldrb	r3, [r6, #0]
 8010722:	3b01      	subs	r3, #1
 8010724:	4604      	mov	r4, r0
 8010726:	2b0d      	cmp	r3, #13
 8010728:	d81d      	bhi.n	8010766 <uxr_deserialize_ObjectVariant+0x52>
 801072a:	e8df f003 	tbb	[pc, r3]
 801072e:	2107      	.short	0x2107
 8010730:	21214b4b 	.word	0x21214b4b
 8010734:	381c2121 	.word	0x381c2121
 8010738:	876a3838 	.word	0x876a3838
 801073c:	1d31      	adds	r1, r6, #4
 801073e:	4628      	mov	r0, r5
 8010740:	f002 fdf0 	bl	8013324 <ucdr_deserialize_uint8_t>
 8010744:	4607      	mov	r7, r0
 8010746:	b138      	cbz	r0, 8010758 <uxr_deserialize_ObjectVariant+0x44>
 8010748:	7933      	ldrb	r3, [r6, #4]
 801074a:	2b02      	cmp	r3, #2
 801074c:	d07c      	beq.n	8010848 <uxr_deserialize_ObjectVariant+0x134>
 801074e:	2b03      	cmp	r3, #3
 8010750:	f000 8082 	beq.w	8010858 <uxr_deserialize_ObjectVariant+0x144>
 8010754:	2b01      	cmp	r3, #1
 8010756:	d077      	beq.n	8010848 <uxr_deserialize_ObjectVariant+0x134>
 8010758:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 801075c:	4628      	mov	r0, r5
 801075e:	f003 fb87 	bl	8013e70 <ucdr_deserialize_int16_t>
 8010762:	4038      	ands	r0, r7
 8010764:	b2c4      	uxtb	r4, r0
 8010766:	4620      	mov	r0, r4
 8010768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801076a:	2400      	movs	r4, #0
 801076c:	4620      	mov	r0, r4
 801076e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010770:	1d31      	adds	r1, r6, #4
 8010772:	4628      	mov	r0, r5
 8010774:	f002 fdd6 	bl	8013324 <ucdr_deserialize_uint8_t>
 8010778:	4607      	mov	r7, r0
 801077a:	b130      	cbz	r0, 801078a <uxr_deserialize_ObjectVariant+0x76>
 801077c:	7933      	ldrb	r3, [r6, #4]
 801077e:	2b02      	cmp	r3, #2
 8010780:	d037      	beq.n	80107f2 <uxr_deserialize_ObjectVariant+0xde>
 8010782:	2b03      	cmp	r3, #3
 8010784:	d02a      	beq.n	80107dc <uxr_deserialize_ObjectVariant+0xc8>
 8010786:	2b01      	cmp	r3, #1
 8010788:	d033      	beq.n	80107f2 <uxr_deserialize_ObjectVariant+0xde>
 801078a:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 801078e:	4628      	mov	r0, r5
 8010790:	2202      	movs	r2, #2
 8010792:	f002 fd1d 	bl	80131d0 <ucdr_deserialize_array_uint8_t>
 8010796:	4038      	ands	r0, r7
 8010798:	b2c4      	uxtb	r4, r0
 801079a:	4620      	mov	r0, r4
 801079c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801079e:	1d31      	adds	r1, r6, #4
 80107a0:	4628      	mov	r0, r5
 80107a2:	f002 fdbf 	bl	8013324 <ucdr_deserialize_uint8_t>
 80107a6:	2800      	cmp	r0, #0
 80107a8:	d0df      	beq.n	801076a <uxr_deserialize_ObjectVariant+0x56>
 80107aa:	7933      	ldrb	r3, [r6, #4]
 80107ac:	2b01      	cmp	r3, #1
 80107ae:	d001      	beq.n	80107b4 <uxr_deserialize_ObjectVariant+0xa0>
 80107b0:	2b02      	cmp	r3, #2
 80107b2:	d1d8      	bne.n	8010766 <uxr_deserialize_ObjectVariant+0x52>
 80107b4:	68b1      	ldr	r1, [r6, #8]
 80107b6:	4628      	mov	r0, r5
 80107b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80107bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80107c0:	f003 bc6a 	b.w	8014098 <ucdr_deserialize_string>
 80107c4:	1d31      	adds	r1, r6, #4
 80107c6:	4628      	mov	r0, r5
 80107c8:	f002 fdac 	bl	8013324 <ucdr_deserialize_uint8_t>
 80107cc:	4607      	mov	r7, r0
 80107ce:	2800      	cmp	r0, #0
 80107d0:	d0db      	beq.n	801078a <uxr_deserialize_ObjectVariant+0x76>
 80107d2:	7933      	ldrb	r3, [r6, #4]
 80107d4:	2b02      	cmp	r3, #2
 80107d6:	d00c      	beq.n	80107f2 <uxr_deserialize_ObjectVariant+0xde>
 80107d8:	2b03      	cmp	r3, #3
 80107da:	d1d6      	bne.n	801078a <uxr_deserialize_ObjectVariant+0x76>
 80107dc:	f106 0308 	add.w	r3, r6, #8
 80107e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80107e4:	f106 010c 	add.w	r1, r6, #12
 80107e8:	4628      	mov	r0, r5
 80107ea:	f7fd fee3 	bl	800e5b4 <ucdr_deserialize_sequence_uint8_t>
 80107ee:	4607      	mov	r7, r0
 80107f0:	e7cb      	b.n	801078a <uxr_deserialize_ObjectVariant+0x76>
 80107f2:	68b1      	ldr	r1, [r6, #8]
 80107f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80107f8:	4628      	mov	r0, r5
 80107fa:	f003 fc4d 	bl	8014098 <ucdr_deserialize_string>
 80107fe:	4607      	mov	r7, r0
 8010800:	e7c3      	b.n	801078a <uxr_deserialize_ObjectVariant+0x76>
 8010802:	2204      	movs	r2, #4
 8010804:	18b1      	adds	r1, r6, r2
 8010806:	4628      	mov	r0, r5
 8010808:	f002 fce2 	bl	80131d0 <ucdr_deserialize_array_uint8_t>
 801080c:	2202      	movs	r2, #2
 801080e:	4604      	mov	r4, r0
 8010810:	f106 0108 	add.w	r1, r6, #8
 8010814:	4628      	mov	r0, r5
 8010816:	f002 fcdb 	bl	80131d0 <ucdr_deserialize_array_uint8_t>
 801081a:	2202      	movs	r2, #2
 801081c:	4004      	ands	r4, r0
 801081e:	f106 010a 	add.w	r1, r6, #10
 8010822:	4628      	mov	r0, r5
 8010824:	f002 fcd4 	bl	80131d0 <ucdr_deserialize_array_uint8_t>
 8010828:	b2e4      	uxtb	r4, r4
 801082a:	4603      	mov	r3, r0
 801082c:	f106 010c 	add.w	r1, r6, #12
 8010830:	4628      	mov	r0, r5
 8010832:	401c      	ands	r4, r3
 8010834:	f002 fd46 	bl	80132c4 <ucdr_deserialize_bool>
 8010838:	4004      	ands	r4, r0
 801083a:	e794      	b.n	8010766 <uxr_deserialize_ObjectVariant+0x52>
 801083c:	1d31      	adds	r1, r6, #4
 801083e:	4628      	mov	r0, r5
 8010840:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010844:	f7ff bcbc 	b.w	80101c0 <uxr_deserialize_CLIENT_Representation>
 8010848:	68b1      	ldr	r1, [r6, #8]
 801084a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801084e:	4628      	mov	r0, r5
 8010850:	f003 fc22 	bl	8014098 <ucdr_deserialize_string>
 8010854:	4607      	mov	r7, r0
 8010856:	e77f      	b.n	8010758 <uxr_deserialize_ObjectVariant+0x44>
 8010858:	f106 0308 	add.w	r3, r6, #8
 801085c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010860:	f106 010c 	add.w	r1, r6, #12
 8010864:	4628      	mov	r0, r5
 8010866:	f7fd fea5 	bl	800e5b4 <ucdr_deserialize_sequence_uint8_t>
 801086a:	4607      	mov	r7, r0
 801086c:	e774      	b.n	8010758 <uxr_deserialize_ObjectVariant+0x44>
 801086e:	bf00      	nop

08010870 <uxr_deserialize_BaseObjectRequest>:
 8010870:	b570      	push	{r4, r5, r6, lr}
 8010872:	2202      	movs	r2, #2
 8010874:	4605      	mov	r5, r0
 8010876:	460e      	mov	r6, r1
 8010878:	f002 fcaa 	bl	80131d0 <ucdr_deserialize_array_uint8_t>
 801087c:	1cb1      	adds	r1, r6, #2
 801087e:	4604      	mov	r4, r0
 8010880:	2202      	movs	r2, #2
 8010882:	4628      	mov	r0, r5
 8010884:	f002 fca4 	bl	80131d0 <ucdr_deserialize_array_uint8_t>
 8010888:	4020      	ands	r0, r4
 801088a:	b2c0      	uxtb	r0, r0
 801088c:	bd70      	pop	{r4, r5, r6, pc}
 801088e:	bf00      	nop

08010890 <uxr_serialize_AGENT_ActivityInfo>:
 8010890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010894:	460e      	mov	r6, r1
 8010896:	f9b1 1000 	ldrsh.w	r1, [r1]
 801089a:	4607      	mov	r7, r0
 801089c:	f003 fa68 	bl	8013d70 <ucdr_serialize_int16_t>
 80108a0:	6871      	ldr	r1, [r6, #4]
 80108a2:	4680      	mov	r8, r0
 80108a4:	4638      	mov	r0, r7
 80108a6:	f002 ff3d 	bl	8013724 <ucdr_serialize_uint32_t>
 80108aa:	6873      	ldr	r3, [r6, #4]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d06a      	beq.n	8010986 <uxr_serialize_AGENT_ActivityInfo+0xf6>
 80108b0:	b318      	cbz	r0, 80108fa <uxr_serialize_AGENT_ActivityInfo+0x6a>
 80108b2:	f106 0904 	add.w	r9, r6, #4
 80108b6:	2500      	movs	r5, #0
 80108b8:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 80108bc:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 80108c0:	7a21      	ldrb	r1, [r4, #8]
 80108c2:	4638      	mov	r0, r7
 80108c4:	f002 fd18 	bl	80132f8 <ucdr_serialize_uint8_t>
 80108c8:	2800      	cmp	r0, #0
 80108ca:	d051      	beq.n	8010970 <uxr_serialize_AGENT_ActivityInfo+0xe0>
 80108cc:	7a23      	ldrb	r3, [r4, #8]
 80108ce:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80108d2:	00c9      	lsls	r1, r1, #3
 80108d4:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 80108d8:	2b03      	cmp	r3, #3
 80108da:	d859      	bhi.n	8010990 <uxr_serialize_AGENT_ActivityInfo+0x100>
 80108dc:	e8df f003 	tbb	[pc, r3]
 80108e0:	02122436 	.word	0x02122436
 80108e4:	4449      	add	r1, r9
 80108e6:	4638      	mov	r0, r7
 80108e8:	6889      	ldr	r1, [r1, #8]
 80108ea:	f003 fbc5 	bl	8014078 <ucdr_serialize_string>
 80108ee:	6873      	ldr	r3, [r6, #4]
 80108f0:	3501      	adds	r5, #1
 80108f2:	429d      	cmp	r5, r3
 80108f4:	d240      	bcs.n	8010978 <uxr_serialize_AGENT_ActivityInfo+0xe8>
 80108f6:	2800      	cmp	r0, #0
 80108f8:	d1de      	bne.n	80108b8 <uxr_serialize_AGENT_ActivityInfo+0x28>
 80108fa:	f04f 0800 	mov.w	r8, #0
 80108fe:	4640      	mov	r0, r8
 8010900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010904:	3108      	adds	r1, #8
 8010906:	4449      	add	r1, r9
 8010908:	2210      	movs	r2, #16
 801090a:	4638      	mov	r0, r7
 801090c:	f002 fbfc 	bl	8013108 <ucdr_serialize_array_uint8_t>
 8010910:	44aa      	add	sl, r5
 8010912:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8010916:	4604      	mov	r4, r0
 8010918:	f8da 101c 	ldr.w	r1, [sl, #28]
 801091c:	4638      	mov	r0, r7
 801091e:	f002 ff01 	bl	8013724 <ucdr_serialize_uint32_t>
 8010922:	4020      	ands	r0, r4
 8010924:	b2c0      	uxtb	r0, r0
 8010926:	e7e2      	b.n	80108ee <uxr_serialize_AGENT_ActivityInfo+0x5e>
 8010928:	3108      	adds	r1, #8
 801092a:	4449      	add	r1, r9
 801092c:	2204      	movs	r2, #4
 801092e:	4638      	mov	r0, r7
 8010930:	f002 fbea 	bl	8013108 <ucdr_serialize_array_uint8_t>
 8010934:	44aa      	add	sl, r5
 8010936:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801093a:	4604      	mov	r4, r0
 801093c:	f8ba 1010 	ldrh.w	r1, [sl, #16]
 8010940:	4638      	mov	r0, r7
 8010942:	f002 fd05 	bl	8013350 <ucdr_serialize_uint16_t>
 8010946:	4020      	ands	r0, r4
 8010948:	b2c0      	uxtb	r0, r0
 801094a:	e7d0      	b.n	80108ee <uxr_serialize_AGENT_ActivityInfo+0x5e>
 801094c:	3108      	adds	r1, #8
 801094e:	4449      	add	r1, r9
 8010950:	2202      	movs	r2, #2
 8010952:	4638      	mov	r0, r7
 8010954:	f002 fbd8 	bl	8013108 <ucdr_serialize_array_uint8_t>
 8010958:	44aa      	add	sl, r5
 801095a:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801095e:	4604      	mov	r4, r0
 8010960:	f89a 100e 	ldrb.w	r1, [sl, #14]
 8010964:	4638      	mov	r0, r7
 8010966:	f002 fcc7 	bl	80132f8 <ucdr_serialize_uint8_t>
 801096a:	4020      	ands	r0, r4
 801096c:	b2c0      	uxtb	r0, r0
 801096e:	e7be      	b.n	80108ee <uxr_serialize_AGENT_ActivityInfo+0x5e>
 8010970:	6873      	ldr	r3, [r6, #4]
 8010972:	3501      	adds	r5, #1
 8010974:	429d      	cmp	r5, r3
 8010976:	d3c0      	bcc.n	80108fa <uxr_serialize_AGENT_ActivityInfo+0x6a>
 8010978:	ea08 0000 	and.w	r0, r8, r0
 801097c:	fa5f f880 	uxtb.w	r8, r0
 8010980:	4640      	mov	r0, r8
 8010982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010986:	ea08 0800 	and.w	r8, r8, r0
 801098a:	fa5f f888 	uxtb.w	r8, r8
 801098e:	e7b6      	b.n	80108fe <uxr_serialize_AGENT_ActivityInfo+0x6e>
 8010990:	6873      	ldr	r3, [r6, #4]
 8010992:	3501      	adds	r5, #1
 8010994:	42ab      	cmp	r3, r5
 8010996:	f104 0418 	add.w	r4, r4, #24
 801099a:	d891      	bhi.n	80108c0 <uxr_serialize_AGENT_ActivityInfo+0x30>
 801099c:	e7af      	b.n	80108fe <uxr_serialize_AGENT_ActivityInfo+0x6e>
 801099e:	bf00      	nop

080109a0 <uxr_serialize_ActivityInfoVariant>:
 80109a0:	b570      	push	{r4, r5, r6, lr}
 80109a2:	460d      	mov	r5, r1
 80109a4:	7809      	ldrb	r1, [r1, #0]
 80109a6:	4606      	mov	r6, r0
 80109a8:	f002 fca6 	bl	80132f8 <ucdr_serialize_uint8_t>
 80109ac:	b130      	cbz	r0, 80109bc <uxr_serialize_ActivityInfoVariant+0x1c>
 80109ae:	782b      	ldrb	r3, [r5, #0]
 80109b0:	2b06      	cmp	r3, #6
 80109b2:	d019      	beq.n	80109e8 <uxr_serialize_ActivityInfoVariant+0x48>
 80109b4:	2b0d      	cmp	r3, #13
 80109b6:	d010      	beq.n	80109da <uxr_serialize_ActivityInfoVariant+0x3a>
 80109b8:	2b05      	cmp	r3, #5
 80109ba:	d000      	beq.n	80109be <uxr_serialize_ActivityInfoVariant+0x1e>
 80109bc:	bd70      	pop	{r4, r5, r6, pc}
 80109be:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80109c2:	4630      	mov	r0, r6
 80109c4:	f003 f9d4 	bl	8013d70 <ucdr_serialize_int16_t>
 80109c8:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 80109cc:	4604      	mov	r4, r0
 80109ce:	4630      	mov	r0, r6
 80109d0:	f003 f8fe 	bl	8013bd0 <ucdr_serialize_uint64_t>
 80109d4:	4020      	ands	r0, r4
 80109d6:	b2c0      	uxtb	r0, r0
 80109d8:	bd70      	pop	{r4, r5, r6, pc}
 80109da:	f105 0108 	add.w	r1, r5, #8
 80109de:	4630      	mov	r0, r6
 80109e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80109e4:	f7ff bf54 	b.w	8010890 <uxr_serialize_AGENT_ActivityInfo>
 80109e8:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80109ec:	4630      	mov	r0, r6
 80109ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80109f2:	f003 b9bd 	b.w	8013d70 <ucdr_serialize_int16_t>
 80109f6:	bf00      	nop

080109f8 <uxr_deserialize_BaseObjectReply>:
 80109f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109fc:	2202      	movs	r2, #2
 80109fe:	4606      	mov	r6, r0
 8010a00:	460f      	mov	r7, r1
 8010a02:	f002 fbe5 	bl	80131d0 <ucdr_deserialize_array_uint8_t>
 8010a06:	2202      	movs	r2, #2
 8010a08:	1cb9      	adds	r1, r7, #2
 8010a0a:	4605      	mov	r5, r0
 8010a0c:	4630      	mov	r0, r6
 8010a0e:	f002 fbdf 	bl	80131d0 <ucdr_deserialize_array_uint8_t>
 8010a12:	1d39      	adds	r1, r7, #4
 8010a14:	4680      	mov	r8, r0
 8010a16:	4630      	mov	r0, r6
 8010a18:	f002 fc84 	bl	8013324 <ucdr_deserialize_uint8_t>
 8010a1c:	1d79      	adds	r1, r7, #5
 8010a1e:	4604      	mov	r4, r0
 8010a20:	4630      	mov	r0, r6
 8010a22:	f002 fc7f 	bl	8013324 <ucdr_deserialize_uint8_t>
 8010a26:	ea05 0508 	and.w	r5, r5, r8
 8010a2a:	402c      	ands	r4, r5
 8010a2c:	4020      	ands	r0, r4
 8010a2e:	b2c0      	uxtb	r0, r0
 8010a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010a34 <uxr_serialize_ReadSpecification>:
 8010a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a38:	460e      	mov	r6, r1
 8010a3a:	7809      	ldrb	r1, [r1, #0]
 8010a3c:	4607      	mov	r7, r0
 8010a3e:	f002 fc5b 	bl	80132f8 <ucdr_serialize_uint8_t>
 8010a42:	7871      	ldrb	r1, [r6, #1]
 8010a44:	4604      	mov	r4, r0
 8010a46:	4638      	mov	r0, r7
 8010a48:	f002 fc56 	bl	80132f8 <ucdr_serialize_uint8_t>
 8010a4c:	78b1      	ldrb	r1, [r6, #2]
 8010a4e:	4004      	ands	r4, r0
 8010a50:	4638      	mov	r0, r7
 8010a52:	f002 fc21 	bl	8013298 <ucdr_serialize_bool>
 8010a56:	78b3      	ldrb	r3, [r6, #2]
 8010a58:	b2e4      	uxtb	r4, r4
 8010a5a:	4004      	ands	r4, r0
 8010a5c:	b94b      	cbnz	r3, 8010a72 <uxr_serialize_ReadSpecification+0x3e>
 8010a5e:	7a31      	ldrb	r1, [r6, #8]
 8010a60:	4638      	mov	r0, r7
 8010a62:	f002 fc19 	bl	8013298 <ucdr_serialize_bool>
 8010a66:	7a33      	ldrb	r3, [r6, #8]
 8010a68:	4004      	ands	r4, r0
 8010a6a:	b943      	cbnz	r3, 8010a7e <uxr_serialize_ReadSpecification+0x4a>
 8010a6c:	4620      	mov	r0, r4
 8010a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a72:	6871      	ldr	r1, [r6, #4]
 8010a74:	4638      	mov	r0, r7
 8010a76:	f003 faff 	bl	8014078 <ucdr_serialize_string>
 8010a7a:	4004      	ands	r4, r0
 8010a7c:	e7ef      	b.n	8010a5e <uxr_serialize_ReadSpecification+0x2a>
 8010a7e:	8971      	ldrh	r1, [r6, #10]
 8010a80:	4638      	mov	r0, r7
 8010a82:	f002 fc65 	bl	8013350 <ucdr_serialize_uint16_t>
 8010a86:	89b1      	ldrh	r1, [r6, #12]
 8010a88:	4605      	mov	r5, r0
 8010a8a:	4638      	mov	r0, r7
 8010a8c:	f002 fc60 	bl	8013350 <ucdr_serialize_uint16_t>
 8010a90:	89f1      	ldrh	r1, [r6, #14]
 8010a92:	4005      	ands	r5, r0
 8010a94:	4638      	mov	r0, r7
 8010a96:	f002 fc5b 	bl	8013350 <ucdr_serialize_uint16_t>
 8010a9a:	8a31      	ldrh	r1, [r6, #16]
 8010a9c:	4680      	mov	r8, r0
 8010a9e:	4638      	mov	r0, r7
 8010aa0:	f002 fc56 	bl	8013350 <ucdr_serialize_uint16_t>
 8010aa4:	b2ed      	uxtb	r5, r5
 8010aa6:	4025      	ands	r5, r4
 8010aa8:	ea08 0505 	and.w	r5, r8, r5
 8010aac:	ea00 0405 	and.w	r4, r0, r5
 8010ab0:	4620      	mov	r0, r4
 8010ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ab6:	bf00      	nop

08010ab8 <uxr_serialize_CREATE_CLIENT_Payload>:
 8010ab8:	f7ff bb26 	b.w	8010108 <uxr_serialize_CLIENT_Representation>

08010abc <uxr_serialize_CREATE_Payload>:
 8010abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010abe:	2202      	movs	r2, #2
 8010ac0:	4606      	mov	r6, r0
 8010ac2:	460d      	mov	r5, r1
 8010ac4:	f002 fb20 	bl	8013108 <ucdr_serialize_array_uint8_t>
 8010ac8:	1ca9      	adds	r1, r5, #2
 8010aca:	4604      	mov	r4, r0
 8010acc:	2202      	movs	r2, #2
 8010ace:	4630      	mov	r0, r6
 8010ad0:	f002 fb1a 	bl	8013108 <ucdr_serialize_array_uint8_t>
 8010ad4:	7929      	ldrb	r1, [r5, #4]
 8010ad6:	4607      	mov	r7, r0
 8010ad8:	4630      	mov	r0, r6
 8010ada:	f002 fc0d 	bl	80132f8 <ucdr_serialize_uint8_t>
 8010ade:	b328      	cbz	r0, 8010b2c <uxr_serialize_CREATE_Payload+0x70>
 8010ae0:	792b      	ldrb	r3, [r5, #4]
 8010ae2:	403c      	ands	r4, r7
 8010ae4:	3b01      	subs	r3, #1
 8010ae6:	b2e4      	uxtb	r4, r4
 8010ae8:	2b0d      	cmp	r3, #13
 8010aea:	d81d      	bhi.n	8010b28 <uxr_serialize_CREATE_Payload+0x6c>
 8010aec:	e8df f003 	tbb	[pc, r3]
 8010af0:	32320753 	.word	0x32320753
 8010af4:	07070707 	.word	0x07070707
 8010af8:	2121211c 	.word	0x2121211c
 8010afc:	684c      	.short	0x684c
 8010afe:	7a29      	ldrb	r1, [r5, #8]
 8010b00:	4630      	mov	r0, r6
 8010b02:	f002 fbf9 	bl	80132f8 <ucdr_serialize_uint8_t>
 8010b06:	4607      	mov	r7, r0
 8010b08:	b130      	cbz	r0, 8010b18 <uxr_serialize_CREATE_Payload+0x5c>
 8010b0a:	7a2b      	ldrb	r3, [r5, #8]
 8010b0c:	2b02      	cmp	r3, #2
 8010b0e:	d035      	beq.n	8010b7c <uxr_serialize_CREATE_Payload+0xc0>
 8010b10:	2b03      	cmp	r3, #3
 8010b12:	d02b      	beq.n	8010b6c <uxr_serialize_CREATE_Payload+0xb0>
 8010b14:	2b01      	cmp	r3, #1
 8010b16:	d031      	beq.n	8010b7c <uxr_serialize_CREATE_Payload+0xc0>
 8010b18:	f505 7104 	add.w	r1, r5, #528	; 0x210
 8010b1c:	4630      	mov	r0, r6
 8010b1e:	2202      	movs	r2, #2
 8010b20:	f002 faf2 	bl	8013108 <ucdr_serialize_array_uint8_t>
 8010b24:	4038      	ands	r0, r7
 8010b26:	4004      	ands	r4, r0
 8010b28:	4620      	mov	r0, r4
 8010b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b2c:	2400      	movs	r4, #0
 8010b2e:	4620      	mov	r0, r4
 8010b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b32:	7a29      	ldrb	r1, [r5, #8]
 8010b34:	4630      	mov	r0, r6
 8010b36:	f002 fbdf 	bl	80132f8 <ucdr_serialize_uint8_t>
 8010b3a:	2800      	cmp	r0, #0
 8010b3c:	d0f6      	beq.n	8010b2c <uxr_serialize_CREATE_Payload+0x70>
 8010b3e:	7a2b      	ldrb	r3, [r5, #8]
 8010b40:	2b01      	cmp	r3, #1
 8010b42:	d001      	beq.n	8010b48 <uxr_serialize_CREATE_Payload+0x8c>
 8010b44:	2b02      	cmp	r3, #2
 8010b46:	d1ef      	bne.n	8010b28 <uxr_serialize_CREATE_Payload+0x6c>
 8010b48:	68e9      	ldr	r1, [r5, #12]
 8010b4a:	4630      	mov	r0, r6
 8010b4c:	f003 fa94 	bl	8014078 <ucdr_serialize_string>
 8010b50:	4004      	ands	r4, r0
 8010b52:	e7e9      	b.n	8010b28 <uxr_serialize_CREATE_Payload+0x6c>
 8010b54:	7a29      	ldrb	r1, [r5, #8]
 8010b56:	4630      	mov	r0, r6
 8010b58:	f002 fbce 	bl	80132f8 <ucdr_serialize_uint8_t>
 8010b5c:	4607      	mov	r7, r0
 8010b5e:	2800      	cmp	r0, #0
 8010b60:	d0da      	beq.n	8010b18 <uxr_serialize_CREATE_Payload+0x5c>
 8010b62:	7a2b      	ldrb	r3, [r5, #8]
 8010b64:	2b02      	cmp	r3, #2
 8010b66:	d009      	beq.n	8010b7c <uxr_serialize_CREATE_Payload+0xc0>
 8010b68:	2b03      	cmp	r3, #3
 8010b6a:	d1d5      	bne.n	8010b18 <uxr_serialize_CREATE_Payload+0x5c>
 8010b6c:	68ea      	ldr	r2, [r5, #12]
 8010b6e:	f105 0110 	add.w	r1, r5, #16
 8010b72:	4630      	mov	r0, r6
 8010b74:	f7fd fd0c 	bl	800e590 <ucdr_serialize_sequence_uint8_t>
 8010b78:	4607      	mov	r7, r0
 8010b7a:	e7cd      	b.n	8010b18 <uxr_serialize_CREATE_Payload+0x5c>
 8010b7c:	68e9      	ldr	r1, [r5, #12]
 8010b7e:	4630      	mov	r0, r6
 8010b80:	f003 fa7a 	bl	8014078 <ucdr_serialize_string>
 8010b84:	4607      	mov	r7, r0
 8010b86:	e7c7      	b.n	8010b18 <uxr_serialize_CREATE_Payload+0x5c>
 8010b88:	f105 0108 	add.w	r1, r5, #8
 8010b8c:	4630      	mov	r0, r6
 8010b8e:	f7ff fb81 	bl	8010294 <uxr_serialize_AGENT_Representation>
 8010b92:	4004      	ands	r4, r0
 8010b94:	e7c8      	b.n	8010b28 <uxr_serialize_CREATE_Payload+0x6c>
 8010b96:	7a29      	ldrb	r1, [r5, #8]
 8010b98:	4630      	mov	r0, r6
 8010b9a:	f002 fbad 	bl	80132f8 <ucdr_serialize_uint8_t>
 8010b9e:	4607      	mov	r7, r0
 8010ba0:	b130      	cbz	r0, 8010bb0 <uxr_serialize_CREATE_Payload+0xf4>
 8010ba2:	7a2b      	ldrb	r3, [r5, #8]
 8010ba4:	2b02      	cmp	r3, #2
 8010ba6:	d012      	beq.n	8010bce <uxr_serialize_CREATE_Payload+0x112>
 8010ba8:	2b03      	cmp	r3, #3
 8010baa:	d016      	beq.n	8010bda <uxr_serialize_CREATE_Payload+0x11e>
 8010bac:	2b01      	cmp	r3, #1
 8010bae:	d00e      	beq.n	8010bce <uxr_serialize_CREATE_Payload+0x112>
 8010bb0:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	; 0x210
 8010bb4:	4630      	mov	r0, r6
 8010bb6:	f003 f8db 	bl	8013d70 <ucdr_serialize_int16_t>
 8010bba:	4038      	ands	r0, r7
 8010bbc:	4004      	ands	r4, r0
 8010bbe:	e7b3      	b.n	8010b28 <uxr_serialize_CREATE_Payload+0x6c>
 8010bc0:	f105 0108 	add.w	r1, r5, #8
 8010bc4:	4630      	mov	r0, r6
 8010bc6:	f7ff fa9f 	bl	8010108 <uxr_serialize_CLIENT_Representation>
 8010bca:	4004      	ands	r4, r0
 8010bcc:	e7ac      	b.n	8010b28 <uxr_serialize_CREATE_Payload+0x6c>
 8010bce:	68e9      	ldr	r1, [r5, #12]
 8010bd0:	4630      	mov	r0, r6
 8010bd2:	f003 fa51 	bl	8014078 <ucdr_serialize_string>
 8010bd6:	4607      	mov	r7, r0
 8010bd8:	e7ea      	b.n	8010bb0 <uxr_serialize_CREATE_Payload+0xf4>
 8010bda:	68ea      	ldr	r2, [r5, #12]
 8010bdc:	f105 0110 	add.w	r1, r5, #16
 8010be0:	4630      	mov	r0, r6
 8010be2:	f7fd fcd5 	bl	800e590 <ucdr_serialize_sequence_uint8_t>
 8010be6:	4607      	mov	r7, r0
 8010be8:	e7e2      	b.n	8010bb0 <uxr_serialize_CREATE_Payload+0xf4>
 8010bea:	bf00      	nop

08010bec <uxr_deserialize_GET_INFO_Payload>:
 8010bec:	b570      	push	{r4, r5, r6, lr}
 8010bee:	2202      	movs	r2, #2
 8010bf0:	4605      	mov	r5, r0
 8010bf2:	460e      	mov	r6, r1
 8010bf4:	f002 faec 	bl	80131d0 <ucdr_deserialize_array_uint8_t>
 8010bf8:	1cb1      	adds	r1, r6, #2
 8010bfa:	2202      	movs	r2, #2
 8010bfc:	4604      	mov	r4, r0
 8010bfe:	4628      	mov	r0, r5
 8010c00:	f002 fae6 	bl	80131d0 <ucdr_deserialize_array_uint8_t>
 8010c04:	1d31      	adds	r1, r6, #4
 8010c06:	4004      	ands	r4, r0
 8010c08:	4628      	mov	r0, r5
 8010c0a:	f002 febb 	bl	8013984 <ucdr_deserialize_uint32_t>
 8010c0e:	b2e4      	uxtb	r4, r4
 8010c10:	4020      	ands	r0, r4
 8010c12:	bd70      	pop	{r4, r5, r6, pc}

08010c14 <uxr_serialize_DELETE_Payload>:
 8010c14:	b570      	push	{r4, r5, r6, lr}
 8010c16:	2202      	movs	r2, #2
 8010c18:	4605      	mov	r5, r0
 8010c1a:	460e      	mov	r6, r1
 8010c1c:	f002 fa74 	bl	8013108 <ucdr_serialize_array_uint8_t>
 8010c20:	1cb1      	adds	r1, r6, #2
 8010c22:	4604      	mov	r4, r0
 8010c24:	2202      	movs	r2, #2
 8010c26:	4628      	mov	r0, r5
 8010c28:	f002 fa6e 	bl	8013108 <ucdr_serialize_array_uint8_t>
 8010c2c:	4020      	ands	r0, r4
 8010c2e:	b2c0      	uxtb	r0, r0
 8010c30:	bd70      	pop	{r4, r5, r6, pc}
 8010c32:	bf00      	nop

08010c34 <uxr_deserialize_STATUS_AGENT_Payload>:
 8010c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c38:	4606      	mov	r6, r0
 8010c3a:	460f      	mov	r7, r1
 8010c3c:	f002 fb72 	bl	8013324 <ucdr_deserialize_uint8_t>
 8010c40:	1c79      	adds	r1, r7, #1
 8010c42:	4605      	mov	r5, r0
 8010c44:	4630      	mov	r0, r6
 8010c46:	f002 fb6d 	bl	8013324 <ucdr_deserialize_uint8_t>
 8010c4a:	1d39      	adds	r1, r7, #4
 8010c4c:	4681      	mov	r9, r0
 8010c4e:	2204      	movs	r2, #4
 8010c50:	4630      	mov	r0, r6
 8010c52:	f002 fabd 	bl	80131d0 <ucdr_deserialize_array_uint8_t>
 8010c56:	f107 0108 	add.w	r1, r7, #8
 8010c5a:	4604      	mov	r4, r0
 8010c5c:	2202      	movs	r2, #2
 8010c5e:	4630      	mov	r0, r6
 8010c60:	f002 fab6 	bl	80131d0 <ucdr_deserialize_array_uint8_t>
 8010c64:	f107 010a 	add.w	r1, r7, #10
 8010c68:	4680      	mov	r8, r0
 8010c6a:	2202      	movs	r2, #2
 8010c6c:	4630      	mov	r0, r6
 8010c6e:	f002 faaf 	bl	80131d0 <ucdr_deserialize_array_uint8_t>
 8010c72:	ea05 0509 	and.w	r5, r5, r9
 8010c76:	b2ed      	uxtb	r5, r5
 8010c78:	402c      	ands	r4, r5
 8010c7a:	f107 010c 	add.w	r1, r7, #12
 8010c7e:	4605      	mov	r5, r0
 8010c80:	4630      	mov	r0, r6
 8010c82:	f002 fb1f 	bl	80132c4 <ucdr_deserialize_bool>
 8010c86:	ea08 0404 	and.w	r4, r8, r4
 8010c8a:	4025      	ands	r5, r4
 8010c8c:	4028      	ands	r0, r5
 8010c8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c92:	bf00      	nop

08010c94 <uxr_deserialize_STATUS_Payload>:
 8010c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c98:	2202      	movs	r2, #2
 8010c9a:	4606      	mov	r6, r0
 8010c9c:	460f      	mov	r7, r1
 8010c9e:	f002 fa97 	bl	80131d0 <ucdr_deserialize_array_uint8_t>
 8010ca2:	2202      	movs	r2, #2
 8010ca4:	1cb9      	adds	r1, r7, #2
 8010ca6:	4605      	mov	r5, r0
 8010ca8:	4630      	mov	r0, r6
 8010caa:	f002 fa91 	bl	80131d0 <ucdr_deserialize_array_uint8_t>
 8010cae:	1d39      	adds	r1, r7, #4
 8010cb0:	4680      	mov	r8, r0
 8010cb2:	4630      	mov	r0, r6
 8010cb4:	f002 fb36 	bl	8013324 <ucdr_deserialize_uint8_t>
 8010cb8:	1d79      	adds	r1, r7, #5
 8010cba:	4604      	mov	r4, r0
 8010cbc:	4630      	mov	r0, r6
 8010cbe:	f002 fb31 	bl	8013324 <ucdr_deserialize_uint8_t>
 8010cc2:	ea05 0508 	and.w	r5, r5, r8
 8010cc6:	402c      	ands	r4, r5
 8010cc8:	4020      	ands	r0, r4
 8010cca:	b2c0      	uxtb	r0, r0
 8010ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010cd0 <uxr_serialize_INFO_Payload>:
 8010cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cd4:	2202      	movs	r2, #2
 8010cd6:	460c      	mov	r4, r1
 8010cd8:	4605      	mov	r5, r0
 8010cda:	f002 fa15 	bl	8013108 <ucdr_serialize_array_uint8_t>
 8010cde:	2202      	movs	r2, #2
 8010ce0:	4680      	mov	r8, r0
 8010ce2:	1ca1      	adds	r1, r4, #2
 8010ce4:	4628      	mov	r0, r5
 8010ce6:	f002 fa0f 	bl	8013108 <ucdr_serialize_array_uint8_t>
 8010cea:	7921      	ldrb	r1, [r4, #4]
 8010cec:	4607      	mov	r7, r0
 8010cee:	4628      	mov	r0, r5
 8010cf0:	f002 fb02 	bl	80132f8 <ucdr_serialize_uint8_t>
 8010cf4:	7961      	ldrb	r1, [r4, #5]
 8010cf6:	4606      	mov	r6, r0
 8010cf8:	4628      	mov	r0, r5
 8010cfa:	f002 fafd 	bl	80132f8 <ucdr_serialize_uint8_t>
 8010cfe:	ea08 0807 	and.w	r8, r8, r7
 8010d02:	ea06 0608 	and.w	r6, r6, r8
 8010d06:	4006      	ands	r6, r0
 8010d08:	7a21      	ldrb	r1, [r4, #8]
 8010d0a:	4628      	mov	r0, r5
 8010d0c:	f002 fac4 	bl	8013298 <ucdr_serialize_bool>
 8010d10:	7a23      	ldrb	r3, [r4, #8]
 8010d12:	b2f7      	uxtb	r7, r6
 8010d14:	4606      	mov	r6, r0
 8010d16:	b96b      	cbnz	r3, 8010d34 <uxr_serialize_INFO_Payload+0x64>
 8010d18:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 8010d1c:	4628      	mov	r0, r5
 8010d1e:	f002 fabb 	bl	8013298 <ucdr_serialize_bool>
 8010d22:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 8010d26:	4030      	ands	r0, r6
 8010d28:	b2c6      	uxtb	r6, r0
 8010d2a:	b983      	cbnz	r3, 8010d4e <uxr_serialize_INFO_Payload+0x7e>
 8010d2c:	ea06 0007 	and.w	r0, r6, r7
 8010d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d34:	7b21      	ldrb	r1, [r4, #12]
 8010d36:	4628      	mov	r0, r5
 8010d38:	f002 fade 	bl	80132f8 <ucdr_serialize_uint8_t>
 8010d3c:	b188      	cbz	r0, 8010d62 <uxr_serialize_INFO_Payload+0x92>
 8010d3e:	f104 010c 	add.w	r1, r4, #12
 8010d42:	4628      	mov	r0, r5
 8010d44:	f7ff faf2 	bl	801032c <uxr_serialize_ObjectVariant.part.0>
 8010d48:	4030      	ands	r0, r6
 8010d4a:	b2c6      	uxtb	r6, r0
 8010d4c:	e7e4      	b.n	8010d18 <uxr_serialize_INFO_Payload+0x48>
 8010d4e:	f504 7108 	add.w	r1, r4, #544	; 0x220
 8010d52:	4628      	mov	r0, r5
 8010d54:	f7ff fe24 	bl	80109a0 <uxr_serialize_ActivityInfoVariant>
 8010d58:	4006      	ands	r6, r0
 8010d5a:	ea06 0007 	and.w	r0, r6, r7
 8010d5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d62:	4606      	mov	r6, r0
 8010d64:	e7d8      	b.n	8010d18 <uxr_serialize_INFO_Payload+0x48>
 8010d66:	bf00      	nop

08010d68 <uxr_serialize_READ_DATA_Payload>:
 8010d68:	b570      	push	{r4, r5, r6, lr}
 8010d6a:	2202      	movs	r2, #2
 8010d6c:	4605      	mov	r5, r0
 8010d6e:	460e      	mov	r6, r1
 8010d70:	f002 f9ca 	bl	8013108 <ucdr_serialize_array_uint8_t>
 8010d74:	1cb1      	adds	r1, r6, #2
 8010d76:	2202      	movs	r2, #2
 8010d78:	4604      	mov	r4, r0
 8010d7a:	4628      	mov	r0, r5
 8010d7c:	f002 f9c4 	bl	8013108 <ucdr_serialize_array_uint8_t>
 8010d80:	1d31      	adds	r1, r6, #4
 8010d82:	4004      	ands	r4, r0
 8010d84:	4628      	mov	r0, r5
 8010d86:	f7ff fe55 	bl	8010a34 <uxr_serialize_ReadSpecification>
 8010d8a:	b2e4      	uxtb	r4, r4
 8010d8c:	4020      	ands	r0, r4
 8010d8e:	bd70      	pop	{r4, r5, r6, pc}

08010d90 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8010d90:	b570      	push	{r4, r5, r6, lr}
 8010d92:	2202      	movs	r2, #2
 8010d94:	4605      	mov	r5, r0
 8010d96:	460e      	mov	r6, r1
 8010d98:	f002 f9b6 	bl	8013108 <ucdr_serialize_array_uint8_t>
 8010d9c:	1cb1      	adds	r1, r6, #2
 8010d9e:	4604      	mov	r4, r0
 8010da0:	2202      	movs	r2, #2
 8010da2:	4628      	mov	r0, r5
 8010da4:	f002 f9b0 	bl	8013108 <ucdr_serialize_array_uint8_t>
 8010da8:	4020      	ands	r0, r4
 8010daa:	b2c0      	uxtb	r0, r0
 8010dac:	bd70      	pop	{r4, r5, r6, pc}
 8010dae:	bf00      	nop

08010db0 <uxr_serialize_ACKNACK_Payload>:
 8010db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010db2:	460f      	mov	r7, r1
 8010db4:	460e      	mov	r6, r1
 8010db6:	f837 1b02 	ldrh.w	r1, [r7], #2
 8010dba:	4605      	mov	r5, r0
 8010dbc:	f002 fac8 	bl	8013350 <ucdr_serialize_uint16_t>
 8010dc0:	4639      	mov	r1, r7
 8010dc2:	2202      	movs	r2, #2
 8010dc4:	4604      	mov	r4, r0
 8010dc6:	4628      	mov	r0, r5
 8010dc8:	f002 f99e 	bl	8013108 <ucdr_serialize_array_uint8_t>
 8010dcc:	7931      	ldrb	r1, [r6, #4]
 8010dce:	4004      	ands	r4, r0
 8010dd0:	4628      	mov	r0, r5
 8010dd2:	f002 fa91 	bl	80132f8 <ucdr_serialize_uint8_t>
 8010dd6:	b2e4      	uxtb	r4, r4
 8010dd8:	4020      	ands	r0, r4
 8010dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010ddc <uxr_deserialize_ACKNACK_Payload>:
 8010ddc:	b570      	push	{r4, r5, r6, lr}
 8010dde:	4605      	mov	r5, r0
 8010de0:	460e      	mov	r6, r1
 8010de2:	f002 fbb5 	bl	8013550 <ucdr_deserialize_uint16_t>
 8010de6:	1cb1      	adds	r1, r6, #2
 8010de8:	2202      	movs	r2, #2
 8010dea:	4604      	mov	r4, r0
 8010dec:	4628      	mov	r0, r5
 8010dee:	f002 f9ef 	bl	80131d0 <ucdr_deserialize_array_uint8_t>
 8010df2:	1d31      	adds	r1, r6, #4
 8010df4:	4004      	ands	r4, r0
 8010df6:	4628      	mov	r0, r5
 8010df8:	f002 fa94 	bl	8013324 <ucdr_deserialize_uint8_t>
 8010dfc:	b2e4      	uxtb	r4, r4
 8010dfe:	4020      	ands	r0, r4
 8010e00:	bd70      	pop	{r4, r5, r6, pc}
 8010e02:	bf00      	nop

08010e04 <uxr_serialize_HEARTBEAT_Payload>:
 8010e04:	b570      	push	{r4, r5, r6, lr}
 8010e06:	460d      	mov	r5, r1
 8010e08:	8809      	ldrh	r1, [r1, #0]
 8010e0a:	4606      	mov	r6, r0
 8010e0c:	f002 faa0 	bl	8013350 <ucdr_serialize_uint16_t>
 8010e10:	8869      	ldrh	r1, [r5, #2]
 8010e12:	4604      	mov	r4, r0
 8010e14:	4630      	mov	r0, r6
 8010e16:	f002 fa9b 	bl	8013350 <ucdr_serialize_uint16_t>
 8010e1a:	7929      	ldrb	r1, [r5, #4]
 8010e1c:	4004      	ands	r4, r0
 8010e1e:	4630      	mov	r0, r6
 8010e20:	f002 fa6a 	bl	80132f8 <ucdr_serialize_uint8_t>
 8010e24:	b2e4      	uxtb	r4, r4
 8010e26:	4020      	ands	r0, r4
 8010e28:	bd70      	pop	{r4, r5, r6, pc}
 8010e2a:	bf00      	nop

08010e2c <uxr_deserialize_HEARTBEAT_Payload>:
 8010e2c:	b570      	push	{r4, r5, r6, lr}
 8010e2e:	4605      	mov	r5, r0
 8010e30:	460e      	mov	r6, r1
 8010e32:	f002 fb8d 	bl	8013550 <ucdr_deserialize_uint16_t>
 8010e36:	1cb1      	adds	r1, r6, #2
 8010e38:	4604      	mov	r4, r0
 8010e3a:	4628      	mov	r0, r5
 8010e3c:	f002 fb88 	bl	8013550 <ucdr_deserialize_uint16_t>
 8010e40:	1d31      	adds	r1, r6, #4
 8010e42:	4004      	ands	r4, r0
 8010e44:	4628      	mov	r0, r5
 8010e46:	f002 fa6d 	bl	8013324 <ucdr_deserialize_uint8_t>
 8010e4a:	b2e4      	uxtb	r4, r4
 8010e4c:	4020      	ands	r0, r4
 8010e4e:	bd70      	pop	{r4, r5, r6, pc}

08010e50 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8010e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e54:	4605      	mov	r5, r0
 8010e56:	460e      	mov	r6, r1
 8010e58:	f003 f87e 	bl	8013f58 <ucdr_deserialize_int32_t>
 8010e5c:	1d31      	adds	r1, r6, #4
 8010e5e:	4607      	mov	r7, r0
 8010e60:	4628      	mov	r0, r5
 8010e62:	f002 fd8f 	bl	8013984 <ucdr_deserialize_uint32_t>
 8010e66:	f106 0108 	add.w	r1, r6, #8
 8010e6a:	4680      	mov	r8, r0
 8010e6c:	4628      	mov	r0, r5
 8010e6e:	f003 f873 	bl	8013f58 <ucdr_deserialize_int32_t>
 8010e72:	f106 010c 	add.w	r1, r6, #12
 8010e76:	4604      	mov	r4, r0
 8010e78:	4628      	mov	r0, r5
 8010e7a:	f002 fd83 	bl	8013984 <ucdr_deserialize_uint32_t>
 8010e7e:	ea07 0708 	and.w	r7, r7, r8
 8010e82:	403c      	ands	r4, r7
 8010e84:	f106 0110 	add.w	r1, r6, #16
 8010e88:	4004      	ands	r4, r0
 8010e8a:	4628      	mov	r0, r5
 8010e8c:	f003 f864 	bl	8013f58 <ucdr_deserialize_int32_t>
 8010e90:	f106 0114 	add.w	r1, r6, #20
 8010e94:	4603      	mov	r3, r0
 8010e96:	4628      	mov	r0, r5
 8010e98:	461d      	mov	r5, r3
 8010e9a:	f002 fd73 	bl	8013984 <ucdr_deserialize_uint32_t>
 8010e9e:	b2e4      	uxtb	r4, r4
 8010ea0:	402c      	ands	r4, r5
 8010ea2:	4020      	ands	r0, r4
 8010ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010ea8 <uxr_deserialize_SampleIdentity>:
 8010ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010eac:	220c      	movs	r2, #12
 8010eae:	4604      	mov	r4, r0
 8010eb0:	460d      	mov	r5, r1
 8010eb2:	f002 f98d 	bl	80131d0 <ucdr_deserialize_array_uint8_t>
 8010eb6:	2203      	movs	r2, #3
 8010eb8:	f105 010c 	add.w	r1, r5, #12
 8010ebc:	4607      	mov	r7, r0
 8010ebe:	4620      	mov	r0, r4
 8010ec0:	f002 f986 	bl	80131d0 <ucdr_deserialize_array_uint8_t>
 8010ec4:	f105 010f 	add.w	r1, r5, #15
 8010ec8:	4680      	mov	r8, r0
 8010eca:	4620      	mov	r0, r4
 8010ecc:	f002 fa2a 	bl	8013324 <ucdr_deserialize_uint8_t>
 8010ed0:	f105 0110 	add.w	r1, r5, #16
 8010ed4:	4606      	mov	r6, r0
 8010ed6:	4620      	mov	r0, r4
 8010ed8:	f003 f83e 	bl	8013f58 <ucdr_deserialize_int32_t>
 8010edc:	f105 0114 	add.w	r1, r5, #20
 8010ee0:	4603      	mov	r3, r0
 8010ee2:	4620      	mov	r0, r4
 8010ee4:	ea07 0708 	and.w	r7, r7, r8
 8010ee8:	461c      	mov	r4, r3
 8010eea:	f002 fd4b 	bl	8013984 <ucdr_deserialize_uint32_t>
 8010eee:	403e      	ands	r6, r7
 8010ef0:	4034      	ands	r4, r6
 8010ef2:	4020      	ands	r0, r4
 8010ef4:	b2c0      	uxtb	r0, r0
 8010ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010efa:	bf00      	nop

08010efc <rcl_convert_rmw_ret_to_rcl_ret>:
 8010efc:	280b      	cmp	r0, #11
 8010efe:	dc0d      	bgt.n	8010f1c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8010f00:	2800      	cmp	r0, #0
 8010f02:	db09      	blt.n	8010f18 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8010f04:	280b      	cmp	r0, #11
 8010f06:	d807      	bhi.n	8010f18 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8010f08:	e8df f000 	tbb	[pc, r0]
 8010f0c:	07060607 	.word	0x07060607
 8010f10:	06060606 	.word	0x06060606
 8010f14:	07070606 	.word	0x07070606
 8010f18:	2001      	movs	r0, #1
 8010f1a:	4770      	bx	lr
 8010f1c:	28cb      	cmp	r0, #203	; 0xcb
 8010f1e:	bf18      	it	ne
 8010f20:	2001      	movne	r0, #1
 8010f22:	4770      	bx	lr

08010f24 <rcl_get_zero_initialized_context>:
 8010f24:	4a03      	ldr	r2, [pc, #12]	; (8010f34 <rcl_get_zero_initialized_context+0x10>)
 8010f26:	4603      	mov	r3, r0
 8010f28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010f2c:	e883 0003 	stmia.w	r3, {r0, r1}
 8010f30:	4618      	mov	r0, r3
 8010f32:	4770      	bx	lr
 8010f34:	08017644 	.word	0x08017644

08010f38 <rcl_context_is_valid>:
 8010f38:	b118      	cbz	r0, 8010f42 <rcl_context_is_valid+0xa>
 8010f3a:	6840      	ldr	r0, [r0, #4]
 8010f3c:	3800      	subs	r0, #0
 8010f3e:	bf18      	it	ne
 8010f40:	2001      	movne	r0, #1
 8010f42:	4770      	bx	lr

08010f44 <__cleanup_context>:
 8010f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f48:	4606      	mov	r6, r0
 8010f4a:	6800      	ldr	r0, [r0, #0]
 8010f4c:	2300      	movs	r3, #0
 8010f4e:	6073      	str	r3, [r6, #4]
 8010f50:	2800      	cmp	r0, #0
 8010f52:	d04d      	beq.n	8010ff0 <__cleanup_context+0xac>
 8010f54:	6947      	ldr	r7, [r0, #20]
 8010f56:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8010f5a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8010f5e:	b137      	cbz	r7, 8010f6e <__cleanup_context+0x2a>
 8010f60:	3014      	adds	r0, #20
 8010f62:	f000 fb1d 	bl	80115a0 <rcl_init_options_fini>
 8010f66:	4607      	mov	r7, r0
 8010f68:	2800      	cmp	r0, #0
 8010f6a:	d148      	bne.n	8010ffe <__cleanup_context+0xba>
 8010f6c:	6830      	ldr	r0, [r6, #0]
 8010f6e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8010f70:	b143      	cbz	r3, 8010f84 <__cleanup_context+0x40>
 8010f72:	3028      	adds	r0, #40	; 0x28
 8010f74:	f001 fdd4 	bl	8012b20 <rmw_context_fini>
 8010f78:	b118      	cbz	r0, 8010f82 <__cleanup_context+0x3e>
 8010f7a:	2f00      	cmp	r7, #0
 8010f7c:	d042      	beq.n	8011004 <__cleanup_context+0xc0>
 8010f7e:	f7fc fba5 	bl	800d6cc <rcutils_reset_error>
 8010f82:	6830      	ldr	r0, [r6, #0]
 8010f84:	f8d0 c020 	ldr.w	ip, [r0, #32]
 8010f88:	f1bc 0f00 	cmp.w	ip, #0
 8010f8c:	d01c      	beq.n	8010fc8 <__cleanup_context+0x84>
 8010f8e:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8010f92:	2a01      	cmp	r2, #1
 8010f94:	f173 0100 	sbcs.w	r1, r3, #0
 8010f98:	db12      	blt.n	8010fc0 <__cleanup_context+0x7c>
 8010f9a:	2400      	movs	r4, #0
 8010f9c:	2500      	movs	r5, #0
 8010f9e:	f85c 0024 	ldr.w	r0, [ip, r4, lsl #2]
 8010fa2:	4649      	mov	r1, r9
 8010fa4:	b1c0      	cbz	r0, 8010fd8 <__cleanup_context+0x94>
 8010fa6:	47c0      	blx	r8
 8010fa8:	6831      	ldr	r1, [r6, #0]
 8010faa:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 8010fae:	3401      	adds	r4, #1
 8010fb0:	f145 0500 	adc.w	r5, r5, #0
 8010fb4:	4294      	cmp	r4, r2
 8010fb6:	f8d1 c020 	ldr.w	ip, [r1, #32]
 8010fba:	eb75 0103 	sbcs.w	r1, r5, r3
 8010fbe:	dbee      	blt.n	8010f9e <__cleanup_context+0x5a>
 8010fc0:	4660      	mov	r0, ip
 8010fc2:	4649      	mov	r1, r9
 8010fc4:	47c0      	blx	r8
 8010fc6:	6830      	ldr	r0, [r6, #0]
 8010fc8:	4649      	mov	r1, r9
 8010fca:	47c0      	blx	r8
 8010fcc:	2300      	movs	r3, #0
 8010fce:	e9c6 3300 	strd	r3, r3, [r6]
 8010fd2:	4638      	mov	r0, r7
 8010fd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010fd8:	3401      	adds	r4, #1
 8010fda:	f145 0500 	adc.w	r5, r5, #0
 8010fde:	4294      	cmp	r4, r2
 8010fe0:	eb75 0103 	sbcs.w	r1, r5, r3
 8010fe4:	dbdb      	blt.n	8010f9e <__cleanup_context+0x5a>
 8010fe6:	4660      	mov	r0, ip
 8010fe8:	4649      	mov	r1, r9
 8010fea:	47c0      	blx	r8
 8010fec:	6830      	ldr	r0, [r6, #0]
 8010fee:	e7eb      	b.n	8010fc8 <__cleanup_context+0x84>
 8010ff0:	4607      	mov	r7, r0
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	e9c6 3300 	strd	r3, r3, [r6]
 8010ff8:	4638      	mov	r0, r7
 8010ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ffe:	f7fc fb65 	bl	800d6cc <rcutils_reset_error>
 8011002:	e7b3      	b.n	8010f6c <__cleanup_context+0x28>
 8011004:	f7ff ff7a 	bl	8010efc <rcl_convert_rmw_ret_to_rcl_ret>
 8011008:	4607      	mov	r7, r0
 801100a:	e7b8      	b.n	8010f7e <__cleanup_context+0x3a>

0801100c <rcl_expand_topic_name>:
 801100c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011010:	b08b      	sub	sp, #44	; 0x2c
 8011012:	9306      	str	r3, [sp, #24]
 8011014:	2800      	cmp	r0, #0
 8011016:	f000 80d2 	beq.w	80111be <rcl_expand_topic_name+0x1b2>
 801101a:	460e      	mov	r6, r1
 801101c:	2900      	cmp	r1, #0
 801101e:	f000 80ce 	beq.w	80111be <rcl_expand_topic_name+0x1b2>
 8011022:	4617      	mov	r7, r2
 8011024:	2a00      	cmp	r2, #0
 8011026:	f000 80ca 	beq.w	80111be <rcl_expand_topic_name+0x1b2>
 801102a:	2b00      	cmp	r3, #0
 801102c:	f000 80c7 	beq.w	80111be <rcl_expand_topic_name+0x1b2>
 8011030:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011032:	2b00      	cmp	r3, #0
 8011034:	f000 80c3 	beq.w	80111be <rcl_expand_topic_name+0x1b2>
 8011038:	a909      	add	r1, sp, #36	; 0x24
 801103a:	2200      	movs	r2, #0
 801103c:	4680      	mov	r8, r0
 801103e:	f000 ff67 	bl	8011f10 <rcl_validate_topic_name>
 8011042:	4604      	mov	r4, r0
 8011044:	2800      	cmp	r0, #0
 8011046:	f040 80b6 	bne.w	80111b6 <rcl_expand_topic_name+0x1aa>
 801104a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801104c:	2b00      	cmp	r3, #0
 801104e:	f040 80bf 	bne.w	80111d0 <rcl_expand_topic_name+0x1c4>
 8011052:	4602      	mov	r2, r0
 8011054:	a909      	add	r1, sp, #36	; 0x24
 8011056:	4630      	mov	r0, r6
 8011058:	f001 fac8 	bl	80125ec <rmw_validate_node_name>
 801105c:	2800      	cmp	r0, #0
 801105e:	f040 80b3 	bne.w	80111c8 <rcl_expand_topic_name+0x1bc>
 8011062:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011064:	2a00      	cmp	r2, #0
 8011066:	f040 80b8 	bne.w	80111da <rcl_expand_topic_name+0x1ce>
 801106a:	a909      	add	r1, sp, #36	; 0x24
 801106c:	4638      	mov	r0, r7
 801106e:	f001 fa9f 	bl	80125b0 <rmw_validate_namespace>
 8011072:	2800      	cmp	r0, #0
 8011074:	f040 80a8 	bne.w	80111c8 <rcl_expand_topic_name+0x1bc>
 8011078:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801107a:	2c00      	cmp	r4, #0
 801107c:	f040 80f6 	bne.w	801126c <rcl_expand_topic_name+0x260>
 8011080:	217b      	movs	r1, #123	; 0x7b
 8011082:	4640      	mov	r0, r8
 8011084:	f005 f982 	bl	801638c <strchr>
 8011088:	f898 3000 	ldrb.w	r3, [r8]
 801108c:	2b2f      	cmp	r3, #47	; 0x2f
 801108e:	4605      	mov	r5, r0
 8011090:	f000 80c4 	beq.w	801121c <rcl_expand_topic_name+0x210>
 8011094:	2b7e      	cmp	r3, #126	; 0x7e
 8011096:	d16f      	bne.n	8011178 <rcl_expand_topic_name+0x16c>
 8011098:	4638      	mov	r0, r7
 801109a:	f7ef f8ab 	bl	80001f4 <strlen>
 801109e:	4b87      	ldr	r3, [pc, #540]	; (80112bc <rcl_expand_topic_name+0x2b0>)
 80110a0:	4987      	ldr	r1, [pc, #540]	; (80112c0 <rcl_expand_topic_name+0x2b4>)
 80110a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80110a4:	9604      	str	r6, [sp, #16]
 80110a6:	2801      	cmp	r0, #1
 80110a8:	bf0c      	ite	eq
 80110aa:	4618      	moveq	r0, r3
 80110ac:	4608      	movne	r0, r1
 80110ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80110b2:	e9cd 2300 	strd	r2, r3, [sp]
 80110b6:	e9cd 0702 	strd	r0, r7, [sp, #8]
 80110ba:	f108 0101 	add.w	r1, r8, #1
 80110be:	9105      	str	r1, [sp, #20]
 80110c0:	ab14      	add	r3, sp, #80	; 0x50
 80110c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80110c4:	f001 f852 	bl	801216c <rcutils_format_string_limit>
 80110c8:	4682      	mov	sl, r0
 80110ca:	2800      	cmp	r0, #0
 80110cc:	f000 80d0 	beq.w	8011270 <rcl_expand_topic_name+0x264>
 80110d0:	2d00      	cmp	r5, #0
 80110d2:	f000 80aa 	beq.w	801122a <rcl_expand_topic_name+0x21e>
 80110d6:	217b      	movs	r1, #123	; 0x7b
 80110d8:	f005 f958 	bl	801638c <strchr>
 80110dc:	46d1      	mov	r9, sl
 80110de:	4605      	mov	r5, r0
 80110e0:	9407      	str	r4, [sp, #28]
 80110e2:	46d3      	mov	fp, sl
 80110e4:	464c      	mov	r4, r9
 80110e6:	2d00      	cmp	r5, #0
 80110e8:	f000 80c7 	beq.w	801127a <rcl_expand_topic_name+0x26e>
 80110ec:	217d      	movs	r1, #125	; 0x7d
 80110ee:	4620      	mov	r0, r4
 80110f0:	f005 f94c 	bl	801638c <strchr>
 80110f4:	eba0 0905 	sub.w	r9, r0, r5
 80110f8:	f109 0a01 	add.w	sl, r9, #1
 80110fc:	4871      	ldr	r0, [pc, #452]	; (80112c4 <rcl_expand_topic_name+0x2b8>)
 80110fe:	4652      	mov	r2, sl
 8011100:	4629      	mov	r1, r5
 8011102:	f005 f950 	bl	80163a6 <strncmp>
 8011106:	2800      	cmp	r0, #0
 8011108:	f000 808d 	beq.w	8011226 <rcl_expand_topic_name+0x21a>
 801110c:	486e      	ldr	r0, [pc, #440]	; (80112c8 <rcl_expand_topic_name+0x2bc>)
 801110e:	4652      	mov	r2, sl
 8011110:	4629      	mov	r1, r5
 8011112:	f005 f948 	bl	80163a6 <strncmp>
 8011116:	b130      	cbz	r0, 8011126 <rcl_expand_topic_name+0x11a>
 8011118:	486c      	ldr	r0, [pc, #432]	; (80112cc <rcl_expand_topic_name+0x2c0>)
 801111a:	4652      	mov	r2, sl
 801111c:	4629      	mov	r1, r5
 801111e:	f005 f942 	bl	80163a6 <strncmp>
 8011122:	2800      	cmp	r0, #0
 8011124:	d15b      	bne.n	80111de <rcl_expand_topic_name+0x1d2>
 8011126:	46b9      	mov	r9, r7
 8011128:	ab16      	add	r3, sp, #88	; 0x58
 801112a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801112e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8011132:	ab14      	add	r3, sp, #80	; 0x50
 8011134:	4628      	mov	r0, r5
 8011136:	cb0c      	ldmia	r3, {r2, r3}
 8011138:	4651      	mov	r1, sl
 801113a:	f001 f963 	bl	8012404 <rcutils_strndup>
 801113e:	4605      	mov	r5, r0
 8011140:	2800      	cmp	r0, #0
 8011142:	f000 80a4 	beq.w	801128e <rcl_expand_topic_name+0x282>
 8011146:	464a      	mov	r2, r9
 8011148:	4620      	mov	r0, r4
 801114a:	ab14      	add	r3, sp, #80	; 0x50
 801114c:	4629      	mov	r1, r5
 801114e:	f001 f85f 	bl	8012210 <rcutils_repl_str>
 8011152:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011154:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011156:	4604      	mov	r4, r0
 8011158:	4628      	mov	r0, r5
 801115a:	4798      	blx	r3
 801115c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801115e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011160:	4658      	mov	r0, fp
 8011162:	4798      	blx	r3
 8011164:	2c00      	cmp	r4, #0
 8011166:	f000 8083 	beq.w	8011270 <rcl_expand_topic_name+0x264>
 801116a:	217b      	movs	r1, #123	; 0x7b
 801116c:	4620      	mov	r0, r4
 801116e:	f005 f90d 	bl	801638c <strchr>
 8011172:	46a3      	mov	fp, r4
 8011174:	4605      	mov	r5, r0
 8011176:	e7b6      	b.n	80110e6 <rcl_expand_topic_name+0xda>
 8011178:	2800      	cmp	r0, #0
 801117a:	d151      	bne.n	8011220 <rcl_expand_topic_name+0x214>
 801117c:	4638      	mov	r0, r7
 801117e:	f7ef f839 	bl	80001f4 <strlen>
 8011182:	4b53      	ldr	r3, [pc, #332]	; (80112d0 <rcl_expand_topic_name+0x2c4>)
 8011184:	4a53      	ldr	r2, [pc, #332]	; (80112d4 <rcl_expand_topic_name+0x2c8>)
 8011186:	f8cd 8010 	str.w	r8, [sp, #16]
 801118a:	2801      	cmp	r0, #1
 801118c:	bf0c      	ite	eq
 801118e:	4618      	moveq	r0, r3
 8011190:	4610      	movne	r0, r2
 8011192:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8011194:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011198:	e9cd 3200 	strd	r3, r2, [sp]
 801119c:	e9cd 0702 	strd	r0, r7, [sp, #8]
 80111a0:	ab14      	add	r3, sp, #80	; 0x50
 80111a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80111a4:	f000 ffe2 	bl	801216c <rcutils_format_string_limit>
 80111a8:	4682      	mov	sl, r0
 80111aa:	4653      	mov	r3, sl
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d05f      	beq.n	8011270 <rcl_expand_topic_name+0x264>
 80111b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80111b2:	f8c3 a000 	str.w	sl, [r3]
 80111b6:	4620      	mov	r0, r4
 80111b8:	b00b      	add	sp, #44	; 0x2c
 80111ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111be:	240b      	movs	r4, #11
 80111c0:	4620      	mov	r0, r4
 80111c2:	b00b      	add	sp, #44	; 0x2c
 80111c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111c8:	f7ff fe98 	bl	8010efc <rcl_convert_rmw_ret_to_rcl_ret>
 80111cc:	4604      	mov	r4, r0
 80111ce:	e7f2      	b.n	80111b6 <rcl_expand_topic_name+0x1aa>
 80111d0:	2467      	movs	r4, #103	; 0x67
 80111d2:	4620      	mov	r0, r4
 80111d4:	b00b      	add	sp, #44	; 0x2c
 80111d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111da:	24c9      	movs	r4, #201	; 0xc9
 80111dc:	e7eb      	b.n	80111b6 <rcl_expand_topic_name+0x1aa>
 80111de:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 80111e2:	9806      	ldr	r0, [sp, #24]
 80111e4:	1c69      	adds	r1, r5, #1
 80111e6:	f7fc fb87 	bl	800d8f8 <rcutils_string_map_getn>
 80111ea:	4681      	mov	r9, r0
 80111ec:	2800      	cmp	r0, #0
 80111ee:	d19b      	bne.n	8011128 <rcl_expand_topic_name+0x11c>
 80111f0:	aa16      	add	r2, sp, #88	; 0x58
 80111f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80111f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80111f6:	f8c3 9000 	str.w	r9, [r3]
 80111fa:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80111fe:	ab14      	add	r3, sp, #80	; 0x50
 8011200:	cb0c      	ldmia	r3, {r2, r3}
 8011202:	4651      	mov	r1, sl
 8011204:	4628      	mov	r0, r5
 8011206:	f001 f8fd 	bl	8012404 <rcutils_strndup>
 801120a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801120c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801120e:	4798      	blx	r3
 8011210:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011212:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011214:	4658      	mov	r0, fp
 8011216:	4798      	blx	r3
 8011218:	2469      	movs	r4, #105	; 0x69
 801121a:	e7cc      	b.n	80111b6 <rcl_expand_topic_name+0x1aa>
 801121c:	2800      	cmp	r0, #0
 801121e:	d03e      	beq.n	801129e <rcl_expand_topic_name+0x292>
 8011220:	46c1      	mov	r9, r8
 8011222:	46a2      	mov	sl, r4
 8011224:	e75c      	b.n	80110e0 <rcl_expand_topic_name+0xd4>
 8011226:	46b1      	mov	r9, r6
 8011228:	e77e      	b.n	8011128 <rcl_expand_topic_name+0x11c>
 801122a:	f89a 3000 	ldrb.w	r3, [sl]
 801122e:	2b2f      	cmp	r3, #47	; 0x2f
 8011230:	d0be      	beq.n	80111b0 <rcl_expand_topic_name+0x1a4>
 8011232:	4638      	mov	r0, r7
 8011234:	f7ee ffde 	bl	80001f4 <strlen>
 8011238:	4b25      	ldr	r3, [pc, #148]	; (80112d0 <rcl_expand_topic_name+0x2c4>)
 801123a:	4926      	ldr	r1, [pc, #152]	; (80112d4 <rcl_expand_topic_name+0x2c8>)
 801123c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801123e:	f8cd a010 	str.w	sl, [sp, #16]
 8011242:	2801      	cmp	r0, #1
 8011244:	bf0c      	ite	eq
 8011246:	4618      	moveq	r0, r3
 8011248:	4608      	movne	r0, r1
 801124a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801124e:	e9cd 2300 	strd	r2, r3, [sp]
 8011252:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8011256:	ab14      	add	r3, sp, #80	; 0x50
 8011258:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801125a:	f000 ff87 	bl	801216c <rcutils_format_string_limit>
 801125e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011260:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011262:	4603      	mov	r3, r0
 8011264:	4650      	mov	r0, sl
 8011266:	469a      	mov	sl, r3
 8011268:	4790      	blx	r2
 801126a:	e79e      	b.n	80111aa <rcl_expand_topic_name+0x19e>
 801126c:	24ca      	movs	r4, #202	; 0xca
 801126e:	e7a2      	b.n	80111b6 <rcl_expand_topic_name+0x1aa>
 8011270:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011272:	2300      	movs	r3, #0
 8011274:	6013      	str	r3, [r2, #0]
 8011276:	240a      	movs	r4, #10
 8011278:	e79d      	b.n	80111b6 <rcl_expand_topic_name+0x1aa>
 801127a:	465b      	mov	r3, fp
 801127c:	9c07      	ldr	r4, [sp, #28]
 801127e:	46da      	mov	sl, fp
 8011280:	2b00      	cmp	r3, #0
 8011282:	d1d2      	bne.n	801122a <rcl_expand_topic_name+0x21e>
 8011284:	f898 3000 	ldrb.w	r3, [r8]
 8011288:	2b2f      	cmp	r3, #47	; 0x2f
 801128a:	d091      	beq.n	80111b0 <rcl_expand_topic_name+0x1a4>
 801128c:	e776      	b.n	801117c <rcl_expand_topic_name+0x170>
 801128e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011290:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011292:	601d      	str	r5, [r3, #0]
 8011294:	4658      	mov	r0, fp
 8011296:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011298:	4798      	blx	r3
 801129a:	240a      	movs	r4, #10
 801129c:	e78b      	b.n	80111b6 <rcl_expand_topic_name+0x1aa>
 801129e:	e9dd 0117 	ldrd	r0, r1, [sp, #92]	; 0x5c
 80112a2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80112a6:	ab14      	add	r3, sp, #80	; 0x50
 80112a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80112aa:	4640      	mov	r0, r8
 80112ac:	f001 f888 	bl	80123c0 <rcutils_strdup>
 80112b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80112b2:	2800      	cmp	r0, #0
 80112b4:	bf08      	it	eq
 80112b6:	240a      	moveq	r4, #10
 80112b8:	6018      	str	r0, [r3, #0]
 80112ba:	e77c      	b.n	80111b6 <rcl_expand_topic_name+0x1aa>
 80112bc:	08017610 	.word	0x08017610
 80112c0:	0801764c 	.word	0x0801764c
 80112c4:	0801765c 	.word	0x0801765c
 80112c8:	08017664 	.word	0x08017664
 80112cc:	0801766c 	.word	0x0801766c
 80112d0:	08017620 	.word	0x08017620
 80112d4:	08017654 	.word	0x08017654

080112d8 <rcl_get_default_topic_name_substitutions>:
 80112d8:	2800      	cmp	r0, #0
 80112da:	bf0c      	ite	eq
 80112dc:	200b      	moveq	r0, #11
 80112de:	2000      	movne	r0, #0
 80112e0:	4770      	bx	lr
 80112e2:	bf00      	nop

080112e4 <rcl_init>:
 80112e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112e8:	1e07      	subs	r7, r0, #0
 80112ea:	b09f      	sub	sp, #124	; 0x7c
 80112ec:	4688      	mov	r8, r1
 80112ee:	4692      	mov	sl, r2
 80112f0:	4699      	mov	r9, r3
 80112f2:	f340 8097 	ble.w	8011424 <rcl_init+0x140>
 80112f6:	2900      	cmp	r1, #0
 80112f8:	f000 8097 	beq.w	801142a <rcl_init+0x146>
 80112fc:	1f0d      	subs	r5, r1, #4
 80112fe:	2400      	movs	r4, #0
 8011300:	f855 6f04 	ldr.w	r6, [r5, #4]!
 8011304:	3401      	adds	r4, #1
 8011306:	2e00      	cmp	r6, #0
 8011308:	f000 808f 	beq.w	801142a <rcl_init+0x146>
 801130c:	42a7      	cmp	r7, r4
 801130e:	d1f7      	bne.n	8011300 <rcl_init+0x1c>
 8011310:	f1ba 0f00 	cmp.w	sl, #0
 8011314:	f000 8089 	beq.w	801142a <rcl_init+0x146>
 8011318:	f8da 4000 	ldr.w	r4, [sl]
 801131c:	2c00      	cmp	r4, #0
 801131e:	f000 8084 	beq.w	801142a <rcl_init+0x146>
 8011322:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011324:	ad19      	add	r5, sp, #100	; 0x64
 8011326:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011328:	6823      	ldr	r3, [r4, #0]
 801132a:	602b      	str	r3, [r5, #0]
 801132c:	a819      	add	r0, sp, #100	; 0x64
 801132e:	f7fc f9a9 	bl	800d684 <rcutils_allocator_is_valid>
 8011332:	2800      	cmp	r0, #0
 8011334:	d079      	beq.n	801142a <rcl_init+0x146>
 8011336:	f1b9 0f00 	cmp.w	r9, #0
 801133a:	d076      	beq.n	801142a <rcl_init+0x146>
 801133c:	f8d9 3000 	ldr.w	r3, [r9]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d177      	bne.n	8011434 <rcl_init+0x150>
 8011344:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 8011348:	2178      	movs	r1, #120	; 0x78
 801134a:	2001      	movs	r0, #1
 801134c:	4798      	blx	r3
 801134e:	4604      	mov	r4, r0
 8011350:	f8c9 0000 	str.w	r0, [r9]
 8011354:	2800      	cmp	r0, #0
 8011356:	f000 80ba 	beq.w	80114ce <rcl_init+0x1ea>
 801135a:	a802      	add	r0, sp, #8
 801135c:	f001 f8be 	bl	80124dc <rmw_get_zero_initialized_context>
 8011360:	a902      	add	r1, sp, #8
 8011362:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8011366:	2250      	movs	r2, #80	; 0x50
 8011368:	ac19      	add	r4, sp, #100	; 0x64
 801136a:	f005 f925 	bl	80165b8 <memcpy>
 801136e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011370:	f8d9 5000 	ldr.w	r5, [r9]
 8011374:	6826      	ldr	r6, [r4, #0]
 8011376:	462c      	mov	r4, r5
 8011378:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801137a:	f105 0114 	add.w	r1, r5, #20
 801137e:	6026      	str	r6, [r4, #0]
 8011380:	4650      	mov	r0, sl
 8011382:	f000 f931 	bl	80115e8 <rcl_init_options_copy>
 8011386:	4606      	mov	r6, r0
 8011388:	2800      	cmp	r0, #0
 801138a:	d144      	bne.n	8011416 <rcl_init+0x132>
 801138c:	f8d9 a000 	ldr.w	sl, [r9]
 8011390:	463c      	mov	r4, r7
 8011392:	17fd      	asrs	r5, r7, #31
 8011394:	e9ca 4506 	strd	r4, r5, [sl, #24]
 8011398:	f8ca 0020 	str.w	r0, [sl, #32]
 801139c:	2f00      	cmp	r7, #0
 801139e:	d050      	beq.n	8011442 <rcl_init+0x15e>
 80113a0:	f1b8 0f00 	cmp.w	r8, #0
 80113a4:	d04d      	beq.n	8011442 <rcl_init+0x15e>
 80113a6:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 80113aa:	4638      	mov	r0, r7
 80113ac:	2104      	movs	r1, #4
 80113ae:	4798      	blx	r3
 80113b0:	f8ca 0020 	str.w	r0, [sl, #32]
 80113b4:	f8d9 a000 	ldr.w	sl, [r9]
 80113b8:	f8da 3020 	ldr.w	r3, [sl, #32]
 80113bc:	46d3      	mov	fp, sl
 80113be:	b34b      	cbz	r3, 8011414 <rcl_init+0x130>
 80113c0:	2f01      	cmp	r7, #1
 80113c2:	f175 0300 	sbcs.w	r3, r5, #0
 80113c6:	db3c      	blt.n	8011442 <rcl_init+0x15e>
 80113c8:	f1a8 0804 	sub.w	r8, r8, #4
 80113cc:	2600      	movs	r6, #0
 80113ce:	2700      	movs	r7, #0
 80113d0:	e00c      	b.n	80113ec <rcl_init+0x108>
 80113d2:	f8d8 1000 	ldr.w	r1, [r8]
 80113d6:	f005 f8ef 	bl	80165b8 <memcpy>
 80113da:	3601      	adds	r6, #1
 80113dc:	f147 0700 	adc.w	r7, r7, #0
 80113e0:	42bd      	cmp	r5, r7
 80113e2:	bf08      	it	eq
 80113e4:	42b4      	cmpeq	r4, r6
 80113e6:	d02a      	beq.n	801143e <rcl_init+0x15a>
 80113e8:	f8d9 b000 	ldr.w	fp, [r9]
 80113ec:	f858 0f04 	ldr.w	r0, [r8, #4]!
 80113f0:	f7ee ff00 	bl	80001f4 <strlen>
 80113f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80113f6:	991d      	ldr	r1, [sp, #116]	; 0x74
 80113f8:	f8db a020 	ldr.w	sl, [fp, #32]
 80113fc:	9001      	str	r0, [sp, #4]
 80113fe:	4798      	blx	r3
 8011400:	f8d9 1000 	ldr.w	r1, [r9]
 8011404:	9a01      	ldr	r2, [sp, #4]
 8011406:	6a09      	ldr	r1, [r1, #32]
 8011408:	00b3      	lsls	r3, r6, #2
 801140a:	f84a 0003 	str.w	r0, [sl, r3]
 801140e:	58c8      	ldr	r0, [r1, r3]
 8011410:	2800      	cmp	r0, #0
 8011412:	d1de      	bne.n	80113d2 <rcl_init+0xee>
 8011414:	260a      	movs	r6, #10
 8011416:	4648      	mov	r0, r9
 8011418:	f7ff fd94 	bl	8010f44 <__cleanup_context>
 801141c:	4630      	mov	r0, r6
 801141e:	b01f      	add	sp, #124	; 0x7c
 8011420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011424:	2900      	cmp	r1, #0
 8011426:	f43f af73 	beq.w	8011310 <rcl_init+0x2c>
 801142a:	260b      	movs	r6, #11
 801142c:	4630      	mov	r0, r6
 801142e:	b01f      	add	sp, #124	; 0x7c
 8011430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011434:	2664      	movs	r6, #100	; 0x64
 8011436:	4630      	mov	r0, r6
 8011438:	b01f      	add	sp, #124	; 0x7c
 801143a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801143e:	f8d9 a000 	ldr.w	sl, [r9]
 8011442:	4a2c      	ldr	r2, [pc, #176]	; (80114f4 <rcl_init+0x210>)
 8011444:	6813      	ldr	r3, [r2, #0]
 8011446:	3301      	adds	r3, #1
 8011448:	d03b      	beq.n	80114c2 <rcl_init+0x1de>
 801144a:	6013      	str	r3, [r2, #0]
 801144c:	4619      	mov	r1, r3
 801144e:	2000      	movs	r0, #0
 8011450:	f8da 4014 	ldr.w	r4, [sl, #20]
 8011454:	f8c9 3004 	str.w	r3, [r9, #4]
 8011458:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801145a:	3301      	adds	r3, #1
 801145c:	e9c4 1006 	strd	r1, r0, [r4, #24]
 8011460:	d039      	beq.n	80114d6 <rcl_init+0x1f2>
 8011462:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8011466:	b94b      	cbnz	r3, 801147c <rcl_init+0x198>
 8011468:	f104 0030 	add.w	r0, r4, #48	; 0x30
 801146c:	f000 f962 	bl	8011734 <rcl_get_localhost_only>
 8011470:	4606      	mov	r6, r0
 8011472:	2800      	cmp	r0, #0
 8011474:	d1cf      	bne.n	8011416 <rcl_init+0x132>
 8011476:	f8d9 3000 	ldr.w	r3, [r9]
 801147a:	695c      	ldr	r4, [r3, #20]
 801147c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801147e:	aa18      	add	r2, sp, #96	; 0x60
 8011480:	a917      	add	r1, sp, #92	; 0x5c
 8011482:	f000 fd33 	bl	8011eec <rcl_validate_enclave_name>
 8011486:	4606      	mov	r6, r0
 8011488:	2800      	cmp	r0, #0
 801148a:	d1c4      	bne.n	8011416 <rcl_init+0x132>
 801148c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801148e:	bb03      	cbnz	r3, 80114d2 <rcl_init+0x1ee>
 8011490:	f8d9 1000 	ldr.w	r1, [r9]
 8011494:	694b      	ldr	r3, [r1, #20]
 8011496:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8011498:	f103 0228 	add.w	r2, r3, #40	; 0x28
 801149c:	f000 fbf2 	bl	8011c84 <rcl_get_security_options_from_environment>
 80114a0:	4606      	mov	r6, r0
 80114a2:	2800      	cmp	r0, #0
 80114a4:	d1b7      	bne.n	8011416 <rcl_init+0x132>
 80114a6:	f8d9 1000 	ldr.w	r1, [r9]
 80114aa:	6948      	ldr	r0, [r1, #20]
 80114ac:	3128      	adds	r1, #40	; 0x28
 80114ae:	3018      	adds	r0, #24
 80114b0:	f001 f9fe 	bl	80128b0 <rmw_init>
 80114b4:	4606      	mov	r6, r0
 80114b6:	2800      	cmp	r0, #0
 80114b8:	d0b8      	beq.n	801142c <rcl_init+0x148>
 80114ba:	f7ff fd1f 	bl	8010efc <rcl_convert_rmw_ret_to_rcl_ret>
 80114be:	4606      	mov	r6, r0
 80114c0:	e7a9      	b.n	8011416 <rcl_init+0x132>
 80114c2:	2401      	movs	r4, #1
 80114c4:	4618      	mov	r0, r3
 80114c6:	4621      	mov	r1, r4
 80114c8:	6014      	str	r4, [r2, #0]
 80114ca:	4623      	mov	r3, r4
 80114cc:	e7c0      	b.n	8011450 <rcl_init+0x16c>
 80114ce:	260a      	movs	r6, #10
 80114d0:	e7ac      	b.n	801142c <rcl_init+0x148>
 80114d2:	2601      	movs	r6, #1
 80114d4:	e79f      	b.n	8011416 <rcl_init+0x132>
 80114d6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80114da:	f004 f955 	bl	8015788 <rcl_get_default_domain_id>
 80114de:	4606      	mov	r6, r0
 80114e0:	2800      	cmp	r0, #0
 80114e2:	d198      	bne.n	8011416 <rcl_init+0x132>
 80114e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80114e6:	3301      	adds	r3, #1
 80114e8:	f8d9 3000 	ldr.w	r3, [r9]
 80114ec:	bf08      	it	eq
 80114ee:	6260      	streq	r0, [r4, #36]	; 0x24
 80114f0:	695c      	ldr	r4, [r3, #20]
 80114f2:	e7b6      	b.n	8011462 <rcl_init+0x17e>
 80114f4:	20009398 	.word	0x20009398

080114f8 <rcl_get_zero_initialized_init_options>:
 80114f8:	2000      	movs	r0, #0
 80114fa:	4770      	bx	lr

080114fc <rcl_init_options_init>:
 80114fc:	b084      	sub	sp, #16
 80114fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011500:	b091      	sub	sp, #68	; 0x44
 8011502:	af17      	add	r7, sp, #92	; 0x5c
 8011504:	e887 000e 	stmia.w	r7, {r1, r2, r3}
 8011508:	2800      	cmp	r0, #0
 801150a:	d044      	beq.n	8011596 <rcl_init_options_init+0x9a>
 801150c:	6803      	ldr	r3, [r0, #0]
 801150e:	4606      	mov	r6, r0
 8011510:	b133      	cbz	r3, 8011520 <rcl_init_options_init+0x24>
 8011512:	2464      	movs	r4, #100	; 0x64
 8011514:	4620      	mov	r0, r4
 8011516:	b011      	add	sp, #68	; 0x44
 8011518:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801151c:	b004      	add	sp, #16
 801151e:	4770      	bx	lr
 8011520:	4638      	mov	r0, r7
 8011522:	f7fc f8af 	bl	800d684 <rcutils_allocator_is_valid>
 8011526:	2800      	cmp	r0, #0
 8011528:	d035      	beq.n	8011596 <rcl_init_options_init+0x9a>
 801152a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801152c:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801152e:	2050      	movs	r0, #80	; 0x50
 8011530:	4798      	blx	r3
 8011532:	4604      	mov	r4, r0
 8011534:	6030      	str	r0, [r6, #0]
 8011536:	2800      	cmp	r0, #0
 8011538:	d02f      	beq.n	801159a <rcl_init_options_init+0x9e>
 801153a:	46bc      	mov	ip, r7
 801153c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011540:	4625      	mov	r5, r4
 8011542:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011544:	f8dc 3000 	ldr.w	r3, [ip]
 8011548:	602b      	str	r3, [r5, #0]
 801154a:	a802      	add	r0, sp, #8
 801154c:	ad02      	add	r5, sp, #8
 801154e:	f000 ffcd 	bl	80124ec <rmw_get_zero_initialized_init_options>
 8011552:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011554:	3418      	adds	r4, #24
 8011556:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011558:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801155a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801155c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801155e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011560:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011564:	6833      	ldr	r3, [r6, #0]
 8011566:	e884 0003 	stmia.w	r4, {r0, r1}
 801156a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 801156e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8011572:	f103 0018 	add.w	r0, r3, #24
 8011576:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 801157a:	f001 f8bf 	bl	80126fc <rmw_init_options_init>
 801157e:	4604      	mov	r4, r0
 8011580:	2800      	cmp	r0, #0
 8011582:	d0c7      	beq.n	8011514 <rcl_init_options_init+0x18>
 8011584:	6830      	ldr	r0, [r6, #0]
 8011586:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8011588:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801158a:	4798      	blx	r3
 801158c:	4620      	mov	r0, r4
 801158e:	f7ff fcb5 	bl	8010efc <rcl_convert_rmw_ret_to_rcl_ret>
 8011592:	4604      	mov	r4, r0
 8011594:	e7be      	b.n	8011514 <rcl_init_options_init+0x18>
 8011596:	240b      	movs	r4, #11
 8011598:	e7bc      	b.n	8011514 <rcl_init_options_init+0x18>
 801159a:	240a      	movs	r4, #10
 801159c:	e7ba      	b.n	8011514 <rcl_init_options_init+0x18>
 801159e:	bf00      	nop

080115a0 <rcl_init_options_fini>:
 80115a0:	b570      	push	{r4, r5, r6, lr}
 80115a2:	b086      	sub	sp, #24
 80115a4:	b1c0      	cbz	r0, 80115d8 <rcl_init_options_fini+0x38>
 80115a6:	6804      	ldr	r4, [r0, #0]
 80115a8:	4606      	mov	r6, r0
 80115aa:	b1ac      	cbz	r4, 80115d8 <rcl_init_options_fini+0x38>
 80115ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80115ae:	ad01      	add	r5, sp, #4
 80115b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80115b2:	6823      	ldr	r3, [r4, #0]
 80115b4:	602b      	str	r3, [r5, #0]
 80115b6:	a801      	add	r0, sp, #4
 80115b8:	f7fc f864 	bl	800d684 <rcutils_allocator_is_valid>
 80115bc:	b160      	cbz	r0, 80115d8 <rcl_init_options_fini+0x38>
 80115be:	6830      	ldr	r0, [r6, #0]
 80115c0:	3018      	adds	r0, #24
 80115c2:	f001 f935 	bl	8012830 <rmw_init_options_fini>
 80115c6:	4604      	mov	r4, r0
 80115c8:	b950      	cbnz	r0, 80115e0 <rcl_init_options_fini+0x40>
 80115ca:	6830      	ldr	r0, [r6, #0]
 80115cc:	9b02      	ldr	r3, [sp, #8]
 80115ce:	9905      	ldr	r1, [sp, #20]
 80115d0:	4798      	blx	r3
 80115d2:	4620      	mov	r0, r4
 80115d4:	b006      	add	sp, #24
 80115d6:	bd70      	pop	{r4, r5, r6, pc}
 80115d8:	240b      	movs	r4, #11
 80115da:	4620      	mov	r0, r4
 80115dc:	b006      	add	sp, #24
 80115de:	bd70      	pop	{r4, r5, r6, pc}
 80115e0:	f7ff fc8c 	bl	8010efc <rcl_convert_rmw_ret_to_rcl_ret>
 80115e4:	4604      	mov	r4, r0
 80115e6:	e7f8      	b.n	80115da <rcl_init_options_fini+0x3a>

080115e8 <rcl_init_options_copy>:
 80115e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115ec:	b096      	sub	sp, #88	; 0x58
 80115ee:	2800      	cmp	r0, #0
 80115f0:	d063      	beq.n	80116ba <rcl_init_options_copy+0xd2>
 80115f2:	6806      	ldr	r6, [r0, #0]
 80115f4:	4605      	mov	r5, r0
 80115f6:	2e00      	cmp	r6, #0
 80115f8:	d05f      	beq.n	80116ba <rcl_init_options_copy+0xd2>
 80115fa:	460c      	mov	r4, r1
 80115fc:	2900      	cmp	r1, #0
 80115fe:	d05c      	beq.n	80116ba <rcl_init_options_copy+0xd2>
 8011600:	680b      	ldr	r3, [r1, #0]
 8011602:	b123      	cbz	r3, 801160e <rcl_init_options_copy+0x26>
 8011604:	2664      	movs	r6, #100	; 0x64
 8011606:	4630      	mov	r0, r6
 8011608:	b016      	add	sp, #88	; 0x58
 801160a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801160e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8011610:	af11      	add	r7, sp, #68	; 0x44
 8011612:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8011614:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 8011618:	6833      	ldr	r3, [r6, #0]
 801161a:	603b      	str	r3, [r7, #0]
 801161c:	4640      	mov	r0, r8
 801161e:	f7fc f831 	bl	800d684 <rcutils_allocator_is_valid>
 8011622:	2800      	cmp	r0, #0
 8011624:	d049      	beq.n	80116ba <rcl_init_options_copy+0xd2>
 8011626:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011628:	9915      	ldr	r1, [sp, #84]	; 0x54
 801162a:	2050      	movs	r0, #80	; 0x50
 801162c:	4798      	blx	r3
 801162e:	4606      	mov	r6, r0
 8011630:	6020      	str	r0, [r4, #0]
 8011632:	2800      	cmp	r0, #0
 8011634:	d077      	beq.n	8011726 <rcl_init_options_copy+0x13e>
 8011636:	46c4      	mov	ip, r8
 8011638:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801163c:	4637      	mov	r7, r6
 801163e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8011640:	f8dc 3000 	ldr.w	r3, [ip]
 8011644:	603b      	str	r3, [r7, #0]
 8011646:	a802      	add	r0, sp, #8
 8011648:	af02      	add	r7, sp, #8
 801164a:	f000 ff4f 	bl	80124ec <rmw_get_zero_initialized_init_options>
 801164e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011650:	3618      	adds	r6, #24
 8011652:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011654:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011656:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011658:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801165a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801165c:	e897 0003 	ldmia.w	r7, {r0, r1}
 8011660:	ab16      	add	r3, sp, #88	; 0x58
 8011662:	e886 0003 	stmia.w	r6, {r0, r1}
 8011666:	e913 0003 	ldmdb	r3, {r0, r1}
 801166a:	6823      	ldr	r3, [r4, #0]
 801166c:	e88d 0003 	stmia.w	sp, {r0, r1}
 8011670:	f103 0018 	add.w	r0, r3, #24
 8011674:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8011678:	f001 f840 	bl	80126fc <rmw_init_options_init>
 801167c:	4606      	mov	r6, r0
 801167e:	bb08      	cbnz	r0, 80116c4 <rcl_init_options_copy+0xdc>
 8011680:	682f      	ldr	r7, [r5, #0]
 8011682:	f8d4 c000 	ldr.w	ip, [r4]
 8011686:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011688:	4666      	mov	r6, ip
 801168a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801168c:	683b      	ldr	r3, [r7, #0]
 801168e:	6033      	str	r3, [r6, #0]
 8011690:	f10c 0018 	add.w	r0, ip, #24
 8011694:	f001 f8cc 	bl	8012830 <rmw_init_options_fini>
 8011698:	4607      	mov	r7, r0
 801169a:	b1f0      	cbz	r0, 80116da <rcl_init_options_copy+0xf2>
 801169c:	f7fc f800 	bl	800d6a0 <rcutils_get_error_string>
 80116a0:	f7fc f814 	bl	800d6cc <rcutils_reset_error>
 80116a4:	4620      	mov	r0, r4
 80116a6:	f7ff ff7b 	bl	80115a0 <rcl_init_options_fini>
 80116aa:	4606      	mov	r6, r0
 80116ac:	2800      	cmp	r0, #0
 80116ae:	d1aa      	bne.n	8011606 <rcl_init_options_copy+0x1e>
 80116b0:	4638      	mov	r0, r7
 80116b2:	f7ff fc23 	bl	8010efc <rcl_convert_rmw_ret_to_rcl_ret>
 80116b6:	4606      	mov	r6, r0
 80116b8:	e7a5      	b.n	8011606 <rcl_init_options_copy+0x1e>
 80116ba:	260b      	movs	r6, #11
 80116bc:	4630      	mov	r0, r6
 80116be:	b016      	add	sp, #88	; 0x58
 80116c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80116c6:	9915      	ldr	r1, [sp, #84]	; 0x54
 80116c8:	6820      	ldr	r0, [r4, #0]
 80116ca:	4798      	blx	r3
 80116cc:	4630      	mov	r0, r6
 80116ce:	f7ff fc15 	bl	8010efc <rcl_convert_rmw_ret_to_rcl_ret>
 80116d2:	4606      	mov	r6, r0
 80116d4:	2800      	cmp	r0, #0
 80116d6:	d0d3      	beq.n	8011680 <rcl_init_options_copy+0x98>
 80116d8:	e795      	b.n	8011606 <rcl_init_options_copy+0x1e>
 80116da:	a802      	add	r0, sp, #8
 80116dc:	ae02      	add	r6, sp, #8
 80116de:	6827      	ldr	r7, [r4, #0]
 80116e0:	f000 ff04 	bl	80124ec <rmw_get_zero_initialized_init_options>
 80116e4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80116e6:	3718      	adds	r7, #24
 80116e8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80116ea:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80116ec:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80116ee:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80116f0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80116f2:	e896 0003 	ldmia.w	r6, {r0, r1}
 80116f6:	682a      	ldr	r2, [r5, #0]
 80116f8:	6823      	ldr	r3, [r4, #0]
 80116fa:	e887 0003 	stmia.w	r7, {r0, r1}
 80116fe:	f102 0018 	add.w	r0, r2, #24
 8011702:	f103 0118 	add.w	r1, r3, #24
 8011706:	f001 f851 	bl	80127ac <rmw_init_options_copy>
 801170a:	4606      	mov	r6, r0
 801170c:	2800      	cmp	r0, #0
 801170e:	f43f af7a 	beq.w	8011606 <rcl_init_options_copy+0x1e>
 8011712:	f7fb ffc5 	bl	800d6a0 <rcutils_get_error_string>
 8011716:	f7fb ffd9 	bl	800d6cc <rcutils_reset_error>
 801171a:	4620      	mov	r0, r4
 801171c:	f7ff ff40 	bl	80115a0 <rcl_init_options_fini>
 8011720:	b118      	cbz	r0, 801172a <rcl_init_options_copy+0x142>
 8011722:	4606      	mov	r6, r0
 8011724:	e76f      	b.n	8011606 <rcl_init_options_copy+0x1e>
 8011726:	260a      	movs	r6, #10
 8011728:	e76d      	b.n	8011606 <rcl_init_options_copy+0x1e>
 801172a:	4630      	mov	r0, r6
 801172c:	f7ff fbe6 	bl	8010efc <rcl_convert_rmw_ret_to_rcl_ret>
 8011730:	4606      	mov	r6, r0
 8011732:	e768      	b.n	8011606 <rcl_init_options_copy+0x1e>

08011734 <rcl_get_localhost_only>:
 8011734:	b510      	push	{r4, lr}
 8011736:	b082      	sub	sp, #8
 8011738:	2300      	movs	r3, #0
 801173a:	9301      	str	r3, [sp, #4]
 801173c:	b1b8      	cbz	r0, 801176e <rcl_get_localhost_only+0x3a>
 801173e:	4604      	mov	r4, r0
 8011740:	a901      	add	r1, sp, #4
 8011742:	480c      	ldr	r0, [pc, #48]	; (8011774 <rcl_get_localhost_only+0x40>)
 8011744:	f000 fd4c 	bl	80121e0 <rcutils_get_env>
 8011748:	b110      	cbz	r0, 8011750 <rcl_get_localhost_only+0x1c>
 801174a:	2001      	movs	r0, #1
 801174c:	b002      	add	sp, #8
 801174e:	bd10      	pop	{r4, pc}
 8011750:	9b01      	ldr	r3, [sp, #4]
 8011752:	b113      	cbz	r3, 801175a <rcl_get_localhost_only+0x26>
 8011754:	781a      	ldrb	r2, [r3, #0]
 8011756:	2a31      	cmp	r2, #49	; 0x31
 8011758:	d004      	beq.n	8011764 <rcl_get_localhost_only+0x30>
 801175a:	2302      	movs	r3, #2
 801175c:	2000      	movs	r0, #0
 801175e:	7023      	strb	r3, [r4, #0]
 8011760:	b002      	add	sp, #8
 8011762:	bd10      	pop	{r4, pc}
 8011764:	785b      	ldrb	r3, [r3, #1]
 8011766:	2b00      	cmp	r3, #0
 8011768:	d1f7      	bne.n	801175a <rcl_get_localhost_only+0x26>
 801176a:	2301      	movs	r3, #1
 801176c:	e7f6      	b.n	801175c <rcl_get_localhost_only+0x28>
 801176e:	200b      	movs	r0, #11
 8011770:	b002      	add	sp, #8
 8011772:	bd10      	pop	{r4, pc}
 8011774:	08017678 	.word	0x08017678

08011778 <rcl_get_zero_initialized_node>:
 8011778:	4a03      	ldr	r2, [pc, #12]	; (8011788 <rcl_get_zero_initialized_node+0x10>)
 801177a:	4603      	mov	r3, r0
 801177c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011780:	e883 0003 	stmia.w	r3, {r0, r1}
 8011784:	4618      	mov	r0, r3
 8011786:	4770      	bx	lr
 8011788:	08017698 	.word	0x08017698

0801178c <rcl_node_init>:
 801178c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011790:	b09b      	sub	sp, #108	; 0x6c
 8011792:	4604      	mov	r4, r0
 8011794:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
 8011798:	f04f 0c00 	mov.w	ip, #0
 801179c:	a815      	add	r0, sp, #84	; 0x54
 801179e:	460e      	mov	r6, r1
 80117a0:	4615      	mov	r5, r2
 80117a2:	461f      	mov	r7, r3
 80117a4:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
 80117a8:	f004 f8aa 	bl	8015900 <rcl_guard_condition_get_default_options>
 80117ac:	f1b8 0f00 	cmp.w	r8, #0
 80117b0:	f000 80fd 	beq.w	80119ae <rcl_node_init+0x222>
 80117b4:	f108 0b04 	add.w	fp, r8, #4
 80117b8:	4658      	mov	r0, fp
 80117ba:	f7fb ff63 	bl	800d684 <rcutils_allocator_is_valid>
 80117be:	2800      	cmp	r0, #0
 80117c0:	f000 80f5 	beq.w	80119ae <rcl_node_init+0x222>
 80117c4:	2e00      	cmp	r6, #0
 80117c6:	f000 80f2 	beq.w	80119ae <rcl_node_init+0x222>
 80117ca:	2d00      	cmp	r5, #0
 80117cc:	f000 80ef 	beq.w	80119ae <rcl_node_init+0x222>
 80117d0:	2c00      	cmp	r4, #0
 80117d2:	f000 80ec 	beq.w	80119ae <rcl_node_init+0x222>
 80117d6:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80117da:	f1b9 0f00 	cmp.w	r9, #0
 80117de:	f040 8112 	bne.w	8011a06 <rcl_node_init+0x27a>
 80117e2:	2f00      	cmp	r7, #0
 80117e4:	f000 80e3 	beq.w	80119ae <rcl_node_init+0x222>
 80117e8:	4638      	mov	r0, r7
 80117ea:	f7ff fba5 	bl	8010f38 <rcl_context_is_valid>
 80117ee:	4682      	mov	sl, r0
 80117f0:	2800      	cmp	r0, #0
 80117f2:	f000 80e2 	beq.w	80119ba <rcl_node_init+0x22e>
 80117f6:	464a      	mov	r2, r9
 80117f8:	a914      	add	r1, sp, #80	; 0x50
 80117fa:	4630      	mov	r0, r6
 80117fc:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 8011800:	f000 fef4 	bl	80125ec <rmw_validate_node_name>
 8011804:	4681      	mov	r9, r0
 8011806:	2800      	cmp	r0, #0
 8011808:	f040 80d3 	bne.w	80119b2 <rcl_node_init+0x226>
 801180c:	9814      	ldr	r0, [sp, #80]	; 0x50
 801180e:	2800      	cmp	r0, #0
 8011810:	f040 8105 	bne.w	8011a1e <rcl_node_init+0x292>
 8011814:	4628      	mov	r0, r5
 8011816:	f7ee fced 	bl	80001f4 <strlen>
 801181a:	2800      	cmp	r0, #0
 801181c:	f040 80d0 	bne.w	80119c0 <rcl_node_init+0x234>
 8011820:	4d8e      	ldr	r5, [pc, #568]	; (8011a5c <rcl_node_init+0x2d0>)
 8011822:	a914      	add	r1, sp, #80	; 0x50
 8011824:	2200      	movs	r2, #0
 8011826:	4628      	mov	r0, r5
 8011828:	f000 fec2 	bl	80125b0 <rmw_validate_namespace>
 801182c:	4681      	mov	r9, r0
 801182e:	2800      	cmp	r0, #0
 8011830:	f040 80bf 	bne.w	80119b2 <rcl_node_init+0x226>
 8011834:	4682      	mov	sl, r0
 8011836:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011838:	2b00      	cmp	r3, #0
 801183a:	f040 80f5 	bne.w	8011a28 <rcl_node_init+0x29c>
 801183e:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8011842:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8011846:	9307      	str	r3, [sp, #28]
 8011848:	2030      	movs	r0, #48	; 0x30
 801184a:	4790      	blx	r2
 801184c:	4681      	mov	r9, r0
 801184e:	6060      	str	r0, [r4, #4]
 8011850:	2800      	cmp	r0, #0
 8011852:	f000 80de 	beq.w	8011a12 <rcl_node_init+0x286>
 8011856:	9b07      	ldr	r3, [sp, #28]
 8011858:	e9c0 3308 	strd	r3, r3, [r0, #32]
 801185c:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 8011860:	a80a      	add	r0, sp, #40	; 0x28
 8011862:	f000 f92b 	bl	8011abc <rcl_node_get_default_options>
 8011866:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 801186a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801186e:	46cc      	mov	ip, r9
 8011870:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011874:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8011878:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 801187c:	6861      	ldr	r1, [r4, #4]
 801187e:	6027      	str	r7, [r4, #0]
 8011880:	4640      	mov	r0, r8
 8011882:	f000 f937 	bl	8011af4 <rcl_node_options_copy>
 8011886:	2800      	cmp	r0, #0
 8011888:	d167      	bne.n	801195a <rcl_node_init+0x1ce>
 801188a:	4628      	mov	r0, r5
 801188c:	f7ee fcb2 	bl	80001f4 <strlen>
 8011890:	4428      	add	r0, r5
 8011892:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011896:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 801189a:	2b2f      	cmp	r3, #47	; 0x2f
 801189c:	bf08      	it	eq
 801189e:	4970      	ldreq	r1, [pc, #448]	; (8011a60 <rcl_node_init+0x2d4>)
 80118a0:	f8db 3010 	ldr.w	r3, [fp, #16]
 80118a4:	bf18      	it	ne
 80118a6:	496f      	ldrne	r1, [pc, #444]	; (8011a64 <rcl_node_init+0x2d8>)
 80118a8:	9604      	str	r6, [sp, #16]
 80118aa:	e9cd 1502 	strd	r1, r5, [sp, #8]
 80118ae:	e9cd 3200 	strd	r3, r2, [sp]
 80118b2:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 80118b6:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80118ba:	f000 fc57 	bl	801216c <rcutils_format_string_limit>
 80118be:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
 80118c2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80118c6:	f8d9 3000 	ldr.w	r3, [r9]
 80118ca:	9313      	str	r3, [sp, #76]	; 0x4c
 80118cc:	1c59      	adds	r1, r3, #1
 80118ce:	f000 80b7 	beq.w	8011a40 <rcl_node_init+0x2b4>
 80118d2:	683a      	ldr	r2, [r7, #0]
 80118d4:	f8c9 301c 	str.w	r3, [r9, #28]
 80118d8:	6952      	ldr	r2, [r2, #20]
 80118da:	6821      	ldr	r1, [r4, #0]
 80118dc:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 80118e0:	6808      	ldr	r0, [r1, #0]
 80118e2:	f1a2 0201 	sub.w	r2, r2, #1
 80118e6:	fab2 f282 	clz	r2, r2
 80118ea:	0952      	lsrs	r2, r2, #5
 80118ec:	9200      	str	r2, [sp, #0]
 80118ee:	4631      	mov	r1, r6
 80118f0:	3028      	adds	r0, #40	; 0x28
 80118f2:	462a      	mov	r2, r5
 80118f4:	f001 fa44 	bl	8012d80 <rmw_create_node>
 80118f8:	6863      	ldr	r3, [r4, #4]
 80118fa:	f8c9 0020 	str.w	r0, [r9, #32]
 80118fe:	6a18      	ldr	r0, [r3, #32]
 8011900:	b368      	cbz	r0, 801195e <rcl_node_init+0x1d2>
 8011902:	f001 facf 	bl	8012ea4 <rmw_node_get_graph_guard_condition>
 8011906:	4681      	mov	r9, r0
 8011908:	b338      	cbz	r0, 801195a <rcl_node_init+0x1ce>
 801190a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801190e:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8011912:	6866      	ldr	r6, [r4, #4]
 8011914:	2008      	movs	r0, #8
 8011916:	4798      	blx	r3
 8011918:	6863      	ldr	r3, [r4, #4]
 801191a:	6270      	str	r0, [r6, #36]	; 0x24
 801191c:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 801191e:	b1f6      	cbz	r6, 801195e <rcl_node_init+0x1d2>
 8011920:	a808      	add	r0, sp, #32
 8011922:	f003 ff65 	bl	80157f0 <rcl_get_zero_initialized_guard_condition>
 8011926:	a808      	add	r0, sp, #32
 8011928:	c803      	ldmia	r0, {r0, r1}
 801192a:	e886 0003 	stmia.w	r6, {r0, r1}
 801192e:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8011932:	ae15      	add	r6, sp, #84	; 0x54
 8011934:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011936:	f8db 3000 	ldr.w	r3, [fp]
 801193a:	6033      	str	r3, [r6, #0]
 801193c:	ab1a      	add	r3, sp, #104	; 0x68
 801193e:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8011942:	6866      	ldr	r6, [r4, #4]
 8011944:	6a76      	ldr	r6, [r6, #36]	; 0x24
 8011946:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801194a:	4649      	mov	r1, r9
 801194c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801194e:	4630      	mov	r0, r6
 8011950:	463a      	mov	r2, r7
 8011952:	f003 ff57 	bl	8015804 <rcl_guard_condition_init_from_rmw>
 8011956:	4681      	mov	r9, r0
 8011958:	b328      	cbz	r0, 80119a6 <rcl_node_init+0x21a>
 801195a:	6863      	ldr	r3, [r4, #4]
 801195c:	b1f3      	cbz	r3, 801199c <rcl_node_init+0x210>
 801195e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8011960:	b128      	cbz	r0, 801196e <rcl_node_init+0x1e2>
 8011962:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011966:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801196a:	4798      	blx	r3
 801196c:	6863      	ldr	r3, [r4, #4]
 801196e:	6a18      	ldr	r0, [r3, #32]
 8011970:	b110      	cbz	r0, 8011978 <rcl_node_init+0x1ec>
 8011972:	f001 fa1d 	bl	8012db0 <rmw_destroy_node>
 8011976:	6863      	ldr	r3, [r4, #4]
 8011978:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801197a:	b148      	cbz	r0, 8011990 <rcl_node_init+0x204>
 801197c:	f003 ff9a 	bl	80158b4 <rcl_guard_condition_fini>
 8011980:	6862      	ldr	r2, [r4, #4]
 8011982:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011986:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8011988:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801198c:	4798      	blx	r3
 801198e:	6863      	ldr	r3, [r4, #4]
 8011990:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8011994:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8011998:	4618      	mov	r0, r3
 801199a:	4790      	blx	r2
 801199c:	2300      	movs	r3, #0
 801199e:	e9c4 3300 	strd	r3, r3, [r4]
 80119a2:	f04f 0901 	mov.w	r9, #1
 80119a6:	f1ba 0f00 	cmp.w	sl, #0
 80119aa:	d125      	bne.n	80119f8 <rcl_node_init+0x26c>
 80119ac:	e001      	b.n	80119b2 <rcl_node_init+0x226>
 80119ae:	f04f 090b 	mov.w	r9, #11
 80119b2:	4648      	mov	r0, r9
 80119b4:	b01b      	add	sp, #108	; 0x6c
 80119b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119ba:	f04f 0965 	mov.w	r9, #101	; 0x65
 80119be:	e7f8      	b.n	80119b2 <rcl_node_init+0x226>
 80119c0:	782b      	ldrb	r3, [r5, #0]
 80119c2:	2b2f      	cmp	r3, #47	; 0x2f
 80119c4:	f43f af2d 	beq.w	8011822 <rcl_node_init+0x96>
 80119c8:	4927      	ldr	r1, [pc, #156]	; (8011a68 <rcl_node_init+0x2dc>)
 80119ca:	f8db 3010 	ldr.w	r3, [fp, #16]
 80119ce:	9300      	str	r3, [sp, #0]
 80119d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80119d4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80119d8:	9503      	str	r5, [sp, #12]
 80119da:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 80119de:	f000 fbc5 	bl	801216c <rcutils_format_string_limit>
 80119e2:	4605      	mov	r5, r0
 80119e4:	b348      	cbz	r0, 8011a3a <rcl_node_init+0x2ae>
 80119e6:	2200      	movs	r2, #0
 80119e8:	a914      	add	r1, sp, #80	; 0x50
 80119ea:	9214      	str	r2, [sp, #80]	; 0x50
 80119ec:	f000 fde0 	bl	80125b0 <rmw_validate_namespace>
 80119f0:	4681      	mov	r9, r0
 80119f2:	2800      	cmp	r0, #0
 80119f4:	f43f af1f 	beq.w	8011836 <rcl_node_init+0xaa>
 80119f8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80119fc:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8011a00:	4628      	mov	r0, r5
 8011a02:	4798      	blx	r3
 8011a04:	e7d5      	b.n	80119b2 <rcl_node_init+0x226>
 8011a06:	f04f 0964 	mov.w	r9, #100	; 0x64
 8011a0a:	4648      	mov	r0, r9
 8011a0c:	b01b      	add	sp, #108	; 0x6c
 8011a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a12:	f04f 090a 	mov.w	r9, #10
 8011a16:	f1ba 0f00 	cmp.w	sl, #0
 8011a1a:	d1ed      	bne.n	80119f8 <rcl_node_init+0x26c>
 8011a1c:	e7c9      	b.n	80119b2 <rcl_node_init+0x226>
 8011a1e:	f000 fe37 	bl	8012690 <rmw_node_name_validation_result_string>
 8011a22:	f04f 09c9 	mov.w	r9, #201	; 0xc9
 8011a26:	e7c4      	b.n	80119b2 <rcl_node_init+0x226>
 8011a28:	4618      	mov	r0, r3
 8011a2a:	f000 fdd3 	bl	80125d4 <rmw_namespace_validation_result_string>
 8011a2e:	f04f 09ca 	mov.w	r9, #202	; 0xca
 8011a32:	f1ba 0f00 	cmp.w	sl, #0
 8011a36:	d1df      	bne.n	80119f8 <rcl_node_init+0x26c>
 8011a38:	e7bb      	b.n	80119b2 <rcl_node_init+0x226>
 8011a3a:	f04f 090a 	mov.w	r9, #10
 8011a3e:	e7b8      	b.n	80119b2 <rcl_node_init+0x226>
 8011a40:	a813      	add	r0, sp, #76	; 0x4c
 8011a42:	f003 fea1 	bl	8015788 <rcl_get_default_domain_id>
 8011a46:	2800      	cmp	r0, #0
 8011a48:	d187      	bne.n	801195a <rcl_node_init+0x1ce>
 8011a4a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011a4c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8011a50:	1c5a      	adds	r2, r3, #1
 8011a52:	bf04      	itt	eq
 8011a54:	9013      	streq	r0, [sp, #76]	; 0x4c
 8011a56:	4603      	moveq	r3, r0
 8011a58:	e73b      	b.n	80118d2 <rcl_node_init+0x146>
 8011a5a:	bf00      	nop
 8011a5c:	08017690 	.word	0x08017690
 8011a60:	08017620 	.word	0x08017620
 8011a64:	08017654 	.word	0x08017654
 8011a68:	08017694 	.word	0x08017694

08011a6c <rcl_node_is_valid>:
 8011a6c:	b130      	cbz	r0, 8011a7c <rcl_node_is_valid+0x10>
 8011a6e:	6843      	ldr	r3, [r0, #4]
 8011a70:	b123      	cbz	r3, 8011a7c <rcl_node_is_valid+0x10>
 8011a72:	6a1b      	ldr	r3, [r3, #32]
 8011a74:	b113      	cbz	r3, 8011a7c <rcl_node_is_valid+0x10>
 8011a76:	6800      	ldr	r0, [r0, #0]
 8011a78:	f7ff ba5e 	b.w	8010f38 <rcl_context_is_valid>
 8011a7c:	2000      	movs	r0, #0
 8011a7e:	4770      	bx	lr

08011a80 <rcl_node_get_name>:
 8011a80:	b120      	cbz	r0, 8011a8c <rcl_node_get_name+0xc>
 8011a82:	6840      	ldr	r0, [r0, #4]
 8011a84:	b110      	cbz	r0, 8011a8c <rcl_node_get_name+0xc>
 8011a86:	6a00      	ldr	r0, [r0, #32]
 8011a88:	b100      	cbz	r0, 8011a8c <rcl_node_get_name+0xc>
 8011a8a:	6880      	ldr	r0, [r0, #8]
 8011a8c:	4770      	bx	lr
 8011a8e:	bf00      	nop

08011a90 <rcl_node_get_namespace>:
 8011a90:	b120      	cbz	r0, 8011a9c <rcl_node_get_namespace+0xc>
 8011a92:	6840      	ldr	r0, [r0, #4]
 8011a94:	b110      	cbz	r0, 8011a9c <rcl_node_get_namespace+0xc>
 8011a96:	6a00      	ldr	r0, [r0, #32]
 8011a98:	b100      	cbz	r0, 8011a9c <rcl_node_get_namespace+0xc>
 8011a9a:	68c0      	ldr	r0, [r0, #12]
 8011a9c:	4770      	bx	lr
 8011a9e:	bf00      	nop

08011aa0 <rcl_node_get_options>:
 8011aa0:	b128      	cbz	r0, 8011aae <rcl_node_get_options+0xe>
 8011aa2:	6840      	ldr	r0, [r0, #4]
 8011aa4:	b118      	cbz	r0, 8011aae <rcl_node_get_options+0xe>
 8011aa6:	6a03      	ldr	r3, [r0, #32]
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	bf08      	it	eq
 8011aac:	2000      	moveq	r0, #0
 8011aae:	4770      	bx	lr

08011ab0 <rcl_node_get_rmw_handle>:
 8011ab0:	b110      	cbz	r0, 8011ab8 <rcl_node_get_rmw_handle+0x8>
 8011ab2:	6840      	ldr	r0, [r0, #4]
 8011ab4:	b100      	cbz	r0, 8011ab8 <rcl_node_get_rmw_handle+0x8>
 8011ab6:	6a00      	ldr	r0, [r0, #32]
 8011ab8:	4770      	bx	lr
 8011aba:	bf00      	nop

08011abc <rcl_node_get_default_options>:
 8011abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011abe:	b087      	sub	sp, #28
 8011ac0:	4607      	mov	r7, r0
 8011ac2:	466d      	mov	r5, sp
 8011ac4:	4668      	mov	r0, sp
 8011ac6:	f7fb fdcf 	bl	800d668 <rcutils_get_default_allocator>
 8011aca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011acc:	4c08      	ldr	r4, [pc, #32]	; (8011af0 <rcl_node_get_default_options+0x34>)
 8011ace:	f8d5 c000 	ldr.w	ip, [r5]
 8011ad2:	1d26      	adds	r6, r4, #4
 8011ad4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011ad6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011ad8:	463d      	mov	r5, r7
 8011ada:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011adc:	f8c6 c000 	str.w	ip, [r6]
 8011ae0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8011ae4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8011ae8:	4638      	mov	r0, r7
 8011aea:	b007      	add	sp, #28
 8011aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011aee:	bf00      	nop
 8011af0:	20000064 	.word	0x20000064

08011af4 <rcl_node_options_copy>:
 8011af4:	b1c8      	cbz	r0, 8011b2a <rcl_node_options_copy+0x36>
 8011af6:	b4f0      	push	{r4, r5, r6, r7}
 8011af8:	460f      	mov	r7, r1
 8011afa:	b199      	cbz	r1, 8011b24 <rcl_node_options_copy+0x30>
 8011afc:	4288      	cmp	r0, r1
 8011afe:	4606      	mov	r6, r0
 8011b00:	d010      	beq.n	8011b24 <rcl_node_options_copy+0x30>
 8011b02:	4605      	mov	r5, r0
 8011b04:	460c      	mov	r4, r1
 8011b06:	f855 3b04 	ldr.w	r3, [r5], #4
 8011b0a:	f844 3b04 	str.w	r3, [r4], #4
 8011b0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011b12:	7e32      	ldrb	r2, [r6, #24]
 8011b14:	6829      	ldr	r1, [r5, #0]
 8011b16:	7e73      	ldrb	r3, [r6, #25]
 8011b18:	6021      	str	r1, [r4, #0]
 8011b1a:	2000      	movs	r0, #0
 8011b1c:	763a      	strb	r2, [r7, #24]
 8011b1e:	767b      	strb	r3, [r7, #25]
 8011b20:	bcf0      	pop	{r4, r5, r6, r7}
 8011b22:	4770      	bx	lr
 8011b24:	200b      	movs	r0, #11
 8011b26:	bcf0      	pop	{r4, r5, r6, r7}
 8011b28:	4770      	bx	lr
 8011b2a:	200b      	movs	r0, #11
 8011b2c:	4770      	bx	lr
 8011b2e:	bf00      	nop

08011b30 <exact_match_lookup>:
 8011b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b32:	f102 0708 	add.w	r7, r2, #8
 8011b36:	460b      	mov	r3, r1
 8011b38:	4614      	mov	r4, r2
 8011b3a:	4606      	mov	r6, r0
 8011b3c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8011b40:	b085      	sub	sp, #20
 8011b42:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8011b46:	4618      	mov	r0, r3
 8011b48:	4918      	ldr	r1, [pc, #96]	; (8011bac <exact_match_lookup+0x7c>)
 8011b4a:	e894 000c 	ldmia.w	r4, {r2, r3}
 8011b4e:	f000 faff 	bl	8012150 <rcutils_join_path>
 8011b52:	7833      	ldrb	r3, [r6, #0]
 8011b54:	2b2f      	cmp	r3, #47	; 0x2f
 8011b56:	4605      	mov	r5, r0
 8011b58:	d021      	beq.n	8011b9e <exact_match_lookup+0x6e>
 8011b5a:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 8011b5e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8011b62:	1c70      	adds	r0, r6, #1
 8011b64:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8011b68:	f000 faf8 	bl	801215c <rcutils_to_native_path>
 8011b6c:	4606      	mov	r6, r0
 8011b6e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8011b72:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8011b76:	4631      	mov	r1, r6
 8011b78:	e894 000c 	ldmia.w	r4, {r2, r3}
 8011b7c:	4628      	mov	r0, r5
 8011b7e:	f000 fae7 	bl	8012150 <rcutils_join_path>
 8011b82:	6862      	ldr	r2, [r4, #4]
 8011b84:	6921      	ldr	r1, [r4, #16]
 8011b86:	4603      	mov	r3, r0
 8011b88:	4630      	mov	r0, r6
 8011b8a:	461e      	mov	r6, r3
 8011b8c:	4790      	blx	r2
 8011b8e:	4628      	mov	r0, r5
 8011b90:	6863      	ldr	r3, [r4, #4]
 8011b92:	6921      	ldr	r1, [r4, #16]
 8011b94:	4798      	blx	r3
 8011b96:	4635      	mov	r5, r6
 8011b98:	4628      	mov	r0, r5
 8011b9a:	b005      	add	sp, #20
 8011b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b9e:	7873      	ldrb	r3, [r6, #1]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d1da      	bne.n	8011b5a <exact_match_lookup+0x2a>
 8011ba4:	4628      	mov	r0, r5
 8011ba6:	b005      	add	sp, #20
 8011ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011baa:	bf00      	nop
 8011bac:	080176dc 	.word	0x080176dc

08011bb0 <rcl_get_secure_root>:
 8011bb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011bb4:	b085      	sub	sp, #20
 8011bb6:	b168      	cbz	r0, 8011bd4 <rcl_get_secure_root+0x24>
 8011bb8:	4607      	mov	r7, r0
 8011bba:	4608      	mov	r0, r1
 8011bbc:	460c      	mov	r4, r1
 8011bbe:	f7fb fd61 	bl	800d684 <rcutils_allocator_is_valid>
 8011bc2:	b138      	cbz	r0, 8011bd4 <rcl_get_secure_root+0x24>
 8011bc4:	2300      	movs	r3, #0
 8011bc6:	482d      	ldr	r0, [pc, #180]	; (8011c7c <rcl_get_secure_root+0xcc>)
 8011bc8:	9303      	str	r3, [sp, #12]
 8011bca:	a903      	add	r1, sp, #12
 8011bcc:	f000 fb08 	bl	80121e0 <rcutils_get_env>
 8011bd0:	4605      	mov	r5, r0
 8011bd2:	b120      	cbz	r0, 8011bde <rcl_get_secure_root+0x2e>
 8011bd4:	2500      	movs	r5, #0
 8011bd6:	4628      	mov	r0, r5
 8011bd8:	b005      	add	sp, #20
 8011bda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011bde:	9b03      	ldr	r3, [sp, #12]
 8011be0:	781a      	ldrb	r2, [r3, #0]
 8011be2:	2a00      	cmp	r2, #0
 8011be4:	d0f6      	beq.n	8011bd4 <rcl_get_secure_root+0x24>
 8011be6:	f104 090c 	add.w	r9, r4, #12
 8011bea:	e899 0003 	ldmia.w	r9, {r0, r1}
 8011bee:	e88d 0003 	stmia.w	sp, {r0, r1}
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8011bf8:	f000 fbe2 	bl	80123c0 <rcutils_strdup>
 8011bfc:	4680      	mov	r8, r0
 8011bfe:	2800      	cmp	r0, #0
 8011c00:	d0e8      	beq.n	8011bd4 <rcl_get_secure_root+0x24>
 8011c02:	481f      	ldr	r0, [pc, #124]	; (8011c80 <rcl_get_secure_root+0xd0>)
 8011c04:	9503      	str	r5, [sp, #12]
 8011c06:	a903      	add	r1, sp, #12
 8011c08:	f000 faea 	bl	80121e0 <rcutils_get_env>
 8011c0c:	b160      	cbz	r0, 8011c28 <rcl_get_secure_root+0x78>
 8011c0e:	2600      	movs	r6, #0
 8011c10:	6863      	ldr	r3, [r4, #4]
 8011c12:	6921      	ldr	r1, [r4, #16]
 8011c14:	4630      	mov	r0, r6
 8011c16:	4798      	blx	r3
 8011c18:	4640      	mov	r0, r8
 8011c1a:	6863      	ldr	r3, [r4, #4]
 8011c1c:	6921      	ldr	r1, [r4, #16]
 8011c1e:	4798      	blx	r3
 8011c20:	4628      	mov	r0, r5
 8011c22:	b005      	add	sp, #20
 8011c24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c28:	9b03      	ldr	r3, [sp, #12]
 8011c2a:	781e      	ldrb	r6, [r3, #0]
 8011c2c:	b1f6      	cbz	r6, 8011c6c <rcl_get_secure_root+0xbc>
 8011c2e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8011c32:	e88d 0003 	stmia.w	sp, {r0, r1}
 8011c36:	4618      	mov	r0, r3
 8011c38:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8011c3c:	f000 fbc0 	bl	80123c0 <rcutils_strdup>
 8011c40:	4606      	mov	r6, r0
 8011c42:	2800      	cmp	r0, #0
 8011c44:	d0e3      	beq.n	8011c0e <rcl_get_secure_root+0x5e>
 8011c46:	4622      	mov	r2, r4
 8011c48:	4641      	mov	r1, r8
 8011c4a:	f7ff ff71 	bl	8011b30 <exact_match_lookup>
 8011c4e:	4605      	mov	r5, r0
 8011c50:	2d00      	cmp	r5, #0
 8011c52:	d0dd      	beq.n	8011c10 <rcl_get_secure_root+0x60>
 8011c54:	4628      	mov	r0, r5
 8011c56:	f000 fa79 	bl	801214c <rcutils_is_directory>
 8011c5a:	4607      	mov	r7, r0
 8011c5c:	2800      	cmp	r0, #0
 8011c5e:	d1d7      	bne.n	8011c10 <rcl_get_secure_root+0x60>
 8011c60:	4628      	mov	r0, r5
 8011c62:	6863      	ldr	r3, [r4, #4]
 8011c64:	6921      	ldr	r1, [r4, #16]
 8011c66:	4798      	blx	r3
 8011c68:	463d      	mov	r5, r7
 8011c6a:	e7d1      	b.n	8011c10 <rcl_get_secure_root+0x60>
 8011c6c:	4638      	mov	r0, r7
 8011c6e:	4622      	mov	r2, r4
 8011c70:	4641      	mov	r1, r8
 8011c72:	f7ff ff5d 	bl	8011b30 <exact_match_lookup>
 8011c76:	4605      	mov	r5, r0
 8011c78:	e7ea      	b.n	8011c50 <rcl_get_secure_root+0xa0>
 8011c7a:	bf00      	nop
 8011c7c:	080176e8 	.word	0x080176e8
 8011c80:	08017700 	.word	0x08017700

08011c84 <rcl_get_security_options_from_environment>:
 8011c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c88:	b082      	sub	sp, #8
 8011c8a:	4607      	mov	r7, r0
 8011c8c:	4688      	mov	r8, r1
 8011c8e:	2400      	movs	r4, #0
 8011c90:	481d      	ldr	r0, [pc, #116]	; (8011d08 <rcl_get_security_options_from_environment+0x84>)
 8011c92:	9401      	str	r4, [sp, #4]
 8011c94:	a901      	add	r1, sp, #4
 8011c96:	4616      	mov	r6, r2
 8011c98:	f000 faa2 	bl	80121e0 <rcutils_get_env>
 8011c9c:	b120      	cbz	r0, 8011ca8 <rcl_get_security_options_from_environment+0x24>
 8011c9e:	2501      	movs	r5, #1
 8011ca0:	4628      	mov	r0, r5
 8011ca2:	b002      	add	sp, #8
 8011ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ca8:	4918      	ldr	r1, [pc, #96]	; (8011d0c <rcl_get_security_options_from_environment+0x88>)
 8011caa:	4604      	mov	r4, r0
 8011cac:	9801      	ldr	r0, [sp, #4]
 8011cae:	f7ee fa97 	bl	80001e0 <strcmp>
 8011cb2:	4605      	mov	r5, r0
 8011cb4:	b9c8      	cbnz	r0, 8011cea <rcl_get_security_options_from_environment+0x66>
 8011cb6:	9001      	str	r0, [sp, #4]
 8011cb8:	b1ee      	cbz	r6, 8011cf6 <rcl_get_security_options_from_environment+0x72>
 8011cba:	4815      	ldr	r0, [pc, #84]	; (8011d10 <rcl_get_security_options_from_environment+0x8c>)
 8011cbc:	a901      	add	r1, sp, #4
 8011cbe:	f000 fa8f 	bl	80121e0 <rcutils_get_env>
 8011cc2:	2800      	cmp	r0, #0
 8011cc4:	d1eb      	bne.n	8011c9e <rcl_get_security_options_from_environment+0x1a>
 8011cc6:	4913      	ldr	r1, [pc, #76]	; (8011d14 <rcl_get_security_options_from_environment+0x90>)
 8011cc8:	9801      	ldr	r0, [sp, #4]
 8011cca:	f7ee fa89 	bl	80001e0 <strcmp>
 8011cce:	fab0 f080 	clz	r0, r0
 8011cd2:	0940      	lsrs	r0, r0, #5
 8011cd4:	7030      	strb	r0, [r6, #0]
 8011cd6:	4641      	mov	r1, r8
 8011cd8:	4638      	mov	r0, r7
 8011cda:	f7ff ff69 	bl	8011bb0 <rcl_get_secure_root>
 8011cde:	b160      	cbz	r0, 8011cfa <rcl_get_security_options_from_environment+0x76>
 8011ce0:	6070      	str	r0, [r6, #4]
 8011ce2:	4628      	mov	r0, r5
 8011ce4:	b002      	add	sp, #8
 8011ce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cea:	4625      	mov	r5, r4
 8011cec:	4628      	mov	r0, r5
 8011cee:	7034      	strb	r4, [r6, #0]
 8011cf0:	b002      	add	sp, #8
 8011cf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cf6:	250b      	movs	r5, #11
 8011cf8:	e7d2      	b.n	8011ca0 <rcl_get_security_options_from_environment+0x1c>
 8011cfa:	7835      	ldrb	r5, [r6, #0]
 8011cfc:	f1a5 0501 	sub.w	r5, r5, #1
 8011d00:	fab5 f585 	clz	r5, r5
 8011d04:	096d      	lsrs	r5, r5, #5
 8011d06:	e7cb      	b.n	8011ca0 <rcl_get_security_options_from_environment+0x1c>
 8011d08:	080176a0 	.word	0x080176a0
 8011d0c:	080176b4 	.word	0x080176b4
 8011d10:	080176bc 	.word	0x080176bc
 8011d14:	080176d4 	.word	0x080176d4

08011d18 <rcl_get_system_time>:
 8011d18:	4608      	mov	r0, r1
 8011d1a:	f000 bb8f 	b.w	801243c <rcutils_system_time_now>
 8011d1e:	bf00      	nop

08011d20 <rcl_get_steady_time>:
 8011d20:	4608      	mov	r0, r1
 8011d22:	f000 bbb3 	b.w	801248c <rcutils_steady_time_now>
 8011d26:	bf00      	nop

08011d28 <rcl_get_ros_time>:
 8011d28:	7a03      	ldrb	r3, [r0, #8]
 8011d2a:	b510      	push	{r4, lr}
 8011d2c:	460c      	mov	r4, r1
 8011d2e:	b133      	cbz	r3, 8011d3e <rcl_get_ros_time+0x16>
 8011d30:	2105      	movs	r1, #5
 8011d32:	f000 f9d7 	bl	80120e4 <__atomic_load_8>
 8011d36:	e9c4 0100 	strd	r0, r1, [r4]
 8011d3a:	2000      	movs	r0, #0
 8011d3c:	bd10      	pop	{r4, pc}
 8011d3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d42:	4608      	mov	r0, r1
 8011d44:	f000 bb7a 	b.w	801243c <rcutils_system_time_now>

08011d48 <rcl_clock_init>:
 8011d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d4c:	4606      	mov	r6, r0
 8011d4e:	4610      	mov	r0, r2
 8011d50:	4614      	mov	r4, r2
 8011d52:	460d      	mov	r5, r1
 8011d54:	f7fb fc96 	bl	800d684 <rcutils_allocator_is_valid>
 8011d58:	b128      	cbz	r0, 8011d66 <rcl_clock_init+0x1e>
 8011d5a:	2e03      	cmp	r6, #3
 8011d5c:	d803      	bhi.n	8011d66 <rcl_clock_init+0x1e>
 8011d5e:	e8df f006 	tbb	[pc, r6]
 8011d62:	2c1b      	.short	0x2c1b
 8011d64:	0554      	.short	0x0554
 8011d66:	200b      	movs	r0, #11
 8011d68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d6c:	2d00      	cmp	r5, #0
 8011d6e:	d0fa      	beq.n	8011d66 <rcl_clock_init+0x1e>
 8011d70:	2c00      	cmp	r4, #0
 8011d72:	d0f8      	beq.n	8011d66 <rcl_clock_init+0x1e>
 8011d74:	2600      	movs	r6, #0
 8011d76:	702e      	strb	r6, [r5, #0]
 8011d78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011d7a:	f105 0714 	add.w	r7, r5, #20
 8011d7e:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8011d82:	612e      	str	r6, [r5, #16]
 8011d84:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8011d86:	6823      	ldr	r3, [r4, #0]
 8011d88:	603b      	str	r3, [r7, #0]
 8011d8a:	2303      	movs	r3, #3
 8011d8c:	4a2b      	ldr	r2, [pc, #172]	; (8011e3c <rcl_clock_init+0xf4>)
 8011d8e:	702b      	strb	r3, [r5, #0]
 8011d90:	4630      	mov	r0, r6
 8011d92:	60ea      	str	r2, [r5, #12]
 8011d94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d98:	2d00      	cmp	r5, #0
 8011d9a:	d0e4      	beq.n	8011d66 <rcl_clock_init+0x1e>
 8011d9c:	2600      	movs	r6, #0
 8011d9e:	702e      	strb	r6, [r5, #0]
 8011da0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011da2:	f105 0714 	add.w	r7, r5, #20
 8011da6:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8011daa:	e9c5 6603 	strd	r6, r6, [r5, #12]
 8011dae:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8011db0:	6823      	ldr	r3, [r4, #0]
 8011db2:	603b      	str	r3, [r7, #0]
 8011db4:	4630      	mov	r0, r6
 8011db6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011dba:	2d00      	cmp	r5, #0
 8011dbc:	d0d3      	beq.n	8011d66 <rcl_clock_init+0x1e>
 8011dbe:	2c00      	cmp	r4, #0
 8011dc0:	d0d1      	beq.n	8011d66 <rcl_clock_init+0x1e>
 8011dc2:	2600      	movs	r6, #0
 8011dc4:	702e      	strb	r6, [r5, #0]
 8011dc6:	46a4      	mov	ip, r4
 8011dc8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011dcc:	f105 0714 	add.w	r7, r5, #20
 8011dd0:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8011dd4:	e9c5 6603 	strd	r6, r6, [r5, #12]
 8011dd8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8011dda:	f8dc 3000 	ldr.w	r3, [ip]
 8011dde:	603b      	str	r3, [r7, #0]
 8011de0:	6921      	ldr	r1, [r4, #16]
 8011de2:	6823      	ldr	r3, [r4, #0]
 8011de4:	2010      	movs	r0, #16
 8011de6:	4798      	blx	r3
 8011de8:	4603      	mov	r3, r0
 8011dea:	6128      	str	r0, [r5, #16]
 8011dec:	b318      	cbz	r0, 8011e36 <rcl_clock_init+0xee>
 8011dee:	f04f 0800 	mov.w	r8, #0
 8011df2:	f04f 0900 	mov.w	r9, #0
 8011df6:	7206      	strb	r6, [r0, #8]
 8011df8:	e9c3 8900 	strd	r8, r9, [r3]
 8011dfc:	2301      	movs	r3, #1
 8011dfe:	4a10      	ldr	r2, [pc, #64]	; (8011e40 <rcl_clock_init+0xf8>)
 8011e00:	702b      	strb	r3, [r5, #0]
 8011e02:	4630      	mov	r0, r6
 8011e04:	60ea      	str	r2, [r5, #12]
 8011e06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e0a:	2d00      	cmp	r5, #0
 8011e0c:	d0ab      	beq.n	8011d66 <rcl_clock_init+0x1e>
 8011e0e:	2c00      	cmp	r4, #0
 8011e10:	d0a9      	beq.n	8011d66 <rcl_clock_init+0x1e>
 8011e12:	2600      	movs	r6, #0
 8011e14:	702e      	strb	r6, [r5, #0]
 8011e16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011e18:	f105 0714 	add.w	r7, r5, #20
 8011e1c:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8011e20:	612e      	str	r6, [r5, #16]
 8011e22:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8011e24:	6823      	ldr	r3, [r4, #0]
 8011e26:	603b      	str	r3, [r7, #0]
 8011e28:	2302      	movs	r3, #2
 8011e2a:	4a06      	ldr	r2, [pc, #24]	; (8011e44 <rcl_clock_init+0xfc>)
 8011e2c:	702b      	strb	r3, [r5, #0]
 8011e2e:	4630      	mov	r0, r6
 8011e30:	60ea      	str	r2, [r5, #12]
 8011e32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e36:	200a      	movs	r0, #10
 8011e38:	e796      	b.n	8011d68 <rcl_clock_init+0x20>
 8011e3a:	bf00      	nop
 8011e3c:	08011d21 	.word	0x08011d21
 8011e40:	08011d29 	.word	0x08011d29
 8011e44:	08011d19 	.word	0x08011d19

08011e48 <rcl_validate_enclave_name_with_size>:
 8011e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e4a:	b0c3      	sub	sp, #268	; 0x10c
 8011e4c:	b1d0      	cbz	r0, 8011e84 <rcl_validate_enclave_name_with_size+0x3c>
 8011e4e:	4615      	mov	r5, r2
 8011e50:	b1c2      	cbz	r2, 8011e84 <rcl_validate_enclave_name_with_size+0x3c>
 8011e52:	461f      	mov	r7, r3
 8011e54:	466a      	mov	r2, sp
 8011e56:	ab01      	add	r3, sp, #4
 8011e58:	460e      	mov	r6, r1
 8011e5a:	f000 fb5b 	bl	8012514 <rmw_validate_namespace_with_size>
 8011e5e:	4604      	mov	r4, r0
 8011e60:	b9e0      	cbnz	r0, 8011e9c <rcl_validate_enclave_name_with_size+0x54>
 8011e62:	9b00      	ldr	r3, [sp, #0]
 8011e64:	b923      	cbnz	r3, 8011e70 <rcl_validate_enclave_name_with_size+0x28>
 8011e66:	2300      	movs	r3, #0
 8011e68:	602b      	str	r3, [r5, #0]
 8011e6a:	4620      	mov	r0, r4
 8011e6c:	b043      	add	sp, #268	; 0x10c
 8011e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e70:	2b07      	cmp	r3, #7
 8011e72:	d00b      	beq.n	8011e8c <rcl_validate_enclave_name_with_size+0x44>
 8011e74:	1e5a      	subs	r2, r3, #1
 8011e76:	2a05      	cmp	r2, #5
 8011e78:	d82e      	bhi.n	8011ed8 <rcl_validate_enclave_name_with_size+0x90>
 8011e7a:	e8df f002 	tbb	[pc, r2]
 8011e7e:	211e      	.short	0x211e
 8011e80:	152a2724 	.word	0x152a2724
 8011e84:	240b      	movs	r4, #11
 8011e86:	4620      	mov	r0, r4
 8011e88:	b043      	add	sp, #268	; 0x10c
 8011e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e8c:	2eff      	cmp	r6, #255	; 0xff
 8011e8e:	d9ea      	bls.n	8011e66 <rcl_validate_enclave_name_with_size+0x1e>
 8011e90:	602b      	str	r3, [r5, #0]
 8011e92:	2f00      	cmp	r7, #0
 8011e94:	d0e9      	beq.n	8011e6a <rcl_validate_enclave_name_with_size+0x22>
 8011e96:	23fe      	movs	r3, #254	; 0xfe
 8011e98:	603b      	str	r3, [r7, #0]
 8011e9a:	e7e6      	b.n	8011e6a <rcl_validate_enclave_name_with_size+0x22>
 8011e9c:	f7ff f82e 	bl	8010efc <rcl_convert_rmw_ret_to_rcl_ret>
 8011ea0:	4604      	mov	r4, r0
 8011ea2:	4620      	mov	r0, r4
 8011ea4:	b043      	add	sp, #268	; 0x10c
 8011ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ea8:	2306      	movs	r3, #6
 8011eaa:	602b      	str	r3, [r5, #0]
 8011eac:	2f00      	cmp	r7, #0
 8011eae:	d0dc      	beq.n	8011e6a <rcl_validate_enclave_name_with_size+0x22>
 8011eb0:	9b01      	ldr	r3, [sp, #4]
 8011eb2:	603b      	str	r3, [r7, #0]
 8011eb4:	4620      	mov	r0, r4
 8011eb6:	b043      	add	sp, #268	; 0x10c
 8011eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011eba:	2301      	movs	r3, #1
 8011ebc:	602b      	str	r3, [r5, #0]
 8011ebe:	e7f5      	b.n	8011eac <rcl_validate_enclave_name_with_size+0x64>
 8011ec0:	2302      	movs	r3, #2
 8011ec2:	602b      	str	r3, [r5, #0]
 8011ec4:	e7f2      	b.n	8011eac <rcl_validate_enclave_name_with_size+0x64>
 8011ec6:	2303      	movs	r3, #3
 8011ec8:	602b      	str	r3, [r5, #0]
 8011eca:	e7ef      	b.n	8011eac <rcl_validate_enclave_name_with_size+0x64>
 8011ecc:	2304      	movs	r3, #4
 8011ece:	602b      	str	r3, [r5, #0]
 8011ed0:	e7ec      	b.n	8011eac <rcl_validate_enclave_name_with_size+0x64>
 8011ed2:	2305      	movs	r3, #5
 8011ed4:	602b      	str	r3, [r5, #0]
 8011ed6:	e7e9      	b.n	8011eac <rcl_validate_enclave_name_with_size+0x64>
 8011ed8:	4a03      	ldr	r2, [pc, #12]	; (8011ee8 <rcl_validate_enclave_name_with_size+0xa0>)
 8011eda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011ede:	a802      	add	r0, sp, #8
 8011ee0:	f000 fa42 	bl	8012368 <rcutils_snprintf>
 8011ee4:	2401      	movs	r4, #1
 8011ee6:	e7c0      	b.n	8011e6a <rcl_validate_enclave_name_with_size+0x22>
 8011ee8:	08017720 	.word	0x08017720

08011eec <rcl_validate_enclave_name>:
 8011eec:	b168      	cbz	r0, 8011f0a <rcl_validate_enclave_name+0x1e>
 8011eee:	b570      	push	{r4, r5, r6, lr}
 8011ef0:	460d      	mov	r5, r1
 8011ef2:	4616      	mov	r6, r2
 8011ef4:	4604      	mov	r4, r0
 8011ef6:	f7ee f97d 	bl	80001f4 <strlen>
 8011efa:	4633      	mov	r3, r6
 8011efc:	4601      	mov	r1, r0
 8011efe:	462a      	mov	r2, r5
 8011f00:	4620      	mov	r0, r4
 8011f02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011f06:	f7ff bf9f 	b.w	8011e48 <rcl_validate_enclave_name_with_size>
 8011f0a:	200b      	movs	r0, #11
 8011f0c:	4770      	bx	lr
 8011f0e:	bf00      	nop

08011f10 <rcl_validate_topic_name>:
 8011f10:	2800      	cmp	r0, #0
 8011f12:	f000 808b 	beq.w	801202c <rcl_validate_topic_name+0x11c>
 8011f16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f1a:	460e      	mov	r6, r1
 8011f1c:	2900      	cmp	r1, #0
 8011f1e:	f000 808c 	beq.w	801203a <rcl_validate_topic_name+0x12a>
 8011f22:	4617      	mov	r7, r2
 8011f24:	4605      	mov	r5, r0
 8011f26:	f7ee f965 	bl	80001f4 <strlen>
 8011f2a:	b1b0      	cbz	r0, 8011f5a <rcl_validate_topic_name+0x4a>
 8011f2c:	f895 9000 	ldrb.w	r9, [r5]
 8011f30:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 80120e0 <rcl_validate_topic_name+0x1d0>
 8011f34:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8011f38:	f013 0304 	ands.w	r3, r3, #4
 8011f3c:	d178      	bne.n	8012030 <rcl_validate_topic_name+0x120>
 8011f3e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8011f42:	f815 2008 	ldrb.w	r2, [r5, r8]
 8011f46:	2a2f      	cmp	r2, #47	; 0x2f
 8011f48:	d10e      	bne.n	8011f68 <rcl_validate_topic_name+0x58>
 8011f4a:	2202      	movs	r2, #2
 8011f4c:	6032      	str	r2, [r6, #0]
 8011f4e:	b36f      	cbz	r7, 8011fac <rcl_validate_topic_name+0x9c>
 8011f50:	f8c7 8000 	str.w	r8, [r7]
 8011f54:	4618      	mov	r0, r3
 8011f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f5a:	2301      	movs	r3, #1
 8011f5c:	6033      	str	r3, [r6, #0]
 8011f5e:	b32f      	cbz	r7, 8011fac <rcl_validate_topic_name+0x9c>
 8011f60:	2000      	movs	r0, #0
 8011f62:	6038      	str	r0, [r7, #0]
 8011f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f68:	461c      	mov	r4, r3
 8011f6a:	4619      	mov	r1, r3
 8011f6c:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 8011f70:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8011f74:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8011f78:	f1be 0f09 	cmp.w	lr, #9
 8011f7c:	d946      	bls.n	801200c <rcl_validate_topic_name+0xfc>
 8011f7e:	f022 0e20 	bic.w	lr, r2, #32
 8011f82:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 8011f86:	f1be 0f19 	cmp.w	lr, #25
 8011f8a:	d93f      	bls.n	801200c <rcl_validate_topic_name+0xfc>
 8011f8c:	2a5f      	cmp	r2, #95	; 0x5f
 8011f8e:	d014      	beq.n	8011fba <rcl_validate_topic_name+0xaa>
 8011f90:	2a2f      	cmp	r2, #47	; 0x2f
 8011f92:	d05b      	beq.n	801204c <rcl_validate_topic_name+0x13c>
 8011f94:	2a7e      	cmp	r2, #126	; 0x7e
 8011f96:	d052      	beq.n	801203e <rcl_validate_topic_name+0x12e>
 8011f98:	2a7b      	cmp	r2, #123	; 0x7b
 8011f9a:	d00a      	beq.n	8011fb2 <rcl_validate_topic_name+0xa2>
 8011f9c:	2a7d      	cmp	r2, #125	; 0x7d
 8011f9e:	d16f      	bne.n	8012080 <rcl_validate_topic_name+0x170>
 8011fa0:	2c00      	cmp	r4, #0
 8011fa2:	d15e      	bne.n	8012062 <rcl_validate_topic_name+0x152>
 8011fa4:	2305      	movs	r3, #5
 8011fa6:	6033      	str	r3, [r6, #0]
 8011fa8:	b107      	cbz	r7, 8011fac <rcl_validate_topic_name+0x9c>
 8011faa:	6039      	str	r1, [r7, #0]
 8011fac:	2000      	movs	r0, #0
 8011fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011fb2:	2c00      	cmp	r4, #0
 8011fb4:	d14c      	bne.n	8012050 <rcl_validate_topic_name+0x140>
 8011fb6:	460b      	mov	r3, r1
 8011fb8:	2401      	movs	r4, #1
 8011fba:	3101      	adds	r1, #1
 8011fbc:	4288      	cmp	r0, r1
 8011fbe:	d1d7      	bne.n	8011f70 <rcl_validate_topic_name+0x60>
 8011fc0:	2c00      	cmp	r4, #0
 8011fc2:	d156      	bne.n	8012072 <rcl_validate_topic_name+0x162>
 8011fc4:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 8011fc8:	4620      	mov	r0, r4
 8011fca:	d061      	beq.n	8012090 <rcl_validate_topic_name+0x180>
 8011fcc:	f108 0e01 	add.w	lr, r8, #1
 8011fd0:	e007      	b.n	8011fe2 <rcl_validate_topic_name+0xd2>
 8011fd2:	2801      	cmp	r0, #1
 8011fd4:	d047      	beq.n	8012066 <rcl_validate_topic_name+0x156>
 8011fd6:	461a      	mov	r2, r3
 8011fd8:	4291      	cmp	r1, r2
 8011fda:	4618      	mov	r0, r3
 8011fdc:	f105 0501 	add.w	r5, r5, #1
 8011fe0:	d944      	bls.n	801206c <rcl_validate_topic_name+0x15c>
 8011fe2:	4580      	cmp	r8, r0
 8011fe4:	f100 0301 	add.w	r3, r0, #1
 8011fe8:	d037      	beq.n	801205a <rcl_validate_topic_name+0x14a>
 8011fea:	782a      	ldrb	r2, [r5, #0]
 8011fec:	2a2f      	cmp	r2, #47	; 0x2f
 8011fee:	d1f0      	bne.n	8011fd2 <rcl_validate_topic_name+0xc2>
 8011ff0:	786b      	ldrb	r3, [r5, #1]
 8011ff2:	f81c 4003 	ldrb.w	r4, [ip, r3]
 8011ff6:	1c43      	adds	r3, r0, #1
 8011ff8:	0760      	lsls	r0, r4, #29
 8011ffa:	461a      	mov	r2, r3
 8011ffc:	d5ec      	bpl.n	8011fd8 <rcl_validate_topic_name+0xc8>
 8011ffe:	2304      	movs	r3, #4
 8012000:	6033      	str	r3, [r6, #0]
 8012002:	2f00      	cmp	r7, #0
 8012004:	d0d2      	beq.n	8011fac <rcl_validate_topic_name+0x9c>
 8012006:	603a      	str	r2, [r7, #0]
 8012008:	2000      	movs	r0, #0
 801200a:	e7ab      	b.n	8011f64 <rcl_validate_topic_name+0x54>
 801200c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8012010:	0752      	lsls	r2, r2, #29
 8012012:	d5d2      	bpl.n	8011fba <rcl_validate_topic_name+0xaa>
 8012014:	2c00      	cmp	r4, #0
 8012016:	d0d0      	beq.n	8011fba <rcl_validate_topic_name+0xaa>
 8012018:	2900      	cmp	r1, #0
 801201a:	d0ce      	beq.n	8011fba <rcl_validate_topic_name+0xaa>
 801201c:	1e4a      	subs	r2, r1, #1
 801201e:	429a      	cmp	r2, r3
 8012020:	d1cb      	bne.n	8011fba <rcl_validate_topic_name+0xaa>
 8012022:	2309      	movs	r3, #9
 8012024:	6033      	str	r3, [r6, #0]
 8012026:	2f00      	cmp	r7, #0
 8012028:	d1bf      	bne.n	8011faa <rcl_validate_topic_name+0x9a>
 801202a:	e7bf      	b.n	8011fac <rcl_validate_topic_name+0x9c>
 801202c:	200b      	movs	r0, #11
 801202e:	4770      	bx	lr
 8012030:	2304      	movs	r3, #4
 8012032:	6033      	str	r3, [r6, #0]
 8012034:	2f00      	cmp	r7, #0
 8012036:	d193      	bne.n	8011f60 <rcl_validate_topic_name+0x50>
 8012038:	e7b8      	b.n	8011fac <rcl_validate_topic_name+0x9c>
 801203a:	200b      	movs	r0, #11
 801203c:	e792      	b.n	8011f64 <rcl_validate_topic_name+0x54>
 801203e:	2900      	cmp	r1, #0
 8012040:	d0bb      	beq.n	8011fba <rcl_validate_topic_name+0xaa>
 8012042:	2306      	movs	r3, #6
 8012044:	6033      	str	r3, [r6, #0]
 8012046:	2f00      	cmp	r7, #0
 8012048:	d1af      	bne.n	8011faa <rcl_validate_topic_name+0x9a>
 801204a:	e7af      	b.n	8011fac <rcl_validate_topic_name+0x9c>
 801204c:	2c00      	cmp	r4, #0
 801204e:	d0b4      	beq.n	8011fba <rcl_validate_topic_name+0xaa>
 8012050:	2308      	movs	r3, #8
 8012052:	6033      	str	r3, [r6, #0]
 8012054:	2f00      	cmp	r7, #0
 8012056:	d1a8      	bne.n	8011faa <rcl_validate_topic_name+0x9a>
 8012058:	e7a8      	b.n	8011fac <rcl_validate_topic_name+0x9c>
 801205a:	4672      	mov	r2, lr
 801205c:	f108 0301 	add.w	r3, r8, #1
 8012060:	e7ba      	b.n	8011fd8 <rcl_validate_topic_name+0xc8>
 8012062:	2400      	movs	r4, #0
 8012064:	e7a9      	b.n	8011fba <rcl_validate_topic_name+0xaa>
 8012066:	2202      	movs	r2, #2
 8012068:	4613      	mov	r3, r2
 801206a:	e7b5      	b.n	8011fd8 <rcl_validate_topic_name+0xc8>
 801206c:	2000      	movs	r0, #0
 801206e:	6030      	str	r0, [r6, #0]
 8012070:	e778      	b.n	8011f64 <rcl_validate_topic_name+0x54>
 8012072:	2205      	movs	r2, #5
 8012074:	6032      	str	r2, [r6, #0]
 8012076:	2f00      	cmp	r7, #0
 8012078:	d098      	beq.n	8011fac <rcl_validate_topic_name+0x9c>
 801207a:	603b      	str	r3, [r7, #0]
 801207c:	2000      	movs	r0, #0
 801207e:	e771      	b.n	8011f64 <rcl_validate_topic_name+0x54>
 8012080:	2c00      	cmp	r4, #0
 8012082:	bf14      	ite	ne
 8012084:	2308      	movne	r3, #8
 8012086:	2303      	moveq	r3, #3
 8012088:	6033      	str	r3, [r6, #0]
 801208a:	2f00      	cmp	r7, #0
 801208c:	d18d      	bne.n	8011faa <rcl_validate_topic_name+0x9a>
 801208e:	e78d      	b.n	8011fac <rcl_validate_topic_name+0x9c>
 8012090:	f108 0401 	add.w	r4, r8, #1
 8012094:	e007      	b.n	80120a6 <rcl_validate_topic_name+0x196>
 8012096:	2801      	cmp	r0, #1
 8012098:	d019      	beq.n	80120ce <rcl_validate_topic_name+0x1be>
 801209a:	461a      	mov	r2, r3
 801209c:	4291      	cmp	r1, r2
 801209e:	4618      	mov	r0, r3
 80120a0:	f105 0501 	add.w	r5, r5, #1
 80120a4:	d9e2      	bls.n	801206c <rcl_validate_topic_name+0x15c>
 80120a6:	4580      	cmp	r8, r0
 80120a8:	f100 0301 	add.w	r3, r0, #1
 80120ac:	d00b      	beq.n	80120c6 <rcl_validate_topic_name+0x1b6>
 80120ae:	782a      	ldrb	r2, [r5, #0]
 80120b0:	2a2f      	cmp	r2, #47	; 0x2f
 80120b2:	d1f0      	bne.n	8012096 <rcl_validate_topic_name+0x186>
 80120b4:	786b      	ldrb	r3, [r5, #1]
 80120b6:	f81c e003 	ldrb.w	lr, [ip, r3]
 80120ba:	1c43      	adds	r3, r0, #1
 80120bc:	f01e 0f04 	tst.w	lr, #4
 80120c0:	461a      	mov	r2, r3
 80120c2:	d0eb      	beq.n	801209c <rcl_validate_topic_name+0x18c>
 80120c4:	e79b      	b.n	8011ffe <rcl_validate_topic_name+0xee>
 80120c6:	4622      	mov	r2, r4
 80120c8:	f108 0301 	add.w	r3, r8, #1
 80120cc:	e7e6      	b.n	801209c <rcl_validate_topic_name+0x18c>
 80120ce:	2307      	movs	r3, #7
 80120d0:	6033      	str	r3, [r6, #0]
 80120d2:	2f00      	cmp	r7, #0
 80120d4:	f43f af6a 	beq.w	8011fac <rcl_validate_topic_name+0x9c>
 80120d8:	6038      	str	r0, [r7, #0]
 80120da:	2000      	movs	r0, #0
 80120dc:	e742      	b.n	8011f64 <rcl_validate_topic_name+0x54>
 80120de:	bf00      	nop
 80120e0:	08017d74 	.word	0x08017d74

080120e4 <__atomic_load_8>:
 80120e4:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80120e8:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 80120ec:	4b14      	ldr	r3, [pc, #80]	; (8012140 <__atomic_load_8+0x5c>)
 80120ee:	4a15      	ldr	r2, [pc, #84]	; (8012144 <__atomic_load_8+0x60>)
 80120f0:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80120f4:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80120f8:	fb03 f301 	mul.w	r3, r3, r1
 80120fc:	ea83 33d3 	eor.w	r3, r3, r3, lsr #15
 8012100:	fba2 1203 	umull	r1, r2, r2, r3
 8012104:	0912      	lsrs	r2, r2, #4
 8012106:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 801210a:	b430      	push	{r4, r5}
 801210c:	ebc2 02c1 	rsb	r2, r2, r1, lsl #3
 8012110:	4c0d      	ldr	r4, [pc, #52]	; (8012148 <__atomic_load_8+0x64>)
 8012112:	1a9b      	subs	r3, r3, r2
 8012114:	18e1      	adds	r1, r4, r3
 8012116:	f04f 0501 	mov.w	r5, #1
 801211a:	e8d1 2f4f 	ldrexb	r2, [r1]
 801211e:	e8c1 5f4c 	strexb	ip, r5, [r1]
 8012122:	f1bc 0f00 	cmp.w	ip, #0
 8012126:	d1f8      	bne.n	801211a <__atomic_load_8+0x36>
 8012128:	f3bf 8f5b 	dmb	ish
 801212c:	b2d2      	uxtb	r2, r2
 801212e:	2a00      	cmp	r2, #0
 8012130:	d1f3      	bne.n	801211a <__atomic_load_8+0x36>
 8012132:	e9d0 0100 	ldrd	r0, r1, [r0]
 8012136:	f3bf 8f5b 	dmb	ish
 801213a:	54e2      	strb	r2, [r4, r3]
 801213c:	bc30      	pop	{r4, r5}
 801213e:	4770      	bx	lr
 8012140:	27d4eb2d 	.word	0x27d4eb2d
 8012144:	b21642c9 	.word	0xb21642c9
 8012148:	2000939c 	.word	0x2000939c

0801214c <rcutils_is_directory>:
 801214c:	2000      	movs	r0, #0
 801214e:	4770      	bx	lr

08012150 <rcutils_join_path>:
 8012150:	b082      	sub	sp, #8
 8012152:	e88d 000c 	stmia.w	sp, {r2, r3}
 8012156:	2000      	movs	r0, #0
 8012158:	b002      	add	sp, #8
 801215a:	4770      	bx	lr

0801215c <rcutils_to_native_path>:
 801215c:	b084      	sub	sp, #16
 801215e:	a801      	add	r0, sp, #4
 8012160:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8012164:	b004      	add	sp, #16
 8012166:	2000      	movs	r0, #0
 8012168:	4770      	bx	lr
 801216a:	bf00      	nop

0801216c <rcutils_format_string_limit>:
 801216c:	b40f      	push	{r0, r1, r2, r3}
 801216e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012170:	b083      	sub	sp, #12
 8012172:	ac08      	add	r4, sp, #32
 8012174:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8012176:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801217a:	b34e      	cbz	r6, 80121d0 <rcutils_format_string_limit+0x64>
 801217c:	a808      	add	r0, sp, #32
 801217e:	f7fb fa81 	bl	800d684 <rcutils_allocator_is_valid>
 8012182:	b328      	cbz	r0, 80121d0 <rcutils_format_string_limit+0x64>
 8012184:	2100      	movs	r1, #0
 8012186:	ab0f      	add	r3, sp, #60	; 0x3c
 8012188:	4608      	mov	r0, r1
 801218a:	4632      	mov	r2, r6
 801218c:	e9cd 3300 	strd	r3, r3, [sp]
 8012190:	f000 f904 	bl	801239c <rcutils_vsnprintf>
 8012194:	1c43      	adds	r3, r0, #1
 8012196:	4605      	mov	r5, r0
 8012198:	d01a      	beq.n	80121d0 <rcutils_format_string_limit+0x64>
 801219a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801219c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801219e:	1c47      	adds	r7, r0, #1
 80121a0:	429f      	cmp	r7, r3
 80121a2:	bf84      	itt	hi
 80121a4:	461f      	movhi	r7, r3
 80121a6:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
 80121aa:	4638      	mov	r0, r7
 80121ac:	9b08      	ldr	r3, [sp, #32]
 80121ae:	4798      	blx	r3
 80121b0:	4604      	mov	r4, r0
 80121b2:	b168      	cbz	r0, 80121d0 <rcutils_format_string_limit+0x64>
 80121b4:	9b01      	ldr	r3, [sp, #4]
 80121b6:	4632      	mov	r2, r6
 80121b8:	4639      	mov	r1, r7
 80121ba:	f000 f8ef 	bl	801239c <rcutils_vsnprintf>
 80121be:	2800      	cmp	r0, #0
 80121c0:	db02      	blt.n	80121c8 <rcutils_format_string_limit+0x5c>
 80121c2:	2300      	movs	r3, #0
 80121c4:	5563      	strb	r3, [r4, r5]
 80121c6:	e004      	b.n	80121d2 <rcutils_format_string_limit+0x66>
 80121c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121ca:	990c      	ldr	r1, [sp, #48]	; 0x30
 80121cc:	4620      	mov	r0, r4
 80121ce:	4798      	blx	r3
 80121d0:	2400      	movs	r4, #0
 80121d2:	4620      	mov	r0, r4
 80121d4:	b003      	add	sp, #12
 80121d6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80121da:	b004      	add	sp, #16
 80121dc:	4770      	bx	lr
 80121de:	bf00      	nop

080121e0 <rcutils_get_env>:
 80121e0:	b168      	cbz	r0, 80121fe <rcutils_get_env+0x1e>
 80121e2:	b510      	push	{r4, lr}
 80121e4:	460c      	mov	r4, r1
 80121e6:	b129      	cbz	r1, 80121f4 <rcutils_get_env+0x14>
 80121e8:	f003 fd12 	bl	8015c10 <getenv>
 80121ec:	b120      	cbz	r0, 80121f8 <rcutils_get_env+0x18>
 80121ee:	6020      	str	r0, [r4, #0]
 80121f0:	2000      	movs	r0, #0
 80121f2:	bd10      	pop	{r4, pc}
 80121f4:	4803      	ldr	r0, [pc, #12]	; (8012204 <rcutils_get_env+0x24>)
 80121f6:	bd10      	pop	{r4, pc}
 80121f8:	4b03      	ldr	r3, [pc, #12]	; (8012208 <rcutils_get_env+0x28>)
 80121fa:	6023      	str	r3, [r4, #0]
 80121fc:	bd10      	pop	{r4, pc}
 80121fe:	4803      	ldr	r0, [pc, #12]	; (801220c <rcutils_get_env+0x2c>)
 8012200:	4770      	bx	lr
 8012202:	bf00      	nop
 8012204:	0801779c 	.word	0x0801779c
 8012208:	080178c0 	.word	0x080178c0
 801220c:	08017780 	.word	0x08017780

08012210 <rcutils_repl_str>:
 8012210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012214:	ed2d 8b02 	vpush	{d8}
 8012218:	b087      	sub	sp, #28
 801221a:	4680      	mov	r8, r0
 801221c:	4608      	mov	r0, r1
 801221e:	f8cd 8000 	str.w	r8, [sp]
 8012222:	ee08 2a10 	vmov	s16, r2
 8012226:	468a      	mov	sl, r1
 8012228:	4699      	mov	r9, r3
 801222a:	f7ed ffe3 	bl	80001f4 <strlen>
 801222e:	2600      	movs	r6, #0
 8012230:	4647      	mov	r7, r8
 8012232:	9001      	str	r0, [sp, #4]
 8012234:	46b3      	mov	fp, r6
 8012236:	2510      	movs	r5, #16
 8012238:	46b0      	mov	r8, r6
 801223a:	e01d      	b.n	8012278 <rcutils_repl_str+0x68>
 801223c:	f10b 0b01 	add.w	fp, fp, #1
 8012240:	455e      	cmp	r6, fp
 8012242:	d211      	bcs.n	8012268 <rcutils_repl_str+0x58>
 8012244:	442e      	add	r6, r5
 8012246:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801224a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801224e:	00b1      	lsls	r1, r6, #2
 8012250:	4798      	blx	r3
 8012252:	2800      	cmp	r0, #0
 8012254:	f000 8084 	beq.w	8012360 <rcutils_repl_str+0x150>
 8012258:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801225c:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8012260:	bf28      	it	cs
 8012262:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 8012266:	4680      	mov	r8, r0
 8012268:	9a00      	ldr	r2, [sp, #0]
 801226a:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 801226e:	1aa2      	subs	r2, r4, r2
 8012270:	f843 2c04 	str.w	r2, [r3, #-4]
 8012274:	9b01      	ldr	r3, [sp, #4]
 8012276:	18e7      	adds	r7, r4, r3
 8012278:	4651      	mov	r1, sl
 801227a:	4638      	mov	r0, r7
 801227c:	f004 f8a5 	bl	80163ca <strstr>
 8012280:	4604      	mov	r4, r0
 8012282:	4640      	mov	r0, r8
 8012284:	2c00      	cmp	r4, #0
 8012286:	d1d9      	bne.n	801223c <rcutils_repl_str+0x2c>
 8012288:	46b8      	mov	r8, r7
 801228a:	4607      	mov	r7, r0
 801228c:	4640      	mov	r0, r8
 801228e:	f7ed ffb1 	bl	80001f4 <strlen>
 8012292:	9b00      	ldr	r3, [sp, #0]
 8012294:	eba8 0303 	sub.w	r3, r8, r3
 8012298:	181d      	adds	r5, r3, r0
 801229a:	9504      	str	r5, [sp, #16]
 801229c:	f1bb 0f00 	cmp.w	fp, #0
 80122a0:	d03d      	beq.n	801231e <rcutils_repl_str+0x10e>
 80122a2:	ee18 0a10 	vmov	r0, s16
 80122a6:	f7ed ffa5 	bl	80001f4 <strlen>
 80122aa:	9b01      	ldr	r3, [sp, #4]
 80122ac:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80122b0:	1ac3      	subs	r3, r0, r3
 80122b2:	fb0b 5303 	mla	r3, fp, r3, r5
 80122b6:	9305      	str	r3, [sp, #20]
 80122b8:	4606      	mov	r6, r0
 80122ba:	1c58      	adds	r0, r3, #1
 80122bc:	f8d9 3000 	ldr.w	r3, [r9]
 80122c0:	4798      	blx	r3
 80122c2:	9003      	str	r0, [sp, #12]
 80122c4:	2800      	cmp	r0, #0
 80122c6:	d04c      	beq.n	8012362 <rcutils_repl_str+0x152>
 80122c8:	683a      	ldr	r2, [r7, #0]
 80122ca:	9900      	ldr	r1, [sp, #0]
 80122cc:	f004 f974 	bl	80165b8 <memcpy>
 80122d0:	9b03      	ldr	r3, [sp, #12]
 80122d2:	683d      	ldr	r5, [r7, #0]
 80122d4:	ee18 8a10 	vmov	r8, s16
 80122d8:	441d      	add	r5, r3
 80122da:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80122de:	9302      	str	r3, [sp, #8]
 80122e0:	46ba      	mov	sl, r7
 80122e2:	4632      	mov	r2, r6
 80122e4:	4641      	mov	r1, r8
 80122e6:	4628      	mov	r0, r5
 80122e8:	f004 f966 	bl	80165b8 <memcpy>
 80122ec:	9b01      	ldr	r3, [sp, #4]
 80122ee:	f85a 2b04 	ldr.w	r2, [sl], #4
 80122f2:	441a      	add	r2, r3
 80122f4:	9b00      	ldr	r3, [sp, #0]
 80122f6:	1899      	adds	r1, r3, r2
 80122f8:	9b02      	ldr	r3, [sp, #8]
 80122fa:	4435      	add	r5, r6
 80122fc:	429c      	cmp	r4, r3
 80122fe:	4628      	mov	r0, r5
 8012300:	d025      	beq.n	801234e <rcutils_repl_str+0x13e>
 8012302:	f8da 3000 	ldr.w	r3, [sl]
 8012306:	3401      	adds	r4, #1
 8012308:	1a9a      	subs	r2, r3, r2
 801230a:	4415      	add	r5, r2
 801230c:	f004 f954 	bl	80165b8 <memcpy>
 8012310:	455c      	cmp	r4, fp
 8012312:	d3e6      	bcc.n	80122e2 <rcutils_repl_str+0xd2>
 8012314:	9a03      	ldr	r2, [sp, #12]
 8012316:	9905      	ldr	r1, [sp, #20]
 8012318:	2300      	movs	r3, #0
 801231a:	5453      	strb	r3, [r2, r1]
 801231c:	e00b      	b.n	8012336 <rcutils_repl_str+0x126>
 801231e:	4628      	mov	r0, r5
 8012320:	f8d9 3000 	ldr.w	r3, [r9]
 8012324:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8012328:	3001      	adds	r0, #1
 801232a:	4798      	blx	r3
 801232c:	9003      	str	r0, [sp, #12]
 801232e:	b110      	cbz	r0, 8012336 <rcutils_repl_str+0x126>
 8012330:	9900      	ldr	r1, [sp, #0]
 8012332:	f004 f939 	bl	80165a8 <strcpy>
 8012336:	4638      	mov	r0, r7
 8012338:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801233c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8012340:	4798      	blx	r3
 8012342:	9803      	ldr	r0, [sp, #12]
 8012344:	b007      	add	sp, #28
 8012346:	ecbd 8b02 	vpop	{d8}
 801234a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801234e:	9b04      	ldr	r3, [sp, #16]
 8012350:	3401      	adds	r4, #1
 8012352:	1a9a      	subs	r2, r3, r2
 8012354:	4415      	add	r5, r2
 8012356:	f004 f92f 	bl	80165b8 <memcpy>
 801235a:	455c      	cmp	r4, fp
 801235c:	d3c1      	bcc.n	80122e2 <rcutils_repl_str+0xd2>
 801235e:	e7d9      	b.n	8012314 <rcutils_repl_str+0x104>
 8012360:	4647      	mov	r7, r8
 8012362:	2300      	movs	r3, #0
 8012364:	9303      	str	r3, [sp, #12]
 8012366:	e7e6      	b.n	8012336 <rcutils_repl_str+0x126>

08012368 <rcutils_snprintf>:
 8012368:	b40c      	push	{r2, r3}
 801236a:	b530      	push	{r4, r5, lr}
 801236c:	b083      	sub	sp, #12
 801236e:	ab06      	add	r3, sp, #24
 8012370:	f853 2b04 	ldr.w	r2, [r3], #4
 8012374:	9301      	str	r3, [sp, #4]
 8012376:	b152      	cbz	r2, 801238e <rcutils_snprintf+0x26>
 8012378:	b138      	cbz	r0, 801238a <rcutils_snprintf+0x22>
 801237a:	b141      	cbz	r1, 801238e <rcutils_snprintf+0x26>
 801237c:	f003 fff0 	bl	8016360 <vsniprintf>
 8012380:	b003      	add	sp, #12
 8012382:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012386:	b002      	add	sp, #8
 8012388:	4770      	bx	lr
 801238a:	2900      	cmp	r1, #0
 801238c:	d0f6      	beq.n	801237c <rcutils_snprintf+0x14>
 801238e:	f004 f8df 	bl	8016550 <__errno>
 8012392:	2316      	movs	r3, #22
 8012394:	6003      	str	r3, [r0, #0]
 8012396:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801239a:	e7f1      	b.n	8012380 <rcutils_snprintf+0x18>

0801239c <rcutils_vsnprintf>:
 801239c:	b570      	push	{r4, r5, r6, lr}
 801239e:	b13a      	cbz	r2, 80123b0 <rcutils_vsnprintf+0x14>
 80123a0:	b120      	cbz	r0, 80123ac <rcutils_vsnprintf+0x10>
 80123a2:	b129      	cbz	r1, 80123b0 <rcutils_vsnprintf+0x14>
 80123a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80123a8:	f003 bfda 	b.w	8016360 <vsniprintf>
 80123ac:	2900      	cmp	r1, #0
 80123ae:	d0f9      	beq.n	80123a4 <rcutils_vsnprintf+0x8>
 80123b0:	f004 f8ce 	bl	8016550 <__errno>
 80123b4:	2316      	movs	r3, #22
 80123b6:	6003      	str	r3, [r0, #0]
 80123b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80123bc:	bd70      	pop	{r4, r5, r6, pc}
 80123be:	bf00      	nop

080123c0 <rcutils_strdup>:
 80123c0:	b084      	sub	sp, #16
 80123c2:	b570      	push	{r4, r5, r6, lr}
 80123c4:	b082      	sub	sp, #8
 80123c6:	ac07      	add	r4, sp, #28
 80123c8:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 80123cc:	4605      	mov	r5, r0
 80123ce:	b1b0      	cbz	r0, 80123fe <rcutils_strdup+0x3e>
 80123d0:	f7ed ff10 	bl	80001f4 <strlen>
 80123d4:	1c42      	adds	r2, r0, #1
 80123d6:	9b07      	ldr	r3, [sp, #28]
 80123d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80123da:	9201      	str	r2, [sp, #4]
 80123dc:	4606      	mov	r6, r0
 80123de:	4610      	mov	r0, r2
 80123e0:	4798      	blx	r3
 80123e2:	4604      	mov	r4, r0
 80123e4:	b128      	cbz	r0, 80123f2 <rcutils_strdup+0x32>
 80123e6:	9a01      	ldr	r2, [sp, #4]
 80123e8:	4629      	mov	r1, r5
 80123ea:	f004 f8e5 	bl	80165b8 <memcpy>
 80123ee:	2300      	movs	r3, #0
 80123f0:	55a3      	strb	r3, [r4, r6]
 80123f2:	4620      	mov	r0, r4
 80123f4:	b002      	add	sp, #8
 80123f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80123fa:	b004      	add	sp, #16
 80123fc:	4770      	bx	lr
 80123fe:	4604      	mov	r4, r0
 8012400:	e7f7      	b.n	80123f2 <rcutils_strdup+0x32>
 8012402:	bf00      	nop

08012404 <rcutils_strndup>:
 8012404:	b082      	sub	sp, #8
 8012406:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012408:	460e      	mov	r6, r1
 801240a:	a906      	add	r1, sp, #24
 801240c:	e881 000c 	stmia.w	r1, {r2, r3}
 8012410:	4605      	mov	r5, r0
 8012412:	b180      	cbz	r0, 8012436 <rcutils_strndup+0x32>
 8012414:	1c77      	adds	r7, r6, #1
 8012416:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012418:	4638      	mov	r0, r7
 801241a:	4790      	blx	r2
 801241c:	4604      	mov	r4, r0
 801241e:	b128      	cbz	r0, 801242c <rcutils_strndup+0x28>
 8012420:	463a      	mov	r2, r7
 8012422:	4629      	mov	r1, r5
 8012424:	f004 f8c8 	bl	80165b8 <memcpy>
 8012428:	2300      	movs	r3, #0
 801242a:	55a3      	strb	r3, [r4, r6]
 801242c:	4620      	mov	r0, r4
 801242e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012432:	b002      	add	sp, #8
 8012434:	4770      	bx	lr
 8012436:	4604      	mov	r4, r0
 8012438:	e7f8      	b.n	801242c <rcutils_strndup+0x28>
 801243a:	bf00      	nop

0801243c <rcutils_system_time_now>:
 801243c:	b310      	cbz	r0, 8012484 <rcutils_system_time_now+0x48>
 801243e:	b570      	push	{r4, r5, r6, lr}
 8012440:	b084      	sub	sp, #16
 8012442:	4669      	mov	r1, sp
 8012444:	4604      	mov	r4, r0
 8012446:	2001      	movs	r0, #1
 8012448:	f7f0 fb8a 	bl	8002b60 <clock_gettime>
 801244c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012450:	2800      	cmp	r0, #0
 8012452:	f171 0300 	sbcs.w	r3, r1, #0
 8012456:	db12      	blt.n	801247e <rcutils_system_time_now+0x42>
 8012458:	9d02      	ldr	r5, [sp, #8]
 801245a:	2d00      	cmp	r5, #0
 801245c:	db0c      	blt.n	8012478 <rcutils_system_time_now+0x3c>
 801245e:	4e0a      	ldr	r6, [pc, #40]	; (8012488 <rcutils_system_time_now+0x4c>)
 8012460:	fba0 2306 	umull	r2, r3, r0, r6
 8012464:	1952      	adds	r2, r2, r5
 8012466:	fb06 3301 	mla	r3, r6, r1, r3
 801246a:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 801246e:	2000      	movs	r0, #0
 8012470:	e9c4 2300 	strd	r2, r3, [r4]
 8012474:	b004      	add	sp, #16
 8012476:	bd70      	pop	{r4, r5, r6, pc}
 8012478:	ea50 0301 	orrs.w	r3, r0, r1
 801247c:	d1ef      	bne.n	801245e <rcutils_system_time_now+0x22>
 801247e:	2002      	movs	r0, #2
 8012480:	b004      	add	sp, #16
 8012482:	bd70      	pop	{r4, r5, r6, pc}
 8012484:	200b      	movs	r0, #11
 8012486:	4770      	bx	lr
 8012488:	3b9aca00 	.word	0x3b9aca00

0801248c <rcutils_steady_time_now>:
 801248c:	b310      	cbz	r0, 80124d4 <rcutils_steady_time_now+0x48>
 801248e:	b570      	push	{r4, r5, r6, lr}
 8012490:	b084      	sub	sp, #16
 8012492:	4669      	mov	r1, sp
 8012494:	4604      	mov	r4, r0
 8012496:	2000      	movs	r0, #0
 8012498:	f7f0 fb62 	bl	8002b60 <clock_gettime>
 801249c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80124a0:	2800      	cmp	r0, #0
 80124a2:	f171 0300 	sbcs.w	r3, r1, #0
 80124a6:	db12      	blt.n	80124ce <rcutils_steady_time_now+0x42>
 80124a8:	9d02      	ldr	r5, [sp, #8]
 80124aa:	2d00      	cmp	r5, #0
 80124ac:	db0c      	blt.n	80124c8 <rcutils_steady_time_now+0x3c>
 80124ae:	4e0a      	ldr	r6, [pc, #40]	; (80124d8 <rcutils_steady_time_now+0x4c>)
 80124b0:	fba0 2306 	umull	r2, r3, r0, r6
 80124b4:	1952      	adds	r2, r2, r5
 80124b6:	fb06 3301 	mla	r3, r6, r1, r3
 80124ba:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 80124be:	2000      	movs	r0, #0
 80124c0:	e9c4 2300 	strd	r2, r3, [r4]
 80124c4:	b004      	add	sp, #16
 80124c6:	bd70      	pop	{r4, r5, r6, pc}
 80124c8:	ea50 0301 	orrs.w	r3, r0, r1
 80124cc:	d1ef      	bne.n	80124ae <rcutils_steady_time_now+0x22>
 80124ce:	2002      	movs	r0, #2
 80124d0:	b004      	add	sp, #16
 80124d2:	bd70      	pop	{r4, r5, r6, pc}
 80124d4:	200b      	movs	r0, #11
 80124d6:	4770      	bx	lr
 80124d8:	3b9aca00 	.word	0x3b9aca00

080124dc <rmw_get_zero_initialized_context>:
 80124dc:	b510      	push	{r4, lr}
 80124de:	2250      	movs	r2, #80	; 0x50
 80124e0:	4604      	mov	r4, r0
 80124e2:	2100      	movs	r1, #0
 80124e4:	f003 ff4a 	bl	801637c <memset>
 80124e8:	4620      	mov	r0, r4
 80124ea:	bd10      	pop	{r4, pc}

080124ec <rmw_get_zero_initialized_init_options>:
 80124ec:	b510      	push	{r4, lr}
 80124ee:	2238      	movs	r2, #56	; 0x38
 80124f0:	4604      	mov	r4, r0
 80124f2:	2100      	movs	r1, #0
 80124f4:	f003 ff42 	bl	801637c <memset>
 80124f8:	f104 0010 	add.w	r0, r4, #16
 80124fc:	f000 f806 	bl	801250c <rmw_get_default_security_options>
 8012500:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012504:	60e3      	str	r3, [r4, #12]
 8012506:	4620      	mov	r0, r4
 8012508:	bd10      	pop	{r4, pc}
 801250a:	bf00      	nop

0801250c <rmw_get_default_security_options>:
 801250c:	2200      	movs	r2, #0
 801250e:	7002      	strb	r2, [r0, #0]
 8012510:	6042      	str	r2, [r0, #4]
 8012512:	4770      	bx	lr

08012514 <rmw_validate_namespace_with_size>:
 8012514:	b340      	cbz	r0, 8012568 <rmw_validate_namespace_with_size+0x54>
 8012516:	b5d0      	push	{r4, r6, r7, lr}
 8012518:	4614      	mov	r4, r2
 801251a:	b0c2      	sub	sp, #264	; 0x108
 801251c:	b332      	cbz	r2, 801256c <rmw_validate_namespace_with_size+0x58>
 801251e:	2901      	cmp	r1, #1
 8012520:	460f      	mov	r7, r1
 8012522:	461e      	mov	r6, r3
 8012524:	d102      	bne.n	801252c <rmw_validate_namespace_with_size+0x18>
 8012526:	7803      	ldrb	r3, [r0, #0]
 8012528:	2b2f      	cmp	r3, #47	; 0x2f
 801252a:	d019      	beq.n	8012560 <rmw_validate_namespace_with_size+0x4c>
 801252c:	aa01      	add	r2, sp, #4
 801252e:	4669      	mov	r1, sp
 8012530:	f7fb fa16 	bl	800d960 <rmw_validate_full_topic_name>
 8012534:	b990      	cbnz	r0, 801255c <rmw_validate_namespace_with_size+0x48>
 8012536:	9b00      	ldr	r3, [sp, #0]
 8012538:	b14b      	cbz	r3, 801254e <rmw_validate_namespace_with_size+0x3a>
 801253a:	2b07      	cmp	r3, #7
 801253c:	d007      	beq.n	801254e <rmw_validate_namespace_with_size+0x3a>
 801253e:	1e5a      	subs	r2, r3, #1
 8012540:	2a05      	cmp	r2, #5
 8012542:	d82b      	bhi.n	801259c <rmw_validate_namespace_with_size+0x88>
 8012544:	e8df f002 	tbb	[pc, r2]
 8012548:	24211e1b 	.word	0x24211e1b
 801254c:	1427      	.short	0x1427
 801254e:	2ff5      	cmp	r7, #245	; 0xf5
 8012550:	d906      	bls.n	8012560 <rmw_validate_namespace_with_size+0x4c>
 8012552:	2307      	movs	r3, #7
 8012554:	6023      	str	r3, [r4, #0]
 8012556:	b10e      	cbz	r6, 801255c <rmw_validate_namespace_with_size+0x48>
 8012558:	23f4      	movs	r3, #244	; 0xf4
 801255a:	6033      	str	r3, [r6, #0]
 801255c:	b042      	add	sp, #264	; 0x108
 801255e:	bdd0      	pop	{r4, r6, r7, pc}
 8012560:	2000      	movs	r0, #0
 8012562:	6020      	str	r0, [r4, #0]
 8012564:	b042      	add	sp, #264	; 0x108
 8012566:	bdd0      	pop	{r4, r6, r7, pc}
 8012568:	200b      	movs	r0, #11
 801256a:	4770      	bx	lr
 801256c:	200b      	movs	r0, #11
 801256e:	e7f5      	b.n	801255c <rmw_validate_namespace_with_size+0x48>
 8012570:	2306      	movs	r3, #6
 8012572:	6023      	str	r3, [r4, #0]
 8012574:	2e00      	cmp	r6, #0
 8012576:	d0f1      	beq.n	801255c <rmw_validate_namespace_with_size+0x48>
 8012578:	9b01      	ldr	r3, [sp, #4]
 801257a:	6033      	str	r3, [r6, #0]
 801257c:	e7ee      	b.n	801255c <rmw_validate_namespace_with_size+0x48>
 801257e:	2301      	movs	r3, #1
 8012580:	6023      	str	r3, [r4, #0]
 8012582:	e7f7      	b.n	8012574 <rmw_validate_namespace_with_size+0x60>
 8012584:	2302      	movs	r3, #2
 8012586:	6023      	str	r3, [r4, #0]
 8012588:	e7f4      	b.n	8012574 <rmw_validate_namespace_with_size+0x60>
 801258a:	2303      	movs	r3, #3
 801258c:	6023      	str	r3, [r4, #0]
 801258e:	e7f1      	b.n	8012574 <rmw_validate_namespace_with_size+0x60>
 8012590:	2304      	movs	r3, #4
 8012592:	6023      	str	r3, [r4, #0]
 8012594:	e7ee      	b.n	8012574 <rmw_validate_namespace_with_size+0x60>
 8012596:	2305      	movs	r3, #5
 8012598:	6023      	str	r3, [r4, #0]
 801259a:	e7eb      	b.n	8012574 <rmw_validate_namespace_with_size+0x60>
 801259c:	4a03      	ldr	r2, [pc, #12]	; (80125ac <rmw_validate_namespace_with_size+0x98>)
 801259e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80125a2:	a802      	add	r0, sp, #8
 80125a4:	f7ff fee0 	bl	8012368 <rcutils_snprintf>
 80125a8:	2001      	movs	r0, #1
 80125aa:	e7d7      	b.n	801255c <rmw_validate_namespace_with_size+0x48>
 80125ac:	080177b8 	.word	0x080177b8

080125b0 <rmw_validate_namespace>:
 80125b0:	b168      	cbz	r0, 80125ce <rmw_validate_namespace+0x1e>
 80125b2:	b570      	push	{r4, r5, r6, lr}
 80125b4:	460d      	mov	r5, r1
 80125b6:	4616      	mov	r6, r2
 80125b8:	4604      	mov	r4, r0
 80125ba:	f7ed fe1b 	bl	80001f4 <strlen>
 80125be:	4633      	mov	r3, r6
 80125c0:	4601      	mov	r1, r0
 80125c2:	462a      	mov	r2, r5
 80125c4:	4620      	mov	r0, r4
 80125c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80125ca:	f7ff bfa3 	b.w	8012514 <rmw_validate_namespace_with_size>
 80125ce:	200b      	movs	r0, #11
 80125d0:	4770      	bx	lr
 80125d2:	bf00      	nop

080125d4 <rmw_namespace_validation_result_string>:
 80125d4:	2807      	cmp	r0, #7
 80125d6:	bf9a      	itte	ls
 80125d8:	4b02      	ldrls	r3, [pc, #8]	; (80125e4 <rmw_namespace_validation_result_string+0x10>)
 80125da:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80125de:	4802      	ldrhi	r0, [pc, #8]	; (80125e8 <rmw_namespace_validation_result_string+0x14>)
 80125e0:	4770      	bx	lr
 80125e2:	bf00      	nop
 80125e4:	080179b0 	.word	0x080179b0
 80125e8:	08017808 	.word	0x08017808

080125ec <rmw_validate_node_name>:
 80125ec:	2800      	cmp	r0, #0
 80125ee:	d03b      	beq.n	8012668 <rmw_validate_node_name+0x7c>
 80125f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125f4:	460f      	mov	r7, r1
 80125f6:	2900      	cmp	r1, #0
 80125f8:	d038      	beq.n	801266c <rmw_validate_node_name+0x80>
 80125fa:	4615      	mov	r5, r2
 80125fc:	4604      	mov	r4, r0
 80125fe:	f7ed fdf9 	bl	80001f4 <strlen>
 8012602:	b1e0      	cbz	r0, 801263e <rmw_validate_node_name+0x52>
 8012604:	1e63      	subs	r3, r4, #1
 8012606:	eb03 0e00 	add.w	lr, r3, r0
 801260a:	f1c4 0c01 	rsb	ip, r4, #1
 801260e:	eb0c 0803 	add.w	r8, ip, r3
 8012612:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 8012616:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
 801261a:	f026 0220 	bic.w	r2, r6, #32
 801261e:	2909      	cmp	r1, #9
 8012620:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
 8012624:	d913      	bls.n	801264e <rmw_validate_node_name+0x62>
 8012626:	2a19      	cmp	r2, #25
 8012628:	d911      	bls.n	801264e <rmw_validate_node_name+0x62>
 801262a:	2e5f      	cmp	r6, #95	; 0x5f
 801262c:	d00f      	beq.n	801264e <rmw_validate_node_name+0x62>
 801262e:	2302      	movs	r3, #2
 8012630:	603b      	str	r3, [r7, #0]
 8012632:	b10d      	cbz	r5, 8012638 <rmw_validate_node_name+0x4c>
 8012634:	f8c5 8000 	str.w	r8, [r5]
 8012638:	2000      	movs	r0, #0
 801263a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801263e:	2301      	movs	r3, #1
 8012640:	603b      	str	r3, [r7, #0]
 8012642:	2d00      	cmp	r5, #0
 8012644:	d0f8      	beq.n	8012638 <rmw_validate_node_name+0x4c>
 8012646:	2000      	movs	r0, #0
 8012648:	6028      	str	r0, [r5, #0]
 801264a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801264e:	4573      	cmp	r3, lr
 8012650:	d1dd      	bne.n	801260e <rmw_validate_node_name+0x22>
 8012652:	7822      	ldrb	r2, [r4, #0]
 8012654:	4b0d      	ldr	r3, [pc, #52]	; (801268c <rmw_validate_node_name+0xa0>)
 8012656:	5cd3      	ldrb	r3, [r2, r3]
 8012658:	f013 0304 	ands.w	r3, r3, #4
 801265c:	d110      	bne.n	8012680 <rmw_validate_node_name+0x94>
 801265e:	28ff      	cmp	r0, #255	; 0xff
 8012660:	d806      	bhi.n	8012670 <rmw_validate_node_name+0x84>
 8012662:	603b      	str	r3, [r7, #0]
 8012664:	4618      	mov	r0, r3
 8012666:	e7e8      	b.n	801263a <rmw_validate_node_name+0x4e>
 8012668:	200b      	movs	r0, #11
 801266a:	4770      	bx	lr
 801266c:	200b      	movs	r0, #11
 801266e:	e7e4      	b.n	801263a <rmw_validate_node_name+0x4e>
 8012670:	2204      	movs	r2, #4
 8012672:	603a      	str	r2, [r7, #0]
 8012674:	2d00      	cmp	r5, #0
 8012676:	d0df      	beq.n	8012638 <rmw_validate_node_name+0x4c>
 8012678:	22fe      	movs	r2, #254	; 0xfe
 801267a:	4618      	mov	r0, r3
 801267c:	602a      	str	r2, [r5, #0]
 801267e:	e7dc      	b.n	801263a <rmw_validate_node_name+0x4e>
 8012680:	2303      	movs	r3, #3
 8012682:	603b      	str	r3, [r7, #0]
 8012684:	2d00      	cmp	r5, #0
 8012686:	d1de      	bne.n	8012646 <rmw_validate_node_name+0x5a>
 8012688:	e7d6      	b.n	8012638 <rmw_validate_node_name+0x4c>
 801268a:	bf00      	nop
 801268c:	08017d74 	.word	0x08017d74

08012690 <rmw_node_name_validation_result_string>:
 8012690:	2804      	cmp	r0, #4
 8012692:	bf9a      	itte	ls
 8012694:	4b02      	ldrls	r3, [pc, #8]	; (80126a0 <rmw_node_name_validation_result_string+0x10>)
 8012696:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801269a:	4802      	ldrhi	r0, [pc, #8]	; (80126a4 <rmw_node_name_validation_result_string+0x14>)
 801269c:	4770      	bx	lr
 801269e:	bf00      	nop
 80126a0:	08017abc 	.word	0x08017abc
 80126a4:	080179d0 	.word	0x080179d0

080126a8 <get_memory>:
 80126a8:	4603      	mov	r3, r0
 80126aa:	6840      	ldr	r0, [r0, #4]
 80126ac:	b158      	cbz	r0, 80126c6 <get_memory+0x1e>
 80126ae:	6882      	ldr	r2, [r0, #8]
 80126b0:	605a      	str	r2, [r3, #4]
 80126b2:	b10a      	cbz	r2, 80126b8 <get_memory+0x10>
 80126b4:	2100      	movs	r1, #0
 80126b6:	6051      	str	r1, [r2, #4]
 80126b8:	681a      	ldr	r2, [r3, #0]
 80126ba:	6082      	str	r2, [r0, #8]
 80126bc:	b102      	cbz	r2, 80126c0 <get_memory+0x18>
 80126be:	6050      	str	r0, [r2, #4]
 80126c0:	2200      	movs	r2, #0
 80126c2:	6042      	str	r2, [r0, #4]
 80126c4:	6018      	str	r0, [r3, #0]
 80126c6:	4770      	bx	lr

080126c8 <put_memory>:
 80126c8:	684b      	ldr	r3, [r1, #4]
 80126ca:	b10b      	cbz	r3, 80126d0 <put_memory+0x8>
 80126cc:	688a      	ldr	r2, [r1, #8]
 80126ce:	609a      	str	r2, [r3, #8]
 80126d0:	688a      	ldr	r2, [r1, #8]
 80126d2:	b102      	cbz	r2, 80126d6 <put_memory+0xe>
 80126d4:	6053      	str	r3, [r2, #4]
 80126d6:	6803      	ldr	r3, [r0, #0]
 80126d8:	428b      	cmp	r3, r1
 80126da:	6843      	ldr	r3, [r0, #4]
 80126dc:	bf08      	it	eq
 80126de:	6002      	streq	r2, [r0, #0]
 80126e0:	608b      	str	r3, [r1, #8]
 80126e2:	b103      	cbz	r3, 80126e6 <put_memory+0x1e>
 80126e4:	6059      	str	r1, [r3, #4]
 80126e6:	2300      	movs	r3, #0
 80126e8:	604b      	str	r3, [r1, #4]
 80126ea:	6041      	str	r1, [r0, #4]
 80126ec:	4770      	bx	lr
 80126ee:	bf00      	nop

080126f0 <rmw_get_implementation_identifier>:
 80126f0:	4b01      	ldr	r3, [pc, #4]	; (80126f8 <rmw_get_implementation_identifier+0x8>)
 80126f2:	6818      	ldr	r0, [r3, #0]
 80126f4:	4770      	bx	lr
 80126f6:	bf00      	nop
 80126f8:	08017ae8 	.word	0x08017ae8

080126fc <rmw_init_options_init>:
 80126fc:	b084      	sub	sp, #16
 80126fe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012702:	ad09      	add	r5, sp, #36	; 0x24
 8012704:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8012708:	b130      	cbz	r0, 8012718 <rmw_init_options_init+0x1c>
 801270a:	4604      	mov	r4, r0
 801270c:	4628      	mov	r0, r5
 801270e:	f7fa ffb9 	bl	800d684 <rcutils_allocator_is_valid>
 8012712:	b108      	cbz	r0, 8012718 <rmw_init_options_init+0x1c>
 8012714:	68a3      	ldr	r3, [r4, #8]
 8012716:	b123      	cbz	r3, 8012722 <rmw_init_options_init+0x26>
 8012718:	200b      	movs	r0, #11
 801271a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801271e:	b004      	add	sp, #16
 8012720:	4770      	bx	lr
 8012722:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012724:	4f1c      	ldr	r7, [pc, #112]	; (8012798 <rmw_init_options_init+0x9c>)
 8012726:	682e      	ldr	r6, [r5, #0]
 8012728:	683d      	ldr	r5, [r7, #0]
 801272a:	60a5      	str	r5, [r4, #8]
 801272c:	f04f 0800 	mov.w	r8, #0
 8012730:	f04f 0900 	mov.w	r9, #0
 8012734:	f104 0520 	add.w	r5, r4, #32
 8012738:	e9c4 8900 	strd	r8, r9, [r4]
 801273c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801273e:	4b17      	ldr	r3, [pc, #92]	; (801279c <rmw_init_options_init+0xa0>)
 8012740:	4817      	ldr	r0, [pc, #92]	; (80127a0 <rmw_init_options_init+0xa4>)
 8012742:	602e      	str	r6, [r5, #0]
 8012744:	4917      	ldr	r1, [pc, #92]	; (80127a4 <rmw_init_options_init+0xa8>)
 8012746:	61e3      	str	r3, [r4, #28]
 8012748:	2203      	movs	r2, #3
 801274a:	f7fb fc13 	bl	800df74 <rmw_uxrce_init_init_options_impl_memory>
 801274e:	4814      	ldr	r0, [pc, #80]	; (80127a0 <rmw_init_options_init+0xa4>)
 8012750:	f7ff ffaa 	bl	80126a8 <get_memory>
 8012754:	b1e8      	cbz	r0, 8012792 <rmw_init_options_init+0x96>
 8012756:	4a14      	ldr	r2, [pc, #80]	; (80127a8 <rmw_init_options_init+0xac>)
 8012758:	68c3      	ldr	r3, [r0, #12]
 801275a:	6851      	ldr	r1, [r2, #4]
 801275c:	7810      	ldrb	r0, [r2, #0]
 801275e:	6363      	str	r3, [r4, #52]	; 0x34
 8012760:	7418      	strb	r0, [r3, #16]
 8012762:	6159      	str	r1, [r3, #20]
 8012764:	e9d2 5002 	ldrd	r5, r0, [r2, #8]
 8012768:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 801276c:	e9c3 5006 	strd	r5, r0, [r3, #24]
 8012770:	e9c3 1208 	strd	r1, r2, [r3, #32]
 8012774:	f7fd fac6 	bl	800fd04 <uxr_nanos>
 8012778:	f003 fb4e 	bl	8015e18 <srand>
 801277c:	f003 fb7a 	bl	8015e74 <rand>
 8012780:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012782:	6298      	str	r0, [r3, #40]	; 0x28
 8012784:	2800      	cmp	r0, #0
 8012786:	d0f9      	beq.n	801277c <rmw_init_options_init+0x80>
 8012788:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801278c:	2000      	movs	r0, #0
 801278e:	b004      	add	sp, #16
 8012790:	4770      	bx	lr
 8012792:	2001      	movs	r0, #1
 8012794:	e7c1      	b.n	801271a <rmw_init_options_init+0x1e>
 8012796:	bf00      	nop
 8012798:	08017ae8 	.word	0x08017ae8
 801279c:	08017690 	.word	0x08017690
 80127a0:	2000c92c 	.word	0x2000c92c
 80127a4:	2000c580 	.word	0x2000c580
 80127a8:	20009610 	.word	0x20009610

080127ac <rmw_init_options_copy>:
 80127ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127ae:	b158      	cbz	r0, 80127c8 <rmw_init_options_copy+0x1c>
 80127b0:	460e      	mov	r6, r1
 80127b2:	b149      	cbz	r1, 80127c8 <rmw_init_options_copy+0x1c>
 80127b4:	4604      	mov	r4, r0
 80127b6:	6880      	ldr	r0, [r0, #8]
 80127b8:	b120      	cbz	r0, 80127c4 <rmw_init_options_copy+0x18>
 80127ba:	4b1b      	ldr	r3, [pc, #108]	; (8012828 <rmw_init_options_copy+0x7c>)
 80127bc:	6819      	ldr	r1, [r3, #0]
 80127be:	f7ed fd0f 	bl	80001e0 <strcmp>
 80127c2:	bb60      	cbnz	r0, 801281e <rmw_init_options_copy+0x72>
 80127c4:	68b3      	ldr	r3, [r6, #8]
 80127c6:	b113      	cbz	r3, 80127ce <rmw_init_options_copy+0x22>
 80127c8:	230b      	movs	r3, #11
 80127ca:	4618      	mov	r0, r3
 80127cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80127ce:	4623      	mov	r3, r4
 80127d0:	4632      	mov	r2, r6
 80127d2:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 80127d6:	681d      	ldr	r5, [r3, #0]
 80127d8:	6858      	ldr	r0, [r3, #4]
 80127da:	6899      	ldr	r1, [r3, #8]
 80127dc:	68df      	ldr	r7, [r3, #12]
 80127de:	60d7      	str	r7, [r2, #12]
 80127e0:	3310      	adds	r3, #16
 80127e2:	4563      	cmp	r3, ip
 80127e4:	6015      	str	r5, [r2, #0]
 80127e6:	6050      	str	r0, [r2, #4]
 80127e8:	6091      	str	r1, [r2, #8]
 80127ea:	f102 0210 	add.w	r2, r2, #16
 80127ee:	d1f2      	bne.n	80127d6 <rmw_init_options_copy+0x2a>
 80127f0:	6819      	ldr	r1, [r3, #0]
 80127f2:	685b      	ldr	r3, [r3, #4]
 80127f4:	480d      	ldr	r0, [pc, #52]	; (801282c <rmw_init_options_copy+0x80>)
 80127f6:	6053      	str	r3, [r2, #4]
 80127f8:	6011      	str	r1, [r2, #0]
 80127fa:	f7ff ff55 	bl	80126a8 <get_memory>
 80127fe:	b188      	cbz	r0, 8012824 <rmw_init_options_copy+0x78>
 8012800:	68c5      	ldr	r5, [r0, #12]
 8012802:	6375      	str	r5, [r6, #52]	; 0x34
 8012804:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8012806:	3610      	adds	r6, #16
 8012808:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801280a:	f105 0410 	add.w	r4, r5, #16
 801280e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012810:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8012814:	2300      	movs	r3, #0
 8012816:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801281a:	4618      	mov	r0, r3
 801281c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801281e:	230c      	movs	r3, #12
 8012820:	4618      	mov	r0, r3
 8012822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012824:	2301      	movs	r3, #1
 8012826:	e7d0      	b.n	80127ca <rmw_init_options_copy+0x1e>
 8012828:	08017ae8 	.word	0x08017ae8
 801282c:	2000c92c 	.word	0x2000c92c

08012830 <rmw_init_options_fini>:
 8012830:	2800      	cmp	r0, #0
 8012832:	d036      	beq.n	80128a2 <rmw_init_options_fini+0x72>
 8012834:	b530      	push	{r4, r5, lr}
 8012836:	4604      	mov	r4, r0
 8012838:	b08f      	sub	sp, #60	; 0x3c
 801283a:	3020      	adds	r0, #32
 801283c:	f7fa ff22 	bl	800d684 <rcutils_allocator_is_valid>
 8012840:	b328      	cbz	r0, 801288e <rmw_init_options_fini+0x5e>
 8012842:	68a0      	ldr	r0, [r4, #8]
 8012844:	b120      	cbz	r0, 8012850 <rmw_init_options_fini+0x20>
 8012846:	4b18      	ldr	r3, [pc, #96]	; (80128a8 <rmw_init_options_fini+0x78>)
 8012848:	6819      	ldr	r1, [r3, #0]
 801284a:	f7ed fcc9 	bl	80001e0 <strcmp>
 801284e:	bb30      	cbnz	r0, 801289e <rmw_init_options_fini+0x6e>
 8012850:	4b16      	ldr	r3, [pc, #88]	; (80128ac <rmw_init_options_fini+0x7c>)
 8012852:	6819      	ldr	r1, [r3, #0]
 8012854:	b1f9      	cbz	r1, 8012896 <rmw_init_options_fini+0x66>
 8012856:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8012858:	e001      	b.n	801285e <rmw_init_options_fini+0x2e>
 801285a:	6889      	ldr	r1, [r1, #8]
 801285c:	b1d9      	cbz	r1, 8012896 <rmw_init_options_fini+0x66>
 801285e:	68cb      	ldr	r3, [r1, #12]
 8012860:	429a      	cmp	r2, r3
 8012862:	d1fa      	bne.n	801285a <rmw_init_options_fini+0x2a>
 8012864:	4811      	ldr	r0, [pc, #68]	; (80128ac <rmw_init_options_fini+0x7c>)
 8012866:	f7ff ff2f 	bl	80126c8 <put_memory>
 801286a:	466d      	mov	r5, sp
 801286c:	4668      	mov	r0, sp
 801286e:	f7ff fe3d 	bl	80124ec <rmw_get_zero_initialized_init_options>
 8012872:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012874:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012876:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012878:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801287a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801287c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801287e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012882:	e884 0003 	stmia.w	r4, {r0, r1}
 8012886:	2300      	movs	r3, #0
 8012888:	4618      	mov	r0, r3
 801288a:	b00f      	add	sp, #60	; 0x3c
 801288c:	bd30      	pop	{r4, r5, pc}
 801288e:	230b      	movs	r3, #11
 8012890:	4618      	mov	r0, r3
 8012892:	b00f      	add	sp, #60	; 0x3c
 8012894:	bd30      	pop	{r4, r5, pc}
 8012896:	2301      	movs	r3, #1
 8012898:	4618      	mov	r0, r3
 801289a:	b00f      	add	sp, #60	; 0x3c
 801289c:	bd30      	pop	{r4, r5, pc}
 801289e:	230c      	movs	r3, #12
 80128a0:	e7f2      	b.n	8012888 <rmw_init_options_fini+0x58>
 80128a2:	230b      	movs	r3, #11
 80128a4:	4618      	mov	r0, r3
 80128a6:	4770      	bx	lr
 80128a8:	08017ae8 	.word	0x08017ae8
 80128ac:	2000c92c 	.word	0x2000c92c

080128b0 <rmw_init>:
 80128b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80128b4:	b082      	sub	sp, #8
 80128b6:	2800      	cmp	r0, #0
 80128b8:	f000 80d6 	beq.w	8012a68 <rmw_init+0x1b8>
 80128bc:	460e      	mov	r6, r1
 80128be:	2900      	cmp	r1, #0
 80128c0:	f000 80d2 	beq.w	8012a68 <rmw_init+0x1b8>
 80128c4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80128c6:	4605      	mov	r5, r0
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	f000 80cd 	beq.w	8012a68 <rmw_init+0x1b8>
 80128ce:	4b79      	ldr	r3, [pc, #484]	; (8012ab4 <rmw_init+0x204>)
 80128d0:	6880      	ldr	r0, [r0, #8]
 80128d2:	f8d3 9000 	ldr.w	r9, [r3]
 80128d6:	b128      	cbz	r0, 80128e4 <rmw_init+0x34>
 80128d8:	4649      	mov	r1, r9
 80128da:	f7ed fc81 	bl	80001e0 <strcmp>
 80128de:	2800      	cmp	r0, #0
 80128e0:	f040 80cc 	bne.w	8012a7c <rmw_init+0x1cc>
 80128e4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80128e8:	68eb      	ldr	r3, [r5, #12]
 80128ea:	61f3      	str	r3, [r6, #28]
 80128ec:	e9c6 0100 	strd	r0, r1, [r6]
 80128f0:	2201      	movs	r2, #1
 80128f2:	4971      	ldr	r1, [pc, #452]	; (8012ab8 <rmw_init+0x208>)
 80128f4:	4871      	ldr	r0, [pc, #452]	; (8012abc <rmw_init+0x20c>)
 80128f6:	f8c6 9008 	str.w	r9, [r6, #8]
 80128fa:	f7fb fae3 	bl	800dec4 <rmw_uxrce_init_session_memory>
 80128fe:	4870      	ldr	r0, [pc, #448]	; (8012ac0 <rmw_init+0x210>)
 8012900:	4970      	ldr	r1, [pc, #448]	; (8012ac4 <rmw_init+0x214>)
 8012902:	2204      	movs	r2, #4
 8012904:	f7fb fb18 	bl	800df38 <rmw_uxrce_init_static_input_buffer_memory>
 8012908:	486c      	ldr	r0, [pc, #432]	; (8012abc <rmw_init+0x20c>)
 801290a:	f7ff fecd 	bl	80126a8 <get_memory>
 801290e:	2800      	cmp	r0, #0
 8012910:	f000 80af 	beq.w	8012a72 <rmw_init+0x1c2>
 8012914:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 8012916:	68c4      	ldr	r4, [r0, #12]
 8012918:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801291a:	7c39      	ldrb	r1, [r7, #16]
 801291c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8012920:	9001      	str	r0, [sp, #4]
 8012922:	6a38      	ldr	r0, [r7, #32]
 8012924:	9000      	str	r0, [sp, #0]
 8012926:	f104 0a10 	add.w	sl, r4, #16
 801292a:	4650      	mov	r0, sl
 801292c:	f001 fc38 	bl	80141a0 <uxr_set_custom_transport_callbacks>
 8012930:	f241 5294 	movw	r2, #5524	; 0x1594
 8012934:	f241 5398 	movw	r3, #5528	; 0x1598
 8012938:	f04f 0800 	mov.w	r8, #0
 801293c:	f241 509c 	movw	r0, #5532	; 0x159c
 8012940:	f504 51ad 	add.w	r1, r4, #5536	; 0x15a0
 8012944:	f844 8002 	str.w	r8, [r4, r2]
 8012948:	f844 8003 	str.w	r8, [r4, r3]
 801294c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012950:	f504 735e 	add.w	r3, r4, #888	; 0x378
 8012954:	f844 8000 	str.w	r8, [r4, r0]
 8012958:	e9c4 33e1 	strd	r3, r3, [r4, #900]	; 0x384
 801295c:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 8012960:	4859      	ldr	r0, [pc, #356]	; (8012ac8 <rmw_init+0x218>)
 8012962:	f8c1 8000 	str.w	r8, [r1]
 8012966:	2201      	movs	r2, #1
 8012968:	e9c4 98da 	strd	r9, r8, [r4, #872]	; 0x368
 801296c:	4957      	ldr	r1, [pc, #348]	; (8012acc <rmw_init+0x21c>)
 801296e:	64b4      	str	r4, [r6, #72]	; 0x48
 8012970:	f7fb fa8e 	bl	800de90 <rmw_uxrce_init_node_memory>
 8012974:	4956      	ldr	r1, [pc, #344]	; (8012ad0 <rmw_init+0x220>)
 8012976:	4857      	ldr	r0, [pc, #348]	; (8012ad4 <rmw_init+0x224>)
 8012978:	2205      	movs	r2, #5
 801297a:	f7fb fa6f 	bl	800de5c <rmw_uxrce_init_subscription_memory>
 801297e:	4956      	ldr	r1, [pc, #344]	; (8012ad8 <rmw_init+0x228>)
 8012980:	4856      	ldr	r0, [pc, #344]	; (8012adc <rmw_init+0x22c>)
 8012982:	220a      	movs	r2, #10
 8012984:	f7fb fa50 	bl	800de28 <rmw_uxrce_init_publisher_memory>
 8012988:	4955      	ldr	r1, [pc, #340]	; (8012ae0 <rmw_init+0x230>)
 801298a:	4856      	ldr	r0, [pc, #344]	; (8012ae4 <rmw_init+0x234>)
 801298c:	2201      	movs	r2, #1
 801298e:	f7fb fa17 	bl	800ddc0 <rmw_uxrce_init_service_memory>
 8012992:	4955      	ldr	r1, [pc, #340]	; (8012ae8 <rmw_init+0x238>)
 8012994:	4855      	ldr	r0, [pc, #340]	; (8012aec <rmw_init+0x23c>)
 8012996:	2201      	movs	r2, #1
 8012998:	f7fb fa2c 	bl	800ddf4 <rmw_uxrce_init_client_memory>
 801299c:	4954      	ldr	r1, [pc, #336]	; (8012af0 <rmw_init+0x240>)
 801299e:	4855      	ldr	r0, [pc, #340]	; (8012af4 <rmw_init+0x244>)
 80129a0:	220f      	movs	r2, #15
 80129a2:	f7fb faad 	bl	800df00 <rmw_uxrce_init_topic_memory>
 80129a6:	4954      	ldr	r1, [pc, #336]	; (8012af8 <rmw_init+0x248>)
 80129a8:	4854      	ldr	r0, [pc, #336]	; (8012afc <rmw_init+0x24c>)
 80129aa:	2203      	movs	r2, #3
 80129ac:	f7fb fae2 	bl	800df74 <rmw_uxrce_init_init_options_impl_memory>
 80129b0:	4953      	ldr	r1, [pc, #332]	; (8012b00 <rmw_init+0x250>)
 80129b2:	4854      	ldr	r0, [pc, #336]	; (8012b04 <rmw_init+0x254>)
 80129b4:	2204      	movs	r2, #4
 80129b6:	f7fb faf7 	bl	800dfa8 <rmw_uxrce_init_wait_set_memory>
 80129ba:	4953      	ldr	r1, [pc, #332]	; (8012b08 <rmw_init+0x258>)
 80129bc:	4853      	ldr	r0, [pc, #332]	; (8012b0c <rmw_init+0x25c>)
 80129be:	2204      	movs	r2, #4
 80129c0:	f7fb fb0e 	bl	800dfe0 <rmw_uxrce_init_guard_condition_memory>
 80129c4:	6b69      	ldr	r1, [r5, #52]	; 0x34
 80129c6:	6cb0      	ldr	r0, [r6, #72]	; 0x48
 80129c8:	4642      	mov	r2, r8
 80129ca:	f000 fb13 	bl	8012ff4 <rmw_uxrce_transport_init>
 80129ce:	4607      	mov	r7, r0
 80129d0:	2800      	cmp	r0, #0
 80129d2:	d158      	bne.n	8012a86 <rmw_init+0x1d6>
 80129d4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80129d6:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 80129da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80129dc:	4628      	mov	r0, r5
 80129de:	f504 7122 	add.w	r1, r4, #648	; 0x288
 80129e2:	f7fc f815 	bl	800ea10 <uxr_init_session>
 80129e6:	494a      	ldr	r1, [pc, #296]	; (8012b10 <rmw_init+0x260>)
 80129e8:	4622      	mov	r2, r4
 80129ea:	4628      	mov	r0, r5
 80129ec:	f7fc f832 	bl	800ea54 <uxr_set_topic_callback>
 80129f0:	4948      	ldr	r1, [pc, #288]	; (8012b14 <rmw_init+0x264>)
 80129f2:	463a      	mov	r2, r7
 80129f4:	4628      	mov	r0, r5
 80129f6:	f7fc f829 	bl	800ea4c <uxr_set_status_callback>
 80129fa:	4947      	ldr	r1, [pc, #284]	; (8012b18 <rmw_init+0x268>)
 80129fc:	463a      	mov	r2, r7
 80129fe:	4628      	mov	r0, r5
 8012a00:	f7fc f82c 	bl	800ea5c <uxr_set_request_callback>
 8012a04:	4945      	ldr	r1, [pc, #276]	; (8012b1c <rmw_init+0x26c>)
 8012a06:	463a      	mov	r2, r7
 8012a08:	4628      	mov	r0, r5
 8012a0a:	f7fc f82b 	bl	800ea64 <uxr_set_reply_callback>
 8012a0e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8012a12:	2304      	movs	r3, #4
 8012a14:	0092      	lsls	r2, r2, #2
 8012a16:	f504 7165 	add.w	r1, r4, #916	; 0x394
 8012a1a:	4628      	mov	r0, r5
 8012a1c:	f7fc f862 	bl	800eae4 <uxr_create_input_reliable_stream>
 8012a20:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8012a24:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 8012a28:	0092      	lsls	r2, r2, #2
 8012a2a:	2304      	movs	r3, #4
 8012a2c:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 8012a30:	4628      	mov	r0, r5
 8012a32:	f7fc f82d 	bl	800ea90 <uxr_create_output_reliable_stream>
 8012a36:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 8012a3a:	4628      	mov	r0, r5
 8012a3c:	f7fc f84c 	bl	800ead8 <uxr_create_input_best_effort_stream>
 8012a40:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 8012a44:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 8012a48:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8012a4c:	4628      	mov	r0, r5
 8012a4e:	3114      	adds	r1, #20
 8012a50:	f7fc f80c 	bl	800ea6c <uxr_create_output_best_effort_stream>
 8012a54:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 8012a58:	4628      	mov	r0, r5
 8012a5a:	f7fc fc63 	bl	800f324 <uxr_create_session>
 8012a5e:	b1f8      	cbz	r0, 8012aa0 <rmw_init+0x1f0>
 8012a60:	4638      	mov	r0, r7
 8012a62:	b002      	add	sp, #8
 8012a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a68:	270b      	movs	r7, #11
 8012a6a:	4638      	mov	r0, r7
 8012a6c:	b002      	add	sp, #8
 8012a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a72:	2701      	movs	r7, #1
 8012a74:	4638      	mov	r0, r7
 8012a76:	b002      	add	sp, #8
 8012a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a7c:	270c      	movs	r7, #12
 8012a7e:	4638      	mov	r0, r7
 8012a80:	b002      	add	sp, #8
 8012a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a86:	4650      	mov	r0, sl
 8012a88:	f001 fbca 	bl	8014220 <uxr_close_custom_transport>
 8012a8c:	480b      	ldr	r0, [pc, #44]	; (8012abc <rmw_init+0x20c>)
 8012a8e:	4621      	mov	r1, r4
 8012a90:	f7ff fe1a 	bl	80126c8 <put_memory>
 8012a94:	4638      	mov	r0, r7
 8012a96:	f8c6 8048 	str.w	r8, [r6, #72]	; 0x48
 8012a9a:	b002      	add	sp, #8
 8012a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012aa0:	4650      	mov	r0, sl
 8012aa2:	f001 fbbd 	bl	8014220 <uxr_close_custom_transport>
 8012aa6:	4805      	ldr	r0, [pc, #20]	; (8012abc <rmw_init+0x20c>)
 8012aa8:	4621      	mov	r1, r4
 8012aaa:	f7ff fe0d 	bl	80126c8 <put_memory>
 8012aae:	64b7      	str	r7, [r6, #72]	; 0x48
 8012ab0:	2701      	movs	r7, #1
 8012ab2:	e7d5      	b.n	8012a60 <rmw_init+0x1b0>
 8012ab4:	08017ae8 	.word	0x08017ae8
 8012ab8:	2000ca08 	.word	0x2000ca08
 8012abc:	2000c7d8 	.word	0x2000c7d8
 8012ac0:	20009630 	.word	0x20009630
 8012ac4:	2000a410 	.word	0x2000a410
 8012ac8:	2000c604 	.word	0x2000c604
 8012acc:	2000c7e8 	.word	0x2000c7e8
 8012ad0:	20009f38 	.word	0x20009f38
 8012ad4:	2000c89c 	.word	0x2000c89c
 8012ad8:	20009650 	.word	0x20009650
 8012adc:	20009640 	.word	0x20009640
 8012ae0:	2000c940 	.word	0x2000c940
 8012ae4:	2000c88c 	.word	0x2000c88c
 8012ae8:	2000a348 	.word	0x2000a348
 8012aec:	20009ec0 	.word	0x20009ec0
 8012af0:	2000c614 	.word	0x2000c614
 8012af4:	2000c7c8 	.word	0x2000c7c8
 8012af8:	2000c580 	.word	0x2000c580
 8012afc:	2000c92c 	.word	0x2000c92c
 8012b00:	2000c510 	.word	0x2000c510
 8012b04:	2000dfb0 	.word	0x2000dfb0
 8012b08:	2000c8ac 	.word	0x2000c8ac
 8012b0c:	2000c7b8 	.word	0x2000c7b8
 8012b10:	0801593d 	.word	0x0801593d
 8012b14:	08015935 	.word	0x08015935
 8012b18:	080159d1 	.word	0x080159d1
 8012b1c:	08015a69 	.word	0x08015a69

08012b20 <rmw_context_fini>:
 8012b20:	4b17      	ldr	r3, [pc, #92]	; (8012b80 <rmw_context_fini+0x60>)
 8012b22:	b570      	push	{r4, r5, r6, lr}
 8012b24:	681c      	ldr	r4, [r3, #0]
 8012b26:	4605      	mov	r5, r0
 8012b28:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8012b2a:	b33c      	cbz	r4, 8012b7c <rmw_context_fini+0x5c>
 8012b2c:	2600      	movs	r6, #0
 8012b2e:	e9d4 4302 	ldrd	r4, r3, [r4, #8]
 8012b32:	691a      	ldr	r2, [r3, #16]
 8012b34:	4282      	cmp	r2, r0
 8012b36:	d018      	beq.n	8012b6a <rmw_context_fini+0x4a>
 8012b38:	2c00      	cmp	r4, #0
 8012b3a:	d1f8      	bne.n	8012b2e <rmw_context_fini+0xe>
 8012b3c:	b188      	cbz	r0, 8012b62 <rmw_context_fini+0x42>
 8012b3e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012b42:	789b      	ldrb	r3, [r3, #2]
 8012b44:	2b01      	cmp	r3, #1
 8012b46:	bf14      	ite	ne
 8012b48:	210a      	movne	r1, #10
 8012b4a:	2100      	moveq	r1, #0
 8012b4c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012b50:	f7fc fdaa 	bl	800f6a8 <uxr_delete_session_retries>
 8012b54:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8012b56:	f7fb fa5d 	bl	800e014 <rmw_uxrce_fini_session_memory>
 8012b5a:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8012b5c:	3010      	adds	r0, #16
 8012b5e:	f001 fb5f 	bl	8014220 <uxr_close_custom_transport>
 8012b62:	2300      	movs	r3, #0
 8012b64:	4630      	mov	r0, r6
 8012b66:	64ab      	str	r3, [r5, #72]	; 0x48
 8012b68:	bd70      	pop	{r4, r5, r6, pc}
 8012b6a:	f103 0018 	add.w	r0, r3, #24
 8012b6e:	f000 f91f 	bl	8012db0 <rmw_destroy_node>
 8012b72:	4606      	mov	r6, r0
 8012b74:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8012b76:	2c00      	cmp	r4, #0
 8012b78:	d1d9      	bne.n	8012b2e <rmw_context_fini+0xe>
 8012b7a:	e7df      	b.n	8012b3c <rmw_context_fini+0x1c>
 8012b7c:	4626      	mov	r6, r4
 8012b7e:	e7dd      	b.n	8012b3c <rmw_context_fini+0x1c>
 8012b80:	2000c604 	.word	0x2000c604

08012b84 <create_topic>:
 8012b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b88:	4605      	mov	r5, r0
 8012b8a:	b084      	sub	sp, #16
 8012b8c:	482b      	ldr	r0, [pc, #172]	; (8012c3c <create_topic+0xb8>)
 8012b8e:	460f      	mov	r7, r1
 8012b90:	4616      	mov	r6, r2
 8012b92:	f7ff fd89 	bl	80126a8 <get_memory>
 8012b96:	4604      	mov	r4, r0
 8012b98:	2800      	cmp	r0, #0
 8012b9a:	d036      	beq.n	8012c0a <create_topic+0x86>
 8012b9c:	692a      	ldr	r2, [r5, #16]
 8012b9e:	68c4      	ldr	r4, [r0, #12]
 8012ba0:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8012c44 <create_topic+0xc0>
 8012ba4:	61a5      	str	r5, [r4, #24]
 8012ba6:	f241 5396 	movw	r3, #5526	; 0x1596
 8012baa:	6166      	str	r6, [r4, #20]
 8012bac:	5ad0      	ldrh	r0, [r2, r3]
 8012bae:	1c41      	adds	r1, r0, #1
 8012bb0:	52d1      	strh	r1, [r2, r3]
 8012bb2:	2102      	movs	r1, #2
 8012bb4:	f7fb fe70 	bl	800e898 <uxr_object_id>
 8012bb8:	4641      	mov	r1, r8
 8012bba:	6120      	str	r0, [r4, #16]
 8012bbc:	223c      	movs	r2, #60	; 0x3c
 8012bbe:	4638      	mov	r0, r7
 8012bc0:	f7fb fb5c 	bl	800e27c <generate_topic_name>
 8012bc4:	4607      	mov	r7, r0
 8012bc6:	b320      	cbz	r0, 8012c12 <create_topic+0x8e>
 8012bc8:	4f1d      	ldr	r7, [pc, #116]	; (8012c40 <create_topic+0xbc>)
 8012bca:	4630      	mov	r0, r6
 8012bcc:	4639      	mov	r1, r7
 8012bce:	2264      	movs	r2, #100	; 0x64
 8012bd0:	f7fb fb24 	bl	800e21c <generate_type_name>
 8012bd4:	4606      	mov	r6, r0
 8012bd6:	b320      	cbz	r0, 8012c22 <create_topic+0x9e>
 8012bd8:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
 8012bdc:	2106      	movs	r1, #6
 8012bde:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8012be2:	9701      	str	r7, [sp, #4]
 8012be4:	f8cd 8000 	str.w	r8, [sp]
 8012be8:	9102      	str	r1, [sp, #8]
 8012bea:	6811      	ldr	r1, [r2, #0]
 8012bec:	6922      	ldr	r2, [r4, #16]
 8012bee:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012bf2:	f7fb fd77 	bl	800e6e4 <uxr_buffer_create_topic_bin>
 8012bf6:	4602      	mov	r2, r0
 8012bf8:	6928      	ldr	r0, [r5, #16]
 8012bfa:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8012bfe:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8012c02:	f7fb fad5 	bl	800e1b0 <run_xrce_session>
 8012c06:	4605      	mov	r5, r0
 8012c08:	b198      	cbz	r0, 8012c32 <create_topic+0xae>
 8012c0a:	4620      	mov	r0, r4
 8012c0c:	b004      	add	sp, #16
 8012c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c12:	4620      	mov	r0, r4
 8012c14:	f7fb fa74 	bl	800e100 <rmw_uxrce_fini_topic_memory>
 8012c18:	463c      	mov	r4, r7
 8012c1a:	4620      	mov	r0, r4
 8012c1c:	b004      	add	sp, #16
 8012c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c22:	4620      	mov	r0, r4
 8012c24:	f7fb fa6c 	bl	800e100 <rmw_uxrce_fini_topic_memory>
 8012c28:	4634      	mov	r4, r6
 8012c2a:	4620      	mov	r0, r4
 8012c2c:	b004      	add	sp, #16
 8012c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c32:	4620      	mov	r0, r4
 8012c34:	f7fb fa64 	bl	800e100 <rmw_uxrce_fini_topic_memory>
 8012c38:	462c      	mov	r4, r5
 8012c3a:	e7e6      	b.n	8012c0a <create_topic+0x86>
 8012c3c:	2000c7c8 	.word	0x2000c7c8
 8012c40:	200093f0 	.word	0x200093f0
 8012c44:	200093b4 	.word	0x200093b4

08012c48 <destroy_topic>:
 8012c48:	b538      	push	{r3, r4, r5, lr}
 8012c4a:	6985      	ldr	r5, [r0, #24]
 8012c4c:	b1d5      	cbz	r5, 8012c84 <destroy_topic+0x3c>
 8012c4e:	4604      	mov	r4, r0
 8012c50:	6928      	ldr	r0, [r5, #16]
 8012c52:	6922      	ldr	r2, [r4, #16]
 8012c54:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012c58:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012c5c:	6819      	ldr	r1, [r3, #0]
 8012c5e:	f7fb fcc3 	bl	800e5e8 <uxr_buffer_delete_entity>
 8012c62:	4602      	mov	r2, r0
 8012c64:	6928      	ldr	r0, [r5, #16]
 8012c66:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8012c6a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8012c6e:	f7fb fa9f 	bl	800e1b0 <run_xrce_session>
 8012c72:	2800      	cmp	r0, #0
 8012c74:	4620      	mov	r0, r4
 8012c76:	bf14      	ite	ne
 8012c78:	2400      	movne	r4, #0
 8012c7a:	2402      	moveq	r4, #2
 8012c7c:	f7fb fa40 	bl	800e100 <rmw_uxrce_fini_topic_memory>
 8012c80:	4620      	mov	r0, r4
 8012c82:	bd38      	pop	{r3, r4, r5, pc}
 8012c84:	2401      	movs	r4, #1
 8012c86:	4620      	mov	r0, r4
 8012c88:	bd38      	pop	{r3, r4, r5, pc}
 8012c8a:	bf00      	nop

08012c8c <create_node>:
 8012c8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012c90:	b083      	sub	sp, #12
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d05f      	beq.n	8012d56 <create_node+0xca>
 8012c96:	4606      	mov	r6, r0
 8012c98:	4835      	ldr	r0, [pc, #212]	; (8012d70 <create_node+0xe4>)
 8012c9a:	460f      	mov	r7, r1
 8012c9c:	4690      	mov	r8, r2
 8012c9e:	461d      	mov	r5, r3
 8012ca0:	f7ff fd02 	bl	80126a8 <get_memory>
 8012ca4:	2800      	cmp	r0, #0
 8012ca6:	d056      	beq.n	8012d56 <create_node+0xca>
 8012ca8:	68c4      	ldr	r4, [r0, #12]
 8012caa:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8012cac:	6123      	str	r3, [r4, #16]
 8012cae:	f7ff fd1f 	bl	80126f0 <rmw_get_implementation_identifier>
 8012cb2:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 8012cb6:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8012cba:	f8c4 9020 	str.w	r9, [r4, #32]
 8012cbe:	4630      	mov	r0, r6
 8012cc0:	f7ed fa98 	bl	80001f4 <strlen>
 8012cc4:	1c42      	adds	r2, r0, #1
 8012cc6:	2a3c      	cmp	r2, #60	; 0x3c
 8012cc8:	f104 0518 	add.w	r5, r4, #24
 8012ccc:	d840      	bhi.n	8012d50 <create_node+0xc4>
 8012cce:	4648      	mov	r0, r9
 8012cd0:	4631      	mov	r1, r6
 8012cd2:	f104 0968 	add.w	r9, r4, #104	; 0x68
 8012cd6:	f003 fc6f 	bl	80165b8 <memcpy>
 8012cda:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 8012cde:	4638      	mov	r0, r7
 8012ce0:	f7ed fa88 	bl	80001f4 <strlen>
 8012ce4:	1c42      	adds	r2, r0, #1
 8012ce6:	2a3c      	cmp	r2, #60	; 0x3c
 8012ce8:	d832      	bhi.n	8012d50 <create_node+0xc4>
 8012cea:	4639      	mov	r1, r7
 8012cec:	4648      	mov	r0, r9
 8012cee:	f003 fc63 	bl	80165b8 <memcpy>
 8012cf2:	f241 5394 	movw	r3, #5524	; 0x1594
 8012cf6:	6922      	ldr	r2, [r4, #16]
 8012cf8:	5ad0      	ldrh	r0, [r2, r3]
 8012cfa:	2101      	movs	r1, #1
 8012cfc:	eb00 0c01 	add.w	ip, r0, r1
 8012d00:	f822 c003 	strh.w	ip, [r2, r3]
 8012d04:	f7fb fdc8 	bl	800e898 <uxr_object_id>
 8012d08:	6160      	str	r0, [r4, #20]
 8012d0a:	783b      	ldrb	r3, [r7, #0]
 8012d0c:	2b2f      	cmp	r3, #47	; 0x2f
 8012d0e:	d127      	bne.n	8012d60 <create_node+0xd4>
 8012d10:	787b      	ldrb	r3, [r7, #1]
 8012d12:	bb2b      	cbnz	r3, 8012d60 <create_node+0xd4>
 8012d14:	4a17      	ldr	r2, [pc, #92]	; (8012d74 <create_node+0xe8>)
 8012d16:	4818      	ldr	r0, [pc, #96]	; (8012d78 <create_node+0xec>)
 8012d18:	4633      	mov	r3, r6
 8012d1a:	213c      	movs	r1, #60	; 0x3c
 8012d1c:	f003 fa5e 	bl	80161dc <sniprintf>
 8012d20:	6920      	ldr	r0, [r4, #16]
 8012d22:	4b15      	ldr	r3, [pc, #84]	; (8012d78 <create_node+0xec>)
 8012d24:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8012d28:	9300      	str	r3, [sp, #0]
 8012d2a:	2306      	movs	r3, #6
 8012d2c:	9301      	str	r3, [sp, #4]
 8012d2e:	6811      	ldr	r1, [r2, #0]
 8012d30:	6962      	ldr	r2, [r4, #20]
 8012d32:	fa1f f388 	uxth.w	r3, r8
 8012d36:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012d3a:	f7fb fca1 	bl	800e680 <uxr_buffer_create_participant_bin>
 8012d3e:	4602      	mov	r2, r0
 8012d40:	6920      	ldr	r0, [r4, #16]
 8012d42:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8012d46:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8012d4a:	f7fb fa31 	bl	800e1b0 <run_xrce_session>
 8012d4e:	b918      	cbnz	r0, 8012d58 <create_node+0xcc>
 8012d50:	4628      	mov	r0, r5
 8012d52:	f7fb f965 	bl	800e020 <rmw_uxrce_fini_node_memory>
 8012d56:	2500      	movs	r5, #0
 8012d58:	4628      	mov	r0, r5
 8012d5a:	b003      	add	sp, #12
 8012d5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012d60:	4a06      	ldr	r2, [pc, #24]	; (8012d7c <create_node+0xf0>)
 8012d62:	9600      	str	r6, [sp, #0]
 8012d64:	463b      	mov	r3, r7
 8012d66:	213c      	movs	r1, #60	; 0x3c
 8012d68:	4803      	ldr	r0, [pc, #12]	; (8012d78 <create_node+0xec>)
 8012d6a:	f003 fa37 	bl	80161dc <sniprintf>
 8012d6e:	e7d7      	b.n	8012d20 <create_node+0x94>
 8012d70:	2000c604 	.word	0x2000c604
 8012d74:	08017614 	.word	0x08017614
 8012d78:	20009454 	.word	0x20009454
 8012d7c:	08017654 	.word	0x08017654

08012d80 <rmw_create_node>:
 8012d80:	b199      	cbz	r1, 8012daa <rmw_create_node+0x2a>
 8012d82:	b430      	push	{r4, r5}
 8012d84:	4615      	mov	r5, r2
 8012d86:	461a      	mov	r2, r3
 8012d88:	780b      	ldrb	r3, [r1, #0]
 8012d8a:	460c      	mov	r4, r1
 8012d8c:	b153      	cbz	r3, 8012da4 <rmw_create_node+0x24>
 8012d8e:	b14d      	cbz	r5, 8012da4 <rmw_create_node+0x24>
 8012d90:	782b      	ldrb	r3, [r5, #0]
 8012d92:	b13b      	cbz	r3, 8012da4 <rmw_create_node+0x24>
 8012d94:	b902      	cbnz	r2, 8012d98 <rmw_create_node+0x18>
 8012d96:	69c2      	ldr	r2, [r0, #28]
 8012d98:	4603      	mov	r3, r0
 8012d9a:	4629      	mov	r1, r5
 8012d9c:	4620      	mov	r0, r4
 8012d9e:	bc30      	pop	{r4, r5}
 8012da0:	f7ff bf74 	b.w	8012c8c <create_node>
 8012da4:	2000      	movs	r0, #0
 8012da6:	bc30      	pop	{r4, r5}
 8012da8:	4770      	bx	lr
 8012daa:	2000      	movs	r0, #0
 8012dac:	4770      	bx	lr
 8012dae:	bf00      	nop

08012db0 <rmw_destroy_node>:
 8012db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012db2:	2800      	cmp	r0, #0
 8012db4:	d066      	beq.n	8012e84 <rmw_destroy_node+0xd4>
 8012db6:	4607      	mov	r7, r0
 8012db8:	6800      	ldr	r0, [r0, #0]
 8012dba:	b128      	cbz	r0, 8012dc8 <rmw_destroy_node+0x18>
 8012dbc:	4b34      	ldr	r3, [pc, #208]	; (8012e90 <rmw_destroy_node+0xe0>)
 8012dbe:	6819      	ldr	r1, [r3, #0]
 8012dc0:	f7ed fa0e 	bl	80001e0 <strcmp>
 8012dc4:	2800      	cmp	r0, #0
 8012dc6:	d15d      	bne.n	8012e84 <rmw_destroy_node+0xd4>
 8012dc8:	687c      	ldr	r4, [r7, #4]
 8012dca:	2c00      	cmp	r4, #0
 8012dcc:	d05a      	beq.n	8012e84 <rmw_destroy_node+0xd4>
 8012dce:	4b31      	ldr	r3, [pc, #196]	; (8012e94 <rmw_destroy_node+0xe4>)
 8012dd0:	681d      	ldr	r5, [r3, #0]
 8012dd2:	2d00      	cmp	r5, #0
 8012dd4:	d059      	beq.n	8012e8a <rmw_destroy_node+0xda>
 8012dd6:	2600      	movs	r6, #0
 8012dd8:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 8012ddc:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 8012de0:	429c      	cmp	r4, r3
 8012de2:	d047      	beq.n	8012e74 <rmw_destroy_node+0xc4>
 8012de4:	2d00      	cmp	r5, #0
 8012de6:	d1f7      	bne.n	8012dd8 <rmw_destroy_node+0x28>
 8012de8:	4b2b      	ldr	r3, [pc, #172]	; (8012e98 <rmw_destroy_node+0xe8>)
 8012dea:	681d      	ldr	r5, [r3, #0]
 8012dec:	b15d      	cbz	r5, 8012e06 <rmw_destroy_node+0x56>
 8012dee:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 8012df2:	6a0b      	ldr	r3, [r1, #32]
 8012df4:	429c      	cmp	r4, r3
 8012df6:	d1f9      	bne.n	8012dec <rmw_destroy_node+0x3c>
 8012df8:	317c      	adds	r1, #124	; 0x7c
 8012dfa:	4638      	mov	r0, r7
 8012dfc:	f000 f89c 	bl	8012f38 <rmw_destroy_subscription>
 8012e00:	4606      	mov	r6, r0
 8012e02:	2d00      	cmp	r5, #0
 8012e04:	d1f3      	bne.n	8012dee <rmw_destroy_node+0x3e>
 8012e06:	4b25      	ldr	r3, [pc, #148]	; (8012e9c <rmw_destroy_node+0xec>)
 8012e08:	681d      	ldr	r5, [r3, #0]
 8012e0a:	b15d      	cbz	r5, 8012e24 <rmw_destroy_node+0x74>
 8012e0c:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 8012e10:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8012e12:	429c      	cmp	r4, r3
 8012e14:	d1f9      	bne.n	8012e0a <rmw_destroy_node+0x5a>
 8012e16:	317c      	adds	r1, #124	; 0x7c
 8012e18:	4638      	mov	r0, r7
 8012e1a:	f000 f849 	bl	8012eb0 <rmw_destroy_service>
 8012e1e:	4606      	mov	r6, r0
 8012e20:	2d00      	cmp	r5, #0
 8012e22:	d1f3      	bne.n	8012e0c <rmw_destroy_node+0x5c>
 8012e24:	4b1e      	ldr	r3, [pc, #120]	; (8012ea0 <rmw_destroy_node+0xf0>)
 8012e26:	681d      	ldr	r5, [r3, #0]
 8012e28:	b15d      	cbz	r5, 8012e42 <rmw_destroy_node+0x92>
 8012e2a:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 8012e2e:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8012e30:	429c      	cmp	r4, r3
 8012e32:	d1f9      	bne.n	8012e28 <rmw_destroy_node+0x78>
 8012e34:	317c      	adds	r1, #124	; 0x7c
 8012e36:	4638      	mov	r0, r7
 8012e38:	f002 fe60 	bl	8015afc <rmw_destroy_client>
 8012e3c:	4606      	mov	r6, r0
 8012e3e:	2d00      	cmp	r5, #0
 8012e40:	d1f3      	bne.n	8012e2a <rmw_destroy_node+0x7a>
 8012e42:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 8012e46:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012e4a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012e4e:	6819      	ldr	r1, [r3, #0]
 8012e50:	f7fb fbca 	bl	800e5e8 <uxr_buffer_delete_entity>
 8012e54:	4602      	mov	r2, r0
 8012e56:	6920      	ldr	r0, [r4, #16]
 8012e58:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8012e5c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8012e60:	f7fb f9a6 	bl	800e1b0 <run_xrce_session>
 8012e64:	2800      	cmp	r0, #0
 8012e66:	bf08      	it	eq
 8012e68:	2602      	moveq	r6, #2
 8012e6a:	4638      	mov	r0, r7
 8012e6c:	f7fb f8d8 	bl	800e020 <rmw_uxrce_fini_node_memory>
 8012e70:	4630      	mov	r0, r6
 8012e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e74:	3184      	adds	r1, #132	; 0x84
 8012e76:	4638      	mov	r0, r7
 8012e78:	f7fa ff52 	bl	800dd20 <rmw_destroy_publisher>
 8012e7c:	4606      	mov	r6, r0
 8012e7e:	2d00      	cmp	r5, #0
 8012e80:	d1aa      	bne.n	8012dd8 <rmw_destroy_node+0x28>
 8012e82:	e7b1      	b.n	8012de8 <rmw_destroy_node+0x38>
 8012e84:	2601      	movs	r6, #1
 8012e86:	4630      	mov	r0, r6
 8012e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e8a:	462e      	mov	r6, r5
 8012e8c:	e7ac      	b.n	8012de8 <rmw_destroy_node+0x38>
 8012e8e:	bf00      	nop
 8012e90:	08017ae8 	.word	0x08017ae8
 8012e94:	20009640 	.word	0x20009640
 8012e98:	2000c89c 	.word	0x2000c89c
 8012e9c:	2000c88c 	.word	0x2000c88c
 8012ea0:	20009ec0 	.word	0x20009ec0

08012ea4 <rmw_node_get_graph_guard_condition>:
 8012ea4:	6843      	ldr	r3, [r0, #4]
 8012ea6:	6918      	ldr	r0, [r3, #16]
 8012ea8:	f500 705a 	add.w	r0, r0, #872	; 0x368
 8012eac:	4770      	bx	lr
 8012eae:	bf00      	nop

08012eb0 <rmw_destroy_service>:
 8012eb0:	b570      	push	{r4, r5, r6, lr}
 8012eb2:	b128      	cbz	r0, 8012ec0 <rmw_destroy_service+0x10>
 8012eb4:	4604      	mov	r4, r0
 8012eb6:	6800      	ldr	r0, [r0, #0]
 8012eb8:	460d      	mov	r5, r1
 8012eba:	f7fb f9f9 	bl	800e2b0 <is_uxrce_rmw_identifier_valid>
 8012ebe:	b910      	cbnz	r0, 8012ec6 <rmw_destroy_service+0x16>
 8012ec0:	2401      	movs	r4, #1
 8012ec2:	4620      	mov	r0, r4
 8012ec4:	bd70      	pop	{r4, r5, r6, pc}
 8012ec6:	6863      	ldr	r3, [r4, #4]
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d0f9      	beq.n	8012ec0 <rmw_destroy_service+0x10>
 8012ecc:	2d00      	cmp	r5, #0
 8012ece:	d0f7      	beq.n	8012ec0 <rmw_destroy_service+0x10>
 8012ed0:	6828      	ldr	r0, [r5, #0]
 8012ed2:	f7fb f9ed 	bl	800e2b0 <is_uxrce_rmw_identifier_valid>
 8012ed6:	2800      	cmp	r0, #0
 8012ed8:	d0f2      	beq.n	8012ec0 <rmw_destroy_service+0x10>
 8012eda:	686e      	ldr	r6, [r5, #4]
 8012edc:	2e00      	cmp	r6, #0
 8012ede:	d0ef      	beq.n	8012ec0 <rmw_destroy_service+0x10>
 8012ee0:	6864      	ldr	r4, [r4, #4]
 8012ee2:	6932      	ldr	r2, [r6, #16]
 8012ee4:	6920      	ldr	r0, [r4, #16]
 8012ee6:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012eea:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012eee:	6819      	ldr	r1, [r3, #0]
 8012ef0:	f001 fec0 	bl	8014c74 <uxr_buffer_cancel_data>
 8012ef4:	4602      	mov	r2, r0
 8012ef6:	6920      	ldr	r0, [r4, #16]
 8012ef8:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8012efc:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8012f00:	f7fb f956 	bl	800e1b0 <run_xrce_session>
 8012f04:	6920      	ldr	r0, [r4, #16]
 8012f06:	6932      	ldr	r2, [r6, #16]
 8012f08:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012f0c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012f10:	6819      	ldr	r1, [r3, #0]
 8012f12:	f7fb fb69 	bl	800e5e8 <uxr_buffer_delete_entity>
 8012f16:	4602      	mov	r2, r0
 8012f18:	6920      	ldr	r0, [r4, #16]
 8012f1a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8012f1e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8012f22:	f7fb f945 	bl	800e1b0 <run_xrce_session>
 8012f26:	2800      	cmp	r0, #0
 8012f28:	4628      	mov	r0, r5
 8012f2a:	bf14      	ite	ne
 8012f2c:	2400      	movne	r4, #0
 8012f2e:	2402      	moveq	r4, #2
 8012f30:	f7fb f8ba 	bl	800e0a8 <rmw_uxrce_fini_service_memory>
 8012f34:	e7c5      	b.n	8012ec2 <rmw_destroy_service+0x12>
 8012f36:	bf00      	nop

08012f38 <rmw_destroy_subscription>:
 8012f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f3a:	b128      	cbz	r0, 8012f48 <rmw_destroy_subscription+0x10>
 8012f3c:	4604      	mov	r4, r0
 8012f3e:	6800      	ldr	r0, [r0, #0]
 8012f40:	460d      	mov	r5, r1
 8012f42:	f7fb f9b5 	bl	800e2b0 <is_uxrce_rmw_identifier_valid>
 8012f46:	b910      	cbnz	r0, 8012f4e <rmw_destroy_subscription+0x16>
 8012f48:	2401      	movs	r4, #1
 8012f4a:	4620      	mov	r0, r4
 8012f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f4e:	6863      	ldr	r3, [r4, #4]
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d0f9      	beq.n	8012f48 <rmw_destroy_subscription+0x10>
 8012f54:	2d00      	cmp	r5, #0
 8012f56:	d0f7      	beq.n	8012f48 <rmw_destroy_subscription+0x10>
 8012f58:	6828      	ldr	r0, [r5, #0]
 8012f5a:	f7fb f9a9 	bl	800e2b0 <is_uxrce_rmw_identifier_valid>
 8012f5e:	2800      	cmp	r0, #0
 8012f60:	d0f2      	beq.n	8012f48 <rmw_destroy_subscription+0x10>
 8012f62:	686c      	ldr	r4, [r5, #4]
 8012f64:	2c00      	cmp	r4, #0
 8012f66:	d0ef      	beq.n	8012f48 <rmw_destroy_subscription+0x10>
 8012f68:	6a26      	ldr	r6, [r4, #32]
 8012f6a:	6962      	ldr	r2, [r4, #20]
 8012f6c:	6930      	ldr	r0, [r6, #16]
 8012f6e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012f72:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012f76:	6819      	ldr	r1, [r3, #0]
 8012f78:	f001 fe7c 	bl	8014c74 <uxr_buffer_cancel_data>
 8012f7c:	4602      	mov	r2, r0
 8012f7e:	6930      	ldr	r0, [r6, #16]
 8012f80:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8012f84:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8012f88:	f7fb f912 	bl	800e1b0 <run_xrce_session>
 8012f8c:	69e0      	ldr	r0, [r4, #28]
 8012f8e:	f7ff fe5b 	bl	8012c48 <destroy_topic>
 8012f92:	6a23      	ldr	r3, [r4, #32]
 8012f94:	6962      	ldr	r2, [r4, #20]
 8012f96:	6918      	ldr	r0, [r3, #16]
 8012f98:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012f9c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012fa0:	6819      	ldr	r1, [r3, #0]
 8012fa2:	f7fb fb21 	bl	800e5e8 <uxr_buffer_delete_entity>
 8012fa6:	6a21      	ldr	r1, [r4, #32]
 8012fa8:	6922      	ldr	r2, [r4, #16]
 8012faa:	4603      	mov	r3, r0
 8012fac:	6908      	ldr	r0, [r1, #16]
 8012fae:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8012fb2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012fb6:	6809      	ldr	r1, [r1, #0]
 8012fb8:	461c      	mov	r4, r3
 8012fba:	f7fb fb15 	bl	800e5e8 <uxr_buffer_delete_entity>
 8012fbe:	4607      	mov	r7, r0
 8012fc0:	6930      	ldr	r0, [r6, #16]
 8012fc2:	4622      	mov	r2, r4
 8012fc4:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8012fc8:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8012fcc:	f7fb f8f0 	bl	800e1b0 <run_xrce_session>
 8012fd0:	4604      	mov	r4, r0
 8012fd2:	6930      	ldr	r0, [r6, #16]
 8012fd4:	463a      	mov	r2, r7
 8012fd6:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8012fda:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8012fde:	f7fb f8e7 	bl	800e1b0 <run_xrce_session>
 8012fe2:	b12c      	cbz	r4, 8012ff0 <rmw_destroy_subscription+0xb8>
 8012fe4:	b120      	cbz	r0, 8012ff0 <rmw_destroy_subscription+0xb8>
 8012fe6:	2400      	movs	r4, #0
 8012fe8:	4628      	mov	r0, r5
 8012fea:	f7fb f847 	bl	800e07c <rmw_uxrce_fini_subscription_memory>
 8012fee:	e7ac      	b.n	8012f4a <rmw_destroy_subscription+0x12>
 8012ff0:	2402      	movs	r4, #2
 8012ff2:	e7f9      	b.n	8012fe8 <rmw_destroy_subscription+0xb0>

08012ff4 <rmw_uxrce_transport_init>:
 8012ff4:	b508      	push	{r3, lr}
 8012ff6:	b108      	cbz	r0, 8012ffc <rmw_uxrce_transport_init+0x8>
 8012ff8:	f100 0210 	add.w	r2, r0, #16
 8012ffc:	b139      	cbz	r1, 801300e <rmw_uxrce_transport_init+0x1a>
 8012ffe:	6949      	ldr	r1, [r1, #20]
 8013000:	4610      	mov	r0, r2
 8013002:	f001 f8d9 	bl	80141b8 <uxr_init_custom_transport>
 8013006:	f080 0001 	eor.w	r0, r0, #1
 801300a:	b2c0      	uxtb	r0, r0
 801300c:	bd08      	pop	{r3, pc}
 801300e:	4b04      	ldr	r3, [pc, #16]	; (8013020 <rmw_uxrce_transport_init+0x2c>)
 8013010:	4610      	mov	r0, r2
 8013012:	6859      	ldr	r1, [r3, #4]
 8013014:	f001 f8d0 	bl	80141b8 <uxr_init_custom_transport>
 8013018:	f080 0001 	eor.w	r0, r0, #1
 801301c:	b2c0      	uxtb	r0, r0
 801301e:	bd08      	pop	{r3, pc}
 8013020:	20009610 	.word	0x20009610

08013024 <rmw_uros_epoch_nanos>:
 8013024:	4b05      	ldr	r3, [pc, #20]	; (801303c <rmw_uros_epoch_nanos+0x18>)
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	b123      	cbz	r3, 8013034 <rmw_uros_epoch_nanos+0x10>
 801302a:	68d8      	ldr	r0, [r3, #12]
 801302c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013030:	f7fb bd74 	b.w	800eb1c <uxr_epoch_nanos>
 8013034:	2000      	movs	r0, #0
 8013036:	2100      	movs	r1, #0
 8013038:	4770      	bx	lr
 801303a:	bf00      	nop
 801303c:	2000c7d8 	.word	0x2000c7d8

08013040 <ucdr_serialize_endian_array_char>:
 8013040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013044:	4619      	mov	r1, r3
 8013046:	461e      	mov	r6, r3
 8013048:	4690      	mov	r8, r2
 801304a:	4604      	mov	r4, r0
 801304c:	f7fb f9b2 	bl	800e3b4 <ucdr_check_buffer_available_for>
 8013050:	b9e0      	cbnz	r0, 801308c <ucdr_serialize_endian_array_char+0x4c>
 8013052:	4637      	mov	r7, r6
 8013054:	e009      	b.n	801306a <ucdr_serialize_endian_array_char+0x2a>
 8013056:	68a0      	ldr	r0, [r4, #8]
 8013058:	f003 faae 	bl	80165b8 <memcpy>
 801305c:	68a2      	ldr	r2, [r4, #8]
 801305e:	6923      	ldr	r3, [r4, #16]
 8013060:	442a      	add	r2, r5
 8013062:	442b      	add	r3, r5
 8013064:	1b7f      	subs	r7, r7, r5
 8013066:	60a2      	str	r2, [r4, #8]
 8013068:	6123      	str	r3, [r4, #16]
 801306a:	2201      	movs	r2, #1
 801306c:	4639      	mov	r1, r7
 801306e:	4620      	mov	r0, r4
 8013070:	f7fb fa26 	bl	800e4c0 <ucdr_check_final_buffer_behavior_array>
 8013074:	1bf1      	subs	r1, r6, r7
 8013076:	4441      	add	r1, r8
 8013078:	4605      	mov	r5, r0
 801307a:	4602      	mov	r2, r0
 801307c:	2800      	cmp	r0, #0
 801307e:	d1ea      	bne.n	8013056 <ucdr_serialize_endian_array_char+0x16>
 8013080:	2301      	movs	r3, #1
 8013082:	7da0      	ldrb	r0, [r4, #22]
 8013084:	7563      	strb	r3, [r4, #21]
 8013086:	4058      	eors	r0, r3
 8013088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801308c:	4632      	mov	r2, r6
 801308e:	68a0      	ldr	r0, [r4, #8]
 8013090:	4641      	mov	r1, r8
 8013092:	f003 fa91 	bl	80165b8 <memcpy>
 8013096:	68a2      	ldr	r2, [r4, #8]
 8013098:	6923      	ldr	r3, [r4, #16]
 801309a:	4432      	add	r2, r6
 801309c:	4433      	add	r3, r6
 801309e:	60a2      	str	r2, [r4, #8]
 80130a0:	6123      	str	r3, [r4, #16]
 80130a2:	e7ed      	b.n	8013080 <ucdr_serialize_endian_array_char+0x40>

080130a4 <ucdr_deserialize_endian_array_char>:
 80130a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130a8:	4619      	mov	r1, r3
 80130aa:	461e      	mov	r6, r3
 80130ac:	4690      	mov	r8, r2
 80130ae:	4604      	mov	r4, r0
 80130b0:	f7fb f980 	bl	800e3b4 <ucdr_check_buffer_available_for>
 80130b4:	b9e0      	cbnz	r0, 80130f0 <ucdr_deserialize_endian_array_char+0x4c>
 80130b6:	4637      	mov	r7, r6
 80130b8:	e009      	b.n	80130ce <ucdr_deserialize_endian_array_char+0x2a>
 80130ba:	68a1      	ldr	r1, [r4, #8]
 80130bc:	f003 fa7c 	bl	80165b8 <memcpy>
 80130c0:	68a2      	ldr	r2, [r4, #8]
 80130c2:	6923      	ldr	r3, [r4, #16]
 80130c4:	442a      	add	r2, r5
 80130c6:	442b      	add	r3, r5
 80130c8:	1b7f      	subs	r7, r7, r5
 80130ca:	60a2      	str	r2, [r4, #8]
 80130cc:	6123      	str	r3, [r4, #16]
 80130ce:	2201      	movs	r2, #1
 80130d0:	4639      	mov	r1, r7
 80130d2:	4620      	mov	r0, r4
 80130d4:	f7fb f9f4 	bl	800e4c0 <ucdr_check_final_buffer_behavior_array>
 80130d8:	4605      	mov	r5, r0
 80130da:	1bf0      	subs	r0, r6, r7
 80130dc:	4440      	add	r0, r8
 80130de:	462a      	mov	r2, r5
 80130e0:	2d00      	cmp	r5, #0
 80130e2:	d1ea      	bne.n	80130ba <ucdr_deserialize_endian_array_char+0x16>
 80130e4:	2301      	movs	r3, #1
 80130e6:	7da0      	ldrb	r0, [r4, #22]
 80130e8:	7563      	strb	r3, [r4, #21]
 80130ea:	4058      	eors	r0, r3
 80130ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130f0:	4632      	mov	r2, r6
 80130f2:	68a1      	ldr	r1, [r4, #8]
 80130f4:	4640      	mov	r0, r8
 80130f6:	f003 fa5f 	bl	80165b8 <memcpy>
 80130fa:	68a2      	ldr	r2, [r4, #8]
 80130fc:	6923      	ldr	r3, [r4, #16]
 80130fe:	4432      	add	r2, r6
 8013100:	4433      	add	r3, r6
 8013102:	60a2      	str	r2, [r4, #8]
 8013104:	6123      	str	r3, [r4, #16]
 8013106:	e7ed      	b.n	80130e4 <ucdr_deserialize_endian_array_char+0x40>

08013108 <ucdr_serialize_array_uint8_t>:
 8013108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801310c:	4688      	mov	r8, r1
 801310e:	4611      	mov	r1, r2
 8013110:	4616      	mov	r6, r2
 8013112:	4604      	mov	r4, r0
 8013114:	f7fb f94e 	bl	800e3b4 <ucdr_check_buffer_available_for>
 8013118:	b9e0      	cbnz	r0, 8013154 <ucdr_serialize_array_uint8_t+0x4c>
 801311a:	4637      	mov	r7, r6
 801311c:	e009      	b.n	8013132 <ucdr_serialize_array_uint8_t+0x2a>
 801311e:	68a0      	ldr	r0, [r4, #8]
 8013120:	f003 fa4a 	bl	80165b8 <memcpy>
 8013124:	68a2      	ldr	r2, [r4, #8]
 8013126:	6923      	ldr	r3, [r4, #16]
 8013128:	442a      	add	r2, r5
 801312a:	442b      	add	r3, r5
 801312c:	1b7f      	subs	r7, r7, r5
 801312e:	60a2      	str	r2, [r4, #8]
 8013130:	6123      	str	r3, [r4, #16]
 8013132:	2201      	movs	r2, #1
 8013134:	4639      	mov	r1, r7
 8013136:	4620      	mov	r0, r4
 8013138:	f7fb f9c2 	bl	800e4c0 <ucdr_check_final_buffer_behavior_array>
 801313c:	1bf1      	subs	r1, r6, r7
 801313e:	4441      	add	r1, r8
 8013140:	4605      	mov	r5, r0
 8013142:	4602      	mov	r2, r0
 8013144:	2800      	cmp	r0, #0
 8013146:	d1ea      	bne.n	801311e <ucdr_serialize_array_uint8_t+0x16>
 8013148:	2301      	movs	r3, #1
 801314a:	7da0      	ldrb	r0, [r4, #22]
 801314c:	7563      	strb	r3, [r4, #21]
 801314e:	4058      	eors	r0, r3
 8013150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013154:	4632      	mov	r2, r6
 8013156:	68a0      	ldr	r0, [r4, #8]
 8013158:	4641      	mov	r1, r8
 801315a:	f003 fa2d 	bl	80165b8 <memcpy>
 801315e:	68a3      	ldr	r3, [r4, #8]
 8013160:	6922      	ldr	r2, [r4, #16]
 8013162:	4433      	add	r3, r6
 8013164:	4432      	add	r2, r6
 8013166:	60a3      	str	r3, [r4, #8]
 8013168:	6122      	str	r2, [r4, #16]
 801316a:	e7ed      	b.n	8013148 <ucdr_serialize_array_uint8_t+0x40>

0801316c <ucdr_serialize_endian_array_uint8_t>:
 801316c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013170:	4619      	mov	r1, r3
 8013172:	461e      	mov	r6, r3
 8013174:	4690      	mov	r8, r2
 8013176:	4604      	mov	r4, r0
 8013178:	f7fb f91c 	bl	800e3b4 <ucdr_check_buffer_available_for>
 801317c:	b9e0      	cbnz	r0, 80131b8 <ucdr_serialize_endian_array_uint8_t+0x4c>
 801317e:	4637      	mov	r7, r6
 8013180:	e009      	b.n	8013196 <ucdr_serialize_endian_array_uint8_t+0x2a>
 8013182:	68a0      	ldr	r0, [r4, #8]
 8013184:	f003 fa18 	bl	80165b8 <memcpy>
 8013188:	68a2      	ldr	r2, [r4, #8]
 801318a:	6923      	ldr	r3, [r4, #16]
 801318c:	442a      	add	r2, r5
 801318e:	442b      	add	r3, r5
 8013190:	1b7f      	subs	r7, r7, r5
 8013192:	60a2      	str	r2, [r4, #8]
 8013194:	6123      	str	r3, [r4, #16]
 8013196:	2201      	movs	r2, #1
 8013198:	4639      	mov	r1, r7
 801319a:	4620      	mov	r0, r4
 801319c:	f7fb f990 	bl	800e4c0 <ucdr_check_final_buffer_behavior_array>
 80131a0:	1bf1      	subs	r1, r6, r7
 80131a2:	4441      	add	r1, r8
 80131a4:	4605      	mov	r5, r0
 80131a6:	4602      	mov	r2, r0
 80131a8:	2800      	cmp	r0, #0
 80131aa:	d1ea      	bne.n	8013182 <ucdr_serialize_endian_array_uint8_t+0x16>
 80131ac:	2301      	movs	r3, #1
 80131ae:	7da0      	ldrb	r0, [r4, #22]
 80131b0:	7563      	strb	r3, [r4, #21]
 80131b2:	4058      	eors	r0, r3
 80131b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131b8:	4632      	mov	r2, r6
 80131ba:	68a0      	ldr	r0, [r4, #8]
 80131bc:	4641      	mov	r1, r8
 80131be:	f003 f9fb 	bl	80165b8 <memcpy>
 80131c2:	68a2      	ldr	r2, [r4, #8]
 80131c4:	6923      	ldr	r3, [r4, #16]
 80131c6:	4432      	add	r2, r6
 80131c8:	4433      	add	r3, r6
 80131ca:	60a2      	str	r2, [r4, #8]
 80131cc:	6123      	str	r3, [r4, #16]
 80131ce:	e7ed      	b.n	80131ac <ucdr_serialize_endian_array_uint8_t+0x40>

080131d0 <ucdr_deserialize_array_uint8_t>:
 80131d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131d4:	4688      	mov	r8, r1
 80131d6:	4611      	mov	r1, r2
 80131d8:	4616      	mov	r6, r2
 80131da:	4604      	mov	r4, r0
 80131dc:	f7fb f8ea 	bl	800e3b4 <ucdr_check_buffer_available_for>
 80131e0:	b9e0      	cbnz	r0, 801321c <ucdr_deserialize_array_uint8_t+0x4c>
 80131e2:	4637      	mov	r7, r6
 80131e4:	e009      	b.n	80131fa <ucdr_deserialize_array_uint8_t+0x2a>
 80131e6:	68a1      	ldr	r1, [r4, #8]
 80131e8:	f003 f9e6 	bl	80165b8 <memcpy>
 80131ec:	68a2      	ldr	r2, [r4, #8]
 80131ee:	6923      	ldr	r3, [r4, #16]
 80131f0:	442a      	add	r2, r5
 80131f2:	442b      	add	r3, r5
 80131f4:	1b7f      	subs	r7, r7, r5
 80131f6:	60a2      	str	r2, [r4, #8]
 80131f8:	6123      	str	r3, [r4, #16]
 80131fa:	2201      	movs	r2, #1
 80131fc:	4639      	mov	r1, r7
 80131fe:	4620      	mov	r0, r4
 8013200:	f7fb f95e 	bl	800e4c0 <ucdr_check_final_buffer_behavior_array>
 8013204:	4605      	mov	r5, r0
 8013206:	1bf0      	subs	r0, r6, r7
 8013208:	4440      	add	r0, r8
 801320a:	462a      	mov	r2, r5
 801320c:	2d00      	cmp	r5, #0
 801320e:	d1ea      	bne.n	80131e6 <ucdr_deserialize_array_uint8_t+0x16>
 8013210:	2301      	movs	r3, #1
 8013212:	7da0      	ldrb	r0, [r4, #22]
 8013214:	7563      	strb	r3, [r4, #21]
 8013216:	4058      	eors	r0, r3
 8013218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801321c:	4632      	mov	r2, r6
 801321e:	68a1      	ldr	r1, [r4, #8]
 8013220:	4640      	mov	r0, r8
 8013222:	f003 f9c9 	bl	80165b8 <memcpy>
 8013226:	68a3      	ldr	r3, [r4, #8]
 8013228:	6922      	ldr	r2, [r4, #16]
 801322a:	4433      	add	r3, r6
 801322c:	4432      	add	r2, r6
 801322e:	60a3      	str	r3, [r4, #8]
 8013230:	6122      	str	r2, [r4, #16]
 8013232:	e7ed      	b.n	8013210 <ucdr_deserialize_array_uint8_t+0x40>

08013234 <ucdr_deserialize_endian_array_uint8_t>:
 8013234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013238:	4619      	mov	r1, r3
 801323a:	461e      	mov	r6, r3
 801323c:	4690      	mov	r8, r2
 801323e:	4604      	mov	r4, r0
 8013240:	f7fb f8b8 	bl	800e3b4 <ucdr_check_buffer_available_for>
 8013244:	b9e0      	cbnz	r0, 8013280 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8013246:	4637      	mov	r7, r6
 8013248:	e009      	b.n	801325e <ucdr_deserialize_endian_array_uint8_t+0x2a>
 801324a:	68a1      	ldr	r1, [r4, #8]
 801324c:	f003 f9b4 	bl	80165b8 <memcpy>
 8013250:	68a2      	ldr	r2, [r4, #8]
 8013252:	6923      	ldr	r3, [r4, #16]
 8013254:	442a      	add	r2, r5
 8013256:	442b      	add	r3, r5
 8013258:	1b7f      	subs	r7, r7, r5
 801325a:	60a2      	str	r2, [r4, #8]
 801325c:	6123      	str	r3, [r4, #16]
 801325e:	2201      	movs	r2, #1
 8013260:	4639      	mov	r1, r7
 8013262:	4620      	mov	r0, r4
 8013264:	f7fb f92c 	bl	800e4c0 <ucdr_check_final_buffer_behavior_array>
 8013268:	4605      	mov	r5, r0
 801326a:	1bf0      	subs	r0, r6, r7
 801326c:	4440      	add	r0, r8
 801326e:	462a      	mov	r2, r5
 8013270:	2d00      	cmp	r5, #0
 8013272:	d1ea      	bne.n	801324a <ucdr_deserialize_endian_array_uint8_t+0x16>
 8013274:	2301      	movs	r3, #1
 8013276:	7da0      	ldrb	r0, [r4, #22]
 8013278:	7563      	strb	r3, [r4, #21]
 801327a:	4058      	eors	r0, r3
 801327c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013280:	4632      	mov	r2, r6
 8013282:	68a1      	ldr	r1, [r4, #8]
 8013284:	4640      	mov	r0, r8
 8013286:	f003 f997 	bl	80165b8 <memcpy>
 801328a:	68a2      	ldr	r2, [r4, #8]
 801328c:	6923      	ldr	r3, [r4, #16]
 801328e:	4432      	add	r2, r6
 8013290:	4433      	add	r3, r6
 8013292:	60a2      	str	r2, [r4, #8]
 8013294:	6123      	str	r3, [r4, #16]
 8013296:	e7ed      	b.n	8013274 <ucdr_deserialize_endian_array_uint8_t+0x40>

08013298 <ucdr_serialize_bool>:
 8013298:	b538      	push	{r3, r4, r5, lr}
 801329a:	460d      	mov	r5, r1
 801329c:	2101      	movs	r1, #1
 801329e:	4604      	mov	r4, r0
 80132a0:	f7fb f894 	bl	800e3cc <ucdr_check_final_buffer_behavior>
 80132a4:	b148      	cbz	r0, 80132ba <ucdr_serialize_bool+0x22>
 80132a6:	68a3      	ldr	r3, [r4, #8]
 80132a8:	701d      	strb	r5, [r3, #0]
 80132aa:	68a2      	ldr	r2, [r4, #8]
 80132ac:	6923      	ldr	r3, [r4, #16]
 80132ae:	3201      	adds	r2, #1
 80132b0:	3301      	adds	r3, #1
 80132b2:	2101      	movs	r1, #1
 80132b4:	60a2      	str	r2, [r4, #8]
 80132b6:	6123      	str	r3, [r4, #16]
 80132b8:	7561      	strb	r1, [r4, #21]
 80132ba:	7da0      	ldrb	r0, [r4, #22]
 80132bc:	f080 0001 	eor.w	r0, r0, #1
 80132c0:	bd38      	pop	{r3, r4, r5, pc}
 80132c2:	bf00      	nop

080132c4 <ucdr_deserialize_bool>:
 80132c4:	b538      	push	{r3, r4, r5, lr}
 80132c6:	460d      	mov	r5, r1
 80132c8:	2101      	movs	r1, #1
 80132ca:	4604      	mov	r4, r0
 80132cc:	f7fb f87e 	bl	800e3cc <ucdr_check_final_buffer_behavior>
 80132d0:	b168      	cbz	r0, 80132ee <ucdr_deserialize_bool+0x2a>
 80132d2:	68a2      	ldr	r2, [r4, #8]
 80132d4:	6923      	ldr	r3, [r4, #16]
 80132d6:	f812 1b01 	ldrb.w	r1, [r2], #1
 80132da:	3900      	subs	r1, #0
 80132dc:	f103 0301 	add.w	r3, r3, #1
 80132e0:	bf18      	it	ne
 80132e2:	2101      	movne	r1, #1
 80132e4:	2001      	movs	r0, #1
 80132e6:	7029      	strb	r1, [r5, #0]
 80132e8:	60a2      	str	r2, [r4, #8]
 80132ea:	6123      	str	r3, [r4, #16]
 80132ec:	7560      	strb	r0, [r4, #21]
 80132ee:	7da0      	ldrb	r0, [r4, #22]
 80132f0:	f080 0001 	eor.w	r0, r0, #1
 80132f4:	bd38      	pop	{r3, r4, r5, pc}
 80132f6:	bf00      	nop

080132f8 <ucdr_serialize_uint8_t>:
 80132f8:	b538      	push	{r3, r4, r5, lr}
 80132fa:	460d      	mov	r5, r1
 80132fc:	2101      	movs	r1, #1
 80132fe:	4604      	mov	r4, r0
 8013300:	f7fb f864 	bl	800e3cc <ucdr_check_final_buffer_behavior>
 8013304:	b148      	cbz	r0, 801331a <ucdr_serialize_uint8_t+0x22>
 8013306:	68a3      	ldr	r3, [r4, #8]
 8013308:	701d      	strb	r5, [r3, #0]
 801330a:	68a2      	ldr	r2, [r4, #8]
 801330c:	6923      	ldr	r3, [r4, #16]
 801330e:	3201      	adds	r2, #1
 8013310:	3301      	adds	r3, #1
 8013312:	2101      	movs	r1, #1
 8013314:	60a2      	str	r2, [r4, #8]
 8013316:	6123      	str	r3, [r4, #16]
 8013318:	7561      	strb	r1, [r4, #21]
 801331a:	7da0      	ldrb	r0, [r4, #22]
 801331c:	f080 0001 	eor.w	r0, r0, #1
 8013320:	bd38      	pop	{r3, r4, r5, pc}
 8013322:	bf00      	nop

08013324 <ucdr_deserialize_uint8_t>:
 8013324:	b538      	push	{r3, r4, r5, lr}
 8013326:	460d      	mov	r5, r1
 8013328:	2101      	movs	r1, #1
 801332a:	4604      	mov	r4, r0
 801332c:	f7fb f84e 	bl	800e3cc <ucdr_check_final_buffer_behavior>
 8013330:	b150      	cbz	r0, 8013348 <ucdr_deserialize_uint8_t+0x24>
 8013332:	68a3      	ldr	r3, [r4, #8]
 8013334:	781b      	ldrb	r3, [r3, #0]
 8013336:	702b      	strb	r3, [r5, #0]
 8013338:	68a2      	ldr	r2, [r4, #8]
 801333a:	6923      	ldr	r3, [r4, #16]
 801333c:	3201      	adds	r2, #1
 801333e:	3301      	adds	r3, #1
 8013340:	2101      	movs	r1, #1
 8013342:	60a2      	str	r2, [r4, #8]
 8013344:	6123      	str	r3, [r4, #16]
 8013346:	7561      	strb	r1, [r4, #21]
 8013348:	7da0      	ldrb	r0, [r4, #22]
 801334a:	f080 0001 	eor.w	r0, r0, #1
 801334e:	bd38      	pop	{r3, r4, r5, pc}

08013350 <ucdr_serialize_uint16_t>:
 8013350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013354:	b082      	sub	sp, #8
 8013356:	460b      	mov	r3, r1
 8013358:	2102      	movs	r1, #2
 801335a:	4604      	mov	r4, r0
 801335c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013360:	f7fb f886 	bl	800e470 <ucdr_buffer_alignment>
 8013364:	4601      	mov	r1, r0
 8013366:	4620      	mov	r0, r4
 8013368:	7d67      	ldrb	r7, [r4, #21]
 801336a:	f7fb f8c5 	bl	800e4f8 <ucdr_advance_buffer>
 801336e:	4620      	mov	r0, r4
 8013370:	2102      	movs	r1, #2
 8013372:	f7fb f81f 	bl	800e3b4 <ucdr_check_buffer_available_for>
 8013376:	bb78      	cbnz	r0, 80133d8 <ucdr_serialize_uint16_t+0x88>
 8013378:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 801337c:	42b5      	cmp	r5, r6
 801337e:	d926      	bls.n	80133ce <ucdr_serialize_uint16_t+0x7e>
 8013380:	6922      	ldr	r2, [r4, #16]
 8013382:	60a5      	str	r5, [r4, #8]
 8013384:	1bad      	subs	r5, r5, r6
 8013386:	442a      	add	r2, r5
 8013388:	f1c5 0802 	rsb	r8, r5, #2
 801338c:	6122      	str	r2, [r4, #16]
 801338e:	4641      	mov	r1, r8
 8013390:	4620      	mov	r0, r4
 8013392:	f7fb f81b 	bl	800e3cc <ucdr_check_final_buffer_behavior>
 8013396:	2800      	cmp	r0, #0
 8013398:	d03b      	beq.n	8013412 <ucdr_serialize_uint16_t+0xc2>
 801339a:	7d23      	ldrb	r3, [r4, #20]
 801339c:	2b01      	cmp	r3, #1
 801339e:	d04a      	beq.n	8013436 <ucdr_serialize_uint16_t+0xe6>
 80133a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80133a4:	7033      	strb	r3, [r6, #0]
 80133a6:	2d00      	cmp	r5, #0
 80133a8:	d040      	beq.n	801342c <ucdr_serialize_uint16_t+0xdc>
 80133aa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80133ae:	7073      	strb	r3, [r6, #1]
 80133b0:	6923      	ldr	r3, [r4, #16]
 80133b2:	68a2      	ldr	r2, [r4, #8]
 80133b4:	7da0      	ldrb	r0, [r4, #22]
 80133b6:	3302      	adds	r3, #2
 80133b8:	1b5b      	subs	r3, r3, r5
 80133ba:	4442      	add	r2, r8
 80133bc:	2102      	movs	r1, #2
 80133be:	f080 0001 	eor.w	r0, r0, #1
 80133c2:	6123      	str	r3, [r4, #16]
 80133c4:	60a2      	str	r2, [r4, #8]
 80133c6:	7561      	strb	r1, [r4, #21]
 80133c8:	b002      	add	sp, #8
 80133ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133ce:	2102      	movs	r1, #2
 80133d0:	4620      	mov	r0, r4
 80133d2:	f7fa fffb 	bl	800e3cc <ucdr_check_final_buffer_behavior>
 80133d6:	b190      	cbz	r0, 80133fe <ucdr_serialize_uint16_t+0xae>
 80133d8:	7d23      	ldrb	r3, [r4, #20]
 80133da:	2b01      	cmp	r3, #1
 80133dc:	68a3      	ldr	r3, [r4, #8]
 80133de:	d014      	beq.n	801340a <ucdr_serialize_uint16_t+0xba>
 80133e0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80133e4:	701a      	strb	r2, [r3, #0]
 80133e6:	68a3      	ldr	r3, [r4, #8]
 80133e8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80133ec:	705a      	strb	r2, [r3, #1]
 80133ee:	68a2      	ldr	r2, [r4, #8]
 80133f0:	6923      	ldr	r3, [r4, #16]
 80133f2:	3202      	adds	r2, #2
 80133f4:	3302      	adds	r3, #2
 80133f6:	2102      	movs	r1, #2
 80133f8:	60a2      	str	r2, [r4, #8]
 80133fa:	6123      	str	r3, [r4, #16]
 80133fc:	7561      	strb	r1, [r4, #21]
 80133fe:	7da0      	ldrb	r0, [r4, #22]
 8013400:	f080 0001 	eor.w	r0, r0, #1
 8013404:	b002      	add	sp, #8
 8013406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801340a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801340e:	801a      	strh	r2, [r3, #0]
 8013410:	e7ed      	b.n	80133ee <ucdr_serialize_uint16_t+0x9e>
 8013412:	68a2      	ldr	r2, [r4, #8]
 8013414:	6923      	ldr	r3, [r4, #16]
 8013416:	7da0      	ldrb	r0, [r4, #22]
 8013418:	7567      	strb	r7, [r4, #21]
 801341a:	1b52      	subs	r2, r2, r5
 801341c:	1b5b      	subs	r3, r3, r5
 801341e:	f080 0001 	eor.w	r0, r0, #1
 8013422:	60a2      	str	r2, [r4, #8]
 8013424:	6123      	str	r3, [r4, #16]
 8013426:	b002      	add	sp, #8
 8013428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801342c:	68a3      	ldr	r3, [r4, #8]
 801342e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013432:	701a      	strb	r2, [r3, #0]
 8013434:	e7bc      	b.n	80133b0 <ucdr_serialize_uint16_t+0x60>
 8013436:	4630      	mov	r0, r6
 8013438:	f10d 0606 	add.w	r6, sp, #6
 801343c:	4631      	mov	r1, r6
 801343e:	462a      	mov	r2, r5
 8013440:	f003 f8ba 	bl	80165b8 <memcpy>
 8013444:	68a0      	ldr	r0, [r4, #8]
 8013446:	4642      	mov	r2, r8
 8013448:	1971      	adds	r1, r6, r5
 801344a:	f003 f8b5 	bl	80165b8 <memcpy>
 801344e:	e7af      	b.n	80133b0 <ucdr_serialize_uint16_t+0x60>

08013450 <ucdr_serialize_endian_uint16_t>:
 8013450:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013454:	b083      	sub	sp, #12
 8013456:	460d      	mov	r5, r1
 8013458:	2102      	movs	r1, #2
 801345a:	4604      	mov	r4, r0
 801345c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8013460:	f7fb f806 	bl	800e470 <ucdr_buffer_alignment>
 8013464:	4601      	mov	r1, r0
 8013466:	4620      	mov	r0, r4
 8013468:	f894 8015 	ldrb.w	r8, [r4, #21]
 801346c:	f7fb f844 	bl	800e4f8 <ucdr_advance_buffer>
 8013470:	4620      	mov	r0, r4
 8013472:	2102      	movs	r1, #2
 8013474:	f7fa ff9e 	bl	800e3b4 <ucdr_check_buffer_available_for>
 8013478:	bb70      	cbnz	r0, 80134d8 <ucdr_serialize_endian_uint16_t+0x88>
 801347a:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 801347e:	42be      	cmp	r6, r7
 8013480:	d925      	bls.n	80134ce <ucdr_serialize_endian_uint16_t+0x7e>
 8013482:	6922      	ldr	r2, [r4, #16]
 8013484:	60a6      	str	r6, [r4, #8]
 8013486:	1bf6      	subs	r6, r6, r7
 8013488:	4432      	add	r2, r6
 801348a:	f1c6 0902 	rsb	r9, r6, #2
 801348e:	6122      	str	r2, [r4, #16]
 8013490:	4649      	mov	r1, r9
 8013492:	4620      	mov	r0, r4
 8013494:	f7fa ff9a 	bl	800e3cc <ucdr_check_final_buffer_behavior>
 8013498:	2800      	cmp	r0, #0
 801349a:	d039      	beq.n	8013510 <ucdr_serialize_endian_uint16_t+0xc0>
 801349c:	2d01      	cmp	r5, #1
 801349e:	d04a      	beq.n	8013536 <ucdr_serialize_endian_uint16_t+0xe6>
 80134a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80134a4:	703b      	strb	r3, [r7, #0]
 80134a6:	2e00      	cmp	r6, #0
 80134a8:	d040      	beq.n	801352c <ucdr_serialize_endian_uint16_t+0xdc>
 80134aa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80134ae:	707b      	strb	r3, [r7, #1]
 80134b0:	6923      	ldr	r3, [r4, #16]
 80134b2:	68a2      	ldr	r2, [r4, #8]
 80134b4:	7da0      	ldrb	r0, [r4, #22]
 80134b6:	3302      	adds	r3, #2
 80134b8:	1b9b      	subs	r3, r3, r6
 80134ba:	444a      	add	r2, r9
 80134bc:	2102      	movs	r1, #2
 80134be:	f080 0001 	eor.w	r0, r0, #1
 80134c2:	6123      	str	r3, [r4, #16]
 80134c4:	60a2      	str	r2, [r4, #8]
 80134c6:	7561      	strb	r1, [r4, #21]
 80134c8:	b003      	add	sp, #12
 80134ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80134ce:	2102      	movs	r1, #2
 80134d0:	4620      	mov	r0, r4
 80134d2:	f7fa ff7b 	bl	800e3cc <ucdr_check_final_buffer_behavior>
 80134d6:	b188      	cbz	r0, 80134fc <ucdr_serialize_endian_uint16_t+0xac>
 80134d8:	2d01      	cmp	r5, #1
 80134da:	68a3      	ldr	r3, [r4, #8]
 80134dc:	d014      	beq.n	8013508 <ucdr_serialize_endian_uint16_t+0xb8>
 80134de:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80134e2:	701a      	strb	r2, [r3, #0]
 80134e4:	68a3      	ldr	r3, [r4, #8]
 80134e6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80134ea:	705a      	strb	r2, [r3, #1]
 80134ec:	68a2      	ldr	r2, [r4, #8]
 80134ee:	6923      	ldr	r3, [r4, #16]
 80134f0:	3202      	adds	r2, #2
 80134f2:	3302      	adds	r3, #2
 80134f4:	2102      	movs	r1, #2
 80134f6:	60a2      	str	r2, [r4, #8]
 80134f8:	6123      	str	r3, [r4, #16]
 80134fa:	7561      	strb	r1, [r4, #21]
 80134fc:	7da0      	ldrb	r0, [r4, #22]
 80134fe:	f080 0001 	eor.w	r0, r0, #1
 8013502:	b003      	add	sp, #12
 8013504:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013508:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801350c:	801a      	strh	r2, [r3, #0]
 801350e:	e7ed      	b.n	80134ec <ucdr_serialize_endian_uint16_t+0x9c>
 8013510:	68a2      	ldr	r2, [r4, #8]
 8013512:	6923      	ldr	r3, [r4, #16]
 8013514:	7da0      	ldrb	r0, [r4, #22]
 8013516:	f884 8015 	strb.w	r8, [r4, #21]
 801351a:	1b92      	subs	r2, r2, r6
 801351c:	1b9b      	subs	r3, r3, r6
 801351e:	f080 0001 	eor.w	r0, r0, #1
 8013522:	60a2      	str	r2, [r4, #8]
 8013524:	6123      	str	r3, [r4, #16]
 8013526:	b003      	add	sp, #12
 8013528:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801352c:	68a3      	ldr	r3, [r4, #8]
 801352e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013532:	701a      	strb	r2, [r3, #0]
 8013534:	e7bc      	b.n	80134b0 <ucdr_serialize_endian_uint16_t+0x60>
 8013536:	f10d 0506 	add.w	r5, sp, #6
 801353a:	4629      	mov	r1, r5
 801353c:	4632      	mov	r2, r6
 801353e:	4638      	mov	r0, r7
 8013540:	f003 f83a 	bl	80165b8 <memcpy>
 8013544:	68a0      	ldr	r0, [r4, #8]
 8013546:	464a      	mov	r2, r9
 8013548:	19a9      	adds	r1, r5, r6
 801354a:	f003 f835 	bl	80165b8 <memcpy>
 801354e:	e7af      	b.n	80134b0 <ucdr_serialize_endian_uint16_t+0x60>

08013550 <ucdr_deserialize_uint16_t>:
 8013550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013554:	460d      	mov	r5, r1
 8013556:	2102      	movs	r1, #2
 8013558:	4604      	mov	r4, r0
 801355a:	f7fa ff89 	bl	800e470 <ucdr_buffer_alignment>
 801355e:	4601      	mov	r1, r0
 8013560:	4620      	mov	r0, r4
 8013562:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013566:	f7fa ffc7 	bl	800e4f8 <ucdr_advance_buffer>
 801356a:	4620      	mov	r0, r4
 801356c:	2102      	movs	r1, #2
 801356e:	f7fa ff21 	bl	800e3b4 <ucdr_check_buffer_available_for>
 8013572:	bb60      	cbnz	r0, 80135ce <ucdr_deserialize_uint16_t+0x7e>
 8013574:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8013578:	42be      	cmp	r6, r7
 801357a:	d923      	bls.n	80135c4 <ucdr_deserialize_uint16_t+0x74>
 801357c:	6922      	ldr	r2, [r4, #16]
 801357e:	60a6      	str	r6, [r4, #8]
 8013580:	1bf6      	subs	r6, r6, r7
 8013582:	4432      	add	r2, r6
 8013584:	f1c6 0902 	rsb	r9, r6, #2
 8013588:	6122      	str	r2, [r4, #16]
 801358a:	4649      	mov	r1, r9
 801358c:	4620      	mov	r0, r4
 801358e:	f7fa ff1d 	bl	800e3cc <ucdr_check_final_buffer_behavior>
 8013592:	2800      	cmp	r0, #0
 8013594:	d034      	beq.n	8013600 <ucdr_deserialize_uint16_t+0xb0>
 8013596:	7d23      	ldrb	r3, [r4, #20]
 8013598:	2b01      	cmp	r3, #1
 801359a:	d042      	beq.n	8013622 <ucdr_deserialize_uint16_t+0xd2>
 801359c:	787b      	ldrb	r3, [r7, #1]
 801359e:	702b      	strb	r3, [r5, #0]
 80135a0:	2e00      	cmp	r6, #0
 80135a2:	d03a      	beq.n	801361a <ucdr_deserialize_uint16_t+0xca>
 80135a4:	783b      	ldrb	r3, [r7, #0]
 80135a6:	706b      	strb	r3, [r5, #1]
 80135a8:	6923      	ldr	r3, [r4, #16]
 80135aa:	68a2      	ldr	r2, [r4, #8]
 80135ac:	7da0      	ldrb	r0, [r4, #22]
 80135ae:	2102      	movs	r1, #2
 80135b0:	3302      	adds	r3, #2
 80135b2:	1b9b      	subs	r3, r3, r6
 80135b4:	444a      	add	r2, r9
 80135b6:	7561      	strb	r1, [r4, #21]
 80135b8:	6123      	str	r3, [r4, #16]
 80135ba:	60a2      	str	r2, [r4, #8]
 80135bc:	f080 0001 	eor.w	r0, r0, #1
 80135c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80135c4:	2102      	movs	r1, #2
 80135c6:	4620      	mov	r0, r4
 80135c8:	f7fa ff00 	bl	800e3cc <ucdr_check_final_buffer_behavior>
 80135cc:	b180      	cbz	r0, 80135f0 <ucdr_deserialize_uint16_t+0xa0>
 80135ce:	7d23      	ldrb	r3, [r4, #20]
 80135d0:	2b01      	cmp	r3, #1
 80135d2:	68a3      	ldr	r3, [r4, #8]
 80135d4:	d011      	beq.n	80135fa <ucdr_deserialize_uint16_t+0xaa>
 80135d6:	785b      	ldrb	r3, [r3, #1]
 80135d8:	702b      	strb	r3, [r5, #0]
 80135da:	68a3      	ldr	r3, [r4, #8]
 80135dc:	781b      	ldrb	r3, [r3, #0]
 80135de:	706b      	strb	r3, [r5, #1]
 80135e0:	68a2      	ldr	r2, [r4, #8]
 80135e2:	6923      	ldr	r3, [r4, #16]
 80135e4:	3202      	adds	r2, #2
 80135e6:	3302      	adds	r3, #2
 80135e8:	2102      	movs	r1, #2
 80135ea:	60a2      	str	r2, [r4, #8]
 80135ec:	6123      	str	r3, [r4, #16]
 80135ee:	7561      	strb	r1, [r4, #21]
 80135f0:	7da0      	ldrb	r0, [r4, #22]
 80135f2:	f080 0001 	eor.w	r0, r0, #1
 80135f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80135fa:	881b      	ldrh	r3, [r3, #0]
 80135fc:	802b      	strh	r3, [r5, #0]
 80135fe:	e7ef      	b.n	80135e0 <ucdr_deserialize_uint16_t+0x90>
 8013600:	68a2      	ldr	r2, [r4, #8]
 8013602:	6923      	ldr	r3, [r4, #16]
 8013604:	7da0      	ldrb	r0, [r4, #22]
 8013606:	f884 8015 	strb.w	r8, [r4, #21]
 801360a:	1b92      	subs	r2, r2, r6
 801360c:	1b9b      	subs	r3, r3, r6
 801360e:	60a2      	str	r2, [r4, #8]
 8013610:	6123      	str	r3, [r4, #16]
 8013612:	f080 0001 	eor.w	r0, r0, #1
 8013616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801361a:	68a3      	ldr	r3, [r4, #8]
 801361c:	781b      	ldrb	r3, [r3, #0]
 801361e:	706b      	strb	r3, [r5, #1]
 8013620:	e7c2      	b.n	80135a8 <ucdr_deserialize_uint16_t+0x58>
 8013622:	4639      	mov	r1, r7
 8013624:	4632      	mov	r2, r6
 8013626:	4628      	mov	r0, r5
 8013628:	f002 ffc6 	bl	80165b8 <memcpy>
 801362c:	68a1      	ldr	r1, [r4, #8]
 801362e:	464a      	mov	r2, r9
 8013630:	19a8      	adds	r0, r5, r6
 8013632:	f002 ffc1 	bl	80165b8 <memcpy>
 8013636:	e7b7      	b.n	80135a8 <ucdr_deserialize_uint16_t+0x58>

08013638 <ucdr_deserialize_endian_uint16_t>:
 8013638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801363c:	460e      	mov	r6, r1
 801363e:	2102      	movs	r1, #2
 8013640:	4604      	mov	r4, r0
 8013642:	4615      	mov	r5, r2
 8013644:	f7fa ff14 	bl	800e470 <ucdr_buffer_alignment>
 8013648:	4601      	mov	r1, r0
 801364a:	4620      	mov	r0, r4
 801364c:	f894 9015 	ldrb.w	r9, [r4, #21]
 8013650:	f7fa ff52 	bl	800e4f8 <ucdr_advance_buffer>
 8013654:	4620      	mov	r0, r4
 8013656:	2102      	movs	r1, #2
 8013658:	f7fa feac 	bl	800e3b4 <ucdr_check_buffer_available_for>
 801365c:	bb70      	cbnz	r0, 80136bc <ucdr_deserialize_endian_uint16_t+0x84>
 801365e:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 8013662:	4547      	cmp	r7, r8
 8013664:	d925      	bls.n	80136b2 <ucdr_deserialize_endian_uint16_t+0x7a>
 8013666:	6922      	ldr	r2, [r4, #16]
 8013668:	60a7      	str	r7, [r4, #8]
 801366a:	eba7 0708 	sub.w	r7, r7, r8
 801366e:	443a      	add	r2, r7
 8013670:	f1c7 0a02 	rsb	sl, r7, #2
 8013674:	6122      	str	r2, [r4, #16]
 8013676:	4651      	mov	r1, sl
 8013678:	4620      	mov	r0, r4
 801367a:	f7fa fea7 	bl	800e3cc <ucdr_check_final_buffer_behavior>
 801367e:	2800      	cmp	r0, #0
 8013680:	d034      	beq.n	80136ec <ucdr_deserialize_endian_uint16_t+0xb4>
 8013682:	2e01      	cmp	r6, #1
 8013684:	d043      	beq.n	801370e <ucdr_deserialize_endian_uint16_t+0xd6>
 8013686:	f898 3001 	ldrb.w	r3, [r8, #1]
 801368a:	702b      	strb	r3, [r5, #0]
 801368c:	2f00      	cmp	r7, #0
 801368e:	d03a      	beq.n	8013706 <ucdr_deserialize_endian_uint16_t+0xce>
 8013690:	f898 3000 	ldrb.w	r3, [r8]
 8013694:	706b      	strb	r3, [r5, #1]
 8013696:	6923      	ldr	r3, [r4, #16]
 8013698:	68a2      	ldr	r2, [r4, #8]
 801369a:	7da0      	ldrb	r0, [r4, #22]
 801369c:	2102      	movs	r1, #2
 801369e:	3302      	adds	r3, #2
 80136a0:	1bdb      	subs	r3, r3, r7
 80136a2:	4452      	add	r2, sl
 80136a4:	7561      	strb	r1, [r4, #21]
 80136a6:	6123      	str	r3, [r4, #16]
 80136a8:	60a2      	str	r2, [r4, #8]
 80136aa:	f080 0001 	eor.w	r0, r0, #1
 80136ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80136b2:	2102      	movs	r1, #2
 80136b4:	4620      	mov	r0, r4
 80136b6:	f7fa fe89 	bl	800e3cc <ucdr_check_final_buffer_behavior>
 80136ba:	b178      	cbz	r0, 80136dc <ucdr_deserialize_endian_uint16_t+0xa4>
 80136bc:	2e01      	cmp	r6, #1
 80136be:	68a3      	ldr	r3, [r4, #8]
 80136c0:	d011      	beq.n	80136e6 <ucdr_deserialize_endian_uint16_t+0xae>
 80136c2:	785b      	ldrb	r3, [r3, #1]
 80136c4:	702b      	strb	r3, [r5, #0]
 80136c6:	68a3      	ldr	r3, [r4, #8]
 80136c8:	781b      	ldrb	r3, [r3, #0]
 80136ca:	706b      	strb	r3, [r5, #1]
 80136cc:	68a2      	ldr	r2, [r4, #8]
 80136ce:	6923      	ldr	r3, [r4, #16]
 80136d0:	3202      	adds	r2, #2
 80136d2:	3302      	adds	r3, #2
 80136d4:	2102      	movs	r1, #2
 80136d6:	60a2      	str	r2, [r4, #8]
 80136d8:	6123      	str	r3, [r4, #16]
 80136da:	7561      	strb	r1, [r4, #21]
 80136dc:	7da0      	ldrb	r0, [r4, #22]
 80136de:	f080 0001 	eor.w	r0, r0, #1
 80136e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80136e6:	881b      	ldrh	r3, [r3, #0]
 80136e8:	802b      	strh	r3, [r5, #0]
 80136ea:	e7ef      	b.n	80136cc <ucdr_deserialize_endian_uint16_t+0x94>
 80136ec:	68a2      	ldr	r2, [r4, #8]
 80136ee:	6923      	ldr	r3, [r4, #16]
 80136f0:	7da0      	ldrb	r0, [r4, #22]
 80136f2:	f884 9015 	strb.w	r9, [r4, #21]
 80136f6:	1bd2      	subs	r2, r2, r7
 80136f8:	1bdb      	subs	r3, r3, r7
 80136fa:	60a2      	str	r2, [r4, #8]
 80136fc:	6123      	str	r3, [r4, #16]
 80136fe:	f080 0001 	eor.w	r0, r0, #1
 8013702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013706:	68a3      	ldr	r3, [r4, #8]
 8013708:	781b      	ldrb	r3, [r3, #0]
 801370a:	706b      	strb	r3, [r5, #1]
 801370c:	e7c3      	b.n	8013696 <ucdr_deserialize_endian_uint16_t+0x5e>
 801370e:	4641      	mov	r1, r8
 8013710:	463a      	mov	r2, r7
 8013712:	4628      	mov	r0, r5
 8013714:	f002 ff50 	bl	80165b8 <memcpy>
 8013718:	68a1      	ldr	r1, [r4, #8]
 801371a:	4652      	mov	r2, sl
 801371c:	19e8      	adds	r0, r5, r7
 801371e:	f002 ff4b 	bl	80165b8 <memcpy>
 8013722:	e7b8      	b.n	8013696 <ucdr_deserialize_endian_uint16_t+0x5e>

08013724 <ucdr_serialize_uint32_t>:
 8013724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013728:	b082      	sub	sp, #8
 801372a:	4604      	mov	r4, r0
 801372c:	9101      	str	r1, [sp, #4]
 801372e:	2104      	movs	r1, #4
 8013730:	f7fa fe9e 	bl	800e470 <ucdr_buffer_alignment>
 8013734:	4601      	mov	r1, r0
 8013736:	4620      	mov	r0, r4
 8013738:	7d67      	ldrb	r7, [r4, #21]
 801373a:	f7fa fedd 	bl	800e4f8 <ucdr_advance_buffer>
 801373e:	4620      	mov	r0, r4
 8013740:	2104      	movs	r1, #4
 8013742:	f7fa fe37 	bl	800e3b4 <ucdr_check_buffer_available_for>
 8013746:	2800      	cmp	r0, #0
 8013748:	d139      	bne.n	80137be <ucdr_serialize_uint32_t+0x9a>
 801374a:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 801374e:	42ae      	cmp	r6, r5
 8013750:	d930      	bls.n	80137b4 <ucdr_serialize_uint32_t+0x90>
 8013752:	6922      	ldr	r2, [r4, #16]
 8013754:	60a6      	str	r6, [r4, #8]
 8013756:	1b76      	subs	r6, r6, r5
 8013758:	4432      	add	r2, r6
 801375a:	f1c6 0804 	rsb	r8, r6, #4
 801375e:	6122      	str	r2, [r4, #16]
 8013760:	4641      	mov	r1, r8
 8013762:	4620      	mov	r0, r4
 8013764:	f7fa fe32 	bl	800e3cc <ucdr_check_final_buffer_behavior>
 8013768:	2800      	cmp	r0, #0
 801376a:	d04c      	beq.n	8013806 <ucdr_serialize_uint32_t+0xe2>
 801376c:	7d23      	ldrb	r3, [r4, #20]
 801376e:	2b01      	cmp	r3, #1
 8013770:	d063      	beq.n	801383a <ucdr_serialize_uint32_t+0x116>
 8013772:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013776:	702b      	strb	r3, [r5, #0]
 8013778:	2e00      	cmp	r6, #0
 801377a:	d051      	beq.n	8013820 <ucdr_serialize_uint32_t+0xfc>
 801377c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013780:	706b      	strb	r3, [r5, #1]
 8013782:	2e01      	cmp	r6, #1
 8013784:	d050      	beq.n	8013828 <ucdr_serialize_uint32_t+0x104>
 8013786:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801378a:	70ab      	strb	r3, [r5, #2]
 801378c:	2e02      	cmp	r6, #2
 801378e:	d04f      	beq.n	8013830 <ucdr_serialize_uint32_t+0x10c>
 8013790:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013794:	70eb      	strb	r3, [r5, #3]
 8013796:	6923      	ldr	r3, [r4, #16]
 8013798:	68a2      	ldr	r2, [r4, #8]
 801379a:	7da0      	ldrb	r0, [r4, #22]
 801379c:	3304      	adds	r3, #4
 801379e:	1b9b      	subs	r3, r3, r6
 80137a0:	4442      	add	r2, r8
 80137a2:	2104      	movs	r1, #4
 80137a4:	f080 0001 	eor.w	r0, r0, #1
 80137a8:	6123      	str	r3, [r4, #16]
 80137aa:	60a2      	str	r2, [r4, #8]
 80137ac:	7561      	strb	r1, [r4, #21]
 80137ae:	b002      	add	sp, #8
 80137b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137b4:	2104      	movs	r1, #4
 80137b6:	4620      	mov	r0, r4
 80137b8:	f7fa fe08 	bl	800e3cc <ucdr_check_final_buffer_behavior>
 80137bc:	b1d0      	cbz	r0, 80137f4 <ucdr_serialize_uint32_t+0xd0>
 80137be:	7d23      	ldrb	r3, [r4, #20]
 80137c0:	2b01      	cmp	r3, #1
 80137c2:	68a3      	ldr	r3, [r4, #8]
 80137c4:	d01c      	beq.n	8013800 <ucdr_serialize_uint32_t+0xdc>
 80137c6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80137ca:	701a      	strb	r2, [r3, #0]
 80137cc:	68a3      	ldr	r3, [r4, #8]
 80137ce:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80137d2:	705a      	strb	r2, [r3, #1]
 80137d4:	68a3      	ldr	r3, [r4, #8]
 80137d6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80137da:	709a      	strb	r2, [r3, #2]
 80137dc:	68a3      	ldr	r3, [r4, #8]
 80137de:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80137e2:	70da      	strb	r2, [r3, #3]
 80137e4:	68a2      	ldr	r2, [r4, #8]
 80137e6:	6923      	ldr	r3, [r4, #16]
 80137e8:	3204      	adds	r2, #4
 80137ea:	3304      	adds	r3, #4
 80137ec:	2104      	movs	r1, #4
 80137ee:	60a2      	str	r2, [r4, #8]
 80137f0:	6123      	str	r3, [r4, #16]
 80137f2:	7561      	strb	r1, [r4, #21]
 80137f4:	7da0      	ldrb	r0, [r4, #22]
 80137f6:	f080 0001 	eor.w	r0, r0, #1
 80137fa:	b002      	add	sp, #8
 80137fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013800:	9a01      	ldr	r2, [sp, #4]
 8013802:	601a      	str	r2, [r3, #0]
 8013804:	e7ee      	b.n	80137e4 <ucdr_serialize_uint32_t+0xc0>
 8013806:	68a2      	ldr	r2, [r4, #8]
 8013808:	6923      	ldr	r3, [r4, #16]
 801380a:	7da0      	ldrb	r0, [r4, #22]
 801380c:	7567      	strb	r7, [r4, #21]
 801380e:	1b92      	subs	r2, r2, r6
 8013810:	1b9b      	subs	r3, r3, r6
 8013812:	f080 0001 	eor.w	r0, r0, #1
 8013816:	60a2      	str	r2, [r4, #8]
 8013818:	6123      	str	r3, [r4, #16]
 801381a:	b002      	add	sp, #8
 801381c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013820:	68a3      	ldr	r3, [r4, #8]
 8013822:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013826:	701a      	strb	r2, [r3, #0]
 8013828:	68a3      	ldr	r3, [r4, #8]
 801382a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801382e:	701a      	strb	r2, [r3, #0]
 8013830:	68a3      	ldr	r3, [r4, #8]
 8013832:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013836:	701a      	strb	r2, [r3, #0]
 8013838:	e7ad      	b.n	8013796 <ucdr_serialize_uint32_t+0x72>
 801383a:	4628      	mov	r0, r5
 801383c:	ad01      	add	r5, sp, #4
 801383e:	4629      	mov	r1, r5
 8013840:	4632      	mov	r2, r6
 8013842:	f002 feb9 	bl	80165b8 <memcpy>
 8013846:	68a0      	ldr	r0, [r4, #8]
 8013848:	4642      	mov	r2, r8
 801384a:	19a9      	adds	r1, r5, r6
 801384c:	f002 feb4 	bl	80165b8 <memcpy>
 8013850:	e7a1      	b.n	8013796 <ucdr_serialize_uint32_t+0x72>
 8013852:	bf00      	nop

08013854 <ucdr_serialize_endian_uint32_t>:
 8013854:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013858:	b083      	sub	sp, #12
 801385a:	460d      	mov	r5, r1
 801385c:	2104      	movs	r1, #4
 801385e:	4604      	mov	r4, r0
 8013860:	9201      	str	r2, [sp, #4]
 8013862:	f7fa fe05 	bl	800e470 <ucdr_buffer_alignment>
 8013866:	4601      	mov	r1, r0
 8013868:	4620      	mov	r0, r4
 801386a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801386e:	f7fa fe43 	bl	800e4f8 <ucdr_advance_buffer>
 8013872:	4620      	mov	r0, r4
 8013874:	2104      	movs	r1, #4
 8013876:	f7fa fd9d 	bl	800e3b4 <ucdr_check_buffer_available_for>
 801387a:	2800      	cmp	r0, #0
 801387c:	d138      	bne.n	80138f0 <ucdr_serialize_endian_uint32_t+0x9c>
 801387e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8013882:	42b7      	cmp	r7, r6
 8013884:	d92f      	bls.n	80138e6 <ucdr_serialize_endian_uint32_t+0x92>
 8013886:	6922      	ldr	r2, [r4, #16]
 8013888:	60a7      	str	r7, [r4, #8]
 801388a:	1bbf      	subs	r7, r7, r6
 801388c:	443a      	add	r2, r7
 801388e:	f1c7 0904 	rsb	r9, r7, #4
 8013892:	6122      	str	r2, [r4, #16]
 8013894:	4649      	mov	r1, r9
 8013896:	4620      	mov	r0, r4
 8013898:	f7fa fd98 	bl	800e3cc <ucdr_check_final_buffer_behavior>
 801389c:	2800      	cmp	r0, #0
 801389e:	d04a      	beq.n	8013936 <ucdr_serialize_endian_uint32_t+0xe2>
 80138a0:	2d01      	cmp	r5, #1
 80138a2:	d063      	beq.n	801396c <ucdr_serialize_endian_uint32_t+0x118>
 80138a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80138a8:	7033      	strb	r3, [r6, #0]
 80138aa:	2f00      	cmp	r7, #0
 80138ac:	d051      	beq.n	8013952 <ucdr_serialize_endian_uint32_t+0xfe>
 80138ae:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80138b2:	7073      	strb	r3, [r6, #1]
 80138b4:	2f01      	cmp	r7, #1
 80138b6:	d050      	beq.n	801395a <ucdr_serialize_endian_uint32_t+0x106>
 80138b8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80138bc:	70b3      	strb	r3, [r6, #2]
 80138be:	2f02      	cmp	r7, #2
 80138c0:	d04f      	beq.n	8013962 <ucdr_serialize_endian_uint32_t+0x10e>
 80138c2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80138c6:	70f3      	strb	r3, [r6, #3]
 80138c8:	6923      	ldr	r3, [r4, #16]
 80138ca:	68a2      	ldr	r2, [r4, #8]
 80138cc:	7da0      	ldrb	r0, [r4, #22]
 80138ce:	3304      	adds	r3, #4
 80138d0:	1bdb      	subs	r3, r3, r7
 80138d2:	444a      	add	r2, r9
 80138d4:	2104      	movs	r1, #4
 80138d6:	f080 0001 	eor.w	r0, r0, #1
 80138da:	6123      	str	r3, [r4, #16]
 80138dc:	60a2      	str	r2, [r4, #8]
 80138de:	7561      	strb	r1, [r4, #21]
 80138e0:	b003      	add	sp, #12
 80138e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80138e6:	2104      	movs	r1, #4
 80138e8:	4620      	mov	r0, r4
 80138ea:	f7fa fd6f 	bl	800e3cc <ucdr_check_final_buffer_behavior>
 80138ee:	b1c8      	cbz	r0, 8013924 <ucdr_serialize_endian_uint32_t+0xd0>
 80138f0:	2d01      	cmp	r5, #1
 80138f2:	68a3      	ldr	r3, [r4, #8]
 80138f4:	d01c      	beq.n	8013930 <ucdr_serialize_endian_uint32_t+0xdc>
 80138f6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80138fa:	701a      	strb	r2, [r3, #0]
 80138fc:	68a3      	ldr	r3, [r4, #8]
 80138fe:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013902:	705a      	strb	r2, [r3, #1]
 8013904:	68a3      	ldr	r3, [r4, #8]
 8013906:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801390a:	709a      	strb	r2, [r3, #2]
 801390c:	68a3      	ldr	r3, [r4, #8]
 801390e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013912:	70da      	strb	r2, [r3, #3]
 8013914:	68a2      	ldr	r2, [r4, #8]
 8013916:	6923      	ldr	r3, [r4, #16]
 8013918:	3204      	adds	r2, #4
 801391a:	3304      	adds	r3, #4
 801391c:	2104      	movs	r1, #4
 801391e:	60a2      	str	r2, [r4, #8]
 8013920:	6123      	str	r3, [r4, #16]
 8013922:	7561      	strb	r1, [r4, #21]
 8013924:	7da0      	ldrb	r0, [r4, #22]
 8013926:	f080 0001 	eor.w	r0, r0, #1
 801392a:	b003      	add	sp, #12
 801392c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013930:	9a01      	ldr	r2, [sp, #4]
 8013932:	601a      	str	r2, [r3, #0]
 8013934:	e7ee      	b.n	8013914 <ucdr_serialize_endian_uint32_t+0xc0>
 8013936:	68a2      	ldr	r2, [r4, #8]
 8013938:	6923      	ldr	r3, [r4, #16]
 801393a:	7da0      	ldrb	r0, [r4, #22]
 801393c:	f884 8015 	strb.w	r8, [r4, #21]
 8013940:	1bd2      	subs	r2, r2, r7
 8013942:	1bdb      	subs	r3, r3, r7
 8013944:	f080 0001 	eor.w	r0, r0, #1
 8013948:	60a2      	str	r2, [r4, #8]
 801394a:	6123      	str	r3, [r4, #16]
 801394c:	b003      	add	sp, #12
 801394e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013952:	68a3      	ldr	r3, [r4, #8]
 8013954:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013958:	701a      	strb	r2, [r3, #0]
 801395a:	68a3      	ldr	r3, [r4, #8]
 801395c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013960:	701a      	strb	r2, [r3, #0]
 8013962:	68a3      	ldr	r3, [r4, #8]
 8013964:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013968:	701a      	strb	r2, [r3, #0]
 801396a:	e7ad      	b.n	80138c8 <ucdr_serialize_endian_uint32_t+0x74>
 801396c:	ad01      	add	r5, sp, #4
 801396e:	4629      	mov	r1, r5
 8013970:	463a      	mov	r2, r7
 8013972:	4630      	mov	r0, r6
 8013974:	f002 fe20 	bl	80165b8 <memcpy>
 8013978:	68a0      	ldr	r0, [r4, #8]
 801397a:	464a      	mov	r2, r9
 801397c:	19e9      	adds	r1, r5, r7
 801397e:	f002 fe1b 	bl	80165b8 <memcpy>
 8013982:	e7a1      	b.n	80138c8 <ucdr_serialize_endian_uint32_t+0x74>

08013984 <ucdr_deserialize_uint32_t>:
 8013984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013988:	460d      	mov	r5, r1
 801398a:	2104      	movs	r1, #4
 801398c:	4604      	mov	r4, r0
 801398e:	f7fa fd6f 	bl	800e470 <ucdr_buffer_alignment>
 8013992:	4601      	mov	r1, r0
 8013994:	4620      	mov	r0, r4
 8013996:	f894 8015 	ldrb.w	r8, [r4, #21]
 801399a:	f7fa fdad 	bl	800e4f8 <ucdr_advance_buffer>
 801399e:	4620      	mov	r0, r4
 80139a0:	2104      	movs	r1, #4
 80139a2:	f7fa fd07 	bl	800e3b4 <ucdr_check_buffer_available_for>
 80139a6:	2800      	cmp	r0, #0
 80139a8:	d138      	bne.n	8013a1c <ucdr_deserialize_uint32_t+0x98>
 80139aa:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80139ae:	42b7      	cmp	r7, r6
 80139b0:	d92f      	bls.n	8013a12 <ucdr_deserialize_uint32_t+0x8e>
 80139b2:	6922      	ldr	r2, [r4, #16]
 80139b4:	60a7      	str	r7, [r4, #8]
 80139b6:	1bbf      	subs	r7, r7, r6
 80139b8:	443a      	add	r2, r7
 80139ba:	f1c7 0904 	rsb	r9, r7, #4
 80139be:	6122      	str	r2, [r4, #16]
 80139c0:	4649      	mov	r1, r9
 80139c2:	4620      	mov	r0, r4
 80139c4:	f7fa fd02 	bl	800e3cc <ucdr_check_final_buffer_behavior>
 80139c8:	2800      	cmp	r0, #0
 80139ca:	d046      	beq.n	8013a5a <ucdr_deserialize_uint32_t+0xd6>
 80139cc:	7d23      	ldrb	r3, [r4, #20]
 80139ce:	2b01      	cmp	r3, #1
 80139d0:	d05c      	beq.n	8013a8c <ucdr_deserialize_uint32_t+0x108>
 80139d2:	78f3      	ldrb	r3, [r6, #3]
 80139d4:	702b      	strb	r3, [r5, #0]
 80139d6:	2f00      	cmp	r7, #0
 80139d8:	d04c      	beq.n	8013a74 <ucdr_deserialize_uint32_t+0xf0>
 80139da:	78b3      	ldrb	r3, [r6, #2]
 80139dc:	706b      	strb	r3, [r5, #1]
 80139de:	2f01      	cmp	r7, #1
 80139e0:	f105 0302 	add.w	r3, r5, #2
 80139e4:	d04a      	beq.n	8013a7c <ucdr_deserialize_uint32_t+0xf8>
 80139e6:	7873      	ldrb	r3, [r6, #1]
 80139e8:	70ab      	strb	r3, [r5, #2]
 80139ea:	2f02      	cmp	r7, #2
 80139ec:	f105 0303 	add.w	r3, r5, #3
 80139f0:	d048      	beq.n	8013a84 <ucdr_deserialize_uint32_t+0x100>
 80139f2:	7833      	ldrb	r3, [r6, #0]
 80139f4:	70eb      	strb	r3, [r5, #3]
 80139f6:	6923      	ldr	r3, [r4, #16]
 80139f8:	68a2      	ldr	r2, [r4, #8]
 80139fa:	7da0      	ldrb	r0, [r4, #22]
 80139fc:	2104      	movs	r1, #4
 80139fe:	3304      	adds	r3, #4
 8013a00:	1bdb      	subs	r3, r3, r7
 8013a02:	444a      	add	r2, r9
 8013a04:	7561      	strb	r1, [r4, #21]
 8013a06:	6123      	str	r3, [r4, #16]
 8013a08:	60a2      	str	r2, [r4, #8]
 8013a0a:	f080 0001 	eor.w	r0, r0, #1
 8013a0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a12:	2104      	movs	r1, #4
 8013a14:	4620      	mov	r0, r4
 8013a16:	f7fa fcd9 	bl	800e3cc <ucdr_check_final_buffer_behavior>
 8013a1a:	b1b0      	cbz	r0, 8013a4a <ucdr_deserialize_uint32_t+0xc6>
 8013a1c:	7d23      	ldrb	r3, [r4, #20]
 8013a1e:	2b01      	cmp	r3, #1
 8013a20:	68a3      	ldr	r3, [r4, #8]
 8013a22:	d017      	beq.n	8013a54 <ucdr_deserialize_uint32_t+0xd0>
 8013a24:	78db      	ldrb	r3, [r3, #3]
 8013a26:	702b      	strb	r3, [r5, #0]
 8013a28:	68a3      	ldr	r3, [r4, #8]
 8013a2a:	789b      	ldrb	r3, [r3, #2]
 8013a2c:	706b      	strb	r3, [r5, #1]
 8013a2e:	68a3      	ldr	r3, [r4, #8]
 8013a30:	785b      	ldrb	r3, [r3, #1]
 8013a32:	70ab      	strb	r3, [r5, #2]
 8013a34:	68a3      	ldr	r3, [r4, #8]
 8013a36:	781b      	ldrb	r3, [r3, #0]
 8013a38:	70eb      	strb	r3, [r5, #3]
 8013a3a:	68a2      	ldr	r2, [r4, #8]
 8013a3c:	6923      	ldr	r3, [r4, #16]
 8013a3e:	3204      	adds	r2, #4
 8013a40:	3304      	adds	r3, #4
 8013a42:	2104      	movs	r1, #4
 8013a44:	60a2      	str	r2, [r4, #8]
 8013a46:	6123      	str	r3, [r4, #16]
 8013a48:	7561      	strb	r1, [r4, #21]
 8013a4a:	7da0      	ldrb	r0, [r4, #22]
 8013a4c:	f080 0001 	eor.w	r0, r0, #1
 8013a50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	602b      	str	r3, [r5, #0]
 8013a58:	e7ef      	b.n	8013a3a <ucdr_deserialize_uint32_t+0xb6>
 8013a5a:	68a2      	ldr	r2, [r4, #8]
 8013a5c:	6923      	ldr	r3, [r4, #16]
 8013a5e:	7da0      	ldrb	r0, [r4, #22]
 8013a60:	f884 8015 	strb.w	r8, [r4, #21]
 8013a64:	1bd2      	subs	r2, r2, r7
 8013a66:	1bdb      	subs	r3, r3, r7
 8013a68:	60a2      	str	r2, [r4, #8]
 8013a6a:	6123      	str	r3, [r4, #16]
 8013a6c:	f080 0001 	eor.w	r0, r0, #1
 8013a70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a74:	68a3      	ldr	r3, [r4, #8]
 8013a76:	789b      	ldrb	r3, [r3, #2]
 8013a78:	706b      	strb	r3, [r5, #1]
 8013a7a:	1cab      	adds	r3, r5, #2
 8013a7c:	68a2      	ldr	r2, [r4, #8]
 8013a7e:	7852      	ldrb	r2, [r2, #1]
 8013a80:	f803 2b01 	strb.w	r2, [r3], #1
 8013a84:	68a2      	ldr	r2, [r4, #8]
 8013a86:	7812      	ldrb	r2, [r2, #0]
 8013a88:	701a      	strb	r2, [r3, #0]
 8013a8a:	e7b4      	b.n	80139f6 <ucdr_deserialize_uint32_t+0x72>
 8013a8c:	4631      	mov	r1, r6
 8013a8e:	463a      	mov	r2, r7
 8013a90:	4628      	mov	r0, r5
 8013a92:	f002 fd91 	bl	80165b8 <memcpy>
 8013a96:	68a1      	ldr	r1, [r4, #8]
 8013a98:	464a      	mov	r2, r9
 8013a9a:	19e8      	adds	r0, r5, r7
 8013a9c:	f002 fd8c 	bl	80165b8 <memcpy>
 8013aa0:	e7a9      	b.n	80139f6 <ucdr_deserialize_uint32_t+0x72>
 8013aa2:	bf00      	nop

08013aa4 <ucdr_deserialize_endian_uint32_t>:
 8013aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013aa8:	460e      	mov	r6, r1
 8013aaa:	2104      	movs	r1, #4
 8013aac:	4604      	mov	r4, r0
 8013aae:	4615      	mov	r5, r2
 8013ab0:	f7fa fcde 	bl	800e470 <ucdr_buffer_alignment>
 8013ab4:	4601      	mov	r1, r0
 8013ab6:	4620      	mov	r0, r4
 8013ab8:	f894 9015 	ldrb.w	r9, [r4, #21]
 8013abc:	f7fa fd1c 	bl	800e4f8 <ucdr_advance_buffer>
 8013ac0:	4620      	mov	r0, r4
 8013ac2:	2104      	movs	r1, #4
 8013ac4:	f7fa fc76 	bl	800e3b4 <ucdr_check_buffer_available_for>
 8013ac8:	2800      	cmp	r0, #0
 8013aca:	d13c      	bne.n	8013b46 <ucdr_deserialize_endian_uint32_t+0xa2>
 8013acc:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8013ad0:	42bb      	cmp	r3, r7
 8013ad2:	d933      	bls.n	8013b3c <ucdr_deserialize_endian_uint32_t+0x98>
 8013ad4:	6922      	ldr	r2, [r4, #16]
 8013ad6:	60a3      	str	r3, [r4, #8]
 8013ad8:	eba3 0807 	sub.w	r8, r3, r7
 8013adc:	4442      	add	r2, r8
 8013ade:	f1c8 0a04 	rsb	sl, r8, #4
 8013ae2:	6122      	str	r2, [r4, #16]
 8013ae4:	4651      	mov	r1, sl
 8013ae6:	4620      	mov	r0, r4
 8013ae8:	f7fa fc70 	bl	800e3cc <ucdr_check_final_buffer_behavior>
 8013aec:	2800      	cmp	r0, #0
 8013aee:	d048      	beq.n	8013b82 <ucdr_deserialize_endian_uint32_t+0xde>
 8013af0:	2e01      	cmp	r6, #1
 8013af2:	d061      	beq.n	8013bb8 <ucdr_deserialize_endian_uint32_t+0x114>
 8013af4:	78fb      	ldrb	r3, [r7, #3]
 8013af6:	702b      	strb	r3, [r5, #0]
 8013af8:	f1b8 0f00 	cmp.w	r8, #0
 8013afc:	d050      	beq.n	8013ba0 <ucdr_deserialize_endian_uint32_t+0xfc>
 8013afe:	78bb      	ldrb	r3, [r7, #2]
 8013b00:	706b      	strb	r3, [r5, #1]
 8013b02:	f1b8 0f01 	cmp.w	r8, #1
 8013b06:	f105 0302 	add.w	r3, r5, #2
 8013b0a:	d04d      	beq.n	8013ba8 <ucdr_deserialize_endian_uint32_t+0x104>
 8013b0c:	787b      	ldrb	r3, [r7, #1]
 8013b0e:	70ab      	strb	r3, [r5, #2]
 8013b10:	f1b8 0f02 	cmp.w	r8, #2
 8013b14:	f105 0303 	add.w	r3, r5, #3
 8013b18:	d04a      	beq.n	8013bb0 <ucdr_deserialize_endian_uint32_t+0x10c>
 8013b1a:	783b      	ldrb	r3, [r7, #0]
 8013b1c:	70eb      	strb	r3, [r5, #3]
 8013b1e:	6923      	ldr	r3, [r4, #16]
 8013b20:	68a2      	ldr	r2, [r4, #8]
 8013b22:	7da0      	ldrb	r0, [r4, #22]
 8013b24:	2104      	movs	r1, #4
 8013b26:	3304      	adds	r3, #4
 8013b28:	eba3 0308 	sub.w	r3, r3, r8
 8013b2c:	4452      	add	r2, sl
 8013b2e:	7561      	strb	r1, [r4, #21]
 8013b30:	6123      	str	r3, [r4, #16]
 8013b32:	60a2      	str	r2, [r4, #8]
 8013b34:	f080 0001 	eor.w	r0, r0, #1
 8013b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b3c:	2104      	movs	r1, #4
 8013b3e:	4620      	mov	r0, r4
 8013b40:	f7fa fc44 	bl	800e3cc <ucdr_check_final_buffer_behavior>
 8013b44:	b1a8      	cbz	r0, 8013b72 <ucdr_deserialize_endian_uint32_t+0xce>
 8013b46:	2e01      	cmp	r6, #1
 8013b48:	68a3      	ldr	r3, [r4, #8]
 8013b4a:	d017      	beq.n	8013b7c <ucdr_deserialize_endian_uint32_t+0xd8>
 8013b4c:	78db      	ldrb	r3, [r3, #3]
 8013b4e:	702b      	strb	r3, [r5, #0]
 8013b50:	68a3      	ldr	r3, [r4, #8]
 8013b52:	789b      	ldrb	r3, [r3, #2]
 8013b54:	706b      	strb	r3, [r5, #1]
 8013b56:	68a3      	ldr	r3, [r4, #8]
 8013b58:	785b      	ldrb	r3, [r3, #1]
 8013b5a:	70ab      	strb	r3, [r5, #2]
 8013b5c:	68a3      	ldr	r3, [r4, #8]
 8013b5e:	781b      	ldrb	r3, [r3, #0]
 8013b60:	70eb      	strb	r3, [r5, #3]
 8013b62:	68a2      	ldr	r2, [r4, #8]
 8013b64:	6923      	ldr	r3, [r4, #16]
 8013b66:	3204      	adds	r2, #4
 8013b68:	3304      	adds	r3, #4
 8013b6a:	2104      	movs	r1, #4
 8013b6c:	60a2      	str	r2, [r4, #8]
 8013b6e:	6123      	str	r3, [r4, #16]
 8013b70:	7561      	strb	r1, [r4, #21]
 8013b72:	7da0      	ldrb	r0, [r4, #22]
 8013b74:	f080 0001 	eor.w	r0, r0, #1
 8013b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	602b      	str	r3, [r5, #0]
 8013b80:	e7ef      	b.n	8013b62 <ucdr_deserialize_endian_uint32_t+0xbe>
 8013b82:	68a2      	ldr	r2, [r4, #8]
 8013b84:	6923      	ldr	r3, [r4, #16]
 8013b86:	7da0      	ldrb	r0, [r4, #22]
 8013b88:	f884 9015 	strb.w	r9, [r4, #21]
 8013b8c:	eba2 0208 	sub.w	r2, r2, r8
 8013b90:	eba3 0308 	sub.w	r3, r3, r8
 8013b94:	60a2      	str	r2, [r4, #8]
 8013b96:	6123      	str	r3, [r4, #16]
 8013b98:	f080 0001 	eor.w	r0, r0, #1
 8013b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ba0:	68a3      	ldr	r3, [r4, #8]
 8013ba2:	789b      	ldrb	r3, [r3, #2]
 8013ba4:	706b      	strb	r3, [r5, #1]
 8013ba6:	1cab      	adds	r3, r5, #2
 8013ba8:	68a2      	ldr	r2, [r4, #8]
 8013baa:	7852      	ldrb	r2, [r2, #1]
 8013bac:	f803 2b01 	strb.w	r2, [r3], #1
 8013bb0:	68a2      	ldr	r2, [r4, #8]
 8013bb2:	7812      	ldrb	r2, [r2, #0]
 8013bb4:	701a      	strb	r2, [r3, #0]
 8013bb6:	e7b2      	b.n	8013b1e <ucdr_deserialize_endian_uint32_t+0x7a>
 8013bb8:	4639      	mov	r1, r7
 8013bba:	4642      	mov	r2, r8
 8013bbc:	4628      	mov	r0, r5
 8013bbe:	f002 fcfb 	bl	80165b8 <memcpy>
 8013bc2:	68a1      	ldr	r1, [r4, #8]
 8013bc4:	4652      	mov	r2, sl
 8013bc6:	eb05 0008 	add.w	r0, r5, r8
 8013bca:	f002 fcf5 	bl	80165b8 <memcpy>
 8013bce:	e7a6      	b.n	8013b1e <ucdr_deserialize_endian_uint32_t+0x7a>

08013bd0 <ucdr_serialize_uint64_t>:
 8013bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bd4:	2108      	movs	r1, #8
 8013bd6:	b082      	sub	sp, #8
 8013bd8:	4604      	mov	r4, r0
 8013bda:	e9cd 2300 	strd	r2, r3, [sp]
 8013bde:	f7fa fc47 	bl	800e470 <ucdr_buffer_alignment>
 8013be2:	4601      	mov	r1, r0
 8013be4:	4620      	mov	r0, r4
 8013be6:	7d67      	ldrb	r7, [r4, #21]
 8013be8:	f7fa fc86 	bl	800e4f8 <ucdr_advance_buffer>
 8013bec:	4620      	mov	r0, r4
 8013bee:	2108      	movs	r1, #8
 8013bf0:	f7fa fbe0 	bl	800e3b4 <ucdr_check_buffer_available_for>
 8013bf4:	2800      	cmp	r0, #0
 8013bf6:	d14e      	bne.n	8013c96 <ucdr_serialize_uint64_t+0xc6>
 8013bf8:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 8013bfc:	42b5      	cmp	r5, r6
 8013bfe:	d945      	bls.n	8013c8c <ucdr_serialize_uint64_t+0xbc>
 8013c00:	6923      	ldr	r3, [r4, #16]
 8013c02:	60a5      	str	r5, [r4, #8]
 8013c04:	1bad      	subs	r5, r5, r6
 8013c06:	442b      	add	r3, r5
 8013c08:	f1c5 0808 	rsb	r8, r5, #8
 8013c0c:	6123      	str	r3, [r4, #16]
 8013c0e:	4641      	mov	r1, r8
 8013c10:	4620      	mov	r0, r4
 8013c12:	f7fa fbdb 	bl	800e3cc <ucdr_check_final_buffer_behavior>
 8013c16:	2800      	cmp	r0, #0
 8013c18:	d074      	beq.n	8013d04 <ucdr_serialize_uint64_t+0x134>
 8013c1a:	7d23      	ldrb	r3, [r4, #20]
 8013c1c:	2b01      	cmp	r3, #1
 8013c1e:	f000 809b 	beq.w	8013d58 <ucdr_serialize_uint64_t+0x188>
 8013c22:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013c26:	7033      	strb	r3, [r6, #0]
 8013c28:	2d00      	cmp	r5, #0
 8013c2a:	d078      	beq.n	8013d1e <ucdr_serialize_uint64_t+0x14e>
 8013c2c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013c30:	7073      	strb	r3, [r6, #1]
 8013c32:	2d01      	cmp	r5, #1
 8013c34:	d077      	beq.n	8013d26 <ucdr_serialize_uint64_t+0x156>
 8013c36:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013c3a:	70b3      	strb	r3, [r6, #2]
 8013c3c:	2d02      	cmp	r5, #2
 8013c3e:	d076      	beq.n	8013d2e <ucdr_serialize_uint64_t+0x15e>
 8013c40:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013c44:	70f3      	strb	r3, [r6, #3]
 8013c46:	2d03      	cmp	r5, #3
 8013c48:	d075      	beq.n	8013d36 <ucdr_serialize_uint64_t+0x166>
 8013c4a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8013c4e:	7133      	strb	r3, [r6, #4]
 8013c50:	2d04      	cmp	r5, #4
 8013c52:	d074      	beq.n	8013d3e <ucdr_serialize_uint64_t+0x16e>
 8013c54:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8013c58:	7173      	strb	r3, [r6, #5]
 8013c5a:	2d05      	cmp	r5, #5
 8013c5c:	d073      	beq.n	8013d46 <ucdr_serialize_uint64_t+0x176>
 8013c5e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8013c62:	71b3      	strb	r3, [r6, #6]
 8013c64:	2d06      	cmp	r5, #6
 8013c66:	d072      	beq.n	8013d4e <ucdr_serialize_uint64_t+0x17e>
 8013c68:	f89d 3000 	ldrb.w	r3, [sp]
 8013c6c:	71f3      	strb	r3, [r6, #7]
 8013c6e:	6923      	ldr	r3, [r4, #16]
 8013c70:	68a2      	ldr	r2, [r4, #8]
 8013c72:	7da0      	ldrb	r0, [r4, #22]
 8013c74:	3308      	adds	r3, #8
 8013c76:	1b5d      	subs	r5, r3, r5
 8013c78:	4442      	add	r2, r8
 8013c7a:	2308      	movs	r3, #8
 8013c7c:	f080 0001 	eor.w	r0, r0, #1
 8013c80:	6125      	str	r5, [r4, #16]
 8013c82:	60a2      	str	r2, [r4, #8]
 8013c84:	7563      	strb	r3, [r4, #21]
 8013c86:	b002      	add	sp, #8
 8013c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c8c:	2108      	movs	r1, #8
 8013c8e:	4620      	mov	r0, r4
 8013c90:	f7fa fb9c 	bl	800e3cc <ucdr_check_final_buffer_behavior>
 8013c94:	b350      	cbz	r0, 8013cec <ucdr_serialize_uint64_t+0x11c>
 8013c96:	7d23      	ldrb	r3, [r4, #20]
 8013c98:	2b01      	cmp	r3, #1
 8013c9a:	d02d      	beq.n	8013cf8 <ucdr_serialize_uint64_t+0x128>
 8013c9c:	68a3      	ldr	r3, [r4, #8]
 8013c9e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013ca2:	701a      	strb	r2, [r3, #0]
 8013ca4:	68a3      	ldr	r3, [r4, #8]
 8013ca6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013caa:	705a      	strb	r2, [r3, #1]
 8013cac:	68a3      	ldr	r3, [r4, #8]
 8013cae:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013cb2:	709a      	strb	r2, [r3, #2]
 8013cb4:	68a3      	ldr	r3, [r4, #8]
 8013cb6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013cba:	70da      	strb	r2, [r3, #3]
 8013cbc:	68a3      	ldr	r3, [r4, #8]
 8013cbe:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8013cc2:	711a      	strb	r2, [r3, #4]
 8013cc4:	68a3      	ldr	r3, [r4, #8]
 8013cc6:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8013cca:	715a      	strb	r2, [r3, #5]
 8013ccc:	68a3      	ldr	r3, [r4, #8]
 8013cce:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8013cd2:	719a      	strb	r2, [r3, #6]
 8013cd4:	68a3      	ldr	r3, [r4, #8]
 8013cd6:	f89d 2000 	ldrb.w	r2, [sp]
 8013cda:	71da      	strb	r2, [r3, #7]
 8013cdc:	68a2      	ldr	r2, [r4, #8]
 8013cde:	6923      	ldr	r3, [r4, #16]
 8013ce0:	3208      	adds	r2, #8
 8013ce2:	3308      	adds	r3, #8
 8013ce4:	2108      	movs	r1, #8
 8013ce6:	60a2      	str	r2, [r4, #8]
 8013ce8:	6123      	str	r3, [r4, #16]
 8013cea:	7561      	strb	r1, [r4, #21]
 8013cec:	7da0      	ldrb	r0, [r4, #22]
 8013cee:	f080 0001 	eor.w	r0, r0, #1
 8013cf2:	b002      	add	sp, #8
 8013cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cf8:	466b      	mov	r3, sp
 8013cfa:	cb03      	ldmia	r3!, {r0, r1}
 8013cfc:	68a3      	ldr	r3, [r4, #8]
 8013cfe:	6018      	str	r0, [r3, #0]
 8013d00:	6059      	str	r1, [r3, #4]
 8013d02:	e7eb      	b.n	8013cdc <ucdr_serialize_uint64_t+0x10c>
 8013d04:	68a2      	ldr	r2, [r4, #8]
 8013d06:	6923      	ldr	r3, [r4, #16]
 8013d08:	7da0      	ldrb	r0, [r4, #22]
 8013d0a:	7567      	strb	r7, [r4, #21]
 8013d0c:	1b52      	subs	r2, r2, r5
 8013d0e:	f080 0001 	eor.w	r0, r0, #1
 8013d12:	1b5d      	subs	r5, r3, r5
 8013d14:	60a2      	str	r2, [r4, #8]
 8013d16:	6125      	str	r5, [r4, #16]
 8013d18:	b002      	add	sp, #8
 8013d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d1e:	68a3      	ldr	r3, [r4, #8]
 8013d20:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013d24:	701a      	strb	r2, [r3, #0]
 8013d26:	68a3      	ldr	r3, [r4, #8]
 8013d28:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013d2c:	701a      	strb	r2, [r3, #0]
 8013d2e:	68a3      	ldr	r3, [r4, #8]
 8013d30:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013d34:	701a      	strb	r2, [r3, #0]
 8013d36:	68a3      	ldr	r3, [r4, #8]
 8013d38:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8013d3c:	701a      	strb	r2, [r3, #0]
 8013d3e:	68a3      	ldr	r3, [r4, #8]
 8013d40:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8013d44:	701a      	strb	r2, [r3, #0]
 8013d46:	68a3      	ldr	r3, [r4, #8]
 8013d48:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8013d4c:	701a      	strb	r2, [r3, #0]
 8013d4e:	68a3      	ldr	r3, [r4, #8]
 8013d50:	f89d 2000 	ldrb.w	r2, [sp]
 8013d54:	701a      	strb	r2, [r3, #0]
 8013d56:	e78a      	b.n	8013c6e <ucdr_serialize_uint64_t+0x9e>
 8013d58:	4630      	mov	r0, r6
 8013d5a:	466e      	mov	r6, sp
 8013d5c:	4631      	mov	r1, r6
 8013d5e:	462a      	mov	r2, r5
 8013d60:	f002 fc2a 	bl	80165b8 <memcpy>
 8013d64:	68a0      	ldr	r0, [r4, #8]
 8013d66:	4642      	mov	r2, r8
 8013d68:	1971      	adds	r1, r6, r5
 8013d6a:	f002 fc25 	bl	80165b8 <memcpy>
 8013d6e:	e77e      	b.n	8013c6e <ucdr_serialize_uint64_t+0x9e>

08013d70 <ucdr_serialize_int16_t>:
 8013d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d74:	b082      	sub	sp, #8
 8013d76:	460b      	mov	r3, r1
 8013d78:	2102      	movs	r1, #2
 8013d7a:	4604      	mov	r4, r0
 8013d7c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013d80:	f7fa fb76 	bl	800e470 <ucdr_buffer_alignment>
 8013d84:	4601      	mov	r1, r0
 8013d86:	4620      	mov	r0, r4
 8013d88:	7d67      	ldrb	r7, [r4, #21]
 8013d8a:	f7fa fbb5 	bl	800e4f8 <ucdr_advance_buffer>
 8013d8e:	4620      	mov	r0, r4
 8013d90:	2102      	movs	r1, #2
 8013d92:	f7fa fb0f 	bl	800e3b4 <ucdr_check_buffer_available_for>
 8013d96:	bb78      	cbnz	r0, 8013df8 <ucdr_serialize_int16_t+0x88>
 8013d98:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 8013d9c:	42b5      	cmp	r5, r6
 8013d9e:	d926      	bls.n	8013dee <ucdr_serialize_int16_t+0x7e>
 8013da0:	6922      	ldr	r2, [r4, #16]
 8013da2:	60a5      	str	r5, [r4, #8]
 8013da4:	1bad      	subs	r5, r5, r6
 8013da6:	442a      	add	r2, r5
 8013da8:	f1c5 0802 	rsb	r8, r5, #2
 8013dac:	6122      	str	r2, [r4, #16]
 8013dae:	4641      	mov	r1, r8
 8013db0:	4620      	mov	r0, r4
 8013db2:	f7fa fb0b 	bl	800e3cc <ucdr_check_final_buffer_behavior>
 8013db6:	2800      	cmp	r0, #0
 8013db8:	d03b      	beq.n	8013e32 <ucdr_serialize_int16_t+0xc2>
 8013dba:	7d23      	ldrb	r3, [r4, #20]
 8013dbc:	2b01      	cmp	r3, #1
 8013dbe:	d04a      	beq.n	8013e56 <ucdr_serialize_int16_t+0xe6>
 8013dc0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013dc4:	7033      	strb	r3, [r6, #0]
 8013dc6:	2d00      	cmp	r5, #0
 8013dc8:	d040      	beq.n	8013e4c <ucdr_serialize_int16_t+0xdc>
 8013dca:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013dce:	7073      	strb	r3, [r6, #1]
 8013dd0:	6923      	ldr	r3, [r4, #16]
 8013dd2:	68a2      	ldr	r2, [r4, #8]
 8013dd4:	7da0      	ldrb	r0, [r4, #22]
 8013dd6:	3302      	adds	r3, #2
 8013dd8:	1b5b      	subs	r3, r3, r5
 8013dda:	4442      	add	r2, r8
 8013ddc:	2102      	movs	r1, #2
 8013dde:	f080 0001 	eor.w	r0, r0, #1
 8013de2:	6123      	str	r3, [r4, #16]
 8013de4:	60a2      	str	r2, [r4, #8]
 8013de6:	7561      	strb	r1, [r4, #21]
 8013de8:	b002      	add	sp, #8
 8013dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013dee:	2102      	movs	r1, #2
 8013df0:	4620      	mov	r0, r4
 8013df2:	f7fa faeb 	bl	800e3cc <ucdr_check_final_buffer_behavior>
 8013df6:	b190      	cbz	r0, 8013e1e <ucdr_serialize_int16_t+0xae>
 8013df8:	7d23      	ldrb	r3, [r4, #20]
 8013dfa:	2b01      	cmp	r3, #1
 8013dfc:	68a3      	ldr	r3, [r4, #8]
 8013dfe:	d014      	beq.n	8013e2a <ucdr_serialize_int16_t+0xba>
 8013e00:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013e04:	701a      	strb	r2, [r3, #0]
 8013e06:	68a3      	ldr	r3, [r4, #8]
 8013e08:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013e0c:	705a      	strb	r2, [r3, #1]
 8013e0e:	68a2      	ldr	r2, [r4, #8]
 8013e10:	6923      	ldr	r3, [r4, #16]
 8013e12:	3202      	adds	r2, #2
 8013e14:	3302      	adds	r3, #2
 8013e16:	2102      	movs	r1, #2
 8013e18:	60a2      	str	r2, [r4, #8]
 8013e1a:	6123      	str	r3, [r4, #16]
 8013e1c:	7561      	strb	r1, [r4, #21]
 8013e1e:	7da0      	ldrb	r0, [r4, #22]
 8013e20:	f080 0001 	eor.w	r0, r0, #1
 8013e24:	b002      	add	sp, #8
 8013e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e2a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8013e2e:	801a      	strh	r2, [r3, #0]
 8013e30:	e7ed      	b.n	8013e0e <ucdr_serialize_int16_t+0x9e>
 8013e32:	68a2      	ldr	r2, [r4, #8]
 8013e34:	6923      	ldr	r3, [r4, #16]
 8013e36:	7da0      	ldrb	r0, [r4, #22]
 8013e38:	7567      	strb	r7, [r4, #21]
 8013e3a:	1b52      	subs	r2, r2, r5
 8013e3c:	1b5b      	subs	r3, r3, r5
 8013e3e:	f080 0001 	eor.w	r0, r0, #1
 8013e42:	60a2      	str	r2, [r4, #8]
 8013e44:	6123      	str	r3, [r4, #16]
 8013e46:	b002      	add	sp, #8
 8013e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e4c:	68a3      	ldr	r3, [r4, #8]
 8013e4e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013e52:	701a      	strb	r2, [r3, #0]
 8013e54:	e7bc      	b.n	8013dd0 <ucdr_serialize_int16_t+0x60>
 8013e56:	4630      	mov	r0, r6
 8013e58:	f10d 0606 	add.w	r6, sp, #6
 8013e5c:	4631      	mov	r1, r6
 8013e5e:	462a      	mov	r2, r5
 8013e60:	f002 fbaa 	bl	80165b8 <memcpy>
 8013e64:	68a0      	ldr	r0, [r4, #8]
 8013e66:	4642      	mov	r2, r8
 8013e68:	1971      	adds	r1, r6, r5
 8013e6a:	f002 fba5 	bl	80165b8 <memcpy>
 8013e6e:	e7af      	b.n	8013dd0 <ucdr_serialize_int16_t+0x60>

08013e70 <ucdr_deserialize_int16_t>:
 8013e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e74:	460d      	mov	r5, r1
 8013e76:	2102      	movs	r1, #2
 8013e78:	4604      	mov	r4, r0
 8013e7a:	f7fa faf9 	bl	800e470 <ucdr_buffer_alignment>
 8013e7e:	4601      	mov	r1, r0
 8013e80:	4620      	mov	r0, r4
 8013e82:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013e86:	f7fa fb37 	bl	800e4f8 <ucdr_advance_buffer>
 8013e8a:	4620      	mov	r0, r4
 8013e8c:	2102      	movs	r1, #2
 8013e8e:	f7fa fa91 	bl	800e3b4 <ucdr_check_buffer_available_for>
 8013e92:	bb60      	cbnz	r0, 8013eee <ucdr_deserialize_int16_t+0x7e>
 8013e94:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8013e98:	42be      	cmp	r6, r7
 8013e9a:	d923      	bls.n	8013ee4 <ucdr_deserialize_int16_t+0x74>
 8013e9c:	6922      	ldr	r2, [r4, #16]
 8013e9e:	60a6      	str	r6, [r4, #8]
 8013ea0:	1bf6      	subs	r6, r6, r7
 8013ea2:	4432      	add	r2, r6
 8013ea4:	f1c6 0902 	rsb	r9, r6, #2
 8013ea8:	6122      	str	r2, [r4, #16]
 8013eaa:	4649      	mov	r1, r9
 8013eac:	4620      	mov	r0, r4
 8013eae:	f7fa fa8d 	bl	800e3cc <ucdr_check_final_buffer_behavior>
 8013eb2:	2800      	cmp	r0, #0
 8013eb4:	d034      	beq.n	8013f20 <ucdr_deserialize_int16_t+0xb0>
 8013eb6:	7d23      	ldrb	r3, [r4, #20]
 8013eb8:	2b01      	cmp	r3, #1
 8013eba:	d042      	beq.n	8013f42 <ucdr_deserialize_int16_t+0xd2>
 8013ebc:	787b      	ldrb	r3, [r7, #1]
 8013ebe:	702b      	strb	r3, [r5, #0]
 8013ec0:	2e00      	cmp	r6, #0
 8013ec2:	d03a      	beq.n	8013f3a <ucdr_deserialize_int16_t+0xca>
 8013ec4:	783b      	ldrb	r3, [r7, #0]
 8013ec6:	706b      	strb	r3, [r5, #1]
 8013ec8:	6923      	ldr	r3, [r4, #16]
 8013eca:	68a2      	ldr	r2, [r4, #8]
 8013ecc:	7da0      	ldrb	r0, [r4, #22]
 8013ece:	2102      	movs	r1, #2
 8013ed0:	3302      	adds	r3, #2
 8013ed2:	1b9b      	subs	r3, r3, r6
 8013ed4:	444a      	add	r2, r9
 8013ed6:	7561      	strb	r1, [r4, #21]
 8013ed8:	6123      	str	r3, [r4, #16]
 8013eda:	60a2      	str	r2, [r4, #8]
 8013edc:	f080 0001 	eor.w	r0, r0, #1
 8013ee0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ee4:	2102      	movs	r1, #2
 8013ee6:	4620      	mov	r0, r4
 8013ee8:	f7fa fa70 	bl	800e3cc <ucdr_check_final_buffer_behavior>
 8013eec:	b180      	cbz	r0, 8013f10 <ucdr_deserialize_int16_t+0xa0>
 8013eee:	7d23      	ldrb	r3, [r4, #20]
 8013ef0:	2b01      	cmp	r3, #1
 8013ef2:	68a3      	ldr	r3, [r4, #8]
 8013ef4:	d011      	beq.n	8013f1a <ucdr_deserialize_int16_t+0xaa>
 8013ef6:	785b      	ldrb	r3, [r3, #1]
 8013ef8:	702b      	strb	r3, [r5, #0]
 8013efa:	68a3      	ldr	r3, [r4, #8]
 8013efc:	781b      	ldrb	r3, [r3, #0]
 8013efe:	706b      	strb	r3, [r5, #1]
 8013f00:	68a2      	ldr	r2, [r4, #8]
 8013f02:	6923      	ldr	r3, [r4, #16]
 8013f04:	3202      	adds	r2, #2
 8013f06:	3302      	adds	r3, #2
 8013f08:	2102      	movs	r1, #2
 8013f0a:	60a2      	str	r2, [r4, #8]
 8013f0c:	6123      	str	r3, [r4, #16]
 8013f0e:	7561      	strb	r1, [r4, #21]
 8013f10:	7da0      	ldrb	r0, [r4, #22]
 8013f12:	f080 0001 	eor.w	r0, r0, #1
 8013f16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f1a:	881b      	ldrh	r3, [r3, #0]
 8013f1c:	802b      	strh	r3, [r5, #0]
 8013f1e:	e7ef      	b.n	8013f00 <ucdr_deserialize_int16_t+0x90>
 8013f20:	68a2      	ldr	r2, [r4, #8]
 8013f22:	6923      	ldr	r3, [r4, #16]
 8013f24:	7da0      	ldrb	r0, [r4, #22]
 8013f26:	f884 8015 	strb.w	r8, [r4, #21]
 8013f2a:	1b92      	subs	r2, r2, r6
 8013f2c:	1b9b      	subs	r3, r3, r6
 8013f2e:	60a2      	str	r2, [r4, #8]
 8013f30:	6123      	str	r3, [r4, #16]
 8013f32:	f080 0001 	eor.w	r0, r0, #1
 8013f36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f3a:	68a3      	ldr	r3, [r4, #8]
 8013f3c:	781b      	ldrb	r3, [r3, #0]
 8013f3e:	706b      	strb	r3, [r5, #1]
 8013f40:	e7c2      	b.n	8013ec8 <ucdr_deserialize_int16_t+0x58>
 8013f42:	4639      	mov	r1, r7
 8013f44:	4632      	mov	r2, r6
 8013f46:	4628      	mov	r0, r5
 8013f48:	f002 fb36 	bl	80165b8 <memcpy>
 8013f4c:	68a1      	ldr	r1, [r4, #8]
 8013f4e:	464a      	mov	r2, r9
 8013f50:	19a8      	adds	r0, r5, r6
 8013f52:	f002 fb31 	bl	80165b8 <memcpy>
 8013f56:	e7b7      	b.n	8013ec8 <ucdr_deserialize_int16_t+0x58>

08013f58 <ucdr_deserialize_int32_t>:
 8013f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f5c:	460d      	mov	r5, r1
 8013f5e:	2104      	movs	r1, #4
 8013f60:	4604      	mov	r4, r0
 8013f62:	f7fa fa85 	bl	800e470 <ucdr_buffer_alignment>
 8013f66:	4601      	mov	r1, r0
 8013f68:	4620      	mov	r0, r4
 8013f6a:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013f6e:	f7fa fac3 	bl	800e4f8 <ucdr_advance_buffer>
 8013f72:	4620      	mov	r0, r4
 8013f74:	2104      	movs	r1, #4
 8013f76:	f7fa fa1d 	bl	800e3b4 <ucdr_check_buffer_available_for>
 8013f7a:	2800      	cmp	r0, #0
 8013f7c:	d138      	bne.n	8013ff0 <ucdr_deserialize_int32_t+0x98>
 8013f7e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8013f82:	42b7      	cmp	r7, r6
 8013f84:	d92f      	bls.n	8013fe6 <ucdr_deserialize_int32_t+0x8e>
 8013f86:	6922      	ldr	r2, [r4, #16]
 8013f88:	60a7      	str	r7, [r4, #8]
 8013f8a:	1bbf      	subs	r7, r7, r6
 8013f8c:	443a      	add	r2, r7
 8013f8e:	f1c7 0904 	rsb	r9, r7, #4
 8013f92:	6122      	str	r2, [r4, #16]
 8013f94:	4649      	mov	r1, r9
 8013f96:	4620      	mov	r0, r4
 8013f98:	f7fa fa18 	bl	800e3cc <ucdr_check_final_buffer_behavior>
 8013f9c:	2800      	cmp	r0, #0
 8013f9e:	d046      	beq.n	801402e <ucdr_deserialize_int32_t+0xd6>
 8013fa0:	7d23      	ldrb	r3, [r4, #20]
 8013fa2:	2b01      	cmp	r3, #1
 8013fa4:	d05c      	beq.n	8014060 <ucdr_deserialize_int32_t+0x108>
 8013fa6:	78f3      	ldrb	r3, [r6, #3]
 8013fa8:	702b      	strb	r3, [r5, #0]
 8013faa:	2f00      	cmp	r7, #0
 8013fac:	d04c      	beq.n	8014048 <ucdr_deserialize_int32_t+0xf0>
 8013fae:	78b3      	ldrb	r3, [r6, #2]
 8013fb0:	706b      	strb	r3, [r5, #1]
 8013fb2:	2f01      	cmp	r7, #1
 8013fb4:	f105 0302 	add.w	r3, r5, #2
 8013fb8:	d04a      	beq.n	8014050 <ucdr_deserialize_int32_t+0xf8>
 8013fba:	7873      	ldrb	r3, [r6, #1]
 8013fbc:	70ab      	strb	r3, [r5, #2]
 8013fbe:	2f02      	cmp	r7, #2
 8013fc0:	f105 0303 	add.w	r3, r5, #3
 8013fc4:	d048      	beq.n	8014058 <ucdr_deserialize_int32_t+0x100>
 8013fc6:	7833      	ldrb	r3, [r6, #0]
 8013fc8:	70eb      	strb	r3, [r5, #3]
 8013fca:	6923      	ldr	r3, [r4, #16]
 8013fcc:	68a2      	ldr	r2, [r4, #8]
 8013fce:	7da0      	ldrb	r0, [r4, #22]
 8013fd0:	2104      	movs	r1, #4
 8013fd2:	3304      	adds	r3, #4
 8013fd4:	1bdb      	subs	r3, r3, r7
 8013fd6:	444a      	add	r2, r9
 8013fd8:	7561      	strb	r1, [r4, #21]
 8013fda:	6123      	str	r3, [r4, #16]
 8013fdc:	60a2      	str	r2, [r4, #8]
 8013fde:	f080 0001 	eor.w	r0, r0, #1
 8013fe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013fe6:	2104      	movs	r1, #4
 8013fe8:	4620      	mov	r0, r4
 8013fea:	f7fa f9ef 	bl	800e3cc <ucdr_check_final_buffer_behavior>
 8013fee:	b1b0      	cbz	r0, 801401e <ucdr_deserialize_int32_t+0xc6>
 8013ff0:	7d23      	ldrb	r3, [r4, #20]
 8013ff2:	2b01      	cmp	r3, #1
 8013ff4:	68a3      	ldr	r3, [r4, #8]
 8013ff6:	d017      	beq.n	8014028 <ucdr_deserialize_int32_t+0xd0>
 8013ff8:	78db      	ldrb	r3, [r3, #3]
 8013ffa:	702b      	strb	r3, [r5, #0]
 8013ffc:	68a3      	ldr	r3, [r4, #8]
 8013ffe:	789b      	ldrb	r3, [r3, #2]
 8014000:	706b      	strb	r3, [r5, #1]
 8014002:	68a3      	ldr	r3, [r4, #8]
 8014004:	785b      	ldrb	r3, [r3, #1]
 8014006:	70ab      	strb	r3, [r5, #2]
 8014008:	68a3      	ldr	r3, [r4, #8]
 801400a:	781b      	ldrb	r3, [r3, #0]
 801400c:	70eb      	strb	r3, [r5, #3]
 801400e:	68a2      	ldr	r2, [r4, #8]
 8014010:	6923      	ldr	r3, [r4, #16]
 8014012:	3204      	adds	r2, #4
 8014014:	3304      	adds	r3, #4
 8014016:	2104      	movs	r1, #4
 8014018:	60a2      	str	r2, [r4, #8]
 801401a:	6123      	str	r3, [r4, #16]
 801401c:	7561      	strb	r1, [r4, #21]
 801401e:	7da0      	ldrb	r0, [r4, #22]
 8014020:	f080 0001 	eor.w	r0, r0, #1
 8014024:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014028:	681b      	ldr	r3, [r3, #0]
 801402a:	602b      	str	r3, [r5, #0]
 801402c:	e7ef      	b.n	801400e <ucdr_deserialize_int32_t+0xb6>
 801402e:	68a2      	ldr	r2, [r4, #8]
 8014030:	6923      	ldr	r3, [r4, #16]
 8014032:	7da0      	ldrb	r0, [r4, #22]
 8014034:	f884 8015 	strb.w	r8, [r4, #21]
 8014038:	1bd2      	subs	r2, r2, r7
 801403a:	1bdb      	subs	r3, r3, r7
 801403c:	60a2      	str	r2, [r4, #8]
 801403e:	6123      	str	r3, [r4, #16]
 8014040:	f080 0001 	eor.w	r0, r0, #1
 8014044:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014048:	68a3      	ldr	r3, [r4, #8]
 801404a:	789b      	ldrb	r3, [r3, #2]
 801404c:	706b      	strb	r3, [r5, #1]
 801404e:	1cab      	adds	r3, r5, #2
 8014050:	68a2      	ldr	r2, [r4, #8]
 8014052:	7852      	ldrb	r2, [r2, #1]
 8014054:	f803 2b01 	strb.w	r2, [r3], #1
 8014058:	68a2      	ldr	r2, [r4, #8]
 801405a:	7812      	ldrb	r2, [r2, #0]
 801405c:	701a      	strb	r2, [r3, #0]
 801405e:	e7b4      	b.n	8013fca <ucdr_deserialize_int32_t+0x72>
 8014060:	4631      	mov	r1, r6
 8014062:	463a      	mov	r2, r7
 8014064:	4628      	mov	r0, r5
 8014066:	f002 faa7 	bl	80165b8 <memcpy>
 801406a:	68a1      	ldr	r1, [r4, #8]
 801406c:	464a      	mov	r2, r9
 801406e:	19e8      	adds	r0, r5, r7
 8014070:	f002 faa2 	bl	80165b8 <memcpy>
 8014074:	e7a9      	b.n	8013fca <ucdr_deserialize_int32_t+0x72>
 8014076:	bf00      	nop

08014078 <ucdr_serialize_string>:
 8014078:	b510      	push	{r4, lr}
 801407a:	b082      	sub	sp, #8
 801407c:	4604      	mov	r4, r0
 801407e:	4608      	mov	r0, r1
 8014080:	9101      	str	r1, [sp, #4]
 8014082:	f7ec f8b7 	bl	80001f4 <strlen>
 8014086:	9901      	ldr	r1, [sp, #4]
 8014088:	4602      	mov	r2, r0
 801408a:	3201      	adds	r2, #1
 801408c:	4620      	mov	r0, r4
 801408e:	b002      	add	sp, #8
 8014090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014094:	f7fa ba50 	b.w	800e538 <ucdr_serialize_sequence_char>

08014098 <ucdr_deserialize_string>:
 8014098:	b500      	push	{lr}
 801409a:	b083      	sub	sp, #12
 801409c:	ab01      	add	r3, sp, #4
 801409e:	f7fa fa5d 	bl	800e55c <ucdr_deserialize_sequence_char>
 80140a2:	b003      	add	sp, #12
 80140a4:	f85d fb04 	ldr.w	pc, [sp], #4

080140a8 <get_custom_error>:
 80140a8:	4b01      	ldr	r3, [pc, #4]	; (80140b0 <get_custom_error+0x8>)
 80140aa:	7818      	ldrb	r0, [r3, #0]
 80140ac:	4770      	bx	lr
 80140ae:	bf00      	nop
 80140b0:	20009490 	.word	0x20009490

080140b4 <recv_custom_msg>:
 80140b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140b8:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 80140bc:	b089      	sub	sp, #36	; 0x24
 80140be:	2600      	movs	r6, #0
 80140c0:	4604      	mov	r4, r0
 80140c2:	9305      	str	r3, [sp, #20]
 80140c4:	468a      	mov	sl, r1
 80140c6:	4693      	mov	fp, r2
 80140c8:	f88d 601e 	strb.w	r6, [sp, #30]
 80140cc:	b325      	cbz	r5, 8014118 <recv_custom_msg+0x64>
 80140ce:	f200 2902 	addw	r9, r0, #514	; 0x202
 80140d2:	f10d 081f 	add.w	r8, sp, #31
 80140d6:	af05      	add	r7, sp, #20
 80140d8:	f10d 061e 	add.w	r6, sp, #30
 80140dc:	f44f 7500 	mov.w	r5, #512	; 0x200
 80140e0:	e002      	b.n	80140e8 <recv_custom_msg+0x34>
 80140e2:	9b05      	ldr	r3, [sp, #20]
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	dd0f      	ble.n	8014108 <recv_custom_msg+0x54>
 80140e8:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80140ec:	e9cd 5600 	strd	r5, r6, [sp]
 80140f0:	4623      	mov	r3, r4
 80140f2:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 80140f6:	4622      	mov	r2, r4
 80140f8:	4648      	mov	r0, r9
 80140fa:	f001 f8b5 	bl	8015268 <uxr_read_framed_msg>
 80140fe:	2800      	cmp	r0, #0
 8014100:	d0ef      	beq.n	80140e2 <recv_custom_msg+0x2e>
 8014102:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8014106:	b1b3      	cbz	r3, 8014136 <recv_custom_msg+0x82>
 8014108:	4b0f      	ldr	r3, [pc, #60]	; (8014148 <recv_custom_msg+0x94>)
 801410a:	f89d 201f 	ldrb.w	r2, [sp, #31]
 801410e:	701a      	strb	r2, [r3, #0]
 8014110:	2000      	movs	r0, #0
 8014112:	b009      	add	sp, #36	; 0x24
 8014114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014118:	f10d 021f 	add.w	r2, sp, #31
 801411c:	9200      	str	r2, [sp, #0]
 801411e:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 8014122:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014126:	4601      	mov	r1, r0
 8014128:	47a8      	blx	r5
 801412a:	2800      	cmp	r0, #0
 801412c:	d0ec      	beq.n	8014108 <recv_custom_msg+0x54>
 801412e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8014132:	2b00      	cmp	r3, #0
 8014134:	d1e8      	bne.n	8014108 <recv_custom_msg+0x54>
 8014136:	f8cb 0000 	str.w	r0, [fp]
 801413a:	2001      	movs	r0, #1
 801413c:	f8ca 4000 	str.w	r4, [sl]
 8014140:	b009      	add	sp, #36	; 0x24
 8014142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014146:	bf00      	nop
 8014148:	20009490 	.word	0x20009490

0801414c <send_custom_msg>:
 801414c:	b570      	push	{r4, r5, r6, lr}
 801414e:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 8014152:	b086      	sub	sp, #24
 8014154:	4616      	mov	r6, r2
 8014156:	b975      	cbnz	r5, 8014176 <send_custom_msg+0x2a>
 8014158:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 801415c:	f10d 0317 	add.w	r3, sp, #23
 8014160:	47a0      	blx	r4
 8014162:	b108      	cbz	r0, 8014168 <send_custom_msg+0x1c>
 8014164:	42b0      	cmp	r0, r6
 8014166:	d015      	beq.n	8014194 <send_custom_msg+0x48>
 8014168:	4b0c      	ldr	r3, [pc, #48]	; (801419c <send_custom_msg+0x50>)
 801416a:	f89d 2017 	ldrb.w	r2, [sp, #23]
 801416e:	701a      	strb	r2, [r3, #0]
 8014170:	2000      	movs	r0, #0
 8014172:	b006      	add	sp, #24
 8014174:	bd70      	pop	{r4, r5, r6, pc}
 8014176:	460b      	mov	r3, r1
 8014178:	2200      	movs	r2, #0
 801417a:	f10d 0117 	add.w	r1, sp, #23
 801417e:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8014182:	9600      	str	r6, [sp, #0]
 8014184:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 8014188:	4602      	mov	r2, r0
 801418a:	f200 2002 	addw	r0, r0, #514	; 0x202
 801418e:	f000 fe83 	bl	8014e98 <uxr_write_framed_msg>
 8014192:	e7e6      	b.n	8014162 <send_custom_msg+0x16>
 8014194:	2001      	movs	r0, #1
 8014196:	b006      	add	sp, #24
 8014198:	bd70      	pop	{r4, r5, r6, pc}
 801419a:	bf00      	nop
 801419c:	20009490 	.word	0x20009490

080141a0 <uxr_set_custom_transport_callbacks>:
 80141a0:	b430      	push	{r4, r5}
 80141a2:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 80141a6:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 80141aa:	e9c0 549c 	strd	r5, r4, [r0, #624]	; 0x270
 80141ae:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 80141b2:	bc30      	pop	{r4, r5}
 80141b4:	4770      	bx	lr
 80141b6:	bf00      	nop

080141b8 <uxr_init_custom_transport>:
 80141b8:	b538      	push	{r3, r4, r5, lr}
 80141ba:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 80141be:	b303      	cbz	r3, 8014202 <uxr_init_custom_transport+0x4a>
 80141c0:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 80141c4:	4604      	mov	r4, r0
 80141c6:	b1e2      	cbz	r2, 8014202 <uxr_init_custom_transport+0x4a>
 80141c8:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 80141cc:	b1ca      	cbz	r2, 8014202 <uxr_init_custom_transport+0x4a>
 80141ce:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 80141d2:	b1b2      	cbz	r2, 8014202 <uxr_init_custom_transport+0x4a>
 80141d4:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 80141d8:	4798      	blx	r3
 80141da:	4605      	mov	r5, r0
 80141dc:	b188      	cbz	r0, 8014202 <uxr_init_custom_transport+0x4a>
 80141de:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80141e2:	b98b      	cbnz	r3, 8014208 <uxr_init_custom_transport+0x50>
 80141e4:	480b      	ldr	r0, [pc, #44]	; (8014214 <uxr_init_custom_transport+0x5c>)
 80141e6:	490c      	ldr	r1, [pc, #48]	; (8014218 <uxr_init_custom_transport+0x60>)
 80141e8:	4a0c      	ldr	r2, [pc, #48]	; (801421c <uxr_init_custom_transport+0x64>)
 80141ea:	f8c4 4278 	str.w	r4, [r4, #632]	; 0x278
 80141ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80141f2:	e9c4 019f 	strd	r0, r1, [r4, #636]	; 0x27c
 80141f6:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 80141fa:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 80141fe:	4628      	mov	r0, r5
 8014200:	bd38      	pop	{r3, r4, r5, pc}
 8014202:	2500      	movs	r5, #0
 8014204:	4628      	mov	r0, r5
 8014206:	bd38      	pop	{r3, r4, r5, pc}
 8014208:	2100      	movs	r1, #0
 801420a:	f204 2002 	addw	r0, r4, #514	; 0x202
 801420e:	f000 fe3d 	bl	8014e8c <uxr_init_framing_io>
 8014212:	e7e7      	b.n	80141e4 <uxr_init_custom_transport+0x2c>
 8014214:	0801414d 	.word	0x0801414d
 8014218:	080140b5 	.word	0x080140b5
 801421c:	080140a9 	.word	0x080140a9

08014220 <uxr_close_custom_transport>:
 8014220:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8014224:	4718      	bx	r3
 8014226:	bf00      	nop

08014228 <uxr_init_input_best_effort_stream>:
 8014228:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801422c:	8003      	strh	r3, [r0, #0]
 801422e:	4770      	bx	lr

08014230 <uxr_reset_input_best_effort_stream>:
 8014230:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014234:	8003      	strh	r3, [r0, #0]
 8014236:	4770      	bx	lr

08014238 <uxr_receive_best_effort_message>:
 8014238:	b538      	push	{r3, r4, r5, lr}
 801423a:	4604      	mov	r4, r0
 801423c:	8800      	ldrh	r0, [r0, #0]
 801423e:	460d      	mov	r5, r1
 8014240:	f000 fe0c 	bl	8014e5c <uxr_seq_num_cmp>
 8014244:	4603      	mov	r3, r0
 8014246:	2b00      	cmp	r3, #0
 8014248:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 801424c:	bfb8      	it	lt
 801424e:	8025      	strhlt	r5, [r4, #0]
 8014250:	bd38      	pop	{r3, r4, r5, pc}
 8014252:	bf00      	nop

08014254 <on_full_input_buffer>:
 8014254:	b570      	push	{r4, r5, r6, lr}
 8014256:	6802      	ldr	r2, [r0, #0]
 8014258:	460d      	mov	r5, r1
 801425a:	6809      	ldr	r1, [r1, #0]
 801425c:	686c      	ldr	r4, [r5, #4]
 801425e:	1a53      	subs	r3, r2, r1
 8014260:	4606      	mov	r6, r0
 8014262:	8928      	ldrh	r0, [r5, #8]
 8014264:	fbb4 f4f0 	udiv	r4, r4, r0
 8014268:	fbb3 f3f4 	udiv	r3, r3, r4
 801426c:	3301      	adds	r3, #1
 801426e:	b29b      	uxth	r3, r3
 8014270:	fbb3 f2f0 	udiv	r2, r3, r0
 8014274:	fb00 3312 	mls	r3, r0, r2, r3
 8014278:	b29b      	uxth	r3, r3
 801427a:	fb04 f403 	mul.w	r4, r4, r3
 801427e:	1d23      	adds	r3, r4, #4
 8014280:	440b      	add	r3, r1
 8014282:	7d28      	ldrb	r0, [r5, #20]
 8014284:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8014288:	b110      	cbz	r0, 8014290 <on_full_input_buffer+0x3c>
 801428a:	2000      	movs	r0, #0
 801428c:	f843 0c04 	str.w	r0, [r3, #-4]
 8014290:	2a03      	cmp	r2, #3
 8014292:	d801      	bhi.n	8014298 <on_full_input_buffer+0x44>
 8014294:	2001      	movs	r0, #1
 8014296:	bd70      	pop	{r4, r5, r6, pc}
 8014298:	3408      	adds	r4, #8
 801429a:	6933      	ldr	r3, [r6, #16]
 801429c:	4421      	add	r1, r4
 801429e:	4630      	mov	r0, r6
 80142a0:	3a04      	subs	r2, #4
 80142a2:	f7fa f8d1 	bl	800e448 <ucdr_init_buffer_origin>
 80142a6:	4630      	mov	r0, r6
 80142a8:	4902      	ldr	r1, [pc, #8]	; (80142b4 <on_full_input_buffer+0x60>)
 80142aa:	462a      	mov	r2, r5
 80142ac:	f7fa f8aa 	bl	800e404 <ucdr_set_on_full_buffer_callback>
 80142b0:	2000      	movs	r0, #0
 80142b2:	bd70      	pop	{r4, r5, r6, pc}
 80142b4:	08014255 	.word	0x08014255

080142b8 <uxr_init_input_reliable_stream>:
 80142b8:	b470      	push	{r4, r5, r6}
 80142ba:	9c03      	ldr	r4, [sp, #12]
 80142bc:	6001      	str	r1, [r0, #0]
 80142be:	2600      	movs	r6, #0
 80142c0:	8103      	strh	r3, [r0, #8]
 80142c2:	6042      	str	r2, [r0, #4]
 80142c4:	6104      	str	r4, [r0, #16]
 80142c6:	7506      	strb	r6, [r0, #20]
 80142c8:	b1ab      	cbz	r3, 80142f6 <uxr_init_input_reliable_stream+0x3e>
 80142ca:	600e      	str	r6, [r1, #0]
 80142cc:	8901      	ldrh	r1, [r0, #8]
 80142ce:	2901      	cmp	r1, #1
 80142d0:	d911      	bls.n	80142f6 <uxr_init_input_reliable_stream+0x3e>
 80142d2:	2201      	movs	r2, #1
 80142d4:	e9d0 5400 	ldrd	r5, r4, [r0]
 80142d8:	fbb2 f3f1 	udiv	r3, r2, r1
 80142dc:	fb01 2313 	mls	r3, r1, r3, r2
 80142e0:	b29b      	uxth	r3, r3
 80142e2:	fbb4 f1f1 	udiv	r1, r4, r1
 80142e6:	fb03 f301 	mul.w	r3, r3, r1
 80142ea:	3201      	adds	r2, #1
 80142ec:	50ee      	str	r6, [r5, r3]
 80142ee:	8901      	ldrh	r1, [r0, #8]
 80142f0:	b292      	uxth	r2, r2
 80142f2:	4291      	cmp	r1, r2
 80142f4:	d8ee      	bhi.n	80142d4 <uxr_init_input_reliable_stream+0x1c>
 80142f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80142fa:	bc70      	pop	{r4, r5, r6}
 80142fc:	60c3      	str	r3, [r0, #12]
 80142fe:	4770      	bx	lr

08014300 <uxr_reset_input_reliable_stream>:
 8014300:	8902      	ldrh	r2, [r0, #8]
 8014302:	b1ca      	cbz	r2, 8014338 <uxr_reset_input_reliable_stream+0x38>
 8014304:	b470      	push	{r4, r5, r6}
 8014306:	2400      	movs	r4, #0
 8014308:	4621      	mov	r1, r4
 801430a:	4626      	mov	r6, r4
 801430c:	fbb1 f3f2 	udiv	r3, r1, r2
 8014310:	fb02 1313 	mls	r3, r2, r3, r1
 8014314:	e9d0 5100 	ldrd	r5, r1, [r0]
 8014318:	b29b      	uxth	r3, r3
 801431a:	fbb1 f2f2 	udiv	r2, r1, r2
 801431e:	fb03 f302 	mul.w	r3, r3, r2
 8014322:	3401      	adds	r4, #1
 8014324:	50ee      	str	r6, [r5, r3]
 8014326:	8902      	ldrh	r2, [r0, #8]
 8014328:	b2a1      	uxth	r1, r4
 801432a:	428a      	cmp	r2, r1
 801432c:	d8ee      	bhi.n	801430c <uxr_reset_input_reliable_stream+0xc>
 801432e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014332:	bc70      	pop	{r4, r5, r6}
 8014334:	60c3      	str	r3, [r0, #12]
 8014336:	4770      	bx	lr
 8014338:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801433c:	60c3      	str	r3, [r0, #12]
 801433e:	4770      	bx	lr

08014340 <uxr_receive_reliable_message>:
 8014340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014344:	4604      	mov	r4, r0
 8014346:	460d      	mov	r5, r1
 8014348:	8901      	ldrh	r1, [r0, #8]
 801434a:	8980      	ldrh	r0, [r0, #12]
 801434c:	4690      	mov	r8, r2
 801434e:	461f      	mov	r7, r3
 8014350:	f000 fd7c 	bl	8014e4c <uxr_seq_num_add>
 8014354:	4629      	mov	r1, r5
 8014356:	4606      	mov	r6, r0
 8014358:	89a0      	ldrh	r0, [r4, #12]
 801435a:	f000 fd7f 	bl	8014e5c <uxr_seq_num_cmp>
 801435e:	2800      	cmp	r0, #0
 8014360:	db0a      	blt.n	8014378 <uxr_receive_reliable_message+0x38>
 8014362:	2600      	movs	r6, #0
 8014364:	89e0      	ldrh	r0, [r4, #14]
 8014366:	4629      	mov	r1, r5
 8014368:	f000 fd78 	bl	8014e5c <uxr_seq_num_cmp>
 801436c:	2800      	cmp	r0, #0
 801436e:	bfb8      	it	lt
 8014370:	81e5      	strhlt	r5, [r4, #14]
 8014372:	4630      	mov	r0, r6
 8014374:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014378:	4630      	mov	r0, r6
 801437a:	4629      	mov	r1, r5
 801437c:	f000 fd6e 	bl	8014e5c <uxr_seq_num_cmp>
 8014380:	2800      	cmp	r0, #0
 8014382:	dbee      	blt.n	8014362 <uxr_receive_reliable_message+0x22>
 8014384:	6923      	ldr	r3, [r4, #16]
 8014386:	4640      	mov	r0, r8
 8014388:	4798      	blx	r3
 801438a:	2101      	movs	r1, #1
 801438c:	4681      	mov	r9, r0
 801438e:	89a0      	ldrh	r0, [r4, #12]
 8014390:	f000 fd5c 	bl	8014e4c <uxr_seq_num_add>
 8014394:	f1b9 0f00 	cmp.w	r9, #0
 8014398:	d101      	bne.n	801439e <uxr_receive_reliable_message+0x5e>
 801439a:	4285      	cmp	r5, r0
 801439c:	d049      	beq.n	8014432 <uxr_receive_reliable_message+0xf2>
 801439e:	8921      	ldrh	r1, [r4, #8]
 80143a0:	fbb5 f3f1 	udiv	r3, r5, r1
 80143a4:	fb01 5313 	mls	r3, r1, r3, r5
 80143a8:	b29b      	uxth	r3, r3
 80143aa:	6862      	ldr	r2, [r4, #4]
 80143ac:	6820      	ldr	r0, [r4, #0]
 80143ae:	fbb2 f2f1 	udiv	r2, r2, r1
 80143b2:	fb03 f302 	mul.w	r3, r3, r2
 80143b6:	3304      	adds	r3, #4
 80143b8:	4418      	add	r0, r3
 80143ba:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d1cf      	bne.n	8014362 <uxr_receive_reliable_message+0x22>
 80143c2:	4641      	mov	r1, r8
 80143c4:	463a      	mov	r2, r7
 80143c6:	f002 f8f7 	bl	80165b8 <memcpy>
 80143ca:	8921      	ldrh	r1, [r4, #8]
 80143cc:	fbb5 f3f1 	udiv	r3, r5, r1
 80143d0:	fb01 5313 	mls	r3, r1, r3, r5
 80143d4:	b29b      	uxth	r3, r3
 80143d6:	6862      	ldr	r2, [r4, #4]
 80143d8:	fbb2 f2f1 	udiv	r2, r2, r1
 80143dc:	6821      	ldr	r1, [r4, #0]
 80143de:	fb03 f302 	mul.w	r3, r3, r2
 80143e2:	2201      	movs	r2, #1
 80143e4:	50cf      	str	r7, [r1, r3]
 80143e6:	9b08      	ldr	r3, [sp, #32]
 80143e8:	701a      	strb	r2, [r3, #0]
 80143ea:	f1b9 0f00 	cmp.w	r9, #0
 80143ee:	d0b8      	beq.n	8014362 <uxr_receive_reliable_message+0x22>
 80143f0:	89a6      	ldrh	r6, [r4, #12]
 80143f2:	e001      	b.n	80143f8 <uxr_receive_reliable_message+0xb8>
 80143f4:	2801      	cmp	r0, #1
 80143f6:	d1b4      	bne.n	8014362 <uxr_receive_reliable_message+0x22>
 80143f8:	4630      	mov	r0, r6
 80143fa:	2101      	movs	r1, #1
 80143fc:	f000 fd26 	bl	8014e4c <uxr_seq_num_add>
 8014400:	8921      	ldrh	r1, [r4, #8]
 8014402:	fbb0 f3f1 	udiv	r3, r0, r1
 8014406:	fb01 0313 	mls	r3, r1, r3, r0
 801440a:	b29b      	uxth	r3, r3
 801440c:	6862      	ldr	r2, [r4, #4]
 801440e:	fbb2 f2f1 	udiv	r2, r2, r1
 8014412:	4606      	mov	r6, r0
 8014414:	fb03 f302 	mul.w	r3, r3, r2
 8014418:	6820      	ldr	r0, [r4, #0]
 801441a:	3304      	adds	r3, #4
 801441c:	4418      	add	r0, r3
 801441e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8014422:	2b00      	cmp	r3, #0
 8014424:	d09d      	beq.n	8014362 <uxr_receive_reliable_message+0x22>
 8014426:	6923      	ldr	r3, [r4, #16]
 8014428:	4798      	blx	r3
 801442a:	2802      	cmp	r0, #2
 801442c:	d1e2      	bne.n	80143f4 <uxr_receive_reliable_message+0xb4>
 801442e:	2601      	movs	r6, #1
 8014430:	e798      	b.n	8014364 <uxr_receive_reliable_message+0x24>
 8014432:	9b08      	ldr	r3, [sp, #32]
 8014434:	81a5      	strh	r5, [r4, #12]
 8014436:	2601      	movs	r6, #1
 8014438:	f883 9000 	strb.w	r9, [r3]
 801443c:	e792      	b.n	8014364 <uxr_receive_reliable_message+0x24>
 801443e:	bf00      	nop

08014440 <uxr_next_input_reliable_buffer_available>:
 8014440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014444:	4604      	mov	r4, r0
 8014446:	460e      	mov	r6, r1
 8014448:	8980      	ldrh	r0, [r0, #12]
 801444a:	2101      	movs	r1, #1
 801444c:	4617      	mov	r7, r2
 801444e:	f000 fcfd 	bl	8014e4c <uxr_seq_num_add>
 8014452:	8921      	ldrh	r1, [r4, #8]
 8014454:	fbb0 f3f1 	udiv	r3, r0, r1
 8014458:	fb01 0313 	mls	r3, r1, r3, r0
 801445c:	b29b      	uxth	r3, r3
 801445e:	6862      	ldr	r2, [r4, #4]
 8014460:	fbb2 f2f1 	udiv	r2, r2, r1
 8014464:	fb03 f302 	mul.w	r3, r3, r2
 8014468:	6822      	ldr	r2, [r4, #0]
 801446a:	3304      	adds	r3, #4
 801446c:	eb02 0803 	add.w	r8, r2, r3
 8014470:	f858 9c04 	ldr.w	r9, [r8, #-4]
 8014474:	f1b9 0f00 	cmp.w	r9, #0
 8014478:	d025      	beq.n	80144c6 <uxr_next_input_reliable_buffer_available+0x86>
 801447a:	6923      	ldr	r3, [r4, #16]
 801447c:	4605      	mov	r5, r0
 801447e:	4640      	mov	r0, r8
 8014480:	4798      	blx	r3
 8014482:	4682      	mov	sl, r0
 8014484:	b310      	cbz	r0, 80144cc <uxr_next_input_reliable_buffer_available+0x8c>
 8014486:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801448a:	e005      	b.n	8014498 <uxr_next_input_reliable_buffer_available+0x58>
 801448c:	6923      	ldr	r3, [r4, #16]
 801448e:	4798      	blx	r3
 8014490:	2802      	cmp	r0, #2
 8014492:	d032      	beq.n	80144fa <uxr_next_input_reliable_buffer_available+0xba>
 8014494:	2801      	cmp	r0, #1
 8014496:	d116      	bne.n	80144c6 <uxr_next_input_reliable_buffer_available+0x86>
 8014498:	4650      	mov	r0, sl
 801449a:	2101      	movs	r1, #1
 801449c:	f000 fcd6 	bl	8014e4c <uxr_seq_num_add>
 80144a0:	8921      	ldrh	r1, [r4, #8]
 80144a2:	fbb0 f3f1 	udiv	r3, r0, r1
 80144a6:	fb01 0313 	mls	r3, r1, r3, r0
 80144aa:	b29b      	uxth	r3, r3
 80144ac:	6862      	ldr	r2, [r4, #4]
 80144ae:	fbb2 f2f1 	udiv	r2, r2, r1
 80144b2:	4682      	mov	sl, r0
 80144b4:	fb03 f302 	mul.w	r3, r3, r2
 80144b8:	6820      	ldr	r0, [r4, #0]
 80144ba:	3304      	adds	r3, #4
 80144bc:	4418      	add	r0, r3
 80144be:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d1e2      	bne.n	801448c <uxr_next_input_reliable_buffer_available+0x4c>
 80144c6:	2000      	movs	r0, #0
 80144c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80144cc:	464a      	mov	r2, r9
 80144ce:	4641      	mov	r1, r8
 80144d0:	4630      	mov	r0, r6
 80144d2:	f7f9 ffc1 	bl	800e458 <ucdr_init_buffer>
 80144d6:	8921      	ldrh	r1, [r4, #8]
 80144d8:	fbb5 f3f1 	udiv	r3, r5, r1
 80144dc:	fb01 5313 	mls	r3, r1, r3, r5
 80144e0:	b29b      	uxth	r3, r3
 80144e2:	6862      	ldr	r2, [r4, #4]
 80144e4:	fbb2 f2f1 	udiv	r2, r2, r1
 80144e8:	6821      	ldr	r1, [r4, #0]
 80144ea:	fb03 f302 	mul.w	r3, r3, r2
 80144ee:	2001      	movs	r0, #1
 80144f0:	f841 a003 	str.w	sl, [r1, r3]
 80144f4:	81a5      	strh	r5, [r4, #12]
 80144f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80144fa:	8922      	ldrh	r2, [r4, #8]
 80144fc:	fbb5 f0f2 	udiv	r0, r5, r2
 8014500:	fb02 5510 	mls	r5, r2, r0, r5
 8014504:	b2ad      	uxth	r5, r5
 8014506:	6863      	ldr	r3, [r4, #4]
 8014508:	fbb3 f3f2 	udiv	r3, r3, r2
 801450c:	fb05 f503 	mul.w	r5, r5, r3
 8014510:	6823      	ldr	r3, [r4, #0]
 8014512:	2000      	movs	r0, #0
 8014514:	5158      	str	r0, [r3, r5]
 8014516:	eba9 0207 	sub.w	r2, r9, r7
 801451a:	eb08 0107 	add.w	r1, r8, r7
 801451e:	4630      	mov	r0, r6
 8014520:	f7f9 ff9a 	bl	800e458 <ucdr_init_buffer>
 8014524:	4630      	mov	r0, r6
 8014526:	4904      	ldr	r1, [pc, #16]	; (8014538 <uxr_next_input_reliable_buffer_available+0xf8>)
 8014528:	4622      	mov	r2, r4
 801452a:	f7f9 ff6b 	bl	800e404 <ucdr_set_on_full_buffer_callback>
 801452e:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8014532:	2001      	movs	r0, #1
 8014534:	e7c8      	b.n	80144c8 <uxr_next_input_reliable_buffer_available+0x88>
 8014536:	bf00      	nop
 8014538:	08014255 	.word	0x08014255

0801453c <uxr_process_heartbeat>:
 801453c:	b538      	push	{r3, r4, r5, lr}
 801453e:	4611      	mov	r1, r2
 8014540:	4604      	mov	r4, r0
 8014542:	89c0      	ldrh	r0, [r0, #14]
 8014544:	4615      	mov	r5, r2
 8014546:	f000 fc89 	bl	8014e5c <uxr_seq_num_cmp>
 801454a:	2800      	cmp	r0, #0
 801454c:	bfb8      	it	lt
 801454e:	81e5      	strhlt	r5, [r4, #14]
 8014550:	bd38      	pop	{r3, r4, r5, pc}
 8014552:	bf00      	nop

08014554 <uxr_compute_acknack>:
 8014554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014558:	8903      	ldrh	r3, [r0, #8]
 801455a:	8986      	ldrh	r6, [r0, #12]
 801455c:	4604      	mov	r4, r0
 801455e:	460d      	mov	r5, r1
 8014560:	b1d3      	cbz	r3, 8014598 <uxr_compute_acknack+0x44>
 8014562:	4630      	mov	r0, r6
 8014564:	2701      	movs	r7, #1
 8014566:	e003      	b.n	8014570 <uxr_compute_acknack+0x1c>
 8014568:	4567      	cmp	r7, ip
 801456a:	d215      	bcs.n	8014598 <uxr_compute_acknack+0x44>
 801456c:	89a0      	ldrh	r0, [r4, #12]
 801456e:	3701      	adds	r7, #1
 8014570:	b2b9      	uxth	r1, r7
 8014572:	f000 fc6b 	bl	8014e4c <uxr_seq_num_add>
 8014576:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801457a:	fbb0 f2fc 	udiv	r2, r0, ip
 801457e:	e9d4 1300 	ldrd	r1, r3, [r4]
 8014582:	fb0c 0212 	mls	r2, ip, r2, r0
 8014586:	b292      	uxth	r2, r2
 8014588:	fbb3 f3fc 	udiv	r3, r3, ip
 801458c:	fb02 1303 	mla	r3, r2, r3, r1
 8014590:	681b      	ldr	r3, [r3, #0]
 8014592:	2b00      	cmp	r3, #0
 8014594:	d1e8      	bne.n	8014568 <uxr_compute_acknack+0x14>
 8014596:	4606      	mov	r6, r0
 8014598:	802e      	strh	r6, [r5, #0]
 801459a:	4630      	mov	r0, r6
 801459c:	2101      	movs	r1, #1
 801459e:	89e6      	ldrh	r6, [r4, #14]
 80145a0:	f000 fc58 	bl	8014e54 <uxr_seq_num_sub>
 80145a4:	4601      	mov	r1, r0
 80145a6:	4630      	mov	r0, r6
 80145a8:	f000 fc54 	bl	8014e54 <uxr_seq_num_sub>
 80145ac:	4606      	mov	r6, r0
 80145ae:	b318      	cbz	r0, 80145f8 <uxr_compute_acknack+0xa4>
 80145b0:	f04f 0900 	mov.w	r9, #0
 80145b4:	464f      	mov	r7, r9
 80145b6:	f04f 0801 	mov.w	r8, #1
 80145ba:	fa1f f189 	uxth.w	r1, r9
 80145be:	8828      	ldrh	r0, [r5, #0]
 80145c0:	f000 fc44 	bl	8014e4c <uxr_seq_num_add>
 80145c4:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80145c8:	6822      	ldr	r2, [r4, #0]
 80145ca:	fbb0 f1fc 	udiv	r1, r0, ip
 80145ce:	fb01 011c 	mls	r1, r1, ip, r0
 80145d2:	b289      	uxth	r1, r1
 80145d4:	6863      	ldr	r3, [r4, #4]
 80145d6:	fbb3 f3fc 	udiv	r3, r3, ip
 80145da:	fb01 2303 	mla	r3, r1, r3, r2
 80145de:	fa08 f209 	lsl.w	r2, r8, r9
 80145e2:	681b      	ldr	r3, [r3, #0]
 80145e4:	f109 0901 	add.w	r9, r9, #1
 80145e8:	b90b      	cbnz	r3, 80145ee <uxr_compute_acknack+0x9a>
 80145ea:	4317      	orrs	r7, r2
 80145ec:	b2bf      	uxth	r7, r7
 80145ee:	454e      	cmp	r6, r9
 80145f0:	d1e3      	bne.n	80145ba <uxr_compute_acknack+0x66>
 80145f2:	4638      	mov	r0, r7
 80145f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80145f8:	4607      	mov	r7, r0
 80145fa:	4638      	mov	r0, r7
 80145fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08014600 <uxr_init_output_best_effort_stream>:
 8014600:	b410      	push	{r4}
 8014602:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8014606:	81c4      	strh	r4, [r0, #14]
 8014608:	e9c0 1300 	strd	r1, r3, [r0]
 801460c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014610:	7303      	strb	r3, [r0, #12]
 8014612:	6082      	str	r2, [r0, #8]
 8014614:	4770      	bx	lr
 8014616:	bf00      	nop

08014618 <uxr_reset_output_best_effort_stream>:
 8014618:	7b02      	ldrb	r2, [r0, #12]
 801461a:	6042      	str	r2, [r0, #4]
 801461c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014620:	81c3      	strh	r3, [r0, #14]
 8014622:	4770      	bx	lr

08014624 <uxr_prepare_best_effort_buffer_to_write>:
 8014624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014626:	4604      	mov	r4, r0
 8014628:	b083      	sub	sp, #12
 801462a:	6840      	ldr	r0, [r0, #4]
 801462c:	460d      	mov	r5, r1
 801462e:	4616      	mov	r6, r2
 8014630:	f7fb fb46 	bl	800fcc0 <uxr_submessage_padding>
 8014634:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8014638:	4410      	add	r0, r2
 801463a:	1942      	adds	r2, r0, r5
 801463c:	4293      	cmp	r3, r2
 801463e:	bf2c      	ite	cs
 8014640:	2701      	movcs	r7, #1
 8014642:	2700      	movcc	r7, #0
 8014644:	d202      	bcs.n	801464c <uxr_prepare_best_effort_buffer_to_write+0x28>
 8014646:	4638      	mov	r0, r7
 8014648:	b003      	add	sp, #12
 801464a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801464c:	9000      	str	r0, [sp, #0]
 801464e:	6821      	ldr	r1, [r4, #0]
 8014650:	4630      	mov	r0, r6
 8014652:	2300      	movs	r3, #0
 8014654:	f7f9 feee 	bl	800e434 <ucdr_init_buffer_origin_offset>
 8014658:	6861      	ldr	r1, [r4, #4]
 801465a:	4638      	mov	r0, r7
 801465c:	4429      	add	r1, r5
 801465e:	6061      	str	r1, [r4, #4]
 8014660:	b003      	add	sp, #12
 8014662:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014664 <uxr_prepare_best_effort_buffer_to_send>:
 8014664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014668:	6845      	ldr	r5, [r0, #4]
 801466a:	4604      	mov	r4, r0
 801466c:	7b00      	ldrb	r0, [r0, #12]
 801466e:	4285      	cmp	r5, r0
 8014670:	bf8c      	ite	hi
 8014672:	2701      	movhi	r7, #1
 8014674:	2700      	movls	r7, #0
 8014676:	d802      	bhi.n	801467e <uxr_prepare_best_effort_buffer_to_send+0x1a>
 8014678:	4638      	mov	r0, r7
 801467a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801467e:	4688      	mov	r8, r1
 8014680:	89e0      	ldrh	r0, [r4, #14]
 8014682:	2101      	movs	r1, #1
 8014684:	4615      	mov	r5, r2
 8014686:	461e      	mov	r6, r3
 8014688:	f000 fbe0 	bl	8014e4c <uxr_seq_num_add>
 801468c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014690:	81e0      	strh	r0, [r4, #14]
 8014692:	8030      	strh	r0, [r6, #0]
 8014694:	f8c8 2000 	str.w	r2, [r8]
 8014698:	602b      	str	r3, [r5, #0]
 801469a:	7b23      	ldrb	r3, [r4, #12]
 801469c:	6063      	str	r3, [r4, #4]
 801469e:	4638      	mov	r0, r7
 80146a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080146a4 <on_full_output_buffer>:
 80146a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146a6:	6802      	ldr	r2, [r0, #0]
 80146a8:	460d      	mov	r5, r1
 80146aa:	6809      	ldr	r1, [r1, #0]
 80146ac:	892f      	ldrh	r7, [r5, #8]
 80146ae:	686c      	ldr	r4, [r5, #4]
 80146b0:	fbb4 f4f7 	udiv	r4, r4, r7
 80146b4:	1a53      	subs	r3, r2, r1
 80146b6:	fbb3 f3f4 	udiv	r3, r3, r4
 80146ba:	3301      	adds	r3, #1
 80146bc:	b29b      	uxth	r3, r3
 80146be:	fbb3 f2f7 	udiv	r2, r3, r7
 80146c2:	fb07 3312 	mls	r3, r7, r2, r3
 80146c6:	b29b      	uxth	r3, r3
 80146c8:	fb04 f403 	mul.w	r4, r4, r3
 80146cc:	7b2f      	ldrb	r7, [r5, #12]
 80146ce:	590a      	ldr	r2, [r1, r4]
 80146d0:	6903      	ldr	r3, [r0, #16]
 80146d2:	443c      	add	r4, r7
 80146d4:	3408      	adds	r4, #8
 80146d6:	1bd2      	subs	r2, r2, r7
 80146d8:	4606      	mov	r6, r0
 80146da:	4421      	add	r1, r4
 80146dc:	3a04      	subs	r2, #4
 80146de:	f7f9 feb3 	bl	800e448 <ucdr_init_buffer_origin>
 80146e2:	4630      	mov	r0, r6
 80146e4:	4902      	ldr	r1, [pc, #8]	; (80146f0 <on_full_output_buffer+0x4c>)
 80146e6:	462a      	mov	r2, r5
 80146e8:	f7f9 fe8c 	bl	800e404 <ucdr_set_on_full_buffer_callback>
 80146ec:	2000      	movs	r0, #0
 80146ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80146f0:	080146a5 	.word	0x080146a5

080146f4 <uxr_init_output_reliable_stream>:
 80146f4:	b430      	push	{r4, r5}
 80146f6:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80146fa:	6001      	str	r1, [r0, #0]
 80146fc:	8103      	strh	r3, [r0, #8]
 80146fe:	6042      	str	r2, [r0, #4]
 8014700:	7304      	strb	r4, [r0, #12]
 8014702:	b1b3      	cbz	r3, 8014732 <uxr_init_output_reliable_stream+0x3e>
 8014704:	600c      	str	r4, [r1, #0]
 8014706:	8901      	ldrh	r1, [r0, #8]
 8014708:	2901      	cmp	r1, #1
 801470a:	d912      	bls.n	8014732 <uxr_init_output_reliable_stream+0x3e>
 801470c:	2201      	movs	r2, #1
 801470e:	e9d0 5400 	ldrd	r5, r4, [r0]
 8014712:	fbb2 f3f1 	udiv	r3, r2, r1
 8014716:	fb01 2313 	mls	r3, r1, r3, r2
 801471a:	b29b      	uxth	r3, r3
 801471c:	fbb4 f1f1 	udiv	r1, r4, r1
 8014720:	fb03 f301 	mul.w	r3, r3, r1
 8014724:	7b01      	ldrb	r1, [r0, #12]
 8014726:	50e9      	str	r1, [r5, r3]
 8014728:	3201      	adds	r2, #1
 801472a:	8901      	ldrh	r1, [r0, #8]
 801472c:	b292      	uxth	r2, r2
 801472e:	4291      	cmp	r1, r2
 8014730:	d8ed      	bhi.n	801470e <uxr_init_output_reliable_stream+0x1a>
 8014732:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014736:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801473a:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801473e:	4b05      	ldr	r3, [pc, #20]	; (8014754 <uxr_init_output_reliable_stream+0x60>)
 8014740:	f8c0 300e 	str.w	r3, [r0, #14]
 8014744:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014748:	2300      	movs	r3, #0
 801474a:	bc30      	pop	{r4, r5}
 801474c:	8242      	strh	r2, [r0, #18]
 801474e:	8403      	strh	r3, [r0, #32]
 8014750:	4770      	bx	lr
 8014752:	bf00      	nop
 8014754:	ffff0000 	.word	0xffff0000

08014758 <uxr_reset_output_reliable_stream>:
 8014758:	8902      	ldrh	r2, [r0, #8]
 801475a:	b430      	push	{r4, r5}
 801475c:	b19a      	cbz	r2, 8014786 <uxr_reset_output_reliable_stream+0x2e>
 801475e:	2400      	movs	r4, #0
 8014760:	4621      	mov	r1, r4
 8014762:	fbb1 f3f2 	udiv	r3, r1, r2
 8014766:	fb02 1313 	mls	r3, r2, r3, r1
 801476a:	e9d0 5100 	ldrd	r5, r1, [r0]
 801476e:	b29b      	uxth	r3, r3
 8014770:	fbb1 f2f2 	udiv	r2, r1, r2
 8014774:	fb03 f302 	mul.w	r3, r3, r2
 8014778:	7b02      	ldrb	r2, [r0, #12]
 801477a:	50ea      	str	r2, [r5, r3]
 801477c:	3401      	adds	r4, #1
 801477e:	8902      	ldrh	r2, [r0, #8]
 8014780:	b2a1      	uxth	r1, r4
 8014782:	428a      	cmp	r2, r1
 8014784:	d8ed      	bhi.n	8014762 <uxr_reset_output_reliable_stream+0xa>
 8014786:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801478a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801478e:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8014792:	4b05      	ldr	r3, [pc, #20]	; (80147a8 <uxr_reset_output_reliable_stream+0x50>)
 8014794:	f8c0 300e 	str.w	r3, [r0, #14]
 8014798:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801479c:	2300      	movs	r3, #0
 801479e:	bc30      	pop	{r4, r5}
 80147a0:	8242      	strh	r2, [r0, #18]
 80147a2:	8403      	strh	r3, [r0, #32]
 80147a4:	4770      	bx	lr
 80147a6:	bf00      	nop
 80147a8:	ffff0000 	.word	0xffff0000

080147ac <uxr_prepare_reliable_buffer_to_write>:
 80147ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147b0:	89c5      	ldrh	r5, [r0, #14]
 80147b2:	4604      	mov	r4, r0
 80147b4:	8900      	ldrh	r0, [r0, #8]
 80147b6:	fbb5 f3f0 	udiv	r3, r5, r0
 80147ba:	4688      	mov	r8, r1
 80147bc:	e9d4 1600 	ldrd	r1, r6, [r4]
 80147c0:	fb00 5313 	mls	r3, r0, r3, r5
 80147c4:	b29b      	uxth	r3, r3
 80147c6:	fbb6 f0f0 	udiv	r0, r6, r0
 80147ca:	fb00 f303 	mul.w	r3, r0, r3
 80147ce:	3304      	adds	r3, #4
 80147d0:	18cb      	adds	r3, r1, r3
 80147d2:	b091      	sub	sp, #68	; 0x44
 80147d4:	f853 6c04 	ldr.w	r6, [r3, #-4]
 80147d8:	9004      	str	r0, [sp, #16]
 80147da:	2104      	movs	r1, #4
 80147dc:	4630      	mov	r0, r6
 80147de:	9305      	str	r3, [sp, #20]
 80147e0:	9206      	str	r2, [sp, #24]
 80147e2:	f7f9 fe3d 	bl	800e460 <ucdr_alignment>
 80147e6:	1833      	adds	r3, r6, r0
 80147e8:	9804      	ldr	r0, [sp, #16]
 80147ea:	9303      	str	r3, [sp, #12]
 80147ec:	eb03 0708 	add.w	r7, r3, r8
 80147f0:	1f06      	subs	r6, r0, #4
 80147f2:	42b7      	cmp	r7, r6
 80147f4:	f240 80dc 	bls.w	80149b0 <uxr_prepare_reliable_buffer_to_write+0x204>
 80147f8:	f894 e00c 	ldrb.w	lr, [r4, #12]
 80147fc:	eb0e 0308 	add.w	r3, lr, r8
 8014800:	42b3      	cmp	r3, r6
 8014802:	f240 80c2 	bls.w	801498a <uxr_prepare_reliable_buffer_to_write+0x1de>
 8014806:	9b03      	ldr	r3, [sp, #12]
 8014808:	3304      	adds	r3, #4
 801480a:	42b3      	cmp	r3, r6
 801480c:	f080 8112 	bcs.w	8014a34 <uxr_prepare_reliable_buffer_to_write+0x288>
 8014810:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8014814:	f1bc 0f00 	cmp.w	ip, #0
 8014818:	f000 8127 	beq.w	8014a6a <uxr_prepare_reliable_buffer_to_write+0x2be>
 801481c:	e9d4 7300 	ldrd	r7, r3, [r4]
 8014820:	2100      	movs	r1, #0
 8014822:	4608      	mov	r0, r1
 8014824:	460a      	mov	r2, r1
 8014826:	fbb3 f9fc 	udiv	r9, r3, ip
 801482a:	fbb2 f3fc 	udiv	r3, r2, ip
 801482e:	fb0c 2313 	mls	r3, ip, r3, r2
 8014832:	b29b      	uxth	r3, r3
 8014834:	fb09 7303 	mla	r3, r9, r3, r7
 8014838:	3101      	adds	r1, #1
 801483a:	681b      	ldr	r3, [r3, #0]
 801483c:	459e      	cmp	lr, r3
 801483e:	bf08      	it	eq
 8014840:	3001      	addeq	r0, #1
 8014842:	b28a      	uxth	r2, r1
 8014844:	bf08      	it	eq
 8014846:	b280      	uxtheq	r0, r0
 8014848:	4562      	cmp	r2, ip
 801484a:	d3ee      	bcc.n	801482a <uxr_prepare_reliable_buffer_to_write+0x7e>
 801484c:	9b03      	ldr	r3, [sp, #12]
 801484e:	1f37      	subs	r7, r6, #4
 8014850:	b2bf      	uxth	r7, r7
 8014852:	eba7 0903 	sub.w	r9, r7, r3
 8014856:	fa1f f989 	uxth.w	r9, r9
 801485a:	eba7 070e 	sub.w	r7, r7, lr
 801485e:	b2bf      	uxth	r7, r7
 8014860:	eba8 0809 	sub.w	r8, r8, r9
 8014864:	fbb8 faf7 	udiv	sl, r8, r7
 8014868:	fb07 831a 	mls	r3, r7, sl, r8
 801486c:	9707      	str	r7, [sp, #28]
 801486e:	2b00      	cmp	r3, #0
 8014870:	f040 80bf 	bne.w	80149f2 <uxr_prepare_reliable_buffer_to_write+0x246>
 8014874:	fa1f fa8a 	uxth.w	sl, sl
 8014878:	4582      	cmp	sl, r0
 801487a:	f200 8095 	bhi.w	80149a8 <uxr_prepare_reliable_buffer_to_write+0x1fc>
 801487e:	f10d 0b20 	add.w	fp, sp, #32
 8014882:	f1ba 0f00 	cmp.w	sl, #0
 8014886:	d03a      	beq.n	80148fe <uxr_prepare_reliable_buffer_to_write+0x152>
 8014888:	f04f 0800 	mov.w	r8, #0
 801488c:	f10d 0b20 	add.w	fp, sp, #32
 8014890:	e000      	b.n	8014894 <uxr_prepare_reliable_buffer_to_write+0xe8>
 8014892:	46b9      	mov	r9, r7
 8014894:	e9d4 3200 	ldrd	r3, r2, [r4]
 8014898:	fbb5 f1fc 	udiv	r1, r5, ip
 801489c:	fb0c 5111 	mls	r1, ip, r1, r5
 80148a0:	b289      	uxth	r1, r1
 80148a2:	fbb2 f2fc 	udiv	r2, r2, ip
 80148a6:	fb01 f102 	mul.w	r1, r1, r2
 80148aa:	3104      	adds	r1, #4
 80148ac:	4419      	add	r1, r3
 80148ae:	4632      	mov	r2, r6
 80148b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80148b4:	9300      	str	r3, [sp, #0]
 80148b6:	4658      	mov	r0, fp
 80148b8:	2300      	movs	r3, #0
 80148ba:	f7f9 fdbb 	bl	800e434 <ucdr_init_buffer_origin_offset>
 80148be:	464a      	mov	r2, r9
 80148c0:	2300      	movs	r3, #0
 80148c2:	210d      	movs	r1, #13
 80148c4:	4658      	mov	r0, fp
 80148c6:	f7fb f9bb 	bl	800fc40 <uxr_buffer_submessage_header>
 80148ca:	8920      	ldrh	r0, [r4, #8]
 80148cc:	fbb5 f3f0 	udiv	r3, r5, r0
 80148d0:	e9d4 2100 	ldrd	r2, r1, [r4]
 80148d4:	fb00 5313 	mls	r3, r0, r3, r5
 80148d8:	b29b      	uxth	r3, r3
 80148da:	fbb1 f1f0 	udiv	r1, r1, r0
 80148de:	fb03 f301 	mul.w	r3, r3, r1
 80148e2:	4628      	mov	r0, r5
 80148e4:	50d6      	str	r6, [r2, r3]
 80148e6:	2101      	movs	r1, #1
 80148e8:	f000 fab0 	bl	8014e4c <uxr_seq_num_add>
 80148ec:	f108 0801 	add.w	r8, r8, #1
 80148f0:	fa1f f388 	uxth.w	r3, r8
 80148f4:	459a      	cmp	sl, r3
 80148f6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80148fa:	4605      	mov	r5, r0
 80148fc:	d8c9      	bhi.n	8014892 <uxr_prepare_reliable_buffer_to_write+0xe6>
 80148fe:	fbb5 f1fc 	udiv	r1, r5, ip
 8014902:	fb0c 5111 	mls	r1, ip, r1, r5
 8014906:	b289      	uxth	r1, r1
 8014908:	6863      	ldr	r3, [r4, #4]
 801490a:	fbb3 fcfc 	udiv	ip, r3, ip
 801490e:	6823      	ldr	r3, [r4, #0]
 8014910:	fb01 f10c 	mul.w	r1, r1, ip
 8014914:	3104      	adds	r1, #4
 8014916:	4419      	add	r1, r3
 8014918:	4632      	mov	r2, r6
 801491a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801491e:	9300      	str	r3, [sp, #0]
 8014920:	4658      	mov	r0, fp
 8014922:	2300      	movs	r3, #0
 8014924:	f7f9 fd86 	bl	800e434 <ucdr_init_buffer_origin_offset>
 8014928:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801492c:	4658      	mov	r0, fp
 801492e:	fa1f f288 	uxth.w	r2, r8
 8014932:	2302      	movs	r3, #2
 8014934:	210d      	movs	r1, #13
 8014936:	f7fb f983 	bl	800fc40 <uxr_buffer_submessage_header>
 801493a:	e9d4 3200 	ldrd	r3, r2, [r4]
 801493e:	8921      	ldrh	r1, [r4, #8]
 8014940:	9f03      	ldr	r7, [sp, #12]
 8014942:	9307      	str	r3, [sp, #28]
 8014944:	9b05      	ldr	r3, [sp, #20]
 8014946:	7b26      	ldrb	r6, [r4, #12]
 8014948:	fbb5 f0f1 	udiv	r0, r5, r1
 801494c:	fbb2 f2f1 	udiv	r2, r2, r1
 8014950:	fb01 5010 	mls	r0, r1, r0, r5
 8014954:	1d39      	adds	r1, r7, #4
 8014956:	440b      	add	r3, r1
 8014958:	b280      	uxth	r0, r0
 801495a:	fb00 f002 	mul.w	r0, r0, r2
 801495e:	4619      	mov	r1, r3
 8014960:	3604      	adds	r6, #4
 8014962:	9b07      	ldr	r3, [sp, #28]
 8014964:	9a04      	ldr	r2, [sp, #16]
 8014966:	4446      	add	r6, r8
 8014968:	501e      	str	r6, [r3, r0]
 801496a:	9e06      	ldr	r6, [sp, #24]
 801496c:	3a08      	subs	r2, #8
 801496e:	1bd2      	subs	r2, r2, r7
 8014970:	4630      	mov	r0, r6
 8014972:	f7f9 fd71 	bl	800e458 <ucdr_init_buffer>
 8014976:	4630      	mov	r0, r6
 8014978:	493d      	ldr	r1, [pc, #244]	; (8014a70 <uxr_prepare_reliable_buffer_to_write+0x2c4>)
 801497a:	4622      	mov	r2, r4
 801497c:	f7f9 fd42 	bl	800e404 <ucdr_set_on_full_buffer_callback>
 8014980:	2001      	movs	r0, #1
 8014982:	81e5      	strh	r5, [r4, #14]
 8014984:	b011      	add	sp, #68	; 0x44
 8014986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801498a:	2101      	movs	r1, #1
 801498c:	89e0      	ldrh	r0, [r4, #14]
 801498e:	f000 fa5d 	bl	8014e4c <uxr_seq_num_add>
 8014992:	8921      	ldrh	r1, [r4, #8]
 8014994:	4605      	mov	r5, r0
 8014996:	8a60      	ldrh	r0, [r4, #18]
 8014998:	f000 fa58 	bl	8014e4c <uxr_seq_num_add>
 801499c:	4601      	mov	r1, r0
 801499e:	4628      	mov	r0, r5
 80149a0:	f000 fa5c 	bl	8014e5c <uxr_seq_num_cmp>
 80149a4:	2800      	cmp	r0, #0
 80149a6:	dd2a      	ble.n	80149fe <uxr_prepare_reliable_buffer_to_write+0x252>
 80149a8:	2000      	movs	r0, #0
 80149aa:	b011      	add	sp, #68	; 0x44
 80149ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149b0:	8921      	ldrh	r1, [r4, #8]
 80149b2:	8a60      	ldrh	r0, [r4, #18]
 80149b4:	f000 fa4a 	bl	8014e4c <uxr_seq_num_add>
 80149b8:	4601      	mov	r1, r0
 80149ba:	4628      	mov	r0, r5
 80149bc:	f000 fa4e 	bl	8014e5c <uxr_seq_num_cmp>
 80149c0:	2800      	cmp	r0, #0
 80149c2:	dcf1      	bgt.n	80149a8 <uxr_prepare_reliable_buffer_to_write+0x1fc>
 80149c4:	8921      	ldrh	r1, [r4, #8]
 80149c6:	fbb5 f3f1 	udiv	r3, r5, r1
 80149ca:	e9d4 4200 	ldrd	r4, r2, [r4]
 80149ce:	fb01 5313 	mls	r3, r1, r3, r5
 80149d2:	b29b      	uxth	r3, r3
 80149d4:	fbb2 f2f1 	udiv	r2, r2, r1
 80149d8:	fb03 f302 	mul.w	r3, r3, r2
 80149dc:	e9dd 1005 	ldrd	r1, r0, [sp, #20]
 80149e0:	50e7      	str	r7, [r4, r3]
 80149e2:	9b03      	ldr	r3, [sp, #12]
 80149e4:	9300      	str	r3, [sp, #0]
 80149e6:	463a      	mov	r2, r7
 80149e8:	2300      	movs	r3, #0
 80149ea:	f7f9 fd23 	bl	800e434 <ucdr_init_buffer_origin_offset>
 80149ee:	2001      	movs	r0, #1
 80149f0:	e7db      	b.n	80149aa <uxr_prepare_reliable_buffer_to_write+0x1fe>
 80149f2:	f10a 0a01 	add.w	sl, sl, #1
 80149f6:	fa1f fa8a 	uxth.w	sl, sl
 80149fa:	9307      	str	r3, [sp, #28]
 80149fc:	e73c      	b.n	8014878 <uxr_prepare_reliable_buffer_to_write+0xcc>
 80149fe:	8920      	ldrh	r0, [r4, #8]
 8014a00:	fbb5 f3f0 	udiv	r3, r5, r0
 8014a04:	fb00 5313 	mls	r3, r0, r3, r5
 8014a08:	b29b      	uxth	r3, r3
 8014a0a:	6862      	ldr	r2, [r4, #4]
 8014a0c:	6821      	ldr	r1, [r4, #0]
 8014a0e:	fbb2 f0f0 	udiv	r0, r2, r0
 8014a12:	fb03 f300 	mul.w	r3, r3, r0
 8014a16:	7b22      	ldrb	r2, [r4, #12]
 8014a18:	9806      	ldr	r0, [sp, #24]
 8014a1a:	3304      	adds	r3, #4
 8014a1c:	4419      	add	r1, r3
 8014a1e:	4442      	add	r2, r8
 8014a20:	f841 2c04 	str.w	r2, [r1, #-4]
 8014a24:	7b23      	ldrb	r3, [r4, #12]
 8014a26:	9300      	str	r3, [sp, #0]
 8014a28:	2300      	movs	r3, #0
 8014a2a:	f7f9 fd03 	bl	800e434 <ucdr_init_buffer_origin_offset>
 8014a2e:	81e5      	strh	r5, [r4, #14]
 8014a30:	2001      	movs	r0, #1
 8014a32:	e7ba      	b.n	80149aa <uxr_prepare_reliable_buffer_to_write+0x1fe>
 8014a34:	4628      	mov	r0, r5
 8014a36:	2101      	movs	r1, #1
 8014a38:	f000 fa08 	bl	8014e4c <uxr_seq_num_add>
 8014a3c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014a40:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8014a44:	fbb3 f1fc 	udiv	r1, r3, ip
 8014a48:	fbb0 f3fc 	udiv	r3, r0, ip
 8014a4c:	fb0c 0313 	mls	r3, ip, r3, r0
 8014a50:	b29b      	uxth	r3, r3
 8014a52:	fb03 f301 	mul.w	r3, r3, r1
 8014a56:	3304      	adds	r3, #4
 8014a58:	18d3      	adds	r3, r2, r3
 8014a5a:	9305      	str	r3, [sp, #20]
 8014a5c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8014a60:	f894 e00c 	ldrb.w	lr, [r4, #12]
 8014a64:	9303      	str	r3, [sp, #12]
 8014a66:	4605      	mov	r5, r0
 8014a68:	e6d4      	b.n	8014814 <uxr_prepare_reliable_buffer_to_write+0x68>
 8014a6a:	4660      	mov	r0, ip
 8014a6c:	e6ee      	b.n	801484c <uxr_prepare_reliable_buffer_to_write+0xa0>
 8014a6e:	bf00      	nop
 8014a70:	080146a5 	.word	0x080146a5

08014a74 <uxr_prepare_next_reliable_buffer_to_send>:
 8014a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a78:	4605      	mov	r5, r0
 8014a7a:	4688      	mov	r8, r1
 8014a7c:	8a00      	ldrh	r0, [r0, #16]
 8014a7e:	2101      	movs	r1, #1
 8014a80:	4617      	mov	r7, r2
 8014a82:	461e      	mov	r6, r3
 8014a84:	f000 f9e2 	bl	8014e4c <uxr_seq_num_add>
 8014a88:	8030      	strh	r0, [r6, #0]
 8014a8a:	892a      	ldrh	r2, [r5, #8]
 8014a8c:	fbb0 f3f2 	udiv	r3, r0, r2
 8014a90:	fb02 0413 	mls	r4, r2, r3, r0
 8014a94:	b2a4      	uxth	r4, r4
 8014a96:	686b      	ldr	r3, [r5, #4]
 8014a98:	fbb3 f2f2 	udiv	r2, r3, r2
 8014a9c:	682b      	ldr	r3, [r5, #0]
 8014a9e:	89e9      	ldrh	r1, [r5, #14]
 8014aa0:	fb04 f402 	mul.w	r4, r4, r2
 8014aa4:	3404      	adds	r4, #4
 8014aa6:	4423      	add	r3, r4
 8014aa8:	f8c8 3000 	str.w	r3, [r8]
 8014aac:	682b      	ldr	r3, [r5, #0]
 8014aae:	441c      	add	r4, r3
 8014ab0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8014ab4:	603b      	str	r3, [r7, #0]
 8014ab6:	f000 f9d1 	bl	8014e5c <uxr_seq_num_cmp>
 8014aba:	2800      	cmp	r0, #0
 8014abc:	dd02      	ble.n	8014ac4 <uxr_prepare_next_reliable_buffer_to_send+0x50>
 8014abe:	2000      	movs	r0, #0
 8014ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ac4:	683a      	ldr	r2, [r7, #0]
 8014ac6:	7b2b      	ldrb	r3, [r5, #12]
 8014ac8:	429a      	cmp	r2, r3
 8014aca:	d9f8      	bls.n	8014abe <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8014acc:	8a69      	ldrh	r1, [r5, #18]
 8014ace:	8a28      	ldrh	r0, [r5, #16]
 8014ad0:	f000 f9c0 	bl	8014e54 <uxr_seq_num_sub>
 8014ad4:	892b      	ldrh	r3, [r5, #8]
 8014ad6:	4283      	cmp	r3, r0
 8014ad8:	d0f1      	beq.n	8014abe <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8014ada:	8830      	ldrh	r0, [r6, #0]
 8014adc:	89eb      	ldrh	r3, [r5, #14]
 8014ade:	8228      	strh	r0, [r5, #16]
 8014ae0:	4298      	cmp	r0, r3
 8014ae2:	d002      	beq.n	8014aea <uxr_prepare_next_reliable_buffer_to_send+0x76>
 8014ae4:	2001      	movs	r0, #1
 8014ae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014aea:	2101      	movs	r1, #1
 8014aec:	f000 f9ae 	bl	8014e4c <uxr_seq_num_add>
 8014af0:	81e8      	strh	r0, [r5, #14]
 8014af2:	2001      	movs	r0, #1
 8014af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014af8 <uxr_update_output_stream_heartbeat_timestamp>:
 8014af8:	b5d0      	push	{r4, r6, r7, lr}
 8014afa:	8a01      	ldrh	r1, [r0, #16]
 8014afc:	4604      	mov	r4, r0
 8014afe:	8a40      	ldrh	r0, [r0, #18]
 8014b00:	4616      	mov	r6, r2
 8014b02:	461f      	mov	r7, r3
 8014b04:	f000 f9aa 	bl	8014e5c <uxr_seq_num_cmp>
 8014b08:	2800      	cmp	r0, #0
 8014b0a:	db07      	blt.n	8014b1c <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8014b0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014b10:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014b14:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8014b18:	2000      	movs	r0, #0
 8014b1a:	bdd0      	pop	{r4, r6, r7, pc}
 8014b1c:	f894 0020 	ldrb.w	r0, [r4, #32]
 8014b20:	b948      	cbnz	r0, 8014b36 <uxr_update_output_stream_heartbeat_timestamp+0x3e>
 8014b22:	2301      	movs	r3, #1
 8014b24:	f884 3020 	strb.w	r3, [r4, #32]
 8014b28:	f116 0364 	adds.w	r3, r6, #100	; 0x64
 8014b2c:	f147 0200 	adc.w	r2, r7, #0
 8014b30:	e9c4 3206 	strd	r3, r2, [r4, #24]
 8014b34:	bdd0      	pop	{r4, r6, r7, pc}
 8014b36:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8014b3a:	4296      	cmp	r6, r2
 8014b3c:	eb77 0303 	sbcs.w	r3, r7, r3
 8014b40:	bfa5      	ittet	ge
 8014b42:	3001      	addge	r0, #1
 8014b44:	f884 0020 	strbge.w	r0, [r4, #32]
 8014b48:	2000      	movlt	r0, #0
 8014b4a:	2001      	movge	r0, #1
 8014b4c:	e7ec      	b.n	8014b28 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8014b4e:	bf00      	nop

08014b50 <uxr_begin_output_nack_buffer_it>:
 8014b50:	8a40      	ldrh	r0, [r0, #18]
 8014b52:	4770      	bx	lr

08014b54 <uxr_next_reliable_nack_buffer_to_send>:
 8014b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014b58:	f890 9021 	ldrb.w	r9, [r0, #33]	; 0x21
 8014b5c:	f1b9 0f00 	cmp.w	r9, #0
 8014b60:	d011      	beq.n	8014b86 <uxr_next_reliable_nack_buffer_to_send+0x32>
 8014b62:	4605      	mov	r5, r0
 8014b64:	8818      	ldrh	r0, [r3, #0]
 8014b66:	460f      	mov	r7, r1
 8014b68:	4690      	mov	r8, r2
 8014b6a:	461e      	mov	r6, r3
 8014b6c:	2101      	movs	r1, #1
 8014b6e:	f000 f96d 	bl	8014e4c <uxr_seq_num_add>
 8014b72:	8030      	strh	r0, [r6, #0]
 8014b74:	8a29      	ldrh	r1, [r5, #16]
 8014b76:	f000 f971 	bl	8014e5c <uxr_seq_num_cmp>
 8014b7a:	2800      	cmp	r0, #0
 8014b7c:	dd06      	ble.n	8014b8c <uxr_next_reliable_nack_buffer_to_send+0x38>
 8014b7e:	f04f 0900 	mov.w	r9, #0
 8014b82:	f885 9021 	strb.w	r9, [r5, #33]	; 0x21
 8014b86:	4648      	mov	r0, r9
 8014b88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014b8c:	892a      	ldrh	r2, [r5, #8]
 8014b8e:	8830      	ldrh	r0, [r6, #0]
 8014b90:	fbb0 f4f2 	udiv	r4, r0, r2
 8014b94:	fb02 0414 	mls	r4, r2, r4, r0
 8014b98:	b2a4      	uxth	r4, r4
 8014b9a:	686b      	ldr	r3, [r5, #4]
 8014b9c:	fbb3 f2f2 	udiv	r2, r3, r2
 8014ba0:	682b      	ldr	r3, [r5, #0]
 8014ba2:	fb04 f402 	mul.w	r4, r4, r2
 8014ba6:	3404      	adds	r4, #4
 8014ba8:	4423      	add	r3, r4
 8014baa:	603b      	str	r3, [r7, #0]
 8014bac:	682b      	ldr	r3, [r5, #0]
 8014bae:	441c      	add	r4, r3
 8014bb0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8014bb4:	f8c8 3000 	str.w	r3, [r8]
 8014bb8:	7b2a      	ldrb	r2, [r5, #12]
 8014bba:	429a      	cmp	r2, r3
 8014bbc:	d0d6      	beq.n	8014b6c <uxr_next_reliable_nack_buffer_to_send+0x18>
 8014bbe:	4648      	mov	r0, r9
 8014bc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08014bc4 <uxr_process_acknack>:
 8014bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014bc6:	4604      	mov	r4, r0
 8014bc8:	460e      	mov	r6, r1
 8014bca:	4610      	mov	r0, r2
 8014bcc:	2101      	movs	r1, #1
 8014bce:	f000 f941 	bl	8014e54 <uxr_seq_num_sub>
 8014bd2:	8a61      	ldrh	r1, [r4, #18]
 8014bd4:	f000 f93e 	bl	8014e54 <uxr_seq_num_sub>
 8014bd8:	b1c0      	cbz	r0, 8014c0c <uxr_process_acknack+0x48>
 8014bda:	4605      	mov	r5, r0
 8014bdc:	2700      	movs	r7, #0
 8014bde:	2101      	movs	r1, #1
 8014be0:	8a60      	ldrh	r0, [r4, #18]
 8014be2:	f000 f933 	bl	8014e4c <uxr_seq_num_add>
 8014be6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8014bea:	fbb0 f3fc 	udiv	r3, r0, ip
 8014bee:	e9d4 2100 	ldrd	r2, r1, [r4]
 8014bf2:	fb0c 0313 	mls	r3, ip, r3, r0
 8014bf6:	b29b      	uxth	r3, r3
 8014bf8:	fbb1 f1fc 	udiv	r1, r1, ip
 8014bfc:	3701      	adds	r7, #1
 8014bfe:	fb03 f301 	mul.w	r3, r3, r1
 8014c02:	42bd      	cmp	r5, r7
 8014c04:	7b21      	ldrb	r1, [r4, #12]
 8014c06:	8260      	strh	r0, [r4, #18]
 8014c08:	50d1      	str	r1, [r2, r3]
 8014c0a:	d1e8      	bne.n	8014bde <uxr_process_acknack+0x1a>
 8014c0c:	3e00      	subs	r6, #0
 8014c0e:	f04f 0300 	mov.w	r3, #0
 8014c12:	bf18      	it	ne
 8014c14:	2601      	movne	r6, #1
 8014c16:	f884 3020 	strb.w	r3, [r4, #32]
 8014c1a:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 8014c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014c20 <uxr_is_output_up_to_date>:
 8014c20:	8a01      	ldrh	r1, [r0, #16]
 8014c22:	8a40      	ldrh	r0, [r0, #18]
 8014c24:	b508      	push	{r3, lr}
 8014c26:	f000 f919 	bl	8014e5c <uxr_seq_num_cmp>
 8014c2a:	fab0 f080 	clz	r0, r0
 8014c2e:	0940      	lsrs	r0, r0, #5
 8014c30:	bd08      	pop	{r3, pc}
 8014c32:	bf00      	nop

08014c34 <get_available_free_slots>:
 8014c34:	8901      	ldrh	r1, [r0, #8]
 8014c36:	b1d9      	cbz	r1, 8014c70 <get_available_free_slots+0x3c>
 8014c38:	b4f0      	push	{r4, r5, r6, r7}
 8014c3a:	2400      	movs	r4, #0
 8014c3c:	6845      	ldr	r5, [r0, #4]
 8014c3e:	6807      	ldr	r7, [r0, #0]
 8014c40:	7b06      	ldrb	r6, [r0, #12]
 8014c42:	fbb5 f5f1 	udiv	r5, r5, r1
 8014c46:	4620      	mov	r0, r4
 8014c48:	4622      	mov	r2, r4
 8014c4a:	fbb2 f3f1 	udiv	r3, r2, r1
 8014c4e:	fb01 2313 	mls	r3, r1, r3, r2
 8014c52:	b29b      	uxth	r3, r3
 8014c54:	fb05 7303 	mla	r3, r5, r3, r7
 8014c58:	3401      	adds	r4, #1
 8014c5a:	681b      	ldr	r3, [r3, #0]
 8014c5c:	429e      	cmp	r6, r3
 8014c5e:	bf08      	it	eq
 8014c60:	3001      	addeq	r0, #1
 8014c62:	b2a2      	uxth	r2, r4
 8014c64:	bf08      	it	eq
 8014c66:	b280      	uxtheq	r0, r0
 8014c68:	428a      	cmp	r2, r1
 8014c6a:	d3ee      	bcc.n	8014c4a <get_available_free_slots+0x16>
 8014c6c:	bcf0      	pop	{r4, r5, r6, r7}
 8014c6e:	4770      	bx	lr
 8014c70:	4608      	mov	r0, r1
 8014c72:	4770      	bx	lr

08014c74 <uxr_buffer_cancel_data>:
 8014c74:	b530      	push	{r4, r5, lr}
 8014c76:	b095      	sub	sp, #84	; 0x54
 8014c78:	2400      	movs	r4, #0
 8014c7a:	2308      	movs	r3, #8
 8014c7c:	e9cd 4201 	strd	r4, r2, [sp, #4]
 8014c80:	9300      	str	r3, [sp, #0]
 8014c82:	9205      	str	r2, [sp, #20]
 8014c84:	2501      	movs	r5, #1
 8014c86:	ab0c      	add	r3, sp, #48	; 0x30
 8014c88:	2210      	movs	r2, #16
 8014c8a:	f8ad 401c 	strh.w	r4, [sp, #28]
 8014c8e:	f88d 401e 	strb.w	r4, [sp, #30]
 8014c92:	f8cd 4026 	str.w	r4, [sp, #38]	; 0x26
 8014c96:	f8cd 402a 	str.w	r4, [sp, #42]	; 0x2a
 8014c9a:	9103      	str	r1, [sp, #12]
 8014c9c:	4604      	mov	r4, r0
 8014c9e:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8014ca2:	f7fa fd29 	bl	800f6f8 <uxr_prepare_stream_to_write_submessage>
 8014ca6:	b918      	cbnz	r0, 8014cb0 <uxr_buffer_cancel_data+0x3c>
 8014ca8:	4604      	mov	r4, r0
 8014caa:	4620      	mov	r0, r4
 8014cac:	b015      	add	sp, #84	; 0x54
 8014cae:	bd30      	pop	{r4, r5, pc}
 8014cb0:	9905      	ldr	r1, [sp, #20]
 8014cb2:	aa06      	add	r2, sp, #24
 8014cb4:	4620      	mov	r0, r4
 8014cb6:	f7fa fe59 	bl	800f96c <uxr_init_base_object_request>
 8014cba:	a906      	add	r1, sp, #24
 8014cbc:	4604      	mov	r4, r0
 8014cbe:	a80c      	add	r0, sp, #48	; 0x30
 8014cc0:	f7fc f852 	bl	8010d68 <uxr_serialize_READ_DATA_Payload>
 8014cc4:	4620      	mov	r0, r4
 8014cc6:	b015      	add	sp, #84	; 0x54
 8014cc8:	bd30      	pop	{r4, r5, pc}
 8014cca:	bf00      	nop

08014ccc <read_submessage_format>:
 8014ccc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014cd0:	b095      	sub	sp, #84	; 0x54
 8014cd2:	f8bd 9078 	ldrh.w	r9, [sp, #120]	; 0x78
 8014cd6:	b113      	cbz	r3, 8014cde <read_submessage_format+0x12>
 8014cd8:	b015      	add	sp, #84	; 0x54
 8014cda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014cde:	460c      	mov	r4, r1
 8014ce0:	4616      	mov	r6, r2
 8014ce2:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8014ce6:	461d      	mov	r5, r3
 8014ce8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014cea:	9304      	str	r3, [sp, #16]
 8014cec:	1a52      	subs	r2, r2, r1
 8014cee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014cf0:	9305      	str	r3, [sp, #20]
 8014cf2:	4607      	mov	r7, r0
 8014cf4:	a80c      	add	r0, sp, #48	; 0x30
 8014cf6:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 8014cfa:	f7f9 fbad 	bl	800e458 <ucdr_init_buffer>
 8014cfe:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8014d02:	a80c      	add	r0, sp, #48	; 0x30
 8014d04:	f7f9 fb7e 	bl	800e404 <ucdr_set_on_full_buffer_callback>
 8014d08:	69e3      	ldr	r3, [r4, #28]
 8014d0a:	b193      	cbz	r3, 8014d32 <read_submessage_format+0x66>
 8014d0c:	f1b8 0f07 	cmp.w	r8, #7
 8014d10:	751d      	strb	r5, [r3, #20]
 8014d12:	d03e      	beq.n	8014d92 <read_submessage_format+0xc6>
 8014d14:	f1b8 0f08 	cmp.w	r8, #8
 8014d18:	d02c      	beq.n	8014d74 <read_submessage_format+0xa8>
 8014d1a:	f1b8 0f06 	cmp.w	r8, #6
 8014d1e:	d011      	beq.n	8014d44 <read_submessage_format+0x78>
 8014d20:	2201      	movs	r2, #1
 8014d22:	751a      	strb	r2, [r3, #20]
 8014d24:	4631      	mov	r1, r6
 8014d26:	4620      	mov	r0, r4
 8014d28:	f7f9 fbe6 	bl	800e4f8 <ucdr_advance_buffer>
 8014d2c:	b015      	add	sp, #84	; 0x54
 8014d2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014d32:	f1b8 0f07 	cmp.w	r8, #7
 8014d36:	d02c      	beq.n	8014d92 <read_submessage_format+0xc6>
 8014d38:	f1b8 0f08 	cmp.w	r8, #8
 8014d3c:	d01a      	beq.n	8014d74 <read_submessage_format+0xa8>
 8014d3e:	f1b8 0f06 	cmp.w	r8, #6
 8014d42:	d1ef      	bne.n	8014d24 <read_submessage_format+0x58>
 8014d44:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 8014d48:	b18d      	cbz	r5, 8014d6e <read_submessage_format+0xa2>
 8014d4a:	2306      	movs	r3, #6
 8014d4c:	f88d 3016 	strb.w	r3, [sp, #22]
 8014d50:	aa0c      	add	r2, sp, #48	; 0x30
 8014d52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014d56:	9302      	str	r3, [sp, #8]
 8014d58:	9200      	str	r2, [sp, #0]
 8014d5a:	9b04      	ldr	r3, [sp, #16]
 8014d5c:	9905      	ldr	r1, [sp, #20]
 8014d5e:	9601      	str	r6, [sp, #4]
 8014d60:	464a      	mov	r2, r9
 8014d62:	4638      	mov	r0, r7
 8014d64:	47a8      	blx	r5
 8014d66:	2301      	movs	r3, #1
 8014d68:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8014d6c:	69e3      	ldr	r3, [r4, #28]
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d1d6      	bne.n	8014d20 <read_submessage_format+0x54>
 8014d72:	e7d7      	b.n	8014d24 <read_submessage_format+0x58>
 8014d74:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8014d78:	2a00      	cmp	r2, #0
 8014d7a:	d0f8      	beq.n	8014d6e <read_submessage_format+0xa2>
 8014d7c:	a906      	add	r1, sp, #24
 8014d7e:	a80c      	add	r0, sp, #48	; 0x30
 8014d80:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8014d82:	f7fc f891 	bl	8010ea8 <uxr_deserialize_SampleIdentity>
 8014d86:	2800      	cmp	r0, #0
 8014d88:	d13c      	bne.n	8014e04 <read_submessage_format+0x138>
 8014d8a:	69e3      	ldr	r3, [r4, #28]
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d1c7      	bne.n	8014d20 <read_submessage_format+0x54>
 8014d90:	e7c8      	b.n	8014d24 <read_submessage_format+0x58>
 8014d92:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8014d96:	b132      	cbz	r2, 8014da6 <read_submessage_format+0xda>
 8014d98:	a906      	add	r1, sp, #24
 8014d9a:	a80c      	add	r0, sp, #48	; 0x30
 8014d9c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8014d9e:	f7fb fd67 	bl	8010870 <uxr_deserialize_BaseObjectRequest>
 8014da2:	b930      	cbnz	r0, 8014db2 <read_submessage_format+0xe6>
 8014da4:	69e3      	ldr	r3, [r4, #28]
 8014da6:	68a2      	ldr	r2, [r4, #8]
 8014da8:	4432      	add	r2, r6
 8014daa:	60a2      	str	r2, [r4, #8]
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d1b7      	bne.n	8014d20 <read_submessage_format+0x54>
 8014db0:	e7b8      	b.n	8014d24 <read_submessage_format+0x58>
 8014db2:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8014db6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014db8:	1a52      	subs	r2, r2, r1
 8014dba:	a80c      	add	r0, sp, #48	; 0x30
 8014dbc:	1aed      	subs	r5, r5, r3
 8014dbe:	f7f9 fb4b 	bl	800e458 <ucdr_init_buffer>
 8014dc2:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8014dc6:	a80c      	add	r0, sp, #48	; 0x30
 8014dc8:	f7f9 fb1c 	bl	800e404 <ucdr_set_on_full_buffer_callback>
 8014dcc:	4435      	add	r5, r6
 8014dce:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8014dd2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8014dd6:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8014dda:	9002      	str	r0, [sp, #8]
 8014ddc:	2207      	movs	r2, #7
 8014dde:	f88d 2016 	strb.w	r2, [sp, #22]
 8014de2:	b2ad      	uxth	r5, r5
 8014de4:	aa0c      	add	r2, sp, #48	; 0x30
 8014de6:	9200      	str	r2, [sp, #0]
 8014de8:	9501      	str	r5, [sp, #4]
 8014dea:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8014dee:	b29b      	uxth	r3, r3
 8014df0:	9905      	ldr	r1, [sp, #20]
 8014df2:	f8d7 50ac 	ldr.w	r5, [r7, #172]	; 0xac
 8014df6:	464a      	mov	r2, r9
 8014df8:	4638      	mov	r0, r7
 8014dfa:	47a8      	blx	r5
 8014dfc:	2301      	movs	r3, #1
 8014dfe:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8014e02:	e7cf      	b.n	8014da4 <read_submessage_format+0xd8>
 8014e04:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8014e08:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014e0a:	1a52      	subs	r2, r2, r1
 8014e0c:	a80c      	add	r0, sp, #48	; 0x30
 8014e0e:	1aed      	subs	r5, r5, r3
 8014e10:	f7f9 fb22 	bl	800e458 <ucdr_init_buffer>
 8014e14:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8014e18:	a80c      	add	r0, sp, #48	; 0x30
 8014e1a:	f7f9 faf3 	bl	800e404 <ucdr_set_on_full_buffer_callback>
 8014e1e:	4435      	add	r5, r6
 8014e20:	2308      	movs	r3, #8
 8014e22:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8014e26:	f88d 3016 	strb.w	r3, [sp, #22]
 8014e2a:	b2ad      	uxth	r5, r5
 8014e2c:	ab0c      	add	r3, sp, #48	; 0x30
 8014e2e:	9300      	str	r3, [sp, #0]
 8014e30:	9002      	str	r0, [sp, #8]
 8014e32:	9501      	str	r5, [sp, #4]
 8014e34:	ab06      	add	r3, sp, #24
 8014e36:	9905      	ldr	r1, [sp, #20]
 8014e38:	f8d7 50a4 	ldr.w	r5, [r7, #164]	; 0xa4
 8014e3c:	464a      	mov	r2, r9
 8014e3e:	4638      	mov	r0, r7
 8014e40:	47a8      	blx	r5
 8014e42:	2301      	movs	r3, #1
 8014e44:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8014e48:	e79f      	b.n	8014d8a <read_submessage_format+0xbe>
 8014e4a:	bf00      	nop

08014e4c <uxr_seq_num_add>:
 8014e4c:	4408      	add	r0, r1
 8014e4e:	b280      	uxth	r0, r0
 8014e50:	4770      	bx	lr
 8014e52:	bf00      	nop

08014e54 <uxr_seq_num_sub>:
 8014e54:	1a40      	subs	r0, r0, r1
 8014e56:	b280      	uxth	r0, r0
 8014e58:	4770      	bx	lr
 8014e5a:	bf00      	nop

08014e5c <uxr_seq_num_cmp>:
 8014e5c:	4288      	cmp	r0, r1
 8014e5e:	d011      	beq.n	8014e84 <uxr_seq_num_cmp+0x28>
 8014e60:	d309      	bcc.n	8014e76 <uxr_seq_num_cmp+0x1a>
 8014e62:	4288      	cmp	r0, r1
 8014e64:	d910      	bls.n	8014e88 <uxr_seq_num_cmp+0x2c>
 8014e66:	1a40      	subs	r0, r0, r1
 8014e68:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8014e6c:	bfd4      	ite	le
 8014e6e:	2001      	movle	r0, #1
 8014e70:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 8014e74:	4770      	bx	lr
 8014e76:	1a0b      	subs	r3, r1, r0
 8014e78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014e7c:	daf1      	bge.n	8014e62 <uxr_seq_num_cmp+0x6>
 8014e7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014e82:	4770      	bx	lr
 8014e84:	2000      	movs	r0, #0
 8014e86:	4770      	bx	lr
 8014e88:	2001      	movs	r0, #1
 8014e8a:	4770      	bx	lr

08014e8c <uxr_init_framing_io>:
 8014e8c:	2300      	movs	r3, #0
 8014e8e:	7041      	strb	r1, [r0, #1]
 8014e90:	7003      	strb	r3, [r0, #0]
 8014e92:	8583      	strh	r3, [r0, #44]	; 0x2c
 8014e94:	4770      	bx	lr
 8014e96:	bf00      	nop

08014e98 <uxr_write_framed_msg>:
 8014e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e9c:	7845      	ldrb	r5, [r0, #1]
 8014e9e:	b085      	sub	sp, #20
 8014ea0:	4604      	mov	r4, r0
 8014ea2:	f1a5 0c7d 	sub.w	ip, r5, #125	; 0x7d
 8014ea6:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
 8014eaa:	f1bc 0f01 	cmp.w	ip, #1
 8014eae:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8014eb2:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8014eb6:	f884 e038 	strb.w	lr, [r4, #56]	; 0x38
 8014eba:	460e      	mov	r6, r1
 8014ebc:	4617      	mov	r7, r2
 8014ebe:	469b      	mov	fp, r3
 8014ec0:	f240 8116 	bls.w	80150f0 <uxr_write_framed_msg+0x258>
 8014ec4:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8014ec8:	2302      	movs	r3, #2
 8014eca:	2a01      	cmp	r2, #1
 8014ecc:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 8014ed0:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8014ed4:	f240 8091 	bls.w	8014ffa <uxr_write_framed_msg+0x162>
 8014ed8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014eda:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 8014ede:	b2d9      	uxtb	r1, r3
 8014ee0:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8014ee4:	2203      	movs	r2, #3
 8014ee6:	2b01      	cmp	r3, #1
 8014ee8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8014eec:	f240 809a 	bls.w	8015024 <uxr_write_framed_msg+0x18c>
 8014ef0:	18a3      	adds	r3, r4, r2
 8014ef2:	3201      	adds	r2, #1
 8014ef4:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 8014ef8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8014efc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014efe:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8014f02:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8014f06:	2901      	cmp	r1, #1
 8014f08:	eb04 0102 	add.w	r1, r4, r2
 8014f0c:	f240 8101 	bls.w	8015112 <uxr_write_framed_msg+0x27a>
 8014f10:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8014f14:	3201      	adds	r2, #1
 8014f16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014f18:	b2d2      	uxtb	r2, r2
 8014f1a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	f000 8106 	beq.w	8015130 <uxr_write_framed_msg+0x298>
 8014f24:	f04f 0a00 	mov.w	sl, #0
 8014f28:	46d1      	mov	r9, sl
 8014f2a:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8014f2e:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8014f32:	2901      	cmp	r1, #1
 8014f34:	f240 80a3 	bls.w	801507e <uxr_write_framed_msg+0x1e6>
 8014f38:	2a29      	cmp	r2, #41	; 0x29
 8014f3a:	d87f      	bhi.n	801503c <uxr_write_framed_msg+0x1a4>
 8014f3c:	18a1      	adds	r1, r4, r2
 8014f3e:	3201      	adds	r2, #1
 8014f40:	b2d2      	uxtb	r2, r2
 8014f42:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8014f46:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8014f4a:	ea8a 0303 	eor.w	r3, sl, r3
 8014f4e:	4984      	ldr	r1, [pc, #528]	; (8015160 <uxr_write_framed_msg+0x2c8>)
 8014f50:	b2db      	uxtb	r3, r3
 8014f52:	f109 0901 	add.w	r9, r9, #1
 8014f56:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014f5a:	ea83 2a1a 	eor.w	sl, r3, sl, lsr #8
 8014f5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014f60:	454b      	cmp	r3, r9
 8014f62:	d8e2      	bhi.n	8014f2a <uxr_write_framed_msg+0x92>
 8014f64:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8014f68:	fa5f f98a 	uxtb.w	r9, sl
 8014f6c:	9301      	str	r3, [sp, #4]
 8014f6e:	f04f 0b00 	mov.w	fp, #0
 8014f72:	f88d 900c 	strb.w	r9, [sp, #12]
 8014f76:	f88d 300d 	strb.w	r3, [sp, #13]
 8014f7a:	f1a9 0a7d 	sub.w	sl, r9, #125	; 0x7d
 8014f7e:	fa5f f18a 	uxtb.w	r1, sl
 8014f82:	2901      	cmp	r1, #1
 8014f84:	d920      	bls.n	8014fc8 <uxr_write_framed_msg+0x130>
 8014f86:	2a29      	cmp	r2, #41	; 0x29
 8014f88:	f240 808b 	bls.w	80150a2 <uxr_write_framed_msg+0x20a>
 8014f8c:	2500      	movs	r5, #0
 8014f8e:	e000      	b.n	8014f92 <uxr_write_framed_msg+0xfa>
 8014f90:	b160      	cbz	r0, 8014fac <uxr_write_framed_msg+0x114>
 8014f92:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8014f96:	1b52      	subs	r2, r2, r5
 8014f98:	4421      	add	r1, r4
 8014f9a:	4643      	mov	r3, r8
 8014f9c:	4638      	mov	r0, r7
 8014f9e:	47b0      	blx	r6
 8014fa0:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8014fa4:	4405      	add	r5, r0
 8014fa6:	4295      	cmp	r5, r2
 8014fa8:	d3f2      	bcc.n	8014f90 <uxr_write_framed_msg+0xf8>
 8014faa:	d003      	beq.n	8014fb4 <uxr_write_framed_msg+0x11c>
 8014fac:	2000      	movs	r0, #0
 8014fae:	b005      	add	sp, #20
 8014fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fb4:	fa5f f18a 	uxtb.w	r1, sl
 8014fb8:	f04f 0300 	mov.w	r3, #0
 8014fbc:	2901      	cmp	r1, #1
 8014fbe:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8014fc2:	f04f 0200 	mov.w	r2, #0
 8014fc6:	d86c      	bhi.n	80150a2 <uxr_write_framed_msg+0x20a>
 8014fc8:	1c51      	adds	r1, r2, #1
 8014fca:	b2c9      	uxtb	r1, r1
 8014fcc:	2929      	cmp	r1, #41	; 0x29
 8014fce:	d8dd      	bhi.n	8014f8c <uxr_write_framed_msg+0xf4>
 8014fd0:	18a0      	adds	r0, r4, r2
 8014fd2:	3202      	adds	r2, #2
 8014fd4:	f089 0920 	eor.w	r9, r9, #32
 8014fd8:	b2d2      	uxtb	r2, r2
 8014fda:	4659      	mov	r1, fp
 8014fdc:	f04f 037d 	mov.w	r3, #125	; 0x7d
 8014fe0:	f880 9039 	strb.w	r9, [r0, #57]	; 0x39
 8014fe4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8014fe8:	f04f 0b01 	mov.w	fp, #1
 8014fec:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8014ff0:	2900      	cmp	r1, #0
 8014ff2:	d162      	bne.n	80150ba <uxr_write_framed_msg+0x222>
 8014ff4:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8014ff8:	e7bf      	b.n	8014f7a <uxr_write_framed_msg+0xe2>
 8014ffa:	2204      	movs	r2, #4
 8014ffc:	2503      	movs	r5, #3
 8014ffe:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015000:	4423      	add	r3, r4
 8015002:	b2c9      	uxtb	r1, r1
 8015004:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8015008:	f883 c038 	strb.w	ip, [r3, #56]	; 0x38
 801500c:	4425      	add	r5, r4
 801500e:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8015012:	f080 0020 	eor.w	r0, r0, #32
 8015016:	2b01      	cmp	r3, #1
 8015018:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 801501c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015020:	f63f af66 	bhi.w	8014ef0 <uxr_write_framed_msg+0x58>
 8015024:	18a3      	adds	r3, r4, r2
 8015026:	f081 0120 	eor.w	r1, r1, #32
 801502a:	3202      	adds	r2, #2
 801502c:	207d      	movs	r0, #125	; 0x7d
 801502e:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 8015032:	f883 0038 	strb.w	r0, [r3, #56]	; 0x38
 8015036:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801503a:	e75f      	b.n	8014efc <uxr_write_framed_msg+0x64>
 801503c:	2500      	movs	r5, #0
 801503e:	e001      	b.n	8015044 <uxr_write_framed_msg+0x1ac>
 8015040:	2800      	cmp	r0, #0
 8015042:	d0b3      	beq.n	8014fac <uxr_write_framed_msg+0x114>
 8015044:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8015048:	1b52      	subs	r2, r2, r5
 801504a:	4421      	add	r1, r4
 801504c:	4643      	mov	r3, r8
 801504e:	4638      	mov	r0, r7
 8015050:	47b0      	blx	r6
 8015052:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8015056:	4405      	add	r5, r0
 8015058:	4295      	cmp	r5, r2
 801505a:	d3f1      	bcc.n	8015040 <uxr_write_framed_msg+0x1a8>
 801505c:	d1a6      	bne.n	8014fac <uxr_write_framed_msg+0x114>
 801505e:	f04f 0300 	mov.w	r3, #0
 8015062:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8015066:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015068:	454b      	cmp	r3, r9
 801506a:	d971      	bls.n	8015150 <uxr_write_framed_msg+0x2b8>
 801506c:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8015070:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8015074:	2901      	cmp	r1, #1
 8015076:	f04f 0200 	mov.w	r2, #0
 801507a:	f63f af5d 	bhi.w	8014f38 <uxr_write_framed_msg+0xa0>
 801507e:	1c51      	adds	r1, r2, #1
 8015080:	b2c9      	uxtb	r1, r1
 8015082:	2929      	cmp	r1, #41	; 0x29
 8015084:	d8da      	bhi.n	801503c <uxr_write_framed_msg+0x1a4>
 8015086:	18a0      	adds	r0, r4, r2
 8015088:	3202      	adds	r2, #2
 801508a:	b2d2      	uxtb	r2, r2
 801508c:	f083 0120 	eor.w	r1, r3, #32
 8015090:	f04f 057d 	mov.w	r5, #125	; 0x7d
 8015094:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 8015098:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
 801509c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80150a0:	e753      	b.n	8014f4a <uxr_write_framed_msg+0xb2>
 80150a2:	18a0      	adds	r0, r4, r2
 80150a4:	3201      	adds	r2, #1
 80150a6:	b2d2      	uxtb	r2, r2
 80150a8:	4659      	mov	r1, fp
 80150aa:	f880 9038 	strb.w	r9, [r0, #56]	; 0x38
 80150ae:	f04f 0b01 	mov.w	fp, #1
 80150b2:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80150b6:	2900      	cmp	r1, #0
 80150b8:	d09c      	beq.n	8014ff4 <uxr_write_framed_msg+0x15c>
 80150ba:	2500      	movs	r5, #0
 80150bc:	e002      	b.n	80150c4 <uxr_write_framed_msg+0x22c>
 80150be:	2800      	cmp	r0, #0
 80150c0:	f43f af74 	beq.w	8014fac <uxr_write_framed_msg+0x114>
 80150c4:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80150c8:	1b52      	subs	r2, r2, r5
 80150ca:	4421      	add	r1, r4
 80150cc:	4643      	mov	r3, r8
 80150ce:	4638      	mov	r0, r7
 80150d0:	47b0      	blx	r6
 80150d2:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80150d6:	4405      	add	r5, r0
 80150d8:	4295      	cmp	r5, r2
 80150da:	d3f0      	bcc.n	80150be <uxr_write_framed_msg+0x226>
 80150dc:	f47f af66 	bne.w	8014fac <uxr_write_framed_msg+0x114>
 80150e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80150e2:	2300      	movs	r3, #0
 80150e4:	b290      	uxth	r0, r2
 80150e6:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80150ea:	b005      	add	sp, #20
 80150ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150f0:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 80150f4:	f085 0520 	eor.w	r5, r5, #32
 80150f8:	2303      	movs	r3, #3
 80150fa:	217d      	movs	r1, #125	; 0x7d
 80150fc:	2a01      	cmp	r2, #1
 80150fe:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
 8015102:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8015106:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 801510a:	d814      	bhi.n	8015136 <uxr_write_framed_msg+0x29e>
 801510c:	2205      	movs	r2, #5
 801510e:	2504      	movs	r5, #4
 8015110:	e775      	b.n	8014ffe <uxr_write_framed_msg+0x166>
 8015112:	f083 0320 	eor.w	r3, r3, #32
 8015116:	f881 3039 	strb.w	r3, [r1, #57]	; 0x39
 801511a:	3202      	adds	r2, #2
 801511c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801511e:	b2d2      	uxtb	r2, r2
 8015120:	207d      	movs	r0, #125	; 0x7d
 8015122:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 8015126:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801512a:	2b00      	cmp	r3, #0
 801512c:	f47f aefa 	bne.w	8014f24 <uxr_write_framed_msg+0x8c>
 8015130:	9301      	str	r3, [sp, #4]
 8015132:	4699      	mov	r9, r3
 8015134:	e71b      	b.n	8014f6e <uxr_write_framed_msg+0xd6>
 8015136:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015138:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 801513c:	b2d9      	uxtb	r1, r3
 801513e:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8015142:	2204      	movs	r2, #4
 8015144:	2b01      	cmp	r3, #1
 8015146:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801514a:	f63f aed1 	bhi.w	8014ef0 <uxr_write_framed_msg+0x58>
 801514e:	e769      	b.n	8015024 <uxr_write_framed_msg+0x18c>
 8015150:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8015154:	fa5f f98a 	uxtb.w	r9, sl
 8015158:	9301      	str	r3, [sp, #4]
 801515a:	2200      	movs	r2, #0
 801515c:	e707      	b.n	8014f6e <uxr_write_framed_msg+0xd6>
 801515e:	bf00      	nop
 8015160:	08017aec 	.word	0x08017aec

08015164 <uxr_framing_read_transport>:
 8015164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015168:	4604      	mov	r4, r0
 801516a:	b083      	sub	sp, #12
 801516c:	461f      	mov	r7, r3
 801516e:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8015172:	4689      	mov	r9, r1
 8015174:	4692      	mov	sl, r2
 8015176:	f7fa fda9 	bl	800fccc <uxr_millis>
 801517a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801517e:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 8015182:	42b3      	cmp	r3, r6
 8015184:	4680      	mov	r8, r0
 8015186:	d05f      	beq.n	8015248 <uxr_framing_read_transport+0xe4>
 8015188:	d81b      	bhi.n	80151c2 <uxr_framing_read_transport+0x5e>
 801518a:	1e75      	subs	r5, r6, #1
 801518c:	1aed      	subs	r5, r5, r3
 801518e:	b2ed      	uxtb	r5, r5
 8015190:	2600      	movs	r6, #0
 8015192:	455d      	cmp	r5, fp
 8015194:	d81e      	bhi.n	80151d4 <uxr_framing_read_transport+0x70>
 8015196:	19ab      	adds	r3, r5, r6
 8015198:	455b      	cmp	r3, fp
 801519a:	bf84      	itt	hi
 801519c:	ebab 0605 	subhi.w	r6, fp, r5
 80151a0:	b2f6      	uxtbhi	r6, r6
 80151a2:	b9e5      	cbnz	r5, 80151de <uxr_framing_read_transport+0x7a>
 80151a4:	f04f 0b00 	mov.w	fp, #0
 80151a8:	f7fa fd90 	bl	800fccc <uxr_millis>
 80151ac:	683b      	ldr	r3, [r7, #0]
 80151ae:	eba0 0008 	sub.w	r0, r0, r8
 80151b2:	1a1b      	subs	r3, r3, r0
 80151b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80151b8:	4658      	mov	r0, fp
 80151ba:	603b      	str	r3, [r7, #0]
 80151bc:	b003      	add	sp, #12
 80151be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151c2:	2e00      	cmp	r6, #0
 80151c4:	d048      	beq.n	8015258 <uxr_framing_read_transport+0xf4>
 80151c6:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 80151ca:	b2ed      	uxtb	r5, r5
 80151cc:	3e01      	subs	r6, #1
 80151ce:	455d      	cmp	r5, fp
 80151d0:	b2f6      	uxtb	r6, r6
 80151d2:	d9e0      	bls.n	8015196 <uxr_framing_read_transport+0x32>
 80151d4:	fa5f f58b 	uxtb.w	r5, fp
 80151d8:	2600      	movs	r6, #0
 80151da:	2d00      	cmp	r5, #0
 80151dc:	d0e2      	beq.n	80151a4 <uxr_framing_read_transport+0x40>
 80151de:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80151e2:	3102      	adds	r1, #2
 80151e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80151e6:	9300      	str	r3, [sp, #0]
 80151e8:	683b      	ldr	r3, [r7, #0]
 80151ea:	4421      	add	r1, r4
 80151ec:	462a      	mov	r2, r5
 80151ee:	4650      	mov	r0, sl
 80151f0:	47c8      	blx	r9
 80151f2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80151f6:	4a1b      	ldr	r2, [pc, #108]	; (8015264 <uxr_framing_read_transport+0x100>)
 80151f8:	4403      	add	r3, r0
 80151fa:	0859      	lsrs	r1, r3, #1
 80151fc:	fba2 2101 	umull	r2, r1, r2, r1
 8015200:	0889      	lsrs	r1, r1, #2
 8015202:	222a      	movs	r2, #42	; 0x2a
 8015204:	fb02 3111 	mls	r1, r2, r1, r3
 8015208:	4683      	mov	fp, r0
 801520a:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 801520e:	2800      	cmp	r0, #0
 8015210:	d0c8      	beq.n	80151a4 <uxr_framing_read_transport+0x40>
 8015212:	42a8      	cmp	r0, r5
 8015214:	d1c8      	bne.n	80151a8 <uxr_framing_read_transport+0x44>
 8015216:	b31e      	cbz	r6, 8015260 <uxr_framing_read_transport+0xfc>
 8015218:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801521a:	9300      	str	r3, [sp, #0]
 801521c:	3102      	adds	r1, #2
 801521e:	4421      	add	r1, r4
 8015220:	4632      	mov	r2, r6
 8015222:	2300      	movs	r3, #0
 8015224:	4650      	mov	r0, sl
 8015226:	47c8      	blx	r9
 8015228:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801522c:	490d      	ldr	r1, [pc, #52]	; (8015264 <uxr_framing_read_transport+0x100>)
 801522e:	181a      	adds	r2, r3, r0
 8015230:	0853      	lsrs	r3, r2, #1
 8015232:	fba1 1303 	umull	r1, r3, r1, r3
 8015236:	089b      	lsrs	r3, r3, #2
 8015238:	212a      	movs	r1, #42	; 0x2a
 801523a:	fb01 2313 	mls	r3, r1, r3, r2
 801523e:	eb00 0b05 	add.w	fp, r0, r5
 8015242:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8015246:	e7af      	b.n	80151a8 <uxr_framing_read_transport+0x44>
 8015248:	2600      	movs	r6, #0
 801524a:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 801524e:	85a6      	strh	r6, [r4, #44]	; 0x2c
 8015250:	d9c0      	bls.n	80151d4 <uxr_framing_read_transport+0x70>
 8015252:	2102      	movs	r1, #2
 8015254:	2529      	movs	r5, #41	; 0x29
 8015256:	e7c5      	b.n	80151e4 <uxr_framing_read_transport+0x80>
 8015258:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 801525c:	b2ed      	uxtb	r5, r5
 801525e:	e798      	b.n	8015192 <uxr_framing_read_transport+0x2e>
 8015260:	46ab      	mov	fp, r5
 8015262:	e7a1      	b.n	80151a8 <uxr_framing_read_transport+0x44>
 8015264:	30c30c31 	.word	0x30c30c31

08015268 <uxr_read_framed_msg>:
 8015268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801526c:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
 8015270:	f890 502d 	ldrb.w	r5, [r0, #45]	; 0x2d
 8015274:	42ae      	cmp	r6, r5
 8015276:	b083      	sub	sp, #12
 8015278:	4604      	mov	r4, r0
 801527a:	461f      	mov	r7, r3
 801527c:	4689      	mov	r9, r1
 801527e:	4692      	mov	sl, r2
 8015280:	f000 817d 	beq.w	801557e <uxr_read_framed_msg+0x316>
 8015284:	7823      	ldrb	r3, [r4, #0]
 8015286:	4ecc      	ldr	r6, [pc, #816]	; (80155b8 <uxr_read_framed_msg+0x350>)
 8015288:	f8df 8330 	ldr.w	r8, [pc, #816]	; 80155bc <uxr_read_framed_msg+0x354>
 801528c:	2b07      	cmp	r3, #7
 801528e:	d8fd      	bhi.n	801528c <uxr_read_framed_msg+0x24>
 8015290:	e8df f013 	tbh	[pc, r3, lsl #1]
 8015294:	00f40113 	.word	0x00f40113
 8015298:	00b700d4 	.word	0x00b700d4
 801529c:	004d008e 	.word	0x004d008e
 80152a0:	00080030 	.word	0x00080030
 80152a4:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80152a8:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80152ac:	4298      	cmp	r0, r3
 80152ae:	f000 8141 	beq.w	8015534 <uxr_read_framed_msg+0x2cc>
 80152b2:	18e2      	adds	r2, r4, r3
 80152b4:	7891      	ldrb	r1, [r2, #2]
 80152b6:	297d      	cmp	r1, #125	; 0x7d
 80152b8:	f000 81a2 	beq.w	8015600 <uxr_read_framed_msg+0x398>
 80152bc:	3301      	adds	r3, #1
 80152be:	085a      	lsrs	r2, r3, #1
 80152c0:	fba6 0202 	umull	r0, r2, r6, r2
 80152c4:	0892      	lsrs	r2, r2, #2
 80152c6:	202a      	movs	r0, #42	; 0x2a
 80152c8:	fb00 3312 	mls	r3, r0, r2, r3
 80152cc:	297e      	cmp	r1, #126	; 0x7e
 80152ce:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80152d2:	f000 8251 	beq.w	8015778 <uxr_read_framed_msg+0x510>
 80152d6:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80152d8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80152da:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80152de:	b29b      	uxth	r3, r3
 80152e0:	2100      	movs	r1, #0
 80152e2:	429a      	cmp	r2, r3
 80152e4:	86a3      	strh	r3, [r4, #52]	; 0x34
 80152e6:	7021      	strb	r1, [r4, #0]
 80152e8:	f000 8182 	beq.w	80155f0 <uxr_read_framed_msg+0x388>
 80152ec:	2000      	movs	r0, #0
 80152ee:	b003      	add	sp, #12
 80152f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152f4:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80152f8:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80152fc:	4298      	cmp	r0, r3
 80152fe:	f000 8128 	beq.w	8015552 <uxr_read_framed_msg+0x2ea>
 8015302:	18e2      	adds	r2, r4, r3
 8015304:	7891      	ldrb	r1, [r2, #2]
 8015306:	297d      	cmp	r1, #125	; 0x7d
 8015308:	f000 8196 	beq.w	8015638 <uxr_read_framed_msg+0x3d0>
 801530c:	3301      	adds	r3, #1
 801530e:	085a      	lsrs	r2, r3, #1
 8015310:	fba6 0202 	umull	r0, r2, r6, r2
 8015314:	0892      	lsrs	r2, r2, #2
 8015316:	202a      	movs	r0, #42	; 0x2a
 8015318:	fb00 3312 	mls	r3, r0, r2, r3
 801531c:	297e      	cmp	r1, #126	; 0x7e
 801531e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015322:	f000 8219 	beq.w	8015758 <uxr_read_framed_msg+0x4f0>
 8015326:	2307      	movs	r3, #7
 8015328:	86a1      	strh	r1, [r4, #52]	; 0x34
 801532a:	7023      	strb	r3, [r4, #0]
 801532c:	e7ae      	b.n	801528c <uxr_read_framed_msg+0x24>
 801532e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8015330:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 8015332:	429d      	cmp	r5, r3
 8015334:	d937      	bls.n	80153a6 <uxr_read_framed_msg+0x13e>
 8015336:	ee07 9a90 	vmov	s15, r9
 801533a:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801533e:	e01e      	b.n	801537e <uxr_read_framed_msg+0x116>
 8015340:	f89e e002 	ldrb.w	lr, [lr, #2]
 8015344:	f1be 0f7d 	cmp.w	lr, #125	; 0x7d
 8015348:	f000 80d2 	beq.w	80154f0 <uxr_read_framed_msg+0x288>
 801534c:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 8015350:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8015354:	f000 8214 	beq.w	8015780 <uxr_read_framed_msg+0x518>
 8015358:	f807 e003 	strb.w	lr, [r7, r3]
 801535c:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801535e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8015360:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 8015362:	ea80 010e 	eor.w	r1, r0, lr
 8015366:	b2c9      	uxtb	r1, r1
 8015368:	3301      	adds	r3, #1
 801536a:	f838 2011 	ldrh.w	r2, [r8, r1, lsl #1]
 801536e:	b29b      	uxth	r3, r3
 8015370:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8015374:	42ab      	cmp	r3, r5
 8015376:	86e2      	strh	r2, [r4, #54]	; 0x36
 8015378:	8663      	strh	r3, [r4, #50]	; 0x32
 801537a:	f080 8121 	bcs.w	80155c0 <uxr_read_framed_msg+0x358>
 801537e:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
 8015382:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8015386:	f101 0b01 	add.w	fp, r1, #1
 801538a:	ea4f 025b 	mov.w	r2, fp, lsr #1
 801538e:	fba6 9202 	umull	r9, r2, r6, r2
 8015392:	0892      	lsrs	r2, r2, #2
 8015394:	4288      	cmp	r0, r1
 8015396:	eb04 0e01 	add.w	lr, r4, r1
 801539a:	fb0c b212 	mls	r2, ip, r2, fp
 801539e:	d1cf      	bne.n	8015340 <uxr_read_framed_msg+0xd8>
 80153a0:	ee17 9a90 	vmov	r9, s15
 80153a4:	429d      	cmp	r5, r3
 80153a6:	f040 8112 	bne.w	80155ce <uxr_read_framed_msg+0x366>
 80153aa:	2306      	movs	r3, #6
 80153ac:	7023      	strb	r3, [r4, #0]
 80153ae:	e76d      	b.n	801528c <uxr_read_framed_msg+0x24>
 80153b0:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80153b4:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80153b8:	4298      	cmp	r0, r3
 80153ba:	f000 80bb 	beq.w	8015534 <uxr_read_framed_msg+0x2cc>
 80153be:	18e2      	adds	r2, r4, r3
 80153c0:	7891      	ldrb	r1, [r2, #2]
 80153c2:	297d      	cmp	r1, #125	; 0x7d
 80153c4:	f000 8153 	beq.w	801566e <uxr_read_framed_msg+0x406>
 80153c8:	3301      	adds	r3, #1
 80153ca:	085a      	lsrs	r2, r3, #1
 80153cc:	fba6 0202 	umull	r0, r2, r6, r2
 80153d0:	0892      	lsrs	r2, r2, #2
 80153d2:	202a      	movs	r0, #42	; 0x2a
 80153d4:	fb00 3212 	mls	r2, r0, r2, r3
 80153d8:	297e      	cmp	r1, #126	; 0x7e
 80153da:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80153de:	f000 81cb 	beq.w	8015778 <uxr_read_framed_msg+0x510>
 80153e2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80153e4:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80153e8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80153ea:	b29b      	uxth	r3, r3
 80153ec:	2000      	movs	r0, #0
 80153ee:	428b      	cmp	r3, r1
 80153f0:	8623      	strh	r3, [r4, #48]	; 0x30
 80153f2:	8660      	strh	r0, [r4, #50]	; 0x32
 80153f4:	86e0      	strh	r0, [r4, #54]	; 0x36
 80153f6:	f240 80db 	bls.w	80155b0 <uxr_read_framed_msg+0x348>
 80153fa:	7020      	strb	r0, [r4, #0]
 80153fc:	b003      	add	sp, #12
 80153fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015402:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8015406:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801540a:	4298      	cmp	r0, r3
 801540c:	f000 80a1 	beq.w	8015552 <uxr_read_framed_msg+0x2ea>
 8015410:	18e2      	adds	r2, r4, r3
 8015412:	7891      	ldrb	r1, [r2, #2]
 8015414:	297d      	cmp	r1, #125	; 0x7d
 8015416:	f000 8167 	beq.w	80156e8 <uxr_read_framed_msg+0x480>
 801541a:	3301      	adds	r3, #1
 801541c:	085a      	lsrs	r2, r3, #1
 801541e:	fba6 0202 	umull	r0, r2, r6, r2
 8015422:	0892      	lsrs	r2, r2, #2
 8015424:	202a      	movs	r0, #42	; 0x2a
 8015426:	fb00 3312 	mls	r3, r0, r2, r3
 801542a:	297e      	cmp	r1, #126	; 0x7e
 801542c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015430:	f000 8192 	beq.w	8015758 <uxr_read_framed_msg+0x4f0>
 8015434:	2304      	movs	r3, #4
 8015436:	8621      	strh	r1, [r4, #48]	; 0x30
 8015438:	7023      	strb	r3, [r4, #0]
 801543a:	e727      	b.n	801528c <uxr_read_framed_msg+0x24>
 801543c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8015440:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8015444:	4290      	cmp	r0, r2
 8015446:	f000 80b1 	beq.w	80155ac <uxr_read_framed_msg+0x344>
 801544a:	18a3      	adds	r3, r4, r2
 801544c:	7899      	ldrb	r1, [r3, #2]
 801544e:	297d      	cmp	r1, #125	; 0x7d
 8015450:	f000 8166 	beq.w	8015720 <uxr_read_framed_msg+0x4b8>
 8015454:	3201      	adds	r2, #1
 8015456:	0850      	lsrs	r0, r2, #1
 8015458:	fba6 3000 	umull	r3, r0, r6, r0
 801545c:	0880      	lsrs	r0, r0, #2
 801545e:	232a      	movs	r3, #42	; 0x2a
 8015460:	fb03 2210 	mls	r2, r3, r0, r2
 8015464:	297e      	cmp	r1, #126	; 0x7e
 8015466:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801546a:	f000 8187 	beq.w	801577c <uxr_read_framed_msg+0x514>
 801546e:	7863      	ldrb	r3, [r4, #1]
 8015470:	428b      	cmp	r3, r1
 8015472:	bf0c      	ite	eq
 8015474:	2303      	moveq	r3, #3
 8015476:	2300      	movne	r3, #0
 8015478:	7023      	strb	r3, [r4, #0]
 801547a:	e707      	b.n	801528c <uxr_read_framed_msg+0x24>
 801547c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8015480:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8015484:	2200      	movs	r2, #0
 8015486:	4299      	cmp	r1, r3
 8015488:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 801548c:	d063      	beq.n	8015556 <uxr_read_framed_msg+0x2ee>
 801548e:	18e2      	adds	r2, r4, r3
 8015490:	7892      	ldrb	r2, [r2, #2]
 8015492:	2a7d      	cmp	r2, #125	; 0x7d
 8015494:	f000 8107 	beq.w	80156a6 <uxr_read_framed_msg+0x43e>
 8015498:	1c59      	adds	r1, r3, #1
 801549a:	084b      	lsrs	r3, r1, #1
 801549c:	fba6 0303 	umull	r0, r3, r6, r3
 80154a0:	089b      	lsrs	r3, r3, #2
 80154a2:	202a      	movs	r0, #42	; 0x2a
 80154a4:	fb00 1313 	mls	r3, r0, r3, r1
 80154a8:	2a7e      	cmp	r2, #126	; 0x7e
 80154aa:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 80154ae:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80154b2:	d050      	beq.n	8015556 <uxr_read_framed_msg+0x2ee>
 80154b4:	2302      	movs	r3, #2
 80154b6:	7023      	strb	r3, [r4, #0]
 80154b8:	e6e8      	b.n	801528c <uxr_read_framed_msg+0x24>
 80154ba:	f894 e02c 	ldrb.w	lr, [r4, #44]	; 0x2c
 80154be:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80154c2:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80154c6:	1c51      	adds	r1, r2, #1
 80154c8:	084b      	lsrs	r3, r1, #1
 80154ca:	fba6 5303 	umull	r5, r3, r6, r3
 80154ce:	089b      	lsrs	r3, r3, #2
 80154d0:	fb0c 1313 	mls	r3, ip, r3, r1
 80154d4:	4596      	cmp	lr, r2
 80154d6:	eb04 0002 	add.w	r0, r4, r2
 80154da:	b2da      	uxtb	r2, r3
 80154dc:	f43f af06 	beq.w	80152ec <uxr_read_framed_msg+0x84>
 80154e0:	7883      	ldrb	r3, [r0, #2]
 80154e2:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80154e6:	2b7e      	cmp	r3, #126	; 0x7e
 80154e8:	d1ed      	bne.n	80154c6 <uxr_read_framed_msg+0x25e>
 80154ea:	2301      	movs	r3, #1
 80154ec:	7023      	strb	r3, [r4, #0]
 80154ee:	e6cd      	b.n	801528c <uxr_read_framed_msg+0x24>
 80154f0:	f101 0b01 	add.w	fp, r1, #1
 80154f4:	ea4f 025b 	mov.w	r2, fp, lsr #1
 80154f8:	fba6 e202 	umull	lr, r2, r6, r2
 80154fc:	3102      	adds	r1, #2
 80154fe:	0892      	lsrs	r2, r2, #2
 8015500:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 8015504:	fb0c b212 	mls	r2, ip, r2, fp
 8015508:	fba6 9e0e 	umull	r9, lr, r6, lr
 801550c:	eb04 0b02 	add.w	fp, r4, r2
 8015510:	b2d2      	uxtb	r2, r2
 8015512:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 8015516:	4290      	cmp	r0, r2
 8015518:	fb0c 111e 	mls	r1, ip, lr, r1
 801551c:	f43f af40 	beq.w	80153a0 <uxr_read_framed_msg+0x138>
 8015520:	f89b e002 	ldrb.w	lr, [fp, #2]
 8015524:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 8015528:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 801552c:	d036      	beq.n	801559c <uxr_read_framed_msg+0x334>
 801552e:	f08e 0e20 	eor.w	lr, lr, #32
 8015532:	e711      	b.n	8015358 <uxr_read_framed_msg+0xf0>
 8015534:	2301      	movs	r3, #1
 8015536:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015538:	4649      	mov	r1, r9
 801553a:	e9cd 2300 	strd	r2, r3, [sp]
 801553e:	4620      	mov	r0, r4
 8015540:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015542:	4652      	mov	r2, sl
 8015544:	f7ff fe0e 	bl	8015164 <uxr_framing_read_transport>
 8015548:	2800      	cmp	r0, #0
 801554a:	f43f aecf 	beq.w	80152ec <uxr_read_framed_msg+0x84>
 801554e:	7823      	ldrb	r3, [r4, #0]
 8015550:	e69c      	b.n	801528c <uxr_read_framed_msg+0x24>
 8015552:	2302      	movs	r3, #2
 8015554:	e7ef      	b.n	8015536 <uxr_read_framed_msg+0x2ce>
 8015556:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015558:	2304      	movs	r3, #4
 801555a:	e9cd 2300 	strd	r2, r3, [sp]
 801555e:	4649      	mov	r1, r9
 8015560:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015562:	4652      	mov	r2, sl
 8015564:	4620      	mov	r0, r4
 8015566:	f7ff fdfd 	bl	8015164 <uxr_framing_read_transport>
 801556a:	2800      	cmp	r0, #0
 801556c:	d1ef      	bne.n	801554e <uxr_read_framed_msg+0x2e6>
 801556e:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 8015572:	387e      	subs	r0, #126	; 0x7e
 8015574:	bf18      	it	ne
 8015576:	2001      	movne	r0, #1
 8015578:	2800      	cmp	r0, #0
 801557a:	d0e8      	beq.n	801554e <uxr_read_framed_msg+0x2e6>
 801557c:	e6b6      	b.n	80152ec <uxr_read_framed_msg+0x84>
 801557e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8015580:	2305      	movs	r3, #5
 8015582:	e9cd 5300 	strd	r5, r3, [sp]
 8015586:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015588:	f7ff fdec 	bl	8015164 <uxr_framing_read_transport>
 801558c:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8015590:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8015594:	429a      	cmp	r2, r3
 8015596:	f43f aea9 	beq.w	80152ec <uxr_read_framed_msg+0x84>
 801559a:	e673      	b.n	8015284 <uxr_read_framed_msg+0x1c>
 801559c:	429d      	cmp	r5, r3
 801559e:	ee17 9a90 	vmov	r9, s15
 80155a2:	f43f af02 	beq.w	80153aa <uxr_read_framed_msg+0x142>
 80155a6:	2301      	movs	r3, #1
 80155a8:	7023      	strb	r3, [r4, #0]
 80155aa:	e66f      	b.n	801528c <uxr_read_framed_msg+0x24>
 80155ac:	2303      	movs	r3, #3
 80155ae:	e7c2      	b.n	8015536 <uxr_read_framed_msg+0x2ce>
 80155b0:	2305      	movs	r3, #5
 80155b2:	7023      	strb	r3, [r4, #0]
 80155b4:	e66a      	b.n	801528c <uxr_read_framed_msg+0x24>
 80155b6:	bf00      	nop
 80155b8:	30c30c31 	.word	0x30c30c31
 80155bc:	08017aec 	.word	0x08017aec
 80155c0:	ee17 9a90 	vmov	r9, s15
 80155c4:	f43f aef1 	beq.w	80153aa <uxr_read_framed_msg+0x142>
 80155c8:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 80155cc:	d08d      	beq.n	80154ea <uxr_read_framed_msg+0x282>
 80155ce:	1aeb      	subs	r3, r5, r3
 80155d0:	3302      	adds	r3, #2
 80155d2:	9301      	str	r3, [sp, #4]
 80155d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80155d6:	9300      	str	r3, [sp, #0]
 80155d8:	4652      	mov	r2, sl
 80155da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80155dc:	4649      	mov	r1, r9
 80155de:	4620      	mov	r0, r4
 80155e0:	f7ff fdc0 	bl	8015164 <uxr_framing_read_transport>
 80155e4:	fab0 f080 	clz	r0, r0
 80155e8:	0940      	lsrs	r0, r0, #5
 80155ea:	2800      	cmp	r0, #0
 80155ec:	d0af      	beq.n	801554e <uxr_read_framed_msg+0x2e6>
 80155ee:	e67d      	b.n	80152ec <uxr_read_framed_msg+0x84>
 80155f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80155f2:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 80155f6:	7013      	strb	r3, [r2, #0]
 80155f8:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 80155fa:	b003      	add	sp, #12
 80155fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015600:	1c59      	adds	r1, r3, #1
 8015602:	084a      	lsrs	r2, r1, #1
 8015604:	fba6 5202 	umull	r5, r2, r6, r2
 8015608:	0892      	lsrs	r2, r2, #2
 801560a:	252a      	movs	r5, #42	; 0x2a
 801560c:	fb05 1212 	mls	r2, r5, r2, r1
 8015610:	b2d1      	uxtb	r1, r2
 8015612:	4288      	cmp	r0, r1
 8015614:	d08e      	beq.n	8015534 <uxr_read_framed_msg+0x2cc>
 8015616:	3302      	adds	r3, #2
 8015618:	4422      	add	r2, r4
 801561a:	0858      	lsrs	r0, r3, #1
 801561c:	fba6 1000 	umull	r1, r0, r6, r0
 8015620:	7891      	ldrb	r1, [r2, #2]
 8015622:	0882      	lsrs	r2, r0, #2
 8015624:	fb05 3312 	mls	r3, r5, r2, r3
 8015628:	297e      	cmp	r1, #126	; 0x7e
 801562a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801562e:	f000 80a3 	beq.w	8015778 <uxr_read_framed_msg+0x510>
 8015632:	f081 0120 	eor.w	r1, r1, #32
 8015636:	e64e      	b.n	80152d6 <uxr_read_framed_msg+0x6e>
 8015638:	1c59      	adds	r1, r3, #1
 801563a:	084a      	lsrs	r2, r1, #1
 801563c:	fba6 5202 	umull	r5, r2, r6, r2
 8015640:	0892      	lsrs	r2, r2, #2
 8015642:	252a      	movs	r5, #42	; 0x2a
 8015644:	fb05 1212 	mls	r2, r5, r2, r1
 8015648:	b2d1      	uxtb	r1, r2
 801564a:	4288      	cmp	r0, r1
 801564c:	d081      	beq.n	8015552 <uxr_read_framed_msg+0x2ea>
 801564e:	3302      	adds	r3, #2
 8015650:	4422      	add	r2, r4
 8015652:	0858      	lsrs	r0, r3, #1
 8015654:	fba6 1000 	umull	r1, r0, r6, r0
 8015658:	7891      	ldrb	r1, [r2, #2]
 801565a:	0882      	lsrs	r2, r0, #2
 801565c:	fb05 3312 	mls	r3, r5, r2, r3
 8015660:	297e      	cmp	r1, #126	; 0x7e
 8015662:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015666:	d077      	beq.n	8015758 <uxr_read_framed_msg+0x4f0>
 8015668:	f081 0120 	eor.w	r1, r1, #32
 801566c:	e65b      	b.n	8015326 <uxr_read_framed_msg+0xbe>
 801566e:	1c59      	adds	r1, r3, #1
 8015670:	084a      	lsrs	r2, r1, #1
 8015672:	fba6 5202 	umull	r5, r2, r6, r2
 8015676:	0892      	lsrs	r2, r2, #2
 8015678:	252a      	movs	r5, #42	; 0x2a
 801567a:	fb05 1212 	mls	r2, r5, r2, r1
 801567e:	b2d1      	uxtb	r1, r2
 8015680:	4288      	cmp	r0, r1
 8015682:	f43f af57 	beq.w	8015534 <uxr_read_framed_msg+0x2cc>
 8015686:	3302      	adds	r3, #2
 8015688:	4422      	add	r2, r4
 801568a:	0858      	lsrs	r0, r3, #1
 801568c:	fba6 1000 	umull	r1, r0, r6, r0
 8015690:	7891      	ldrb	r1, [r2, #2]
 8015692:	0882      	lsrs	r2, r0, #2
 8015694:	fb05 3312 	mls	r3, r5, r2, r3
 8015698:	297e      	cmp	r1, #126	; 0x7e
 801569a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801569e:	d06b      	beq.n	8015778 <uxr_read_framed_msg+0x510>
 80156a0:	f081 0120 	eor.w	r1, r1, #32
 80156a4:	e69d      	b.n	80153e2 <uxr_read_framed_msg+0x17a>
 80156a6:	1c5d      	adds	r5, r3, #1
 80156a8:	086a      	lsrs	r2, r5, #1
 80156aa:	fba6 0202 	umull	r0, r2, r6, r2
 80156ae:	0892      	lsrs	r2, r2, #2
 80156b0:	202a      	movs	r0, #42	; 0x2a
 80156b2:	fb00 5212 	mls	r2, r0, r2, r5
 80156b6:	b2d5      	uxtb	r5, r2
 80156b8:	42a9      	cmp	r1, r5
 80156ba:	f43f af4c 	beq.w	8015556 <uxr_read_framed_msg+0x2ee>
 80156be:	3302      	adds	r3, #2
 80156c0:	4422      	add	r2, r4
 80156c2:	0859      	lsrs	r1, r3, #1
 80156c4:	fba6 5101 	umull	r5, r1, r6, r1
 80156c8:	7895      	ldrb	r5, [r2, #2]
 80156ca:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
 80156ce:	088a      	lsrs	r2, r1, #2
 80156d0:	fb00 3312 	mls	r3, r0, r2, r3
 80156d4:	2d7e      	cmp	r5, #126	; 0x7e
 80156d6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80156da:	f43f af3c 	beq.w	8015556 <uxr_read_framed_msg+0x2ee>
 80156de:	f085 0520 	eor.w	r5, r5, #32
 80156e2:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
 80156e6:	e6e5      	b.n	80154b4 <uxr_read_framed_msg+0x24c>
 80156e8:	1c59      	adds	r1, r3, #1
 80156ea:	084a      	lsrs	r2, r1, #1
 80156ec:	fba6 5202 	umull	r5, r2, r6, r2
 80156f0:	0892      	lsrs	r2, r2, #2
 80156f2:	252a      	movs	r5, #42	; 0x2a
 80156f4:	fb05 1212 	mls	r2, r5, r2, r1
 80156f8:	b2d1      	uxtb	r1, r2
 80156fa:	4288      	cmp	r0, r1
 80156fc:	f43f af29 	beq.w	8015552 <uxr_read_framed_msg+0x2ea>
 8015700:	3302      	adds	r3, #2
 8015702:	4422      	add	r2, r4
 8015704:	0858      	lsrs	r0, r3, #1
 8015706:	fba6 1000 	umull	r1, r0, r6, r0
 801570a:	7891      	ldrb	r1, [r2, #2]
 801570c:	0882      	lsrs	r2, r0, #2
 801570e:	fb05 3312 	mls	r3, r5, r2, r3
 8015712:	297e      	cmp	r1, #126	; 0x7e
 8015714:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015718:	d01e      	beq.n	8015758 <uxr_read_framed_msg+0x4f0>
 801571a:	f081 0120 	eor.w	r1, r1, #32
 801571e:	e689      	b.n	8015434 <uxr_read_framed_msg+0x1cc>
 8015720:	1c51      	adds	r1, r2, #1
 8015722:	084b      	lsrs	r3, r1, #1
 8015724:	fba6 5303 	umull	r5, r3, r6, r3
 8015728:	089b      	lsrs	r3, r3, #2
 801572a:	252a      	movs	r5, #42	; 0x2a
 801572c:	fb05 1313 	mls	r3, r5, r3, r1
 8015730:	b2d9      	uxtb	r1, r3
 8015732:	4288      	cmp	r0, r1
 8015734:	f43f af3a 	beq.w	80155ac <uxr_read_framed_msg+0x344>
 8015738:	3202      	adds	r2, #2
 801573a:	4423      	add	r3, r4
 801573c:	0850      	lsrs	r0, r2, #1
 801573e:	789b      	ldrb	r3, [r3, #2]
 8015740:	fba6 1000 	umull	r1, r0, r6, r0
 8015744:	0880      	lsrs	r0, r0, #2
 8015746:	fb05 2210 	mls	r2, r5, r0, r2
 801574a:	2b7e      	cmp	r3, #126	; 0x7e
 801574c:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8015750:	d014      	beq.n	801577c <uxr_read_framed_msg+0x514>
 8015752:	f083 0120 	eor.w	r1, r3, #32
 8015756:	e68a      	b.n	801546e <uxr_read_framed_msg+0x206>
 8015758:	2302      	movs	r3, #2
 801575a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801575c:	4649      	mov	r1, r9
 801575e:	e9cd 2300 	strd	r2, r3, [sp]
 8015762:	4620      	mov	r0, r4
 8015764:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015766:	4652      	mov	r2, sl
 8015768:	f7ff fcfc 	bl	8015164 <uxr_framing_read_transport>
 801576c:	2800      	cmp	r0, #0
 801576e:	f47f aeee 	bne.w	801554e <uxr_read_framed_msg+0x2e6>
 8015772:	2301      	movs	r3, #1
 8015774:	7023      	strb	r3, [r4, #0]
 8015776:	e589      	b.n	801528c <uxr_read_framed_msg+0x24>
 8015778:	2301      	movs	r3, #1
 801577a:	e7ee      	b.n	801575a <uxr_read_framed_msg+0x4f2>
 801577c:	2303      	movs	r3, #3
 801577e:	e7ec      	b.n	801575a <uxr_read_framed_msg+0x4f2>
 8015780:	ee17 9a90 	vmov	r9, s15
 8015784:	e6b1      	b.n	80154ea <uxr_read_framed_msg+0x282>
 8015786:	bf00      	nop

08015788 <rcl_get_default_domain_id>:
 8015788:	b530      	push	{r4, r5, lr}
 801578a:	b083      	sub	sp, #12
 801578c:	2300      	movs	r3, #0
 801578e:	9300      	str	r3, [sp, #0]
 8015790:	b1d0      	cbz	r0, 80157c8 <rcl_get_default_domain_id+0x40>
 8015792:	4604      	mov	r4, r0
 8015794:	4669      	mov	r1, sp
 8015796:	4815      	ldr	r0, [pc, #84]	; (80157ec <rcl_get_default_domain_id+0x64>)
 8015798:	f7fc fd22 	bl	80121e0 <rcutils_get_env>
 801579c:	4602      	mov	r2, r0
 801579e:	b110      	cbz	r0, 80157a6 <rcl_get_default_domain_id+0x1e>
 80157a0:	2001      	movs	r0, #1
 80157a2:	b003      	add	sp, #12
 80157a4:	bd30      	pop	{r4, r5, pc}
 80157a6:	9b00      	ldr	r3, [sp, #0]
 80157a8:	b18b      	cbz	r3, 80157ce <rcl_get_default_domain_id+0x46>
 80157aa:	7818      	ldrb	r0, [r3, #0]
 80157ac:	2800      	cmp	r0, #0
 80157ae:	d0f8      	beq.n	80157a2 <rcl_get_default_domain_id+0x1a>
 80157b0:	4618      	mov	r0, r3
 80157b2:	a901      	add	r1, sp, #4
 80157b4:	9201      	str	r2, [sp, #4]
 80157b6:	f000 fc45 	bl	8016044 <strtoul>
 80157ba:	4605      	mov	r5, r0
 80157bc:	b150      	cbz	r0, 80157d4 <rcl_get_default_domain_id+0x4c>
 80157be:	1c43      	adds	r3, r0, #1
 80157c0:	d00d      	beq.n	80157de <rcl_get_default_domain_id+0x56>
 80157c2:	6025      	str	r5, [r4, #0]
 80157c4:	2000      	movs	r0, #0
 80157c6:	e7ec      	b.n	80157a2 <rcl_get_default_domain_id+0x1a>
 80157c8:	200b      	movs	r0, #11
 80157ca:	b003      	add	sp, #12
 80157cc:	bd30      	pop	{r4, r5, pc}
 80157ce:	4618      	mov	r0, r3
 80157d0:	b003      	add	sp, #12
 80157d2:	bd30      	pop	{r4, r5, pc}
 80157d4:	9b01      	ldr	r3, [sp, #4]
 80157d6:	781b      	ldrb	r3, [r3, #0]
 80157d8:	2b00      	cmp	r3, #0
 80157da:	d0f2      	beq.n	80157c2 <rcl_get_default_domain_id+0x3a>
 80157dc:	e7e0      	b.n	80157a0 <rcl_get_default_domain_id+0x18>
 80157de:	f000 feb7 	bl	8016550 <__errno>
 80157e2:	6803      	ldr	r3, [r0, #0]
 80157e4:	2b22      	cmp	r3, #34	; 0x22
 80157e6:	d1ec      	bne.n	80157c2 <rcl_get_default_domain_id+0x3a>
 80157e8:	e7da      	b.n	80157a0 <rcl_get_default_domain_id+0x18>
 80157ea:	bf00      	nop
 80157ec:	08017cec 	.word	0x08017cec

080157f0 <rcl_get_zero_initialized_guard_condition>:
 80157f0:	4a03      	ldr	r2, [pc, #12]	; (8015800 <rcl_get_zero_initialized_guard_condition+0x10>)
 80157f2:	4603      	mov	r3, r0
 80157f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80157f8:	e883 0003 	stmia.w	r3, {r0, r1}
 80157fc:	4618      	mov	r0, r3
 80157fe:	4770      	bx	lr
 8015800:	08017cfc 	.word	0x08017cfc

08015804 <rcl_guard_condition_init_from_rmw>:
 8015804:	b082      	sub	sp, #8
 8015806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801580a:	b086      	sub	sp, #24
 801580c:	ac0c      	add	r4, sp, #48	; 0x30
 801580e:	4684      	mov	ip, r0
 8015810:	f844 3f04 	str.w	r3, [r4, #4]!
 8015814:	460f      	mov	r7, r1
 8015816:	4690      	mov	r8, r2
 8015818:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801581a:	ad01      	add	r5, sp, #4
 801581c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801581e:	6823      	ldr	r3, [r4, #0]
 8015820:	602b      	str	r3, [r5, #0]
 8015822:	a801      	add	r0, sp, #4
 8015824:	4664      	mov	r4, ip
 8015826:	f7f7 ff2d 	bl	800d684 <rcutils_allocator_is_valid>
 801582a:	b328      	cbz	r0, 8015878 <rcl_guard_condition_init_from_rmw+0x74>
 801582c:	b324      	cbz	r4, 8015878 <rcl_guard_condition_init_from_rmw+0x74>
 801582e:	6866      	ldr	r6, [r4, #4]
 8015830:	b9e6      	cbnz	r6, 801586c <rcl_guard_condition_init_from_rmw+0x68>
 8015832:	f1b8 0f00 	cmp.w	r8, #0
 8015836:	d01f      	beq.n	8015878 <rcl_guard_condition_init_from_rmw+0x74>
 8015838:	4640      	mov	r0, r8
 801583a:	f7fb fb7d 	bl	8010f38 <rcl_context_is_valid>
 801583e:	b308      	cbz	r0, 8015884 <rcl_guard_condition_init_from_rmw+0x80>
 8015840:	9b01      	ldr	r3, [sp, #4]
 8015842:	9905      	ldr	r1, [sp, #20]
 8015844:	201c      	movs	r0, #28
 8015846:	4798      	blx	r3
 8015848:	4605      	mov	r5, r0
 801584a:	6060      	str	r0, [r4, #4]
 801584c:	b340      	cbz	r0, 80158a0 <rcl_guard_condition_init_from_rmw+0x9c>
 801584e:	b1df      	cbz	r7, 8015888 <rcl_guard_condition_init_from_rmw+0x84>
 8015850:	6007      	str	r7, [r0, #0]
 8015852:	7106      	strb	r6, [r0, #4]
 8015854:	ac01      	add	r4, sp, #4
 8015856:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015858:	3508      	adds	r5, #8
 801585a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801585c:	6823      	ldr	r3, [r4, #0]
 801585e:	602b      	str	r3, [r5, #0]
 8015860:	2000      	movs	r0, #0
 8015862:	b006      	add	sp, #24
 8015864:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015868:	b002      	add	sp, #8
 801586a:	4770      	bx	lr
 801586c:	2064      	movs	r0, #100	; 0x64
 801586e:	b006      	add	sp, #24
 8015870:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015874:	b002      	add	sp, #8
 8015876:	4770      	bx	lr
 8015878:	200b      	movs	r0, #11
 801587a:	b006      	add	sp, #24
 801587c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015880:	b002      	add	sp, #8
 8015882:	4770      	bx	lr
 8015884:	2065      	movs	r0, #101	; 0x65
 8015886:	e7f2      	b.n	801586e <rcl_guard_condition_init_from_rmw+0x6a>
 8015888:	f8d8 0000 	ldr.w	r0, [r8]
 801588c:	3028      	adds	r0, #40	; 0x28
 801588e:	f000 f979 	bl	8015b84 <rmw_create_guard_condition>
 8015892:	6028      	str	r0, [r5, #0]
 8015894:	6865      	ldr	r5, [r4, #4]
 8015896:	682e      	ldr	r6, [r5, #0]
 8015898:	b126      	cbz	r6, 80158a4 <rcl_guard_condition_init_from_rmw+0xa0>
 801589a:	2301      	movs	r3, #1
 801589c:	712b      	strb	r3, [r5, #4]
 801589e:	e7d9      	b.n	8015854 <rcl_guard_condition_init_from_rmw+0x50>
 80158a0:	200a      	movs	r0, #10
 80158a2:	e7e4      	b.n	801586e <rcl_guard_condition_init_from_rmw+0x6a>
 80158a4:	4628      	mov	r0, r5
 80158a6:	9b02      	ldr	r3, [sp, #8]
 80158a8:	9905      	ldr	r1, [sp, #20]
 80158aa:	4798      	blx	r3
 80158ac:	6066      	str	r6, [r4, #4]
 80158ae:	2001      	movs	r0, #1
 80158b0:	e7dd      	b.n	801586e <rcl_guard_condition_init_from_rmw+0x6a>
 80158b2:	bf00      	nop

080158b4 <rcl_guard_condition_fini>:
 80158b4:	b570      	push	{r4, r5, r6, lr}
 80158b6:	b082      	sub	sp, #8
 80158b8:	b1f0      	cbz	r0, 80158f8 <rcl_guard_condition_fini+0x44>
 80158ba:	4604      	mov	r4, r0
 80158bc:	6840      	ldr	r0, [r0, #4]
 80158be:	b158      	cbz	r0, 80158d8 <rcl_guard_condition_fini+0x24>
 80158c0:	6803      	ldr	r3, [r0, #0]
 80158c2:	68c6      	ldr	r6, [r0, #12]
 80158c4:	6981      	ldr	r1, [r0, #24]
 80158c6:	b15b      	cbz	r3, 80158e0 <rcl_guard_condition_fini+0x2c>
 80158c8:	7905      	ldrb	r5, [r0, #4]
 80158ca:	b95d      	cbnz	r5, 80158e4 <rcl_guard_condition_fini+0x30>
 80158cc:	47b0      	blx	r6
 80158ce:	2300      	movs	r3, #0
 80158d0:	4628      	mov	r0, r5
 80158d2:	6063      	str	r3, [r4, #4]
 80158d4:	b002      	add	sp, #8
 80158d6:	bd70      	pop	{r4, r5, r6, pc}
 80158d8:	4605      	mov	r5, r0
 80158da:	4628      	mov	r0, r5
 80158dc:	b002      	add	sp, #8
 80158de:	bd70      	pop	{r4, r5, r6, pc}
 80158e0:	461d      	mov	r5, r3
 80158e2:	e7f3      	b.n	80158cc <rcl_guard_condition_fini+0x18>
 80158e4:	4618      	mov	r0, r3
 80158e6:	9101      	str	r1, [sp, #4]
 80158e8:	f000 f960 	bl	8015bac <rmw_destroy_guard_condition>
 80158ec:	1e05      	subs	r5, r0, #0
 80158ee:	9901      	ldr	r1, [sp, #4]
 80158f0:	6860      	ldr	r0, [r4, #4]
 80158f2:	bf18      	it	ne
 80158f4:	2501      	movne	r5, #1
 80158f6:	e7e9      	b.n	80158cc <rcl_guard_condition_fini+0x18>
 80158f8:	250b      	movs	r5, #11
 80158fa:	4628      	mov	r0, r5
 80158fc:	b002      	add	sp, #8
 80158fe:	bd70      	pop	{r4, r5, r6, pc}

08015900 <rcl_guard_condition_get_default_options>:
 8015900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015902:	b087      	sub	sp, #28
 8015904:	4607      	mov	r7, r0
 8015906:	466c      	mov	r4, sp
 8015908:	4668      	mov	r0, sp
 801590a:	f7f7 fead 	bl	800d668 <rcutils_get_default_allocator>
 801590e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015910:	4d07      	ldr	r5, [pc, #28]	; (8015930 <rcl_guard_condition_get_default_options+0x30>)
 8015912:	f8d4 c000 	ldr.w	ip, [r4]
 8015916:	462e      	mov	r6, r5
 8015918:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801591a:	462c      	mov	r4, r5
 801591c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801591e:	463c      	mov	r4, r7
 8015920:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015922:	4638      	mov	r0, r7
 8015924:	f8c6 c000 	str.w	ip, [r6]
 8015928:	f8c4 c000 	str.w	ip, [r4]
 801592c:	b007      	add	sp, #28
 801592e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015930:	20009494 	.word	0x20009494

08015934 <on_status>:
 8015934:	b082      	sub	sp, #8
 8015936:	b002      	add	sp, #8
 8015938:	4770      	bx	lr
 801593a:	bf00      	nop

0801593c <on_topic>:
 801593c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015940:	4a21      	ldr	r2, [pc, #132]	; (80159c8 <on_topic+0x8c>)
 8015942:	b094      	sub	sp, #80	; 0x50
 8015944:	6812      	ldr	r2, [r2, #0]
 8015946:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8015948:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 801594c:	9113      	str	r1, [sp, #76]	; 0x4c
 801594e:	9312      	str	r3, [sp, #72]	; 0x48
 8015950:	b3ba      	cbz	r2, 80159c2 <on_topic+0x86>
 8015952:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 8015956:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 801595a:	e001      	b.n	8015960 <on_topic+0x24>
 801595c:	6892      	ldr	r2, [r2, #8]
 801595e:	b382      	cbz	r2, 80159c2 <on_topic+0x86>
 8015960:	68d4      	ldr	r4, [r2, #12]
 8015962:	8aa3      	ldrh	r3, [r4, #20]
 8015964:	428b      	cmp	r3, r1
 8015966:	d1f9      	bne.n	801595c <on_topic+0x20>
 8015968:	7da3      	ldrb	r3, [r4, #22]
 801596a:	4283      	cmp	r3, r0
 801596c:	d1f6      	bne.n	801595c <on_topic+0x20>
 801596e:	2248      	movs	r2, #72	; 0x48
 8015970:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8015974:	4668      	mov	r0, sp
 8015976:	f000 fe1f 	bl	80165b8 <memcpy>
 801597a:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 801597e:	4620      	mov	r0, r4
 8015980:	f7f8 fbca 	bl	800e118 <rmw_uxrce_get_static_input_buffer_for_entity>
 8015984:	4607      	mov	r7, r0
 8015986:	b1e0      	cbz	r0, 80159c2 <on_topic+0x86>
 8015988:	f8d0 800c 	ldr.w	r8, [r0, #12]
 801598c:	462a      	mov	r2, r5
 801598e:	4630      	mov	r0, r6
 8015990:	f108 0110 	add.w	r1, r8, #16
 8015994:	f7fd fc1c 	bl	80131d0 <ucdr_deserialize_array_uint8_t>
 8015998:	b930      	cbnz	r0, 80159a8 <on_topic+0x6c>
 801599a:	480c      	ldr	r0, [pc, #48]	; (80159cc <on_topic+0x90>)
 801599c:	4639      	mov	r1, r7
 801599e:	b014      	add	sp, #80	; 0x50
 80159a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80159a4:	f7fc be90 	b.w	80126c8 <put_memory>
 80159a8:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 80159ac:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 80159b0:	f7fd fb38 	bl	8013024 <rmw_uros_epoch_nanos>
 80159b4:	f608 0218 	addw	r2, r8, #2072	; 0x818
 80159b8:	2305      	movs	r3, #5
 80159ba:	e9c2 0100 	strd	r0, r1, [r2]
 80159be:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 80159c2:	b014      	add	sp, #80	; 0x50
 80159c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80159c8:	2000c89c 	.word	0x2000c89c
 80159cc:	20009630 	.word	0x20009630

080159d0 <on_request>:
 80159d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80159d4:	4822      	ldr	r0, [pc, #136]	; (8015a60 <on_request+0x90>)
 80159d6:	b095      	sub	sp, #84	; 0x54
 80159d8:	9113      	str	r1, [sp, #76]	; 0x4c
 80159da:	6801      	ldr	r1, [r0, #0]
 80159dc:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80159de:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 80159e2:	2900      	cmp	r1, #0
 80159e4:	d039      	beq.n	8015a5a <on_request+0x8a>
 80159e6:	461d      	mov	r5, r3
 80159e8:	e001      	b.n	80159ee <on_request+0x1e>
 80159ea:	6889      	ldr	r1, [r1, #8]
 80159ec:	b3a9      	cbz	r1, 8015a5a <on_request+0x8a>
 80159ee:	68cc      	ldr	r4, [r1, #12]
 80159f0:	8b20      	ldrh	r0, [r4, #24]
 80159f2:	4290      	cmp	r0, r2
 80159f4:	d1f9      	bne.n	80159ea <on_request+0x1a>
 80159f6:	2248      	movs	r2, #72	; 0x48
 80159f8:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80159fc:	4668      	mov	r0, sp
 80159fe:	f000 fddb 	bl	80165b8 <memcpy>
 8015a02:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8015a06:	4620      	mov	r0, r4
 8015a08:	f7f8 fb86 	bl	800e118 <rmw_uxrce_get_static_input_buffer_for_entity>
 8015a0c:	4680      	mov	r8, r0
 8015a0e:	b320      	cbz	r0, 8015a5a <on_request+0x8a>
 8015a10:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8015a14:	4632      	mov	r2, r6
 8015a16:	4638      	mov	r0, r7
 8015a18:	f109 0110 	add.w	r1, r9, #16
 8015a1c:	f7fd fbd8 	bl	80131d0 <ucdr_deserialize_array_uint8_t>
 8015a20:	b930      	cbnz	r0, 8015a30 <on_request+0x60>
 8015a22:	4810      	ldr	r0, [pc, #64]	; (8015a64 <on_request+0x94>)
 8015a24:	4641      	mov	r1, r8
 8015a26:	b015      	add	sp, #84	; 0x54
 8015a28:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015a2c:	f7fc be4c 	b.w	80126c8 <put_memory>
 8015a30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015a32:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 8015a36:	f609 0428 	addw	r4, r9, #2088	; 0x828
 8015a3a:	f8c9 6810 	str.w	r6, [r9, #2064]	; 0x810
 8015a3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015a40:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015a44:	e884 0003 	stmia.w	r4, {r0, r1}
 8015a48:	f7fd faec 	bl	8013024 <rmw_uros_epoch_nanos>
 8015a4c:	f609 0218 	addw	r2, r9, #2072	; 0x818
 8015a50:	2303      	movs	r3, #3
 8015a52:	e9c2 0100 	strd	r0, r1, [r2]
 8015a56:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 8015a5a:	b015      	add	sp, #84	; 0x54
 8015a5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a60:	2000c88c 	.word	0x2000c88c
 8015a64:	20009630 	.word	0x20009630

08015a68 <on_reply>:
 8015a68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015a6c:	4821      	ldr	r0, [pc, #132]	; (8015af4 <on_reply+0x8c>)
 8015a6e:	b095      	sub	sp, #84	; 0x54
 8015a70:	9113      	str	r1, [sp, #76]	; 0x4c
 8015a72:	6801      	ldr	r1, [r0, #0]
 8015a74:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8015a76:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 8015a7a:	b3b9      	cbz	r1, 8015aec <on_reply+0x84>
 8015a7c:	461d      	mov	r5, r3
 8015a7e:	e001      	b.n	8015a84 <on_reply+0x1c>
 8015a80:	6889      	ldr	r1, [r1, #8]
 8015a82:	b399      	cbz	r1, 8015aec <on_reply+0x84>
 8015a84:	68cc      	ldr	r4, [r1, #12]
 8015a86:	8b20      	ldrh	r0, [r4, #24]
 8015a88:	4290      	cmp	r0, r2
 8015a8a:	d1f9      	bne.n	8015a80 <on_reply+0x18>
 8015a8c:	2248      	movs	r2, #72	; 0x48
 8015a8e:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8015a92:	4668      	mov	r0, sp
 8015a94:	f000 fd90 	bl	80165b8 <memcpy>
 8015a98:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8015a9c:	4620      	mov	r0, r4
 8015a9e:	f7f8 fb3b 	bl	800e118 <rmw_uxrce_get_static_input_buffer_for_entity>
 8015aa2:	4680      	mov	r8, r0
 8015aa4:	b310      	cbz	r0, 8015aec <on_reply+0x84>
 8015aa6:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8015aaa:	4632      	mov	r2, r6
 8015aac:	4638      	mov	r0, r7
 8015aae:	f109 0110 	add.w	r1, r9, #16
 8015ab2:	f7fd fb8d 	bl	80131d0 <ucdr_deserialize_array_uint8_t>
 8015ab6:	b930      	cbnz	r0, 8015ac6 <on_reply+0x5e>
 8015ab8:	480f      	ldr	r0, [pc, #60]	; (8015af8 <on_reply+0x90>)
 8015aba:	4641      	mov	r1, r8
 8015abc:	b015      	add	sp, #84	; 0x54
 8015abe:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015ac2:	f7fc be01 	b.w	80126c8 <put_memory>
 8015ac6:	b2aa      	uxth	r2, r5
 8015ac8:	2300      	movs	r3, #0
 8015aca:	f609 0128 	addw	r1, r9, #2088	; 0x828
 8015ace:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 8015ad2:	f8c9 6810 	str.w	r6, [r9, #2064]	; 0x810
 8015ad6:	e9c1 2300 	strd	r2, r3, [r1]
 8015ada:	f7fd faa3 	bl	8013024 <rmw_uros_epoch_nanos>
 8015ade:	f609 0218 	addw	r2, r9, #2072	; 0x818
 8015ae2:	2304      	movs	r3, #4
 8015ae4:	e9c2 0100 	strd	r0, r1, [r2]
 8015ae8:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 8015aec:	b015      	add	sp, #84	; 0x54
 8015aee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015af2:	bf00      	nop
 8015af4:	20009ec0 	.word	0x20009ec0
 8015af8:	20009630 	.word	0x20009630

08015afc <rmw_destroy_client>:
 8015afc:	b570      	push	{r4, r5, r6, lr}
 8015afe:	b128      	cbz	r0, 8015b0c <rmw_destroy_client+0x10>
 8015b00:	4604      	mov	r4, r0
 8015b02:	6800      	ldr	r0, [r0, #0]
 8015b04:	460d      	mov	r5, r1
 8015b06:	f7f8 fbd3 	bl	800e2b0 <is_uxrce_rmw_identifier_valid>
 8015b0a:	b910      	cbnz	r0, 8015b12 <rmw_destroy_client+0x16>
 8015b0c:	2401      	movs	r4, #1
 8015b0e:	4620      	mov	r0, r4
 8015b10:	bd70      	pop	{r4, r5, r6, pc}
 8015b12:	6863      	ldr	r3, [r4, #4]
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d0f9      	beq.n	8015b0c <rmw_destroy_client+0x10>
 8015b18:	2d00      	cmp	r5, #0
 8015b1a:	d0f7      	beq.n	8015b0c <rmw_destroy_client+0x10>
 8015b1c:	6828      	ldr	r0, [r5, #0]
 8015b1e:	f7f8 fbc7 	bl	800e2b0 <is_uxrce_rmw_identifier_valid>
 8015b22:	2800      	cmp	r0, #0
 8015b24:	d0f2      	beq.n	8015b0c <rmw_destroy_client+0x10>
 8015b26:	686e      	ldr	r6, [r5, #4]
 8015b28:	2e00      	cmp	r6, #0
 8015b2a:	d0ef      	beq.n	8015b0c <rmw_destroy_client+0x10>
 8015b2c:	6864      	ldr	r4, [r4, #4]
 8015b2e:	6932      	ldr	r2, [r6, #16]
 8015b30:	6920      	ldr	r0, [r4, #16]
 8015b32:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8015b36:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015b3a:	6819      	ldr	r1, [r3, #0]
 8015b3c:	f7ff f89a 	bl	8014c74 <uxr_buffer_cancel_data>
 8015b40:	4602      	mov	r2, r0
 8015b42:	6920      	ldr	r0, [r4, #16]
 8015b44:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8015b48:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8015b4c:	f7f8 fb30 	bl	800e1b0 <run_xrce_session>
 8015b50:	6920      	ldr	r0, [r4, #16]
 8015b52:	6932      	ldr	r2, [r6, #16]
 8015b54:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8015b58:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8015b5c:	6819      	ldr	r1, [r3, #0]
 8015b5e:	f7f8 fd43 	bl	800e5e8 <uxr_buffer_delete_entity>
 8015b62:	4602      	mov	r2, r0
 8015b64:	6920      	ldr	r0, [r4, #16]
 8015b66:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8015b6a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8015b6e:	f7f8 fb1f 	bl	800e1b0 <run_xrce_session>
 8015b72:	2800      	cmp	r0, #0
 8015b74:	4628      	mov	r0, r5
 8015b76:	bf14      	ite	ne
 8015b78:	2400      	movne	r4, #0
 8015b7a:	2402      	moveq	r4, #2
 8015b7c:	f7f8 faaa 	bl	800e0d4 <rmw_uxrce_fini_client_memory>
 8015b80:	e7c5      	b.n	8015b0e <rmw_destroy_client+0x12>
 8015b82:	bf00      	nop

08015b84 <rmw_create_guard_condition>:
 8015b84:	b538      	push	{r3, r4, r5, lr}
 8015b86:	4605      	mov	r5, r0
 8015b88:	4807      	ldr	r0, [pc, #28]	; (8015ba8 <rmw_create_guard_condition+0x24>)
 8015b8a:	f7fc fd8d 	bl	80126a8 <get_memory>
 8015b8e:	b148      	cbz	r0, 8015ba4 <rmw_create_guard_condition+0x20>
 8015b90:	68c4      	ldr	r4, [r0, #12]
 8015b92:	2300      	movs	r3, #0
 8015b94:	61e5      	str	r5, [r4, #28]
 8015b96:	7423      	strb	r3, [r4, #16]
 8015b98:	f7fc fdaa 	bl	80126f0 <rmw_get_implementation_identifier>
 8015b9c:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8015ba0:	f104 0014 	add.w	r0, r4, #20
 8015ba4:	bd38      	pop	{r3, r4, r5, pc}
 8015ba6:	bf00      	nop
 8015ba8:	2000c7b8 	.word	0x2000c7b8

08015bac <rmw_destroy_guard_condition>:
 8015bac:	b508      	push	{r3, lr}
 8015bae:	4b08      	ldr	r3, [pc, #32]	; (8015bd0 <rmw_destroy_guard_condition+0x24>)
 8015bb0:	6819      	ldr	r1, [r3, #0]
 8015bb2:	b911      	cbnz	r1, 8015bba <rmw_destroy_guard_condition+0xe>
 8015bb4:	e00a      	b.n	8015bcc <rmw_destroy_guard_condition+0x20>
 8015bb6:	6889      	ldr	r1, [r1, #8]
 8015bb8:	b141      	cbz	r1, 8015bcc <rmw_destroy_guard_condition+0x20>
 8015bba:	68cb      	ldr	r3, [r1, #12]
 8015bbc:	3314      	adds	r3, #20
 8015bbe:	4298      	cmp	r0, r3
 8015bc0:	d1f9      	bne.n	8015bb6 <rmw_destroy_guard_condition+0xa>
 8015bc2:	4803      	ldr	r0, [pc, #12]	; (8015bd0 <rmw_destroy_guard_condition+0x24>)
 8015bc4:	f7fc fd80 	bl	80126c8 <put_memory>
 8015bc8:	2000      	movs	r0, #0
 8015bca:	bd08      	pop	{r3, pc}
 8015bcc:	2001      	movs	r0, #1
 8015bce:	bd08      	pop	{r3, pc}
 8015bd0:	2000c7b8 	.word	0x2000c7b8

08015bd4 <calloc>:
 8015bd4:	4b02      	ldr	r3, [pc, #8]	; (8015be0 <calloc+0xc>)
 8015bd6:	460a      	mov	r2, r1
 8015bd8:	4601      	mov	r1, r0
 8015bda:	6818      	ldr	r0, [r3, #0]
 8015bdc:	f000 b802 	b.w	8015be4 <_calloc_r>
 8015be0:	200000d8 	.word	0x200000d8

08015be4 <_calloc_r>:
 8015be4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015be6:	fba1 2402 	umull	r2, r4, r1, r2
 8015bea:	b94c      	cbnz	r4, 8015c00 <_calloc_r+0x1c>
 8015bec:	4611      	mov	r1, r2
 8015bee:	9201      	str	r2, [sp, #4]
 8015bf0:	f000 f886 	bl	8015d00 <_malloc_r>
 8015bf4:	9a01      	ldr	r2, [sp, #4]
 8015bf6:	4605      	mov	r5, r0
 8015bf8:	b930      	cbnz	r0, 8015c08 <_calloc_r+0x24>
 8015bfa:	4628      	mov	r0, r5
 8015bfc:	b003      	add	sp, #12
 8015bfe:	bd30      	pop	{r4, r5, pc}
 8015c00:	220c      	movs	r2, #12
 8015c02:	6002      	str	r2, [r0, #0]
 8015c04:	2500      	movs	r5, #0
 8015c06:	e7f8      	b.n	8015bfa <_calloc_r+0x16>
 8015c08:	4621      	mov	r1, r4
 8015c0a:	f000 fbb7 	bl	801637c <memset>
 8015c0e:	e7f4      	b.n	8015bfa <_calloc_r+0x16>

08015c10 <getenv>:
 8015c10:	b507      	push	{r0, r1, r2, lr}
 8015c12:	4b04      	ldr	r3, [pc, #16]	; (8015c24 <getenv+0x14>)
 8015c14:	4601      	mov	r1, r0
 8015c16:	aa01      	add	r2, sp, #4
 8015c18:	6818      	ldr	r0, [r3, #0]
 8015c1a:	f000 f805 	bl	8015c28 <_findenv_r>
 8015c1e:	b003      	add	sp, #12
 8015c20:	f85d fb04 	ldr.w	pc, [sp], #4
 8015c24:	200000d8 	.word	0x200000d8

08015c28 <_findenv_r>:
 8015c28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c2c:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8015c9c <_findenv_r+0x74>
 8015c30:	4607      	mov	r7, r0
 8015c32:	4689      	mov	r9, r1
 8015c34:	4616      	mov	r6, r2
 8015c36:	f000 fceb 	bl	8016610 <__env_lock>
 8015c3a:	f8da 4000 	ldr.w	r4, [sl]
 8015c3e:	b134      	cbz	r4, 8015c4e <_findenv_r+0x26>
 8015c40:	464b      	mov	r3, r9
 8015c42:	4698      	mov	r8, r3
 8015c44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015c48:	b13a      	cbz	r2, 8015c5a <_findenv_r+0x32>
 8015c4a:	2a3d      	cmp	r2, #61	; 0x3d
 8015c4c:	d1f9      	bne.n	8015c42 <_findenv_r+0x1a>
 8015c4e:	4638      	mov	r0, r7
 8015c50:	f000 fce4 	bl	801661c <__env_unlock>
 8015c54:	2000      	movs	r0, #0
 8015c56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c5a:	eba8 0809 	sub.w	r8, r8, r9
 8015c5e:	46a3      	mov	fp, r4
 8015c60:	f854 0b04 	ldr.w	r0, [r4], #4
 8015c64:	2800      	cmp	r0, #0
 8015c66:	d0f2      	beq.n	8015c4e <_findenv_r+0x26>
 8015c68:	4642      	mov	r2, r8
 8015c6a:	4649      	mov	r1, r9
 8015c6c:	f000 fb9b 	bl	80163a6 <strncmp>
 8015c70:	2800      	cmp	r0, #0
 8015c72:	d1f4      	bne.n	8015c5e <_findenv_r+0x36>
 8015c74:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8015c78:	eb03 0508 	add.w	r5, r3, r8
 8015c7c:	f813 3008 	ldrb.w	r3, [r3, r8]
 8015c80:	2b3d      	cmp	r3, #61	; 0x3d
 8015c82:	d1ec      	bne.n	8015c5e <_findenv_r+0x36>
 8015c84:	f8da 3000 	ldr.w	r3, [sl]
 8015c88:	ebab 0303 	sub.w	r3, fp, r3
 8015c8c:	109b      	asrs	r3, r3, #2
 8015c8e:	4638      	mov	r0, r7
 8015c90:	6033      	str	r3, [r6, #0]
 8015c92:	f000 fcc3 	bl	801661c <__env_unlock>
 8015c96:	1c68      	adds	r0, r5, #1
 8015c98:	e7dd      	b.n	8015c56 <_findenv_r+0x2e>
 8015c9a:	bf00      	nop
 8015c9c:	20000000 	.word	0x20000000

08015ca0 <malloc>:
 8015ca0:	4b02      	ldr	r3, [pc, #8]	; (8015cac <malloc+0xc>)
 8015ca2:	4601      	mov	r1, r0
 8015ca4:	6818      	ldr	r0, [r3, #0]
 8015ca6:	f000 b82b 	b.w	8015d00 <_malloc_r>
 8015caa:	bf00      	nop
 8015cac:	200000d8 	.word	0x200000d8

08015cb0 <free>:
 8015cb0:	4b02      	ldr	r3, [pc, #8]	; (8015cbc <free+0xc>)
 8015cb2:	4601      	mov	r1, r0
 8015cb4:	6818      	ldr	r0, [r3, #0]
 8015cb6:	f000 bcb7 	b.w	8016628 <_free_r>
 8015cba:	bf00      	nop
 8015cbc:	200000d8 	.word	0x200000d8

08015cc0 <sbrk_aligned>:
 8015cc0:	b570      	push	{r4, r5, r6, lr}
 8015cc2:	4e0e      	ldr	r6, [pc, #56]	; (8015cfc <sbrk_aligned+0x3c>)
 8015cc4:	460c      	mov	r4, r1
 8015cc6:	6831      	ldr	r1, [r6, #0]
 8015cc8:	4605      	mov	r5, r0
 8015cca:	b911      	cbnz	r1, 8015cd2 <sbrk_aligned+0x12>
 8015ccc:	f000 fc1e 	bl	801650c <_sbrk_r>
 8015cd0:	6030      	str	r0, [r6, #0]
 8015cd2:	4621      	mov	r1, r4
 8015cd4:	4628      	mov	r0, r5
 8015cd6:	f000 fc19 	bl	801650c <_sbrk_r>
 8015cda:	1c43      	adds	r3, r0, #1
 8015cdc:	d00a      	beq.n	8015cf4 <sbrk_aligned+0x34>
 8015cde:	1cc4      	adds	r4, r0, #3
 8015ce0:	f024 0403 	bic.w	r4, r4, #3
 8015ce4:	42a0      	cmp	r0, r4
 8015ce6:	d007      	beq.n	8015cf8 <sbrk_aligned+0x38>
 8015ce8:	1a21      	subs	r1, r4, r0
 8015cea:	4628      	mov	r0, r5
 8015cec:	f000 fc0e 	bl	801650c <_sbrk_r>
 8015cf0:	3001      	adds	r0, #1
 8015cf2:	d101      	bne.n	8015cf8 <sbrk_aligned+0x38>
 8015cf4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8015cf8:	4620      	mov	r0, r4
 8015cfa:	bd70      	pop	{r4, r5, r6, pc}
 8015cfc:	200094ac 	.word	0x200094ac

08015d00 <_malloc_r>:
 8015d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015d04:	1ccd      	adds	r5, r1, #3
 8015d06:	f025 0503 	bic.w	r5, r5, #3
 8015d0a:	3508      	adds	r5, #8
 8015d0c:	2d0c      	cmp	r5, #12
 8015d0e:	bf38      	it	cc
 8015d10:	250c      	movcc	r5, #12
 8015d12:	2d00      	cmp	r5, #0
 8015d14:	4607      	mov	r7, r0
 8015d16:	db01      	blt.n	8015d1c <_malloc_r+0x1c>
 8015d18:	42a9      	cmp	r1, r5
 8015d1a:	d905      	bls.n	8015d28 <_malloc_r+0x28>
 8015d1c:	230c      	movs	r3, #12
 8015d1e:	603b      	str	r3, [r7, #0]
 8015d20:	2600      	movs	r6, #0
 8015d22:	4630      	mov	r0, r6
 8015d24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015d28:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8015dfc <_malloc_r+0xfc>
 8015d2c:	f000 f868 	bl	8015e00 <__malloc_lock>
 8015d30:	f8d8 3000 	ldr.w	r3, [r8]
 8015d34:	461c      	mov	r4, r3
 8015d36:	bb5c      	cbnz	r4, 8015d90 <_malloc_r+0x90>
 8015d38:	4629      	mov	r1, r5
 8015d3a:	4638      	mov	r0, r7
 8015d3c:	f7ff ffc0 	bl	8015cc0 <sbrk_aligned>
 8015d40:	1c43      	adds	r3, r0, #1
 8015d42:	4604      	mov	r4, r0
 8015d44:	d155      	bne.n	8015df2 <_malloc_r+0xf2>
 8015d46:	f8d8 4000 	ldr.w	r4, [r8]
 8015d4a:	4626      	mov	r6, r4
 8015d4c:	2e00      	cmp	r6, #0
 8015d4e:	d145      	bne.n	8015ddc <_malloc_r+0xdc>
 8015d50:	2c00      	cmp	r4, #0
 8015d52:	d048      	beq.n	8015de6 <_malloc_r+0xe6>
 8015d54:	6823      	ldr	r3, [r4, #0]
 8015d56:	4631      	mov	r1, r6
 8015d58:	4638      	mov	r0, r7
 8015d5a:	eb04 0903 	add.w	r9, r4, r3
 8015d5e:	f000 fbd5 	bl	801650c <_sbrk_r>
 8015d62:	4581      	cmp	r9, r0
 8015d64:	d13f      	bne.n	8015de6 <_malloc_r+0xe6>
 8015d66:	6821      	ldr	r1, [r4, #0]
 8015d68:	1a6d      	subs	r5, r5, r1
 8015d6a:	4629      	mov	r1, r5
 8015d6c:	4638      	mov	r0, r7
 8015d6e:	f7ff ffa7 	bl	8015cc0 <sbrk_aligned>
 8015d72:	3001      	adds	r0, #1
 8015d74:	d037      	beq.n	8015de6 <_malloc_r+0xe6>
 8015d76:	6823      	ldr	r3, [r4, #0]
 8015d78:	442b      	add	r3, r5
 8015d7a:	6023      	str	r3, [r4, #0]
 8015d7c:	f8d8 3000 	ldr.w	r3, [r8]
 8015d80:	2b00      	cmp	r3, #0
 8015d82:	d038      	beq.n	8015df6 <_malloc_r+0xf6>
 8015d84:	685a      	ldr	r2, [r3, #4]
 8015d86:	42a2      	cmp	r2, r4
 8015d88:	d12b      	bne.n	8015de2 <_malloc_r+0xe2>
 8015d8a:	2200      	movs	r2, #0
 8015d8c:	605a      	str	r2, [r3, #4]
 8015d8e:	e00f      	b.n	8015db0 <_malloc_r+0xb0>
 8015d90:	6822      	ldr	r2, [r4, #0]
 8015d92:	1b52      	subs	r2, r2, r5
 8015d94:	d41f      	bmi.n	8015dd6 <_malloc_r+0xd6>
 8015d96:	2a0b      	cmp	r2, #11
 8015d98:	d917      	bls.n	8015dca <_malloc_r+0xca>
 8015d9a:	1961      	adds	r1, r4, r5
 8015d9c:	42a3      	cmp	r3, r4
 8015d9e:	6025      	str	r5, [r4, #0]
 8015da0:	bf18      	it	ne
 8015da2:	6059      	strne	r1, [r3, #4]
 8015da4:	6863      	ldr	r3, [r4, #4]
 8015da6:	bf08      	it	eq
 8015da8:	f8c8 1000 	streq.w	r1, [r8]
 8015dac:	5162      	str	r2, [r4, r5]
 8015dae:	604b      	str	r3, [r1, #4]
 8015db0:	4638      	mov	r0, r7
 8015db2:	f104 060b 	add.w	r6, r4, #11
 8015db6:	f000 f829 	bl	8015e0c <__malloc_unlock>
 8015dba:	f026 0607 	bic.w	r6, r6, #7
 8015dbe:	1d23      	adds	r3, r4, #4
 8015dc0:	1af2      	subs	r2, r6, r3
 8015dc2:	d0ae      	beq.n	8015d22 <_malloc_r+0x22>
 8015dc4:	1b9b      	subs	r3, r3, r6
 8015dc6:	50a3      	str	r3, [r4, r2]
 8015dc8:	e7ab      	b.n	8015d22 <_malloc_r+0x22>
 8015dca:	42a3      	cmp	r3, r4
 8015dcc:	6862      	ldr	r2, [r4, #4]
 8015dce:	d1dd      	bne.n	8015d8c <_malloc_r+0x8c>
 8015dd0:	f8c8 2000 	str.w	r2, [r8]
 8015dd4:	e7ec      	b.n	8015db0 <_malloc_r+0xb0>
 8015dd6:	4623      	mov	r3, r4
 8015dd8:	6864      	ldr	r4, [r4, #4]
 8015dda:	e7ac      	b.n	8015d36 <_malloc_r+0x36>
 8015ddc:	4634      	mov	r4, r6
 8015dde:	6876      	ldr	r6, [r6, #4]
 8015de0:	e7b4      	b.n	8015d4c <_malloc_r+0x4c>
 8015de2:	4613      	mov	r3, r2
 8015de4:	e7cc      	b.n	8015d80 <_malloc_r+0x80>
 8015de6:	230c      	movs	r3, #12
 8015de8:	603b      	str	r3, [r7, #0]
 8015dea:	4638      	mov	r0, r7
 8015dec:	f000 f80e 	bl	8015e0c <__malloc_unlock>
 8015df0:	e797      	b.n	8015d22 <_malloc_r+0x22>
 8015df2:	6025      	str	r5, [r4, #0]
 8015df4:	e7dc      	b.n	8015db0 <_malloc_r+0xb0>
 8015df6:	605b      	str	r3, [r3, #4]
 8015df8:	deff      	udf	#255	; 0xff
 8015dfa:	bf00      	nop
 8015dfc:	200094a8 	.word	0x200094a8

08015e00 <__malloc_lock>:
 8015e00:	4801      	ldr	r0, [pc, #4]	; (8015e08 <__malloc_lock+0x8>)
 8015e02:	f000 bbcf 	b.w	80165a4 <__retarget_lock_acquire_recursive>
 8015e06:	bf00      	nop
 8015e08:	200095f1 	.word	0x200095f1

08015e0c <__malloc_unlock>:
 8015e0c:	4801      	ldr	r0, [pc, #4]	; (8015e14 <__malloc_unlock+0x8>)
 8015e0e:	f000 bbca 	b.w	80165a6 <__retarget_lock_release_recursive>
 8015e12:	bf00      	nop
 8015e14:	200095f1 	.word	0x200095f1

08015e18 <srand>:
 8015e18:	b538      	push	{r3, r4, r5, lr}
 8015e1a:	4b10      	ldr	r3, [pc, #64]	; (8015e5c <srand+0x44>)
 8015e1c:	681d      	ldr	r5, [r3, #0]
 8015e1e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8015e20:	4604      	mov	r4, r0
 8015e22:	b9b3      	cbnz	r3, 8015e52 <srand+0x3a>
 8015e24:	2018      	movs	r0, #24
 8015e26:	f7ff ff3b 	bl	8015ca0 <malloc>
 8015e2a:	4602      	mov	r2, r0
 8015e2c:	6328      	str	r0, [r5, #48]	; 0x30
 8015e2e:	b920      	cbnz	r0, 8015e3a <srand+0x22>
 8015e30:	4b0b      	ldr	r3, [pc, #44]	; (8015e60 <srand+0x48>)
 8015e32:	480c      	ldr	r0, [pc, #48]	; (8015e64 <srand+0x4c>)
 8015e34:	2146      	movs	r1, #70	; 0x46
 8015e36:	f000 fbcd 	bl	80165d4 <__assert_func>
 8015e3a:	490b      	ldr	r1, [pc, #44]	; (8015e68 <srand+0x50>)
 8015e3c:	4b0b      	ldr	r3, [pc, #44]	; (8015e6c <srand+0x54>)
 8015e3e:	e9c0 1300 	strd	r1, r3, [r0]
 8015e42:	4b0b      	ldr	r3, [pc, #44]	; (8015e70 <srand+0x58>)
 8015e44:	6083      	str	r3, [r0, #8]
 8015e46:	230b      	movs	r3, #11
 8015e48:	8183      	strh	r3, [r0, #12]
 8015e4a:	2100      	movs	r1, #0
 8015e4c:	2001      	movs	r0, #1
 8015e4e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8015e52:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8015e54:	2200      	movs	r2, #0
 8015e56:	611c      	str	r4, [r3, #16]
 8015e58:	615a      	str	r2, [r3, #20]
 8015e5a:	bd38      	pop	{r3, r4, r5, pc}
 8015e5c:	200000d8 	.word	0x200000d8
 8015e60:	08017d04 	.word	0x08017d04
 8015e64:	08017d1b 	.word	0x08017d1b
 8015e68:	abcd330e 	.word	0xabcd330e
 8015e6c:	e66d1234 	.word	0xe66d1234
 8015e70:	0005deec 	.word	0x0005deec

08015e74 <rand>:
 8015e74:	4b16      	ldr	r3, [pc, #88]	; (8015ed0 <rand+0x5c>)
 8015e76:	b510      	push	{r4, lr}
 8015e78:	681c      	ldr	r4, [r3, #0]
 8015e7a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015e7c:	b9b3      	cbnz	r3, 8015eac <rand+0x38>
 8015e7e:	2018      	movs	r0, #24
 8015e80:	f7ff ff0e 	bl	8015ca0 <malloc>
 8015e84:	4602      	mov	r2, r0
 8015e86:	6320      	str	r0, [r4, #48]	; 0x30
 8015e88:	b920      	cbnz	r0, 8015e94 <rand+0x20>
 8015e8a:	4b12      	ldr	r3, [pc, #72]	; (8015ed4 <rand+0x60>)
 8015e8c:	4812      	ldr	r0, [pc, #72]	; (8015ed8 <rand+0x64>)
 8015e8e:	2152      	movs	r1, #82	; 0x52
 8015e90:	f000 fba0 	bl	80165d4 <__assert_func>
 8015e94:	4911      	ldr	r1, [pc, #68]	; (8015edc <rand+0x68>)
 8015e96:	4b12      	ldr	r3, [pc, #72]	; (8015ee0 <rand+0x6c>)
 8015e98:	e9c0 1300 	strd	r1, r3, [r0]
 8015e9c:	4b11      	ldr	r3, [pc, #68]	; (8015ee4 <rand+0x70>)
 8015e9e:	6083      	str	r3, [r0, #8]
 8015ea0:	230b      	movs	r3, #11
 8015ea2:	8183      	strh	r3, [r0, #12]
 8015ea4:	2100      	movs	r1, #0
 8015ea6:	2001      	movs	r0, #1
 8015ea8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8015eac:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8015eae:	480e      	ldr	r0, [pc, #56]	; (8015ee8 <rand+0x74>)
 8015eb0:	690b      	ldr	r3, [r1, #16]
 8015eb2:	694c      	ldr	r4, [r1, #20]
 8015eb4:	4a0d      	ldr	r2, [pc, #52]	; (8015eec <rand+0x78>)
 8015eb6:	4358      	muls	r0, r3
 8015eb8:	fb02 0004 	mla	r0, r2, r4, r0
 8015ebc:	fba3 3202 	umull	r3, r2, r3, r2
 8015ec0:	3301      	adds	r3, #1
 8015ec2:	eb40 0002 	adc.w	r0, r0, r2
 8015ec6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8015eca:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8015ece:	bd10      	pop	{r4, pc}
 8015ed0:	200000d8 	.word	0x200000d8
 8015ed4:	08017d04 	.word	0x08017d04
 8015ed8:	08017d1b 	.word	0x08017d1b
 8015edc:	abcd330e 	.word	0xabcd330e
 8015ee0:	e66d1234 	.word	0xe66d1234
 8015ee4:	0005deec 	.word	0x0005deec
 8015ee8:	5851f42d 	.word	0x5851f42d
 8015eec:	4c957f2d 	.word	0x4c957f2d

08015ef0 <realloc>:
 8015ef0:	4b02      	ldr	r3, [pc, #8]	; (8015efc <realloc+0xc>)
 8015ef2:	460a      	mov	r2, r1
 8015ef4:	4601      	mov	r1, r0
 8015ef6:	6818      	ldr	r0, [r3, #0]
 8015ef8:	f000 b802 	b.w	8015f00 <_realloc_r>
 8015efc:	200000d8 	.word	0x200000d8

08015f00 <_realloc_r>:
 8015f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f04:	4680      	mov	r8, r0
 8015f06:	4614      	mov	r4, r2
 8015f08:	460e      	mov	r6, r1
 8015f0a:	b921      	cbnz	r1, 8015f16 <_realloc_r+0x16>
 8015f0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015f10:	4611      	mov	r1, r2
 8015f12:	f7ff bef5 	b.w	8015d00 <_malloc_r>
 8015f16:	b92a      	cbnz	r2, 8015f24 <_realloc_r+0x24>
 8015f18:	f000 fb86 	bl	8016628 <_free_r>
 8015f1c:	4625      	mov	r5, r4
 8015f1e:	4628      	mov	r0, r5
 8015f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f24:	f000 fbcc 	bl	80166c0 <_malloc_usable_size_r>
 8015f28:	4284      	cmp	r4, r0
 8015f2a:	4607      	mov	r7, r0
 8015f2c:	d802      	bhi.n	8015f34 <_realloc_r+0x34>
 8015f2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015f32:	d812      	bhi.n	8015f5a <_realloc_r+0x5a>
 8015f34:	4621      	mov	r1, r4
 8015f36:	4640      	mov	r0, r8
 8015f38:	f7ff fee2 	bl	8015d00 <_malloc_r>
 8015f3c:	4605      	mov	r5, r0
 8015f3e:	2800      	cmp	r0, #0
 8015f40:	d0ed      	beq.n	8015f1e <_realloc_r+0x1e>
 8015f42:	42bc      	cmp	r4, r7
 8015f44:	4622      	mov	r2, r4
 8015f46:	4631      	mov	r1, r6
 8015f48:	bf28      	it	cs
 8015f4a:	463a      	movcs	r2, r7
 8015f4c:	f000 fb34 	bl	80165b8 <memcpy>
 8015f50:	4631      	mov	r1, r6
 8015f52:	4640      	mov	r0, r8
 8015f54:	f000 fb68 	bl	8016628 <_free_r>
 8015f58:	e7e1      	b.n	8015f1e <_realloc_r+0x1e>
 8015f5a:	4635      	mov	r5, r6
 8015f5c:	e7df      	b.n	8015f1e <_realloc_r+0x1e>
	...

08015f60 <_strtoul_l.constprop.0>:
 8015f60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015f64:	4f36      	ldr	r7, [pc, #216]	; (8016040 <_strtoul_l.constprop.0+0xe0>)
 8015f66:	4686      	mov	lr, r0
 8015f68:	460d      	mov	r5, r1
 8015f6a:	4628      	mov	r0, r5
 8015f6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015f70:	5d3e      	ldrb	r6, [r7, r4]
 8015f72:	f016 0608 	ands.w	r6, r6, #8
 8015f76:	d1f8      	bne.n	8015f6a <_strtoul_l.constprop.0+0xa>
 8015f78:	2c2d      	cmp	r4, #45	; 0x2d
 8015f7a:	d130      	bne.n	8015fde <_strtoul_l.constprop.0+0x7e>
 8015f7c:	782c      	ldrb	r4, [r5, #0]
 8015f7e:	2601      	movs	r6, #1
 8015f80:	1c85      	adds	r5, r0, #2
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	d057      	beq.n	8016036 <_strtoul_l.constprop.0+0xd6>
 8015f86:	2b10      	cmp	r3, #16
 8015f88:	d109      	bne.n	8015f9e <_strtoul_l.constprop.0+0x3e>
 8015f8a:	2c30      	cmp	r4, #48	; 0x30
 8015f8c:	d107      	bne.n	8015f9e <_strtoul_l.constprop.0+0x3e>
 8015f8e:	7828      	ldrb	r0, [r5, #0]
 8015f90:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8015f94:	2858      	cmp	r0, #88	; 0x58
 8015f96:	d149      	bne.n	801602c <_strtoul_l.constprop.0+0xcc>
 8015f98:	786c      	ldrb	r4, [r5, #1]
 8015f9a:	2310      	movs	r3, #16
 8015f9c:	3502      	adds	r5, #2
 8015f9e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8015fa2:	2700      	movs	r7, #0
 8015fa4:	fbb8 f8f3 	udiv	r8, r8, r3
 8015fa8:	fb03 f908 	mul.w	r9, r3, r8
 8015fac:	ea6f 0909 	mvn.w	r9, r9
 8015fb0:	4638      	mov	r0, r7
 8015fb2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8015fb6:	f1bc 0f09 	cmp.w	ip, #9
 8015fba:	d815      	bhi.n	8015fe8 <_strtoul_l.constprop.0+0x88>
 8015fbc:	4664      	mov	r4, ip
 8015fbe:	42a3      	cmp	r3, r4
 8015fc0:	dd23      	ble.n	801600a <_strtoul_l.constprop.0+0xaa>
 8015fc2:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8015fc6:	d007      	beq.n	8015fd8 <_strtoul_l.constprop.0+0x78>
 8015fc8:	4580      	cmp	r8, r0
 8015fca:	d31b      	bcc.n	8016004 <_strtoul_l.constprop.0+0xa4>
 8015fcc:	d101      	bne.n	8015fd2 <_strtoul_l.constprop.0+0x72>
 8015fce:	45a1      	cmp	r9, r4
 8015fd0:	db18      	blt.n	8016004 <_strtoul_l.constprop.0+0xa4>
 8015fd2:	fb00 4003 	mla	r0, r0, r3, r4
 8015fd6:	2701      	movs	r7, #1
 8015fd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015fdc:	e7e9      	b.n	8015fb2 <_strtoul_l.constprop.0+0x52>
 8015fde:	2c2b      	cmp	r4, #43	; 0x2b
 8015fe0:	bf04      	itt	eq
 8015fe2:	782c      	ldrbeq	r4, [r5, #0]
 8015fe4:	1c85      	addeq	r5, r0, #2
 8015fe6:	e7cc      	b.n	8015f82 <_strtoul_l.constprop.0+0x22>
 8015fe8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8015fec:	f1bc 0f19 	cmp.w	ip, #25
 8015ff0:	d801      	bhi.n	8015ff6 <_strtoul_l.constprop.0+0x96>
 8015ff2:	3c37      	subs	r4, #55	; 0x37
 8015ff4:	e7e3      	b.n	8015fbe <_strtoul_l.constprop.0+0x5e>
 8015ff6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8015ffa:	f1bc 0f19 	cmp.w	ip, #25
 8015ffe:	d804      	bhi.n	801600a <_strtoul_l.constprop.0+0xaa>
 8016000:	3c57      	subs	r4, #87	; 0x57
 8016002:	e7dc      	b.n	8015fbe <_strtoul_l.constprop.0+0x5e>
 8016004:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8016008:	e7e6      	b.n	8015fd8 <_strtoul_l.constprop.0+0x78>
 801600a:	1c7b      	adds	r3, r7, #1
 801600c:	d106      	bne.n	801601c <_strtoul_l.constprop.0+0xbc>
 801600e:	2322      	movs	r3, #34	; 0x22
 8016010:	f8ce 3000 	str.w	r3, [lr]
 8016014:	4638      	mov	r0, r7
 8016016:	b932      	cbnz	r2, 8016026 <_strtoul_l.constprop.0+0xc6>
 8016018:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801601c:	b106      	cbz	r6, 8016020 <_strtoul_l.constprop.0+0xc0>
 801601e:	4240      	negs	r0, r0
 8016020:	2a00      	cmp	r2, #0
 8016022:	d0f9      	beq.n	8016018 <_strtoul_l.constprop.0+0xb8>
 8016024:	b107      	cbz	r7, 8016028 <_strtoul_l.constprop.0+0xc8>
 8016026:	1e69      	subs	r1, r5, #1
 8016028:	6011      	str	r1, [r2, #0]
 801602a:	e7f5      	b.n	8016018 <_strtoul_l.constprop.0+0xb8>
 801602c:	2430      	movs	r4, #48	; 0x30
 801602e:	2b00      	cmp	r3, #0
 8016030:	d1b5      	bne.n	8015f9e <_strtoul_l.constprop.0+0x3e>
 8016032:	2308      	movs	r3, #8
 8016034:	e7b3      	b.n	8015f9e <_strtoul_l.constprop.0+0x3e>
 8016036:	2c30      	cmp	r4, #48	; 0x30
 8016038:	d0a9      	beq.n	8015f8e <_strtoul_l.constprop.0+0x2e>
 801603a:	230a      	movs	r3, #10
 801603c:	e7af      	b.n	8015f9e <_strtoul_l.constprop.0+0x3e>
 801603e:	bf00      	nop
 8016040:	08017d74 	.word	0x08017d74

08016044 <strtoul>:
 8016044:	4613      	mov	r3, r2
 8016046:	460a      	mov	r2, r1
 8016048:	4601      	mov	r1, r0
 801604a:	4802      	ldr	r0, [pc, #8]	; (8016054 <strtoul+0x10>)
 801604c:	6800      	ldr	r0, [r0, #0]
 801604e:	f7ff bf87 	b.w	8015f60 <_strtoul_l.constprop.0>
 8016052:	bf00      	nop
 8016054:	200000d8 	.word	0x200000d8

08016058 <std>:
 8016058:	2300      	movs	r3, #0
 801605a:	b510      	push	{r4, lr}
 801605c:	4604      	mov	r4, r0
 801605e:	e9c0 3300 	strd	r3, r3, [r0]
 8016062:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016066:	6083      	str	r3, [r0, #8]
 8016068:	8181      	strh	r1, [r0, #12]
 801606a:	6643      	str	r3, [r0, #100]	; 0x64
 801606c:	81c2      	strh	r2, [r0, #14]
 801606e:	6183      	str	r3, [r0, #24]
 8016070:	4619      	mov	r1, r3
 8016072:	2208      	movs	r2, #8
 8016074:	305c      	adds	r0, #92	; 0x5c
 8016076:	f000 f981 	bl	801637c <memset>
 801607a:	4b05      	ldr	r3, [pc, #20]	; (8016090 <std+0x38>)
 801607c:	6263      	str	r3, [r4, #36]	; 0x24
 801607e:	4b05      	ldr	r3, [pc, #20]	; (8016094 <std+0x3c>)
 8016080:	62a3      	str	r3, [r4, #40]	; 0x28
 8016082:	4b05      	ldr	r3, [pc, #20]	; (8016098 <std+0x40>)
 8016084:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016086:	4b05      	ldr	r3, [pc, #20]	; (801609c <std+0x44>)
 8016088:	6224      	str	r4, [r4, #32]
 801608a:	6323      	str	r3, [r4, #48]	; 0x30
 801608c:	bd10      	pop	{r4, pc}
 801608e:	bf00      	nop
 8016090:	08016285 	.word	0x08016285
 8016094:	080162a7 	.word	0x080162a7
 8016098:	080162df 	.word	0x080162df
 801609c:	08016303 	.word	0x08016303

080160a0 <stdio_exit_handler>:
 80160a0:	4a02      	ldr	r2, [pc, #8]	; (80160ac <stdio_exit_handler+0xc>)
 80160a2:	4903      	ldr	r1, [pc, #12]	; (80160b0 <stdio_exit_handler+0x10>)
 80160a4:	4803      	ldr	r0, [pc, #12]	; (80160b4 <stdio_exit_handler+0x14>)
 80160a6:	f000 b869 	b.w	801617c <_fwalk_sglue>
 80160aa:	bf00      	nop
 80160ac:	20000080 	.word	0x20000080
 80160b0:	08017035 	.word	0x08017035
 80160b4:	2000008c 	.word	0x2000008c

080160b8 <cleanup_stdio>:
 80160b8:	6841      	ldr	r1, [r0, #4]
 80160ba:	4b0c      	ldr	r3, [pc, #48]	; (80160ec <cleanup_stdio+0x34>)
 80160bc:	4299      	cmp	r1, r3
 80160be:	b510      	push	{r4, lr}
 80160c0:	4604      	mov	r4, r0
 80160c2:	d001      	beq.n	80160c8 <cleanup_stdio+0x10>
 80160c4:	f000 ffb6 	bl	8017034 <_fflush_r>
 80160c8:	68a1      	ldr	r1, [r4, #8]
 80160ca:	4b09      	ldr	r3, [pc, #36]	; (80160f0 <cleanup_stdio+0x38>)
 80160cc:	4299      	cmp	r1, r3
 80160ce:	d002      	beq.n	80160d6 <cleanup_stdio+0x1e>
 80160d0:	4620      	mov	r0, r4
 80160d2:	f000 ffaf 	bl	8017034 <_fflush_r>
 80160d6:	68e1      	ldr	r1, [r4, #12]
 80160d8:	4b06      	ldr	r3, [pc, #24]	; (80160f4 <cleanup_stdio+0x3c>)
 80160da:	4299      	cmp	r1, r3
 80160dc:	d004      	beq.n	80160e8 <cleanup_stdio+0x30>
 80160de:	4620      	mov	r0, r4
 80160e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80160e4:	f000 bfa6 	b.w	8017034 <_fflush_r>
 80160e8:	bd10      	pop	{r4, pc}
 80160ea:	bf00      	nop
 80160ec:	200094b0 	.word	0x200094b0
 80160f0:	20009518 	.word	0x20009518
 80160f4:	20009580 	.word	0x20009580

080160f8 <global_stdio_init.part.0>:
 80160f8:	b510      	push	{r4, lr}
 80160fa:	4b0b      	ldr	r3, [pc, #44]	; (8016128 <global_stdio_init.part.0+0x30>)
 80160fc:	4c0b      	ldr	r4, [pc, #44]	; (801612c <global_stdio_init.part.0+0x34>)
 80160fe:	4a0c      	ldr	r2, [pc, #48]	; (8016130 <global_stdio_init.part.0+0x38>)
 8016100:	601a      	str	r2, [r3, #0]
 8016102:	4620      	mov	r0, r4
 8016104:	2200      	movs	r2, #0
 8016106:	2104      	movs	r1, #4
 8016108:	f7ff ffa6 	bl	8016058 <std>
 801610c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8016110:	2201      	movs	r2, #1
 8016112:	2109      	movs	r1, #9
 8016114:	f7ff ffa0 	bl	8016058 <std>
 8016118:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801611c:	2202      	movs	r2, #2
 801611e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016122:	2112      	movs	r1, #18
 8016124:	f7ff bf98 	b.w	8016058 <std>
 8016128:	200095e8 	.word	0x200095e8
 801612c:	200094b0 	.word	0x200094b0
 8016130:	080160a1 	.word	0x080160a1

08016134 <__sfp_lock_acquire>:
 8016134:	4801      	ldr	r0, [pc, #4]	; (801613c <__sfp_lock_acquire+0x8>)
 8016136:	f000 ba35 	b.w	80165a4 <__retarget_lock_acquire_recursive>
 801613a:	bf00      	nop
 801613c:	200095f2 	.word	0x200095f2

08016140 <__sfp_lock_release>:
 8016140:	4801      	ldr	r0, [pc, #4]	; (8016148 <__sfp_lock_release+0x8>)
 8016142:	f000 ba30 	b.w	80165a6 <__retarget_lock_release_recursive>
 8016146:	bf00      	nop
 8016148:	200095f2 	.word	0x200095f2

0801614c <__sinit>:
 801614c:	b510      	push	{r4, lr}
 801614e:	4604      	mov	r4, r0
 8016150:	f7ff fff0 	bl	8016134 <__sfp_lock_acquire>
 8016154:	6a23      	ldr	r3, [r4, #32]
 8016156:	b11b      	cbz	r3, 8016160 <__sinit+0x14>
 8016158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801615c:	f7ff bff0 	b.w	8016140 <__sfp_lock_release>
 8016160:	4b04      	ldr	r3, [pc, #16]	; (8016174 <__sinit+0x28>)
 8016162:	6223      	str	r3, [r4, #32]
 8016164:	4b04      	ldr	r3, [pc, #16]	; (8016178 <__sinit+0x2c>)
 8016166:	681b      	ldr	r3, [r3, #0]
 8016168:	2b00      	cmp	r3, #0
 801616a:	d1f5      	bne.n	8016158 <__sinit+0xc>
 801616c:	f7ff ffc4 	bl	80160f8 <global_stdio_init.part.0>
 8016170:	e7f2      	b.n	8016158 <__sinit+0xc>
 8016172:	bf00      	nop
 8016174:	080160b9 	.word	0x080160b9
 8016178:	200095e8 	.word	0x200095e8

0801617c <_fwalk_sglue>:
 801617c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016180:	4607      	mov	r7, r0
 8016182:	4688      	mov	r8, r1
 8016184:	4614      	mov	r4, r2
 8016186:	2600      	movs	r6, #0
 8016188:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801618c:	f1b9 0901 	subs.w	r9, r9, #1
 8016190:	d505      	bpl.n	801619e <_fwalk_sglue+0x22>
 8016192:	6824      	ldr	r4, [r4, #0]
 8016194:	2c00      	cmp	r4, #0
 8016196:	d1f7      	bne.n	8016188 <_fwalk_sglue+0xc>
 8016198:	4630      	mov	r0, r6
 801619a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801619e:	89ab      	ldrh	r3, [r5, #12]
 80161a0:	2b01      	cmp	r3, #1
 80161a2:	d907      	bls.n	80161b4 <_fwalk_sglue+0x38>
 80161a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80161a8:	3301      	adds	r3, #1
 80161aa:	d003      	beq.n	80161b4 <_fwalk_sglue+0x38>
 80161ac:	4629      	mov	r1, r5
 80161ae:	4638      	mov	r0, r7
 80161b0:	47c0      	blx	r8
 80161b2:	4306      	orrs	r6, r0
 80161b4:	3568      	adds	r5, #104	; 0x68
 80161b6:	e7e9      	b.n	801618c <_fwalk_sglue+0x10>

080161b8 <iprintf>:
 80161b8:	b40f      	push	{r0, r1, r2, r3}
 80161ba:	b507      	push	{r0, r1, r2, lr}
 80161bc:	4906      	ldr	r1, [pc, #24]	; (80161d8 <iprintf+0x20>)
 80161be:	ab04      	add	r3, sp, #16
 80161c0:	6808      	ldr	r0, [r1, #0]
 80161c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80161c6:	6881      	ldr	r1, [r0, #8]
 80161c8:	9301      	str	r3, [sp, #4]
 80161ca:	f000 fc03 	bl	80169d4 <_vfiprintf_r>
 80161ce:	b003      	add	sp, #12
 80161d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80161d4:	b004      	add	sp, #16
 80161d6:	4770      	bx	lr
 80161d8:	200000d8 	.word	0x200000d8

080161dc <sniprintf>:
 80161dc:	b40c      	push	{r2, r3}
 80161de:	b530      	push	{r4, r5, lr}
 80161e0:	4b17      	ldr	r3, [pc, #92]	; (8016240 <sniprintf+0x64>)
 80161e2:	1e0c      	subs	r4, r1, #0
 80161e4:	681d      	ldr	r5, [r3, #0]
 80161e6:	b09d      	sub	sp, #116	; 0x74
 80161e8:	da08      	bge.n	80161fc <sniprintf+0x20>
 80161ea:	238b      	movs	r3, #139	; 0x8b
 80161ec:	602b      	str	r3, [r5, #0]
 80161ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80161f2:	b01d      	add	sp, #116	; 0x74
 80161f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80161f8:	b002      	add	sp, #8
 80161fa:	4770      	bx	lr
 80161fc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016200:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016204:	bf14      	ite	ne
 8016206:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801620a:	4623      	moveq	r3, r4
 801620c:	9304      	str	r3, [sp, #16]
 801620e:	9307      	str	r3, [sp, #28]
 8016210:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016214:	9002      	str	r0, [sp, #8]
 8016216:	9006      	str	r0, [sp, #24]
 8016218:	f8ad 3016 	strh.w	r3, [sp, #22]
 801621c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801621e:	ab21      	add	r3, sp, #132	; 0x84
 8016220:	a902      	add	r1, sp, #8
 8016222:	4628      	mov	r0, r5
 8016224:	9301      	str	r3, [sp, #4]
 8016226:	f000 faad 	bl	8016784 <_svfiprintf_r>
 801622a:	1c43      	adds	r3, r0, #1
 801622c:	bfbc      	itt	lt
 801622e:	238b      	movlt	r3, #139	; 0x8b
 8016230:	602b      	strlt	r3, [r5, #0]
 8016232:	2c00      	cmp	r4, #0
 8016234:	d0dd      	beq.n	80161f2 <sniprintf+0x16>
 8016236:	9b02      	ldr	r3, [sp, #8]
 8016238:	2200      	movs	r2, #0
 801623a:	701a      	strb	r2, [r3, #0]
 801623c:	e7d9      	b.n	80161f2 <sniprintf+0x16>
 801623e:	bf00      	nop
 8016240:	200000d8 	.word	0x200000d8

08016244 <siprintf>:
 8016244:	b40e      	push	{r1, r2, r3}
 8016246:	b500      	push	{lr}
 8016248:	b09c      	sub	sp, #112	; 0x70
 801624a:	ab1d      	add	r3, sp, #116	; 0x74
 801624c:	9002      	str	r0, [sp, #8]
 801624e:	9006      	str	r0, [sp, #24]
 8016250:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016254:	4809      	ldr	r0, [pc, #36]	; (801627c <siprintf+0x38>)
 8016256:	9107      	str	r1, [sp, #28]
 8016258:	9104      	str	r1, [sp, #16]
 801625a:	4909      	ldr	r1, [pc, #36]	; (8016280 <siprintf+0x3c>)
 801625c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016260:	9105      	str	r1, [sp, #20]
 8016262:	6800      	ldr	r0, [r0, #0]
 8016264:	9301      	str	r3, [sp, #4]
 8016266:	a902      	add	r1, sp, #8
 8016268:	f000 fa8c 	bl	8016784 <_svfiprintf_r>
 801626c:	9b02      	ldr	r3, [sp, #8]
 801626e:	2200      	movs	r2, #0
 8016270:	701a      	strb	r2, [r3, #0]
 8016272:	b01c      	add	sp, #112	; 0x70
 8016274:	f85d eb04 	ldr.w	lr, [sp], #4
 8016278:	b003      	add	sp, #12
 801627a:	4770      	bx	lr
 801627c:	200000d8 	.word	0x200000d8
 8016280:	ffff0208 	.word	0xffff0208

08016284 <__sread>:
 8016284:	b510      	push	{r4, lr}
 8016286:	460c      	mov	r4, r1
 8016288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801628c:	f000 f92c 	bl	80164e8 <_read_r>
 8016290:	2800      	cmp	r0, #0
 8016292:	bfab      	itete	ge
 8016294:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016296:	89a3      	ldrhlt	r3, [r4, #12]
 8016298:	181b      	addge	r3, r3, r0
 801629a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801629e:	bfac      	ite	ge
 80162a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80162a2:	81a3      	strhlt	r3, [r4, #12]
 80162a4:	bd10      	pop	{r4, pc}

080162a6 <__swrite>:
 80162a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162aa:	461f      	mov	r7, r3
 80162ac:	898b      	ldrh	r3, [r1, #12]
 80162ae:	05db      	lsls	r3, r3, #23
 80162b0:	4605      	mov	r5, r0
 80162b2:	460c      	mov	r4, r1
 80162b4:	4616      	mov	r6, r2
 80162b6:	d505      	bpl.n	80162c4 <__swrite+0x1e>
 80162b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80162bc:	2302      	movs	r3, #2
 80162be:	2200      	movs	r2, #0
 80162c0:	f000 f900 	bl	80164c4 <_lseek_r>
 80162c4:	89a3      	ldrh	r3, [r4, #12]
 80162c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80162ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80162ce:	81a3      	strh	r3, [r4, #12]
 80162d0:	4632      	mov	r2, r6
 80162d2:	463b      	mov	r3, r7
 80162d4:	4628      	mov	r0, r5
 80162d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80162da:	f000 b927 	b.w	801652c <_write_r>

080162de <__sseek>:
 80162de:	b510      	push	{r4, lr}
 80162e0:	460c      	mov	r4, r1
 80162e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80162e6:	f000 f8ed 	bl	80164c4 <_lseek_r>
 80162ea:	1c43      	adds	r3, r0, #1
 80162ec:	89a3      	ldrh	r3, [r4, #12]
 80162ee:	bf15      	itete	ne
 80162f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80162f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80162f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80162fa:	81a3      	strheq	r3, [r4, #12]
 80162fc:	bf18      	it	ne
 80162fe:	81a3      	strhne	r3, [r4, #12]
 8016300:	bd10      	pop	{r4, pc}

08016302 <__sclose>:
 8016302:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016306:	f000 b877 	b.w	80163f8 <_close_r>

0801630a <_vsniprintf_r>:
 801630a:	b530      	push	{r4, r5, lr}
 801630c:	4614      	mov	r4, r2
 801630e:	2c00      	cmp	r4, #0
 8016310:	b09b      	sub	sp, #108	; 0x6c
 8016312:	4605      	mov	r5, r0
 8016314:	461a      	mov	r2, r3
 8016316:	da05      	bge.n	8016324 <_vsniprintf_r+0x1a>
 8016318:	238b      	movs	r3, #139	; 0x8b
 801631a:	6003      	str	r3, [r0, #0]
 801631c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016320:	b01b      	add	sp, #108	; 0x6c
 8016322:	bd30      	pop	{r4, r5, pc}
 8016324:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016328:	f8ad 300c 	strh.w	r3, [sp, #12]
 801632c:	bf14      	ite	ne
 801632e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8016332:	4623      	moveq	r3, r4
 8016334:	9302      	str	r3, [sp, #8]
 8016336:	9305      	str	r3, [sp, #20]
 8016338:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801633c:	9100      	str	r1, [sp, #0]
 801633e:	9104      	str	r1, [sp, #16]
 8016340:	f8ad 300e 	strh.w	r3, [sp, #14]
 8016344:	4669      	mov	r1, sp
 8016346:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8016348:	f000 fa1c 	bl	8016784 <_svfiprintf_r>
 801634c:	1c43      	adds	r3, r0, #1
 801634e:	bfbc      	itt	lt
 8016350:	238b      	movlt	r3, #139	; 0x8b
 8016352:	602b      	strlt	r3, [r5, #0]
 8016354:	2c00      	cmp	r4, #0
 8016356:	d0e3      	beq.n	8016320 <_vsniprintf_r+0x16>
 8016358:	9b00      	ldr	r3, [sp, #0]
 801635a:	2200      	movs	r2, #0
 801635c:	701a      	strb	r2, [r3, #0]
 801635e:	e7df      	b.n	8016320 <_vsniprintf_r+0x16>

08016360 <vsniprintf>:
 8016360:	b507      	push	{r0, r1, r2, lr}
 8016362:	9300      	str	r3, [sp, #0]
 8016364:	4613      	mov	r3, r2
 8016366:	460a      	mov	r2, r1
 8016368:	4601      	mov	r1, r0
 801636a:	4803      	ldr	r0, [pc, #12]	; (8016378 <vsniprintf+0x18>)
 801636c:	6800      	ldr	r0, [r0, #0]
 801636e:	f7ff ffcc 	bl	801630a <_vsniprintf_r>
 8016372:	b003      	add	sp, #12
 8016374:	f85d fb04 	ldr.w	pc, [sp], #4
 8016378:	200000d8 	.word	0x200000d8

0801637c <memset>:
 801637c:	4402      	add	r2, r0
 801637e:	4603      	mov	r3, r0
 8016380:	4293      	cmp	r3, r2
 8016382:	d100      	bne.n	8016386 <memset+0xa>
 8016384:	4770      	bx	lr
 8016386:	f803 1b01 	strb.w	r1, [r3], #1
 801638a:	e7f9      	b.n	8016380 <memset+0x4>

0801638c <strchr>:
 801638c:	b2c9      	uxtb	r1, r1
 801638e:	4603      	mov	r3, r0
 8016390:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016394:	b11a      	cbz	r2, 801639e <strchr+0x12>
 8016396:	428a      	cmp	r2, r1
 8016398:	d1f9      	bne.n	801638e <strchr+0x2>
 801639a:	4618      	mov	r0, r3
 801639c:	4770      	bx	lr
 801639e:	2900      	cmp	r1, #0
 80163a0:	bf18      	it	ne
 80163a2:	2300      	movne	r3, #0
 80163a4:	e7f9      	b.n	801639a <strchr+0xe>

080163a6 <strncmp>:
 80163a6:	b510      	push	{r4, lr}
 80163a8:	b16a      	cbz	r2, 80163c6 <strncmp+0x20>
 80163aa:	3901      	subs	r1, #1
 80163ac:	1884      	adds	r4, r0, r2
 80163ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80163b2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80163b6:	429a      	cmp	r2, r3
 80163b8:	d103      	bne.n	80163c2 <strncmp+0x1c>
 80163ba:	42a0      	cmp	r0, r4
 80163bc:	d001      	beq.n	80163c2 <strncmp+0x1c>
 80163be:	2a00      	cmp	r2, #0
 80163c0:	d1f5      	bne.n	80163ae <strncmp+0x8>
 80163c2:	1ad0      	subs	r0, r2, r3
 80163c4:	bd10      	pop	{r4, pc}
 80163c6:	4610      	mov	r0, r2
 80163c8:	e7fc      	b.n	80163c4 <strncmp+0x1e>

080163ca <strstr>:
 80163ca:	780a      	ldrb	r2, [r1, #0]
 80163cc:	b570      	push	{r4, r5, r6, lr}
 80163ce:	b96a      	cbnz	r2, 80163ec <strstr+0x22>
 80163d0:	bd70      	pop	{r4, r5, r6, pc}
 80163d2:	429a      	cmp	r2, r3
 80163d4:	d109      	bne.n	80163ea <strstr+0x20>
 80163d6:	460c      	mov	r4, r1
 80163d8:	4605      	mov	r5, r0
 80163da:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80163de:	2b00      	cmp	r3, #0
 80163e0:	d0f6      	beq.n	80163d0 <strstr+0x6>
 80163e2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80163e6:	429e      	cmp	r6, r3
 80163e8:	d0f7      	beq.n	80163da <strstr+0x10>
 80163ea:	3001      	adds	r0, #1
 80163ec:	7803      	ldrb	r3, [r0, #0]
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	d1ef      	bne.n	80163d2 <strstr+0x8>
 80163f2:	4618      	mov	r0, r3
 80163f4:	e7ec      	b.n	80163d0 <strstr+0x6>
	...

080163f8 <_close_r>:
 80163f8:	b538      	push	{r3, r4, r5, lr}
 80163fa:	4d06      	ldr	r5, [pc, #24]	; (8016414 <_close_r+0x1c>)
 80163fc:	2300      	movs	r3, #0
 80163fe:	4604      	mov	r4, r0
 8016400:	4608      	mov	r0, r1
 8016402:	602b      	str	r3, [r5, #0]
 8016404:	f7ed f9db 	bl	80037be <_close>
 8016408:	1c43      	adds	r3, r0, #1
 801640a:	d102      	bne.n	8016412 <_close_r+0x1a>
 801640c:	682b      	ldr	r3, [r5, #0]
 801640e:	b103      	cbz	r3, 8016412 <_close_r+0x1a>
 8016410:	6023      	str	r3, [r4, #0]
 8016412:	bd38      	pop	{r3, r4, r5, pc}
 8016414:	200095ec 	.word	0x200095ec

08016418 <_reclaim_reent>:
 8016418:	4b29      	ldr	r3, [pc, #164]	; (80164c0 <_reclaim_reent+0xa8>)
 801641a:	681b      	ldr	r3, [r3, #0]
 801641c:	4283      	cmp	r3, r0
 801641e:	b570      	push	{r4, r5, r6, lr}
 8016420:	4604      	mov	r4, r0
 8016422:	d04b      	beq.n	80164bc <_reclaim_reent+0xa4>
 8016424:	69c3      	ldr	r3, [r0, #28]
 8016426:	b143      	cbz	r3, 801643a <_reclaim_reent+0x22>
 8016428:	68db      	ldr	r3, [r3, #12]
 801642a:	2b00      	cmp	r3, #0
 801642c:	d144      	bne.n	80164b8 <_reclaim_reent+0xa0>
 801642e:	69e3      	ldr	r3, [r4, #28]
 8016430:	6819      	ldr	r1, [r3, #0]
 8016432:	b111      	cbz	r1, 801643a <_reclaim_reent+0x22>
 8016434:	4620      	mov	r0, r4
 8016436:	f000 f8f7 	bl	8016628 <_free_r>
 801643a:	6961      	ldr	r1, [r4, #20]
 801643c:	b111      	cbz	r1, 8016444 <_reclaim_reent+0x2c>
 801643e:	4620      	mov	r0, r4
 8016440:	f000 f8f2 	bl	8016628 <_free_r>
 8016444:	69e1      	ldr	r1, [r4, #28]
 8016446:	b111      	cbz	r1, 801644e <_reclaim_reent+0x36>
 8016448:	4620      	mov	r0, r4
 801644a:	f000 f8ed 	bl	8016628 <_free_r>
 801644e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8016450:	b111      	cbz	r1, 8016458 <_reclaim_reent+0x40>
 8016452:	4620      	mov	r0, r4
 8016454:	f000 f8e8 	bl	8016628 <_free_r>
 8016458:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801645a:	b111      	cbz	r1, 8016462 <_reclaim_reent+0x4a>
 801645c:	4620      	mov	r0, r4
 801645e:	f000 f8e3 	bl	8016628 <_free_r>
 8016462:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016464:	b111      	cbz	r1, 801646c <_reclaim_reent+0x54>
 8016466:	4620      	mov	r0, r4
 8016468:	f000 f8de 	bl	8016628 <_free_r>
 801646c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801646e:	b111      	cbz	r1, 8016476 <_reclaim_reent+0x5e>
 8016470:	4620      	mov	r0, r4
 8016472:	f000 f8d9 	bl	8016628 <_free_r>
 8016476:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8016478:	b111      	cbz	r1, 8016480 <_reclaim_reent+0x68>
 801647a:	4620      	mov	r0, r4
 801647c:	f000 f8d4 	bl	8016628 <_free_r>
 8016480:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8016482:	b111      	cbz	r1, 801648a <_reclaim_reent+0x72>
 8016484:	4620      	mov	r0, r4
 8016486:	f000 f8cf 	bl	8016628 <_free_r>
 801648a:	6a23      	ldr	r3, [r4, #32]
 801648c:	b1b3      	cbz	r3, 80164bc <_reclaim_reent+0xa4>
 801648e:	4620      	mov	r0, r4
 8016490:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016494:	4718      	bx	r3
 8016496:	5949      	ldr	r1, [r1, r5]
 8016498:	b941      	cbnz	r1, 80164ac <_reclaim_reent+0x94>
 801649a:	3504      	adds	r5, #4
 801649c:	69e3      	ldr	r3, [r4, #28]
 801649e:	2d80      	cmp	r5, #128	; 0x80
 80164a0:	68d9      	ldr	r1, [r3, #12]
 80164a2:	d1f8      	bne.n	8016496 <_reclaim_reent+0x7e>
 80164a4:	4620      	mov	r0, r4
 80164a6:	f000 f8bf 	bl	8016628 <_free_r>
 80164aa:	e7c0      	b.n	801642e <_reclaim_reent+0x16>
 80164ac:	680e      	ldr	r6, [r1, #0]
 80164ae:	4620      	mov	r0, r4
 80164b0:	f000 f8ba 	bl	8016628 <_free_r>
 80164b4:	4631      	mov	r1, r6
 80164b6:	e7ef      	b.n	8016498 <_reclaim_reent+0x80>
 80164b8:	2500      	movs	r5, #0
 80164ba:	e7ef      	b.n	801649c <_reclaim_reent+0x84>
 80164bc:	bd70      	pop	{r4, r5, r6, pc}
 80164be:	bf00      	nop
 80164c0:	200000d8 	.word	0x200000d8

080164c4 <_lseek_r>:
 80164c4:	b538      	push	{r3, r4, r5, lr}
 80164c6:	4d07      	ldr	r5, [pc, #28]	; (80164e4 <_lseek_r+0x20>)
 80164c8:	4604      	mov	r4, r0
 80164ca:	4608      	mov	r0, r1
 80164cc:	4611      	mov	r1, r2
 80164ce:	2200      	movs	r2, #0
 80164d0:	602a      	str	r2, [r5, #0]
 80164d2:	461a      	mov	r2, r3
 80164d4:	f7ed f99a 	bl	800380c <_lseek>
 80164d8:	1c43      	adds	r3, r0, #1
 80164da:	d102      	bne.n	80164e2 <_lseek_r+0x1e>
 80164dc:	682b      	ldr	r3, [r5, #0]
 80164de:	b103      	cbz	r3, 80164e2 <_lseek_r+0x1e>
 80164e0:	6023      	str	r3, [r4, #0]
 80164e2:	bd38      	pop	{r3, r4, r5, pc}
 80164e4:	200095ec 	.word	0x200095ec

080164e8 <_read_r>:
 80164e8:	b538      	push	{r3, r4, r5, lr}
 80164ea:	4d07      	ldr	r5, [pc, #28]	; (8016508 <_read_r+0x20>)
 80164ec:	4604      	mov	r4, r0
 80164ee:	4608      	mov	r0, r1
 80164f0:	4611      	mov	r1, r2
 80164f2:	2200      	movs	r2, #0
 80164f4:	602a      	str	r2, [r5, #0]
 80164f6:	461a      	mov	r2, r3
 80164f8:	f7ed f928 	bl	800374c <_read>
 80164fc:	1c43      	adds	r3, r0, #1
 80164fe:	d102      	bne.n	8016506 <_read_r+0x1e>
 8016500:	682b      	ldr	r3, [r5, #0]
 8016502:	b103      	cbz	r3, 8016506 <_read_r+0x1e>
 8016504:	6023      	str	r3, [r4, #0]
 8016506:	bd38      	pop	{r3, r4, r5, pc}
 8016508:	200095ec 	.word	0x200095ec

0801650c <_sbrk_r>:
 801650c:	b538      	push	{r3, r4, r5, lr}
 801650e:	4d06      	ldr	r5, [pc, #24]	; (8016528 <_sbrk_r+0x1c>)
 8016510:	2300      	movs	r3, #0
 8016512:	4604      	mov	r4, r0
 8016514:	4608      	mov	r0, r1
 8016516:	602b      	str	r3, [r5, #0]
 8016518:	f7ed f986 	bl	8003828 <_sbrk>
 801651c:	1c43      	adds	r3, r0, #1
 801651e:	d102      	bne.n	8016526 <_sbrk_r+0x1a>
 8016520:	682b      	ldr	r3, [r5, #0]
 8016522:	b103      	cbz	r3, 8016526 <_sbrk_r+0x1a>
 8016524:	6023      	str	r3, [r4, #0]
 8016526:	bd38      	pop	{r3, r4, r5, pc}
 8016528:	200095ec 	.word	0x200095ec

0801652c <_write_r>:
 801652c:	b538      	push	{r3, r4, r5, lr}
 801652e:	4d07      	ldr	r5, [pc, #28]	; (801654c <_write_r+0x20>)
 8016530:	4604      	mov	r4, r0
 8016532:	4608      	mov	r0, r1
 8016534:	4611      	mov	r1, r2
 8016536:	2200      	movs	r2, #0
 8016538:	602a      	str	r2, [r5, #0]
 801653a:	461a      	mov	r2, r3
 801653c:	f7ed f923 	bl	8003786 <_write>
 8016540:	1c43      	adds	r3, r0, #1
 8016542:	d102      	bne.n	801654a <_write_r+0x1e>
 8016544:	682b      	ldr	r3, [r5, #0]
 8016546:	b103      	cbz	r3, 801654a <_write_r+0x1e>
 8016548:	6023      	str	r3, [r4, #0]
 801654a:	bd38      	pop	{r3, r4, r5, pc}
 801654c:	200095ec 	.word	0x200095ec

08016550 <__errno>:
 8016550:	4b01      	ldr	r3, [pc, #4]	; (8016558 <__errno+0x8>)
 8016552:	6818      	ldr	r0, [r3, #0]
 8016554:	4770      	bx	lr
 8016556:	bf00      	nop
 8016558:	200000d8 	.word	0x200000d8

0801655c <__libc_init_array>:
 801655c:	b570      	push	{r4, r5, r6, lr}
 801655e:	4d0d      	ldr	r5, [pc, #52]	; (8016594 <__libc_init_array+0x38>)
 8016560:	4c0d      	ldr	r4, [pc, #52]	; (8016598 <__libc_init_array+0x3c>)
 8016562:	1b64      	subs	r4, r4, r5
 8016564:	10a4      	asrs	r4, r4, #2
 8016566:	2600      	movs	r6, #0
 8016568:	42a6      	cmp	r6, r4
 801656a:	d109      	bne.n	8016580 <__libc_init_array+0x24>
 801656c:	4d0b      	ldr	r5, [pc, #44]	; (801659c <__libc_init_array+0x40>)
 801656e:	4c0c      	ldr	r4, [pc, #48]	; (80165a0 <__libc_init_array+0x44>)
 8016570:	f000 ff1a 	bl	80173a8 <_init>
 8016574:	1b64      	subs	r4, r4, r5
 8016576:	10a4      	asrs	r4, r4, #2
 8016578:	2600      	movs	r6, #0
 801657a:	42a6      	cmp	r6, r4
 801657c:	d105      	bne.n	801658a <__libc_init_array+0x2e>
 801657e:	bd70      	pop	{r4, r5, r6, pc}
 8016580:	f855 3b04 	ldr.w	r3, [r5], #4
 8016584:	4798      	blx	r3
 8016586:	3601      	adds	r6, #1
 8016588:	e7ee      	b.n	8016568 <__libc_init_array+0xc>
 801658a:	f855 3b04 	ldr.w	r3, [r5], #4
 801658e:	4798      	blx	r3
 8016590:	3601      	adds	r6, #1
 8016592:	e7f2      	b.n	801657a <__libc_init_array+0x1e>
 8016594:	08017eec 	.word	0x08017eec
 8016598:	08017eec 	.word	0x08017eec
 801659c:	08017eec 	.word	0x08017eec
 80165a0:	08017ef0 	.word	0x08017ef0

080165a4 <__retarget_lock_acquire_recursive>:
 80165a4:	4770      	bx	lr

080165a6 <__retarget_lock_release_recursive>:
 80165a6:	4770      	bx	lr

080165a8 <strcpy>:
 80165a8:	4603      	mov	r3, r0
 80165aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80165ae:	f803 2b01 	strb.w	r2, [r3], #1
 80165b2:	2a00      	cmp	r2, #0
 80165b4:	d1f9      	bne.n	80165aa <strcpy+0x2>
 80165b6:	4770      	bx	lr

080165b8 <memcpy>:
 80165b8:	440a      	add	r2, r1
 80165ba:	4291      	cmp	r1, r2
 80165bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80165c0:	d100      	bne.n	80165c4 <memcpy+0xc>
 80165c2:	4770      	bx	lr
 80165c4:	b510      	push	{r4, lr}
 80165c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80165ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80165ce:	4291      	cmp	r1, r2
 80165d0:	d1f9      	bne.n	80165c6 <memcpy+0xe>
 80165d2:	bd10      	pop	{r4, pc}

080165d4 <__assert_func>:
 80165d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80165d6:	4614      	mov	r4, r2
 80165d8:	461a      	mov	r2, r3
 80165da:	4b09      	ldr	r3, [pc, #36]	; (8016600 <__assert_func+0x2c>)
 80165dc:	681b      	ldr	r3, [r3, #0]
 80165de:	4605      	mov	r5, r0
 80165e0:	68d8      	ldr	r0, [r3, #12]
 80165e2:	b14c      	cbz	r4, 80165f8 <__assert_func+0x24>
 80165e4:	4b07      	ldr	r3, [pc, #28]	; (8016604 <__assert_func+0x30>)
 80165e6:	9100      	str	r1, [sp, #0]
 80165e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80165ec:	4906      	ldr	r1, [pc, #24]	; (8016608 <__assert_func+0x34>)
 80165ee:	462b      	mov	r3, r5
 80165f0:	f000 fd48 	bl	8017084 <fiprintf>
 80165f4:	f000 fe08 	bl	8017208 <abort>
 80165f8:	4b04      	ldr	r3, [pc, #16]	; (801660c <__assert_func+0x38>)
 80165fa:	461c      	mov	r4, r3
 80165fc:	e7f3      	b.n	80165e6 <__assert_func+0x12>
 80165fe:	bf00      	nop
 8016600:	200000d8 	.word	0x200000d8
 8016604:	08017e74 	.word	0x08017e74
 8016608:	08017e81 	.word	0x08017e81
 801660c:	08017eaf 	.word	0x08017eaf

08016610 <__env_lock>:
 8016610:	4801      	ldr	r0, [pc, #4]	; (8016618 <__env_lock+0x8>)
 8016612:	f7ff bfc7 	b.w	80165a4 <__retarget_lock_acquire_recursive>
 8016616:	bf00      	nop
 8016618:	200095f0 	.word	0x200095f0

0801661c <__env_unlock>:
 801661c:	4801      	ldr	r0, [pc, #4]	; (8016624 <__env_unlock+0x8>)
 801661e:	f7ff bfc2 	b.w	80165a6 <__retarget_lock_release_recursive>
 8016622:	bf00      	nop
 8016624:	200095f0 	.word	0x200095f0

08016628 <_free_r>:
 8016628:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801662a:	2900      	cmp	r1, #0
 801662c:	d044      	beq.n	80166b8 <_free_r+0x90>
 801662e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016632:	9001      	str	r0, [sp, #4]
 8016634:	2b00      	cmp	r3, #0
 8016636:	f1a1 0404 	sub.w	r4, r1, #4
 801663a:	bfb8      	it	lt
 801663c:	18e4      	addlt	r4, r4, r3
 801663e:	f7ff fbdf 	bl	8015e00 <__malloc_lock>
 8016642:	4a1e      	ldr	r2, [pc, #120]	; (80166bc <_free_r+0x94>)
 8016644:	9801      	ldr	r0, [sp, #4]
 8016646:	6813      	ldr	r3, [r2, #0]
 8016648:	b933      	cbnz	r3, 8016658 <_free_r+0x30>
 801664a:	6063      	str	r3, [r4, #4]
 801664c:	6014      	str	r4, [r2, #0]
 801664e:	b003      	add	sp, #12
 8016650:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016654:	f7ff bbda 	b.w	8015e0c <__malloc_unlock>
 8016658:	42a3      	cmp	r3, r4
 801665a:	d908      	bls.n	801666e <_free_r+0x46>
 801665c:	6825      	ldr	r5, [r4, #0]
 801665e:	1961      	adds	r1, r4, r5
 8016660:	428b      	cmp	r3, r1
 8016662:	bf01      	itttt	eq
 8016664:	6819      	ldreq	r1, [r3, #0]
 8016666:	685b      	ldreq	r3, [r3, #4]
 8016668:	1949      	addeq	r1, r1, r5
 801666a:	6021      	streq	r1, [r4, #0]
 801666c:	e7ed      	b.n	801664a <_free_r+0x22>
 801666e:	461a      	mov	r2, r3
 8016670:	685b      	ldr	r3, [r3, #4]
 8016672:	b10b      	cbz	r3, 8016678 <_free_r+0x50>
 8016674:	42a3      	cmp	r3, r4
 8016676:	d9fa      	bls.n	801666e <_free_r+0x46>
 8016678:	6811      	ldr	r1, [r2, #0]
 801667a:	1855      	adds	r5, r2, r1
 801667c:	42a5      	cmp	r5, r4
 801667e:	d10b      	bne.n	8016698 <_free_r+0x70>
 8016680:	6824      	ldr	r4, [r4, #0]
 8016682:	4421      	add	r1, r4
 8016684:	1854      	adds	r4, r2, r1
 8016686:	42a3      	cmp	r3, r4
 8016688:	6011      	str	r1, [r2, #0]
 801668a:	d1e0      	bne.n	801664e <_free_r+0x26>
 801668c:	681c      	ldr	r4, [r3, #0]
 801668e:	685b      	ldr	r3, [r3, #4]
 8016690:	6053      	str	r3, [r2, #4]
 8016692:	440c      	add	r4, r1
 8016694:	6014      	str	r4, [r2, #0]
 8016696:	e7da      	b.n	801664e <_free_r+0x26>
 8016698:	d902      	bls.n	80166a0 <_free_r+0x78>
 801669a:	230c      	movs	r3, #12
 801669c:	6003      	str	r3, [r0, #0]
 801669e:	e7d6      	b.n	801664e <_free_r+0x26>
 80166a0:	6825      	ldr	r5, [r4, #0]
 80166a2:	1961      	adds	r1, r4, r5
 80166a4:	428b      	cmp	r3, r1
 80166a6:	bf04      	itt	eq
 80166a8:	6819      	ldreq	r1, [r3, #0]
 80166aa:	685b      	ldreq	r3, [r3, #4]
 80166ac:	6063      	str	r3, [r4, #4]
 80166ae:	bf04      	itt	eq
 80166b0:	1949      	addeq	r1, r1, r5
 80166b2:	6021      	streq	r1, [r4, #0]
 80166b4:	6054      	str	r4, [r2, #4]
 80166b6:	e7ca      	b.n	801664e <_free_r+0x26>
 80166b8:	b003      	add	sp, #12
 80166ba:	bd30      	pop	{r4, r5, pc}
 80166bc:	200094a8 	.word	0x200094a8

080166c0 <_malloc_usable_size_r>:
 80166c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80166c4:	1f18      	subs	r0, r3, #4
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	bfbc      	itt	lt
 80166ca:	580b      	ldrlt	r3, [r1, r0]
 80166cc:	18c0      	addlt	r0, r0, r3
 80166ce:	4770      	bx	lr

080166d0 <__ssputs_r>:
 80166d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80166d4:	688e      	ldr	r6, [r1, #8]
 80166d6:	461f      	mov	r7, r3
 80166d8:	42be      	cmp	r6, r7
 80166da:	680b      	ldr	r3, [r1, #0]
 80166dc:	4682      	mov	sl, r0
 80166de:	460c      	mov	r4, r1
 80166e0:	4690      	mov	r8, r2
 80166e2:	d82c      	bhi.n	801673e <__ssputs_r+0x6e>
 80166e4:	898a      	ldrh	r2, [r1, #12]
 80166e6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80166ea:	d026      	beq.n	801673a <__ssputs_r+0x6a>
 80166ec:	6965      	ldr	r5, [r4, #20]
 80166ee:	6909      	ldr	r1, [r1, #16]
 80166f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80166f4:	eba3 0901 	sub.w	r9, r3, r1
 80166f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80166fc:	1c7b      	adds	r3, r7, #1
 80166fe:	444b      	add	r3, r9
 8016700:	106d      	asrs	r5, r5, #1
 8016702:	429d      	cmp	r5, r3
 8016704:	bf38      	it	cc
 8016706:	461d      	movcc	r5, r3
 8016708:	0553      	lsls	r3, r2, #21
 801670a:	d527      	bpl.n	801675c <__ssputs_r+0x8c>
 801670c:	4629      	mov	r1, r5
 801670e:	f7ff faf7 	bl	8015d00 <_malloc_r>
 8016712:	4606      	mov	r6, r0
 8016714:	b360      	cbz	r0, 8016770 <__ssputs_r+0xa0>
 8016716:	6921      	ldr	r1, [r4, #16]
 8016718:	464a      	mov	r2, r9
 801671a:	f7ff ff4d 	bl	80165b8 <memcpy>
 801671e:	89a3      	ldrh	r3, [r4, #12]
 8016720:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016728:	81a3      	strh	r3, [r4, #12]
 801672a:	6126      	str	r6, [r4, #16]
 801672c:	6165      	str	r5, [r4, #20]
 801672e:	444e      	add	r6, r9
 8016730:	eba5 0509 	sub.w	r5, r5, r9
 8016734:	6026      	str	r6, [r4, #0]
 8016736:	60a5      	str	r5, [r4, #8]
 8016738:	463e      	mov	r6, r7
 801673a:	42be      	cmp	r6, r7
 801673c:	d900      	bls.n	8016740 <__ssputs_r+0x70>
 801673e:	463e      	mov	r6, r7
 8016740:	6820      	ldr	r0, [r4, #0]
 8016742:	4632      	mov	r2, r6
 8016744:	4641      	mov	r1, r8
 8016746:	f000 fd45 	bl	80171d4 <memmove>
 801674a:	68a3      	ldr	r3, [r4, #8]
 801674c:	1b9b      	subs	r3, r3, r6
 801674e:	60a3      	str	r3, [r4, #8]
 8016750:	6823      	ldr	r3, [r4, #0]
 8016752:	4433      	add	r3, r6
 8016754:	6023      	str	r3, [r4, #0]
 8016756:	2000      	movs	r0, #0
 8016758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801675c:	462a      	mov	r2, r5
 801675e:	f7ff fbcf 	bl	8015f00 <_realloc_r>
 8016762:	4606      	mov	r6, r0
 8016764:	2800      	cmp	r0, #0
 8016766:	d1e0      	bne.n	801672a <__ssputs_r+0x5a>
 8016768:	6921      	ldr	r1, [r4, #16]
 801676a:	4650      	mov	r0, sl
 801676c:	f7ff ff5c 	bl	8016628 <_free_r>
 8016770:	230c      	movs	r3, #12
 8016772:	f8ca 3000 	str.w	r3, [sl]
 8016776:	89a3      	ldrh	r3, [r4, #12]
 8016778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801677c:	81a3      	strh	r3, [r4, #12]
 801677e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016782:	e7e9      	b.n	8016758 <__ssputs_r+0x88>

08016784 <_svfiprintf_r>:
 8016784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016788:	4698      	mov	r8, r3
 801678a:	898b      	ldrh	r3, [r1, #12]
 801678c:	061b      	lsls	r3, r3, #24
 801678e:	b09d      	sub	sp, #116	; 0x74
 8016790:	4607      	mov	r7, r0
 8016792:	460d      	mov	r5, r1
 8016794:	4614      	mov	r4, r2
 8016796:	d50e      	bpl.n	80167b6 <_svfiprintf_r+0x32>
 8016798:	690b      	ldr	r3, [r1, #16]
 801679a:	b963      	cbnz	r3, 80167b6 <_svfiprintf_r+0x32>
 801679c:	2140      	movs	r1, #64	; 0x40
 801679e:	f7ff faaf 	bl	8015d00 <_malloc_r>
 80167a2:	6028      	str	r0, [r5, #0]
 80167a4:	6128      	str	r0, [r5, #16]
 80167a6:	b920      	cbnz	r0, 80167b2 <_svfiprintf_r+0x2e>
 80167a8:	230c      	movs	r3, #12
 80167aa:	603b      	str	r3, [r7, #0]
 80167ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80167b0:	e0d0      	b.n	8016954 <_svfiprintf_r+0x1d0>
 80167b2:	2340      	movs	r3, #64	; 0x40
 80167b4:	616b      	str	r3, [r5, #20]
 80167b6:	2300      	movs	r3, #0
 80167b8:	9309      	str	r3, [sp, #36]	; 0x24
 80167ba:	2320      	movs	r3, #32
 80167bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80167c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80167c4:	2330      	movs	r3, #48	; 0x30
 80167c6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801696c <_svfiprintf_r+0x1e8>
 80167ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80167ce:	f04f 0901 	mov.w	r9, #1
 80167d2:	4623      	mov	r3, r4
 80167d4:	469a      	mov	sl, r3
 80167d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80167da:	b10a      	cbz	r2, 80167e0 <_svfiprintf_r+0x5c>
 80167dc:	2a25      	cmp	r2, #37	; 0x25
 80167de:	d1f9      	bne.n	80167d4 <_svfiprintf_r+0x50>
 80167e0:	ebba 0b04 	subs.w	fp, sl, r4
 80167e4:	d00b      	beq.n	80167fe <_svfiprintf_r+0x7a>
 80167e6:	465b      	mov	r3, fp
 80167e8:	4622      	mov	r2, r4
 80167ea:	4629      	mov	r1, r5
 80167ec:	4638      	mov	r0, r7
 80167ee:	f7ff ff6f 	bl	80166d0 <__ssputs_r>
 80167f2:	3001      	adds	r0, #1
 80167f4:	f000 80a9 	beq.w	801694a <_svfiprintf_r+0x1c6>
 80167f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80167fa:	445a      	add	r2, fp
 80167fc:	9209      	str	r2, [sp, #36]	; 0x24
 80167fe:	f89a 3000 	ldrb.w	r3, [sl]
 8016802:	2b00      	cmp	r3, #0
 8016804:	f000 80a1 	beq.w	801694a <_svfiprintf_r+0x1c6>
 8016808:	2300      	movs	r3, #0
 801680a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801680e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016812:	f10a 0a01 	add.w	sl, sl, #1
 8016816:	9304      	str	r3, [sp, #16]
 8016818:	9307      	str	r3, [sp, #28]
 801681a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801681e:	931a      	str	r3, [sp, #104]	; 0x68
 8016820:	4654      	mov	r4, sl
 8016822:	2205      	movs	r2, #5
 8016824:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016828:	4850      	ldr	r0, [pc, #320]	; (801696c <_svfiprintf_r+0x1e8>)
 801682a:	f7e9 fcf1 	bl	8000210 <memchr>
 801682e:	9a04      	ldr	r2, [sp, #16]
 8016830:	b9d8      	cbnz	r0, 801686a <_svfiprintf_r+0xe6>
 8016832:	06d0      	lsls	r0, r2, #27
 8016834:	bf44      	itt	mi
 8016836:	2320      	movmi	r3, #32
 8016838:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801683c:	0711      	lsls	r1, r2, #28
 801683e:	bf44      	itt	mi
 8016840:	232b      	movmi	r3, #43	; 0x2b
 8016842:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016846:	f89a 3000 	ldrb.w	r3, [sl]
 801684a:	2b2a      	cmp	r3, #42	; 0x2a
 801684c:	d015      	beq.n	801687a <_svfiprintf_r+0xf6>
 801684e:	9a07      	ldr	r2, [sp, #28]
 8016850:	4654      	mov	r4, sl
 8016852:	2000      	movs	r0, #0
 8016854:	f04f 0c0a 	mov.w	ip, #10
 8016858:	4621      	mov	r1, r4
 801685a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801685e:	3b30      	subs	r3, #48	; 0x30
 8016860:	2b09      	cmp	r3, #9
 8016862:	d94d      	bls.n	8016900 <_svfiprintf_r+0x17c>
 8016864:	b1b0      	cbz	r0, 8016894 <_svfiprintf_r+0x110>
 8016866:	9207      	str	r2, [sp, #28]
 8016868:	e014      	b.n	8016894 <_svfiprintf_r+0x110>
 801686a:	eba0 0308 	sub.w	r3, r0, r8
 801686e:	fa09 f303 	lsl.w	r3, r9, r3
 8016872:	4313      	orrs	r3, r2
 8016874:	9304      	str	r3, [sp, #16]
 8016876:	46a2      	mov	sl, r4
 8016878:	e7d2      	b.n	8016820 <_svfiprintf_r+0x9c>
 801687a:	9b03      	ldr	r3, [sp, #12]
 801687c:	1d19      	adds	r1, r3, #4
 801687e:	681b      	ldr	r3, [r3, #0]
 8016880:	9103      	str	r1, [sp, #12]
 8016882:	2b00      	cmp	r3, #0
 8016884:	bfbb      	ittet	lt
 8016886:	425b      	neglt	r3, r3
 8016888:	f042 0202 	orrlt.w	r2, r2, #2
 801688c:	9307      	strge	r3, [sp, #28]
 801688e:	9307      	strlt	r3, [sp, #28]
 8016890:	bfb8      	it	lt
 8016892:	9204      	strlt	r2, [sp, #16]
 8016894:	7823      	ldrb	r3, [r4, #0]
 8016896:	2b2e      	cmp	r3, #46	; 0x2e
 8016898:	d10c      	bne.n	80168b4 <_svfiprintf_r+0x130>
 801689a:	7863      	ldrb	r3, [r4, #1]
 801689c:	2b2a      	cmp	r3, #42	; 0x2a
 801689e:	d134      	bne.n	801690a <_svfiprintf_r+0x186>
 80168a0:	9b03      	ldr	r3, [sp, #12]
 80168a2:	1d1a      	adds	r2, r3, #4
 80168a4:	681b      	ldr	r3, [r3, #0]
 80168a6:	9203      	str	r2, [sp, #12]
 80168a8:	2b00      	cmp	r3, #0
 80168aa:	bfb8      	it	lt
 80168ac:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80168b0:	3402      	adds	r4, #2
 80168b2:	9305      	str	r3, [sp, #20]
 80168b4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801697c <_svfiprintf_r+0x1f8>
 80168b8:	7821      	ldrb	r1, [r4, #0]
 80168ba:	2203      	movs	r2, #3
 80168bc:	4650      	mov	r0, sl
 80168be:	f7e9 fca7 	bl	8000210 <memchr>
 80168c2:	b138      	cbz	r0, 80168d4 <_svfiprintf_r+0x150>
 80168c4:	9b04      	ldr	r3, [sp, #16]
 80168c6:	eba0 000a 	sub.w	r0, r0, sl
 80168ca:	2240      	movs	r2, #64	; 0x40
 80168cc:	4082      	lsls	r2, r0
 80168ce:	4313      	orrs	r3, r2
 80168d0:	3401      	adds	r4, #1
 80168d2:	9304      	str	r3, [sp, #16]
 80168d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80168d8:	4825      	ldr	r0, [pc, #148]	; (8016970 <_svfiprintf_r+0x1ec>)
 80168da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80168de:	2206      	movs	r2, #6
 80168e0:	f7e9 fc96 	bl	8000210 <memchr>
 80168e4:	2800      	cmp	r0, #0
 80168e6:	d038      	beq.n	801695a <_svfiprintf_r+0x1d6>
 80168e8:	4b22      	ldr	r3, [pc, #136]	; (8016974 <_svfiprintf_r+0x1f0>)
 80168ea:	bb1b      	cbnz	r3, 8016934 <_svfiprintf_r+0x1b0>
 80168ec:	9b03      	ldr	r3, [sp, #12]
 80168ee:	3307      	adds	r3, #7
 80168f0:	f023 0307 	bic.w	r3, r3, #7
 80168f4:	3308      	adds	r3, #8
 80168f6:	9303      	str	r3, [sp, #12]
 80168f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80168fa:	4433      	add	r3, r6
 80168fc:	9309      	str	r3, [sp, #36]	; 0x24
 80168fe:	e768      	b.n	80167d2 <_svfiprintf_r+0x4e>
 8016900:	fb0c 3202 	mla	r2, ip, r2, r3
 8016904:	460c      	mov	r4, r1
 8016906:	2001      	movs	r0, #1
 8016908:	e7a6      	b.n	8016858 <_svfiprintf_r+0xd4>
 801690a:	2300      	movs	r3, #0
 801690c:	3401      	adds	r4, #1
 801690e:	9305      	str	r3, [sp, #20]
 8016910:	4619      	mov	r1, r3
 8016912:	f04f 0c0a 	mov.w	ip, #10
 8016916:	4620      	mov	r0, r4
 8016918:	f810 2b01 	ldrb.w	r2, [r0], #1
 801691c:	3a30      	subs	r2, #48	; 0x30
 801691e:	2a09      	cmp	r2, #9
 8016920:	d903      	bls.n	801692a <_svfiprintf_r+0x1a6>
 8016922:	2b00      	cmp	r3, #0
 8016924:	d0c6      	beq.n	80168b4 <_svfiprintf_r+0x130>
 8016926:	9105      	str	r1, [sp, #20]
 8016928:	e7c4      	b.n	80168b4 <_svfiprintf_r+0x130>
 801692a:	fb0c 2101 	mla	r1, ip, r1, r2
 801692e:	4604      	mov	r4, r0
 8016930:	2301      	movs	r3, #1
 8016932:	e7f0      	b.n	8016916 <_svfiprintf_r+0x192>
 8016934:	ab03      	add	r3, sp, #12
 8016936:	9300      	str	r3, [sp, #0]
 8016938:	462a      	mov	r2, r5
 801693a:	4b0f      	ldr	r3, [pc, #60]	; (8016978 <_svfiprintf_r+0x1f4>)
 801693c:	a904      	add	r1, sp, #16
 801693e:	4638      	mov	r0, r7
 8016940:	f3af 8000 	nop.w
 8016944:	1c42      	adds	r2, r0, #1
 8016946:	4606      	mov	r6, r0
 8016948:	d1d6      	bne.n	80168f8 <_svfiprintf_r+0x174>
 801694a:	89ab      	ldrh	r3, [r5, #12]
 801694c:	065b      	lsls	r3, r3, #25
 801694e:	f53f af2d 	bmi.w	80167ac <_svfiprintf_r+0x28>
 8016952:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016954:	b01d      	add	sp, #116	; 0x74
 8016956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801695a:	ab03      	add	r3, sp, #12
 801695c:	9300      	str	r3, [sp, #0]
 801695e:	462a      	mov	r2, r5
 8016960:	4b05      	ldr	r3, [pc, #20]	; (8016978 <_svfiprintf_r+0x1f4>)
 8016962:	a904      	add	r1, sp, #16
 8016964:	4638      	mov	r0, r7
 8016966:	f000 f9bd 	bl	8016ce4 <_printf_i>
 801696a:	e7eb      	b.n	8016944 <_svfiprintf_r+0x1c0>
 801696c:	08017eb0 	.word	0x08017eb0
 8016970:	08017eba 	.word	0x08017eba
 8016974:	00000000 	.word	0x00000000
 8016978:	080166d1 	.word	0x080166d1
 801697c:	08017eb6 	.word	0x08017eb6

08016980 <__sfputc_r>:
 8016980:	6893      	ldr	r3, [r2, #8]
 8016982:	3b01      	subs	r3, #1
 8016984:	2b00      	cmp	r3, #0
 8016986:	b410      	push	{r4}
 8016988:	6093      	str	r3, [r2, #8]
 801698a:	da08      	bge.n	801699e <__sfputc_r+0x1e>
 801698c:	6994      	ldr	r4, [r2, #24]
 801698e:	42a3      	cmp	r3, r4
 8016990:	db01      	blt.n	8016996 <__sfputc_r+0x16>
 8016992:	290a      	cmp	r1, #10
 8016994:	d103      	bne.n	801699e <__sfputc_r+0x1e>
 8016996:	f85d 4b04 	ldr.w	r4, [sp], #4
 801699a:	f000 bb85 	b.w	80170a8 <__swbuf_r>
 801699e:	6813      	ldr	r3, [r2, #0]
 80169a0:	1c58      	adds	r0, r3, #1
 80169a2:	6010      	str	r0, [r2, #0]
 80169a4:	7019      	strb	r1, [r3, #0]
 80169a6:	4608      	mov	r0, r1
 80169a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80169ac:	4770      	bx	lr

080169ae <__sfputs_r>:
 80169ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169b0:	4606      	mov	r6, r0
 80169b2:	460f      	mov	r7, r1
 80169b4:	4614      	mov	r4, r2
 80169b6:	18d5      	adds	r5, r2, r3
 80169b8:	42ac      	cmp	r4, r5
 80169ba:	d101      	bne.n	80169c0 <__sfputs_r+0x12>
 80169bc:	2000      	movs	r0, #0
 80169be:	e007      	b.n	80169d0 <__sfputs_r+0x22>
 80169c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80169c4:	463a      	mov	r2, r7
 80169c6:	4630      	mov	r0, r6
 80169c8:	f7ff ffda 	bl	8016980 <__sfputc_r>
 80169cc:	1c43      	adds	r3, r0, #1
 80169ce:	d1f3      	bne.n	80169b8 <__sfputs_r+0xa>
 80169d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080169d4 <_vfiprintf_r>:
 80169d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169d8:	460d      	mov	r5, r1
 80169da:	b09d      	sub	sp, #116	; 0x74
 80169dc:	4614      	mov	r4, r2
 80169de:	4698      	mov	r8, r3
 80169e0:	4606      	mov	r6, r0
 80169e2:	b118      	cbz	r0, 80169ec <_vfiprintf_r+0x18>
 80169e4:	6a03      	ldr	r3, [r0, #32]
 80169e6:	b90b      	cbnz	r3, 80169ec <_vfiprintf_r+0x18>
 80169e8:	f7ff fbb0 	bl	801614c <__sinit>
 80169ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80169ee:	07d9      	lsls	r1, r3, #31
 80169f0:	d405      	bmi.n	80169fe <_vfiprintf_r+0x2a>
 80169f2:	89ab      	ldrh	r3, [r5, #12]
 80169f4:	059a      	lsls	r2, r3, #22
 80169f6:	d402      	bmi.n	80169fe <_vfiprintf_r+0x2a>
 80169f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80169fa:	f7ff fdd3 	bl	80165a4 <__retarget_lock_acquire_recursive>
 80169fe:	89ab      	ldrh	r3, [r5, #12]
 8016a00:	071b      	lsls	r3, r3, #28
 8016a02:	d501      	bpl.n	8016a08 <_vfiprintf_r+0x34>
 8016a04:	692b      	ldr	r3, [r5, #16]
 8016a06:	b99b      	cbnz	r3, 8016a30 <_vfiprintf_r+0x5c>
 8016a08:	4629      	mov	r1, r5
 8016a0a:	4630      	mov	r0, r6
 8016a0c:	f000 fb8a 	bl	8017124 <__swsetup_r>
 8016a10:	b170      	cbz	r0, 8016a30 <_vfiprintf_r+0x5c>
 8016a12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016a14:	07dc      	lsls	r4, r3, #31
 8016a16:	d504      	bpl.n	8016a22 <_vfiprintf_r+0x4e>
 8016a18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016a1c:	b01d      	add	sp, #116	; 0x74
 8016a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a22:	89ab      	ldrh	r3, [r5, #12]
 8016a24:	0598      	lsls	r0, r3, #22
 8016a26:	d4f7      	bmi.n	8016a18 <_vfiprintf_r+0x44>
 8016a28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016a2a:	f7ff fdbc 	bl	80165a6 <__retarget_lock_release_recursive>
 8016a2e:	e7f3      	b.n	8016a18 <_vfiprintf_r+0x44>
 8016a30:	2300      	movs	r3, #0
 8016a32:	9309      	str	r3, [sp, #36]	; 0x24
 8016a34:	2320      	movs	r3, #32
 8016a36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016a3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8016a3e:	2330      	movs	r3, #48	; 0x30
 8016a40:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8016bf4 <_vfiprintf_r+0x220>
 8016a44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016a48:	f04f 0901 	mov.w	r9, #1
 8016a4c:	4623      	mov	r3, r4
 8016a4e:	469a      	mov	sl, r3
 8016a50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016a54:	b10a      	cbz	r2, 8016a5a <_vfiprintf_r+0x86>
 8016a56:	2a25      	cmp	r2, #37	; 0x25
 8016a58:	d1f9      	bne.n	8016a4e <_vfiprintf_r+0x7a>
 8016a5a:	ebba 0b04 	subs.w	fp, sl, r4
 8016a5e:	d00b      	beq.n	8016a78 <_vfiprintf_r+0xa4>
 8016a60:	465b      	mov	r3, fp
 8016a62:	4622      	mov	r2, r4
 8016a64:	4629      	mov	r1, r5
 8016a66:	4630      	mov	r0, r6
 8016a68:	f7ff ffa1 	bl	80169ae <__sfputs_r>
 8016a6c:	3001      	adds	r0, #1
 8016a6e:	f000 80a9 	beq.w	8016bc4 <_vfiprintf_r+0x1f0>
 8016a72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016a74:	445a      	add	r2, fp
 8016a76:	9209      	str	r2, [sp, #36]	; 0x24
 8016a78:	f89a 3000 	ldrb.w	r3, [sl]
 8016a7c:	2b00      	cmp	r3, #0
 8016a7e:	f000 80a1 	beq.w	8016bc4 <_vfiprintf_r+0x1f0>
 8016a82:	2300      	movs	r3, #0
 8016a84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016a88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016a8c:	f10a 0a01 	add.w	sl, sl, #1
 8016a90:	9304      	str	r3, [sp, #16]
 8016a92:	9307      	str	r3, [sp, #28]
 8016a94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016a98:	931a      	str	r3, [sp, #104]	; 0x68
 8016a9a:	4654      	mov	r4, sl
 8016a9c:	2205      	movs	r2, #5
 8016a9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016aa2:	4854      	ldr	r0, [pc, #336]	; (8016bf4 <_vfiprintf_r+0x220>)
 8016aa4:	f7e9 fbb4 	bl	8000210 <memchr>
 8016aa8:	9a04      	ldr	r2, [sp, #16]
 8016aaa:	b9d8      	cbnz	r0, 8016ae4 <_vfiprintf_r+0x110>
 8016aac:	06d1      	lsls	r1, r2, #27
 8016aae:	bf44      	itt	mi
 8016ab0:	2320      	movmi	r3, #32
 8016ab2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016ab6:	0713      	lsls	r3, r2, #28
 8016ab8:	bf44      	itt	mi
 8016aba:	232b      	movmi	r3, #43	; 0x2b
 8016abc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016ac0:	f89a 3000 	ldrb.w	r3, [sl]
 8016ac4:	2b2a      	cmp	r3, #42	; 0x2a
 8016ac6:	d015      	beq.n	8016af4 <_vfiprintf_r+0x120>
 8016ac8:	9a07      	ldr	r2, [sp, #28]
 8016aca:	4654      	mov	r4, sl
 8016acc:	2000      	movs	r0, #0
 8016ace:	f04f 0c0a 	mov.w	ip, #10
 8016ad2:	4621      	mov	r1, r4
 8016ad4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016ad8:	3b30      	subs	r3, #48	; 0x30
 8016ada:	2b09      	cmp	r3, #9
 8016adc:	d94d      	bls.n	8016b7a <_vfiprintf_r+0x1a6>
 8016ade:	b1b0      	cbz	r0, 8016b0e <_vfiprintf_r+0x13a>
 8016ae0:	9207      	str	r2, [sp, #28]
 8016ae2:	e014      	b.n	8016b0e <_vfiprintf_r+0x13a>
 8016ae4:	eba0 0308 	sub.w	r3, r0, r8
 8016ae8:	fa09 f303 	lsl.w	r3, r9, r3
 8016aec:	4313      	orrs	r3, r2
 8016aee:	9304      	str	r3, [sp, #16]
 8016af0:	46a2      	mov	sl, r4
 8016af2:	e7d2      	b.n	8016a9a <_vfiprintf_r+0xc6>
 8016af4:	9b03      	ldr	r3, [sp, #12]
 8016af6:	1d19      	adds	r1, r3, #4
 8016af8:	681b      	ldr	r3, [r3, #0]
 8016afa:	9103      	str	r1, [sp, #12]
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	bfbb      	ittet	lt
 8016b00:	425b      	neglt	r3, r3
 8016b02:	f042 0202 	orrlt.w	r2, r2, #2
 8016b06:	9307      	strge	r3, [sp, #28]
 8016b08:	9307      	strlt	r3, [sp, #28]
 8016b0a:	bfb8      	it	lt
 8016b0c:	9204      	strlt	r2, [sp, #16]
 8016b0e:	7823      	ldrb	r3, [r4, #0]
 8016b10:	2b2e      	cmp	r3, #46	; 0x2e
 8016b12:	d10c      	bne.n	8016b2e <_vfiprintf_r+0x15a>
 8016b14:	7863      	ldrb	r3, [r4, #1]
 8016b16:	2b2a      	cmp	r3, #42	; 0x2a
 8016b18:	d134      	bne.n	8016b84 <_vfiprintf_r+0x1b0>
 8016b1a:	9b03      	ldr	r3, [sp, #12]
 8016b1c:	1d1a      	adds	r2, r3, #4
 8016b1e:	681b      	ldr	r3, [r3, #0]
 8016b20:	9203      	str	r2, [sp, #12]
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	bfb8      	it	lt
 8016b26:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8016b2a:	3402      	adds	r4, #2
 8016b2c:	9305      	str	r3, [sp, #20]
 8016b2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8016c04 <_vfiprintf_r+0x230>
 8016b32:	7821      	ldrb	r1, [r4, #0]
 8016b34:	2203      	movs	r2, #3
 8016b36:	4650      	mov	r0, sl
 8016b38:	f7e9 fb6a 	bl	8000210 <memchr>
 8016b3c:	b138      	cbz	r0, 8016b4e <_vfiprintf_r+0x17a>
 8016b3e:	9b04      	ldr	r3, [sp, #16]
 8016b40:	eba0 000a 	sub.w	r0, r0, sl
 8016b44:	2240      	movs	r2, #64	; 0x40
 8016b46:	4082      	lsls	r2, r0
 8016b48:	4313      	orrs	r3, r2
 8016b4a:	3401      	adds	r4, #1
 8016b4c:	9304      	str	r3, [sp, #16]
 8016b4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016b52:	4829      	ldr	r0, [pc, #164]	; (8016bf8 <_vfiprintf_r+0x224>)
 8016b54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016b58:	2206      	movs	r2, #6
 8016b5a:	f7e9 fb59 	bl	8000210 <memchr>
 8016b5e:	2800      	cmp	r0, #0
 8016b60:	d03f      	beq.n	8016be2 <_vfiprintf_r+0x20e>
 8016b62:	4b26      	ldr	r3, [pc, #152]	; (8016bfc <_vfiprintf_r+0x228>)
 8016b64:	bb1b      	cbnz	r3, 8016bae <_vfiprintf_r+0x1da>
 8016b66:	9b03      	ldr	r3, [sp, #12]
 8016b68:	3307      	adds	r3, #7
 8016b6a:	f023 0307 	bic.w	r3, r3, #7
 8016b6e:	3308      	adds	r3, #8
 8016b70:	9303      	str	r3, [sp, #12]
 8016b72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b74:	443b      	add	r3, r7
 8016b76:	9309      	str	r3, [sp, #36]	; 0x24
 8016b78:	e768      	b.n	8016a4c <_vfiprintf_r+0x78>
 8016b7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8016b7e:	460c      	mov	r4, r1
 8016b80:	2001      	movs	r0, #1
 8016b82:	e7a6      	b.n	8016ad2 <_vfiprintf_r+0xfe>
 8016b84:	2300      	movs	r3, #0
 8016b86:	3401      	adds	r4, #1
 8016b88:	9305      	str	r3, [sp, #20]
 8016b8a:	4619      	mov	r1, r3
 8016b8c:	f04f 0c0a 	mov.w	ip, #10
 8016b90:	4620      	mov	r0, r4
 8016b92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016b96:	3a30      	subs	r2, #48	; 0x30
 8016b98:	2a09      	cmp	r2, #9
 8016b9a:	d903      	bls.n	8016ba4 <_vfiprintf_r+0x1d0>
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	d0c6      	beq.n	8016b2e <_vfiprintf_r+0x15a>
 8016ba0:	9105      	str	r1, [sp, #20]
 8016ba2:	e7c4      	b.n	8016b2e <_vfiprintf_r+0x15a>
 8016ba4:	fb0c 2101 	mla	r1, ip, r1, r2
 8016ba8:	4604      	mov	r4, r0
 8016baa:	2301      	movs	r3, #1
 8016bac:	e7f0      	b.n	8016b90 <_vfiprintf_r+0x1bc>
 8016bae:	ab03      	add	r3, sp, #12
 8016bb0:	9300      	str	r3, [sp, #0]
 8016bb2:	462a      	mov	r2, r5
 8016bb4:	4b12      	ldr	r3, [pc, #72]	; (8016c00 <_vfiprintf_r+0x22c>)
 8016bb6:	a904      	add	r1, sp, #16
 8016bb8:	4630      	mov	r0, r6
 8016bba:	f3af 8000 	nop.w
 8016bbe:	4607      	mov	r7, r0
 8016bc0:	1c78      	adds	r0, r7, #1
 8016bc2:	d1d6      	bne.n	8016b72 <_vfiprintf_r+0x19e>
 8016bc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016bc6:	07d9      	lsls	r1, r3, #31
 8016bc8:	d405      	bmi.n	8016bd6 <_vfiprintf_r+0x202>
 8016bca:	89ab      	ldrh	r3, [r5, #12]
 8016bcc:	059a      	lsls	r2, r3, #22
 8016bce:	d402      	bmi.n	8016bd6 <_vfiprintf_r+0x202>
 8016bd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016bd2:	f7ff fce8 	bl	80165a6 <__retarget_lock_release_recursive>
 8016bd6:	89ab      	ldrh	r3, [r5, #12]
 8016bd8:	065b      	lsls	r3, r3, #25
 8016bda:	f53f af1d 	bmi.w	8016a18 <_vfiprintf_r+0x44>
 8016bde:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016be0:	e71c      	b.n	8016a1c <_vfiprintf_r+0x48>
 8016be2:	ab03      	add	r3, sp, #12
 8016be4:	9300      	str	r3, [sp, #0]
 8016be6:	462a      	mov	r2, r5
 8016be8:	4b05      	ldr	r3, [pc, #20]	; (8016c00 <_vfiprintf_r+0x22c>)
 8016bea:	a904      	add	r1, sp, #16
 8016bec:	4630      	mov	r0, r6
 8016bee:	f000 f879 	bl	8016ce4 <_printf_i>
 8016bf2:	e7e4      	b.n	8016bbe <_vfiprintf_r+0x1ea>
 8016bf4:	08017eb0 	.word	0x08017eb0
 8016bf8:	08017eba 	.word	0x08017eba
 8016bfc:	00000000 	.word	0x00000000
 8016c00:	080169af 	.word	0x080169af
 8016c04:	08017eb6 	.word	0x08017eb6

08016c08 <_printf_common>:
 8016c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016c0c:	4616      	mov	r6, r2
 8016c0e:	4699      	mov	r9, r3
 8016c10:	688a      	ldr	r2, [r1, #8]
 8016c12:	690b      	ldr	r3, [r1, #16]
 8016c14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016c18:	4293      	cmp	r3, r2
 8016c1a:	bfb8      	it	lt
 8016c1c:	4613      	movlt	r3, r2
 8016c1e:	6033      	str	r3, [r6, #0]
 8016c20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016c24:	4607      	mov	r7, r0
 8016c26:	460c      	mov	r4, r1
 8016c28:	b10a      	cbz	r2, 8016c2e <_printf_common+0x26>
 8016c2a:	3301      	adds	r3, #1
 8016c2c:	6033      	str	r3, [r6, #0]
 8016c2e:	6823      	ldr	r3, [r4, #0]
 8016c30:	0699      	lsls	r1, r3, #26
 8016c32:	bf42      	ittt	mi
 8016c34:	6833      	ldrmi	r3, [r6, #0]
 8016c36:	3302      	addmi	r3, #2
 8016c38:	6033      	strmi	r3, [r6, #0]
 8016c3a:	6825      	ldr	r5, [r4, #0]
 8016c3c:	f015 0506 	ands.w	r5, r5, #6
 8016c40:	d106      	bne.n	8016c50 <_printf_common+0x48>
 8016c42:	f104 0a19 	add.w	sl, r4, #25
 8016c46:	68e3      	ldr	r3, [r4, #12]
 8016c48:	6832      	ldr	r2, [r6, #0]
 8016c4a:	1a9b      	subs	r3, r3, r2
 8016c4c:	42ab      	cmp	r3, r5
 8016c4e:	dc26      	bgt.n	8016c9e <_printf_common+0x96>
 8016c50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016c54:	1e13      	subs	r3, r2, #0
 8016c56:	6822      	ldr	r2, [r4, #0]
 8016c58:	bf18      	it	ne
 8016c5a:	2301      	movne	r3, #1
 8016c5c:	0692      	lsls	r2, r2, #26
 8016c5e:	d42b      	bmi.n	8016cb8 <_printf_common+0xb0>
 8016c60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016c64:	4649      	mov	r1, r9
 8016c66:	4638      	mov	r0, r7
 8016c68:	47c0      	blx	r8
 8016c6a:	3001      	adds	r0, #1
 8016c6c:	d01e      	beq.n	8016cac <_printf_common+0xa4>
 8016c6e:	6823      	ldr	r3, [r4, #0]
 8016c70:	6922      	ldr	r2, [r4, #16]
 8016c72:	f003 0306 	and.w	r3, r3, #6
 8016c76:	2b04      	cmp	r3, #4
 8016c78:	bf02      	ittt	eq
 8016c7a:	68e5      	ldreq	r5, [r4, #12]
 8016c7c:	6833      	ldreq	r3, [r6, #0]
 8016c7e:	1aed      	subeq	r5, r5, r3
 8016c80:	68a3      	ldr	r3, [r4, #8]
 8016c82:	bf0c      	ite	eq
 8016c84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016c88:	2500      	movne	r5, #0
 8016c8a:	4293      	cmp	r3, r2
 8016c8c:	bfc4      	itt	gt
 8016c8e:	1a9b      	subgt	r3, r3, r2
 8016c90:	18ed      	addgt	r5, r5, r3
 8016c92:	2600      	movs	r6, #0
 8016c94:	341a      	adds	r4, #26
 8016c96:	42b5      	cmp	r5, r6
 8016c98:	d11a      	bne.n	8016cd0 <_printf_common+0xc8>
 8016c9a:	2000      	movs	r0, #0
 8016c9c:	e008      	b.n	8016cb0 <_printf_common+0xa8>
 8016c9e:	2301      	movs	r3, #1
 8016ca0:	4652      	mov	r2, sl
 8016ca2:	4649      	mov	r1, r9
 8016ca4:	4638      	mov	r0, r7
 8016ca6:	47c0      	blx	r8
 8016ca8:	3001      	adds	r0, #1
 8016caa:	d103      	bne.n	8016cb4 <_printf_common+0xac>
 8016cac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016cb4:	3501      	adds	r5, #1
 8016cb6:	e7c6      	b.n	8016c46 <_printf_common+0x3e>
 8016cb8:	18e1      	adds	r1, r4, r3
 8016cba:	1c5a      	adds	r2, r3, #1
 8016cbc:	2030      	movs	r0, #48	; 0x30
 8016cbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016cc2:	4422      	add	r2, r4
 8016cc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016cc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016ccc:	3302      	adds	r3, #2
 8016cce:	e7c7      	b.n	8016c60 <_printf_common+0x58>
 8016cd0:	2301      	movs	r3, #1
 8016cd2:	4622      	mov	r2, r4
 8016cd4:	4649      	mov	r1, r9
 8016cd6:	4638      	mov	r0, r7
 8016cd8:	47c0      	blx	r8
 8016cda:	3001      	adds	r0, #1
 8016cdc:	d0e6      	beq.n	8016cac <_printf_common+0xa4>
 8016cde:	3601      	adds	r6, #1
 8016ce0:	e7d9      	b.n	8016c96 <_printf_common+0x8e>
	...

08016ce4 <_printf_i>:
 8016ce4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016ce8:	7e0f      	ldrb	r7, [r1, #24]
 8016cea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016cec:	2f78      	cmp	r7, #120	; 0x78
 8016cee:	4691      	mov	r9, r2
 8016cf0:	4680      	mov	r8, r0
 8016cf2:	460c      	mov	r4, r1
 8016cf4:	469a      	mov	sl, r3
 8016cf6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8016cfa:	d807      	bhi.n	8016d0c <_printf_i+0x28>
 8016cfc:	2f62      	cmp	r7, #98	; 0x62
 8016cfe:	d80a      	bhi.n	8016d16 <_printf_i+0x32>
 8016d00:	2f00      	cmp	r7, #0
 8016d02:	f000 80d4 	beq.w	8016eae <_printf_i+0x1ca>
 8016d06:	2f58      	cmp	r7, #88	; 0x58
 8016d08:	f000 80c0 	beq.w	8016e8c <_printf_i+0x1a8>
 8016d0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016d10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016d14:	e03a      	b.n	8016d8c <_printf_i+0xa8>
 8016d16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016d1a:	2b15      	cmp	r3, #21
 8016d1c:	d8f6      	bhi.n	8016d0c <_printf_i+0x28>
 8016d1e:	a101      	add	r1, pc, #4	; (adr r1, 8016d24 <_printf_i+0x40>)
 8016d20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016d24:	08016d7d 	.word	0x08016d7d
 8016d28:	08016d91 	.word	0x08016d91
 8016d2c:	08016d0d 	.word	0x08016d0d
 8016d30:	08016d0d 	.word	0x08016d0d
 8016d34:	08016d0d 	.word	0x08016d0d
 8016d38:	08016d0d 	.word	0x08016d0d
 8016d3c:	08016d91 	.word	0x08016d91
 8016d40:	08016d0d 	.word	0x08016d0d
 8016d44:	08016d0d 	.word	0x08016d0d
 8016d48:	08016d0d 	.word	0x08016d0d
 8016d4c:	08016d0d 	.word	0x08016d0d
 8016d50:	08016e95 	.word	0x08016e95
 8016d54:	08016dbd 	.word	0x08016dbd
 8016d58:	08016e4f 	.word	0x08016e4f
 8016d5c:	08016d0d 	.word	0x08016d0d
 8016d60:	08016d0d 	.word	0x08016d0d
 8016d64:	08016eb7 	.word	0x08016eb7
 8016d68:	08016d0d 	.word	0x08016d0d
 8016d6c:	08016dbd 	.word	0x08016dbd
 8016d70:	08016d0d 	.word	0x08016d0d
 8016d74:	08016d0d 	.word	0x08016d0d
 8016d78:	08016e57 	.word	0x08016e57
 8016d7c:	682b      	ldr	r3, [r5, #0]
 8016d7e:	1d1a      	adds	r2, r3, #4
 8016d80:	681b      	ldr	r3, [r3, #0]
 8016d82:	602a      	str	r2, [r5, #0]
 8016d84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016d88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016d8c:	2301      	movs	r3, #1
 8016d8e:	e09f      	b.n	8016ed0 <_printf_i+0x1ec>
 8016d90:	6820      	ldr	r0, [r4, #0]
 8016d92:	682b      	ldr	r3, [r5, #0]
 8016d94:	0607      	lsls	r7, r0, #24
 8016d96:	f103 0104 	add.w	r1, r3, #4
 8016d9a:	6029      	str	r1, [r5, #0]
 8016d9c:	d501      	bpl.n	8016da2 <_printf_i+0xbe>
 8016d9e:	681e      	ldr	r6, [r3, #0]
 8016da0:	e003      	b.n	8016daa <_printf_i+0xc6>
 8016da2:	0646      	lsls	r6, r0, #25
 8016da4:	d5fb      	bpl.n	8016d9e <_printf_i+0xba>
 8016da6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8016daa:	2e00      	cmp	r6, #0
 8016dac:	da03      	bge.n	8016db6 <_printf_i+0xd2>
 8016dae:	232d      	movs	r3, #45	; 0x2d
 8016db0:	4276      	negs	r6, r6
 8016db2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016db6:	485a      	ldr	r0, [pc, #360]	; (8016f20 <_printf_i+0x23c>)
 8016db8:	230a      	movs	r3, #10
 8016dba:	e012      	b.n	8016de2 <_printf_i+0xfe>
 8016dbc:	682b      	ldr	r3, [r5, #0]
 8016dbe:	6820      	ldr	r0, [r4, #0]
 8016dc0:	1d19      	adds	r1, r3, #4
 8016dc2:	6029      	str	r1, [r5, #0]
 8016dc4:	0605      	lsls	r5, r0, #24
 8016dc6:	d501      	bpl.n	8016dcc <_printf_i+0xe8>
 8016dc8:	681e      	ldr	r6, [r3, #0]
 8016dca:	e002      	b.n	8016dd2 <_printf_i+0xee>
 8016dcc:	0641      	lsls	r1, r0, #25
 8016dce:	d5fb      	bpl.n	8016dc8 <_printf_i+0xe4>
 8016dd0:	881e      	ldrh	r6, [r3, #0]
 8016dd2:	4853      	ldr	r0, [pc, #332]	; (8016f20 <_printf_i+0x23c>)
 8016dd4:	2f6f      	cmp	r7, #111	; 0x6f
 8016dd6:	bf0c      	ite	eq
 8016dd8:	2308      	moveq	r3, #8
 8016dda:	230a      	movne	r3, #10
 8016ddc:	2100      	movs	r1, #0
 8016dde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016de2:	6865      	ldr	r5, [r4, #4]
 8016de4:	60a5      	str	r5, [r4, #8]
 8016de6:	2d00      	cmp	r5, #0
 8016de8:	bfa2      	ittt	ge
 8016dea:	6821      	ldrge	r1, [r4, #0]
 8016dec:	f021 0104 	bicge.w	r1, r1, #4
 8016df0:	6021      	strge	r1, [r4, #0]
 8016df2:	b90e      	cbnz	r6, 8016df8 <_printf_i+0x114>
 8016df4:	2d00      	cmp	r5, #0
 8016df6:	d04b      	beq.n	8016e90 <_printf_i+0x1ac>
 8016df8:	4615      	mov	r5, r2
 8016dfa:	fbb6 f1f3 	udiv	r1, r6, r3
 8016dfe:	fb03 6711 	mls	r7, r3, r1, r6
 8016e02:	5dc7      	ldrb	r7, [r0, r7]
 8016e04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8016e08:	4637      	mov	r7, r6
 8016e0a:	42bb      	cmp	r3, r7
 8016e0c:	460e      	mov	r6, r1
 8016e0e:	d9f4      	bls.n	8016dfa <_printf_i+0x116>
 8016e10:	2b08      	cmp	r3, #8
 8016e12:	d10b      	bne.n	8016e2c <_printf_i+0x148>
 8016e14:	6823      	ldr	r3, [r4, #0]
 8016e16:	07de      	lsls	r6, r3, #31
 8016e18:	d508      	bpl.n	8016e2c <_printf_i+0x148>
 8016e1a:	6923      	ldr	r3, [r4, #16]
 8016e1c:	6861      	ldr	r1, [r4, #4]
 8016e1e:	4299      	cmp	r1, r3
 8016e20:	bfde      	ittt	le
 8016e22:	2330      	movle	r3, #48	; 0x30
 8016e24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016e28:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8016e2c:	1b52      	subs	r2, r2, r5
 8016e2e:	6122      	str	r2, [r4, #16]
 8016e30:	f8cd a000 	str.w	sl, [sp]
 8016e34:	464b      	mov	r3, r9
 8016e36:	aa03      	add	r2, sp, #12
 8016e38:	4621      	mov	r1, r4
 8016e3a:	4640      	mov	r0, r8
 8016e3c:	f7ff fee4 	bl	8016c08 <_printf_common>
 8016e40:	3001      	adds	r0, #1
 8016e42:	d14a      	bne.n	8016eda <_printf_i+0x1f6>
 8016e44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016e48:	b004      	add	sp, #16
 8016e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016e4e:	6823      	ldr	r3, [r4, #0]
 8016e50:	f043 0320 	orr.w	r3, r3, #32
 8016e54:	6023      	str	r3, [r4, #0]
 8016e56:	4833      	ldr	r0, [pc, #204]	; (8016f24 <_printf_i+0x240>)
 8016e58:	2778      	movs	r7, #120	; 0x78
 8016e5a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8016e5e:	6823      	ldr	r3, [r4, #0]
 8016e60:	6829      	ldr	r1, [r5, #0]
 8016e62:	061f      	lsls	r7, r3, #24
 8016e64:	f851 6b04 	ldr.w	r6, [r1], #4
 8016e68:	d402      	bmi.n	8016e70 <_printf_i+0x18c>
 8016e6a:	065f      	lsls	r7, r3, #25
 8016e6c:	bf48      	it	mi
 8016e6e:	b2b6      	uxthmi	r6, r6
 8016e70:	07df      	lsls	r7, r3, #31
 8016e72:	bf48      	it	mi
 8016e74:	f043 0320 	orrmi.w	r3, r3, #32
 8016e78:	6029      	str	r1, [r5, #0]
 8016e7a:	bf48      	it	mi
 8016e7c:	6023      	strmi	r3, [r4, #0]
 8016e7e:	b91e      	cbnz	r6, 8016e88 <_printf_i+0x1a4>
 8016e80:	6823      	ldr	r3, [r4, #0]
 8016e82:	f023 0320 	bic.w	r3, r3, #32
 8016e86:	6023      	str	r3, [r4, #0]
 8016e88:	2310      	movs	r3, #16
 8016e8a:	e7a7      	b.n	8016ddc <_printf_i+0xf8>
 8016e8c:	4824      	ldr	r0, [pc, #144]	; (8016f20 <_printf_i+0x23c>)
 8016e8e:	e7e4      	b.n	8016e5a <_printf_i+0x176>
 8016e90:	4615      	mov	r5, r2
 8016e92:	e7bd      	b.n	8016e10 <_printf_i+0x12c>
 8016e94:	682b      	ldr	r3, [r5, #0]
 8016e96:	6826      	ldr	r6, [r4, #0]
 8016e98:	6961      	ldr	r1, [r4, #20]
 8016e9a:	1d18      	adds	r0, r3, #4
 8016e9c:	6028      	str	r0, [r5, #0]
 8016e9e:	0635      	lsls	r5, r6, #24
 8016ea0:	681b      	ldr	r3, [r3, #0]
 8016ea2:	d501      	bpl.n	8016ea8 <_printf_i+0x1c4>
 8016ea4:	6019      	str	r1, [r3, #0]
 8016ea6:	e002      	b.n	8016eae <_printf_i+0x1ca>
 8016ea8:	0670      	lsls	r0, r6, #25
 8016eaa:	d5fb      	bpl.n	8016ea4 <_printf_i+0x1c0>
 8016eac:	8019      	strh	r1, [r3, #0]
 8016eae:	2300      	movs	r3, #0
 8016eb0:	6123      	str	r3, [r4, #16]
 8016eb2:	4615      	mov	r5, r2
 8016eb4:	e7bc      	b.n	8016e30 <_printf_i+0x14c>
 8016eb6:	682b      	ldr	r3, [r5, #0]
 8016eb8:	1d1a      	adds	r2, r3, #4
 8016eba:	602a      	str	r2, [r5, #0]
 8016ebc:	681d      	ldr	r5, [r3, #0]
 8016ebe:	6862      	ldr	r2, [r4, #4]
 8016ec0:	2100      	movs	r1, #0
 8016ec2:	4628      	mov	r0, r5
 8016ec4:	f7e9 f9a4 	bl	8000210 <memchr>
 8016ec8:	b108      	cbz	r0, 8016ece <_printf_i+0x1ea>
 8016eca:	1b40      	subs	r0, r0, r5
 8016ecc:	6060      	str	r0, [r4, #4]
 8016ece:	6863      	ldr	r3, [r4, #4]
 8016ed0:	6123      	str	r3, [r4, #16]
 8016ed2:	2300      	movs	r3, #0
 8016ed4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016ed8:	e7aa      	b.n	8016e30 <_printf_i+0x14c>
 8016eda:	6923      	ldr	r3, [r4, #16]
 8016edc:	462a      	mov	r2, r5
 8016ede:	4649      	mov	r1, r9
 8016ee0:	4640      	mov	r0, r8
 8016ee2:	47d0      	blx	sl
 8016ee4:	3001      	adds	r0, #1
 8016ee6:	d0ad      	beq.n	8016e44 <_printf_i+0x160>
 8016ee8:	6823      	ldr	r3, [r4, #0]
 8016eea:	079b      	lsls	r3, r3, #30
 8016eec:	d413      	bmi.n	8016f16 <_printf_i+0x232>
 8016eee:	68e0      	ldr	r0, [r4, #12]
 8016ef0:	9b03      	ldr	r3, [sp, #12]
 8016ef2:	4298      	cmp	r0, r3
 8016ef4:	bfb8      	it	lt
 8016ef6:	4618      	movlt	r0, r3
 8016ef8:	e7a6      	b.n	8016e48 <_printf_i+0x164>
 8016efa:	2301      	movs	r3, #1
 8016efc:	4632      	mov	r2, r6
 8016efe:	4649      	mov	r1, r9
 8016f00:	4640      	mov	r0, r8
 8016f02:	47d0      	blx	sl
 8016f04:	3001      	adds	r0, #1
 8016f06:	d09d      	beq.n	8016e44 <_printf_i+0x160>
 8016f08:	3501      	adds	r5, #1
 8016f0a:	68e3      	ldr	r3, [r4, #12]
 8016f0c:	9903      	ldr	r1, [sp, #12]
 8016f0e:	1a5b      	subs	r3, r3, r1
 8016f10:	42ab      	cmp	r3, r5
 8016f12:	dcf2      	bgt.n	8016efa <_printf_i+0x216>
 8016f14:	e7eb      	b.n	8016eee <_printf_i+0x20a>
 8016f16:	2500      	movs	r5, #0
 8016f18:	f104 0619 	add.w	r6, r4, #25
 8016f1c:	e7f5      	b.n	8016f0a <_printf_i+0x226>
 8016f1e:	bf00      	nop
 8016f20:	08017ec1 	.word	0x08017ec1
 8016f24:	08017ed2 	.word	0x08017ed2

08016f28 <__sflush_r>:
 8016f28:	898a      	ldrh	r2, [r1, #12]
 8016f2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f2e:	4605      	mov	r5, r0
 8016f30:	0710      	lsls	r0, r2, #28
 8016f32:	460c      	mov	r4, r1
 8016f34:	d458      	bmi.n	8016fe8 <__sflush_r+0xc0>
 8016f36:	684b      	ldr	r3, [r1, #4]
 8016f38:	2b00      	cmp	r3, #0
 8016f3a:	dc05      	bgt.n	8016f48 <__sflush_r+0x20>
 8016f3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	dc02      	bgt.n	8016f48 <__sflush_r+0x20>
 8016f42:	2000      	movs	r0, #0
 8016f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016f4a:	2e00      	cmp	r6, #0
 8016f4c:	d0f9      	beq.n	8016f42 <__sflush_r+0x1a>
 8016f4e:	2300      	movs	r3, #0
 8016f50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016f54:	682f      	ldr	r7, [r5, #0]
 8016f56:	6a21      	ldr	r1, [r4, #32]
 8016f58:	602b      	str	r3, [r5, #0]
 8016f5a:	d032      	beq.n	8016fc2 <__sflush_r+0x9a>
 8016f5c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016f5e:	89a3      	ldrh	r3, [r4, #12]
 8016f60:	075a      	lsls	r2, r3, #29
 8016f62:	d505      	bpl.n	8016f70 <__sflush_r+0x48>
 8016f64:	6863      	ldr	r3, [r4, #4]
 8016f66:	1ac0      	subs	r0, r0, r3
 8016f68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016f6a:	b10b      	cbz	r3, 8016f70 <__sflush_r+0x48>
 8016f6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016f6e:	1ac0      	subs	r0, r0, r3
 8016f70:	2300      	movs	r3, #0
 8016f72:	4602      	mov	r2, r0
 8016f74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016f76:	6a21      	ldr	r1, [r4, #32]
 8016f78:	4628      	mov	r0, r5
 8016f7a:	47b0      	blx	r6
 8016f7c:	1c43      	adds	r3, r0, #1
 8016f7e:	89a3      	ldrh	r3, [r4, #12]
 8016f80:	d106      	bne.n	8016f90 <__sflush_r+0x68>
 8016f82:	6829      	ldr	r1, [r5, #0]
 8016f84:	291d      	cmp	r1, #29
 8016f86:	d82b      	bhi.n	8016fe0 <__sflush_r+0xb8>
 8016f88:	4a29      	ldr	r2, [pc, #164]	; (8017030 <__sflush_r+0x108>)
 8016f8a:	410a      	asrs	r2, r1
 8016f8c:	07d6      	lsls	r6, r2, #31
 8016f8e:	d427      	bmi.n	8016fe0 <__sflush_r+0xb8>
 8016f90:	2200      	movs	r2, #0
 8016f92:	6062      	str	r2, [r4, #4]
 8016f94:	04d9      	lsls	r1, r3, #19
 8016f96:	6922      	ldr	r2, [r4, #16]
 8016f98:	6022      	str	r2, [r4, #0]
 8016f9a:	d504      	bpl.n	8016fa6 <__sflush_r+0x7e>
 8016f9c:	1c42      	adds	r2, r0, #1
 8016f9e:	d101      	bne.n	8016fa4 <__sflush_r+0x7c>
 8016fa0:	682b      	ldr	r3, [r5, #0]
 8016fa2:	b903      	cbnz	r3, 8016fa6 <__sflush_r+0x7e>
 8016fa4:	6560      	str	r0, [r4, #84]	; 0x54
 8016fa6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016fa8:	602f      	str	r7, [r5, #0]
 8016faa:	2900      	cmp	r1, #0
 8016fac:	d0c9      	beq.n	8016f42 <__sflush_r+0x1a>
 8016fae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016fb2:	4299      	cmp	r1, r3
 8016fb4:	d002      	beq.n	8016fbc <__sflush_r+0x94>
 8016fb6:	4628      	mov	r0, r5
 8016fb8:	f7ff fb36 	bl	8016628 <_free_r>
 8016fbc:	2000      	movs	r0, #0
 8016fbe:	6360      	str	r0, [r4, #52]	; 0x34
 8016fc0:	e7c0      	b.n	8016f44 <__sflush_r+0x1c>
 8016fc2:	2301      	movs	r3, #1
 8016fc4:	4628      	mov	r0, r5
 8016fc6:	47b0      	blx	r6
 8016fc8:	1c41      	adds	r1, r0, #1
 8016fca:	d1c8      	bne.n	8016f5e <__sflush_r+0x36>
 8016fcc:	682b      	ldr	r3, [r5, #0]
 8016fce:	2b00      	cmp	r3, #0
 8016fd0:	d0c5      	beq.n	8016f5e <__sflush_r+0x36>
 8016fd2:	2b1d      	cmp	r3, #29
 8016fd4:	d001      	beq.n	8016fda <__sflush_r+0xb2>
 8016fd6:	2b16      	cmp	r3, #22
 8016fd8:	d101      	bne.n	8016fde <__sflush_r+0xb6>
 8016fda:	602f      	str	r7, [r5, #0]
 8016fdc:	e7b1      	b.n	8016f42 <__sflush_r+0x1a>
 8016fde:	89a3      	ldrh	r3, [r4, #12]
 8016fe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016fe4:	81a3      	strh	r3, [r4, #12]
 8016fe6:	e7ad      	b.n	8016f44 <__sflush_r+0x1c>
 8016fe8:	690f      	ldr	r7, [r1, #16]
 8016fea:	2f00      	cmp	r7, #0
 8016fec:	d0a9      	beq.n	8016f42 <__sflush_r+0x1a>
 8016fee:	0793      	lsls	r3, r2, #30
 8016ff0:	680e      	ldr	r6, [r1, #0]
 8016ff2:	bf08      	it	eq
 8016ff4:	694b      	ldreq	r3, [r1, #20]
 8016ff6:	600f      	str	r7, [r1, #0]
 8016ff8:	bf18      	it	ne
 8016ffa:	2300      	movne	r3, #0
 8016ffc:	eba6 0807 	sub.w	r8, r6, r7
 8017000:	608b      	str	r3, [r1, #8]
 8017002:	f1b8 0f00 	cmp.w	r8, #0
 8017006:	dd9c      	ble.n	8016f42 <__sflush_r+0x1a>
 8017008:	6a21      	ldr	r1, [r4, #32]
 801700a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801700c:	4643      	mov	r3, r8
 801700e:	463a      	mov	r2, r7
 8017010:	4628      	mov	r0, r5
 8017012:	47b0      	blx	r6
 8017014:	2800      	cmp	r0, #0
 8017016:	dc06      	bgt.n	8017026 <__sflush_r+0xfe>
 8017018:	89a3      	ldrh	r3, [r4, #12]
 801701a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801701e:	81a3      	strh	r3, [r4, #12]
 8017020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017024:	e78e      	b.n	8016f44 <__sflush_r+0x1c>
 8017026:	4407      	add	r7, r0
 8017028:	eba8 0800 	sub.w	r8, r8, r0
 801702c:	e7e9      	b.n	8017002 <__sflush_r+0xda>
 801702e:	bf00      	nop
 8017030:	dfbffffe 	.word	0xdfbffffe

08017034 <_fflush_r>:
 8017034:	b538      	push	{r3, r4, r5, lr}
 8017036:	690b      	ldr	r3, [r1, #16]
 8017038:	4605      	mov	r5, r0
 801703a:	460c      	mov	r4, r1
 801703c:	b913      	cbnz	r3, 8017044 <_fflush_r+0x10>
 801703e:	2500      	movs	r5, #0
 8017040:	4628      	mov	r0, r5
 8017042:	bd38      	pop	{r3, r4, r5, pc}
 8017044:	b118      	cbz	r0, 801704e <_fflush_r+0x1a>
 8017046:	6a03      	ldr	r3, [r0, #32]
 8017048:	b90b      	cbnz	r3, 801704e <_fflush_r+0x1a>
 801704a:	f7ff f87f 	bl	801614c <__sinit>
 801704e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017052:	2b00      	cmp	r3, #0
 8017054:	d0f3      	beq.n	801703e <_fflush_r+0xa>
 8017056:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017058:	07d0      	lsls	r0, r2, #31
 801705a:	d404      	bmi.n	8017066 <_fflush_r+0x32>
 801705c:	0599      	lsls	r1, r3, #22
 801705e:	d402      	bmi.n	8017066 <_fflush_r+0x32>
 8017060:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017062:	f7ff fa9f 	bl	80165a4 <__retarget_lock_acquire_recursive>
 8017066:	4628      	mov	r0, r5
 8017068:	4621      	mov	r1, r4
 801706a:	f7ff ff5d 	bl	8016f28 <__sflush_r>
 801706e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017070:	07da      	lsls	r2, r3, #31
 8017072:	4605      	mov	r5, r0
 8017074:	d4e4      	bmi.n	8017040 <_fflush_r+0xc>
 8017076:	89a3      	ldrh	r3, [r4, #12]
 8017078:	059b      	lsls	r3, r3, #22
 801707a:	d4e1      	bmi.n	8017040 <_fflush_r+0xc>
 801707c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801707e:	f7ff fa92 	bl	80165a6 <__retarget_lock_release_recursive>
 8017082:	e7dd      	b.n	8017040 <_fflush_r+0xc>

08017084 <fiprintf>:
 8017084:	b40e      	push	{r1, r2, r3}
 8017086:	b503      	push	{r0, r1, lr}
 8017088:	4601      	mov	r1, r0
 801708a:	ab03      	add	r3, sp, #12
 801708c:	4805      	ldr	r0, [pc, #20]	; (80170a4 <fiprintf+0x20>)
 801708e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017092:	6800      	ldr	r0, [r0, #0]
 8017094:	9301      	str	r3, [sp, #4]
 8017096:	f7ff fc9d 	bl	80169d4 <_vfiprintf_r>
 801709a:	b002      	add	sp, #8
 801709c:	f85d eb04 	ldr.w	lr, [sp], #4
 80170a0:	b003      	add	sp, #12
 80170a2:	4770      	bx	lr
 80170a4:	200000d8 	.word	0x200000d8

080170a8 <__swbuf_r>:
 80170a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170aa:	460e      	mov	r6, r1
 80170ac:	4614      	mov	r4, r2
 80170ae:	4605      	mov	r5, r0
 80170b0:	b118      	cbz	r0, 80170ba <__swbuf_r+0x12>
 80170b2:	6a03      	ldr	r3, [r0, #32]
 80170b4:	b90b      	cbnz	r3, 80170ba <__swbuf_r+0x12>
 80170b6:	f7ff f849 	bl	801614c <__sinit>
 80170ba:	69a3      	ldr	r3, [r4, #24]
 80170bc:	60a3      	str	r3, [r4, #8]
 80170be:	89a3      	ldrh	r3, [r4, #12]
 80170c0:	071a      	lsls	r2, r3, #28
 80170c2:	d525      	bpl.n	8017110 <__swbuf_r+0x68>
 80170c4:	6923      	ldr	r3, [r4, #16]
 80170c6:	b31b      	cbz	r3, 8017110 <__swbuf_r+0x68>
 80170c8:	6823      	ldr	r3, [r4, #0]
 80170ca:	6922      	ldr	r2, [r4, #16]
 80170cc:	1a98      	subs	r0, r3, r2
 80170ce:	6963      	ldr	r3, [r4, #20]
 80170d0:	b2f6      	uxtb	r6, r6
 80170d2:	4283      	cmp	r3, r0
 80170d4:	4637      	mov	r7, r6
 80170d6:	dc04      	bgt.n	80170e2 <__swbuf_r+0x3a>
 80170d8:	4621      	mov	r1, r4
 80170da:	4628      	mov	r0, r5
 80170dc:	f7ff ffaa 	bl	8017034 <_fflush_r>
 80170e0:	b9e0      	cbnz	r0, 801711c <__swbuf_r+0x74>
 80170e2:	68a3      	ldr	r3, [r4, #8]
 80170e4:	3b01      	subs	r3, #1
 80170e6:	60a3      	str	r3, [r4, #8]
 80170e8:	6823      	ldr	r3, [r4, #0]
 80170ea:	1c5a      	adds	r2, r3, #1
 80170ec:	6022      	str	r2, [r4, #0]
 80170ee:	701e      	strb	r6, [r3, #0]
 80170f0:	6962      	ldr	r2, [r4, #20]
 80170f2:	1c43      	adds	r3, r0, #1
 80170f4:	429a      	cmp	r2, r3
 80170f6:	d004      	beq.n	8017102 <__swbuf_r+0x5a>
 80170f8:	89a3      	ldrh	r3, [r4, #12]
 80170fa:	07db      	lsls	r3, r3, #31
 80170fc:	d506      	bpl.n	801710c <__swbuf_r+0x64>
 80170fe:	2e0a      	cmp	r6, #10
 8017100:	d104      	bne.n	801710c <__swbuf_r+0x64>
 8017102:	4621      	mov	r1, r4
 8017104:	4628      	mov	r0, r5
 8017106:	f7ff ff95 	bl	8017034 <_fflush_r>
 801710a:	b938      	cbnz	r0, 801711c <__swbuf_r+0x74>
 801710c:	4638      	mov	r0, r7
 801710e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017110:	4621      	mov	r1, r4
 8017112:	4628      	mov	r0, r5
 8017114:	f000 f806 	bl	8017124 <__swsetup_r>
 8017118:	2800      	cmp	r0, #0
 801711a:	d0d5      	beq.n	80170c8 <__swbuf_r+0x20>
 801711c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8017120:	e7f4      	b.n	801710c <__swbuf_r+0x64>
	...

08017124 <__swsetup_r>:
 8017124:	b538      	push	{r3, r4, r5, lr}
 8017126:	4b2a      	ldr	r3, [pc, #168]	; (80171d0 <__swsetup_r+0xac>)
 8017128:	4605      	mov	r5, r0
 801712a:	6818      	ldr	r0, [r3, #0]
 801712c:	460c      	mov	r4, r1
 801712e:	b118      	cbz	r0, 8017138 <__swsetup_r+0x14>
 8017130:	6a03      	ldr	r3, [r0, #32]
 8017132:	b90b      	cbnz	r3, 8017138 <__swsetup_r+0x14>
 8017134:	f7ff f80a 	bl	801614c <__sinit>
 8017138:	89a3      	ldrh	r3, [r4, #12]
 801713a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801713e:	0718      	lsls	r0, r3, #28
 8017140:	d422      	bmi.n	8017188 <__swsetup_r+0x64>
 8017142:	06d9      	lsls	r1, r3, #27
 8017144:	d407      	bmi.n	8017156 <__swsetup_r+0x32>
 8017146:	2309      	movs	r3, #9
 8017148:	602b      	str	r3, [r5, #0]
 801714a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801714e:	81a3      	strh	r3, [r4, #12]
 8017150:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017154:	e034      	b.n	80171c0 <__swsetup_r+0x9c>
 8017156:	0758      	lsls	r0, r3, #29
 8017158:	d512      	bpl.n	8017180 <__swsetup_r+0x5c>
 801715a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801715c:	b141      	cbz	r1, 8017170 <__swsetup_r+0x4c>
 801715e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017162:	4299      	cmp	r1, r3
 8017164:	d002      	beq.n	801716c <__swsetup_r+0x48>
 8017166:	4628      	mov	r0, r5
 8017168:	f7ff fa5e 	bl	8016628 <_free_r>
 801716c:	2300      	movs	r3, #0
 801716e:	6363      	str	r3, [r4, #52]	; 0x34
 8017170:	89a3      	ldrh	r3, [r4, #12]
 8017172:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017176:	81a3      	strh	r3, [r4, #12]
 8017178:	2300      	movs	r3, #0
 801717a:	6063      	str	r3, [r4, #4]
 801717c:	6923      	ldr	r3, [r4, #16]
 801717e:	6023      	str	r3, [r4, #0]
 8017180:	89a3      	ldrh	r3, [r4, #12]
 8017182:	f043 0308 	orr.w	r3, r3, #8
 8017186:	81a3      	strh	r3, [r4, #12]
 8017188:	6923      	ldr	r3, [r4, #16]
 801718a:	b94b      	cbnz	r3, 80171a0 <__swsetup_r+0x7c>
 801718c:	89a3      	ldrh	r3, [r4, #12]
 801718e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017192:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017196:	d003      	beq.n	80171a0 <__swsetup_r+0x7c>
 8017198:	4621      	mov	r1, r4
 801719a:	4628      	mov	r0, r5
 801719c:	f000 f861 	bl	8017262 <__smakebuf_r>
 80171a0:	89a0      	ldrh	r0, [r4, #12]
 80171a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80171a6:	f010 0301 	ands.w	r3, r0, #1
 80171aa:	d00a      	beq.n	80171c2 <__swsetup_r+0x9e>
 80171ac:	2300      	movs	r3, #0
 80171ae:	60a3      	str	r3, [r4, #8]
 80171b0:	6963      	ldr	r3, [r4, #20]
 80171b2:	425b      	negs	r3, r3
 80171b4:	61a3      	str	r3, [r4, #24]
 80171b6:	6923      	ldr	r3, [r4, #16]
 80171b8:	b943      	cbnz	r3, 80171cc <__swsetup_r+0xa8>
 80171ba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80171be:	d1c4      	bne.n	801714a <__swsetup_r+0x26>
 80171c0:	bd38      	pop	{r3, r4, r5, pc}
 80171c2:	0781      	lsls	r1, r0, #30
 80171c4:	bf58      	it	pl
 80171c6:	6963      	ldrpl	r3, [r4, #20]
 80171c8:	60a3      	str	r3, [r4, #8]
 80171ca:	e7f4      	b.n	80171b6 <__swsetup_r+0x92>
 80171cc:	2000      	movs	r0, #0
 80171ce:	e7f7      	b.n	80171c0 <__swsetup_r+0x9c>
 80171d0:	200000d8 	.word	0x200000d8

080171d4 <memmove>:
 80171d4:	4288      	cmp	r0, r1
 80171d6:	b510      	push	{r4, lr}
 80171d8:	eb01 0402 	add.w	r4, r1, r2
 80171dc:	d902      	bls.n	80171e4 <memmove+0x10>
 80171de:	4284      	cmp	r4, r0
 80171e0:	4623      	mov	r3, r4
 80171e2:	d807      	bhi.n	80171f4 <memmove+0x20>
 80171e4:	1e43      	subs	r3, r0, #1
 80171e6:	42a1      	cmp	r1, r4
 80171e8:	d008      	beq.n	80171fc <memmove+0x28>
 80171ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80171ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80171f2:	e7f8      	b.n	80171e6 <memmove+0x12>
 80171f4:	4402      	add	r2, r0
 80171f6:	4601      	mov	r1, r0
 80171f8:	428a      	cmp	r2, r1
 80171fa:	d100      	bne.n	80171fe <memmove+0x2a>
 80171fc:	bd10      	pop	{r4, pc}
 80171fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017202:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017206:	e7f7      	b.n	80171f8 <memmove+0x24>

08017208 <abort>:
 8017208:	b508      	push	{r3, lr}
 801720a:	2006      	movs	r0, #6
 801720c:	f000 f88e 	bl	801732c <raise>
 8017210:	2001      	movs	r0, #1
 8017212:	f7ec fa91 	bl	8003738 <_exit>

08017216 <__swhatbuf_r>:
 8017216:	b570      	push	{r4, r5, r6, lr}
 8017218:	460c      	mov	r4, r1
 801721a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801721e:	2900      	cmp	r1, #0
 8017220:	b096      	sub	sp, #88	; 0x58
 8017222:	4615      	mov	r5, r2
 8017224:	461e      	mov	r6, r3
 8017226:	da0d      	bge.n	8017244 <__swhatbuf_r+0x2e>
 8017228:	89a3      	ldrh	r3, [r4, #12]
 801722a:	f013 0f80 	tst.w	r3, #128	; 0x80
 801722e:	f04f 0100 	mov.w	r1, #0
 8017232:	bf0c      	ite	eq
 8017234:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8017238:	2340      	movne	r3, #64	; 0x40
 801723a:	2000      	movs	r0, #0
 801723c:	6031      	str	r1, [r6, #0]
 801723e:	602b      	str	r3, [r5, #0]
 8017240:	b016      	add	sp, #88	; 0x58
 8017242:	bd70      	pop	{r4, r5, r6, pc}
 8017244:	466a      	mov	r2, sp
 8017246:	f000 f879 	bl	801733c <_fstat_r>
 801724a:	2800      	cmp	r0, #0
 801724c:	dbec      	blt.n	8017228 <__swhatbuf_r+0x12>
 801724e:	9901      	ldr	r1, [sp, #4]
 8017250:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8017254:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8017258:	4259      	negs	r1, r3
 801725a:	4159      	adcs	r1, r3
 801725c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017260:	e7eb      	b.n	801723a <__swhatbuf_r+0x24>

08017262 <__smakebuf_r>:
 8017262:	898b      	ldrh	r3, [r1, #12]
 8017264:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017266:	079d      	lsls	r5, r3, #30
 8017268:	4606      	mov	r6, r0
 801726a:	460c      	mov	r4, r1
 801726c:	d507      	bpl.n	801727e <__smakebuf_r+0x1c>
 801726e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017272:	6023      	str	r3, [r4, #0]
 8017274:	6123      	str	r3, [r4, #16]
 8017276:	2301      	movs	r3, #1
 8017278:	6163      	str	r3, [r4, #20]
 801727a:	b002      	add	sp, #8
 801727c:	bd70      	pop	{r4, r5, r6, pc}
 801727e:	ab01      	add	r3, sp, #4
 8017280:	466a      	mov	r2, sp
 8017282:	f7ff ffc8 	bl	8017216 <__swhatbuf_r>
 8017286:	9900      	ldr	r1, [sp, #0]
 8017288:	4605      	mov	r5, r0
 801728a:	4630      	mov	r0, r6
 801728c:	f7fe fd38 	bl	8015d00 <_malloc_r>
 8017290:	b948      	cbnz	r0, 80172a6 <__smakebuf_r+0x44>
 8017292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017296:	059a      	lsls	r2, r3, #22
 8017298:	d4ef      	bmi.n	801727a <__smakebuf_r+0x18>
 801729a:	f023 0303 	bic.w	r3, r3, #3
 801729e:	f043 0302 	orr.w	r3, r3, #2
 80172a2:	81a3      	strh	r3, [r4, #12]
 80172a4:	e7e3      	b.n	801726e <__smakebuf_r+0xc>
 80172a6:	89a3      	ldrh	r3, [r4, #12]
 80172a8:	6020      	str	r0, [r4, #0]
 80172aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80172ae:	81a3      	strh	r3, [r4, #12]
 80172b0:	9b00      	ldr	r3, [sp, #0]
 80172b2:	6163      	str	r3, [r4, #20]
 80172b4:	9b01      	ldr	r3, [sp, #4]
 80172b6:	6120      	str	r0, [r4, #16]
 80172b8:	b15b      	cbz	r3, 80172d2 <__smakebuf_r+0x70>
 80172ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80172be:	4630      	mov	r0, r6
 80172c0:	f000 f84e 	bl	8017360 <_isatty_r>
 80172c4:	b128      	cbz	r0, 80172d2 <__smakebuf_r+0x70>
 80172c6:	89a3      	ldrh	r3, [r4, #12]
 80172c8:	f023 0303 	bic.w	r3, r3, #3
 80172cc:	f043 0301 	orr.w	r3, r3, #1
 80172d0:	81a3      	strh	r3, [r4, #12]
 80172d2:	89a3      	ldrh	r3, [r4, #12]
 80172d4:	431d      	orrs	r5, r3
 80172d6:	81a5      	strh	r5, [r4, #12]
 80172d8:	e7cf      	b.n	801727a <__smakebuf_r+0x18>

080172da <_raise_r>:
 80172da:	291f      	cmp	r1, #31
 80172dc:	b538      	push	{r3, r4, r5, lr}
 80172de:	4604      	mov	r4, r0
 80172e0:	460d      	mov	r5, r1
 80172e2:	d904      	bls.n	80172ee <_raise_r+0x14>
 80172e4:	2316      	movs	r3, #22
 80172e6:	6003      	str	r3, [r0, #0]
 80172e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80172ec:	bd38      	pop	{r3, r4, r5, pc}
 80172ee:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80172f0:	b112      	cbz	r2, 80172f8 <_raise_r+0x1e>
 80172f2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80172f6:	b94b      	cbnz	r3, 801730c <_raise_r+0x32>
 80172f8:	4620      	mov	r0, r4
 80172fa:	f000 f853 	bl	80173a4 <_getpid_r>
 80172fe:	462a      	mov	r2, r5
 8017300:	4601      	mov	r1, r0
 8017302:	4620      	mov	r0, r4
 8017304:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017308:	f000 b83a 	b.w	8017380 <_kill_r>
 801730c:	2b01      	cmp	r3, #1
 801730e:	d00a      	beq.n	8017326 <_raise_r+0x4c>
 8017310:	1c59      	adds	r1, r3, #1
 8017312:	d103      	bne.n	801731c <_raise_r+0x42>
 8017314:	2316      	movs	r3, #22
 8017316:	6003      	str	r3, [r0, #0]
 8017318:	2001      	movs	r0, #1
 801731a:	e7e7      	b.n	80172ec <_raise_r+0x12>
 801731c:	2400      	movs	r4, #0
 801731e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017322:	4628      	mov	r0, r5
 8017324:	4798      	blx	r3
 8017326:	2000      	movs	r0, #0
 8017328:	e7e0      	b.n	80172ec <_raise_r+0x12>
	...

0801732c <raise>:
 801732c:	4b02      	ldr	r3, [pc, #8]	; (8017338 <raise+0xc>)
 801732e:	4601      	mov	r1, r0
 8017330:	6818      	ldr	r0, [r3, #0]
 8017332:	f7ff bfd2 	b.w	80172da <_raise_r>
 8017336:	bf00      	nop
 8017338:	200000d8 	.word	0x200000d8

0801733c <_fstat_r>:
 801733c:	b538      	push	{r3, r4, r5, lr}
 801733e:	4d07      	ldr	r5, [pc, #28]	; (801735c <_fstat_r+0x20>)
 8017340:	2300      	movs	r3, #0
 8017342:	4604      	mov	r4, r0
 8017344:	4608      	mov	r0, r1
 8017346:	4611      	mov	r1, r2
 8017348:	602b      	str	r3, [r5, #0]
 801734a:	f7ec fa44 	bl	80037d6 <_fstat>
 801734e:	1c43      	adds	r3, r0, #1
 8017350:	d102      	bne.n	8017358 <_fstat_r+0x1c>
 8017352:	682b      	ldr	r3, [r5, #0]
 8017354:	b103      	cbz	r3, 8017358 <_fstat_r+0x1c>
 8017356:	6023      	str	r3, [r4, #0]
 8017358:	bd38      	pop	{r3, r4, r5, pc}
 801735a:	bf00      	nop
 801735c:	200095ec 	.word	0x200095ec

08017360 <_isatty_r>:
 8017360:	b538      	push	{r3, r4, r5, lr}
 8017362:	4d06      	ldr	r5, [pc, #24]	; (801737c <_isatty_r+0x1c>)
 8017364:	2300      	movs	r3, #0
 8017366:	4604      	mov	r4, r0
 8017368:	4608      	mov	r0, r1
 801736a:	602b      	str	r3, [r5, #0]
 801736c:	f7ec fa43 	bl	80037f6 <_isatty>
 8017370:	1c43      	adds	r3, r0, #1
 8017372:	d102      	bne.n	801737a <_isatty_r+0x1a>
 8017374:	682b      	ldr	r3, [r5, #0]
 8017376:	b103      	cbz	r3, 801737a <_isatty_r+0x1a>
 8017378:	6023      	str	r3, [r4, #0]
 801737a:	bd38      	pop	{r3, r4, r5, pc}
 801737c:	200095ec 	.word	0x200095ec

08017380 <_kill_r>:
 8017380:	b538      	push	{r3, r4, r5, lr}
 8017382:	4d07      	ldr	r5, [pc, #28]	; (80173a0 <_kill_r+0x20>)
 8017384:	2300      	movs	r3, #0
 8017386:	4604      	mov	r4, r0
 8017388:	4608      	mov	r0, r1
 801738a:	4611      	mov	r1, r2
 801738c:	602b      	str	r3, [r5, #0]
 801738e:	f7ec f9c3 	bl	8003718 <_kill>
 8017392:	1c43      	adds	r3, r0, #1
 8017394:	d102      	bne.n	801739c <_kill_r+0x1c>
 8017396:	682b      	ldr	r3, [r5, #0]
 8017398:	b103      	cbz	r3, 801739c <_kill_r+0x1c>
 801739a:	6023      	str	r3, [r4, #0]
 801739c:	bd38      	pop	{r3, r4, r5, pc}
 801739e:	bf00      	nop
 80173a0:	200095ec 	.word	0x200095ec

080173a4 <_getpid_r>:
 80173a4:	f7ec b9b0 	b.w	8003708 <_getpid>

080173a8 <_init>:
 80173a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80173aa:	bf00      	nop
 80173ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80173ae:	bc08      	pop	{r3}
 80173b0:	469e      	mov	lr, r3
 80173b2:	4770      	bx	lr

080173b4 <_fini>:
 80173b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80173b6:	bf00      	nop
 80173b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80173ba:	bc08      	pop	{r3}
 80173bc:	469e      	mov	lr, r3
 80173be:	4770      	bx	lr
