
base_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001833c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d24  080184e0  080184e0  000284e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019204  08019204  000300dc  2**0
                  CONTENTS
  4 .ARM          00000008  08019204  08019204  00029204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801920c  0801920c  000300dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801920c  0801920c  0002920c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019210  08019210  00029210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  08019214  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e748  200000e0  080192f0  000300e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000e828  080192f0  0003e828  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300dc  2**0
                  CONTENTS, READONLY
 12 .comment      0000009c  00000000  00000000  0003010c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000c8e66  00000000  00000000  000301a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00015594  00000000  00000000  000f900e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003ef8  00000000  00000000  0010e5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016d7  00000000  00000000  001124a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025a69  00000000  00000000  00113b77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0006d110  00000000  00000000  001395e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b71c7  00000000  00000000  001a66f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000fb24  00000000  00000000  0025d8b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  0026d3dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0004dc10  00000000  00000000  0026d469  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00008d50  00000000  00000000  002bb079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000e0 	.word	0x200000e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080184c4 	.word	0x080184c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000e4 	.word	0x200000e4
 80001dc:	080184c4 	.word	0x080184c4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2f>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b64:	bf24      	itt	cs
 8000b66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6e:	d90d      	bls.n	8000b8c <__aeabi_d2f+0x30>
 8000b70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b84:	bf08      	it	eq
 8000b86:	f020 0001 	biceq.w	r0, r0, #1
 8000b8a:	4770      	bx	lr
 8000b8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b90:	d121      	bne.n	8000bd6 <__aeabi_d2f+0x7a>
 8000b92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b96:	bfbc      	itt	lt
 8000b98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	4770      	bxlt	lr
 8000b9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba6:	f1c2 0218 	rsb	r2, r2, #24
 8000baa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	f040 0001 	orrne.w	r0, r0, #1
 8000bbc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc8:	ea40 000c 	orr.w	r0, r0, ip
 8000bcc:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd4:	e7cc      	b.n	8000b70 <__aeabi_d2f+0x14>
 8000bd6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bda:	d107      	bne.n	8000bec <__aeabi_d2f+0x90>
 8000bdc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be0:	bf1e      	ittt	ne
 8000be2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bea:	4770      	bxne	lr
 8000bec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <__aeabi_ldivmod>:
 8000bfc:	b97b      	cbnz	r3, 8000c1e <__aeabi_ldivmod+0x22>
 8000bfe:	b972      	cbnz	r2, 8000c1e <__aeabi_ldivmod+0x22>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bfbe      	ittt	lt
 8000c04:	2000      	movlt	r0, #0
 8000c06:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c0a:	e006      	blt.n	8000c1a <__aeabi_ldivmod+0x1e>
 8000c0c:	bf08      	it	eq
 8000c0e:	2800      	cmpeq	r0, #0
 8000c10:	bf1c      	itt	ne
 8000c12:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c16:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1a:	f000 b9bb 	b.w	8000f94 <__aeabi_idiv0>
 8000c1e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c22:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c26:	2900      	cmp	r1, #0
 8000c28:	db09      	blt.n	8000c3e <__aeabi_ldivmod+0x42>
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	db1a      	blt.n	8000c64 <__aeabi_ldivmod+0x68>
 8000c2e:	f000 f84d 	bl	8000ccc <__udivmoddi4>
 8000c32:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c3a:	b004      	add	sp, #16
 8000c3c:	4770      	bx	lr
 8000c3e:	4240      	negs	r0, r0
 8000c40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	db1b      	blt.n	8000c80 <__aeabi_ldivmod+0x84>
 8000c48:	f000 f840 	bl	8000ccc <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4240      	negs	r0, r0
 8000c58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c5c:	4252      	negs	r2, r2
 8000c5e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c62:	4770      	bx	lr
 8000c64:	4252      	negs	r2, r2
 8000c66:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c6a:	f000 f82f 	bl	8000ccc <__udivmoddi4>
 8000c6e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c76:	b004      	add	sp, #16
 8000c78:	4240      	negs	r0, r0
 8000c7a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7e:	4770      	bx	lr
 8000c80:	4252      	negs	r2, r2
 8000c82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c86:	f000 f821 	bl	8000ccc <__udivmoddi4>
 8000c8a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c92:	b004      	add	sp, #16
 8000c94:	4252      	negs	r2, r2
 8000c96:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c9a:	4770      	bx	lr

08000c9c <__aeabi_uldivmod>:
 8000c9c:	b953      	cbnz	r3, 8000cb4 <__aeabi_uldivmod+0x18>
 8000c9e:	b94a      	cbnz	r2, 8000cb4 <__aeabi_uldivmod+0x18>
 8000ca0:	2900      	cmp	r1, #0
 8000ca2:	bf08      	it	eq
 8000ca4:	2800      	cmpeq	r0, #0
 8000ca6:	bf1c      	itt	ne
 8000ca8:	f04f 31ff 	movne.w	r1, #4294967295
 8000cac:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb0:	f000 b970 	b.w	8000f94 <__aeabi_idiv0>
 8000cb4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cbc:	f000 f806 	bl	8000ccc <__udivmoddi4>
 8000cc0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc8:	b004      	add	sp, #16
 8000cca:	4770      	bx	lr

08000ccc <__udivmoddi4>:
 8000ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd0:	9e08      	ldr	r6, [sp, #32]
 8000cd2:	460d      	mov	r5, r1
 8000cd4:	4604      	mov	r4, r0
 8000cd6:	460f      	mov	r7, r1
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d14a      	bne.n	8000d72 <__udivmoddi4+0xa6>
 8000cdc:	428a      	cmp	r2, r1
 8000cde:	4694      	mov	ip, r2
 8000ce0:	d965      	bls.n	8000dae <__udivmoddi4+0xe2>
 8000ce2:	fab2 f382 	clz	r3, r2
 8000ce6:	b143      	cbz	r3, 8000cfa <__udivmoddi4+0x2e>
 8000ce8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cec:	f1c3 0220 	rsb	r2, r3, #32
 8000cf0:	409f      	lsls	r7, r3
 8000cf2:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf6:	4317      	orrs	r7, r2
 8000cf8:	409c      	lsls	r4, r3
 8000cfa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cfe:	fa1f f58c 	uxth.w	r5, ip
 8000d02:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d06:	0c22      	lsrs	r2, r4, #16
 8000d08:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d0c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d10:	fb01 f005 	mul.w	r0, r1, r5
 8000d14:	4290      	cmp	r0, r2
 8000d16:	d90a      	bls.n	8000d2e <__udivmoddi4+0x62>
 8000d18:	eb1c 0202 	adds.w	r2, ip, r2
 8000d1c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d20:	f080 811c 	bcs.w	8000f5c <__udivmoddi4+0x290>
 8000d24:	4290      	cmp	r0, r2
 8000d26:	f240 8119 	bls.w	8000f5c <__udivmoddi4+0x290>
 8000d2a:	3902      	subs	r1, #2
 8000d2c:	4462      	add	r2, ip
 8000d2e:	1a12      	subs	r2, r2, r0
 8000d30:	b2a4      	uxth	r4, r4
 8000d32:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d36:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d3a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3e:	fb00 f505 	mul.w	r5, r0, r5
 8000d42:	42a5      	cmp	r5, r4
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x90>
 8000d46:	eb1c 0404 	adds.w	r4, ip, r4
 8000d4a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d4e:	f080 8107 	bcs.w	8000f60 <__udivmoddi4+0x294>
 8000d52:	42a5      	cmp	r5, r4
 8000d54:	f240 8104 	bls.w	8000f60 <__udivmoddi4+0x294>
 8000d58:	4464      	add	r4, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d60:	1b64      	subs	r4, r4, r5
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11e      	cbz	r6, 8000d6e <__udivmoddi4+0xa2>
 8000d66:	40dc      	lsrs	r4, r3
 8000d68:	2300      	movs	r3, #0
 8000d6a:	e9c6 4300 	strd	r4, r3, [r6]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d908      	bls.n	8000d88 <__udivmoddi4+0xbc>
 8000d76:	2e00      	cmp	r6, #0
 8000d78:	f000 80ed 	beq.w	8000f56 <__udivmoddi4+0x28a>
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	e9c6 0500 	strd	r0, r5, [r6]
 8000d82:	4608      	mov	r0, r1
 8000d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d88:	fab3 f183 	clz	r1, r3
 8000d8c:	2900      	cmp	r1, #0
 8000d8e:	d149      	bne.n	8000e24 <__udivmoddi4+0x158>
 8000d90:	42ab      	cmp	r3, r5
 8000d92:	d302      	bcc.n	8000d9a <__udivmoddi4+0xce>
 8000d94:	4282      	cmp	r2, r0
 8000d96:	f200 80f8 	bhi.w	8000f8a <__udivmoddi4+0x2be>
 8000d9a:	1a84      	subs	r4, r0, r2
 8000d9c:	eb65 0203 	sbc.w	r2, r5, r3
 8000da0:	2001      	movs	r0, #1
 8000da2:	4617      	mov	r7, r2
 8000da4:	2e00      	cmp	r6, #0
 8000da6:	d0e2      	beq.n	8000d6e <__udivmoddi4+0xa2>
 8000da8:	e9c6 4700 	strd	r4, r7, [r6]
 8000dac:	e7df      	b.n	8000d6e <__udivmoddi4+0xa2>
 8000dae:	b902      	cbnz	r2, 8000db2 <__udivmoddi4+0xe6>
 8000db0:	deff      	udf	#255	; 0xff
 8000db2:	fab2 f382 	clz	r3, r2
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	f040 8090 	bne.w	8000edc <__udivmoddi4+0x210>
 8000dbc:	1a8a      	subs	r2, r1, r2
 8000dbe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc2:	fa1f fe8c 	uxth.w	lr, ip
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dcc:	fb07 2015 	mls	r0, r7, r5, r2
 8000dd0:	0c22      	lsrs	r2, r4, #16
 8000dd2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dd6:	fb0e f005 	mul.w	r0, lr, r5
 8000dda:	4290      	cmp	r0, r2
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x124>
 8000dde:	eb1c 0202 	adds.w	r2, ip, r2
 8000de2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x122>
 8000de8:	4290      	cmp	r0, r2
 8000dea:	f200 80cb 	bhi.w	8000f84 <__udivmoddi4+0x2b8>
 8000dee:	4645      	mov	r5, r8
 8000df0:	1a12      	subs	r2, r2, r0
 8000df2:	b2a4      	uxth	r4, r4
 8000df4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000df8:	fb07 2210 	mls	r2, r7, r0, r2
 8000dfc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e00:	fb0e fe00 	mul.w	lr, lr, r0
 8000e04:	45a6      	cmp	lr, r4
 8000e06:	d908      	bls.n	8000e1a <__udivmoddi4+0x14e>
 8000e08:	eb1c 0404 	adds.w	r4, ip, r4
 8000e0c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e10:	d202      	bcs.n	8000e18 <__udivmoddi4+0x14c>
 8000e12:	45a6      	cmp	lr, r4
 8000e14:	f200 80bb 	bhi.w	8000f8e <__udivmoddi4+0x2c2>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	eba4 040e 	sub.w	r4, r4, lr
 8000e1e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e22:	e79f      	b.n	8000d64 <__udivmoddi4+0x98>
 8000e24:	f1c1 0720 	rsb	r7, r1, #32
 8000e28:	408b      	lsls	r3, r1
 8000e2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e32:	fa05 f401 	lsl.w	r4, r5, r1
 8000e36:	fa20 f307 	lsr.w	r3, r0, r7
 8000e3a:	40fd      	lsrs	r5, r7
 8000e3c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e40:	4323      	orrs	r3, r4
 8000e42:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e46:	fa1f fe8c 	uxth.w	lr, ip
 8000e4a:	fb09 5518 	mls	r5, r9, r8, r5
 8000e4e:	0c1c      	lsrs	r4, r3, #16
 8000e50:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e54:	fb08 f50e 	mul.w	r5, r8, lr
 8000e58:	42a5      	cmp	r5, r4
 8000e5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5e:	fa00 f001 	lsl.w	r0, r0, r1
 8000e62:	d90b      	bls.n	8000e7c <__udivmoddi4+0x1b0>
 8000e64:	eb1c 0404 	adds.w	r4, ip, r4
 8000e68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e6c:	f080 8088 	bcs.w	8000f80 <__udivmoddi4+0x2b4>
 8000e70:	42a5      	cmp	r5, r4
 8000e72:	f240 8085 	bls.w	8000f80 <__udivmoddi4+0x2b4>
 8000e76:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7a:	4464      	add	r4, ip
 8000e7c:	1b64      	subs	r4, r4, r5
 8000e7e:	b29d      	uxth	r5, r3
 8000e80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e84:	fb09 4413 	mls	r4, r9, r3, r4
 8000e88:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e8c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e90:	45a6      	cmp	lr, r4
 8000e92:	d908      	bls.n	8000ea6 <__udivmoddi4+0x1da>
 8000e94:	eb1c 0404 	adds.w	r4, ip, r4
 8000e98:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e9c:	d26c      	bcs.n	8000f78 <__udivmoddi4+0x2ac>
 8000e9e:	45a6      	cmp	lr, r4
 8000ea0:	d96a      	bls.n	8000f78 <__udivmoddi4+0x2ac>
 8000ea2:	3b02      	subs	r3, #2
 8000ea4:	4464      	add	r4, ip
 8000ea6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000eaa:	fba3 9502 	umull	r9, r5, r3, r2
 8000eae:	eba4 040e 	sub.w	r4, r4, lr
 8000eb2:	42ac      	cmp	r4, r5
 8000eb4:	46c8      	mov	r8, r9
 8000eb6:	46ae      	mov	lr, r5
 8000eb8:	d356      	bcc.n	8000f68 <__udivmoddi4+0x29c>
 8000eba:	d053      	beq.n	8000f64 <__udivmoddi4+0x298>
 8000ebc:	b156      	cbz	r6, 8000ed4 <__udivmoddi4+0x208>
 8000ebe:	ebb0 0208 	subs.w	r2, r0, r8
 8000ec2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ec6:	fa04 f707 	lsl.w	r7, r4, r7
 8000eca:	40ca      	lsrs	r2, r1
 8000ecc:	40cc      	lsrs	r4, r1
 8000ece:	4317      	orrs	r7, r2
 8000ed0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000edc:	f1c3 0120 	rsb	r1, r3, #32
 8000ee0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ee4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ee8:	fa25 f101 	lsr.w	r1, r5, r1
 8000eec:	409d      	lsls	r5, r3
 8000eee:	432a      	orrs	r2, r5
 8000ef0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef4:	fa1f fe8c 	uxth.w	lr, ip
 8000ef8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000efc:	fb07 1510 	mls	r5, r7, r0, r1
 8000f00:	0c11      	lsrs	r1, r2, #16
 8000f02:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f06:	fb00 f50e 	mul.w	r5, r0, lr
 8000f0a:	428d      	cmp	r5, r1
 8000f0c:	fa04 f403 	lsl.w	r4, r4, r3
 8000f10:	d908      	bls.n	8000f24 <__udivmoddi4+0x258>
 8000f12:	eb1c 0101 	adds.w	r1, ip, r1
 8000f16:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1a:	d22f      	bcs.n	8000f7c <__udivmoddi4+0x2b0>
 8000f1c:	428d      	cmp	r5, r1
 8000f1e:	d92d      	bls.n	8000f7c <__udivmoddi4+0x2b0>
 8000f20:	3802      	subs	r0, #2
 8000f22:	4461      	add	r1, ip
 8000f24:	1b49      	subs	r1, r1, r5
 8000f26:	b292      	uxth	r2, r2
 8000f28:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f2c:	fb07 1115 	mls	r1, r7, r5, r1
 8000f30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f34:	fb05 f10e 	mul.w	r1, r5, lr
 8000f38:	4291      	cmp	r1, r2
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x282>
 8000f3c:	eb1c 0202 	adds.w	r2, ip, r2
 8000f40:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f44:	d216      	bcs.n	8000f74 <__udivmoddi4+0x2a8>
 8000f46:	4291      	cmp	r1, r2
 8000f48:	d914      	bls.n	8000f74 <__udivmoddi4+0x2a8>
 8000f4a:	3d02      	subs	r5, #2
 8000f4c:	4462      	add	r2, ip
 8000f4e:	1a52      	subs	r2, r2, r1
 8000f50:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f54:	e738      	b.n	8000dc8 <__udivmoddi4+0xfc>
 8000f56:	4631      	mov	r1, r6
 8000f58:	4630      	mov	r0, r6
 8000f5a:	e708      	b.n	8000d6e <__udivmoddi4+0xa2>
 8000f5c:	4639      	mov	r1, r7
 8000f5e:	e6e6      	b.n	8000d2e <__udivmoddi4+0x62>
 8000f60:	4610      	mov	r0, r2
 8000f62:	e6fb      	b.n	8000d5c <__udivmoddi4+0x90>
 8000f64:	4548      	cmp	r0, r9
 8000f66:	d2a9      	bcs.n	8000ebc <__udivmoddi4+0x1f0>
 8000f68:	ebb9 0802 	subs.w	r8, r9, r2
 8000f6c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f70:	3b01      	subs	r3, #1
 8000f72:	e7a3      	b.n	8000ebc <__udivmoddi4+0x1f0>
 8000f74:	4645      	mov	r5, r8
 8000f76:	e7ea      	b.n	8000f4e <__udivmoddi4+0x282>
 8000f78:	462b      	mov	r3, r5
 8000f7a:	e794      	b.n	8000ea6 <__udivmoddi4+0x1da>
 8000f7c:	4640      	mov	r0, r8
 8000f7e:	e7d1      	b.n	8000f24 <__udivmoddi4+0x258>
 8000f80:	46d0      	mov	r8, sl
 8000f82:	e77b      	b.n	8000e7c <__udivmoddi4+0x1b0>
 8000f84:	3d02      	subs	r5, #2
 8000f86:	4462      	add	r2, ip
 8000f88:	e732      	b.n	8000df0 <__udivmoddi4+0x124>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e70a      	b.n	8000da4 <__udivmoddi4+0xd8>
 8000f8e:	4464      	add	r4, ip
 8000f90:	3802      	subs	r0, #2
 8000f92:	e742      	b.n	8000e1a <__udivmoddi4+0x14e>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <writeReg>:
uint8_t performSingleRefCalibration(uint8_t vhv_init_byte);
//---------------------------------------------------------
// I2C communication Functions
//---------------------------------------------------------
// Write an 8-bit register
void writeReg(uint8_t reg, uint8_t value) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	460a      	mov	r2, r1
 8000fa2:	71fb      	strb	r3, [r7, #7]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	71bb      	strb	r3, [r7, #6]
	i2c1_WriteRegBuffer(0x53,reg,&value,1);
 8000fa8:	1dba      	adds	r2, r7, #6
 8000faa:	79f9      	ldrb	r1, [r7, #7]
 8000fac:	2301      	movs	r3, #1
 8000fae:	2053      	movs	r0, #83	; 0x53
 8000fb0:	f000 fe90 	bl	8001cd4 <i2c1_WriteRegBuffer>

}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <writeReg16Bit>:

// Write a 16-bit register
void writeReg16Bit(uint8_t reg, uint16_t value){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	460a      	mov	r2, r1
 8000fc6:	71fb      	strb	r3, [r7, #7]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	80bb      	strh	r3, [r7, #4]
	uint8_t tab[2];
	tab[0]= ((value >> 8));
 8000fcc:	88bb      	ldrh	r3, [r7, #4]
 8000fce:	0a1b      	lsrs	r3, r3, #8
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	733b      	strb	r3, [r7, #12]
	tab[1] = ((value ) & 0xFF);
 8000fd6:	88bb      	ldrh	r3, [r7, #4]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	737b      	strb	r3, [r7, #13]
	i2c1_WriteRegBuffer(0x53,reg,tab,2);
 8000fdc:	f107 020c 	add.w	r2, r7, #12
 8000fe0:	79f9      	ldrb	r1, [r7, #7]
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	2053      	movs	r0, #83	; 0x53
 8000fe6:	f000 fe75 	bl	8001cd4 <i2c1_WriteRegBuffer>

}
 8000fea:	bf00      	nop
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <readReg>:
		tab[0] = ((value ) & 0xFF);
		i2c1_WriteRegBuffer(0x53,reg,tab,4);
}

// Read an 8-bit register
uint8_t readReg(uint8_t reg) {
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b084      	sub	sp, #16
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	71fb      	strb	r3, [r7, #7]
  	uint8_t value=0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	73fb      	strb	r3, [r7, #15]
  	i2c1_ReadRegBuffer(0x53,reg,&value,1);
 8001000:	f107 020f 	add.w	r2, r7, #15
 8001004:	79f9      	ldrb	r1, [r7, #7]
 8001006:	2301      	movs	r3, #1
 8001008:	2053      	movs	r0, #83	; 0x53
 800100a:	f000 fe31 	bl	8001c70 <i2c1_ReadRegBuffer>
  	return value;
 800100e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <initVL53L0X>:
// (VL53L0X_PerformRefSpadManagement()), since the API user manual says that it
// is performed by ST on the bare modules; it seems like that should work well
// enough unless a cover glass is added.
// If io_2v8 (optional) is true or not given, the sensor is configured for 2V8
// mode.
uint8_t initVL53L0X( ){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  // VL53L0X_DataInit() begin

  // "Set I2C standard mode"
  writeReg(0x88, 0x00);
 800101c:	2100      	movs	r1, #0
 800101e:	2088      	movs	r0, #136	; 0x88
 8001020:	f7ff ffba 	bl	8000f98 <writeReg>

  writeReg(0x80, 0x01);
 8001024:	2101      	movs	r1, #1
 8001026:	2080      	movs	r0, #128	; 0x80
 8001028:	f7ff ffb6 	bl	8000f98 <writeReg>
  writeReg(0xFF, 0x01);
 800102c:	2101      	movs	r1, #1
 800102e:	20ff      	movs	r0, #255	; 0xff
 8001030:	f7ff ffb2 	bl	8000f98 <writeReg>
  writeReg(0x00, 0x00);
 8001034:	2100      	movs	r1, #0
 8001036:	2000      	movs	r0, #0
 8001038:	f7ff ffae 	bl	8000f98 <writeReg>
  g_stopVariable = readReg(0x91);
 800103c:	2091      	movs	r0, #145	; 0x91
 800103e:	f7ff ffd8 	bl	8000ff2 <readReg>
 8001042:	4603      	mov	r3, r0
 8001044:	461a      	mov	r2, r3
 8001046:	4bd5      	ldr	r3, [pc, #852]	; (800139c <initVL53L0X+0x384>)
 8001048:	701a      	strb	r2, [r3, #0]
  writeReg(0x00, 0x01);
 800104a:	2101      	movs	r1, #1
 800104c:	2000      	movs	r0, #0
 800104e:	f7ff ffa3 	bl	8000f98 <writeReg>
  writeReg(0xFF, 0x00);
 8001052:	2100      	movs	r1, #0
 8001054:	20ff      	movs	r0, #255	; 0xff
 8001056:	f7ff ff9f 	bl	8000f98 <writeReg>
  writeReg(0x80, 0x00);
 800105a:	2100      	movs	r1, #0
 800105c:	2080      	movs	r0, #128	; 0x80
 800105e:	f7ff ff9b 	bl	8000f98 <writeReg>

  // disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(MSRC_CONFIG_CONTROL, readReg(MSRC_CONFIG_CONTROL) | 0x12);
 8001062:	2060      	movs	r0, #96	; 0x60
 8001064:	f7ff ffc5 	bl	8000ff2 <readReg>
 8001068:	4603      	mov	r3, r0
 800106a:	f043 0312 	orr.w	r3, r3, #18
 800106e:	b2db      	uxtb	r3, r3
 8001070:	4619      	mov	r1, r3
 8001072:	2060      	movs	r0, #96	; 0x60
 8001074:	f7ff ff90 	bl	8000f98 <writeReg>

  // set final range signal rate limit to 0.25 MCPS (million counts per second)
  setSignalRateLimit(0.25);
 8001078:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 800107c:	f000 f990 	bl	80013a0 <setSignalRateLimit>

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 8001080:	21ff      	movs	r1, #255	; 0xff
 8001082:	2001      	movs	r0, #1
 8001084:	f7ff ff88 	bl	8000f98 <writeReg>
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there

  // -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)

  writeReg(0xFF, 0x01);
 8001088:	2101      	movs	r1, #1
 800108a:	20ff      	movs	r0, #255	; 0xff
 800108c:	f7ff ff84 	bl	8000f98 <writeReg>
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 8001090:	2100      	movs	r1, #0
 8001092:	204f      	movs	r0, #79	; 0x4f
 8001094:	f7ff ff80 	bl	8000f98 <writeReg>
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 8001098:	212c      	movs	r1, #44	; 0x2c
 800109a:	204e      	movs	r0, #78	; 0x4e
 800109c:	f7ff ff7c 	bl	8000f98 <writeReg>
  writeReg(0xFF, 0x00);
 80010a0:	2100      	movs	r1, #0
 80010a2:	20ff      	movs	r0, #255	; 0xff
 80010a4:	f7ff ff78 	bl	8000f98 <writeReg>
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 80010a8:	21b4      	movs	r1, #180	; 0xb4
 80010aa:	20b6      	movs	r0, #182	; 0xb6
 80010ac:	f7ff ff74 	bl	8000f98 <writeReg>
  // -- VL53L0X_set_reference_spads() end

  // -- VL53L0X_load_tuning_settings() begin
  // DefaultTuningSettings from vl53l0x_tuning.h

  writeReg(0xFF, 0x01);
 80010b0:	2101      	movs	r1, #1
 80010b2:	20ff      	movs	r0, #255	; 0xff
 80010b4:	f7ff ff70 	bl	8000f98 <writeReg>
  writeReg(0x00, 0x00);
 80010b8:	2100      	movs	r1, #0
 80010ba:	2000      	movs	r0, #0
 80010bc:	f7ff ff6c 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x00);
 80010c0:	2100      	movs	r1, #0
 80010c2:	20ff      	movs	r0, #255	; 0xff
 80010c4:	f7ff ff68 	bl	8000f98 <writeReg>
  writeReg(0x09, 0x00);
 80010c8:	2100      	movs	r1, #0
 80010ca:	2009      	movs	r0, #9
 80010cc:	f7ff ff64 	bl	8000f98 <writeReg>
  writeReg(0x10, 0x00);
 80010d0:	2100      	movs	r1, #0
 80010d2:	2010      	movs	r0, #16
 80010d4:	f7ff ff60 	bl	8000f98 <writeReg>
  writeReg(0x11, 0x00);
 80010d8:	2100      	movs	r1, #0
 80010da:	2011      	movs	r0, #17
 80010dc:	f7ff ff5c 	bl	8000f98 <writeReg>

  writeReg(0x24, 0x01);
 80010e0:	2101      	movs	r1, #1
 80010e2:	2024      	movs	r0, #36	; 0x24
 80010e4:	f7ff ff58 	bl	8000f98 <writeReg>
  writeReg(0x25, 0xFF);
 80010e8:	21ff      	movs	r1, #255	; 0xff
 80010ea:	2025      	movs	r0, #37	; 0x25
 80010ec:	f7ff ff54 	bl	8000f98 <writeReg>
  writeReg(0x75, 0x00);
 80010f0:	2100      	movs	r1, #0
 80010f2:	2075      	movs	r0, #117	; 0x75
 80010f4:	f7ff ff50 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x01);
 80010f8:	2101      	movs	r1, #1
 80010fa:	20ff      	movs	r0, #255	; 0xff
 80010fc:	f7ff ff4c 	bl	8000f98 <writeReg>
  writeReg(0x4E, 0x2C);
 8001100:	212c      	movs	r1, #44	; 0x2c
 8001102:	204e      	movs	r0, #78	; 0x4e
 8001104:	f7ff ff48 	bl	8000f98 <writeReg>
  writeReg(0x48, 0x00);
 8001108:	2100      	movs	r1, #0
 800110a:	2048      	movs	r0, #72	; 0x48
 800110c:	f7ff ff44 	bl	8000f98 <writeReg>
  writeReg(0x30, 0x20);
 8001110:	2120      	movs	r1, #32
 8001112:	2030      	movs	r0, #48	; 0x30
 8001114:	f7ff ff40 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x00);
 8001118:	2100      	movs	r1, #0
 800111a:	20ff      	movs	r0, #255	; 0xff
 800111c:	f7ff ff3c 	bl	8000f98 <writeReg>
  writeReg(0x30, 0x09);
 8001120:	2109      	movs	r1, #9
 8001122:	2030      	movs	r0, #48	; 0x30
 8001124:	f7ff ff38 	bl	8000f98 <writeReg>
  writeReg(0x54, 0x00);
 8001128:	2100      	movs	r1, #0
 800112a:	2054      	movs	r0, #84	; 0x54
 800112c:	f7ff ff34 	bl	8000f98 <writeReg>
  writeReg(0x31, 0x04);
 8001130:	2104      	movs	r1, #4
 8001132:	2031      	movs	r0, #49	; 0x31
 8001134:	f7ff ff30 	bl	8000f98 <writeReg>
  writeReg(0x32, 0x03);
 8001138:	2103      	movs	r1, #3
 800113a:	2032      	movs	r0, #50	; 0x32
 800113c:	f7ff ff2c 	bl	8000f98 <writeReg>
  writeReg(0x40, 0x83);
 8001140:	2183      	movs	r1, #131	; 0x83
 8001142:	2040      	movs	r0, #64	; 0x40
 8001144:	f7ff ff28 	bl	8000f98 <writeReg>
  writeReg(0x46, 0x25);
 8001148:	2125      	movs	r1, #37	; 0x25
 800114a:	2046      	movs	r0, #70	; 0x46
 800114c:	f7ff ff24 	bl	8000f98 <writeReg>
  writeReg(0x60, 0x00);
 8001150:	2100      	movs	r1, #0
 8001152:	2060      	movs	r0, #96	; 0x60
 8001154:	f7ff ff20 	bl	8000f98 <writeReg>
  writeReg(0x27, 0x00);
 8001158:	2100      	movs	r1, #0
 800115a:	2027      	movs	r0, #39	; 0x27
 800115c:	f7ff ff1c 	bl	8000f98 <writeReg>
  writeReg(0x50, 0x06);
 8001160:	2106      	movs	r1, #6
 8001162:	2050      	movs	r0, #80	; 0x50
 8001164:	f7ff ff18 	bl	8000f98 <writeReg>
  writeReg(0x51, 0x00);
 8001168:	2100      	movs	r1, #0
 800116a:	2051      	movs	r0, #81	; 0x51
 800116c:	f7ff ff14 	bl	8000f98 <writeReg>
  writeReg(0x52, 0x96);
 8001170:	2196      	movs	r1, #150	; 0x96
 8001172:	2052      	movs	r0, #82	; 0x52
 8001174:	f7ff ff10 	bl	8000f98 <writeReg>
  writeReg(0x56, 0x08);
 8001178:	2108      	movs	r1, #8
 800117a:	2056      	movs	r0, #86	; 0x56
 800117c:	f7ff ff0c 	bl	8000f98 <writeReg>
  writeReg(0x57, 0x30);
 8001180:	2130      	movs	r1, #48	; 0x30
 8001182:	2057      	movs	r0, #87	; 0x57
 8001184:	f7ff ff08 	bl	8000f98 <writeReg>
  writeReg(0x61, 0x00);
 8001188:	2100      	movs	r1, #0
 800118a:	2061      	movs	r0, #97	; 0x61
 800118c:	f7ff ff04 	bl	8000f98 <writeReg>
  writeReg(0x62, 0x00);
 8001190:	2100      	movs	r1, #0
 8001192:	2062      	movs	r0, #98	; 0x62
 8001194:	f7ff ff00 	bl	8000f98 <writeReg>
  writeReg(0x64, 0x00);
 8001198:	2100      	movs	r1, #0
 800119a:	2064      	movs	r0, #100	; 0x64
 800119c:	f7ff fefc 	bl	8000f98 <writeReg>
  writeReg(0x65, 0x00);
 80011a0:	2100      	movs	r1, #0
 80011a2:	2065      	movs	r0, #101	; 0x65
 80011a4:	f7ff fef8 	bl	8000f98 <writeReg>
  writeReg(0x66, 0xA0);
 80011a8:	21a0      	movs	r1, #160	; 0xa0
 80011aa:	2066      	movs	r0, #102	; 0x66
 80011ac:	f7ff fef4 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x01);
 80011b0:	2101      	movs	r1, #1
 80011b2:	20ff      	movs	r0, #255	; 0xff
 80011b4:	f7ff fef0 	bl	8000f98 <writeReg>
  writeReg(0x22, 0x32);
 80011b8:	2132      	movs	r1, #50	; 0x32
 80011ba:	2022      	movs	r0, #34	; 0x22
 80011bc:	f7ff feec 	bl	8000f98 <writeReg>
  writeReg(0x47, 0x14);
 80011c0:	2114      	movs	r1, #20
 80011c2:	2047      	movs	r0, #71	; 0x47
 80011c4:	f7ff fee8 	bl	8000f98 <writeReg>
  writeReg(0x49, 0xFF);
 80011c8:	21ff      	movs	r1, #255	; 0xff
 80011ca:	2049      	movs	r0, #73	; 0x49
 80011cc:	f7ff fee4 	bl	8000f98 <writeReg>
  writeReg(0x4A, 0x00);
 80011d0:	2100      	movs	r1, #0
 80011d2:	204a      	movs	r0, #74	; 0x4a
 80011d4:	f7ff fee0 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x00);
 80011d8:	2100      	movs	r1, #0
 80011da:	20ff      	movs	r0, #255	; 0xff
 80011dc:	f7ff fedc 	bl	8000f98 <writeReg>
  writeReg(0x7A, 0x0A);
 80011e0:	210a      	movs	r1, #10
 80011e2:	207a      	movs	r0, #122	; 0x7a
 80011e4:	f7ff fed8 	bl	8000f98 <writeReg>
  writeReg(0x7B, 0x00);
 80011e8:	2100      	movs	r1, #0
 80011ea:	207b      	movs	r0, #123	; 0x7b
 80011ec:	f7ff fed4 	bl	8000f98 <writeReg>
  writeReg(0x78, 0x21);
 80011f0:	2121      	movs	r1, #33	; 0x21
 80011f2:	2078      	movs	r0, #120	; 0x78
 80011f4:	f7ff fed0 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x01);
 80011f8:	2101      	movs	r1, #1
 80011fa:	20ff      	movs	r0, #255	; 0xff
 80011fc:	f7ff fecc 	bl	8000f98 <writeReg>
  writeReg(0x23, 0x34);
 8001200:	2134      	movs	r1, #52	; 0x34
 8001202:	2023      	movs	r0, #35	; 0x23
 8001204:	f7ff fec8 	bl	8000f98 <writeReg>
  writeReg(0x42, 0x00);
 8001208:	2100      	movs	r1, #0
 800120a:	2042      	movs	r0, #66	; 0x42
 800120c:	f7ff fec4 	bl	8000f98 <writeReg>
  writeReg(0x44, 0xFF);
 8001210:	21ff      	movs	r1, #255	; 0xff
 8001212:	2044      	movs	r0, #68	; 0x44
 8001214:	f7ff fec0 	bl	8000f98 <writeReg>
  writeReg(0x45, 0x26);
 8001218:	2126      	movs	r1, #38	; 0x26
 800121a:	2045      	movs	r0, #69	; 0x45
 800121c:	f7ff febc 	bl	8000f98 <writeReg>
  writeReg(0x46, 0x05);
 8001220:	2105      	movs	r1, #5
 8001222:	2046      	movs	r0, #70	; 0x46
 8001224:	f7ff feb8 	bl	8000f98 <writeReg>
  writeReg(0x40, 0x40);
 8001228:	2140      	movs	r1, #64	; 0x40
 800122a:	2040      	movs	r0, #64	; 0x40
 800122c:	f7ff feb4 	bl	8000f98 <writeReg>
  writeReg(0x0E, 0x06);
 8001230:	2106      	movs	r1, #6
 8001232:	200e      	movs	r0, #14
 8001234:	f7ff feb0 	bl	8000f98 <writeReg>
  writeReg(0x20, 0x1A);
 8001238:	211a      	movs	r1, #26
 800123a:	2020      	movs	r0, #32
 800123c:	f7ff feac 	bl	8000f98 <writeReg>
  writeReg(0x43, 0x40);
 8001240:	2140      	movs	r1, #64	; 0x40
 8001242:	2043      	movs	r0, #67	; 0x43
 8001244:	f7ff fea8 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x00);
 8001248:	2100      	movs	r1, #0
 800124a:	20ff      	movs	r0, #255	; 0xff
 800124c:	f7ff fea4 	bl	8000f98 <writeReg>
  writeReg(0x34, 0x03);
 8001250:	2103      	movs	r1, #3
 8001252:	2034      	movs	r0, #52	; 0x34
 8001254:	f7ff fea0 	bl	8000f98 <writeReg>
  writeReg(0x35, 0x44);
 8001258:	2144      	movs	r1, #68	; 0x44
 800125a:	2035      	movs	r0, #53	; 0x35
 800125c:	f7ff fe9c 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x01);
 8001260:	2101      	movs	r1, #1
 8001262:	20ff      	movs	r0, #255	; 0xff
 8001264:	f7ff fe98 	bl	8000f98 <writeReg>
  writeReg(0x31, 0x04);
 8001268:	2104      	movs	r1, #4
 800126a:	2031      	movs	r0, #49	; 0x31
 800126c:	f7ff fe94 	bl	8000f98 <writeReg>
  writeReg(0x4B, 0x09);
 8001270:	2109      	movs	r1, #9
 8001272:	204b      	movs	r0, #75	; 0x4b
 8001274:	f7ff fe90 	bl	8000f98 <writeReg>
  writeReg(0x4C, 0x05);
 8001278:	2105      	movs	r1, #5
 800127a:	204c      	movs	r0, #76	; 0x4c
 800127c:	f7ff fe8c 	bl	8000f98 <writeReg>
  writeReg(0x4D, 0x04);
 8001280:	2104      	movs	r1, #4
 8001282:	204d      	movs	r0, #77	; 0x4d
 8001284:	f7ff fe88 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x00);
 8001288:	2100      	movs	r1, #0
 800128a:	20ff      	movs	r0, #255	; 0xff
 800128c:	f7ff fe84 	bl	8000f98 <writeReg>
  writeReg(0x44, 0x00);
 8001290:	2100      	movs	r1, #0
 8001292:	2044      	movs	r0, #68	; 0x44
 8001294:	f7ff fe80 	bl	8000f98 <writeReg>
  writeReg(0x45, 0x20);
 8001298:	2120      	movs	r1, #32
 800129a:	2045      	movs	r0, #69	; 0x45
 800129c:	f7ff fe7c 	bl	8000f98 <writeReg>
  writeReg(0x47, 0x08);
 80012a0:	2108      	movs	r1, #8
 80012a2:	2047      	movs	r0, #71	; 0x47
 80012a4:	f7ff fe78 	bl	8000f98 <writeReg>
  writeReg(0x48, 0x28);
 80012a8:	2128      	movs	r1, #40	; 0x28
 80012aa:	2048      	movs	r0, #72	; 0x48
 80012ac:	f7ff fe74 	bl	8000f98 <writeReg>
  writeReg(0x67, 0x00);
 80012b0:	2100      	movs	r1, #0
 80012b2:	2067      	movs	r0, #103	; 0x67
 80012b4:	f7ff fe70 	bl	8000f98 <writeReg>
  writeReg(0x70, 0x04);
 80012b8:	2104      	movs	r1, #4
 80012ba:	2070      	movs	r0, #112	; 0x70
 80012bc:	f7ff fe6c 	bl	8000f98 <writeReg>
  writeReg(0x71, 0x01);
 80012c0:	2101      	movs	r1, #1
 80012c2:	2071      	movs	r0, #113	; 0x71
 80012c4:	f7ff fe68 	bl	8000f98 <writeReg>
  writeReg(0x72, 0xFE);
 80012c8:	21fe      	movs	r1, #254	; 0xfe
 80012ca:	2072      	movs	r0, #114	; 0x72
 80012cc:	f7ff fe64 	bl	8000f98 <writeReg>
  writeReg(0x76, 0x00);
 80012d0:	2100      	movs	r1, #0
 80012d2:	2076      	movs	r0, #118	; 0x76
 80012d4:	f7ff fe60 	bl	8000f98 <writeReg>
  writeReg(0x77, 0x00);
 80012d8:	2100      	movs	r1, #0
 80012da:	2077      	movs	r0, #119	; 0x77
 80012dc:	f7ff fe5c 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x01);
 80012e0:	2101      	movs	r1, #1
 80012e2:	20ff      	movs	r0, #255	; 0xff
 80012e4:	f7ff fe58 	bl	8000f98 <writeReg>
  writeReg(0x0D, 0x01);
 80012e8:	2101      	movs	r1, #1
 80012ea:	200d      	movs	r0, #13
 80012ec:	f7ff fe54 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x00);
 80012f0:	2100      	movs	r1, #0
 80012f2:	20ff      	movs	r0, #255	; 0xff
 80012f4:	f7ff fe50 	bl	8000f98 <writeReg>
  writeReg(0x80, 0x01);
 80012f8:	2101      	movs	r1, #1
 80012fa:	2080      	movs	r0, #128	; 0x80
 80012fc:	f7ff fe4c 	bl	8000f98 <writeReg>
  writeReg(0x01, 0xF8);
 8001300:	21f8      	movs	r1, #248	; 0xf8
 8001302:	2001      	movs	r0, #1
 8001304:	f7ff fe48 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x01);
 8001308:	2101      	movs	r1, #1
 800130a:	20ff      	movs	r0, #255	; 0xff
 800130c:	f7ff fe44 	bl	8000f98 <writeReg>
  writeReg(0x8E, 0x01);
 8001310:	2101      	movs	r1, #1
 8001312:	208e      	movs	r0, #142	; 0x8e
 8001314:	f7ff fe40 	bl	8000f98 <writeReg>
  writeReg(0x00, 0x01);
 8001318:	2101      	movs	r1, #1
 800131a:	2000      	movs	r0, #0
 800131c:	f7ff fe3c 	bl	8000f98 <writeReg>
  writeReg(0xFF, 0x00);
 8001320:	2100      	movs	r1, #0
 8001322:	20ff      	movs	r0, #255	; 0xff
 8001324:	f7ff fe38 	bl	8000f98 <writeReg>
  writeReg(0x80, 0x00);
 8001328:	2100      	movs	r1, #0
 800132a:	2080      	movs	r0, #128	; 0x80
 800132c:	f7ff fe34 	bl	8000f98 <writeReg>
  // -- VL53L0X_load_tuning_settings() end

  // "Set interrupt config to new sample ready"
  // -- VL53L0X_SetGpioConfig() begin

  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 8001330:	2104      	movs	r1, #4
 8001332:	200a      	movs	r0, #10
 8001334:	f7ff fe30 	bl	8000f98 <writeReg>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 8001338:	2084      	movs	r0, #132	; 0x84
 800133a:	f7ff fe5a 	bl	8000ff2 <readReg>
 800133e:	4603      	mov	r3, r0
 8001340:	f023 0310 	bic.w	r3, r3, #16
 8001344:	b2db      	uxtb	r3, r3
 8001346:	4619      	mov	r1, r3
 8001348:	2084      	movs	r0, #132	; 0x84
 800134a:	f7ff fe25 	bl	8000f98 <writeReg>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 800134e:	2101      	movs	r1, #1
 8001350:	200b      	movs	r0, #11
 8001352:	f7ff fe21 	bl	8000f98 <writeReg>
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 8001356:	21e8      	movs	r1, #232	; 0xe8
 8001358:	2001      	movs	r0, #1
 800135a:	f7ff fe1d 	bl	8000f98 <writeReg>

  // VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

  // -- VL53L0X_perform_vhv_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 800135e:	2101      	movs	r1, #1
 8001360:	2001      	movs	r0, #1
 8001362:	f7ff fe19 	bl	8000f98 <writeReg>
  if (performSingleRefCalibration(0x40)) { return false; }
 8001366:	2040      	movs	r0, #64	; 0x40
 8001368:	f000 f850 	bl	800140c <performSingleRefCalibration>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <initVL53L0X+0x35e>
 8001372:	2300      	movs	r3, #0
 8001374:	e010      	b.n	8001398 <initVL53L0X+0x380>

  // -- VL53L0X_perform_vhv_calibration() end

  // -- VL53L0X_perform_phase_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 8001376:	2102      	movs	r1, #2
 8001378:	2001      	movs	r0, #1
 800137a:	f7ff fe0d 	bl	8000f98 <writeReg>
  if (performSingleRefCalibration(0x00)) { return false; }
 800137e:	2000      	movs	r0, #0
 8001380:	f000 f844 	bl	800140c <performSingleRefCalibration>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <initVL53L0X+0x376>
 800138a:	2300      	movs	r3, #0
 800138c:	e004      	b.n	8001398 <initVL53L0X+0x380>

  // -- VL53L0X_perform_phase_calibration() end

  // "restore the previous Sequence Config"
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 800138e:	21e8      	movs	r1, #232	; 0xe8
 8001390:	2001      	movs	r0, #1
 8001392:	f7ff fe01 	bl	8000f98 <writeReg>

  // VL53L0X_PerformRefCalibration() end

  return 0;
 8001396:	2300      	movs	r3, #0
}
 8001398:	4618      	mov	r0, r3
 800139a:	bd80      	pop	{r7, pc}
 800139c:	200000fc 	.word	0x200000fc

080013a0 <setSignalRateLimit>:
// Setting a lower limit increases the potential range of the sensor but also
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
uint8_t setSignalRateLimit(float limit_Mcps)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	ed87 0a01 	vstr	s0, [r7, #4]
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 80013aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80013ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b6:	d40a      	bmi.n	80013ce <setSignalRateLimit+0x2e>
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff f8dd 	bl	8000578 <__aeabi_f2d>
 80013be:	a311      	add	r3, pc, #68	; (adr r3, 8001404 <setSignalRateLimit+0x64>)
 80013c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c4:	f7ff fbc0 	bl	8000b48 <__aeabi_dcmpgt>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <setSignalRateLimit+0x32>
 80013ce:	2300      	movs	r3, #0
 80013d0:	e00f      	b.n	80013f2 <setSignalRateLimit+0x52>

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 80013d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80013d6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001400 <setSignalRateLimit+0x60>
 80013da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013e2:	ee17 3a90 	vmov	r3, s15
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	4619      	mov	r1, r3
 80013ea:	2044      	movs	r0, #68	; 0x44
 80013ec:	f7ff fde6 	bl	8000fbc <writeReg16Bit>
  return 0;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	f3af 8000 	nop.w
 8001400:	43000000 	.word	0x43000000
 8001404:	0a3d70a4 	.word	0x0a3d70a4
 8001408:	407fffd7 	.word	0x407fffd7

0800140c <performSingleRefCalibration>:
}


// based on VL53L0X_perform_single_ref_calibration()
uint8_t performSingleRefCalibration(uint8_t vhv_init_byte)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	71fb      	strb	r3, [r7, #7]
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	b2db      	uxtb	r3, r3
 800141e:	4619      	mov	r1, r3
 8001420:	2000      	movs	r0, #0
 8001422:	f7ff fdb9 	bl	8000f98 <writeReg>



  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8001426:	2101      	movs	r1, #1
 8001428:	200b      	movs	r0, #11
 800142a:	f7ff fdb5 	bl	8000f98 <writeReg>

  writeReg(SYSRANGE_START, 0x00);
 800142e:	2100      	movs	r1, #0
 8001430:	2000      	movs	r0, #0
 8001432:	f7ff fdb1 	bl	8000f98 <writeReg>

  return 0;
 8001436:	2300      	movs	r3, #0
}
 8001438:	4618      	mov	r0, r3
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <captDistIR_Init>:
//=================================================================
//			ADC INIT FOR IR SENSOR SHARP GP2D12
//=================================================================

void  captDistIR_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
	adcHandle.Instance		= ADC1;
 8001444:	4b15      	ldr	r3, [pc, #84]	; (800149c <captDistIR_Init+0x5c>)
 8001446:	4a16      	ldr	r2, [pc, #88]	; (80014a0 <captDistIR_Init+0x60>)
 8001448:	601a      	str	r2, [r3, #0]

	adcHandle.Init.ClockPrescaler = ADC_CLOCKPRESCALER_PCLK_DIV2;
 800144a:	4b14      	ldr	r3, [pc, #80]	; (800149c <captDistIR_Init+0x5c>)
 800144c:	2200      	movs	r2, #0
 800144e:	605a      	str	r2, [r3, #4]
	adcHandle.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001450:	4b12      	ldr	r3, [pc, #72]	; (800149c <captDistIR_Init+0x5c>)
 8001452:	2200      	movs	r2, #0
 8001454:	60da      	str	r2, [r3, #12]
	adcHandle.Init.Resolution = ADC_RESOLUTION12b;
 8001456:	4b11      	ldr	r3, [pc, #68]	; (800149c <captDistIR_Init+0x5c>)
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
	// Don't do continuous conversions - do them on demand
	adcHandle.Init.ContinuousConvMode    = DISABLE;  // Continuous mode disabled to have only 1 conversion at each conversion trig
 800145c:	4b0f      	ldr	r3, [pc, #60]	; (800149c <captDistIR_Init+0x5c>)
 800145e:	2200      	movs	r2, #0
 8001460:	619a      	str	r2, [r3, #24]
	// Disable the scan conversion so we do one at a time */
	adcHandle.Init.ScanConvMode = DISABLE;
 8001462:	4b0e      	ldr	r3, [pc, #56]	; (800149c <captDistIR_Init+0x5c>)
 8001464:	2200      	movs	r2, #0
 8001466:	611a      	str	r2, [r3, #16]
	//Say how many channels would be used by the sequencer
	adcHandle.Init.NbrOfConversion = 2;
 8001468:	4b0c      	ldr	r3, [pc, #48]	; (800149c <captDistIR_Init+0x5c>)
 800146a:	2202      	movs	r2, #2
 800146c:	621a      	str	r2, [r3, #32]
	adcHandle.Init.DiscontinuousConvMode = DISABLE;  // Parameter discarded because sequencer is disabled
 800146e:	4b0b      	ldr	r3, [pc, #44]	; (800149c <captDistIR_Init+0x5c>)
 8001470:	2200      	movs	r2, #0
 8001472:	625a      	str	r2, [r3, #36]	; 0x24
	adcHandle.Init.NbrOfDiscConversion = 2;
 8001474:	4b09      	ldr	r3, [pc, #36]	; (800149c <captDistIR_Init+0x5c>)
 8001476:	2202      	movs	r2, #2
 8001478:	629a      	str	r2, [r3, #40]	; 0x28
	adcHandle.Init.ExternalTrigConvEdge =  ADC_EXTERNALTRIGCONVEDGE_NONE ;
 800147a:	4b08      	ldr	r3, [pc, #32]	; (800149c <captDistIR_Init+0x5c>)
 800147c:	2200      	movs	r2, #0
 800147e:	62da      	str	r2, [r3, #44]	; 0x2c
	//Start conversion by software, not an external trigger
	adcHandle.Init.ExternalTrigConv = 0;
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <captDistIR_Init+0x5c>)
 8001482:	2200      	movs	r2, #0
 8001484:	631a      	str	r2, [r3, #48]	; 0x30
	adcHandle.Init.DMAContinuousRequests = DISABLE;
 8001486:	4b05      	ldr	r3, [pc, #20]	; (800149c <captDistIR_Init+0x5c>)
 8001488:	2200      	movs	r2, #0
 800148a:	61da      	str	r2, [r3, #28]
	adcHandle.Init.EOCSelection = DISABLE;
 800148c:	4b03      	ldr	r3, [pc, #12]	; (800149c <captDistIR_Init+0x5c>)
 800148e:	2200      	movs	r2, #0
 8001490:	615a      	str	r2, [r3, #20]

	HAL_ADC_Init(&adcHandle);
 8001492:	4802      	ldr	r0, [pc, #8]	; (800149c <captDistIR_Init+0x5c>)
 8001494:	f002 fdda 	bl	800404c <HAL_ADC_Init>
}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20000100 	.word	0x20000100
 80014a0:	40012000 	.word	0x40012000

080014a4 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08a      	sub	sp, #40	; 0x28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80014b0:	f00a fbc4 	bl	800bc3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80014b4:	4b58      	ldr	r3, [pc, #352]	; (8001618 <pvPortMallocMicroROS+0x174>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d101      	bne.n	80014c0 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80014bc:	f000 f98c 	bl	80017d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80014c0:	4b56      	ldr	r3, [pc, #344]	; (800161c <pvPortMallocMicroROS+0x178>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4013      	ands	r3, r2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	f040 808e 	bne.w	80015ea <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d01d      	beq.n	8001510 <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80014d4:	2208      	movs	r2, #8
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4413      	add	r3, r2
 80014da:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d014      	beq.n	8001510 <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f023 0307 	bic.w	r3, r3, #7
 80014ec:	3308      	adds	r3, #8
 80014ee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d00a      	beq.n	8001510 <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80014fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014fe:	f383 8811 	msr	BASEPRI, r3
 8001502:	f3bf 8f6f 	isb	sy
 8001506:	f3bf 8f4f 	dsb	sy
 800150a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800150c:	bf00      	nop
 800150e:	e7fe      	b.n	800150e <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d069      	beq.n	80015ea <pvPortMallocMicroROS+0x146>
 8001516:	4b42      	ldr	r3, [pc, #264]	; (8001620 <pvPortMallocMicroROS+0x17c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	429a      	cmp	r2, r3
 800151e:	d864      	bhi.n	80015ea <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001520:	4b40      	ldr	r3, [pc, #256]	; (8001624 <pvPortMallocMicroROS+0x180>)
 8001522:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001524:	4b3f      	ldr	r3, [pc, #252]	; (8001624 <pvPortMallocMicroROS+0x180>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800152a:	e004      	b.n	8001536 <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 800152c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	429a      	cmp	r2, r3
 800153e:	d903      	bls.n	8001548 <pvPortMallocMicroROS+0xa4>
 8001540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d1f1      	bne.n	800152c <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001548:	4b33      	ldr	r3, [pc, #204]	; (8001618 <pvPortMallocMicroROS+0x174>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800154e:	429a      	cmp	r2, r3
 8001550:	d04b      	beq.n	80015ea <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001552:	6a3b      	ldr	r3, [r7, #32]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2208      	movs	r2, #8
 8001558:	4413      	add	r3, r2
 800155a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	6a3b      	ldr	r3, [r7, #32]
 8001562:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001566:	685a      	ldr	r2, [r3, #4]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	1ad2      	subs	r2, r2, r3
 800156c:	2308      	movs	r3, #8
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	429a      	cmp	r2, r3
 8001572:	d91f      	bls.n	80015b4 <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4413      	add	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	f003 0307 	and.w	r3, r3, #7
 8001582:	2b00      	cmp	r3, #0
 8001584:	d00a      	beq.n	800159c <pvPortMallocMicroROS+0xf8>
	__asm volatile
 8001586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800158a:	f383 8811 	msr	BASEPRI, r3
 800158e:	f3bf 8f6f 	isb	sy
 8001592:	f3bf 8f4f 	dsb	sy
 8001596:	613b      	str	r3, [r7, #16]
}
 8001598:	bf00      	nop
 800159a:	e7fe      	b.n	800159a <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800159c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	1ad2      	subs	r2, r2, r3
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80015a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80015ae:	69b8      	ldr	r0, [r7, #24]
 80015b0:	f000 f974 	bl	800189c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80015b4:	4b1a      	ldr	r3, [pc, #104]	; (8001620 <pvPortMallocMicroROS+0x17c>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	4a18      	ldr	r2, [pc, #96]	; (8001620 <pvPortMallocMicroROS+0x17c>)
 80015c0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80015c2:	4b17      	ldr	r3, [pc, #92]	; (8001620 <pvPortMallocMicroROS+0x17c>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	4b18      	ldr	r3, [pc, #96]	; (8001628 <pvPortMallocMicroROS+0x184>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d203      	bcs.n	80015d6 <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80015ce:	4b14      	ldr	r3, [pc, #80]	; (8001620 <pvPortMallocMicroROS+0x17c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a15      	ldr	r2, [pc, #84]	; (8001628 <pvPortMallocMicroROS+0x184>)
 80015d4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80015d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d8:	685a      	ldr	r2, [r3, #4]
 80015da:	4b10      	ldr	r3, [pc, #64]	; (800161c <pvPortMallocMicroROS+0x178>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	431a      	orrs	r2, r3
 80015e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80015e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80015ea:	f00a fb35 	bl	800bc58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	f003 0307 	and.w	r3, r3, #7
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d00a      	beq.n	800160e <pvPortMallocMicroROS+0x16a>
	__asm volatile
 80015f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015fc:	f383 8811 	msr	BASEPRI, r3
 8001600:	f3bf 8f6f 	isb	sy
 8001604:	f3bf 8f4f 	dsb	sy
 8001608:	60fb      	str	r3, [r7, #12]
}
 800160a:	bf00      	nop
 800160c:	e7fe      	b.n	800160c <pvPortMallocMicroROS+0x168>
	return pvReturn;
 800160e:	69fb      	ldr	r3, [r7, #28]
}
 8001610:	4618      	mov	r0, r3
 8001612:	3728      	adds	r7, #40	; 0x28
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	2000414c 	.word	0x2000414c
 800161c:	20004158 	.word	0x20004158
 8001620:	20004150 	.word	0x20004150
 8001624:	20004144 	.word	0x20004144
 8001628:	20004154 	.word	0x20004154

0800162c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d048      	beq.n	80016d0 <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800163e:	2308      	movs	r3, #8
 8001640:	425b      	negs	r3, r3
 8001642:	697a      	ldr	r2, [r7, #20]
 8001644:	4413      	add	r3, r2
 8001646:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	685a      	ldr	r2, [r3, #4]
 8001650:	4b21      	ldr	r3, [pc, #132]	; (80016d8 <vPortFreeMicroROS+0xac>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4013      	ands	r3, r2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d10a      	bne.n	8001670 <vPortFreeMicroROS+0x44>
	__asm volatile
 800165a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800165e:	f383 8811 	msr	BASEPRI, r3
 8001662:	f3bf 8f6f 	isb	sy
 8001666:	f3bf 8f4f 	dsb	sy
 800166a:	60fb      	str	r3, [r7, #12]
}
 800166c:	bf00      	nop
 800166e:	e7fe      	b.n	800166e <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d00a      	beq.n	800168e <vPortFreeMicroROS+0x62>
	__asm volatile
 8001678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800167c:	f383 8811 	msr	BASEPRI, r3
 8001680:	f3bf 8f6f 	isb	sy
 8001684:	f3bf 8f4f 	dsb	sy
 8001688:	60bb      	str	r3, [r7, #8]
}
 800168a:	bf00      	nop
 800168c:	e7fe      	b.n	800168c <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <vPortFreeMicroROS+0xac>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4013      	ands	r3, r2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d019      	beq.n	80016d0 <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d115      	bne.n	80016d0 <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <vPortFreeMicroROS+0xac>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	43db      	mvns	r3, r3
 80016ae:	401a      	ands	r2, r3
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80016b4:	f00a fac2 	bl	800bc3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	4b07      	ldr	r3, [pc, #28]	; (80016dc <vPortFreeMicroROS+0xb0>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4413      	add	r3, r2
 80016c2:	4a06      	ldr	r2, [pc, #24]	; (80016dc <vPortFreeMicroROS+0xb0>)
 80016c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80016c6:	6938      	ldr	r0, [r7, #16]
 80016c8:	f000 f8e8 	bl	800189c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80016cc:	f00a fac4 	bl	800bc58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80016d0:	bf00      	nop
 80016d2:	3718      	adds	r7, #24
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20004158 	.word	0x20004158
 80016dc:	20004150 	.word	0x20004150

080016e0 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80016e0:	b480      	push	{r7}
 80016e2:	b087      	sub	sp, #28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80016ec:	2308      	movs	r3, #8
 80016ee:	425b      	negs	r3, r3
 80016f0:	697a      	ldr	r2, [r7, #20]
 80016f2:	4413      	add	r3, r2
 80016f4:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	685a      	ldr	r2, [r3, #4]
 80016fe:	4b06      	ldr	r3, [pc, #24]	; (8001718 <getBlockSize+0x38>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	43db      	mvns	r3, r3
 8001704:	4013      	ands	r3, r2
 8001706:	60fb      	str	r3, [r7, #12]

	return count;
 8001708:	68fb      	ldr	r3, [r7, #12]
}
 800170a:	4618      	mov	r0, r3
 800170c:	371c      	adds	r7, #28
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	20004158 	.word	0x20004158

0800171c <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b088      	sub	sp, #32
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001726:	f00a fa89 	bl	800bc3c <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800172a:	6838      	ldr	r0, [r7, #0]
 800172c:	f7ff feba 	bl	80014a4 <pvPortMallocMicroROS>
 8001730:	6138      	str	r0, [r7, #16]

	uint8_t *puc = ( uint8_t * ) pv;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	60fb      	str	r3, [r7, #12]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001736:	2308      	movs	r3, #8
 8001738:	425b      	negs	r3, r3
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	4413      	add	r3, r2
 800173e:	60fb      	str	r3, [r7, #12]
	pxLink = ( void * ) puc;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	60bb      	str	r3, [r7, #8]


	char *in_src = (char*)pv;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	61fb      	str	r3, [r7, #28]
  	char *in_dest = (char*)newmem;
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	61bb      	str	r3, [r7, #24]
	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	685a      	ldr	r2, [r3, #4]
 8001750:	4b0e      	ldr	r3, [pc, #56]	; (800178c <pvPortReallocMicroROS+0x70>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	43db      	mvns	r3, r3
 8001756:	4013      	ands	r3, r2
 8001758:	617b      	str	r3, [r7, #20]

  	while(count--)
 800175a:	e007      	b.n	800176c <pvPortReallocMicroROS+0x50>
    	*in_dest++ = *in_src++;
 800175c:	69fa      	ldr	r2, [r7, #28]
 800175e:	1c53      	adds	r3, r2, #1
 8001760:	61fb      	str	r3, [r7, #28]
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	1c59      	adds	r1, r3, #1
 8001766:	61b9      	str	r1, [r7, #24]
 8001768:	7812      	ldrb	r2, [r2, #0]
 800176a:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	1e5a      	subs	r2, r3, #1
 8001770:	617a      	str	r2, [r7, #20]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1f2      	bne.n	800175c <pvPortReallocMicroROS+0x40>

	vPortFreeMicroROS(pv);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7ff ff58 	bl	800162c <vPortFreeMicroROS>

	( void ) xTaskResumeAll();
 800177c:	f00a fa6c 	bl	800bc58 <xTaskResumeAll>

	return newmem;
 8001780:	693b      	ldr	r3, [r7, #16]
}
 8001782:	4618      	mov	r0, r3
 8001784:	3720      	adds	r7, #32
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20004158 	.word	0x20004158

08001790 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800179a:	f00a fa4f 	bl	800bc3c <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	fb02 f303 	mul.w	r3, r2, r3
 80017a6:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80017a8:	6978      	ldr	r0, [r7, #20]
 80017aa:	f7ff fe7b 	bl	80014a4 <pvPortMallocMicroROS>
 80017ae:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	613b      	str	r3, [r7, #16]

  	while(count--)
 80017b4:	e004      	b.n	80017c0 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1c5a      	adds	r2, r3, #1
 80017ba:	613a      	str	r2, [r7, #16]
 80017bc:	2200      	movs	r2, #0
 80017be:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	1e5a      	subs	r2, r3, #1
 80017c4:	617a      	str	r2, [r7, #20]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1f5      	bne.n	80017b6 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80017ca:	f00a fa45 	bl	800bc58 <xTaskResumeAll>
  	return mem;
 80017ce:	68fb      	ldr	r3, [r7, #12]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3718      	adds	r7, #24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80017de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80017e4:	4b27      	ldr	r3, [pc, #156]	; (8001884 <prvHeapInit+0xac>)
 80017e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d00c      	beq.n	800180c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	3307      	adds	r3, #7
 80017f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f023 0307 	bic.w	r3, r3, #7
 80017fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001800:	68ba      	ldr	r2, [r7, #8]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	4a1f      	ldr	r2, [pc, #124]	; (8001884 <prvHeapInit+0xac>)
 8001808:	4413      	add	r3, r2
 800180a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001810:	4a1d      	ldr	r2, [pc, #116]	; (8001888 <prvHeapInit+0xb0>)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001816:	4b1c      	ldr	r3, [pc, #112]	; (8001888 <prvHeapInit+0xb0>)
 8001818:	2200      	movs	r2, #0
 800181a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	68ba      	ldr	r2, [r7, #8]
 8001820:	4413      	add	r3, r2
 8001822:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001824:	2208      	movs	r2, #8
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	1a9b      	subs	r3, r3, r2
 800182a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f023 0307 	bic.w	r3, r3, #7
 8001832:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4a15      	ldr	r2, [pc, #84]	; (800188c <prvHeapInit+0xb4>)
 8001838:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800183a:	4b14      	ldr	r3, [pc, #80]	; (800188c <prvHeapInit+0xb4>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2200      	movs	r2, #0
 8001840:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001842:	4b12      	ldr	r3, [pc, #72]	; (800188c <prvHeapInit+0xb4>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	68fa      	ldr	r2, [r7, #12]
 8001852:	1ad2      	subs	r2, r2, r3
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001858:	4b0c      	ldr	r3, [pc, #48]	; (800188c <prvHeapInit+0xb4>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	4a0a      	ldr	r2, [pc, #40]	; (8001890 <prvHeapInit+0xb8>)
 8001866:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	4a09      	ldr	r2, [pc, #36]	; (8001894 <prvHeapInit+0xbc>)
 800186e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001870:	4b09      	ldr	r3, [pc, #36]	; (8001898 <prvHeapInit+0xc0>)
 8001872:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001876:	601a      	str	r2, [r3, #0]
}
 8001878:	bf00      	nop
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	20000144 	.word	0x20000144
 8001888:	20004144 	.word	0x20004144
 800188c:	2000414c 	.word	0x2000414c
 8001890:	20004154 	.word	0x20004154
 8001894:	20004150 	.word	0x20004150
 8001898:	20004158 	.word	0x20004158

0800189c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80018a4:	4b28      	ldr	r3, [pc, #160]	; (8001948 <prvInsertBlockIntoFreeList+0xac>)
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	e002      	b.n	80018b0 <prvInsertBlockIntoFreeList+0x14>
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d8f7      	bhi.n	80018aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	4413      	add	r3, r2
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d108      	bne.n	80018de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	685a      	ldr	r2, [r3, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	441a      	add	r2, r3
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	68ba      	ldr	r2, [r7, #8]
 80018e8:	441a      	add	r2, r3
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d118      	bne.n	8001924 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	4b15      	ldr	r3, [pc, #84]	; (800194c <prvInsertBlockIntoFreeList+0xb0>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d00d      	beq.n	800191a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	441a      	add	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	e008      	b.n	800192c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800191a:	4b0c      	ldr	r3, [pc, #48]	; (800194c <prvInsertBlockIntoFreeList+0xb0>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	e003      	b.n	800192c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	429a      	cmp	r2, r3
 8001932:	d002      	beq.n	800193a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
 800193a:	bf00      	nop
 800193c:	3714      	adds	r7, #20
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	20004144 	.word	0x20004144
 800194c:	2000414c 	.word	0x2000414c

08001950 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800195e:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001960:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001964:	4904      	ldr	r1, [pc, #16]	; (8001978 <cubemx_transport_open+0x28>)
 8001966:	68f8      	ldr	r0, [r7, #12]
 8001968:	f007 fd1e 	bl	80093a8 <HAL_UART_Receive_DMA>
    return true;
 800196c:	2301      	movs	r3, #1
}
 800196e:	4618      	mov	r0, r3
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	2000415c 	.word	0x2000415c

0800197c <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800198a:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 800198c:	68f8      	ldr	r0, [r7, #12]
 800198e:	f007 fd3b 	bl	8009408 <HAL_UART_DMAStop>
    return true;
 8001992:	2301      	movs	r3, #1
}
 8001994:	4618      	mov	r0, r3
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
 80019a8:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80019b0:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b20      	cmp	r3, #32
 80019bc:	d11c      	bne.n	80019f8 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	461a      	mov	r2, r3
 80019c4:	68b9      	ldr	r1, [r7, #8]
 80019c6:	6978      	ldr	r0, [r7, #20]
 80019c8:	f007 fc70 	bl	80092ac <HAL_UART_Transmit_DMA>
 80019cc:	4603      	mov	r3, r0
 80019ce:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80019d0:	e002      	b.n	80019d8 <cubemx_transport_write+0x3c>
            osDelay(1);
 80019d2:	2001      	movs	r0, #1
 80019d4:	f008 ff88 	bl	800a8e8 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80019d8:	7cfb      	ldrb	r3, [r7, #19]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d105      	bne.n	80019ea <cubemx_transport_write+0x4e>
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b20      	cmp	r3, #32
 80019e8:	d1f3      	bne.n	80019d2 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 80019ea:	7cfb      	ldrb	r3, [r7, #19]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d101      	bne.n	80019f4 <cubemx_transport_write+0x58>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	e002      	b.n	80019fa <cubemx_transport_write+0x5e>
 80019f4:	2300      	movs	r3, #0
 80019f6:	e000      	b.n	80019fa <cubemx_transport_write+0x5e>
    }else{
        return 0;
 80019f8:	2300      	movs	r3, #0
    }
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b088      	sub	sp, #32
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
 8001a10:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001a18:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a1e:	b672      	cpsid	i
}
 8001a20:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001a2e:	4a1c      	ldr	r2, [pc, #112]	; (8001aa0 <cubemx_transport_read+0x9c>)
 8001a30:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001a32:	b662      	cpsie	i
}
 8001a34:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001a3c:	2001      	movs	r0, #1
 8001a3e:	f008 ff53 	bl	800a8e8 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001a42:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <cubemx_transport_read+0xa0>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	4b16      	ldr	r3, [pc, #88]	; (8001aa0 <cubemx_transport_read+0x9c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d103      	bne.n	8001a56 <cubemx_transport_read+0x52>
 8001a4e:	69fa      	ldr	r2, [r7, #28]
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	dbe3      	blt.n	8001a1e <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001a5a:	e011      	b.n	8001a80 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8001a5c:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <cubemx_transport_read+0xa0>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	68b9      	ldr	r1, [r7, #8]
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	440b      	add	r3, r1
 8001a66:	4910      	ldr	r1, [pc, #64]	; (8001aa8 <cubemx_transport_read+0xa4>)
 8001a68:	5c8a      	ldrb	r2, [r1, r2]
 8001a6a:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001a6c:	4b0d      	ldr	r3, [pc, #52]	; (8001aa4 <cubemx_transport_read+0xa0>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	3301      	adds	r3, #1
 8001a72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a76:	4a0b      	ldr	r2, [pc, #44]	; (8001aa4 <cubemx_transport_read+0xa0>)
 8001a78:	6013      	str	r3, [r2, #0]
        wrote++;
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001a80:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <cubemx_transport_read+0xa0>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <cubemx_transport_read+0x9c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d003      	beq.n	8001a94 <cubemx_transport_read+0x90>
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d3e3      	bcc.n	8001a5c <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001a94:	69bb      	ldr	r3, [r7, #24]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3720      	adds	r7, #32
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20004960 	.word	0x20004960
 8001aa4:	2000495c 	.word	0x2000495c
 8001aa8:	2000415c 	.word	0x2000415c

08001aac <MX_GPIO_Init>:
#include "main.h"
#include "drv_gpio.h"

void MX_GPIO_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08a      	sub	sp, #40	; 0x28
 8001ab0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab2:	f107 0314 	add.w	r3, r7, #20
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	605a      	str	r2, [r3, #4]
 8001abc:	609a      	str	r2, [r3, #8]
 8001abe:	60da      	str	r2, [r3, #12]
 8001ac0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	613b      	str	r3, [r7, #16]
 8001ac6:	4b2d      	ldr	r3, [pc, #180]	; (8001b7c <MX_GPIO_Init+0xd0>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	4a2c      	ldr	r2, [pc, #176]	; (8001b7c <MX_GPIO_Init+0xd0>)
 8001acc:	f043 0304 	orr.w	r3, r3, #4
 8001ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad2:	4b2a      	ldr	r3, [pc, #168]	; (8001b7c <MX_GPIO_Init+0xd0>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	f003 0304 	and.w	r3, r3, #4
 8001ada:	613b      	str	r3, [r7, #16]
 8001adc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	4b26      	ldr	r3, [pc, #152]	; (8001b7c <MX_GPIO_Init+0xd0>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	4a25      	ldr	r2, [pc, #148]	; (8001b7c <MX_GPIO_Init+0xd0>)
 8001ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aec:	6313      	str	r3, [r2, #48]	; 0x30
 8001aee:	4b23      	ldr	r3, [pc, #140]	; (8001b7c <MX_GPIO_Init+0xd0>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	60bb      	str	r3, [r7, #8]
 8001afe:	4b1f      	ldr	r3, [pc, #124]	; (8001b7c <MX_GPIO_Init+0xd0>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	4a1e      	ldr	r2, [pc, #120]	; (8001b7c <MX_GPIO_Init+0xd0>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0a:	4b1c      	ldr	r3, [pc, #112]	; (8001b7c <MX_GPIO_Init+0xd0>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	60bb      	str	r3, [r7, #8]
 8001b14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	607b      	str	r3, [r7, #4]
 8001b1a:	4b18      	ldr	r3, [pc, #96]	; (8001b7c <MX_GPIO_Init+0xd0>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	4a17      	ldr	r2, [pc, #92]	; (8001b7c <MX_GPIO_Init+0xd0>)
 8001b20:	f043 0302 	orr.w	r3, r3, #2
 8001b24:	6313      	str	r3, [r2, #48]	; 0x30
 8001b26:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <MX_GPIO_Init+0xd0>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	607b      	str	r3, [r7, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b32:	2200      	movs	r2, #0
 8001b34:	2120      	movs	r1, #32
 8001b36:	4812      	ldr	r0, [pc, #72]	; (8001b80 <MX_GPIO_Init+0xd4>)
 8001b38:	f003 fa12 	bl	8004f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b42:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b4c:	f107 0314 	add.w	r3, r7, #20
 8001b50:	4619      	mov	r1, r3
 8001b52:	480c      	ldr	r0, [pc, #48]	; (8001b84 <MX_GPIO_Init+0xd8>)
 8001b54:	f003 f880 	bl	8004c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001b58:	2320      	movs	r3, #32
 8001b5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b64:	2300      	movs	r3, #0
 8001b66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001b68:	f107 0314 	add.w	r3, r7, #20
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4804      	ldr	r0, [pc, #16]	; (8001b80 <MX_GPIO_Init+0xd4>)
 8001b70:	f003 f872 	bl	8004c58 <HAL_GPIO_Init>

}
 8001b74:	bf00      	nop
 8001b76:	3728      	adds	r7, #40	; 0x28
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40020000 	.word	0x40020000
 8001b84:	40020800 	.word	0x40020800

08001b88 <HAL_GPIO_EXTI_Callback>:

extern void quadEncoder_CallbackIndexL(void);
extern void quadEncoder_CallbackIndexR(void);

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 8001b92:	88fb      	ldrh	r3, [r7, #6]
 8001b94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b98:	d017      	beq.n	8001bca <HAL_GPIO_EXTI_Callback+0x42>
 8001b9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b9e:	dc16      	bgt.n	8001bce <HAL_GPIO_EXTI_Callback+0x46>
 8001ba0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ba4:	d00e      	beq.n	8001bc4 <HAL_GPIO_EXTI_Callback+0x3c>
 8001ba6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001baa:	dc10      	bgt.n	8001bce <HAL_GPIO_EXTI_Callback+0x46>
 8001bac:	2b08      	cmp	r3, #8
 8001bae:	d010      	beq.n	8001bd2 <HAL_GPIO_EXTI_Callback+0x4a>
 8001bb0:	2b08      	cmp	r3, #8
 8001bb2:	dc0c      	bgt.n	8001bce <HAL_GPIO_EXTI_Callback+0x46>
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d002      	beq.n	8001bbe <HAL_GPIO_EXTI_Callback+0x36>
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d00c      	beq.n	8001bd6 <HAL_GPIO_EXTI_Callback+0x4e>
					break;

	case GPIO_PIN_13 :		// USER BUTTON
					break;

	default : 		break;
 8001bbc:	e007      	b.n	8001bce <HAL_GPIO_EXTI_Callback+0x46>
		quadEncoder_CallbackIndexR();
 8001bbe:	f001 f9d7 	bl	8002f70 <quadEncoder_CallbackIndexR>
					break;
 8001bc2:	e009      	b.n	8001bd8 <HAL_GPIO_EXTI_Callback+0x50>
		quadEncoder_CallbackIndexL();
 8001bc4:	f001 f9ae 	bl	8002f24 <quadEncoder_CallbackIndexL>
					break;
 8001bc8:	e006      	b.n	8001bd8 <HAL_GPIO_EXTI_Callback+0x50>
					break;
 8001bca:	bf00      	nop
 8001bcc:	e004      	b.n	8001bd8 <HAL_GPIO_EXTI_Callback+0x50>
	default : 		break;
 8001bce:	bf00      	nop
 8001bd0:	e002      	b.n	8001bd8 <HAL_GPIO_EXTI_Callback+0x50>
					break;
 8001bd2:	bf00      	nop
 8001bd4:	e000      	b.n	8001bd8 <HAL_GPIO_EXTI_Callback+0x50>
					break;
 8001bd6:	bf00      	nop


	}
}
 8001bd8:	bf00      	nop
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <MX_I2C1_Init>:


I2C_HandleTypeDef hi2c1;

void MX_I2C1_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001be4:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <MX_I2C1_Init+0x50>)
 8001be6:	4a13      	ldr	r2, [pc, #76]	; (8001c34 <MX_I2C1_Init+0x54>)
 8001be8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001bea:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <MX_I2C1_Init+0x50>)
 8001bec:	4a12      	ldr	r2, [pc, #72]	; (8001c38 <MX_I2C1_Init+0x58>)
 8001bee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bf0:	4b0f      	ldr	r3, [pc, #60]	; (8001c30 <MX_I2C1_Init+0x50>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001bf6:	4b0e      	ldr	r3, [pc, #56]	; (8001c30 <MX_I2C1_Init+0x50>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <MX_I2C1_Init+0x50>)
 8001bfe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c02:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c04:	4b0a      	ldr	r3, [pc, #40]	; (8001c30 <MX_I2C1_Init+0x50>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c0a:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <MX_I2C1_Init+0x50>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c10:	4b07      	ldr	r3, [pc, #28]	; (8001c30 <MX_I2C1_Init+0x50>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <MX_I2C1_Init+0x50>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c1c:	4804      	ldr	r0, [pc, #16]	; (8001c30 <MX_I2C1_Init+0x50>)
 8001c1e:	f003 f9d1 	bl	8004fc4 <HAL_I2C_Init>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c28:	f000 feee 	bl	8002a08 <Error_Handler>
  }

}
 8001c2c:	bf00      	nop
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	20004964 	.word	0x20004964
 8001c34:	40005400 	.word	0x40005400
 8001c38:	000186a0 	.word	0x000186a0

08001c3c <i2c1_WriteBuffer>:

//======================================================================
// Transmit n_data bytes to i2c slave
//======================================================================
int i2c1_WriteBuffer(uint16_t addrSlave, uint8_t *data, int n_data)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b088      	sub	sp, #32
 8001c40:	af02      	add	r7, sp, #8
 8001c42:	4603      	mov	r3, r0
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
 8001c48:	81fb      	strh	r3, [r7, #14]
	int status;
	status = HAL_I2C_Master_Transmit(&hi2c1, addrSlave, data, n_data , 100);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	89f9      	ldrh	r1, [r7, #14]
 8001c50:	2264      	movs	r2, #100	; 0x64
 8001c52:	9200      	str	r2, [sp, #0]
 8001c54:	68ba      	ldr	r2, [r7, #8]
 8001c56:	4805      	ldr	r0, [pc, #20]	; (8001c6c <i2c1_WriteBuffer+0x30>)
 8001c58:	f003 faf8 	bl	800524c <HAL_I2C_Master_Transmit>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	617b      	str	r3, [r7, #20]
	return status;
 8001c60:	697b      	ldr	r3, [r7, #20]
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3718      	adds	r7, #24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20004964 	.word	0x20004964

08001c70 <i2c1_ReadRegBuffer>:
}
//======================================================================
// Receive n_data bytes - located at regAddr - from i2c slave
//======================================================================
int i2c1_ReadRegBuffer(uint16_t addrSlave, uint8_t  regAddr,  uint8_t *data, int n_data)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b088      	sub	sp, #32
 8001c74:	af02      	add	r7, sp, #8
 8001c76:	60ba      	str	r2, [r7, #8]
 8001c78:	607b      	str	r3, [r7, #4]
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	81fb      	strh	r3, [r7, #14]
 8001c7e:	460b      	mov	r3, r1
 8001c80:	737b      	strb	r3, [r7, #13]
    int status;
    uint8_t RegAddr;
    RegAddr=regAddr;
 8001c82:	7b7b      	ldrb	r3, [r7, #13]
 8001c84:	74fb      	strb	r3, [r7, #19]
    do{
        status=HAL_I2C_Master_Transmit(&hi2c1, addrSlave, &RegAddr, 1, 100);
 8001c86:	f107 0213 	add.w	r2, r7, #19
 8001c8a:	89f9      	ldrh	r1, [r7, #14]
 8001c8c:	2364      	movs	r3, #100	; 0x64
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	2301      	movs	r3, #1
 8001c92:	480f      	ldr	r0, [pc, #60]	; (8001cd0 <i2c1_ReadRegBuffer+0x60>)
 8001c94:	f003 fada 	bl	800524c <HAL_I2C_Master_Transmit>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	617b      	str	r3, [r7, #20]
        if( status )
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d10f      	bne.n	8001cc2 <i2c1_ReadRegBuffer+0x52>
            break;
        status =HAL_I2C_Master_Receive(&hi2c1, addrSlave, data, n_data, n_data*100);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2164      	movs	r1, #100	; 0x64
 8001caa:	fb01 f303 	mul.w	r3, r1, r3
 8001cae:	89f9      	ldrh	r1, [r7, #14]
 8001cb0:	9300      	str	r3, [sp, #0]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	68ba      	ldr	r2, [r7, #8]
 8001cb6:	4806      	ldr	r0, [pc, #24]	; (8001cd0 <i2c1_ReadRegBuffer+0x60>)
 8001cb8:	f003 fbc6 	bl	8005448 <HAL_I2C_Master_Receive>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	617b      	str	r3, [r7, #20]
 8001cc0:	e000      	b.n	8001cc4 <i2c1_ReadRegBuffer+0x54>
            break;
 8001cc2:	bf00      	nop
    }while(0);
    return status;
 8001cc4:	697b      	ldr	r3, [r7, #20]
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20004964 	.word	0x20004964

08001cd4 <i2c1_WriteRegBuffer>:

//======================================================================
// Write n_data bytes - have to be written at regAddr - to i2c slave
//======================================================================
int i2c1_WriteRegBuffer(uint16_t addrSlave, uint8_t  regAddr,  uint8_t *data, int n_data)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b08c      	sub	sp, #48	; 0x30
 8001cd8:	af02      	add	r7, sp, #8
 8001cda:	60ba      	str	r2, [r7, #8]
 8001cdc:	607b      	str	r3, [r7, #4]
 8001cde:	4603      	mov	r3, r0
 8001ce0:	81fb      	strh	r3, [r7, #14]
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	737b      	strb	r3, [r7, #13]
    int status;
    uint8_t RegAddr[0x10];
    RegAddr[0]=regAddr;
 8001ce6:	7b7b      	ldrb	r3, [r7, #13]
 8001ce8:	753b      	strb	r3, [r7, #20]
    memcpy(RegAddr+1, data, n_data);
 8001cea:	f107 0314 	add.w	r3, r7, #20
 8001cee:	3301      	adds	r3, #1
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	68b9      	ldr	r1, [r7, #8]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f015 fd80 	bl	80177fa <memcpy>
   status=HAL_I2C_Master_Transmit(&hi2c1, addrSlave, RegAddr, n_data+1, 100);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	3301      	adds	r3, #1
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	f107 0214 	add.w	r2, r7, #20
 8001d06:	89f9      	ldrh	r1, [r7, #14]
 8001d08:	2064      	movs	r0, #100	; 0x64
 8001d0a:	9000      	str	r0, [sp, #0]
 8001d0c:	4804      	ldr	r0, [pc, #16]	; (8001d20 <i2c1_WriteRegBuffer+0x4c>)
 8001d0e:	f003 fa9d 	bl	800524c <HAL_I2C_Master_Transmit>
 8001d12:	4603      	mov	r3, r0
 8001d14:	627b      	str	r3, [r7, #36]	; 0x24
     return status;
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3728      	adds	r7, #40	; 0x28
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	20004964 	.word	0x20004964

08001d24 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;
DMA_HandleTypeDef hdma_usart2_tx;


void MX_USART1_UART_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8001d28:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <MX_USART1_UART_Init+0x4c>)
 8001d2a:	4a12      	ldr	r2, [pc, #72]	; (8001d74 <MX_USART1_UART_Init+0x50>)
 8001d2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d2e:	4b10      	ldr	r3, [pc, #64]	; (8001d70 <MX_USART1_UART_Init+0x4c>)
 8001d30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d36:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <MX_USART1_UART_Init+0x4c>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <MX_USART1_UART_Init+0x4c>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d42:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <MX_USART1_UART_Init+0x4c>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d48:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <MX_USART1_UART_Init+0x4c>)
 8001d4a:	220c      	movs	r2, #12
 8001d4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d4e:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <MX_USART1_UART_Init+0x4c>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d54:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <MX_USART1_UART_Init+0x4c>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d5a:	4805      	ldr	r0, [pc, #20]	; (8001d70 <MX_USART1_UART_Init+0x4c>)
 8001d5c:	f007 f925 	bl	8008faa <HAL_UART_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d66:	f000 fe4f 	bl	8002a08 <Error_Handler>
  }
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	200049b8 	.word	0x200049b8
 8001d74:	40011000 	.word	0x40011000

08001d78 <MX_USART2_UART_Init>:


void MX_USART2_UART_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8001d7c:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <MX_USART2_UART_Init+0x4c>)
 8001d7e:	4a12      	ldr	r2, [pc, #72]	; (8001dc8 <MX_USART2_UART_Init+0x50>)
 8001d80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d82:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <MX_USART2_UART_Init+0x4c>)
 8001d84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d8a:	4b0e      	ldr	r3, [pc, #56]	; (8001dc4 <MX_USART2_UART_Init+0x4c>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d90:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <MX_USART2_UART_Init+0x4c>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d96:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <MX_USART2_UART_Init+0x4c>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d9c:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <MX_USART2_UART_Init+0x4c>)
 8001d9e:	220c      	movs	r2, #12
 8001da0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001da2:	4b08      	ldr	r3, [pc, #32]	; (8001dc4 <MX_USART2_UART_Init+0x4c>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001da8:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <MX_USART2_UART_Init+0x4c>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001dae:	4805      	ldr	r0, [pc, #20]	; (8001dc4 <MX_USART2_UART_Init+0x4c>)
 8001db0:	f007 f8fb 	bl	8008faa <HAL_UART_Init>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001dba:	f000 fe25 	bl	8002a08 <Error_Handler>
  }
}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	200049fc 	.word	0x200049fc
 8001dc8:	40004400 	.word	0x40004400

08001dcc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	607b      	str	r3, [r7, #4]
 8001dd6:	4b1f      	ldr	r3, [pc, #124]	; (8001e54 <MX_DMA_Init+0x88>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	4a1e      	ldr	r2, [pc, #120]	; (8001e54 <MX_DMA_Init+0x88>)
 8001ddc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001de0:	6313      	str	r3, [r2, #48]	; 0x30
 8001de2:	4b1c      	ldr	r3, [pc, #112]	; (8001e54 <MX_DMA_Init+0x88>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dea:	607b      	str	r3, [r7, #4]
 8001dec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	603b      	str	r3, [r7, #0]
 8001df2:	4b18      	ldr	r3, [pc, #96]	; (8001e54 <MX_DMA_Init+0x88>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	4a17      	ldr	r2, [pc, #92]	; (8001e54 <MX_DMA_Init+0x88>)
 8001df8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfe:	4b15      	ldr	r3, [pc, #84]	; (8001e54 <MX_DMA_Init+0x88>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e06:	603b      	str	r3, [r7, #0]
 8001e08:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2105      	movs	r1, #5
 8001e0e:	2010      	movs	r0, #16
 8001e10:	f002 fae8 	bl	80043e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001e14:	2010      	movs	r0, #16
 8001e16:	f002 fb01 	bl	800441c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2105      	movs	r1, #5
 8001e1e:	2011      	movs	r0, #17
 8001e20:	f002 fae0 	bl	80043e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001e24:	2011      	movs	r0, #17
 8001e26:	f002 faf9 	bl	800441c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2105      	movs	r1, #5
 8001e2e:	203a      	movs	r0, #58	; 0x3a
 8001e30:	f002 fad8 	bl	80043e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001e34:	203a      	movs	r0, #58	; 0x3a
 8001e36:	f002 faf1 	bl	800441c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2105      	movs	r1, #5
 8001e3e:	2046      	movs	r0, #70	; 0x46
 8001e40:	f002 fad0 	bl	80043e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001e44:	2046      	movs	r0, #70	; 0x46
 8001e46:	f002 fae9 	bl	800441c <HAL_NVIC_EnableIRQ>

}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40023800 	.word	0x40023800

08001e58 <i2c_send_byteS>:
{
	i2c1_WriteBuffer(LCD_ADDRESS, &dta, 1);
}
//=================================================================
void i2c_send_byteS(unsigned char *dta, unsigned char len)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	460b      	mov	r3, r1
 8001e62:	70fb      	strb	r3, [r7, #3]
	i2c1_WriteBuffer(LCD_ADDRESS, dta, len);
 8001e64:	78fb      	ldrb	r3, [r7, #3]
 8001e66:	461a      	mov	r2, r3
 8001e68:	6879      	ldr	r1, [r7, #4]
 8001e6a:	207c      	movs	r0, #124	; 0x7c
 8001e6c:	f7ff fee6 	bl	8001c3c <i2c1_WriteBuffer>
}
 8001e70:	bf00      	nop
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <groveLCD_begin>:
//=================================================================
void groveLCD_begin(uint8_t cols, uint8_t lines, uint8_t dotsize)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	71fb      	strb	r3, [r7, #7]
 8001e82:	460b      	mov	r3, r1
 8001e84:	71bb      	strb	r3, [r7, #6]
 8001e86:	4613      	mov	r3, r2
 8001e88:	717b      	strb	r3, [r7, #5]
    if (lines > 1) {
 8001e8a:	79bb      	ldrb	r3, [r7, #6]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d906      	bls.n	8001e9e <groveLCD_begin+0x26>
        _displayfunction |= LCD_2LINE;
 8001e90:	4b33      	ldr	r3, [pc, #204]	; (8001f60 <groveLCD_begin+0xe8>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	f043 0308 	orr.w	r3, r3, #8
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	4b31      	ldr	r3, [pc, #196]	; (8001f60 <groveLCD_begin+0xe8>)
 8001e9c:	701a      	strb	r2, [r3, #0]
    }
    _numlines = lines;
 8001e9e:	4a31      	ldr	r2, [pc, #196]	; (8001f64 <groveLCD_begin+0xec>)
 8001ea0:	79bb      	ldrb	r3, [r7, #6]
 8001ea2:	7013      	strb	r3, [r2, #0]
    _currline = 0;
 8001ea4:	4b30      	ldr	r3, [pc, #192]	; (8001f68 <groveLCD_begin+0xf0>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	701a      	strb	r2, [r3, #0]

    // for some 1 line displays you can select a 10 pixel high font
    if ((dotsize != 0) && (lines == 1)) {
 8001eaa:	797b      	ldrb	r3, [r7, #5]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d009      	beq.n	8001ec4 <groveLCD_begin+0x4c>
 8001eb0:	79bb      	ldrb	r3, [r7, #6]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d106      	bne.n	8001ec4 <groveLCD_begin+0x4c>
        _displayfunction |= LCD_5x10DOTS;
 8001eb6:	4b2a      	ldr	r3, [pc, #168]	; (8001f60 <groveLCD_begin+0xe8>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	f043 0304 	orr.w	r3, r3, #4
 8001ebe:	b2da      	uxtb	r2, r3
 8001ec0:	4b27      	ldr	r3, [pc, #156]	; (8001f60 <groveLCD_begin+0xe8>)
 8001ec2:	701a      	strb	r2, [r3, #0]
    }

    // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
    // according to datasheet, we need at least 40ms after power rises above 2.7V
    // before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
    HAL_Delay(50);
 8001ec4:	2032      	movs	r0, #50	; 0x32
 8001ec6:	f002 f89d 	bl	8004004 <HAL_Delay>

    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    groveLCD_command(LCD_FUNCTIONSET | _displayfunction);
 8001eca:	4b25      	ldr	r3, [pc, #148]	; (8001f60 <groveLCD_begin+0xe8>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	f043 0320 	orr.w	r3, r3, #32
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f000 f89b 	bl	8002010 <groveLCD_command>
    HAL_Delay(5);  // wait more than 4.1ms
 8001eda:	2005      	movs	r0, #5
 8001edc:	f002 f892 	bl	8004004 <HAL_Delay>

    // second try
    groveLCD_command(LCD_FUNCTIONSET | _displayfunction);
 8001ee0:	4b1f      	ldr	r3, [pc, #124]	; (8001f60 <groveLCD_begin+0xe8>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	f043 0320 	orr.w	r3, r3, #32
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	4618      	mov	r0, r3
 8001eec:	f000 f890 	bl	8002010 <groveLCD_command>
    HAL_Delay(5);
 8001ef0:	2005      	movs	r0, #5
 8001ef2:	f002 f887 	bl	8004004 <HAL_Delay>

    // third go
    groveLCD_command(LCD_FUNCTIONSET | _displayfunction);
 8001ef6:	4b1a      	ldr	r3, [pc, #104]	; (8001f60 <groveLCD_begin+0xe8>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	f043 0320 	orr.w	r3, r3, #32
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	4618      	mov	r0, r3
 8001f02:	f000 f885 	bl	8002010 <groveLCD_command>


    // finally, set # lines, font size, etc.
    groveLCD_command(LCD_FUNCTIONSET | _displayfunction);
 8001f06:	4b16      	ldr	r3, [pc, #88]	; (8001f60 <groveLCD_begin+0xe8>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	f043 0320 	orr.w	r3, r3, #32
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	4618      	mov	r0, r3
 8001f12:	f000 f87d 	bl	8002010 <groveLCD_command>

    // turn the display on with no cursor or blinking default
    _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001f16:	4b15      	ldr	r3, [pc, #84]	; (8001f6c <groveLCD_begin+0xf4>)
 8001f18:	2204      	movs	r2, #4
 8001f1a:	701a      	strb	r2, [r3, #0]
    groveLCD_display();
 8001f1c:	f000 f862 	bl	8001fe4 <groveLCD_display>

    // clear it off
    groveLCD_clear();
 8001f20:	f000 f831 	bl	8001f86 <groveLCD_clear>

    // Initialize to default text direction (for romance languages)
    _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001f24:	4b12      	ldr	r3, [pc, #72]	; (8001f70 <groveLCD_begin+0xf8>)
 8001f26:	2202      	movs	r2, #2
 8001f28:	701a      	strb	r2, [r3, #0]
    // set the entry mode
    groveLCD_command(LCD_ENTRYMODESET | _displaymode);
 8001f2a:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <groveLCD_begin+0xf8>)
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	f043 0304 	orr.w	r3, r3, #4
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	4618      	mov	r0, r3
 8001f36:	f000 f86b 	bl	8002010 <groveLCD_command>


    // backlight init
    groveLCD_setReg(REG_MODE1, 0);
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	f000 f8a4 	bl	800208a <groveLCD_setReg>
    // set LEDs controllable by both PWM and GRPPWM registers
    groveLCD_setReg(REG_OUTPUT, 0xFF);
 8001f42:	21ff      	movs	r1, #255	; 0xff
 8001f44:	2008      	movs	r0, #8
 8001f46:	f000 f8a0 	bl	800208a <groveLCD_setReg>
    // set MODE2 values
    // 0010 0000 -> 0x20  (DMBLNK to 1, ie blinky mode)
    groveLCD_setReg(REG_MODE2, 0x20);
 8001f4a:	2120      	movs	r1, #32
 8001f4c:	2001      	movs	r0, #1
 8001f4e:	f000 f89c 	bl	800208a <groveLCD_setReg>

    groveLCD_setColorWhite();
 8001f52:	f000 f80f 	bl	8001f74 <groveLCD_setColorWhite>

}
 8001f56:	bf00      	nop
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	20004bc0 	.word	0x20004bc0
 8001f64:	20004bc3 	.word	0x20004bc3
 8001f68:	20004bc4 	.word	0x20004bc4
 8001f6c:	20004bc1 	.word	0x20004bc1
 8001f70:	20004bc2 	.word	0x20004bc2

08001f74 <groveLCD_setColorWhite>:
//=================================================================
void groveLCD_setColorAll(){groveLCD_setRGB(0, 0, 0);}
void groveLCD_setColorWhite(){groveLCD_setRGB(255, 255, 255);}
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	22ff      	movs	r2, #255	; 0xff
 8001f7a:	21ff      	movs	r1, #255	; 0xff
 8001f7c:	20ff      	movs	r0, #255	; 0xff
 8001f7e:	f000 f896 	bl	80020ae <groveLCD_setRGB>
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <groveLCD_clear>:
//=================================================================

/********** high level commands, for the user! */
void groveLCD_clear()
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	af00      	add	r7, sp, #0
	groveLCD_command(LCD_CLEARDISPLAY);        // clear display, set cursor position to zero
 8001f8a:	2001      	movs	r0, #1
 8001f8c:	f000 f840 	bl	8002010 <groveLCD_command>
    HAL_Delay(2000);          // this command takes a long time!
 8001f90:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001f94:	f002 f836 	bl	8004004 <HAL_Delay>
}
 8001f98:	bf00      	nop
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <groveLCD_setCursor>:
	groveLCD_command(LCD_RETURNHOME);        // set cursor position to zero
    HAL_Delay(2000);        // this command takes a long time!
}
//=================================================================
void groveLCD_setCursor(uint8_t col, uint8_t row)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	460a      	mov	r2, r1
 8001fa6:	71fb      	strb	r3, [r7, #7]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	71bb      	strb	r3, [r7, #6]
    col = (row == 0 ? col|0x80 : col|0xc0);
 8001fac:	79bb      	ldrb	r3, [r7, #6]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d104      	bne.n	8001fbc <groveLCD_setCursor+0x20>
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
 8001fb4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	e003      	b.n	8001fc4 <groveLCD_setCursor+0x28>
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	71fb      	strb	r3, [r7, #7]
    unsigned char dta[2] = {0x80, col};
 8001fc6:	2380      	movs	r3, #128	; 0x80
 8001fc8:	733b      	strb	r3, [r7, #12]
 8001fca:	79fb      	ldrb	r3, [r7, #7]
 8001fcc:	737b      	strb	r3, [r7, #13]
    i2c_send_byteS(dta, 2);
 8001fce:	f107 030c 	add.w	r3, r7, #12
 8001fd2:	2102      	movs	r1, #2
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff ff3f 	bl	8001e58 <i2c_send_byteS>
}
 8001fda:	bf00      	nop
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <groveLCD_display>:
{
    _displaycontrol &= ~LCD_DISPLAYON;
    groveLCD_command(LCD_DISPLAYCONTROL | _displaycontrol);
}
//=================================================================
void groveLCD_display() {
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
    _displaycontrol |= LCD_DISPLAYON;
 8001fe8:	4b08      	ldr	r3, [pc, #32]	; (800200c <groveLCD_display+0x28>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	f043 0304 	orr.w	r3, r3, #4
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	4b06      	ldr	r3, [pc, #24]	; (800200c <groveLCD_display+0x28>)
 8001ff4:	701a      	strb	r2, [r3, #0]
    groveLCD_command(LCD_DISPLAYCONTROL | _displaycontrol);
 8001ff6:	4b05      	ldr	r3, [pc, #20]	; (800200c <groveLCD_display+0x28>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	f043 0308 	orr.w	r3, r3, #8
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	4618      	mov	r0, r3
 8002002:	f000 f805 	bl	8002010 <groveLCD_command>
}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20004bc1 	.word	0x20004bc1

08002010 <groveLCD_command>:
//=================================================================
/*********** mid level commands, for sending data/cmds */

// send command
void groveLCD_command(uint8_t value)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	71fb      	strb	r3, [r7, #7]
    unsigned char dta[2] = {0x80, value};
 800201a:	2380      	movs	r3, #128	; 0x80
 800201c:	733b      	strb	r3, [r7, #12]
 800201e:	79fb      	ldrb	r3, [r7, #7]
 8002020:	737b      	strb	r3, [r7, #13]
    i2c_send_byteS(dta, 2);
 8002022:	f107 030c 	add.w	r3, r7, #12
 8002026:	2102      	movs	r1, #2
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff ff15 	bl	8001e58 <i2c_send_byteS>
}
 800202e:	bf00      	nop
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <groveLCD_write>:
//=================================================================
// send data
int groveLCD_write(uint8_t value)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b084      	sub	sp, #16
 800203a:	af00      	add	r7, sp, #0
 800203c:	4603      	mov	r3, r0
 800203e:	71fb      	strb	r3, [r7, #7]
    unsigned char dta[2] = {0x40, value};
 8002040:	2340      	movs	r3, #64	; 0x40
 8002042:	733b      	strb	r3, [r7, #12]
 8002044:	79fb      	ldrb	r3, [r7, #7]
 8002046:	737b      	strb	r3, [r7, #13]
    i2c_send_byteS(dta, 2);
 8002048:	f107 030c 	add.w	r3, r7, #12
 800204c:	2102      	movs	r1, #2
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff ff02 	bl	8001e58 <i2c_send_byteS>
    return 1; // assume sucess
 8002054:	2301      	movs	r3, #1
}
 8002056:	4618      	mov	r0, r3
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <groveLCD_putString>:
//=================================================================
void groveLCD_putString(char* s)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
	while(*s != '\0')
 8002066:	e007      	b.n	8002078 <groveLCD_putString+0x1a>
	{
		groveLCD_write(*s);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff ffe2 	bl	8002036 <groveLCD_write>
		s++;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	3301      	adds	r3, #1
 8002076:	607b      	str	r3, [r7, #4]
	while(*s != '\0')
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1f3      	bne.n	8002068 <groveLCD_putString+0xa>
	}
}
 8002080:	bf00      	nop
 8002082:	bf00      	nop
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <groveLCD_setReg>:
//=================================================================
void groveLCD_setReg(unsigned char addr, unsigned char dta)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b082      	sub	sp, #8
 800208e:	af00      	add	r7, sp, #0
 8002090:	4603      	mov	r3, r0
 8002092:	460a      	mov	r2, r1
 8002094:	71fb      	strb	r3, [r7, #7]
 8002096:	4613      	mov	r3, r2
 8002098:	71bb      	strb	r3, [r7, #6]
    i2c1_WriteRegBuffer(RGB_ADDRESS, addr,  &dta, 1);
 800209a:	1dba      	adds	r2, r7, #6
 800209c:	79f9      	ldrb	r1, [r7, #7]
 800209e:	2301      	movs	r3, #1
 80020a0:	20c4      	movs	r0, #196	; 0xc4
 80020a2:	f7ff fe17 	bl	8001cd4 <i2c1_WriteRegBuffer>
}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <groveLCD_setRGB>:
//=================================================================
void groveLCD_setRGB(unsigned char r, unsigned char g, unsigned char b)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b082      	sub	sp, #8
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	4603      	mov	r3, r0
 80020b6:	71fb      	strb	r3, [r7, #7]
 80020b8:	460b      	mov	r3, r1
 80020ba:	71bb      	strb	r3, [r7, #6]
 80020bc:	4613      	mov	r3, r2
 80020be:	717b      	strb	r3, [r7, #5]
	groveLCD_setReg(REG_RED, r);
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	4619      	mov	r1, r3
 80020c4:	2004      	movs	r0, #4
 80020c6:	f7ff ffe0 	bl	800208a <groveLCD_setReg>
	groveLCD_setReg(REG_GREEN, g);
 80020ca:	79bb      	ldrb	r3, [r7, #6]
 80020cc:	4619      	mov	r1, r3
 80020ce:	2003      	movs	r0, #3
 80020d0:	f7ff ffdb 	bl	800208a <groveLCD_setReg>
	groveLCD_setReg(REG_BLUE, b);
 80020d4:	797b      	ldrb	r3, [r7, #5]
 80020d6:	4619      	mov	r1, r3
 80020d8:	2002      	movs	r0, #2
 80020da:	f7ff ffd6 	bl	800208a <groveLCD_setReg>
}
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
	...

080020e8 <groveLCD_setColor>:
    {0, 255, 0},                // green
    {0, 0, 255},                // blue
};
//=================================================================
void groveLCD_setColor(unsigned char color)
{
 80020e8:	b590      	push	{r4, r7, lr}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	4603      	mov	r3, r0
 80020f0:	71fb      	strb	r3, [r7, #7]
    if(color > 3)return ;
 80020f2:	79fb      	ldrb	r3, [r7, #7]
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	d81a      	bhi.n	800212e <groveLCD_setColor+0x46>
    groveLCD_setRGB(color_define[color][0], color_define[color][1], color_define[color][2]);
 80020f8:	79fa      	ldrb	r2, [r7, #7]
 80020fa:	490f      	ldr	r1, [pc, #60]	; (8002138 <groveLCD_setColor+0x50>)
 80020fc:	4613      	mov	r3, r2
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	4413      	add	r3, r2
 8002102:	440b      	add	r3, r1
 8002104:	7818      	ldrb	r0, [r3, #0]
 8002106:	79fa      	ldrb	r2, [r7, #7]
 8002108:	490b      	ldr	r1, [pc, #44]	; (8002138 <groveLCD_setColor+0x50>)
 800210a:	4613      	mov	r3, r2
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	4413      	add	r3, r2
 8002110:	440b      	add	r3, r1
 8002112:	3301      	adds	r3, #1
 8002114:	7819      	ldrb	r1, [r3, #0]
 8002116:	79fa      	ldrb	r2, [r7, #7]
 8002118:	4c07      	ldr	r4, [pc, #28]	; (8002138 <groveLCD_setColor+0x50>)
 800211a:	4613      	mov	r3, r2
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	4413      	add	r3, r2
 8002120:	4423      	add	r3, r4
 8002122:	3302      	adds	r3, #2
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	461a      	mov	r2, r3
 8002128:	f7ff ffc1 	bl	80020ae <groveLCD_setRGB>
 800212c:	e000      	b.n	8002130 <groveLCD_setColor+0x48>
    if(color > 3)return ;
 800212e:	bf00      	nop
}
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	bd90      	pop	{r4, r7, pc}
 8002136:	bf00      	nop
 8002138:	080187bc 	.word	0x080187bc
 800213c:	00000000 	.word	0x00000000

08002140 <groveLCD_term_printf>:
//============================================================
void groveLCD_term_printf(const char* fmt, ...)
{
 8002140:	b40f      	push	{r0, r1, r2, r3}
 8002142:	b5b0      	push	{r4, r5, r7, lr}
 8002144:	b0a4      	sub	sp, #144	; 0x90
 8002146:	af02      	add	r7, sp, #8
	unsigned long  ul;
	unsigned long long ull;
	unsigned long  size;
	unsigned int   sp;
	char           s[60];
	int first=0;
 8002148:	2300      	movs	r3, #0
 800214a:	677b      	str	r3, [r7, #116]	; 0x74

	va_start(ap, fmt);
 800214c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002150:	64bb      	str	r3, [r7, #72]	; 0x48

	while (*fmt != '\0') {
 8002152:	e1cd      	b.n	80024f0 <groveLCD_term_printf+0x3b0>
		if (*fmt =='%') {
 8002154:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2b25      	cmp	r3, #37	; 0x25
 800215c:	f040 81bd 	bne.w	80024da <groveLCD_term_printf+0x39a>
			size=0; sp=1;
 8002160:	2300      	movs	r3, #0
 8002162:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002164:	2301      	movs	r3, #1
 8002166:	67bb      	str	r3, [r7, #120]	; 0x78
			if (*++fmt=='0') {fmt++; sp=0;}	// parse %04d --> sp=0
 8002168:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800216c:	3301      	adds	r3, #1
 800216e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002172:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2b30      	cmp	r3, #48	; 0x30
 800217a:	d106      	bne.n	800218a <groveLCD_term_printf+0x4a>
 800217c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002180:	3301      	adds	r3, #1
 8002182:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002186:	2300      	movs	r3, #0
 8002188:	67bb      	str	r3, [r7, #120]	; 0x78
			ch=*fmt;
 800218a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			if ((ch>'0') && (ch<='9')) {	// parse %4d --> size=4
 8002194:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002198:	2b30      	cmp	r3, #48	; 0x30
 800219a:	d92c      	bls.n	80021f6 <groveLCD_term_printf+0xb6>
 800219c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80021a0:	2b39      	cmp	r3, #57	; 0x39
 80021a2:	d828      	bhi.n	80021f6 <groveLCD_term_printf+0xb6>
				char tmp[10];
				int i=0;
 80021a4:	2300      	movs	r3, #0
 80021a6:	673b      	str	r3, [r7, #112]	; 0x70
				while ((ch>='0') && (ch<='9')) {
 80021a8:	e012      	b.n	80021d0 <groveLCD_term_printf+0x90>
					tmp[i++]=ch;
 80021aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021ac:	1c5a      	adds	r2, r3, #1
 80021ae:	673a      	str	r2, [r7, #112]	; 0x70
 80021b0:	3388      	adds	r3, #136	; 0x88
 80021b2:	443b      	add	r3, r7
 80021b4:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 80021b8:	f803 2c88 	strb.w	r2, [r3, #-136]
					ch=*++fmt;
 80021bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80021c0:	3301      	adds	r3, #1
 80021c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80021c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				while ((ch>='0') && (ch<='9')) {
 80021d0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80021d4:	2b2f      	cmp	r3, #47	; 0x2f
 80021d6:	d903      	bls.n	80021e0 <groveLCD_term_printf+0xa0>
 80021d8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80021dc:	2b39      	cmp	r3, #57	; 0x39
 80021de:	d9e4      	bls.n	80021aa <groveLCD_term_printf+0x6a>
				}
				tmp[i]='\0';
 80021e0:	463a      	mov	r2, r7
 80021e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021e4:	4413      	add	r3, r2
 80021e6:	2200      	movs	r2, #0
 80021e8:	701a      	strb	r2, [r3, #0]
				size=str2num(tmp,10);
 80021ea:	463b      	mov	r3, r7
 80021ec:	210a      	movs	r1, #10
 80021ee:	4618      	mov	r0, r3
 80021f0:	f001 fd44 	bl	8003c7c <str2num>
 80021f4:	67f8      	str	r0, [r7, #124]	; 0x7c
			}
			switch (ch) {
 80021f6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80021fa:	2b25      	cmp	r3, #37	; 0x25
 80021fc:	d03c      	beq.n	8002278 <groveLCD_term_printf+0x138>
 80021fe:	2b25      	cmp	r3, #37	; 0x25
 8002200:	f2c0 8164 	blt.w	80024cc <groveLCD_term_printf+0x38c>
 8002204:	2b78      	cmp	r3, #120	; 0x78
 8002206:	f300 8161 	bgt.w	80024cc <groveLCD_term_printf+0x38c>
 800220a:	2b63      	cmp	r3, #99	; 0x63
 800220c:	f2c0 815e 	blt.w	80024cc <groveLCD_term_printf+0x38c>
 8002210:	3b63      	subs	r3, #99	; 0x63
 8002212:	2b15      	cmp	r3, #21
 8002214:	f200 815a 	bhi.w	80024cc <groveLCD_term_printf+0x38c>
 8002218:	a201      	add	r2, pc, #4	; (adr r2, 8002220 <groveLCD_term_printf+0xe0>)
 800221a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800221e:	bf00      	nop
 8002220:	08002281 	.word	0x08002281
 8002224:	080022ab 	.word	0x080022ab
 8002228:	080024cd 	.word	0x080024cd
 800222c:	080023ab 	.word	0x080023ab
 8002230:	080024cd 	.word	0x080024cd
 8002234:	080024cd 	.word	0x080024cd
 8002238:	080024cd 	.word	0x080024cd
 800223c:	080024cd 	.word	0x080024cd
 8002240:	080024cd 	.word	0x080024cd
 8002244:	080024cd 	.word	0x080024cd
 8002248:	080024cd 	.word	0x080024cd
 800224c:	080024cd 	.word	0x080024cd
 8002250:	0800231b 	.word	0x0800231b
 8002254:	08002347 	.word	0x08002347
 8002258:	080024cd 	.word	0x080024cd
 800225c:	080024cd 	.word	0x080024cd
 8002260:	08002299 	.word	0x08002299
 8002264:	080024cd 	.word	0x080024cd
 8002268:	080022ef 	.word	0x080022ef
 800226c:	080024cd 	.word	0x080024cd
 8002270:	080024cd 	.word	0x080024cd
 8002274:	0800237f 	.word	0x0800237f
				case '%':
					groveLCD_write('%');
 8002278:	2025      	movs	r0, #37	; 0x25
 800227a:	f7ff fedc 	bl	8002036 <groveLCD_write>
					break;
 800227e:	e132      	b.n	80024e6 <groveLCD_term_printf+0x3a6>
				case 'c':
					ch = va_arg(ap, int);
 8002280:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002282:	1d1a      	adds	r2, r3, #4
 8002284:	64ba      	str	r2, [r7, #72]	; 0x48
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					groveLCD_write(ch);
 800228c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff fed0 	bl	8002036 <groveLCD_write>
					break;
 8002296:	e126      	b.n	80024e6 <groveLCD_term_printf+0x3a6>
				case 's':
					p = va_arg(ap, char *);
 8002298:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800229a:	1d1a      	adds	r2, r3, #4
 800229c:	64ba      	str	r2, [r7, #72]	; 0x48
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	66fb      	str	r3, [r7, #108]	; 0x6c
					groveLCD_putString(p);
 80022a2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80022a4:	f7ff fedb 	bl	800205e <groveLCD_putString>
					break;
 80022a8:	e11d      	b.n	80024e6 <groveLCD_term_printf+0x3a6>
				case 'd':
					ul = va_arg(ap, long);
 80022aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022ac:	1d1a      	adds	r2, r3, #4
 80022ae:	64ba      	str	r2, [r7, #72]	; 0x48
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					if ((long)ul < 0) {
 80022b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	da07      	bge.n	80022ce <groveLCD_term_printf+0x18e>
						groveLCD_write('-');
 80022be:	202d      	movs	r0, #45	; 0x2d
 80022c0:	f7ff feb9 	bl	8002036 <groveLCD_write>
						ul = -(long)ul;
 80022c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80022c8:	425b      	negs	r3, r3
 80022ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
						//size--;
					}
					num2str(s, ul, 10, size, sp);
 80022ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022d0:	f107 000c 	add.w	r0, r7, #12
 80022d4:	9300      	str	r3, [sp, #0]
 80022d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80022d8:	220a      	movs	r2, #10
 80022da:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80022de:	f001 fc49 	bl	8003b74 <num2str>
					groveLCD_putString(s);
 80022e2:	f107 030c 	add.w	r3, r7, #12
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff feb9 	bl	800205e <groveLCD_putString>
					break;
 80022ec:	e0fb      	b.n	80024e6 <groveLCD_term_printf+0x3a6>
				case 'u':
					ul = va_arg(ap, unsigned int);
 80022ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022f0:	1d1a      	adds	r2, r3, #4
 80022f2:	64ba      	str	r2, [r7, #72]	; 0x48
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					num2str(s, ul, 10, size, sp);
 80022fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022fc:	f107 000c 	add.w	r0, r7, #12
 8002300:	9300      	str	r3, [sp, #0]
 8002302:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002304:	220a      	movs	r2, #10
 8002306:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800230a:	f001 fc33 	bl	8003b74 <num2str>
					groveLCD_putString(s);
 800230e:	f107 030c 	add.w	r3, r7, #12
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff fea3 	bl	800205e <groveLCD_putString>
					break;
 8002318:	e0e5      	b.n	80024e6 <groveLCD_term_printf+0x3a6>
				case 'o':
					ul = va_arg(ap, unsigned int);
 800231a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800231c:	1d1a      	adds	r2, r3, #4
 800231e:	64ba      	str	r2, [r7, #72]	; 0x48
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					num2str(s, ul, 8, size, sp);
 8002326:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002328:	f107 000c 	add.w	r0, r7, #12
 800232c:	9300      	str	r3, [sp, #0]
 800232e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002330:	2208      	movs	r2, #8
 8002332:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8002336:	f001 fc1d 	bl	8003b74 <num2str>
					groveLCD_putString(s);
 800233a:	f107 030c 	add.w	r3, r7, #12
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff fe8d 	bl	800205e <groveLCD_putString>
					break;
 8002344:	e0cf      	b.n	80024e6 <groveLCD_term_printf+0x3a6>
				case 'p':
					groveLCD_write('0');
 8002346:	2030      	movs	r0, #48	; 0x30
 8002348:	f7ff fe75 	bl	8002036 <groveLCD_write>
					groveLCD_write('x');
 800234c:	2078      	movs	r0, #120	; 0x78
 800234e:	f7ff fe72 	bl	8002036 <groveLCD_write>
					ul = va_arg(ap, unsigned int);
 8002352:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002354:	1d1a      	adds	r2, r3, #4
 8002356:	64ba      	str	r2, [r7, #72]	; 0x48
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					num2str(s, ul, 16, size, sp);
 800235e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002360:	f107 000c 	add.w	r0, r7, #12
 8002364:	9300      	str	r3, [sp, #0]
 8002366:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002368:	2210      	movs	r2, #16
 800236a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800236e:	f001 fc01 	bl	8003b74 <num2str>
					groveLCD_putString(s);
 8002372:	f107 030c 	add.w	r3, r7, #12
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff fe71 	bl	800205e <groveLCD_putString>
					break;
 800237c:	e0b3      	b.n	80024e6 <groveLCD_term_printf+0x3a6>
				case 'x':
					ul = va_arg(ap, unsigned int);
 800237e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002380:	1d1a      	adds	r2, r3, #4
 8002382:	64ba      	str	r2, [r7, #72]	; 0x48
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					num2str(s, ul, 16, size, sp);
 800238a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800238c:	f107 000c 	add.w	r0, r7, #12
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002394:	2210      	movs	r2, #16
 8002396:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800239a:	f001 fbeb 	bl	8003b74 <num2str>
					groveLCD_putString(s);
 800239e:	f107 030c 	add.w	r3, r7, #12
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff fe5b 	bl	800205e <groveLCD_putString>
					break;
 80023a8:	e09d      	b.n	80024e6 <groveLCD_term_printf+0x3a6>
				case 'f':
					if(first==0){ ull = va_arg(ap, long long unsigned int); first = 1;}
 80023aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d10c      	bne.n	80023ca <groveLCD_term_printf+0x28a>
 80023b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023b2:	3307      	adds	r3, #7
 80023b4:	f023 0307 	bic.w	r3, r3, #7
 80023b8:	f103 0208 	add.w	r2, r3, #8
 80023bc:	64ba      	str	r2, [r7, #72]	; 0x48
 80023be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c2:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 80023c6:	2301      	movs	r3, #1
 80023c8:	677b      	str	r3, [r7, #116]	; 0x74
					ull = va_arg(ap, long long unsigned int);
 80023ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023cc:	3307      	adds	r3, #7
 80023ce:	f023 0307 	bic.w	r3, r3, #7
 80023d2:	f103 0208 	add.w	r2, r3, #8
 80023d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80023d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023dc:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
					int sign = ( ull & 0x80000000 ) >> 31;
 80023e0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80023e4:	f04f 0200 	mov.w	r2, #0
 80023e8:	f04f 0300 	mov.w	r3, #0
 80023ec:	0fc2      	lsrs	r2, r0, #31
 80023ee:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80023f2:	0fcb      	lsrs	r3, r1, #31
 80023f4:	4613      	mov	r3, r2
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	65fb      	str	r3, [r7, #92]	; 0x5c
					int m = (ull & 0x000FFFFF) ; // should be 0x007FFFFF
 80023fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002402:	65bb      	str	r3, [r7, #88]	; 0x58
					float mf = (float)m ;
 8002404:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002406:	ee07 3a90 	vmov	s15, r3
 800240a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800240e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
					mf = mf / pow(2.0,20.0);
 8002412:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002416:	eddf 6a40 	vldr	s13, [pc, #256]	; 8002518 <groveLCD_term_printf+0x3d8>
 800241a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800241e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
					mf = mf + 1.0;
 8002422:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002426:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800242a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800242e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
					int e = ( ull & 0x78000000 ) >> 23 ; // should be int e = ( ul & 0x7F800000 ) >> 23;
 8002432:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002436:	f04f 0200 	mov.w	r2, #0
 800243a:	f04f 0300 	mov.w	r3, #0
 800243e:	0dc2      	lsrs	r2, r0, #23
 8002440:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8002444:	0dcb      	lsrs	r3, r1, #23
 8002446:	4613      	mov	r3, r2
 8002448:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800244c:	653b      	str	r3, [r7, #80]	; 0x50
					e = e | (( ull & 0x000F00000 ) >> 20);
 800244e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002452:	f04f 0200 	mov.w	r2, #0
 8002456:	f04f 0300 	mov.w	r3, #0
 800245a:	0d02      	lsrs	r2, r0, #20
 800245c:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8002460:	0d0b      	lsrs	r3, r1, #20
 8002462:	4613      	mov	r3, r2
 8002464:	f003 020f 	and.w	r2, r3, #15
 8002468:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800246a:	4313      	orrs	r3, r2
 800246c:	653b      	str	r3, [r7, #80]	; 0x50
					e = e - 127;
 800246e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002470:	3b7f      	subs	r3, #127	; 0x7f
 8002472:	653b      	str	r3, [r7, #80]	; 0x50
					float f = mf*myPow(2.0,e);
 8002474:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002476:	f7fe f87f 	bl	8000578 <__aeabi_f2d>
 800247a:	4604      	mov	r4, r0
 800247c:	460d      	mov	r5, r1
 800247e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002480:	ed9f 0b23 	vldr	d0, [pc, #140]	; 8002510 <groveLCD_term_printf+0x3d0>
 8002484:	f001 fd08 	bl	8003e98 <myPow>
 8002488:	ec53 2b10 	vmov	r2, r3, d0
 800248c:	4620      	mov	r0, r4
 800248e:	4629      	mov	r1, r5
 8002490:	f7fe f8ca 	bl	8000628 <__aeabi_dmul>
 8002494:	4602      	mov	r2, r0
 8002496:	460b      	mov	r3, r1
 8002498:	4610      	mov	r0, r2
 800249a:	4619      	mov	r1, r3
 800249c:	f7fe fb5e 	bl	8000b5c <__aeabi_d2f>
 80024a0:	4603      	mov	r3, r0
 80024a2:	64fb      	str	r3, [r7, #76]	; 0x4c
					if(sign==1){ groveLCD_write('-'); }
 80024a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d102      	bne.n	80024b0 <groveLCD_term_printf+0x370>
 80024aa:	202d      	movs	r0, #45	; 0x2d
 80024ac:	f7ff fdc3 	bl	8002036 <groveLCD_write>
					float2str((char*)s, f, 5);
 80024b0:	f107 030c 	add.w	r3, r7, #12
 80024b4:	2105      	movs	r1, #5
 80024b6:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 80024ba:	4618      	mov	r0, r3
 80024bc:	f001 fc9c 	bl	8003df8 <float2str>
					groveLCD_putString((char*)s);
 80024c0:	f107 030c 	add.w	r3, r7, #12
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff fdca 	bl	800205e <groveLCD_putString>
					break;
 80024ca:	e00c      	b.n	80024e6 <groveLCD_term_printf+0x3a6>

				default:
					groveLCD_write(*fmt);
 80024cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff fdaf 	bl	8002036 <groveLCD_write>
 80024d8:	e005      	b.n	80024e6 <groveLCD_term_printf+0x3a6>
			}
		} else groveLCD_write(*fmt);
 80024da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff fda8 	bl	8002036 <groveLCD_write>
		fmt++;
 80024e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024ea:	3301      	adds	r3, #1
 80024ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	while (*fmt != '\0') {
 80024f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f47f ae2c 	bne.w	8002154 <groveLCD_term_printf+0x14>
	}
	va_end(ap);
}
 80024fc:	bf00      	nop
 80024fe:	bf00      	nop
 8002500:	3788      	adds	r7, #136	; 0x88
 8002502:	46bd      	mov	sp, r7
 8002504:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002508:	b004      	add	sp, #16
 800250a:	4770      	bx	lr
 800250c:	f3af 8000 	nop.w
 8002510:	00000000 	.word	0x00000000
 8002514:	40000000 	.word	0x40000000
 8002518:	49800000 	.word	0x49800000

0800251c <microros_task>:
void * microros_reallocate(void * pointer, size_t size, void * state);
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);


void microros_task(void *argument)
{
 800251c:	b5b0      	push	{r4, r5, r7, lr}
 800251e:	f5ad 7d54 	sub.w	sp, sp, #848	; 0x350
 8002522:	af02      	add	r7, sp, #8
 8002524:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8002528:	f5a3 732f 	sub.w	r3, r3, #700	; 0x2bc
 800252c:	6018      	str	r0, [r3, #0]
	rcl_subscription_options_t sub_opts;

	/* PUBLISHER */
	//Use to publish the direction of robot in sensor mode
	rcl_publisher_t capteur_dir_pub;
	char* capteur_dir_topic = "capteur/dir";
 800252e:	4bbe      	ldr	r3, [pc, #760]	; (8002828 <microros_task+0x30c>)
 8002530:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
	std_msgs__msg__String capteur_dir_msg;
	//Use to publish the actual mode of the robot
	rcl_publisher_t etat_mode_pub;
	char* etat_mode_topic = "etat_mode";
 8002534:	4bbd      	ldr	r3, [pc, #756]	; (800282c <microros_task+0x310>)
 8002536:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
	std_msgs__msg__String etat_mode_msg;
	//Use to publish the actual speed of the robot
	rcl_publisher_t etat_speed_pub;
	char* etat_speed_topic = "etat/speed";
 800253a:	4bbd      	ldr	r3, [pc, #756]	; (8002830 <microros_task+0x314>)
 800253c:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
	std_msgs__msg__String etat_speed_msg;

	/* SUBSCRIBER */
	//Use to receive the x position of object see by the camera
	rcl_subscription_t camera_x_sub;
	char* camera_x_topic = "camera/x";
 8002540:	4bbc      	ldr	r3, [pc, #752]	; (8002834 <microros_task+0x318>)
 8002542:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
	std_msgs__msg__String camera_x_msg;
	rmw_message_info_t camera_x_msg_info;
	//Use to receive the y position of object see by the camera
	rcl_subscription_t camera_y_sub;
	char* camera_y_topic = "camera/y";
 8002546:	4bbc      	ldr	r3, [pc, #752]	; (8002838 <microros_task+0x31c>)
 8002548:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
	std_msgs__msg__String camera_y_msg;
	rmw_message_info_t camera_y_msg_info;
	//Use to receive the remote control in remote mode
	rcl_subscription_t telecommande_dir_sub;
	char* telecommande_dir_topic = "telecommande/dir";
 800254c:	4bbb      	ldr	r3, [pc, #748]	; (800283c <microros_task+0x320>)
 800254e:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
	std_msgs__msg__String telecommande_dir_msg;
	rmw_message_info_t telecommande_dir_msg_info;
	//Use to receive the mode config
	rcl_subscription_t config_mode_sub;
	char* config_mode_topic = "config/mode";
 8002552:	4bbb      	ldr	r3, [pc, #748]	; (8002840 <microros_task+0x324>)
 8002554:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
	std_msgs__msg__String config_mode_msg;
	rmw_message_info_t config_mode_msg_info;
	//Use to receive the speed config
	rcl_subscription_t config_speed_sub;
	char* config_speed_topic = "config/speed";
 8002558:	4bba      	ldr	r3, [pc, #744]	; (8002844 <microros_task+0x328>)
 800255a:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
	std_msgs__msg__String config_speed_msg;
	rmw_message_info_t config_speed_msg_info;

	// micro-ROS configuration
	rmw_uros_set_custom_transport(
 800255e:	4bba      	ldr	r3, [pc, #744]	; (8002848 <microros_task+0x32c>)
 8002560:	9301      	str	r3, [sp, #4]
 8002562:	4bba      	ldr	r3, [pc, #744]	; (800284c <microros_task+0x330>)
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	4bba      	ldr	r3, [pc, #744]	; (8002850 <microros_task+0x334>)
 8002568:	4aba      	ldr	r2, [pc, #744]	; (8002854 <microros_task+0x338>)
 800256a:	49bb      	ldr	r1, [pc, #748]	; (8002858 <microros_task+0x33c>)
 800256c:	2001      	movs	r0, #1
 800256e:	f00b fe9f 	bl	800e2b0 <rmw_uros_set_custom_transport>
		cubemx_transport_open,
		cubemx_transport_close,
		cubemx_transport_write,
		cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8002572:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8002576:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 800257a:	4618      	mov	r0, r3
 800257c:	f00b fc52 	bl	800de24 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 8002580:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8002584:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8002588:	4ab4      	ldr	r2, [pc, #720]	; (800285c <microros_task+0x340>)
 800258a:	601a      	str	r2, [r3, #0]
	freeRTOS_allocator.deallocate = microros_deallocate;
 800258c:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8002590:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8002594:	4ab2      	ldr	r2, [pc, #712]	; (8002860 <microros_task+0x344>)
 8002596:	605a      	str	r2, [r3, #4]
	freeRTOS_allocator.reallocate = microros_reallocate;
 8002598:	f507 7352 	add.w	r3, r7, #840	; 0x348
 800259c:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 80025a0:	4ab0      	ldr	r2, [pc, #704]	; (8002864 <microros_task+0x348>)
 80025a2:	609a      	str	r2, [r3, #8]
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80025a4:	f507 7352 	add.w	r3, r7, #840	; 0x348
 80025a8:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 80025ac:	4aae      	ldr	r2, [pc, #696]	; (8002868 <microros_task+0x34c>)
 80025ae:	60da      	str	r2, [r3, #12]

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80025b0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80025b4:	4618      	mov	r0, r3
 80025b6:	f00b fc43 	bl	800de40 <rcutils_set_default_allocator>
 80025ba:	4603      	mov	r3, r0
 80025bc:	f083 0301 	eor.w	r3, r3, #1
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <microros_task+0xb2>
		printf("Error on default allocators (line %d)\r\n", __LINE__);
 80025c6:	21ae      	movs	r1, #174	; 0xae
 80025c8:	48a8      	ldr	r0, [pc, #672]	; (800286c <microros_task+0x350>)
 80025ca:	f014 fdd1 	bl	8017170 <iprintf>
	}

	allocator = rcl_get_default_allocator();
 80025ce:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80025d2:	4618      	mov	r0, r3
 80025d4:	f00b fc54 	bl	800de80 <rcutils_get_default_allocator>
 80025d8:	f507 7352 	add.w	r3, r7, #840	; 0x348
 80025dc:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80025e0:	f507 7436 	add.w	r4, r7, #728	; 0x2d8
 80025e4:	461d      	mov	r5, r3
 80025e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025ea:	682b      	ldr	r3, [r5, #0]
 80025ec:	6023      	str	r3, [r4, #0]

	//create init_options
	rclc_support_init(&support, 0, NULL, &allocator);
 80025ee:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80025f2:	f507 703b 	add.w	r0, r7, #748	; 0x2ec
 80025f6:	2200      	movs	r2, #0
 80025f8:	2100      	movs	r1, #0
 80025fa:	f00b fb4d 	bl	800dc98 <rclc_support_init>
	// create node
	rclc_node_init_default(&node, "STM32_node", "", &support);
 80025fe:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8002602:	f507 7034 	add.w	r0, r7, #720	; 0x2d0
 8002606:	4a9a      	ldr	r2, [pc, #616]	; (8002870 <microros_task+0x354>)
 8002608:	499a      	ldr	r1, [pc, #616]	; (8002874 <microros_task+0x358>)
 800260a:	f00b fb93 	bl	800dd34 <rclc_node_init_default>

	// create publisher
	/* Default test publisher */
	ret = rclc_publisher_init_default(&publisher, &node,
 800260e:	f00c fcc1 	bl	800ef94 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 8002612:	4602      	mov	r2, r0
 8002614:	f507 7134 	add.w	r1, r7, #720	; 0x2d0
 8002618:	f507 7033 	add.w	r0, r7, #716	; 0x2cc
 800261c:	4b96      	ldr	r3, [pc, #600]	; (8002878 <microros_task+0x35c>)
 800261e:	f00b fbc5 	bl	800ddac <rclc_publisher_init_default>
 8002622:	f8c7 0324 	str.w	r0, [r7, #804]	; 0x324
		ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),
		"cubemx_publisher");
	printf("Default publisher return result : %d\r\n", (int)ret);
 8002626:	f8d7 1324 	ldr.w	r1, [r7, #804]	; 0x324
 800262a:	4894      	ldr	r0, [pc, #592]	; (800287c <microros_task+0x360>)
 800262c:	f014 fda0 	bl	8017170 <iprintf>
	/* ---------------------- */

	createPublisher(&capteur_dir_pub, &node,
 8002630:	f00c fcb0 	bl	800ef94 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 8002634:	4602      	mov	r2, r0
 8002636:	f507 7134 	add.w	r1, r7, #720	; 0x2d0
 800263a:	f507 7005 	add.w	r0, r7, #532	; 0x214
 800263e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8002648:	f000 f9e4 	bl	8002a14 <createPublisher>
		ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),
		capteur_dir_topic, &capteur_dir_msg);

	createPublisher(&etat_mode_pub, &node,
 800264c:	f00c fca2 	bl	800ef94 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 8002650:	4602      	mov	r2, r0
 8002652:	f507 7134 	add.w	r1, r7, #720	; 0x2d0
 8002656:	f507 7001 	add.w	r0, r7, #516	; 0x204
 800265a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8002664:	f000 f9d6 	bl	8002a14 <createPublisher>
		ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),
		etat_mode_topic, &etat_mode_msg);

	createPublisher(&etat_speed_pub, &node,
 8002668:	f00c fc94 	bl	800ef94 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 800266c:	4602      	mov	r2, r0
 800266e:	f507 7134 	add.w	r1, r7, #720	; 0x2d0
 8002672:	f507 70fa 	add.w	r0, r7, #500	; 0x1f4
 8002676:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800267a:	9300      	str	r3, [sp, #0]
 800267c:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8002680:	f000 f9c8 	bl	8002a14 <createPublisher>
		ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),
		etat_speed_topic, &etat_speed_msg);

	//create subscriber
	sub_opts = rcl_subscription_get_default_options();
 8002684:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8002688:	f5a3 7498 	sub.w	r4, r3, #304	; 0x130
 800268c:	463b      	mov	r3, r7
 800268e:	4618      	mov	r0, r3
 8002690:	f00b fa8a 	bl	800dba8 <rcl_subscription_get_default_options>
 8002694:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8002698:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 800269c:	4620      	mov	r0, r4
 800269e:	4619      	mov	r1, r3
 80026a0:	2370      	movs	r3, #112	; 0x70
 80026a2:	461a      	mov	r2, r3
 80026a4:	f015 f8a9 	bl	80177fa <memcpy>
	sub_opts.qos.reliability = RMW_QOS_POLICY_RELIABILITY_BEST_EFFORT;
 80026a8:	f507 7352 	add.w	r3, r7, #840	; 0x348
 80026ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80026b0:	2202      	movs	r2, #2
 80026b2:	721a      	strb	r2, [r3, #8]

	/* Default test subscriber */
	subscriber = rcl_get_zero_initialized_subscription();
 80026b4:	f00b f97c 	bl	800d9b0 <rcl_get_zero_initialized_subscription>
 80026b8:	4603      	mov	r3, r0
 80026ba:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
	ret = rcl_subscription_init(&subscriber, &node,
 80026be:	f00c fc69 	bl	800ef94 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 80026c2:	4602      	mov	r2, r0
 80026c4:	f507 7134 	add.w	r1, r7, #720	; 0x2d0
 80026c8:	f507 7032 	add.w	r0, r7, #712	; 0x2c8
 80026cc:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	4b69      	ldr	r3, [pc, #420]	; (8002878 <microros_task+0x35c>)
 80026d4:	f00b f972 	bl	800d9bc <rcl_subscription_init>
 80026d8:	f8c7 0324 	str.w	r0, [r7, #804]	; 0x324
		ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),
		"cubemx_publisher", &sub_opts);
	printf("Default subscription created with result %d\r\n", (int)ret);
 80026dc:	f8d7 1324 	ldr.w	r1, [r7, #804]	; 0x324
 80026e0:	4867      	ldr	r0, [pc, #412]	; (8002880 <microros_task+0x364>)
 80026e2:	f014 fd45 	bl	8017170 <iprintf>
	/* ----------------------- */

	createSubscriber(&camera_x_sub,&node,
 80026e6:	f00c fc55 	bl	800ef94 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 80026ea:	4602      	mov	r2, r0
 80026ec:	f507 7134 	add.w	r1, r7, #720	; 0x2d0
 80026f0:	f507 70f2 	add.w	r0, r7, #484	; 0x1e4
 80026f4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80026f8:	9301      	str	r3, [sp, #4]
 80026fa:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8002704:	f000 f9ac 	bl	8002a60 <createSubscriber>
		ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),
		camera_x_topic, &sub_opts, &camera_x_msg);

	createSubscriber(&camera_y_sub,&node,
 8002708:	f00c fc44 	bl	800ef94 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 800270c:	4602      	mov	r2, r0
 800270e:	f507 7134 	add.w	r1, r7, #720	; 0x2d0
 8002712:	f507 70d2 	add.w	r0, r7, #420	; 0x1a4
 8002716:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800271a:	9301      	str	r3, [sp, #4]
 800271c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8002726:	f000 f99b 	bl	8002a60 <createSubscriber>
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),
			camera_y_topic, &sub_opts, &camera_y_msg);

	createSubscriber(&telecommande_dir_sub,&node,
 800272a:	f00c fc33 	bl	800ef94 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 800272e:	4602      	mov	r2, r0
 8002730:	f507 7134 	add.w	r1, r7, #720	; 0x2d0
 8002734:	f507 70b2 	add.w	r0, r7, #356	; 0x164
 8002738:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800273c:	9301      	str	r3, [sp, #4]
 800273e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8002748:	f000 f98a 	bl	8002a60 <createSubscriber>
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),
			telecommande_dir_topic, &sub_opts, &telecommande_dir_msg);

	createSubscriber(&config_mode_sub,&node,
 800274c:	f00c fc22 	bl	800ef94 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 8002750:	4602      	mov	r2, r0
 8002752:	f507 7134 	add.w	r1, r7, #720	; 0x2d0
 8002756:	f507 7092 	add.w	r0, r7, #292	; 0x124
 800275a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800275e:	9301      	str	r3, [sp, #4]
 8002760:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8002764:	9300      	str	r3, [sp, #0]
 8002766:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800276a:	f000 f979 	bl	8002a60 <createSubscriber>
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),
			config_mode_topic, &sub_opts, &config_mode_msg);

	createSubscriber(&config_speed_sub,&node,
 800276e:	f00c fc11 	bl	800ef94 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 8002772:	4602      	mov	r2, r0
 8002774:	f507 7134 	add.w	r1, r7, #720	; 0x2d0
 8002778:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
 800277c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002780:	9301      	str	r3, [sp, #4]
 8002782:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 800278c:	f000 f968 	bl	8002a60 <createSubscriber>
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),
			config_speed_topic, &sub_opts, &config_speed_msg);

	/* Init default msg */
	msg.data.data = (char * ) malloc(ARRAY_LEN * sizeof(char));
 8002790:	2064      	movs	r0, #100	; 0x64
 8002792:	f014 fa4f 	bl	8016c34 <malloc>
 8002796:	4603      	mov	r3, r0
 8002798:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
	msg.data.size = 0;
 800279c:	2300      	movs	r3, #0
 800279e:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
	msg.data.capacity = ARRAY_LEN;
 80027a2:	2364      	movs	r3, #100	; 0x64
 80027a4:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
		msg.data.size = strlen(msg.data.data);
		ret = rcl_publish(&publisher, &msg, NULL);
		if (ret != RCL_RET_OK)
			printf("Error publishing (line %d)\r\n", __LINE__);
#elif SYNCHRO_EX == TESTMR
		ret = rcl_take(&subscriber, &msg, &msg_info, NULL);
 80027a8:	f507 7222 	add.w	r2, r7, #648	; 0x288
 80027ac:	f507 712f 	add.w	r1, r7, #700	; 0x2bc
 80027b0:	f507 7032 	add.w	r0, r7, #712	; 0x2c8
 80027b4:	2300      	movs	r3, #0
 80027b6:	f00b fa23 	bl	800dc00 <rcl_take>
 80027ba:	f8c7 0324 	str.w	r0, [r7, #804]	; 0x324
		printf("return take result = %d\r\n", (int)ret);
 80027be:	f8d7 1324 	ldr.w	r1, [r7, #804]	; 0x324
 80027c2:	4830      	ldr	r0, [pc, #192]	; (8002884 <microros_task+0x368>)
 80027c4:	f014 fcd4 	bl	8017170 <iprintf>
		if (ret == RCL_RET_OK)
 80027c8:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d126      	bne.n	800281e <microros_task+0x302>
		{
			sprintf(msg.data.data, "pong");
 80027d0:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 80027d4:	492c      	ldr	r1, [pc, #176]	; (8002888 <microros_task+0x36c>)
 80027d6:	4618      	mov	r0, r3
 80027d8:	f014 fdbe 	bl	8017358 <siprintf>
			msg.data.size = strlen(msg.data.data);
 80027dc:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7fd fd07 	bl	80001f4 <strlen>
 80027e6:	4603      	mov	r3, r0
 80027e8:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
			printf("Message : %s\r\n", msg.data.data);
 80027ec:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 80027f0:	4619      	mov	r1, r3
 80027f2:	4826      	ldr	r0, [pc, #152]	; (800288c <microros_task+0x370>)
 80027f4:	f014 fcbc 	bl	8017170 <iprintf>
			ret = rcl_publish(&publisher, &msg, NULL);
 80027f8:	f507 712f 	add.w	r1, r7, #700	; 0x2bc
 80027fc:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 8002800:	2200      	movs	r2, #0
 8002802:	4618      	mov	r0, r3
 8002804:	f00b f8b0 	bl	800d968 <rcl_publish>
 8002808:	f8c7 0324 	str.w	r0, [r7, #804]	; 0x324
			if (ret != RCL_RET_OK)
 800280c:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 8002810:	2b00      	cmp	r3, #0
 8002812:	d004      	beq.n	800281e <microros_task+0x302>
				printf("Error publishing (line %d)\r\n", __LINE__);
 8002814:	f44f 7182 	mov.w	r1, #260	; 0x104
 8002818:	481d      	ldr	r0, [pc, #116]	; (8002890 <microros_task+0x374>)
 800281a:	f014 fca9 	bl	8017170 <iprintf>
		msg.data.size = strlen(msg.data.data);
		ret = rcl_publish(&publisher, &msg, NULL);
		if (ret != RCL_RET_OK)
			printf("Error publishing (line %d)\r\n", __LINE__);
#endif
		osDelay(10);
 800281e:	200a      	movs	r0, #10
 8002820:	f008 f862 	bl	800a8e8 <osDelay>
		ret = rcl_take(&subscriber, &msg, &msg_info, NULL);
 8002824:	e7c0      	b.n	80027a8 <microros_task+0x28c>
 8002826:	bf00      	nop
 8002828:	080184ec 	.word	0x080184ec
 800282c:	080184f8 	.word	0x080184f8
 8002830:	08018504 	.word	0x08018504
 8002834:	08018510 	.word	0x08018510
 8002838:	0801851c 	.word	0x0801851c
 800283c:	08018528 	.word	0x08018528
 8002840:	0801853c 	.word	0x0801853c
 8002844:	08018548 	.word	0x08018548
 8002848:	08001a05 	.word	0x08001a05
 800284c:	0800199d 	.word	0x0800199d
 8002850:	0800197d 	.word	0x0800197d
 8002854:	08001951 	.word	0x08001951
 8002858:	200049b8 	.word	0x200049b8
 800285c:	08002abd 	.word	0x08002abd
 8002860:	08002b01 	.word	0x08002b01
 8002864:	08002b39 	.word	0x08002b39
 8002868:	08002ba5 	.word	0x08002ba5
 800286c:	08018558 	.word	0x08018558
 8002870:	08018580 	.word	0x08018580
 8002874:	08018584 	.word	0x08018584
 8002878:	08018590 	.word	0x08018590
 800287c:	080185a4 	.word	0x080185a4
 8002880:	080185cc 	.word	0x080185cc
 8002884:	080185fc 	.word	0x080185fc
 8002888:	08018618 	.word	0x08018618
 800288c:	08018620 	.word	0x08018620
 8002890:	08018630 	.word	0x08018630

08002894 <main>:
#endif
}

//=========================================================================
int main(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af02      	add	r7, sp, #8
  HAL_Init();
 800289a:	f001 fb71 	bl	8003f80 <HAL_Init>
  SystemClock_Config();
 800289e:	f001 f8ff 	bl	8003aa0 <SystemClock_Config>
  MX_GPIO_Init();
 80028a2:	f7ff f903 	bl	8001aac <MX_GPIO_Init>
  MX_DMA_Init();
 80028a6:	f7ff fa91 	bl	8001dcc <MX_DMA_Init>
  MX_USART2_UART_Init();
 80028aa:	f7ff fa65 	bl	8001d78 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80028ae:	f7ff f997 	bl	8001be0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80028b2:	f7ff fa37 	bl	8001d24 <MX_USART1_UART_Init>

  RetargetInit(&huart2); //make printf and scanf work with uart2
 80028b6:	4840      	ldr	r0, [pc, #256]	; (80029b8 <main+0x124>)
 80028b8:	f000 fb80 	bl	8002fbc <RetargetInit>
  printf("%cc%c[2J%c[0;0HTitouan//Jeremy//Louanne\r\n", 0x1b, 0x1b, 0x1b);
 80028bc:	231b      	movs	r3, #27
 80028be:	221b      	movs	r2, #27
 80028c0:	211b      	movs	r1, #27
 80028c2:	483e      	ldr	r0, [pc, #248]	; (80029bc <main+0x128>)
 80028c4:	f014 fc54 	bl	8017170 <iprintf>

  motorCommand_Init();
 80028c8:	f000 fa5e 	bl	8002d88 <motorCommand_Init>
  quadEncoder_Init();
 80028cc:	f000 fab6 	bl	8002e3c <quadEncoder_Init>
  captDistIR_Init();
 80028d0:	f7fe fdb6 	bl	8001440 <captDistIR_Init>

  HAL_Delay(500);
 80028d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80028d8:	f001 fb94 	bl	8004004 <HAL_Delay>

  initVL53L0X();
 80028dc:	f7fe fb9c 	bl	8001018 <initVL53L0X>
  HAL_Delay(100);
 80028e0:	2064      	movs	r0, #100	; 0x64
 80028e2:	f001 fb8f 	bl	8004004 <HAL_Delay>

  // Test Ecran LCD
  groveLCD_begin(16,2,0); // !! cette fonction prend du temps
 80028e6:	2200      	movs	r2, #0
 80028e8:	2102      	movs	r1, #2
 80028ea:	2010      	movs	r0, #16
 80028ec:	f7ff fac4 	bl	8001e78 <groveLCD_begin>
  HAL_Delay(100);
 80028f0:	2064      	movs	r0, #100	; 0x64
 80028f2:	f001 fb87 	bl	8004004 <HAL_Delay>
  groveLCD_setCursor(0,0);
 80028f6:	2100      	movs	r1, #0
 80028f8:	2000      	movs	r0, #0
 80028fa:	f7ff fb4f 	bl	8001f9c <groveLCD_setCursor>
  groveLCD_setColor(1);
 80028fe:	2001      	movs	r0, #1
 8002900:	f7ff fbf2 	bl	80020e8 <groveLCD_setColor>
  groveLCD_term_printf("Titouan//Jeremy//Louanne");
 8002904:	482e      	ldr	r0, [pc, #184]	; (80029c0 <main+0x12c>)
 8002906:	f7ff fc1b 	bl	8002140 <groveLCD_term_printf>
  HAL_Delay(1000);
 800290a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800290e:	f001 fb79 	bl	8004004 <HAL_Delay>

  osKernelInitialize();
 8002912:	f007 ff9f 	bl	800a854 <osKernelInitialize>
#elif SYNCHRO_EX == EX2
	xTaskCreate(test_vl53, ( const portCHAR * ) "test_vl53", 128 /* stack size */, NULL, 24 , NULL );
#elif SYNCHRO_EX == EX3
    xTaskCreate(microros_task, ( const portCHAR * ) "microros_task", 3000 /* stack size */, NULL,  24, NULL );
#elif SYNCHRO_EX == TESTMR
    xTaskCreate(microros_task, ( const portCHAR * ) "microros_task", 3000 /* stack size */, NULL,  24, NULL );
 8002916:	2300      	movs	r3, #0
 8002918:	9301      	str	r3, [sp, #4]
 800291a:	2318      	movs	r3, #24
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	2300      	movs	r3, #0
 8002920:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002924:	4927      	ldr	r1, [pc, #156]	; (80029c4 <main+0x130>)
 8002926:	4828      	ldr	r0, [pc, #160]	; (80029c8 <main+0x134>)
 8002928:	f008 ff89 	bl	800b83e <xTaskCreate>
	#if LCD
	xTaskCreate(task_Grove_LCD, ( const portCHAR * ) "task LCD", 128 /* stack size */, NULL, 23, NULL);
	#endif
#endif

    vSemaphoreCreateBinary(xSem_Supervision);
 800292c:	2203      	movs	r2, #3
 800292e:	2100      	movs	r1, #0
 8002930:	2001      	movs	r0, #1
 8002932:	f008 f9bd 	bl	800acb0 <xQueueGenericCreate>
 8002936:	4603      	mov	r3, r0
 8002938:	4a24      	ldr	r2, [pc, #144]	; (80029cc <main+0x138>)
 800293a:	6013      	str	r3, [r2, #0]
 800293c:	4b23      	ldr	r3, [pc, #140]	; (80029cc <main+0x138>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d006      	beq.n	8002952 <main+0xbe>
 8002944:	4b21      	ldr	r3, [pc, #132]	; (80029cc <main+0x138>)
 8002946:	6818      	ldr	r0, [r3, #0]
 8002948:	2300      	movs	r3, #0
 800294a:	2200      	movs	r2, #0
 800294c:	2100      	movs	r1, #0
 800294e:	f008 fa0d 	bl	800ad6c <xQueueGenericSend>
    xSemaphoreTake( xSem_Supervision, portMAX_DELAY );
 8002952:	4b1e      	ldr	r3, [pc, #120]	; (80029cc <main+0x138>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f04f 31ff 	mov.w	r1, #4294967295
 800295a:	4618      	mov	r0, r3
 800295c:	f008 fc80 	bl	800b260 <xQueueSemaphoreTake>

    q_mot_L = xQueueCreate(1, sizeof(int16_t));
 8002960:	2200      	movs	r2, #0
 8002962:	2102      	movs	r1, #2
 8002964:	2001      	movs	r0, #1
 8002966:	f008 f9a3 	bl	800acb0 <xQueueGenericCreate>
 800296a:	4603      	mov	r3, r0
 800296c:	4a18      	ldr	r2, [pc, #96]	; (80029d0 <main+0x13c>)
 800296e:	6013      	str	r3, [r2, #0]
    q_mot_R = xQueueCreate(1, sizeof(int16_t));
 8002970:	2200      	movs	r2, #0
 8002972:	2102      	movs	r1, #2
 8002974:	2001      	movs	r0, #1
 8002976:	f008 f99b 	bl	800acb0 <xQueueGenericCreate>
 800297a:	4603      	mov	r3, r0
 800297c:	4a15      	ldr	r2, [pc, #84]	; (80029d4 <main+0x140>)
 800297e:	6013      	str	r3, [r2, #0]
    qhVl53 = xQueueCreate(1, sizeof(int));
 8002980:	2200      	movs	r2, #0
 8002982:	2104      	movs	r1, #4
 8002984:	2001      	movs	r0, #1
 8002986:	f008 f993 	bl	800acb0 <xQueueGenericCreate>
 800298a:	4603      	mov	r3, r0
 800298c:	4a12      	ldr	r2, [pc, #72]	; (80029d8 <main+0x144>)
 800298e:	6013      	str	r3, [r2, #0]

    qhMR = xQueueCreate( 1, sizeof(struct AMessage ) );
 8002990:	2200      	movs	r2, #0
 8002992:	2108      	movs	r1, #8
 8002994:	2001      	movs	r0, #1
 8002996:	f008 f98b 	bl	800acb0 <xQueueGenericCreate>
 800299a:	4603      	mov	r3, r0
 800299c:	4a0f      	ldr	r2, [pc, #60]	; (80029dc <main+0x148>)
 800299e:	6013      	str	r3, [r2, #0]
    qhLCD = xQueueCreate( 1, sizeof(struct AMessage ) );
 80029a0:	2200      	movs	r2, #0
 80029a2:	2108      	movs	r1, #8
 80029a4:	2001      	movs	r0, #1
 80029a6:	f008 f983 	bl	800acb0 <xQueueGenericCreate>
 80029aa:	4603      	mov	r3, r0
 80029ac:	4a0c      	ldr	r2, [pc, #48]	; (80029e0 <main+0x14c>)
 80029ae:	6013      	str	r3, [r2, #0]

  //rec_buf6[0] = 'T';

  osKernelStart();
 80029b0:	f007 ff74 	bl	800a89c <osKernelStart>
  while(1)
 80029b4:	e7fe      	b.n	80029b4 <main+0x120>
 80029b6:	bf00      	nop
 80029b8:	200049fc 	.word	0x200049fc
 80029bc:	08018660 	.word	0x08018660
 80029c0:	0801868c 	.word	0x0801868c
 80029c4:	080186a8 	.word	0x080186a8
 80029c8:	0800251d 	.word	0x0800251d
 80029cc:	20004bc8 	.word	0x20004bc8
 80029d0:	20004bcc 	.word	0x20004bcc
 80029d4:	20004bd0 	.word	0x20004bd0
 80029d8:	20004bdc 	.word	0x20004bdc
 80029dc:	20004bd4 	.word	0x20004bd4
 80029e0:	20004bd8 	.word	0x20004bd8

080029e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM4)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a04      	ldr	r2, [pc, #16]	; (8002a04 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d101      	bne.n	80029fa <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80029f6:	f001 fae5 	bl	8003fc4 <HAL_IncTick>
  }
}
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40000800 	.word	0x40000800

08002a08 <Error_Handler>:
//=========================================================================
void Error_Handler(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002a0c:	b672      	cpsid	i
}
 8002a0e:	bf00      	nop
  __disable_irq();
  while (1)
 8002a10:	e7fe      	b.n	8002a10 <Error_Handler+0x8>
	...

08002a14 <createPublisher>:
void createPublisher(rcl_publisher_t* publisher,
	const rcl_node_t* node,
	const rosidl_message_type_support_t* type_support,
	const char* topic_name,
	std_msgs__msg__String* msg)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
 8002a20:	603b      	str	r3, [r7, #0]
	rcl_ret_t ret = rclc_publisher_init_default(publisher, node, type_support, topic_name);
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	68b9      	ldr	r1, [r7, #8]
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	f00b f9bf 	bl	800ddac <rclc_publisher_init_default>
 8002a2e:	6178      	str	r0, [r7, #20]
	printf("Publisher %s is created with result %d\r\n", topic_name, (int)ret);
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	6839      	ldr	r1, [r7, #0]
 8002a34:	4809      	ldr	r0, [pc, #36]	; (8002a5c <createPublisher+0x48>)
 8002a36:	f014 fb9b 	bl	8017170 <iprintf>

	(*msg).data.data = (char * ) malloc(ARRAY_LEN * sizeof(char));
 8002a3a:	2064      	movs	r0, #100	; 0x64
 8002a3c:	f014 f8fa 	bl	8016c34 <malloc>
 8002a40:	4603      	mov	r3, r0
 8002a42:	461a      	mov	r2, r3
 8002a44:	6a3b      	ldr	r3, [r7, #32]
 8002a46:	601a      	str	r2, [r3, #0]
	(*msg).data.size = 0;
 8002a48:	6a3b      	ldr	r3, [r7, #32]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	605a      	str	r2, [r3, #4]
	(*msg).data.capacity = ARRAY_LEN;
 8002a4e:	6a3b      	ldr	r3, [r7, #32]
 8002a50:	2264      	movs	r2, #100	; 0x64
 8002a52:	609a      	str	r2, [r3, #8]

}
 8002a54:	bf00      	nop
 8002a56:	3718      	adds	r7, #24
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	08018710 	.word	0x08018710

08002a60 <createSubscriber>:
	const rcl_node_t* node,
	const rosidl_message_type_support_t* type_support,
	const char* topic_name,
	const rcl_subscription_options_t* options,
	std_msgs__msg__String* msg)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b088      	sub	sp, #32
 8002a64:	af02      	add	r7, sp, #8
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
 8002a6c:	603b      	str	r3, [r7, #0]
	*subscription = rcl_get_zero_initialized_subscription();
 8002a6e:	f00a ff9f 	bl	800d9b0 <rcl_get_zero_initialized_subscription>
 8002a72:	4602      	mov	r2, r0
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	601a      	str	r2, [r3, #0]

	rcl_ret_t ret = rcl_subscription_init(subscription, node,
 8002a78:	6a3b      	ldr	r3, [r7, #32]
 8002a7a:	9300      	str	r3, [sp, #0]
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	68b9      	ldr	r1, [r7, #8]
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f00a ff9a 	bl	800d9bc <rcl_subscription_init>
 8002a88:	6178      	str	r0, [r7, #20]
		type_support, topic_name, options);
	printf("Subscription %s is created with result %d\r\n", topic_name, (int)ret);
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	6839      	ldr	r1, [r7, #0]
 8002a8e:	480a      	ldr	r0, [pc, #40]	; (8002ab8 <createSubscriber+0x58>)
 8002a90:	f014 fb6e 	bl	8017170 <iprintf>

	(*msg).data.data = (char * ) malloc(ARRAY_LEN * sizeof(char));
 8002a94:	2064      	movs	r0, #100	; 0x64
 8002a96:	f014 f8cd 	bl	8016c34 <malloc>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa0:	601a      	str	r2, [r3, #0]
	(*msg).data.size = 0;
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	605a      	str	r2, [r3, #4]
	(*msg).data.capacity = ARRAY_LEN;
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aaa:	2264      	movs	r2, #100	; 0x64
 8002aac:	609a      	str	r2, [r3, #8]
}
 8002aae:	bf00      	nop
 8002ab0:	3718      	adds	r7, #24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	0801873c 	.word	0x0801873c

08002abc <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002ac6:	4b0c      	ldr	r3, [pc, #48]	; (8002af8 <microros_allocate+0x3c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	461a      	mov	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4413      	add	r3, r2
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	4b09      	ldr	r3, [pc, #36]	; (8002af8 <microros_allocate+0x3c>)
 8002ad4:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002ad6:	4b09      	ldr	r3, [pc, #36]	; (8002afc <microros_allocate+0x40>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	461a      	mov	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4413      	add	r3, r2
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	4b06      	ldr	r3, [pc, #24]	; (8002afc <microros_allocate+0x40>)
 8002ae4:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f7fe fcdc 	bl	80014a4 <pvPortMallocMicroROS>
 8002aec:	4603      	mov	r3, r0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20004be0 	.word	0x20004be0
 8002afc:	20004be4 	.word	0x20004be4

08002b00 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d00c      	beq.n	8002b2a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f7fe fde5 	bl	80016e0 <getBlockSize>
 8002b16:	4603      	mov	r3, r0
 8002b18:	4a06      	ldr	r2, [pc, #24]	; (8002b34 <microros_deallocate+0x34>)
 8002b1a:	6812      	ldr	r2, [r2, #0]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	461a      	mov	r2, r3
 8002b20:	4b04      	ldr	r3, [pc, #16]	; (8002b34 <microros_deallocate+0x34>)
 8002b22:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f7fe fd81 	bl	800162c <vPortFreeMicroROS>
  }
}
 8002b2a:	bf00      	nop
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	20004be4 	.word	0x20004be4

08002b38 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002b44:	4b15      	ldr	r3, [pc, #84]	; (8002b9c <microros_reallocate+0x64>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	461a      	mov	r2, r3
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	461a      	mov	r2, r3
 8002b50:	4b12      	ldr	r3, [pc, #72]	; (8002b9c <microros_reallocate+0x64>)
 8002b52:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002b54:	4b12      	ldr	r3, [pc, #72]	; (8002ba0 <microros_reallocate+0x68>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	461a      	mov	r2, r3
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	461a      	mov	r2, r3
 8002b60:	4b0f      	ldr	r3, [pc, #60]	; (8002ba0 <microros_reallocate+0x68>)
 8002b62:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d104      	bne.n	8002b74 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8002b6a:	68b8      	ldr	r0, [r7, #8]
 8002b6c:	f7fe fc9a 	bl	80014a4 <pvPortMallocMicroROS>
 8002b70:	4603      	mov	r3, r0
 8002b72:	e00e      	b.n	8002b92 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f7fe fdb3 	bl	80016e0 <getBlockSize>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	4a08      	ldr	r2, [pc, #32]	; (8002ba0 <microros_reallocate+0x68>)
 8002b7e:	6812      	ldr	r2, [r2, #0]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	461a      	mov	r2, r3
 8002b84:	4b06      	ldr	r3, [pc, #24]	; (8002ba0 <microros_reallocate+0x68>)
 8002b86:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8002b88:	68b9      	ldr	r1, [r7, #8]
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f7fe fdc6 	bl	800171c <pvPortReallocMicroROS>
 8002b90:	4603      	mov	r3, r0
  }
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	20004be0 	.word	0x20004be0
 8002ba0:	20004be4 	.word	0x20004be4

08002ba4 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	fb02 f303 	mul.w	r3, r2, r3
 8002bb8:	4a0c      	ldr	r2, [pc, #48]	; (8002bec <microros_zero_allocate+0x48>)
 8002bba:	6812      	ldr	r2, [r2, #0]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	4b0a      	ldr	r3, [pc, #40]	; (8002bec <microros_zero_allocate+0x48>)
 8002bc2:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	fb02 f303 	mul.w	r3, r2, r3
 8002bcc:	4a08      	ldr	r2, [pc, #32]	; (8002bf0 <microros_zero_allocate+0x4c>)
 8002bce:	6812      	ldr	r2, [r2, #0]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	4b06      	ldr	r3, [pc, #24]	; (8002bf0 <microros_zero_allocate+0x4c>)
 8002bd6:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002bd8:	68b9      	ldr	r1, [r7, #8]
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f7fe fdd8 	bl	8001790 <pvPortCallocMicroROS>
 8002be0:	4603      	mov	r3, r0
 8002be2:	4618      	mov	r0, r3
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	20004be0 	.word	0x20004be0
 8002bf0:	20004be4 	.word	0x20004be4
 8002bf4:	00000000 	.word	0x00000000

08002bf8 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002bf8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002bfc:	b086      	sub	sp, #24
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002c04:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8002c06:	2300      	movs	r3, #0
 8002c08:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8002c0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c0e:	a320      	add	r3, pc, #128	; (adr r3, 8002c90 <UTILS_NanosecondsToTimespec+0x98>)
 8002c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c14:	f7fd fff2 	bl	8000bfc <__aeabi_ldivmod>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8002c22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c26:	a31a      	add	r3, pc, #104	; (adr r3, 8002c90 <UTILS_NanosecondsToTimespec+0x98>)
 8002c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c2c:	f7fd ffe6 	bl	8000bfc <__aeabi_ldivmod>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	da20      	bge.n	8002c7e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	4a11      	ldr	r2, [pc, #68]	; (8002c88 <UTILS_NanosecondsToTimespec+0x90>)
 8002c42:	fb82 1203 	smull	r1, r2, r2, r3
 8002c46:	1712      	asrs	r2, r2, #28
 8002c48:	17db      	asrs	r3, r3, #31
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c56:	6979      	ldr	r1, [r7, #20]
 8002c58:	17c8      	asrs	r0, r1, #31
 8002c5a:	460c      	mov	r4, r1
 8002c5c:	4605      	mov	r5, r0
 8002c5e:	ebb2 0804 	subs.w	r8, r2, r4
 8002c62:	eb63 0905 	sbc.w	r9, r3, r5
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	4906      	ldr	r1, [pc, #24]	; (8002c8c <UTILS_NanosecondsToTimespec+0x94>)
 8002c74:	fb01 f303 	mul.w	r3, r1, r3
 8002c78:	441a      	add	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	609a      	str	r2, [r3, #8]
    }
}
 8002c7e:	bf00      	nop
 8002c80:	3718      	adds	r7, #24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002c88:	44b82fa1 	.word	0x44b82fa1
 8002c8c:	3b9aca00 	.word	0x3b9aca00
 8002c90:	3b9aca00 	.word	0x3b9aca00
 8002c94:	00000000 	.word	0x00000000

08002c98 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002c98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c9c:	b08e      	sub	sp, #56	; 0x38
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6278      	str	r0, [r7, #36]	; 0x24
 8002ca2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8002ca4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002ca8:	2300      	movs	r3, #0
 8002caa:	6013      	str	r3, [r2, #0]
 8002cac:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8002cae:	f04f 0200 	mov.w	r2, #0
 8002cb2:	f04f 0300 	mov.w	r3, #0
 8002cb6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8002cba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f009 fa4a 	bl	800c158 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8002cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc6:	17da      	asrs	r2, r3, #31
 8002cc8:	61bb      	str	r3, [r7, #24]
 8002cca:	61fa      	str	r2, [r7, #28]
 8002ccc:	f04f 0200 	mov.w	r2, #0
 8002cd0:	f04f 0300 	mov.w	r3, #0
 8002cd4:	69b9      	ldr	r1, [r7, #24]
 8002cd6:	000b      	movs	r3, r1
 8002cd8:	2200      	movs	r2, #0
 8002cda:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8002cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	461c      	mov	r4, r3
 8002ce4:	4615      	mov	r5, r2
 8002ce6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002cea:	1911      	adds	r1, r2, r4
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	416b      	adcs	r3, r5
 8002cf0:	60fb      	str	r3, [r7, #12]
 8002cf2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002cf6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8002cfa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002cfe:	4602      	mov	r2, r0
 8002d00:	460b      	mov	r3, r1
 8002d02:	f04f 0400 	mov.w	r4, #0
 8002d06:	f04f 0500 	mov.w	r5, #0
 8002d0a:	015d      	lsls	r5, r3, #5
 8002d0c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002d10:	0154      	lsls	r4, r2, #5
 8002d12:	4622      	mov	r2, r4
 8002d14:	462b      	mov	r3, r5
 8002d16:	ebb2 0800 	subs.w	r8, r2, r0
 8002d1a:	eb63 0901 	sbc.w	r9, r3, r1
 8002d1e:	f04f 0200 	mov.w	r2, #0
 8002d22:	f04f 0300 	mov.w	r3, #0
 8002d26:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002d2a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002d2e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8002d32:	4690      	mov	r8, r2
 8002d34:	4699      	mov	r9, r3
 8002d36:	eb18 0a00 	adds.w	sl, r8, r0
 8002d3a:	eb49 0b01 	adc.w	fp, r9, r1
 8002d3e:	f04f 0200 	mov.w	r2, #0
 8002d42:	f04f 0300 	mov.w	r3, #0
 8002d46:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d4a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d4e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d52:	ebb2 040a 	subs.w	r4, r2, sl
 8002d56:	603c      	str	r4, [r7, #0]
 8002d58:	eb63 030b 	sbc.w	r3, r3, fp
 8002d5c:	607b      	str	r3, [r7, #4]
 8002d5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d62:	4623      	mov	r3, r4
 8002d64:	181b      	adds	r3, r3, r0
 8002d66:	613b      	str	r3, [r7, #16]
 8002d68:	462b      	mov	r3, r5
 8002d6a:	eb41 0303 	adc.w	r3, r1, r3
 8002d6e:	617b      	str	r3, [r7, #20]
 8002d70:	6a3a      	ldr	r2, [r7, #32]
 8002d72:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d76:	f7ff ff3f 	bl	8002bf8 <UTILS_NanosecondsToTimespec>

    return 0;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3738      	adds	r7, #56	; 0x38
 8002d80:	46bd      	mov	sp, r7
 8002d82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002d88 <motorCommand_Init>:
// TIMER 3 (PWM)  : CH1 et CH2
// ENABLE : Sortie Logique (GPIO) PA7
//=================================================================

void motorCommand_Init(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
	unsigned int uwPrescalerValue = 0;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	607b      	str	r3, [r7, #4]

	/* Compute the prescaler value to have TIM4 counter clock equal to 10MHz */
	  uwPrescalerValue = (unsigned int) ((SystemCoreClock / 10000000) - 1);
 8002d92:	4b24      	ldr	r3, [pc, #144]	; (8002e24 <motorCommand_Init+0x9c>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a24      	ldr	r2, [pc, #144]	; (8002e28 <motorCommand_Init+0xa0>)
 8002d98:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9c:	0d9b      	lsrs	r3, r3, #22
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	607b      	str	r3, [r7, #4]
	  TimHandle.Instance = TIM3;
 8002da2:	4b22      	ldr	r3, [pc, #136]	; (8002e2c <motorCommand_Init+0xa4>)
 8002da4:	4a22      	ldr	r2, [pc, #136]	; (8002e30 <motorCommand_Init+0xa8>)
 8002da6:	601a      	str	r2, [r3, #0]
	  TimHandle.Init.Period = 200 - 1; // 100MHz/200=50kHz
 8002da8:	4b20      	ldr	r3, [pc, #128]	; (8002e2c <motorCommand_Init+0xa4>)
 8002daa:	22c7      	movs	r2, #199	; 0xc7
 8002dac:	60da      	str	r2, [r3, #12]
	  TimHandle.Init.Prescaler = uwPrescalerValue;
 8002dae:	4a1f      	ldr	r2, [pc, #124]	; (8002e2c <motorCommand_Init+0xa4>)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6053      	str	r3, [r2, #4]
	  TimHandle.Init.ClockDivision = 0;
 8002db4:	4b1d      	ldr	r3, [pc, #116]	; (8002e2c <motorCommand_Init+0xa4>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	611a      	str	r2, [r3, #16]
	  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dba:	4b1c      	ldr	r3, [pc, #112]	; (8002e2c <motorCommand_Init+0xa4>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	609a      	str	r2, [r3, #8]

	  HAL_TIM_Base_Init(&TimHandle);
 8002dc0:	481a      	ldr	r0, [pc, #104]	; (8002e2c <motorCommand_Init+0xa4>)
 8002dc2:	f005 fa11 	bl	80081e8 <HAL_TIM_Base_Init>

	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002dc6:	4b1b      	ldr	r3, [pc, #108]	; (8002e34 <motorCommand_Init+0xac>)
 8002dc8:	2260      	movs	r2, #96	; 0x60
 8002dca:	601a      	str	r2, [r3, #0]
	  sConfigOC.Pulse = 0x5;// Specifies the pulse value to be loaded into the Capture Compare Register. This parameter can be a number between Min_Data = 0x0000 and Max_Data = 0xFFFF */
 8002dcc:	4b19      	ldr	r3, [pc, #100]	; (8002e34 <motorCommand_Init+0xac>)
 8002dce:	2205      	movs	r2, #5
 8002dd0:	605a      	str	r2, [r3, #4]

	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002dd2:	4b18      	ldr	r3, [pc, #96]	; (8002e34 <motorCommand_Init+0xac>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	609a      	str	r2, [r3, #8]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002dd8:	4b16      	ldr	r3, [pc, #88]	; (8002e34 <motorCommand_Init+0xac>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	611a      	str	r2, [r3, #16]

	 HAL_TIM_PWM_ConfigChannel(&TimHandle, &sConfigOC, TIM_CHANNEL_1);
 8002dde:	2200      	movs	r2, #0
 8002de0:	4914      	ldr	r1, [pc, #80]	; (8002e34 <motorCommand_Init+0xac>)
 8002de2:	4812      	ldr	r0, [pc, #72]	; (8002e2c <motorCommand_Init+0xa4>)
 8002de4:	f005 fdb2 	bl	800894c <HAL_TIM_PWM_ConfigChannel>
	 HAL_TIM_PWM_ConfigChannel(&TimHandle, &sConfigOC, TIM_CHANNEL_2);
 8002de8:	2204      	movs	r2, #4
 8002dea:	4912      	ldr	r1, [pc, #72]	; (8002e34 <motorCommand_Init+0xac>)
 8002dec:	480f      	ldr	r0, [pc, #60]	; (8002e2c <motorCommand_Init+0xa4>)
 8002dee:	f005 fdad 	bl	800894c <HAL_TIM_PWM_ConfigChannel>

	 // CHANGEMENT DU RAPPORT CYCLIQUE
	 __HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_1, 100);	// 100 : moteurs au repos
 8002df2:	4b0e      	ldr	r3, [pc, #56]	; (8002e2c <motorCommand_Init+0xa4>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2264      	movs	r2, #100	; 0x64
 8002df8:	635a      	str	r2, [r3, #52]	; 0x34
	 __HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_2, 100);
 8002dfa:	4b0c      	ldr	r3, [pc, #48]	; (8002e2c <motorCommand_Init+0xa4>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2264      	movs	r2, #100	; 0x64
 8002e00:	639a      	str	r2, [r3, #56]	; 0x38

	  HAL_TIM_PWM_Start(&TimHandle, TIM_CHANNEL_1);	// MOTOR RIGHT
 8002e02:	2100      	movs	r1, #0
 8002e04:	4809      	ldr	r0, [pc, #36]	; (8002e2c <motorCommand_Init+0xa4>)
 8002e06:	f005 faab 	bl	8008360 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&TimHandle, TIM_CHANNEL_2); // MOTOR LEFT
 8002e0a:	2104      	movs	r1, #4
 8002e0c:	4807      	ldr	r0, [pc, #28]	; (8002e2c <motorCommand_Init+0xa4>)
 8002e0e:	f005 faa7 	bl	8008360 <HAL_TIM_PWM_Start>

	  // ENABLE MOTEUR (SI INVERSEUR)
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8002e12:	2200      	movs	r2, #0
 8002e14:	2108      	movs	r1, #8
 8002e16:	4808      	ldr	r0, [pc, #32]	; (8002e38 <motorCommand_Init+0xb0>)
 8002e18:	f002 f8a2 	bl	8004f60 <HAL_GPIO_WritePin>
}
 8002e1c:	bf00      	nop
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	20000000 	.word	0x20000000
 8002e28:	6b5fca6b 	.word	0x6b5fca6b
 8002e2c:	20004be8 	.word	0x20004be8
 8002e30:	40000400 	.word	0x40000400
 8002e34:	20004c30 	.word	0x20004c30
 8002e38:	40020400 	.word	0x40020400

08002e3c <quadEncoder_Init>:
//================================================================
//		TIMER INIT
//================================================================

void quadEncoder_Init(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b08a      	sub	sp, #40	; 0x28
 8002e40:	af00      	add	r7, sp, #0
	TIM_Encoder_InitTypeDef sConfig;
	//--------------------------------------------------
	// TIMER 1
	//--------------------------------------------------
	TimEncoderHandleLeft.Instance = TIM1;
 8002e42:	4b35      	ldr	r3, [pc, #212]	; (8002f18 <quadEncoder_Init+0xdc>)
 8002e44:	4a35      	ldr	r2, [pc, #212]	; (8002f1c <quadEncoder_Init+0xe0>)
 8002e46:	601a      	str	r2, [r3, #0]
	TimEncoderHandleLeft.Init.Prescaler = 0;
 8002e48:	4b33      	ldr	r3, [pc, #204]	; (8002f18 <quadEncoder_Init+0xdc>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	605a      	str	r2, [r3, #4]
	TimEncoderHandleLeft.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e4e:	4b32      	ldr	r3, [pc, #200]	; (8002f18 <quadEncoder_Init+0xdc>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	609a      	str	r2, [r3, #8]
	TimEncoderHandleLeft.Init.Period = COUNT_PER_ROUND*4;
 8002e54:	4b30      	ldr	r3, [pc, #192]	; (8002f18 <quadEncoder_Init+0xdc>)
 8002e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e5a:	60da      	str	r2, [r3, #12]
	TimEncoderHandleLeft.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e5c:	4b2e      	ldr	r3, [pc, #184]	; (8002f18 <quadEncoder_Init+0xdc>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	611a      	str	r2, [r3, #16]

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002e62:	2303      	movs	r3, #3
 8002e64:	607b      	str	r3, [r7, #4]
	sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002e66:	2300      	movs	r3, #0
 8002e68:	60bb      	str	r3, [r7, #8]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 8002e6e:	2308      	movs	r3, #8
 8002e70:	613b      	str	r3, [r7, #16]
	sConfig.IC1Filter = 0x0F;
 8002e72:	230f      	movs	r3, #15
 8002e74:	617b      	str	r3, [r7, #20]
	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002e76:	2300      	movs	r3, #0
 8002e78:	61bb      	str	r3, [r7, #24]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;//TIM_ICSELECTION_DIRECTTI; //TIM_TI1SELECTION_XORCOMBINATION
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 8002e7e:	2308      	movs	r3, #8
 8002e80:	623b      	str	r3, [r7, #32]
	sConfig.IC2Filter = 0x0F;
 8002e82:	230f      	movs	r3, #15
 8002e84:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_TIM_Encoder_Init(&TimEncoderHandleLeft, &sConfig);
 8002e86:	1d3b      	adds	r3, r7, #4
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4823      	ldr	r0, [pc, #140]	; (8002f18 <quadEncoder_Init+0xdc>)
 8002e8c:	f005 fb18 	bl	80084c0 <HAL_TIM_Encoder_Init>

	__HAL_TIM_SetCounter(&TimEncoderHandleLeft, 0);
 8002e90:	4b21      	ldr	r3, [pc, #132]	; (8002f18 <quadEncoder_Init+0xdc>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2200      	movs	r2, #0
 8002e96:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_1);
 8002e98:	2100      	movs	r1, #0
 8002e9a:	481f      	ldr	r0, [pc, #124]	; (8002f18 <quadEncoder_Init+0xdc>)
 8002e9c:	f005 fbc0 	bl	8008620 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_2);
 8002ea0:	2104      	movs	r1, #4
 8002ea2:	481d      	ldr	r0, [pc, #116]	; (8002f18 <quadEncoder_Init+0xdc>)
 8002ea4:	f005 fbbc 	bl	8008620 <HAL_TIM_Encoder_Start>

	//--------------------------------------------------
	// TIMER 2
	//--------------------------------------------------
	TimEncoderHandleRight.Instance = TIM2;
 8002ea8:	4b1d      	ldr	r3, [pc, #116]	; (8002f20 <quadEncoder_Init+0xe4>)
 8002eaa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002eae:	601a      	str	r2, [r3, #0]
	TimEncoderHandleRight.Init.Prescaler = 0;
 8002eb0:	4b1b      	ldr	r3, [pc, #108]	; (8002f20 <quadEncoder_Init+0xe4>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	605a      	str	r2, [r3, #4]
	TimEncoderHandleRight.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eb6:	4b1a      	ldr	r3, [pc, #104]	; (8002f20 <quadEncoder_Init+0xe4>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	609a      	str	r2, [r3, #8]
	TimEncoderHandleRight.Init.Period = COUNT_PER_ROUND*4;
 8002ebc:	4b18      	ldr	r3, [pc, #96]	; (8002f20 <quadEncoder_Init+0xe4>)
 8002ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec2:	60da      	str	r2, [r3, #12]
	TimEncoderHandleRight.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ec4:	4b16      	ldr	r3, [pc, #88]	; (8002f20 <quadEncoder_Init+0xe4>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	611a      	str	r2, [r3, #16]

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	607b      	str	r3, [r7, #4]
	sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	60bb      	str	r3, [r7, #8]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 8002ed6:	2308      	movs	r3, #8
 8002ed8:	613b      	str	r3, [r7, #16]
	sConfig.IC1Filter = 0x0F;
 8002eda:	230f      	movs	r3, #15
 8002edc:	617b      	str	r3, [r7, #20]
	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	61bb      	str	r3, [r7, #24]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;//TIM_ICSELECTION_DIRECTTI; //TIM_TI1SELECTION_XORCOMBINATION
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 8002ee6:	2308      	movs	r3, #8
 8002ee8:	623b      	str	r3, [r7, #32]
	sConfig.IC2Filter = 0x0F;
 8002eea:	230f      	movs	r3, #15
 8002eec:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_TIM_Encoder_Init(&TimEncoderHandleRight, &sConfig);
 8002eee:	1d3b      	adds	r3, r7, #4
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	480b      	ldr	r0, [pc, #44]	; (8002f20 <quadEncoder_Init+0xe4>)
 8002ef4:	f005 fae4 	bl	80084c0 <HAL_TIM_Encoder_Init>

	__HAL_TIM_SetCounter(&TimEncoderHandleRight, 0);
 8002ef8:	4b09      	ldr	r3, [pc, #36]	; (8002f20 <quadEncoder_Init+0xe4>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2200      	movs	r2, #0
 8002efe:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_1);
 8002f00:	2100      	movs	r1, #0
 8002f02:	4807      	ldr	r0, [pc, #28]	; (8002f20 <quadEncoder_Init+0xe4>)
 8002f04:	f005 fb8c 	bl	8008620 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_2);
 8002f08:	2104      	movs	r1, #4
 8002f0a:	4805      	ldr	r0, [pc, #20]	; (8002f20 <quadEncoder_Init+0xe4>)
 8002f0c:	f005 fb88 	bl	8008620 <HAL_TIM_Encoder_Start>
}
 8002f10:	bf00      	nop
 8002f12:	3728      	adds	r7, #40	; 0x28
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	20004c4c 	.word	0x20004c4c
 8002f1c:	40010000 	.word	0x40010000
 8002f20:	20004c94 	.word	0x20004c94

08002f24 <quadEncoder_CallbackIndexL>:
//================================================================
//		MAJ index Left
//================================================================

void quadEncoder_CallbackIndexL()
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
				if (__HAL_TIM_DIRECTION_STATUS(&TimEncoderHandleLeft)==1)
 8002f28:	4b0f      	ldr	r3, [pc, #60]	; (8002f68 <quadEncoder_CallbackIndexL+0x44>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0310 	and.w	r3, r3, #16
 8002f32:	2b10      	cmp	r3, #16
 8002f34:	d105      	bne.n	8002f42 <quadEncoder_CallbackIndexL+0x1e>
				{
					indexL--;
 8002f36:	4b0d      	ldr	r3, [pc, #52]	; (8002f6c <quadEncoder_CallbackIndexL+0x48>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	4a0b      	ldr	r2, [pc, #44]	; (8002f6c <quadEncoder_CallbackIndexL+0x48>)
 8002f3e:	6013      	str	r3, [r2, #0]
 8002f40:	e004      	b.n	8002f4c <quadEncoder_CallbackIndexL+0x28>
				}
				else
				{
					indexL++;
 8002f42:	4b0a      	ldr	r3, [pc, #40]	; (8002f6c <quadEncoder_CallbackIndexL+0x48>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	3301      	adds	r3, #1
 8002f48:	4a08      	ldr	r2, [pc, #32]	; (8002f6c <quadEncoder_CallbackIndexL+0x48>)
 8002f4a:	6013      	str	r3, [r2, #0]
				}


				__HAL_TIM_SetCounter(&TimEncoderHandleLeft, 0);		// RAZ Counter
 8002f4c:	4b06      	ldr	r3, [pc, #24]	; (8002f68 <quadEncoder_CallbackIndexL+0x44>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2200      	movs	r2, #0
 8002f52:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_1);
 8002f54:	2100      	movs	r1, #0
 8002f56:	4804      	ldr	r0, [pc, #16]	; (8002f68 <quadEncoder_CallbackIndexL+0x44>)
 8002f58:	f005 fb62 	bl	8008620 <HAL_TIM_Encoder_Start>
				HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_2);
 8002f5c:	2104      	movs	r1, #4
 8002f5e:	4802      	ldr	r0, [pc, #8]	; (8002f68 <quadEncoder_CallbackIndexL+0x44>)
 8002f60:	f005 fb5e 	bl	8008620 <HAL_TIM_Encoder_Start>

}
 8002f64:	bf00      	nop
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	20004c4c 	.word	0x20004c4c
 8002f6c:	20004cdc 	.word	0x20004cdc

08002f70 <quadEncoder_CallbackIndexR>:
//================================================================
//		MAJ index Right
//================================================================

void quadEncoder_CallbackIndexR()
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
				if (__HAL_TIM_DIRECTION_STATUS(&TimEncoderHandleRight)==1)
 8002f74:	4b0f      	ldr	r3, [pc, #60]	; (8002fb4 <quadEncoder_CallbackIndexR+0x44>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0310 	and.w	r3, r3, #16
 8002f7e:	2b10      	cmp	r3, #16
 8002f80:	d105      	bne.n	8002f8e <quadEncoder_CallbackIndexR+0x1e>
				{
					indexR--;
 8002f82:	4b0d      	ldr	r3, [pc, #52]	; (8002fb8 <quadEncoder_CallbackIndexR+0x48>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	3b01      	subs	r3, #1
 8002f88:	4a0b      	ldr	r2, [pc, #44]	; (8002fb8 <quadEncoder_CallbackIndexR+0x48>)
 8002f8a:	6013      	str	r3, [r2, #0]
 8002f8c:	e004      	b.n	8002f98 <quadEncoder_CallbackIndexR+0x28>

				}
				else
				{
					indexR++;
 8002f8e:	4b0a      	ldr	r3, [pc, #40]	; (8002fb8 <quadEncoder_CallbackIndexR+0x48>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	3301      	adds	r3, #1
 8002f94:	4a08      	ldr	r2, [pc, #32]	; (8002fb8 <quadEncoder_CallbackIndexR+0x48>)
 8002f96:	6013      	str	r3, [r2, #0]
				}

				__HAL_TIM_SetCounter(&TimEncoderHandleRight, 0);			// RAZ Counter
 8002f98:	4b06      	ldr	r3, [pc, #24]	; (8002fb4 <quadEncoder_CallbackIndexR+0x44>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_1);
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	4804      	ldr	r0, [pc, #16]	; (8002fb4 <quadEncoder_CallbackIndexR+0x44>)
 8002fa4:	f005 fb3c 	bl	8008620 <HAL_TIM_Encoder_Start>
				HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_2);
 8002fa8:	2104      	movs	r1, #4
 8002faa:	4802      	ldr	r0, [pc, #8]	; (8002fb4 <quadEncoder_CallbackIndexR+0x44>)
 8002fac:	f005 fb38 	bl	8008620 <HAL_TIM_Encoder_Start>

}
 8002fb0:	bf00      	nop
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	20004c94 	.word	0x20004c94
 8002fb8:	20004ce0 	.word	0x20004ce0

08002fbc <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8002fc4:	4a07      	ldr	r2, [pc, #28]	; (8002fe4 <RetargetInit+0x28>)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8002fca:	4b07      	ldr	r3, [pc, #28]	; (8002fe8 <RetargetInit+0x2c>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	6898      	ldr	r0, [r3, #8]
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	f014 f8dd 	bl	8017194 <setvbuf>
}
 8002fda:	bf00      	nop
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	20004ce4 	.word	0x20004ce4
 8002fe8:	200000d4 	.word	0x200000d4

08002fec <_isatty>:

int _isatty(int fd) {
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	db04      	blt.n	8003004 <_isatty+0x18>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	dc01      	bgt.n	8003004 <_isatty+0x18>
    return 1;
 8003000:	2301      	movs	r3, #1
 8003002:	e005      	b.n	8003010 <_isatty+0x24>

  errno = EBADF;
 8003004:	f014 fbc4 	bl	8017790 <__errno>
 8003008:	4603      	mov	r3, r0
 800300a:	2209      	movs	r2, #9
 800300c:	601a      	str	r2, [r3, #0]
  return 0;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <_write>:

int _write(int fd, char* ptr, int len) {
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d002      	beq.n	8003030 <_write+0x18>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2b02      	cmp	r3, #2
 800302e:	d111      	bne.n	8003054 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8003030:	4b0e      	ldr	r3, [pc, #56]	; (800306c <_write+0x54>)
 8003032:	6818      	ldr	r0, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	b29a      	uxth	r2, r3
 8003038:	f04f 33ff 	mov.w	r3, #4294967295
 800303c:	68b9      	ldr	r1, [r7, #8]
 800303e:	f006 f801 	bl	8009044 <HAL_UART_Transmit>
 8003042:	4603      	mov	r3, r0
 8003044:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8003046:	7dfb      	ldrb	r3, [r7, #23]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d101      	bne.n	8003050 <_write+0x38>
      return len;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	e008      	b.n	8003062 <_write+0x4a>
    else
      return EIO;
 8003050:	2305      	movs	r3, #5
 8003052:	e006      	b.n	8003062 <_write+0x4a>
  }
  errno = EBADF;
 8003054:	f014 fb9c 	bl	8017790 <__errno>
 8003058:	4603      	mov	r3, r0
 800305a:	2209      	movs	r2, #9
 800305c:	601a      	str	r2, [r3, #0]
  return -1;
 800305e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003062:	4618      	mov	r0, r3
 8003064:	3718      	adds	r7, #24
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	20004ce4 	.word	0x20004ce4

08003070 <_close>:

int _close(int fd) {
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	db04      	blt.n	8003088 <_close+0x18>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b02      	cmp	r3, #2
 8003082:	dc01      	bgt.n	8003088 <_close+0x18>
    return 0;
 8003084:	2300      	movs	r3, #0
 8003086:	e006      	b.n	8003096 <_close+0x26>

  errno = EBADF;
 8003088:	f014 fb82 	bl	8017790 <__errno>
 800308c:	4603      	mov	r3, r0
 800308e:	2209      	movs	r2, #9
 8003090:	601a      	str	r2, [r3, #0]
  return -1;
 8003092:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003096:	4618      	mov	r0, r3
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800309e:	b580      	push	{r7, lr}
 80030a0:	b084      	sub	sp, #16
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	60f8      	str	r0, [r7, #12]
 80030a6:	60b9      	str	r1, [r7, #8]
 80030a8:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80030aa:	f014 fb71 	bl	8017790 <__errno>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2209      	movs	r2, #9
 80030b2:	601a      	str	r2, [r3, #0]
  return -1;
 80030b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3710      	adds	r7, #16
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <_read>:

int _read(int fd, char* ptr, int len) {
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d110      	bne.n	80030f4 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80030d2:	4b0e      	ldr	r3, [pc, #56]	; (800310c <_read+0x4c>)
 80030d4:	6818      	ldr	r0, [r3, #0]
 80030d6:	f04f 33ff 	mov.w	r3, #4294967295
 80030da:	2201      	movs	r2, #1
 80030dc:	68b9      	ldr	r1, [r7, #8]
 80030de:	f006 f843 	bl	8009168 <HAL_UART_Receive>
 80030e2:	4603      	mov	r3, r0
 80030e4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80030e6:	7dfb      	ldrb	r3, [r7, #23]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d101      	bne.n	80030f0 <_read+0x30>
      return 1;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e008      	b.n	8003102 <_read+0x42>
    else
      return EIO;
 80030f0:	2305      	movs	r3, #5
 80030f2:	e006      	b.n	8003102 <_read+0x42>
  }
  errno = EBADF;
 80030f4:	f014 fb4c 	bl	8017790 <__errno>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2209      	movs	r2, #9
 80030fc:	601a      	str	r2, [r3, #0]
  return -1;
 80030fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003102:	4618      	mov	r0, r3
 8003104:	3718      	adds	r7, #24
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	20004ce4 	.word	0x20004ce4

08003110 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	db08      	blt.n	8003132 <_fstat+0x22>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b02      	cmp	r3, #2
 8003124:	dc05      	bgt.n	8003132 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800312c:	605a      	str	r2, [r3, #4]
    return 0;
 800312e:	2300      	movs	r3, #0
 8003130:	e005      	b.n	800313e <_fstat+0x2e>
  }

  errno = EBADF;
 8003132:	f014 fb2d 	bl	8017790 <__errno>
 8003136:	4603      	mov	r3, r0
 8003138:	2209      	movs	r2, #9
 800313a:	601a      	str	r2, [r3, #0]
  return 0;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <_getpid>:

int _getpid(void)
{
 8003146:	b480      	push	{r7}
 8003148:	af00      	add	r7, sp, #0
	return 1;
 800314a:	2301      	movs	r3, #1
}
 800314c:	4618      	mov	r0, r3
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <_kill>:

int _kill(int pid, int sig)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b082      	sub	sp, #8
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
 800315e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003160:	f014 fb16 	bl	8017790 <__errno>
 8003164:	4603      	mov	r3, r0
 8003166:	2216      	movs	r2, #22
 8003168:	601a      	str	r2, [r3, #0]
	return -1;
 800316a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800316e:	4618      	mov	r0, r3
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
	...

08003178 <HAL_MspInit>:
void HAL_Encoder_Timer1_MspInit(void);
void HAL_Encoder_Timer2_MspInit(void);
void HAL_adcir_MspInit(void);

void HAL_MspInit(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800317e:	2300      	movs	r3, #0
 8003180:	617b      	str	r3, [r7, #20]
 8003182:	4b33      	ldr	r3, [pc, #204]	; (8003250 <HAL_MspInit+0xd8>)
 8003184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003186:	4a32      	ldr	r2, [pc, #200]	; (8003250 <HAL_MspInit+0xd8>)
 8003188:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800318c:	6453      	str	r3, [r2, #68]	; 0x44
 800318e:	4b30      	ldr	r3, [pc, #192]	; (8003250 <HAL_MspInit+0xd8>)
 8003190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003196:	617b      	str	r3, [r7, #20]
 8003198:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_PWR_CLK_ENABLE();
 800319a:	2300      	movs	r3, #0
 800319c:	613b      	str	r3, [r7, #16]
 800319e:	4b2c      	ldr	r3, [pc, #176]	; (8003250 <HAL_MspInit+0xd8>)
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	4a2b      	ldr	r2, [pc, #172]	; (8003250 <HAL_MspInit+0xd8>)
 80031a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031a8:	6413      	str	r3, [r2, #64]	; 0x40
 80031aa:	4b29      	ldr	r3, [pc, #164]	; (8003250 <HAL_MspInit+0xd8>)
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b2:	613b      	str	r3, [r7, #16]
 80031b4:	693b      	ldr	r3, [r7, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031b6:	2300      	movs	r3, #0
 80031b8:	60fb      	str	r3, [r7, #12]
 80031ba:	4b25      	ldr	r3, [pc, #148]	; (8003250 <HAL_MspInit+0xd8>)
 80031bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031be:	4a24      	ldr	r2, [pc, #144]	; (8003250 <HAL_MspInit+0xd8>)
 80031c0:	f043 0304 	orr.w	r3, r3, #4
 80031c4:	6313      	str	r3, [r2, #48]	; 0x30
 80031c6:	4b22      	ldr	r3, [pc, #136]	; (8003250 <HAL_MspInit+0xd8>)
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ca:	f003 0304 	and.w	r3, r3, #4
 80031ce:	60fb      	str	r3, [r7, #12]
 80031d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80031d2:	2300      	movs	r3, #0
 80031d4:	60bb      	str	r3, [r7, #8]
 80031d6:	4b1e      	ldr	r3, [pc, #120]	; (8003250 <HAL_MspInit+0xd8>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031da:	4a1d      	ldr	r2, [pc, #116]	; (8003250 <HAL_MspInit+0xd8>)
 80031dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031e0:	6313      	str	r3, [r2, #48]	; 0x30
 80031e2:	4b1b      	ldr	r3, [pc, #108]	; (8003250 <HAL_MspInit+0xd8>)
 80031e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ea:	60bb      	str	r3, [r7, #8]
 80031ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ee:	2300      	movs	r3, #0
 80031f0:	607b      	str	r3, [r7, #4]
 80031f2:	4b17      	ldr	r3, [pc, #92]	; (8003250 <HAL_MspInit+0xd8>)
 80031f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f6:	4a16      	ldr	r2, [pc, #88]	; (8003250 <HAL_MspInit+0xd8>)
 80031f8:	f043 0301 	orr.w	r3, r3, #1
 80031fc:	6313      	str	r3, [r2, #48]	; 0x30
 80031fe:	4b14      	ldr	r3, [pc, #80]	; (8003250 <HAL_MspInit+0xd8>)
 8003200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	607b      	str	r3, [r7, #4]
 8003208:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800320a:	2300      	movs	r3, #0
 800320c:	603b      	str	r3, [r7, #0]
 800320e:	4b10      	ldr	r3, [pc, #64]	; (8003250 <HAL_MspInit+0xd8>)
 8003210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003212:	4a0f      	ldr	r2, [pc, #60]	; (8003250 <HAL_MspInit+0xd8>)
 8003214:	f043 0302 	orr.w	r3, r3, #2
 8003218:	6313      	str	r3, [r2, #48]	; 0x30
 800321a:	4b0d      	ldr	r3, [pc, #52]	; (8003250 <HAL_MspInit+0xd8>)
 800321c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	603b      	str	r3, [r7, #0]
 8003224:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003226:	2200      	movs	r2, #0
 8003228:	210f      	movs	r1, #15
 800322a:	f06f 0001 	mvn.w	r0, #1
 800322e:	f001 f8d9 	bl	80043e4 <HAL_NVIC_SetPriority>

  HAL_PWM_Timer3_MspInit();
 8003232:	f000 f8a3 	bl	800337c <HAL_PWM_Timer3_MspInit>
  HAL_Encoder_Timer1_MspInit();
 8003236:	f000 f823 	bl	8003280 <HAL_Encoder_Timer1_MspInit>
  HAL_Encoder_Timer2_MspInit();
 800323a:	f000 f861 	bl	8003300 <HAL_Encoder_Timer2_MspInit>
  HAL_adcir_MspInit();
 800323e:	f000 f8fb 	bl	8003438 <HAL_adcir_MspInit>
  HAL_GPIO_MspInit();
 8003242:	f000 f807 	bl	8003254 <HAL_GPIO_MspInit>

}
 8003246:	bf00      	nop
 8003248:	3718      	adds	r7, #24
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	40023800 	.word	0x40023800

08003254 <HAL_GPIO_MspInit>:
/******************************************************************
			GPIO : contrôle période d'échantillonage
GPIO OUTPUT	-->	PB4
******************************************************************/
void HAL_GPIO_MspInit(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800325a:	2310      	movs	r3, #16
 800325c:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // hal_gpio.h
 800325e:	2301      	movs	r3, #1
 8003260:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003262:	2300      	movs	r3, #0
 8003264:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003266:	2301      	movs	r3, #1
 8003268:	613b      	str	r3, [r7, #16]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800326a:	1d3b      	adds	r3, r7, #4
 800326c:	4619      	mov	r1, r3
 800326e:	4803      	ldr	r0, [pc, #12]	; (800327c <HAL_GPIO_MspInit+0x28>)
 8003270:	f001 fcf2 	bl	8004c58 <HAL_GPIO_Init>

}
 8003274:	bf00      	nop
 8003276:	3718      	adds	r7, #24
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	40020400 	.word	0x40020400

08003280 <HAL_Encoder_Timer1_MspInit>:
PWM1/1	-->	PA8		-- Encodeur Voie A
PWM1/2	--> PA9		-- Encodeur Voie B
EXTI1	--> PB10		-- Index encodeur
******************************************************************/
void HAL_Encoder_Timer1_MspInit(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __TIM1_CLK_ENABLE();
 8003286:	2300      	movs	r3, #0
 8003288:	603b      	str	r3, [r7, #0]
 800328a:	4b1a      	ldr	r3, [pc, #104]	; (80032f4 <HAL_Encoder_Timer1_MspInit+0x74>)
 800328c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328e:	4a19      	ldr	r2, [pc, #100]	; (80032f4 <HAL_Encoder_Timer1_MspInit+0x74>)
 8003290:	f043 0301 	orr.w	r3, r3, #1
 8003294:	6453      	str	r3, [r2, #68]	; 0x44
 8003296:	4b17      	ldr	r3, [pc, #92]	; (80032f4 <HAL_Encoder_Timer1_MspInit+0x74>)
 8003298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	603b      	str	r3, [r7, #0]
 80032a0:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 80032a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80032a6:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP; // hal_gpio.h
 80032a8:	2302      	movs	r3, #2
 80032aa:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032ac:	2301      	movs	r3, #1
 80032ae:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80032b0:	2301      	movs	r3, #1
 80032b2:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF1_TIM1 ; // hal_gpio_ex.h
 80032b4:	2301      	movs	r3, #1
 80032b6:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032b8:	1d3b      	adds	r3, r7, #4
 80032ba:	4619      	mov	r1, r3
 80032bc:	480e      	ldr	r0, [pc, #56]	; (80032f8 <HAL_Encoder_Timer1_MspInit+0x78>)
 80032be:	f001 fccb 	bl	8004c58 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80032c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032c6:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80032c8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80032cc:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ce:	2300      	movs	r3, #0
 80032d0:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032d2:	1d3b      	adds	r3, r7, #4
 80032d4:	4619      	mov	r1, r3
 80032d6:	4809      	ldr	r0, [pc, #36]	; (80032fc <HAL_Encoder_Timer1_MspInit+0x7c>)
 80032d8:	f001 fcbe 	bl	8004c58 <HAL_GPIO_Init>

	  /* Enable and set EXTI Line0 Interrupt to the lowest priority */
	  HAL_NVIC_SetPriority(EXTI15_10_IRQn, EXTI15_10_IRQ_PRIO, 0);
 80032dc:	2200      	movs	r2, #0
 80032de:	2107      	movs	r1, #7
 80032e0:	2028      	movs	r0, #40	; 0x28
 80032e2:	f001 f87f 	bl	80043e4 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80032e6:	2028      	movs	r0, #40	; 0x28
 80032e8:	f001 f898 	bl	800441c <HAL_NVIC_EnableIRQ>
}
 80032ec:	bf00      	nop
 80032ee:	3718      	adds	r7, #24
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	40023800 	.word	0x40023800
 80032f8:	40020000 	.word	0x40020000
 80032fc:	40020400 	.word	0x40020400

08003300 <HAL_Encoder_Timer2_MspInit>:
PWM2/1	-->	PA0		-- Encodeur Voie A
PWM2/2	--> PA1		-- Encodeur Voie B
EXTI 	--> PC0		-- Index Moteur
******************************************************************/
void HAL_Encoder_Timer2_MspInit(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __TIM2_CLK_ENABLE();
 8003306:	2300      	movs	r3, #0
 8003308:	603b      	str	r3, [r7, #0]
 800330a:	4b19      	ldr	r3, [pc, #100]	; (8003370 <HAL_Encoder_Timer2_MspInit+0x70>)
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	4a18      	ldr	r2, [pc, #96]	; (8003370 <HAL_Encoder_Timer2_MspInit+0x70>)
 8003310:	f043 0301 	orr.w	r3, r3, #1
 8003314:	6413      	str	r3, [r2, #64]	; 0x40
 8003316:	4b16      	ldr	r3, [pc, #88]	; (8003370 <HAL_Encoder_Timer2_MspInit+0x70>)
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	603b      	str	r3, [r7, #0]
 8003320:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8003322:	2303      	movs	r3, #3
 8003324:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP; // hal_gpio.h
 8003326:	2302      	movs	r3, #2
 8003328:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800332a:	2301      	movs	r3, #1
 800332c:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 800332e:	2301      	movs	r3, #1
 8003330:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF1_TIM2 ; // hal_gpio_ex.h
 8003332:	2301      	movs	r3, #1
 8003334:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003336:	1d3b      	adds	r3, r7, #4
 8003338:	4619      	mov	r1, r3
 800333a:	480e      	ldr	r0, [pc, #56]	; (8003374 <HAL_Encoder_Timer2_MspInit+0x74>)
 800333c:	f001 fc8c 	bl	8004c58 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003340:	2301      	movs	r3, #1
 8003342:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003344:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003348:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334a:	2300      	movs	r3, #0
 800334c:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800334e:	1d3b      	adds	r3, r7, #4
 8003350:	4619      	mov	r1, r3
 8003352:	4809      	ldr	r0, [pc, #36]	; (8003378 <HAL_Encoder_Timer2_MspInit+0x78>)
 8003354:	f001 fc80 	bl	8004c58 <HAL_GPIO_Init>

	  /* Enable and set EXTI Line0 Interrupt to the lowest priority */
	  HAL_NVIC_SetPriority(EXTI0_IRQn, EXTI0_IRQ_PRIO, 0);
 8003358:	2200      	movs	r2, #0
 800335a:	2106      	movs	r1, #6
 800335c:	2006      	movs	r0, #6
 800335e:	f001 f841 	bl	80043e4 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003362:	2006      	movs	r0, #6
 8003364:	f001 f85a 	bl	800441c <HAL_NVIC_EnableIRQ>
}
 8003368:	bf00      	nop
 800336a:	3718      	adds	r7, #24
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40023800 	.word	0x40023800
 8003374:	40020000 	.word	0x40020000
 8003378:	40020800 	.word	0x40020800

0800337c <HAL_PWM_Timer3_MspInit>:
PA6 --> PWM3/1
PC7 --> PWM3/2
PB3 --> ENABLE MOTEUR (actif état Bas)
******************************************************************/
void HAL_PWM_Timer3_MspInit(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b086      	sub	sp, #24
 8003380:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __TIM3_CLK_ENABLE();
 8003382:	2300      	movs	r3, #0
 8003384:	603b      	str	r3, [r7, #0]
 8003386:	4b28      	ldr	r3, [pc, #160]	; (8003428 <HAL_PWM_Timer3_MspInit+0xac>)
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	4a27      	ldr	r2, [pc, #156]	; (8003428 <HAL_PWM_Timer3_MspInit+0xac>)
 800338c:	f043 0302 	orr.w	r3, r3, #2
 8003390:	6413      	str	r3, [r2, #64]	; 0x40
 8003392:	4b25      	ldr	r3, [pc, #148]	; (8003428 <HAL_PWM_Timer3_MspInit+0xac>)
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	603b      	str	r3, [r7, #0]
 800339c:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800339e:	2340      	movs	r3, #64	; 0x40
 80033a0:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a2:	2302      	movs	r3, #2
 80033a4:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033a6:	2301      	movs	r3, #1
 80033a8:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80033aa:	2301      	movs	r3, #1
 80033ac:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF2_TIM3 ; // hal_gpio_ex.h
 80033ae:	2302      	movs	r3, #2
 80033b0:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033b2:	1d3b      	adds	r3, r7, #4
 80033b4:	4619      	mov	r1, r3
 80033b6:	481d      	ldr	r0, [pc, #116]	; (800342c <HAL_PWM_Timer3_MspInit+0xb0>)
 80033b8:	f001 fc4e 	bl	8004c58 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80033bc:	2380      	movs	r3, #128	; 0x80
 80033be:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c0:	2302      	movs	r3, #2
 80033c2:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033c4:	2301      	movs	r3, #1
 80033c6:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80033c8:	2301      	movs	r3, #1
 80033ca:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF2_TIM3 ; // hal_gpio_ex.h
 80033cc:	2302      	movs	r3, #2
 80033ce:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033d0:	1d3b      	adds	r3, r7, #4
 80033d2:	4619      	mov	r1, r3
 80033d4:	4816      	ldr	r0, [pc, #88]	; (8003430 <HAL_PWM_Timer3_MspInit+0xb4>)
 80033d6:	f001 fc3f 	bl	8004c58 <HAL_GPIO_Init>

	  // ENABLE MOTEUR : SORTIE LOGIQUE PB3
	  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80033da:	2380      	movs	r3, #128	; 0x80
 80033dc:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033de:	2300      	movs	r3, #0
 80033e0:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e2:	2300      	movs	r3, #0
 80033e4:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033e6:	1d3b      	adds	r3, r7, #4
 80033e8:	4619      	mov	r1, r3
 80033ea:	4810      	ldr	r0, [pc, #64]	; (800342c <HAL_PWM_Timer3_MspInit+0xb0>)
 80033ec:	f001 fc34 	bl	8004c58 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 80033f0:	2201      	movs	r2, #1
 80033f2:	2180      	movs	r1, #128	; 0x80
 80033f4:	480d      	ldr	r0, [pc, #52]	; (800342c <HAL_PWM_Timer3_MspInit+0xb0>)
 80033f6:	f001 fdb3 	bl	8004f60 <HAL_GPIO_WritePin>

	  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80033fa:	2308      	movs	r3, #8
 80033fc:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033fe:	2301      	movs	r3, #1
 8003400:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003402:	2301      	movs	r3, #1
 8003404:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8003406:	2302      	movs	r3, #2
 8003408:	613b      	str	r3, [r7, #16]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800340a:	1d3b      	adds	r3, r7, #4
 800340c:	4619      	mov	r1, r3
 800340e:	4809      	ldr	r0, [pc, #36]	; (8003434 <HAL_PWM_Timer3_MspInit+0xb8>)
 8003410:	f001 fc22 	bl	8004c58 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8003414:	2201      	movs	r2, #1
 8003416:	2108      	movs	r1, #8
 8003418:	4806      	ldr	r0, [pc, #24]	; (8003434 <HAL_PWM_Timer3_MspInit+0xb8>)
 800341a:	f001 fda1 	bl	8004f60 <HAL_GPIO_WritePin>




}
 800341e:	bf00      	nop
 8003420:	3718      	adds	r7, #24
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	40023800 	.word	0x40023800
 800342c:	40020000 	.word	0x40020000
 8003430:	40020800 	.word	0x40020800
 8003434:	40020400 	.word	0x40020400

08003438 <HAL_adcir_MspInit>:
ADC1_4	--> PA4
ADC1_8	--> PB0
http://stm32f4-discovery.com/2014/04/library-06-ad-converter-on-stm32f4xx/
******************************************************************/
void HAL_adcir_MspInit(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;
	  /* Peripheral clock enable */
	  __ADC1_CLK_ENABLE();
 800343e:	2300      	movs	r3, #0
 8003440:	603b      	str	r3, [r7, #0]
 8003442:	4b13      	ldr	r3, [pc, #76]	; (8003490 <HAL_adcir_MspInit+0x58>)
 8003444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003446:	4a12      	ldr	r2, [pc, #72]	; (8003490 <HAL_adcir_MspInit+0x58>)
 8003448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800344c:	6453      	str	r3, [r2, #68]	; 0x44
 800344e:	4b10      	ldr	r3, [pc, #64]	; (8003490 <HAL_adcir_MspInit+0x58>)
 8003450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003456:	603b      	str	r3, [r7, #0]
 8003458:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_4 ;
 800345a:	2310      	movs	r3, #16
 800345c:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800345e:	2303      	movs	r3, #3
 8003460:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003462:	2300      	movs	r3, #0
 8003464:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003466:	1d3b      	adds	r3, r7, #4
 8003468:	4619      	mov	r1, r3
 800346a:	480a      	ldr	r0, [pc, #40]	; (8003494 <HAL_adcir_MspInit+0x5c>)
 800346c:	f001 fbf4 	bl	8004c58 <HAL_GPIO_Init>


	  GPIO_InitStruct.Pin = GPIO_PIN_0 ;
 8003470:	2301      	movs	r3, #1
 8003472:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003474:	2303      	movs	r3, #3
 8003476:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003478:	2300      	movs	r3, #0
 800347a:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800347c:	1d3b      	adds	r3, r7, #4
 800347e:	4619      	mov	r1, r3
 8003480:	4805      	ldr	r0, [pc, #20]	; (8003498 <HAL_adcir_MspInit+0x60>)
 8003482:	f001 fbe9 	bl	8004c58 <HAL_GPIO_Init>

}
 8003486:	bf00      	nop
 8003488:	3718      	adds	r7, #24
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	40023800 	.word	0x40023800
 8003494:	40020000 	.word	0x40020000
 8003498:	40020400 	.word	0x40020400

0800349c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
******************************************************************/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b08a      	sub	sp, #40	; 0x28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034a4:	f107 0314 	add.w	r3, r7, #20
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	605a      	str	r2, [r3, #4]
 80034ae:	609a      	str	r2, [r3, #8]
 80034b0:	60da      	str	r2, [r3, #12]
 80034b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a21      	ldr	r2, [pc, #132]	; (8003540 <HAL_I2C_MspInit+0xa4>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d13c      	bne.n	8003538 <HAL_I2C_MspInit+0x9c>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034be:	2300      	movs	r3, #0
 80034c0:	613b      	str	r3, [r7, #16]
 80034c2:	4b20      	ldr	r3, [pc, #128]	; (8003544 <HAL_I2C_MspInit+0xa8>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	4a1f      	ldr	r2, [pc, #124]	; (8003544 <HAL_I2C_MspInit+0xa8>)
 80034c8:	f043 0302 	orr.w	r3, r3, #2
 80034cc:	6313      	str	r3, [r2, #48]	; 0x30
 80034ce:	4b1d      	ldr	r3, [pc, #116]	; (8003544 <HAL_I2C_MspInit+0xa8>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	613b      	str	r3, [r7, #16]
 80034d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80034da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80034de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034e0:	2312      	movs	r3, #18
 80034e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e4:	2300      	movs	r3, #0
 80034e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034e8:	2303      	movs	r3, #3
 80034ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80034ec:	2304      	movs	r3, #4
 80034ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034f0:	f107 0314 	add.w	r3, r7, #20
 80034f4:	4619      	mov	r1, r3
 80034f6:	4814      	ldr	r0, [pc, #80]	; (8003548 <HAL_I2C_MspInit+0xac>)
 80034f8:	f001 fbae 	bl	8004c58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80034fc:	2300      	movs	r3, #0
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	4b10      	ldr	r3, [pc, #64]	; (8003544 <HAL_I2C_MspInit+0xa8>)
 8003502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003504:	4a0f      	ldr	r2, [pc, #60]	; (8003544 <HAL_I2C_MspInit+0xa8>)
 8003506:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800350a:	6413      	str	r3, [r2, #64]	; 0x40
 800350c:	4b0d      	ldr	r3, [pc, #52]	; (8003544 <HAL_I2C_MspInit+0xa8>)
 800350e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003514:	60fb      	str	r3, [r7, #12]
 8003516:	68fb      	ldr	r3, [r7, #12]

	  HAL_NVIC_SetPriority(I2C1_ER_IRQn, I2C1_ER_IRQ_PRIO, 0);
 8003518:	2200      	movs	r2, #0
 800351a:	2102      	movs	r1, #2
 800351c:	2020      	movs	r0, #32
 800351e:	f000 ff61 	bl	80043e4 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003522:	2020      	movs	r0, #32
 8003524:	f000 ff7a 	bl	800441c <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_SetPriority(I2C1_EV_IRQn, I2C1_EV_IRQ_PRIO, 0);
 8003528:	2200      	movs	r2, #0
 800352a:	210b      	movs	r1, #11
 800352c:	201f      	movs	r0, #31
 800352e:	f000 ff59 	bl	80043e4 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003532:	201f      	movs	r0, #31
 8003534:	f000 ff72 	bl	800441c <HAL_NVIC_EnableIRQ>



  }

}
 8003538:	bf00      	nop
 800353a:	3728      	adds	r7, #40	; 0x28
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40005400 	.word	0x40005400
 8003544:	40023800 	.word	0x40023800
 8003548:	40020400 	.word	0x40020400

0800354c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
******************************************************************/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b08c      	sub	sp, #48	; 0x30
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003554:	f107 031c 	add.w	r3, r7, #28
 8003558:	2200      	movs	r2, #0
 800355a:	601a      	str	r2, [r3, #0]
 800355c:	605a      	str	r2, [r3, #4]
 800355e:	609a      	str	r2, [r3, #8]
 8003560:	60da      	str	r2, [r3, #12]
 8003562:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4aa2      	ldr	r2, [pc, #648]	; (80037f4 <HAL_UART_MspInit+0x2a8>)
 800356a:	4293      	cmp	r3, r2
 800356c:	f040 80a5 	bne.w	80036ba <HAL_UART_MspInit+0x16e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003570:	2300      	movs	r3, #0
 8003572:	61bb      	str	r3, [r7, #24]
 8003574:	4ba0      	ldr	r3, [pc, #640]	; (80037f8 <HAL_UART_MspInit+0x2ac>)
 8003576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003578:	4a9f      	ldr	r2, [pc, #636]	; (80037f8 <HAL_UART_MspInit+0x2ac>)
 800357a:	f043 0310 	orr.w	r3, r3, #16
 800357e:	6453      	str	r3, [r2, #68]	; 0x44
 8003580:	4b9d      	ldr	r3, [pc, #628]	; (80037f8 <HAL_UART_MspInit+0x2ac>)
 8003582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003584:	f003 0310 	and.w	r3, r3, #16
 8003588:	61bb      	str	r3, [r7, #24]
 800358a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800358c:	2300      	movs	r3, #0
 800358e:	617b      	str	r3, [r7, #20]
 8003590:	4b99      	ldr	r3, [pc, #612]	; (80037f8 <HAL_UART_MspInit+0x2ac>)
 8003592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003594:	4a98      	ldr	r2, [pc, #608]	; (80037f8 <HAL_UART_MspInit+0x2ac>)
 8003596:	f043 0301 	orr.w	r3, r3, #1
 800359a:	6313      	str	r3, [r2, #48]	; 0x30
 800359c:	4b96      	ldr	r3, [pc, #600]	; (80037f8 <HAL_UART_MspInit+0x2ac>)
 800359e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	617b      	str	r3, [r7, #20]
 80035a6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80035a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ae:	2302      	movs	r3, #2
 80035b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b2:	2300      	movs	r3, #0
 80035b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035b6:	2303      	movs	r3, #3
 80035b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80035ba:	2307      	movs	r3, #7
 80035bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035be:	f107 031c 	add.w	r3, r7, #28
 80035c2:	4619      	mov	r1, r3
 80035c4:	488d      	ldr	r0, [pc, #564]	; (80037fc <HAL_UART_MspInit+0x2b0>)
 80035c6:	f001 fb47 	bl	8004c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80035ca:	2340      	movs	r3, #64	; 0x40
 80035cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ce:	2302      	movs	r3, #2
 80035d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d2:	2300      	movs	r3, #0
 80035d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035d6:	2303      	movs	r3, #3
 80035d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80035da:	2307      	movs	r3, #7
 80035dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035de:	f107 031c 	add.w	r3, r7, #28
 80035e2:	4619      	mov	r1, r3
 80035e4:	4886      	ldr	r0, [pc, #536]	; (8003800 <HAL_UART_MspInit+0x2b4>)
 80035e6:	f001 fb37 	bl	8004c58 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80035ea:	4b86      	ldr	r3, [pc, #536]	; (8003804 <HAL_UART_MspInit+0x2b8>)
 80035ec:	4a86      	ldr	r2, [pc, #536]	; (8003808 <HAL_UART_MspInit+0x2bc>)
 80035ee:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80035f0:	4b84      	ldr	r3, [pc, #528]	; (8003804 <HAL_UART_MspInit+0x2b8>)
 80035f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80035f6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035f8:	4b82      	ldr	r3, [pc, #520]	; (8003804 <HAL_UART_MspInit+0x2b8>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035fe:	4b81      	ldr	r3, [pc, #516]	; (8003804 <HAL_UART_MspInit+0x2b8>)
 8003600:	2200      	movs	r2, #0
 8003602:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003604:	4b7f      	ldr	r3, [pc, #508]	; (8003804 <HAL_UART_MspInit+0x2b8>)
 8003606:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800360a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800360c:	4b7d      	ldr	r3, [pc, #500]	; (8003804 <HAL_UART_MspInit+0x2b8>)
 800360e:	2200      	movs	r2, #0
 8003610:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003612:	4b7c      	ldr	r3, [pc, #496]	; (8003804 <HAL_UART_MspInit+0x2b8>)
 8003614:	2200      	movs	r2, #0
 8003616:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003618:	4b7a      	ldr	r3, [pc, #488]	; (8003804 <HAL_UART_MspInit+0x2b8>)
 800361a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800361e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003620:	4b78      	ldr	r3, [pc, #480]	; (8003804 <HAL_UART_MspInit+0x2b8>)
 8003622:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003626:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003628:	4b76      	ldr	r3, [pc, #472]	; (8003804 <HAL_UART_MspInit+0x2b8>)
 800362a:	2200      	movs	r2, #0
 800362c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800362e:	4875      	ldr	r0, [pc, #468]	; (8003804 <HAL_UART_MspInit+0x2b8>)
 8003630:	f000 ff02 	bl	8004438 <HAL_DMA_Init>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 800363a:	f7ff f9e5 	bl	8002a08 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a70      	ldr	r2, [pc, #448]	; (8003804 <HAL_UART_MspInit+0x2b8>)
 8003642:	639a      	str	r2, [r3, #56]	; 0x38
 8003644:	4a6f      	ldr	r2, [pc, #444]	; (8003804 <HAL_UART_MspInit+0x2b8>)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800364a:	4b70      	ldr	r3, [pc, #448]	; (800380c <HAL_UART_MspInit+0x2c0>)
 800364c:	4a70      	ldr	r2, [pc, #448]	; (8003810 <HAL_UART_MspInit+0x2c4>)
 800364e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8003650:	4b6e      	ldr	r3, [pc, #440]	; (800380c <HAL_UART_MspInit+0x2c0>)
 8003652:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003656:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003658:	4b6c      	ldr	r3, [pc, #432]	; (800380c <HAL_UART_MspInit+0x2c0>)
 800365a:	2240      	movs	r2, #64	; 0x40
 800365c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800365e:	4b6b      	ldr	r3, [pc, #428]	; (800380c <HAL_UART_MspInit+0x2c0>)
 8003660:	2200      	movs	r2, #0
 8003662:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003664:	4b69      	ldr	r3, [pc, #420]	; (800380c <HAL_UART_MspInit+0x2c0>)
 8003666:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800366a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800366c:	4b67      	ldr	r3, [pc, #412]	; (800380c <HAL_UART_MspInit+0x2c0>)
 800366e:	2200      	movs	r2, #0
 8003670:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003672:	4b66      	ldr	r3, [pc, #408]	; (800380c <HAL_UART_MspInit+0x2c0>)
 8003674:	2200      	movs	r2, #0
 8003676:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003678:	4b64      	ldr	r3, [pc, #400]	; (800380c <HAL_UART_MspInit+0x2c0>)
 800367a:	2200      	movs	r2, #0
 800367c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800367e:	4b63      	ldr	r3, [pc, #396]	; (800380c <HAL_UART_MspInit+0x2c0>)
 8003680:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003684:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003686:	4b61      	ldr	r3, [pc, #388]	; (800380c <HAL_UART_MspInit+0x2c0>)
 8003688:	2200      	movs	r2, #0
 800368a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800368c:	485f      	ldr	r0, [pc, #380]	; (800380c <HAL_UART_MspInit+0x2c0>)
 800368e:	f000 fed3 	bl	8004438 <HAL_DMA_Init>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d001      	beq.n	800369c <HAL_UART_MspInit+0x150>
    {
      Error_Handler();
 8003698:	f7ff f9b6 	bl	8002a08 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a5b      	ldr	r2, [pc, #364]	; (800380c <HAL_UART_MspInit+0x2c0>)
 80036a0:	635a      	str	r2, [r3, #52]	; 0x34
 80036a2:	4a5a      	ldr	r2, [pc, #360]	; (800380c <HAL_UART_MspInit+0x2c0>)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80036a8:	2200      	movs	r2, #0
 80036aa:	2105      	movs	r1, #5
 80036ac:	2025      	movs	r0, #37	; 0x25
 80036ae:	f000 fe99 	bl	80043e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80036b2:	2025      	movs	r0, #37	; 0x25
 80036b4:	f000 feb2 	bl	800441c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80036b8:	e098      	b.n	80037ec <HAL_UART_MspInit+0x2a0>
  else if(huart->Instance==USART2)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a55      	ldr	r2, [pc, #340]	; (8003814 <HAL_UART_MspInit+0x2c8>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	f040 8093 	bne.w	80037ec <HAL_UART_MspInit+0x2a0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80036c6:	2300      	movs	r3, #0
 80036c8:	613b      	str	r3, [r7, #16]
 80036ca:	4b4b      	ldr	r3, [pc, #300]	; (80037f8 <HAL_UART_MspInit+0x2ac>)
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	4a4a      	ldr	r2, [pc, #296]	; (80037f8 <HAL_UART_MspInit+0x2ac>)
 80036d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036d4:	6413      	str	r3, [r2, #64]	; 0x40
 80036d6:	4b48      	ldr	r3, [pc, #288]	; (80037f8 <HAL_UART_MspInit+0x2ac>)
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036de:	613b      	str	r3, [r7, #16]
 80036e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036e2:	2300      	movs	r3, #0
 80036e4:	60fb      	str	r3, [r7, #12]
 80036e6:	4b44      	ldr	r3, [pc, #272]	; (80037f8 <HAL_UART_MspInit+0x2ac>)
 80036e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ea:	4a43      	ldr	r2, [pc, #268]	; (80037f8 <HAL_UART_MspInit+0x2ac>)
 80036ec:	f043 0301 	orr.w	r3, r3, #1
 80036f0:	6313      	str	r3, [r2, #48]	; 0x30
 80036f2:	4b41      	ldr	r3, [pc, #260]	; (80037f8 <HAL_UART_MspInit+0x2ac>)
 80036f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	60fb      	str	r3, [r7, #12]
 80036fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80036fe:	230c      	movs	r3, #12
 8003700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003702:	2302      	movs	r3, #2
 8003704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003706:	2300      	movs	r3, #0
 8003708:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800370a:	2303      	movs	r3, #3
 800370c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800370e:	2307      	movs	r3, #7
 8003710:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003712:	f107 031c 	add.w	r3, r7, #28
 8003716:	4619      	mov	r1, r3
 8003718:	4838      	ldr	r0, [pc, #224]	; (80037fc <HAL_UART_MspInit+0x2b0>)
 800371a:	f001 fa9d 	bl	8004c58 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800371e:	4b3e      	ldr	r3, [pc, #248]	; (8003818 <HAL_UART_MspInit+0x2cc>)
 8003720:	4a3e      	ldr	r2, [pc, #248]	; (800381c <HAL_UART_MspInit+0x2d0>)
 8003722:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003724:	4b3c      	ldr	r3, [pc, #240]	; (8003818 <HAL_UART_MspInit+0x2cc>)
 8003726:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800372a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800372c:	4b3a      	ldr	r3, [pc, #232]	; (8003818 <HAL_UART_MspInit+0x2cc>)
 800372e:	2200      	movs	r2, #0
 8003730:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003732:	4b39      	ldr	r3, [pc, #228]	; (8003818 <HAL_UART_MspInit+0x2cc>)
 8003734:	2200      	movs	r2, #0
 8003736:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003738:	4b37      	ldr	r3, [pc, #220]	; (8003818 <HAL_UART_MspInit+0x2cc>)
 800373a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800373e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003740:	4b35      	ldr	r3, [pc, #212]	; (8003818 <HAL_UART_MspInit+0x2cc>)
 8003742:	2200      	movs	r2, #0
 8003744:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003746:	4b34      	ldr	r3, [pc, #208]	; (8003818 <HAL_UART_MspInit+0x2cc>)
 8003748:	2200      	movs	r2, #0
 800374a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800374c:	4b32      	ldr	r3, [pc, #200]	; (8003818 <HAL_UART_MspInit+0x2cc>)
 800374e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003752:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003754:	4b30      	ldr	r3, [pc, #192]	; (8003818 <HAL_UART_MspInit+0x2cc>)
 8003756:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800375a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800375c:	4b2e      	ldr	r3, [pc, #184]	; (8003818 <HAL_UART_MspInit+0x2cc>)
 800375e:	2200      	movs	r2, #0
 8003760:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003762:	482d      	ldr	r0, [pc, #180]	; (8003818 <HAL_UART_MspInit+0x2cc>)
 8003764:	f000 fe68 	bl	8004438 <HAL_DMA_Init>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <HAL_UART_MspInit+0x226>
      Error_Handler();
 800376e:	f7ff f94b 	bl	8002a08 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a28      	ldr	r2, [pc, #160]	; (8003818 <HAL_UART_MspInit+0x2cc>)
 8003776:	639a      	str	r2, [r3, #56]	; 0x38
 8003778:	4a27      	ldr	r2, [pc, #156]	; (8003818 <HAL_UART_MspInit+0x2cc>)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800377e:	4b28      	ldr	r3, [pc, #160]	; (8003820 <HAL_UART_MspInit+0x2d4>)
 8003780:	4a28      	ldr	r2, [pc, #160]	; (8003824 <HAL_UART_MspInit+0x2d8>)
 8003782:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003784:	4b26      	ldr	r3, [pc, #152]	; (8003820 <HAL_UART_MspInit+0x2d4>)
 8003786:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800378a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800378c:	4b24      	ldr	r3, [pc, #144]	; (8003820 <HAL_UART_MspInit+0x2d4>)
 800378e:	2240      	movs	r2, #64	; 0x40
 8003790:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003792:	4b23      	ldr	r3, [pc, #140]	; (8003820 <HAL_UART_MspInit+0x2d4>)
 8003794:	2200      	movs	r2, #0
 8003796:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003798:	4b21      	ldr	r3, [pc, #132]	; (8003820 <HAL_UART_MspInit+0x2d4>)
 800379a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800379e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037a0:	4b1f      	ldr	r3, [pc, #124]	; (8003820 <HAL_UART_MspInit+0x2d4>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037a6:	4b1e      	ldr	r3, [pc, #120]	; (8003820 <HAL_UART_MspInit+0x2d4>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80037ac:	4b1c      	ldr	r3, [pc, #112]	; (8003820 <HAL_UART_MspInit+0x2d4>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80037b2:	4b1b      	ldr	r3, [pc, #108]	; (8003820 <HAL_UART_MspInit+0x2d4>)
 80037b4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80037b8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037ba:	4b19      	ldr	r3, [pc, #100]	; (8003820 <HAL_UART_MspInit+0x2d4>)
 80037bc:	2200      	movs	r2, #0
 80037be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80037c0:	4817      	ldr	r0, [pc, #92]	; (8003820 <HAL_UART_MspInit+0x2d4>)
 80037c2:	f000 fe39 	bl	8004438 <HAL_DMA_Init>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <HAL_UART_MspInit+0x284>
      Error_Handler();
 80037cc:	f7ff f91c 	bl	8002a08 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a13      	ldr	r2, [pc, #76]	; (8003820 <HAL_UART_MspInit+0x2d4>)
 80037d4:	635a      	str	r2, [r3, #52]	; 0x34
 80037d6:	4a12      	ldr	r2, [pc, #72]	; (8003820 <HAL_UART_MspInit+0x2d4>)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80037dc:	2200      	movs	r2, #0
 80037de:	2105      	movs	r1, #5
 80037e0:	2026      	movs	r0, #38	; 0x26
 80037e2:	f000 fdff 	bl	80043e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80037e6:	2026      	movs	r0, #38	; 0x26
 80037e8:	f000 fe18 	bl	800441c <HAL_NVIC_EnableIRQ>
}
 80037ec:	bf00      	nop
 80037ee:	3730      	adds	r7, #48	; 0x30
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	40011000 	.word	0x40011000
 80037f8:	40023800 	.word	0x40023800
 80037fc:	40020000 	.word	0x40020000
 8003800:	40020400 	.word	0x40020400
 8003804:	20004a40 	.word	0x20004a40
 8003808:	40026440 	.word	0x40026440
 800380c:	20004aa0 	.word	0x20004aa0
 8003810:	400264b8 	.word	0x400264b8
 8003814:	40004400 	.word	0x40004400
 8003818:	20004b00 	.word	0x20004b00
 800381c:	40026088 	.word	0x40026088
 8003820:	20004b60 	.word	0x20004b60
 8003824:	400260a0 	.word	0x400260a0

08003828 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b08c      	sub	sp, #48	; 0x30
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003830:	2300      	movs	r3, #0
 8003832:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003834:	2300      	movs	r3, #0
 8003836:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8003838:	2300      	movs	r3, #0
 800383a:	60bb      	str	r3, [r7, #8]
 800383c:	4b2f      	ldr	r3, [pc, #188]	; (80038fc <HAL_InitTick+0xd4>)
 800383e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003840:	4a2e      	ldr	r2, [pc, #184]	; (80038fc <HAL_InitTick+0xd4>)
 8003842:	f043 0304 	orr.w	r3, r3, #4
 8003846:	6413      	str	r3, [r2, #64]	; 0x40
 8003848:	4b2c      	ldr	r3, [pc, #176]	; (80038fc <HAL_InitTick+0xd4>)
 800384a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384c:	f003 0304 	and.w	r3, r3, #4
 8003850:	60bb      	str	r3, [r7, #8]
 8003852:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003854:	f107 020c 	add.w	r2, r7, #12
 8003858:	f107 0310 	add.w	r3, r7, #16
 800385c:	4611      	mov	r1, r2
 800385e:	4618      	mov	r0, r3
 8003860:	f004 fc90 	bl	8008184 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003864:	f004 fc7a 	bl	800815c <HAL_RCC_GetPCLK2Freq>
 8003868:	4603      	mov	r3, r0
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800386e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003870:	4a23      	ldr	r2, [pc, #140]	; (8003900 <HAL_InitTick+0xd8>)
 8003872:	fba2 2303 	umull	r2, r3, r2, r3
 8003876:	0c9b      	lsrs	r3, r3, #18
 8003878:	3b01      	subs	r3, #1
 800387a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim4.Instance = TIM4;
 800387c:	4b21      	ldr	r3, [pc, #132]	; (8003904 <HAL_InitTick+0xdc>)
 800387e:	4a22      	ldr	r2, [pc, #136]	; (8003908 <HAL_InitTick+0xe0>)
 8003880:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8003882:	4b20      	ldr	r3, [pc, #128]	; (8003904 <HAL_InitTick+0xdc>)
 8003884:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003888:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800388a:	4a1e      	ldr	r2, [pc, #120]	; (8003904 <HAL_InitTick+0xdc>)
 800388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8003890:	4b1c      	ldr	r3, [pc, #112]	; (8003904 <HAL_InitTick+0xdc>)
 8003892:	2200      	movs	r2, #0
 8003894:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003896:	4b1b      	ldr	r3, [pc, #108]	; (8003904 <HAL_InitTick+0xdc>)
 8003898:	2200      	movs	r2, #0
 800389a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800389c:	4b19      	ldr	r3, [pc, #100]	; (8003904 <HAL_InitTick+0xdc>)
 800389e:	2200      	movs	r2, #0
 80038a0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80038a2:	4818      	ldr	r0, [pc, #96]	; (8003904 <HAL_InitTick+0xdc>)
 80038a4:	f004 fca0 	bl	80081e8 <HAL_TIM_Base_Init>
 80038a8:	4603      	mov	r3, r0
 80038aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80038ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d11b      	bne.n	80038ee <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80038b6:	4813      	ldr	r0, [pc, #76]	; (8003904 <HAL_InitTick+0xdc>)
 80038b8:	f004 fcf0 	bl	800829c <HAL_TIM_Base_Start_IT>
 80038bc:	4603      	mov	r3, r0
 80038be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80038c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d111      	bne.n	80038ee <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80038ca:	201e      	movs	r0, #30
 80038cc:	f000 fda6 	bl	800441c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b0f      	cmp	r3, #15
 80038d4:	d808      	bhi.n	80038e8 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80038d6:	2200      	movs	r2, #0
 80038d8:	6879      	ldr	r1, [r7, #4]
 80038da:	201e      	movs	r0, #30
 80038dc:	f000 fd82 	bl	80043e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80038e0:	4a0a      	ldr	r2, [pc, #40]	; (800390c <HAL_InitTick+0xe4>)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6013      	str	r3, [r2, #0]
 80038e6:	e002      	b.n	80038ee <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80038ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3730      	adds	r7, #48	; 0x30
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	40023800 	.word	0x40023800
 8003900:	431bde83 	.word	0x431bde83
 8003904:	20004ce8 	.word	0x20004ce8
 8003908:	40000800 	.word	0x40000800
 800390c:	20000018 	.word	0x20000018

08003910 <NMI_Handler>:
extern TIM_HandleTypeDef htim4;
extern I2C_HandleTypeDef hi2c1;


void NMI_Handler(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  while (1)
 8003914:	e7fe      	b.n	8003914 <NMI_Handler+0x4>

08003916 <HardFault_Handler>:
  {
  }
}

void HardFault_Handler(void)
{
 8003916:	b480      	push	{r7}
 8003918:	af00      	add	r7, sp, #0

  while (1)
 800391a:	e7fe      	b.n	800391a <HardFault_Handler+0x4>

0800391c <MemManage_Handler>:
  {
  }
}

void MemManage_Handler(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  while (1)
 8003920:	e7fe      	b.n	8003920 <MemManage_Handler+0x4>

08003922 <BusFault_Handler>:
  }
}


void BusFault_Handler(void)
{
 8003922:	b480      	push	{r7}
 8003924:	af00      	add	r7, sp, #0
  while (1)
 8003926:	e7fe      	b.n	8003926 <BusFault_Handler+0x4>

08003928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  while (1)
 800392c:	e7fe      	b.n	800392c <UsageFault_Handler+0x4>

0800392e <DebugMon_Handler>:
  {
  }
}

void DebugMon_Handler(void)
{
 800392e:	b480      	push	{r7}
 8003930:	af00      	add	r7, sp, #0
}
 8003932:	bf00      	nop
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <DMA1_Stream5_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/

void DMA1_Stream5_IRQHandler(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003940:	4802      	ldr	r0, [pc, #8]	; (800394c <DMA1_Stream5_IRQHandler+0x10>)
 8003942:	f000 ff11 	bl	8004768 <HAL_DMA_IRQHandler>
}
 8003946:	bf00      	nop
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	20004b00 	.word	0x20004b00

08003950 <DMA1_Stream6_IRQHandler>:


void DMA1_Stream6_IRQHandler(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003954:	4802      	ldr	r0, [pc, #8]	; (8003960 <DMA1_Stream6_IRQHandler+0x10>)
 8003956:	f000 ff07 	bl	8004768 <HAL_DMA_IRQHandler>
}
 800395a:	bf00      	nop
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	20004b60 	.word	0x20004b60

08003964 <TIM4_IRQHandler>:
{
  HAL_TIM_IRQHandler(&htim1);
}*/

void TIM4_IRQHandler(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim4);
 8003968:	4802      	ldr	r0, [pc, #8]	; (8003974 <TIM4_IRQHandler+0x10>)
 800396a:	f004 fee7 	bl	800873c <HAL_TIM_IRQHandler>
}
 800396e:	bf00      	nop
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	20004ce8 	.word	0x20004ce8

08003978 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart1);
 800397c:	4802      	ldr	r0, [pc, #8]	; (8003988 <USART1_IRQHandler+0x10>)
 800397e:	f005 fdc3 	bl	8009508 <HAL_UART_IRQHandler>
}
 8003982:	bf00      	nop
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	200049b8 	.word	0x200049b8

0800398c <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart2);
 8003990:	4802      	ldr	r0, [pc, #8]	; (800399c <USART2_IRQHandler+0x10>)
 8003992:	f005 fdb9 	bl	8009508 <HAL_UART_IRQHandler>
}
 8003996:	bf00      	nop
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	200049fc 	.word	0x200049fc

080039a0 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80039a4:	4802      	ldr	r0, [pc, #8]	; (80039b0 <DMA2_Stream2_IRQHandler+0x10>)
 80039a6:	f000 fedf 	bl	8004768 <HAL_DMA_IRQHandler>
}
 80039aa:	bf00      	nop
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	20004a40 	.word	0x20004a40

080039b4 <DMA2_Stream7_IRQHandler>:

void DMA2_Stream7_IRQHandler(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80039b8:	4802      	ldr	r0, [pc, #8]	; (80039c4 <DMA2_Stream7_IRQHandler+0x10>)
 80039ba:	f000 fed5 	bl	8004768 <HAL_DMA_IRQHandler>
}
 80039be:	bf00      	nop
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	20004aa0 	.word	0x20004aa0

080039c8 <EXTI15_10_IRQHandler>:

//=======================================================
//		ENCODER INDEX LEFT
//=======================================================
void EXTI15_10_IRQHandler(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80039cc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80039d0:	f001 fae0 	bl	8004f94 <HAL_GPIO_EXTI_IRQHandler>
}
 80039d4:	bf00      	nop
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <EXTI0_IRQHandler>:
//=======================================================
//		ENCODER INDEX RIGHT
//=======================================================

void EXTI0_IRQHandler(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80039dc:	2001      	movs	r0, #1
 80039de:	f001 fad9 	bl	8004f94 <HAL_GPIO_EXTI_IRQHandler>
}
 80039e2:	bf00      	nop
 80039e4:	bd80      	pop	{r7, pc}
	...

080039e8 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
	  HAL_I2C_EV_IRQHandler(&hi2c1);
 80039ec:	4802      	ldr	r0, [pc, #8]	; (80039f8 <I2C1_EV_IRQHandler+0x10>)
 80039ee:	f001 ff51 	bl	8005894 <HAL_I2C_EV_IRQHandler>
}
 80039f2:	bf00      	nop
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	20004964 	.word	0x20004964

080039fc <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
	  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003a00:	4802      	ldr	r0, [pc, #8]	; (8003a0c <I2C1_ER_IRQHandler+0x10>)
 8003a02:	f002 f89a 	bl	8005b3a <HAL_I2C_ER_IRQHandler>
}
 8003a06:	bf00      	nop
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	20004964 	.word	0x20004964

08003a10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a18:	4a14      	ldr	r2, [pc, #80]	; (8003a6c <_sbrk+0x5c>)
 8003a1a:	4b15      	ldr	r3, [pc, #84]	; (8003a70 <_sbrk+0x60>)
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a24:	4b13      	ldr	r3, [pc, #76]	; (8003a74 <_sbrk+0x64>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d102      	bne.n	8003a32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a2c:	4b11      	ldr	r3, [pc, #68]	; (8003a74 <_sbrk+0x64>)
 8003a2e:	4a12      	ldr	r2, [pc, #72]	; (8003a78 <_sbrk+0x68>)
 8003a30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a32:	4b10      	ldr	r3, [pc, #64]	; (8003a74 <_sbrk+0x64>)
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4413      	add	r3, r2
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d207      	bcs.n	8003a50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a40:	f013 fea6 	bl	8017790 <__errno>
 8003a44:	4603      	mov	r3, r0
 8003a46:	220c      	movs	r2, #12
 8003a48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a4e:	e009      	b.n	8003a64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a50:	4b08      	ldr	r3, [pc, #32]	; (8003a74 <_sbrk+0x64>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a56:	4b07      	ldr	r3, [pc, #28]	; (8003a74 <_sbrk+0x64>)
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	4a05      	ldr	r2, [pc, #20]	; (8003a74 <_sbrk+0x64>)
 8003a60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a62:	68fb      	ldr	r3, [r7, #12]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3718      	adds	r7, #24
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	20020000 	.word	0x20020000
 8003a70:	00000400 	.word	0x00000400
 8003a74:	20004d30 	.word	0x20004d30
 8003a78:	2000e828 	.word	0x2000e828

08003a7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a80:	4b06      	ldr	r3, [pc, #24]	; (8003a9c <SystemInit+0x20>)
 8003a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a86:	4a05      	ldr	r2, [pc, #20]	; (8003a9c <SystemInit+0x20>)
 8003a88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a90:	bf00      	nop
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	e000ed00 	.word	0xe000ed00

08003aa0 <SystemClock_Config>:


#include "main.h"

void SystemClock_Config(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b094      	sub	sp, #80	; 0x50
 8003aa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003aa6:	f107 0320 	add.w	r3, r7, #32
 8003aaa:	2230      	movs	r2, #48	; 0x30
 8003aac:	2100      	movs	r1, #0
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f013 fd84 	bl	80175bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ab4:	f107 030c 	add.w	r3, r7, #12
 8003ab8:	2200      	movs	r2, #0
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	605a      	str	r2, [r3, #4]
 8003abe:	609a      	str	r2, [r3, #8]
 8003ac0:	60da      	str	r2, [r3, #12]
 8003ac2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	60bb      	str	r3, [r7, #8]
 8003ac8:	4b28      	ldr	r3, [pc, #160]	; (8003b6c <SystemClock_Config+0xcc>)
 8003aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003acc:	4a27      	ldr	r2, [pc, #156]	; (8003b6c <SystemClock_Config+0xcc>)
 8003ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ad2:	6413      	str	r3, [r2, #64]	; 0x40
 8003ad4:	4b25      	ldr	r3, [pc, #148]	; (8003b6c <SystemClock_Config+0xcc>)
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003adc:	60bb      	str	r3, [r7, #8]
 8003ade:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	607b      	str	r3, [r7, #4]
 8003ae4:	4b22      	ldr	r3, [pc, #136]	; (8003b70 <SystemClock_Config+0xd0>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a21      	ldr	r2, [pc, #132]	; (8003b70 <SystemClock_Config+0xd0>)
 8003aea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003aee:	6013      	str	r3, [r2, #0]
 8003af0:	4b1f      	ldr	r3, [pc, #124]	; (8003b70 <SystemClock_Config+0xd0>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003af8:	607b      	str	r3, [r7, #4]
 8003afa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003afc:	2301      	movs	r3, #1
 8003afe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003b00:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003b04:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b06:	2302      	movs	r3, #2
 8003b08:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003b0a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003b10:	2308      	movs	r3, #8
 8003b12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8003b14:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8003b18:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8003b1a:	2306      	movs	r3, #6
 8003b1c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003b1e:	2304      	movs	r3, #4
 8003b20:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b22:	f107 0320 	add.w	r3, r7, #32
 8003b26:	4618      	mov	r0, r3
 8003b28:	f003 fe94 	bl	8007854 <HAL_RCC_OscConfig>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8003b32:	f7fe ff69 	bl	8002a08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b36:	230f      	movs	r3, #15
 8003b38:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003b42:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003b46:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8003b48:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003b4c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003b4e:	f107 030c 	add.w	r3, r7, #12
 8003b52:	2102      	movs	r1, #2
 8003b54:	4618      	mov	r0, r3
 8003b56:	f004 f8f5 	bl	8007d44 <HAL_RCC_ClockConfig>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003b60:	f7fe ff52 	bl	8002a08 <Error_Handler>
  }
}
 8003b64:	bf00      	nop
 8003b66:	3750      	adds	r7, #80	; 0x50
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	40023800 	.word	0x40023800
 8003b70:	40007000 	.word	0x40007000

08003b74 <num2str>:
#include "util.h"

//=================================================================
void num2str(char *s, unsigned int number, unsigned int base, unsigned int size, int sp)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b089      	sub	sp, #36	; 0x24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
 8003b80:	603b      	str	r3, [r7, #0]
        static char  hexChars[] = "0123456789ABCDEF";

        char *p=s;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	617b      	str	r3, [r7, #20]
        unsigned int i;
        char tmp;

        // get digits
        do {
                *s++=hexChars[number % base];
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	fbb3 f2f2 	udiv	r2, r3, r2
 8003b8e:	6879      	ldr	r1, [r7, #4]
 8003b90:	fb01 f202 	mul.w	r2, r1, r2
 8003b94:	1a9a      	subs	r2, r3, r2
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	1c59      	adds	r1, r3, #1
 8003b9a:	60f9      	str	r1, [r7, #12]
 8003b9c:	4936      	ldr	r1, [pc, #216]	; (8003c78 <num2str+0x104>)
 8003b9e:	5c8a      	ldrb	r2, [r1, r2]
 8003ba0:	701a      	strb	r2, [r3, #0]
        } while (number /= base);
 8003ba2:	68ba      	ldr	r2, [r7, #8]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003baa:	60bb      	str	r3, [r7, #8]
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1e9      	bne.n	8003b86 <num2str+0x12>
        *s='\0';
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	701a      	strb	r2, [r3, #0]

        // reverse string
        cnt=s-p;
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	613b      	str	r3, [r7, #16]
        for (i=0;i<cnt/2;i++) {
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	61fb      	str	r3, [r7, #28]
 8003bc4:	e01a      	b.n	8003bfc <num2str+0x88>
                tmp=p[i]; p[i] = p[cnt-i-1]; p[cnt-i-1]=tmp;
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	4413      	add	r3, r2
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	76fb      	strb	r3, [r7, #27]
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	441a      	add	r2, r3
 8003bdc:	6979      	ldr	r1, [r7, #20]
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	440b      	add	r3, r1
 8003be2:	7812      	ldrb	r2, [r2, #0]
 8003be4:	701a      	strb	r2, [r3, #0]
 8003be6:	693a      	ldr	r2, [r7, #16]
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	3b01      	subs	r3, #1
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	7efa      	ldrb	r2, [r7, #27]
 8003bf4:	701a      	strb	r2, [r3, #0]
        for (i=0;i<cnt/2;i++) {
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	61fb      	str	r3, [r7, #28]
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	085b      	lsrs	r3, r3, #1
 8003c00:	69fa      	ldr	r2, [r7, #28]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d3df      	bcc.n	8003bc6 <num2str+0x52>
        }

        // add extra space
        if (cnt<size) {
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d22d      	bcs.n	8003c6a <num2str+0xf6>
                for (i=cnt;i==0;i--)
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	61fb      	str	r3, [r7, #28]
 8003c12:	e00e      	b.n	8003c32 <num2str+0xbe>
                		{p[i+size-cnt]=p[i];}
 8003c14:	697a      	ldr	r2, [r7, #20]
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	441a      	add	r2, r3
 8003c1a:	69f9      	ldr	r1, [r7, #28]
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	4419      	add	r1, r3
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	1acb      	subs	r3, r1, r3
 8003c24:	6979      	ldr	r1, [r7, #20]
 8003c26:	440b      	add	r3, r1
 8003c28:	7812      	ldrb	r2, [r2, #0]
 8003c2a:	701a      	strb	r2, [r3, #0]
                for (i=cnt;i==0;i--)
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	61fb      	str	r3, [r7, #28]
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d0ed      	beq.n	8003c14 <num2str+0xa0>
                if (sp) tmp=' '; else tmp='0';
 8003c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d002      	beq.n	8003c44 <num2str+0xd0>
 8003c3e:	2320      	movs	r3, #32
 8003c40:	76fb      	strb	r3, [r7, #27]
 8003c42:	e001      	b.n	8003c48 <num2str+0xd4>
 8003c44:	2330      	movs	r3, #48	; 0x30
 8003c46:	76fb      	strb	r3, [r7, #27]
                for (i=0;i<size-cnt;i++) p[i]=tmp;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	61fb      	str	r3, [r7, #28]
 8003c4c:	e007      	b.n	8003c5e <num2str+0xea>
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	4413      	add	r3, r2
 8003c54:	7efa      	ldrb	r2, [r7, #27]
 8003c56:	701a      	strb	r2, [r3, #0]
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	61fb      	str	r3, [r7, #28]
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	69fa      	ldr	r2, [r7, #28]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d3f1      	bcc.n	8003c4e <num2str+0xda>
        }
}
 8003c6a:	bf00      	nop
 8003c6c:	3724      	adds	r7, #36	; 0x24
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	20000004 	.word	0x20000004

08003c7c <str2num>:

//=================================================================
unsigned int str2num(char *s, unsigned base)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b087      	sub	sp, #28
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
	unsigned int u=0, d;
 8003c86:	2300      	movs	r3, #0
 8003c88:	617b      	str	r3, [r7, #20]
	char ch=*s++;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	1c5a      	adds	r2, r3, #1
 8003c8e:	607a      	str	r2, [r7, #4]
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	73fb      	strb	r3, [r7, #15]
	while (ch) {
 8003c94:	e02e      	b.n	8003cf4 <str2num+0x78>
		if ((ch>='0') && (ch<='9')) d=ch-'0';
 8003c96:	7bfb      	ldrb	r3, [r7, #15]
 8003c98:	2b2f      	cmp	r3, #47	; 0x2f
 8003c9a:	d906      	bls.n	8003caa <str2num+0x2e>
 8003c9c:	7bfb      	ldrb	r3, [r7, #15]
 8003c9e:	2b39      	cmp	r3, #57	; 0x39
 8003ca0:	d803      	bhi.n	8003caa <str2num+0x2e>
 8003ca2:	7bfb      	ldrb	r3, [r7, #15]
 8003ca4:	3b30      	subs	r3, #48	; 0x30
 8003ca6:	613b      	str	r3, [r7, #16]
 8003ca8:	e018      	b.n	8003cdc <str2num+0x60>
		else if ((base==16) && (ch>='A') && (ch<='F')) d=ch-'A'+10;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	2b10      	cmp	r3, #16
 8003cae:	d109      	bne.n	8003cc4 <str2num+0x48>
 8003cb0:	7bfb      	ldrb	r3, [r7, #15]
 8003cb2:	2b40      	cmp	r3, #64	; 0x40
 8003cb4:	d906      	bls.n	8003cc4 <str2num+0x48>
 8003cb6:	7bfb      	ldrb	r3, [r7, #15]
 8003cb8:	2b46      	cmp	r3, #70	; 0x46
 8003cba:	d803      	bhi.n	8003cc4 <str2num+0x48>
 8003cbc:	7bfb      	ldrb	r3, [r7, #15]
 8003cbe:	3b37      	subs	r3, #55	; 0x37
 8003cc0:	613b      	str	r3, [r7, #16]
 8003cc2:	e00b      	b.n	8003cdc <str2num+0x60>
		else if ((base==16) && (ch>='a') && (ch<='f')) d=ch-'a'+10;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	2b10      	cmp	r3, #16
 8003cc8:	d117      	bne.n	8003cfa <str2num+0x7e>
 8003cca:	7bfb      	ldrb	r3, [r7, #15]
 8003ccc:	2b60      	cmp	r3, #96	; 0x60
 8003cce:	d914      	bls.n	8003cfa <str2num+0x7e>
 8003cd0:	7bfb      	ldrb	r3, [r7, #15]
 8003cd2:	2b66      	cmp	r3, #102	; 0x66
 8003cd4:	d811      	bhi.n	8003cfa <str2num+0x7e>
 8003cd6:	7bfb      	ldrb	r3, [r7, #15]
 8003cd8:	3b57      	subs	r3, #87	; 0x57
 8003cda:	613b      	str	r3, [r7, #16]
		else break;
		u=d+base*u;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	fb02 f303 	mul.w	r3, r2, r3
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	617b      	str	r3, [r7, #20]
		ch=*s++;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	1c5a      	adds	r2, r3, #1
 8003cee:	607a      	str	r2, [r7, #4]
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	73fb      	strb	r3, [r7, #15]
	while (ch) {
 8003cf4:	7bfb      	ldrb	r3, [r7, #15]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1cd      	bne.n	8003c96 <str2num+0x1a>
	}
	return u;
 8003cfa:	697b      	ldr	r3, [r7, #20]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	371c      	adds	r7, #28
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <reverse>:

//=================================================================
void reverse(char *str, int len)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b087      	sub	sp, #28
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
    int i=0, j=len-1, temp;
 8003d12:	2300      	movs	r3, #0
 8003d14:	617b      	str	r3, [r7, #20]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	613b      	str	r3, [r7, #16]
    while (i<j)
 8003d1c:	e018      	b.n	8003d50 <reverse+0x48>
    {
        temp = str[i];
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	4413      	add	r3, r2
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	441a      	add	r2, r3
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	6879      	ldr	r1, [r7, #4]
 8003d32:	440b      	add	r3, r1
 8003d34:	7812      	ldrb	r2, [r2, #0]
 8003d36:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	b2d2      	uxtb	r2, r2
 8003d42:	701a      	strb	r2, [r3, #0]
        i++; j--;
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	3301      	adds	r3, #1
 8003d48:	617b      	str	r3, [r7, #20]
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	613b      	str	r3, [r7, #16]
    while (i<j)
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	dbe2      	blt.n	8003d1e <reverse+0x16>
    }
}
 8003d58:	bf00      	nop
 8003d5a:	bf00      	nop
 8003d5c:	371c      	adds	r7, #28
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
	...

08003d68 <intToStr>:

//=================================================================
int intToStr(int x, char str[], int d)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
    int i = 0;
 8003d74:	2300      	movs	r3, #0
 8003d76:	617b      	str	r3, [r7, #20]
    while (x)
 8003d78:	e01d      	b.n	8003db6 <intToStr+0x4e>
    {
        str[i++] = (x%10) + '0';
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	4b1d      	ldr	r3, [pc, #116]	; (8003df4 <intToStr+0x8c>)
 8003d7e:	fb83 1302 	smull	r1, r3, r3, r2
 8003d82:	1099      	asrs	r1, r3, #2
 8003d84:	17d3      	asrs	r3, r2, #31
 8003d86:	1ac9      	subs	r1, r1, r3
 8003d88:	460b      	mov	r3, r1
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	440b      	add	r3, r1
 8003d8e:	005b      	lsls	r3, r3, #1
 8003d90:	1ad1      	subs	r1, r2, r3
 8003d92:	b2ca      	uxtb	r2, r1
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	1c59      	adds	r1, r3, #1
 8003d98:	6179      	str	r1, [r7, #20]
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	440b      	add	r3, r1
 8003da0:	3230      	adds	r2, #48	; 0x30
 8003da2:	b2d2      	uxtb	r2, r2
 8003da4:	701a      	strb	r2, [r3, #0]
        x = x/10;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	4a12      	ldr	r2, [pc, #72]	; (8003df4 <intToStr+0x8c>)
 8003daa:	fb82 1203 	smull	r1, r2, r2, r3
 8003dae:	1092      	asrs	r2, r2, #2
 8003db0:	17db      	asrs	r3, r3, #31
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	60fb      	str	r3, [r7, #12]
    while (x)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1de      	bne.n	8003d7a <intToStr+0x12>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 8003dbc:	e007      	b.n	8003dce <intToStr+0x66>
        str[i++] = '0';
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	1c5a      	adds	r2, r3, #1
 8003dc2:	617a      	str	r2, [r7, #20]
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	4413      	add	r3, r2
 8003dca:	2230      	movs	r2, #48	; 0x30
 8003dcc:	701a      	strb	r2, [r3, #0]
    while (i < d)
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	dbf3      	blt.n	8003dbe <intToStr+0x56>

    reverse(str, i);
 8003dd6:	6979      	ldr	r1, [r7, #20]
 8003dd8:	68b8      	ldr	r0, [r7, #8]
 8003dda:	f7ff ff95 	bl	8003d08 <reverse>
    str[i] = '\0';
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	68ba      	ldr	r2, [r7, #8]
 8003de2:	4413      	add	r3, r2
 8003de4:	2200      	movs	r2, #0
 8003de6:	701a      	strb	r2, [r3, #0]
    return i;
 8003de8:	697b      	ldr	r3, [r7, #20]
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3718      	adds	r7, #24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	66666667 	.word	0x66666667

08003df8 <float2str>:
//=================================================================
void float2str( char *res, float n, int afterpoint)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b088      	sub	sp, #32
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	ed87 0a02 	vstr	s0, [r7, #8]
 8003e04:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 8003e06:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e0e:	ee17 3a90 	vmov	r3, s15
 8003e12:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	ee07 3a90 	vmov	s15, r3
 8003e1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e1e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003e22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e26:	edc7 7a06 	vstr	s15, [r7, #24]

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	68f9      	ldr	r1, [r7, #12]
 8003e2e:	69f8      	ldr	r0, [r7, #28]
 8003e30:	f7ff ff9a 	bl	8003d68 <intToStr>
 8003e34:	6178      	str	r0, [r7, #20]

    // check for display option after point
    if (afterpoint != 0)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d025      	beq.n	8003e88 <float2str+0x90>
    {
        res[i] = '.';  // add dot
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	4413      	add	r3, r2
 8003e42:	222e      	movs	r2, #46	; 0x2e
 8003e44:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter is needed
        // to handle cases like 233.007
        fpart = fpart * (float)myPow(10.0, afterpoint);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8003e90 <float2str+0x98>
 8003e4c:	f000 f824 	bl	8003e98 <myPow>
 8003e50:	ec53 2b10 	vmov	r2, r3, d0
 8003e54:	4610      	mov	r0, r2
 8003e56:	4619      	mov	r1, r3
 8003e58:	f7fc fe80 	bl	8000b5c <__aeabi_d2f>
 8003e5c:	ee07 0a10 	vmov	s14, r0
 8003e60:	edd7 7a06 	vldr	s15, [r7, #24]
 8003e64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e68:	edc7 7a06 	vstr	s15, [r7, #24]

        intToStr((int)fpart, res + i + 1, afterpoint);
 8003e6c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003e70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	3301      	adds	r3, #1
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	4619      	mov	r1, r3
 8003e80:	ee17 0a90 	vmov	r0, s15
 8003e84:	f7ff ff70 	bl	8003d68 <intToStr>
    }
}
 8003e88:	bf00      	nop
 8003e8a:	3720      	adds	r7, #32
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	00000000 	.word	0x00000000
 8003e94:	40240000 	.word	0x40240000

08003e98 <myPow>:
//=================================================================
double myPow(double x, int n) {
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b088      	sub	sp, #32
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	ed87 0b02 	vstr	d0, [r7, #8]
 8003ea2:	6078      	str	r0, [r7, #4]
    unsigned int p = abs(n);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	bfb8      	it	lt
 8003eaa:	425b      	neglt	r3, r3
 8003eac:	61fb      	str	r3, [r7, #28]
    double result = 1;
 8003eae:	f04f 0200 	mov.w	r2, #0
 8003eb2:	4b1d      	ldr	r3, [pc, #116]	; (8003f28 <myPow+0x90>)
 8003eb4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    while(p > 0)
 8003eb8:	e01b      	b.n	8003ef2 <myPow+0x5a>
    {
        if(p & 1) // if bit is set
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d009      	beq.n	8003ed8 <myPow+0x40>
        {
            result = result * x;
 8003ec4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ec8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003ecc:	f7fc fbac 	bl	8000628 <__aeabi_dmul>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	e9c7 2304 	strd	r2, r3, [r7, #16]
        }
        p = p >> 1;
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	085b      	lsrs	r3, r3, #1
 8003edc:	61fb      	str	r3, [r7, #28]
        x = x * x;
 8003ede:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ee2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ee6:	f7fc fb9f 	bl	8000628 <__aeabi_dmul>
 8003eea:	4602      	mov	r2, r0
 8003eec:	460b      	mov	r3, r1
 8003eee:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while(p > 0)
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1e0      	bne.n	8003eba <myPow+0x22>
    }

    if(n < 0)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	da09      	bge.n	8003f12 <myPow+0x7a>
    {
        return 1/result;
 8003efe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003f02:	f04f 0000 	mov.w	r0, #0
 8003f06:	4908      	ldr	r1, [pc, #32]	; (8003f28 <myPow+0x90>)
 8003f08:	f7fc fcb8 	bl	800087c <__aeabi_ddiv>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	460b      	mov	r3, r1
 8003f10:	e001      	b.n	8003f16 <myPow+0x7e>
    }
    return result;
 8003f12:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8003f16:	ec43 2b17 	vmov	d7, r2, r3
 8003f1a:	eeb0 0a47 	vmov.f32	s0, s14
 8003f1e:	eef0 0a67 	vmov.f32	s1, s15
 8003f22:	3720      	adds	r7, #32
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	3ff00000 	.word	0x3ff00000

08003f2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003f2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003f30:	480d      	ldr	r0, [pc, #52]	; (8003f68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003f32:	490e      	ldr	r1, [pc, #56]	; (8003f6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003f34:	4a0e      	ldr	r2, [pc, #56]	; (8003f70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003f36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f38:	e002      	b.n	8003f40 <LoopCopyDataInit>

08003f3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f3e:	3304      	adds	r3, #4

08003f40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f44:	d3f9      	bcc.n	8003f3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f46:	4a0b      	ldr	r2, [pc, #44]	; (8003f74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003f48:	4c0b      	ldr	r4, [pc, #44]	; (8003f78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003f4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f4c:	e001      	b.n	8003f52 <LoopFillZerobss>

08003f4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f50:	3204      	adds	r2, #4

08003f52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f54:	d3fb      	bcc.n	8003f4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003f56:	f7ff fd91 	bl	8003a7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f5a:	f013 fc1f 	bl	801779c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f5e:	f7fe fc99 	bl	8002894 <main>
  bx  lr    
 8003f62:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003f64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003f68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f6c:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 8003f70:	08019214 	.word	0x08019214
  ldr r2, =_sbss
 8003f74:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 8003f78:	2000e828 	.word	0x2000e828

08003f7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f7c:	e7fe      	b.n	8003f7c <ADC_IRQHandler>
	...

08003f80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f84:	4b0e      	ldr	r3, [pc, #56]	; (8003fc0 <HAL_Init+0x40>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a0d      	ldr	r2, [pc, #52]	; (8003fc0 <HAL_Init+0x40>)
 8003f8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f90:	4b0b      	ldr	r3, [pc, #44]	; (8003fc0 <HAL_Init+0x40>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a0a      	ldr	r2, [pc, #40]	; (8003fc0 <HAL_Init+0x40>)
 8003f96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f9c:	4b08      	ldr	r3, [pc, #32]	; (8003fc0 <HAL_Init+0x40>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a07      	ldr	r2, [pc, #28]	; (8003fc0 <HAL_Init+0x40>)
 8003fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fa6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fa8:	2003      	movs	r0, #3
 8003faa:	f000 fa10 	bl	80043ce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003fae:	200f      	movs	r0, #15
 8003fb0:	f7ff fc3a 	bl	8003828 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003fb4:	f7ff f8e0 	bl	8003178 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	40023c00 	.word	0x40023c00

08003fc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003fc8:	4b06      	ldr	r3, [pc, #24]	; (8003fe4 <HAL_IncTick+0x20>)
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	461a      	mov	r2, r3
 8003fce:	4b06      	ldr	r3, [pc, #24]	; (8003fe8 <HAL_IncTick+0x24>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	4a04      	ldr	r2, [pc, #16]	; (8003fe8 <HAL_IncTick+0x24>)
 8003fd6:	6013      	str	r3, [r2, #0]
}
 8003fd8:	bf00      	nop
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	2000001c 	.word	0x2000001c
 8003fe8:	20004d34 	.word	0x20004d34

08003fec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fec:	b480      	push	{r7}
 8003fee:	af00      	add	r7, sp, #0
  return uwTick;
 8003ff0:	4b03      	ldr	r3, [pc, #12]	; (8004000 <HAL_GetTick+0x14>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	20004d34 	.word	0x20004d34

08004004 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800400c:	f7ff ffee 	bl	8003fec <HAL_GetTick>
 8004010:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800401c:	d005      	beq.n	800402a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800401e:	4b0a      	ldr	r3, [pc, #40]	; (8004048 <HAL_Delay+0x44>)
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	461a      	mov	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	4413      	add	r3, r2
 8004028:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800402a:	bf00      	nop
 800402c:	f7ff ffde 	bl	8003fec <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	429a      	cmp	r2, r3
 800403a:	d8f7      	bhi.n	800402c <HAL_Delay+0x28>
  {
  }
}
 800403c:	bf00      	nop
 800403e:	bf00      	nop
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	2000001c 	.word	0x2000001c

0800404c <HAL_ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  /* Check ADC handle */
  if(hadc == NULL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d101      	bne.n	800405e <HAL_ADC_Init+0x12>
  {
     return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e01b      	b.n	8004096 <HAL_ADC_Init+0x4a>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d102      	bne.n	8004070 <HAL_ADC_Init+0x24>
  {
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f817 	bl	800409e <HAL_ADC_MspInit>
  }
  
  /* Initialize the ADC state */
  hadc->State = HAL_ADC_STATE_BUSY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2202      	movs	r2, #2
 8004074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set ADC parameters */
  ADC_Init(hadc);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 f81b 	bl	80040b4 <ADC_Init>
  
  /* Set ADC error code to none */
  hadc->ErrorCode = HAL_ADC_ERROR_NONE;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Initialize the ADC state */
  hadc->State = HAL_ADC_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3708      	adds	r7, #8
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <HAL_ADC_MspInit>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800409e:	b480      	push	{r7}
 80040a0:	b083      	sub	sp, #12
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */ 
}
 80040a6:	bf00      	nop
 80040a8:	370c      	adds	r7, #12
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
	...

080040b4 <ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80040bc:	4b6c      	ldr	r3, [pc, #432]	; (8004270 <ADC_Init+0x1bc>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	4a6b      	ldr	r2, [pc, #428]	; (8004270 <ADC_Init+0x1bc>)
 80040c2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80040c6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80040c8:	4b69      	ldr	r3, [pc, #420]	; (8004270 <ADC_Init+0x1bc>)
 80040ca:	685a      	ldr	r2, [r3, #4]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	4967      	ldr	r1, [pc, #412]	; (8004270 <ADC_Init+0x1bc>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	685a      	ldr	r2, [r3, #4]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	6859      	ldr	r1, [r3, #4]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	021a      	lsls	r2, r3, #8
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004108:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	6859      	ldr	r1, [r3, #4]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689a      	ldr	r2, [r3, #8]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	430a      	orrs	r2, r1
 800411a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	689a      	ldr	r2, [r3, #8]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800412a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6899      	ldr	r1, [r3, #8]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68da      	ldr	r2, [r3, #12]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	430a      	orrs	r2, r1
 800413c:	609a      	str	r2, [r3, #8]
  
  /* Select external trigger to start conversion */
  hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	689a      	ldr	r2, [r3, #8]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800414c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	6899      	ldr	r1, [r3, #8]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	430a      	orrs	r2, r1
 800415e:	609a      	str	r2, [r3, #8]

  /* Select external trigger polarity */
  hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689a      	ldr	r2, [r3, #8]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800416e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6899      	ldr	r1, [r3, #8]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	430a      	orrs	r2, r1
 8004180:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	689a      	ldr	r2, [r3, #8]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 0202 	bic.w	r2, r2, #2
 8004190:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	6899      	ldr	r1, [r3, #8]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	005a      	lsls	r2, r3, #1
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	430a      	orrs	r2, r1
 80041a4:	609a      	str	r2, [r3, #8]
  
  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d01b      	beq.n	80041e6 <ADC_Init+0x132>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041bc:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	685a      	ldr	r2, [r3, #4]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80041cc:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	6859      	ldr	r1, [r3, #4]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d8:	3b01      	subs	r3, #1
 80041da:	035a      	lsls	r2, r3, #13
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	430a      	orrs	r2, r1
 80041e2:	605a      	str	r2, [r3, #4]
 80041e4:	e007      	b.n	80041f6 <ADC_Init+0x142>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	685a      	ldr	r2, [r3, #4]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041f4:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004204:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	3b01      	subs	r3, #1
 8004212:	051a      	lsls	r2, r3, #20
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	430a      	orrs	r2, r1
 800421a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	689a      	ldr	r2, [r3, #8]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800422a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6899      	ldr	r1, [r3, #8]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	69db      	ldr	r3, [r3, #28]
 8004236:	025a      	lsls	r2, r3, #9
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	430a      	orrs	r2, r1
 800423e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689a      	ldr	r2, [r3, #8]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800424e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6899      	ldr	r1, [r3, #8]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	029a      	lsls	r2, r3, #10
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	430a      	orrs	r2, r1
 8004262:	609a      	str	r2, [r3, #8]
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	40012300 	.word	0x40012300

08004274 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f003 0307 	and.w	r3, r3, #7
 8004282:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004284:	4b0c      	ldr	r3, [pc, #48]	; (80042b8 <__NVIC_SetPriorityGrouping+0x44>)
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004290:	4013      	ands	r3, r2
 8004292:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800429c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80042a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042a6:	4a04      	ldr	r2, [pc, #16]	; (80042b8 <__NVIC_SetPriorityGrouping+0x44>)
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	60d3      	str	r3, [r2, #12]
}
 80042ac:	bf00      	nop
 80042ae:	3714      	adds	r7, #20
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr
 80042b8:	e000ed00 	.word	0xe000ed00

080042bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042c0:	4b04      	ldr	r3, [pc, #16]	; (80042d4 <__NVIC_GetPriorityGrouping+0x18>)
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	0a1b      	lsrs	r3, r3, #8
 80042c6:	f003 0307 	and.w	r3, r3, #7
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr
 80042d4:	e000ed00 	.word	0xe000ed00

080042d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	4603      	mov	r3, r0
 80042e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	db0b      	blt.n	8004302 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042ea:	79fb      	ldrb	r3, [r7, #7]
 80042ec:	f003 021f 	and.w	r2, r3, #31
 80042f0:	4907      	ldr	r1, [pc, #28]	; (8004310 <__NVIC_EnableIRQ+0x38>)
 80042f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042f6:	095b      	lsrs	r3, r3, #5
 80042f8:	2001      	movs	r0, #1
 80042fa:	fa00 f202 	lsl.w	r2, r0, r2
 80042fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004302:	bf00      	nop
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	e000e100 	.word	0xe000e100

08004314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	4603      	mov	r3, r0
 800431c:	6039      	str	r1, [r7, #0]
 800431e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004324:	2b00      	cmp	r3, #0
 8004326:	db0a      	blt.n	800433e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	b2da      	uxtb	r2, r3
 800432c:	490c      	ldr	r1, [pc, #48]	; (8004360 <__NVIC_SetPriority+0x4c>)
 800432e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004332:	0112      	lsls	r2, r2, #4
 8004334:	b2d2      	uxtb	r2, r2
 8004336:	440b      	add	r3, r1
 8004338:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800433c:	e00a      	b.n	8004354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	b2da      	uxtb	r2, r3
 8004342:	4908      	ldr	r1, [pc, #32]	; (8004364 <__NVIC_SetPriority+0x50>)
 8004344:	79fb      	ldrb	r3, [r7, #7]
 8004346:	f003 030f 	and.w	r3, r3, #15
 800434a:	3b04      	subs	r3, #4
 800434c:	0112      	lsls	r2, r2, #4
 800434e:	b2d2      	uxtb	r2, r2
 8004350:	440b      	add	r3, r1
 8004352:	761a      	strb	r2, [r3, #24]
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr
 8004360:	e000e100 	.word	0xe000e100
 8004364:	e000ed00 	.word	0xe000ed00

08004368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004368:	b480      	push	{r7}
 800436a:	b089      	sub	sp, #36	; 0x24
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f003 0307 	and.w	r3, r3, #7
 800437a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	f1c3 0307 	rsb	r3, r3, #7
 8004382:	2b04      	cmp	r3, #4
 8004384:	bf28      	it	cs
 8004386:	2304      	movcs	r3, #4
 8004388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	3304      	adds	r3, #4
 800438e:	2b06      	cmp	r3, #6
 8004390:	d902      	bls.n	8004398 <NVIC_EncodePriority+0x30>
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	3b03      	subs	r3, #3
 8004396:	e000      	b.n	800439a <NVIC_EncodePriority+0x32>
 8004398:	2300      	movs	r3, #0
 800439a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800439c:	f04f 32ff 	mov.w	r2, #4294967295
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	fa02 f303 	lsl.w	r3, r2, r3
 80043a6:	43da      	mvns	r2, r3
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	401a      	ands	r2, r3
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043b0:	f04f 31ff 	mov.w	r1, #4294967295
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	fa01 f303 	lsl.w	r3, r1, r3
 80043ba:	43d9      	mvns	r1, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043c0:	4313      	orrs	r3, r2
         );
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3724      	adds	r7, #36	; 0x24
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr

080043ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b082      	sub	sp, #8
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7ff ff4c 	bl	8004274 <__NVIC_SetPriorityGrouping>
}
 80043dc:	bf00      	nop
 80043de:	3708      	adds	r7, #8
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	4603      	mov	r3, r0
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
 80043f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80043f2:	2300      	movs	r3, #0
 80043f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043f6:	f7ff ff61 	bl	80042bc <__NVIC_GetPriorityGrouping>
 80043fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	68b9      	ldr	r1, [r7, #8]
 8004400:	6978      	ldr	r0, [r7, #20]
 8004402:	f7ff ffb1 	bl	8004368 <NVIC_EncodePriority>
 8004406:	4602      	mov	r2, r0
 8004408:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800440c:	4611      	mov	r1, r2
 800440e:	4618      	mov	r0, r3
 8004410:	f7ff ff80 	bl	8004314 <__NVIC_SetPriority>
}
 8004414:	bf00      	nop
 8004416:	3718      	adds	r7, #24
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	4603      	mov	r3, r0
 8004424:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800442a:	4618      	mov	r0, r3
 800442c:	f7ff ff54 	bl	80042d8 <__NVIC_EnableIRQ>
}
 8004430:	bf00      	nop
 8004432:	3708      	adds	r7, #8
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004440:	2300      	movs	r3, #0
 8004442:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004444:	f7ff fdd2 	bl	8003fec <HAL_GetTick>
 8004448:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d101      	bne.n	8004454 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e099      	b.n	8004588 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2202      	movs	r2, #2
 8004458:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f022 0201 	bic.w	r2, r2, #1
 8004472:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004474:	e00f      	b.n	8004496 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004476:	f7ff fdb9 	bl	8003fec <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	2b05      	cmp	r3, #5
 8004482:	d908      	bls.n	8004496 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2220      	movs	r2, #32
 8004488:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2203      	movs	r2, #3
 800448e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e078      	b.n	8004588 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1e8      	bne.n	8004476 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80044ac:	697a      	ldr	r2, [r7, #20]
 80044ae:	4b38      	ldr	r3, [pc, #224]	; (8004590 <HAL_DMA_Init+0x158>)
 80044b0:	4013      	ands	r3, r2
 80044b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685a      	ldr	r2, [r3, #4]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ec:	2b04      	cmp	r3, #4
 80044ee:	d107      	bne.n	8004500 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f8:	4313      	orrs	r3, r2
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	f023 0307 	bic.w	r3, r3, #7
 8004516:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	4313      	orrs	r3, r2
 8004520:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004526:	2b04      	cmp	r3, #4
 8004528:	d117      	bne.n	800455a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	4313      	orrs	r3, r2
 8004532:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00e      	beq.n	800455a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 fb0f 	bl	8004b60 <DMA_CheckFifoParam>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d008      	beq.n	800455a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2240      	movs	r2, #64	; 0x40
 800454c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004556:	2301      	movs	r3, #1
 8004558:	e016      	b.n	8004588 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 fac6 	bl	8004af4 <DMA_CalcBaseAndBitshift>
 8004568:	4603      	mov	r3, r0
 800456a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004570:	223f      	movs	r2, #63	; 0x3f
 8004572:	409a      	lsls	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3718      	adds	r7, #24
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	f010803f 	.word	0xf010803f

08004594 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
 80045a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045a2:	2300      	movs	r3, #0
 80045a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d101      	bne.n	80045ba <HAL_DMA_Start_IT+0x26>
 80045b6:	2302      	movs	r3, #2
 80045b8:	e040      	b.n	800463c <HAL_DMA_Start_IT+0xa8>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d12f      	bne.n	800462e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2202      	movs	r2, #2
 80045d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	68b9      	ldr	r1, [r7, #8]
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f000 fa58 	bl	8004a98 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ec:	223f      	movs	r2, #63	; 0x3f
 80045ee:	409a      	lsls	r2, r3
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f042 0216 	orr.w	r2, r2, #22
 8004602:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004608:	2b00      	cmp	r3, #0
 800460a:	d007      	beq.n	800461c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f042 0208 	orr.w	r2, r2, #8
 800461a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f042 0201 	orr.w	r2, r2, #1
 800462a:	601a      	str	r2, [r3, #0]
 800462c:	e005      	b.n	800463a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004636:	2302      	movs	r3, #2
 8004638:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800463a:	7dfb      	ldrb	r3, [r7, #23]
}
 800463c:	4618      	mov	r0, r3
 800463e:	3718      	adds	r7, #24
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004650:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004652:	f7ff fccb 	bl	8003fec <HAL_GetTick>
 8004656:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800465e:	b2db      	uxtb	r3, r3
 8004660:	2b02      	cmp	r3, #2
 8004662:	d008      	beq.n	8004676 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2280      	movs	r2, #128	; 0x80
 8004668:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e052      	b.n	800471c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f022 0216 	bic.w	r2, r2, #22
 8004684:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	695a      	ldr	r2, [r3, #20]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004694:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469a:	2b00      	cmp	r3, #0
 800469c:	d103      	bne.n	80046a6 <HAL_DMA_Abort+0x62>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d007      	beq.n	80046b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f022 0208 	bic.w	r2, r2, #8
 80046b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 0201 	bic.w	r2, r2, #1
 80046c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046c6:	e013      	b.n	80046f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80046c8:	f7ff fc90 	bl	8003fec <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b05      	cmp	r3, #5
 80046d4:	d90c      	bls.n	80046f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2220      	movs	r2, #32
 80046da:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2203      	movs	r2, #3
 80046e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e015      	b.n	800471c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1e4      	bne.n	80046c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004702:	223f      	movs	r2, #63	; 0x3f
 8004704:	409a      	lsls	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b02      	cmp	r3, #2
 8004736:	d004      	beq.n	8004742 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2280      	movs	r2, #128	; 0x80
 800473c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e00c      	b.n	800475c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2205      	movs	r2, #5
 8004746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f022 0201 	bic.w	r2, r2, #1
 8004758:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004770:	2300      	movs	r3, #0
 8004772:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004774:	4b8e      	ldr	r3, [pc, #568]	; (80049b0 <HAL_DMA_IRQHandler+0x248>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a8e      	ldr	r2, [pc, #568]	; (80049b4 <HAL_DMA_IRQHandler+0x24c>)
 800477a:	fba2 2303 	umull	r2, r3, r2, r3
 800477e:	0a9b      	lsrs	r3, r3, #10
 8004780:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004786:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004792:	2208      	movs	r2, #8
 8004794:	409a      	lsls	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	4013      	ands	r3, r2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d01a      	beq.n	80047d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0304 	and.w	r3, r3, #4
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d013      	beq.n	80047d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f022 0204 	bic.w	r2, r2, #4
 80047ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047c0:	2208      	movs	r2, #8
 80047c2:	409a      	lsls	r2, r3
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047cc:	f043 0201 	orr.w	r2, r3, #1
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047d8:	2201      	movs	r2, #1
 80047da:	409a      	lsls	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	4013      	ands	r3, r2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d012      	beq.n	800480a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00b      	beq.n	800480a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047f6:	2201      	movs	r2, #1
 80047f8:	409a      	lsls	r2, r3
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004802:	f043 0202 	orr.w	r2, r3, #2
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800480e:	2204      	movs	r2, #4
 8004810:	409a      	lsls	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	4013      	ands	r3, r2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d012      	beq.n	8004840 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0302 	and.w	r3, r3, #2
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00b      	beq.n	8004840 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800482c:	2204      	movs	r2, #4
 800482e:	409a      	lsls	r2, r3
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004838:	f043 0204 	orr.w	r2, r3, #4
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004844:	2210      	movs	r2, #16
 8004846:	409a      	lsls	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	4013      	ands	r3, r2
 800484c:	2b00      	cmp	r3, #0
 800484e:	d043      	beq.n	80048d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0308 	and.w	r3, r3, #8
 800485a:	2b00      	cmp	r3, #0
 800485c:	d03c      	beq.n	80048d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004862:	2210      	movs	r2, #16
 8004864:	409a      	lsls	r2, r3
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d018      	beq.n	80048aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d108      	bne.n	8004898 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488a:	2b00      	cmp	r3, #0
 800488c:	d024      	beq.n	80048d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	4798      	blx	r3
 8004896:	e01f      	b.n	80048d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800489c:	2b00      	cmp	r3, #0
 800489e:	d01b      	beq.n	80048d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	4798      	blx	r3
 80048a8:	e016      	b.n	80048d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d107      	bne.n	80048c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f022 0208 	bic.w	r2, r2, #8
 80048c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d003      	beq.n	80048d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048dc:	2220      	movs	r2, #32
 80048de:	409a      	lsls	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	4013      	ands	r3, r2
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f000 808f 	beq.w	8004a08 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0310 	and.w	r3, r3, #16
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f000 8087 	beq.w	8004a08 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048fe:	2220      	movs	r2, #32
 8004900:	409a      	lsls	r2, r3
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b05      	cmp	r3, #5
 8004910:	d136      	bne.n	8004980 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f022 0216 	bic.w	r2, r2, #22
 8004920:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	695a      	ldr	r2, [r3, #20]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004930:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004936:	2b00      	cmp	r3, #0
 8004938:	d103      	bne.n	8004942 <HAL_DMA_IRQHandler+0x1da>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800493e:	2b00      	cmp	r3, #0
 8004940:	d007      	beq.n	8004952 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f022 0208 	bic.w	r2, r2, #8
 8004950:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004956:	223f      	movs	r2, #63	; 0x3f
 8004958:	409a      	lsls	r2, r3
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2201      	movs	r2, #1
 8004962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004972:	2b00      	cmp	r3, #0
 8004974:	d07e      	beq.n	8004a74 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	4798      	blx	r3
        }
        return;
 800497e:	e079      	b.n	8004a74 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d01d      	beq.n	80049ca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d10d      	bne.n	80049b8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d031      	beq.n	8004a08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	4798      	blx	r3
 80049ac:	e02c      	b.n	8004a08 <HAL_DMA_IRQHandler+0x2a0>
 80049ae:	bf00      	nop
 80049b0:	20000000 	.word	0x20000000
 80049b4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d023      	beq.n	8004a08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	4798      	blx	r3
 80049c8:	e01e      	b.n	8004a08 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d10f      	bne.n	80049f8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f022 0210 	bic.w	r2, r2, #16
 80049e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d003      	beq.n	8004a08 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d032      	beq.n	8004a76 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a14:	f003 0301 	and.w	r3, r3, #1
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d022      	beq.n	8004a62 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2205      	movs	r2, #5
 8004a20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f022 0201 	bic.w	r2, r2, #1
 8004a32:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	3301      	adds	r3, #1
 8004a38:	60bb      	str	r3, [r7, #8]
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d307      	bcc.n	8004a50 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1f2      	bne.n	8004a34 <HAL_DMA_IRQHandler+0x2cc>
 8004a4e:	e000      	b.n	8004a52 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004a50:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d005      	beq.n	8004a76 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	4798      	blx	r3
 8004a72:	e000      	b.n	8004a76 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004a74:	bf00      	nop
    }
  }
}
 8004a76:	3718      	adds	r7, #24
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a8a:	b2db      	uxtb	r3, r3
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	607a      	str	r2, [r7, #4]
 8004aa4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004ab4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	2b40      	cmp	r3, #64	; 0x40
 8004ac4:	d108      	bne.n	8004ad8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004ad6:	e007      	b.n	8004ae8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68ba      	ldr	r2, [r7, #8]
 8004ade:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	60da      	str	r2, [r3, #12]
}
 8004ae8:	bf00      	nop
 8004aea:	3714      	adds	r7, #20
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	3b10      	subs	r3, #16
 8004b04:	4a14      	ldr	r2, [pc, #80]	; (8004b58 <DMA_CalcBaseAndBitshift+0x64>)
 8004b06:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0a:	091b      	lsrs	r3, r3, #4
 8004b0c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004b0e:	4a13      	ldr	r2, [pc, #76]	; (8004b5c <DMA_CalcBaseAndBitshift+0x68>)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	4413      	add	r3, r2
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	461a      	mov	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2b03      	cmp	r3, #3
 8004b20:	d909      	bls.n	8004b36 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004b2a:	f023 0303 	bic.w	r3, r3, #3
 8004b2e:	1d1a      	adds	r2, r3, #4
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	659a      	str	r2, [r3, #88]	; 0x58
 8004b34:	e007      	b.n	8004b46 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004b3e:	f023 0303 	bic.w	r3, r3, #3
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3714      	adds	r7, #20
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	aaaaaaab 	.word	0xaaaaaaab
 8004b5c:	080187e0 	.word	0x080187e0

08004b60 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b70:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d11f      	bne.n	8004bba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	2b03      	cmp	r3, #3
 8004b7e:	d856      	bhi.n	8004c2e <DMA_CheckFifoParam+0xce>
 8004b80:	a201      	add	r2, pc, #4	; (adr r2, 8004b88 <DMA_CheckFifoParam+0x28>)
 8004b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b86:	bf00      	nop
 8004b88:	08004b99 	.word	0x08004b99
 8004b8c:	08004bab 	.word	0x08004bab
 8004b90:	08004b99 	.word	0x08004b99
 8004b94:	08004c2f 	.word	0x08004c2f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d046      	beq.n	8004c32 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ba8:	e043      	b.n	8004c32 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004bb2:	d140      	bne.n	8004c36 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bb8:	e03d      	b.n	8004c36 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bc2:	d121      	bne.n	8004c08 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	2b03      	cmp	r3, #3
 8004bc8:	d837      	bhi.n	8004c3a <DMA_CheckFifoParam+0xda>
 8004bca:	a201      	add	r2, pc, #4	; (adr r2, 8004bd0 <DMA_CheckFifoParam+0x70>)
 8004bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd0:	08004be1 	.word	0x08004be1
 8004bd4:	08004be7 	.word	0x08004be7
 8004bd8:	08004be1 	.word	0x08004be1
 8004bdc:	08004bf9 	.word	0x08004bf9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	73fb      	strb	r3, [r7, #15]
      break;
 8004be4:	e030      	b.n	8004c48 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d025      	beq.n	8004c3e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bf6:	e022      	b.n	8004c3e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c00:	d11f      	bne.n	8004c42 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004c06:	e01c      	b.n	8004c42 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d903      	bls.n	8004c16 <DMA_CheckFifoParam+0xb6>
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	2b03      	cmp	r3, #3
 8004c12:	d003      	beq.n	8004c1c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004c14:	e018      	b.n	8004c48 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	73fb      	strb	r3, [r7, #15]
      break;
 8004c1a:	e015      	b.n	8004c48 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00e      	beq.n	8004c46 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c2c:	e00b      	b.n	8004c46 <DMA_CheckFifoParam+0xe6>
      break;
 8004c2e:	bf00      	nop
 8004c30:	e00a      	b.n	8004c48 <DMA_CheckFifoParam+0xe8>
      break;
 8004c32:	bf00      	nop
 8004c34:	e008      	b.n	8004c48 <DMA_CheckFifoParam+0xe8>
      break;
 8004c36:	bf00      	nop
 8004c38:	e006      	b.n	8004c48 <DMA_CheckFifoParam+0xe8>
      break;
 8004c3a:	bf00      	nop
 8004c3c:	e004      	b.n	8004c48 <DMA_CheckFifoParam+0xe8>
      break;
 8004c3e:	bf00      	nop
 8004c40:	e002      	b.n	8004c48 <DMA_CheckFifoParam+0xe8>
      break;   
 8004c42:	bf00      	nop
 8004c44:	e000      	b.n	8004c48 <DMA_CheckFifoParam+0xe8>
      break;
 8004c46:	bf00      	nop
    }
  } 
  
  return status; 
 8004c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3714      	adds	r7, #20
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop

08004c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b089      	sub	sp, #36	; 0x24
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004c62:	2300      	movs	r3, #0
 8004c64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c66:	2300      	movs	r3, #0
 8004c68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c6e:	2300      	movs	r3, #0
 8004c70:	61fb      	str	r3, [r7, #28]
 8004c72:	e159      	b.n	8004f28 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c74:	2201      	movs	r2, #1
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	4013      	ands	r3, r2
 8004c86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	f040 8148 	bne.w	8004f22 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f003 0303 	and.w	r3, r3, #3
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d005      	beq.n	8004caa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d130      	bne.n	8004d0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	2203      	movs	r2, #3
 8004cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cba:	43db      	mvns	r3, r3
 8004cbc:	69ba      	ldr	r2, [r7, #24]
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	68da      	ldr	r2, [r3, #12]
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	005b      	lsls	r3, r3, #1
 8004cca:	fa02 f303 	lsl.w	r3, r2, r3
 8004cce:	69ba      	ldr	r2, [r7, #24]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	69ba      	ldr	r2, [r7, #24]
 8004cd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce8:	43db      	mvns	r3, r3
 8004cea:	69ba      	ldr	r2, [r7, #24]
 8004cec:	4013      	ands	r3, r2
 8004cee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	091b      	lsrs	r3, r3, #4
 8004cf6:	f003 0201 	and.w	r2, r3, #1
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004d00:	69ba      	ldr	r2, [r7, #24]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f003 0303 	and.w	r3, r3, #3
 8004d14:	2b03      	cmp	r3, #3
 8004d16:	d017      	beq.n	8004d48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	2203      	movs	r2, #3
 8004d24:	fa02 f303 	lsl.w	r3, r2, r3
 8004d28:	43db      	mvns	r3, r3
 8004d2a:	69ba      	ldr	r2, [r7, #24]
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	689a      	ldr	r2, [r3, #8]
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	005b      	lsls	r3, r3, #1
 8004d38:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3c:	69ba      	ldr	r2, [r7, #24]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	69ba      	ldr	r2, [r7, #24]
 8004d46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f003 0303 	and.w	r3, r3, #3
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d123      	bne.n	8004d9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	08da      	lsrs	r2, r3, #3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	3208      	adds	r2, #8
 8004d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	f003 0307 	and.w	r3, r3, #7
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	220f      	movs	r2, #15
 8004d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d70:	43db      	mvns	r3, r3
 8004d72:	69ba      	ldr	r2, [r7, #24]
 8004d74:	4013      	ands	r3, r2
 8004d76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	691a      	ldr	r2, [r3, #16]
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	f003 0307 	and.w	r3, r3, #7
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	fa02 f303 	lsl.w	r3, r2, r3
 8004d88:	69ba      	ldr	r2, [r7, #24]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	08da      	lsrs	r2, r3, #3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	3208      	adds	r2, #8
 8004d96:	69b9      	ldr	r1, [r7, #24]
 8004d98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	005b      	lsls	r3, r3, #1
 8004da6:	2203      	movs	r2, #3
 8004da8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dac:	43db      	mvns	r3, r3
 8004dae:	69ba      	ldr	r2, [r7, #24]
 8004db0:	4013      	ands	r3, r2
 8004db2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f003 0203 	and.w	r2, r3, #3
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	005b      	lsls	r3, r3, #1
 8004dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc4:	69ba      	ldr	r2, [r7, #24]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	69ba      	ldr	r2, [r7, #24]
 8004dce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f000 80a2 	beq.w	8004f22 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dde:	2300      	movs	r3, #0
 8004de0:	60fb      	str	r3, [r7, #12]
 8004de2:	4b57      	ldr	r3, [pc, #348]	; (8004f40 <HAL_GPIO_Init+0x2e8>)
 8004de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de6:	4a56      	ldr	r2, [pc, #344]	; (8004f40 <HAL_GPIO_Init+0x2e8>)
 8004de8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004dec:	6453      	str	r3, [r2, #68]	; 0x44
 8004dee:	4b54      	ldr	r3, [pc, #336]	; (8004f40 <HAL_GPIO_Init+0x2e8>)
 8004df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004df6:	60fb      	str	r3, [r7, #12]
 8004df8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004dfa:	4a52      	ldr	r2, [pc, #328]	; (8004f44 <HAL_GPIO_Init+0x2ec>)
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	089b      	lsrs	r3, r3, #2
 8004e00:	3302      	adds	r3, #2
 8004e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	f003 0303 	and.w	r3, r3, #3
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	220f      	movs	r2, #15
 8004e12:	fa02 f303 	lsl.w	r3, r2, r3
 8004e16:	43db      	mvns	r3, r3
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a49      	ldr	r2, [pc, #292]	; (8004f48 <HAL_GPIO_Init+0x2f0>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d019      	beq.n	8004e5a <HAL_GPIO_Init+0x202>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a48      	ldr	r2, [pc, #288]	; (8004f4c <HAL_GPIO_Init+0x2f4>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d013      	beq.n	8004e56 <HAL_GPIO_Init+0x1fe>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a47      	ldr	r2, [pc, #284]	; (8004f50 <HAL_GPIO_Init+0x2f8>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d00d      	beq.n	8004e52 <HAL_GPIO_Init+0x1fa>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a46      	ldr	r2, [pc, #280]	; (8004f54 <HAL_GPIO_Init+0x2fc>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d007      	beq.n	8004e4e <HAL_GPIO_Init+0x1f6>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a45      	ldr	r2, [pc, #276]	; (8004f58 <HAL_GPIO_Init+0x300>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d101      	bne.n	8004e4a <HAL_GPIO_Init+0x1f2>
 8004e46:	2304      	movs	r3, #4
 8004e48:	e008      	b.n	8004e5c <HAL_GPIO_Init+0x204>
 8004e4a:	2307      	movs	r3, #7
 8004e4c:	e006      	b.n	8004e5c <HAL_GPIO_Init+0x204>
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e004      	b.n	8004e5c <HAL_GPIO_Init+0x204>
 8004e52:	2302      	movs	r3, #2
 8004e54:	e002      	b.n	8004e5c <HAL_GPIO_Init+0x204>
 8004e56:	2301      	movs	r3, #1
 8004e58:	e000      	b.n	8004e5c <HAL_GPIO_Init+0x204>
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	69fa      	ldr	r2, [r7, #28]
 8004e5e:	f002 0203 	and.w	r2, r2, #3
 8004e62:	0092      	lsls	r2, r2, #2
 8004e64:	4093      	lsls	r3, r2
 8004e66:	69ba      	ldr	r2, [r7, #24]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e6c:	4935      	ldr	r1, [pc, #212]	; (8004f44 <HAL_GPIO_Init+0x2ec>)
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	089b      	lsrs	r3, r3, #2
 8004e72:	3302      	adds	r3, #2
 8004e74:	69ba      	ldr	r2, [r7, #24]
 8004e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e7a:	4b38      	ldr	r3, [pc, #224]	; (8004f5c <HAL_GPIO_Init+0x304>)
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	43db      	mvns	r3, r3
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	4013      	ands	r3, r2
 8004e88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d003      	beq.n	8004e9e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e9e:	4a2f      	ldr	r2, [pc, #188]	; (8004f5c <HAL_GPIO_Init+0x304>)
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ea4:	4b2d      	ldr	r3, [pc, #180]	; (8004f5c <HAL_GPIO_Init+0x304>)
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	43db      	mvns	r3, r3
 8004eae:	69ba      	ldr	r2, [r7, #24]
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d003      	beq.n	8004ec8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ec8:	4a24      	ldr	r2, [pc, #144]	; (8004f5c <HAL_GPIO_Init+0x304>)
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004ece:	4b23      	ldr	r3, [pc, #140]	; (8004f5c <HAL_GPIO_Init+0x304>)
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	43db      	mvns	r3, r3
 8004ed8:	69ba      	ldr	r2, [r7, #24]
 8004eda:	4013      	ands	r3, r2
 8004edc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d003      	beq.n	8004ef2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004eea:	69ba      	ldr	r2, [r7, #24]
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ef2:	4a1a      	ldr	r2, [pc, #104]	; (8004f5c <HAL_GPIO_Init+0x304>)
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ef8:	4b18      	ldr	r3, [pc, #96]	; (8004f5c <HAL_GPIO_Init+0x304>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	43db      	mvns	r3, r3
 8004f02:	69ba      	ldr	r2, [r7, #24]
 8004f04:	4013      	ands	r3, r2
 8004f06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d003      	beq.n	8004f1c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004f14:	69ba      	ldr	r2, [r7, #24]
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f1c:	4a0f      	ldr	r2, [pc, #60]	; (8004f5c <HAL_GPIO_Init+0x304>)
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	3301      	adds	r3, #1
 8004f26:	61fb      	str	r3, [r7, #28]
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	2b0f      	cmp	r3, #15
 8004f2c:	f67f aea2 	bls.w	8004c74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004f30:	bf00      	nop
 8004f32:	bf00      	nop
 8004f34:	3724      	adds	r7, #36	; 0x24
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	40023800 	.word	0x40023800
 8004f44:	40013800 	.word	0x40013800
 8004f48:	40020000 	.word	0x40020000
 8004f4c:	40020400 	.word	0x40020400
 8004f50:	40020800 	.word	0x40020800
 8004f54:	40020c00 	.word	0x40020c00
 8004f58:	40021000 	.word	0x40021000
 8004f5c:	40013c00 	.word	0x40013c00

08004f60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	460b      	mov	r3, r1
 8004f6a:	807b      	strh	r3, [r7, #2]
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f70:	787b      	ldrb	r3, [r7, #1]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d003      	beq.n	8004f7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f76:	887a      	ldrh	r2, [r7, #2]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004f7c:	e003      	b.n	8004f86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004f7e:	887b      	ldrh	r3, [r7, #2]
 8004f80:	041a      	lsls	r2, r3, #16
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	619a      	str	r2, [r3, #24]
}
 8004f86:	bf00      	nop
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
	...

08004f94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004f9e:	4b08      	ldr	r3, [pc, #32]	; (8004fc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004fa0:	695a      	ldr	r2, [r3, #20]
 8004fa2:	88fb      	ldrh	r3, [r7, #6]
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d006      	beq.n	8004fb8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004faa:	4a05      	ldr	r2, [pc, #20]	; (8004fc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004fac:	88fb      	ldrh	r3, [r7, #6]
 8004fae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004fb0:	88fb      	ldrh	r3, [r7, #6]
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7fc fde8 	bl	8001b88 <HAL_GPIO_EXTI_Callback>
  }
}
 8004fb8:	bf00      	nop
 8004fba:	3708      	adds	r7, #8
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	40013c00 	.word	0x40013c00

08004fc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d101      	bne.n	8004fd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e12b      	b.n	800522e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d106      	bne.n	8004ff0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7fe fa56 	bl	800349c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2224      	movs	r2, #36	; 0x24
 8004ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f022 0201 	bic.w	r2, r2, #1
 8005006:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005016:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005026:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005028:	f003 f884 	bl	8008134 <HAL_RCC_GetPCLK1Freq>
 800502c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	4a81      	ldr	r2, [pc, #516]	; (8005238 <HAL_I2C_Init+0x274>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d807      	bhi.n	8005048 <HAL_I2C_Init+0x84>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	4a80      	ldr	r2, [pc, #512]	; (800523c <HAL_I2C_Init+0x278>)
 800503c:	4293      	cmp	r3, r2
 800503e:	bf94      	ite	ls
 8005040:	2301      	movls	r3, #1
 8005042:	2300      	movhi	r3, #0
 8005044:	b2db      	uxtb	r3, r3
 8005046:	e006      	b.n	8005056 <HAL_I2C_Init+0x92>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	4a7d      	ldr	r2, [pc, #500]	; (8005240 <HAL_I2C_Init+0x27c>)
 800504c:	4293      	cmp	r3, r2
 800504e:	bf94      	ite	ls
 8005050:	2301      	movls	r3, #1
 8005052:	2300      	movhi	r3, #0
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e0e7      	b.n	800522e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	4a78      	ldr	r2, [pc, #480]	; (8005244 <HAL_I2C_Init+0x280>)
 8005062:	fba2 2303 	umull	r2, r3, r2, r3
 8005066:	0c9b      	lsrs	r3, r3, #18
 8005068:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	430a      	orrs	r2, r1
 800507c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	6a1b      	ldr	r3, [r3, #32]
 8005084:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	4a6a      	ldr	r2, [pc, #424]	; (8005238 <HAL_I2C_Init+0x274>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d802      	bhi.n	8005098 <HAL_I2C_Init+0xd4>
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	3301      	adds	r3, #1
 8005096:	e009      	b.n	80050ac <HAL_I2C_Init+0xe8>
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800509e:	fb02 f303 	mul.w	r3, r2, r3
 80050a2:	4a69      	ldr	r2, [pc, #420]	; (8005248 <HAL_I2C_Init+0x284>)
 80050a4:	fba2 2303 	umull	r2, r3, r2, r3
 80050a8:	099b      	lsrs	r3, r3, #6
 80050aa:	3301      	adds	r3, #1
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	6812      	ldr	r2, [r2, #0]
 80050b0:	430b      	orrs	r3, r1
 80050b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	69db      	ldr	r3, [r3, #28]
 80050ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80050be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	495c      	ldr	r1, [pc, #368]	; (8005238 <HAL_I2C_Init+0x274>)
 80050c8:	428b      	cmp	r3, r1
 80050ca:	d819      	bhi.n	8005100 <HAL_I2C_Init+0x13c>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	1e59      	subs	r1, r3, #1
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	005b      	lsls	r3, r3, #1
 80050d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80050da:	1c59      	adds	r1, r3, #1
 80050dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80050e0:	400b      	ands	r3, r1
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00a      	beq.n	80050fc <HAL_I2C_Init+0x138>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	1e59      	subs	r1, r3, #1
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	005b      	lsls	r3, r3, #1
 80050f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80050f4:	3301      	adds	r3, #1
 80050f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050fa:	e051      	b.n	80051a0 <HAL_I2C_Init+0x1dc>
 80050fc:	2304      	movs	r3, #4
 80050fe:	e04f      	b.n	80051a0 <HAL_I2C_Init+0x1dc>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d111      	bne.n	800512c <HAL_I2C_Init+0x168>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	1e58      	subs	r0, r3, #1
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6859      	ldr	r1, [r3, #4]
 8005110:	460b      	mov	r3, r1
 8005112:	005b      	lsls	r3, r3, #1
 8005114:	440b      	add	r3, r1
 8005116:	fbb0 f3f3 	udiv	r3, r0, r3
 800511a:	3301      	adds	r3, #1
 800511c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005120:	2b00      	cmp	r3, #0
 8005122:	bf0c      	ite	eq
 8005124:	2301      	moveq	r3, #1
 8005126:	2300      	movne	r3, #0
 8005128:	b2db      	uxtb	r3, r3
 800512a:	e012      	b.n	8005152 <HAL_I2C_Init+0x18e>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	1e58      	subs	r0, r3, #1
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6859      	ldr	r1, [r3, #4]
 8005134:	460b      	mov	r3, r1
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	440b      	add	r3, r1
 800513a:	0099      	lsls	r1, r3, #2
 800513c:	440b      	add	r3, r1
 800513e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005142:	3301      	adds	r3, #1
 8005144:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005148:	2b00      	cmp	r3, #0
 800514a:	bf0c      	ite	eq
 800514c:	2301      	moveq	r3, #1
 800514e:	2300      	movne	r3, #0
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d001      	beq.n	800515a <HAL_I2C_Init+0x196>
 8005156:	2301      	movs	r3, #1
 8005158:	e022      	b.n	80051a0 <HAL_I2C_Init+0x1dc>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d10e      	bne.n	8005180 <HAL_I2C_Init+0x1bc>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	1e58      	subs	r0, r3, #1
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6859      	ldr	r1, [r3, #4]
 800516a:	460b      	mov	r3, r1
 800516c:	005b      	lsls	r3, r3, #1
 800516e:	440b      	add	r3, r1
 8005170:	fbb0 f3f3 	udiv	r3, r0, r3
 8005174:	3301      	adds	r3, #1
 8005176:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800517a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800517e:	e00f      	b.n	80051a0 <HAL_I2C_Init+0x1dc>
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	1e58      	subs	r0, r3, #1
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6859      	ldr	r1, [r3, #4]
 8005188:	460b      	mov	r3, r1
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	440b      	add	r3, r1
 800518e:	0099      	lsls	r1, r3, #2
 8005190:	440b      	add	r3, r1
 8005192:	fbb0 f3f3 	udiv	r3, r0, r3
 8005196:	3301      	adds	r3, #1
 8005198:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800519c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051a0:	6879      	ldr	r1, [r7, #4]
 80051a2:	6809      	ldr	r1, [r1, #0]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	69da      	ldr	r2, [r3, #28]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	431a      	orrs	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	430a      	orrs	r2, r1
 80051c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80051ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	6911      	ldr	r1, [r2, #16]
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	68d2      	ldr	r2, [r2, #12]
 80051da:	4311      	orrs	r1, r2
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	6812      	ldr	r2, [r2, #0]
 80051e0:	430b      	orrs	r3, r1
 80051e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	695a      	ldr	r2, [r3, #20]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	431a      	orrs	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	430a      	orrs	r2, r1
 80051fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f042 0201 	orr.w	r2, r2, #1
 800520e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2220      	movs	r2, #32
 800521a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3710      	adds	r7, #16
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	000186a0 	.word	0x000186a0
 800523c:	001e847f 	.word	0x001e847f
 8005240:	003d08ff 	.word	0x003d08ff
 8005244:	431bde83 	.word	0x431bde83
 8005248:	10624dd3 	.word	0x10624dd3

0800524c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b088      	sub	sp, #32
 8005250:	af02      	add	r7, sp, #8
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	607a      	str	r2, [r7, #4]
 8005256:	461a      	mov	r2, r3
 8005258:	460b      	mov	r3, r1
 800525a:	817b      	strh	r3, [r7, #10]
 800525c:	4613      	mov	r3, r2
 800525e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005260:	f7fe fec4 	bl	8003fec <HAL_GetTick>
 8005264:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800526c:	b2db      	uxtb	r3, r3
 800526e:	2b20      	cmp	r3, #32
 8005270:	f040 80e0 	bne.w	8005434 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	9300      	str	r3, [sp, #0]
 8005278:	2319      	movs	r3, #25
 800527a:	2201      	movs	r2, #1
 800527c:	4970      	ldr	r1, [pc, #448]	; (8005440 <HAL_I2C_Master_Transmit+0x1f4>)
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	f002 f8be 	bl	8007400 <I2C_WaitOnFlagUntilTimeout>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d001      	beq.n	800528e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800528a:	2302      	movs	r3, #2
 800528c:	e0d3      	b.n	8005436 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005294:	2b01      	cmp	r3, #1
 8005296:	d101      	bne.n	800529c <HAL_I2C_Master_Transmit+0x50>
 8005298:	2302      	movs	r3, #2
 800529a:	e0cc      	b.n	8005436 <HAL_I2C_Master_Transmit+0x1ea>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d007      	beq.n	80052c2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f042 0201 	orr.w	r2, r2, #1
 80052c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2221      	movs	r2, #33	; 0x21
 80052d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2210      	movs	r2, #16
 80052de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	893a      	ldrh	r2, [r7, #8]
 80052f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	4a50      	ldr	r2, [pc, #320]	; (8005444 <HAL_I2C_Master_Transmit+0x1f8>)
 8005302:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005304:	8979      	ldrh	r1, [r7, #10]
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	6a3a      	ldr	r2, [r7, #32]
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f001 fe80 	bl	8007010 <I2C_MasterRequestWrite>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d001      	beq.n	800531a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e08d      	b.n	8005436 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800531a:	2300      	movs	r3, #0
 800531c:	613b      	str	r3, [r7, #16]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	695b      	ldr	r3, [r3, #20]
 8005324:	613b      	str	r3, [r7, #16]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	613b      	str	r3, [r7, #16]
 800532e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005330:	e066      	b.n	8005400 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005332:	697a      	ldr	r2, [r7, #20]
 8005334:	6a39      	ldr	r1, [r7, #32]
 8005336:	68f8      	ldr	r0, [r7, #12]
 8005338:	f002 f938 	bl	80075ac <I2C_WaitOnTXEFlagUntilTimeout>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00d      	beq.n	800535e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005346:	2b04      	cmp	r3, #4
 8005348:	d107      	bne.n	800535a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005358:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e06b      	b.n	8005436 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005362:	781a      	ldrb	r2, [r3, #0]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536e:	1c5a      	adds	r2, r3, #1
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005378:	b29b      	uxth	r3, r3
 800537a:	3b01      	subs	r3, #1
 800537c:	b29a      	uxth	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005386:	3b01      	subs	r3, #1
 8005388:	b29a      	uxth	r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	695b      	ldr	r3, [r3, #20]
 8005394:	f003 0304 	and.w	r3, r3, #4
 8005398:	2b04      	cmp	r3, #4
 800539a:	d11b      	bne.n	80053d4 <HAL_I2C_Master_Transmit+0x188>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d017      	beq.n	80053d4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a8:	781a      	ldrb	r2, [r3, #0]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b4:	1c5a      	adds	r2, r3, #1
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053be:	b29b      	uxth	r3, r3
 80053c0:	3b01      	subs	r3, #1
 80053c2:	b29a      	uxth	r2, r3
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053cc:	3b01      	subs	r3, #1
 80053ce:	b29a      	uxth	r2, r3
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	6a39      	ldr	r1, [r7, #32]
 80053d8:	68f8      	ldr	r0, [r7, #12]
 80053da:	f002 f928 	bl	800762e <I2C_WaitOnBTFFlagUntilTimeout>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00d      	beq.n	8005400 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e8:	2b04      	cmp	r3, #4
 80053ea:	d107      	bne.n	80053fc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053fa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e01a      	b.n	8005436 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005404:	2b00      	cmp	r3, #0
 8005406:	d194      	bne.n	8005332 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005416:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2220      	movs	r2, #32
 800541c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005430:	2300      	movs	r3, #0
 8005432:	e000      	b.n	8005436 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005434:	2302      	movs	r3, #2
  }
}
 8005436:	4618      	mov	r0, r3
 8005438:	3718      	adds	r7, #24
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	00100002 	.word	0x00100002
 8005444:	ffff0000 	.word	0xffff0000

08005448 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b08c      	sub	sp, #48	; 0x30
 800544c:	af02      	add	r7, sp, #8
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	607a      	str	r2, [r7, #4]
 8005452:	461a      	mov	r2, r3
 8005454:	460b      	mov	r3, r1
 8005456:	817b      	strh	r3, [r7, #10]
 8005458:	4613      	mov	r3, r2
 800545a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800545c:	f7fe fdc6 	bl	8003fec <HAL_GetTick>
 8005460:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b20      	cmp	r3, #32
 800546c:	f040 820b 	bne.w	8005886 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005472:	9300      	str	r3, [sp, #0]
 8005474:	2319      	movs	r3, #25
 8005476:	2201      	movs	r2, #1
 8005478:	497c      	ldr	r1, [pc, #496]	; (800566c <HAL_I2C_Master_Receive+0x224>)
 800547a:	68f8      	ldr	r0, [r7, #12]
 800547c:	f001 ffc0 	bl	8007400 <I2C_WaitOnFlagUntilTimeout>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d001      	beq.n	800548a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005486:	2302      	movs	r3, #2
 8005488:	e1fe      	b.n	8005888 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005490:	2b01      	cmp	r3, #1
 8005492:	d101      	bne.n	8005498 <HAL_I2C_Master_Receive+0x50>
 8005494:	2302      	movs	r3, #2
 8005496:	e1f7      	b.n	8005888 <HAL_I2C_Master_Receive+0x440>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0301 	and.w	r3, r3, #1
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d007      	beq.n	80054be <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f042 0201 	orr.w	r2, r2, #1
 80054bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2222      	movs	r2, #34	; 0x22
 80054d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2210      	movs	r2, #16
 80054da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	893a      	ldrh	r2, [r7, #8]
 80054ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	4a5c      	ldr	r2, [pc, #368]	; (8005670 <HAL_I2C_Master_Receive+0x228>)
 80054fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005500:	8979      	ldrh	r1, [r7, #10]
 8005502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f001 fe04 	bl	8007114 <I2C_MasterRequestRead>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d001      	beq.n	8005516 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e1b8      	b.n	8005888 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800551a:	2b00      	cmp	r3, #0
 800551c:	d113      	bne.n	8005546 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800551e:	2300      	movs	r3, #0
 8005520:	623b      	str	r3, [r7, #32]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	695b      	ldr	r3, [r3, #20]
 8005528:	623b      	str	r3, [r7, #32]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	623b      	str	r3, [r7, #32]
 8005532:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005542:	601a      	str	r2, [r3, #0]
 8005544:	e18c      	b.n	8005860 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800554a:	2b01      	cmp	r3, #1
 800554c:	d11b      	bne.n	8005586 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800555c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800555e:	2300      	movs	r3, #0
 8005560:	61fb      	str	r3, [r7, #28]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	695b      	ldr	r3, [r3, #20]
 8005568:	61fb      	str	r3, [r7, #28]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	61fb      	str	r3, [r7, #28]
 8005572:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005582:	601a      	str	r2, [r3, #0]
 8005584:	e16c      	b.n	8005860 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800558a:	2b02      	cmp	r3, #2
 800558c:	d11b      	bne.n	80055c6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800559c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055ae:	2300      	movs	r3, #0
 80055b0:	61bb      	str	r3, [r7, #24]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	695b      	ldr	r3, [r3, #20]
 80055b8:	61bb      	str	r3, [r7, #24]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	699b      	ldr	r3, [r3, #24]
 80055c0:	61bb      	str	r3, [r7, #24]
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	e14c      	b.n	8005860 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055d6:	2300      	movs	r3, #0
 80055d8:	617b      	str	r3, [r7, #20]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	695b      	ldr	r3, [r3, #20]
 80055e0:	617b      	str	r3, [r7, #20]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	617b      	str	r3, [r7, #20]
 80055ea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80055ec:	e138      	b.n	8005860 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055f2:	2b03      	cmp	r3, #3
 80055f4:	f200 80f1 	bhi.w	80057da <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d123      	bne.n	8005648 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005602:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005604:	68f8      	ldr	r0, [r7, #12]
 8005606:	f002 f885 	bl	8007714 <I2C_WaitOnRXNEFlagUntilTimeout>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d001      	beq.n	8005614 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e139      	b.n	8005888 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	691a      	ldr	r2, [r3, #16]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561e:	b2d2      	uxtb	r2, r2
 8005620:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005626:	1c5a      	adds	r2, r3, #1
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005630:	3b01      	subs	r3, #1
 8005632:	b29a      	uxth	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800563c:	b29b      	uxth	r3, r3
 800563e:	3b01      	subs	r3, #1
 8005640:	b29a      	uxth	r2, r3
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005646:	e10b      	b.n	8005860 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800564c:	2b02      	cmp	r3, #2
 800564e:	d14e      	bne.n	80056ee <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005652:	9300      	str	r3, [sp, #0]
 8005654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005656:	2200      	movs	r2, #0
 8005658:	4906      	ldr	r1, [pc, #24]	; (8005674 <HAL_I2C_Master_Receive+0x22c>)
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f001 fed0 	bl	8007400 <I2C_WaitOnFlagUntilTimeout>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d008      	beq.n	8005678 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e10e      	b.n	8005888 <HAL_I2C_Master_Receive+0x440>
 800566a:	bf00      	nop
 800566c:	00100002 	.word	0x00100002
 8005670:	ffff0000 	.word	0xffff0000
 8005674:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005686:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	691a      	ldr	r2, [r3, #16]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005692:	b2d2      	uxtb	r2, r2
 8005694:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569a:	1c5a      	adds	r2, r3, #1
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056a4:	3b01      	subs	r3, #1
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	3b01      	subs	r3, #1
 80056b4:	b29a      	uxth	r2, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	691a      	ldr	r2, [r3, #16]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c4:	b2d2      	uxtb	r2, r2
 80056c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056cc:	1c5a      	adds	r2, r3, #1
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056d6:	3b01      	subs	r3, #1
 80056d8:	b29a      	uxth	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	3b01      	subs	r3, #1
 80056e6:	b29a      	uxth	r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80056ec:	e0b8      	b.n	8005860 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80056ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f0:	9300      	str	r3, [sp, #0]
 80056f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f4:	2200      	movs	r2, #0
 80056f6:	4966      	ldr	r1, [pc, #408]	; (8005890 <HAL_I2C_Master_Receive+0x448>)
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f001 fe81 	bl	8007400 <I2C_WaitOnFlagUntilTimeout>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d001      	beq.n	8005708 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e0bf      	b.n	8005888 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005716:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	691a      	ldr	r2, [r3, #16]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005722:	b2d2      	uxtb	r2, r2
 8005724:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572a:	1c5a      	adds	r2, r3, #1
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005734:	3b01      	subs	r3, #1
 8005736:	b29a      	uxth	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005740:	b29b      	uxth	r3, r3
 8005742:	3b01      	subs	r3, #1
 8005744:	b29a      	uxth	r2, r3
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800574a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574c:	9300      	str	r3, [sp, #0]
 800574e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005750:	2200      	movs	r2, #0
 8005752:	494f      	ldr	r1, [pc, #316]	; (8005890 <HAL_I2C_Master_Receive+0x448>)
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f001 fe53 	bl	8007400 <I2C_WaitOnFlagUntilTimeout>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d001      	beq.n	8005764 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e091      	b.n	8005888 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005772:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	691a      	ldr	r2, [r3, #16]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577e:	b2d2      	uxtb	r2, r2
 8005780:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005786:	1c5a      	adds	r2, r3, #1
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005790:	3b01      	subs	r3, #1
 8005792:	b29a      	uxth	r2, r3
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800579c:	b29b      	uxth	r3, r3
 800579e:	3b01      	subs	r3, #1
 80057a0:	b29a      	uxth	r2, r3
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	691a      	ldr	r2, [r3, #16]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b0:	b2d2      	uxtb	r2, r2
 80057b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b8:	1c5a      	adds	r2, r3, #1
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057c2:	3b01      	subs	r3, #1
 80057c4:	b29a      	uxth	r2, r3
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	3b01      	subs	r3, #1
 80057d2:	b29a      	uxth	r2, r3
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80057d8:	e042      	b.n	8005860 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057de:	68f8      	ldr	r0, [r7, #12]
 80057e0:	f001 ff98 	bl	8007714 <I2C_WaitOnRXNEFlagUntilTimeout>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d001      	beq.n	80057ee <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e04c      	b.n	8005888 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	691a      	ldr	r2, [r3, #16]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f8:	b2d2      	uxtb	r2, r2
 80057fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005800:	1c5a      	adds	r2, r3, #1
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800580a:	3b01      	subs	r3, #1
 800580c:	b29a      	uxth	r2, r3
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005816:	b29b      	uxth	r3, r3
 8005818:	3b01      	subs	r3, #1
 800581a:	b29a      	uxth	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	f003 0304 	and.w	r3, r3, #4
 800582a:	2b04      	cmp	r3, #4
 800582c:	d118      	bne.n	8005860 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	691a      	ldr	r2, [r3, #16]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005838:	b2d2      	uxtb	r2, r2
 800583a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005840:	1c5a      	adds	r2, r3, #1
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800584a:	3b01      	subs	r3, #1
 800584c:	b29a      	uxth	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005856:	b29b      	uxth	r3, r3
 8005858:	3b01      	subs	r3, #1
 800585a:	b29a      	uxth	r2, r3
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005864:	2b00      	cmp	r3, #0
 8005866:	f47f aec2 	bne.w	80055ee <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2220      	movs	r2, #32
 800586e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005882:	2300      	movs	r3, #0
 8005884:	e000      	b.n	8005888 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005886:	2302      	movs	r3, #2
  }
}
 8005888:	4618      	mov	r0, r3
 800588a:	3728      	adds	r7, #40	; 0x28
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	00010004 	.word	0x00010004

08005894 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b088      	sub	sp, #32
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800589c:	2300      	movs	r3, #0
 800589e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ac:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058b4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058bc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80058be:	7bfb      	ldrb	r3, [r7, #15]
 80058c0:	2b10      	cmp	r3, #16
 80058c2:	d003      	beq.n	80058cc <HAL_I2C_EV_IRQHandler+0x38>
 80058c4:	7bfb      	ldrb	r3, [r7, #15]
 80058c6:	2b40      	cmp	r3, #64	; 0x40
 80058c8:	f040 80b1 	bne.w	8005a2e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d10d      	bne.n	8005902 <HAL_I2C_EV_IRQHandler+0x6e>
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80058ec:	d003      	beq.n	80058f6 <HAL_I2C_EV_IRQHandler+0x62>
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80058f4:	d101      	bne.n	80058fa <HAL_I2C_EV_IRQHandler+0x66>
 80058f6:	2301      	movs	r3, #1
 80058f8:	e000      	b.n	80058fc <HAL_I2C_EV_IRQHandler+0x68>
 80058fa:	2300      	movs	r3, #0
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	f000 8114 	beq.w	8005b2a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	f003 0301 	and.w	r3, r3, #1
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00b      	beq.n	8005924 <HAL_I2C_EV_IRQHandler+0x90>
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005912:	2b00      	cmp	r3, #0
 8005914:	d006      	beq.n	8005924 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f001 ff81 	bl	800781e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 fd5e 	bl	80063de <I2C_Master_SB>
 8005922:	e083      	b.n	8005a2c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	f003 0308 	and.w	r3, r3, #8
 800592a:	2b00      	cmp	r3, #0
 800592c:	d008      	beq.n	8005940 <HAL_I2C_EV_IRQHandler+0xac>
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005934:	2b00      	cmp	r3, #0
 8005936:	d003      	beq.n	8005940 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 fdd6 	bl	80064ea <I2C_Master_ADD10>
 800593e:	e075      	b.n	8005a2c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	f003 0302 	and.w	r3, r3, #2
 8005946:	2b00      	cmp	r3, #0
 8005948:	d008      	beq.n	800595c <HAL_I2C_EV_IRQHandler+0xc8>
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005950:	2b00      	cmp	r3, #0
 8005952:	d003      	beq.n	800595c <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 fdf2 	bl	800653e <I2C_Master_ADDR>
 800595a:	e067      	b.n	8005a2c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	f003 0304 	and.w	r3, r3, #4
 8005962:	2b00      	cmp	r3, #0
 8005964:	d036      	beq.n	80059d4 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005970:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005974:	f000 80db 	beq.w	8005b2e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00d      	beq.n	800599e <HAL_I2C_EV_IRQHandler+0x10a>
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005988:	2b00      	cmp	r3, #0
 800598a:	d008      	beq.n	800599e <HAL_I2C_EV_IRQHandler+0x10a>
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	f003 0304 	and.w	r3, r3, #4
 8005992:	2b00      	cmp	r3, #0
 8005994:	d103      	bne.n	800599e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 f9d6 	bl	8005d48 <I2C_MasterTransmit_TXE>
 800599c:	e046      	b.n	8005a2c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	f003 0304 	and.w	r3, r3, #4
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f000 80c2 	beq.w	8005b2e <HAL_I2C_EV_IRQHandler+0x29a>
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f000 80bc 	beq.w	8005b2e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80059b6:	7bbb      	ldrb	r3, [r7, #14]
 80059b8:	2b21      	cmp	r3, #33	; 0x21
 80059ba:	d103      	bne.n	80059c4 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 fa5f 	bl	8005e80 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80059c2:	e0b4      	b.n	8005b2e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80059c4:	7bfb      	ldrb	r3, [r7, #15]
 80059c6:	2b40      	cmp	r3, #64	; 0x40
 80059c8:	f040 80b1 	bne.w	8005b2e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 facd 	bl	8005f6c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80059d2:	e0ac      	b.n	8005b2e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059e2:	f000 80a4 	beq.w	8005b2e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00d      	beq.n	8005a0c <HAL_I2C_EV_IRQHandler+0x178>
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d008      	beq.n	8005a0c <HAL_I2C_EV_IRQHandler+0x178>
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	f003 0304 	and.w	r3, r3, #4
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d103      	bne.n	8005a0c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 fb45 	bl	8006094 <I2C_MasterReceive_RXNE>
 8005a0a:	e00f      	b.n	8005a2c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	f003 0304 	and.w	r3, r3, #4
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	f000 808b 	beq.w	8005b2e <HAL_I2C_EV_IRQHandler+0x29a>
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	f000 8085 	beq.w	8005b2e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 fbf0 	bl	800620a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a2a:	e080      	b.n	8005b2e <HAL_I2C_EV_IRQHandler+0x29a>
 8005a2c:	e07f      	b.n	8005b2e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d004      	beq.n	8005a40 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	695b      	ldr	r3, [r3, #20]
 8005a3c:	61fb      	str	r3, [r7, #28]
 8005a3e:	e007      	b.n	8005a50 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	699b      	ldr	r3, [r3, #24]
 8005a46:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	f003 0302 	and.w	r3, r3, #2
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d011      	beq.n	8005a7e <HAL_I2C_EV_IRQHandler+0x1ea>
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d00c      	beq.n	8005a7e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d003      	beq.n	8005a74 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005a74:	69b9      	ldr	r1, [r7, #24]
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 ffb0 	bl	80069dc <I2C_Slave_ADDR>
 8005a7c:	e05a      	b.n	8005b34 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	f003 0310 	and.w	r3, r3, #16
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d008      	beq.n	8005a9a <HAL_I2C_EV_IRQHandler+0x206>
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d003      	beq.n	8005a9a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 ffea 	bl	8006a6c <I2C_Slave_STOPF>
 8005a98:	e04c      	b.n	8005b34 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005a9a:	7bbb      	ldrb	r3, [r7, #14]
 8005a9c:	2b21      	cmp	r3, #33	; 0x21
 8005a9e:	d002      	beq.n	8005aa6 <HAL_I2C_EV_IRQHandler+0x212>
 8005aa0:	7bbb      	ldrb	r3, [r7, #14]
 8005aa2:	2b29      	cmp	r3, #41	; 0x29
 8005aa4:	d120      	bne.n	8005ae8 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00d      	beq.n	8005acc <HAL_I2C_EV_IRQHandler+0x238>
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d008      	beq.n	8005acc <HAL_I2C_EV_IRQHandler+0x238>
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	f003 0304 	and.w	r3, r3, #4
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d103      	bne.n	8005acc <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 fecb 	bl	8006860 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005aca:	e032      	b.n	8005b32 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	f003 0304 	and.w	r3, r3, #4
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d02d      	beq.n	8005b32 <HAL_I2C_EV_IRQHandler+0x29e>
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d028      	beq.n	8005b32 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 fefa 	bl	80068da <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005ae6:	e024      	b.n	8005b32 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00d      	beq.n	8005b0e <HAL_I2C_EV_IRQHandler+0x27a>
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d008      	beq.n	8005b0e <HAL_I2C_EV_IRQHandler+0x27a>
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	f003 0304 	and.w	r3, r3, #4
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d103      	bne.n	8005b0e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 ff08 	bl	800691c <I2C_SlaveReceive_RXNE>
 8005b0c:	e012      	b.n	8005b34 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	f003 0304 	and.w	r3, r3, #4
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d00d      	beq.n	8005b34 <HAL_I2C_EV_IRQHandler+0x2a0>
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d008      	beq.n	8005b34 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 ff38 	bl	8006998 <I2C_SlaveReceive_BTF>
 8005b28:	e004      	b.n	8005b34 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8005b2a:	bf00      	nop
 8005b2c:	e002      	b.n	8005b34 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b2e:	bf00      	nop
 8005b30:	e000      	b.n	8005b34 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005b32:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005b34:	3720      	adds	r7, #32
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}

08005b3a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b08a      	sub	sp, #40	; 0x28
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	695b      	ldr	r3, [r3, #20]
 8005b48:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005b52:	2300      	movs	r3, #0
 8005b54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b5c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005b5e:	6a3b      	ldr	r3, [r7, #32]
 8005b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d00d      	beq.n	8005b84 <HAL_I2C_ER_IRQHandler+0x4a>
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d008      	beq.n	8005b84 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b74:	f043 0301 	orr.w	r3, r3, #1
 8005b78:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005b82:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005b84:	6a3b      	ldr	r3, [r7, #32]
 8005b86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00d      	beq.n	8005baa <HAL_I2C_ER_IRQHandler+0x70>
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d008      	beq.n	8005baa <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9a:	f043 0302 	orr.w	r3, r3, #2
 8005b9e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005ba8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005baa:	6a3b      	ldr	r3, [r7, #32]
 8005bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d03e      	beq.n	8005c32 <HAL_I2C_ER_IRQHandler+0xf8>
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d039      	beq.n	8005c32 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8005bbe:	7efb      	ldrb	r3, [r7, #27]
 8005bc0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bd0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005bd8:	7ebb      	ldrb	r3, [r7, #26]
 8005bda:	2b20      	cmp	r3, #32
 8005bdc:	d112      	bne.n	8005c04 <HAL_I2C_ER_IRQHandler+0xca>
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10f      	bne.n	8005c04 <HAL_I2C_ER_IRQHandler+0xca>
 8005be4:	7cfb      	ldrb	r3, [r7, #19]
 8005be6:	2b21      	cmp	r3, #33	; 0x21
 8005be8:	d008      	beq.n	8005bfc <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005bea:	7cfb      	ldrb	r3, [r7, #19]
 8005bec:	2b29      	cmp	r3, #41	; 0x29
 8005bee:	d005      	beq.n	8005bfc <HAL_I2C_ER_IRQHandler+0xc2>
 8005bf0:	7cfb      	ldrb	r3, [r7, #19]
 8005bf2:	2b28      	cmp	r3, #40	; 0x28
 8005bf4:	d106      	bne.n	8005c04 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2b21      	cmp	r3, #33	; 0x21
 8005bfa:	d103      	bne.n	8005c04 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f001 f865 	bl	8006ccc <I2C_Slave_AF>
 8005c02:	e016      	b.n	8005c32 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c0c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c10:	f043 0304 	orr.w	r3, r3, #4
 8005c14:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005c16:	7efb      	ldrb	r3, [r7, #27]
 8005c18:	2b10      	cmp	r3, #16
 8005c1a:	d002      	beq.n	8005c22 <HAL_I2C_ER_IRQHandler+0xe8>
 8005c1c:	7efb      	ldrb	r3, [r7, #27]
 8005c1e:	2b40      	cmp	r3, #64	; 0x40
 8005c20:	d107      	bne.n	8005c32 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c30:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005c32:	6a3b      	ldr	r3, [r7, #32]
 8005c34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00d      	beq.n	8005c58 <HAL_I2C_ER_IRQHandler+0x11e>
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d008      	beq.n	8005c58 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c48:	f043 0308 	orr.w	r3, r3, #8
 8005c4c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005c56:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d008      	beq.n	8005c70 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c64:	431a      	orrs	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f001 f89e 	bl	8006dac <I2C_ITError>
  }
}
 8005c70:	bf00      	nop
 8005c72:	3728      	adds	r7, #40	; 0x28
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005c80:	bf00      	nop
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005c94:	bf00      	nop
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005ca8:	bf00      	nop
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	70fb      	strb	r3, [r7, #3]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005cd8:	bf00      	nop
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005cec:	bf00      	nop
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005d00:	bf00      	nop
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005d14:	bf00      	nop
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005d28:	bf00      	nop
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d56:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d5e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d64:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d150      	bne.n	8005e10 <I2C_MasterTransmit_TXE+0xc8>
 8005d6e:	7bfb      	ldrb	r3, [r7, #15]
 8005d70:	2b21      	cmp	r3, #33	; 0x21
 8005d72:	d14d      	bne.n	8005e10 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	2b08      	cmp	r3, #8
 8005d78:	d01d      	beq.n	8005db6 <I2C_MasterTransmit_TXE+0x6e>
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	2b20      	cmp	r3, #32
 8005d7e:	d01a      	beq.n	8005db6 <I2C_MasterTransmit_TXE+0x6e>
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d86:	d016      	beq.n	8005db6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	685a      	ldr	r2, [r3, #4]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005d96:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2211      	movs	r2, #17
 8005d9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2220      	movs	r2, #32
 8005daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f7ff ff62 	bl	8005c78 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005db4:	e060      	b.n	8005e78 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	685a      	ldr	r2, [r3, #4]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005dc4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dd4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2220      	movs	r2, #32
 8005de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	2b40      	cmp	r3, #64	; 0x40
 8005dee:	d107      	bne.n	8005e00 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f7ff ff7d 	bl	8005cf8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005dfe:	e03b      	b.n	8005e78 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f7ff ff35 	bl	8005c78 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005e0e:	e033      	b.n	8005e78 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005e10:	7bfb      	ldrb	r3, [r7, #15]
 8005e12:	2b21      	cmp	r3, #33	; 0x21
 8005e14:	d005      	beq.n	8005e22 <I2C_MasterTransmit_TXE+0xda>
 8005e16:	7bbb      	ldrb	r3, [r7, #14]
 8005e18:	2b40      	cmp	r3, #64	; 0x40
 8005e1a:	d12d      	bne.n	8005e78 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005e1c:	7bfb      	ldrb	r3, [r7, #15]
 8005e1e:	2b22      	cmp	r3, #34	; 0x22
 8005e20:	d12a      	bne.n	8005e78 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d108      	bne.n	8005e3e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	685a      	ldr	r2, [r3, #4]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e3a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005e3c:	e01c      	b.n	8005e78 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2b40      	cmp	r3, #64	; 0x40
 8005e48:	d103      	bne.n	8005e52 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 f88e 	bl	8005f6c <I2C_MemoryTransmit_TXE_BTF>
}
 8005e50:	e012      	b.n	8005e78 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e56:	781a      	ldrb	r2, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e62:	1c5a      	adds	r2, r3, #1
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	b29a      	uxth	r2, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005e76:	e7ff      	b.n	8005e78 <I2C_MasterTransmit_TXE+0x130>
 8005e78:	bf00      	nop
 8005e7a:	3710      	adds	r7, #16
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	2b21      	cmp	r3, #33	; 0x21
 8005e98:	d164      	bne.n	8005f64 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d012      	beq.n	8005eca <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea8:	781a      	ldrb	r2, [r3, #0]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb4:	1c5a      	adds	r2, r3, #1
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	3b01      	subs	r3, #1
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005ec8:	e04c      	b.n	8005f64 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2b08      	cmp	r3, #8
 8005ece:	d01d      	beq.n	8005f0c <I2C_MasterTransmit_BTF+0x8c>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2b20      	cmp	r3, #32
 8005ed4:	d01a      	beq.n	8005f0c <I2C_MasterTransmit_BTF+0x8c>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005edc:	d016      	beq.n	8005f0c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	685a      	ldr	r2, [r3, #4]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005eec:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2211      	movs	r2, #17
 8005ef2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2220      	movs	r2, #32
 8005f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f7ff feb7 	bl	8005c78 <HAL_I2C_MasterTxCpltCallback>
}
 8005f0a:	e02b      	b.n	8005f64 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	685a      	ldr	r2, [r3, #4]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f1a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f2a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2220      	movs	r2, #32
 8005f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	2b40      	cmp	r3, #64	; 0x40
 8005f44:	d107      	bne.n	8005f56 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f7ff fed2 	bl	8005cf8 <HAL_I2C_MemTxCpltCallback>
}
 8005f54:	e006      	b.n	8005f64 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f7ff fe8a 	bl	8005c78 <HAL_I2C_MasterTxCpltCallback>
}
 8005f64:	bf00      	nop
 8005f66:	3710      	adds	r7, #16
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f7a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d11d      	bne.n	8005fc0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d10b      	bne.n	8005fa4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f90:	b2da      	uxtb	r2, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f9c:	1c9a      	adds	r2, r3, #2
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005fa2:	e073      	b.n	800608c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	121b      	asrs	r3, r3, #8
 8005fac:	b2da      	uxtb	r2, r3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fb8:	1c5a      	adds	r2, r3, #1
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005fbe:	e065      	b.n	800608c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d10b      	bne.n	8005fe0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fcc:	b2da      	uxtb	r2, r3
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fd8:	1c5a      	adds	r2, r3, #1
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005fde:	e055      	b.n	800608c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	d151      	bne.n	800608c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005fe8:	7bfb      	ldrb	r3, [r7, #15]
 8005fea:	2b22      	cmp	r3, #34	; 0x22
 8005fec:	d10d      	bne.n	800600a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ffc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006002:	1c5a      	adds	r2, r3, #1
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006008:	e040      	b.n	800608c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800600e:	b29b      	uxth	r3, r3
 8006010:	2b00      	cmp	r3, #0
 8006012:	d015      	beq.n	8006040 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006014:	7bfb      	ldrb	r3, [r7, #15]
 8006016:	2b21      	cmp	r3, #33	; 0x21
 8006018:	d112      	bne.n	8006040 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601e:	781a      	ldrb	r2, [r3, #0]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602a:	1c5a      	adds	r2, r3, #1
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006034:	b29b      	uxth	r3, r3
 8006036:	3b01      	subs	r3, #1
 8006038:	b29a      	uxth	r2, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800603e:	e025      	b.n	800608c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006044:	b29b      	uxth	r3, r3
 8006046:	2b00      	cmp	r3, #0
 8006048:	d120      	bne.n	800608c <I2C_MemoryTransmit_TXE_BTF+0x120>
 800604a:	7bfb      	ldrb	r3, [r7, #15]
 800604c:	2b21      	cmp	r3, #33	; 0x21
 800604e:	d11d      	bne.n	800608c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	685a      	ldr	r2, [r3, #4]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800605e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800606e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2220      	movs	r2, #32
 800607a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f7ff fe36 	bl	8005cf8 <HAL_I2C_MemTxCpltCallback>
}
 800608c:	bf00      	nop
 800608e:	3710      	adds	r7, #16
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	2b22      	cmp	r3, #34	; 0x22
 80060a6:	f040 80ac 	bne.w	8006202 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2b03      	cmp	r3, #3
 80060b6:	d921      	bls.n	80060fc <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	691a      	ldr	r2, [r3, #16]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c2:	b2d2      	uxtb	r2, r2
 80060c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ca:	1c5a      	adds	r2, r3, #1
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	3b01      	subs	r3, #1
 80060d8:	b29a      	uxth	r2, r3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	2b03      	cmp	r3, #3
 80060e6:	f040 808c 	bne.w	8006202 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	685a      	ldr	r2, [r3, #4]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060f8:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80060fa:	e082      	b.n	8006202 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006100:	2b02      	cmp	r3, #2
 8006102:	d075      	beq.n	80061f0 <I2C_MasterReceive_RXNE+0x15c>
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2b01      	cmp	r3, #1
 8006108:	d002      	beq.n	8006110 <I2C_MasterReceive_RXNE+0x7c>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d16f      	bne.n	80061f0 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f001 facd 	bl	80076b0 <I2C_WaitOnSTOPRequestThroughIT>
 8006116:	4603      	mov	r3, r0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d142      	bne.n	80061a2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800612a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	685a      	ldr	r2, [r3, #4]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800613a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	691a      	ldr	r2, [r3, #16]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006146:	b2d2      	uxtb	r2, r2
 8006148:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614e:	1c5a      	adds	r2, r3, #1
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006158:	b29b      	uxth	r3, r3
 800615a:	3b01      	subs	r3, #1
 800615c:	b29a      	uxth	r2, r3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2220      	movs	r2, #32
 8006166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b40      	cmp	r3, #64	; 0x40
 8006174:	d10a      	bne.n	800618c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f7ff fdc1 	bl	8005d0c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800618a:	e03a      	b.n	8006202 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2212      	movs	r2, #18
 8006198:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f7ff fd76 	bl	8005c8c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80061a0:	e02f      	b.n	8006202 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	685a      	ldr	r2, [r3, #4]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80061b0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	691a      	ldr	r2, [r3, #16]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061bc:	b2d2      	uxtb	r2, r2
 80061be:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c4:	1c5a      	adds	r2, r3, #1
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	3b01      	subs	r3, #1
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2220      	movs	r2, #32
 80061dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f7ff fd99 	bl	8005d20 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80061ee:	e008      	b.n	8006202 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061fe:	605a      	str	r2, [r3, #4]
}
 8006200:	e7ff      	b.n	8006202 <I2C_MasterReceive_RXNE+0x16e>
 8006202:	bf00      	nop
 8006204:	3710      	adds	r7, #16
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800620a:	b580      	push	{r7, lr}
 800620c:	b084      	sub	sp, #16
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006216:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800621c:	b29b      	uxth	r3, r3
 800621e:	2b04      	cmp	r3, #4
 8006220:	d11b      	bne.n	800625a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	685a      	ldr	r2, [r3, #4]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006230:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	691a      	ldr	r2, [r3, #16]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623c:	b2d2      	uxtb	r2, r2
 800623e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006244:	1c5a      	adds	r2, r3, #1
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800624e:	b29b      	uxth	r3, r3
 8006250:	3b01      	subs	r3, #1
 8006252:	b29a      	uxth	r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006258:	e0bd      	b.n	80063d6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800625e:	b29b      	uxth	r3, r3
 8006260:	2b03      	cmp	r3, #3
 8006262:	d129      	bne.n	80062b8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	685a      	ldr	r2, [r3, #4]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006272:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2b04      	cmp	r3, #4
 8006278:	d00a      	beq.n	8006290 <I2C_MasterReceive_BTF+0x86>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2b02      	cmp	r3, #2
 800627e:	d007      	beq.n	8006290 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800628e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	691a      	ldr	r2, [r3, #16]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629a:	b2d2      	uxtb	r2, r2
 800629c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a2:	1c5a      	adds	r2, r3, #1
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	3b01      	subs	r3, #1
 80062b0:	b29a      	uxth	r2, r3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80062b6:	e08e      	b.n	80063d6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062bc:	b29b      	uxth	r3, r3
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d176      	bne.n	80063b0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d002      	beq.n	80062ce <I2C_MasterReceive_BTF+0xc4>
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2b10      	cmp	r3, #16
 80062cc:	d108      	bne.n	80062e0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062dc:	601a      	str	r2, [r3, #0]
 80062de:	e019      	b.n	8006314 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2b04      	cmp	r3, #4
 80062e4:	d002      	beq.n	80062ec <I2C_MasterReceive_BTF+0xe2>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d108      	bne.n	80062fe <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80062fa:	601a      	str	r2, [r3, #0]
 80062fc:	e00a      	b.n	8006314 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2b10      	cmp	r3, #16
 8006302:	d007      	beq.n	8006314 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006312:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	691a      	ldr	r2, [r3, #16]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631e:	b2d2      	uxtb	r2, r2
 8006320:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006326:	1c5a      	adds	r2, r3, #1
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006330:	b29b      	uxth	r3, r3
 8006332:	3b01      	subs	r3, #1
 8006334:	b29a      	uxth	r2, r3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	691a      	ldr	r2, [r3, #16]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006344:	b2d2      	uxtb	r2, r2
 8006346:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634c:	1c5a      	adds	r2, r3, #1
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006356:	b29b      	uxth	r3, r3
 8006358:	3b01      	subs	r3, #1
 800635a:	b29a      	uxth	r2, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	685a      	ldr	r2, [r3, #4]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800636e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2220      	movs	r2, #32
 8006374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800637e:	b2db      	uxtb	r3, r3
 8006380:	2b40      	cmp	r3, #64	; 0x40
 8006382:	d10a      	bne.n	800639a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f7ff fcba 	bl	8005d0c <HAL_I2C_MemRxCpltCallback>
}
 8006398:	e01d      	b.n	80063d6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2212      	movs	r2, #18
 80063a6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f7ff fc6f 	bl	8005c8c <HAL_I2C_MasterRxCpltCallback>
}
 80063ae:	e012      	b.n	80063d6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	691a      	ldr	r2, [r3, #16]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ba:	b2d2      	uxtb	r2, r2
 80063bc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c2:	1c5a      	adds	r2, r3, #1
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	3b01      	subs	r3, #1
 80063d0:	b29a      	uxth	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80063d6:	bf00      	nop
 80063d8:	3710      	adds	r7, #16
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}

080063de <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80063de:	b480      	push	{r7}
 80063e0:	b083      	sub	sp, #12
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	2b40      	cmp	r3, #64	; 0x40
 80063f0:	d117      	bne.n	8006422 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d109      	bne.n	800640e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	461a      	mov	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800640a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800640c:	e067      	b.n	80064de <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006412:	b2db      	uxtb	r3, r3
 8006414:	f043 0301 	orr.w	r3, r3, #1
 8006418:	b2da      	uxtb	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	611a      	str	r2, [r3, #16]
}
 8006420:	e05d      	b.n	80064de <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800642a:	d133      	bne.n	8006494 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006432:	b2db      	uxtb	r3, r3
 8006434:	2b21      	cmp	r3, #33	; 0x21
 8006436:	d109      	bne.n	800644c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800643c:	b2db      	uxtb	r3, r3
 800643e:	461a      	mov	r2, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006448:	611a      	str	r2, [r3, #16]
 800644a:	e008      	b.n	800645e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006450:	b2db      	uxtb	r3, r3
 8006452:	f043 0301 	orr.w	r3, r3, #1
 8006456:	b2da      	uxtb	r2, r3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006462:	2b00      	cmp	r3, #0
 8006464:	d004      	beq.n	8006470 <I2C_Master_SB+0x92>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800646a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800646c:	2b00      	cmp	r3, #0
 800646e:	d108      	bne.n	8006482 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006474:	2b00      	cmp	r3, #0
 8006476:	d032      	beq.n	80064de <I2C_Master_SB+0x100>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800647e:	2b00      	cmp	r3, #0
 8006480:	d02d      	beq.n	80064de <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	685a      	ldr	r2, [r3, #4]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006490:	605a      	str	r2, [r3, #4]
}
 8006492:	e024      	b.n	80064de <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006498:	2b00      	cmp	r3, #0
 800649a:	d10e      	bne.n	80064ba <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	11db      	asrs	r3, r3, #7
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	f003 0306 	and.w	r3, r3, #6
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	f063 030f 	orn	r3, r3, #15
 80064b0:	b2da      	uxtb	r2, r3
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	611a      	str	r2, [r3, #16]
}
 80064b8:	e011      	b.n	80064de <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d10d      	bne.n	80064de <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	11db      	asrs	r3, r3, #7
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	f003 0306 	and.w	r3, r3, #6
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	f063 030e 	orn	r3, r3, #14
 80064d6:	b2da      	uxtb	r2, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	611a      	str	r2, [r3, #16]
}
 80064de:	bf00      	nop
 80064e0:	370c      	adds	r7, #12
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr

080064ea <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80064ea:	b480      	push	{r7}
 80064ec:	b083      	sub	sp, #12
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064f6:	b2da      	uxtb	r2, r3
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006502:	2b00      	cmp	r3, #0
 8006504:	d004      	beq.n	8006510 <I2C_Master_ADD10+0x26>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800650a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800650c:	2b00      	cmp	r3, #0
 800650e:	d108      	bne.n	8006522 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00c      	beq.n	8006532 <I2C_Master_ADD10+0x48>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800651c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800651e:	2b00      	cmp	r3, #0
 8006520:	d007      	beq.n	8006532 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	685a      	ldr	r2, [r3, #4]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006530:	605a      	str	r2, [r3, #4]
  }
}
 8006532:	bf00      	nop
 8006534:	370c      	adds	r7, #12
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr

0800653e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800653e:	b480      	push	{r7}
 8006540:	b091      	sub	sp, #68	; 0x44
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800654c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006554:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800655a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006562:	b2db      	uxtb	r3, r3
 8006564:	2b22      	cmp	r3, #34	; 0x22
 8006566:	f040 8169 	bne.w	800683c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800656e:	2b00      	cmp	r3, #0
 8006570:	d10f      	bne.n	8006592 <I2C_Master_ADDR+0x54>
 8006572:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006576:	2b40      	cmp	r3, #64	; 0x40
 8006578:	d10b      	bne.n	8006592 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800657a:	2300      	movs	r3, #0
 800657c:	633b      	str	r3, [r7, #48]	; 0x30
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	695b      	ldr	r3, [r3, #20]
 8006584:	633b      	str	r3, [r7, #48]	; 0x30
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	699b      	ldr	r3, [r3, #24]
 800658c:	633b      	str	r3, [r7, #48]	; 0x30
 800658e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006590:	e160      	b.n	8006854 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006596:	2b00      	cmp	r3, #0
 8006598:	d11d      	bne.n	80065d6 <I2C_Master_ADDR+0x98>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80065a2:	d118      	bne.n	80065d6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065a4:	2300      	movs	r3, #0
 80065a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	695b      	ldr	r3, [r3, #20]
 80065ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	699b      	ldr	r3, [r3, #24]
 80065b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065c8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065ce:	1c5a      	adds	r2, r3, #1
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	651a      	str	r2, [r3, #80]	; 0x50
 80065d4:	e13e      	b.n	8006854 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065da:	b29b      	uxth	r3, r3
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d113      	bne.n	8006608 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065e0:	2300      	movs	r3, #0
 80065e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	695b      	ldr	r3, [r3, #20]
 80065ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	699b      	ldr	r3, [r3, #24]
 80065f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80065f4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006604:	601a      	str	r2, [r3, #0]
 8006606:	e115      	b.n	8006834 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800660c:	b29b      	uxth	r3, r3
 800660e:	2b01      	cmp	r3, #1
 8006610:	f040 808a 	bne.w	8006728 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006616:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800661a:	d137      	bne.n	800668c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800662a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006636:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800663a:	d113      	bne.n	8006664 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800664a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800664c:	2300      	movs	r3, #0
 800664e:	627b      	str	r3, [r7, #36]	; 0x24
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	695b      	ldr	r3, [r3, #20]
 8006656:	627b      	str	r3, [r7, #36]	; 0x24
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	699b      	ldr	r3, [r3, #24]
 800665e:	627b      	str	r3, [r7, #36]	; 0x24
 8006660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006662:	e0e7      	b.n	8006834 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006664:	2300      	movs	r3, #0
 8006666:	623b      	str	r3, [r7, #32]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	695b      	ldr	r3, [r3, #20]
 800666e:	623b      	str	r3, [r7, #32]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	699b      	ldr	r3, [r3, #24]
 8006676:	623b      	str	r3, [r7, #32]
 8006678:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006688:	601a      	str	r2, [r3, #0]
 800668a:	e0d3      	b.n	8006834 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800668c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800668e:	2b08      	cmp	r3, #8
 8006690:	d02e      	beq.n	80066f0 <I2C_Master_ADDR+0x1b2>
 8006692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006694:	2b20      	cmp	r3, #32
 8006696:	d02b      	beq.n	80066f0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800669a:	2b12      	cmp	r3, #18
 800669c:	d102      	bne.n	80066a4 <I2C_Master_ADDR+0x166>
 800669e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d125      	bne.n	80066f0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80066a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a6:	2b04      	cmp	r3, #4
 80066a8:	d00e      	beq.n	80066c8 <I2C_Master_ADDR+0x18a>
 80066aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ac:	2b02      	cmp	r3, #2
 80066ae:	d00b      	beq.n	80066c8 <I2C_Master_ADDR+0x18a>
 80066b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b2:	2b10      	cmp	r3, #16
 80066b4:	d008      	beq.n	80066c8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066c4:	601a      	str	r2, [r3, #0]
 80066c6:	e007      	b.n	80066d8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80066d6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066d8:	2300      	movs	r3, #0
 80066da:	61fb      	str	r3, [r7, #28]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	695b      	ldr	r3, [r3, #20]
 80066e2:	61fb      	str	r3, [r7, #28]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	699b      	ldr	r3, [r3, #24]
 80066ea:	61fb      	str	r3, [r7, #28]
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	e0a1      	b.n	8006834 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066fe:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006700:	2300      	movs	r3, #0
 8006702:	61bb      	str	r3, [r7, #24]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	695b      	ldr	r3, [r3, #20]
 800670a:	61bb      	str	r3, [r7, #24]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	699b      	ldr	r3, [r3, #24]
 8006712:	61bb      	str	r3, [r7, #24]
 8006714:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006724:	601a      	str	r2, [r3, #0]
 8006726:	e085      	b.n	8006834 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800672c:	b29b      	uxth	r3, r3
 800672e:	2b02      	cmp	r3, #2
 8006730:	d14d      	bne.n	80067ce <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006734:	2b04      	cmp	r3, #4
 8006736:	d016      	beq.n	8006766 <I2C_Master_ADDR+0x228>
 8006738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800673a:	2b02      	cmp	r3, #2
 800673c:	d013      	beq.n	8006766 <I2C_Master_ADDR+0x228>
 800673e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006740:	2b10      	cmp	r3, #16
 8006742:	d010      	beq.n	8006766 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006752:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006762:	601a      	str	r2, [r3, #0]
 8006764:	e007      	b.n	8006776 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006774:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006780:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006784:	d117      	bne.n	80067b6 <I2C_Master_ADDR+0x278>
 8006786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006788:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800678c:	d00b      	beq.n	80067a6 <I2C_Master_ADDR+0x268>
 800678e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006790:	2b01      	cmp	r3, #1
 8006792:	d008      	beq.n	80067a6 <I2C_Master_ADDR+0x268>
 8006794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006796:	2b08      	cmp	r3, #8
 8006798:	d005      	beq.n	80067a6 <I2C_Master_ADDR+0x268>
 800679a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800679c:	2b10      	cmp	r3, #16
 800679e:	d002      	beq.n	80067a6 <I2C_Master_ADDR+0x268>
 80067a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a2:	2b20      	cmp	r3, #32
 80067a4:	d107      	bne.n	80067b6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	685a      	ldr	r2, [r3, #4]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80067b4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067b6:	2300      	movs	r3, #0
 80067b8:	617b      	str	r3, [r7, #20]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	695b      	ldr	r3, [r3, #20]
 80067c0:	617b      	str	r3, [r7, #20]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	699b      	ldr	r3, [r3, #24]
 80067c8:	617b      	str	r3, [r7, #20]
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	e032      	b.n	8006834 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80067dc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067ec:	d117      	bne.n	800681e <I2C_Master_ADDR+0x2e0>
 80067ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80067f4:	d00b      	beq.n	800680e <I2C_Master_ADDR+0x2d0>
 80067f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d008      	beq.n	800680e <I2C_Master_ADDR+0x2d0>
 80067fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067fe:	2b08      	cmp	r3, #8
 8006800:	d005      	beq.n	800680e <I2C_Master_ADDR+0x2d0>
 8006802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006804:	2b10      	cmp	r3, #16
 8006806:	d002      	beq.n	800680e <I2C_Master_ADDR+0x2d0>
 8006808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800680a:	2b20      	cmp	r3, #32
 800680c:	d107      	bne.n	800681e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	685a      	ldr	r2, [r3, #4]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800681c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800681e:	2300      	movs	r3, #0
 8006820:	613b      	str	r3, [r7, #16]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	695b      	ldr	r3, [r3, #20]
 8006828:	613b      	str	r3, [r7, #16]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	699b      	ldr	r3, [r3, #24]
 8006830:	613b      	str	r3, [r7, #16]
 8006832:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800683a:	e00b      	b.n	8006854 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800683c:	2300      	movs	r3, #0
 800683e:	60fb      	str	r3, [r7, #12]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	60fb      	str	r3, [r7, #12]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	699b      	ldr	r3, [r3, #24]
 800684e:	60fb      	str	r3, [r7, #12]
 8006850:	68fb      	ldr	r3, [r7, #12]
}
 8006852:	e7ff      	b.n	8006854 <I2C_Master_ADDR+0x316>
 8006854:	bf00      	nop
 8006856:	3744      	adds	r7, #68	; 0x44
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800686e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006874:	b29b      	uxth	r3, r3
 8006876:	2b00      	cmp	r3, #0
 8006878:	d02b      	beq.n	80068d2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687e:	781a      	ldrb	r2, [r3, #0]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688a:	1c5a      	adds	r2, r3, #1
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006894:	b29b      	uxth	r3, r3
 8006896:	3b01      	subs	r3, #1
 8006898:	b29a      	uxth	r2, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d114      	bne.n	80068d2 <I2C_SlaveTransmit_TXE+0x72>
 80068a8:	7bfb      	ldrb	r3, [r7, #15]
 80068aa:	2b29      	cmp	r3, #41	; 0x29
 80068ac:	d111      	bne.n	80068d2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	685a      	ldr	r2, [r3, #4]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068bc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2221      	movs	r2, #33	; 0x21
 80068c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2228      	movs	r2, #40	; 0x28
 80068c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f7ff f9e7 	bl	8005ca0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80068d2:	bf00      	nop
 80068d4:	3710      	adds	r7, #16
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80068da:	b480      	push	{r7}
 80068dc:	b083      	sub	sp, #12
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d011      	beq.n	8006910 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f0:	781a      	ldrb	r2, [r3, #0]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fc:	1c5a      	adds	r2, r3, #1
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006906:	b29b      	uxth	r3, r3
 8006908:	3b01      	subs	r3, #1
 800690a:	b29a      	uxth	r2, r3
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006910:	bf00      	nop
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800692a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006930:	b29b      	uxth	r3, r3
 8006932:	2b00      	cmp	r3, #0
 8006934:	d02c      	beq.n	8006990 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	691a      	ldr	r2, [r3, #16]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006940:	b2d2      	uxtb	r2, r2
 8006942:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006948:	1c5a      	adds	r2, r3, #1
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006952:	b29b      	uxth	r3, r3
 8006954:	3b01      	subs	r3, #1
 8006956:	b29a      	uxth	r2, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006960:	b29b      	uxth	r3, r3
 8006962:	2b00      	cmp	r3, #0
 8006964:	d114      	bne.n	8006990 <I2C_SlaveReceive_RXNE+0x74>
 8006966:	7bfb      	ldrb	r3, [r7, #15]
 8006968:	2b2a      	cmp	r3, #42	; 0x2a
 800696a:	d111      	bne.n	8006990 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	685a      	ldr	r2, [r3, #4]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800697a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2222      	movs	r2, #34	; 0x22
 8006980:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2228      	movs	r2, #40	; 0x28
 8006986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f7ff f992 	bl	8005cb4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006990:	bf00      	nop
 8006992:	3710      	adds	r7, #16
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d012      	beq.n	80069d0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	691a      	ldr	r2, [r3, #16]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b4:	b2d2      	uxtb	r2, r2
 80069b6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069bc:	1c5a      	adds	r2, r3, #1
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	3b01      	subs	r3, #1
 80069ca:	b29a      	uxth	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80069d0:	bf00      	nop
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80069e6:	2300      	movs	r3, #0
 80069e8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80069f6:	2b28      	cmp	r3, #40	; 0x28
 80069f8:	d125      	bne.n	8006a46 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	685a      	ldr	r2, [r3, #4]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a08:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	f003 0304 	and.w	r3, r3, #4
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d101      	bne.n	8006a18 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006a14:	2301      	movs	r3, #1
 8006a16:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d103      	bne.n	8006a2a <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	81bb      	strh	r3, [r7, #12]
 8006a28:	e002      	b.n	8006a30 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	699b      	ldr	r3, [r3, #24]
 8006a2e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006a38:	89ba      	ldrh	r2, [r7, #12]
 8006a3a:	7bfb      	ldrb	r3, [r7, #15]
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f7ff f942 	bl	8005cc8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006a44:	e00e      	b.n	8006a64 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a46:	2300      	movs	r3, #0
 8006a48:	60bb      	str	r3, [r7, #8]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	695b      	ldr	r3, [r3, #20]
 8006a50:	60bb      	str	r3, [r7, #8]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	60bb      	str	r3, [r7, #8]
 8006a5a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006a64:	bf00      	nop
 8006a66:	3710      	adds	r7, #16
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a7a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	685a      	ldr	r2, [r3, #4]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006a8a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	60bb      	str	r3, [r7, #8]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	695b      	ldr	r3, [r3, #20]
 8006a96:	60bb      	str	r3, [r7, #8]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f042 0201 	orr.w	r2, r2, #1
 8006aa6:	601a      	str	r2, [r3, #0]
 8006aa8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ab8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ac4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ac8:	d172      	bne.n	8006bb0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006aca:	7bfb      	ldrb	r3, [r7, #15]
 8006acc:	2b22      	cmp	r3, #34	; 0x22
 8006ace:	d002      	beq.n	8006ad6 <I2C_Slave_STOPF+0x6a>
 8006ad0:	7bfb      	ldrb	r3, [r7, #15]
 8006ad2:	2b2a      	cmp	r3, #42	; 0x2a
 8006ad4:	d135      	bne.n	8006b42 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	b29a      	uxth	r2, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d005      	beq.n	8006afa <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af2:	f043 0204 	orr.w	r2, r3, #4
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	685a      	ldr	r2, [r3, #4]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b08:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7fd ffb4 	bl	8004a7c <HAL_DMA_GetState>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d049      	beq.n	8006bae <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b1e:	4a69      	ldr	r2, [pc, #420]	; (8006cc4 <I2C_Slave_STOPF+0x258>)
 8006b20:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b26:	4618      	mov	r0, r3
 8006b28:	f7fd fdfc 	bl	8004724 <HAL_DMA_Abort_IT>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d03d      	beq.n	8006bae <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006b3c:	4610      	mov	r0, r2
 8006b3e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006b40:	e035      	b.n	8006bae <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	b29a      	uxth	r2, r3
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d005      	beq.n	8006b66 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5e:	f043 0204 	orr.w	r2, r3, #4
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	685a      	ldr	r2, [r3, #4]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b74:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f7fd ff7e 	bl	8004a7c <HAL_DMA_GetState>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d014      	beq.n	8006bb0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b8a:	4a4e      	ldr	r2, [pc, #312]	; (8006cc4 <I2C_Slave_STOPF+0x258>)
 8006b8c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7fd fdc6 	bl	8004724 <HAL_DMA_Abort_IT>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d008      	beq.n	8006bb0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006ba8:	4610      	mov	r0, r2
 8006baa:	4798      	blx	r3
 8006bac:	e000      	b.n	8006bb0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006bae:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d03e      	beq.n	8006c38 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	695b      	ldr	r3, [r3, #20]
 8006bc0:	f003 0304 	and.w	r3, r3, #4
 8006bc4:	2b04      	cmp	r3, #4
 8006bc6:	d112      	bne.n	8006bee <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	691a      	ldr	r2, [r3, #16]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd2:	b2d2      	uxtb	r2, r2
 8006bd4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bda:	1c5a      	adds	r2, r3, #1
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	3b01      	subs	r3, #1
 8006be8:	b29a      	uxth	r2, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	695b      	ldr	r3, [r3, #20]
 8006bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bf8:	2b40      	cmp	r3, #64	; 0x40
 8006bfa:	d112      	bne.n	8006c22 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	691a      	ldr	r2, [r3, #16]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c06:	b2d2      	uxtb	r2, r2
 8006c08:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0e:	1c5a      	adds	r2, r3, #1
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	3b01      	subs	r3, #1
 8006c1c:	b29a      	uxth	r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d005      	beq.n	8006c38 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c30:	f043 0204 	orr.w	r2, r3, #4
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d003      	beq.n	8006c48 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 f8b3 	bl	8006dac <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006c46:	e039      	b.n	8006cbc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006c48:	7bfb      	ldrb	r3, [r7, #15]
 8006c4a:	2b2a      	cmp	r3, #42	; 0x2a
 8006c4c:	d109      	bne.n	8006c62 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2228      	movs	r2, #40	; 0x28
 8006c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f7ff f829 	bl	8005cb4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	2b28      	cmp	r3, #40	; 0x28
 8006c6c:	d111      	bne.n	8006c92 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4a15      	ldr	r2, [pc, #84]	; (8006cc8 <I2C_Slave_STOPF+0x25c>)
 8006c72:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2220      	movs	r2, #32
 8006c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f7ff f82a 	bl	8005ce4 <HAL_I2C_ListenCpltCallback>
}
 8006c90:	e014      	b.n	8006cbc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c96:	2b22      	cmp	r3, #34	; 0x22
 8006c98:	d002      	beq.n	8006ca0 <I2C_Slave_STOPF+0x234>
 8006c9a:	7bfb      	ldrb	r3, [r7, #15]
 8006c9c:	2b22      	cmp	r3, #34	; 0x22
 8006c9e:	d10d      	bne.n	8006cbc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2220      	movs	r2, #32
 8006caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f7fe fffc 	bl	8005cb4 <HAL_I2C_SlaveRxCpltCallback>
}
 8006cbc:	bf00      	nop
 8006cbe:	3710      	adds	r7, #16
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}
 8006cc4:	080072b1 	.word	0x080072b1
 8006cc8:	ffff0000 	.word	0xffff0000

08006ccc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cda:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	2b08      	cmp	r3, #8
 8006ce6:	d002      	beq.n	8006cee <I2C_Slave_AF+0x22>
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	2b20      	cmp	r3, #32
 8006cec:	d129      	bne.n	8006d42 <I2C_Slave_AF+0x76>
 8006cee:	7bfb      	ldrb	r3, [r7, #15]
 8006cf0:	2b28      	cmp	r3, #40	; 0x28
 8006cf2:	d126      	bne.n	8006d42 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4a2c      	ldr	r2, [pc, #176]	; (8006da8 <I2C_Slave_AF+0xdc>)
 8006cf8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	685a      	ldr	r2, [r3, #4]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006d08:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006d12:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d22:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2220      	movs	r2, #32
 8006d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f7fe ffd2 	bl	8005ce4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006d40:	e02e      	b.n	8006da0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006d42:	7bfb      	ldrb	r3, [r7, #15]
 8006d44:	2b21      	cmp	r3, #33	; 0x21
 8006d46:	d126      	bne.n	8006d96 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a17      	ldr	r2, [pc, #92]	; (8006da8 <I2C_Slave_AF+0xdc>)
 8006d4c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2221      	movs	r2, #33	; 0x21
 8006d52:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2220      	movs	r2, #32
 8006d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	685a      	ldr	r2, [r3, #4]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006d72:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006d7c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d8c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f7fe ff86 	bl	8005ca0 <HAL_I2C_SlaveTxCpltCallback>
}
 8006d94:	e004      	b.n	8006da0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006d9e:	615a      	str	r2, [r3, #20]
}
 8006da0:	bf00      	nop
 8006da2:	3710      	adds	r7, #16
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	ffff0000 	.word	0xffff0000

08006dac <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dba:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006dc2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006dc4:	7bbb      	ldrb	r3, [r7, #14]
 8006dc6:	2b10      	cmp	r3, #16
 8006dc8:	d002      	beq.n	8006dd0 <I2C_ITError+0x24>
 8006dca:	7bbb      	ldrb	r3, [r7, #14]
 8006dcc:	2b40      	cmp	r3, #64	; 0x40
 8006dce:	d10a      	bne.n	8006de6 <I2C_ITError+0x3a>
 8006dd0:	7bfb      	ldrb	r3, [r7, #15]
 8006dd2:	2b22      	cmp	r3, #34	; 0x22
 8006dd4:	d107      	bne.n	8006de6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006de4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006de6:	7bfb      	ldrb	r3, [r7, #15]
 8006de8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006dec:	2b28      	cmp	r3, #40	; 0x28
 8006dee:	d107      	bne.n	8006e00 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2228      	movs	r2, #40	; 0x28
 8006dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006dfe:	e015      	b.n	8006e2c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e0e:	d00a      	beq.n	8006e26 <I2C_ITError+0x7a>
 8006e10:	7bfb      	ldrb	r3, [r7, #15]
 8006e12:	2b60      	cmp	r3, #96	; 0x60
 8006e14:	d007      	beq.n	8006e26 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2220      	movs	r2, #32
 8006e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e3a:	d162      	bne.n	8006f02 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	685a      	ldr	r2, [r3, #4]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e4a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d020      	beq.n	8006e9c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e5e:	4a6a      	ldr	r2, [pc, #424]	; (8007008 <I2C_ITError+0x25c>)
 8006e60:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7fd fc5c 	bl	8004724 <HAL_DMA_Abort_IT>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	f000 8089 	beq.w	8006f86 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f022 0201 	bic.w	r2, r2, #1
 8006e82:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2220      	movs	r2, #32
 8006e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006e96:	4610      	mov	r0, r2
 8006e98:	4798      	blx	r3
 8006e9a:	e074      	b.n	8006f86 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea0:	4a59      	ldr	r2, [pc, #356]	; (8007008 <I2C_ITError+0x25c>)
 8006ea2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f7fd fc3b 	bl	8004724 <HAL_DMA_Abort_IT>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d068      	beq.n	8006f86 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	695b      	ldr	r3, [r3, #20]
 8006eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ebe:	2b40      	cmp	r3, #64	; 0x40
 8006ec0:	d10b      	bne.n	8006eda <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	691a      	ldr	r2, [r3, #16]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ecc:	b2d2      	uxtb	r2, r2
 8006ece:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed4:	1c5a      	adds	r2, r3, #1
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f022 0201 	bic.w	r2, r2, #1
 8006ee8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2220      	movs	r2, #32
 8006eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006efc:	4610      	mov	r0, r2
 8006efe:	4798      	blx	r3
 8006f00:	e041      	b.n	8006f86 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	2b60      	cmp	r3, #96	; 0x60
 8006f0c:	d125      	bne.n	8006f5a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2220      	movs	r2, #32
 8006f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	695b      	ldr	r3, [r3, #20]
 8006f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f26:	2b40      	cmp	r3, #64	; 0x40
 8006f28:	d10b      	bne.n	8006f42 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	691a      	ldr	r2, [r3, #16]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f34:	b2d2      	uxtb	r2, r2
 8006f36:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3c:	1c5a      	adds	r2, r3, #1
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f022 0201 	bic.w	r2, r2, #1
 8006f50:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f7fe feee 	bl	8005d34 <HAL_I2C_AbortCpltCallback>
 8006f58:	e015      	b.n	8006f86 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	695b      	ldr	r3, [r3, #20]
 8006f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f64:	2b40      	cmp	r3, #64	; 0x40
 8006f66:	d10b      	bne.n	8006f80 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	691a      	ldr	r2, [r3, #16]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f72:	b2d2      	uxtb	r2, r2
 8006f74:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7a:	1c5a      	adds	r2, r3, #1
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f7fe fecd 	bl	8005d20 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	f003 0301 	and.w	r3, r3, #1
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d10e      	bne.n	8006fb4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d109      	bne.n	8006fb4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d104      	bne.n	8006fb4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d007      	beq.n	8006fc4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	685a      	ldr	r2, [r3, #4]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006fc2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fca:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd0:	f003 0304 	and.w	r3, r3, #4
 8006fd4:	2b04      	cmp	r3, #4
 8006fd6:	d113      	bne.n	8007000 <I2C_ITError+0x254>
 8006fd8:	7bfb      	ldrb	r3, [r7, #15]
 8006fda:	2b28      	cmp	r3, #40	; 0x28
 8006fdc:	d110      	bne.n	8007000 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4a0a      	ldr	r2, [pc, #40]	; (800700c <I2C_ITError+0x260>)
 8006fe2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2220      	movs	r2, #32
 8006fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f7fe fe72 	bl	8005ce4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007000:	bf00      	nop
 8007002:	3710      	adds	r7, #16
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}
 8007008:	080072b1 	.word	0x080072b1
 800700c:	ffff0000 	.word	0xffff0000

08007010 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b088      	sub	sp, #32
 8007014:	af02      	add	r7, sp, #8
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	607a      	str	r2, [r7, #4]
 800701a:	603b      	str	r3, [r7, #0]
 800701c:	460b      	mov	r3, r1
 800701e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007024:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	2b08      	cmp	r3, #8
 800702a:	d006      	beq.n	800703a <I2C_MasterRequestWrite+0x2a>
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	2b01      	cmp	r3, #1
 8007030:	d003      	beq.n	800703a <I2C_MasterRequestWrite+0x2a>
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007038:	d108      	bne.n	800704c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007048:	601a      	str	r2, [r3, #0]
 800704a:	e00b      	b.n	8007064 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007050:	2b12      	cmp	r3, #18
 8007052:	d107      	bne.n	8007064 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007062:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	9300      	str	r3, [sp, #0]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007070:	68f8      	ldr	r0, [r7, #12]
 8007072:	f000 f9c5 	bl	8007400 <I2C_WaitOnFlagUntilTimeout>
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00d      	beq.n	8007098 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800708a:	d103      	bne.n	8007094 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007092:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007094:	2303      	movs	r3, #3
 8007096:	e035      	b.n	8007104 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070a0:	d108      	bne.n	80070b4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80070a2:	897b      	ldrh	r3, [r7, #10]
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	461a      	mov	r2, r3
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80070b0:	611a      	str	r2, [r3, #16]
 80070b2:	e01b      	b.n	80070ec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80070b4:	897b      	ldrh	r3, [r7, #10]
 80070b6:	11db      	asrs	r3, r3, #7
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	f003 0306 	and.w	r3, r3, #6
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	f063 030f 	orn	r3, r3, #15
 80070c4:	b2da      	uxtb	r2, r3
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	490e      	ldr	r1, [pc, #56]	; (800710c <I2C_MasterRequestWrite+0xfc>)
 80070d2:	68f8      	ldr	r0, [r7, #12]
 80070d4:	f000 f9eb 	bl	80074ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80070d8:	4603      	mov	r3, r0
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d001      	beq.n	80070e2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	e010      	b.n	8007104 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80070e2:	897b      	ldrh	r3, [r7, #10]
 80070e4:	b2da      	uxtb	r2, r3
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	4907      	ldr	r1, [pc, #28]	; (8007110 <I2C_MasterRequestWrite+0x100>)
 80070f2:	68f8      	ldr	r0, [r7, #12]
 80070f4:	f000 f9db 	bl	80074ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d001      	beq.n	8007102 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e000      	b.n	8007104 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	3718      	adds	r7, #24
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	00010008 	.word	0x00010008
 8007110:	00010002 	.word	0x00010002

08007114 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b088      	sub	sp, #32
 8007118:	af02      	add	r7, sp, #8
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	607a      	str	r2, [r7, #4]
 800711e:	603b      	str	r3, [r7, #0]
 8007120:	460b      	mov	r3, r1
 8007122:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007128:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007138:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	2b08      	cmp	r3, #8
 800713e:	d006      	beq.n	800714e <I2C_MasterRequestRead+0x3a>
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	2b01      	cmp	r3, #1
 8007144:	d003      	beq.n	800714e <I2C_MasterRequestRead+0x3a>
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800714c:	d108      	bne.n	8007160 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800715c:	601a      	str	r2, [r3, #0]
 800715e:	e00b      	b.n	8007178 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007164:	2b11      	cmp	r3, #17
 8007166:	d107      	bne.n	8007178 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007176:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	9300      	str	r3, [sp, #0]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007184:	68f8      	ldr	r0, [r7, #12]
 8007186:	f000 f93b 	bl	8007400 <I2C_WaitOnFlagUntilTimeout>
 800718a:	4603      	mov	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d00d      	beq.n	80071ac <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800719a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800719e:	d103      	bne.n	80071a8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80071a8:	2303      	movs	r3, #3
 80071aa:	e079      	b.n	80072a0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	691b      	ldr	r3, [r3, #16]
 80071b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071b4:	d108      	bne.n	80071c8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80071b6:	897b      	ldrh	r3, [r7, #10]
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	f043 0301 	orr.w	r3, r3, #1
 80071be:	b2da      	uxtb	r2, r3
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	611a      	str	r2, [r3, #16]
 80071c6:	e05f      	b.n	8007288 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80071c8:	897b      	ldrh	r3, [r7, #10]
 80071ca:	11db      	asrs	r3, r3, #7
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	f003 0306 	and.w	r3, r3, #6
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	f063 030f 	orn	r3, r3, #15
 80071d8:	b2da      	uxtb	r2, r3
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	4930      	ldr	r1, [pc, #192]	; (80072a8 <I2C_MasterRequestRead+0x194>)
 80071e6:	68f8      	ldr	r0, [r7, #12]
 80071e8:	f000 f961 	bl	80074ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d001      	beq.n	80071f6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e054      	b.n	80072a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80071f6:	897b      	ldrh	r3, [r7, #10]
 80071f8:	b2da      	uxtb	r2, r3
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	4929      	ldr	r1, [pc, #164]	; (80072ac <I2C_MasterRequestRead+0x198>)
 8007206:	68f8      	ldr	r0, [r7, #12]
 8007208:	f000 f951 	bl	80074ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800720c:	4603      	mov	r3, r0
 800720e:	2b00      	cmp	r3, #0
 8007210:	d001      	beq.n	8007216 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007212:	2301      	movs	r3, #1
 8007214:	e044      	b.n	80072a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007216:	2300      	movs	r3, #0
 8007218:	613b      	str	r3, [r7, #16]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	695b      	ldr	r3, [r3, #20]
 8007220:	613b      	str	r3, [r7, #16]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	699b      	ldr	r3, [r3, #24]
 8007228:	613b      	str	r3, [r7, #16]
 800722a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800723a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	9300      	str	r3, [sp, #0]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007248:	68f8      	ldr	r0, [r7, #12]
 800724a:	f000 f8d9 	bl	8007400 <I2C_WaitOnFlagUntilTimeout>
 800724e:	4603      	mov	r3, r0
 8007250:	2b00      	cmp	r3, #0
 8007252:	d00d      	beq.n	8007270 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800725e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007262:	d103      	bne.n	800726c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f44f 7200 	mov.w	r2, #512	; 0x200
 800726a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800726c:	2303      	movs	r3, #3
 800726e:	e017      	b.n	80072a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007270:	897b      	ldrh	r3, [r7, #10]
 8007272:	11db      	asrs	r3, r3, #7
 8007274:	b2db      	uxtb	r3, r3
 8007276:	f003 0306 	and.w	r3, r3, #6
 800727a:	b2db      	uxtb	r3, r3
 800727c:	f063 030e 	orn	r3, r3, #14
 8007280:	b2da      	uxtb	r2, r3
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	4907      	ldr	r1, [pc, #28]	; (80072ac <I2C_MasterRequestRead+0x198>)
 800728e:	68f8      	ldr	r0, [r7, #12]
 8007290:	f000 f90d 	bl	80074ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d001      	beq.n	800729e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	e000      	b.n	80072a0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800729e:	2300      	movs	r3, #0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3718      	adds	r7, #24
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	00010008 	.word	0x00010008
 80072ac:	00010002 	.word	0x00010002

080072b0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b086      	sub	sp, #24
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80072b8:	2300      	movs	r3, #0
 80072ba:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072c8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80072ca:	4b4b      	ldr	r3, [pc, #300]	; (80073f8 <I2C_DMAAbort+0x148>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	08db      	lsrs	r3, r3, #3
 80072d0:	4a4a      	ldr	r2, [pc, #296]	; (80073fc <I2C_DMAAbort+0x14c>)
 80072d2:	fba2 2303 	umull	r2, r3, r2, r3
 80072d6:	0a1a      	lsrs	r2, r3, #8
 80072d8:	4613      	mov	r3, r2
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	4413      	add	r3, r2
 80072de:	00da      	lsls	r2, r3, #3
 80072e0:	1ad3      	subs	r3, r2, r3
 80072e2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d106      	bne.n	80072f8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ee:	f043 0220 	orr.w	r2, r3, #32
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80072f6:	e00a      	b.n	800730e <I2C_DMAAbort+0x5e>
    }
    count--;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	3b01      	subs	r3, #1
 80072fc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007308:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800730c:	d0ea      	beq.n	80072e4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007312:	2b00      	cmp	r3, #0
 8007314:	d003      	beq.n	800731e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800731a:	2200      	movs	r2, #0
 800731c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007322:	2b00      	cmp	r3, #0
 8007324:	d003      	beq.n	800732e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800732a:	2200      	movs	r2, #0
 800732c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800733c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	2200      	movs	r2, #0
 8007342:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007348:	2b00      	cmp	r3, #0
 800734a:	d003      	beq.n	8007354 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007350:	2200      	movs	r2, #0
 8007352:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007358:	2b00      	cmp	r3, #0
 800735a:	d003      	beq.n	8007364 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007360:	2200      	movs	r2, #0
 8007362:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f022 0201 	bic.w	r2, r2, #1
 8007372:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800737a:	b2db      	uxtb	r3, r3
 800737c:	2b60      	cmp	r3, #96	; 0x60
 800737e:	d10e      	bne.n	800739e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	2220      	movs	r2, #32
 8007384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	2200      	movs	r2, #0
 800738c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	2200      	movs	r2, #0
 8007394:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007396:	6978      	ldr	r0, [r7, #20]
 8007398:	f7fe fccc 	bl	8005d34 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800739c:	e027      	b.n	80073ee <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800739e:	7cfb      	ldrb	r3, [r7, #19]
 80073a0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80073a4:	2b28      	cmp	r3, #40	; 0x28
 80073a6:	d117      	bne.n	80073d8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f042 0201 	orr.w	r2, r2, #1
 80073b6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80073c6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	2200      	movs	r2, #0
 80073cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	2228      	movs	r2, #40	; 0x28
 80073d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80073d6:	e007      	b.n	80073e8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	2220      	movs	r2, #32
 80073dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	2200      	movs	r2, #0
 80073e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80073e8:	6978      	ldr	r0, [r7, #20]
 80073ea:	f7fe fc99 	bl	8005d20 <HAL_I2C_ErrorCallback>
}
 80073ee:	bf00      	nop
 80073f0:	3718      	adds	r7, #24
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	20000000 	.word	0x20000000
 80073fc:	14f8b589 	.word	0x14f8b589

08007400 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	603b      	str	r3, [r7, #0]
 800740c:	4613      	mov	r3, r2
 800740e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007410:	e025      	b.n	800745e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007418:	d021      	beq.n	800745e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800741a:	f7fc fde7 	bl	8003fec <HAL_GetTick>
 800741e:	4602      	mov	r2, r0
 8007420:	69bb      	ldr	r3, [r7, #24]
 8007422:	1ad3      	subs	r3, r2, r3
 8007424:	683a      	ldr	r2, [r7, #0]
 8007426:	429a      	cmp	r2, r3
 8007428:	d302      	bcc.n	8007430 <I2C_WaitOnFlagUntilTimeout+0x30>
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d116      	bne.n	800745e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2200      	movs	r2, #0
 8007434:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2220      	movs	r2, #32
 800743a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2200      	movs	r2, #0
 8007442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744a:	f043 0220 	orr.w	r2, r3, #32
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2200      	movs	r2, #0
 8007456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	e023      	b.n	80074a6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	0c1b      	lsrs	r3, r3, #16
 8007462:	b2db      	uxtb	r3, r3
 8007464:	2b01      	cmp	r3, #1
 8007466:	d10d      	bne.n	8007484 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	695b      	ldr	r3, [r3, #20]
 800746e:	43da      	mvns	r2, r3
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	4013      	ands	r3, r2
 8007474:	b29b      	uxth	r3, r3
 8007476:	2b00      	cmp	r3, #0
 8007478:	bf0c      	ite	eq
 800747a:	2301      	moveq	r3, #1
 800747c:	2300      	movne	r3, #0
 800747e:	b2db      	uxtb	r3, r3
 8007480:	461a      	mov	r2, r3
 8007482:	e00c      	b.n	800749e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	699b      	ldr	r3, [r3, #24]
 800748a:	43da      	mvns	r2, r3
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	4013      	ands	r3, r2
 8007490:	b29b      	uxth	r3, r3
 8007492:	2b00      	cmp	r3, #0
 8007494:	bf0c      	ite	eq
 8007496:	2301      	moveq	r3, #1
 8007498:	2300      	movne	r3, #0
 800749a:	b2db      	uxtb	r3, r3
 800749c:	461a      	mov	r2, r3
 800749e:	79fb      	ldrb	r3, [r7, #7]
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d0b6      	beq.n	8007412 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80074a4:	2300      	movs	r3, #0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3710      	adds	r7, #16
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}

080074ae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b084      	sub	sp, #16
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	60f8      	str	r0, [r7, #12]
 80074b6:	60b9      	str	r1, [r7, #8]
 80074b8:	607a      	str	r2, [r7, #4]
 80074ba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80074bc:	e051      	b.n	8007562 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	695b      	ldr	r3, [r3, #20]
 80074c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074cc:	d123      	bne.n	8007516 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074dc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80074e6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2200      	movs	r2, #0
 80074ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2220      	movs	r2, #32
 80074f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007502:	f043 0204 	orr.w	r2, r3, #4
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2200      	movs	r2, #0
 800750e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	e046      	b.n	80075a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800751c:	d021      	beq.n	8007562 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800751e:	f7fc fd65 	bl	8003fec <HAL_GetTick>
 8007522:	4602      	mov	r2, r0
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	1ad3      	subs	r3, r2, r3
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	429a      	cmp	r2, r3
 800752c:	d302      	bcc.n	8007534 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d116      	bne.n	8007562 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2200      	movs	r2, #0
 8007538:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2220      	movs	r2, #32
 800753e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2200      	movs	r2, #0
 8007546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800754e:	f043 0220 	orr.w	r2, r3, #32
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	e020      	b.n	80075a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	0c1b      	lsrs	r3, r3, #16
 8007566:	b2db      	uxtb	r3, r3
 8007568:	2b01      	cmp	r3, #1
 800756a:	d10c      	bne.n	8007586 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	695b      	ldr	r3, [r3, #20]
 8007572:	43da      	mvns	r2, r3
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	4013      	ands	r3, r2
 8007578:	b29b      	uxth	r3, r3
 800757a:	2b00      	cmp	r3, #0
 800757c:	bf14      	ite	ne
 800757e:	2301      	movne	r3, #1
 8007580:	2300      	moveq	r3, #0
 8007582:	b2db      	uxtb	r3, r3
 8007584:	e00b      	b.n	800759e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	699b      	ldr	r3, [r3, #24]
 800758c:	43da      	mvns	r2, r3
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	4013      	ands	r3, r2
 8007592:	b29b      	uxth	r3, r3
 8007594:	2b00      	cmp	r3, #0
 8007596:	bf14      	ite	ne
 8007598:	2301      	movne	r3, #1
 800759a:	2300      	moveq	r3, #0
 800759c:	b2db      	uxtb	r3, r3
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d18d      	bne.n	80074be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80075a2:	2300      	movs	r3, #0
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3710      	adds	r7, #16
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80075b8:	e02d      	b.n	8007616 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80075ba:	68f8      	ldr	r0, [r7, #12]
 80075bc:	f000 f900 	bl	80077c0 <I2C_IsAcknowledgeFailed>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d001      	beq.n	80075ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	e02d      	b.n	8007626 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075d0:	d021      	beq.n	8007616 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075d2:	f7fc fd0b 	bl	8003fec <HAL_GetTick>
 80075d6:	4602      	mov	r2, r0
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	1ad3      	subs	r3, r2, r3
 80075dc:	68ba      	ldr	r2, [r7, #8]
 80075de:	429a      	cmp	r2, r3
 80075e0:	d302      	bcc.n	80075e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d116      	bne.n	8007616 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2200      	movs	r2, #0
 80075ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2220      	movs	r2, #32
 80075f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2200      	movs	r2, #0
 80075fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007602:	f043 0220 	orr.w	r2, r3, #32
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2200      	movs	r2, #0
 800760e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	e007      	b.n	8007626 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	695b      	ldr	r3, [r3, #20]
 800761c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007620:	2b80      	cmp	r3, #128	; 0x80
 8007622:	d1ca      	bne.n	80075ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	3710      	adds	r7, #16
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}

0800762e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800762e:	b580      	push	{r7, lr}
 8007630:	b084      	sub	sp, #16
 8007632:	af00      	add	r7, sp, #0
 8007634:	60f8      	str	r0, [r7, #12]
 8007636:	60b9      	str	r1, [r7, #8]
 8007638:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800763a:	e02d      	b.n	8007698 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800763c:	68f8      	ldr	r0, [r7, #12]
 800763e:	f000 f8bf 	bl	80077c0 <I2C_IsAcknowledgeFailed>
 8007642:	4603      	mov	r3, r0
 8007644:	2b00      	cmp	r3, #0
 8007646:	d001      	beq.n	800764c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007648:	2301      	movs	r3, #1
 800764a:	e02d      	b.n	80076a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007652:	d021      	beq.n	8007698 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007654:	f7fc fcca 	bl	8003fec <HAL_GetTick>
 8007658:	4602      	mov	r2, r0
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	1ad3      	subs	r3, r2, r3
 800765e:	68ba      	ldr	r2, [r7, #8]
 8007660:	429a      	cmp	r2, r3
 8007662:	d302      	bcc.n	800766a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d116      	bne.n	8007698 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2200      	movs	r2, #0
 800766e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2220      	movs	r2, #32
 8007674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2200      	movs	r2, #0
 800767c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007684:	f043 0220 	orr.w	r2, r3, #32
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2200      	movs	r2, #0
 8007690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	e007      	b.n	80076a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	695b      	ldr	r3, [r3, #20]
 800769e:	f003 0304 	and.w	r3, r3, #4
 80076a2:	2b04      	cmp	r3, #4
 80076a4:	d1ca      	bne.n	800763c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3710      	adds	r7, #16
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b085      	sub	sp, #20
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80076b8:	2300      	movs	r3, #0
 80076ba:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80076bc:	4b13      	ldr	r3, [pc, #76]	; (800770c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	08db      	lsrs	r3, r3, #3
 80076c2:	4a13      	ldr	r2, [pc, #76]	; (8007710 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80076c4:	fba2 2303 	umull	r2, r3, r2, r3
 80076c8:	0a1a      	lsrs	r2, r3, #8
 80076ca:	4613      	mov	r3, r2
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	4413      	add	r3, r2
 80076d0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	3b01      	subs	r3, #1
 80076d6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d107      	bne.n	80076ee <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e2:	f043 0220 	orr.w	r2, r3, #32
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e008      	b.n	8007700 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076fc:	d0e9      	beq.n	80076d2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80076fe:	2300      	movs	r3, #0
}
 8007700:	4618      	mov	r0, r3
 8007702:	3714      	adds	r7, #20
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr
 800770c:	20000000 	.word	0x20000000
 8007710:	14f8b589 	.word	0x14f8b589

08007714 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	60b9      	str	r1, [r7, #8]
 800771e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007720:	e042      	b.n	80077a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	695b      	ldr	r3, [r3, #20]
 8007728:	f003 0310 	and.w	r3, r3, #16
 800772c:	2b10      	cmp	r3, #16
 800772e:	d119      	bne.n	8007764 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f06f 0210 	mvn.w	r2, #16
 8007738:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2200      	movs	r2, #0
 800773e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2220      	movs	r2, #32
 8007744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2200      	movs	r2, #0
 800774c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2200      	movs	r2, #0
 800775c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	e029      	b.n	80077b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007764:	f7fc fc42 	bl	8003fec <HAL_GetTick>
 8007768:	4602      	mov	r2, r0
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	1ad3      	subs	r3, r2, r3
 800776e:	68ba      	ldr	r2, [r7, #8]
 8007770:	429a      	cmp	r2, r3
 8007772:	d302      	bcc.n	800777a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d116      	bne.n	80077a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2220      	movs	r2, #32
 8007784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2200      	movs	r2, #0
 800778c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007794:	f043 0220 	orr.w	r2, r3, #32
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2200      	movs	r2, #0
 80077a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	e007      	b.n	80077b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	695b      	ldr	r3, [r3, #20]
 80077ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077b2:	2b40      	cmp	r3, #64	; 0x40
 80077b4:	d1b5      	bne.n	8007722 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80077b6:	2300      	movs	r3, #0
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3710      	adds	r7, #16
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	695b      	ldr	r3, [r3, #20]
 80077ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077d6:	d11b      	bne.n	8007810 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80077e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2220      	movs	r2, #32
 80077ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fc:	f043 0204 	orr.w	r2, r3, #4
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800780c:	2301      	movs	r3, #1
 800780e:	e000      	b.n	8007812 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	370c      	adds	r7, #12
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr

0800781e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800781e:	b480      	push	{r7}
 8007820:	b083      	sub	sp, #12
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800782a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800782e:	d103      	bne.n	8007838 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007836:	e007      	b.n	8007848 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800783c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007840:	d102      	bne.n	8007848 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2208      	movs	r2, #8
 8007846:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007848:	bf00      	nop
 800784a:	370c      	adds	r7, #12
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b086      	sub	sp, #24
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d101      	bne.n	8007866 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	e267      	b.n	8007d36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f003 0301 	and.w	r3, r3, #1
 800786e:	2b00      	cmp	r3, #0
 8007870:	d075      	beq.n	800795e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007872:	4b88      	ldr	r3, [pc, #544]	; (8007a94 <HAL_RCC_OscConfig+0x240>)
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	f003 030c 	and.w	r3, r3, #12
 800787a:	2b04      	cmp	r3, #4
 800787c:	d00c      	beq.n	8007898 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800787e:	4b85      	ldr	r3, [pc, #532]	; (8007a94 <HAL_RCC_OscConfig+0x240>)
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007886:	2b08      	cmp	r3, #8
 8007888:	d112      	bne.n	80078b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800788a:	4b82      	ldr	r3, [pc, #520]	; (8007a94 <HAL_RCC_OscConfig+0x240>)
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007892:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007896:	d10b      	bne.n	80078b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007898:	4b7e      	ldr	r3, [pc, #504]	; (8007a94 <HAL_RCC_OscConfig+0x240>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d05b      	beq.n	800795c <HAL_RCC_OscConfig+0x108>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d157      	bne.n	800795c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80078ac:	2301      	movs	r3, #1
 80078ae:	e242      	b.n	8007d36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078b8:	d106      	bne.n	80078c8 <HAL_RCC_OscConfig+0x74>
 80078ba:	4b76      	ldr	r3, [pc, #472]	; (8007a94 <HAL_RCC_OscConfig+0x240>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a75      	ldr	r2, [pc, #468]	; (8007a94 <HAL_RCC_OscConfig+0x240>)
 80078c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078c4:	6013      	str	r3, [r2, #0]
 80078c6:	e01d      	b.n	8007904 <HAL_RCC_OscConfig+0xb0>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80078d0:	d10c      	bne.n	80078ec <HAL_RCC_OscConfig+0x98>
 80078d2:	4b70      	ldr	r3, [pc, #448]	; (8007a94 <HAL_RCC_OscConfig+0x240>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a6f      	ldr	r2, [pc, #444]	; (8007a94 <HAL_RCC_OscConfig+0x240>)
 80078d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80078dc:	6013      	str	r3, [r2, #0]
 80078de:	4b6d      	ldr	r3, [pc, #436]	; (8007a94 <HAL_RCC_OscConfig+0x240>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a6c      	ldr	r2, [pc, #432]	; (8007a94 <HAL_RCC_OscConfig+0x240>)
 80078e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078e8:	6013      	str	r3, [r2, #0]
 80078ea:	e00b      	b.n	8007904 <HAL_RCC_OscConfig+0xb0>
 80078ec:	4b69      	ldr	r3, [pc, #420]	; (8007a94 <HAL_RCC_OscConfig+0x240>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a68      	ldr	r2, [pc, #416]	; (8007a94 <HAL_RCC_OscConfig+0x240>)
 80078f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078f6:	6013      	str	r3, [r2, #0]
 80078f8:	4b66      	ldr	r3, [pc, #408]	; (8007a94 <HAL_RCC_OscConfig+0x240>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a65      	ldr	r2, [pc, #404]	; (8007a94 <HAL_RCC_OscConfig+0x240>)
 80078fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007902:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d013      	beq.n	8007934 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800790c:	f7fc fb6e 	bl	8003fec <HAL_GetTick>
 8007910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007912:	e008      	b.n	8007926 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007914:	f7fc fb6a 	bl	8003fec <HAL_GetTick>
 8007918:	4602      	mov	r2, r0
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	1ad3      	subs	r3, r2, r3
 800791e:	2b64      	cmp	r3, #100	; 0x64
 8007920:	d901      	bls.n	8007926 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007922:	2303      	movs	r3, #3
 8007924:	e207      	b.n	8007d36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007926:	4b5b      	ldr	r3, [pc, #364]	; (8007a94 <HAL_RCC_OscConfig+0x240>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800792e:	2b00      	cmp	r3, #0
 8007930:	d0f0      	beq.n	8007914 <HAL_RCC_OscConfig+0xc0>
 8007932:	e014      	b.n	800795e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007934:	f7fc fb5a 	bl	8003fec <HAL_GetTick>
 8007938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800793a:	e008      	b.n	800794e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800793c:	f7fc fb56 	bl	8003fec <HAL_GetTick>
 8007940:	4602      	mov	r2, r0
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	1ad3      	subs	r3, r2, r3
 8007946:	2b64      	cmp	r3, #100	; 0x64
 8007948:	d901      	bls.n	800794e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800794a:	2303      	movs	r3, #3
 800794c:	e1f3      	b.n	8007d36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800794e:	4b51      	ldr	r3, [pc, #324]	; (8007a94 <HAL_RCC_OscConfig+0x240>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007956:	2b00      	cmp	r3, #0
 8007958:	d1f0      	bne.n	800793c <HAL_RCC_OscConfig+0xe8>
 800795a:	e000      	b.n	800795e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800795c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f003 0302 	and.w	r3, r3, #2
 8007966:	2b00      	cmp	r3, #0
 8007968:	d063      	beq.n	8007a32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800796a:	4b4a      	ldr	r3, [pc, #296]	; (8007a94 <HAL_RCC_OscConfig+0x240>)
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	f003 030c 	and.w	r3, r3, #12
 8007972:	2b00      	cmp	r3, #0
 8007974:	d00b      	beq.n	800798e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007976:	4b47      	ldr	r3, [pc, #284]	; (8007a94 <HAL_RCC_OscConfig+0x240>)
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800797e:	2b08      	cmp	r3, #8
 8007980:	d11c      	bne.n	80079bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007982:	4b44      	ldr	r3, [pc, #272]	; (8007a94 <HAL_RCC_OscConfig+0x240>)
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800798a:	2b00      	cmp	r3, #0
 800798c:	d116      	bne.n	80079bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800798e:	4b41      	ldr	r3, [pc, #260]	; (8007a94 <HAL_RCC_OscConfig+0x240>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f003 0302 	and.w	r3, r3, #2
 8007996:	2b00      	cmp	r3, #0
 8007998:	d005      	beq.n	80079a6 <HAL_RCC_OscConfig+0x152>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d001      	beq.n	80079a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	e1c7      	b.n	8007d36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079a6:	4b3b      	ldr	r3, [pc, #236]	; (8007a94 <HAL_RCC_OscConfig+0x240>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	691b      	ldr	r3, [r3, #16]
 80079b2:	00db      	lsls	r3, r3, #3
 80079b4:	4937      	ldr	r1, [pc, #220]	; (8007a94 <HAL_RCC_OscConfig+0x240>)
 80079b6:	4313      	orrs	r3, r2
 80079b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80079ba:	e03a      	b.n	8007a32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d020      	beq.n	8007a06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80079c4:	4b34      	ldr	r3, [pc, #208]	; (8007a98 <HAL_RCC_OscConfig+0x244>)
 80079c6:	2201      	movs	r2, #1
 80079c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079ca:	f7fc fb0f 	bl	8003fec <HAL_GetTick>
 80079ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079d0:	e008      	b.n	80079e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80079d2:	f7fc fb0b 	bl	8003fec <HAL_GetTick>
 80079d6:	4602      	mov	r2, r0
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	1ad3      	subs	r3, r2, r3
 80079dc:	2b02      	cmp	r3, #2
 80079de:	d901      	bls.n	80079e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80079e0:	2303      	movs	r3, #3
 80079e2:	e1a8      	b.n	8007d36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079e4:	4b2b      	ldr	r3, [pc, #172]	; (8007a94 <HAL_RCC_OscConfig+0x240>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f003 0302 	and.w	r3, r3, #2
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d0f0      	beq.n	80079d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079f0:	4b28      	ldr	r3, [pc, #160]	; (8007a94 <HAL_RCC_OscConfig+0x240>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	691b      	ldr	r3, [r3, #16]
 80079fc:	00db      	lsls	r3, r3, #3
 80079fe:	4925      	ldr	r1, [pc, #148]	; (8007a94 <HAL_RCC_OscConfig+0x240>)
 8007a00:	4313      	orrs	r3, r2
 8007a02:	600b      	str	r3, [r1, #0]
 8007a04:	e015      	b.n	8007a32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a06:	4b24      	ldr	r3, [pc, #144]	; (8007a98 <HAL_RCC_OscConfig+0x244>)
 8007a08:	2200      	movs	r2, #0
 8007a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a0c:	f7fc faee 	bl	8003fec <HAL_GetTick>
 8007a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a12:	e008      	b.n	8007a26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007a14:	f7fc faea 	bl	8003fec <HAL_GetTick>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	1ad3      	subs	r3, r2, r3
 8007a1e:	2b02      	cmp	r3, #2
 8007a20:	d901      	bls.n	8007a26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007a22:	2303      	movs	r3, #3
 8007a24:	e187      	b.n	8007d36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a26:	4b1b      	ldr	r3, [pc, #108]	; (8007a94 <HAL_RCC_OscConfig+0x240>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f003 0302 	and.w	r3, r3, #2
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d1f0      	bne.n	8007a14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f003 0308 	and.w	r3, r3, #8
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d036      	beq.n	8007aac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	695b      	ldr	r3, [r3, #20]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d016      	beq.n	8007a74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a46:	4b15      	ldr	r3, [pc, #84]	; (8007a9c <HAL_RCC_OscConfig+0x248>)
 8007a48:	2201      	movs	r2, #1
 8007a4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a4c:	f7fc face 	bl	8003fec <HAL_GetTick>
 8007a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a52:	e008      	b.n	8007a66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a54:	f7fc faca 	bl	8003fec <HAL_GetTick>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	1ad3      	subs	r3, r2, r3
 8007a5e:	2b02      	cmp	r3, #2
 8007a60:	d901      	bls.n	8007a66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007a62:	2303      	movs	r3, #3
 8007a64:	e167      	b.n	8007d36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a66:	4b0b      	ldr	r3, [pc, #44]	; (8007a94 <HAL_RCC_OscConfig+0x240>)
 8007a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a6a:	f003 0302 	and.w	r3, r3, #2
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d0f0      	beq.n	8007a54 <HAL_RCC_OscConfig+0x200>
 8007a72:	e01b      	b.n	8007aac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a74:	4b09      	ldr	r3, [pc, #36]	; (8007a9c <HAL_RCC_OscConfig+0x248>)
 8007a76:	2200      	movs	r2, #0
 8007a78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a7a:	f7fc fab7 	bl	8003fec <HAL_GetTick>
 8007a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a80:	e00e      	b.n	8007aa0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a82:	f7fc fab3 	bl	8003fec <HAL_GetTick>
 8007a86:	4602      	mov	r2, r0
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	1ad3      	subs	r3, r2, r3
 8007a8c:	2b02      	cmp	r3, #2
 8007a8e:	d907      	bls.n	8007aa0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007a90:	2303      	movs	r3, #3
 8007a92:	e150      	b.n	8007d36 <HAL_RCC_OscConfig+0x4e2>
 8007a94:	40023800 	.word	0x40023800
 8007a98:	42470000 	.word	0x42470000
 8007a9c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007aa0:	4b88      	ldr	r3, [pc, #544]	; (8007cc4 <HAL_RCC_OscConfig+0x470>)
 8007aa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007aa4:	f003 0302 	and.w	r3, r3, #2
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d1ea      	bne.n	8007a82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f003 0304 	and.w	r3, r3, #4
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	f000 8097 	beq.w	8007be8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007aba:	2300      	movs	r3, #0
 8007abc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007abe:	4b81      	ldr	r3, [pc, #516]	; (8007cc4 <HAL_RCC_OscConfig+0x470>)
 8007ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d10f      	bne.n	8007aea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007aca:	2300      	movs	r3, #0
 8007acc:	60bb      	str	r3, [r7, #8]
 8007ace:	4b7d      	ldr	r3, [pc, #500]	; (8007cc4 <HAL_RCC_OscConfig+0x470>)
 8007ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad2:	4a7c      	ldr	r2, [pc, #496]	; (8007cc4 <HAL_RCC_OscConfig+0x470>)
 8007ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8007ada:	4b7a      	ldr	r3, [pc, #488]	; (8007cc4 <HAL_RCC_OscConfig+0x470>)
 8007adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ae2:	60bb      	str	r3, [r7, #8]
 8007ae4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007aea:	4b77      	ldr	r3, [pc, #476]	; (8007cc8 <HAL_RCC_OscConfig+0x474>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d118      	bne.n	8007b28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007af6:	4b74      	ldr	r3, [pc, #464]	; (8007cc8 <HAL_RCC_OscConfig+0x474>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a73      	ldr	r2, [pc, #460]	; (8007cc8 <HAL_RCC_OscConfig+0x474>)
 8007afc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007b02:	f7fc fa73 	bl	8003fec <HAL_GetTick>
 8007b06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b08:	e008      	b.n	8007b1c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b0a:	f7fc fa6f 	bl	8003fec <HAL_GetTick>
 8007b0e:	4602      	mov	r2, r0
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	1ad3      	subs	r3, r2, r3
 8007b14:	2b02      	cmp	r3, #2
 8007b16:	d901      	bls.n	8007b1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007b18:	2303      	movs	r3, #3
 8007b1a:	e10c      	b.n	8007d36 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b1c:	4b6a      	ldr	r3, [pc, #424]	; (8007cc8 <HAL_RCC_OscConfig+0x474>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d0f0      	beq.n	8007b0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d106      	bne.n	8007b3e <HAL_RCC_OscConfig+0x2ea>
 8007b30:	4b64      	ldr	r3, [pc, #400]	; (8007cc4 <HAL_RCC_OscConfig+0x470>)
 8007b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b34:	4a63      	ldr	r2, [pc, #396]	; (8007cc4 <HAL_RCC_OscConfig+0x470>)
 8007b36:	f043 0301 	orr.w	r3, r3, #1
 8007b3a:	6713      	str	r3, [r2, #112]	; 0x70
 8007b3c:	e01c      	b.n	8007b78 <HAL_RCC_OscConfig+0x324>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	2b05      	cmp	r3, #5
 8007b44:	d10c      	bne.n	8007b60 <HAL_RCC_OscConfig+0x30c>
 8007b46:	4b5f      	ldr	r3, [pc, #380]	; (8007cc4 <HAL_RCC_OscConfig+0x470>)
 8007b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b4a:	4a5e      	ldr	r2, [pc, #376]	; (8007cc4 <HAL_RCC_OscConfig+0x470>)
 8007b4c:	f043 0304 	orr.w	r3, r3, #4
 8007b50:	6713      	str	r3, [r2, #112]	; 0x70
 8007b52:	4b5c      	ldr	r3, [pc, #368]	; (8007cc4 <HAL_RCC_OscConfig+0x470>)
 8007b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b56:	4a5b      	ldr	r2, [pc, #364]	; (8007cc4 <HAL_RCC_OscConfig+0x470>)
 8007b58:	f043 0301 	orr.w	r3, r3, #1
 8007b5c:	6713      	str	r3, [r2, #112]	; 0x70
 8007b5e:	e00b      	b.n	8007b78 <HAL_RCC_OscConfig+0x324>
 8007b60:	4b58      	ldr	r3, [pc, #352]	; (8007cc4 <HAL_RCC_OscConfig+0x470>)
 8007b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b64:	4a57      	ldr	r2, [pc, #348]	; (8007cc4 <HAL_RCC_OscConfig+0x470>)
 8007b66:	f023 0301 	bic.w	r3, r3, #1
 8007b6a:	6713      	str	r3, [r2, #112]	; 0x70
 8007b6c:	4b55      	ldr	r3, [pc, #340]	; (8007cc4 <HAL_RCC_OscConfig+0x470>)
 8007b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b70:	4a54      	ldr	r2, [pc, #336]	; (8007cc4 <HAL_RCC_OscConfig+0x470>)
 8007b72:	f023 0304 	bic.w	r3, r3, #4
 8007b76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d015      	beq.n	8007bac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b80:	f7fc fa34 	bl	8003fec <HAL_GetTick>
 8007b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b86:	e00a      	b.n	8007b9e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b88:	f7fc fa30 	bl	8003fec <HAL_GetTick>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	1ad3      	subs	r3, r2, r3
 8007b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d901      	bls.n	8007b9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007b9a:	2303      	movs	r3, #3
 8007b9c:	e0cb      	b.n	8007d36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b9e:	4b49      	ldr	r3, [pc, #292]	; (8007cc4 <HAL_RCC_OscConfig+0x470>)
 8007ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ba2:	f003 0302 	and.w	r3, r3, #2
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d0ee      	beq.n	8007b88 <HAL_RCC_OscConfig+0x334>
 8007baa:	e014      	b.n	8007bd6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007bac:	f7fc fa1e 	bl	8003fec <HAL_GetTick>
 8007bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007bb2:	e00a      	b.n	8007bca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007bb4:	f7fc fa1a 	bl	8003fec <HAL_GetTick>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	1ad3      	subs	r3, r2, r3
 8007bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d901      	bls.n	8007bca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007bc6:	2303      	movs	r3, #3
 8007bc8:	e0b5      	b.n	8007d36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007bca:	4b3e      	ldr	r3, [pc, #248]	; (8007cc4 <HAL_RCC_OscConfig+0x470>)
 8007bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bce:	f003 0302 	and.w	r3, r3, #2
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d1ee      	bne.n	8007bb4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007bd6:	7dfb      	ldrb	r3, [r7, #23]
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d105      	bne.n	8007be8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007bdc:	4b39      	ldr	r3, [pc, #228]	; (8007cc4 <HAL_RCC_OscConfig+0x470>)
 8007bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007be0:	4a38      	ldr	r2, [pc, #224]	; (8007cc4 <HAL_RCC_OscConfig+0x470>)
 8007be2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007be6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	699b      	ldr	r3, [r3, #24]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	f000 80a1 	beq.w	8007d34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007bf2:	4b34      	ldr	r3, [pc, #208]	; (8007cc4 <HAL_RCC_OscConfig+0x470>)
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	f003 030c 	and.w	r3, r3, #12
 8007bfa:	2b08      	cmp	r3, #8
 8007bfc:	d05c      	beq.n	8007cb8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	699b      	ldr	r3, [r3, #24]
 8007c02:	2b02      	cmp	r3, #2
 8007c04:	d141      	bne.n	8007c8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c06:	4b31      	ldr	r3, [pc, #196]	; (8007ccc <HAL_RCC_OscConfig+0x478>)
 8007c08:	2200      	movs	r2, #0
 8007c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c0c:	f7fc f9ee 	bl	8003fec <HAL_GetTick>
 8007c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c12:	e008      	b.n	8007c26 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c14:	f7fc f9ea 	bl	8003fec <HAL_GetTick>
 8007c18:	4602      	mov	r2, r0
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	1ad3      	subs	r3, r2, r3
 8007c1e:	2b02      	cmp	r3, #2
 8007c20:	d901      	bls.n	8007c26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007c22:	2303      	movs	r3, #3
 8007c24:	e087      	b.n	8007d36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c26:	4b27      	ldr	r3, [pc, #156]	; (8007cc4 <HAL_RCC_OscConfig+0x470>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d1f0      	bne.n	8007c14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	69da      	ldr	r2, [r3, #28]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6a1b      	ldr	r3, [r3, #32]
 8007c3a:	431a      	orrs	r2, r3
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c40:	019b      	lsls	r3, r3, #6
 8007c42:	431a      	orrs	r2, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c48:	085b      	lsrs	r3, r3, #1
 8007c4a:	3b01      	subs	r3, #1
 8007c4c:	041b      	lsls	r3, r3, #16
 8007c4e:	431a      	orrs	r2, r3
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c54:	061b      	lsls	r3, r3, #24
 8007c56:	491b      	ldr	r1, [pc, #108]	; (8007cc4 <HAL_RCC_OscConfig+0x470>)
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c5c:	4b1b      	ldr	r3, [pc, #108]	; (8007ccc <HAL_RCC_OscConfig+0x478>)
 8007c5e:	2201      	movs	r2, #1
 8007c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c62:	f7fc f9c3 	bl	8003fec <HAL_GetTick>
 8007c66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c68:	e008      	b.n	8007c7c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c6a:	f7fc f9bf 	bl	8003fec <HAL_GetTick>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	1ad3      	subs	r3, r2, r3
 8007c74:	2b02      	cmp	r3, #2
 8007c76:	d901      	bls.n	8007c7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007c78:	2303      	movs	r3, #3
 8007c7a:	e05c      	b.n	8007d36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c7c:	4b11      	ldr	r3, [pc, #68]	; (8007cc4 <HAL_RCC_OscConfig+0x470>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d0f0      	beq.n	8007c6a <HAL_RCC_OscConfig+0x416>
 8007c88:	e054      	b.n	8007d34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c8a:	4b10      	ldr	r3, [pc, #64]	; (8007ccc <HAL_RCC_OscConfig+0x478>)
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c90:	f7fc f9ac 	bl	8003fec <HAL_GetTick>
 8007c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c96:	e008      	b.n	8007caa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c98:	f7fc f9a8 	bl	8003fec <HAL_GetTick>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	1ad3      	subs	r3, r2, r3
 8007ca2:	2b02      	cmp	r3, #2
 8007ca4:	d901      	bls.n	8007caa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007ca6:	2303      	movs	r3, #3
 8007ca8:	e045      	b.n	8007d36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007caa:	4b06      	ldr	r3, [pc, #24]	; (8007cc4 <HAL_RCC_OscConfig+0x470>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d1f0      	bne.n	8007c98 <HAL_RCC_OscConfig+0x444>
 8007cb6:	e03d      	b.n	8007d34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	699b      	ldr	r3, [r3, #24]
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d107      	bne.n	8007cd0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	e038      	b.n	8007d36 <HAL_RCC_OscConfig+0x4e2>
 8007cc4:	40023800 	.word	0x40023800
 8007cc8:	40007000 	.word	0x40007000
 8007ccc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007cd0:	4b1b      	ldr	r3, [pc, #108]	; (8007d40 <HAL_RCC_OscConfig+0x4ec>)
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	699b      	ldr	r3, [r3, #24]
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d028      	beq.n	8007d30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d121      	bne.n	8007d30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d11a      	bne.n	8007d30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007cfa:	68fa      	ldr	r2, [r7, #12]
 8007cfc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007d00:	4013      	ands	r3, r2
 8007d02:	687a      	ldr	r2, [r7, #4]
 8007d04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007d06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d111      	bne.n	8007d30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d16:	085b      	lsrs	r3, r3, #1
 8007d18:	3b01      	subs	r3, #1
 8007d1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d107      	bne.n	8007d30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d001      	beq.n	8007d34 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	e000      	b.n	8007d36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3718      	adds	r7, #24
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	40023800 	.word	0x40023800

08007d44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d101      	bne.n	8007d58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d54:	2301      	movs	r3, #1
 8007d56:	e0cc      	b.n	8007ef2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007d58:	4b68      	ldr	r3, [pc, #416]	; (8007efc <HAL_RCC_ClockConfig+0x1b8>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f003 0307 	and.w	r3, r3, #7
 8007d60:	683a      	ldr	r2, [r7, #0]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d90c      	bls.n	8007d80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d66:	4b65      	ldr	r3, [pc, #404]	; (8007efc <HAL_RCC_ClockConfig+0x1b8>)
 8007d68:	683a      	ldr	r2, [r7, #0]
 8007d6a:	b2d2      	uxtb	r2, r2
 8007d6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d6e:	4b63      	ldr	r3, [pc, #396]	; (8007efc <HAL_RCC_ClockConfig+0x1b8>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f003 0307 	and.w	r3, r3, #7
 8007d76:	683a      	ldr	r2, [r7, #0]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d001      	beq.n	8007d80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e0b8      	b.n	8007ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f003 0302 	and.w	r3, r3, #2
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d020      	beq.n	8007dce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f003 0304 	and.w	r3, r3, #4
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d005      	beq.n	8007da4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007d98:	4b59      	ldr	r3, [pc, #356]	; (8007f00 <HAL_RCC_ClockConfig+0x1bc>)
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	4a58      	ldr	r2, [pc, #352]	; (8007f00 <HAL_RCC_ClockConfig+0x1bc>)
 8007d9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007da2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f003 0308 	and.w	r3, r3, #8
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d005      	beq.n	8007dbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007db0:	4b53      	ldr	r3, [pc, #332]	; (8007f00 <HAL_RCC_ClockConfig+0x1bc>)
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	4a52      	ldr	r2, [pc, #328]	; (8007f00 <HAL_RCC_ClockConfig+0x1bc>)
 8007db6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007dba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007dbc:	4b50      	ldr	r3, [pc, #320]	; (8007f00 <HAL_RCC_ClockConfig+0x1bc>)
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	494d      	ldr	r1, [pc, #308]	; (8007f00 <HAL_RCC_ClockConfig+0x1bc>)
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f003 0301 	and.w	r3, r3, #1
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d044      	beq.n	8007e64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d107      	bne.n	8007df2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007de2:	4b47      	ldr	r3, [pc, #284]	; (8007f00 <HAL_RCC_ClockConfig+0x1bc>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d119      	bne.n	8007e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	e07f      	b.n	8007ef2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	2b02      	cmp	r3, #2
 8007df8:	d003      	beq.n	8007e02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007dfe:	2b03      	cmp	r3, #3
 8007e00:	d107      	bne.n	8007e12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e02:	4b3f      	ldr	r3, [pc, #252]	; (8007f00 <HAL_RCC_ClockConfig+0x1bc>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d109      	bne.n	8007e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e06f      	b.n	8007ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e12:	4b3b      	ldr	r3, [pc, #236]	; (8007f00 <HAL_RCC_ClockConfig+0x1bc>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f003 0302 	and.w	r3, r3, #2
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d101      	bne.n	8007e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e067      	b.n	8007ef2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007e22:	4b37      	ldr	r3, [pc, #220]	; (8007f00 <HAL_RCC_ClockConfig+0x1bc>)
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	f023 0203 	bic.w	r2, r3, #3
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	4934      	ldr	r1, [pc, #208]	; (8007f00 <HAL_RCC_ClockConfig+0x1bc>)
 8007e30:	4313      	orrs	r3, r2
 8007e32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007e34:	f7fc f8da 	bl	8003fec <HAL_GetTick>
 8007e38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e3a:	e00a      	b.n	8007e52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e3c:	f7fc f8d6 	bl	8003fec <HAL_GetTick>
 8007e40:	4602      	mov	r2, r0
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	1ad3      	subs	r3, r2, r3
 8007e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d901      	bls.n	8007e52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007e4e:	2303      	movs	r3, #3
 8007e50:	e04f      	b.n	8007ef2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e52:	4b2b      	ldr	r3, [pc, #172]	; (8007f00 <HAL_RCC_ClockConfig+0x1bc>)
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	f003 020c 	and.w	r2, r3, #12
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d1eb      	bne.n	8007e3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007e64:	4b25      	ldr	r3, [pc, #148]	; (8007efc <HAL_RCC_ClockConfig+0x1b8>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f003 0307 	and.w	r3, r3, #7
 8007e6c:	683a      	ldr	r2, [r7, #0]
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d20c      	bcs.n	8007e8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e72:	4b22      	ldr	r3, [pc, #136]	; (8007efc <HAL_RCC_ClockConfig+0x1b8>)
 8007e74:	683a      	ldr	r2, [r7, #0]
 8007e76:	b2d2      	uxtb	r2, r2
 8007e78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e7a:	4b20      	ldr	r3, [pc, #128]	; (8007efc <HAL_RCC_ClockConfig+0x1b8>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f003 0307 	and.w	r3, r3, #7
 8007e82:	683a      	ldr	r2, [r7, #0]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d001      	beq.n	8007e8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	e032      	b.n	8007ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f003 0304 	and.w	r3, r3, #4
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d008      	beq.n	8007eaa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e98:	4b19      	ldr	r3, [pc, #100]	; (8007f00 <HAL_RCC_ClockConfig+0x1bc>)
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	4916      	ldr	r1, [pc, #88]	; (8007f00 <HAL_RCC_ClockConfig+0x1bc>)
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f003 0308 	and.w	r3, r3, #8
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d009      	beq.n	8007eca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007eb6:	4b12      	ldr	r3, [pc, #72]	; (8007f00 <HAL_RCC_ClockConfig+0x1bc>)
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	691b      	ldr	r3, [r3, #16]
 8007ec2:	00db      	lsls	r3, r3, #3
 8007ec4:	490e      	ldr	r1, [pc, #56]	; (8007f00 <HAL_RCC_ClockConfig+0x1bc>)
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007eca:	f000 f821 	bl	8007f10 <HAL_RCC_GetSysClockFreq>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	4b0b      	ldr	r3, [pc, #44]	; (8007f00 <HAL_RCC_ClockConfig+0x1bc>)
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	091b      	lsrs	r3, r3, #4
 8007ed6:	f003 030f 	and.w	r3, r3, #15
 8007eda:	490a      	ldr	r1, [pc, #40]	; (8007f04 <HAL_RCC_ClockConfig+0x1c0>)
 8007edc:	5ccb      	ldrb	r3, [r1, r3]
 8007ede:	fa22 f303 	lsr.w	r3, r2, r3
 8007ee2:	4a09      	ldr	r2, [pc, #36]	; (8007f08 <HAL_RCC_ClockConfig+0x1c4>)
 8007ee4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007ee6:	4b09      	ldr	r3, [pc, #36]	; (8007f0c <HAL_RCC_ClockConfig+0x1c8>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7fb fc9c 	bl	8003828 <HAL_InitTick>

  return HAL_OK;
 8007ef0:	2300      	movs	r3, #0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3710      	adds	r7, #16
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	40023c00 	.word	0x40023c00
 8007f00:	40023800 	.word	0x40023800
 8007f04:	080187c8 	.word	0x080187c8
 8007f08:	20000000 	.word	0x20000000
 8007f0c:	20000018 	.word	0x20000018

08007f10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007f10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f14:	b094      	sub	sp, #80	; 0x50
 8007f16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	647b      	str	r3, [r7, #68]	; 0x44
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f20:	2300      	movs	r3, #0
 8007f22:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007f24:	2300      	movs	r3, #0
 8007f26:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007f28:	4b79      	ldr	r3, [pc, #484]	; (8008110 <HAL_RCC_GetSysClockFreq+0x200>)
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	f003 030c 	and.w	r3, r3, #12
 8007f30:	2b08      	cmp	r3, #8
 8007f32:	d00d      	beq.n	8007f50 <HAL_RCC_GetSysClockFreq+0x40>
 8007f34:	2b08      	cmp	r3, #8
 8007f36:	f200 80e1 	bhi.w	80080fc <HAL_RCC_GetSysClockFreq+0x1ec>
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d002      	beq.n	8007f44 <HAL_RCC_GetSysClockFreq+0x34>
 8007f3e:	2b04      	cmp	r3, #4
 8007f40:	d003      	beq.n	8007f4a <HAL_RCC_GetSysClockFreq+0x3a>
 8007f42:	e0db      	b.n	80080fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007f44:	4b73      	ldr	r3, [pc, #460]	; (8008114 <HAL_RCC_GetSysClockFreq+0x204>)
 8007f46:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007f48:	e0db      	b.n	8008102 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007f4a:	4b73      	ldr	r3, [pc, #460]	; (8008118 <HAL_RCC_GetSysClockFreq+0x208>)
 8007f4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007f4e:	e0d8      	b.n	8008102 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007f50:	4b6f      	ldr	r3, [pc, #444]	; (8008110 <HAL_RCC_GetSysClockFreq+0x200>)
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f58:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007f5a:	4b6d      	ldr	r3, [pc, #436]	; (8008110 <HAL_RCC_GetSysClockFreq+0x200>)
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d063      	beq.n	800802e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f66:	4b6a      	ldr	r3, [pc, #424]	; (8008110 <HAL_RCC_GetSysClockFreq+0x200>)
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	099b      	lsrs	r3, r3, #6
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f70:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f78:	633b      	str	r3, [r7, #48]	; 0x30
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	637b      	str	r3, [r7, #52]	; 0x34
 8007f7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007f82:	4622      	mov	r2, r4
 8007f84:	462b      	mov	r3, r5
 8007f86:	f04f 0000 	mov.w	r0, #0
 8007f8a:	f04f 0100 	mov.w	r1, #0
 8007f8e:	0159      	lsls	r1, r3, #5
 8007f90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007f94:	0150      	lsls	r0, r2, #5
 8007f96:	4602      	mov	r2, r0
 8007f98:	460b      	mov	r3, r1
 8007f9a:	4621      	mov	r1, r4
 8007f9c:	1a51      	subs	r1, r2, r1
 8007f9e:	6139      	str	r1, [r7, #16]
 8007fa0:	4629      	mov	r1, r5
 8007fa2:	eb63 0301 	sbc.w	r3, r3, r1
 8007fa6:	617b      	str	r3, [r7, #20]
 8007fa8:	f04f 0200 	mov.w	r2, #0
 8007fac:	f04f 0300 	mov.w	r3, #0
 8007fb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007fb4:	4659      	mov	r1, fp
 8007fb6:	018b      	lsls	r3, r1, #6
 8007fb8:	4651      	mov	r1, sl
 8007fba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007fbe:	4651      	mov	r1, sl
 8007fc0:	018a      	lsls	r2, r1, #6
 8007fc2:	4651      	mov	r1, sl
 8007fc4:	ebb2 0801 	subs.w	r8, r2, r1
 8007fc8:	4659      	mov	r1, fp
 8007fca:	eb63 0901 	sbc.w	r9, r3, r1
 8007fce:	f04f 0200 	mov.w	r2, #0
 8007fd2:	f04f 0300 	mov.w	r3, #0
 8007fd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007fda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007fde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007fe2:	4690      	mov	r8, r2
 8007fe4:	4699      	mov	r9, r3
 8007fe6:	4623      	mov	r3, r4
 8007fe8:	eb18 0303 	adds.w	r3, r8, r3
 8007fec:	60bb      	str	r3, [r7, #8]
 8007fee:	462b      	mov	r3, r5
 8007ff0:	eb49 0303 	adc.w	r3, r9, r3
 8007ff4:	60fb      	str	r3, [r7, #12]
 8007ff6:	f04f 0200 	mov.w	r2, #0
 8007ffa:	f04f 0300 	mov.w	r3, #0
 8007ffe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008002:	4629      	mov	r1, r5
 8008004:	024b      	lsls	r3, r1, #9
 8008006:	4621      	mov	r1, r4
 8008008:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800800c:	4621      	mov	r1, r4
 800800e:	024a      	lsls	r2, r1, #9
 8008010:	4610      	mov	r0, r2
 8008012:	4619      	mov	r1, r3
 8008014:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008016:	2200      	movs	r2, #0
 8008018:	62bb      	str	r3, [r7, #40]	; 0x28
 800801a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800801c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008020:	f7f8 fe3c 	bl	8000c9c <__aeabi_uldivmod>
 8008024:	4602      	mov	r2, r0
 8008026:	460b      	mov	r3, r1
 8008028:	4613      	mov	r3, r2
 800802a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800802c:	e058      	b.n	80080e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800802e:	4b38      	ldr	r3, [pc, #224]	; (8008110 <HAL_RCC_GetSysClockFreq+0x200>)
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	099b      	lsrs	r3, r3, #6
 8008034:	2200      	movs	r2, #0
 8008036:	4618      	mov	r0, r3
 8008038:	4611      	mov	r1, r2
 800803a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800803e:	623b      	str	r3, [r7, #32]
 8008040:	2300      	movs	r3, #0
 8008042:	627b      	str	r3, [r7, #36]	; 0x24
 8008044:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008048:	4642      	mov	r2, r8
 800804a:	464b      	mov	r3, r9
 800804c:	f04f 0000 	mov.w	r0, #0
 8008050:	f04f 0100 	mov.w	r1, #0
 8008054:	0159      	lsls	r1, r3, #5
 8008056:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800805a:	0150      	lsls	r0, r2, #5
 800805c:	4602      	mov	r2, r0
 800805e:	460b      	mov	r3, r1
 8008060:	4641      	mov	r1, r8
 8008062:	ebb2 0a01 	subs.w	sl, r2, r1
 8008066:	4649      	mov	r1, r9
 8008068:	eb63 0b01 	sbc.w	fp, r3, r1
 800806c:	f04f 0200 	mov.w	r2, #0
 8008070:	f04f 0300 	mov.w	r3, #0
 8008074:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008078:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800807c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008080:	ebb2 040a 	subs.w	r4, r2, sl
 8008084:	eb63 050b 	sbc.w	r5, r3, fp
 8008088:	f04f 0200 	mov.w	r2, #0
 800808c:	f04f 0300 	mov.w	r3, #0
 8008090:	00eb      	lsls	r3, r5, #3
 8008092:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008096:	00e2      	lsls	r2, r4, #3
 8008098:	4614      	mov	r4, r2
 800809a:	461d      	mov	r5, r3
 800809c:	4643      	mov	r3, r8
 800809e:	18e3      	adds	r3, r4, r3
 80080a0:	603b      	str	r3, [r7, #0]
 80080a2:	464b      	mov	r3, r9
 80080a4:	eb45 0303 	adc.w	r3, r5, r3
 80080a8:	607b      	str	r3, [r7, #4]
 80080aa:	f04f 0200 	mov.w	r2, #0
 80080ae:	f04f 0300 	mov.w	r3, #0
 80080b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80080b6:	4629      	mov	r1, r5
 80080b8:	028b      	lsls	r3, r1, #10
 80080ba:	4621      	mov	r1, r4
 80080bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80080c0:	4621      	mov	r1, r4
 80080c2:	028a      	lsls	r2, r1, #10
 80080c4:	4610      	mov	r0, r2
 80080c6:	4619      	mov	r1, r3
 80080c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080ca:	2200      	movs	r2, #0
 80080cc:	61bb      	str	r3, [r7, #24]
 80080ce:	61fa      	str	r2, [r7, #28]
 80080d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80080d4:	f7f8 fde2 	bl	8000c9c <__aeabi_uldivmod>
 80080d8:	4602      	mov	r2, r0
 80080da:	460b      	mov	r3, r1
 80080dc:	4613      	mov	r3, r2
 80080de:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80080e0:	4b0b      	ldr	r3, [pc, #44]	; (8008110 <HAL_RCC_GetSysClockFreq+0x200>)
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	0c1b      	lsrs	r3, r3, #16
 80080e6:	f003 0303 	and.w	r3, r3, #3
 80080ea:	3301      	adds	r3, #1
 80080ec:	005b      	lsls	r3, r3, #1
 80080ee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80080f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80080f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80080f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80080fa:	e002      	b.n	8008102 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80080fc:	4b05      	ldr	r3, [pc, #20]	; (8008114 <HAL_RCC_GetSysClockFreq+0x204>)
 80080fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008100:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008104:	4618      	mov	r0, r3
 8008106:	3750      	adds	r7, #80	; 0x50
 8008108:	46bd      	mov	sp, r7
 800810a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800810e:	bf00      	nop
 8008110:	40023800 	.word	0x40023800
 8008114:	00f42400 	.word	0x00f42400
 8008118:	007a1200 	.word	0x007a1200

0800811c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800811c:	b480      	push	{r7}
 800811e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008120:	4b03      	ldr	r3, [pc, #12]	; (8008130 <HAL_RCC_GetHCLKFreq+0x14>)
 8008122:	681b      	ldr	r3, [r3, #0]
}
 8008124:	4618      	mov	r0, r3
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr
 800812e:	bf00      	nop
 8008130:	20000000 	.word	0x20000000

08008134 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008138:	f7ff fff0 	bl	800811c <HAL_RCC_GetHCLKFreq>
 800813c:	4602      	mov	r2, r0
 800813e:	4b05      	ldr	r3, [pc, #20]	; (8008154 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008140:	689b      	ldr	r3, [r3, #8]
 8008142:	0a9b      	lsrs	r3, r3, #10
 8008144:	f003 0307 	and.w	r3, r3, #7
 8008148:	4903      	ldr	r1, [pc, #12]	; (8008158 <HAL_RCC_GetPCLK1Freq+0x24>)
 800814a:	5ccb      	ldrb	r3, [r1, r3]
 800814c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008150:	4618      	mov	r0, r3
 8008152:	bd80      	pop	{r7, pc}
 8008154:	40023800 	.word	0x40023800
 8008158:	080187d8 	.word	0x080187d8

0800815c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008160:	f7ff ffdc 	bl	800811c <HAL_RCC_GetHCLKFreq>
 8008164:	4602      	mov	r2, r0
 8008166:	4b05      	ldr	r3, [pc, #20]	; (800817c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	0b5b      	lsrs	r3, r3, #13
 800816c:	f003 0307 	and.w	r3, r3, #7
 8008170:	4903      	ldr	r1, [pc, #12]	; (8008180 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008172:	5ccb      	ldrb	r3, [r1, r3]
 8008174:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008178:	4618      	mov	r0, r3
 800817a:	bd80      	pop	{r7, pc}
 800817c:	40023800 	.word	0x40023800
 8008180:	080187d8 	.word	0x080187d8

08008184 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	220f      	movs	r2, #15
 8008192:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008194:	4b12      	ldr	r3, [pc, #72]	; (80081e0 <HAL_RCC_GetClockConfig+0x5c>)
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	f003 0203 	and.w	r2, r3, #3
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80081a0:	4b0f      	ldr	r3, [pc, #60]	; (80081e0 <HAL_RCC_GetClockConfig+0x5c>)
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80081ac:	4b0c      	ldr	r3, [pc, #48]	; (80081e0 <HAL_RCC_GetClockConfig+0x5c>)
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80081b8:	4b09      	ldr	r3, [pc, #36]	; (80081e0 <HAL_RCC_GetClockConfig+0x5c>)
 80081ba:	689b      	ldr	r3, [r3, #8]
 80081bc:	08db      	lsrs	r3, r3, #3
 80081be:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80081c6:	4b07      	ldr	r3, [pc, #28]	; (80081e4 <HAL_RCC_GetClockConfig+0x60>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f003 0207 	and.w	r2, r3, #7
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	601a      	str	r2, [r3, #0]
}
 80081d2:	bf00      	nop
 80081d4:	370c      	adds	r7, #12
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop
 80081e0:	40023800 	.word	0x40023800
 80081e4:	40023c00 	.word	0x40023c00

080081e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b082      	sub	sp, #8
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d101      	bne.n	80081fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80081f6:	2301      	movs	r3, #1
 80081f8:	e041      	b.n	800827e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008200:	b2db      	uxtb	r3, r3
 8008202:	2b00      	cmp	r3, #0
 8008204:	d106      	bne.n	8008214 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2200      	movs	r2, #0
 800820a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 f839 	bl	8008286 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2202      	movs	r2, #2
 8008218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	3304      	adds	r3, #4
 8008224:	4619      	mov	r1, r3
 8008226:	4610      	mov	r0, r2
 8008228:	f000 fc7a 	bl	8008b20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2201      	movs	r2, #1
 8008230:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2201      	movs	r2, #1
 8008238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2201      	movs	r2, #1
 8008240:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2201      	movs	r2, #1
 8008248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2201      	movs	r2, #1
 8008250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2201      	movs	r2, #1
 8008258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2201      	movs	r2, #1
 8008260:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2201      	movs	r2, #1
 8008268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2201      	movs	r2, #1
 8008278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800827c:	2300      	movs	r3, #0
}
 800827e:	4618      	mov	r0, r3
 8008280:	3708      	adds	r7, #8
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}

08008286 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008286:	b480      	push	{r7}
 8008288:	b083      	sub	sp, #12
 800828a:	af00      	add	r7, sp, #0
 800828c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800828e:	bf00      	nop
 8008290:	370c      	adds	r7, #12
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr
	...

0800829c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800829c:	b480      	push	{r7}
 800829e:	b085      	sub	sp, #20
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082aa:	b2db      	uxtb	r3, r3
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d001      	beq.n	80082b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80082b0:	2301      	movs	r3, #1
 80082b2:	e044      	b.n	800833e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2202      	movs	r2, #2
 80082b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	68da      	ldr	r2, [r3, #12]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f042 0201 	orr.w	r2, r2, #1
 80082ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a1e      	ldr	r2, [pc, #120]	; (800834c <HAL_TIM_Base_Start_IT+0xb0>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d018      	beq.n	8008308 <HAL_TIM_Base_Start_IT+0x6c>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082de:	d013      	beq.n	8008308 <HAL_TIM_Base_Start_IT+0x6c>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a1a      	ldr	r2, [pc, #104]	; (8008350 <HAL_TIM_Base_Start_IT+0xb4>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d00e      	beq.n	8008308 <HAL_TIM_Base_Start_IT+0x6c>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a19      	ldr	r2, [pc, #100]	; (8008354 <HAL_TIM_Base_Start_IT+0xb8>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d009      	beq.n	8008308 <HAL_TIM_Base_Start_IT+0x6c>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a17      	ldr	r2, [pc, #92]	; (8008358 <HAL_TIM_Base_Start_IT+0xbc>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d004      	beq.n	8008308 <HAL_TIM_Base_Start_IT+0x6c>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a16      	ldr	r2, [pc, #88]	; (800835c <HAL_TIM_Base_Start_IT+0xc0>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d111      	bne.n	800832c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	f003 0307 	and.w	r3, r3, #7
 8008312:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2b06      	cmp	r3, #6
 8008318:	d010      	beq.n	800833c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f042 0201 	orr.w	r2, r2, #1
 8008328:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800832a:	e007      	b.n	800833c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f042 0201 	orr.w	r2, r2, #1
 800833a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3714      	adds	r7, #20
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr
 800834a:	bf00      	nop
 800834c:	40010000 	.word	0x40010000
 8008350:	40000400 	.word	0x40000400
 8008354:	40000800 	.word	0x40000800
 8008358:	40000c00 	.word	0x40000c00
 800835c:	40014000 	.word	0x40014000

08008360 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d109      	bne.n	8008384 <HAL_TIM_PWM_Start+0x24>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008376:	b2db      	uxtb	r3, r3
 8008378:	2b01      	cmp	r3, #1
 800837a:	bf14      	ite	ne
 800837c:	2301      	movne	r3, #1
 800837e:	2300      	moveq	r3, #0
 8008380:	b2db      	uxtb	r3, r3
 8008382:	e022      	b.n	80083ca <HAL_TIM_PWM_Start+0x6a>
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	2b04      	cmp	r3, #4
 8008388:	d109      	bne.n	800839e <HAL_TIM_PWM_Start+0x3e>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008390:	b2db      	uxtb	r3, r3
 8008392:	2b01      	cmp	r3, #1
 8008394:	bf14      	ite	ne
 8008396:	2301      	movne	r3, #1
 8008398:	2300      	moveq	r3, #0
 800839a:	b2db      	uxtb	r3, r3
 800839c:	e015      	b.n	80083ca <HAL_TIM_PWM_Start+0x6a>
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	2b08      	cmp	r3, #8
 80083a2:	d109      	bne.n	80083b8 <HAL_TIM_PWM_Start+0x58>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80083aa:	b2db      	uxtb	r3, r3
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	bf14      	ite	ne
 80083b0:	2301      	movne	r3, #1
 80083b2:	2300      	moveq	r3, #0
 80083b4:	b2db      	uxtb	r3, r3
 80083b6:	e008      	b.n	80083ca <HAL_TIM_PWM_Start+0x6a>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	bf14      	ite	ne
 80083c4:	2301      	movne	r3, #1
 80083c6:	2300      	moveq	r3, #0
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d001      	beq.n	80083d2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80083ce:	2301      	movs	r3, #1
 80083d0:	e068      	b.n	80084a4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d104      	bne.n	80083e2 <HAL_TIM_PWM_Start+0x82>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2202      	movs	r2, #2
 80083dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80083e0:	e013      	b.n	800840a <HAL_TIM_PWM_Start+0xaa>
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	2b04      	cmp	r3, #4
 80083e6:	d104      	bne.n	80083f2 <HAL_TIM_PWM_Start+0x92>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2202      	movs	r2, #2
 80083ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80083f0:	e00b      	b.n	800840a <HAL_TIM_PWM_Start+0xaa>
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	2b08      	cmp	r3, #8
 80083f6:	d104      	bne.n	8008402 <HAL_TIM_PWM_Start+0xa2>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2202      	movs	r2, #2
 80083fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008400:	e003      	b.n	800840a <HAL_TIM_PWM_Start+0xaa>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2202      	movs	r2, #2
 8008406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2201      	movs	r2, #1
 8008410:	6839      	ldr	r1, [r7, #0]
 8008412:	4618      	mov	r0, r3
 8008414:	f000 fd90 	bl	8008f38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a23      	ldr	r2, [pc, #140]	; (80084ac <HAL_TIM_PWM_Start+0x14c>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d107      	bne.n	8008432 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008430:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a1d      	ldr	r2, [pc, #116]	; (80084ac <HAL_TIM_PWM_Start+0x14c>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d018      	beq.n	800846e <HAL_TIM_PWM_Start+0x10e>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008444:	d013      	beq.n	800846e <HAL_TIM_PWM_Start+0x10e>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a19      	ldr	r2, [pc, #100]	; (80084b0 <HAL_TIM_PWM_Start+0x150>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d00e      	beq.n	800846e <HAL_TIM_PWM_Start+0x10e>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a17      	ldr	r2, [pc, #92]	; (80084b4 <HAL_TIM_PWM_Start+0x154>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d009      	beq.n	800846e <HAL_TIM_PWM_Start+0x10e>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a16      	ldr	r2, [pc, #88]	; (80084b8 <HAL_TIM_PWM_Start+0x158>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d004      	beq.n	800846e <HAL_TIM_PWM_Start+0x10e>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a14      	ldr	r2, [pc, #80]	; (80084bc <HAL_TIM_PWM_Start+0x15c>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d111      	bne.n	8008492 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	f003 0307 	and.w	r3, r3, #7
 8008478:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2b06      	cmp	r3, #6
 800847e:	d010      	beq.n	80084a2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f042 0201 	orr.w	r2, r2, #1
 800848e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008490:	e007      	b.n	80084a2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	681a      	ldr	r2, [r3, #0]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f042 0201 	orr.w	r2, r2, #1
 80084a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80084a2:	2300      	movs	r3, #0
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3710      	adds	r7, #16
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}
 80084ac:	40010000 	.word	0x40010000
 80084b0:	40000400 	.word	0x40000400
 80084b4:	40000800 	.word	0x40000800
 80084b8:	40000c00 	.word	0x40000c00
 80084bc:	40014000 	.word	0x40014000

080084c0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b086      	sub	sp, #24
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d101      	bne.n	80084d4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80084d0:	2301      	movs	r3, #1
 80084d2:	e097      	b.n	8008604 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d106      	bne.n	80084ee <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f000 f88f 	bl	800860c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2202      	movs	r2, #2
 80084f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	687a      	ldr	r2, [r7, #4]
 80084fe:	6812      	ldr	r2, [r2, #0]
 8008500:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008504:	f023 0307 	bic.w	r3, r3, #7
 8008508:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	3304      	adds	r3, #4
 8008512:	4619      	mov	r1, r3
 8008514:	4610      	mov	r0, r2
 8008516:	f000 fb03 	bl	8008b20 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	699b      	ldr	r3, [r3, #24]
 8008528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	6a1b      	ldr	r3, [r3, #32]
 8008530:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	697a      	ldr	r2, [r7, #20]
 8008538:	4313      	orrs	r3, r2
 800853a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008542:	f023 0303 	bic.w	r3, r3, #3
 8008546:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	689a      	ldr	r2, [r3, #8]
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	699b      	ldr	r3, [r3, #24]
 8008550:	021b      	lsls	r3, r3, #8
 8008552:	4313      	orrs	r3, r2
 8008554:	693a      	ldr	r2, [r7, #16]
 8008556:	4313      	orrs	r3, r2
 8008558:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008560:	f023 030c 	bic.w	r3, r3, #12
 8008564:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800856c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008570:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	68da      	ldr	r2, [r3, #12]
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	69db      	ldr	r3, [r3, #28]
 800857a:	021b      	lsls	r3, r3, #8
 800857c:	4313      	orrs	r3, r2
 800857e:	693a      	ldr	r2, [r7, #16]
 8008580:	4313      	orrs	r3, r2
 8008582:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	691b      	ldr	r3, [r3, #16]
 8008588:	011a      	lsls	r2, r3, #4
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	6a1b      	ldr	r3, [r3, #32]
 800858e:	031b      	lsls	r3, r3, #12
 8008590:	4313      	orrs	r3, r2
 8008592:	693a      	ldr	r2, [r7, #16]
 8008594:	4313      	orrs	r3, r2
 8008596:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800859e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80085a6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	685a      	ldr	r2, [r3, #4]
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	695b      	ldr	r3, [r3, #20]
 80085b0:	011b      	lsls	r3, r3, #4
 80085b2:	4313      	orrs	r3, r2
 80085b4:	68fa      	ldr	r2, [r7, #12]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	697a      	ldr	r2, [r7, #20]
 80085c0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	693a      	ldr	r2, [r7, #16]
 80085c8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	68fa      	ldr	r2, [r7, #12]
 80085d0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2201      	movs	r2, #1
 80085d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2201      	movs	r2, #1
 80085de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2201      	movs	r2, #1
 80085e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2201      	movs	r2, #1
 80085ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2201      	movs	r2, #1
 80085f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2201      	movs	r2, #1
 80085fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008602:	2300      	movs	r3, #0
}
 8008604:	4618      	mov	r0, r3
 8008606:	3718      	adds	r7, #24
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}

0800860c <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 800860c:	b480      	push	{r7}
 800860e:	b083      	sub	sp, #12
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 8008614:	bf00      	nop
 8008616:	370c      	adds	r7, #12
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008630:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008638:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008640:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008648:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d110      	bne.n	8008672 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008650:	7bfb      	ldrb	r3, [r7, #15]
 8008652:	2b01      	cmp	r3, #1
 8008654:	d102      	bne.n	800865c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008656:	7b7b      	ldrb	r3, [r7, #13]
 8008658:	2b01      	cmp	r3, #1
 800865a:	d001      	beq.n	8008660 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800865c:	2301      	movs	r3, #1
 800865e:	e069      	b.n	8008734 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2202      	movs	r2, #2
 8008664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2202      	movs	r2, #2
 800866c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008670:	e031      	b.n	80086d6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	2b04      	cmp	r3, #4
 8008676:	d110      	bne.n	800869a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008678:	7bbb      	ldrb	r3, [r7, #14]
 800867a:	2b01      	cmp	r3, #1
 800867c:	d102      	bne.n	8008684 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800867e:	7b3b      	ldrb	r3, [r7, #12]
 8008680:	2b01      	cmp	r3, #1
 8008682:	d001      	beq.n	8008688 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008684:	2301      	movs	r3, #1
 8008686:	e055      	b.n	8008734 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2202      	movs	r2, #2
 800868c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2202      	movs	r2, #2
 8008694:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008698:	e01d      	b.n	80086d6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800869a:	7bfb      	ldrb	r3, [r7, #15]
 800869c:	2b01      	cmp	r3, #1
 800869e:	d108      	bne.n	80086b2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80086a0:	7bbb      	ldrb	r3, [r7, #14]
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d105      	bne.n	80086b2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80086a6:	7b7b      	ldrb	r3, [r7, #13]
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d102      	bne.n	80086b2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80086ac:	7b3b      	ldrb	r3, [r7, #12]
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d001      	beq.n	80086b6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	e03e      	b.n	8008734 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2202      	movs	r2, #2
 80086ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2202      	movs	r2, #2
 80086c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2202      	movs	r2, #2
 80086ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2202      	movs	r2, #2
 80086d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d003      	beq.n	80086e4 <HAL_TIM_Encoder_Start+0xc4>
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	2b04      	cmp	r3, #4
 80086e0:	d008      	beq.n	80086f4 <HAL_TIM_Encoder_Start+0xd4>
 80086e2:	e00f      	b.n	8008704 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	2201      	movs	r2, #1
 80086ea:	2100      	movs	r1, #0
 80086ec:	4618      	mov	r0, r3
 80086ee:	f000 fc23 	bl	8008f38 <TIM_CCxChannelCmd>
      break;
 80086f2:	e016      	b.n	8008722 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	2201      	movs	r2, #1
 80086fa:	2104      	movs	r1, #4
 80086fc:	4618      	mov	r0, r3
 80086fe:	f000 fc1b 	bl	8008f38 <TIM_CCxChannelCmd>
      break;
 8008702:	e00e      	b.n	8008722 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	2201      	movs	r2, #1
 800870a:	2100      	movs	r1, #0
 800870c:	4618      	mov	r0, r3
 800870e:	f000 fc13 	bl	8008f38 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	2201      	movs	r2, #1
 8008718:	2104      	movs	r1, #4
 800871a:	4618      	mov	r0, r3
 800871c:	f000 fc0c 	bl	8008f38 <TIM_CCxChannelCmd>
      break;
 8008720:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f042 0201 	orr.w	r2, r2, #1
 8008730:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008732:	2300      	movs	r3, #0
}
 8008734:	4618      	mov	r0, r3
 8008736:	3710      	adds	r7, #16
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b082      	sub	sp, #8
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	691b      	ldr	r3, [r3, #16]
 800874a:	f003 0302 	and.w	r3, r3, #2
 800874e:	2b02      	cmp	r3, #2
 8008750:	d122      	bne.n	8008798 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	68db      	ldr	r3, [r3, #12]
 8008758:	f003 0302 	and.w	r3, r3, #2
 800875c:	2b02      	cmp	r3, #2
 800875e:	d11b      	bne.n	8008798 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f06f 0202 	mvn.w	r2, #2
 8008768:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2201      	movs	r2, #1
 800876e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	699b      	ldr	r3, [r3, #24]
 8008776:	f003 0303 	and.w	r3, r3, #3
 800877a:	2b00      	cmp	r3, #0
 800877c:	d003      	beq.n	8008786 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 f9b0 	bl	8008ae4 <HAL_TIM_IC_CaptureCallback>
 8008784:	e005      	b.n	8008792 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 f9a2 	bl	8008ad0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 f9b3 	bl	8008af8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2200      	movs	r2, #0
 8008796:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	691b      	ldr	r3, [r3, #16]
 800879e:	f003 0304 	and.w	r3, r3, #4
 80087a2:	2b04      	cmp	r3, #4
 80087a4:	d122      	bne.n	80087ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	68db      	ldr	r3, [r3, #12]
 80087ac:	f003 0304 	and.w	r3, r3, #4
 80087b0:	2b04      	cmp	r3, #4
 80087b2:	d11b      	bne.n	80087ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f06f 0204 	mvn.w	r2, #4
 80087bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2202      	movs	r2, #2
 80087c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	699b      	ldr	r3, [r3, #24]
 80087ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d003      	beq.n	80087da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 f986 	bl	8008ae4 <HAL_TIM_IC_CaptureCallback>
 80087d8:	e005      	b.n	80087e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 f978 	bl	8008ad0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 f989 	bl	8008af8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2200      	movs	r2, #0
 80087ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	691b      	ldr	r3, [r3, #16]
 80087f2:	f003 0308 	and.w	r3, r3, #8
 80087f6:	2b08      	cmp	r3, #8
 80087f8:	d122      	bne.n	8008840 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	68db      	ldr	r3, [r3, #12]
 8008800:	f003 0308 	and.w	r3, r3, #8
 8008804:	2b08      	cmp	r3, #8
 8008806:	d11b      	bne.n	8008840 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f06f 0208 	mvn.w	r2, #8
 8008810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2204      	movs	r2, #4
 8008816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	69db      	ldr	r3, [r3, #28]
 800881e:	f003 0303 	and.w	r3, r3, #3
 8008822:	2b00      	cmp	r3, #0
 8008824:	d003      	beq.n	800882e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 f95c 	bl	8008ae4 <HAL_TIM_IC_CaptureCallback>
 800882c:	e005      	b.n	800883a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 f94e 	bl	8008ad0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f000 f95f 	bl	8008af8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2200      	movs	r2, #0
 800883e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	691b      	ldr	r3, [r3, #16]
 8008846:	f003 0310 	and.w	r3, r3, #16
 800884a:	2b10      	cmp	r3, #16
 800884c:	d122      	bne.n	8008894 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	68db      	ldr	r3, [r3, #12]
 8008854:	f003 0310 	and.w	r3, r3, #16
 8008858:	2b10      	cmp	r3, #16
 800885a:	d11b      	bne.n	8008894 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f06f 0210 	mvn.w	r2, #16
 8008864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2208      	movs	r2, #8
 800886a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	69db      	ldr	r3, [r3, #28]
 8008872:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008876:	2b00      	cmp	r3, #0
 8008878:	d003      	beq.n	8008882 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 f932 	bl	8008ae4 <HAL_TIM_IC_CaptureCallback>
 8008880:	e005      	b.n	800888e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 f924 	bl	8008ad0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 f935 	bl	8008af8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2200      	movs	r2, #0
 8008892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	691b      	ldr	r3, [r3, #16]
 800889a:	f003 0301 	and.w	r3, r3, #1
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d10e      	bne.n	80088c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	68db      	ldr	r3, [r3, #12]
 80088a8:	f003 0301 	and.w	r3, r3, #1
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d107      	bne.n	80088c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f06f 0201 	mvn.w	r2, #1
 80088b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f7fa f892 	bl	80029e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	691b      	ldr	r3, [r3, #16]
 80088c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088ca:	2b80      	cmp	r3, #128	; 0x80
 80088cc:	d10e      	bne.n	80088ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	68db      	ldr	r3, [r3, #12]
 80088d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088d8:	2b80      	cmp	r3, #128	; 0x80
 80088da:	d107      	bne.n	80088ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80088e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 fb55 	bl	8008f96 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	691b      	ldr	r3, [r3, #16]
 80088f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088f6:	2b40      	cmp	r3, #64	; 0x40
 80088f8:	d10e      	bne.n	8008918 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	68db      	ldr	r3, [r3, #12]
 8008900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008904:	2b40      	cmp	r3, #64	; 0x40
 8008906:	d107      	bne.n	8008918 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 f8fa 	bl	8008b0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	691b      	ldr	r3, [r3, #16]
 800891e:	f003 0320 	and.w	r3, r3, #32
 8008922:	2b20      	cmp	r3, #32
 8008924:	d10e      	bne.n	8008944 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	68db      	ldr	r3, [r3, #12]
 800892c:	f003 0320 	and.w	r3, r3, #32
 8008930:	2b20      	cmp	r3, #32
 8008932:	d107      	bne.n	8008944 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f06f 0220 	mvn.w	r2, #32
 800893c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 fb1f 	bl	8008f82 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008944:	bf00      	nop
 8008946:	3708      	adds	r7, #8
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b086      	sub	sp, #24
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008958:	2300      	movs	r3, #0
 800895a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008962:	2b01      	cmp	r3, #1
 8008964:	d101      	bne.n	800896a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008966:	2302      	movs	r3, #2
 8008968:	e0ae      	b.n	8008ac8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2201      	movs	r2, #1
 800896e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2b0c      	cmp	r3, #12
 8008976:	f200 809f 	bhi.w	8008ab8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800897a:	a201      	add	r2, pc, #4	; (adr r2, 8008980 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800897c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008980:	080089b5 	.word	0x080089b5
 8008984:	08008ab9 	.word	0x08008ab9
 8008988:	08008ab9 	.word	0x08008ab9
 800898c:	08008ab9 	.word	0x08008ab9
 8008990:	080089f5 	.word	0x080089f5
 8008994:	08008ab9 	.word	0x08008ab9
 8008998:	08008ab9 	.word	0x08008ab9
 800899c:	08008ab9 	.word	0x08008ab9
 80089a0:	08008a37 	.word	0x08008a37
 80089a4:	08008ab9 	.word	0x08008ab9
 80089a8:	08008ab9 	.word	0x08008ab9
 80089ac:	08008ab9 	.word	0x08008ab9
 80089b0:	08008a77 	.word	0x08008a77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	68b9      	ldr	r1, [r7, #8]
 80089ba:	4618      	mov	r0, r3
 80089bc:	f000 f930 	bl	8008c20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	699a      	ldr	r2, [r3, #24]
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f042 0208 	orr.w	r2, r2, #8
 80089ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	699a      	ldr	r2, [r3, #24]
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f022 0204 	bic.w	r2, r2, #4
 80089de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	6999      	ldr	r1, [r3, #24]
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	691a      	ldr	r2, [r3, #16]
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	430a      	orrs	r2, r1
 80089f0:	619a      	str	r2, [r3, #24]
      break;
 80089f2:	e064      	b.n	8008abe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	68b9      	ldr	r1, [r7, #8]
 80089fa:	4618      	mov	r0, r3
 80089fc:	f000 f976 	bl	8008cec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	699a      	ldr	r2, [r3, #24]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	699a      	ldr	r2, [r3, #24]
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	6999      	ldr	r1, [r3, #24]
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	691b      	ldr	r3, [r3, #16]
 8008a2a:	021a      	lsls	r2, r3, #8
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	430a      	orrs	r2, r1
 8008a32:	619a      	str	r2, [r3, #24]
      break;
 8008a34:	e043      	b.n	8008abe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	68b9      	ldr	r1, [r7, #8]
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f000 f9c1 	bl	8008dc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	69da      	ldr	r2, [r3, #28]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f042 0208 	orr.w	r2, r2, #8
 8008a50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	69da      	ldr	r2, [r3, #28]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f022 0204 	bic.w	r2, r2, #4
 8008a60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	69d9      	ldr	r1, [r3, #28]
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	691a      	ldr	r2, [r3, #16]
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	430a      	orrs	r2, r1
 8008a72:	61da      	str	r2, [r3, #28]
      break;
 8008a74:	e023      	b.n	8008abe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	68b9      	ldr	r1, [r7, #8]
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f000 fa0b 	bl	8008e98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	69da      	ldr	r2, [r3, #28]
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	69da      	ldr	r2, [r3, #28]
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008aa0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	69d9      	ldr	r1, [r3, #28]
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	691b      	ldr	r3, [r3, #16]
 8008aac:	021a      	lsls	r2, r3, #8
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	430a      	orrs	r2, r1
 8008ab4:	61da      	str	r2, [r3, #28]
      break;
 8008ab6:	e002      	b.n	8008abe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	75fb      	strb	r3, [r7, #23]
      break;
 8008abc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008ac6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3718      	adds	r7, #24
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b083      	sub	sp, #12
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008ad8:	bf00      	nop
 8008ada:	370c      	adds	r7, #12
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr

08008ae4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008aec:	bf00      	nop
 8008aee:	370c      	adds	r7, #12
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008b00:	bf00      	nop
 8008b02:	370c      	adds	r7, #12
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b083      	sub	sp, #12
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008b14:	bf00      	nop
 8008b16:	370c      	adds	r7, #12
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr

08008b20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b085      	sub	sp, #20
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	4a34      	ldr	r2, [pc, #208]	; (8008c04 <TIM_Base_SetConfig+0xe4>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d00f      	beq.n	8008b58 <TIM_Base_SetConfig+0x38>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b3e:	d00b      	beq.n	8008b58 <TIM_Base_SetConfig+0x38>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	4a31      	ldr	r2, [pc, #196]	; (8008c08 <TIM_Base_SetConfig+0xe8>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d007      	beq.n	8008b58 <TIM_Base_SetConfig+0x38>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	4a30      	ldr	r2, [pc, #192]	; (8008c0c <TIM_Base_SetConfig+0xec>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d003      	beq.n	8008b58 <TIM_Base_SetConfig+0x38>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	4a2f      	ldr	r2, [pc, #188]	; (8008c10 <TIM_Base_SetConfig+0xf0>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d108      	bne.n	8008b6a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	68fa      	ldr	r2, [r7, #12]
 8008b66:	4313      	orrs	r3, r2
 8008b68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	4a25      	ldr	r2, [pc, #148]	; (8008c04 <TIM_Base_SetConfig+0xe4>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d01b      	beq.n	8008baa <TIM_Base_SetConfig+0x8a>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b78:	d017      	beq.n	8008baa <TIM_Base_SetConfig+0x8a>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	4a22      	ldr	r2, [pc, #136]	; (8008c08 <TIM_Base_SetConfig+0xe8>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d013      	beq.n	8008baa <TIM_Base_SetConfig+0x8a>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	4a21      	ldr	r2, [pc, #132]	; (8008c0c <TIM_Base_SetConfig+0xec>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d00f      	beq.n	8008baa <TIM_Base_SetConfig+0x8a>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	4a20      	ldr	r2, [pc, #128]	; (8008c10 <TIM_Base_SetConfig+0xf0>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d00b      	beq.n	8008baa <TIM_Base_SetConfig+0x8a>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	4a1f      	ldr	r2, [pc, #124]	; (8008c14 <TIM_Base_SetConfig+0xf4>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d007      	beq.n	8008baa <TIM_Base_SetConfig+0x8a>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	4a1e      	ldr	r2, [pc, #120]	; (8008c18 <TIM_Base_SetConfig+0xf8>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d003      	beq.n	8008baa <TIM_Base_SetConfig+0x8a>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	4a1d      	ldr	r2, [pc, #116]	; (8008c1c <TIM_Base_SetConfig+0xfc>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d108      	bne.n	8008bbc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	68db      	ldr	r3, [r3, #12]
 8008bb6:	68fa      	ldr	r2, [r7, #12]
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	695b      	ldr	r3, [r3, #20]
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	68fa      	ldr	r2, [r7, #12]
 8008bce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	689a      	ldr	r2, [r3, #8]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	4a08      	ldr	r2, [pc, #32]	; (8008c04 <TIM_Base_SetConfig+0xe4>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d103      	bne.n	8008bf0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	691a      	ldr	r2, [r3, #16]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	615a      	str	r2, [r3, #20]
}
 8008bf6:	bf00      	nop
 8008bf8:	3714      	adds	r7, #20
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr
 8008c02:	bf00      	nop
 8008c04:	40010000 	.word	0x40010000
 8008c08:	40000400 	.word	0x40000400
 8008c0c:	40000800 	.word	0x40000800
 8008c10:	40000c00 	.word	0x40000c00
 8008c14:	40014000 	.word	0x40014000
 8008c18:	40014400 	.word	0x40014400
 8008c1c:	40014800 	.word	0x40014800

08008c20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b087      	sub	sp, #28
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6a1b      	ldr	r3, [r3, #32]
 8008c2e:	f023 0201 	bic.w	r2, r3, #1
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6a1b      	ldr	r3, [r3, #32]
 8008c3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	699b      	ldr	r3, [r3, #24]
 8008c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f023 0303 	bic.w	r3, r3, #3
 8008c56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	68fa      	ldr	r2, [r7, #12]
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	f023 0302 	bic.w	r3, r3, #2
 8008c68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	689b      	ldr	r3, [r3, #8]
 8008c6e:	697a      	ldr	r2, [r7, #20]
 8008c70:	4313      	orrs	r3, r2
 8008c72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	4a1c      	ldr	r2, [pc, #112]	; (8008ce8 <TIM_OC1_SetConfig+0xc8>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d10c      	bne.n	8008c96 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	f023 0308 	bic.w	r3, r3, #8
 8008c82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	68db      	ldr	r3, [r3, #12]
 8008c88:	697a      	ldr	r2, [r7, #20]
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	f023 0304 	bic.w	r3, r3, #4
 8008c94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	4a13      	ldr	r2, [pc, #76]	; (8008ce8 <TIM_OC1_SetConfig+0xc8>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d111      	bne.n	8008cc2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ca4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008cac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	695b      	ldr	r3, [r3, #20]
 8008cb2:	693a      	ldr	r2, [r7, #16]
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	699b      	ldr	r3, [r3, #24]
 8008cbc:	693a      	ldr	r2, [r7, #16]
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	693a      	ldr	r2, [r7, #16]
 8008cc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	68fa      	ldr	r2, [r7, #12]
 8008ccc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	685a      	ldr	r2, [r3, #4]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	697a      	ldr	r2, [r7, #20]
 8008cda:	621a      	str	r2, [r3, #32]
}
 8008cdc:	bf00      	nop
 8008cde:	371c      	adds	r7, #28
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr
 8008ce8:	40010000 	.word	0x40010000

08008cec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b087      	sub	sp, #28
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6a1b      	ldr	r3, [r3, #32]
 8008cfa:	f023 0210 	bic.w	r2, r3, #16
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6a1b      	ldr	r3, [r3, #32]
 8008d06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	699b      	ldr	r3, [r3, #24]
 8008d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	021b      	lsls	r3, r3, #8
 8008d2a:	68fa      	ldr	r2, [r7, #12]
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	f023 0320 	bic.w	r3, r3, #32
 8008d36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	011b      	lsls	r3, r3, #4
 8008d3e:	697a      	ldr	r2, [r7, #20]
 8008d40:	4313      	orrs	r3, r2
 8008d42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	4a1e      	ldr	r2, [pc, #120]	; (8008dc0 <TIM_OC2_SetConfig+0xd4>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d10d      	bne.n	8008d68 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	68db      	ldr	r3, [r3, #12]
 8008d58:	011b      	lsls	r3, r3, #4
 8008d5a:	697a      	ldr	r2, [r7, #20]
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	4a15      	ldr	r2, [pc, #84]	; (8008dc0 <TIM_OC2_SetConfig+0xd4>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d113      	bne.n	8008d98 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008d76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	695b      	ldr	r3, [r3, #20]
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	693a      	ldr	r2, [r7, #16]
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	699b      	ldr	r3, [r3, #24]
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	693a      	ldr	r2, [r7, #16]
 8008d94:	4313      	orrs	r3, r2
 8008d96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	693a      	ldr	r2, [r7, #16]
 8008d9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	68fa      	ldr	r2, [r7, #12]
 8008da2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	685a      	ldr	r2, [r3, #4]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	697a      	ldr	r2, [r7, #20]
 8008db0:	621a      	str	r2, [r3, #32]
}
 8008db2:	bf00      	nop
 8008db4:	371c      	adds	r7, #28
 8008db6:	46bd      	mov	sp, r7
 8008db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbc:	4770      	bx	lr
 8008dbe:	bf00      	nop
 8008dc0:	40010000 	.word	0x40010000

08008dc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b087      	sub	sp, #28
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6a1b      	ldr	r3, [r3, #32]
 8008dd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6a1b      	ldr	r3, [r3, #32]
 8008dde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	69db      	ldr	r3, [r3, #28]
 8008dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008df2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f023 0303 	bic.w	r3, r3, #3
 8008dfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	68fa      	ldr	r2, [r7, #12]
 8008e02:	4313      	orrs	r3, r2
 8008e04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	689b      	ldr	r3, [r3, #8]
 8008e12:	021b      	lsls	r3, r3, #8
 8008e14:	697a      	ldr	r2, [r7, #20]
 8008e16:	4313      	orrs	r3, r2
 8008e18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	4a1d      	ldr	r2, [pc, #116]	; (8008e94 <TIM_OC3_SetConfig+0xd0>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d10d      	bne.n	8008e3e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	68db      	ldr	r3, [r3, #12]
 8008e2e:	021b      	lsls	r3, r3, #8
 8008e30:	697a      	ldr	r2, [r7, #20]
 8008e32:	4313      	orrs	r3, r2
 8008e34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	4a14      	ldr	r2, [pc, #80]	; (8008e94 <TIM_OC3_SetConfig+0xd0>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d113      	bne.n	8008e6e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	695b      	ldr	r3, [r3, #20]
 8008e5a:	011b      	lsls	r3, r3, #4
 8008e5c:	693a      	ldr	r2, [r7, #16]
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	699b      	ldr	r3, [r3, #24]
 8008e66:	011b      	lsls	r3, r3, #4
 8008e68:	693a      	ldr	r2, [r7, #16]
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	693a      	ldr	r2, [r7, #16]
 8008e72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	68fa      	ldr	r2, [r7, #12]
 8008e78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	685a      	ldr	r2, [r3, #4]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	697a      	ldr	r2, [r7, #20]
 8008e86:	621a      	str	r2, [r3, #32]
}
 8008e88:	bf00      	nop
 8008e8a:	371c      	adds	r7, #28
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr
 8008e94:	40010000 	.word	0x40010000

08008e98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b087      	sub	sp, #28
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6a1b      	ldr	r3, [r3, #32]
 8008ea6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6a1b      	ldr	r3, [r3, #32]
 8008eb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	69db      	ldr	r3, [r3, #28]
 8008ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ece:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	021b      	lsls	r3, r3, #8
 8008ed6:	68fa      	ldr	r2, [r7, #12]
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ee2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	031b      	lsls	r3, r3, #12
 8008eea:	693a      	ldr	r2, [r7, #16]
 8008eec:	4313      	orrs	r3, r2
 8008eee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	4a10      	ldr	r2, [pc, #64]	; (8008f34 <TIM_OC4_SetConfig+0x9c>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d109      	bne.n	8008f0c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008efe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	695b      	ldr	r3, [r3, #20]
 8008f04:	019b      	lsls	r3, r3, #6
 8008f06:	697a      	ldr	r2, [r7, #20]
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	697a      	ldr	r2, [r7, #20]
 8008f10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	68fa      	ldr	r2, [r7, #12]
 8008f16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	685a      	ldr	r2, [r3, #4]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	693a      	ldr	r2, [r7, #16]
 8008f24:	621a      	str	r2, [r3, #32]
}
 8008f26:	bf00      	nop
 8008f28:	371c      	adds	r7, #28
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f30:	4770      	bx	lr
 8008f32:	bf00      	nop
 8008f34:	40010000 	.word	0x40010000

08008f38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b087      	sub	sp, #28
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	60b9      	str	r1, [r7, #8]
 8008f42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	f003 031f 	and.w	r3, r3, #31
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	6a1a      	ldr	r2, [r3, #32]
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	43db      	mvns	r3, r3
 8008f5a:	401a      	ands	r2, r3
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	6a1a      	ldr	r2, [r3, #32]
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	f003 031f 	and.w	r3, r3, #31
 8008f6a:	6879      	ldr	r1, [r7, #4]
 8008f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8008f70:	431a      	orrs	r2, r3
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	621a      	str	r2, [r3, #32]
}
 8008f76:	bf00      	nop
 8008f78:	371c      	adds	r7, #28
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr

08008f82 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f82:	b480      	push	{r7}
 8008f84:	b083      	sub	sp, #12
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f8a:	bf00      	nop
 8008f8c:	370c      	adds	r7, #12
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f94:	4770      	bx	lr

08008f96 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f96:	b480      	push	{r7}
 8008f98:	b083      	sub	sp, #12
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f9e:	bf00      	nop
 8008fa0:	370c      	adds	r7, #12
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa8:	4770      	bx	lr

08008faa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008faa:	b580      	push	{r7, lr}
 8008fac:	b082      	sub	sp, #8
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d101      	bne.n	8008fbc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008fb8:	2301      	movs	r3, #1
 8008fba:	e03f      	b.n	800903c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fc2:	b2db      	uxtb	r3, r3
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d106      	bne.n	8008fd6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f7fa fabb 	bl	800354c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2224      	movs	r2, #36	; 0x24
 8008fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	68da      	ldr	r2, [r3, #12]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008fec:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f001 f978 	bl	800a2e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	691a      	ldr	r2, [r3, #16]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009002:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	695a      	ldr	r2, [r3, #20]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009012:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	68da      	ldr	r2, [r3, #12]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009022:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2200      	movs	r2, #0
 8009028:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2220      	movs	r2, #32
 800902e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2220      	movs	r2, #32
 8009036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800903a:	2300      	movs	r3, #0
}
 800903c:	4618      	mov	r0, r3
 800903e:	3708      	adds	r7, #8
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b08a      	sub	sp, #40	; 0x28
 8009048:	af02      	add	r7, sp, #8
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	60b9      	str	r1, [r7, #8]
 800904e:	603b      	str	r3, [r7, #0]
 8009050:	4613      	mov	r3, r2
 8009052:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009054:	2300      	movs	r3, #0
 8009056:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800905e:	b2db      	uxtb	r3, r3
 8009060:	2b20      	cmp	r3, #32
 8009062:	d17c      	bne.n	800915e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d002      	beq.n	8009070 <HAL_UART_Transmit+0x2c>
 800906a:	88fb      	ldrh	r3, [r7, #6]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d101      	bne.n	8009074 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009070:	2301      	movs	r3, #1
 8009072:	e075      	b.n	8009160 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800907a:	2b01      	cmp	r3, #1
 800907c:	d101      	bne.n	8009082 <HAL_UART_Transmit+0x3e>
 800907e:	2302      	movs	r3, #2
 8009080:	e06e      	b.n	8009160 <HAL_UART_Transmit+0x11c>
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2201      	movs	r2, #1
 8009086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2200      	movs	r2, #0
 800908e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2221      	movs	r2, #33	; 0x21
 8009094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009098:	f7fa ffa8 	bl	8003fec <HAL_GetTick>
 800909c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	88fa      	ldrh	r2, [r7, #6]
 80090a2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	88fa      	ldrh	r2, [r7, #6]
 80090a8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	689b      	ldr	r3, [r3, #8]
 80090ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090b2:	d108      	bne.n	80090c6 <HAL_UART_Transmit+0x82>
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	691b      	ldr	r3, [r3, #16]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d104      	bne.n	80090c6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80090bc:	2300      	movs	r3, #0
 80090be:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	61bb      	str	r3, [r7, #24]
 80090c4:	e003      	b.n	80090ce <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80090ca:	2300      	movs	r3, #0
 80090cc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2200      	movs	r2, #0
 80090d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80090d6:	e02a      	b.n	800912e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	9300      	str	r3, [sp, #0]
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	2200      	movs	r2, #0
 80090e0:	2180      	movs	r1, #128	; 0x80
 80090e2:	68f8      	ldr	r0, [r7, #12]
 80090e4:	f000 fe2f 	bl	8009d46 <UART_WaitOnFlagUntilTimeout>
 80090e8:	4603      	mov	r3, r0
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d001      	beq.n	80090f2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80090ee:	2303      	movs	r3, #3
 80090f0:	e036      	b.n	8009160 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80090f2:	69fb      	ldr	r3, [r7, #28]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d10b      	bne.n	8009110 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80090f8:	69bb      	ldr	r3, [r7, #24]
 80090fa:	881b      	ldrh	r3, [r3, #0]
 80090fc:	461a      	mov	r2, r3
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009106:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009108:	69bb      	ldr	r3, [r7, #24]
 800910a:	3302      	adds	r3, #2
 800910c:	61bb      	str	r3, [r7, #24]
 800910e:	e007      	b.n	8009120 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009110:	69fb      	ldr	r3, [r7, #28]
 8009112:	781a      	ldrb	r2, [r3, #0]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800911a:	69fb      	ldr	r3, [r7, #28]
 800911c:	3301      	adds	r3, #1
 800911e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009124:	b29b      	uxth	r3, r3
 8009126:	3b01      	subs	r3, #1
 8009128:	b29a      	uxth	r2, r3
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009132:	b29b      	uxth	r3, r3
 8009134:	2b00      	cmp	r3, #0
 8009136:	d1cf      	bne.n	80090d8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	9300      	str	r3, [sp, #0]
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	2200      	movs	r2, #0
 8009140:	2140      	movs	r1, #64	; 0x40
 8009142:	68f8      	ldr	r0, [r7, #12]
 8009144:	f000 fdff 	bl	8009d46 <UART_WaitOnFlagUntilTimeout>
 8009148:	4603      	mov	r3, r0
 800914a:	2b00      	cmp	r3, #0
 800914c:	d001      	beq.n	8009152 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800914e:	2303      	movs	r3, #3
 8009150:	e006      	b.n	8009160 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2220      	movs	r2, #32
 8009156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800915a:	2300      	movs	r3, #0
 800915c:	e000      	b.n	8009160 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800915e:	2302      	movs	r3, #2
  }
}
 8009160:	4618      	mov	r0, r3
 8009162:	3720      	adds	r7, #32
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b08a      	sub	sp, #40	; 0x28
 800916c:	af02      	add	r7, sp, #8
 800916e:	60f8      	str	r0, [r7, #12]
 8009170:	60b9      	str	r1, [r7, #8]
 8009172:	603b      	str	r3, [r7, #0]
 8009174:	4613      	mov	r3, r2
 8009176:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009178:	2300      	movs	r3, #0
 800917a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009182:	b2db      	uxtb	r3, r3
 8009184:	2b20      	cmp	r3, #32
 8009186:	f040 808c 	bne.w	80092a2 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d002      	beq.n	8009196 <HAL_UART_Receive+0x2e>
 8009190:	88fb      	ldrh	r3, [r7, #6]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d101      	bne.n	800919a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8009196:	2301      	movs	r3, #1
 8009198:	e084      	b.n	80092a4 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d101      	bne.n	80091a8 <HAL_UART_Receive+0x40>
 80091a4:	2302      	movs	r3, #2
 80091a6:	e07d      	b.n	80092a4 <HAL_UART_Receive+0x13c>
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2201      	movs	r2, #1
 80091ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2200      	movs	r2, #0
 80091b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	2222      	movs	r2, #34	; 0x22
 80091ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	2200      	movs	r2, #0
 80091c2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80091c4:	f7fa ff12 	bl	8003fec <HAL_GetTick>
 80091c8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	88fa      	ldrh	r2, [r7, #6]
 80091ce:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	88fa      	ldrh	r2, [r7, #6]
 80091d4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	689b      	ldr	r3, [r3, #8]
 80091da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091de:	d108      	bne.n	80091f2 <HAL_UART_Receive+0x8a>
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	691b      	ldr	r3, [r3, #16]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d104      	bne.n	80091f2 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80091e8:	2300      	movs	r3, #0
 80091ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	61bb      	str	r3, [r7, #24]
 80091f0:	e003      	b.n	80091fa <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80091f6:	2300      	movs	r3, #0
 80091f8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2200      	movs	r2, #0
 80091fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8009202:	e043      	b.n	800928c <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	9300      	str	r3, [sp, #0]
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	2200      	movs	r2, #0
 800920c:	2120      	movs	r1, #32
 800920e:	68f8      	ldr	r0, [r7, #12]
 8009210:	f000 fd99 	bl	8009d46 <UART_WaitOnFlagUntilTimeout>
 8009214:	4603      	mov	r3, r0
 8009216:	2b00      	cmp	r3, #0
 8009218:	d001      	beq.n	800921e <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800921a:	2303      	movs	r3, #3
 800921c:	e042      	b.n	80092a4 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800921e:	69fb      	ldr	r3, [r7, #28]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d10c      	bne.n	800923e <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	b29b      	uxth	r3, r3
 800922c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009230:	b29a      	uxth	r2, r3
 8009232:	69bb      	ldr	r3, [r7, #24]
 8009234:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009236:	69bb      	ldr	r3, [r7, #24]
 8009238:	3302      	adds	r3, #2
 800923a:	61bb      	str	r3, [r7, #24]
 800923c:	e01f      	b.n	800927e <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	689b      	ldr	r3, [r3, #8]
 8009242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009246:	d007      	beq.n	8009258 <HAL_UART_Receive+0xf0>
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	689b      	ldr	r3, [r3, #8]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d10a      	bne.n	8009266 <HAL_UART_Receive+0xfe>
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	691b      	ldr	r3, [r3, #16]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d106      	bne.n	8009266 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	b2da      	uxtb	r2, r3
 8009260:	69fb      	ldr	r3, [r7, #28]
 8009262:	701a      	strb	r2, [r3, #0]
 8009264:	e008      	b.n	8009278 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	b2db      	uxtb	r3, r3
 800926e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009272:	b2da      	uxtb	r2, r3
 8009274:	69fb      	ldr	r3, [r7, #28]
 8009276:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8009278:	69fb      	ldr	r3, [r7, #28]
 800927a:	3301      	adds	r3, #1
 800927c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009282:	b29b      	uxth	r3, r3
 8009284:	3b01      	subs	r3, #1
 8009286:	b29a      	uxth	r2, r3
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009290:	b29b      	uxth	r3, r3
 8009292:	2b00      	cmp	r3, #0
 8009294:	d1b6      	bne.n	8009204 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2220      	movs	r2, #32
 800929a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800929e:	2300      	movs	r3, #0
 80092a0:	e000      	b.n	80092a4 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80092a2:	2302      	movs	r3, #2
  }
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3720      	adds	r7, #32
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b08c      	sub	sp, #48	; 0x30
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	60f8      	str	r0, [r7, #12]
 80092b4:	60b9      	str	r1, [r7, #8]
 80092b6:	4613      	mov	r3, r2
 80092b8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092c0:	b2db      	uxtb	r3, r3
 80092c2:	2b20      	cmp	r3, #32
 80092c4:	d165      	bne.n	8009392 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d002      	beq.n	80092d2 <HAL_UART_Transmit_DMA+0x26>
 80092cc:	88fb      	ldrh	r3, [r7, #6]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d101      	bne.n	80092d6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80092d2:	2301      	movs	r3, #1
 80092d4:	e05e      	b.n	8009394 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d101      	bne.n	80092e4 <HAL_UART_Transmit_DMA+0x38>
 80092e0:	2302      	movs	r3, #2
 80092e2:	e057      	b.n	8009394 <HAL_UART_Transmit_DMA+0xe8>
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2201      	movs	r2, #1
 80092e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80092ec:	68ba      	ldr	r2, [r7, #8]
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	88fa      	ldrh	r2, [r7, #6]
 80092f6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	88fa      	ldrh	r2, [r7, #6]
 80092fc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	2200      	movs	r2, #0
 8009302:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2221      	movs	r2, #33	; 0x21
 8009308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009310:	4a22      	ldr	r2, [pc, #136]	; (800939c <HAL_UART_Transmit_DMA+0xf0>)
 8009312:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009318:	4a21      	ldr	r2, [pc, #132]	; (80093a0 <HAL_UART_Transmit_DMA+0xf4>)
 800931a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009320:	4a20      	ldr	r2, [pc, #128]	; (80093a4 <HAL_UART_Transmit_DMA+0xf8>)
 8009322:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009328:	2200      	movs	r2, #0
 800932a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800932c:	f107 0308 	add.w	r3, r7, #8
 8009330:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009338:	6819      	ldr	r1, [r3, #0]
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	3304      	adds	r3, #4
 8009340:	461a      	mov	r2, r3
 8009342:	88fb      	ldrh	r3, [r7, #6]
 8009344:	f7fb f926 	bl	8004594 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009350:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2200      	movs	r2, #0
 8009356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	3314      	adds	r3, #20
 8009360:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009362:	69bb      	ldr	r3, [r7, #24]
 8009364:	e853 3f00 	ldrex	r3, [r3]
 8009368:	617b      	str	r3, [r7, #20]
   return(result);
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009370:	62bb      	str	r3, [r7, #40]	; 0x28
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	3314      	adds	r3, #20
 8009378:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800937a:	627a      	str	r2, [r7, #36]	; 0x24
 800937c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800937e:	6a39      	ldr	r1, [r7, #32]
 8009380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009382:	e841 2300 	strex	r3, r2, [r1]
 8009386:	61fb      	str	r3, [r7, #28]
   return(result);
 8009388:	69fb      	ldr	r3, [r7, #28]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d1e5      	bne.n	800935a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800938e:	2300      	movs	r3, #0
 8009390:	e000      	b.n	8009394 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8009392:	2302      	movs	r3, #2
  }
}
 8009394:	4618      	mov	r0, r3
 8009396:	3730      	adds	r7, #48	; 0x30
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}
 800939c:	08009aa1 	.word	0x08009aa1
 80093a0:	08009b3b 	.word	0x08009b3b
 80093a4:	08009cb3 	.word	0x08009cb3

080093a8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b084      	sub	sp, #16
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	60f8      	str	r0, [r7, #12]
 80093b0:	60b9      	str	r1, [r7, #8]
 80093b2:	4613      	mov	r3, r2
 80093b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80093bc:	b2db      	uxtb	r3, r3
 80093be:	2b20      	cmp	r3, #32
 80093c0:	d11d      	bne.n	80093fe <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d002      	beq.n	80093ce <HAL_UART_Receive_DMA+0x26>
 80093c8:	88fb      	ldrh	r3, [r7, #6]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d101      	bne.n	80093d2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80093ce:	2301      	movs	r3, #1
 80093d0:	e016      	b.n	8009400 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d101      	bne.n	80093e0 <HAL_UART_Receive_DMA+0x38>
 80093dc:	2302      	movs	r3, #2
 80093de:	e00f      	b.n	8009400 <HAL_UART_Receive_DMA+0x58>
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2201      	movs	r2, #1
 80093e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2200      	movs	r2, #0
 80093ec:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80093ee:	88fb      	ldrh	r3, [r7, #6]
 80093f0:	461a      	mov	r2, r3
 80093f2:	68b9      	ldr	r1, [r7, #8]
 80093f4:	68f8      	ldr	r0, [r7, #12]
 80093f6:	f000 fd15 	bl	8009e24 <UART_Start_Receive_DMA>
 80093fa:	4603      	mov	r3, r0
 80093fc:	e000      	b.n	8009400 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80093fe:	2302      	movs	r3, #2
  }
}
 8009400:	4618      	mov	r0, r3
 8009402:	3710      	adds	r7, #16
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b090      	sub	sp, #64	; 0x40
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009410:	2300      	movs	r3, #0
 8009412:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	695b      	ldr	r3, [r3, #20]
 800941a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800941e:	2b80      	cmp	r3, #128	; 0x80
 8009420:	bf0c      	ite	eq
 8009422:	2301      	moveq	r3, #1
 8009424:	2300      	movne	r3, #0
 8009426:	b2db      	uxtb	r3, r3
 8009428:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009430:	b2db      	uxtb	r3, r3
 8009432:	2b21      	cmp	r3, #33	; 0x21
 8009434:	d128      	bne.n	8009488 <HAL_UART_DMAStop+0x80>
 8009436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009438:	2b00      	cmp	r3, #0
 800943a:	d025      	beq.n	8009488 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	3314      	adds	r3, #20
 8009442:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009446:	e853 3f00 	ldrex	r3, [r3]
 800944a:	623b      	str	r3, [r7, #32]
   return(result);
 800944c:	6a3b      	ldr	r3, [r7, #32]
 800944e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009452:	63bb      	str	r3, [r7, #56]	; 0x38
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	3314      	adds	r3, #20
 800945a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800945c:	633a      	str	r2, [r7, #48]	; 0x30
 800945e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009460:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009462:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009464:	e841 2300 	strex	r3, r2, [r1]
 8009468:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800946a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800946c:	2b00      	cmp	r3, #0
 800946e:	d1e5      	bne.n	800943c <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009474:	2b00      	cmp	r3, #0
 8009476:	d004      	beq.n	8009482 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800947c:	4618      	mov	r0, r3
 800947e:	f7fb f8e1 	bl	8004644 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 fd6c 	bl	8009f60 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	695b      	ldr	r3, [r3, #20]
 800948e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009492:	2b40      	cmp	r3, #64	; 0x40
 8009494:	bf0c      	ite	eq
 8009496:	2301      	moveq	r3, #1
 8009498:	2300      	movne	r3, #0
 800949a:	b2db      	uxtb	r3, r3
 800949c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80094a4:	b2db      	uxtb	r3, r3
 80094a6:	2b22      	cmp	r3, #34	; 0x22
 80094a8:	d128      	bne.n	80094fc <HAL_UART_DMAStop+0xf4>
 80094aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d025      	beq.n	80094fc <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	3314      	adds	r3, #20
 80094b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	e853 3f00 	ldrex	r3, [r3]
 80094be:	60fb      	str	r3, [r7, #12]
   return(result);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094c6:	637b      	str	r3, [r7, #52]	; 0x34
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	3314      	adds	r3, #20
 80094ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094d0:	61fa      	str	r2, [r7, #28]
 80094d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d4:	69b9      	ldr	r1, [r7, #24]
 80094d6:	69fa      	ldr	r2, [r7, #28]
 80094d8:	e841 2300 	strex	r3, r2, [r1]
 80094dc:	617b      	str	r3, [r7, #20]
   return(result);
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d1e5      	bne.n	80094b0 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d004      	beq.n	80094f6 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f0:	4618      	mov	r0, r3
 80094f2:	f7fb f8a7 	bl	8004644 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 fd5a 	bl	8009fb0 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80094fc:	2300      	movs	r3, #0
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3740      	adds	r7, #64	; 0x40
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
	...

08009508 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b0ba      	sub	sp, #232	; 0xe8
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	68db      	ldr	r3, [r3, #12]
 8009520:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	695b      	ldr	r3, [r3, #20]
 800952a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800952e:	2300      	movs	r3, #0
 8009530:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009534:	2300      	movs	r3, #0
 8009536:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800953a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800953e:	f003 030f 	and.w	r3, r3, #15
 8009542:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009546:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800954a:	2b00      	cmp	r3, #0
 800954c:	d10f      	bne.n	800956e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800954e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009552:	f003 0320 	and.w	r3, r3, #32
 8009556:	2b00      	cmp	r3, #0
 8009558:	d009      	beq.n	800956e <HAL_UART_IRQHandler+0x66>
 800955a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800955e:	f003 0320 	and.w	r3, r3, #32
 8009562:	2b00      	cmp	r3, #0
 8009564:	d003      	beq.n	800956e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 fe01 	bl	800a16e <UART_Receive_IT>
      return;
 800956c:	e256      	b.n	8009a1c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800956e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009572:	2b00      	cmp	r3, #0
 8009574:	f000 80de 	beq.w	8009734 <HAL_UART_IRQHandler+0x22c>
 8009578:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800957c:	f003 0301 	and.w	r3, r3, #1
 8009580:	2b00      	cmp	r3, #0
 8009582:	d106      	bne.n	8009592 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009588:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800958c:	2b00      	cmp	r3, #0
 800958e:	f000 80d1 	beq.w	8009734 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009596:	f003 0301 	and.w	r3, r3, #1
 800959a:	2b00      	cmp	r3, #0
 800959c:	d00b      	beq.n	80095b6 <HAL_UART_IRQHandler+0xae>
 800959e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d005      	beq.n	80095b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ae:	f043 0201 	orr.w	r2, r3, #1
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80095b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095ba:	f003 0304 	and.w	r3, r3, #4
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d00b      	beq.n	80095da <HAL_UART_IRQHandler+0xd2>
 80095c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095c6:	f003 0301 	and.w	r3, r3, #1
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d005      	beq.n	80095da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095d2:	f043 0202 	orr.w	r2, r3, #2
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80095da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095de:	f003 0302 	and.w	r3, r3, #2
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d00b      	beq.n	80095fe <HAL_UART_IRQHandler+0xf6>
 80095e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095ea:	f003 0301 	and.w	r3, r3, #1
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d005      	beq.n	80095fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f6:	f043 0204 	orr.w	r2, r3, #4
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80095fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009602:	f003 0308 	and.w	r3, r3, #8
 8009606:	2b00      	cmp	r3, #0
 8009608:	d011      	beq.n	800962e <HAL_UART_IRQHandler+0x126>
 800960a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800960e:	f003 0320 	and.w	r3, r3, #32
 8009612:	2b00      	cmp	r3, #0
 8009614:	d105      	bne.n	8009622 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009616:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800961a:	f003 0301 	and.w	r3, r3, #1
 800961e:	2b00      	cmp	r3, #0
 8009620:	d005      	beq.n	800962e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009626:	f043 0208 	orr.w	r2, r3, #8
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009632:	2b00      	cmp	r3, #0
 8009634:	f000 81ed 	beq.w	8009a12 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800963c:	f003 0320 	and.w	r3, r3, #32
 8009640:	2b00      	cmp	r3, #0
 8009642:	d008      	beq.n	8009656 <HAL_UART_IRQHandler+0x14e>
 8009644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009648:	f003 0320 	and.w	r3, r3, #32
 800964c:	2b00      	cmp	r3, #0
 800964e:	d002      	beq.n	8009656 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f000 fd8c 	bl	800a16e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	695b      	ldr	r3, [r3, #20]
 800965c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009660:	2b40      	cmp	r3, #64	; 0x40
 8009662:	bf0c      	ite	eq
 8009664:	2301      	moveq	r3, #1
 8009666:	2300      	movne	r3, #0
 8009668:	b2db      	uxtb	r3, r3
 800966a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009672:	f003 0308 	and.w	r3, r3, #8
 8009676:	2b00      	cmp	r3, #0
 8009678:	d103      	bne.n	8009682 <HAL_UART_IRQHandler+0x17a>
 800967a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800967e:	2b00      	cmp	r3, #0
 8009680:	d04f      	beq.n	8009722 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f000 fc94 	bl	8009fb0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	695b      	ldr	r3, [r3, #20]
 800968e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009692:	2b40      	cmp	r3, #64	; 0x40
 8009694:	d141      	bne.n	800971a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	3314      	adds	r3, #20
 800969c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80096a4:	e853 3f00 	ldrex	r3, [r3]
 80096a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80096ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80096b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	3314      	adds	r3, #20
 80096be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80096c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80096c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80096ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80096d2:	e841 2300 	strex	r3, r2, [r1]
 80096d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80096da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d1d9      	bne.n	8009696 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d013      	beq.n	8009712 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ee:	4a7d      	ldr	r2, [pc, #500]	; (80098e4 <HAL_UART_IRQHandler+0x3dc>)
 80096f0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096f6:	4618      	mov	r0, r3
 80096f8:	f7fb f814 	bl	8004724 <HAL_DMA_Abort_IT>
 80096fc:	4603      	mov	r3, r0
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d016      	beq.n	8009730 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009708:	687a      	ldr	r2, [r7, #4]
 800970a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800970c:	4610      	mov	r0, r2
 800970e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009710:	e00e      	b.n	8009730 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 f9ae 	bl	8009a74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009718:	e00a      	b.n	8009730 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f000 f9aa 	bl	8009a74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009720:	e006      	b.n	8009730 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f000 f9a6 	bl	8009a74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2200      	movs	r2, #0
 800972c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800972e:	e170      	b.n	8009a12 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009730:	bf00      	nop
    return;
 8009732:	e16e      	b.n	8009a12 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009738:	2b01      	cmp	r3, #1
 800973a:	f040 814a 	bne.w	80099d2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800973e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009742:	f003 0310 	and.w	r3, r3, #16
 8009746:	2b00      	cmp	r3, #0
 8009748:	f000 8143 	beq.w	80099d2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800974c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009750:	f003 0310 	and.w	r3, r3, #16
 8009754:	2b00      	cmp	r3, #0
 8009756:	f000 813c 	beq.w	80099d2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800975a:	2300      	movs	r3, #0
 800975c:	60bb      	str	r3, [r7, #8]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	60bb      	str	r3, [r7, #8]
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	60bb      	str	r3, [r7, #8]
 800976e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	695b      	ldr	r3, [r3, #20]
 8009776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800977a:	2b40      	cmp	r3, #64	; 0x40
 800977c:	f040 80b4 	bne.w	80098e8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800978c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009790:	2b00      	cmp	r3, #0
 8009792:	f000 8140 	beq.w	8009a16 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800979a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800979e:	429a      	cmp	r2, r3
 80097a0:	f080 8139 	bcs.w	8009a16 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80097aa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097b0:	69db      	ldr	r3, [r3, #28]
 80097b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097b6:	f000 8088 	beq.w	80098ca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	330c      	adds	r3, #12
 80097c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80097c8:	e853 3f00 	ldrex	r3, [r3]
 80097cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80097d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80097d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	330c      	adds	r3, #12
 80097e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80097e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80097ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80097f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80097f6:	e841 2300 	strex	r3, r2, [r1]
 80097fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80097fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009802:	2b00      	cmp	r3, #0
 8009804:	d1d9      	bne.n	80097ba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	3314      	adds	r3, #20
 800980c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800980e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009810:	e853 3f00 	ldrex	r3, [r3]
 8009814:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009816:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009818:	f023 0301 	bic.w	r3, r3, #1
 800981c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	3314      	adds	r3, #20
 8009826:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800982a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800982e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009830:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009832:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009836:	e841 2300 	strex	r3, r2, [r1]
 800983a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800983c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800983e:	2b00      	cmp	r3, #0
 8009840:	d1e1      	bne.n	8009806 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	3314      	adds	r3, #20
 8009848:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800984a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800984c:	e853 3f00 	ldrex	r3, [r3]
 8009850:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009852:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009854:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009858:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	3314      	adds	r3, #20
 8009862:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009866:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009868:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800986a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800986c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800986e:	e841 2300 	strex	r3, r2, [r1]
 8009872:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009874:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009876:	2b00      	cmp	r3, #0
 8009878:	d1e3      	bne.n	8009842 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2220      	movs	r2, #32
 800987e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2200      	movs	r2, #0
 8009886:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	330c      	adds	r3, #12
 800988e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009892:	e853 3f00 	ldrex	r3, [r3]
 8009896:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009898:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800989a:	f023 0310 	bic.w	r3, r3, #16
 800989e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	330c      	adds	r3, #12
 80098a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80098ac:	65ba      	str	r2, [r7, #88]	; 0x58
 80098ae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80098b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80098b4:	e841 2300 	strex	r3, r2, [r1]
 80098b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80098ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d1e3      	bne.n	8009888 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098c4:	4618      	mov	r0, r3
 80098c6:	f7fa febd 	bl	8004644 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	1ad3      	subs	r3, r2, r3
 80098d6:	b29b      	uxth	r3, r3
 80098d8:	4619      	mov	r1, r3
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f000 f8d4 	bl	8009a88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80098e0:	e099      	b.n	8009a16 <HAL_UART_IRQHandler+0x50e>
 80098e2:	bf00      	nop
 80098e4:	0800a077 	.word	0x0800a077
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80098f0:	b29b      	uxth	r3, r3
 80098f2:	1ad3      	subs	r3, r2, r3
 80098f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80098fc:	b29b      	uxth	r3, r3
 80098fe:	2b00      	cmp	r3, #0
 8009900:	f000 808b 	beq.w	8009a1a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009904:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009908:	2b00      	cmp	r3, #0
 800990a:	f000 8086 	beq.w	8009a1a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	330c      	adds	r3, #12
 8009914:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009918:	e853 3f00 	ldrex	r3, [r3]
 800991c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800991e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009920:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009924:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	330c      	adds	r3, #12
 800992e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009932:	647a      	str	r2, [r7, #68]	; 0x44
 8009934:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009936:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009938:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800993a:	e841 2300 	strex	r3, r2, [r1]
 800993e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009942:	2b00      	cmp	r3, #0
 8009944:	d1e3      	bne.n	800990e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	3314      	adds	r3, #20
 800994c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800994e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009950:	e853 3f00 	ldrex	r3, [r3]
 8009954:	623b      	str	r3, [r7, #32]
   return(result);
 8009956:	6a3b      	ldr	r3, [r7, #32]
 8009958:	f023 0301 	bic.w	r3, r3, #1
 800995c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	3314      	adds	r3, #20
 8009966:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800996a:	633a      	str	r2, [r7, #48]	; 0x30
 800996c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800996e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009970:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009972:	e841 2300 	strex	r3, r2, [r1]
 8009976:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800997a:	2b00      	cmp	r3, #0
 800997c:	d1e3      	bne.n	8009946 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2220      	movs	r2, #32
 8009982:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2200      	movs	r2, #0
 800998a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	330c      	adds	r3, #12
 8009992:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	e853 3f00 	ldrex	r3, [r3]
 800999a:	60fb      	str	r3, [r7, #12]
   return(result);
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	f023 0310 	bic.w	r3, r3, #16
 80099a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	330c      	adds	r3, #12
 80099ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80099b0:	61fa      	str	r2, [r7, #28]
 80099b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099b4:	69b9      	ldr	r1, [r7, #24]
 80099b6:	69fa      	ldr	r2, [r7, #28]
 80099b8:	e841 2300 	strex	r3, r2, [r1]
 80099bc:	617b      	str	r3, [r7, #20]
   return(result);
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d1e3      	bne.n	800998c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80099c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80099c8:	4619      	mov	r1, r3
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f000 f85c 	bl	8009a88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80099d0:	e023      	b.n	8009a1a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80099d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d009      	beq.n	80099f2 <HAL_UART_IRQHandler+0x4ea>
 80099de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d003      	beq.n	80099f2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f000 fb57 	bl	800a09e <UART_Transmit_IT>
    return;
 80099f0:	e014      	b.n	8009a1c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80099f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d00e      	beq.n	8009a1c <HAL_UART_IRQHandler+0x514>
 80099fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d008      	beq.n	8009a1c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f000 fb97 	bl	800a13e <UART_EndTransmit_IT>
    return;
 8009a10:	e004      	b.n	8009a1c <HAL_UART_IRQHandler+0x514>
    return;
 8009a12:	bf00      	nop
 8009a14:	e002      	b.n	8009a1c <HAL_UART_IRQHandler+0x514>
      return;
 8009a16:	bf00      	nop
 8009a18:	e000      	b.n	8009a1c <HAL_UART_IRQHandler+0x514>
      return;
 8009a1a:	bf00      	nop
  }
}
 8009a1c:	37e8      	adds	r7, #232	; 0xe8
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}
 8009a22:	bf00      	nop

08009a24 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b083      	sub	sp, #12
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009a2c:	bf00      	nop
 8009a2e:	370c      	adds	r7, #12
 8009a30:	46bd      	mov	sp, r7
 8009a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a36:	4770      	bx	lr

08009a38 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b083      	sub	sp, #12
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009a40:	bf00      	nop
 8009a42:	370c      	adds	r7, #12
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr

08009a4c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b083      	sub	sp, #12
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009a54:	bf00      	nop
 8009a56:	370c      	adds	r7, #12
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr

08009a60 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b083      	sub	sp, #12
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009a68:	bf00      	nop
 8009a6a:	370c      	adds	r7, #12
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr

08009a74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b083      	sub	sp, #12
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009a7c:	bf00      	nop
 8009a7e:	370c      	adds	r7, #12
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr

08009a88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	460b      	mov	r3, r1
 8009a92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009a94:	bf00      	nop
 8009a96:	370c      	adds	r7, #12
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr

08009aa0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b090      	sub	sp, #64	; 0x40
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aac:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d137      	bne.n	8009b2c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009abe:	2200      	movs	r2, #0
 8009ac0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	3314      	adds	r3, #20
 8009ac8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009acc:	e853 3f00 	ldrex	r3, [r3]
 8009ad0:	623b      	str	r3, [r7, #32]
   return(result);
 8009ad2:	6a3b      	ldr	r3, [r7, #32]
 8009ad4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ad8:	63bb      	str	r3, [r7, #56]	; 0x38
 8009ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	3314      	adds	r3, #20
 8009ae0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ae2:	633a      	str	r2, [r7, #48]	; 0x30
 8009ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ae6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009aea:	e841 2300 	strex	r3, r2, [r1]
 8009aee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d1e5      	bne.n	8009ac2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	330c      	adds	r3, #12
 8009afc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	e853 3f00 	ldrex	r3, [r3]
 8009b04:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b0c:	637b      	str	r3, [r7, #52]	; 0x34
 8009b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	330c      	adds	r3, #12
 8009b14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b16:	61fa      	str	r2, [r7, #28]
 8009b18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b1a:	69b9      	ldr	r1, [r7, #24]
 8009b1c:	69fa      	ldr	r2, [r7, #28]
 8009b1e:	e841 2300 	strex	r3, r2, [r1]
 8009b22:	617b      	str	r3, [r7, #20]
   return(result);
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d1e5      	bne.n	8009af6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009b2a:	e002      	b.n	8009b32 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009b2c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009b2e:	f7ff ff79 	bl	8009a24 <HAL_UART_TxCpltCallback>
}
 8009b32:	bf00      	nop
 8009b34:	3740      	adds	r7, #64	; 0x40
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}

08009b3a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009b3a:	b580      	push	{r7, lr}
 8009b3c:	b084      	sub	sp, #16
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b46:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009b48:	68f8      	ldr	r0, [r7, #12]
 8009b4a:	f7ff ff75 	bl	8009a38 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b4e:	bf00      	nop
 8009b50:	3710      	adds	r7, #16
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}

08009b56 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009b56:	b580      	push	{r7, lr}
 8009b58:	b09c      	sub	sp, #112	; 0x70
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b62:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d172      	bne.n	8009c58 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009b72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b74:	2200      	movs	r2, #0
 8009b76:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	330c      	adds	r3, #12
 8009b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b82:	e853 3f00 	ldrex	r3, [r3]
 8009b86:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009b88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	330c      	adds	r3, #12
 8009b96:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009b98:	65ba      	str	r2, [r7, #88]	; 0x58
 8009b9a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009b9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009ba0:	e841 2300 	strex	r3, r2, [r1]
 8009ba4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009ba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d1e5      	bne.n	8009b78 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	3314      	adds	r3, #20
 8009bb2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb6:	e853 3f00 	ldrex	r3, [r3]
 8009bba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bbe:	f023 0301 	bic.w	r3, r3, #1
 8009bc2:	667b      	str	r3, [r7, #100]	; 0x64
 8009bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	3314      	adds	r3, #20
 8009bca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009bcc:	647a      	str	r2, [r7, #68]	; 0x44
 8009bce:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bd0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009bd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009bd4:	e841 2300 	strex	r3, r2, [r1]
 8009bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d1e5      	bne.n	8009bac <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009be0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	3314      	adds	r3, #20
 8009be6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bea:	e853 3f00 	ldrex	r3, [r3]
 8009bee:	623b      	str	r3, [r7, #32]
   return(result);
 8009bf0:	6a3b      	ldr	r3, [r7, #32]
 8009bf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bf6:	663b      	str	r3, [r7, #96]	; 0x60
 8009bf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	3314      	adds	r3, #20
 8009bfe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009c00:	633a      	str	r2, [r7, #48]	; 0x30
 8009c02:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c08:	e841 2300 	strex	r3, r2, [r1]
 8009c0c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d1e5      	bne.n	8009be0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009c14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c16:	2220      	movs	r2, #32
 8009c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c20:	2b01      	cmp	r3, #1
 8009c22:	d119      	bne.n	8009c58 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	330c      	adds	r3, #12
 8009c2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	e853 3f00 	ldrex	r3, [r3]
 8009c32:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	f023 0310 	bic.w	r3, r3, #16
 8009c3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	330c      	adds	r3, #12
 8009c42:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009c44:	61fa      	str	r2, [r7, #28]
 8009c46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c48:	69b9      	ldr	r1, [r7, #24]
 8009c4a:	69fa      	ldr	r2, [r7, #28]
 8009c4c:	e841 2300 	strex	r3, r2, [r1]
 8009c50:	617b      	str	r3, [r7, #20]
   return(result);
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d1e5      	bne.n	8009c24 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c5c:	2b01      	cmp	r3, #1
 8009c5e:	d106      	bne.n	8009c6e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c62:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009c64:	4619      	mov	r1, r3
 8009c66:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009c68:	f7ff ff0e 	bl	8009a88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009c6c:	e002      	b.n	8009c74 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8009c6e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009c70:	f7ff feec 	bl	8009a4c <HAL_UART_RxCpltCallback>
}
 8009c74:	bf00      	nop
 8009c76:	3770      	adds	r7, #112	; 0x70
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b084      	sub	sp, #16
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c88:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c8e:	2b01      	cmp	r3, #1
 8009c90:	d108      	bne.n	8009ca4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009c96:	085b      	lsrs	r3, r3, #1
 8009c98:	b29b      	uxth	r3, r3
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	68f8      	ldr	r0, [r7, #12]
 8009c9e:	f7ff fef3 	bl	8009a88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009ca2:	e002      	b.n	8009caa <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009ca4:	68f8      	ldr	r0, [r7, #12]
 8009ca6:	f7ff fedb 	bl	8009a60 <HAL_UART_RxHalfCpltCallback>
}
 8009caa:	bf00      	nop
 8009cac:	3710      	adds	r7, #16
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}

08009cb2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009cb2:	b580      	push	{r7, lr}
 8009cb4:	b084      	sub	sp, #16
 8009cb6:	af00      	add	r7, sp, #0
 8009cb8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cc2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	695b      	ldr	r3, [r3, #20]
 8009cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cce:	2b80      	cmp	r3, #128	; 0x80
 8009cd0:	bf0c      	ite	eq
 8009cd2:	2301      	moveq	r3, #1
 8009cd4:	2300      	movne	r3, #0
 8009cd6:	b2db      	uxtb	r3, r3
 8009cd8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ce0:	b2db      	uxtb	r3, r3
 8009ce2:	2b21      	cmp	r3, #33	; 0x21
 8009ce4:	d108      	bne.n	8009cf8 <UART_DMAError+0x46>
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d005      	beq.n	8009cf8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009cf2:	68b8      	ldr	r0, [r7, #8]
 8009cf4:	f000 f934 	bl	8009f60 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	695b      	ldr	r3, [r3, #20]
 8009cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d02:	2b40      	cmp	r3, #64	; 0x40
 8009d04:	bf0c      	ite	eq
 8009d06:	2301      	moveq	r3, #1
 8009d08:	2300      	movne	r3, #0
 8009d0a:	b2db      	uxtb	r3, r3
 8009d0c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	2b22      	cmp	r3, #34	; 0x22
 8009d18:	d108      	bne.n	8009d2c <UART_DMAError+0x7a>
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d005      	beq.n	8009d2c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	2200      	movs	r2, #0
 8009d24:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009d26:	68b8      	ldr	r0, [r7, #8]
 8009d28:	f000 f942 	bl	8009fb0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d30:	f043 0210 	orr.w	r2, r3, #16
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009d38:	68b8      	ldr	r0, [r7, #8]
 8009d3a:	f7ff fe9b 	bl	8009a74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d3e:	bf00      	nop
 8009d40:	3710      	adds	r7, #16
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}

08009d46 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009d46:	b580      	push	{r7, lr}
 8009d48:	b090      	sub	sp, #64	; 0x40
 8009d4a:	af00      	add	r7, sp, #0
 8009d4c:	60f8      	str	r0, [r7, #12]
 8009d4e:	60b9      	str	r1, [r7, #8]
 8009d50:	603b      	str	r3, [r7, #0]
 8009d52:	4613      	mov	r3, r2
 8009d54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d56:	e050      	b.n	8009dfa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d5e:	d04c      	beq.n	8009dfa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009d60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d007      	beq.n	8009d76 <UART_WaitOnFlagUntilTimeout+0x30>
 8009d66:	f7fa f941 	bl	8003fec <HAL_GetTick>
 8009d6a:	4602      	mov	r2, r0
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	1ad3      	subs	r3, r2, r3
 8009d70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d241      	bcs.n	8009dfa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	330c      	adds	r3, #12
 8009d7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d80:	e853 3f00 	ldrex	r3, [r3]
 8009d84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	330c      	adds	r3, #12
 8009d94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009d96:	637a      	str	r2, [r7, #52]	; 0x34
 8009d98:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009d9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d9e:	e841 2300 	strex	r3, r2, [r1]
 8009da2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d1e5      	bne.n	8009d76 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	3314      	adds	r3, #20
 8009db0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	e853 3f00 	ldrex	r3, [r3]
 8009db8:	613b      	str	r3, [r7, #16]
   return(result);
 8009dba:	693b      	ldr	r3, [r7, #16]
 8009dbc:	f023 0301 	bic.w	r3, r3, #1
 8009dc0:	63bb      	str	r3, [r7, #56]	; 0x38
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	3314      	adds	r3, #20
 8009dc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009dca:	623a      	str	r2, [r7, #32]
 8009dcc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dce:	69f9      	ldr	r1, [r7, #28]
 8009dd0:	6a3a      	ldr	r2, [r7, #32]
 8009dd2:	e841 2300 	strex	r3, r2, [r1]
 8009dd6:	61bb      	str	r3, [r7, #24]
   return(result);
 8009dd8:	69bb      	ldr	r3, [r7, #24]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d1e5      	bne.n	8009daa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	2220      	movs	r2, #32
 8009de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2220      	movs	r2, #32
 8009dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2200      	movs	r2, #0
 8009df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009df6:	2303      	movs	r3, #3
 8009df8:	e00f      	b.n	8009e1a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	681a      	ldr	r2, [r3, #0]
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	4013      	ands	r3, r2
 8009e04:	68ba      	ldr	r2, [r7, #8]
 8009e06:	429a      	cmp	r2, r3
 8009e08:	bf0c      	ite	eq
 8009e0a:	2301      	moveq	r3, #1
 8009e0c:	2300      	movne	r3, #0
 8009e0e:	b2db      	uxtb	r3, r3
 8009e10:	461a      	mov	r2, r3
 8009e12:	79fb      	ldrb	r3, [r7, #7]
 8009e14:	429a      	cmp	r2, r3
 8009e16:	d09f      	beq.n	8009d58 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009e18:	2300      	movs	r3, #0
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3740      	adds	r7, #64	; 0x40
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}
	...

08009e24 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b098      	sub	sp, #96	; 0x60
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	60f8      	str	r0, [r7, #12]
 8009e2c:	60b9      	str	r1, [r7, #8]
 8009e2e:	4613      	mov	r3, r2
 8009e30:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009e32:	68ba      	ldr	r2, [r7, #8]
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	88fa      	ldrh	r2, [r7, #6]
 8009e3c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2200      	movs	r2, #0
 8009e42:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2222      	movs	r2, #34	; 0x22
 8009e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e50:	4a40      	ldr	r2, [pc, #256]	; (8009f54 <UART_Start_Receive_DMA+0x130>)
 8009e52:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e58:	4a3f      	ldr	r2, [pc, #252]	; (8009f58 <UART_Start_Receive_DMA+0x134>)
 8009e5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e60:	4a3e      	ldr	r2, [pc, #248]	; (8009f5c <UART_Start_Receive_DMA+0x138>)
 8009e62:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e68:	2200      	movs	r2, #0
 8009e6a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009e6c:	f107 0308 	add.w	r3, r7, #8
 8009e70:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	3304      	adds	r3, #4
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e80:	681a      	ldr	r2, [r3, #0]
 8009e82:	88fb      	ldrh	r3, [r7, #6]
 8009e84:	f7fa fb86 	bl	8004594 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009e88:	2300      	movs	r3, #0
 8009e8a:	613b      	str	r3, [r7, #16]
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	613b      	str	r3, [r7, #16]
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	685b      	ldr	r3, [r3, #4]
 8009e9a:	613b      	str	r3, [r7, #16]
 8009e9c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	691b      	ldr	r3, [r3, #16]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d019      	beq.n	8009ee2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	330c      	adds	r3, #12
 8009eb4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009eb8:	e853 3f00 	ldrex	r3, [r3]
 8009ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ec4:	65bb      	str	r3, [r7, #88]	; 0x58
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	330c      	adds	r3, #12
 8009ecc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009ece:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009ed0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009ed4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009ed6:	e841 2300 	strex	r3, r2, [r1]
 8009eda:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009edc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d1e5      	bne.n	8009eae <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	3314      	adds	r3, #20
 8009ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eec:	e853 3f00 	ldrex	r3, [r3]
 8009ef0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ef4:	f043 0301 	orr.w	r3, r3, #1
 8009ef8:	657b      	str	r3, [r7, #84]	; 0x54
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	3314      	adds	r3, #20
 8009f00:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009f02:	63ba      	str	r2, [r7, #56]	; 0x38
 8009f04:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f06:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009f08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f0a:	e841 2300 	strex	r3, r2, [r1]
 8009f0e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d1e5      	bne.n	8009ee2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	3314      	adds	r3, #20
 8009f1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f1e:	69bb      	ldr	r3, [r7, #24]
 8009f20:	e853 3f00 	ldrex	r3, [r3]
 8009f24:	617b      	str	r3, [r7, #20]
   return(result);
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f2c:	653b      	str	r3, [r7, #80]	; 0x50
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	3314      	adds	r3, #20
 8009f34:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009f36:	627a      	str	r2, [r7, #36]	; 0x24
 8009f38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f3a:	6a39      	ldr	r1, [r7, #32]
 8009f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f3e:	e841 2300 	strex	r3, r2, [r1]
 8009f42:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f44:	69fb      	ldr	r3, [r7, #28]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d1e5      	bne.n	8009f16 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8009f4a:	2300      	movs	r3, #0
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3760      	adds	r7, #96	; 0x60
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}
 8009f54:	08009b57 	.word	0x08009b57
 8009f58:	08009c7d 	.word	0x08009c7d
 8009f5c:	08009cb3 	.word	0x08009cb3

08009f60 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b089      	sub	sp, #36	; 0x24
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	330c      	adds	r3, #12
 8009f6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	e853 3f00 	ldrex	r3, [r3]
 8009f76:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009f7e:	61fb      	str	r3, [r7, #28]
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	330c      	adds	r3, #12
 8009f86:	69fa      	ldr	r2, [r7, #28]
 8009f88:	61ba      	str	r2, [r7, #24]
 8009f8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f8c:	6979      	ldr	r1, [r7, #20]
 8009f8e:	69ba      	ldr	r2, [r7, #24]
 8009f90:	e841 2300 	strex	r3, r2, [r1]
 8009f94:	613b      	str	r3, [r7, #16]
   return(result);
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d1e5      	bne.n	8009f68 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2220      	movs	r2, #32
 8009fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009fa4:	bf00      	nop
 8009fa6:	3724      	adds	r7, #36	; 0x24
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fae:	4770      	bx	lr

08009fb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b095      	sub	sp, #84	; 0x54
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	330c      	adds	r3, #12
 8009fbe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fc2:	e853 3f00 	ldrex	r3, [r3]
 8009fc6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009fce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	330c      	adds	r3, #12
 8009fd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009fd8:	643a      	str	r2, [r7, #64]	; 0x40
 8009fda:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fdc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009fde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009fe0:	e841 2300 	strex	r3, r2, [r1]
 8009fe4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d1e5      	bne.n	8009fb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	3314      	adds	r3, #20
 8009ff2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ff4:	6a3b      	ldr	r3, [r7, #32]
 8009ff6:	e853 3f00 	ldrex	r3, [r3]
 8009ffa:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ffc:	69fb      	ldr	r3, [r7, #28]
 8009ffe:	f023 0301 	bic.w	r3, r3, #1
 800a002:	64bb      	str	r3, [r7, #72]	; 0x48
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	3314      	adds	r3, #20
 800a00a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a00c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a00e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a010:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a012:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a014:	e841 2300 	strex	r3, r2, [r1]
 800a018:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d1e5      	bne.n	8009fec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a024:	2b01      	cmp	r3, #1
 800a026:	d119      	bne.n	800a05c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	330c      	adds	r3, #12
 800a02e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	e853 3f00 	ldrex	r3, [r3]
 800a036:	60bb      	str	r3, [r7, #8]
   return(result);
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	f023 0310 	bic.w	r3, r3, #16
 800a03e:	647b      	str	r3, [r7, #68]	; 0x44
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	330c      	adds	r3, #12
 800a046:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a048:	61ba      	str	r2, [r7, #24]
 800a04a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a04c:	6979      	ldr	r1, [r7, #20]
 800a04e:	69ba      	ldr	r2, [r7, #24]
 800a050:	e841 2300 	strex	r3, r2, [r1]
 800a054:	613b      	str	r3, [r7, #16]
   return(result);
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d1e5      	bne.n	800a028 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2220      	movs	r2, #32
 800a060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2200      	movs	r2, #0
 800a068:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a06a:	bf00      	nop
 800a06c:	3754      	adds	r7, #84	; 0x54
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr

0800a076 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a076:	b580      	push	{r7, lr}
 800a078:	b084      	sub	sp, #16
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a082:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	2200      	movs	r2, #0
 800a088:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	2200      	movs	r2, #0
 800a08e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a090:	68f8      	ldr	r0, [r7, #12]
 800a092:	f7ff fcef 	bl	8009a74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a096:	bf00      	nop
 800a098:	3710      	adds	r7, #16
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}

0800a09e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a09e:	b480      	push	{r7}
 800a0a0:	b085      	sub	sp, #20
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0ac:	b2db      	uxtb	r3, r3
 800a0ae:	2b21      	cmp	r3, #33	; 0x21
 800a0b0:	d13e      	bne.n	800a130 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	689b      	ldr	r3, [r3, #8]
 800a0b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0ba:	d114      	bne.n	800a0e6 <UART_Transmit_IT+0x48>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	691b      	ldr	r3, [r3, #16]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d110      	bne.n	800a0e6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6a1b      	ldr	r3, [r3, #32]
 800a0c8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	881b      	ldrh	r3, [r3, #0]
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a0d8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6a1b      	ldr	r3, [r3, #32]
 800a0de:	1c9a      	adds	r2, r3, #2
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	621a      	str	r2, [r3, #32]
 800a0e4:	e008      	b.n	800a0f8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6a1b      	ldr	r3, [r3, #32]
 800a0ea:	1c59      	adds	r1, r3, #1
 800a0ec:	687a      	ldr	r2, [r7, #4]
 800a0ee:	6211      	str	r1, [r2, #32]
 800a0f0:	781a      	ldrb	r2, [r3, #0]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a0fc:	b29b      	uxth	r3, r3
 800a0fe:	3b01      	subs	r3, #1
 800a100:	b29b      	uxth	r3, r3
 800a102:	687a      	ldr	r2, [r7, #4]
 800a104:	4619      	mov	r1, r3
 800a106:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d10f      	bne.n	800a12c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	68da      	ldr	r2, [r3, #12]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a11a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	68da      	ldr	r2, [r3, #12]
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a12a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a12c:	2300      	movs	r3, #0
 800a12e:	e000      	b.n	800a132 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a130:	2302      	movs	r3, #2
  }
}
 800a132:	4618      	mov	r0, r3
 800a134:	3714      	adds	r7, #20
 800a136:	46bd      	mov	sp, r7
 800a138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13c:	4770      	bx	lr

0800a13e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a13e:	b580      	push	{r7, lr}
 800a140:	b082      	sub	sp, #8
 800a142:	af00      	add	r7, sp, #0
 800a144:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	68da      	ldr	r2, [r3, #12]
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a154:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2220      	movs	r2, #32
 800a15a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f7ff fc60 	bl	8009a24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a164:	2300      	movs	r3, #0
}
 800a166:	4618      	mov	r0, r3
 800a168:	3708      	adds	r7, #8
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}

0800a16e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a16e:	b580      	push	{r7, lr}
 800a170:	b08c      	sub	sp, #48	; 0x30
 800a172:	af00      	add	r7, sp, #0
 800a174:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a17c:	b2db      	uxtb	r3, r3
 800a17e:	2b22      	cmp	r3, #34	; 0x22
 800a180:	f040 80ab 	bne.w	800a2da <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	689b      	ldr	r3, [r3, #8]
 800a188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a18c:	d117      	bne.n	800a1be <UART_Receive_IT+0x50>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	691b      	ldr	r3, [r3, #16]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d113      	bne.n	800a1be <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a196:	2300      	movs	r3, #0
 800a198:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a19e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	685b      	ldr	r3, [r3, #4]
 800a1a6:	b29b      	uxth	r3, r3
 800a1a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1ac:	b29a      	uxth	r2, r3
 800a1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1b6:	1c9a      	adds	r2, r3, #2
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	629a      	str	r2, [r3, #40]	; 0x28
 800a1bc:	e026      	b.n	800a20c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	689b      	ldr	r3, [r3, #8]
 800a1cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1d0:	d007      	beq.n	800a1e2 <UART_Receive_IT+0x74>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	689b      	ldr	r3, [r3, #8]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d10a      	bne.n	800a1f0 <UART_Receive_IT+0x82>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	691b      	ldr	r3, [r3, #16]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d106      	bne.n	800a1f0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	685b      	ldr	r3, [r3, #4]
 800a1e8:	b2da      	uxtb	r2, r3
 800a1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ec:	701a      	strb	r2, [r3, #0]
 800a1ee:	e008      	b.n	800a202 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	685b      	ldr	r3, [r3, #4]
 800a1f6:	b2db      	uxtb	r3, r3
 800a1f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1fc:	b2da      	uxtb	r2, r3
 800a1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a200:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a206:	1c5a      	adds	r2, r3, #1
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a210:	b29b      	uxth	r3, r3
 800a212:	3b01      	subs	r3, #1
 800a214:	b29b      	uxth	r3, r3
 800a216:	687a      	ldr	r2, [r7, #4]
 800a218:	4619      	mov	r1, r3
 800a21a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d15a      	bne.n	800a2d6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	68da      	ldr	r2, [r3, #12]
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f022 0220 	bic.w	r2, r2, #32
 800a22e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	68da      	ldr	r2, [r3, #12]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a23e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	695a      	ldr	r2, [r3, #20]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f022 0201 	bic.w	r2, r2, #1
 800a24e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2220      	movs	r2, #32
 800a254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	d135      	bne.n	800a2cc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2200      	movs	r2, #0
 800a264:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	330c      	adds	r3, #12
 800a26c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	e853 3f00 	ldrex	r3, [r3]
 800a274:	613b      	str	r3, [r7, #16]
   return(result);
 800a276:	693b      	ldr	r3, [r7, #16]
 800a278:	f023 0310 	bic.w	r3, r3, #16
 800a27c:	627b      	str	r3, [r7, #36]	; 0x24
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	330c      	adds	r3, #12
 800a284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a286:	623a      	str	r2, [r7, #32]
 800a288:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a28a:	69f9      	ldr	r1, [r7, #28]
 800a28c:	6a3a      	ldr	r2, [r7, #32]
 800a28e:	e841 2300 	strex	r3, r2, [r1]
 800a292:	61bb      	str	r3, [r7, #24]
   return(result);
 800a294:	69bb      	ldr	r3, [r7, #24]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d1e5      	bne.n	800a266 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f003 0310 	and.w	r3, r3, #16
 800a2a4:	2b10      	cmp	r3, #16
 800a2a6:	d10a      	bne.n	800a2be <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	60fb      	str	r3, [r7, #12]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	60fb      	str	r3, [r7, #12]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	685b      	ldr	r3, [r3, #4]
 800a2ba:	60fb      	str	r3, [r7, #12]
 800a2bc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a2c2:	4619      	mov	r1, r3
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f7ff fbdf 	bl	8009a88 <HAL_UARTEx_RxEventCallback>
 800a2ca:	e002      	b.n	800a2d2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f7ff fbbd 	bl	8009a4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	e002      	b.n	800a2dc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	e000      	b.n	800a2dc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a2da:	2302      	movs	r3, #2
  }
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3730      	adds	r7, #48	; 0x30
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a2e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a2e8:	b0c0      	sub	sp, #256	; 0x100
 800a2ea:	af00      	add	r7, sp, #0
 800a2ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a2f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	691b      	ldr	r3, [r3, #16]
 800a2f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a2fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a300:	68d9      	ldr	r1, [r3, #12]
 800a302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a306:	681a      	ldr	r2, [r3, #0]
 800a308:	ea40 0301 	orr.w	r3, r0, r1
 800a30c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a30e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a312:	689a      	ldr	r2, [r3, #8]
 800a314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a318:	691b      	ldr	r3, [r3, #16]
 800a31a:	431a      	orrs	r2, r3
 800a31c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a320:	695b      	ldr	r3, [r3, #20]
 800a322:	431a      	orrs	r2, r3
 800a324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a328:	69db      	ldr	r3, [r3, #28]
 800a32a:	4313      	orrs	r3, r2
 800a32c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	68db      	ldr	r3, [r3, #12]
 800a338:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a33c:	f021 010c 	bic.w	r1, r1, #12
 800a340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a344:	681a      	ldr	r2, [r3, #0]
 800a346:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a34a:	430b      	orrs	r3, r1
 800a34c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a34e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	695b      	ldr	r3, [r3, #20]
 800a356:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a35a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a35e:	6999      	ldr	r1, [r3, #24]
 800a360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a364:	681a      	ldr	r2, [r3, #0]
 800a366:	ea40 0301 	orr.w	r3, r0, r1
 800a36a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a36c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a370:	681a      	ldr	r2, [r3, #0]
 800a372:	4b8f      	ldr	r3, [pc, #572]	; (800a5b0 <UART_SetConfig+0x2cc>)
 800a374:	429a      	cmp	r2, r3
 800a376:	d005      	beq.n	800a384 <UART_SetConfig+0xa0>
 800a378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a37c:	681a      	ldr	r2, [r3, #0]
 800a37e:	4b8d      	ldr	r3, [pc, #564]	; (800a5b4 <UART_SetConfig+0x2d0>)
 800a380:	429a      	cmp	r2, r3
 800a382:	d104      	bne.n	800a38e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a384:	f7fd feea 	bl	800815c <HAL_RCC_GetPCLK2Freq>
 800a388:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a38c:	e003      	b.n	800a396 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a38e:	f7fd fed1 	bl	8008134 <HAL_RCC_GetPCLK1Freq>
 800a392:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a39a:	69db      	ldr	r3, [r3, #28]
 800a39c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3a0:	f040 810c 	bne.w	800a5bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a3a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a3ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a3b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a3b6:	4622      	mov	r2, r4
 800a3b8:	462b      	mov	r3, r5
 800a3ba:	1891      	adds	r1, r2, r2
 800a3bc:	65b9      	str	r1, [r7, #88]	; 0x58
 800a3be:	415b      	adcs	r3, r3
 800a3c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a3c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a3c6:	4621      	mov	r1, r4
 800a3c8:	eb12 0801 	adds.w	r8, r2, r1
 800a3cc:	4629      	mov	r1, r5
 800a3ce:	eb43 0901 	adc.w	r9, r3, r1
 800a3d2:	f04f 0200 	mov.w	r2, #0
 800a3d6:	f04f 0300 	mov.w	r3, #0
 800a3da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a3de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a3e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a3e6:	4690      	mov	r8, r2
 800a3e8:	4699      	mov	r9, r3
 800a3ea:	4623      	mov	r3, r4
 800a3ec:	eb18 0303 	adds.w	r3, r8, r3
 800a3f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a3f4:	462b      	mov	r3, r5
 800a3f6:	eb49 0303 	adc.w	r3, r9, r3
 800a3fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a3fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	2200      	movs	r2, #0
 800a406:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a40a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a40e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a412:	460b      	mov	r3, r1
 800a414:	18db      	adds	r3, r3, r3
 800a416:	653b      	str	r3, [r7, #80]	; 0x50
 800a418:	4613      	mov	r3, r2
 800a41a:	eb42 0303 	adc.w	r3, r2, r3
 800a41e:	657b      	str	r3, [r7, #84]	; 0x54
 800a420:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a424:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a428:	f7f6 fc38 	bl	8000c9c <__aeabi_uldivmod>
 800a42c:	4602      	mov	r2, r0
 800a42e:	460b      	mov	r3, r1
 800a430:	4b61      	ldr	r3, [pc, #388]	; (800a5b8 <UART_SetConfig+0x2d4>)
 800a432:	fba3 2302 	umull	r2, r3, r3, r2
 800a436:	095b      	lsrs	r3, r3, #5
 800a438:	011c      	lsls	r4, r3, #4
 800a43a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a43e:	2200      	movs	r2, #0
 800a440:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a444:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a448:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a44c:	4642      	mov	r2, r8
 800a44e:	464b      	mov	r3, r9
 800a450:	1891      	adds	r1, r2, r2
 800a452:	64b9      	str	r1, [r7, #72]	; 0x48
 800a454:	415b      	adcs	r3, r3
 800a456:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a458:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a45c:	4641      	mov	r1, r8
 800a45e:	eb12 0a01 	adds.w	sl, r2, r1
 800a462:	4649      	mov	r1, r9
 800a464:	eb43 0b01 	adc.w	fp, r3, r1
 800a468:	f04f 0200 	mov.w	r2, #0
 800a46c:	f04f 0300 	mov.w	r3, #0
 800a470:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a474:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a478:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a47c:	4692      	mov	sl, r2
 800a47e:	469b      	mov	fp, r3
 800a480:	4643      	mov	r3, r8
 800a482:	eb1a 0303 	adds.w	r3, sl, r3
 800a486:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a48a:	464b      	mov	r3, r9
 800a48c:	eb4b 0303 	adc.w	r3, fp, r3
 800a490:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a498:	685b      	ldr	r3, [r3, #4]
 800a49a:	2200      	movs	r2, #0
 800a49c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a4a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a4a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a4a8:	460b      	mov	r3, r1
 800a4aa:	18db      	adds	r3, r3, r3
 800a4ac:	643b      	str	r3, [r7, #64]	; 0x40
 800a4ae:	4613      	mov	r3, r2
 800a4b0:	eb42 0303 	adc.w	r3, r2, r3
 800a4b4:	647b      	str	r3, [r7, #68]	; 0x44
 800a4b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a4ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a4be:	f7f6 fbed 	bl	8000c9c <__aeabi_uldivmod>
 800a4c2:	4602      	mov	r2, r0
 800a4c4:	460b      	mov	r3, r1
 800a4c6:	4611      	mov	r1, r2
 800a4c8:	4b3b      	ldr	r3, [pc, #236]	; (800a5b8 <UART_SetConfig+0x2d4>)
 800a4ca:	fba3 2301 	umull	r2, r3, r3, r1
 800a4ce:	095b      	lsrs	r3, r3, #5
 800a4d0:	2264      	movs	r2, #100	; 0x64
 800a4d2:	fb02 f303 	mul.w	r3, r2, r3
 800a4d6:	1acb      	subs	r3, r1, r3
 800a4d8:	00db      	lsls	r3, r3, #3
 800a4da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a4de:	4b36      	ldr	r3, [pc, #216]	; (800a5b8 <UART_SetConfig+0x2d4>)
 800a4e0:	fba3 2302 	umull	r2, r3, r3, r2
 800a4e4:	095b      	lsrs	r3, r3, #5
 800a4e6:	005b      	lsls	r3, r3, #1
 800a4e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a4ec:	441c      	add	r4, r3
 800a4ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a4f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a4fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a500:	4642      	mov	r2, r8
 800a502:	464b      	mov	r3, r9
 800a504:	1891      	adds	r1, r2, r2
 800a506:	63b9      	str	r1, [r7, #56]	; 0x38
 800a508:	415b      	adcs	r3, r3
 800a50a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a50c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a510:	4641      	mov	r1, r8
 800a512:	1851      	adds	r1, r2, r1
 800a514:	6339      	str	r1, [r7, #48]	; 0x30
 800a516:	4649      	mov	r1, r9
 800a518:	414b      	adcs	r3, r1
 800a51a:	637b      	str	r3, [r7, #52]	; 0x34
 800a51c:	f04f 0200 	mov.w	r2, #0
 800a520:	f04f 0300 	mov.w	r3, #0
 800a524:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a528:	4659      	mov	r1, fp
 800a52a:	00cb      	lsls	r3, r1, #3
 800a52c:	4651      	mov	r1, sl
 800a52e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a532:	4651      	mov	r1, sl
 800a534:	00ca      	lsls	r2, r1, #3
 800a536:	4610      	mov	r0, r2
 800a538:	4619      	mov	r1, r3
 800a53a:	4603      	mov	r3, r0
 800a53c:	4642      	mov	r2, r8
 800a53e:	189b      	adds	r3, r3, r2
 800a540:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a544:	464b      	mov	r3, r9
 800a546:	460a      	mov	r2, r1
 800a548:	eb42 0303 	adc.w	r3, r2, r3
 800a54c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a554:	685b      	ldr	r3, [r3, #4]
 800a556:	2200      	movs	r2, #0
 800a558:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a55c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a560:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a564:	460b      	mov	r3, r1
 800a566:	18db      	adds	r3, r3, r3
 800a568:	62bb      	str	r3, [r7, #40]	; 0x28
 800a56a:	4613      	mov	r3, r2
 800a56c:	eb42 0303 	adc.w	r3, r2, r3
 800a570:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a572:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a576:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a57a:	f7f6 fb8f 	bl	8000c9c <__aeabi_uldivmod>
 800a57e:	4602      	mov	r2, r0
 800a580:	460b      	mov	r3, r1
 800a582:	4b0d      	ldr	r3, [pc, #52]	; (800a5b8 <UART_SetConfig+0x2d4>)
 800a584:	fba3 1302 	umull	r1, r3, r3, r2
 800a588:	095b      	lsrs	r3, r3, #5
 800a58a:	2164      	movs	r1, #100	; 0x64
 800a58c:	fb01 f303 	mul.w	r3, r1, r3
 800a590:	1ad3      	subs	r3, r2, r3
 800a592:	00db      	lsls	r3, r3, #3
 800a594:	3332      	adds	r3, #50	; 0x32
 800a596:	4a08      	ldr	r2, [pc, #32]	; (800a5b8 <UART_SetConfig+0x2d4>)
 800a598:	fba2 2303 	umull	r2, r3, r2, r3
 800a59c:	095b      	lsrs	r3, r3, #5
 800a59e:	f003 0207 	and.w	r2, r3, #7
 800a5a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	4422      	add	r2, r4
 800a5aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a5ac:	e106      	b.n	800a7bc <UART_SetConfig+0x4d8>
 800a5ae:	bf00      	nop
 800a5b0:	40011000 	.word	0x40011000
 800a5b4:	40011400 	.word	0x40011400
 800a5b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a5bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a5c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a5ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a5ce:	4642      	mov	r2, r8
 800a5d0:	464b      	mov	r3, r9
 800a5d2:	1891      	adds	r1, r2, r2
 800a5d4:	6239      	str	r1, [r7, #32]
 800a5d6:	415b      	adcs	r3, r3
 800a5d8:	627b      	str	r3, [r7, #36]	; 0x24
 800a5da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a5de:	4641      	mov	r1, r8
 800a5e0:	1854      	adds	r4, r2, r1
 800a5e2:	4649      	mov	r1, r9
 800a5e4:	eb43 0501 	adc.w	r5, r3, r1
 800a5e8:	f04f 0200 	mov.w	r2, #0
 800a5ec:	f04f 0300 	mov.w	r3, #0
 800a5f0:	00eb      	lsls	r3, r5, #3
 800a5f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a5f6:	00e2      	lsls	r2, r4, #3
 800a5f8:	4614      	mov	r4, r2
 800a5fa:	461d      	mov	r5, r3
 800a5fc:	4643      	mov	r3, r8
 800a5fe:	18e3      	adds	r3, r4, r3
 800a600:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a604:	464b      	mov	r3, r9
 800a606:	eb45 0303 	adc.w	r3, r5, r3
 800a60a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a60e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a612:	685b      	ldr	r3, [r3, #4]
 800a614:	2200      	movs	r2, #0
 800a616:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a61a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a61e:	f04f 0200 	mov.w	r2, #0
 800a622:	f04f 0300 	mov.w	r3, #0
 800a626:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a62a:	4629      	mov	r1, r5
 800a62c:	008b      	lsls	r3, r1, #2
 800a62e:	4621      	mov	r1, r4
 800a630:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a634:	4621      	mov	r1, r4
 800a636:	008a      	lsls	r2, r1, #2
 800a638:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a63c:	f7f6 fb2e 	bl	8000c9c <__aeabi_uldivmod>
 800a640:	4602      	mov	r2, r0
 800a642:	460b      	mov	r3, r1
 800a644:	4b60      	ldr	r3, [pc, #384]	; (800a7c8 <UART_SetConfig+0x4e4>)
 800a646:	fba3 2302 	umull	r2, r3, r3, r2
 800a64a:	095b      	lsrs	r3, r3, #5
 800a64c:	011c      	lsls	r4, r3, #4
 800a64e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a652:	2200      	movs	r2, #0
 800a654:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a658:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a65c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a660:	4642      	mov	r2, r8
 800a662:	464b      	mov	r3, r9
 800a664:	1891      	adds	r1, r2, r2
 800a666:	61b9      	str	r1, [r7, #24]
 800a668:	415b      	adcs	r3, r3
 800a66a:	61fb      	str	r3, [r7, #28]
 800a66c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a670:	4641      	mov	r1, r8
 800a672:	1851      	adds	r1, r2, r1
 800a674:	6139      	str	r1, [r7, #16]
 800a676:	4649      	mov	r1, r9
 800a678:	414b      	adcs	r3, r1
 800a67a:	617b      	str	r3, [r7, #20]
 800a67c:	f04f 0200 	mov.w	r2, #0
 800a680:	f04f 0300 	mov.w	r3, #0
 800a684:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a688:	4659      	mov	r1, fp
 800a68a:	00cb      	lsls	r3, r1, #3
 800a68c:	4651      	mov	r1, sl
 800a68e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a692:	4651      	mov	r1, sl
 800a694:	00ca      	lsls	r2, r1, #3
 800a696:	4610      	mov	r0, r2
 800a698:	4619      	mov	r1, r3
 800a69a:	4603      	mov	r3, r0
 800a69c:	4642      	mov	r2, r8
 800a69e:	189b      	adds	r3, r3, r2
 800a6a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a6a4:	464b      	mov	r3, r9
 800a6a6:	460a      	mov	r2, r1
 800a6a8:	eb42 0303 	adc.w	r3, r2, r3
 800a6ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a6b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6b4:	685b      	ldr	r3, [r3, #4]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	67bb      	str	r3, [r7, #120]	; 0x78
 800a6ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a6bc:	f04f 0200 	mov.w	r2, #0
 800a6c0:	f04f 0300 	mov.w	r3, #0
 800a6c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a6c8:	4649      	mov	r1, r9
 800a6ca:	008b      	lsls	r3, r1, #2
 800a6cc:	4641      	mov	r1, r8
 800a6ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a6d2:	4641      	mov	r1, r8
 800a6d4:	008a      	lsls	r2, r1, #2
 800a6d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a6da:	f7f6 fadf 	bl	8000c9c <__aeabi_uldivmod>
 800a6de:	4602      	mov	r2, r0
 800a6e0:	460b      	mov	r3, r1
 800a6e2:	4611      	mov	r1, r2
 800a6e4:	4b38      	ldr	r3, [pc, #224]	; (800a7c8 <UART_SetConfig+0x4e4>)
 800a6e6:	fba3 2301 	umull	r2, r3, r3, r1
 800a6ea:	095b      	lsrs	r3, r3, #5
 800a6ec:	2264      	movs	r2, #100	; 0x64
 800a6ee:	fb02 f303 	mul.w	r3, r2, r3
 800a6f2:	1acb      	subs	r3, r1, r3
 800a6f4:	011b      	lsls	r3, r3, #4
 800a6f6:	3332      	adds	r3, #50	; 0x32
 800a6f8:	4a33      	ldr	r2, [pc, #204]	; (800a7c8 <UART_SetConfig+0x4e4>)
 800a6fa:	fba2 2303 	umull	r2, r3, r2, r3
 800a6fe:	095b      	lsrs	r3, r3, #5
 800a700:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a704:	441c      	add	r4, r3
 800a706:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a70a:	2200      	movs	r2, #0
 800a70c:	673b      	str	r3, [r7, #112]	; 0x70
 800a70e:	677a      	str	r2, [r7, #116]	; 0x74
 800a710:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a714:	4642      	mov	r2, r8
 800a716:	464b      	mov	r3, r9
 800a718:	1891      	adds	r1, r2, r2
 800a71a:	60b9      	str	r1, [r7, #8]
 800a71c:	415b      	adcs	r3, r3
 800a71e:	60fb      	str	r3, [r7, #12]
 800a720:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a724:	4641      	mov	r1, r8
 800a726:	1851      	adds	r1, r2, r1
 800a728:	6039      	str	r1, [r7, #0]
 800a72a:	4649      	mov	r1, r9
 800a72c:	414b      	adcs	r3, r1
 800a72e:	607b      	str	r3, [r7, #4]
 800a730:	f04f 0200 	mov.w	r2, #0
 800a734:	f04f 0300 	mov.w	r3, #0
 800a738:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a73c:	4659      	mov	r1, fp
 800a73e:	00cb      	lsls	r3, r1, #3
 800a740:	4651      	mov	r1, sl
 800a742:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a746:	4651      	mov	r1, sl
 800a748:	00ca      	lsls	r2, r1, #3
 800a74a:	4610      	mov	r0, r2
 800a74c:	4619      	mov	r1, r3
 800a74e:	4603      	mov	r3, r0
 800a750:	4642      	mov	r2, r8
 800a752:	189b      	adds	r3, r3, r2
 800a754:	66bb      	str	r3, [r7, #104]	; 0x68
 800a756:	464b      	mov	r3, r9
 800a758:	460a      	mov	r2, r1
 800a75a:	eb42 0303 	adc.w	r3, r2, r3
 800a75e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a764:	685b      	ldr	r3, [r3, #4]
 800a766:	2200      	movs	r2, #0
 800a768:	663b      	str	r3, [r7, #96]	; 0x60
 800a76a:	667a      	str	r2, [r7, #100]	; 0x64
 800a76c:	f04f 0200 	mov.w	r2, #0
 800a770:	f04f 0300 	mov.w	r3, #0
 800a774:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a778:	4649      	mov	r1, r9
 800a77a:	008b      	lsls	r3, r1, #2
 800a77c:	4641      	mov	r1, r8
 800a77e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a782:	4641      	mov	r1, r8
 800a784:	008a      	lsls	r2, r1, #2
 800a786:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a78a:	f7f6 fa87 	bl	8000c9c <__aeabi_uldivmod>
 800a78e:	4602      	mov	r2, r0
 800a790:	460b      	mov	r3, r1
 800a792:	4b0d      	ldr	r3, [pc, #52]	; (800a7c8 <UART_SetConfig+0x4e4>)
 800a794:	fba3 1302 	umull	r1, r3, r3, r2
 800a798:	095b      	lsrs	r3, r3, #5
 800a79a:	2164      	movs	r1, #100	; 0x64
 800a79c:	fb01 f303 	mul.w	r3, r1, r3
 800a7a0:	1ad3      	subs	r3, r2, r3
 800a7a2:	011b      	lsls	r3, r3, #4
 800a7a4:	3332      	adds	r3, #50	; 0x32
 800a7a6:	4a08      	ldr	r2, [pc, #32]	; (800a7c8 <UART_SetConfig+0x4e4>)
 800a7a8:	fba2 2303 	umull	r2, r3, r2, r3
 800a7ac:	095b      	lsrs	r3, r3, #5
 800a7ae:	f003 020f 	and.w	r2, r3, #15
 800a7b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	4422      	add	r2, r4
 800a7ba:	609a      	str	r2, [r3, #8]
}
 800a7bc:	bf00      	nop
 800a7be:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a7c8:	51eb851f 	.word	0x51eb851f

0800a7cc <__NVIC_SetPriority>:
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b083      	sub	sp, #12
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	6039      	str	r1, [r7, #0]
 800a7d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a7d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	db0a      	blt.n	800a7f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	b2da      	uxtb	r2, r3
 800a7e4:	490c      	ldr	r1, [pc, #48]	; (800a818 <__NVIC_SetPriority+0x4c>)
 800a7e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a7ea:	0112      	lsls	r2, r2, #4
 800a7ec:	b2d2      	uxtb	r2, r2
 800a7ee:	440b      	add	r3, r1
 800a7f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a7f4:	e00a      	b.n	800a80c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	b2da      	uxtb	r2, r3
 800a7fa:	4908      	ldr	r1, [pc, #32]	; (800a81c <__NVIC_SetPriority+0x50>)
 800a7fc:	79fb      	ldrb	r3, [r7, #7]
 800a7fe:	f003 030f 	and.w	r3, r3, #15
 800a802:	3b04      	subs	r3, #4
 800a804:	0112      	lsls	r2, r2, #4
 800a806:	b2d2      	uxtb	r2, r2
 800a808:	440b      	add	r3, r1
 800a80a:	761a      	strb	r2, [r3, #24]
}
 800a80c:	bf00      	nop
 800a80e:	370c      	adds	r7, #12
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr
 800a818:	e000e100 	.word	0xe000e100
 800a81c:	e000ed00 	.word	0xe000ed00

0800a820 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a820:	b580      	push	{r7, lr}
 800a822:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a824:	4b05      	ldr	r3, [pc, #20]	; (800a83c <SysTick_Handler+0x1c>)
 800a826:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a828:	f001 fe1a 	bl	800c460 <xTaskGetSchedulerState>
 800a82c:	4603      	mov	r3, r0
 800a82e:	2b01      	cmp	r3, #1
 800a830:	d001      	beq.n	800a836 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a832:	f002 fd01 	bl	800d238 <xPortSysTickHandler>
  }
}
 800a836:	bf00      	nop
 800a838:	bd80      	pop	{r7, pc}
 800a83a:	bf00      	nop
 800a83c:	e000e010 	.word	0xe000e010

0800a840 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a840:	b580      	push	{r7, lr}
 800a842:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a844:	2100      	movs	r1, #0
 800a846:	f06f 0004 	mvn.w	r0, #4
 800a84a:	f7ff ffbf 	bl	800a7cc <__NVIC_SetPriority>
#endif
}
 800a84e:	bf00      	nop
 800a850:	bd80      	pop	{r7, pc}
	...

0800a854 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a854:	b480      	push	{r7}
 800a856:	b083      	sub	sp, #12
 800a858:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a85a:	f3ef 8305 	mrs	r3, IPSR
 800a85e:	603b      	str	r3, [r7, #0]
  return(result);
 800a860:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a862:	2b00      	cmp	r3, #0
 800a864:	d003      	beq.n	800a86e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a866:	f06f 0305 	mvn.w	r3, #5
 800a86a:	607b      	str	r3, [r7, #4]
 800a86c:	e00c      	b.n	800a888 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a86e:	4b0a      	ldr	r3, [pc, #40]	; (800a898 <osKernelInitialize+0x44>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d105      	bne.n	800a882 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a876:	4b08      	ldr	r3, [pc, #32]	; (800a898 <osKernelInitialize+0x44>)
 800a878:	2201      	movs	r2, #1
 800a87a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a87c:	2300      	movs	r3, #0
 800a87e:	607b      	str	r3, [r7, #4]
 800a880:	e002      	b.n	800a888 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a882:	f04f 33ff 	mov.w	r3, #4294967295
 800a886:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a888:	687b      	ldr	r3, [r7, #4]
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	370c      	adds	r7, #12
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr
 800a896:	bf00      	nop
 800a898:	20004d38 	.word	0x20004d38

0800a89c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b082      	sub	sp, #8
 800a8a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8a2:	f3ef 8305 	mrs	r3, IPSR
 800a8a6:	603b      	str	r3, [r7, #0]
  return(result);
 800a8a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d003      	beq.n	800a8b6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a8ae:	f06f 0305 	mvn.w	r3, #5
 800a8b2:	607b      	str	r3, [r7, #4]
 800a8b4:	e010      	b.n	800a8d8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a8b6:	4b0b      	ldr	r3, [pc, #44]	; (800a8e4 <osKernelStart+0x48>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	2b01      	cmp	r3, #1
 800a8bc:	d109      	bne.n	800a8d2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a8be:	f7ff ffbf 	bl	800a840 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a8c2:	4b08      	ldr	r3, [pc, #32]	; (800a8e4 <osKernelStart+0x48>)
 800a8c4:	2202      	movs	r2, #2
 800a8c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a8c8:	f001 f948 	bl	800bb5c <vTaskStartScheduler>
      stat = osOK;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	607b      	str	r3, [r7, #4]
 800a8d0:	e002      	b.n	800a8d8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a8d2:	f04f 33ff 	mov.w	r3, #4294967295
 800a8d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a8d8:	687b      	ldr	r3, [r7, #4]
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3708      	adds	r7, #8
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}
 800a8e2:	bf00      	nop
 800a8e4:	20004d38 	.word	0x20004d38

0800a8e8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b084      	sub	sp, #16
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8f0:	f3ef 8305 	mrs	r3, IPSR
 800a8f4:	60bb      	str	r3, [r7, #8]
  return(result);
 800a8f6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d003      	beq.n	800a904 <osDelay+0x1c>
    stat = osErrorISR;
 800a8fc:	f06f 0305 	mvn.w	r3, #5
 800a900:	60fb      	str	r3, [r7, #12]
 800a902:	e007      	b.n	800a914 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a904:	2300      	movs	r3, #0
 800a906:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d002      	beq.n	800a914 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f001 f8f0 	bl	800baf4 <vTaskDelay>
    }
  }

  return (stat);
 800a914:	68fb      	ldr	r3, [r7, #12]
}
 800a916:	4618      	mov	r0, r3
 800a918:	3710      	adds	r7, #16
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}
	...

0800a920 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a920:	b480      	push	{r7}
 800a922:	b085      	sub	sp, #20
 800a924:	af00      	add	r7, sp, #0
 800a926:	60f8      	str	r0, [r7, #12]
 800a928:	60b9      	str	r1, [r7, #8]
 800a92a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	4a07      	ldr	r2, [pc, #28]	; (800a94c <vApplicationGetIdleTaskMemory+0x2c>)
 800a930:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	4a06      	ldr	r2, [pc, #24]	; (800a950 <vApplicationGetIdleTaskMemory+0x30>)
 800a936:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2280      	movs	r2, #128	; 0x80
 800a93c:	601a      	str	r2, [r3, #0]
}
 800a93e:	bf00      	nop
 800a940:	3714      	adds	r7, #20
 800a942:	46bd      	mov	sp, r7
 800a944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a948:	4770      	bx	lr
 800a94a:	bf00      	nop
 800a94c:	20004d3c 	.word	0x20004d3c
 800a950:	20004de4 	.word	0x20004de4

0800a954 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a954:	b480      	push	{r7}
 800a956:	b085      	sub	sp, #20
 800a958:	af00      	add	r7, sp, #0
 800a95a:	60f8      	str	r0, [r7, #12]
 800a95c:	60b9      	str	r1, [r7, #8]
 800a95e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	4a07      	ldr	r2, [pc, #28]	; (800a980 <vApplicationGetTimerTaskMemory+0x2c>)
 800a964:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	4a06      	ldr	r2, [pc, #24]	; (800a984 <vApplicationGetTimerTaskMemory+0x30>)
 800a96a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a972:	601a      	str	r2, [r3, #0]
}
 800a974:	bf00      	nop
 800a976:	3714      	adds	r7, #20
 800a978:	46bd      	mov	sp, r7
 800a97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97e:	4770      	bx	lr
 800a980:	20004fe4 	.word	0x20004fe4
 800a984:	2000508c 	.word	0x2000508c

0800a988 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a988:	b480      	push	{r7}
 800a98a:	b083      	sub	sp, #12
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f103 0208 	add.w	r2, r3, #8
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	f04f 32ff 	mov.w	r2, #4294967295
 800a9a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f103 0208 	add.w	r2, r3, #8
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f103 0208 	add.w	r2, r3, #8
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a9bc:	bf00      	nop
 800a9be:	370c      	adds	r7, #12
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr

0800a9c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b083      	sub	sp, #12
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a9d6:	bf00      	nop
 800a9d8:	370c      	adds	r7, #12
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr

0800a9e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a9e2:	b480      	push	{r7}
 800a9e4:	b085      	sub	sp, #20
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	6078      	str	r0, [r7, #4]
 800a9ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	685b      	ldr	r3, [r3, #4]
 800a9f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	68fa      	ldr	r2, [r7, #12]
 800a9f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	689a      	ldr	r2, [r3, #8]
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	689b      	ldr	r3, [r3, #8]
 800aa04:	683a      	ldr	r2, [r7, #0]
 800aa06:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	683a      	ldr	r2, [r7, #0]
 800aa0c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	687a      	ldr	r2, [r7, #4]
 800aa12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	1c5a      	adds	r2, r3, #1
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	601a      	str	r2, [r3, #0]
}
 800aa1e:	bf00      	nop
 800aa20:	3714      	adds	r7, #20
 800aa22:	46bd      	mov	sp, r7
 800aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa28:	4770      	bx	lr

0800aa2a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aa2a:	b480      	push	{r7}
 800aa2c:	b085      	sub	sp, #20
 800aa2e:	af00      	add	r7, sp, #0
 800aa30:	6078      	str	r0, [r7, #4]
 800aa32:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa40:	d103      	bne.n	800aa4a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	691b      	ldr	r3, [r3, #16]
 800aa46:	60fb      	str	r3, [r7, #12]
 800aa48:	e00c      	b.n	800aa64 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	3308      	adds	r3, #8
 800aa4e:	60fb      	str	r3, [r7, #12]
 800aa50:	e002      	b.n	800aa58 <vListInsert+0x2e>
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	685b      	ldr	r3, [r3, #4]
 800aa56:	60fb      	str	r3, [r7, #12]
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	68ba      	ldr	r2, [r7, #8]
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d2f6      	bcs.n	800aa52 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	685a      	ldr	r2, [r3, #4]
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	685b      	ldr	r3, [r3, #4]
 800aa70:	683a      	ldr	r2, [r7, #0]
 800aa72:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	68fa      	ldr	r2, [r7, #12]
 800aa78:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	683a      	ldr	r2, [r7, #0]
 800aa7e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	687a      	ldr	r2, [r7, #4]
 800aa84:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	1c5a      	adds	r2, r3, #1
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	601a      	str	r2, [r3, #0]
}
 800aa90:	bf00      	nop
 800aa92:	3714      	adds	r7, #20
 800aa94:	46bd      	mov	sp, r7
 800aa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9a:	4770      	bx	lr

0800aa9c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b085      	sub	sp, #20
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	691b      	ldr	r3, [r3, #16]
 800aaa8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	687a      	ldr	r2, [r7, #4]
 800aab0:	6892      	ldr	r2, [r2, #8]
 800aab2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	689b      	ldr	r3, [r3, #8]
 800aab8:	687a      	ldr	r2, [r7, #4]
 800aaba:	6852      	ldr	r2, [r2, #4]
 800aabc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	685b      	ldr	r3, [r3, #4]
 800aac2:	687a      	ldr	r2, [r7, #4]
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d103      	bne.n	800aad0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	689a      	ldr	r2, [r3, #8]
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2200      	movs	r2, #0
 800aad4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	1e5a      	subs	r2, r3, #1
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	681b      	ldr	r3, [r3, #0]
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	3714      	adds	r7, #20
 800aae8:	46bd      	mov	sp, r7
 800aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaee:	4770      	bx	lr

0800aaf0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b084      	sub	sp, #16
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d10a      	bne.n	800ab1a <xQueueGenericReset+0x2a>
	__asm volatile
 800ab04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab08:	f383 8811 	msr	BASEPRI, r3
 800ab0c:	f3bf 8f6f 	isb	sy
 800ab10:	f3bf 8f4f 	dsb	sy
 800ab14:	60bb      	str	r3, [r7, #8]
}
 800ab16:	bf00      	nop
 800ab18:	e7fe      	b.n	800ab18 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ab1a:	f002 fafb 	bl	800d114 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	681a      	ldr	r2, [r3, #0]
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab26:	68f9      	ldr	r1, [r7, #12]
 800ab28:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ab2a:	fb01 f303 	mul.w	r3, r1, r3
 800ab2e:	441a      	add	r2, r3
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	2200      	movs	r2, #0
 800ab38:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	681a      	ldr	r2, [r3, #0]
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681a      	ldr	r2, [r3, #0]
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab4a:	3b01      	subs	r3, #1
 800ab4c:	68f9      	ldr	r1, [r7, #12]
 800ab4e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ab50:	fb01 f303 	mul.w	r3, r1, r3
 800ab54:	441a      	add	r2, r3
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	22ff      	movs	r2, #255	; 0xff
 800ab5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	22ff      	movs	r2, #255	; 0xff
 800ab66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d114      	bne.n	800ab9a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	691b      	ldr	r3, [r3, #16]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d01a      	beq.n	800abae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	3310      	adds	r3, #16
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f001 fa87 	bl	800c090 <xTaskRemoveFromEventList>
 800ab82:	4603      	mov	r3, r0
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d012      	beq.n	800abae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ab88:	4b0c      	ldr	r3, [pc, #48]	; (800abbc <xQueueGenericReset+0xcc>)
 800ab8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab8e:	601a      	str	r2, [r3, #0]
 800ab90:	f3bf 8f4f 	dsb	sy
 800ab94:	f3bf 8f6f 	isb	sy
 800ab98:	e009      	b.n	800abae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	3310      	adds	r3, #16
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f7ff fef2 	bl	800a988 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	3324      	adds	r3, #36	; 0x24
 800aba8:	4618      	mov	r0, r3
 800abaa:	f7ff feed 	bl	800a988 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800abae:	f002 fae1 	bl	800d174 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800abb2:	2301      	movs	r3, #1
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	3710      	adds	r7, #16
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}
 800abbc:	e000ed04 	.word	0xe000ed04

0800abc0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b08e      	sub	sp, #56	; 0x38
 800abc4:	af02      	add	r7, sp, #8
 800abc6:	60f8      	str	r0, [r7, #12]
 800abc8:	60b9      	str	r1, [r7, #8]
 800abca:	607a      	str	r2, [r7, #4]
 800abcc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d10a      	bne.n	800abea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800abd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd8:	f383 8811 	msr	BASEPRI, r3
 800abdc:	f3bf 8f6f 	isb	sy
 800abe0:	f3bf 8f4f 	dsb	sy
 800abe4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800abe6:	bf00      	nop
 800abe8:	e7fe      	b.n	800abe8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d10a      	bne.n	800ac06 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800abf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf4:	f383 8811 	msr	BASEPRI, r3
 800abf8:	f3bf 8f6f 	isb	sy
 800abfc:	f3bf 8f4f 	dsb	sy
 800ac00:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ac02:	bf00      	nop
 800ac04:	e7fe      	b.n	800ac04 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d002      	beq.n	800ac12 <xQueueGenericCreateStatic+0x52>
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d001      	beq.n	800ac16 <xQueueGenericCreateStatic+0x56>
 800ac12:	2301      	movs	r3, #1
 800ac14:	e000      	b.n	800ac18 <xQueueGenericCreateStatic+0x58>
 800ac16:	2300      	movs	r3, #0
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d10a      	bne.n	800ac32 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ac1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac20:	f383 8811 	msr	BASEPRI, r3
 800ac24:	f3bf 8f6f 	isb	sy
 800ac28:	f3bf 8f4f 	dsb	sy
 800ac2c:	623b      	str	r3, [r7, #32]
}
 800ac2e:	bf00      	nop
 800ac30:	e7fe      	b.n	800ac30 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d102      	bne.n	800ac3e <xQueueGenericCreateStatic+0x7e>
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d101      	bne.n	800ac42 <xQueueGenericCreateStatic+0x82>
 800ac3e:	2301      	movs	r3, #1
 800ac40:	e000      	b.n	800ac44 <xQueueGenericCreateStatic+0x84>
 800ac42:	2300      	movs	r3, #0
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d10a      	bne.n	800ac5e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ac48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac4c:	f383 8811 	msr	BASEPRI, r3
 800ac50:	f3bf 8f6f 	isb	sy
 800ac54:	f3bf 8f4f 	dsb	sy
 800ac58:	61fb      	str	r3, [r7, #28]
}
 800ac5a:	bf00      	nop
 800ac5c:	e7fe      	b.n	800ac5c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ac5e:	2350      	movs	r3, #80	; 0x50
 800ac60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	2b50      	cmp	r3, #80	; 0x50
 800ac66:	d00a      	beq.n	800ac7e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ac68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac6c:	f383 8811 	msr	BASEPRI, r3
 800ac70:	f3bf 8f6f 	isb	sy
 800ac74:	f3bf 8f4f 	dsb	sy
 800ac78:	61bb      	str	r3, [r7, #24]
}
 800ac7a:	bf00      	nop
 800ac7c:	e7fe      	b.n	800ac7c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ac7e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ac84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d00d      	beq.n	800aca6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ac8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac8c:	2201      	movs	r2, #1
 800ac8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ac92:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ac96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac98:	9300      	str	r3, [sp, #0]
 800ac9a:	4613      	mov	r3, r2
 800ac9c:	687a      	ldr	r2, [r7, #4]
 800ac9e:	68b9      	ldr	r1, [r7, #8]
 800aca0:	68f8      	ldr	r0, [r7, #12]
 800aca2:	f000 f83f 	bl	800ad24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3730      	adds	r7, #48	; 0x30
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}

0800acb0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b08a      	sub	sp, #40	; 0x28
 800acb4:	af02      	add	r7, sp, #8
 800acb6:	60f8      	str	r0, [r7, #12]
 800acb8:	60b9      	str	r1, [r7, #8]
 800acba:	4613      	mov	r3, r2
 800acbc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d10a      	bne.n	800acda <xQueueGenericCreate+0x2a>
	__asm volatile
 800acc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc8:	f383 8811 	msr	BASEPRI, r3
 800accc:	f3bf 8f6f 	isb	sy
 800acd0:	f3bf 8f4f 	dsb	sy
 800acd4:	613b      	str	r3, [r7, #16]
}
 800acd6:	bf00      	nop
 800acd8:	e7fe      	b.n	800acd8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	68ba      	ldr	r2, [r7, #8]
 800acde:	fb02 f303 	mul.w	r3, r2, r3
 800ace2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ace4:	69fb      	ldr	r3, [r7, #28]
 800ace6:	3350      	adds	r3, #80	; 0x50
 800ace8:	4618      	mov	r0, r3
 800acea:	f002 fb35 	bl	800d358 <pvPortMalloc>
 800acee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800acf0:	69bb      	ldr	r3, [r7, #24]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d011      	beq.n	800ad1a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800acf6:	69bb      	ldr	r3, [r7, #24]
 800acf8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	3350      	adds	r3, #80	; 0x50
 800acfe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ad00:	69bb      	ldr	r3, [r7, #24]
 800ad02:	2200      	movs	r2, #0
 800ad04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ad08:	79fa      	ldrb	r2, [r7, #7]
 800ad0a:	69bb      	ldr	r3, [r7, #24]
 800ad0c:	9300      	str	r3, [sp, #0]
 800ad0e:	4613      	mov	r3, r2
 800ad10:	697a      	ldr	r2, [r7, #20]
 800ad12:	68b9      	ldr	r1, [r7, #8]
 800ad14:	68f8      	ldr	r0, [r7, #12]
 800ad16:	f000 f805 	bl	800ad24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ad1a:	69bb      	ldr	r3, [r7, #24]
	}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	3720      	adds	r7, #32
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}

0800ad24 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b084      	sub	sp, #16
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	60f8      	str	r0, [r7, #12]
 800ad2c:	60b9      	str	r1, [r7, #8]
 800ad2e:	607a      	str	r2, [r7, #4]
 800ad30:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d103      	bne.n	800ad40 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ad38:	69bb      	ldr	r3, [r7, #24]
 800ad3a:	69ba      	ldr	r2, [r7, #24]
 800ad3c:	601a      	str	r2, [r3, #0]
 800ad3e:	e002      	b.n	800ad46 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ad40:	69bb      	ldr	r3, [r7, #24]
 800ad42:	687a      	ldr	r2, [r7, #4]
 800ad44:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ad46:	69bb      	ldr	r3, [r7, #24]
 800ad48:	68fa      	ldr	r2, [r7, #12]
 800ad4a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ad4c:	69bb      	ldr	r3, [r7, #24]
 800ad4e:	68ba      	ldr	r2, [r7, #8]
 800ad50:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ad52:	2101      	movs	r1, #1
 800ad54:	69b8      	ldr	r0, [r7, #24]
 800ad56:	f7ff fecb 	bl	800aaf0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ad5a:	69bb      	ldr	r3, [r7, #24]
 800ad5c:	78fa      	ldrb	r2, [r7, #3]
 800ad5e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ad62:	bf00      	nop
 800ad64:	3710      	adds	r7, #16
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}
	...

0800ad6c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b08e      	sub	sp, #56	; 0x38
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	60f8      	str	r0, [r7, #12]
 800ad74:	60b9      	str	r1, [r7, #8]
 800ad76:	607a      	str	r2, [r7, #4]
 800ad78:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ad82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d10a      	bne.n	800ad9e <xQueueGenericSend+0x32>
	__asm volatile
 800ad88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad8c:	f383 8811 	msr	BASEPRI, r3
 800ad90:	f3bf 8f6f 	isb	sy
 800ad94:	f3bf 8f4f 	dsb	sy
 800ad98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ad9a:	bf00      	nop
 800ad9c:	e7fe      	b.n	800ad9c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d103      	bne.n	800adac <xQueueGenericSend+0x40>
 800ada4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d101      	bne.n	800adb0 <xQueueGenericSend+0x44>
 800adac:	2301      	movs	r3, #1
 800adae:	e000      	b.n	800adb2 <xQueueGenericSend+0x46>
 800adb0:	2300      	movs	r3, #0
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d10a      	bne.n	800adcc <xQueueGenericSend+0x60>
	__asm volatile
 800adb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adba:	f383 8811 	msr	BASEPRI, r3
 800adbe:	f3bf 8f6f 	isb	sy
 800adc2:	f3bf 8f4f 	dsb	sy
 800adc6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800adc8:	bf00      	nop
 800adca:	e7fe      	b.n	800adca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	2b02      	cmp	r3, #2
 800add0:	d103      	bne.n	800adda <xQueueGenericSend+0x6e>
 800add2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800add6:	2b01      	cmp	r3, #1
 800add8:	d101      	bne.n	800adde <xQueueGenericSend+0x72>
 800adda:	2301      	movs	r3, #1
 800addc:	e000      	b.n	800ade0 <xQueueGenericSend+0x74>
 800adde:	2300      	movs	r3, #0
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d10a      	bne.n	800adfa <xQueueGenericSend+0x8e>
	__asm volatile
 800ade4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade8:	f383 8811 	msr	BASEPRI, r3
 800adec:	f3bf 8f6f 	isb	sy
 800adf0:	f3bf 8f4f 	dsb	sy
 800adf4:	623b      	str	r3, [r7, #32]
}
 800adf6:	bf00      	nop
 800adf8:	e7fe      	b.n	800adf8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800adfa:	f001 fb31 	bl	800c460 <xTaskGetSchedulerState>
 800adfe:	4603      	mov	r3, r0
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d102      	bne.n	800ae0a <xQueueGenericSend+0x9e>
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d101      	bne.n	800ae0e <xQueueGenericSend+0xa2>
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	e000      	b.n	800ae10 <xQueueGenericSend+0xa4>
 800ae0e:	2300      	movs	r3, #0
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d10a      	bne.n	800ae2a <xQueueGenericSend+0xbe>
	__asm volatile
 800ae14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae18:	f383 8811 	msr	BASEPRI, r3
 800ae1c:	f3bf 8f6f 	isb	sy
 800ae20:	f3bf 8f4f 	dsb	sy
 800ae24:	61fb      	str	r3, [r7, #28]
}
 800ae26:	bf00      	nop
 800ae28:	e7fe      	b.n	800ae28 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ae2a:	f002 f973 	bl	800d114 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ae2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae36:	429a      	cmp	r2, r3
 800ae38:	d302      	bcc.n	800ae40 <xQueueGenericSend+0xd4>
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	2b02      	cmp	r3, #2
 800ae3e:	d129      	bne.n	800ae94 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ae40:	683a      	ldr	r2, [r7, #0]
 800ae42:	68b9      	ldr	r1, [r7, #8]
 800ae44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae46:	f000 fb2f 	bl	800b4a8 <prvCopyDataToQueue>
 800ae4a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d010      	beq.n	800ae76 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae56:	3324      	adds	r3, #36	; 0x24
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f001 f919 	bl	800c090 <xTaskRemoveFromEventList>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d013      	beq.n	800ae8c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ae64:	4b3f      	ldr	r3, [pc, #252]	; (800af64 <xQueueGenericSend+0x1f8>)
 800ae66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae6a:	601a      	str	r2, [r3, #0]
 800ae6c:	f3bf 8f4f 	dsb	sy
 800ae70:	f3bf 8f6f 	isb	sy
 800ae74:	e00a      	b.n	800ae8c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ae76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d007      	beq.n	800ae8c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ae7c:	4b39      	ldr	r3, [pc, #228]	; (800af64 <xQueueGenericSend+0x1f8>)
 800ae7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae82:	601a      	str	r2, [r3, #0]
 800ae84:	f3bf 8f4f 	dsb	sy
 800ae88:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ae8c:	f002 f972 	bl	800d174 <vPortExitCritical>
				return pdPASS;
 800ae90:	2301      	movs	r3, #1
 800ae92:	e063      	b.n	800af5c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d103      	bne.n	800aea2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ae9a:	f002 f96b 	bl	800d174 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	e05c      	b.n	800af5c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d106      	bne.n	800aeb6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aea8:	f107 0314 	add.w	r3, r7, #20
 800aeac:	4618      	mov	r0, r3
 800aeae:	f001 f979 	bl	800c1a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aeb6:	f002 f95d 	bl	800d174 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aeba:	f000 febf 	bl	800bc3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aebe:	f002 f929 	bl	800d114 <vPortEnterCritical>
 800aec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aec8:	b25b      	sxtb	r3, r3
 800aeca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aece:	d103      	bne.n	800aed8 <xQueueGenericSend+0x16c>
 800aed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed2:	2200      	movs	r2, #0
 800aed4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aede:	b25b      	sxtb	r3, r3
 800aee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aee4:	d103      	bne.n	800aeee <xQueueGenericSend+0x182>
 800aee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee8:	2200      	movs	r2, #0
 800aeea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aeee:	f002 f941 	bl	800d174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aef2:	1d3a      	adds	r2, r7, #4
 800aef4:	f107 0314 	add.w	r3, r7, #20
 800aef8:	4611      	mov	r1, r2
 800aefa:	4618      	mov	r0, r3
 800aefc:	f001 f968 	bl	800c1d0 <xTaskCheckForTimeOut>
 800af00:	4603      	mov	r3, r0
 800af02:	2b00      	cmp	r3, #0
 800af04:	d124      	bne.n	800af50 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800af06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af08:	f000 fbc6 	bl	800b698 <prvIsQueueFull>
 800af0c:	4603      	mov	r3, r0
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d018      	beq.n	800af44 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800af12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af14:	3310      	adds	r3, #16
 800af16:	687a      	ldr	r2, [r7, #4]
 800af18:	4611      	mov	r1, r2
 800af1a:	4618      	mov	r0, r3
 800af1c:	f001 f868 	bl	800bff0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800af20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af22:	f000 fb51 	bl	800b5c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800af26:	f000 fe97 	bl	800bc58 <xTaskResumeAll>
 800af2a:	4603      	mov	r3, r0
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	f47f af7c 	bne.w	800ae2a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800af32:	4b0c      	ldr	r3, [pc, #48]	; (800af64 <xQueueGenericSend+0x1f8>)
 800af34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af38:	601a      	str	r2, [r3, #0]
 800af3a:	f3bf 8f4f 	dsb	sy
 800af3e:	f3bf 8f6f 	isb	sy
 800af42:	e772      	b.n	800ae2a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800af44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af46:	f000 fb3f 	bl	800b5c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af4a:	f000 fe85 	bl	800bc58 <xTaskResumeAll>
 800af4e:	e76c      	b.n	800ae2a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800af50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af52:	f000 fb39 	bl	800b5c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af56:	f000 fe7f 	bl	800bc58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800af5a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	3738      	adds	r7, #56	; 0x38
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}
 800af64:	e000ed04 	.word	0xe000ed04

0800af68 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b090      	sub	sp, #64	; 0x40
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	60f8      	str	r0, [r7, #12]
 800af70:	60b9      	str	r1, [r7, #8]
 800af72:	607a      	str	r2, [r7, #4]
 800af74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800af7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d10a      	bne.n	800af96 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800af80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af84:	f383 8811 	msr	BASEPRI, r3
 800af88:	f3bf 8f6f 	isb	sy
 800af8c:	f3bf 8f4f 	dsb	sy
 800af90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800af92:	bf00      	nop
 800af94:	e7fe      	b.n	800af94 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d103      	bne.n	800afa4 <xQueueGenericSendFromISR+0x3c>
 800af9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d101      	bne.n	800afa8 <xQueueGenericSendFromISR+0x40>
 800afa4:	2301      	movs	r3, #1
 800afa6:	e000      	b.n	800afaa <xQueueGenericSendFromISR+0x42>
 800afa8:	2300      	movs	r3, #0
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d10a      	bne.n	800afc4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800afae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afb2:	f383 8811 	msr	BASEPRI, r3
 800afb6:	f3bf 8f6f 	isb	sy
 800afba:	f3bf 8f4f 	dsb	sy
 800afbe:	627b      	str	r3, [r7, #36]	; 0x24
}
 800afc0:	bf00      	nop
 800afc2:	e7fe      	b.n	800afc2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	2b02      	cmp	r3, #2
 800afc8:	d103      	bne.n	800afd2 <xQueueGenericSendFromISR+0x6a>
 800afca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afce:	2b01      	cmp	r3, #1
 800afd0:	d101      	bne.n	800afd6 <xQueueGenericSendFromISR+0x6e>
 800afd2:	2301      	movs	r3, #1
 800afd4:	e000      	b.n	800afd8 <xQueueGenericSendFromISR+0x70>
 800afd6:	2300      	movs	r3, #0
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d10a      	bne.n	800aff2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800afdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe0:	f383 8811 	msr	BASEPRI, r3
 800afe4:	f3bf 8f6f 	isb	sy
 800afe8:	f3bf 8f4f 	dsb	sy
 800afec:	623b      	str	r3, [r7, #32]
}
 800afee:	bf00      	nop
 800aff0:	e7fe      	b.n	800aff0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aff2:	f002 f971 	bl	800d2d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800aff6:	f3ef 8211 	mrs	r2, BASEPRI
 800affa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800affe:	f383 8811 	msr	BASEPRI, r3
 800b002:	f3bf 8f6f 	isb	sy
 800b006:	f3bf 8f4f 	dsb	sy
 800b00a:	61fa      	str	r2, [r7, #28]
 800b00c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b00e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b010:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b014:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b01a:	429a      	cmp	r2, r3
 800b01c:	d302      	bcc.n	800b024 <xQueueGenericSendFromISR+0xbc>
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	2b02      	cmp	r3, #2
 800b022:	d12f      	bne.n	800b084 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b026:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b02a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b032:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b034:	683a      	ldr	r2, [r7, #0]
 800b036:	68b9      	ldr	r1, [r7, #8]
 800b038:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b03a:	f000 fa35 	bl	800b4a8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b03e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b042:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b046:	d112      	bne.n	800b06e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d016      	beq.n	800b07e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b052:	3324      	adds	r3, #36	; 0x24
 800b054:	4618      	mov	r0, r3
 800b056:	f001 f81b 	bl	800c090 <xTaskRemoveFromEventList>
 800b05a:	4603      	mov	r3, r0
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d00e      	beq.n	800b07e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d00b      	beq.n	800b07e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2201      	movs	r2, #1
 800b06a:	601a      	str	r2, [r3, #0]
 800b06c:	e007      	b.n	800b07e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b06e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b072:	3301      	adds	r3, #1
 800b074:	b2db      	uxtb	r3, r3
 800b076:	b25a      	sxtb	r2, r3
 800b078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b07a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b07e:	2301      	movs	r3, #1
 800b080:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b082:	e001      	b.n	800b088 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b084:	2300      	movs	r3, #0
 800b086:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b08a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b08c:	697b      	ldr	r3, [r7, #20]
 800b08e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b092:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b096:	4618      	mov	r0, r3
 800b098:	3740      	adds	r7, #64	; 0x40
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}
	...

0800b0a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b08c      	sub	sp, #48	; 0x30
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	60f8      	str	r0, [r7, #12]
 800b0a8:	60b9      	str	r1, [r7, #8]
 800b0aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d10a      	bne.n	800b0d0 <xQueueReceive+0x30>
	__asm volatile
 800b0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0be:	f383 8811 	msr	BASEPRI, r3
 800b0c2:	f3bf 8f6f 	isb	sy
 800b0c6:	f3bf 8f4f 	dsb	sy
 800b0ca:	623b      	str	r3, [r7, #32]
}
 800b0cc:	bf00      	nop
 800b0ce:	e7fe      	b.n	800b0ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d103      	bne.n	800b0de <xQueueReceive+0x3e>
 800b0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d101      	bne.n	800b0e2 <xQueueReceive+0x42>
 800b0de:	2301      	movs	r3, #1
 800b0e0:	e000      	b.n	800b0e4 <xQueueReceive+0x44>
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d10a      	bne.n	800b0fe <xQueueReceive+0x5e>
	__asm volatile
 800b0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ec:	f383 8811 	msr	BASEPRI, r3
 800b0f0:	f3bf 8f6f 	isb	sy
 800b0f4:	f3bf 8f4f 	dsb	sy
 800b0f8:	61fb      	str	r3, [r7, #28]
}
 800b0fa:	bf00      	nop
 800b0fc:	e7fe      	b.n	800b0fc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b0fe:	f001 f9af 	bl	800c460 <xTaskGetSchedulerState>
 800b102:	4603      	mov	r3, r0
 800b104:	2b00      	cmp	r3, #0
 800b106:	d102      	bne.n	800b10e <xQueueReceive+0x6e>
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d101      	bne.n	800b112 <xQueueReceive+0x72>
 800b10e:	2301      	movs	r3, #1
 800b110:	e000      	b.n	800b114 <xQueueReceive+0x74>
 800b112:	2300      	movs	r3, #0
 800b114:	2b00      	cmp	r3, #0
 800b116:	d10a      	bne.n	800b12e <xQueueReceive+0x8e>
	__asm volatile
 800b118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b11c:	f383 8811 	msr	BASEPRI, r3
 800b120:	f3bf 8f6f 	isb	sy
 800b124:	f3bf 8f4f 	dsb	sy
 800b128:	61bb      	str	r3, [r7, #24]
}
 800b12a:	bf00      	nop
 800b12c:	e7fe      	b.n	800b12c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b12e:	f001 fff1 	bl	800d114 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b136:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d01f      	beq.n	800b17e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b13e:	68b9      	ldr	r1, [r7, #8]
 800b140:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b142:	f000 fa1b 	bl	800b57c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b148:	1e5a      	subs	r2, r3, #1
 800b14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b14c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b150:	691b      	ldr	r3, [r3, #16]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d00f      	beq.n	800b176 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b158:	3310      	adds	r3, #16
 800b15a:	4618      	mov	r0, r3
 800b15c:	f000 ff98 	bl	800c090 <xTaskRemoveFromEventList>
 800b160:	4603      	mov	r3, r0
 800b162:	2b00      	cmp	r3, #0
 800b164:	d007      	beq.n	800b176 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b166:	4b3d      	ldr	r3, [pc, #244]	; (800b25c <xQueueReceive+0x1bc>)
 800b168:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b16c:	601a      	str	r2, [r3, #0]
 800b16e:	f3bf 8f4f 	dsb	sy
 800b172:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b176:	f001 fffd 	bl	800d174 <vPortExitCritical>
				return pdPASS;
 800b17a:	2301      	movs	r3, #1
 800b17c:	e069      	b.n	800b252 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d103      	bne.n	800b18c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b184:	f001 fff6 	bl	800d174 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b188:	2300      	movs	r3, #0
 800b18a:	e062      	b.n	800b252 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d106      	bne.n	800b1a0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b192:	f107 0310 	add.w	r3, r7, #16
 800b196:	4618      	mov	r0, r3
 800b198:	f001 f804 	bl	800c1a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b19c:	2301      	movs	r3, #1
 800b19e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b1a0:	f001 ffe8 	bl	800d174 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b1a4:	f000 fd4a 	bl	800bc3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b1a8:	f001 ffb4 	bl	800d114 <vPortEnterCritical>
 800b1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b1b2:	b25b      	sxtb	r3, r3
 800b1b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1b8:	d103      	bne.n	800b1c2 <xQueueReceive+0x122>
 800b1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1bc:	2200      	movs	r2, #0
 800b1be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b1c8:	b25b      	sxtb	r3, r3
 800b1ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1ce:	d103      	bne.n	800b1d8 <xQueueReceive+0x138>
 800b1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b1d8:	f001 ffcc 	bl	800d174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b1dc:	1d3a      	adds	r2, r7, #4
 800b1de:	f107 0310 	add.w	r3, r7, #16
 800b1e2:	4611      	mov	r1, r2
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f000 fff3 	bl	800c1d0 <xTaskCheckForTimeOut>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d123      	bne.n	800b238 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b1f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1f2:	f000 fa3b 	bl	800b66c <prvIsQueueEmpty>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d017      	beq.n	800b22c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1fe:	3324      	adds	r3, #36	; 0x24
 800b200:	687a      	ldr	r2, [r7, #4]
 800b202:	4611      	mov	r1, r2
 800b204:	4618      	mov	r0, r3
 800b206:	f000 fef3 	bl	800bff0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b20a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b20c:	f000 f9dc 	bl	800b5c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b210:	f000 fd22 	bl	800bc58 <xTaskResumeAll>
 800b214:	4603      	mov	r3, r0
 800b216:	2b00      	cmp	r3, #0
 800b218:	d189      	bne.n	800b12e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b21a:	4b10      	ldr	r3, [pc, #64]	; (800b25c <xQueueReceive+0x1bc>)
 800b21c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b220:	601a      	str	r2, [r3, #0]
 800b222:	f3bf 8f4f 	dsb	sy
 800b226:	f3bf 8f6f 	isb	sy
 800b22a:	e780      	b.n	800b12e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b22c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b22e:	f000 f9cb 	bl	800b5c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b232:	f000 fd11 	bl	800bc58 <xTaskResumeAll>
 800b236:	e77a      	b.n	800b12e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b238:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b23a:	f000 f9c5 	bl	800b5c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b23e:	f000 fd0b 	bl	800bc58 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b242:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b244:	f000 fa12 	bl	800b66c <prvIsQueueEmpty>
 800b248:	4603      	mov	r3, r0
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	f43f af6f 	beq.w	800b12e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b250:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b252:	4618      	mov	r0, r3
 800b254:	3730      	adds	r7, #48	; 0x30
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}
 800b25a:	bf00      	nop
 800b25c:	e000ed04 	.word	0xe000ed04

0800b260 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b08e      	sub	sp, #56	; 0x38
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
 800b268:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b26a:	2300      	movs	r3, #0
 800b26c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b272:	2300      	movs	r3, #0
 800b274:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d10a      	bne.n	800b292 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800b27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b280:	f383 8811 	msr	BASEPRI, r3
 800b284:	f3bf 8f6f 	isb	sy
 800b288:	f3bf 8f4f 	dsb	sy
 800b28c:	623b      	str	r3, [r7, #32]
}
 800b28e:	bf00      	nop
 800b290:	e7fe      	b.n	800b290 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b296:	2b00      	cmp	r3, #0
 800b298:	d00a      	beq.n	800b2b0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800b29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b29e:	f383 8811 	msr	BASEPRI, r3
 800b2a2:	f3bf 8f6f 	isb	sy
 800b2a6:	f3bf 8f4f 	dsb	sy
 800b2aa:	61fb      	str	r3, [r7, #28]
}
 800b2ac:	bf00      	nop
 800b2ae:	e7fe      	b.n	800b2ae <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b2b0:	f001 f8d6 	bl	800c460 <xTaskGetSchedulerState>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d102      	bne.n	800b2c0 <xQueueSemaphoreTake+0x60>
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d101      	bne.n	800b2c4 <xQueueSemaphoreTake+0x64>
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	e000      	b.n	800b2c6 <xQueueSemaphoreTake+0x66>
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d10a      	bne.n	800b2e0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800b2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ce:	f383 8811 	msr	BASEPRI, r3
 800b2d2:	f3bf 8f6f 	isb	sy
 800b2d6:	f3bf 8f4f 	dsb	sy
 800b2da:	61bb      	str	r3, [r7, #24]
}
 800b2dc:	bf00      	nop
 800b2de:	e7fe      	b.n	800b2de <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b2e0:	f001 ff18 	bl	800d114 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2e8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d024      	beq.n	800b33a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2f2:	1e5a      	subs	r2, r3, #1
 800b2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2f6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d104      	bne.n	800b30a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b300:	f001 fa24 	bl	800c74c <pvTaskIncrementMutexHeldCount>
 800b304:	4602      	mov	r2, r0
 800b306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b308:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b30c:	691b      	ldr	r3, [r3, #16]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d00f      	beq.n	800b332 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b314:	3310      	adds	r3, #16
 800b316:	4618      	mov	r0, r3
 800b318:	f000 feba 	bl	800c090 <xTaskRemoveFromEventList>
 800b31c:	4603      	mov	r3, r0
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d007      	beq.n	800b332 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b322:	4b54      	ldr	r3, [pc, #336]	; (800b474 <xQueueSemaphoreTake+0x214>)
 800b324:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b328:	601a      	str	r2, [r3, #0]
 800b32a:	f3bf 8f4f 	dsb	sy
 800b32e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b332:	f001 ff1f 	bl	800d174 <vPortExitCritical>
				return pdPASS;
 800b336:	2301      	movs	r3, #1
 800b338:	e097      	b.n	800b46a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d111      	bne.n	800b364 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b342:	2b00      	cmp	r3, #0
 800b344:	d00a      	beq.n	800b35c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800b346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b34a:	f383 8811 	msr	BASEPRI, r3
 800b34e:	f3bf 8f6f 	isb	sy
 800b352:	f3bf 8f4f 	dsb	sy
 800b356:	617b      	str	r3, [r7, #20]
}
 800b358:	bf00      	nop
 800b35a:	e7fe      	b.n	800b35a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b35c:	f001 ff0a 	bl	800d174 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b360:	2300      	movs	r3, #0
 800b362:	e082      	b.n	800b46a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b366:	2b00      	cmp	r3, #0
 800b368:	d106      	bne.n	800b378 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b36a:	f107 030c 	add.w	r3, r7, #12
 800b36e:	4618      	mov	r0, r3
 800b370:	f000 ff18 	bl	800c1a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b374:	2301      	movs	r3, #1
 800b376:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b378:	f001 fefc 	bl	800d174 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b37c:	f000 fc5e 	bl	800bc3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b380:	f001 fec8 	bl	800d114 <vPortEnterCritical>
 800b384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b386:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b38a:	b25b      	sxtb	r3, r3
 800b38c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b390:	d103      	bne.n	800b39a <xQueueSemaphoreTake+0x13a>
 800b392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b394:	2200      	movs	r2, #0
 800b396:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b39c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b3a0:	b25b      	sxtb	r3, r3
 800b3a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3a6:	d103      	bne.n	800b3b0 <xQueueSemaphoreTake+0x150>
 800b3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b3b0:	f001 fee0 	bl	800d174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b3b4:	463a      	mov	r2, r7
 800b3b6:	f107 030c 	add.w	r3, r7, #12
 800b3ba:	4611      	mov	r1, r2
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f000 ff07 	bl	800c1d0 <xTaskCheckForTimeOut>
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d132      	bne.n	800b42e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b3c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b3ca:	f000 f94f 	bl	800b66c <prvIsQueueEmpty>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d026      	beq.n	800b422 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d109      	bne.n	800b3f0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800b3dc:	f001 fe9a 	bl	800d114 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3e2:	689b      	ldr	r3, [r3, #8]
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f001 f859 	bl	800c49c <xTaskPriorityInherit>
 800b3ea:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b3ec:	f001 fec2 	bl	800d174 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3f2:	3324      	adds	r3, #36	; 0x24
 800b3f4:	683a      	ldr	r2, [r7, #0]
 800b3f6:	4611      	mov	r1, r2
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f000 fdf9 	bl	800bff0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b3fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b400:	f000 f8e2 	bl	800b5c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b404:	f000 fc28 	bl	800bc58 <xTaskResumeAll>
 800b408:	4603      	mov	r3, r0
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	f47f af68 	bne.w	800b2e0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800b410:	4b18      	ldr	r3, [pc, #96]	; (800b474 <xQueueSemaphoreTake+0x214>)
 800b412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b416:	601a      	str	r2, [r3, #0]
 800b418:	f3bf 8f4f 	dsb	sy
 800b41c:	f3bf 8f6f 	isb	sy
 800b420:	e75e      	b.n	800b2e0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b422:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b424:	f000 f8d0 	bl	800b5c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b428:	f000 fc16 	bl	800bc58 <xTaskResumeAll>
 800b42c:	e758      	b.n	800b2e0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b42e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b430:	f000 f8ca 	bl	800b5c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b434:	f000 fc10 	bl	800bc58 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b438:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b43a:	f000 f917 	bl	800b66c <prvIsQueueEmpty>
 800b43e:	4603      	mov	r3, r0
 800b440:	2b00      	cmp	r3, #0
 800b442:	f43f af4d 	beq.w	800b2e0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d00d      	beq.n	800b468 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800b44c:	f001 fe62 	bl	800d114 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b450:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b452:	f000 f811 	bl	800b478 <prvGetDisinheritPriorityAfterTimeout>
 800b456:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b45a:	689b      	ldr	r3, [r3, #8]
 800b45c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b45e:	4618      	mov	r0, r3
 800b460:	f001 f8f2 	bl	800c648 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b464:	f001 fe86 	bl	800d174 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b468:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	3738      	adds	r7, #56	; 0x38
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}
 800b472:	bf00      	nop
 800b474:	e000ed04 	.word	0xe000ed04

0800b478 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b478:	b480      	push	{r7}
 800b47a:	b085      	sub	sp, #20
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b484:	2b00      	cmp	r3, #0
 800b486:	d006      	beq.n	800b496 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800b492:	60fb      	str	r3, [r7, #12]
 800b494:	e001      	b.n	800b49a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b496:	2300      	movs	r3, #0
 800b498:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b49a:	68fb      	ldr	r3, [r7, #12]
	}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3714      	adds	r7, #20
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a6:	4770      	bx	lr

0800b4a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b086      	sub	sp, #24
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	60f8      	str	r0, [r7, #12]
 800b4b0:	60b9      	str	r1, [r7, #8]
 800b4b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d10d      	bne.n	800b4e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d14d      	bne.n	800b56a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	689b      	ldr	r3, [r3, #8]
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f001 f84a 	bl	800c56c <xTaskPriorityDisinherit>
 800b4d8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	2200      	movs	r2, #0
 800b4de:	609a      	str	r2, [r3, #8]
 800b4e0:	e043      	b.n	800b56a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d119      	bne.n	800b51c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	6858      	ldr	r0, [r3, #4]
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4f0:	461a      	mov	r2, r3
 800b4f2:	68b9      	ldr	r1, [r7, #8]
 800b4f4:	f00c f981 	bl	80177fa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	685a      	ldr	r2, [r3, #4]
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b500:	441a      	add	r2, r3
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	685a      	ldr	r2, [r3, #4]
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	689b      	ldr	r3, [r3, #8]
 800b50e:	429a      	cmp	r2, r3
 800b510:	d32b      	bcc.n	800b56a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	681a      	ldr	r2, [r3, #0]
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	605a      	str	r2, [r3, #4]
 800b51a:	e026      	b.n	800b56a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	68d8      	ldr	r0, [r3, #12]
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b524:	461a      	mov	r2, r3
 800b526:	68b9      	ldr	r1, [r7, #8]
 800b528:	f00c f967 	bl	80177fa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	68da      	ldr	r2, [r3, #12]
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b534:	425b      	negs	r3, r3
 800b536:	441a      	add	r2, r3
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	68da      	ldr	r2, [r3, #12]
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	429a      	cmp	r2, r3
 800b546:	d207      	bcs.n	800b558 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	689a      	ldr	r2, [r3, #8]
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b550:	425b      	negs	r3, r3
 800b552:	441a      	add	r2, r3
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2b02      	cmp	r3, #2
 800b55c:	d105      	bne.n	800b56a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b55e:	693b      	ldr	r3, [r7, #16]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d002      	beq.n	800b56a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b564:	693b      	ldr	r3, [r7, #16]
 800b566:	3b01      	subs	r3, #1
 800b568:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b56a:	693b      	ldr	r3, [r7, #16]
 800b56c:	1c5a      	adds	r2, r3, #1
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b572:	697b      	ldr	r3, [r7, #20]
}
 800b574:	4618      	mov	r0, r3
 800b576:	3718      	adds	r7, #24
 800b578:	46bd      	mov	sp, r7
 800b57a:	bd80      	pop	{r7, pc}

0800b57c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b082      	sub	sp, #8
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
 800b584:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d018      	beq.n	800b5c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	68da      	ldr	r2, [r3, #12]
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b596:	441a      	add	r2, r3
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	68da      	ldr	r2, [r3, #12]
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	689b      	ldr	r3, [r3, #8]
 800b5a4:	429a      	cmp	r2, r3
 800b5a6:	d303      	bcc.n	800b5b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681a      	ldr	r2, [r3, #0]
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	68d9      	ldr	r1, [r3, #12]
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5b8:	461a      	mov	r2, r3
 800b5ba:	6838      	ldr	r0, [r7, #0]
 800b5bc:	f00c f91d 	bl	80177fa <memcpy>
	}
}
 800b5c0:	bf00      	nop
 800b5c2:	3708      	adds	r7, #8
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}

0800b5c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b084      	sub	sp, #16
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b5d0:	f001 fda0 	bl	800d114 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b5da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b5dc:	e011      	b.n	800b602 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d012      	beq.n	800b60c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	3324      	adds	r3, #36	; 0x24
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f000 fd50 	bl	800c090 <xTaskRemoveFromEventList>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d001      	beq.n	800b5fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b5f6:	f000 fe4d 	bl	800c294 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b5fa:	7bfb      	ldrb	r3, [r7, #15]
 800b5fc:	3b01      	subs	r3, #1
 800b5fe:	b2db      	uxtb	r3, r3
 800b600:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b606:	2b00      	cmp	r3, #0
 800b608:	dce9      	bgt.n	800b5de <prvUnlockQueue+0x16>
 800b60a:	e000      	b.n	800b60e <prvUnlockQueue+0x46>
					break;
 800b60c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	22ff      	movs	r2, #255	; 0xff
 800b612:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b616:	f001 fdad 	bl	800d174 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b61a:	f001 fd7b 	bl	800d114 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b624:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b626:	e011      	b.n	800b64c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	691b      	ldr	r3, [r3, #16]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d012      	beq.n	800b656 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	3310      	adds	r3, #16
 800b634:	4618      	mov	r0, r3
 800b636:	f000 fd2b 	bl	800c090 <xTaskRemoveFromEventList>
 800b63a:	4603      	mov	r3, r0
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d001      	beq.n	800b644 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b640:	f000 fe28 	bl	800c294 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b644:	7bbb      	ldrb	r3, [r7, #14]
 800b646:	3b01      	subs	r3, #1
 800b648:	b2db      	uxtb	r3, r3
 800b64a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b64c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b650:	2b00      	cmp	r3, #0
 800b652:	dce9      	bgt.n	800b628 <prvUnlockQueue+0x60>
 800b654:	e000      	b.n	800b658 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b656:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	22ff      	movs	r2, #255	; 0xff
 800b65c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b660:	f001 fd88 	bl	800d174 <vPortExitCritical>
}
 800b664:	bf00      	nop
 800b666:	3710      	adds	r7, #16
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd80      	pop	{r7, pc}

0800b66c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b084      	sub	sp, #16
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b674:	f001 fd4e 	bl	800d114 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d102      	bne.n	800b686 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b680:	2301      	movs	r3, #1
 800b682:	60fb      	str	r3, [r7, #12]
 800b684:	e001      	b.n	800b68a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b686:	2300      	movs	r3, #0
 800b688:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b68a:	f001 fd73 	bl	800d174 <vPortExitCritical>

	return xReturn;
 800b68e:	68fb      	ldr	r3, [r7, #12]
}
 800b690:	4618      	mov	r0, r3
 800b692:	3710      	adds	r7, #16
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}

0800b698 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b084      	sub	sp, #16
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b6a0:	f001 fd38 	bl	800d114 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	d102      	bne.n	800b6b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b6b0:	2301      	movs	r3, #1
 800b6b2:	60fb      	str	r3, [r7, #12]
 800b6b4:	e001      	b.n	800b6ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b6ba:	f001 fd5b 	bl	800d174 <vPortExitCritical>

	return xReturn;
 800b6be:	68fb      	ldr	r3, [r7, #12]
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3710      	adds	r7, #16
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}

0800b6c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b085      	sub	sp, #20
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
 800b6d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	60fb      	str	r3, [r7, #12]
 800b6d6:	e014      	b.n	800b702 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b6d8:	4a0f      	ldr	r2, [pc, #60]	; (800b718 <vQueueAddToRegistry+0x50>)
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d10b      	bne.n	800b6fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b6e4:	490c      	ldr	r1, [pc, #48]	; (800b718 <vQueueAddToRegistry+0x50>)
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	683a      	ldr	r2, [r7, #0]
 800b6ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b6ee:	4a0a      	ldr	r2, [pc, #40]	; (800b718 <vQueueAddToRegistry+0x50>)
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	00db      	lsls	r3, r3, #3
 800b6f4:	4413      	add	r3, r2
 800b6f6:	687a      	ldr	r2, [r7, #4]
 800b6f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b6fa:	e006      	b.n	800b70a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	3301      	adds	r3, #1
 800b700:	60fb      	str	r3, [r7, #12]
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	2b07      	cmp	r3, #7
 800b706:	d9e7      	bls.n	800b6d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b708:	bf00      	nop
 800b70a:	bf00      	nop
 800b70c:	3714      	adds	r7, #20
 800b70e:	46bd      	mov	sp, r7
 800b710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b714:	4770      	bx	lr
 800b716:	bf00      	nop
 800b718:	2000548c 	.word	0x2000548c

0800b71c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b086      	sub	sp, #24
 800b720:	af00      	add	r7, sp, #0
 800b722:	60f8      	str	r0, [r7, #12]
 800b724:	60b9      	str	r1, [r7, #8]
 800b726:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b72c:	f001 fcf2 	bl	800d114 <vPortEnterCritical>
 800b730:	697b      	ldr	r3, [r7, #20]
 800b732:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b736:	b25b      	sxtb	r3, r3
 800b738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b73c:	d103      	bne.n	800b746 <vQueueWaitForMessageRestricted+0x2a>
 800b73e:	697b      	ldr	r3, [r7, #20]
 800b740:	2200      	movs	r2, #0
 800b742:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b746:	697b      	ldr	r3, [r7, #20]
 800b748:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b74c:	b25b      	sxtb	r3, r3
 800b74e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b752:	d103      	bne.n	800b75c <vQueueWaitForMessageRestricted+0x40>
 800b754:	697b      	ldr	r3, [r7, #20]
 800b756:	2200      	movs	r2, #0
 800b758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b75c:	f001 fd0a 	bl	800d174 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b764:	2b00      	cmp	r3, #0
 800b766:	d106      	bne.n	800b776 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b768:	697b      	ldr	r3, [r7, #20]
 800b76a:	3324      	adds	r3, #36	; 0x24
 800b76c:	687a      	ldr	r2, [r7, #4]
 800b76e:	68b9      	ldr	r1, [r7, #8]
 800b770:	4618      	mov	r0, r3
 800b772:	f000 fc61 	bl	800c038 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b776:	6978      	ldr	r0, [r7, #20]
 800b778:	f7ff ff26 	bl	800b5c8 <prvUnlockQueue>
	}
 800b77c:	bf00      	nop
 800b77e:	3718      	adds	r7, #24
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}

0800b784 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b784:	b580      	push	{r7, lr}
 800b786:	b08e      	sub	sp, #56	; 0x38
 800b788:	af04      	add	r7, sp, #16
 800b78a:	60f8      	str	r0, [r7, #12]
 800b78c:	60b9      	str	r1, [r7, #8]
 800b78e:	607a      	str	r2, [r7, #4]
 800b790:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b794:	2b00      	cmp	r3, #0
 800b796:	d10a      	bne.n	800b7ae <xTaskCreateStatic+0x2a>
	__asm volatile
 800b798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b79c:	f383 8811 	msr	BASEPRI, r3
 800b7a0:	f3bf 8f6f 	isb	sy
 800b7a4:	f3bf 8f4f 	dsb	sy
 800b7a8:	623b      	str	r3, [r7, #32]
}
 800b7aa:	bf00      	nop
 800b7ac:	e7fe      	b.n	800b7ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b7ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d10a      	bne.n	800b7ca <xTaskCreateStatic+0x46>
	__asm volatile
 800b7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b8:	f383 8811 	msr	BASEPRI, r3
 800b7bc:	f3bf 8f6f 	isb	sy
 800b7c0:	f3bf 8f4f 	dsb	sy
 800b7c4:	61fb      	str	r3, [r7, #28]
}
 800b7c6:	bf00      	nop
 800b7c8:	e7fe      	b.n	800b7c8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b7ca:	23a8      	movs	r3, #168	; 0xa8
 800b7cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b7ce:	693b      	ldr	r3, [r7, #16]
 800b7d0:	2ba8      	cmp	r3, #168	; 0xa8
 800b7d2:	d00a      	beq.n	800b7ea <xTaskCreateStatic+0x66>
	__asm volatile
 800b7d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7d8:	f383 8811 	msr	BASEPRI, r3
 800b7dc:	f3bf 8f6f 	isb	sy
 800b7e0:	f3bf 8f4f 	dsb	sy
 800b7e4:	61bb      	str	r3, [r7, #24]
}
 800b7e6:	bf00      	nop
 800b7e8:	e7fe      	b.n	800b7e8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b7ea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d01e      	beq.n	800b830 <xTaskCreateStatic+0xac>
 800b7f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d01b      	beq.n	800b830 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7fa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b800:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b804:	2202      	movs	r2, #2
 800b806:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b80a:	2300      	movs	r3, #0
 800b80c:	9303      	str	r3, [sp, #12]
 800b80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b810:	9302      	str	r3, [sp, #8]
 800b812:	f107 0314 	add.w	r3, r7, #20
 800b816:	9301      	str	r3, [sp, #4]
 800b818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b81a:	9300      	str	r3, [sp, #0]
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	687a      	ldr	r2, [r7, #4]
 800b820:	68b9      	ldr	r1, [r7, #8]
 800b822:	68f8      	ldr	r0, [r7, #12]
 800b824:	f000 f850 	bl	800b8c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b828:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b82a:	f000 f8f3 	bl	800ba14 <prvAddNewTaskToReadyList>
 800b82e:	e001      	b.n	800b834 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b830:	2300      	movs	r3, #0
 800b832:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b834:	697b      	ldr	r3, [r7, #20]
	}
 800b836:	4618      	mov	r0, r3
 800b838:	3728      	adds	r7, #40	; 0x28
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}

0800b83e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b83e:	b580      	push	{r7, lr}
 800b840:	b08c      	sub	sp, #48	; 0x30
 800b842:	af04      	add	r7, sp, #16
 800b844:	60f8      	str	r0, [r7, #12]
 800b846:	60b9      	str	r1, [r7, #8]
 800b848:	603b      	str	r3, [r7, #0]
 800b84a:	4613      	mov	r3, r2
 800b84c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b84e:	88fb      	ldrh	r3, [r7, #6]
 800b850:	009b      	lsls	r3, r3, #2
 800b852:	4618      	mov	r0, r3
 800b854:	f001 fd80 	bl	800d358 <pvPortMalloc>
 800b858:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d00e      	beq.n	800b87e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b860:	20a8      	movs	r0, #168	; 0xa8
 800b862:	f001 fd79 	bl	800d358 <pvPortMalloc>
 800b866:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b868:	69fb      	ldr	r3, [r7, #28]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d003      	beq.n	800b876 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b86e:	69fb      	ldr	r3, [r7, #28]
 800b870:	697a      	ldr	r2, [r7, #20]
 800b872:	631a      	str	r2, [r3, #48]	; 0x30
 800b874:	e005      	b.n	800b882 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b876:	6978      	ldr	r0, [r7, #20]
 800b878:	f001 fe3a 	bl	800d4f0 <vPortFree>
 800b87c:	e001      	b.n	800b882 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b87e:	2300      	movs	r3, #0
 800b880:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b882:	69fb      	ldr	r3, [r7, #28]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d017      	beq.n	800b8b8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b888:	69fb      	ldr	r3, [r7, #28]
 800b88a:	2200      	movs	r2, #0
 800b88c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b890:	88fa      	ldrh	r2, [r7, #6]
 800b892:	2300      	movs	r3, #0
 800b894:	9303      	str	r3, [sp, #12]
 800b896:	69fb      	ldr	r3, [r7, #28]
 800b898:	9302      	str	r3, [sp, #8]
 800b89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b89c:	9301      	str	r3, [sp, #4]
 800b89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a0:	9300      	str	r3, [sp, #0]
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	68b9      	ldr	r1, [r7, #8]
 800b8a6:	68f8      	ldr	r0, [r7, #12]
 800b8a8:	f000 f80e 	bl	800b8c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b8ac:	69f8      	ldr	r0, [r7, #28]
 800b8ae:	f000 f8b1 	bl	800ba14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	61bb      	str	r3, [r7, #24]
 800b8b6:	e002      	b.n	800b8be <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b8b8:	f04f 33ff 	mov.w	r3, #4294967295
 800b8bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b8be:	69bb      	ldr	r3, [r7, #24]
	}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	3720      	adds	r7, #32
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}

0800b8c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b088      	sub	sp, #32
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	60f8      	str	r0, [r7, #12]
 800b8d0:	60b9      	str	r1, [r7, #8]
 800b8d2:	607a      	str	r2, [r7, #4]
 800b8d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	009b      	lsls	r3, r3, #2
 800b8de:	461a      	mov	r2, r3
 800b8e0:	21a5      	movs	r1, #165	; 0xa5
 800b8e2:	f00b fe6b 	bl	80175bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b8f0:	3b01      	subs	r3, #1
 800b8f2:	009b      	lsls	r3, r3, #2
 800b8f4:	4413      	add	r3, r2
 800b8f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b8f8:	69bb      	ldr	r3, [r7, #24]
 800b8fa:	f023 0307 	bic.w	r3, r3, #7
 800b8fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b900:	69bb      	ldr	r3, [r7, #24]
 800b902:	f003 0307 	and.w	r3, r3, #7
 800b906:	2b00      	cmp	r3, #0
 800b908:	d00a      	beq.n	800b920 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b90a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b90e:	f383 8811 	msr	BASEPRI, r3
 800b912:	f3bf 8f6f 	isb	sy
 800b916:	f3bf 8f4f 	dsb	sy
 800b91a:	617b      	str	r3, [r7, #20]
}
 800b91c:	bf00      	nop
 800b91e:	e7fe      	b.n	800b91e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d01f      	beq.n	800b966 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b926:	2300      	movs	r3, #0
 800b928:	61fb      	str	r3, [r7, #28]
 800b92a:	e012      	b.n	800b952 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b92c:	68ba      	ldr	r2, [r7, #8]
 800b92e:	69fb      	ldr	r3, [r7, #28]
 800b930:	4413      	add	r3, r2
 800b932:	7819      	ldrb	r1, [r3, #0]
 800b934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b936:	69fb      	ldr	r3, [r7, #28]
 800b938:	4413      	add	r3, r2
 800b93a:	3334      	adds	r3, #52	; 0x34
 800b93c:	460a      	mov	r2, r1
 800b93e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b940:	68ba      	ldr	r2, [r7, #8]
 800b942:	69fb      	ldr	r3, [r7, #28]
 800b944:	4413      	add	r3, r2
 800b946:	781b      	ldrb	r3, [r3, #0]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d006      	beq.n	800b95a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b94c:	69fb      	ldr	r3, [r7, #28]
 800b94e:	3301      	adds	r3, #1
 800b950:	61fb      	str	r3, [r7, #28]
 800b952:	69fb      	ldr	r3, [r7, #28]
 800b954:	2b0f      	cmp	r3, #15
 800b956:	d9e9      	bls.n	800b92c <prvInitialiseNewTask+0x64>
 800b958:	e000      	b.n	800b95c <prvInitialiseNewTask+0x94>
			{
				break;
 800b95a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b95c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b95e:	2200      	movs	r2, #0
 800b960:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b964:	e003      	b.n	800b96e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b968:	2200      	movs	r2, #0
 800b96a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b96e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b970:	2b37      	cmp	r3, #55	; 0x37
 800b972:	d901      	bls.n	800b978 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b974:	2337      	movs	r3, #55	; 0x37
 800b976:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b97a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b97c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b980:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b982:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b986:	2200      	movs	r2, #0
 800b988:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b98c:	3304      	adds	r3, #4
 800b98e:	4618      	mov	r0, r3
 800b990:	f7ff f81a 	bl	800a9c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b996:	3318      	adds	r3, #24
 800b998:	4618      	mov	r0, r3
 800b99a:	f7ff f815 	bl	800a9c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b9aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9be:	2200      	movs	r2, #0
 800b9c0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c6:	3354      	adds	r3, #84	; 0x54
 800b9c8:	224c      	movs	r2, #76	; 0x4c
 800b9ca:	2100      	movs	r1, #0
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f00b fdf5 	bl	80175bc <memset>
 800b9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9d4:	4a0c      	ldr	r2, [pc, #48]	; (800ba08 <prvInitialiseNewTask+0x140>)
 800b9d6:	659a      	str	r2, [r3, #88]	; 0x58
 800b9d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9da:	4a0c      	ldr	r2, [pc, #48]	; (800ba0c <prvInitialiseNewTask+0x144>)
 800b9dc:	65da      	str	r2, [r3, #92]	; 0x5c
 800b9de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9e0:	4a0b      	ldr	r2, [pc, #44]	; (800ba10 <prvInitialiseNewTask+0x148>)
 800b9e2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b9e4:	683a      	ldr	r2, [r7, #0]
 800b9e6:	68f9      	ldr	r1, [r7, #12]
 800b9e8:	69b8      	ldr	r0, [r7, #24]
 800b9ea:	f001 fa65 	bl	800ceb8 <pxPortInitialiseStack>
 800b9ee:	4602      	mov	r2, r0
 800b9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d002      	beq.n	800ba00 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b9fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9fe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba00:	bf00      	nop
 800ba02:	3720      	adds	r7, #32
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}
 800ba08:	20009d18 	.word	0x20009d18
 800ba0c:	20009d80 	.word	0x20009d80
 800ba10:	20009de8 	.word	0x20009de8

0800ba14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b082      	sub	sp, #8
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ba1c:	f001 fb7a 	bl	800d114 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ba20:	4b2d      	ldr	r3, [pc, #180]	; (800bad8 <prvAddNewTaskToReadyList+0xc4>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	3301      	adds	r3, #1
 800ba26:	4a2c      	ldr	r2, [pc, #176]	; (800bad8 <prvAddNewTaskToReadyList+0xc4>)
 800ba28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ba2a:	4b2c      	ldr	r3, [pc, #176]	; (800badc <prvAddNewTaskToReadyList+0xc8>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d109      	bne.n	800ba46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ba32:	4a2a      	ldr	r2, [pc, #168]	; (800badc <prvAddNewTaskToReadyList+0xc8>)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ba38:	4b27      	ldr	r3, [pc, #156]	; (800bad8 <prvAddNewTaskToReadyList+0xc4>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	2b01      	cmp	r3, #1
 800ba3e:	d110      	bne.n	800ba62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ba40:	f000 fc4c 	bl	800c2dc <prvInitialiseTaskLists>
 800ba44:	e00d      	b.n	800ba62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ba46:	4b26      	ldr	r3, [pc, #152]	; (800bae0 <prvAddNewTaskToReadyList+0xcc>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d109      	bne.n	800ba62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ba4e:	4b23      	ldr	r3, [pc, #140]	; (800badc <prvAddNewTaskToReadyList+0xc8>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	d802      	bhi.n	800ba62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ba5c:	4a1f      	ldr	r2, [pc, #124]	; (800badc <prvAddNewTaskToReadyList+0xc8>)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ba62:	4b20      	ldr	r3, [pc, #128]	; (800bae4 <prvAddNewTaskToReadyList+0xd0>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	3301      	adds	r3, #1
 800ba68:	4a1e      	ldr	r2, [pc, #120]	; (800bae4 <prvAddNewTaskToReadyList+0xd0>)
 800ba6a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ba6c:	4b1d      	ldr	r3, [pc, #116]	; (800bae4 <prvAddNewTaskToReadyList+0xd0>)
 800ba6e:	681a      	ldr	r2, [r3, #0]
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba78:	4b1b      	ldr	r3, [pc, #108]	; (800bae8 <prvAddNewTaskToReadyList+0xd4>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d903      	bls.n	800ba88 <prvAddNewTaskToReadyList+0x74>
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba84:	4a18      	ldr	r2, [pc, #96]	; (800bae8 <prvAddNewTaskToReadyList+0xd4>)
 800ba86:	6013      	str	r3, [r2, #0]
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba8c:	4613      	mov	r3, r2
 800ba8e:	009b      	lsls	r3, r3, #2
 800ba90:	4413      	add	r3, r2
 800ba92:	009b      	lsls	r3, r3, #2
 800ba94:	4a15      	ldr	r2, [pc, #84]	; (800baec <prvAddNewTaskToReadyList+0xd8>)
 800ba96:	441a      	add	r2, r3
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	3304      	adds	r3, #4
 800ba9c:	4619      	mov	r1, r3
 800ba9e:	4610      	mov	r0, r2
 800baa0:	f7fe ff9f 	bl	800a9e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800baa4:	f001 fb66 	bl	800d174 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800baa8:	4b0d      	ldr	r3, [pc, #52]	; (800bae0 <prvAddNewTaskToReadyList+0xcc>)
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d00e      	beq.n	800bace <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bab0:	4b0a      	ldr	r3, [pc, #40]	; (800badc <prvAddNewTaskToReadyList+0xc8>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baba:	429a      	cmp	r2, r3
 800babc:	d207      	bcs.n	800bace <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800babe:	4b0c      	ldr	r3, [pc, #48]	; (800baf0 <prvAddNewTaskToReadyList+0xdc>)
 800bac0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bac4:	601a      	str	r2, [r3, #0]
 800bac6:	f3bf 8f4f 	dsb	sy
 800baca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bace:	bf00      	nop
 800bad0:	3708      	adds	r7, #8
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd80      	pop	{r7, pc}
 800bad6:	bf00      	nop
 800bad8:	200059a0 	.word	0x200059a0
 800badc:	200054cc 	.word	0x200054cc
 800bae0:	200059ac 	.word	0x200059ac
 800bae4:	200059bc 	.word	0x200059bc
 800bae8:	200059a8 	.word	0x200059a8
 800baec:	200054d0 	.word	0x200054d0
 800baf0:	e000ed04 	.word	0xe000ed04

0800baf4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b084      	sub	sp, #16
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bafc:	2300      	movs	r3, #0
 800bafe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d017      	beq.n	800bb36 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bb06:	4b13      	ldr	r3, [pc, #76]	; (800bb54 <vTaskDelay+0x60>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d00a      	beq.n	800bb24 <vTaskDelay+0x30>
	__asm volatile
 800bb0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb12:	f383 8811 	msr	BASEPRI, r3
 800bb16:	f3bf 8f6f 	isb	sy
 800bb1a:	f3bf 8f4f 	dsb	sy
 800bb1e:	60bb      	str	r3, [r7, #8]
}
 800bb20:	bf00      	nop
 800bb22:	e7fe      	b.n	800bb22 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bb24:	f000 f88a 	bl	800bc3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bb28:	2100      	movs	r1, #0
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f000 fe22 	bl	800c774 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bb30:	f000 f892 	bl	800bc58 <xTaskResumeAll>
 800bb34:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d107      	bne.n	800bb4c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800bb3c:	4b06      	ldr	r3, [pc, #24]	; (800bb58 <vTaskDelay+0x64>)
 800bb3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb42:	601a      	str	r2, [r3, #0]
 800bb44:	f3bf 8f4f 	dsb	sy
 800bb48:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bb4c:	bf00      	nop
 800bb4e:	3710      	adds	r7, #16
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bd80      	pop	{r7, pc}
 800bb54:	200059c8 	.word	0x200059c8
 800bb58:	e000ed04 	.word	0xe000ed04

0800bb5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b08a      	sub	sp, #40	; 0x28
 800bb60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bb62:	2300      	movs	r3, #0
 800bb64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bb66:	2300      	movs	r3, #0
 800bb68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bb6a:	463a      	mov	r2, r7
 800bb6c:	1d39      	adds	r1, r7, #4
 800bb6e:	f107 0308 	add.w	r3, r7, #8
 800bb72:	4618      	mov	r0, r3
 800bb74:	f7fe fed4 	bl	800a920 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bb78:	6839      	ldr	r1, [r7, #0]
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	68ba      	ldr	r2, [r7, #8]
 800bb7e:	9202      	str	r2, [sp, #8]
 800bb80:	9301      	str	r3, [sp, #4]
 800bb82:	2300      	movs	r3, #0
 800bb84:	9300      	str	r3, [sp, #0]
 800bb86:	2300      	movs	r3, #0
 800bb88:	460a      	mov	r2, r1
 800bb8a:	4924      	ldr	r1, [pc, #144]	; (800bc1c <vTaskStartScheduler+0xc0>)
 800bb8c:	4824      	ldr	r0, [pc, #144]	; (800bc20 <vTaskStartScheduler+0xc4>)
 800bb8e:	f7ff fdf9 	bl	800b784 <xTaskCreateStatic>
 800bb92:	4603      	mov	r3, r0
 800bb94:	4a23      	ldr	r2, [pc, #140]	; (800bc24 <vTaskStartScheduler+0xc8>)
 800bb96:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bb98:	4b22      	ldr	r3, [pc, #136]	; (800bc24 <vTaskStartScheduler+0xc8>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d002      	beq.n	800bba6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bba0:	2301      	movs	r3, #1
 800bba2:	617b      	str	r3, [r7, #20]
 800bba4:	e001      	b.n	800bbaa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bba6:	2300      	movs	r3, #0
 800bba8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	2b01      	cmp	r3, #1
 800bbae:	d102      	bne.n	800bbb6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bbb0:	f000 fe34 	bl	800c81c <xTimerCreateTimerTask>
 800bbb4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	2b01      	cmp	r3, #1
 800bbba:	d11b      	bne.n	800bbf4 <vTaskStartScheduler+0x98>
	__asm volatile
 800bbbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc0:	f383 8811 	msr	BASEPRI, r3
 800bbc4:	f3bf 8f6f 	isb	sy
 800bbc8:	f3bf 8f4f 	dsb	sy
 800bbcc:	613b      	str	r3, [r7, #16]
}
 800bbce:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bbd0:	4b15      	ldr	r3, [pc, #84]	; (800bc28 <vTaskStartScheduler+0xcc>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	3354      	adds	r3, #84	; 0x54
 800bbd6:	4a15      	ldr	r2, [pc, #84]	; (800bc2c <vTaskStartScheduler+0xd0>)
 800bbd8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bbda:	4b15      	ldr	r3, [pc, #84]	; (800bc30 <vTaskStartScheduler+0xd4>)
 800bbdc:	f04f 32ff 	mov.w	r2, #4294967295
 800bbe0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bbe2:	4b14      	ldr	r3, [pc, #80]	; (800bc34 <vTaskStartScheduler+0xd8>)
 800bbe4:	2201      	movs	r2, #1
 800bbe6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bbe8:	4b13      	ldr	r3, [pc, #76]	; (800bc38 <vTaskStartScheduler+0xdc>)
 800bbea:	2200      	movs	r2, #0
 800bbec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bbee:	f001 f9ef 	bl	800cfd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bbf2:	e00e      	b.n	800bc12 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bbf4:	697b      	ldr	r3, [r7, #20]
 800bbf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbfa:	d10a      	bne.n	800bc12 <vTaskStartScheduler+0xb6>
	__asm volatile
 800bbfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc00:	f383 8811 	msr	BASEPRI, r3
 800bc04:	f3bf 8f6f 	isb	sy
 800bc08:	f3bf 8f4f 	dsb	sy
 800bc0c:	60fb      	str	r3, [r7, #12]
}
 800bc0e:	bf00      	nop
 800bc10:	e7fe      	b.n	800bc10 <vTaskStartScheduler+0xb4>
}
 800bc12:	bf00      	nop
 800bc14:	3718      	adds	r7, #24
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}
 800bc1a:	bf00      	nop
 800bc1c:	08018768 	.word	0x08018768
 800bc20:	0800c2ad 	.word	0x0800c2ad
 800bc24:	200059c4 	.word	0x200059c4
 800bc28:	200054cc 	.word	0x200054cc
 800bc2c:	200000d4 	.word	0x200000d4
 800bc30:	200059c0 	.word	0x200059c0
 800bc34:	200059ac 	.word	0x200059ac
 800bc38:	200059a4 	.word	0x200059a4

0800bc3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bc40:	4b04      	ldr	r3, [pc, #16]	; (800bc54 <vTaskSuspendAll+0x18>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	3301      	adds	r3, #1
 800bc46:	4a03      	ldr	r2, [pc, #12]	; (800bc54 <vTaskSuspendAll+0x18>)
 800bc48:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bc4a:	bf00      	nop
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc52:	4770      	bx	lr
 800bc54:	200059c8 	.word	0x200059c8

0800bc58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b084      	sub	sp, #16
 800bc5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bc62:	2300      	movs	r3, #0
 800bc64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bc66:	4b42      	ldr	r3, [pc, #264]	; (800bd70 <xTaskResumeAll+0x118>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d10a      	bne.n	800bc84 <xTaskResumeAll+0x2c>
	__asm volatile
 800bc6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc72:	f383 8811 	msr	BASEPRI, r3
 800bc76:	f3bf 8f6f 	isb	sy
 800bc7a:	f3bf 8f4f 	dsb	sy
 800bc7e:	603b      	str	r3, [r7, #0]
}
 800bc80:	bf00      	nop
 800bc82:	e7fe      	b.n	800bc82 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bc84:	f001 fa46 	bl	800d114 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bc88:	4b39      	ldr	r3, [pc, #228]	; (800bd70 <xTaskResumeAll+0x118>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	3b01      	subs	r3, #1
 800bc8e:	4a38      	ldr	r2, [pc, #224]	; (800bd70 <xTaskResumeAll+0x118>)
 800bc90:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc92:	4b37      	ldr	r3, [pc, #220]	; (800bd70 <xTaskResumeAll+0x118>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d162      	bne.n	800bd60 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bc9a:	4b36      	ldr	r3, [pc, #216]	; (800bd74 <xTaskResumeAll+0x11c>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d05e      	beq.n	800bd60 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bca2:	e02f      	b.n	800bd04 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bca4:	4b34      	ldr	r3, [pc, #208]	; (800bd78 <xTaskResumeAll+0x120>)
 800bca6:	68db      	ldr	r3, [r3, #12]
 800bca8:	68db      	ldr	r3, [r3, #12]
 800bcaa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	3318      	adds	r3, #24
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	f7fe fef3 	bl	800aa9c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	3304      	adds	r3, #4
 800bcba:	4618      	mov	r0, r3
 800bcbc:	f7fe feee 	bl	800aa9c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcc4:	4b2d      	ldr	r3, [pc, #180]	; (800bd7c <xTaskResumeAll+0x124>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	429a      	cmp	r2, r3
 800bcca:	d903      	bls.n	800bcd4 <xTaskResumeAll+0x7c>
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcd0:	4a2a      	ldr	r2, [pc, #168]	; (800bd7c <xTaskResumeAll+0x124>)
 800bcd2:	6013      	str	r3, [r2, #0]
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcd8:	4613      	mov	r3, r2
 800bcda:	009b      	lsls	r3, r3, #2
 800bcdc:	4413      	add	r3, r2
 800bcde:	009b      	lsls	r3, r3, #2
 800bce0:	4a27      	ldr	r2, [pc, #156]	; (800bd80 <xTaskResumeAll+0x128>)
 800bce2:	441a      	add	r2, r3
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	3304      	adds	r3, #4
 800bce8:	4619      	mov	r1, r3
 800bcea:	4610      	mov	r0, r2
 800bcec:	f7fe fe79 	bl	800a9e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcf4:	4b23      	ldr	r3, [pc, #140]	; (800bd84 <xTaskResumeAll+0x12c>)
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcfa:	429a      	cmp	r2, r3
 800bcfc:	d302      	bcc.n	800bd04 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800bcfe:	4b22      	ldr	r3, [pc, #136]	; (800bd88 <xTaskResumeAll+0x130>)
 800bd00:	2201      	movs	r2, #1
 800bd02:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bd04:	4b1c      	ldr	r3, [pc, #112]	; (800bd78 <xTaskResumeAll+0x120>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d1cb      	bne.n	800bca4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d001      	beq.n	800bd16 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bd12:	f000 fb85 	bl	800c420 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bd16:	4b1d      	ldr	r3, [pc, #116]	; (800bd8c <xTaskResumeAll+0x134>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d010      	beq.n	800bd44 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bd22:	f000 f847 	bl	800bdb4 <xTaskIncrementTick>
 800bd26:	4603      	mov	r3, r0
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d002      	beq.n	800bd32 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bd2c:	4b16      	ldr	r3, [pc, #88]	; (800bd88 <xTaskResumeAll+0x130>)
 800bd2e:	2201      	movs	r2, #1
 800bd30:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	3b01      	subs	r3, #1
 800bd36:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d1f1      	bne.n	800bd22 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800bd3e:	4b13      	ldr	r3, [pc, #76]	; (800bd8c <xTaskResumeAll+0x134>)
 800bd40:	2200      	movs	r2, #0
 800bd42:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bd44:	4b10      	ldr	r3, [pc, #64]	; (800bd88 <xTaskResumeAll+0x130>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d009      	beq.n	800bd60 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bd4c:	2301      	movs	r3, #1
 800bd4e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bd50:	4b0f      	ldr	r3, [pc, #60]	; (800bd90 <xTaskResumeAll+0x138>)
 800bd52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd56:	601a      	str	r2, [r3, #0]
 800bd58:	f3bf 8f4f 	dsb	sy
 800bd5c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bd60:	f001 fa08 	bl	800d174 <vPortExitCritical>

	return xAlreadyYielded;
 800bd64:	68bb      	ldr	r3, [r7, #8]
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	3710      	adds	r7, #16
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}
 800bd6e:	bf00      	nop
 800bd70:	200059c8 	.word	0x200059c8
 800bd74:	200059a0 	.word	0x200059a0
 800bd78:	20005960 	.word	0x20005960
 800bd7c:	200059a8 	.word	0x200059a8
 800bd80:	200054d0 	.word	0x200054d0
 800bd84:	200054cc 	.word	0x200054cc
 800bd88:	200059b4 	.word	0x200059b4
 800bd8c:	200059b0 	.word	0x200059b0
 800bd90:	e000ed04 	.word	0xe000ed04

0800bd94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bd94:	b480      	push	{r7}
 800bd96:	b083      	sub	sp, #12
 800bd98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bd9a:	4b05      	ldr	r3, [pc, #20]	; (800bdb0 <xTaskGetTickCount+0x1c>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bda0:	687b      	ldr	r3, [r7, #4]
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	370c      	adds	r7, #12
 800bda6:	46bd      	mov	sp, r7
 800bda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdac:	4770      	bx	lr
 800bdae:	bf00      	nop
 800bdb0:	200059a4 	.word	0x200059a4

0800bdb4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b086      	sub	sp, #24
 800bdb8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bdba:	2300      	movs	r3, #0
 800bdbc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bdbe:	4b4f      	ldr	r3, [pc, #316]	; (800befc <xTaskIncrementTick+0x148>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	f040 808f 	bne.w	800bee6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bdc8:	4b4d      	ldr	r3, [pc, #308]	; (800bf00 <xTaskIncrementTick+0x14c>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	3301      	adds	r3, #1
 800bdce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bdd0:	4a4b      	ldr	r2, [pc, #300]	; (800bf00 <xTaskIncrementTick+0x14c>)
 800bdd2:	693b      	ldr	r3, [r7, #16]
 800bdd4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bdd6:	693b      	ldr	r3, [r7, #16]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d120      	bne.n	800be1e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bddc:	4b49      	ldr	r3, [pc, #292]	; (800bf04 <xTaskIncrementTick+0x150>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d00a      	beq.n	800bdfc <xTaskIncrementTick+0x48>
	__asm volatile
 800bde6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdea:	f383 8811 	msr	BASEPRI, r3
 800bdee:	f3bf 8f6f 	isb	sy
 800bdf2:	f3bf 8f4f 	dsb	sy
 800bdf6:	603b      	str	r3, [r7, #0]
}
 800bdf8:	bf00      	nop
 800bdfa:	e7fe      	b.n	800bdfa <xTaskIncrementTick+0x46>
 800bdfc:	4b41      	ldr	r3, [pc, #260]	; (800bf04 <xTaskIncrementTick+0x150>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	60fb      	str	r3, [r7, #12]
 800be02:	4b41      	ldr	r3, [pc, #260]	; (800bf08 <xTaskIncrementTick+0x154>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	4a3f      	ldr	r2, [pc, #252]	; (800bf04 <xTaskIncrementTick+0x150>)
 800be08:	6013      	str	r3, [r2, #0]
 800be0a:	4a3f      	ldr	r2, [pc, #252]	; (800bf08 <xTaskIncrementTick+0x154>)
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	6013      	str	r3, [r2, #0]
 800be10:	4b3e      	ldr	r3, [pc, #248]	; (800bf0c <xTaskIncrementTick+0x158>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	3301      	adds	r3, #1
 800be16:	4a3d      	ldr	r2, [pc, #244]	; (800bf0c <xTaskIncrementTick+0x158>)
 800be18:	6013      	str	r3, [r2, #0]
 800be1a:	f000 fb01 	bl	800c420 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800be1e:	4b3c      	ldr	r3, [pc, #240]	; (800bf10 <xTaskIncrementTick+0x15c>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	693a      	ldr	r2, [r7, #16]
 800be24:	429a      	cmp	r2, r3
 800be26:	d349      	bcc.n	800bebc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be28:	4b36      	ldr	r3, [pc, #216]	; (800bf04 <xTaskIncrementTick+0x150>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d104      	bne.n	800be3c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be32:	4b37      	ldr	r3, [pc, #220]	; (800bf10 <xTaskIncrementTick+0x15c>)
 800be34:	f04f 32ff 	mov.w	r2, #4294967295
 800be38:	601a      	str	r2, [r3, #0]
					break;
 800be3a:	e03f      	b.n	800bebc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be3c:	4b31      	ldr	r3, [pc, #196]	; (800bf04 <xTaskIncrementTick+0x150>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	68db      	ldr	r3, [r3, #12]
 800be42:	68db      	ldr	r3, [r3, #12]
 800be44:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	685b      	ldr	r3, [r3, #4]
 800be4a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800be4c:	693a      	ldr	r2, [r7, #16]
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	429a      	cmp	r2, r3
 800be52:	d203      	bcs.n	800be5c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800be54:	4a2e      	ldr	r2, [pc, #184]	; (800bf10 <xTaskIncrementTick+0x15c>)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800be5a:	e02f      	b.n	800bebc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	3304      	adds	r3, #4
 800be60:	4618      	mov	r0, r3
 800be62:	f7fe fe1b 	bl	800aa9c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d004      	beq.n	800be78 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	3318      	adds	r3, #24
 800be72:	4618      	mov	r0, r3
 800be74:	f7fe fe12 	bl	800aa9c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be7c:	4b25      	ldr	r3, [pc, #148]	; (800bf14 <xTaskIncrementTick+0x160>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	429a      	cmp	r2, r3
 800be82:	d903      	bls.n	800be8c <xTaskIncrementTick+0xd8>
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be88:	4a22      	ldr	r2, [pc, #136]	; (800bf14 <xTaskIncrementTick+0x160>)
 800be8a:	6013      	str	r3, [r2, #0]
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be90:	4613      	mov	r3, r2
 800be92:	009b      	lsls	r3, r3, #2
 800be94:	4413      	add	r3, r2
 800be96:	009b      	lsls	r3, r3, #2
 800be98:	4a1f      	ldr	r2, [pc, #124]	; (800bf18 <xTaskIncrementTick+0x164>)
 800be9a:	441a      	add	r2, r3
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	3304      	adds	r3, #4
 800bea0:	4619      	mov	r1, r3
 800bea2:	4610      	mov	r0, r2
 800bea4:	f7fe fd9d 	bl	800a9e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800beac:	4b1b      	ldr	r3, [pc, #108]	; (800bf1c <xTaskIncrementTick+0x168>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beb2:	429a      	cmp	r2, r3
 800beb4:	d3b8      	bcc.n	800be28 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800beb6:	2301      	movs	r3, #1
 800beb8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800beba:	e7b5      	b.n	800be28 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bebc:	4b17      	ldr	r3, [pc, #92]	; (800bf1c <xTaskIncrementTick+0x168>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bec2:	4915      	ldr	r1, [pc, #84]	; (800bf18 <xTaskIncrementTick+0x164>)
 800bec4:	4613      	mov	r3, r2
 800bec6:	009b      	lsls	r3, r3, #2
 800bec8:	4413      	add	r3, r2
 800beca:	009b      	lsls	r3, r3, #2
 800becc:	440b      	add	r3, r1
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	2b01      	cmp	r3, #1
 800bed2:	d901      	bls.n	800bed8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bed4:	2301      	movs	r3, #1
 800bed6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bed8:	4b11      	ldr	r3, [pc, #68]	; (800bf20 <xTaskIncrementTick+0x16c>)
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d007      	beq.n	800bef0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bee0:	2301      	movs	r3, #1
 800bee2:	617b      	str	r3, [r7, #20]
 800bee4:	e004      	b.n	800bef0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bee6:	4b0f      	ldr	r3, [pc, #60]	; (800bf24 <xTaskIncrementTick+0x170>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	3301      	adds	r3, #1
 800beec:	4a0d      	ldr	r2, [pc, #52]	; (800bf24 <xTaskIncrementTick+0x170>)
 800beee:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bef0:	697b      	ldr	r3, [r7, #20]
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	3718      	adds	r7, #24
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}
 800befa:	bf00      	nop
 800befc:	200059c8 	.word	0x200059c8
 800bf00:	200059a4 	.word	0x200059a4
 800bf04:	20005958 	.word	0x20005958
 800bf08:	2000595c 	.word	0x2000595c
 800bf0c:	200059b8 	.word	0x200059b8
 800bf10:	200059c0 	.word	0x200059c0
 800bf14:	200059a8 	.word	0x200059a8
 800bf18:	200054d0 	.word	0x200054d0
 800bf1c:	200054cc 	.word	0x200054cc
 800bf20:	200059b4 	.word	0x200059b4
 800bf24:	200059b0 	.word	0x200059b0

0800bf28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bf28:	b480      	push	{r7}
 800bf2a:	b085      	sub	sp, #20
 800bf2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bf2e:	4b2a      	ldr	r3, [pc, #168]	; (800bfd8 <vTaskSwitchContext+0xb0>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d003      	beq.n	800bf3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bf36:	4b29      	ldr	r3, [pc, #164]	; (800bfdc <vTaskSwitchContext+0xb4>)
 800bf38:	2201      	movs	r2, #1
 800bf3a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bf3c:	e046      	b.n	800bfcc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800bf3e:	4b27      	ldr	r3, [pc, #156]	; (800bfdc <vTaskSwitchContext+0xb4>)
 800bf40:	2200      	movs	r2, #0
 800bf42:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf44:	4b26      	ldr	r3, [pc, #152]	; (800bfe0 <vTaskSwitchContext+0xb8>)
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	60fb      	str	r3, [r7, #12]
 800bf4a:	e010      	b.n	800bf6e <vTaskSwitchContext+0x46>
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d10a      	bne.n	800bf68 <vTaskSwitchContext+0x40>
	__asm volatile
 800bf52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf56:	f383 8811 	msr	BASEPRI, r3
 800bf5a:	f3bf 8f6f 	isb	sy
 800bf5e:	f3bf 8f4f 	dsb	sy
 800bf62:	607b      	str	r3, [r7, #4]
}
 800bf64:	bf00      	nop
 800bf66:	e7fe      	b.n	800bf66 <vTaskSwitchContext+0x3e>
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	3b01      	subs	r3, #1
 800bf6c:	60fb      	str	r3, [r7, #12]
 800bf6e:	491d      	ldr	r1, [pc, #116]	; (800bfe4 <vTaskSwitchContext+0xbc>)
 800bf70:	68fa      	ldr	r2, [r7, #12]
 800bf72:	4613      	mov	r3, r2
 800bf74:	009b      	lsls	r3, r3, #2
 800bf76:	4413      	add	r3, r2
 800bf78:	009b      	lsls	r3, r3, #2
 800bf7a:	440b      	add	r3, r1
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d0e4      	beq.n	800bf4c <vTaskSwitchContext+0x24>
 800bf82:	68fa      	ldr	r2, [r7, #12]
 800bf84:	4613      	mov	r3, r2
 800bf86:	009b      	lsls	r3, r3, #2
 800bf88:	4413      	add	r3, r2
 800bf8a:	009b      	lsls	r3, r3, #2
 800bf8c:	4a15      	ldr	r2, [pc, #84]	; (800bfe4 <vTaskSwitchContext+0xbc>)
 800bf8e:	4413      	add	r3, r2
 800bf90:	60bb      	str	r3, [r7, #8]
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	685b      	ldr	r3, [r3, #4]
 800bf96:	685a      	ldr	r2, [r3, #4]
 800bf98:	68bb      	ldr	r3, [r7, #8]
 800bf9a:	605a      	str	r2, [r3, #4]
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	685a      	ldr	r2, [r3, #4]
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	3308      	adds	r3, #8
 800bfa4:	429a      	cmp	r2, r3
 800bfa6:	d104      	bne.n	800bfb2 <vTaskSwitchContext+0x8a>
 800bfa8:	68bb      	ldr	r3, [r7, #8]
 800bfaa:	685b      	ldr	r3, [r3, #4]
 800bfac:	685a      	ldr	r2, [r3, #4]
 800bfae:	68bb      	ldr	r3, [r7, #8]
 800bfb0:	605a      	str	r2, [r3, #4]
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	685b      	ldr	r3, [r3, #4]
 800bfb6:	68db      	ldr	r3, [r3, #12]
 800bfb8:	4a0b      	ldr	r2, [pc, #44]	; (800bfe8 <vTaskSwitchContext+0xc0>)
 800bfba:	6013      	str	r3, [r2, #0]
 800bfbc:	4a08      	ldr	r2, [pc, #32]	; (800bfe0 <vTaskSwitchContext+0xb8>)
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bfc2:	4b09      	ldr	r3, [pc, #36]	; (800bfe8 <vTaskSwitchContext+0xc0>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	3354      	adds	r3, #84	; 0x54
 800bfc8:	4a08      	ldr	r2, [pc, #32]	; (800bfec <vTaskSwitchContext+0xc4>)
 800bfca:	6013      	str	r3, [r2, #0]
}
 800bfcc:	bf00      	nop
 800bfce:	3714      	adds	r7, #20
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd6:	4770      	bx	lr
 800bfd8:	200059c8 	.word	0x200059c8
 800bfdc:	200059b4 	.word	0x200059b4
 800bfe0:	200059a8 	.word	0x200059a8
 800bfe4:	200054d0 	.word	0x200054d0
 800bfe8:	200054cc 	.word	0x200054cc
 800bfec:	200000d4 	.word	0x200000d4

0800bff0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b084      	sub	sp, #16
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
 800bff8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d10a      	bne.n	800c016 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c004:	f383 8811 	msr	BASEPRI, r3
 800c008:	f3bf 8f6f 	isb	sy
 800c00c:	f3bf 8f4f 	dsb	sy
 800c010:	60fb      	str	r3, [r7, #12]
}
 800c012:	bf00      	nop
 800c014:	e7fe      	b.n	800c014 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c016:	4b07      	ldr	r3, [pc, #28]	; (800c034 <vTaskPlaceOnEventList+0x44>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	3318      	adds	r3, #24
 800c01c:	4619      	mov	r1, r3
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f7fe fd03 	bl	800aa2a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c024:	2101      	movs	r1, #1
 800c026:	6838      	ldr	r0, [r7, #0]
 800c028:	f000 fba4 	bl	800c774 <prvAddCurrentTaskToDelayedList>
}
 800c02c:	bf00      	nop
 800c02e:	3710      	adds	r7, #16
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}
 800c034:	200054cc 	.word	0x200054cc

0800c038 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b086      	sub	sp, #24
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	60f8      	str	r0, [r7, #12]
 800c040:	60b9      	str	r1, [r7, #8]
 800c042:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d10a      	bne.n	800c060 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c04e:	f383 8811 	msr	BASEPRI, r3
 800c052:	f3bf 8f6f 	isb	sy
 800c056:	f3bf 8f4f 	dsb	sy
 800c05a:	617b      	str	r3, [r7, #20]
}
 800c05c:	bf00      	nop
 800c05e:	e7fe      	b.n	800c05e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c060:	4b0a      	ldr	r3, [pc, #40]	; (800c08c <vTaskPlaceOnEventListRestricted+0x54>)
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	3318      	adds	r3, #24
 800c066:	4619      	mov	r1, r3
 800c068:	68f8      	ldr	r0, [r7, #12]
 800c06a:	f7fe fcba 	bl	800a9e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d002      	beq.n	800c07a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c074:	f04f 33ff 	mov.w	r3, #4294967295
 800c078:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c07a:	6879      	ldr	r1, [r7, #4]
 800c07c:	68b8      	ldr	r0, [r7, #8]
 800c07e:	f000 fb79 	bl	800c774 <prvAddCurrentTaskToDelayedList>
	}
 800c082:	bf00      	nop
 800c084:	3718      	adds	r7, #24
 800c086:	46bd      	mov	sp, r7
 800c088:	bd80      	pop	{r7, pc}
 800c08a:	bf00      	nop
 800c08c:	200054cc 	.word	0x200054cc

0800c090 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b086      	sub	sp, #24
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	68db      	ldr	r3, [r3, #12]
 800c09c:	68db      	ldr	r3, [r3, #12]
 800c09e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c0a0:	693b      	ldr	r3, [r7, #16]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d10a      	bne.n	800c0bc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c0a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0aa:	f383 8811 	msr	BASEPRI, r3
 800c0ae:	f3bf 8f6f 	isb	sy
 800c0b2:	f3bf 8f4f 	dsb	sy
 800c0b6:	60fb      	str	r3, [r7, #12]
}
 800c0b8:	bf00      	nop
 800c0ba:	e7fe      	b.n	800c0ba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c0bc:	693b      	ldr	r3, [r7, #16]
 800c0be:	3318      	adds	r3, #24
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	f7fe fceb 	bl	800aa9c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0c6:	4b1e      	ldr	r3, [pc, #120]	; (800c140 <xTaskRemoveFromEventList+0xb0>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d11d      	bne.n	800c10a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c0ce:	693b      	ldr	r3, [r7, #16]
 800c0d0:	3304      	adds	r3, #4
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f7fe fce2 	bl	800aa9c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c0d8:	693b      	ldr	r3, [r7, #16]
 800c0da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0dc:	4b19      	ldr	r3, [pc, #100]	; (800c144 <xTaskRemoveFromEventList+0xb4>)
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	429a      	cmp	r2, r3
 800c0e2:	d903      	bls.n	800c0ec <xTaskRemoveFromEventList+0x5c>
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0e8:	4a16      	ldr	r2, [pc, #88]	; (800c144 <xTaskRemoveFromEventList+0xb4>)
 800c0ea:	6013      	str	r3, [r2, #0]
 800c0ec:	693b      	ldr	r3, [r7, #16]
 800c0ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0f0:	4613      	mov	r3, r2
 800c0f2:	009b      	lsls	r3, r3, #2
 800c0f4:	4413      	add	r3, r2
 800c0f6:	009b      	lsls	r3, r3, #2
 800c0f8:	4a13      	ldr	r2, [pc, #76]	; (800c148 <xTaskRemoveFromEventList+0xb8>)
 800c0fa:	441a      	add	r2, r3
 800c0fc:	693b      	ldr	r3, [r7, #16]
 800c0fe:	3304      	adds	r3, #4
 800c100:	4619      	mov	r1, r3
 800c102:	4610      	mov	r0, r2
 800c104:	f7fe fc6d 	bl	800a9e2 <vListInsertEnd>
 800c108:	e005      	b.n	800c116 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c10a:	693b      	ldr	r3, [r7, #16]
 800c10c:	3318      	adds	r3, #24
 800c10e:	4619      	mov	r1, r3
 800c110:	480e      	ldr	r0, [pc, #56]	; (800c14c <xTaskRemoveFromEventList+0xbc>)
 800c112:	f7fe fc66 	bl	800a9e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c116:	693b      	ldr	r3, [r7, #16]
 800c118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c11a:	4b0d      	ldr	r3, [pc, #52]	; (800c150 <xTaskRemoveFromEventList+0xc0>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c120:	429a      	cmp	r2, r3
 800c122:	d905      	bls.n	800c130 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c124:	2301      	movs	r3, #1
 800c126:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c128:	4b0a      	ldr	r3, [pc, #40]	; (800c154 <xTaskRemoveFromEventList+0xc4>)
 800c12a:	2201      	movs	r2, #1
 800c12c:	601a      	str	r2, [r3, #0]
 800c12e:	e001      	b.n	800c134 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c130:	2300      	movs	r3, #0
 800c132:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c134:	697b      	ldr	r3, [r7, #20]
}
 800c136:	4618      	mov	r0, r3
 800c138:	3718      	adds	r7, #24
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}
 800c13e:	bf00      	nop
 800c140:	200059c8 	.word	0x200059c8
 800c144:	200059a8 	.word	0x200059a8
 800c148:	200054d0 	.word	0x200054d0
 800c14c:	20005960 	.word	0x20005960
 800c150:	200054cc 	.word	0x200054cc
 800c154:	200059b4 	.word	0x200059b4

0800c158 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b084      	sub	sp, #16
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d10a      	bne.n	800c17c <vTaskSetTimeOutState+0x24>
	__asm volatile
 800c166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c16a:	f383 8811 	msr	BASEPRI, r3
 800c16e:	f3bf 8f6f 	isb	sy
 800c172:	f3bf 8f4f 	dsb	sy
 800c176:	60fb      	str	r3, [r7, #12]
}
 800c178:	bf00      	nop
 800c17a:	e7fe      	b.n	800c17a <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800c17c:	f000 ffca 	bl	800d114 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c180:	4b06      	ldr	r3, [pc, #24]	; (800c19c <vTaskSetTimeOutState+0x44>)
 800c182:	681a      	ldr	r2, [r3, #0]
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800c188:	4b05      	ldr	r3, [pc, #20]	; (800c1a0 <vTaskSetTimeOutState+0x48>)
 800c18a:	681a      	ldr	r2, [r3, #0]
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800c190:	f000 fff0 	bl	800d174 <vPortExitCritical>
}
 800c194:	bf00      	nop
 800c196:	3710      	adds	r7, #16
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}
 800c19c:	200059b8 	.word	0x200059b8
 800c1a0:	200059a4 	.word	0x200059a4

0800c1a4 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c1a4:	b480      	push	{r7}
 800c1a6:	b083      	sub	sp, #12
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c1ac:	4b06      	ldr	r3, [pc, #24]	; (800c1c8 <vTaskInternalSetTimeOutState+0x24>)
 800c1ae:	681a      	ldr	r2, [r3, #0]
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c1b4:	4b05      	ldr	r3, [pc, #20]	; (800c1cc <vTaskInternalSetTimeOutState+0x28>)
 800c1b6:	681a      	ldr	r2, [r3, #0]
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	605a      	str	r2, [r3, #4]
}
 800c1bc:	bf00      	nop
 800c1be:	370c      	adds	r7, #12
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c6:	4770      	bx	lr
 800c1c8:	200059b8 	.word	0x200059b8
 800c1cc:	200059a4 	.word	0x200059a4

0800c1d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b088      	sub	sp, #32
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
 800c1d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d10a      	bne.n	800c1f6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e4:	f383 8811 	msr	BASEPRI, r3
 800c1e8:	f3bf 8f6f 	isb	sy
 800c1ec:	f3bf 8f4f 	dsb	sy
 800c1f0:	613b      	str	r3, [r7, #16]
}
 800c1f2:	bf00      	nop
 800c1f4:	e7fe      	b.n	800c1f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d10a      	bne.n	800c212 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c200:	f383 8811 	msr	BASEPRI, r3
 800c204:	f3bf 8f6f 	isb	sy
 800c208:	f3bf 8f4f 	dsb	sy
 800c20c:	60fb      	str	r3, [r7, #12]
}
 800c20e:	bf00      	nop
 800c210:	e7fe      	b.n	800c210 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c212:	f000 ff7f 	bl	800d114 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c216:	4b1d      	ldr	r3, [pc, #116]	; (800c28c <xTaskCheckForTimeOut+0xbc>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	685b      	ldr	r3, [r3, #4]
 800c220:	69ba      	ldr	r2, [r7, #24]
 800c222:	1ad3      	subs	r3, r2, r3
 800c224:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c22e:	d102      	bne.n	800c236 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c230:	2300      	movs	r3, #0
 800c232:	61fb      	str	r3, [r7, #28]
 800c234:	e023      	b.n	800c27e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681a      	ldr	r2, [r3, #0]
 800c23a:	4b15      	ldr	r3, [pc, #84]	; (800c290 <xTaskCheckForTimeOut+0xc0>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	429a      	cmp	r2, r3
 800c240:	d007      	beq.n	800c252 <xTaskCheckForTimeOut+0x82>
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	685b      	ldr	r3, [r3, #4]
 800c246:	69ba      	ldr	r2, [r7, #24]
 800c248:	429a      	cmp	r2, r3
 800c24a:	d302      	bcc.n	800c252 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c24c:	2301      	movs	r3, #1
 800c24e:	61fb      	str	r3, [r7, #28]
 800c250:	e015      	b.n	800c27e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	697a      	ldr	r2, [r7, #20]
 800c258:	429a      	cmp	r2, r3
 800c25a:	d20b      	bcs.n	800c274 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	681a      	ldr	r2, [r3, #0]
 800c260:	697b      	ldr	r3, [r7, #20]
 800c262:	1ad2      	subs	r2, r2, r3
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	f7ff ff9b 	bl	800c1a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c26e:	2300      	movs	r3, #0
 800c270:	61fb      	str	r3, [r7, #28]
 800c272:	e004      	b.n	800c27e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	2200      	movs	r2, #0
 800c278:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c27a:	2301      	movs	r3, #1
 800c27c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c27e:	f000 ff79 	bl	800d174 <vPortExitCritical>

	return xReturn;
 800c282:	69fb      	ldr	r3, [r7, #28]
}
 800c284:	4618      	mov	r0, r3
 800c286:	3720      	adds	r7, #32
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}
 800c28c:	200059a4 	.word	0x200059a4
 800c290:	200059b8 	.word	0x200059b8

0800c294 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c294:	b480      	push	{r7}
 800c296:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c298:	4b03      	ldr	r3, [pc, #12]	; (800c2a8 <vTaskMissedYield+0x14>)
 800c29a:	2201      	movs	r2, #1
 800c29c:	601a      	str	r2, [r3, #0]
}
 800c29e:	bf00      	nop
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a6:	4770      	bx	lr
 800c2a8:	200059b4 	.word	0x200059b4

0800c2ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b082      	sub	sp, #8
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c2b4:	f000 f852 	bl	800c35c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c2b8:	4b06      	ldr	r3, [pc, #24]	; (800c2d4 <prvIdleTask+0x28>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	2b01      	cmp	r3, #1
 800c2be:	d9f9      	bls.n	800c2b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c2c0:	4b05      	ldr	r3, [pc, #20]	; (800c2d8 <prvIdleTask+0x2c>)
 800c2c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2c6:	601a      	str	r2, [r3, #0]
 800c2c8:	f3bf 8f4f 	dsb	sy
 800c2cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c2d0:	e7f0      	b.n	800c2b4 <prvIdleTask+0x8>
 800c2d2:	bf00      	nop
 800c2d4:	200054d0 	.word	0x200054d0
 800c2d8:	e000ed04 	.word	0xe000ed04

0800c2dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b082      	sub	sp, #8
 800c2e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	607b      	str	r3, [r7, #4]
 800c2e6:	e00c      	b.n	800c302 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c2e8:	687a      	ldr	r2, [r7, #4]
 800c2ea:	4613      	mov	r3, r2
 800c2ec:	009b      	lsls	r3, r3, #2
 800c2ee:	4413      	add	r3, r2
 800c2f0:	009b      	lsls	r3, r3, #2
 800c2f2:	4a12      	ldr	r2, [pc, #72]	; (800c33c <prvInitialiseTaskLists+0x60>)
 800c2f4:	4413      	add	r3, r2
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f7fe fb46 	bl	800a988 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	3301      	adds	r3, #1
 800c300:	607b      	str	r3, [r7, #4]
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2b37      	cmp	r3, #55	; 0x37
 800c306:	d9ef      	bls.n	800c2e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c308:	480d      	ldr	r0, [pc, #52]	; (800c340 <prvInitialiseTaskLists+0x64>)
 800c30a:	f7fe fb3d 	bl	800a988 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c30e:	480d      	ldr	r0, [pc, #52]	; (800c344 <prvInitialiseTaskLists+0x68>)
 800c310:	f7fe fb3a 	bl	800a988 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c314:	480c      	ldr	r0, [pc, #48]	; (800c348 <prvInitialiseTaskLists+0x6c>)
 800c316:	f7fe fb37 	bl	800a988 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c31a:	480c      	ldr	r0, [pc, #48]	; (800c34c <prvInitialiseTaskLists+0x70>)
 800c31c:	f7fe fb34 	bl	800a988 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c320:	480b      	ldr	r0, [pc, #44]	; (800c350 <prvInitialiseTaskLists+0x74>)
 800c322:	f7fe fb31 	bl	800a988 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c326:	4b0b      	ldr	r3, [pc, #44]	; (800c354 <prvInitialiseTaskLists+0x78>)
 800c328:	4a05      	ldr	r2, [pc, #20]	; (800c340 <prvInitialiseTaskLists+0x64>)
 800c32a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c32c:	4b0a      	ldr	r3, [pc, #40]	; (800c358 <prvInitialiseTaskLists+0x7c>)
 800c32e:	4a05      	ldr	r2, [pc, #20]	; (800c344 <prvInitialiseTaskLists+0x68>)
 800c330:	601a      	str	r2, [r3, #0]
}
 800c332:	bf00      	nop
 800c334:	3708      	adds	r7, #8
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}
 800c33a:	bf00      	nop
 800c33c:	200054d0 	.word	0x200054d0
 800c340:	20005930 	.word	0x20005930
 800c344:	20005944 	.word	0x20005944
 800c348:	20005960 	.word	0x20005960
 800c34c:	20005974 	.word	0x20005974
 800c350:	2000598c 	.word	0x2000598c
 800c354:	20005958 	.word	0x20005958
 800c358:	2000595c 	.word	0x2000595c

0800c35c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b082      	sub	sp, #8
 800c360:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c362:	e019      	b.n	800c398 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c364:	f000 fed6 	bl	800d114 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c368:	4b10      	ldr	r3, [pc, #64]	; (800c3ac <prvCheckTasksWaitingTermination+0x50>)
 800c36a:	68db      	ldr	r3, [r3, #12]
 800c36c:	68db      	ldr	r3, [r3, #12]
 800c36e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	3304      	adds	r3, #4
 800c374:	4618      	mov	r0, r3
 800c376:	f7fe fb91 	bl	800aa9c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c37a:	4b0d      	ldr	r3, [pc, #52]	; (800c3b0 <prvCheckTasksWaitingTermination+0x54>)
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	3b01      	subs	r3, #1
 800c380:	4a0b      	ldr	r2, [pc, #44]	; (800c3b0 <prvCheckTasksWaitingTermination+0x54>)
 800c382:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c384:	4b0b      	ldr	r3, [pc, #44]	; (800c3b4 <prvCheckTasksWaitingTermination+0x58>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	3b01      	subs	r3, #1
 800c38a:	4a0a      	ldr	r2, [pc, #40]	; (800c3b4 <prvCheckTasksWaitingTermination+0x58>)
 800c38c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c38e:	f000 fef1 	bl	800d174 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f000 f810 	bl	800c3b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c398:	4b06      	ldr	r3, [pc, #24]	; (800c3b4 <prvCheckTasksWaitingTermination+0x58>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d1e1      	bne.n	800c364 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c3a0:	bf00      	nop
 800c3a2:	bf00      	nop
 800c3a4:	3708      	adds	r7, #8
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd80      	pop	{r7, pc}
 800c3aa:	bf00      	nop
 800c3ac:	20005974 	.word	0x20005974
 800c3b0:	200059a0 	.word	0x200059a0
 800c3b4:	20005988 	.word	0x20005988

0800c3b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b084      	sub	sp, #16
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	3354      	adds	r3, #84	; 0x54
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f00b f947 	bl	8017658 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d108      	bne.n	800c3e6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f001 f889 	bl	800d4f0 <vPortFree>
				vPortFree( pxTCB );
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f001 f886 	bl	800d4f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c3e4:	e018      	b.n	800c418 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800c3ec:	2b01      	cmp	r3, #1
 800c3ee:	d103      	bne.n	800c3f8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c3f0:	6878      	ldr	r0, [r7, #4]
 800c3f2:	f001 f87d 	bl	800d4f0 <vPortFree>
	}
 800c3f6:	e00f      	b.n	800c418 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800c3fe:	2b02      	cmp	r3, #2
 800c400:	d00a      	beq.n	800c418 <prvDeleteTCB+0x60>
	__asm volatile
 800c402:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c406:	f383 8811 	msr	BASEPRI, r3
 800c40a:	f3bf 8f6f 	isb	sy
 800c40e:	f3bf 8f4f 	dsb	sy
 800c412:	60fb      	str	r3, [r7, #12]
}
 800c414:	bf00      	nop
 800c416:	e7fe      	b.n	800c416 <prvDeleteTCB+0x5e>
	}
 800c418:	bf00      	nop
 800c41a:	3710      	adds	r7, #16
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}

0800c420 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c420:	b480      	push	{r7}
 800c422:	b083      	sub	sp, #12
 800c424:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c426:	4b0c      	ldr	r3, [pc, #48]	; (800c458 <prvResetNextTaskUnblockTime+0x38>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d104      	bne.n	800c43a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c430:	4b0a      	ldr	r3, [pc, #40]	; (800c45c <prvResetNextTaskUnblockTime+0x3c>)
 800c432:	f04f 32ff 	mov.w	r2, #4294967295
 800c436:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c438:	e008      	b.n	800c44c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c43a:	4b07      	ldr	r3, [pc, #28]	; (800c458 <prvResetNextTaskUnblockTime+0x38>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	68db      	ldr	r3, [r3, #12]
 800c440:	68db      	ldr	r3, [r3, #12]
 800c442:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	685b      	ldr	r3, [r3, #4]
 800c448:	4a04      	ldr	r2, [pc, #16]	; (800c45c <prvResetNextTaskUnblockTime+0x3c>)
 800c44a:	6013      	str	r3, [r2, #0]
}
 800c44c:	bf00      	nop
 800c44e:	370c      	adds	r7, #12
 800c450:	46bd      	mov	sp, r7
 800c452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c456:	4770      	bx	lr
 800c458:	20005958 	.word	0x20005958
 800c45c:	200059c0 	.word	0x200059c0

0800c460 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c460:	b480      	push	{r7}
 800c462:	b083      	sub	sp, #12
 800c464:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c466:	4b0b      	ldr	r3, [pc, #44]	; (800c494 <xTaskGetSchedulerState+0x34>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d102      	bne.n	800c474 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c46e:	2301      	movs	r3, #1
 800c470:	607b      	str	r3, [r7, #4]
 800c472:	e008      	b.n	800c486 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c474:	4b08      	ldr	r3, [pc, #32]	; (800c498 <xTaskGetSchedulerState+0x38>)
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d102      	bne.n	800c482 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c47c:	2302      	movs	r3, #2
 800c47e:	607b      	str	r3, [r7, #4]
 800c480:	e001      	b.n	800c486 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c482:	2300      	movs	r3, #0
 800c484:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c486:	687b      	ldr	r3, [r7, #4]
	}
 800c488:	4618      	mov	r0, r3
 800c48a:	370c      	adds	r7, #12
 800c48c:	46bd      	mov	sp, r7
 800c48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c492:	4770      	bx	lr
 800c494:	200059ac 	.word	0x200059ac
 800c498:	200059c8 	.word	0x200059c8

0800c49c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b084      	sub	sp, #16
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d051      	beq.n	800c556 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c4b2:	68bb      	ldr	r3, [r7, #8]
 800c4b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4b6:	4b2a      	ldr	r3, [pc, #168]	; (800c560 <xTaskPriorityInherit+0xc4>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4bc:	429a      	cmp	r2, r3
 800c4be:	d241      	bcs.n	800c544 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c4c0:	68bb      	ldr	r3, [r7, #8]
 800c4c2:	699b      	ldr	r3, [r3, #24]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	db06      	blt.n	800c4d6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4c8:	4b25      	ldr	r3, [pc, #148]	; (800c560 <xTaskPriorityInherit+0xc4>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c4d2:	68bb      	ldr	r3, [r7, #8]
 800c4d4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	6959      	ldr	r1, [r3, #20]
 800c4da:	68bb      	ldr	r3, [r7, #8]
 800c4dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4de:	4613      	mov	r3, r2
 800c4e0:	009b      	lsls	r3, r3, #2
 800c4e2:	4413      	add	r3, r2
 800c4e4:	009b      	lsls	r3, r3, #2
 800c4e6:	4a1f      	ldr	r2, [pc, #124]	; (800c564 <xTaskPriorityInherit+0xc8>)
 800c4e8:	4413      	add	r3, r2
 800c4ea:	4299      	cmp	r1, r3
 800c4ec:	d122      	bne.n	800c534 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	3304      	adds	r3, #4
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	f7fe fad2 	bl	800aa9c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c4f8:	4b19      	ldr	r3, [pc, #100]	; (800c560 <xTaskPriorityInherit+0xc4>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c502:	68bb      	ldr	r3, [r7, #8]
 800c504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c506:	4b18      	ldr	r3, [pc, #96]	; (800c568 <xTaskPriorityInherit+0xcc>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	429a      	cmp	r2, r3
 800c50c:	d903      	bls.n	800c516 <xTaskPriorityInherit+0x7a>
 800c50e:	68bb      	ldr	r3, [r7, #8]
 800c510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c512:	4a15      	ldr	r2, [pc, #84]	; (800c568 <xTaskPriorityInherit+0xcc>)
 800c514:	6013      	str	r3, [r2, #0]
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c51a:	4613      	mov	r3, r2
 800c51c:	009b      	lsls	r3, r3, #2
 800c51e:	4413      	add	r3, r2
 800c520:	009b      	lsls	r3, r3, #2
 800c522:	4a10      	ldr	r2, [pc, #64]	; (800c564 <xTaskPriorityInherit+0xc8>)
 800c524:	441a      	add	r2, r3
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	3304      	adds	r3, #4
 800c52a:	4619      	mov	r1, r3
 800c52c:	4610      	mov	r0, r2
 800c52e:	f7fe fa58 	bl	800a9e2 <vListInsertEnd>
 800c532:	e004      	b.n	800c53e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c534:	4b0a      	ldr	r3, [pc, #40]	; (800c560 <xTaskPriorityInherit+0xc4>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c53e:	2301      	movs	r3, #1
 800c540:	60fb      	str	r3, [r7, #12]
 800c542:	e008      	b.n	800c556 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c548:	4b05      	ldr	r3, [pc, #20]	; (800c560 <xTaskPriorityInherit+0xc4>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c54e:	429a      	cmp	r2, r3
 800c550:	d201      	bcs.n	800c556 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c552:	2301      	movs	r3, #1
 800c554:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c556:	68fb      	ldr	r3, [r7, #12]
	}
 800c558:	4618      	mov	r0, r3
 800c55a:	3710      	adds	r7, #16
 800c55c:	46bd      	mov	sp, r7
 800c55e:	bd80      	pop	{r7, pc}
 800c560:	200054cc 	.word	0x200054cc
 800c564:	200054d0 	.word	0x200054d0
 800c568:	200059a8 	.word	0x200059a8

0800c56c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b086      	sub	sp, #24
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c578:	2300      	movs	r3, #0
 800c57a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d056      	beq.n	800c630 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c582:	4b2e      	ldr	r3, [pc, #184]	; (800c63c <xTaskPriorityDisinherit+0xd0>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	693a      	ldr	r2, [r7, #16]
 800c588:	429a      	cmp	r2, r3
 800c58a:	d00a      	beq.n	800c5a2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c58c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c590:	f383 8811 	msr	BASEPRI, r3
 800c594:	f3bf 8f6f 	isb	sy
 800c598:	f3bf 8f4f 	dsb	sy
 800c59c:	60fb      	str	r3, [r7, #12]
}
 800c59e:	bf00      	nop
 800c5a0:	e7fe      	b.n	800c5a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c5a2:	693b      	ldr	r3, [r7, #16]
 800c5a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d10a      	bne.n	800c5c0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c5aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ae:	f383 8811 	msr	BASEPRI, r3
 800c5b2:	f3bf 8f6f 	isb	sy
 800c5b6:	f3bf 8f4f 	dsb	sy
 800c5ba:	60bb      	str	r3, [r7, #8]
}
 800c5bc:	bf00      	nop
 800c5be:	e7fe      	b.n	800c5be <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c5c0:	693b      	ldr	r3, [r7, #16]
 800c5c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5c4:	1e5a      	subs	r2, r3, #1
 800c5c6:	693b      	ldr	r3, [r7, #16]
 800c5c8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c5ca:	693b      	ldr	r3, [r7, #16]
 800c5cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5ce:	693b      	ldr	r3, [r7, #16]
 800c5d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5d2:	429a      	cmp	r2, r3
 800c5d4:	d02c      	beq.n	800c630 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c5d6:	693b      	ldr	r3, [r7, #16]
 800c5d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d128      	bne.n	800c630 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c5de:	693b      	ldr	r3, [r7, #16]
 800c5e0:	3304      	adds	r3, #4
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f7fe fa5a 	bl	800aa9c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c5e8:	693b      	ldr	r3, [r7, #16]
 800c5ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c5ec:	693b      	ldr	r3, [r7, #16]
 800c5ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5f0:	693b      	ldr	r3, [r7, #16]
 800c5f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5f4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c5f8:	693b      	ldr	r3, [r7, #16]
 800c5fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c5fc:	693b      	ldr	r3, [r7, #16]
 800c5fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c600:	4b0f      	ldr	r3, [pc, #60]	; (800c640 <xTaskPriorityDisinherit+0xd4>)
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	429a      	cmp	r2, r3
 800c606:	d903      	bls.n	800c610 <xTaskPriorityDisinherit+0xa4>
 800c608:	693b      	ldr	r3, [r7, #16]
 800c60a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c60c:	4a0c      	ldr	r2, [pc, #48]	; (800c640 <xTaskPriorityDisinherit+0xd4>)
 800c60e:	6013      	str	r3, [r2, #0]
 800c610:	693b      	ldr	r3, [r7, #16]
 800c612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c614:	4613      	mov	r3, r2
 800c616:	009b      	lsls	r3, r3, #2
 800c618:	4413      	add	r3, r2
 800c61a:	009b      	lsls	r3, r3, #2
 800c61c:	4a09      	ldr	r2, [pc, #36]	; (800c644 <xTaskPriorityDisinherit+0xd8>)
 800c61e:	441a      	add	r2, r3
 800c620:	693b      	ldr	r3, [r7, #16]
 800c622:	3304      	adds	r3, #4
 800c624:	4619      	mov	r1, r3
 800c626:	4610      	mov	r0, r2
 800c628:	f7fe f9db 	bl	800a9e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c62c:	2301      	movs	r3, #1
 800c62e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c630:	697b      	ldr	r3, [r7, #20]
	}
 800c632:	4618      	mov	r0, r3
 800c634:	3718      	adds	r7, #24
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}
 800c63a:	bf00      	nop
 800c63c:	200054cc 	.word	0x200054cc
 800c640:	200059a8 	.word	0x200059a8
 800c644:	200054d0 	.word	0x200054d0

0800c648 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b088      	sub	sp, #32
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
 800c650:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c656:	2301      	movs	r3, #1
 800c658:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d06a      	beq.n	800c736 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c660:	69bb      	ldr	r3, [r7, #24]
 800c662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c664:	2b00      	cmp	r3, #0
 800c666:	d10a      	bne.n	800c67e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c66c:	f383 8811 	msr	BASEPRI, r3
 800c670:	f3bf 8f6f 	isb	sy
 800c674:	f3bf 8f4f 	dsb	sy
 800c678:	60fb      	str	r3, [r7, #12]
}
 800c67a:	bf00      	nop
 800c67c:	e7fe      	b.n	800c67c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c67e:	69bb      	ldr	r3, [r7, #24]
 800c680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c682:	683a      	ldr	r2, [r7, #0]
 800c684:	429a      	cmp	r2, r3
 800c686:	d902      	bls.n	800c68e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	61fb      	str	r3, [r7, #28]
 800c68c:	e002      	b.n	800c694 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c68e:	69bb      	ldr	r3, [r7, #24]
 800c690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c692:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c694:	69bb      	ldr	r3, [r7, #24]
 800c696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c698:	69fa      	ldr	r2, [r7, #28]
 800c69a:	429a      	cmp	r2, r3
 800c69c:	d04b      	beq.n	800c736 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c69e:	69bb      	ldr	r3, [r7, #24]
 800c6a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6a2:	697a      	ldr	r2, [r7, #20]
 800c6a4:	429a      	cmp	r2, r3
 800c6a6:	d146      	bne.n	800c736 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c6a8:	4b25      	ldr	r3, [pc, #148]	; (800c740 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	69ba      	ldr	r2, [r7, #24]
 800c6ae:	429a      	cmp	r2, r3
 800c6b0:	d10a      	bne.n	800c6c8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6b6:	f383 8811 	msr	BASEPRI, r3
 800c6ba:	f3bf 8f6f 	isb	sy
 800c6be:	f3bf 8f4f 	dsb	sy
 800c6c2:	60bb      	str	r3, [r7, #8]
}
 800c6c4:	bf00      	nop
 800c6c6:	e7fe      	b.n	800c6c6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c6c8:	69bb      	ldr	r3, [r7, #24]
 800c6ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6cc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c6ce:	69bb      	ldr	r3, [r7, #24]
 800c6d0:	69fa      	ldr	r2, [r7, #28]
 800c6d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c6d4:	69bb      	ldr	r3, [r7, #24]
 800c6d6:	699b      	ldr	r3, [r3, #24]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	db04      	blt.n	800c6e6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6dc:	69fb      	ldr	r3, [r7, #28]
 800c6de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c6e2:	69bb      	ldr	r3, [r7, #24]
 800c6e4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c6e6:	69bb      	ldr	r3, [r7, #24]
 800c6e8:	6959      	ldr	r1, [r3, #20]
 800c6ea:	693a      	ldr	r2, [r7, #16]
 800c6ec:	4613      	mov	r3, r2
 800c6ee:	009b      	lsls	r3, r3, #2
 800c6f0:	4413      	add	r3, r2
 800c6f2:	009b      	lsls	r3, r3, #2
 800c6f4:	4a13      	ldr	r2, [pc, #76]	; (800c744 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c6f6:	4413      	add	r3, r2
 800c6f8:	4299      	cmp	r1, r3
 800c6fa:	d11c      	bne.n	800c736 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c6fc:	69bb      	ldr	r3, [r7, #24]
 800c6fe:	3304      	adds	r3, #4
 800c700:	4618      	mov	r0, r3
 800c702:	f7fe f9cb 	bl	800aa9c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c706:	69bb      	ldr	r3, [r7, #24]
 800c708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c70a:	4b0f      	ldr	r3, [pc, #60]	; (800c748 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	429a      	cmp	r2, r3
 800c710:	d903      	bls.n	800c71a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800c712:	69bb      	ldr	r3, [r7, #24]
 800c714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c716:	4a0c      	ldr	r2, [pc, #48]	; (800c748 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c718:	6013      	str	r3, [r2, #0]
 800c71a:	69bb      	ldr	r3, [r7, #24]
 800c71c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c71e:	4613      	mov	r3, r2
 800c720:	009b      	lsls	r3, r3, #2
 800c722:	4413      	add	r3, r2
 800c724:	009b      	lsls	r3, r3, #2
 800c726:	4a07      	ldr	r2, [pc, #28]	; (800c744 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c728:	441a      	add	r2, r3
 800c72a:	69bb      	ldr	r3, [r7, #24]
 800c72c:	3304      	adds	r3, #4
 800c72e:	4619      	mov	r1, r3
 800c730:	4610      	mov	r0, r2
 800c732:	f7fe f956 	bl	800a9e2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c736:	bf00      	nop
 800c738:	3720      	adds	r7, #32
 800c73a:	46bd      	mov	sp, r7
 800c73c:	bd80      	pop	{r7, pc}
 800c73e:	bf00      	nop
 800c740:	200054cc 	.word	0x200054cc
 800c744:	200054d0 	.word	0x200054d0
 800c748:	200059a8 	.word	0x200059a8

0800c74c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c74c:	b480      	push	{r7}
 800c74e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c750:	4b07      	ldr	r3, [pc, #28]	; (800c770 <pvTaskIncrementMutexHeldCount+0x24>)
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d004      	beq.n	800c762 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c758:	4b05      	ldr	r3, [pc, #20]	; (800c770 <pvTaskIncrementMutexHeldCount+0x24>)
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c75e:	3201      	adds	r2, #1
 800c760:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800c762:	4b03      	ldr	r3, [pc, #12]	; (800c770 <pvTaskIncrementMutexHeldCount+0x24>)
 800c764:	681b      	ldr	r3, [r3, #0]
	}
 800c766:	4618      	mov	r0, r3
 800c768:	46bd      	mov	sp, r7
 800c76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76e:	4770      	bx	lr
 800c770:	200054cc 	.word	0x200054cc

0800c774 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b084      	sub	sp, #16
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
 800c77c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c77e:	4b21      	ldr	r3, [pc, #132]	; (800c804 <prvAddCurrentTaskToDelayedList+0x90>)
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c784:	4b20      	ldr	r3, [pc, #128]	; (800c808 <prvAddCurrentTaskToDelayedList+0x94>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	3304      	adds	r3, #4
 800c78a:	4618      	mov	r0, r3
 800c78c:	f7fe f986 	bl	800aa9c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c796:	d10a      	bne.n	800c7ae <prvAddCurrentTaskToDelayedList+0x3a>
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d007      	beq.n	800c7ae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c79e:	4b1a      	ldr	r3, [pc, #104]	; (800c808 <prvAddCurrentTaskToDelayedList+0x94>)
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	3304      	adds	r3, #4
 800c7a4:	4619      	mov	r1, r3
 800c7a6:	4819      	ldr	r0, [pc, #100]	; (800c80c <prvAddCurrentTaskToDelayedList+0x98>)
 800c7a8:	f7fe f91b 	bl	800a9e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c7ac:	e026      	b.n	800c7fc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c7ae:	68fa      	ldr	r2, [r7, #12]
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	4413      	add	r3, r2
 800c7b4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c7b6:	4b14      	ldr	r3, [pc, #80]	; (800c808 <prvAddCurrentTaskToDelayedList+0x94>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	68ba      	ldr	r2, [r7, #8]
 800c7bc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c7be:	68ba      	ldr	r2, [r7, #8]
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	429a      	cmp	r2, r3
 800c7c4:	d209      	bcs.n	800c7da <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c7c6:	4b12      	ldr	r3, [pc, #72]	; (800c810 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c7c8:	681a      	ldr	r2, [r3, #0]
 800c7ca:	4b0f      	ldr	r3, [pc, #60]	; (800c808 <prvAddCurrentTaskToDelayedList+0x94>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	3304      	adds	r3, #4
 800c7d0:	4619      	mov	r1, r3
 800c7d2:	4610      	mov	r0, r2
 800c7d4:	f7fe f929 	bl	800aa2a <vListInsert>
}
 800c7d8:	e010      	b.n	800c7fc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c7da:	4b0e      	ldr	r3, [pc, #56]	; (800c814 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c7dc:	681a      	ldr	r2, [r3, #0]
 800c7de:	4b0a      	ldr	r3, [pc, #40]	; (800c808 <prvAddCurrentTaskToDelayedList+0x94>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	3304      	adds	r3, #4
 800c7e4:	4619      	mov	r1, r3
 800c7e6:	4610      	mov	r0, r2
 800c7e8:	f7fe f91f 	bl	800aa2a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c7ec:	4b0a      	ldr	r3, [pc, #40]	; (800c818 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	68ba      	ldr	r2, [r7, #8]
 800c7f2:	429a      	cmp	r2, r3
 800c7f4:	d202      	bcs.n	800c7fc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c7f6:	4a08      	ldr	r2, [pc, #32]	; (800c818 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	6013      	str	r3, [r2, #0]
}
 800c7fc:	bf00      	nop
 800c7fe:	3710      	adds	r7, #16
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}
 800c804:	200059a4 	.word	0x200059a4
 800c808:	200054cc 	.word	0x200054cc
 800c80c:	2000598c 	.word	0x2000598c
 800c810:	2000595c 	.word	0x2000595c
 800c814:	20005958 	.word	0x20005958
 800c818:	200059c0 	.word	0x200059c0

0800c81c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b08a      	sub	sp, #40	; 0x28
 800c820:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c822:	2300      	movs	r3, #0
 800c824:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c826:	f000 fb07 	bl	800ce38 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c82a:	4b1c      	ldr	r3, [pc, #112]	; (800c89c <xTimerCreateTimerTask+0x80>)
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d021      	beq.n	800c876 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c832:	2300      	movs	r3, #0
 800c834:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c836:	2300      	movs	r3, #0
 800c838:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c83a:	1d3a      	adds	r2, r7, #4
 800c83c:	f107 0108 	add.w	r1, r7, #8
 800c840:	f107 030c 	add.w	r3, r7, #12
 800c844:	4618      	mov	r0, r3
 800c846:	f7fe f885 	bl	800a954 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c84a:	6879      	ldr	r1, [r7, #4]
 800c84c:	68bb      	ldr	r3, [r7, #8]
 800c84e:	68fa      	ldr	r2, [r7, #12]
 800c850:	9202      	str	r2, [sp, #8]
 800c852:	9301      	str	r3, [sp, #4]
 800c854:	2302      	movs	r3, #2
 800c856:	9300      	str	r3, [sp, #0]
 800c858:	2300      	movs	r3, #0
 800c85a:	460a      	mov	r2, r1
 800c85c:	4910      	ldr	r1, [pc, #64]	; (800c8a0 <xTimerCreateTimerTask+0x84>)
 800c85e:	4811      	ldr	r0, [pc, #68]	; (800c8a4 <xTimerCreateTimerTask+0x88>)
 800c860:	f7fe ff90 	bl	800b784 <xTaskCreateStatic>
 800c864:	4603      	mov	r3, r0
 800c866:	4a10      	ldr	r2, [pc, #64]	; (800c8a8 <xTimerCreateTimerTask+0x8c>)
 800c868:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c86a:	4b0f      	ldr	r3, [pc, #60]	; (800c8a8 <xTimerCreateTimerTask+0x8c>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d001      	beq.n	800c876 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c872:	2301      	movs	r3, #1
 800c874:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c876:	697b      	ldr	r3, [r7, #20]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d10a      	bne.n	800c892 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c880:	f383 8811 	msr	BASEPRI, r3
 800c884:	f3bf 8f6f 	isb	sy
 800c888:	f3bf 8f4f 	dsb	sy
 800c88c:	613b      	str	r3, [r7, #16]
}
 800c88e:	bf00      	nop
 800c890:	e7fe      	b.n	800c890 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c892:	697b      	ldr	r3, [r7, #20]
}
 800c894:	4618      	mov	r0, r3
 800c896:	3718      	adds	r7, #24
 800c898:	46bd      	mov	sp, r7
 800c89a:	bd80      	pop	{r7, pc}
 800c89c:	200059fc 	.word	0x200059fc
 800c8a0:	08018770 	.word	0x08018770
 800c8a4:	0800c9e1 	.word	0x0800c9e1
 800c8a8:	20005a00 	.word	0x20005a00

0800c8ac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b08a      	sub	sp, #40	; 0x28
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	60f8      	str	r0, [r7, #12]
 800c8b4:	60b9      	str	r1, [r7, #8]
 800c8b6:	607a      	str	r2, [r7, #4]
 800c8b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d10a      	bne.n	800c8da <xTimerGenericCommand+0x2e>
	__asm volatile
 800c8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8c8:	f383 8811 	msr	BASEPRI, r3
 800c8cc:	f3bf 8f6f 	isb	sy
 800c8d0:	f3bf 8f4f 	dsb	sy
 800c8d4:	623b      	str	r3, [r7, #32]
}
 800c8d6:	bf00      	nop
 800c8d8:	e7fe      	b.n	800c8d8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c8da:	4b1a      	ldr	r3, [pc, #104]	; (800c944 <xTimerGenericCommand+0x98>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d02a      	beq.n	800c938 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c8e2:	68bb      	ldr	r3, [r7, #8]
 800c8e4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	2b05      	cmp	r3, #5
 800c8f2:	dc18      	bgt.n	800c926 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c8f4:	f7ff fdb4 	bl	800c460 <xTaskGetSchedulerState>
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	2b02      	cmp	r3, #2
 800c8fc:	d109      	bne.n	800c912 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c8fe:	4b11      	ldr	r3, [pc, #68]	; (800c944 <xTimerGenericCommand+0x98>)
 800c900:	6818      	ldr	r0, [r3, #0]
 800c902:	f107 0110 	add.w	r1, r7, #16
 800c906:	2300      	movs	r3, #0
 800c908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c90a:	f7fe fa2f 	bl	800ad6c <xQueueGenericSend>
 800c90e:	6278      	str	r0, [r7, #36]	; 0x24
 800c910:	e012      	b.n	800c938 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c912:	4b0c      	ldr	r3, [pc, #48]	; (800c944 <xTimerGenericCommand+0x98>)
 800c914:	6818      	ldr	r0, [r3, #0]
 800c916:	f107 0110 	add.w	r1, r7, #16
 800c91a:	2300      	movs	r3, #0
 800c91c:	2200      	movs	r2, #0
 800c91e:	f7fe fa25 	bl	800ad6c <xQueueGenericSend>
 800c922:	6278      	str	r0, [r7, #36]	; 0x24
 800c924:	e008      	b.n	800c938 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c926:	4b07      	ldr	r3, [pc, #28]	; (800c944 <xTimerGenericCommand+0x98>)
 800c928:	6818      	ldr	r0, [r3, #0]
 800c92a:	f107 0110 	add.w	r1, r7, #16
 800c92e:	2300      	movs	r3, #0
 800c930:	683a      	ldr	r2, [r7, #0]
 800c932:	f7fe fb19 	bl	800af68 <xQueueGenericSendFromISR>
 800c936:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c93a:	4618      	mov	r0, r3
 800c93c:	3728      	adds	r7, #40	; 0x28
 800c93e:	46bd      	mov	sp, r7
 800c940:	bd80      	pop	{r7, pc}
 800c942:	bf00      	nop
 800c944:	200059fc 	.word	0x200059fc

0800c948 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b088      	sub	sp, #32
 800c94c:	af02      	add	r7, sp, #8
 800c94e:	6078      	str	r0, [r7, #4]
 800c950:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c952:	4b22      	ldr	r3, [pc, #136]	; (800c9dc <prvProcessExpiredTimer+0x94>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	68db      	ldr	r3, [r3, #12]
 800c958:	68db      	ldr	r3, [r3, #12]
 800c95a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c95c:	697b      	ldr	r3, [r7, #20]
 800c95e:	3304      	adds	r3, #4
 800c960:	4618      	mov	r0, r3
 800c962:	f7fe f89b 	bl	800aa9c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c966:	697b      	ldr	r3, [r7, #20]
 800c968:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c96c:	f003 0304 	and.w	r3, r3, #4
 800c970:	2b00      	cmp	r3, #0
 800c972:	d022      	beq.n	800c9ba <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c974:	697b      	ldr	r3, [r7, #20]
 800c976:	699a      	ldr	r2, [r3, #24]
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	18d1      	adds	r1, r2, r3
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	683a      	ldr	r2, [r7, #0]
 800c980:	6978      	ldr	r0, [r7, #20]
 800c982:	f000 f8d1 	bl	800cb28 <prvInsertTimerInActiveList>
 800c986:	4603      	mov	r3, r0
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d01f      	beq.n	800c9cc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c98c:	2300      	movs	r3, #0
 800c98e:	9300      	str	r3, [sp, #0]
 800c990:	2300      	movs	r3, #0
 800c992:	687a      	ldr	r2, [r7, #4]
 800c994:	2100      	movs	r1, #0
 800c996:	6978      	ldr	r0, [r7, #20]
 800c998:	f7ff ff88 	bl	800c8ac <xTimerGenericCommand>
 800c99c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c99e:	693b      	ldr	r3, [r7, #16]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d113      	bne.n	800c9cc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c9a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9a8:	f383 8811 	msr	BASEPRI, r3
 800c9ac:	f3bf 8f6f 	isb	sy
 800c9b0:	f3bf 8f4f 	dsb	sy
 800c9b4:	60fb      	str	r3, [r7, #12]
}
 800c9b6:	bf00      	nop
 800c9b8:	e7fe      	b.n	800c9b8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c9ba:	697b      	ldr	r3, [r7, #20]
 800c9bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c9c0:	f023 0301 	bic.w	r3, r3, #1
 800c9c4:	b2da      	uxtb	r2, r3
 800c9c6:	697b      	ldr	r3, [r7, #20]
 800c9c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c9cc:	697b      	ldr	r3, [r7, #20]
 800c9ce:	6a1b      	ldr	r3, [r3, #32]
 800c9d0:	6978      	ldr	r0, [r7, #20]
 800c9d2:	4798      	blx	r3
}
 800c9d4:	bf00      	nop
 800c9d6:	3718      	adds	r7, #24
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bd80      	pop	{r7, pc}
 800c9dc:	200059f4 	.word	0x200059f4

0800c9e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b084      	sub	sp, #16
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c9e8:	f107 0308 	add.w	r3, r7, #8
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f000 f857 	bl	800caa0 <prvGetNextExpireTime>
 800c9f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c9f4:	68bb      	ldr	r3, [r7, #8]
 800c9f6:	4619      	mov	r1, r3
 800c9f8:	68f8      	ldr	r0, [r7, #12]
 800c9fa:	f000 f803 	bl	800ca04 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c9fe:	f000 f8d5 	bl	800cbac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ca02:	e7f1      	b.n	800c9e8 <prvTimerTask+0x8>

0800ca04 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b084      	sub	sp, #16
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
 800ca0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ca0e:	f7ff f915 	bl	800bc3c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ca12:	f107 0308 	add.w	r3, r7, #8
 800ca16:	4618      	mov	r0, r3
 800ca18:	f000 f866 	bl	800cae8 <prvSampleTimeNow>
 800ca1c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ca1e:	68bb      	ldr	r3, [r7, #8]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d130      	bne.n	800ca86 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d10a      	bne.n	800ca40 <prvProcessTimerOrBlockTask+0x3c>
 800ca2a:	687a      	ldr	r2, [r7, #4]
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	429a      	cmp	r2, r3
 800ca30:	d806      	bhi.n	800ca40 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ca32:	f7ff f911 	bl	800bc58 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ca36:	68f9      	ldr	r1, [r7, #12]
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f7ff ff85 	bl	800c948 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ca3e:	e024      	b.n	800ca8a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ca40:	683b      	ldr	r3, [r7, #0]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d008      	beq.n	800ca58 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ca46:	4b13      	ldr	r3, [pc, #76]	; (800ca94 <prvProcessTimerOrBlockTask+0x90>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d101      	bne.n	800ca54 <prvProcessTimerOrBlockTask+0x50>
 800ca50:	2301      	movs	r3, #1
 800ca52:	e000      	b.n	800ca56 <prvProcessTimerOrBlockTask+0x52>
 800ca54:	2300      	movs	r3, #0
 800ca56:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ca58:	4b0f      	ldr	r3, [pc, #60]	; (800ca98 <prvProcessTimerOrBlockTask+0x94>)
 800ca5a:	6818      	ldr	r0, [r3, #0]
 800ca5c:	687a      	ldr	r2, [r7, #4]
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	1ad3      	subs	r3, r2, r3
 800ca62:	683a      	ldr	r2, [r7, #0]
 800ca64:	4619      	mov	r1, r3
 800ca66:	f7fe fe59 	bl	800b71c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ca6a:	f7ff f8f5 	bl	800bc58 <xTaskResumeAll>
 800ca6e:	4603      	mov	r3, r0
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d10a      	bne.n	800ca8a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ca74:	4b09      	ldr	r3, [pc, #36]	; (800ca9c <prvProcessTimerOrBlockTask+0x98>)
 800ca76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca7a:	601a      	str	r2, [r3, #0]
 800ca7c:	f3bf 8f4f 	dsb	sy
 800ca80:	f3bf 8f6f 	isb	sy
}
 800ca84:	e001      	b.n	800ca8a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ca86:	f7ff f8e7 	bl	800bc58 <xTaskResumeAll>
}
 800ca8a:	bf00      	nop
 800ca8c:	3710      	adds	r7, #16
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}
 800ca92:	bf00      	nop
 800ca94:	200059f8 	.word	0x200059f8
 800ca98:	200059fc 	.word	0x200059fc
 800ca9c:	e000ed04 	.word	0xe000ed04

0800caa0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800caa0:	b480      	push	{r7}
 800caa2:	b085      	sub	sp, #20
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800caa8:	4b0e      	ldr	r3, [pc, #56]	; (800cae4 <prvGetNextExpireTime+0x44>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d101      	bne.n	800cab6 <prvGetNextExpireTime+0x16>
 800cab2:	2201      	movs	r2, #1
 800cab4:	e000      	b.n	800cab8 <prvGetNextExpireTime+0x18>
 800cab6:	2200      	movs	r2, #0
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d105      	bne.n	800cad0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cac4:	4b07      	ldr	r3, [pc, #28]	; (800cae4 <prvGetNextExpireTime+0x44>)
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	68db      	ldr	r3, [r3, #12]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	60fb      	str	r3, [r7, #12]
 800cace:	e001      	b.n	800cad4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cad0:	2300      	movs	r3, #0
 800cad2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cad4:	68fb      	ldr	r3, [r7, #12]
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	3714      	adds	r7, #20
 800cada:	46bd      	mov	sp, r7
 800cadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae0:	4770      	bx	lr
 800cae2:	bf00      	nop
 800cae4:	200059f4 	.word	0x200059f4

0800cae8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b084      	sub	sp, #16
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800caf0:	f7ff f950 	bl	800bd94 <xTaskGetTickCount>
 800caf4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800caf6:	4b0b      	ldr	r3, [pc, #44]	; (800cb24 <prvSampleTimeNow+0x3c>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	68fa      	ldr	r2, [r7, #12]
 800cafc:	429a      	cmp	r2, r3
 800cafe:	d205      	bcs.n	800cb0c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cb00:	f000 f936 	bl	800cd70 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2201      	movs	r2, #1
 800cb08:	601a      	str	r2, [r3, #0]
 800cb0a:	e002      	b.n	800cb12 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2200      	movs	r2, #0
 800cb10:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cb12:	4a04      	ldr	r2, [pc, #16]	; (800cb24 <prvSampleTimeNow+0x3c>)
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cb18:	68fb      	ldr	r3, [r7, #12]
}
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	3710      	adds	r7, #16
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bd80      	pop	{r7, pc}
 800cb22:	bf00      	nop
 800cb24:	20005a04 	.word	0x20005a04

0800cb28 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b086      	sub	sp, #24
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	60f8      	str	r0, [r7, #12]
 800cb30:	60b9      	str	r1, [r7, #8]
 800cb32:	607a      	str	r2, [r7, #4]
 800cb34:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cb36:	2300      	movs	r3, #0
 800cb38:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	68ba      	ldr	r2, [r7, #8]
 800cb3e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	68fa      	ldr	r2, [r7, #12]
 800cb44:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cb46:	68ba      	ldr	r2, [r7, #8]
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	429a      	cmp	r2, r3
 800cb4c:	d812      	bhi.n	800cb74 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb4e:	687a      	ldr	r2, [r7, #4]
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	1ad2      	subs	r2, r2, r3
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	699b      	ldr	r3, [r3, #24]
 800cb58:	429a      	cmp	r2, r3
 800cb5a:	d302      	bcc.n	800cb62 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cb5c:	2301      	movs	r3, #1
 800cb5e:	617b      	str	r3, [r7, #20]
 800cb60:	e01b      	b.n	800cb9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cb62:	4b10      	ldr	r3, [pc, #64]	; (800cba4 <prvInsertTimerInActiveList+0x7c>)
 800cb64:	681a      	ldr	r2, [r3, #0]
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	3304      	adds	r3, #4
 800cb6a:	4619      	mov	r1, r3
 800cb6c:	4610      	mov	r0, r2
 800cb6e:	f7fd ff5c 	bl	800aa2a <vListInsert>
 800cb72:	e012      	b.n	800cb9a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cb74:	687a      	ldr	r2, [r7, #4]
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	429a      	cmp	r2, r3
 800cb7a:	d206      	bcs.n	800cb8a <prvInsertTimerInActiveList+0x62>
 800cb7c:	68ba      	ldr	r2, [r7, #8]
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	429a      	cmp	r2, r3
 800cb82:	d302      	bcc.n	800cb8a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cb84:	2301      	movs	r3, #1
 800cb86:	617b      	str	r3, [r7, #20]
 800cb88:	e007      	b.n	800cb9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cb8a:	4b07      	ldr	r3, [pc, #28]	; (800cba8 <prvInsertTimerInActiveList+0x80>)
 800cb8c:	681a      	ldr	r2, [r3, #0]
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	3304      	adds	r3, #4
 800cb92:	4619      	mov	r1, r3
 800cb94:	4610      	mov	r0, r2
 800cb96:	f7fd ff48 	bl	800aa2a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cb9a:	697b      	ldr	r3, [r7, #20]
}
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	3718      	adds	r7, #24
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd80      	pop	{r7, pc}
 800cba4:	200059f8 	.word	0x200059f8
 800cba8:	200059f4 	.word	0x200059f4

0800cbac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b08e      	sub	sp, #56	; 0x38
 800cbb0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cbb2:	e0ca      	b.n	800cd4a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	da18      	bge.n	800cbec <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cbba:	1d3b      	adds	r3, r7, #4
 800cbbc:	3304      	adds	r3, #4
 800cbbe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cbc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d10a      	bne.n	800cbdc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800cbc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbca:	f383 8811 	msr	BASEPRI, r3
 800cbce:	f3bf 8f6f 	isb	sy
 800cbd2:	f3bf 8f4f 	dsb	sy
 800cbd6:	61fb      	str	r3, [r7, #28]
}
 800cbd8:	bf00      	nop
 800cbda:	e7fe      	b.n	800cbda <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cbdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cbe2:	6850      	ldr	r0, [r2, #4]
 800cbe4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cbe6:	6892      	ldr	r2, [r2, #8]
 800cbe8:	4611      	mov	r1, r2
 800cbea:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	f2c0 80ab 	blt.w	800cd4a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cbf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbfa:	695b      	ldr	r3, [r3, #20]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d004      	beq.n	800cc0a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cc00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc02:	3304      	adds	r3, #4
 800cc04:	4618      	mov	r0, r3
 800cc06:	f7fd ff49 	bl	800aa9c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cc0a:	463b      	mov	r3, r7
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	f7ff ff6b 	bl	800cae8 <prvSampleTimeNow>
 800cc12:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2b09      	cmp	r3, #9
 800cc18:	f200 8096 	bhi.w	800cd48 <prvProcessReceivedCommands+0x19c>
 800cc1c:	a201      	add	r2, pc, #4	; (adr r2, 800cc24 <prvProcessReceivedCommands+0x78>)
 800cc1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc22:	bf00      	nop
 800cc24:	0800cc4d 	.word	0x0800cc4d
 800cc28:	0800cc4d 	.word	0x0800cc4d
 800cc2c:	0800cc4d 	.word	0x0800cc4d
 800cc30:	0800ccc1 	.word	0x0800ccc1
 800cc34:	0800ccd5 	.word	0x0800ccd5
 800cc38:	0800cd1f 	.word	0x0800cd1f
 800cc3c:	0800cc4d 	.word	0x0800cc4d
 800cc40:	0800cc4d 	.word	0x0800cc4d
 800cc44:	0800ccc1 	.word	0x0800ccc1
 800cc48:	0800ccd5 	.word	0x0800ccd5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cc4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cc52:	f043 0301 	orr.w	r3, r3, #1
 800cc56:	b2da      	uxtb	r2, r3
 800cc58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cc5e:	68ba      	ldr	r2, [r7, #8]
 800cc60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc62:	699b      	ldr	r3, [r3, #24]
 800cc64:	18d1      	adds	r1, r2, r3
 800cc66:	68bb      	ldr	r3, [r7, #8]
 800cc68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc6c:	f7ff ff5c 	bl	800cb28 <prvInsertTimerInActiveList>
 800cc70:	4603      	mov	r3, r0
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d069      	beq.n	800cd4a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cc76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc78:	6a1b      	ldr	r3, [r3, #32]
 800cc7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc7c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cc7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cc84:	f003 0304 	and.w	r3, r3, #4
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d05e      	beq.n	800cd4a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cc8c:	68ba      	ldr	r2, [r7, #8]
 800cc8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc90:	699b      	ldr	r3, [r3, #24]
 800cc92:	441a      	add	r2, r3
 800cc94:	2300      	movs	r3, #0
 800cc96:	9300      	str	r3, [sp, #0]
 800cc98:	2300      	movs	r3, #0
 800cc9a:	2100      	movs	r1, #0
 800cc9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc9e:	f7ff fe05 	bl	800c8ac <xTimerGenericCommand>
 800cca2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cca4:	6a3b      	ldr	r3, [r7, #32]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d14f      	bne.n	800cd4a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ccaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccae:	f383 8811 	msr	BASEPRI, r3
 800ccb2:	f3bf 8f6f 	isb	sy
 800ccb6:	f3bf 8f4f 	dsb	sy
 800ccba:	61bb      	str	r3, [r7, #24]
}
 800ccbc:	bf00      	nop
 800ccbe:	e7fe      	b.n	800ccbe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ccc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ccc6:	f023 0301 	bic.w	r3, r3, #1
 800ccca:	b2da      	uxtb	r2, r3
 800cccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ccd2:	e03a      	b.n	800cd4a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ccd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ccda:	f043 0301 	orr.w	r3, r3, #1
 800ccde:	b2da      	uxtb	r2, r3
 800cce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cce2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cce6:	68ba      	ldr	r2, [r7, #8]
 800cce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccea:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ccec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccee:	699b      	ldr	r3, [r3, #24]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d10a      	bne.n	800cd0a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ccf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf8:	f383 8811 	msr	BASEPRI, r3
 800ccfc:	f3bf 8f6f 	isb	sy
 800cd00:	f3bf 8f4f 	dsb	sy
 800cd04:	617b      	str	r3, [r7, #20]
}
 800cd06:	bf00      	nop
 800cd08:	e7fe      	b.n	800cd08 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cd0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd0c:	699a      	ldr	r2, [r3, #24]
 800cd0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd10:	18d1      	adds	r1, r2, r3
 800cd12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd18:	f7ff ff06 	bl	800cb28 <prvInsertTimerInActiveList>
					break;
 800cd1c:	e015      	b.n	800cd4a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cd1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd24:	f003 0302 	and.w	r3, r3, #2
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d103      	bne.n	800cd34 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800cd2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd2e:	f000 fbdf 	bl	800d4f0 <vPortFree>
 800cd32:	e00a      	b.n	800cd4a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cd34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd3a:	f023 0301 	bic.w	r3, r3, #1
 800cd3e:	b2da      	uxtb	r2, r3
 800cd40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cd46:	e000      	b.n	800cd4a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800cd48:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cd4a:	4b08      	ldr	r3, [pc, #32]	; (800cd6c <prvProcessReceivedCommands+0x1c0>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	1d39      	adds	r1, r7, #4
 800cd50:	2200      	movs	r2, #0
 800cd52:	4618      	mov	r0, r3
 800cd54:	f7fe f9a4 	bl	800b0a0 <xQueueReceive>
 800cd58:	4603      	mov	r3, r0
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	f47f af2a 	bne.w	800cbb4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800cd60:	bf00      	nop
 800cd62:	bf00      	nop
 800cd64:	3730      	adds	r7, #48	; 0x30
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bd80      	pop	{r7, pc}
 800cd6a:	bf00      	nop
 800cd6c:	200059fc 	.word	0x200059fc

0800cd70 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b088      	sub	sp, #32
 800cd74:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cd76:	e048      	b.n	800ce0a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cd78:	4b2d      	ldr	r3, [pc, #180]	; (800ce30 <prvSwitchTimerLists+0xc0>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	68db      	ldr	r3, [r3, #12]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd82:	4b2b      	ldr	r3, [pc, #172]	; (800ce30 <prvSwitchTimerLists+0xc0>)
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	68db      	ldr	r3, [r3, #12]
 800cd88:	68db      	ldr	r3, [r3, #12]
 800cd8a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	3304      	adds	r3, #4
 800cd90:	4618      	mov	r0, r3
 800cd92:	f7fd fe83 	bl	800aa9c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	6a1b      	ldr	r3, [r3, #32]
 800cd9a:	68f8      	ldr	r0, [r7, #12]
 800cd9c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cda4:	f003 0304 	and.w	r3, r3, #4
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d02e      	beq.n	800ce0a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	699b      	ldr	r3, [r3, #24]
 800cdb0:	693a      	ldr	r2, [r7, #16]
 800cdb2:	4413      	add	r3, r2
 800cdb4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cdb6:	68ba      	ldr	r2, [r7, #8]
 800cdb8:	693b      	ldr	r3, [r7, #16]
 800cdba:	429a      	cmp	r2, r3
 800cdbc:	d90e      	bls.n	800cddc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	68ba      	ldr	r2, [r7, #8]
 800cdc2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	68fa      	ldr	r2, [r7, #12]
 800cdc8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cdca:	4b19      	ldr	r3, [pc, #100]	; (800ce30 <prvSwitchTimerLists+0xc0>)
 800cdcc:	681a      	ldr	r2, [r3, #0]
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	3304      	adds	r3, #4
 800cdd2:	4619      	mov	r1, r3
 800cdd4:	4610      	mov	r0, r2
 800cdd6:	f7fd fe28 	bl	800aa2a <vListInsert>
 800cdda:	e016      	b.n	800ce0a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cddc:	2300      	movs	r3, #0
 800cdde:	9300      	str	r3, [sp, #0]
 800cde0:	2300      	movs	r3, #0
 800cde2:	693a      	ldr	r2, [r7, #16]
 800cde4:	2100      	movs	r1, #0
 800cde6:	68f8      	ldr	r0, [r7, #12]
 800cde8:	f7ff fd60 	bl	800c8ac <xTimerGenericCommand>
 800cdec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d10a      	bne.n	800ce0a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800cdf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdf8:	f383 8811 	msr	BASEPRI, r3
 800cdfc:	f3bf 8f6f 	isb	sy
 800ce00:	f3bf 8f4f 	dsb	sy
 800ce04:	603b      	str	r3, [r7, #0]
}
 800ce06:	bf00      	nop
 800ce08:	e7fe      	b.n	800ce08 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ce0a:	4b09      	ldr	r3, [pc, #36]	; (800ce30 <prvSwitchTimerLists+0xc0>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d1b1      	bne.n	800cd78 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ce14:	4b06      	ldr	r3, [pc, #24]	; (800ce30 <prvSwitchTimerLists+0xc0>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ce1a:	4b06      	ldr	r3, [pc, #24]	; (800ce34 <prvSwitchTimerLists+0xc4>)
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	4a04      	ldr	r2, [pc, #16]	; (800ce30 <prvSwitchTimerLists+0xc0>)
 800ce20:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ce22:	4a04      	ldr	r2, [pc, #16]	; (800ce34 <prvSwitchTimerLists+0xc4>)
 800ce24:	697b      	ldr	r3, [r7, #20]
 800ce26:	6013      	str	r3, [r2, #0]
}
 800ce28:	bf00      	nop
 800ce2a:	3718      	adds	r7, #24
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}
 800ce30:	200059f4 	.word	0x200059f4
 800ce34:	200059f8 	.word	0x200059f8

0800ce38 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b082      	sub	sp, #8
 800ce3c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ce3e:	f000 f969 	bl	800d114 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ce42:	4b15      	ldr	r3, [pc, #84]	; (800ce98 <prvCheckForValidListAndQueue+0x60>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d120      	bne.n	800ce8c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ce4a:	4814      	ldr	r0, [pc, #80]	; (800ce9c <prvCheckForValidListAndQueue+0x64>)
 800ce4c:	f7fd fd9c 	bl	800a988 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ce50:	4813      	ldr	r0, [pc, #76]	; (800cea0 <prvCheckForValidListAndQueue+0x68>)
 800ce52:	f7fd fd99 	bl	800a988 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ce56:	4b13      	ldr	r3, [pc, #76]	; (800cea4 <prvCheckForValidListAndQueue+0x6c>)
 800ce58:	4a10      	ldr	r2, [pc, #64]	; (800ce9c <prvCheckForValidListAndQueue+0x64>)
 800ce5a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ce5c:	4b12      	ldr	r3, [pc, #72]	; (800cea8 <prvCheckForValidListAndQueue+0x70>)
 800ce5e:	4a10      	ldr	r2, [pc, #64]	; (800cea0 <prvCheckForValidListAndQueue+0x68>)
 800ce60:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ce62:	2300      	movs	r3, #0
 800ce64:	9300      	str	r3, [sp, #0]
 800ce66:	4b11      	ldr	r3, [pc, #68]	; (800ceac <prvCheckForValidListAndQueue+0x74>)
 800ce68:	4a11      	ldr	r2, [pc, #68]	; (800ceb0 <prvCheckForValidListAndQueue+0x78>)
 800ce6a:	2110      	movs	r1, #16
 800ce6c:	200a      	movs	r0, #10
 800ce6e:	f7fd fea7 	bl	800abc0 <xQueueGenericCreateStatic>
 800ce72:	4603      	mov	r3, r0
 800ce74:	4a08      	ldr	r2, [pc, #32]	; (800ce98 <prvCheckForValidListAndQueue+0x60>)
 800ce76:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ce78:	4b07      	ldr	r3, [pc, #28]	; (800ce98 <prvCheckForValidListAndQueue+0x60>)
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d005      	beq.n	800ce8c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ce80:	4b05      	ldr	r3, [pc, #20]	; (800ce98 <prvCheckForValidListAndQueue+0x60>)
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	490b      	ldr	r1, [pc, #44]	; (800ceb4 <prvCheckForValidListAndQueue+0x7c>)
 800ce86:	4618      	mov	r0, r3
 800ce88:	f7fe fc1e 	bl	800b6c8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ce8c:	f000 f972 	bl	800d174 <vPortExitCritical>
}
 800ce90:	bf00      	nop
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bd80      	pop	{r7, pc}
 800ce96:	bf00      	nop
 800ce98:	200059fc 	.word	0x200059fc
 800ce9c:	200059cc 	.word	0x200059cc
 800cea0:	200059e0 	.word	0x200059e0
 800cea4:	200059f4 	.word	0x200059f4
 800cea8:	200059f8 	.word	0x200059f8
 800ceac:	20005aa8 	.word	0x20005aa8
 800ceb0:	20005a08 	.word	0x20005a08
 800ceb4:	08018778 	.word	0x08018778

0800ceb8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ceb8:	b480      	push	{r7}
 800ceba:	b085      	sub	sp, #20
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	60f8      	str	r0, [r7, #12]
 800cec0:	60b9      	str	r1, [r7, #8]
 800cec2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	3b04      	subs	r3, #4
 800cec8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ced0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	3b04      	subs	r3, #4
 800ced6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ced8:	68bb      	ldr	r3, [r7, #8]
 800ceda:	f023 0201 	bic.w	r2, r3, #1
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	3b04      	subs	r3, #4
 800cee6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cee8:	4a0c      	ldr	r2, [pc, #48]	; (800cf1c <pxPortInitialiseStack+0x64>)
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	3b14      	subs	r3, #20
 800cef2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cef4:	687a      	ldr	r2, [r7, #4]
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	3b04      	subs	r3, #4
 800cefe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	f06f 0202 	mvn.w	r2, #2
 800cf06:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	3b20      	subs	r3, #32
 800cf0c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
}
 800cf10:	4618      	mov	r0, r3
 800cf12:	3714      	adds	r7, #20
 800cf14:	46bd      	mov	sp, r7
 800cf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1a:	4770      	bx	lr
 800cf1c:	0800cf21 	.word	0x0800cf21

0800cf20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cf20:	b480      	push	{r7}
 800cf22:	b085      	sub	sp, #20
 800cf24:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cf26:	2300      	movs	r3, #0
 800cf28:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cf2a:	4b12      	ldr	r3, [pc, #72]	; (800cf74 <prvTaskExitError+0x54>)
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf32:	d00a      	beq.n	800cf4a <prvTaskExitError+0x2a>
	__asm volatile
 800cf34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf38:	f383 8811 	msr	BASEPRI, r3
 800cf3c:	f3bf 8f6f 	isb	sy
 800cf40:	f3bf 8f4f 	dsb	sy
 800cf44:	60fb      	str	r3, [r7, #12]
}
 800cf46:	bf00      	nop
 800cf48:	e7fe      	b.n	800cf48 <prvTaskExitError+0x28>
	__asm volatile
 800cf4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf4e:	f383 8811 	msr	BASEPRI, r3
 800cf52:	f3bf 8f6f 	isb	sy
 800cf56:	f3bf 8f4f 	dsb	sy
 800cf5a:	60bb      	str	r3, [r7, #8]
}
 800cf5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cf5e:	bf00      	nop
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d0fc      	beq.n	800cf60 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cf66:	bf00      	nop
 800cf68:	bf00      	nop
 800cf6a:	3714      	adds	r7, #20
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf72:	4770      	bx	lr
 800cf74:	20000020 	.word	0x20000020
	...

0800cf80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cf80:	4b07      	ldr	r3, [pc, #28]	; (800cfa0 <pxCurrentTCBConst2>)
 800cf82:	6819      	ldr	r1, [r3, #0]
 800cf84:	6808      	ldr	r0, [r1, #0]
 800cf86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf8a:	f380 8809 	msr	PSP, r0
 800cf8e:	f3bf 8f6f 	isb	sy
 800cf92:	f04f 0000 	mov.w	r0, #0
 800cf96:	f380 8811 	msr	BASEPRI, r0
 800cf9a:	4770      	bx	lr
 800cf9c:	f3af 8000 	nop.w

0800cfa0 <pxCurrentTCBConst2>:
 800cfa0:	200054cc 	.word	0x200054cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cfa4:	bf00      	nop
 800cfa6:	bf00      	nop

0800cfa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cfa8:	4808      	ldr	r0, [pc, #32]	; (800cfcc <prvPortStartFirstTask+0x24>)
 800cfaa:	6800      	ldr	r0, [r0, #0]
 800cfac:	6800      	ldr	r0, [r0, #0]
 800cfae:	f380 8808 	msr	MSP, r0
 800cfb2:	f04f 0000 	mov.w	r0, #0
 800cfb6:	f380 8814 	msr	CONTROL, r0
 800cfba:	b662      	cpsie	i
 800cfbc:	b661      	cpsie	f
 800cfbe:	f3bf 8f4f 	dsb	sy
 800cfc2:	f3bf 8f6f 	isb	sy
 800cfc6:	df00      	svc	0
 800cfc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cfca:	bf00      	nop
 800cfcc:	e000ed08 	.word	0xe000ed08

0800cfd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b086      	sub	sp, #24
 800cfd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cfd6:	4b46      	ldr	r3, [pc, #280]	; (800d0f0 <xPortStartScheduler+0x120>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	4a46      	ldr	r2, [pc, #280]	; (800d0f4 <xPortStartScheduler+0x124>)
 800cfdc:	4293      	cmp	r3, r2
 800cfde:	d10a      	bne.n	800cff6 <xPortStartScheduler+0x26>
	__asm volatile
 800cfe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfe4:	f383 8811 	msr	BASEPRI, r3
 800cfe8:	f3bf 8f6f 	isb	sy
 800cfec:	f3bf 8f4f 	dsb	sy
 800cff0:	613b      	str	r3, [r7, #16]
}
 800cff2:	bf00      	nop
 800cff4:	e7fe      	b.n	800cff4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cff6:	4b3e      	ldr	r3, [pc, #248]	; (800d0f0 <xPortStartScheduler+0x120>)
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	4a3f      	ldr	r2, [pc, #252]	; (800d0f8 <xPortStartScheduler+0x128>)
 800cffc:	4293      	cmp	r3, r2
 800cffe:	d10a      	bne.n	800d016 <xPortStartScheduler+0x46>
	__asm volatile
 800d000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d004:	f383 8811 	msr	BASEPRI, r3
 800d008:	f3bf 8f6f 	isb	sy
 800d00c:	f3bf 8f4f 	dsb	sy
 800d010:	60fb      	str	r3, [r7, #12]
}
 800d012:	bf00      	nop
 800d014:	e7fe      	b.n	800d014 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d016:	4b39      	ldr	r3, [pc, #228]	; (800d0fc <xPortStartScheduler+0x12c>)
 800d018:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d01a:	697b      	ldr	r3, [r7, #20]
 800d01c:	781b      	ldrb	r3, [r3, #0]
 800d01e:	b2db      	uxtb	r3, r3
 800d020:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d022:	697b      	ldr	r3, [r7, #20]
 800d024:	22ff      	movs	r2, #255	; 0xff
 800d026:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d028:	697b      	ldr	r3, [r7, #20]
 800d02a:	781b      	ldrb	r3, [r3, #0]
 800d02c:	b2db      	uxtb	r3, r3
 800d02e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d030:	78fb      	ldrb	r3, [r7, #3]
 800d032:	b2db      	uxtb	r3, r3
 800d034:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d038:	b2da      	uxtb	r2, r3
 800d03a:	4b31      	ldr	r3, [pc, #196]	; (800d100 <xPortStartScheduler+0x130>)
 800d03c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d03e:	4b31      	ldr	r3, [pc, #196]	; (800d104 <xPortStartScheduler+0x134>)
 800d040:	2207      	movs	r2, #7
 800d042:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d044:	e009      	b.n	800d05a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d046:	4b2f      	ldr	r3, [pc, #188]	; (800d104 <xPortStartScheduler+0x134>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	3b01      	subs	r3, #1
 800d04c:	4a2d      	ldr	r2, [pc, #180]	; (800d104 <xPortStartScheduler+0x134>)
 800d04e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d050:	78fb      	ldrb	r3, [r7, #3]
 800d052:	b2db      	uxtb	r3, r3
 800d054:	005b      	lsls	r3, r3, #1
 800d056:	b2db      	uxtb	r3, r3
 800d058:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d05a:	78fb      	ldrb	r3, [r7, #3]
 800d05c:	b2db      	uxtb	r3, r3
 800d05e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d062:	2b80      	cmp	r3, #128	; 0x80
 800d064:	d0ef      	beq.n	800d046 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d066:	4b27      	ldr	r3, [pc, #156]	; (800d104 <xPortStartScheduler+0x134>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	f1c3 0307 	rsb	r3, r3, #7
 800d06e:	2b04      	cmp	r3, #4
 800d070:	d00a      	beq.n	800d088 <xPortStartScheduler+0xb8>
	__asm volatile
 800d072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d076:	f383 8811 	msr	BASEPRI, r3
 800d07a:	f3bf 8f6f 	isb	sy
 800d07e:	f3bf 8f4f 	dsb	sy
 800d082:	60bb      	str	r3, [r7, #8]
}
 800d084:	bf00      	nop
 800d086:	e7fe      	b.n	800d086 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d088:	4b1e      	ldr	r3, [pc, #120]	; (800d104 <xPortStartScheduler+0x134>)
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	021b      	lsls	r3, r3, #8
 800d08e:	4a1d      	ldr	r2, [pc, #116]	; (800d104 <xPortStartScheduler+0x134>)
 800d090:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d092:	4b1c      	ldr	r3, [pc, #112]	; (800d104 <xPortStartScheduler+0x134>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d09a:	4a1a      	ldr	r2, [pc, #104]	; (800d104 <xPortStartScheduler+0x134>)
 800d09c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	b2da      	uxtb	r2, r3
 800d0a2:	697b      	ldr	r3, [r7, #20]
 800d0a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d0a6:	4b18      	ldr	r3, [pc, #96]	; (800d108 <xPortStartScheduler+0x138>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	4a17      	ldr	r2, [pc, #92]	; (800d108 <xPortStartScheduler+0x138>)
 800d0ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d0b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d0b2:	4b15      	ldr	r3, [pc, #84]	; (800d108 <xPortStartScheduler+0x138>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	4a14      	ldr	r2, [pc, #80]	; (800d108 <xPortStartScheduler+0x138>)
 800d0b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d0bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d0be:	f000 f8dd 	bl	800d27c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d0c2:	4b12      	ldr	r3, [pc, #72]	; (800d10c <xPortStartScheduler+0x13c>)
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d0c8:	f000 f8fc 	bl	800d2c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d0cc:	4b10      	ldr	r3, [pc, #64]	; (800d110 <xPortStartScheduler+0x140>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	4a0f      	ldr	r2, [pc, #60]	; (800d110 <xPortStartScheduler+0x140>)
 800d0d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d0d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d0d8:	f7ff ff66 	bl	800cfa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d0dc:	f7fe ff24 	bl	800bf28 <vTaskSwitchContext>
	prvTaskExitError();
 800d0e0:	f7ff ff1e 	bl	800cf20 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d0e4:	2300      	movs	r3, #0
}
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	3718      	adds	r7, #24
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	bd80      	pop	{r7, pc}
 800d0ee:	bf00      	nop
 800d0f0:	e000ed00 	.word	0xe000ed00
 800d0f4:	410fc271 	.word	0x410fc271
 800d0f8:	410fc270 	.word	0x410fc270
 800d0fc:	e000e400 	.word	0xe000e400
 800d100:	20005af8 	.word	0x20005af8
 800d104:	20005afc 	.word	0x20005afc
 800d108:	e000ed20 	.word	0xe000ed20
 800d10c:	20000020 	.word	0x20000020
 800d110:	e000ef34 	.word	0xe000ef34

0800d114 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d114:	b480      	push	{r7}
 800d116:	b083      	sub	sp, #12
 800d118:	af00      	add	r7, sp, #0
	__asm volatile
 800d11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d11e:	f383 8811 	msr	BASEPRI, r3
 800d122:	f3bf 8f6f 	isb	sy
 800d126:	f3bf 8f4f 	dsb	sy
 800d12a:	607b      	str	r3, [r7, #4]
}
 800d12c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d12e:	4b0f      	ldr	r3, [pc, #60]	; (800d16c <vPortEnterCritical+0x58>)
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	3301      	adds	r3, #1
 800d134:	4a0d      	ldr	r2, [pc, #52]	; (800d16c <vPortEnterCritical+0x58>)
 800d136:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d138:	4b0c      	ldr	r3, [pc, #48]	; (800d16c <vPortEnterCritical+0x58>)
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	2b01      	cmp	r3, #1
 800d13e:	d10f      	bne.n	800d160 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d140:	4b0b      	ldr	r3, [pc, #44]	; (800d170 <vPortEnterCritical+0x5c>)
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	b2db      	uxtb	r3, r3
 800d146:	2b00      	cmp	r3, #0
 800d148:	d00a      	beq.n	800d160 <vPortEnterCritical+0x4c>
	__asm volatile
 800d14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d14e:	f383 8811 	msr	BASEPRI, r3
 800d152:	f3bf 8f6f 	isb	sy
 800d156:	f3bf 8f4f 	dsb	sy
 800d15a:	603b      	str	r3, [r7, #0]
}
 800d15c:	bf00      	nop
 800d15e:	e7fe      	b.n	800d15e <vPortEnterCritical+0x4a>
	}
}
 800d160:	bf00      	nop
 800d162:	370c      	adds	r7, #12
 800d164:	46bd      	mov	sp, r7
 800d166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16a:	4770      	bx	lr
 800d16c:	20000020 	.word	0x20000020
 800d170:	e000ed04 	.word	0xe000ed04

0800d174 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d174:	b480      	push	{r7}
 800d176:	b083      	sub	sp, #12
 800d178:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d17a:	4b12      	ldr	r3, [pc, #72]	; (800d1c4 <vPortExitCritical+0x50>)
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d10a      	bne.n	800d198 <vPortExitCritical+0x24>
	__asm volatile
 800d182:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d186:	f383 8811 	msr	BASEPRI, r3
 800d18a:	f3bf 8f6f 	isb	sy
 800d18e:	f3bf 8f4f 	dsb	sy
 800d192:	607b      	str	r3, [r7, #4]
}
 800d194:	bf00      	nop
 800d196:	e7fe      	b.n	800d196 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d198:	4b0a      	ldr	r3, [pc, #40]	; (800d1c4 <vPortExitCritical+0x50>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	3b01      	subs	r3, #1
 800d19e:	4a09      	ldr	r2, [pc, #36]	; (800d1c4 <vPortExitCritical+0x50>)
 800d1a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d1a2:	4b08      	ldr	r3, [pc, #32]	; (800d1c4 <vPortExitCritical+0x50>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d105      	bne.n	800d1b6 <vPortExitCritical+0x42>
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	f383 8811 	msr	BASEPRI, r3
}
 800d1b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d1b6:	bf00      	nop
 800d1b8:	370c      	adds	r7, #12
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c0:	4770      	bx	lr
 800d1c2:	bf00      	nop
 800d1c4:	20000020 	.word	0x20000020
	...

0800d1d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d1d0:	f3ef 8009 	mrs	r0, PSP
 800d1d4:	f3bf 8f6f 	isb	sy
 800d1d8:	4b15      	ldr	r3, [pc, #84]	; (800d230 <pxCurrentTCBConst>)
 800d1da:	681a      	ldr	r2, [r3, #0]
 800d1dc:	f01e 0f10 	tst.w	lr, #16
 800d1e0:	bf08      	it	eq
 800d1e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d1e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1ea:	6010      	str	r0, [r2, #0]
 800d1ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d1f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d1f4:	f380 8811 	msr	BASEPRI, r0
 800d1f8:	f3bf 8f4f 	dsb	sy
 800d1fc:	f3bf 8f6f 	isb	sy
 800d200:	f7fe fe92 	bl	800bf28 <vTaskSwitchContext>
 800d204:	f04f 0000 	mov.w	r0, #0
 800d208:	f380 8811 	msr	BASEPRI, r0
 800d20c:	bc09      	pop	{r0, r3}
 800d20e:	6819      	ldr	r1, [r3, #0]
 800d210:	6808      	ldr	r0, [r1, #0]
 800d212:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d216:	f01e 0f10 	tst.w	lr, #16
 800d21a:	bf08      	it	eq
 800d21c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d220:	f380 8809 	msr	PSP, r0
 800d224:	f3bf 8f6f 	isb	sy
 800d228:	4770      	bx	lr
 800d22a:	bf00      	nop
 800d22c:	f3af 8000 	nop.w

0800d230 <pxCurrentTCBConst>:
 800d230:	200054cc 	.word	0x200054cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d234:	bf00      	nop
 800d236:	bf00      	nop

0800d238 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b082      	sub	sp, #8
 800d23c:	af00      	add	r7, sp, #0
	__asm volatile
 800d23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d242:	f383 8811 	msr	BASEPRI, r3
 800d246:	f3bf 8f6f 	isb	sy
 800d24a:	f3bf 8f4f 	dsb	sy
 800d24e:	607b      	str	r3, [r7, #4]
}
 800d250:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d252:	f7fe fdaf 	bl	800bdb4 <xTaskIncrementTick>
 800d256:	4603      	mov	r3, r0
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d003      	beq.n	800d264 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d25c:	4b06      	ldr	r3, [pc, #24]	; (800d278 <xPortSysTickHandler+0x40>)
 800d25e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d262:	601a      	str	r2, [r3, #0]
 800d264:	2300      	movs	r3, #0
 800d266:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	f383 8811 	msr	BASEPRI, r3
}
 800d26e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d270:	bf00      	nop
 800d272:	3708      	adds	r7, #8
 800d274:	46bd      	mov	sp, r7
 800d276:	bd80      	pop	{r7, pc}
 800d278:	e000ed04 	.word	0xe000ed04

0800d27c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d27c:	b480      	push	{r7}
 800d27e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d280:	4b0b      	ldr	r3, [pc, #44]	; (800d2b0 <vPortSetupTimerInterrupt+0x34>)
 800d282:	2200      	movs	r2, #0
 800d284:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d286:	4b0b      	ldr	r3, [pc, #44]	; (800d2b4 <vPortSetupTimerInterrupt+0x38>)
 800d288:	2200      	movs	r2, #0
 800d28a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d28c:	4b0a      	ldr	r3, [pc, #40]	; (800d2b8 <vPortSetupTimerInterrupt+0x3c>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	4a0a      	ldr	r2, [pc, #40]	; (800d2bc <vPortSetupTimerInterrupt+0x40>)
 800d292:	fba2 2303 	umull	r2, r3, r2, r3
 800d296:	099b      	lsrs	r3, r3, #6
 800d298:	4a09      	ldr	r2, [pc, #36]	; (800d2c0 <vPortSetupTimerInterrupt+0x44>)
 800d29a:	3b01      	subs	r3, #1
 800d29c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d29e:	4b04      	ldr	r3, [pc, #16]	; (800d2b0 <vPortSetupTimerInterrupt+0x34>)
 800d2a0:	2207      	movs	r2, #7
 800d2a2:	601a      	str	r2, [r3, #0]
}
 800d2a4:	bf00      	nop
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ac:	4770      	bx	lr
 800d2ae:	bf00      	nop
 800d2b0:	e000e010 	.word	0xe000e010
 800d2b4:	e000e018 	.word	0xe000e018
 800d2b8:	20000000 	.word	0x20000000
 800d2bc:	10624dd3 	.word	0x10624dd3
 800d2c0:	e000e014 	.word	0xe000e014

0800d2c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d2c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d2d4 <vPortEnableVFP+0x10>
 800d2c8:	6801      	ldr	r1, [r0, #0]
 800d2ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d2ce:	6001      	str	r1, [r0, #0]
 800d2d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d2d2:	bf00      	nop
 800d2d4:	e000ed88 	.word	0xe000ed88

0800d2d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d2d8:	b480      	push	{r7}
 800d2da:	b085      	sub	sp, #20
 800d2dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d2de:	f3ef 8305 	mrs	r3, IPSR
 800d2e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	2b0f      	cmp	r3, #15
 800d2e8:	d914      	bls.n	800d314 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d2ea:	4a17      	ldr	r2, [pc, #92]	; (800d348 <vPortValidateInterruptPriority+0x70>)
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	4413      	add	r3, r2
 800d2f0:	781b      	ldrb	r3, [r3, #0]
 800d2f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d2f4:	4b15      	ldr	r3, [pc, #84]	; (800d34c <vPortValidateInterruptPriority+0x74>)
 800d2f6:	781b      	ldrb	r3, [r3, #0]
 800d2f8:	7afa      	ldrb	r2, [r7, #11]
 800d2fa:	429a      	cmp	r2, r3
 800d2fc:	d20a      	bcs.n	800d314 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d302:	f383 8811 	msr	BASEPRI, r3
 800d306:	f3bf 8f6f 	isb	sy
 800d30a:	f3bf 8f4f 	dsb	sy
 800d30e:	607b      	str	r3, [r7, #4]
}
 800d310:	bf00      	nop
 800d312:	e7fe      	b.n	800d312 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d314:	4b0e      	ldr	r3, [pc, #56]	; (800d350 <vPortValidateInterruptPriority+0x78>)
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d31c:	4b0d      	ldr	r3, [pc, #52]	; (800d354 <vPortValidateInterruptPriority+0x7c>)
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	429a      	cmp	r2, r3
 800d322:	d90a      	bls.n	800d33a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d328:	f383 8811 	msr	BASEPRI, r3
 800d32c:	f3bf 8f6f 	isb	sy
 800d330:	f3bf 8f4f 	dsb	sy
 800d334:	603b      	str	r3, [r7, #0]
}
 800d336:	bf00      	nop
 800d338:	e7fe      	b.n	800d338 <vPortValidateInterruptPriority+0x60>
	}
 800d33a:	bf00      	nop
 800d33c:	3714      	adds	r7, #20
 800d33e:	46bd      	mov	sp, r7
 800d340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d344:	4770      	bx	lr
 800d346:	bf00      	nop
 800d348:	e000e3f0 	.word	0xe000e3f0
 800d34c:	20005af8 	.word	0x20005af8
 800d350:	e000ed0c 	.word	0xe000ed0c
 800d354:	20005afc 	.word	0x20005afc

0800d358 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b08a      	sub	sp, #40	; 0x28
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d360:	2300      	movs	r3, #0
 800d362:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d364:	f7fe fc6a 	bl	800bc3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d368:	4b5b      	ldr	r3, [pc, #364]	; (800d4d8 <pvPortMalloc+0x180>)
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d101      	bne.n	800d374 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d370:	f000 f920 	bl	800d5b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d374:	4b59      	ldr	r3, [pc, #356]	; (800d4dc <pvPortMalloc+0x184>)
 800d376:	681a      	ldr	r2, [r3, #0]
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	4013      	ands	r3, r2
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	f040 8093 	bne.w	800d4a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d01d      	beq.n	800d3c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d388:	2208      	movs	r2, #8
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	4413      	add	r3, r2
 800d38e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	f003 0307 	and.w	r3, r3, #7
 800d396:	2b00      	cmp	r3, #0
 800d398:	d014      	beq.n	800d3c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	f023 0307 	bic.w	r3, r3, #7
 800d3a0:	3308      	adds	r3, #8
 800d3a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f003 0307 	and.w	r3, r3, #7
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d00a      	beq.n	800d3c4 <pvPortMalloc+0x6c>
	__asm volatile
 800d3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3b2:	f383 8811 	msr	BASEPRI, r3
 800d3b6:	f3bf 8f6f 	isb	sy
 800d3ba:	f3bf 8f4f 	dsb	sy
 800d3be:	617b      	str	r3, [r7, #20]
}
 800d3c0:	bf00      	nop
 800d3c2:	e7fe      	b.n	800d3c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d06e      	beq.n	800d4a8 <pvPortMalloc+0x150>
 800d3ca:	4b45      	ldr	r3, [pc, #276]	; (800d4e0 <pvPortMalloc+0x188>)
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	687a      	ldr	r2, [r7, #4]
 800d3d0:	429a      	cmp	r2, r3
 800d3d2:	d869      	bhi.n	800d4a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d3d4:	4b43      	ldr	r3, [pc, #268]	; (800d4e4 <pvPortMalloc+0x18c>)
 800d3d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d3d8:	4b42      	ldr	r3, [pc, #264]	; (800d4e4 <pvPortMalloc+0x18c>)
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d3de:	e004      	b.n	800d3ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ec:	685b      	ldr	r3, [r3, #4]
 800d3ee:	687a      	ldr	r2, [r7, #4]
 800d3f0:	429a      	cmp	r2, r3
 800d3f2:	d903      	bls.n	800d3fc <pvPortMalloc+0xa4>
 800d3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d1f1      	bne.n	800d3e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d3fc:	4b36      	ldr	r3, [pc, #216]	; (800d4d8 <pvPortMalloc+0x180>)
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d402:	429a      	cmp	r2, r3
 800d404:	d050      	beq.n	800d4a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d406:	6a3b      	ldr	r3, [r7, #32]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	2208      	movs	r2, #8
 800d40c:	4413      	add	r3, r2
 800d40e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d412:	681a      	ldr	r2, [r3, #0]
 800d414:	6a3b      	ldr	r3, [r7, #32]
 800d416:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d41a:	685a      	ldr	r2, [r3, #4]
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	1ad2      	subs	r2, r2, r3
 800d420:	2308      	movs	r3, #8
 800d422:	005b      	lsls	r3, r3, #1
 800d424:	429a      	cmp	r2, r3
 800d426:	d91f      	bls.n	800d468 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	4413      	add	r3, r2
 800d42e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d430:	69bb      	ldr	r3, [r7, #24]
 800d432:	f003 0307 	and.w	r3, r3, #7
 800d436:	2b00      	cmp	r3, #0
 800d438:	d00a      	beq.n	800d450 <pvPortMalloc+0xf8>
	__asm volatile
 800d43a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d43e:	f383 8811 	msr	BASEPRI, r3
 800d442:	f3bf 8f6f 	isb	sy
 800d446:	f3bf 8f4f 	dsb	sy
 800d44a:	613b      	str	r3, [r7, #16]
}
 800d44c:	bf00      	nop
 800d44e:	e7fe      	b.n	800d44e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d452:	685a      	ldr	r2, [r3, #4]
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	1ad2      	subs	r2, r2, r3
 800d458:	69bb      	ldr	r3, [r7, #24]
 800d45a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d45e:	687a      	ldr	r2, [r7, #4]
 800d460:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d462:	69b8      	ldr	r0, [r7, #24]
 800d464:	f000 f908 	bl	800d678 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d468:	4b1d      	ldr	r3, [pc, #116]	; (800d4e0 <pvPortMalloc+0x188>)
 800d46a:	681a      	ldr	r2, [r3, #0]
 800d46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d46e:	685b      	ldr	r3, [r3, #4]
 800d470:	1ad3      	subs	r3, r2, r3
 800d472:	4a1b      	ldr	r2, [pc, #108]	; (800d4e0 <pvPortMalloc+0x188>)
 800d474:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d476:	4b1a      	ldr	r3, [pc, #104]	; (800d4e0 <pvPortMalloc+0x188>)
 800d478:	681a      	ldr	r2, [r3, #0]
 800d47a:	4b1b      	ldr	r3, [pc, #108]	; (800d4e8 <pvPortMalloc+0x190>)
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	429a      	cmp	r2, r3
 800d480:	d203      	bcs.n	800d48a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d482:	4b17      	ldr	r3, [pc, #92]	; (800d4e0 <pvPortMalloc+0x188>)
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	4a18      	ldr	r2, [pc, #96]	; (800d4e8 <pvPortMalloc+0x190>)
 800d488:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d48c:	685a      	ldr	r2, [r3, #4]
 800d48e:	4b13      	ldr	r3, [pc, #76]	; (800d4dc <pvPortMalloc+0x184>)
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	431a      	orrs	r2, r3
 800d494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d496:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d49a:	2200      	movs	r2, #0
 800d49c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d49e:	4b13      	ldr	r3, [pc, #76]	; (800d4ec <pvPortMalloc+0x194>)
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	3301      	adds	r3, #1
 800d4a4:	4a11      	ldr	r2, [pc, #68]	; (800d4ec <pvPortMalloc+0x194>)
 800d4a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d4a8:	f7fe fbd6 	bl	800bc58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d4ac:	69fb      	ldr	r3, [r7, #28]
 800d4ae:	f003 0307 	and.w	r3, r3, #7
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d00a      	beq.n	800d4cc <pvPortMalloc+0x174>
	__asm volatile
 800d4b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ba:	f383 8811 	msr	BASEPRI, r3
 800d4be:	f3bf 8f6f 	isb	sy
 800d4c2:	f3bf 8f4f 	dsb	sy
 800d4c6:	60fb      	str	r3, [r7, #12]
}
 800d4c8:	bf00      	nop
 800d4ca:	e7fe      	b.n	800d4ca <pvPortMalloc+0x172>
	return pvReturn;
 800d4cc:	69fb      	ldr	r3, [r7, #28]
}
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	3728      	adds	r7, #40	; 0x28
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bd80      	pop	{r7, pc}
 800d4d6:	bf00      	nop
 800d4d8:	20009b08 	.word	0x20009b08
 800d4dc:	20009b1c 	.word	0x20009b1c
 800d4e0:	20009b0c 	.word	0x20009b0c
 800d4e4:	20009b00 	.word	0x20009b00
 800d4e8:	20009b10 	.word	0x20009b10
 800d4ec:	20009b14 	.word	0x20009b14

0800d4f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b086      	sub	sp, #24
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d04d      	beq.n	800d59e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d502:	2308      	movs	r3, #8
 800d504:	425b      	negs	r3, r3
 800d506:	697a      	ldr	r2, [r7, #20]
 800d508:	4413      	add	r3, r2
 800d50a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d50c:	697b      	ldr	r3, [r7, #20]
 800d50e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d510:	693b      	ldr	r3, [r7, #16]
 800d512:	685a      	ldr	r2, [r3, #4]
 800d514:	4b24      	ldr	r3, [pc, #144]	; (800d5a8 <vPortFree+0xb8>)
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	4013      	ands	r3, r2
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d10a      	bne.n	800d534 <vPortFree+0x44>
	__asm volatile
 800d51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d522:	f383 8811 	msr	BASEPRI, r3
 800d526:	f3bf 8f6f 	isb	sy
 800d52a:	f3bf 8f4f 	dsb	sy
 800d52e:	60fb      	str	r3, [r7, #12]
}
 800d530:	bf00      	nop
 800d532:	e7fe      	b.n	800d532 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d534:	693b      	ldr	r3, [r7, #16]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d00a      	beq.n	800d552 <vPortFree+0x62>
	__asm volatile
 800d53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d540:	f383 8811 	msr	BASEPRI, r3
 800d544:	f3bf 8f6f 	isb	sy
 800d548:	f3bf 8f4f 	dsb	sy
 800d54c:	60bb      	str	r3, [r7, #8]
}
 800d54e:	bf00      	nop
 800d550:	e7fe      	b.n	800d550 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d552:	693b      	ldr	r3, [r7, #16]
 800d554:	685a      	ldr	r2, [r3, #4]
 800d556:	4b14      	ldr	r3, [pc, #80]	; (800d5a8 <vPortFree+0xb8>)
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	4013      	ands	r3, r2
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d01e      	beq.n	800d59e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d560:	693b      	ldr	r3, [r7, #16]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d11a      	bne.n	800d59e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d568:	693b      	ldr	r3, [r7, #16]
 800d56a:	685a      	ldr	r2, [r3, #4]
 800d56c:	4b0e      	ldr	r3, [pc, #56]	; (800d5a8 <vPortFree+0xb8>)
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	43db      	mvns	r3, r3
 800d572:	401a      	ands	r2, r3
 800d574:	693b      	ldr	r3, [r7, #16]
 800d576:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d578:	f7fe fb60 	bl	800bc3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d57c:	693b      	ldr	r3, [r7, #16]
 800d57e:	685a      	ldr	r2, [r3, #4]
 800d580:	4b0a      	ldr	r3, [pc, #40]	; (800d5ac <vPortFree+0xbc>)
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	4413      	add	r3, r2
 800d586:	4a09      	ldr	r2, [pc, #36]	; (800d5ac <vPortFree+0xbc>)
 800d588:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d58a:	6938      	ldr	r0, [r7, #16]
 800d58c:	f000 f874 	bl	800d678 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d590:	4b07      	ldr	r3, [pc, #28]	; (800d5b0 <vPortFree+0xc0>)
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	3301      	adds	r3, #1
 800d596:	4a06      	ldr	r2, [pc, #24]	; (800d5b0 <vPortFree+0xc0>)
 800d598:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d59a:	f7fe fb5d 	bl	800bc58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d59e:	bf00      	nop
 800d5a0:	3718      	adds	r7, #24
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bd80      	pop	{r7, pc}
 800d5a6:	bf00      	nop
 800d5a8:	20009b1c 	.word	0x20009b1c
 800d5ac:	20009b0c 	.word	0x20009b0c
 800d5b0:	20009b18 	.word	0x20009b18

0800d5b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d5b4:	b480      	push	{r7}
 800d5b6:	b085      	sub	sp, #20
 800d5b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d5ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d5be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d5c0:	4b27      	ldr	r3, [pc, #156]	; (800d660 <prvHeapInit+0xac>)
 800d5c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	f003 0307 	and.w	r3, r3, #7
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d00c      	beq.n	800d5e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	3307      	adds	r3, #7
 800d5d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	f023 0307 	bic.w	r3, r3, #7
 800d5da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d5dc:	68ba      	ldr	r2, [r7, #8]
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	1ad3      	subs	r3, r2, r3
 800d5e2:	4a1f      	ldr	r2, [pc, #124]	; (800d660 <prvHeapInit+0xac>)
 800d5e4:	4413      	add	r3, r2
 800d5e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d5ec:	4a1d      	ldr	r2, [pc, #116]	; (800d664 <prvHeapInit+0xb0>)
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d5f2:	4b1c      	ldr	r3, [pc, #112]	; (800d664 <prvHeapInit+0xb0>)
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	68ba      	ldr	r2, [r7, #8]
 800d5fc:	4413      	add	r3, r2
 800d5fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d600:	2208      	movs	r2, #8
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	1a9b      	subs	r3, r3, r2
 800d606:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	f023 0307 	bic.w	r3, r3, #7
 800d60e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	4a15      	ldr	r2, [pc, #84]	; (800d668 <prvHeapInit+0xb4>)
 800d614:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d616:	4b14      	ldr	r3, [pc, #80]	; (800d668 <prvHeapInit+0xb4>)
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	2200      	movs	r2, #0
 800d61c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d61e:	4b12      	ldr	r3, [pc, #72]	; (800d668 <prvHeapInit+0xb4>)
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	2200      	movs	r2, #0
 800d624:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	68fa      	ldr	r2, [r7, #12]
 800d62e:	1ad2      	subs	r2, r2, r3
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d634:	4b0c      	ldr	r3, [pc, #48]	; (800d668 <prvHeapInit+0xb4>)
 800d636:	681a      	ldr	r2, [r3, #0]
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d63c:	683b      	ldr	r3, [r7, #0]
 800d63e:	685b      	ldr	r3, [r3, #4]
 800d640:	4a0a      	ldr	r2, [pc, #40]	; (800d66c <prvHeapInit+0xb8>)
 800d642:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	685b      	ldr	r3, [r3, #4]
 800d648:	4a09      	ldr	r2, [pc, #36]	; (800d670 <prvHeapInit+0xbc>)
 800d64a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d64c:	4b09      	ldr	r3, [pc, #36]	; (800d674 <prvHeapInit+0xc0>)
 800d64e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d652:	601a      	str	r2, [r3, #0]
}
 800d654:	bf00      	nop
 800d656:	3714      	adds	r7, #20
 800d658:	46bd      	mov	sp, r7
 800d65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65e:	4770      	bx	lr
 800d660:	20005b00 	.word	0x20005b00
 800d664:	20009b00 	.word	0x20009b00
 800d668:	20009b08 	.word	0x20009b08
 800d66c:	20009b10 	.word	0x20009b10
 800d670:	20009b0c 	.word	0x20009b0c
 800d674:	20009b1c 	.word	0x20009b1c

0800d678 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d678:	b480      	push	{r7}
 800d67a:	b085      	sub	sp, #20
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d680:	4b28      	ldr	r3, [pc, #160]	; (800d724 <prvInsertBlockIntoFreeList+0xac>)
 800d682:	60fb      	str	r3, [r7, #12]
 800d684:	e002      	b.n	800d68c <prvInsertBlockIntoFreeList+0x14>
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	60fb      	str	r3, [r7, #12]
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	687a      	ldr	r2, [r7, #4]
 800d692:	429a      	cmp	r2, r3
 800d694:	d8f7      	bhi.n	800d686 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	685b      	ldr	r3, [r3, #4]
 800d69e:	68ba      	ldr	r2, [r7, #8]
 800d6a0:	4413      	add	r3, r2
 800d6a2:	687a      	ldr	r2, [r7, #4]
 800d6a4:	429a      	cmp	r2, r3
 800d6a6:	d108      	bne.n	800d6ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	685a      	ldr	r2, [r3, #4]
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	685b      	ldr	r3, [r3, #4]
 800d6b0:	441a      	add	r2, r3
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	685b      	ldr	r3, [r3, #4]
 800d6c2:	68ba      	ldr	r2, [r7, #8]
 800d6c4:	441a      	add	r2, r3
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	429a      	cmp	r2, r3
 800d6cc:	d118      	bne.n	800d700 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	681a      	ldr	r2, [r3, #0]
 800d6d2:	4b15      	ldr	r3, [pc, #84]	; (800d728 <prvInsertBlockIntoFreeList+0xb0>)
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	429a      	cmp	r2, r3
 800d6d8:	d00d      	beq.n	800d6f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	685a      	ldr	r2, [r3, #4]
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	685b      	ldr	r3, [r3, #4]
 800d6e4:	441a      	add	r2, r3
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	681a      	ldr	r2, [r3, #0]
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	601a      	str	r2, [r3, #0]
 800d6f4:	e008      	b.n	800d708 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d6f6:	4b0c      	ldr	r3, [pc, #48]	; (800d728 <prvInsertBlockIntoFreeList+0xb0>)
 800d6f8:	681a      	ldr	r2, [r3, #0]
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	601a      	str	r2, [r3, #0]
 800d6fe:	e003      	b.n	800d708 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	681a      	ldr	r2, [r3, #0]
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d708:	68fa      	ldr	r2, [r7, #12]
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	429a      	cmp	r2, r3
 800d70e:	d002      	beq.n	800d716 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	687a      	ldr	r2, [r7, #4]
 800d714:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d716:	bf00      	nop
 800d718:	3714      	adds	r7, #20
 800d71a:	46bd      	mov	sp, r7
 800d71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d720:	4770      	bx	lr
 800d722:	bf00      	nop
 800d724:	20009b00 	.word	0x20009b00
 800d728:	20009b08 	.word	0x20009b08

0800d72c <rcl_get_zero_initialized_publisher>:
 800d72c:	4b01      	ldr	r3, [pc, #4]	; (800d734 <rcl_get_zero_initialized_publisher+0x8>)
 800d72e:	6818      	ldr	r0, [r3, #0]
 800d730:	4770      	bx	lr
 800d732:	bf00      	nop
 800d734:	080187e8 	.word	0x080187e8

0800d738 <rcl_publisher_init>:
 800d738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d73c:	b091      	sub	sp, #68	; 0x44
 800d73e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800d740:	b3d7      	cbz	r7, 800d7b8 <rcl_publisher_init+0x80>
 800d742:	f107 0950 	add.w	r9, r7, #80	; 0x50
 800d746:	4604      	mov	r4, r0
 800d748:	4648      	mov	r0, r9
 800d74a:	4688      	mov	r8, r1
 800d74c:	4616      	mov	r6, r2
 800d74e:	461d      	mov	r5, r3
 800d750:	f000 fba4 	bl	800de9c <rcutils_allocator_is_valid>
 800d754:	b380      	cbz	r0, 800d7b8 <rcl_publisher_init+0x80>
 800d756:	b37c      	cbz	r4, 800d7b8 <rcl_publisher_init+0x80>
 800d758:	f8d4 a000 	ldr.w	sl, [r4]
 800d75c:	f1ba 0f00 	cmp.w	sl, #0
 800d760:	d004      	beq.n	800d76c <rcl_publisher_init+0x34>
 800d762:	2564      	movs	r5, #100	; 0x64
 800d764:	4628      	mov	r0, r5
 800d766:	b011      	add	sp, #68	; 0x44
 800d768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d76c:	4640      	mov	r0, r8
 800d76e:	f005 fa91 	bl	8012c94 <rcl_node_is_valid>
 800d772:	b330      	cbz	r0, 800d7c2 <rcl_publisher_init+0x8a>
 800d774:	b306      	cbz	r6, 800d7b8 <rcl_publisher_init+0x80>
 800d776:	b1fd      	cbz	r5, 800d7b8 <rcl_publisher_init+0x80>
 800d778:	46ce      	mov	lr, r9
 800d77a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d77e:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 800d782:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d786:	f8de 3000 	ldr.w	r3, [lr]
 800d78a:	f8cc 3000 	str.w	r3, [ip]
 800d78e:	f000 fbc1 	bl	800df14 <rcutils_get_zero_initialized_string_map>
 800d792:	ab10      	add	r3, sp, #64	; 0x40
 800d794:	4684      	mov	ip, r0
 800d796:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800d79a:	f8cd c020 	str.w	ip, [sp, #32]
 800d79e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800d7a2:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 800d7a6:	4651      	mov	r1, sl
 800d7a8:	a808      	add	r0, sp, #32
 800d7aa:	f000 fc2d 	bl	800e008 <rcutils_string_map_init>
 800d7ae:	b150      	cbz	r0, 800d7c6 <rcl_publisher_init+0x8e>
 800d7b0:	280a      	cmp	r0, #10
 800d7b2:	d013      	beq.n	800d7dc <rcl_publisher_init+0xa4>
 800d7b4:	2501      	movs	r5, #1
 800d7b6:	e7d5      	b.n	800d764 <rcl_publisher_init+0x2c>
 800d7b8:	250b      	movs	r5, #11
 800d7ba:	4628      	mov	r0, r5
 800d7bc:	b011      	add	sp, #68	; 0x44
 800d7be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7c2:	25c8      	movs	r5, #200	; 0xc8
 800d7c4:	e7ce      	b.n	800d764 <rcl_publisher_init+0x2c>
 800d7c6:	a808      	add	r0, sp, #32
 800d7c8:	f004 fe9a 	bl	8012500 <rcl_get_default_topic_name_substitutions>
 800d7cc:	4682      	mov	sl, r0
 800d7ce:	b138      	cbz	r0, 800d7e0 <rcl_publisher_init+0xa8>
 800d7d0:	a808      	add	r0, sp, #32
 800d7d2:	f000 fc59 	bl	800e088 <rcutils_string_map_fini>
 800d7d6:	f1ba 0f0a 	cmp.w	sl, #10
 800d7da:	d1eb      	bne.n	800d7b4 <rcl_publisher_init+0x7c>
 800d7dc:	250a      	movs	r5, #10
 800d7de:	e7c1      	b.n	800d764 <rcl_publisher_init+0x2c>
 800d7e0:	4640      	mov	r0, r8
 800d7e2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800d7e6:	f005 fa5f 	bl	8012ca8 <rcl_node_get_name>
 800d7ea:	4682      	mov	sl, r0
 800d7ec:	4640      	mov	r0, r8
 800d7ee:	f005 fa63 	bl	8012cb8 <rcl_node_get_namespace>
 800d7f2:	4686      	mov	lr, r0
 800d7f4:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800d7f8:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 800d7fc:	46ec      	mov	ip, sp
 800d7fe:	f8cd b014 	str.w	fp, [sp, #20]
 800d802:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d806:	f8d9 3000 	ldr.w	r3, [r9]
 800d80a:	f8cc 3000 	str.w	r3, [ip]
 800d80e:	4628      	mov	r0, r5
 800d810:	4651      	mov	r1, sl
 800d812:	4672      	mov	r2, lr
 800d814:	ab08      	add	r3, sp, #32
 800d816:	f004 fd0d 	bl	8012234 <rcl_expand_topic_name>
 800d81a:	4605      	mov	r5, r0
 800d81c:	a808      	add	r0, sp, #32
 800d81e:	f000 fc33 	bl	800e088 <rcutils_string_map_fini>
 800d822:	b920      	cbnz	r0, 800d82e <rcl_publisher_init+0xf6>
 800d824:	b15d      	cbz	r5, 800d83e <rcl_publisher_init+0x106>
 800d826:	2d67      	cmp	r5, #103	; 0x67
 800d828:	d002      	beq.n	800d830 <rcl_publisher_init+0xf8>
 800d82a:	2d69      	cmp	r5, #105	; 0x69
 800d82c:	d05f      	beq.n	800d8ee <rcl_publisher_init+0x1b6>
 800d82e:	2501      	movs	r5, #1
 800d830:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d832:	2800      	cmp	r0, #0
 800d834:	d096      	beq.n	800d764 <rcl_publisher_init+0x2c>
 800d836:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d838:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d83a:	4798      	blx	r3
 800d83c:	e792      	b.n	800d764 <rcl_publisher_init+0x2c>
 800d83e:	4640      	mov	r0, r8
 800d840:	f005 fa42 	bl	8012cc8 <rcl_node_get_options>
 800d844:	2800      	cmp	r0, #0
 800d846:	d0f2      	beq.n	800d82e <rcl_publisher_init+0xf6>
 800d848:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d84a:	f7f2 fcd3 	bl	80001f4 <strlen>
 800d84e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d850:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d852:	3001      	adds	r0, #1
 800d854:	4798      	blx	r3
 800d856:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d858:	9107      	str	r1, [sp, #28]
 800d85a:	4681      	mov	r9, r0
 800d85c:	4608      	mov	r0, r1
 800d85e:	f7f2 fcc9 	bl	80001f4 <strlen>
 800d862:	9907      	ldr	r1, [sp, #28]
 800d864:	1c42      	adds	r2, r0, #1
 800d866:	4648      	mov	r0, r9
 800d868:	f009 ffc7 	bl	80177fa <memcpy>
 800d86c:	462a      	mov	r2, r5
 800d86e:	4648      	mov	r0, r9
 800d870:	a90a      	add	r1, sp, #40	; 0x28
 800d872:	f000 fc97 	bl	800e1a4 <rmw_validate_full_topic_name>
 800d876:	2800      	cmp	r0, #0
 800d878:	d137      	bne.n	800d8ea <rcl_publisher_init+0x1b2>
 800d87a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d138      	bne.n	800d8f2 <rcl_publisher_init+0x1ba>
 800d880:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d882:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d884:	20c0      	movs	r0, #192	; 0xc0
 800d886:	4798      	blx	r3
 800d888:	6020      	str	r0, [r4, #0]
 800d88a:	b3a0      	cbz	r0, 800d8f6 <rcl_publisher_init+0x1be>
 800d88c:	4640      	mov	r0, r8
 800d88e:	f005 fa23 	bl	8012cd8 <rcl_node_get_rmw_handle>
 800d892:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800d896:	9300      	str	r3, [sp, #0]
 800d898:	4631      	mov	r1, r6
 800d89a:	463b      	mov	r3, r7
 800d89c:	464a      	mov	r2, r9
 800d89e:	6825      	ldr	r5, [r4, #0]
 800d8a0:	f000 fd80 	bl	800e3a4 <rmw_create_publisher>
 800d8a4:	6821      	ldr	r1, [r4, #0]
 800d8a6:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
 800d8aa:	f8d1 00bc 	ldr.w	r0, [r1, #188]	; 0xbc
 800d8ae:	b388      	cbz	r0, 800d914 <rcl_publisher_init+0x1dc>
 800d8b0:	3168      	adds	r1, #104	; 0x68
 800d8b2:	f000 fe55 	bl	800e560 <rmw_publisher_get_actual_qos>
 800d8b6:	6823      	ldr	r3, [r4, #0]
 800d8b8:	4605      	mov	r5, r0
 800d8ba:	b9f0      	cbnz	r0, 800d8fa <rcl_publisher_init+0x1c2>
 800d8bc:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800d8c0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	2268      	movs	r2, #104	; 0x68
 800d8c8:	4639      	mov	r1, r7
 800d8ca:	f009 ff96 	bl	80177fa <memcpy>
 800d8ce:	f8d8 2000 	ldr.w	r2, [r8]
 800d8d2:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
 800d8d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d8d8:	b110      	cbz	r0, 800d8e0 <rcl_publisher_init+0x1a8>
 800d8da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d8dc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d8de:	4798      	blx	r3
 800d8e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d8e2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d8e4:	4648      	mov	r0, r9
 800d8e6:	4798      	blx	r3
 800d8e8:	e73c      	b.n	800d764 <rcl_publisher_init+0x2c>
 800d8ea:	2501      	movs	r5, #1
 800d8ec:	e7f3      	b.n	800d8d6 <rcl_publisher_init+0x19e>
 800d8ee:	2567      	movs	r5, #103	; 0x67
 800d8f0:	e79e      	b.n	800d830 <rcl_publisher_init+0xf8>
 800d8f2:	2567      	movs	r5, #103	; 0x67
 800d8f4:	e7ef      	b.n	800d8d6 <rcl_publisher_init+0x19e>
 800d8f6:	250a      	movs	r5, #10
 800d8f8:	e7ed      	b.n	800d8d6 <rcl_publisher_init+0x19e>
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d0f5      	beq.n	800d8ea <rcl_publisher_init+0x1b2>
 800d8fe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800d902:	b13b      	cbz	r3, 800d914 <rcl_publisher_init+0x1dc>
 800d904:	4640      	mov	r0, r8
 800d906:	f005 f9e7 	bl	8012cd8 <rcl_node_get_rmw_handle>
 800d90a:	6823      	ldr	r3, [r4, #0]
 800d90c:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 800d910:	f000 fe28 	bl	800e564 <rmw_destroy_publisher>
 800d914:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d916:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d918:	6820      	ldr	r0, [r4, #0]
 800d91a:	4798      	blx	r3
 800d91c:	2300      	movs	r3, #0
 800d91e:	6023      	str	r3, [r4, #0]
 800d920:	2501      	movs	r5, #1
 800d922:	e7d8      	b.n	800d8d6 <rcl_publisher_init+0x19e>

0800d924 <rcl_publisher_get_default_options>:
 800d924:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d926:	4f0e      	ldr	r7, [pc, #56]	; (800d960 <rcl_publisher_get_default_options+0x3c>)
 800d928:	490e      	ldr	r1, [pc, #56]	; (800d964 <rcl_publisher_get_default_options+0x40>)
 800d92a:	b087      	sub	sp, #28
 800d92c:	4606      	mov	r6, r0
 800d92e:	2250      	movs	r2, #80	; 0x50
 800d930:	4638      	mov	r0, r7
 800d932:	f009 ff62 	bl	80177fa <memcpy>
 800d936:	466c      	mov	r4, sp
 800d938:	4668      	mov	r0, sp
 800d93a:	f000 faa1 	bl	800de80 <rcutils_get_default_allocator>
 800d93e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d940:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800d944:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d946:	6823      	ldr	r3, [r4, #0]
 800d948:	602b      	str	r3, [r5, #0]
 800d94a:	f000 fc13 	bl	800e174 <rmw_get_default_publisher_options>
 800d94e:	4639      	mov	r1, r7
 800d950:	6678      	str	r0, [r7, #100]	; 0x64
 800d952:	2268      	movs	r2, #104	; 0x68
 800d954:	4630      	mov	r0, r6
 800d956:	f009 ff50 	bl	80177fa <memcpy>
 800d95a:	4630      	mov	r0, r6
 800d95c:	b007      	add	sp, #28
 800d95e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d960:	20009b20 	.word	0x20009b20
 800d964:	080187f0 	.word	0x080187f0

0800d968 <rcl_publish>:
 800d968:	b1f8      	cbz	r0, 800d9aa <rcl_publish+0x42>
 800d96a:	6803      	ldr	r3, [r0, #0]
 800d96c:	b570      	push	{r4, r5, r6, lr}
 800d96e:	4604      	mov	r4, r0
 800d970:	b1b3      	cbz	r3, 800d9a0 <rcl_publish+0x38>
 800d972:	4616      	mov	r6, r2
 800d974:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800d978:	b192      	cbz	r2, 800d9a0 <rcl_publish+0x38>
 800d97a:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800d97e:	460d      	mov	r5, r1
 800d980:	f004 fbee 	bl	8012160 <rcl_context_is_valid>
 800d984:	b160      	cbz	r0, 800d9a0 <rcl_publish+0x38>
 800d986:	6823      	ldr	r3, [r4, #0]
 800d988:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 800d98c:	b140      	cbz	r0, 800d9a0 <rcl_publish+0x38>
 800d98e:	b155      	cbz	r5, 800d9a6 <rcl_publish+0x3e>
 800d990:	4632      	mov	r2, r6
 800d992:	4629      	mov	r1, r5
 800d994:	f000 fca6 	bl	800e2e4 <rmw_publish>
 800d998:	3800      	subs	r0, #0
 800d99a:	bf18      	it	ne
 800d99c:	2001      	movne	r0, #1
 800d99e:	bd70      	pop	{r4, r5, r6, pc}
 800d9a0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800d9a4:	bd70      	pop	{r4, r5, r6, pc}
 800d9a6:	200b      	movs	r0, #11
 800d9a8:	bd70      	pop	{r4, r5, r6, pc}
 800d9aa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800d9ae:	4770      	bx	lr

0800d9b0 <rcl_get_zero_initialized_subscription>:
 800d9b0:	4b01      	ldr	r3, [pc, #4]	; (800d9b8 <rcl_get_zero_initialized_subscription+0x8>)
 800d9b2:	6818      	ldr	r0, [r3, #0]
 800d9b4:	4770      	bx	lr
 800d9b6:	bf00      	nop
 800d9b8:	08018840 	.word	0x08018840

0800d9bc <rcl_subscription_init>:
 800d9bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9c0:	b091      	sub	sp, #68	; 0x44
 800d9c2:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800d9c4:	b1d7      	cbz	r7, 800d9fc <rcl_subscription_init+0x40>
 800d9c6:	f107 0950 	add.w	r9, r7, #80	; 0x50
 800d9ca:	4604      	mov	r4, r0
 800d9cc:	4648      	mov	r0, r9
 800d9ce:	4688      	mov	r8, r1
 800d9d0:	4616      	mov	r6, r2
 800d9d2:	461d      	mov	r5, r3
 800d9d4:	f000 fa62 	bl	800de9c <rcutils_allocator_is_valid>
 800d9d8:	b180      	cbz	r0, 800d9fc <rcl_subscription_init+0x40>
 800d9da:	b17c      	cbz	r4, 800d9fc <rcl_subscription_init+0x40>
 800d9dc:	4640      	mov	r0, r8
 800d9de:	f005 f959 	bl	8012c94 <rcl_node_is_valid>
 800d9e2:	b380      	cbz	r0, 800da46 <rcl_subscription_init+0x8a>
 800d9e4:	b156      	cbz	r6, 800d9fc <rcl_subscription_init+0x40>
 800d9e6:	b14d      	cbz	r5, 800d9fc <rcl_subscription_init+0x40>
 800d9e8:	f8d4 a000 	ldr.w	sl, [r4]
 800d9ec:	f1ba 0f00 	cmp.w	sl, #0
 800d9f0:	d009      	beq.n	800da06 <rcl_subscription_init+0x4a>
 800d9f2:	2564      	movs	r5, #100	; 0x64
 800d9f4:	4628      	mov	r0, r5
 800d9f6:	b011      	add	sp, #68	; 0x44
 800d9f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9fc:	250b      	movs	r5, #11
 800d9fe:	4628      	mov	r0, r5
 800da00:	b011      	add	sp, #68	; 0x44
 800da02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da06:	46ce      	mov	lr, r9
 800da08:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800da0c:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 800da10:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800da14:	f8de 3000 	ldr.w	r3, [lr]
 800da18:	f8cc 3000 	str.w	r3, [ip]
 800da1c:	f000 fa7a 	bl	800df14 <rcutils_get_zero_initialized_string_map>
 800da20:	ab10      	add	r3, sp, #64	; 0x40
 800da22:	4684      	mov	ip, r0
 800da24:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800da28:	f8cd c020 	str.w	ip, [sp, #32]
 800da2c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800da30:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 800da34:	4651      	mov	r1, sl
 800da36:	a808      	add	r0, sp, #32
 800da38:	f000 fae6 	bl	800e008 <rcutils_string_map_init>
 800da3c:	b140      	cbz	r0, 800da50 <rcl_subscription_init+0x94>
 800da3e:	280a      	cmp	r0, #10
 800da40:	d011      	beq.n	800da66 <rcl_subscription_init+0xaa>
 800da42:	2501      	movs	r5, #1
 800da44:	e7db      	b.n	800d9fe <rcl_subscription_init+0x42>
 800da46:	25c8      	movs	r5, #200	; 0xc8
 800da48:	4628      	mov	r0, r5
 800da4a:	b011      	add	sp, #68	; 0x44
 800da4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da50:	a808      	add	r0, sp, #32
 800da52:	f004 fd55 	bl	8012500 <rcl_get_default_topic_name_substitutions>
 800da56:	4682      	mov	sl, r0
 800da58:	b138      	cbz	r0, 800da6a <rcl_subscription_init+0xae>
 800da5a:	a808      	add	r0, sp, #32
 800da5c:	f000 fb14 	bl	800e088 <rcutils_string_map_fini>
 800da60:	f1ba 0f0a 	cmp.w	sl, #10
 800da64:	d1ed      	bne.n	800da42 <rcl_subscription_init+0x86>
 800da66:	250a      	movs	r5, #10
 800da68:	e7c9      	b.n	800d9fe <rcl_subscription_init+0x42>
 800da6a:	4640      	mov	r0, r8
 800da6c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800da70:	f005 f91a 	bl	8012ca8 <rcl_node_get_name>
 800da74:	4682      	mov	sl, r0
 800da76:	4640      	mov	r0, r8
 800da78:	f005 f91e 	bl	8012cb8 <rcl_node_get_namespace>
 800da7c:	4686      	mov	lr, r0
 800da7e:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800da82:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 800da86:	46ec      	mov	ip, sp
 800da88:	f8cd b014 	str.w	fp, [sp, #20]
 800da8c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800da90:	f8d9 3000 	ldr.w	r3, [r9]
 800da94:	f8cc 3000 	str.w	r3, [ip]
 800da98:	4628      	mov	r0, r5
 800da9a:	4651      	mov	r1, sl
 800da9c:	4672      	mov	r2, lr
 800da9e:	ab08      	add	r3, sp, #32
 800daa0:	f004 fbc8 	bl	8012234 <rcl_expand_topic_name>
 800daa4:	4605      	mov	r5, r0
 800daa6:	a808      	add	r0, sp, #32
 800daa8:	f000 faee 	bl	800e088 <rcutils_string_map_fini>
 800daac:	b920      	cbnz	r0, 800dab8 <rcl_subscription_init+0xfc>
 800daae:	b15d      	cbz	r5, 800dac8 <rcl_subscription_init+0x10c>
 800dab0:	2d67      	cmp	r5, #103	; 0x67
 800dab2:	d002      	beq.n	800daba <rcl_subscription_init+0xfe>
 800dab4:	2d69      	cmp	r5, #105	; 0x69
 800dab6:	d05a      	beq.n	800db6e <rcl_subscription_init+0x1b2>
 800dab8:	2501      	movs	r5, #1
 800daba:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dabc:	2800      	cmp	r0, #0
 800dabe:	d09e      	beq.n	800d9fe <rcl_subscription_init+0x42>
 800dac0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dac2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800dac4:	4798      	blx	r3
 800dac6:	e79a      	b.n	800d9fe <rcl_subscription_init+0x42>
 800dac8:	4640      	mov	r0, r8
 800daca:	f005 f8fd 	bl	8012cc8 <rcl_node_get_options>
 800dace:	2800      	cmp	r0, #0
 800dad0:	d0f2      	beq.n	800dab8 <rcl_subscription_init+0xfc>
 800dad2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dad4:	f7f2 fb8e 	bl	80001f4 <strlen>
 800dad8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dada:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800dadc:	3001      	adds	r0, #1
 800dade:	4798      	blx	r3
 800dae0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dae2:	9107      	str	r1, [sp, #28]
 800dae4:	4681      	mov	r9, r0
 800dae6:	4608      	mov	r0, r1
 800dae8:	f7f2 fb84 	bl	80001f4 <strlen>
 800daec:	9907      	ldr	r1, [sp, #28]
 800daee:	1c42      	adds	r2, r0, #1
 800daf0:	4648      	mov	r0, r9
 800daf2:	f009 fe82 	bl	80177fa <memcpy>
 800daf6:	462a      	mov	r2, r5
 800daf8:	4648      	mov	r0, r9
 800dafa:	a90a      	add	r1, sp, #40	; 0x28
 800dafc:	f000 fb52 	bl	800e1a4 <rmw_validate_full_topic_name>
 800db00:	2800      	cmp	r0, #0
 800db02:	d132      	bne.n	800db6a <rcl_subscription_init+0x1ae>
 800db04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db06:	2b00      	cmp	r3, #0
 800db08:	d133      	bne.n	800db72 <rcl_subscription_init+0x1b6>
 800db0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db0c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800db0e:	20c8      	movs	r0, #200	; 0xc8
 800db10:	4798      	blx	r3
 800db12:	6020      	str	r0, [r4, #0]
 800db14:	b378      	cbz	r0, 800db76 <rcl_subscription_init+0x1ba>
 800db16:	4640      	mov	r0, r8
 800db18:	f005 f8de 	bl	8012cd8 <rcl_node_get_rmw_handle>
 800db1c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800db20:	9300      	str	r3, [sp, #0]
 800db22:	4631      	mov	r1, r6
 800db24:	463b      	mov	r3, r7
 800db26:	464a      	mov	r2, r9
 800db28:	6825      	ldr	r5, [r4, #0]
 800db2a:	f000 fd6b 	bl	800e604 <rmw_create_subscription>
 800db2e:	6821      	ldr	r1, [r4, #0]
 800db30:	f8c5 00c0 	str.w	r0, [r5, #192]	; 0xc0
 800db34:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
 800db38:	b368      	cbz	r0, 800db96 <rcl_subscription_init+0x1da>
 800db3a:	3170      	adds	r1, #112	; 0x70
 800db3c:	f000 fe42 	bl	800e7c4 <rmw_subscription_get_actual_qos>
 800db40:	4605      	mov	r5, r0
 800db42:	b9d0      	cbnz	r0, 800db7a <rcl_subscription_init+0x1be>
 800db44:	6820      	ldr	r0, [r4, #0]
 800db46:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800db4a:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 800db4e:	2270      	movs	r2, #112	; 0x70
 800db50:	4639      	mov	r1, r7
 800db52:	f009 fe52 	bl	80177fa <memcpy>
 800db56:	9809      	ldr	r0, [sp, #36]	; 0x24
 800db58:	b110      	cbz	r0, 800db60 <rcl_subscription_init+0x1a4>
 800db5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800db5c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800db5e:	4798      	blx	r3
 800db60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800db62:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800db64:	4648      	mov	r0, r9
 800db66:	4798      	blx	r3
 800db68:	e749      	b.n	800d9fe <rcl_subscription_init+0x42>
 800db6a:	2501      	movs	r5, #1
 800db6c:	e7f3      	b.n	800db56 <rcl_subscription_init+0x19a>
 800db6e:	2567      	movs	r5, #103	; 0x67
 800db70:	e7a3      	b.n	800daba <rcl_subscription_init+0xfe>
 800db72:	2567      	movs	r5, #103	; 0x67
 800db74:	e7ef      	b.n	800db56 <rcl_subscription_init+0x19a>
 800db76:	250a      	movs	r5, #10
 800db78:	e7ed      	b.n	800db56 <rcl_subscription_init+0x19a>
 800db7a:	6823      	ldr	r3, [r4, #0]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d0f4      	beq.n	800db6a <rcl_subscription_init+0x1ae>
 800db80:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800db84:	b13b      	cbz	r3, 800db96 <rcl_subscription_init+0x1da>
 800db86:	4640      	mov	r0, r8
 800db88:	f005 f8a6 	bl	8012cd8 <rcl_node_get_rmw_handle>
 800db8c:	6823      	ldr	r3, [r4, #0]
 800db8e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800db92:	f000 fe19 	bl	800e7c8 <rmw_destroy_subscription>
 800db96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800db98:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800db9a:	6820      	ldr	r0, [r4, #0]
 800db9c:	4798      	blx	r3
 800db9e:	2300      	movs	r3, #0
 800dba0:	6023      	str	r3, [r4, #0]
 800dba2:	2501      	movs	r5, #1
 800dba4:	e7d7      	b.n	800db56 <rcl_subscription_init+0x19a>
 800dba6:	bf00      	nop

0800dba8 <rcl_subscription_get_default_options>:
 800dba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbac:	4f12      	ldr	r7, [pc, #72]	; (800dbf8 <rcl_subscription_get_default_options+0x50>)
 800dbae:	4913      	ldr	r1, [pc, #76]	; (800dbfc <rcl_subscription_get_default_options+0x54>)
 800dbb0:	b088      	sub	sp, #32
 800dbb2:	4606      	mov	r6, r0
 800dbb4:	2250      	movs	r2, #80	; 0x50
 800dbb6:	4638      	mov	r0, r7
 800dbb8:	f009 fe1f 	bl	80177fa <memcpy>
 800dbbc:	ac02      	add	r4, sp, #8
 800dbbe:	a802      	add	r0, sp, #8
 800dbc0:	f000 f95e 	bl	800de80 <rcutils_get_default_allocator>
 800dbc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dbc6:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800dbca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dbcc:	46e8      	mov	r8, sp
 800dbce:	6823      	ldr	r3, [r4, #0]
 800dbd0:	602b      	str	r3, [r5, #0]
 800dbd2:	4640      	mov	r0, r8
 800dbd4:	f000 fad0 	bl	800e178 <rmw_get_default_subscription_options>
 800dbd8:	e898 0003 	ldmia.w	r8, {r0, r1}
 800dbdc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800dbe0:	e883 0003 	stmia.w	r3, {r0, r1}
 800dbe4:	2270      	movs	r2, #112	; 0x70
 800dbe6:	4639      	mov	r1, r7
 800dbe8:	4630      	mov	r0, r6
 800dbea:	f009 fe06 	bl	80177fa <memcpy>
 800dbee:	4630      	mov	r0, r6
 800dbf0:	b008      	add	sp, #32
 800dbf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbf6:	bf00      	nop
 800dbf8:	20009b88 	.word	0x20009b88
 800dbfc:	08018848 	.word	0x08018848

0800dc00 <rcl_take>:
 800dc00:	2800      	cmp	r0, #0
 800dc02:	d03f      	beq.n	800dc84 <rcl_take+0x84>
 800dc04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc08:	4617      	mov	r7, r2
 800dc0a:	6802      	ldr	r2, [r0, #0]
 800dc0c:	b09d      	sub	sp, #116	; 0x74
 800dc0e:	4606      	mov	r6, r0
 800dc10:	b382      	cbz	r2, 800dc74 <rcl_take+0x74>
 800dc12:	4699      	mov	r9, r3
 800dc14:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 800dc18:	b363      	cbz	r3, 800dc74 <rcl_take+0x74>
 800dc1a:	4688      	mov	r8, r1
 800dc1c:	b381      	cbz	r1, 800dc80 <rcl_take+0x80>
 800dc1e:	2f00      	cmp	r7, #0
 800dc20:	d034      	beq.n	800dc8c <rcl_take+0x8c>
 800dc22:	a802      	add	r0, sp, #8
 800dc24:	ac02      	add	r4, sp, #8
 800dc26:	f000 faab 	bl	800e180 <rmw_get_zero_initialized_message_info>
 800dc2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dc2c:	463d      	mov	r5, r7
 800dc2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dc30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dc32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dc34:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800dc38:	6834      	ldr	r4, [r6, #0]
 800dc3a:	f8d4 60c0 	ldr.w	r6, [r4, #192]	; 0xc0
 800dc3e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800dc42:	2400      	movs	r4, #0
 800dc44:	463b      	mov	r3, r7
 800dc46:	4630      	mov	r0, r6
 800dc48:	f8cd 9000 	str.w	r9, [sp]
 800dc4c:	4641      	mov	r1, r8
 800dc4e:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 800dc52:	f88d 403f 	strb.w	r4, [sp, #63]	; 0x3f
 800dc56:	f000 fe15 	bl	800e884 <rmw_take_with_info>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	b9c0      	cbnz	r0, 800dc90 <rcl_take+0x90>
 800dc5e:	f89d 103f 	ldrb.w	r1, [sp, #63]	; 0x3f
 800dc62:	f240 1291 	movw	r2, #401	; 0x191
 800dc66:	2900      	cmp	r1, #0
 800dc68:	bf08      	it	eq
 800dc6a:	4613      	moveq	r3, r2
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	b01d      	add	sp, #116	; 0x74
 800dc70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc74:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800dc78:	4618      	mov	r0, r3
 800dc7a:	b01d      	add	sp, #116	; 0x74
 800dc7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc80:	230b      	movs	r3, #11
 800dc82:	e7f3      	b.n	800dc6c <rcl_take+0x6c>
 800dc84:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800dc88:	4618      	mov	r0, r3
 800dc8a:	4770      	bx	lr
 800dc8c:	af10      	add	r7, sp, #64	; 0x40
 800dc8e:	e7c8      	b.n	800dc22 <rcl_take+0x22>
 800dc90:	f004 fa48 	bl	8012124 <rcl_convert_rmw_ret_to_rcl_ret>
 800dc94:	4603      	mov	r3, r0
 800dc96:	e7e9      	b.n	800dc6c <rcl_take+0x6c>

0800dc98 <rclc_support_init>:
 800dc98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc9c:	b086      	sub	sp, #24
 800dc9e:	2800      	cmp	r0, #0
 800dca0:	d042      	beq.n	800dd28 <rclc_support_init+0x90>
 800dca2:	461c      	mov	r4, r3
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d03f      	beq.n	800dd28 <rclc_support_init+0x90>
 800dca8:	460f      	mov	r7, r1
 800dcaa:	4690      	mov	r8, r2
 800dcac:	4606      	mov	r6, r0
 800dcae:	f004 fd37 	bl	8012720 <rcl_get_zero_initialized_init_options>
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 800dcb8:	e88d 0003 	stmia.w	sp, {r0, r1}
 800dcbc:	9305      	str	r3, [sp, #20]
 800dcbe:	a805      	add	r0, sp, #20
 800dcc0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800dcc4:	f004 fd2e 	bl	8012724 <rcl_init_options_init>
 800dcc8:	4605      	mov	r5, r0
 800dcca:	bb38      	cbnz	r0, 800dd1c <rclc_support_init+0x84>
 800dccc:	f004 fd28 	bl	8012720 <rcl_get_zero_initialized_init_options>
 800dcd0:	4631      	mov	r1, r6
 800dcd2:	6030      	str	r0, [r6, #0]
 800dcd4:	a805      	add	r0, sp, #20
 800dcd6:	f004 fd9b 	bl	8012810 <rcl_init_options_copy>
 800dcda:	4605      	mov	r5, r0
 800dcdc:	b9c0      	cbnz	r0, 800dd10 <rclc_support_init+0x78>
 800dcde:	ad02      	add	r5, sp, #8
 800dce0:	4628      	mov	r0, r5
 800dce2:	f004 fa33 	bl	801214c <rcl_get_zero_initialized_context>
 800dce6:	e895 0003 	ldmia.w	r5, {r0, r1}
 800dcea:	1d33      	adds	r3, r6, #4
 800dcec:	e883 0003 	stmia.w	r3, {r0, r1}
 800dcf0:	4632      	mov	r2, r6
 800dcf2:	4641      	mov	r1, r8
 800dcf4:	4638      	mov	r0, r7
 800dcf6:	f004 fc09 	bl	801250c <rcl_init>
 800dcfa:	4605      	mov	r5, r0
 800dcfc:	b940      	cbnz	r0, 800dd10 <rclc_support_init+0x78>
 800dcfe:	60f4      	str	r4, [r6, #12]
 800dd00:	4622      	mov	r2, r4
 800dd02:	f106 0110 	add.w	r1, r6, #16
 800dd06:	2003      	movs	r0, #3
 800dd08:	f005 f932 	bl	8012f70 <rcl_clock_init>
 800dd0c:	4605      	mov	r5, r0
 800dd0e:	b108      	cbz	r0, 800dd14 <rclc_support_init+0x7c>
 800dd10:	f000 f8e8 	bl	800dee4 <rcutils_reset_error>
 800dd14:	a805      	add	r0, sp, #20
 800dd16:	f004 fd57 	bl	80127c8 <rcl_init_options_fini>
 800dd1a:	b108      	cbz	r0, 800dd20 <rclc_support_init+0x88>
 800dd1c:	f000 f8e2 	bl	800dee4 <rcutils_reset_error>
 800dd20:	4628      	mov	r0, r5
 800dd22:	b006      	add	sp, #24
 800dd24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd28:	250b      	movs	r5, #11
 800dd2a:	4628      	mov	r0, r5
 800dd2c:	b006      	add	sp, #24
 800dd2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd32:	bf00      	nop

0800dd34 <rclc_node_init_default>:
 800dd34:	b3b8      	cbz	r0, 800dda6 <rclc_node_init_default+0x72>
 800dd36:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dd3a:	460d      	mov	r5, r1
 800dd3c:	b08f      	sub	sp, #60	; 0x3c
 800dd3e:	b329      	cbz	r1, 800dd8c <rclc_node_init_default+0x58>
 800dd40:	4616      	mov	r6, r2
 800dd42:	b31a      	cbz	r2, 800dd8c <rclc_node_init_default+0x58>
 800dd44:	461f      	mov	r7, r3
 800dd46:	b30b      	cbz	r3, 800dd8c <rclc_node_init_default+0x58>
 800dd48:	f10d 0810 	add.w	r8, sp, #16
 800dd4c:	4604      	mov	r4, r0
 800dd4e:	4640      	mov	r0, r8
 800dd50:	f004 fe26 	bl	80129a0 <rcl_get_zero_initialized_node>
 800dd54:	e898 0003 	ldmia.w	r8, {r0, r1}
 800dd58:	f10d 091c 	add.w	r9, sp, #28
 800dd5c:	e884 0003 	stmia.w	r4, {r0, r1}
 800dd60:	4648      	mov	r0, r9
 800dd62:	f004 ffbf 	bl	8012ce4 <rcl_node_get_default_options>
 800dd66:	4640      	mov	r0, r8
 800dd68:	f004 fe1a 	bl	80129a0 <rcl_get_zero_initialized_node>
 800dd6c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800dd70:	1d3b      	adds	r3, r7, #4
 800dd72:	f8cd 9000 	str.w	r9, [sp]
 800dd76:	4632      	mov	r2, r6
 800dd78:	e884 0003 	stmia.w	r4, {r0, r1}
 800dd7c:	4629      	mov	r1, r5
 800dd7e:	4620      	mov	r0, r4
 800dd80:	f004 fe18 	bl	80129b4 <rcl_node_init>
 800dd84:	b930      	cbnz	r0, 800dd94 <rclc_node_init_default+0x60>
 800dd86:	b00f      	add	sp, #60	; 0x3c
 800dd88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd8c:	200b      	movs	r0, #11
 800dd8e:	b00f      	add	sp, #60	; 0x3c
 800dd90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd94:	9003      	str	r0, [sp, #12]
 800dd96:	f000 f8a5 	bl	800dee4 <rcutils_reset_error>
 800dd9a:	f000 f8a3 	bl	800dee4 <rcutils_reset_error>
 800dd9e:	9803      	ldr	r0, [sp, #12]
 800dda0:	b00f      	add	sp, #60	; 0x3c
 800dda2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dda6:	200b      	movs	r0, #11
 800dda8:	4770      	bx	lr
 800ddaa:	bf00      	nop

0800ddac <rclc_publisher_init_default>:
 800ddac:	b368      	cbz	r0, 800de0a <rclc_publisher_init_default+0x5e>
 800ddae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddb2:	460d      	mov	r5, r1
 800ddb4:	b09e      	sub	sp, #120	; 0x78
 800ddb6:	b321      	cbz	r1, 800de02 <rclc_publisher_init_default+0x56>
 800ddb8:	4616      	mov	r6, r2
 800ddba:	b312      	cbz	r2, 800de02 <rclc_publisher_init_default+0x56>
 800ddbc:	461f      	mov	r7, r3
 800ddbe:	b303      	cbz	r3, 800de02 <rclc_publisher_init_default+0x56>
 800ddc0:	4604      	mov	r4, r0
 800ddc2:	f7ff fcb3 	bl	800d72c <rcl_get_zero_initialized_publisher>
 800ddc6:	f10d 0810 	add.w	r8, sp, #16
 800ddca:	6020      	str	r0, [r4, #0]
 800ddcc:	4640      	mov	r0, r8
 800ddce:	f7ff fda9 	bl	800d924 <rcl_publisher_get_default_options>
 800ddd2:	490f      	ldr	r1, [pc, #60]	; (800de10 <rclc_publisher_init_default+0x64>)
 800ddd4:	2250      	movs	r2, #80	; 0x50
 800ddd6:	4640      	mov	r0, r8
 800ddd8:	f009 fd0f 	bl	80177fa <memcpy>
 800dddc:	f8cd 8000 	str.w	r8, [sp]
 800dde0:	463b      	mov	r3, r7
 800dde2:	4632      	mov	r2, r6
 800dde4:	4629      	mov	r1, r5
 800dde6:	4620      	mov	r0, r4
 800dde8:	f7ff fca6 	bl	800d738 <rcl_publisher_init>
 800ddec:	b910      	cbnz	r0, 800ddf4 <rclc_publisher_init_default+0x48>
 800ddee:	b01e      	add	sp, #120	; 0x78
 800ddf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddf4:	9003      	str	r0, [sp, #12]
 800ddf6:	f000 f875 	bl	800dee4 <rcutils_reset_error>
 800ddfa:	9803      	ldr	r0, [sp, #12]
 800ddfc:	b01e      	add	sp, #120	; 0x78
 800ddfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de02:	200b      	movs	r0, #11
 800de04:	b01e      	add	sp, #120	; 0x78
 800de06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de0a:	200b      	movs	r0, #11
 800de0c:	4770      	bx	lr
 800de0e:	bf00      	nop
 800de10:	08018898 	.word	0x08018898

0800de14 <__default_zero_allocate>:
 800de14:	f008 bea8 	b.w	8016b68 <calloc>

0800de18 <__default_reallocate>:
 800de18:	f009 b834 	b.w	8016e84 <realloc>

0800de1c <__default_deallocate>:
 800de1c:	f008 bf12 	b.w	8016c44 <free>

0800de20 <__default_allocate>:
 800de20:	f008 bf08 	b.w	8016c34 <malloc>

0800de24 <rcutils_get_zero_initialized_allocator>:
 800de24:	b470      	push	{r4, r5, r6}
 800de26:	4d05      	ldr	r5, [pc, #20]	; (800de3c <rcutils_get_zero_initialized_allocator+0x18>)
 800de28:	4606      	mov	r6, r0
 800de2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800de2c:	4634      	mov	r4, r6
 800de2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800de30:	682b      	ldr	r3, [r5, #0]
 800de32:	6023      	str	r3, [r4, #0]
 800de34:	4630      	mov	r0, r6
 800de36:	bc70      	pop	{r4, r5, r6}
 800de38:	4770      	bx	lr
 800de3a:	bf00      	nop
 800de3c:	080188e8 	.word	0x080188e8

0800de40 <rcutils_set_default_allocator>:
 800de40:	b1a0      	cbz	r0, 800de6c <rcutils_set_default_allocator+0x2c>
 800de42:	6801      	ldr	r1, [r0, #0]
 800de44:	b199      	cbz	r1, 800de6e <rcutils_set_default_allocator+0x2e>
 800de46:	b430      	push	{r4, r5}
 800de48:	6844      	ldr	r4, [r0, #4]
 800de4a:	b194      	cbz	r4, 800de72 <rcutils_set_default_allocator+0x32>
 800de4c:	68c5      	ldr	r5, [r0, #12]
 800de4e:	b15d      	cbz	r5, 800de68 <rcutils_set_default_allocator+0x28>
 800de50:	6883      	ldr	r3, [r0, #8]
 800de52:	b18b      	cbz	r3, 800de78 <rcutils_set_default_allocator+0x38>
 800de54:	4a09      	ldr	r2, [pc, #36]	; (800de7c <rcutils_set_default_allocator+0x3c>)
 800de56:	e9c2 1400 	strd	r1, r4, [r2]
 800de5a:	e9c2 3502 	strd	r3, r5, [r2, #8]
 800de5e:	2000      	movs	r0, #0
 800de60:	6110      	str	r0, [r2, #16]
 800de62:	2001      	movs	r0, #1
 800de64:	bc30      	pop	{r4, r5}
 800de66:	4770      	bx	lr
 800de68:	4628      	mov	r0, r5
 800de6a:	e7fb      	b.n	800de64 <rcutils_set_default_allocator+0x24>
 800de6c:	4770      	bx	lr
 800de6e:	4608      	mov	r0, r1
 800de70:	4770      	bx	lr
 800de72:	4620      	mov	r0, r4
 800de74:	bc30      	pop	{r4, r5}
 800de76:	4770      	bx	lr
 800de78:	4618      	mov	r0, r3
 800de7a:	e7f3      	b.n	800de64 <rcutils_set_default_allocator+0x24>
 800de7c:	20000024 	.word	0x20000024

0800de80 <rcutils_get_default_allocator>:
 800de80:	b470      	push	{r4, r5, r6}
 800de82:	4d05      	ldr	r5, [pc, #20]	; (800de98 <rcutils_get_default_allocator+0x18>)
 800de84:	4606      	mov	r6, r0
 800de86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800de88:	4634      	mov	r4, r6
 800de8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800de8c:	682b      	ldr	r3, [r5, #0]
 800de8e:	6023      	str	r3, [r4, #0]
 800de90:	4630      	mov	r0, r6
 800de92:	bc70      	pop	{r4, r5, r6}
 800de94:	4770      	bx	lr
 800de96:	bf00      	nop
 800de98:	20000024 	.word	0x20000024

0800de9c <rcutils_allocator_is_valid>:
 800de9c:	b158      	cbz	r0, 800deb6 <rcutils_allocator_is_valid+0x1a>
 800de9e:	6803      	ldr	r3, [r0, #0]
 800dea0:	b143      	cbz	r3, 800deb4 <rcutils_allocator_is_valid+0x18>
 800dea2:	6843      	ldr	r3, [r0, #4]
 800dea4:	b133      	cbz	r3, 800deb4 <rcutils_allocator_is_valid+0x18>
 800dea6:	68c3      	ldr	r3, [r0, #12]
 800dea8:	b123      	cbz	r3, 800deb4 <rcutils_allocator_is_valid+0x18>
 800deaa:	6880      	ldr	r0, [r0, #8]
 800deac:	3800      	subs	r0, #0
 800deae:	bf18      	it	ne
 800deb0:	2001      	movne	r0, #1
 800deb2:	4770      	bx	lr
 800deb4:	4618      	mov	r0, r3
 800deb6:	4770      	bx	lr

0800deb8 <rcutils_get_error_string>:
 800deb8:	4b06      	ldr	r3, [pc, #24]	; (800ded4 <rcutils_get_error_string+0x1c>)
 800deba:	781b      	ldrb	r3, [r3, #0]
 800debc:	b13b      	cbz	r3, 800dece <rcutils_get_error_string+0x16>
 800debe:	4b06      	ldr	r3, [pc, #24]	; (800ded8 <rcutils_get_error_string+0x20>)
 800dec0:	781a      	ldrb	r2, [r3, #0]
 800dec2:	b90a      	cbnz	r2, 800dec8 <rcutils_get_error_string+0x10>
 800dec4:	2201      	movs	r2, #1
 800dec6:	701a      	strb	r2, [r3, #0]
 800dec8:	4b04      	ldr	r3, [pc, #16]	; (800dedc <rcutils_get_error_string+0x24>)
 800deca:	7818      	ldrb	r0, [r3, #0]
 800decc:	4770      	bx	lr
 800dece:	4b04      	ldr	r3, [pc, #16]	; (800dee0 <rcutils_get_error_string+0x28>)
 800ded0:	7818      	ldrb	r0, [r3, #0]
 800ded2:	4770      	bx	lr
 800ded4:	20009bf8 	.word	0x20009bf8
 800ded8:	20009bf9 	.word	0x20009bf9
 800dedc:	20009e60 	.word	0x20009e60
 800dee0:	080188fc 	.word	0x080188fc

0800dee4 <rcutils_reset_error>:
 800dee4:	b4d0      	push	{r4, r6, r7}
 800dee6:	4a07      	ldr	r2, [pc, #28]	; (800df04 <rcutils_reset_error+0x20>)
 800dee8:	4807      	ldr	r0, [pc, #28]	; (800df08 <rcutils_reset_error+0x24>)
 800deea:	4c08      	ldr	r4, [pc, #32]	; (800df0c <rcutils_reset_error+0x28>)
 800deec:	4908      	ldr	r1, [pc, #32]	; (800df10 <rcutils_reset_error+0x2c>)
 800deee:	2300      	movs	r3, #0
 800def0:	2600      	movs	r6, #0
 800def2:	2700      	movs	r7, #0
 800def4:	8013      	strh	r3, [r2, #0]
 800def6:	7003      	strb	r3, [r0, #0]
 800def8:	e9c2 6702 	strd	r6, r7, [r2, #8]
 800defc:	7023      	strb	r3, [r4, #0]
 800defe:	700b      	strb	r3, [r1, #0]
 800df00:	bcd0      	pop	{r4, r6, r7}
 800df02:	4770      	bx	lr
 800df04:	20009e68 	.word	0x20009e68
 800df08:	20009e60 	.word	0x20009e60
 800df0c:	20009bf9 	.word	0x20009bf9
 800df10:	20009bf8 	.word	0x20009bf8

0800df14 <rcutils_get_zero_initialized_string_map>:
 800df14:	4b01      	ldr	r3, [pc, #4]	; (800df1c <rcutils_get_zero_initialized_string_map+0x8>)
 800df16:	2000      	movs	r0, #0
 800df18:	6018      	str	r0, [r3, #0]
 800df1a:	4770      	bx	lr
 800df1c:	20009bfc 	.word	0x20009bfc

0800df20 <rcutils_string_map_reserve>:
 800df20:	2800      	cmp	r0, #0
 800df22:	d061      	beq.n	800dfe8 <rcutils_string_map_reserve+0xc8>
 800df24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800df28:	6805      	ldr	r5, [r0, #0]
 800df2a:	b083      	sub	sp, #12
 800df2c:	460c      	mov	r4, r1
 800df2e:	4606      	mov	r6, r0
 800df30:	b12d      	cbz	r5, 800df3e <rcutils_string_map_reserve+0x1e>
 800df32:	68eb      	ldr	r3, [r5, #12]
 800df34:	42a3      	cmp	r3, r4
 800df36:	d906      	bls.n	800df46 <rcutils_string_map_reserve+0x26>
 800df38:	461c      	mov	r4, r3
 800df3a:	2d00      	cmp	r5, #0
 800df3c:	d1f9      	bne.n	800df32 <rcutils_string_map_reserve+0x12>
 800df3e:	201f      	movs	r0, #31
 800df40:	b003      	add	sp, #12
 800df42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df46:	68ab      	ldr	r3, [r5, #8]
 800df48:	42a3      	cmp	r3, r4
 800df4a:	d049      	beq.n	800dfe0 <rcutils_string_map_reserve+0xc0>
 800df4c:	6a2f      	ldr	r7, [r5, #32]
 800df4e:	2c00      	cmp	r4, #0
 800df50:	d035      	beq.n	800dfbe <rcutils_string_map_reserve+0x9e>
 800df52:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800df56:	d245      	bcs.n	800dfe4 <rcutils_string_map_reserve+0xc4>
 800df58:	ea4f 0884 	mov.w	r8, r4, lsl #2
 800df5c:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800df60:	6828      	ldr	r0, [r5, #0]
 800df62:	4641      	mov	r1, r8
 800df64:	463a      	mov	r2, r7
 800df66:	47c8      	blx	r9
 800df68:	2800      	cmp	r0, #0
 800df6a:	d03b      	beq.n	800dfe4 <rcutils_string_map_reserve+0xc4>
 800df6c:	6833      	ldr	r3, [r6, #0]
 800df6e:	463a      	mov	r2, r7
 800df70:	6018      	str	r0, [r3, #0]
 800df72:	4641      	mov	r1, r8
 800df74:	6858      	ldr	r0, [r3, #4]
 800df76:	47c8      	blx	r9
 800df78:	2800      	cmp	r0, #0
 800df7a:	d033      	beq.n	800dfe4 <rcutils_string_map_reserve+0xc4>
 800df7c:	6835      	ldr	r5, [r6, #0]
 800df7e:	68ab      	ldr	r3, [r5, #8]
 800df80:	6068      	str	r0, [r5, #4]
 800df82:	42a3      	cmp	r3, r4
 800df84:	d227      	bcs.n	800dfd6 <rcutils_string_map_reserve+0xb6>
 800df86:	682a      	ldr	r2, [r5, #0]
 800df88:	eb00 0108 	add.w	r1, r0, r8
 800df8c:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 800df90:	428f      	cmp	r7, r1
 800df92:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800df96:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800df9a:	d203      	bcs.n	800dfa4 <rcutils_string_map_reserve+0x84>
 800df9c:	eb02 0108 	add.w	r1, r2, r8
 800dfa0:	428e      	cmp	r6, r1
 800dfa2:	d323      	bcc.n	800dfec <rcutils_string_map_reserve+0xcc>
 800dfa4:	1ae3      	subs	r3, r4, r3
 800dfa6:	009a      	lsls	r2, r3, #2
 800dfa8:	4638      	mov	r0, r7
 800dfaa:	2100      	movs	r1, #0
 800dfac:	9201      	str	r2, [sp, #4]
 800dfae:	f009 fb05 	bl	80175bc <memset>
 800dfb2:	9a01      	ldr	r2, [sp, #4]
 800dfb4:	4630      	mov	r0, r6
 800dfb6:	2100      	movs	r1, #0
 800dfb8:	f009 fb00 	bl	80175bc <memset>
 800dfbc:	e00b      	b.n	800dfd6 <rcutils_string_map_reserve+0xb6>
 800dfbe:	f8d5 8014 	ldr.w	r8, [r5, #20]
 800dfc2:	6828      	ldr	r0, [r5, #0]
 800dfc4:	4639      	mov	r1, r7
 800dfc6:	47c0      	blx	r8
 800dfc8:	6833      	ldr	r3, [r6, #0]
 800dfca:	4639      	mov	r1, r7
 800dfcc:	6858      	ldr	r0, [r3, #4]
 800dfce:	601c      	str	r4, [r3, #0]
 800dfd0:	47c0      	blx	r8
 800dfd2:	6835      	ldr	r5, [r6, #0]
 800dfd4:	606c      	str	r4, [r5, #4]
 800dfd6:	2000      	movs	r0, #0
 800dfd8:	60ac      	str	r4, [r5, #8]
 800dfda:	b003      	add	sp, #12
 800dfdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dfe0:	2000      	movs	r0, #0
 800dfe2:	e7ad      	b.n	800df40 <rcutils_string_map_reserve+0x20>
 800dfe4:	200a      	movs	r0, #10
 800dfe6:	e7ab      	b.n	800df40 <rcutils_string_map_reserve+0x20>
 800dfe8:	200b      	movs	r0, #11
 800dfea:	4770      	bx	lr
 800dfec:	1f13      	subs	r3, r2, #4
 800dfee:	f1ac 0c04 	sub.w	ip, ip, #4
 800dff2:	4498      	add	r8, r3
 800dff4:	4460      	add	r0, ip
 800dff6:	4462      	add	r2, ip
 800dff8:	2300      	movs	r3, #0
 800dffa:	f842 3f04 	str.w	r3, [r2, #4]!
 800dffe:	4542      	cmp	r2, r8
 800e000:	f840 3f04 	str.w	r3, [r0, #4]!
 800e004:	d1f9      	bne.n	800dffa <rcutils_string_map_reserve+0xda>
 800e006:	e7e6      	b.n	800dfd6 <rcutils_string_map_reserve+0xb6>

0800e008 <rcutils_string_map_init>:
 800e008:	b082      	sub	sp, #8
 800e00a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e00c:	460e      	mov	r6, r1
 800e00e:	a906      	add	r1, sp, #24
 800e010:	e881 000c 	stmia.w	r1, {r2, r3}
 800e014:	b380      	cbz	r0, 800e078 <rcutils_string_map_init+0x70>
 800e016:	6807      	ldr	r7, [r0, #0]
 800e018:	4604      	mov	r4, r0
 800e01a:	b12f      	cbz	r7, 800e028 <rcutils_string_map_init+0x20>
 800e01c:	251e      	movs	r5, #30
 800e01e:	4628      	mov	r0, r5
 800e020:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e024:	b002      	add	sp, #8
 800e026:	4770      	bx	lr
 800e028:	a806      	add	r0, sp, #24
 800e02a:	f7ff ff37 	bl	800de9c <rcutils_allocator_is_valid>
 800e02e:	b318      	cbz	r0, 800e078 <rcutils_string_map_init+0x70>
 800e030:	9b06      	ldr	r3, [sp, #24]
 800e032:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e034:	2024      	movs	r0, #36	; 0x24
 800e036:	4798      	blx	r3
 800e038:	4605      	mov	r5, r0
 800e03a:	6020      	str	r0, [r4, #0]
 800e03c:	b310      	cbz	r0, 800e084 <rcutils_string_map_init+0x7c>
 800e03e:	f10d 0e18 	add.w	lr, sp, #24
 800e042:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e046:	f105 0c10 	add.w	ip, r5, #16
 800e04a:	e9c5 7700 	strd	r7, r7, [r5]
 800e04e:	e9c5 7702 	strd	r7, r7, [r5, #8]
 800e052:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e056:	f8de 3000 	ldr.w	r3, [lr]
 800e05a:	f8cc 3000 	str.w	r3, [ip]
 800e05e:	4631      	mov	r1, r6
 800e060:	4620      	mov	r0, r4
 800e062:	f7ff ff5d 	bl	800df20 <rcutils_string_map_reserve>
 800e066:	4605      	mov	r5, r0
 800e068:	2800      	cmp	r0, #0
 800e06a:	d0d8      	beq.n	800e01e <rcutils_string_map_init+0x16>
 800e06c:	9b07      	ldr	r3, [sp, #28]
 800e06e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e070:	6820      	ldr	r0, [r4, #0]
 800e072:	4798      	blx	r3
 800e074:	6027      	str	r7, [r4, #0]
 800e076:	e7d2      	b.n	800e01e <rcutils_string_map_init+0x16>
 800e078:	250b      	movs	r5, #11
 800e07a:	4628      	mov	r0, r5
 800e07c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e080:	b002      	add	sp, #8
 800e082:	4770      	bx	lr
 800e084:	250a      	movs	r5, #10
 800e086:	e7ca      	b.n	800e01e <rcutils_string_map_init+0x16>

0800e088 <rcutils_string_map_fini>:
 800e088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e08c:	b082      	sub	sp, #8
 800e08e:	2800      	cmp	r0, #0
 800e090:	d039      	beq.n	800e106 <rcutils_string_map_fini+0x7e>
 800e092:	6804      	ldr	r4, [r0, #0]
 800e094:	4606      	mov	r6, r0
 800e096:	2c00      	cmp	r4, #0
 800e098:	d031      	beq.n	800e0fe <rcutils_string_map_fini+0x76>
 800e09a:	68a3      	ldr	r3, [r4, #8]
 800e09c:	b323      	cbz	r3, 800e0e8 <rcutils_string_map_fini+0x60>
 800e09e:	2500      	movs	r5, #0
 800e0a0:	6822      	ldr	r2, [r4, #0]
 800e0a2:	46a8      	mov	r8, r5
 800e0a4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800e0a8:	b1d8      	cbz	r0, 800e0e2 <rcutils_string_map_fini+0x5a>
 800e0aa:	6a21      	ldr	r1, [r4, #32]
 800e0ac:	6967      	ldr	r7, [r4, #20]
 800e0ae:	9101      	str	r1, [sp, #4]
 800e0b0:	47b8      	blx	r7
 800e0b2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e0b6:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800e0ba:	9901      	ldr	r1, [sp, #4]
 800e0bc:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e0c0:	47b8      	blx	r7
 800e0c2:	68e3      	ldr	r3, [r4, #12]
 800e0c4:	6862      	ldr	r2, [r4, #4]
 800e0c6:	3b01      	subs	r3, #1
 800e0c8:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800e0cc:	60e3      	str	r3, [r4, #12]
 800e0ce:	6834      	ldr	r4, [r6, #0]
 800e0d0:	68a3      	ldr	r3, [r4, #8]
 800e0d2:	3501      	adds	r5, #1
 800e0d4:	429d      	cmp	r5, r3
 800e0d6:	d207      	bcs.n	800e0e8 <rcutils_string_map_fini+0x60>
 800e0d8:	6822      	ldr	r2, [r4, #0]
 800e0da:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800e0de:	2800      	cmp	r0, #0
 800e0e0:	d1e3      	bne.n	800e0aa <rcutils_string_map_fini+0x22>
 800e0e2:	3501      	adds	r5, #1
 800e0e4:	429d      	cmp	r5, r3
 800e0e6:	d3dd      	bcc.n	800e0a4 <rcutils_string_map_fini+0x1c>
 800e0e8:	2100      	movs	r1, #0
 800e0ea:	4630      	mov	r0, r6
 800e0ec:	f7ff ff18 	bl	800df20 <rcutils_string_map_reserve>
 800e0f0:	4604      	mov	r4, r0
 800e0f2:	b920      	cbnz	r0, 800e0fe <rcutils_string_map_fini+0x76>
 800e0f4:	6830      	ldr	r0, [r6, #0]
 800e0f6:	6943      	ldr	r3, [r0, #20]
 800e0f8:	6a01      	ldr	r1, [r0, #32]
 800e0fa:	4798      	blx	r3
 800e0fc:	6034      	str	r4, [r6, #0]
 800e0fe:	4620      	mov	r0, r4
 800e100:	b002      	add	sp, #8
 800e102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e106:	240b      	movs	r4, #11
 800e108:	4620      	mov	r0, r4
 800e10a:	b002      	add	sp, #8
 800e10c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e110 <rcutils_string_map_getn>:
 800e110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e114:	b082      	sub	sp, #8
 800e116:	b308      	cbz	r0, 800e15c <rcutils_string_map_getn+0x4c>
 800e118:	6804      	ldr	r4, [r0, #0]
 800e11a:	b304      	cbz	r4, 800e15e <rcutils_string_map_getn+0x4e>
 800e11c:	460d      	mov	r5, r1
 800e11e:	b1e9      	cbz	r1, 800e15c <rcutils_string_map_getn+0x4c>
 800e120:	f8d4 9008 	ldr.w	r9, [r4, #8]
 800e124:	6827      	ldr	r7, [r4, #0]
 800e126:	f1b9 0f00 	cmp.w	r9, #0
 800e12a:	d017      	beq.n	800e15c <rcutils_string_map_getn+0x4c>
 800e12c:	4690      	mov	r8, r2
 800e12e:	3f04      	subs	r7, #4
 800e130:	2600      	movs	r6, #0
 800e132:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800e136:	9101      	str	r1, [sp, #4]
 800e138:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800e13c:	4608      	mov	r0, r1
 800e13e:	3601      	adds	r6, #1
 800e140:	b151      	cbz	r1, 800e158 <rcutils_string_map_getn+0x48>
 800e142:	f7f2 f857 	bl	80001f4 <strlen>
 800e146:	4540      	cmp	r0, r8
 800e148:	4602      	mov	r2, r0
 800e14a:	9901      	ldr	r1, [sp, #4]
 800e14c:	bf38      	it	cc
 800e14e:	4642      	movcc	r2, r8
 800e150:	4628      	mov	r0, r5
 800e152:	f009 fa48 	bl	80175e6 <strncmp>
 800e156:	b130      	cbz	r0, 800e166 <rcutils_string_map_getn+0x56>
 800e158:	45b1      	cmp	r9, r6
 800e15a:	d1ea      	bne.n	800e132 <rcutils_string_map_getn+0x22>
 800e15c:	2400      	movs	r4, #0
 800e15e:	4620      	mov	r0, r4
 800e160:	b002      	add	sp, #8
 800e162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e166:	6863      	ldr	r3, [r4, #4]
 800e168:	f853 400a 	ldr.w	r4, [r3, sl]
 800e16c:	4620      	mov	r0, r4
 800e16e:	b002      	add	sp, #8
 800e170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800e174 <rmw_get_default_publisher_options>:
 800e174:	2000      	movs	r0, #0
 800e176:	4770      	bx	lr

0800e178 <rmw_get_default_subscription_options>:
 800e178:	2200      	movs	r2, #0
 800e17a:	6002      	str	r2, [r0, #0]
 800e17c:	7102      	strb	r2, [r0, #4]
 800e17e:	4770      	bx	lr

0800e180 <rmw_get_zero_initialized_message_info>:
 800e180:	b470      	push	{r4, r5, r6}
 800e182:	4d07      	ldr	r5, [pc, #28]	; (800e1a0 <rmw_get_zero_initialized_message_info+0x20>)
 800e184:	4606      	mov	r6, r0
 800e186:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e188:	4634      	mov	r4, r6
 800e18a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e18c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e18e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e190:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800e194:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e198:	4630      	mov	r0, r6
 800e19a:	bc70      	pop	{r4, r5, r6}
 800e19c:	4770      	bx	lr
 800e19e:	bf00      	nop
 800e1a0:	08018780 	.word	0x08018780

0800e1a4 <rmw_validate_full_topic_name>:
 800e1a4:	2800      	cmp	r0, #0
 800e1a6:	d062      	beq.n	800e26e <rmw_validate_full_topic_name+0xca>
 800e1a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1ac:	460d      	mov	r5, r1
 800e1ae:	2900      	cmp	r1, #0
 800e1b0:	d05f      	beq.n	800e272 <rmw_validate_full_topic_name+0xce>
 800e1b2:	4616      	mov	r6, r2
 800e1b4:	4604      	mov	r4, r0
 800e1b6:	f7f2 f81d 	bl	80001f4 <strlen>
 800e1ba:	b148      	cbz	r0, 800e1d0 <rmw_validate_full_topic_name+0x2c>
 800e1bc:	7823      	ldrb	r3, [r4, #0]
 800e1be:	2b2f      	cmp	r3, #47	; 0x2f
 800e1c0:	d00d      	beq.n	800e1de <rmw_validate_full_topic_name+0x3a>
 800e1c2:	2302      	movs	r3, #2
 800e1c4:	602b      	str	r3, [r5, #0]
 800e1c6:	b13e      	cbz	r6, 800e1d8 <rmw_validate_full_topic_name+0x34>
 800e1c8:	2000      	movs	r0, #0
 800e1ca:	6030      	str	r0, [r6, #0]
 800e1cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1d0:	2301      	movs	r3, #1
 800e1d2:	602b      	str	r3, [r5, #0]
 800e1d4:	2e00      	cmp	r6, #0
 800e1d6:	d1f7      	bne.n	800e1c8 <rmw_validate_full_topic_name+0x24>
 800e1d8:	2000      	movs	r0, #0
 800e1da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1de:	1e47      	subs	r7, r0, #1
 800e1e0:	5de3      	ldrb	r3, [r4, r7]
 800e1e2:	2b2f      	cmp	r3, #47	; 0x2f
 800e1e4:	d047      	beq.n	800e276 <rmw_validate_full_topic_name+0xd2>
 800e1e6:	1e63      	subs	r3, r4, #1
 800e1e8:	eb03 0900 	add.w	r9, r3, r0
 800e1ec:	f1c4 0e01 	rsb	lr, r4, #1
 800e1f0:	eb0e 0803 	add.w	r8, lr, r3
 800e1f4:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800e1f8:	f021 0220 	bic.w	r2, r1, #32
 800e1fc:	3a41      	subs	r2, #65	; 0x41
 800e1fe:	2a19      	cmp	r2, #25
 800e200:	f1a1 0c2f 	sub.w	ip, r1, #47	; 0x2f
 800e204:	d90c      	bls.n	800e220 <rmw_validate_full_topic_name+0x7c>
 800e206:	295f      	cmp	r1, #95	; 0x5f
 800e208:	d00a      	beq.n	800e220 <rmw_validate_full_topic_name+0x7c>
 800e20a:	f1bc 0f0a 	cmp.w	ip, #10
 800e20e:	d907      	bls.n	800e220 <rmw_validate_full_topic_name+0x7c>
 800e210:	2304      	movs	r3, #4
 800e212:	602b      	str	r3, [r5, #0]
 800e214:	2e00      	cmp	r6, #0
 800e216:	d0df      	beq.n	800e1d8 <rmw_validate_full_topic_name+0x34>
 800e218:	f8c6 8000 	str.w	r8, [r6]
 800e21c:	2000      	movs	r0, #0
 800e21e:	e7d5      	b.n	800e1cc <rmw_validate_full_topic_name+0x28>
 800e220:	454b      	cmp	r3, r9
 800e222:	d1e5      	bne.n	800e1f0 <rmw_validate_full_topic_name+0x4c>
 800e224:	f8df e084 	ldr.w	lr, [pc, #132]	; 800e2ac <rmw_validate_full_topic_name+0x108>
 800e228:	2300      	movs	r3, #0
 800e22a:	f107 0801 	add.w	r8, r7, #1
 800e22e:	e005      	b.n	800e23c <rmw_validate_full_topic_name+0x98>
 800e230:	4611      	mov	r1, r2
 800e232:	4288      	cmp	r0, r1
 800e234:	4613      	mov	r3, r2
 800e236:	f104 0401 	add.w	r4, r4, #1
 800e23a:	d925      	bls.n	800e288 <rmw_validate_full_topic_name+0xe4>
 800e23c:	429f      	cmp	r7, r3
 800e23e:	f103 0201 	add.w	r2, r3, #1
 800e242:	d01e      	beq.n	800e282 <rmw_validate_full_topic_name+0xde>
 800e244:	7821      	ldrb	r1, [r4, #0]
 800e246:	292f      	cmp	r1, #47	; 0x2f
 800e248:	d1f2      	bne.n	800e230 <rmw_validate_full_topic_name+0x8c>
 800e24a:	f894 c001 	ldrb.w	ip, [r4, #1]
 800e24e:	1c5a      	adds	r2, r3, #1
 800e250:	f1bc 0f2f 	cmp.w	ip, #47	; 0x2f
 800e254:	4611      	mov	r1, r2
 800e256:	d024      	beq.n	800e2a2 <rmw_validate_full_topic_name+0xfe>
 800e258:	f81c 300e 	ldrb.w	r3, [ip, lr]
 800e25c:	075b      	lsls	r3, r3, #29
 800e25e:	d5e8      	bpl.n	800e232 <rmw_validate_full_topic_name+0x8e>
 800e260:	2306      	movs	r3, #6
 800e262:	602b      	str	r3, [r5, #0]
 800e264:	2e00      	cmp	r6, #0
 800e266:	d0b7      	beq.n	800e1d8 <rmw_validate_full_topic_name+0x34>
 800e268:	6032      	str	r2, [r6, #0]
 800e26a:	2000      	movs	r0, #0
 800e26c:	e7ae      	b.n	800e1cc <rmw_validate_full_topic_name+0x28>
 800e26e:	200b      	movs	r0, #11
 800e270:	4770      	bx	lr
 800e272:	200b      	movs	r0, #11
 800e274:	e7aa      	b.n	800e1cc <rmw_validate_full_topic_name+0x28>
 800e276:	2303      	movs	r3, #3
 800e278:	602b      	str	r3, [r5, #0]
 800e27a:	2e00      	cmp	r6, #0
 800e27c:	d0ac      	beq.n	800e1d8 <rmw_validate_full_topic_name+0x34>
 800e27e:	6037      	str	r7, [r6, #0]
 800e280:	e7aa      	b.n	800e1d8 <rmw_validate_full_topic_name+0x34>
 800e282:	4641      	mov	r1, r8
 800e284:	1c7a      	adds	r2, r7, #1
 800e286:	e7d4      	b.n	800e232 <rmw_validate_full_topic_name+0x8e>
 800e288:	28f7      	cmp	r0, #247	; 0xf7
 800e28a:	d802      	bhi.n	800e292 <rmw_validate_full_topic_name+0xee>
 800e28c:	2000      	movs	r0, #0
 800e28e:	6028      	str	r0, [r5, #0]
 800e290:	e79c      	b.n	800e1cc <rmw_validate_full_topic_name+0x28>
 800e292:	2307      	movs	r3, #7
 800e294:	602b      	str	r3, [r5, #0]
 800e296:	2e00      	cmp	r6, #0
 800e298:	d09e      	beq.n	800e1d8 <rmw_validate_full_topic_name+0x34>
 800e29a:	23f6      	movs	r3, #246	; 0xf6
 800e29c:	6033      	str	r3, [r6, #0]
 800e29e:	2000      	movs	r0, #0
 800e2a0:	e794      	b.n	800e1cc <rmw_validate_full_topic_name+0x28>
 800e2a2:	2305      	movs	r3, #5
 800e2a4:	602b      	str	r3, [r5, #0]
 800e2a6:	2e00      	cmp	r6, #0
 800e2a8:	d1de      	bne.n	800e268 <rmw_validate_full_topic_name+0xc4>
 800e2aa:	e795      	b.n	800e1d8 <rmw_validate_full_topic_name+0x34>
 800e2ac:	08019094 	.word	0x08019094

0800e2b0 <rmw_uros_set_custom_transport>:
 800e2b0:	b470      	push	{r4, r5, r6}
 800e2b2:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800e2b6:	b162      	cbz	r2, 800e2d2 <rmw_uros_set_custom_transport+0x22>
 800e2b8:	b15b      	cbz	r3, 800e2d2 <rmw_uros_set_custom_transport+0x22>
 800e2ba:	b155      	cbz	r5, 800e2d2 <rmw_uros_set_custom_transport+0x22>
 800e2bc:	b14e      	cbz	r6, 800e2d2 <rmw_uros_set_custom_transport+0x22>
 800e2be:	4c06      	ldr	r4, [pc, #24]	; (800e2d8 <rmw_uros_set_custom_transport+0x28>)
 800e2c0:	7020      	strb	r0, [r4, #0]
 800e2c2:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800e2c6:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800e2ca:	6166      	str	r6, [r4, #20]
 800e2cc:	2000      	movs	r0, #0
 800e2ce:	bc70      	pop	{r4, r5, r6}
 800e2d0:	4770      	bx	lr
 800e2d2:	200b      	movs	r0, #11
 800e2d4:	bc70      	pop	{r4, r5, r6}
 800e2d6:	4770      	bx	lr
 800e2d8:	20009e78 	.word	0x20009e78

0800e2dc <flush_session>:
 800e2dc:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 800e2de:	f001 bfd1 	b.w	8010284 <uxr_run_session_until_confirm_delivery>
 800e2e2:	bf00      	nop

0800e2e4 <rmw_publish>:
 800e2e4:	2800      	cmp	r0, #0
 800e2e6:	d053      	beq.n	800e390 <rmw_publish+0xac>
 800e2e8:	b570      	push	{r4, r5, r6, lr}
 800e2ea:	460d      	mov	r5, r1
 800e2ec:	b08e      	sub	sp, #56	; 0x38
 800e2ee:	2900      	cmp	r1, #0
 800e2f0:	d04b      	beq.n	800e38a <rmw_publish+0xa6>
 800e2f2:	4604      	mov	r4, r0
 800e2f4:	6800      	ldr	r0, [r0, #0]
 800e2f6:	f000 fe33 	bl	800ef60 <is_uxrce_rmw_identifier_valid>
 800e2fa:	2800      	cmp	r0, #0
 800e2fc:	d045      	beq.n	800e38a <rmw_publish+0xa6>
 800e2fe:	6866      	ldr	r6, [r4, #4]
 800e300:	2e00      	cmp	r6, #0
 800e302:	d042      	beq.n	800e38a <rmw_publish+0xa6>
 800e304:	69b4      	ldr	r4, [r6, #24]
 800e306:	4628      	mov	r0, r5
 800e308:	6923      	ldr	r3, [r4, #16]
 800e30a:	4798      	blx	r3
 800e30c:	69f3      	ldr	r3, [r6, #28]
 800e30e:	9005      	str	r0, [sp, #20]
 800e310:	b113      	cbz	r3, 800e318 <rmw_publish+0x34>
 800e312:	a805      	add	r0, sp, #20
 800e314:	4798      	blx	r3
 800e316:	9805      	ldr	r0, [sp, #20]
 800e318:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800e31c:	691b      	ldr	r3, [r3, #16]
 800e31e:	9000      	str	r0, [sp, #0]
 800e320:	6972      	ldr	r2, [r6, #20]
 800e322:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800e324:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800e328:	ab06      	add	r3, sp, #24
 800e32a:	f002 fdb3 	bl	8010e94 <uxr_prepare_output_stream>
 800e32e:	b1d8      	cbz	r0, 800e368 <rmw_publish+0x84>
 800e330:	68a3      	ldr	r3, [r4, #8]
 800e332:	4628      	mov	r0, r5
 800e334:	a906      	add	r1, sp, #24
 800e336:	4798      	blx	r3
 800e338:	6a33      	ldr	r3, [r6, #32]
 800e33a:	4604      	mov	r4, r0
 800e33c:	b10b      	cbz	r3, 800e342 <rmw_publish+0x5e>
 800e33e:	a806      	add	r0, sp, #24
 800e340:	4798      	blx	r3
 800e342:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 800e346:	2b01      	cmp	r3, #1
 800e348:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800e34c:	d022      	beq.n	800e394 <rmw_publish+0xb0>
 800e34e:	6918      	ldr	r0, [r3, #16]
 800e350:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 800e352:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e356:	f001 ff95 	bl	8010284 <uxr_run_session_until_confirm_delivery>
 800e35a:	4020      	ands	r0, r4
 800e35c:	b2c4      	uxtb	r4, r0
 800e35e:	f084 0001 	eor.w	r0, r4, #1
 800e362:	b2c0      	uxtb	r0, r0
 800e364:	b00e      	add	sp, #56	; 0x38
 800e366:	bd70      	pop	{r4, r5, r6, pc}
 800e368:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800e36c:	4a0c      	ldr	r2, [pc, #48]	; (800e3a0 <rmw_publish+0xbc>)
 800e36e:	6918      	ldr	r0, [r3, #16]
 800e370:	9b05      	ldr	r3, [sp, #20]
 800e372:	9300      	str	r3, [sp, #0]
 800e374:	e9cd 2601 	strd	r2, r6, [sp, #4]
 800e378:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e37c:	6972      	ldr	r2, [r6, #20]
 800e37e:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800e380:	ab06      	add	r3, sp, #24
 800e382:	f002 fdb7 	bl	8010ef4 <uxr_prepare_output_stream_fragmented>
 800e386:	2800      	cmp	r0, #0
 800e388:	d1d2      	bne.n	800e330 <rmw_publish+0x4c>
 800e38a:	2001      	movs	r0, #1
 800e38c:	b00e      	add	sp, #56	; 0x38
 800e38e:	bd70      	pop	{r4, r5, r6, pc}
 800e390:	2001      	movs	r0, #1
 800e392:	4770      	bx	lr
 800e394:	6918      	ldr	r0, [r3, #16]
 800e396:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e39a:	f001 fbf1 	bl	800fb80 <uxr_flash_output_streams>
 800e39e:	e7de      	b.n	800e35e <rmw_publish+0x7a>
 800e3a0:	0800e2dd 	.word	0x0800e2dd

0800e3a4 <rmw_create_publisher>:
 800e3a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3a8:	b087      	sub	sp, #28
 800e3aa:	2800      	cmp	r0, #0
 800e3ac:	f000 80cc 	beq.w	800e548 <rmw_create_publisher+0x1a4>
 800e3b0:	460e      	mov	r6, r1
 800e3b2:	2900      	cmp	r1, #0
 800e3b4:	f000 80c8 	beq.w	800e548 <rmw_create_publisher+0x1a4>
 800e3b8:	4604      	mov	r4, r0
 800e3ba:	6800      	ldr	r0, [r0, #0]
 800e3bc:	4615      	mov	r5, r2
 800e3be:	4698      	mov	r8, r3
 800e3c0:	f000 fdce 	bl	800ef60 <is_uxrce_rmw_identifier_valid>
 800e3c4:	2800      	cmp	r0, #0
 800e3c6:	f000 80bf 	beq.w	800e548 <rmw_create_publisher+0x1a4>
 800e3ca:	2d00      	cmp	r5, #0
 800e3cc:	f000 80bc 	beq.w	800e548 <rmw_create_publisher+0x1a4>
 800e3d0:	782b      	ldrb	r3, [r5, #0]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	f000 80b8 	beq.w	800e548 <rmw_create_publisher+0x1a4>
 800e3d8:	f1b8 0f00 	cmp.w	r8, #0
 800e3dc:	f000 80b4 	beq.w	800e548 <rmw_create_publisher+0x1a4>
 800e3e0:	485c      	ldr	r0, [pc, #368]	; (800e554 <rmw_create_publisher+0x1b0>)
 800e3e2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e3e6:	f005 fa73 	bl	80138d0 <get_memory>
 800e3ea:	2800      	cmp	r0, #0
 800e3ec:	f000 80ac 	beq.w	800e548 <rmw_create_publisher+0x1a4>
 800e3f0:	68c4      	ldr	r4, [r0, #12]
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800e3f8:	f005 fa8e 	bl	8013918 <rmw_get_implementation_identifier>
 800e3fc:	f104 0a98 	add.w	sl, r4, #152	; 0x98
 800e400:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800e404:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 800e408:	4628      	mov	r0, r5
 800e40a:	f7f1 fef3 	bl	80001f4 <strlen>
 800e40e:	3001      	adds	r0, #1
 800e410:	283c      	cmp	r0, #60	; 0x3c
 800e412:	f104 0784 	add.w	r7, r4, #132	; 0x84
 800e416:	f200 8094 	bhi.w	800e542 <rmw_create_publisher+0x19e>
 800e41a:	4a4f      	ldr	r2, [pc, #316]	; (800e558 <rmw_create_publisher+0x1b4>)
 800e41c:	462b      	mov	r3, r5
 800e41e:	213c      	movs	r1, #60	; 0x3c
 800e420:	4650      	mov	r0, sl
 800e422:	f008 ff65 	bl	80172f0 <sniprintf>
 800e426:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e42a:	e9c4 391f 	strd	r3, r9, [r4, #124]	; 0x7c
 800e42e:	4641      	mov	r1, r8
 800e430:	2250      	movs	r2, #80	; 0x50
 800e432:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800e436:	f009 f9e0 	bl	80177fa <memcpy>
 800e43a:	f898 3008 	ldrb.w	r3, [r8, #8]
 800e43e:	4947      	ldr	r1, [pc, #284]	; (800e55c <rmw_create_publisher+0x1b8>)
 800e440:	2b02      	cmp	r3, #2
 800e442:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e446:	bf0c      	ite	eq
 800e448:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 800e44c:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 800e450:	67a3      	str	r3, [r4, #120]	; 0x78
 800e452:	2300      	movs	r3, #0
 800e454:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800e458:	4630      	mov	r0, r6
 800e45a:	f000 fd8f 	bl	800ef7c <get_message_typesupport_handle>
 800e45e:	2800      	cmp	r0, #0
 800e460:	d06f      	beq.n	800e542 <rmw_create_publisher+0x19e>
 800e462:	6842      	ldr	r2, [r0, #4]
 800e464:	61a2      	str	r2, [r4, #24]
 800e466:	2a00      	cmp	r2, #0
 800e468:	d06b      	beq.n	800e542 <rmw_create_publisher+0x19e>
 800e46a:	4629      	mov	r1, r5
 800e46c:	4643      	mov	r3, r8
 800e46e:	4648      	mov	r0, r9
 800e470:	f005 fc9c 	bl	8013dac <create_topic>
 800e474:	6260      	str	r0, [r4, #36]	; 0x24
 800e476:	2800      	cmp	r0, #0
 800e478:	d063      	beq.n	800e542 <rmw_create_publisher+0x19e>
 800e47a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800e47e:	f241 5398 	movw	r3, #5528	; 0x1598
 800e482:	2103      	movs	r1, #3
 800e484:	5ad0      	ldrh	r0, [r2, r3]
 800e486:	1c45      	adds	r5, r0, #1
 800e488:	52d5      	strh	r5, [r2, r3]
 800e48a:	f001 f907 	bl	800f69c <uxr_object_id>
 800e48e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e492:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800e496:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800e49a:	6912      	ldr	r2, [r2, #16]
 800e49c:	6120      	str	r0, [r4, #16]
 800e49e:	f04f 0a06 	mov.w	sl, #6
 800e4a2:	f8cd a000 	str.w	sl, [sp]
 800e4a6:	6819      	ldr	r1, [r3, #0]
 800e4a8:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800e4ac:	f502 7028 	add.w	r0, r2, #672	; 0x2a0
 800e4b0:	6922      	ldr	r2, [r4, #16]
 800e4b2:	f000 ffa3 	bl	800f3fc <uxr_buffer_create_publisher_bin>
 800e4b6:	4602      	mov	r2, r0
 800e4b8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e4bc:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800e4c0:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800e4c4:	f000 fccc 	bl	800ee60 <run_xrce_session>
 800e4c8:	b3b8      	cbz	r0, 800e53a <rmw_create_publisher+0x196>
 800e4ca:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800e4ce:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 800e4d2:	f241 539a 	movw	r3, #5530	; 0x159a
 800e4d6:	2105      	movs	r1, #5
 800e4d8:	5ad0      	ldrh	r0, [r2, r3]
 800e4da:	1c45      	adds	r5, r0, #1
 800e4dc:	52d5      	strh	r5, [r2, r3]
 800e4de:	f001 f8dd 	bl	800f69c <uxr_object_id>
 800e4e2:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800e4e6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e4ea:	6915      	ldr	r5, [r2, #16]
 800e4ec:	6160      	str	r0, [r4, #20]
 800e4ee:	ae04      	add	r6, sp, #16
 800e4f0:	4641      	mov	r1, r8
 800e4f2:	4630      	mov	r0, r6
 800e4f4:	f8d3 8384 	ldr.w	r8, [r3, #900]	; 0x384
 800e4f8:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800e4fc:	f000 fccc 	bl	800ee98 <convert_qos_profile>
 800e500:	e896 0003 	ldmia.w	r6, {r0, r1}
 800e504:	f8cd a00c 	str.w	sl, [sp, #12]
 800e508:	9001      	str	r0, [sp, #4]
 800e50a:	f8ad 1008 	strh.w	r1, [sp, #8]
 800e50e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800e512:	9300      	str	r3, [sp, #0]
 800e514:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
 800e518:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800e51c:	f8d8 1000 	ldr.w	r1, [r8]
 800e520:	4628      	mov	r0, r5
 800e522:	f000 ffc9 	bl	800f4b8 <uxr_buffer_create_datawriter_bin>
 800e526:	4602      	mov	r2, r0
 800e528:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e52c:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800e530:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800e534:	f000 fc94 	bl	800ee60 <run_xrce_session>
 800e538:	b938      	cbnz	r0, 800e54a <rmw_create_publisher+0x1a6>
 800e53a:	4806      	ldr	r0, [pc, #24]	; (800e554 <rmw_create_publisher+0x1b0>)
 800e53c:	4621      	mov	r1, r4
 800e53e:	f005 f9d7 	bl	80138f0 <put_memory>
 800e542:	4638      	mov	r0, r7
 800e544:	f000 fb3a 	bl	800ebbc <rmw_uxrce_fini_publisher_memory>
 800e548:	2700      	movs	r7, #0
 800e54a:	4638      	mov	r0, r7
 800e54c:	b007      	add	sp, #28
 800e54e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e552:	bf00      	nop
 800e554:	20009ea8 	.word	0x20009ea8
 800e558:	08018934 	.word	0x08018934
 800e55c:	08018900 	.word	0x08018900

0800e560 <rmw_publisher_get_actual_qos>:
 800e560:	2000      	movs	r0, #0
 800e562:	4770      	bx	lr

0800e564 <rmw_destroy_publisher>:
 800e564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e566:	b128      	cbz	r0, 800e574 <rmw_destroy_publisher+0x10>
 800e568:	4604      	mov	r4, r0
 800e56a:	6800      	ldr	r0, [r0, #0]
 800e56c:	460d      	mov	r5, r1
 800e56e:	f000 fcf7 	bl	800ef60 <is_uxrce_rmw_identifier_valid>
 800e572:	b910      	cbnz	r0, 800e57a <rmw_destroy_publisher+0x16>
 800e574:	2401      	movs	r4, #1
 800e576:	4620      	mov	r0, r4
 800e578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e57a:	6863      	ldr	r3, [r4, #4]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d0f9      	beq.n	800e574 <rmw_destroy_publisher+0x10>
 800e580:	2d00      	cmp	r5, #0
 800e582:	d0f7      	beq.n	800e574 <rmw_destroy_publisher+0x10>
 800e584:	6828      	ldr	r0, [r5, #0]
 800e586:	f000 fceb 	bl	800ef60 <is_uxrce_rmw_identifier_valid>
 800e58a:	2800      	cmp	r0, #0
 800e58c:	d0f2      	beq.n	800e574 <rmw_destroy_publisher+0x10>
 800e58e:	686c      	ldr	r4, [r5, #4]
 800e590:	2c00      	cmp	r4, #0
 800e592:	d0ef      	beq.n	800e574 <rmw_destroy_publisher+0x10>
 800e594:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e596:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 800e59a:	f005 fc69 	bl	8013e70 <destroy_topic>
 800e59e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800e5a2:	6962      	ldr	r2, [r4, #20]
 800e5a4:	6918      	ldr	r0, [r3, #16]
 800e5a6:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800e5aa:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e5ae:	6819      	ldr	r1, [r3, #0]
 800e5b0:	f000 fe72 	bl	800f298 <uxr_buffer_delete_entity>
 800e5b4:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800e5b8:	6922      	ldr	r2, [r4, #16]
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	6908      	ldr	r0, [r1, #16]
 800e5be:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e5c2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e5c6:	6809      	ldr	r1, [r1, #0]
 800e5c8:	461c      	mov	r4, r3
 800e5ca:	f000 fe65 	bl	800f298 <uxr_buffer_delete_entity>
 800e5ce:	4606      	mov	r6, r0
 800e5d0:	6938      	ldr	r0, [r7, #16]
 800e5d2:	4622      	mov	r2, r4
 800e5d4:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800e5d8:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e5dc:	f000 fc40 	bl	800ee60 <run_xrce_session>
 800e5e0:	4604      	mov	r4, r0
 800e5e2:	6938      	ldr	r0, [r7, #16]
 800e5e4:	4632      	mov	r2, r6
 800e5e6:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800e5ea:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e5ee:	f000 fc37 	bl	800ee60 <run_xrce_session>
 800e5f2:	b12c      	cbz	r4, 800e600 <rmw_destroy_publisher+0x9c>
 800e5f4:	b120      	cbz	r0, 800e600 <rmw_destroy_publisher+0x9c>
 800e5f6:	2400      	movs	r4, #0
 800e5f8:	4628      	mov	r0, r5
 800e5fa:	f000 fadf 	bl	800ebbc <rmw_uxrce_fini_publisher_memory>
 800e5fe:	e7ba      	b.n	800e576 <rmw_destroy_publisher+0x12>
 800e600:	2402      	movs	r4, #2
 800e602:	e7f9      	b.n	800e5f8 <rmw_destroy_publisher+0x94>

0800e604 <rmw_create_subscription>:
 800e604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e608:	b08d      	sub	sp, #52	; 0x34
 800e60a:	2800      	cmp	r0, #0
 800e60c:	f000 80cf 	beq.w	800e7ae <rmw_create_subscription+0x1aa>
 800e610:	460e      	mov	r6, r1
 800e612:	2900      	cmp	r1, #0
 800e614:	f000 80cb 	beq.w	800e7ae <rmw_create_subscription+0x1aa>
 800e618:	4604      	mov	r4, r0
 800e61a:	6800      	ldr	r0, [r0, #0]
 800e61c:	4615      	mov	r5, r2
 800e61e:	4698      	mov	r8, r3
 800e620:	f000 fc9e 	bl	800ef60 <is_uxrce_rmw_identifier_valid>
 800e624:	2800      	cmp	r0, #0
 800e626:	f000 80c2 	beq.w	800e7ae <rmw_create_subscription+0x1aa>
 800e62a:	2d00      	cmp	r5, #0
 800e62c:	f000 80bf 	beq.w	800e7ae <rmw_create_subscription+0x1aa>
 800e630:	782b      	ldrb	r3, [r5, #0]
 800e632:	2b00      	cmp	r3, #0
 800e634:	f000 80bb 	beq.w	800e7ae <rmw_create_subscription+0x1aa>
 800e638:	f1b8 0f00 	cmp.w	r8, #0
 800e63c:	f000 80b7 	beq.w	800e7ae <rmw_create_subscription+0x1aa>
 800e640:	485d      	ldr	r0, [pc, #372]	; (800e7b8 <rmw_create_subscription+0x1b4>)
 800e642:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e646:	f005 f943 	bl	80138d0 <get_memory>
 800e64a:	4604      	mov	r4, r0
 800e64c:	2800      	cmp	r0, #0
 800e64e:	f000 80af 	beq.w	800e7b0 <rmw_create_subscription+0x1ac>
 800e652:	68c7      	ldr	r7, [r0, #12]
 800e654:	2300      	movs	r3, #0
 800e656:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e65a:	f005 f95d 	bl	8013918 <rmw_get_implementation_identifier>
 800e65e:	f107 0a94 	add.w	sl, r7, #148	; 0x94
 800e662:	67f8      	str	r0, [r7, #124]	; 0x7c
 800e664:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 800e668:	4628      	mov	r0, r5
 800e66a:	f7f1 fdc3 	bl	80001f4 <strlen>
 800e66e:	3001      	adds	r0, #1
 800e670:	283c      	cmp	r0, #60	; 0x3c
 800e672:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 800e676:	f200 8097 	bhi.w	800e7a8 <rmw_create_subscription+0x1a4>
 800e67a:	4a50      	ldr	r2, [pc, #320]	; (800e7bc <rmw_create_subscription+0x1b8>)
 800e67c:	462b      	mov	r3, r5
 800e67e:	213c      	movs	r1, #60	; 0x3c
 800e680:	4650      	mov	r0, sl
 800e682:	f008 fe35 	bl	80172f0 <sniprintf>
 800e686:	4641      	mov	r1, r8
 800e688:	f8c7 9020 	str.w	r9, [r7, #32]
 800e68c:	2250      	movs	r2, #80	; 0x50
 800e68e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800e692:	f009 f8b2 	bl	80177fa <memcpy>
 800e696:	494a      	ldr	r1, [pc, #296]	; (800e7c0 <rmw_create_subscription+0x1bc>)
 800e698:	4630      	mov	r0, r6
 800e69a:	f000 fc6f 	bl	800ef7c <get_message_typesupport_handle>
 800e69e:	2800      	cmp	r0, #0
 800e6a0:	f000 8082 	beq.w	800e7a8 <rmw_create_subscription+0x1a4>
 800e6a4:	6842      	ldr	r2, [r0, #4]
 800e6a6:	61ba      	str	r2, [r7, #24]
 800e6a8:	2a00      	cmp	r2, #0
 800e6aa:	d07d      	beq.n	800e7a8 <rmw_create_subscription+0x1a4>
 800e6ac:	4629      	mov	r1, r5
 800e6ae:	4643      	mov	r3, r8
 800e6b0:	4648      	mov	r0, r9
 800e6b2:	f005 fb7b 	bl	8013dac <create_topic>
 800e6b6:	61f8      	str	r0, [r7, #28]
 800e6b8:	2800      	cmp	r0, #0
 800e6ba:	d075      	beq.n	800e7a8 <rmw_create_subscription+0x1a4>
 800e6bc:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800e6c0:	f241 539c 	movw	r3, #5532	; 0x159c
 800e6c4:	2104      	movs	r1, #4
 800e6c6:	5ad0      	ldrh	r0, [r2, r3]
 800e6c8:	1c45      	adds	r5, r0, #1
 800e6ca:	52d5      	strh	r5, [r2, r3]
 800e6cc:	f000 ffe6 	bl	800f69c <uxr_object_id>
 800e6d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e6d4:	6138      	str	r0, [r7, #16]
 800e6d6:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800e6da:	2606      	movs	r6, #6
 800e6dc:	9600      	str	r6, [sp, #0]
 800e6de:	6811      	ldr	r1, [r2, #0]
 800e6e0:	693a      	ldr	r2, [r7, #16]
 800e6e2:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800e6e6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800e6ea:	f000 feb5 	bl	800f458 <uxr_buffer_create_subscriber_bin>
 800e6ee:	4602      	mov	r2, r0
 800e6f0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e6f4:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800e6f8:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800e6fc:	f000 fbb0 	bl	800ee60 <run_xrce_session>
 800e700:	2800      	cmp	r0, #0
 800e702:	d04d      	beq.n	800e7a0 <rmw_create_subscription+0x19c>
 800e704:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800e708:	f241 539e 	movw	r3, #5534	; 0x159e
 800e70c:	4631      	mov	r1, r6
 800e70e:	5ad0      	ldrh	r0, [r2, r3]
 800e710:	1c45      	adds	r5, r0, #1
 800e712:	52d5      	strh	r5, [r2, r3]
 800e714:	f000 ffc2 	bl	800f69c <uxr_object_id>
 800e718:	ad08      	add	r5, sp, #32
 800e71a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e71e:	69fb      	ldr	r3, [r7, #28]
 800e720:	6178      	str	r0, [r7, #20]
 800e722:	4641      	mov	r1, r8
 800e724:	4628      	mov	r0, r5
 800e726:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 800e72a:	9305      	str	r3, [sp, #20]
 800e72c:	f000 fbb4 	bl	800ee98 <convert_qos_profile>
 800e730:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e734:	9b05      	ldr	r3, [sp, #20]
 800e736:	9001      	str	r0, [sp, #4]
 800e738:	9603      	str	r6, [sp, #12]
 800e73a:	f8ad 1008 	strh.w	r1, [sp, #8]
 800e73e:	691b      	ldr	r3, [r3, #16]
 800e740:	9300      	str	r3, [sp, #0]
 800e742:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 800e746:	f8db 1000 	ldr.w	r1, [fp]
 800e74a:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 800e74e:	f000 ff2b 	bl	800f5a8 <uxr_buffer_create_datareader_bin>
 800e752:	4602      	mov	r2, r0
 800e754:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e758:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800e75c:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800e760:	f000 fb7e 	bl	800ee60 <run_xrce_session>
 800e764:	b1e0      	cbz	r0, 800e7a0 <rmw_create_subscription+0x19c>
 800e766:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 800e76a:	f898 3008 	ldrb.w	r3, [r8, #8]
 800e76e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e772:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e776:	2200      	movs	r2, #0
 800e778:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 800e77c:	2b02      	cmp	r3, #2
 800e77e:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800e782:	bf0c      	ite	eq
 800e784:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 800e788:	f8d0 3374 	ldrne.w	r3, [r0, #884]	; 0x374
 800e78c:	9307      	str	r3, [sp, #28]
 800e78e:	aa0a      	add	r2, sp, #40	; 0x28
 800e790:	9200      	str	r2, [sp, #0]
 800e792:	697a      	ldr	r2, [r7, #20]
 800e794:	6809      	ldr	r1, [r1, #0]
 800e796:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e79a:	f000 ffad 	bl	800f6f8 <uxr_buffer_request_data>
 800e79e:	e007      	b.n	800e7b0 <rmw_create_subscription+0x1ac>
 800e7a0:	4805      	ldr	r0, [pc, #20]	; (800e7b8 <rmw_create_subscription+0x1b4>)
 800e7a2:	4639      	mov	r1, r7
 800e7a4:	f005 f8a4 	bl	80138f0 <put_memory>
 800e7a8:	4620      	mov	r0, r4
 800e7aa:	f000 fa1d 	bl	800ebe8 <rmw_uxrce_fini_subscription_memory>
 800e7ae:	2400      	movs	r4, #0
 800e7b0:	4620      	mov	r0, r4
 800e7b2:	b00d      	add	sp, #52	; 0x34
 800e7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7b8:	2000d104 	.word	0x2000d104
 800e7bc:	08018934 	.word	0x08018934
 800e7c0:	08018900 	.word	0x08018900

0800e7c4 <rmw_subscription_get_actual_qos>:
 800e7c4:	2000      	movs	r0, #0
 800e7c6:	4770      	bx	lr

0800e7c8 <rmw_destroy_subscription>:
 800e7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7ca:	b128      	cbz	r0, 800e7d8 <rmw_destroy_subscription+0x10>
 800e7cc:	4604      	mov	r4, r0
 800e7ce:	6800      	ldr	r0, [r0, #0]
 800e7d0:	460d      	mov	r5, r1
 800e7d2:	f000 fbc5 	bl	800ef60 <is_uxrce_rmw_identifier_valid>
 800e7d6:	b910      	cbnz	r0, 800e7de <rmw_destroy_subscription+0x16>
 800e7d8:	2401      	movs	r4, #1
 800e7da:	4620      	mov	r0, r4
 800e7dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7de:	6863      	ldr	r3, [r4, #4]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d0f9      	beq.n	800e7d8 <rmw_destroy_subscription+0x10>
 800e7e4:	2d00      	cmp	r5, #0
 800e7e6:	d0f7      	beq.n	800e7d8 <rmw_destroy_subscription+0x10>
 800e7e8:	6828      	ldr	r0, [r5, #0]
 800e7ea:	f000 fbb9 	bl	800ef60 <is_uxrce_rmw_identifier_valid>
 800e7ee:	2800      	cmp	r0, #0
 800e7f0:	d0f2      	beq.n	800e7d8 <rmw_destroy_subscription+0x10>
 800e7f2:	686c      	ldr	r4, [r5, #4]
 800e7f4:	2c00      	cmp	r4, #0
 800e7f6:	d0ef      	beq.n	800e7d8 <rmw_destroy_subscription+0x10>
 800e7f8:	6a26      	ldr	r6, [r4, #32]
 800e7fa:	6962      	ldr	r2, [r4, #20]
 800e7fc:	6930      	ldr	r0, [r6, #16]
 800e7fe:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800e802:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e806:	6819      	ldr	r1, [r3, #0]
 800e808:	f000 ffb0 	bl	800f76c <uxr_buffer_cancel_data>
 800e80c:	4602      	mov	r2, r0
 800e80e:	6930      	ldr	r0, [r6, #16]
 800e810:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800e814:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e818:	f000 fb22 	bl	800ee60 <run_xrce_session>
 800e81c:	69e0      	ldr	r0, [r4, #28]
 800e81e:	f005 fb27 	bl	8013e70 <destroy_topic>
 800e822:	6a23      	ldr	r3, [r4, #32]
 800e824:	6962      	ldr	r2, [r4, #20]
 800e826:	6918      	ldr	r0, [r3, #16]
 800e828:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800e82c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e830:	6819      	ldr	r1, [r3, #0]
 800e832:	f000 fd31 	bl	800f298 <uxr_buffer_delete_entity>
 800e836:	6a21      	ldr	r1, [r4, #32]
 800e838:	6922      	ldr	r2, [r4, #16]
 800e83a:	4603      	mov	r3, r0
 800e83c:	6908      	ldr	r0, [r1, #16]
 800e83e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e842:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e846:	6809      	ldr	r1, [r1, #0]
 800e848:	461c      	mov	r4, r3
 800e84a:	f000 fd25 	bl	800f298 <uxr_buffer_delete_entity>
 800e84e:	4607      	mov	r7, r0
 800e850:	6930      	ldr	r0, [r6, #16]
 800e852:	4622      	mov	r2, r4
 800e854:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800e858:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e85c:	f000 fb00 	bl	800ee60 <run_xrce_session>
 800e860:	4604      	mov	r4, r0
 800e862:	6930      	ldr	r0, [r6, #16]
 800e864:	463a      	mov	r2, r7
 800e866:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800e86a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e86e:	f000 faf7 	bl	800ee60 <run_xrce_session>
 800e872:	b12c      	cbz	r4, 800e880 <rmw_destroy_subscription+0xb8>
 800e874:	b120      	cbz	r0, 800e880 <rmw_destroy_subscription+0xb8>
 800e876:	2400      	movs	r4, #0
 800e878:	4628      	mov	r0, r5
 800e87a:	f000 f9b5 	bl	800ebe8 <rmw_uxrce_fini_subscription_memory>
 800e87e:	e7ac      	b.n	800e7da <rmw_destroy_subscription+0x12>
 800e880:	2402      	movs	r4, #2
 800e882:	e7f9      	b.n	800e878 <rmw_destroy_subscription+0xb0>

0800e884 <rmw_take_with_info>:
 800e884:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e886:	4604      	mov	r4, r0
 800e888:	6800      	ldr	r0, [r0, #0]
 800e88a:	b089      	sub	sp, #36	; 0x24
 800e88c:	460f      	mov	r7, r1
 800e88e:	4615      	mov	r5, r2
 800e890:	b128      	cbz	r0, 800e89e <rmw_take_with_info+0x1a>
 800e892:	4b24      	ldr	r3, [pc, #144]	; (800e924 <rmw_take_with_info+0xa0>)
 800e894:	6819      	ldr	r1, [r3, #0]
 800e896:	f7f1 fca3 	bl	80001e0 <strcmp>
 800e89a:	2800      	cmp	r0, #0
 800e89c:	d13e      	bne.n	800e91c <rmw_take_with_info+0x98>
 800e89e:	b305      	cbz	r5, 800e8e2 <rmw_take_with_info+0x5e>
 800e8a0:	6864      	ldr	r4, [r4, #4]
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	702b      	strb	r3, [r5, #0]
 800e8a6:	f000 fa63 	bl	800ed70 <rmw_uxrce_clean_expired_static_input_buffer>
 800e8aa:	4620      	mov	r0, r4
 800e8ac:	f000 fa36 	bl	800ed1c <rmw_uxrce_find_static_input_buffer_by_owner>
 800e8b0:	4606      	mov	r6, r0
 800e8b2:	b1f0      	cbz	r0, 800e8f2 <rmw_take_with_info+0x6e>
 800e8b4:	68c1      	ldr	r1, [r0, #12]
 800e8b6:	4668      	mov	r0, sp
 800e8b8:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 800e8bc:	3110      	adds	r1, #16
 800e8be:	f000 fc23 	bl	800f108 <ucdr_init_buffer>
 800e8c2:	69a3      	ldr	r3, [r4, #24]
 800e8c4:	4639      	mov	r1, r7
 800e8c6:	68db      	ldr	r3, [r3, #12]
 800e8c8:	4668      	mov	r0, sp
 800e8ca:	4798      	blx	r3
 800e8cc:	4631      	mov	r1, r6
 800e8ce:	4604      	mov	r4, r0
 800e8d0:	4815      	ldr	r0, [pc, #84]	; (800e928 <rmw_take_with_info+0xa4>)
 800e8d2:	f005 f80d 	bl	80138f0 <put_memory>
 800e8d6:	702c      	strb	r4, [r5, #0]
 800e8d8:	f084 0001 	eor.w	r0, r4, #1
 800e8dc:	b2c0      	uxtb	r0, r0
 800e8de:	b009      	add	sp, #36	; 0x24
 800e8e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8e2:	6864      	ldr	r4, [r4, #4]
 800e8e4:	f000 fa44 	bl	800ed70 <rmw_uxrce_clean_expired_static_input_buffer>
 800e8e8:	4620      	mov	r0, r4
 800e8ea:	f000 fa17 	bl	800ed1c <rmw_uxrce_find_static_input_buffer_by_owner>
 800e8ee:	4605      	mov	r5, r0
 800e8f0:	b910      	cbnz	r0, 800e8f8 <rmw_take_with_info+0x74>
 800e8f2:	2001      	movs	r0, #1
 800e8f4:	b009      	add	sp, #36	; 0x24
 800e8f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8f8:	68e9      	ldr	r1, [r5, #12]
 800e8fa:	4668      	mov	r0, sp
 800e8fc:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 800e900:	3110      	adds	r1, #16
 800e902:	f000 fc01 	bl	800f108 <ucdr_init_buffer>
 800e906:	69a3      	ldr	r3, [r4, #24]
 800e908:	4639      	mov	r1, r7
 800e90a:	68db      	ldr	r3, [r3, #12]
 800e90c:	4668      	mov	r0, sp
 800e90e:	4798      	blx	r3
 800e910:	4629      	mov	r1, r5
 800e912:	4604      	mov	r4, r0
 800e914:	4804      	ldr	r0, [pc, #16]	; (800e928 <rmw_take_with_info+0xa4>)
 800e916:	f004 ffeb 	bl	80138f0 <put_memory>
 800e91a:	e7dd      	b.n	800e8d8 <rmw_take_with_info+0x54>
 800e91c:	200c      	movs	r0, #12
 800e91e:	b009      	add	sp, #36	; 0x24
 800e920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e922:	bf00      	nop
 800e924:	08018e08 	.word	0x08018e08
 800e928:	20009e98 	.word	0x20009e98

0800e92c <rmw_uxrce_init_service_memory>:
 800e92c:	b1b2      	cbz	r2, 800e95c <rmw_uxrce_init_service_memory+0x30>
 800e92e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e930:	7a07      	ldrb	r7, [r0, #8]
 800e932:	4605      	mov	r5, r0
 800e934:	b98f      	cbnz	r7, 800e95a <rmw_uxrce_init_service_memory+0x2e>
 800e936:	e9c0 7700 	strd	r7, r7, [r0]
 800e93a:	460c      	mov	r4, r1
 800e93c:	23c8      	movs	r3, #200	; 0xc8
 800e93e:	2101      	movs	r1, #1
 800e940:	fb03 4602 	mla	r6, r3, r2, r4
 800e944:	60c3      	str	r3, [r0, #12]
 800e946:	7201      	strb	r1, [r0, #8]
 800e948:	4621      	mov	r1, r4
 800e94a:	4628      	mov	r0, r5
 800e94c:	f004 ffd0 	bl	80138f0 <put_memory>
 800e950:	60e4      	str	r4, [r4, #12]
 800e952:	f804 7bc8 	strb.w	r7, [r4], #200
 800e956:	42a6      	cmp	r6, r4
 800e958:	d1f6      	bne.n	800e948 <rmw_uxrce_init_service_memory+0x1c>
 800e95a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e95c:	4770      	bx	lr
 800e95e:	bf00      	nop

0800e960 <rmw_uxrce_init_client_memory>:
 800e960:	b1b2      	cbz	r2, 800e990 <rmw_uxrce_init_client_memory+0x30>
 800e962:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e964:	7a07      	ldrb	r7, [r0, #8]
 800e966:	4605      	mov	r5, r0
 800e968:	b98f      	cbnz	r7, 800e98e <rmw_uxrce_init_client_memory+0x2e>
 800e96a:	e9c0 7700 	strd	r7, r7, [r0]
 800e96e:	460c      	mov	r4, r1
 800e970:	23c8      	movs	r3, #200	; 0xc8
 800e972:	2101      	movs	r1, #1
 800e974:	fb03 4602 	mla	r6, r3, r2, r4
 800e978:	60c3      	str	r3, [r0, #12]
 800e97a:	7201      	strb	r1, [r0, #8]
 800e97c:	4621      	mov	r1, r4
 800e97e:	4628      	mov	r0, r5
 800e980:	f004 ffb6 	bl	80138f0 <put_memory>
 800e984:	60e4      	str	r4, [r4, #12]
 800e986:	f804 7bc8 	strb.w	r7, [r4], #200
 800e98a:	42a6      	cmp	r6, r4
 800e98c:	d1f6      	bne.n	800e97c <rmw_uxrce_init_client_memory+0x1c>
 800e98e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e990:	4770      	bx	lr
 800e992:	bf00      	nop

0800e994 <rmw_uxrce_init_publisher_memory>:
 800e994:	b1b2      	cbz	r2, 800e9c4 <rmw_uxrce_init_publisher_memory+0x30>
 800e996:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e998:	7a07      	ldrb	r7, [r0, #8]
 800e99a:	4605      	mov	r5, r0
 800e99c:	b98f      	cbnz	r7, 800e9c2 <rmw_uxrce_init_publisher_memory+0x2e>
 800e99e:	e9c0 7700 	strd	r7, r7, [r0]
 800e9a2:	460c      	mov	r4, r1
 800e9a4:	23d8      	movs	r3, #216	; 0xd8
 800e9a6:	2101      	movs	r1, #1
 800e9a8:	fb03 4602 	mla	r6, r3, r2, r4
 800e9ac:	60c3      	str	r3, [r0, #12]
 800e9ae:	7201      	strb	r1, [r0, #8]
 800e9b0:	4621      	mov	r1, r4
 800e9b2:	4628      	mov	r0, r5
 800e9b4:	f004 ff9c 	bl	80138f0 <put_memory>
 800e9b8:	60e4      	str	r4, [r4, #12]
 800e9ba:	f804 7bd8 	strb.w	r7, [r4], #216
 800e9be:	42a6      	cmp	r6, r4
 800e9c0:	d1f6      	bne.n	800e9b0 <rmw_uxrce_init_publisher_memory+0x1c>
 800e9c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9c4:	4770      	bx	lr
 800e9c6:	bf00      	nop

0800e9c8 <rmw_uxrce_init_subscription_memory>:
 800e9c8:	b1b2      	cbz	r2, 800e9f8 <rmw_uxrce_init_subscription_memory+0x30>
 800e9ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9cc:	7a07      	ldrb	r7, [r0, #8]
 800e9ce:	4605      	mov	r5, r0
 800e9d0:	b98f      	cbnz	r7, 800e9f6 <rmw_uxrce_init_subscription_memory+0x2e>
 800e9d2:	e9c0 7700 	strd	r7, r7, [r0]
 800e9d6:	460c      	mov	r4, r1
 800e9d8:	23d0      	movs	r3, #208	; 0xd0
 800e9da:	2101      	movs	r1, #1
 800e9dc:	fb03 4602 	mla	r6, r3, r2, r4
 800e9e0:	60c3      	str	r3, [r0, #12]
 800e9e2:	7201      	strb	r1, [r0, #8]
 800e9e4:	4621      	mov	r1, r4
 800e9e6:	4628      	mov	r0, r5
 800e9e8:	f004 ff82 	bl	80138f0 <put_memory>
 800e9ec:	60e4      	str	r4, [r4, #12]
 800e9ee:	f804 7bd0 	strb.w	r7, [r4], #208
 800e9f2:	42a6      	cmp	r6, r4
 800e9f4:	d1f6      	bne.n	800e9e4 <rmw_uxrce_init_subscription_memory+0x1c>
 800e9f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9f8:	4770      	bx	lr
 800e9fa:	bf00      	nop

0800e9fc <rmw_uxrce_init_node_memory>:
 800e9fc:	b1b2      	cbz	r2, 800ea2c <rmw_uxrce_init_node_memory+0x30>
 800e9fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea00:	7a07      	ldrb	r7, [r0, #8]
 800ea02:	4605      	mov	r5, r0
 800ea04:	b98f      	cbnz	r7, 800ea2a <rmw_uxrce_init_node_memory+0x2e>
 800ea06:	e9c0 7700 	strd	r7, r7, [r0]
 800ea0a:	460c      	mov	r4, r1
 800ea0c:	23a4      	movs	r3, #164	; 0xa4
 800ea0e:	2101      	movs	r1, #1
 800ea10:	fb03 4602 	mla	r6, r3, r2, r4
 800ea14:	60c3      	str	r3, [r0, #12]
 800ea16:	7201      	strb	r1, [r0, #8]
 800ea18:	4621      	mov	r1, r4
 800ea1a:	4628      	mov	r0, r5
 800ea1c:	f004 ff68 	bl	80138f0 <put_memory>
 800ea20:	60e4      	str	r4, [r4, #12]
 800ea22:	f804 7ba4 	strb.w	r7, [r4], #164
 800ea26:	42a6      	cmp	r6, r4
 800ea28:	d1f6      	bne.n	800ea18 <rmw_uxrce_init_node_memory+0x1c>
 800ea2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea2c:	4770      	bx	lr
 800ea2e:	bf00      	nop

0800ea30 <rmw_uxrce_init_session_memory>:
 800ea30:	b1d2      	cbz	r2, 800ea68 <rmw_uxrce_init_session_memory+0x38>
 800ea32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea36:	7a07      	ldrb	r7, [r0, #8]
 800ea38:	4605      	mov	r5, r0
 800ea3a:	b99f      	cbnz	r7, 800ea64 <rmw_uxrce_init_session_memory+0x34>
 800ea3c:	e9c0 7700 	strd	r7, r7, [r0]
 800ea40:	f241 53a8 	movw	r3, #5544	; 0x15a8
 800ea44:	460c      	mov	r4, r1
 800ea46:	2101      	movs	r1, #1
 800ea48:	fb03 4602 	mla	r6, r3, r2, r4
 800ea4c:	60c3      	str	r3, [r0, #12]
 800ea4e:	4698      	mov	r8, r3
 800ea50:	7201      	strb	r1, [r0, #8]
 800ea52:	4621      	mov	r1, r4
 800ea54:	4628      	mov	r0, r5
 800ea56:	f004 ff4b 	bl	80138f0 <put_memory>
 800ea5a:	60e4      	str	r4, [r4, #12]
 800ea5c:	7027      	strb	r7, [r4, #0]
 800ea5e:	4444      	add	r4, r8
 800ea60:	42a6      	cmp	r6, r4
 800ea62:	d1f6      	bne.n	800ea52 <rmw_uxrce_init_session_memory+0x22>
 800ea64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea68:	4770      	bx	lr
 800ea6a:	bf00      	nop

0800ea6c <rmw_uxrce_init_topic_memory>:
 800ea6c:	b1c2      	cbz	r2, 800eaa0 <rmw_uxrce_init_topic_memory+0x34>
 800ea6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea70:	7a07      	ldrb	r7, [r0, #8]
 800ea72:	4606      	mov	r6, r0
 800ea74:	b99f      	cbnz	r7, 800ea9e <rmw_uxrce_init_topic_memory+0x32>
 800ea76:	e9c0 7700 	strd	r7, r7, [r0]
 800ea7a:	460c      	mov	r4, r1
 800ea7c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800ea80:	2101      	movs	r1, #1
 800ea82:	231c      	movs	r3, #28
 800ea84:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ea88:	7201      	strb	r1, [r0, #8]
 800ea8a:	60c3      	str	r3, [r0, #12]
 800ea8c:	4621      	mov	r1, r4
 800ea8e:	4630      	mov	r0, r6
 800ea90:	f004 ff2e 	bl	80138f0 <put_memory>
 800ea94:	60e4      	str	r4, [r4, #12]
 800ea96:	f804 7b1c 	strb.w	r7, [r4], #28
 800ea9a:	42a5      	cmp	r5, r4
 800ea9c:	d1f6      	bne.n	800ea8c <rmw_uxrce_init_topic_memory+0x20>
 800ea9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eaa0:	4770      	bx	lr
 800eaa2:	bf00      	nop

0800eaa4 <rmw_uxrce_init_static_input_buffer_memory>:
 800eaa4:	b1d2      	cbz	r2, 800eadc <rmw_uxrce_init_static_input_buffer_memory+0x38>
 800eaa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaa8:	7a07      	ldrb	r7, [r0, #8]
 800eaaa:	4606      	mov	r6, r0
 800eaac:	b9af      	cbnz	r7, 800eada <rmw_uxrce_init_static_input_buffer_memory+0x36>
 800eaae:	e9c0 7700 	strd	r7, r7, [r0]
 800eab2:	460c      	mov	r4, r1
 800eab4:	eb02 1242 	add.w	r2, r2, r2, lsl #5
 800eab8:	2101      	movs	r1, #1
 800eaba:	f44f 6304 	mov.w	r3, #2112	; 0x840
 800eabe:	eb04 1582 	add.w	r5, r4, r2, lsl #6
 800eac2:	7201      	strb	r1, [r0, #8]
 800eac4:	60c3      	str	r3, [r0, #12]
 800eac6:	4621      	mov	r1, r4
 800eac8:	4630      	mov	r0, r6
 800eaca:	f004 ff11 	bl	80138f0 <put_memory>
 800eace:	60e4      	str	r4, [r4, #12]
 800ead0:	7027      	strb	r7, [r4, #0]
 800ead2:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 800ead6:	42a5      	cmp	r5, r4
 800ead8:	d1f5      	bne.n	800eac6 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800eada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eadc:	4770      	bx	lr
 800eade:	bf00      	nop

0800eae0 <rmw_uxrce_init_init_options_impl_memory>:
 800eae0:	b1b2      	cbz	r2, 800eb10 <rmw_uxrce_init_init_options_impl_memory+0x30>
 800eae2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eae4:	7a07      	ldrb	r7, [r0, #8]
 800eae6:	4605      	mov	r5, r0
 800eae8:	b98f      	cbnz	r7, 800eb0e <rmw_uxrce_init_init_options_impl_memory+0x2e>
 800eaea:	e9c0 7700 	strd	r7, r7, [r0]
 800eaee:	460c      	mov	r4, r1
 800eaf0:	232c      	movs	r3, #44	; 0x2c
 800eaf2:	2101      	movs	r1, #1
 800eaf4:	fb03 4602 	mla	r6, r3, r2, r4
 800eaf8:	60c3      	str	r3, [r0, #12]
 800eafa:	7201      	strb	r1, [r0, #8]
 800eafc:	4621      	mov	r1, r4
 800eafe:	4628      	mov	r0, r5
 800eb00:	f004 fef6 	bl	80138f0 <put_memory>
 800eb04:	60e4      	str	r4, [r4, #12]
 800eb06:	f804 7b2c 	strb.w	r7, [r4], #44
 800eb0a:	42a6      	cmp	r6, r4
 800eb0c:	d1f6      	bne.n	800eafc <rmw_uxrce_init_init_options_impl_memory+0x1c>
 800eb0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb10:	4770      	bx	lr
 800eb12:	bf00      	nop

0800eb14 <rmw_uxrce_init_wait_set_memory>:
 800eb14:	b1c2      	cbz	r2, 800eb48 <rmw_uxrce_init_wait_set_memory+0x34>
 800eb16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb18:	7a07      	ldrb	r7, [r0, #8]
 800eb1a:	4606      	mov	r6, r0
 800eb1c:	b99f      	cbnz	r7, 800eb46 <rmw_uxrce_init_wait_set_memory+0x32>
 800eb1e:	e9c0 7700 	strd	r7, r7, [r0]
 800eb22:	460c      	mov	r4, r1
 800eb24:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800eb28:	2101      	movs	r1, #1
 800eb2a:	231c      	movs	r3, #28
 800eb2c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800eb30:	7201      	strb	r1, [r0, #8]
 800eb32:	60c3      	str	r3, [r0, #12]
 800eb34:	4621      	mov	r1, r4
 800eb36:	4630      	mov	r0, r6
 800eb38:	f004 feda 	bl	80138f0 <put_memory>
 800eb3c:	60e4      	str	r4, [r4, #12]
 800eb3e:	f804 7b1c 	strb.w	r7, [r4], #28
 800eb42:	42a5      	cmp	r5, r4
 800eb44:	d1f6      	bne.n	800eb34 <rmw_uxrce_init_wait_set_memory+0x20>
 800eb46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb48:	4770      	bx	lr
 800eb4a:	bf00      	nop

0800eb4c <rmw_uxrce_init_guard_condition_memory>:
 800eb4c:	b1b2      	cbz	r2, 800eb7c <rmw_uxrce_init_guard_condition_memory+0x30>
 800eb4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb50:	7a07      	ldrb	r7, [r0, #8]
 800eb52:	4605      	mov	r5, r0
 800eb54:	b98f      	cbnz	r7, 800eb7a <rmw_uxrce_init_guard_condition_memory+0x2e>
 800eb56:	e9c0 7700 	strd	r7, r7, [r0]
 800eb5a:	460c      	mov	r4, r1
 800eb5c:	2320      	movs	r3, #32
 800eb5e:	2101      	movs	r1, #1
 800eb60:	eb04 1642 	add.w	r6, r4, r2, lsl #5
 800eb64:	7201      	strb	r1, [r0, #8]
 800eb66:	60c3      	str	r3, [r0, #12]
 800eb68:	4621      	mov	r1, r4
 800eb6a:	4628      	mov	r0, r5
 800eb6c:	f004 fec0 	bl	80138f0 <put_memory>
 800eb70:	60e4      	str	r4, [r4, #12]
 800eb72:	f804 7b20 	strb.w	r7, [r4], #32
 800eb76:	42a6      	cmp	r6, r4
 800eb78:	d1f6      	bne.n	800eb68 <rmw_uxrce_init_guard_condition_memory+0x1c>
 800eb7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb7c:	4770      	bx	lr
 800eb7e:	bf00      	nop

0800eb80 <rmw_uxrce_fini_session_memory>:
 800eb80:	4601      	mov	r1, r0
 800eb82:	4801      	ldr	r0, [pc, #4]	; (800eb88 <rmw_uxrce_fini_session_memory+0x8>)
 800eb84:	f004 beb4 	b.w	80138f0 <put_memory>
 800eb88:	2000d040 	.word	0x2000d040

0800eb8c <rmw_uxrce_fini_node_memory>:
 800eb8c:	b538      	push	{r3, r4, r5, lr}
 800eb8e:	4604      	mov	r4, r0
 800eb90:	6800      	ldr	r0, [r0, #0]
 800eb92:	b128      	cbz	r0, 800eba0 <rmw_uxrce_fini_node_memory+0x14>
 800eb94:	4b07      	ldr	r3, [pc, #28]	; (800ebb4 <rmw_uxrce_fini_node_memory+0x28>)
 800eb96:	6819      	ldr	r1, [r3, #0]
 800eb98:	f7f1 fb22 	bl	80001e0 <strcmp>
 800eb9c:	b940      	cbnz	r0, 800ebb0 <rmw_uxrce_fini_node_memory+0x24>
 800eb9e:	6020      	str	r0, [r4, #0]
 800eba0:	6861      	ldr	r1, [r4, #4]
 800eba2:	b129      	cbz	r1, 800ebb0 <rmw_uxrce_fini_node_memory+0x24>
 800eba4:	2500      	movs	r5, #0
 800eba6:	4804      	ldr	r0, [pc, #16]	; (800ebb8 <rmw_uxrce_fini_node_memory+0x2c>)
 800eba8:	610d      	str	r5, [r1, #16]
 800ebaa:	f004 fea1 	bl	80138f0 <put_memory>
 800ebae:	6065      	str	r5, [r4, #4]
 800ebb0:	bd38      	pop	{r3, r4, r5, pc}
 800ebb2:	bf00      	nop
 800ebb4:	08018e08 	.word	0x08018e08
 800ebb8:	2000ce6c 	.word	0x2000ce6c

0800ebbc <rmw_uxrce_fini_publisher_memory>:
 800ebbc:	b510      	push	{r4, lr}
 800ebbe:	4604      	mov	r4, r0
 800ebc0:	6800      	ldr	r0, [r0, #0]
 800ebc2:	b128      	cbz	r0, 800ebd0 <rmw_uxrce_fini_publisher_memory+0x14>
 800ebc4:	4b06      	ldr	r3, [pc, #24]	; (800ebe0 <rmw_uxrce_fini_publisher_memory+0x24>)
 800ebc6:	6819      	ldr	r1, [r3, #0]
 800ebc8:	f7f1 fb0a 	bl	80001e0 <strcmp>
 800ebcc:	b938      	cbnz	r0, 800ebde <rmw_uxrce_fini_publisher_memory+0x22>
 800ebce:	6020      	str	r0, [r4, #0]
 800ebd0:	6861      	ldr	r1, [r4, #4]
 800ebd2:	b121      	cbz	r1, 800ebde <rmw_uxrce_fini_publisher_memory+0x22>
 800ebd4:	4803      	ldr	r0, [pc, #12]	; (800ebe4 <rmw_uxrce_fini_publisher_memory+0x28>)
 800ebd6:	f004 fe8b 	bl	80138f0 <put_memory>
 800ebda:	2300      	movs	r3, #0
 800ebdc:	6063      	str	r3, [r4, #4]
 800ebde:	bd10      	pop	{r4, pc}
 800ebe0:	08018e08 	.word	0x08018e08
 800ebe4:	20009ea8 	.word	0x20009ea8

0800ebe8 <rmw_uxrce_fini_subscription_memory>:
 800ebe8:	b510      	push	{r4, lr}
 800ebea:	4604      	mov	r4, r0
 800ebec:	6800      	ldr	r0, [r0, #0]
 800ebee:	b128      	cbz	r0, 800ebfc <rmw_uxrce_fini_subscription_memory+0x14>
 800ebf0:	4b06      	ldr	r3, [pc, #24]	; (800ec0c <rmw_uxrce_fini_subscription_memory+0x24>)
 800ebf2:	6819      	ldr	r1, [r3, #0]
 800ebf4:	f7f1 faf4 	bl	80001e0 <strcmp>
 800ebf8:	b938      	cbnz	r0, 800ec0a <rmw_uxrce_fini_subscription_memory+0x22>
 800ebfa:	6020      	str	r0, [r4, #0]
 800ebfc:	6861      	ldr	r1, [r4, #4]
 800ebfe:	b121      	cbz	r1, 800ec0a <rmw_uxrce_fini_subscription_memory+0x22>
 800ec00:	4803      	ldr	r0, [pc, #12]	; (800ec10 <rmw_uxrce_fini_subscription_memory+0x28>)
 800ec02:	f004 fe75 	bl	80138f0 <put_memory>
 800ec06:	2300      	movs	r3, #0
 800ec08:	6063      	str	r3, [r4, #4]
 800ec0a:	bd10      	pop	{r4, pc}
 800ec0c:	08018e08 	.word	0x08018e08
 800ec10:	2000d104 	.word	0x2000d104

0800ec14 <rmw_uxrce_fini_service_memory>:
 800ec14:	b510      	push	{r4, lr}
 800ec16:	4604      	mov	r4, r0
 800ec18:	6800      	ldr	r0, [r0, #0]
 800ec1a:	b128      	cbz	r0, 800ec28 <rmw_uxrce_fini_service_memory+0x14>
 800ec1c:	4b06      	ldr	r3, [pc, #24]	; (800ec38 <rmw_uxrce_fini_service_memory+0x24>)
 800ec1e:	6819      	ldr	r1, [r3, #0]
 800ec20:	f7f1 fade 	bl	80001e0 <strcmp>
 800ec24:	b938      	cbnz	r0, 800ec36 <rmw_uxrce_fini_service_memory+0x22>
 800ec26:	6020      	str	r0, [r4, #0]
 800ec28:	6861      	ldr	r1, [r4, #4]
 800ec2a:	b121      	cbz	r1, 800ec36 <rmw_uxrce_fini_service_memory+0x22>
 800ec2c:	4803      	ldr	r0, [pc, #12]	; (800ec3c <rmw_uxrce_fini_service_memory+0x28>)
 800ec2e:	f004 fe5f 	bl	80138f0 <put_memory>
 800ec32:	2300      	movs	r3, #0
 800ec34:	6063      	str	r3, [r4, #4]
 800ec36:	bd10      	pop	{r4, pc}
 800ec38:	08018e08 	.word	0x08018e08
 800ec3c:	2000d0f4 	.word	0x2000d0f4

0800ec40 <rmw_uxrce_fini_client_memory>:
 800ec40:	b510      	push	{r4, lr}
 800ec42:	4604      	mov	r4, r0
 800ec44:	6800      	ldr	r0, [r0, #0]
 800ec46:	b128      	cbz	r0, 800ec54 <rmw_uxrce_fini_client_memory+0x14>
 800ec48:	4b06      	ldr	r3, [pc, #24]	; (800ec64 <rmw_uxrce_fini_client_memory+0x24>)
 800ec4a:	6819      	ldr	r1, [r3, #0]
 800ec4c:	f7f1 fac8 	bl	80001e0 <strcmp>
 800ec50:	b938      	cbnz	r0, 800ec62 <rmw_uxrce_fini_client_memory+0x22>
 800ec52:	6020      	str	r0, [r4, #0]
 800ec54:	6861      	ldr	r1, [r4, #4]
 800ec56:	b121      	cbz	r1, 800ec62 <rmw_uxrce_fini_client_memory+0x22>
 800ec58:	4803      	ldr	r0, [pc, #12]	; (800ec68 <rmw_uxrce_fini_client_memory+0x28>)
 800ec5a:	f004 fe49 	bl	80138f0 <put_memory>
 800ec5e:	2300      	movs	r3, #0
 800ec60:	6063      	str	r3, [r4, #4]
 800ec62:	bd10      	pop	{r4, pc}
 800ec64:	08018e08 	.word	0x08018e08
 800ec68:	2000a728 	.word	0x2000a728

0800ec6c <rmw_uxrce_fini_topic_memory>:
 800ec6c:	b510      	push	{r4, lr}
 800ec6e:	4601      	mov	r1, r0
 800ec70:	4604      	mov	r4, r0
 800ec72:	4803      	ldr	r0, [pc, #12]	; (800ec80 <rmw_uxrce_fini_topic_memory+0x14>)
 800ec74:	f004 fe3c 	bl	80138f0 <put_memory>
 800ec78:	2300      	movs	r3, #0
 800ec7a:	61a3      	str	r3, [r4, #24]
 800ec7c:	bd10      	pop	{r4, pc}
 800ec7e:	bf00      	nop
 800ec80:	2000d030 	.word	0x2000d030

0800ec84 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800ec84:	b082      	sub	sp, #8
 800ec86:	b4f0      	push	{r4, r5, r6, r7}
 800ec88:	4923      	ldr	r1, [pc, #140]	; (800ed18 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 800ec8a:	ac04      	add	r4, sp, #16
 800ec8c:	e884 000c 	stmia.w	r4, {r2, r3}
 800ec90:	680d      	ldr	r5, [r1, #0]
 800ec92:	9c05      	ldr	r4, [sp, #20]
 800ec94:	2d00      	cmp	r5, #0
 800ec96:	d03d      	beq.n	800ed14 <rmw_uxrce_get_static_input_buffer_for_entity+0x90>
 800ec98:	462b      	mov	r3, r5
 800ec9a:	2100      	movs	r1, #0
 800ec9c:	68da      	ldr	r2, [r3, #12]
 800ec9e:	689b      	ldr	r3, [r3, #8]
 800eca0:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 800eca4:	4290      	cmp	r0, r2
 800eca6:	bf08      	it	eq
 800eca8:	3101      	addeq	r1, #1
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d1f6      	bne.n	800ec9c <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800ecae:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800ecb2:	2b02      	cmp	r3, #2
 800ecb4:	d026      	beq.n	800ed04 <rmw_uxrce_get_static_input_buffer_for_entity+0x80>
 800ecb6:	d906      	bls.n	800ecc6 <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 800ecb8:	2b03      	cmp	r3, #3
 800ecba:	d004      	beq.n	800ecc6 <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 800ecbc:	2100      	movs	r1, #0
 800ecbe:	bcf0      	pop	{r4, r5, r6, r7}
 800ecc0:	4608      	mov	r0, r1
 800ecc2:	b002      	add	sp, #8
 800ecc4:	4770      	bx	lr
 800ecc6:	b304      	cbz	r4, 800ed0a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800ecc8:	428c      	cmp	r4, r1
 800ecca:	d81e      	bhi.n	800ed0a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800eccc:	2d00      	cmp	r5, #0
 800ecce:	d0f5      	beq.n	800ecbc <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800ecd0:	2100      	movs	r1, #0
 800ecd2:	f04f 36ff 	mov.w	r6, #4294967295
 800ecd6:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 800ecda:	e002      	b.n	800ece2 <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 800ecdc:	68ad      	ldr	r5, [r5, #8]
 800ecde:	2d00      	cmp	r5, #0
 800ece0:	d0ed      	beq.n	800ecbe <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800ece2:	68eb      	ldr	r3, [r5, #12]
 800ece4:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 800ece8:	4290      	cmp	r0, r2
 800ecea:	d1f7      	bne.n	800ecdc <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800ecec:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800ecf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecf4:	42b2      	cmp	r2, r6
 800ecf6:	eb73 0407 	sbcs.w	r4, r3, r7
 800ecfa:	daef      	bge.n	800ecdc <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800ecfc:	4616      	mov	r6, r2
 800ecfe:	461f      	mov	r7, r3
 800ed00:	4629      	mov	r1, r5
 800ed02:	e7eb      	b.n	800ecdc <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800ed04:	b10c      	cbz	r4, 800ed0a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800ed06:	428c      	cmp	r4, r1
 800ed08:	d9d8      	bls.n	800ecbc <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800ed0a:	bcf0      	pop	{r4, r5, r6, r7}
 800ed0c:	4802      	ldr	r0, [pc, #8]	; (800ed18 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 800ed0e:	b002      	add	sp, #8
 800ed10:	f004 bdde 	b.w	80138d0 <get_memory>
 800ed14:	4629      	mov	r1, r5
 800ed16:	e7ca      	b.n	800ecae <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800ed18:	20009e98 	.word	0x20009e98

0800ed1c <rmw_uxrce_find_static_input_buffer_by_owner>:
 800ed1c:	4b12      	ldr	r3, [pc, #72]	; (800ed68 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	b1fb      	cbz	r3, 800ed62 <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 800ed22:	b4f0      	push	{r4, r5, r6, r7}
 800ed24:	f04f 0c00 	mov.w	ip, #0
 800ed28:	f04f 34ff 	mov.w	r4, #4294967295
 800ed2c:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 800ed30:	e001      	b.n	800ed36 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800ed32:	689b      	ldr	r3, [r3, #8]
 800ed34:	b193      	cbz	r3, 800ed5c <rmw_uxrce_find_static_input_buffer_by_owner+0x40>
 800ed36:	68da      	ldr	r2, [r3, #12]
 800ed38:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 800ed3c:	4288      	cmp	r0, r1
 800ed3e:	d1f8      	bne.n	800ed32 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800ed40:	f602 0218 	addw	r2, r2, #2072	; 0x818
 800ed44:	e9d2 6700 	ldrd	r6, r7, [r2]
 800ed48:	42a6      	cmp	r6, r4
 800ed4a:	eb77 0205 	sbcs.w	r2, r7, r5
 800ed4e:	daf0      	bge.n	800ed32 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800ed50:	469c      	mov	ip, r3
 800ed52:	689b      	ldr	r3, [r3, #8]
 800ed54:	4634      	mov	r4, r6
 800ed56:	463d      	mov	r5, r7
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d1ec      	bne.n	800ed36 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800ed5c:	4660      	mov	r0, ip
 800ed5e:	bcf0      	pop	{r4, r5, r6, r7}
 800ed60:	4770      	bx	lr
 800ed62:	4618      	mov	r0, r3
 800ed64:	4770      	bx	lr
 800ed66:	bf00      	nop
 800ed68:	20009e98 	.word	0x20009e98
 800ed6c:	00000000 	.word	0x00000000

0800ed70 <rmw_uxrce_clean_expired_static_input_buffer>:
 800ed70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed74:	4e38      	ldr	r6, [pc, #224]	; (800ee58 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>)
 800ed76:	f8d6 8000 	ldr.w	r8, [r6]
 800ed7a:	b083      	sub	sp, #12
 800ed7c:	f005 fa08 	bl	8014190 <rmw_uros_epoch_nanos>
 800ed80:	f1b8 0f00 	cmp.w	r8, #0
 800ed84:	d05f      	beq.n	800ee46 <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 800ed86:	46b1      	mov	r9, r6
 800ed88:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800ed8c:	f896 3820 	ldrb.w	r3, [r6, #2080]	; 0x820
 800ed90:	2b04      	cmp	r3, #4
 800ed92:	4682      	mov	sl, r0
 800ed94:	468b      	mov	fp, r1
 800ed96:	d02d      	beq.n	800edf4 <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 800ed98:	2b05      	cmp	r3, #5
 800ed9a:	d041      	beq.n	800ee20 <rmw_uxrce_clean_expired_static_input_buffer+0xb0>
 800ed9c:	2b03      	cmp	r3, #3
 800ed9e:	d029      	beq.n	800edf4 <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 800eda0:	2200      	movs	r2, #0
 800eda2:	2300      	movs	r3, #0
 800eda4:	e9cd 2300 	strd	r2, r3, [sp]
 800eda8:	2001      	movs	r0, #1
 800edaa:	2100      	movs	r1, #0
 800edac:	9b00      	ldr	r3, [sp, #0]
 800edae:	f606 0618 	addw	r6, r6, #2072	; 0x818
 800edb2:	e9d6 6700 	ldrd	r6, r7, [r6]
 800edb6:	18c2      	adds	r2, r0, r3
 800edb8:	9b01      	ldr	r3, [sp, #4]
 800edba:	eb41 0303 	adc.w	r3, r1, r3
 800edbe:	1994      	adds	r4, r2, r6
 800edc0:	eb43 0507 	adc.w	r5, r3, r7
 800edc4:	4554      	cmp	r4, sl
 800edc6:	eb75 020b 	sbcs.w	r2, r5, fp
 800edca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800edce:	db03      	blt.n	800edd8 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800edd0:	45b2      	cmp	sl, r6
 800edd2:	eb7b 0207 	sbcs.w	r2, fp, r7
 800edd6:	da05      	bge.n	800ede4 <rmw_uxrce_clean_expired_static_input_buffer+0x74>
 800edd8:	4641      	mov	r1, r8
 800edda:	4648      	mov	r0, r9
 800eddc:	9300      	str	r3, [sp, #0]
 800edde:	f004 fd87 	bl	80138f0 <put_memory>
 800ede2:	9b00      	ldr	r3, [sp, #0]
 800ede4:	b37b      	cbz	r3, 800ee46 <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 800ede6:	4698      	mov	r8, r3
 800ede8:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800edec:	f896 3820 	ldrb.w	r3, [r6, #2080]	; 0x820
 800edf0:	2b04      	cmp	r3, #4
 800edf2:	d1d1      	bne.n	800ed98 <rmw_uxrce_clean_expired_static_input_buffer+0x28>
 800edf4:	f8d6 1814 	ldr.w	r1, [r6, #2068]	; 0x814
 800edf8:	e9d1 2310 	ldrd	r2, r3, [r1, #64]	; 0x40
 800edfc:	e9cd 2300 	strd	r2, r3, [sp]
 800ee00:	4313      	orrs	r3, r2
 800ee02:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	; 0x48
 800ee06:	d015      	beq.n	800ee34 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800ee08:	9a01      	ldr	r2, [sp, #4]
 800ee0a:	4b14      	ldr	r3, [pc, #80]	; (800ee5c <rmw_uxrce_clean_expired_static_input_buffer+0xec>)
 800ee0c:	fb03 f702 	mul.w	r7, r3, r2
 800ee10:	9a00      	ldr	r2, [sp, #0]
 800ee12:	fba2 2303 	umull	r2, r3, r2, r3
 800ee16:	e9cd 2300 	strd	r2, r3, [sp]
 800ee1a:	443b      	add	r3, r7
 800ee1c:	9301      	str	r3, [sp, #4]
 800ee1e:	e7c5      	b.n	800edac <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 800ee20:	f8d6 1814 	ldr.w	r1, [r6, #2068]	; 0x814
 800ee24:	e9d1 2312 	ldrd	r2, r3, [r1, #72]	; 0x48
 800ee28:	e9cd 2300 	strd	r2, r3, [sp]
 800ee2c:	4313      	orrs	r3, r2
 800ee2e:	e9d1 0114 	ldrd	r0, r1, [r1, #80]	; 0x50
 800ee32:	d1e9      	bne.n	800ee08 <rmw_uxrce_clean_expired_static_input_buffer+0x98>
 800ee34:	ea50 0301 	orrs.w	r3, r0, r1
 800ee38:	bf02      	ittt	eq
 800ee3a:	a305      	addeq	r3, pc, #20	; (adr r3, 800ee50 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>)
 800ee3c:	e9d3 2300 	ldrdeq	r2, r3, [r3]
 800ee40:	e9cd 2300 	strdeq	r2, r3, [sp]
 800ee44:	e7b2      	b.n	800edac <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 800ee46:	b003      	add	sp, #12
 800ee48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee4c:	f3af 8000 	nop.w
 800ee50:	fc23ac00 	.word	0xfc23ac00
 800ee54:	00000006 	.word	0x00000006
 800ee58:	20009e98 	.word	0x20009e98
 800ee5c:	3b9aca00 	.word	0x3b9aca00

0800ee60 <run_xrce_session>:
 800ee60:	b510      	push	{r4, lr}
 800ee62:	788c      	ldrb	r4, [r1, #2]
 800ee64:	b086      	sub	sp, #24
 800ee66:	2c01      	cmp	r4, #1
 800ee68:	f8ad 200e 	strh.w	r2, [sp, #14]
 800ee6c:	d00c      	beq.n	800ee88 <run_xrce_session+0x28>
 800ee6e:	4619      	mov	r1, r3
 800ee70:	2301      	movs	r3, #1
 800ee72:	9300      	str	r3, [sp, #0]
 800ee74:	f10d 020e 	add.w	r2, sp, #14
 800ee78:	f10d 0317 	add.w	r3, sp, #23
 800ee7c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ee80:	f001 fa26 	bl	80102d0 <uxr_run_session_until_all_status>
 800ee84:	b006      	add	sp, #24
 800ee86:	bd10      	pop	{r4, pc}
 800ee88:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ee8c:	f000 fe78 	bl	800fb80 <uxr_flash_output_streams>
 800ee90:	4620      	mov	r0, r4
 800ee92:	b006      	add	sp, #24
 800ee94:	bd10      	pop	{r4, pc}
 800ee96:	bf00      	nop

0800ee98 <convert_qos_profile>:
 800ee98:	b430      	push	{r4, r5}
 800ee9a:	7a0d      	ldrb	r5, [r1, #8]
 800ee9c:	780c      	ldrb	r4, [r1, #0]
 800ee9e:	7a4a      	ldrb	r2, [r1, #9]
 800eea0:	8889      	ldrh	r1, [r1, #4]
 800eea2:	8081      	strh	r1, [r0, #4]
 800eea4:	f1a5 0502 	sub.w	r5, r5, #2
 800eea8:	f1a4 0402 	sub.w	r4, r4, #2
 800eeac:	2a02      	cmp	r2, #2
 800eeae:	fab5 f585 	clz	r5, r5
 800eeb2:	fab4 f484 	clz	r4, r4
 800eeb6:	ea4f 1555 	mov.w	r5, r5, lsr #5
 800eeba:	ea4f 1454 	mov.w	r4, r4, lsr #5
 800eebe:	bf18      	it	ne
 800eec0:	2200      	movne	r2, #0
 800eec2:	7045      	strb	r5, [r0, #1]
 800eec4:	7084      	strb	r4, [r0, #2]
 800eec6:	7002      	strb	r2, [r0, #0]
 800eec8:	bc30      	pop	{r4, r5}
 800eeca:	4770      	bx	lr

0800eecc <generate_type_name>:
 800eecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eece:	2300      	movs	r3, #0
 800eed0:	700b      	strb	r3, [r1, #0]
 800eed2:	6803      	ldr	r3, [r0, #0]
 800eed4:	b087      	sub	sp, #28
 800eed6:	4614      	mov	r4, r2
 800eed8:	b1d3      	cbz	r3, 800ef10 <generate_type_name+0x44>
 800eeda:	4d0f      	ldr	r5, [pc, #60]	; (800ef18 <generate_type_name+0x4c>)
 800eedc:	462f      	mov	r7, r5
 800eede:	4a0f      	ldr	r2, [pc, #60]	; (800ef1c <generate_type_name+0x50>)
 800eee0:	4e0f      	ldr	r6, [pc, #60]	; (800ef20 <generate_type_name+0x54>)
 800eee2:	6840      	ldr	r0, [r0, #4]
 800eee4:	9004      	str	r0, [sp, #16]
 800eee6:	e9cd 6201 	strd	r6, r2, [sp, #4]
 800eeea:	4608      	mov	r0, r1
 800eeec:	9205      	str	r2, [sp, #20]
 800eeee:	9503      	str	r5, [sp, #12]
 800eef0:	4a0c      	ldr	r2, [pc, #48]	; (800ef24 <generate_type_name+0x58>)
 800eef2:	9700      	str	r7, [sp, #0]
 800eef4:	4621      	mov	r1, r4
 800eef6:	f008 f9fb 	bl	80172f0 <sniprintf>
 800eefa:	2800      	cmp	r0, #0
 800eefc:	db05      	blt.n	800ef0a <generate_type_name+0x3e>
 800eefe:	4284      	cmp	r4, r0
 800ef00:	bfd4      	ite	le
 800ef02:	2000      	movle	r0, #0
 800ef04:	2001      	movgt	r0, #1
 800ef06:	b007      	add	sp, #28
 800ef08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef0a:	2000      	movs	r0, #0
 800ef0c:	b007      	add	sp, #28
 800ef0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef10:	4b05      	ldr	r3, [pc, #20]	; (800ef28 <generate_type_name+0x5c>)
 800ef12:	4d01      	ldr	r5, [pc, #4]	; (800ef18 <generate_type_name+0x4c>)
 800ef14:	461f      	mov	r7, r3
 800ef16:	e7e2      	b.n	800eede <generate_type_name+0x12>
 800ef18:	08018924 	.word	0x08018924
 800ef1c:	08018938 	.word	0x08018938
 800ef20:	0801893c 	.word	0x0801893c
 800ef24:	08018928 	.word	0x08018928
 800ef28:	08018be0 	.word	0x08018be0

0800ef2c <generate_topic_name>:
 800ef2c:	b510      	push	{r4, lr}
 800ef2e:	b082      	sub	sp, #8
 800ef30:	4b09      	ldr	r3, [pc, #36]	; (800ef58 <generate_topic_name+0x2c>)
 800ef32:	9000      	str	r0, [sp, #0]
 800ef34:	4614      	mov	r4, r2
 800ef36:	4608      	mov	r0, r1
 800ef38:	4611      	mov	r1, r2
 800ef3a:	4a08      	ldr	r2, [pc, #32]	; (800ef5c <generate_topic_name+0x30>)
 800ef3c:	f008 f9d8 	bl	80172f0 <sniprintf>
 800ef40:	2800      	cmp	r0, #0
 800ef42:	db05      	blt.n	800ef50 <generate_topic_name+0x24>
 800ef44:	4284      	cmp	r4, r0
 800ef46:	bfd4      	ite	le
 800ef48:	2000      	movle	r0, #0
 800ef4a:	2001      	movgt	r0, #1
 800ef4c:	b002      	add	sp, #8
 800ef4e:	bd10      	pop	{r4, pc}
 800ef50:	2000      	movs	r0, #0
 800ef52:	b002      	add	sp, #8
 800ef54:	bd10      	pop	{r4, pc}
 800ef56:	bf00      	nop
 800ef58:	08018948 	.word	0x08018948
 800ef5c:	08018940 	.word	0x08018940

0800ef60 <is_uxrce_rmw_identifier_valid>:
 800ef60:	b510      	push	{r4, lr}
 800ef62:	4604      	mov	r4, r0
 800ef64:	b140      	cbz	r0, 800ef78 <is_uxrce_rmw_identifier_valid+0x18>
 800ef66:	f004 fcd7 	bl	8013918 <rmw_get_implementation_identifier>
 800ef6a:	4601      	mov	r1, r0
 800ef6c:	4620      	mov	r0, r4
 800ef6e:	f7f1 f937 	bl	80001e0 <strcmp>
 800ef72:	fab0 f080 	clz	r0, r0
 800ef76:	0940      	lsrs	r0, r0, #5
 800ef78:	bd10      	pop	{r4, pc}
 800ef7a:	bf00      	nop

0800ef7c <get_message_typesupport_handle>:
 800ef7c:	6883      	ldr	r3, [r0, #8]
 800ef7e:	4718      	bx	r3

0800ef80 <get_message_typesupport_handle_function>:
 800ef80:	b510      	push	{r4, lr}
 800ef82:	4604      	mov	r4, r0
 800ef84:	6800      	ldr	r0, [r0, #0]
 800ef86:	f7f1 f92b 	bl	80001e0 <strcmp>
 800ef8a:	2800      	cmp	r0, #0
 800ef8c:	bf0c      	ite	eq
 800ef8e:	4620      	moveq	r0, r4
 800ef90:	2000      	movne	r0, #0
 800ef92:	bd10      	pop	{r4, pc}

0800ef94 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 800ef94:	f000 b862 	b.w	800f05c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String>

0800ef98 <_String__max_serialized_size>:
 800ef98:	2000      	movs	r0, #0
 800ef9a:	4770      	bx	lr

0800ef9c <_String__cdr_serialize>:
 800ef9c:	b1c0      	cbz	r0, 800efd0 <_String__cdr_serialize+0x34>
 800ef9e:	b570      	push	{r4, r5, r6, lr}
 800efa0:	6806      	ldr	r6, [r0, #0]
 800efa2:	460d      	mov	r5, r1
 800efa4:	4604      	mov	r4, r0
 800efa6:	b156      	cbz	r6, 800efbe <_String__cdr_serialize+0x22>
 800efa8:	4630      	mov	r0, r6
 800efaa:	f7f1 f923 	bl	80001f4 <strlen>
 800efae:	4631      	mov	r1, r6
 800efb0:	6060      	str	r0, [r4, #4]
 800efb2:	1c42      	adds	r2, r0, #1
 800efb4:	4628      	mov	r0, r5
 800efb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800efba:	f000 b915 	b.w	800f1e8 <ucdr_serialize_sequence_char>
 800efbe:	4630      	mov	r0, r6
 800efc0:	6060      	str	r0, [r4, #4]
 800efc2:	4632      	mov	r2, r6
 800efc4:	4631      	mov	r1, r6
 800efc6:	4628      	mov	r0, r5
 800efc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800efcc:	f000 b90c 	b.w	800f1e8 <ucdr_serialize_sequence_char>
 800efd0:	4770      	bx	lr
 800efd2:	bf00      	nop

0800efd4 <get_serialized_size_std_msgs__msg__String>:
 800efd4:	b510      	push	{r4, lr}
 800efd6:	4604      	mov	r4, r0
 800efd8:	b130      	cbz	r0, 800efe8 <get_serialized_size_std_msgs__msg__String+0x14>
 800efda:	4608      	mov	r0, r1
 800efdc:	2104      	movs	r1, #4
 800efde:	f000 f897 	bl	800f110 <ucdr_alignment>
 800efe2:	6863      	ldr	r3, [r4, #4]
 800efe4:	3305      	adds	r3, #5
 800efe6:	4418      	add	r0, r3
 800efe8:	bd10      	pop	{r4, pc}
 800efea:	bf00      	nop

0800efec <_String__cdr_deserialize>:
 800efec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efee:	460c      	mov	r4, r1
 800eff0:	b083      	sub	sp, #12
 800eff2:	b1a1      	cbz	r1, 800f01e <_String__cdr_deserialize+0x32>
 800eff4:	688f      	ldr	r7, [r1, #8]
 800eff6:	6809      	ldr	r1, [r1, #0]
 800eff8:	ab01      	add	r3, sp, #4
 800effa:	463a      	mov	r2, r7
 800effc:	4606      	mov	r6, r0
 800effe:	f000 f905 	bl	800f20c <ucdr_deserialize_sequence_char>
 800f002:	9b01      	ldr	r3, [sp, #4]
 800f004:	4605      	mov	r5, r0
 800f006:	b920      	cbnz	r0, 800f012 <_String__cdr_deserialize+0x26>
 800f008:	429f      	cmp	r7, r3
 800f00a:	d30c      	bcc.n	800f026 <_String__cdr_deserialize+0x3a>
 800f00c:	4628      	mov	r0, r5
 800f00e:	b003      	add	sp, #12
 800f010:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f012:	b103      	cbz	r3, 800f016 <_String__cdr_deserialize+0x2a>
 800f014:	3b01      	subs	r3, #1
 800f016:	4628      	mov	r0, r5
 800f018:	6063      	str	r3, [r4, #4]
 800f01a:	b003      	add	sp, #12
 800f01c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f01e:	460d      	mov	r5, r1
 800f020:	4628      	mov	r0, r5
 800f022:	b003      	add	sp, #12
 800f024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f026:	2101      	movs	r1, #1
 800f028:	75b0      	strb	r0, [r6, #22]
 800f02a:	7571      	strb	r1, [r6, #21]
 800f02c:	6060      	str	r0, [r4, #4]
 800f02e:	4630      	mov	r0, r6
 800f030:	f000 f884 	bl	800f13c <ucdr_align_to>
 800f034:	4630      	mov	r0, r6
 800f036:	9901      	ldr	r1, [sp, #4]
 800f038:	f000 f8b6 	bl	800f1a8 <ucdr_advance_buffer>
 800f03c:	4628      	mov	r0, r5
 800f03e:	b003      	add	sp, #12
 800f040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f042:	bf00      	nop

0800f044 <_String__get_serialized_size>:
 800f044:	b510      	push	{r4, lr}
 800f046:	4604      	mov	r4, r0
 800f048:	b130      	cbz	r0, 800f058 <_String__get_serialized_size+0x14>
 800f04a:	2104      	movs	r1, #4
 800f04c:	2000      	movs	r0, #0
 800f04e:	f000 f85f 	bl	800f110 <ucdr_alignment>
 800f052:	6863      	ldr	r3, [r4, #4]
 800f054:	3305      	adds	r3, #5
 800f056:	4418      	add	r0, r3
 800f058:	bd10      	pop	{r4, pc}
 800f05a:	bf00      	nop

0800f05c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String>:
 800f05c:	4800      	ldr	r0, [pc, #0]	; (800f060 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String+0x4>)
 800f05e:	4770      	bx	lr
 800f060:	20000038 	.word	0x20000038

0800f064 <ucdr_check_buffer_available_for>:
 800f064:	7d83      	ldrb	r3, [r0, #22]
 800f066:	b93b      	cbnz	r3, 800f078 <ucdr_check_buffer_available_for+0x14>
 800f068:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800f06c:	4419      	add	r1, r3
 800f06e:	4288      	cmp	r0, r1
 800f070:	bf34      	ite	cc
 800f072:	2000      	movcc	r0, #0
 800f074:	2001      	movcs	r0, #1
 800f076:	4770      	bx	lr
 800f078:	2000      	movs	r0, #0
 800f07a:	4770      	bx	lr

0800f07c <ucdr_check_final_buffer_behavior>:
 800f07c:	7d83      	ldrb	r3, [r0, #22]
 800f07e:	b943      	cbnz	r3, 800f092 <ucdr_check_final_buffer_behavior+0x16>
 800f080:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800f084:	4291      	cmp	r1, r2
 800f086:	b510      	push	{r4, lr}
 800f088:	4604      	mov	r4, r0
 800f08a:	d205      	bcs.n	800f098 <ucdr_check_final_buffer_behavior+0x1c>
 800f08c:	2301      	movs	r3, #1
 800f08e:	4618      	mov	r0, r3
 800f090:	bd10      	pop	{r4, pc}
 800f092:	2300      	movs	r3, #0
 800f094:	4618      	mov	r0, r3
 800f096:	4770      	bx	lr
 800f098:	6982      	ldr	r2, [r0, #24]
 800f09a:	b13a      	cbz	r2, 800f0ac <ucdr_check_final_buffer_behavior+0x30>
 800f09c:	69c1      	ldr	r1, [r0, #28]
 800f09e:	4790      	blx	r2
 800f0a0:	f080 0301 	eor.w	r3, r0, #1
 800f0a4:	b2db      	uxtb	r3, r3
 800f0a6:	75a0      	strb	r0, [r4, #22]
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	bd10      	pop	{r4, pc}
 800f0ac:	2001      	movs	r0, #1
 800f0ae:	75a0      	strb	r0, [r4, #22]
 800f0b0:	e7fa      	b.n	800f0a8 <ucdr_check_final_buffer_behavior+0x2c>
 800f0b2:	bf00      	nop

0800f0b4 <ucdr_set_on_full_buffer_callback>:
 800f0b4:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800f0b8:	4770      	bx	lr
 800f0ba:	bf00      	nop

0800f0bc <ucdr_init_buffer_origin_offset_endian>:
 800f0bc:	b430      	push	{r4, r5}
 800f0be:	9c02      	ldr	r4, [sp, #8]
 800f0c0:	f89d 500c 	ldrb.w	r5, [sp, #12]
 800f0c4:	6001      	str	r1, [r0, #0]
 800f0c6:	440a      	add	r2, r1
 800f0c8:	60c3      	str	r3, [r0, #12]
 800f0ca:	4421      	add	r1, r4
 800f0cc:	441c      	add	r4, r3
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	6104      	str	r4, [r0, #16]
 800f0d2:	7505      	strb	r5, [r0, #20]
 800f0d4:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800f0d8:	bc30      	pop	{r4, r5}
 800f0da:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800f0de:	7543      	strb	r3, [r0, #21]
 800f0e0:	7583      	strb	r3, [r0, #22]
 800f0e2:	4770      	bx	lr

0800f0e4 <ucdr_init_buffer_origin_offset>:
 800f0e4:	b510      	push	{r4, lr}
 800f0e6:	b082      	sub	sp, #8
 800f0e8:	9c04      	ldr	r4, [sp, #16]
 800f0ea:	9400      	str	r4, [sp, #0]
 800f0ec:	2401      	movs	r4, #1
 800f0ee:	9401      	str	r4, [sp, #4]
 800f0f0:	f7ff ffe4 	bl	800f0bc <ucdr_init_buffer_origin_offset_endian>
 800f0f4:	b002      	add	sp, #8
 800f0f6:	bd10      	pop	{r4, pc}

0800f0f8 <ucdr_init_buffer_origin>:
 800f0f8:	b510      	push	{r4, lr}
 800f0fa:	b082      	sub	sp, #8
 800f0fc:	2400      	movs	r4, #0
 800f0fe:	9400      	str	r4, [sp, #0]
 800f100:	f7ff fff0 	bl	800f0e4 <ucdr_init_buffer_origin_offset>
 800f104:	b002      	add	sp, #8
 800f106:	bd10      	pop	{r4, pc}

0800f108 <ucdr_init_buffer>:
 800f108:	2300      	movs	r3, #0
 800f10a:	f7ff bff5 	b.w	800f0f8 <ucdr_init_buffer_origin>
 800f10e:	bf00      	nop

0800f110 <ucdr_alignment>:
 800f110:	fbb0 f3f1 	udiv	r3, r0, r1
 800f114:	fb03 0011 	mls	r0, r3, r1, r0
 800f118:	1a08      	subs	r0, r1, r0
 800f11a:	3901      	subs	r1, #1
 800f11c:	4008      	ands	r0, r1
 800f11e:	4770      	bx	lr

0800f120 <ucdr_buffer_alignment>:
 800f120:	7d43      	ldrb	r3, [r0, #21]
 800f122:	428b      	cmp	r3, r1
 800f124:	d208      	bcs.n	800f138 <ucdr_buffer_alignment+0x18>
 800f126:	6903      	ldr	r3, [r0, #16]
 800f128:	fbb3 f0f1 	udiv	r0, r3, r1
 800f12c:	fb01 3010 	mls	r0, r1, r0, r3
 800f130:	1a08      	subs	r0, r1, r0
 800f132:	3901      	subs	r1, #1
 800f134:	4008      	ands	r0, r1
 800f136:	4770      	bx	lr
 800f138:	2000      	movs	r0, #0
 800f13a:	4770      	bx	lr

0800f13c <ucdr_align_to>:
 800f13c:	b570      	push	{r4, r5, r6, lr}
 800f13e:	4604      	mov	r4, r0
 800f140:	460e      	mov	r6, r1
 800f142:	f7ff ffed 	bl	800f120 <ucdr_buffer_alignment>
 800f146:	68a5      	ldr	r5, [r4, #8]
 800f148:	6863      	ldr	r3, [r4, #4]
 800f14a:	6922      	ldr	r2, [r4, #16]
 800f14c:	7566      	strb	r6, [r4, #21]
 800f14e:	4405      	add	r5, r0
 800f150:	42ab      	cmp	r3, r5
 800f152:	4410      	add	r0, r2
 800f154:	bf28      	it	cs
 800f156:	462b      	movcs	r3, r5
 800f158:	6120      	str	r0, [r4, #16]
 800f15a:	60a3      	str	r3, [r4, #8]
 800f15c:	bd70      	pop	{r4, r5, r6, pc}
 800f15e:	bf00      	nop

0800f160 <ucdr_buffer_length>:
 800f160:	6882      	ldr	r2, [r0, #8]
 800f162:	6800      	ldr	r0, [r0, #0]
 800f164:	1a10      	subs	r0, r2, r0
 800f166:	4770      	bx	lr

0800f168 <ucdr_buffer_remaining>:
 800f168:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800f16c:	1a10      	subs	r0, r2, r0
 800f16e:	4770      	bx	lr

0800f170 <ucdr_check_final_buffer_behavior_array>:
 800f170:	b538      	push	{r3, r4, r5, lr}
 800f172:	7d83      	ldrb	r3, [r0, #22]
 800f174:	b963      	cbnz	r3, 800f190 <ucdr_check_final_buffer_behavior_array+0x20>
 800f176:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800f17a:	429a      	cmp	r2, r3
 800f17c:	4604      	mov	r4, r0
 800f17e:	460d      	mov	r5, r1
 800f180:	d308      	bcc.n	800f194 <ucdr_check_final_buffer_behavior_array+0x24>
 800f182:	b139      	cbz	r1, 800f194 <ucdr_check_final_buffer_behavior_array+0x24>
 800f184:	6983      	ldr	r3, [r0, #24]
 800f186:	b163      	cbz	r3, 800f1a2 <ucdr_check_final_buffer_behavior_array+0x32>
 800f188:	69c1      	ldr	r1, [r0, #28]
 800f18a:	4798      	blx	r3
 800f18c:	75a0      	strb	r0, [r4, #22]
 800f18e:	b108      	cbz	r0, 800f194 <ucdr_check_final_buffer_behavior_array+0x24>
 800f190:	2000      	movs	r0, #0
 800f192:	bd38      	pop	{r3, r4, r5, pc}
 800f194:	4620      	mov	r0, r4
 800f196:	f7ff ffe7 	bl	800f168 <ucdr_buffer_remaining>
 800f19a:	42a8      	cmp	r0, r5
 800f19c:	bf28      	it	cs
 800f19e:	4628      	movcs	r0, r5
 800f1a0:	bd38      	pop	{r3, r4, r5, pc}
 800f1a2:	2301      	movs	r3, #1
 800f1a4:	7583      	strb	r3, [r0, #22]
 800f1a6:	e7f3      	b.n	800f190 <ucdr_check_final_buffer_behavior_array+0x20>

0800f1a8 <ucdr_advance_buffer>:
 800f1a8:	b538      	push	{r3, r4, r5, lr}
 800f1aa:	4604      	mov	r4, r0
 800f1ac:	460d      	mov	r5, r1
 800f1ae:	f7ff ff59 	bl	800f064 <ucdr_check_buffer_available_for>
 800f1b2:	b178      	cbz	r0, 800f1d4 <ucdr_advance_buffer+0x2c>
 800f1b4:	68a3      	ldr	r3, [r4, #8]
 800f1b6:	6921      	ldr	r1, [r4, #16]
 800f1b8:	442b      	add	r3, r5
 800f1ba:	60a3      	str	r3, [r4, #8]
 800f1bc:	2301      	movs	r3, #1
 800f1be:	4429      	add	r1, r5
 800f1c0:	7563      	strb	r3, [r4, #21]
 800f1c2:	6121      	str	r1, [r4, #16]
 800f1c4:	bd38      	pop	{r3, r4, r5, pc}
 800f1c6:	68a2      	ldr	r2, [r4, #8]
 800f1c8:	6923      	ldr	r3, [r4, #16]
 800f1ca:	4402      	add	r2, r0
 800f1cc:	4403      	add	r3, r0
 800f1ce:	1a2d      	subs	r5, r5, r0
 800f1d0:	60a2      	str	r2, [r4, #8]
 800f1d2:	6123      	str	r3, [r4, #16]
 800f1d4:	2201      	movs	r2, #1
 800f1d6:	4629      	mov	r1, r5
 800f1d8:	4620      	mov	r0, r4
 800f1da:	f7ff ffc9 	bl	800f170 <ucdr_check_final_buffer_behavior_array>
 800f1de:	2800      	cmp	r0, #0
 800f1e0:	d1f1      	bne.n	800f1c6 <ucdr_advance_buffer+0x1e>
 800f1e2:	2301      	movs	r3, #1
 800f1e4:	7563      	strb	r3, [r4, #21]
 800f1e6:	bd38      	pop	{r3, r4, r5, pc}

0800f1e8 <ucdr_serialize_sequence_char>:
 800f1e8:	b570      	push	{r4, r5, r6, lr}
 800f1ea:	460e      	mov	r6, r1
 800f1ec:	4615      	mov	r5, r2
 800f1ee:	7d01      	ldrb	r1, [r0, #20]
 800f1f0:	4604      	mov	r4, r0
 800f1f2:	f005 fbe5 	bl	80149c0 <ucdr_serialize_endian_uint32_t>
 800f1f6:	b90d      	cbnz	r5, 800f1fc <ucdr_serialize_sequence_char+0x14>
 800f1f8:	2001      	movs	r0, #1
 800f1fa:	bd70      	pop	{r4, r5, r6, pc}
 800f1fc:	7d21      	ldrb	r1, [r4, #20]
 800f1fe:	462b      	mov	r3, r5
 800f200:	4632      	mov	r2, r6
 800f202:	4620      	mov	r0, r4
 800f204:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f208:	f004 bfd0 	b.w	80141ac <ucdr_serialize_endian_array_char>

0800f20c <ucdr_deserialize_sequence_char>:
 800f20c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f210:	461d      	mov	r5, r3
 800f212:	4616      	mov	r6, r2
 800f214:	460f      	mov	r7, r1
 800f216:	461a      	mov	r2, r3
 800f218:	7d01      	ldrb	r1, [r0, #20]
 800f21a:	4604      	mov	r4, r0
 800f21c:	f005 fcf8 	bl	8014c10 <ucdr_deserialize_endian_uint32_t>
 800f220:	682b      	ldr	r3, [r5, #0]
 800f222:	429e      	cmp	r6, r3
 800f224:	bf3c      	itt	cc
 800f226:	2201      	movcc	r2, #1
 800f228:	75a2      	strbcc	r2, [r4, #22]
 800f22a:	b913      	cbnz	r3, 800f232 <ucdr_deserialize_sequence_char+0x26>
 800f22c:	2001      	movs	r0, #1
 800f22e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f232:	7d21      	ldrb	r1, [r4, #20]
 800f234:	463a      	mov	r2, r7
 800f236:	4620      	mov	r0, r4
 800f238:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f23c:	f004 bfe8 	b.w	8014210 <ucdr_deserialize_endian_array_char>

0800f240 <ucdr_serialize_sequence_uint8_t>:
 800f240:	b570      	push	{r4, r5, r6, lr}
 800f242:	460e      	mov	r6, r1
 800f244:	4615      	mov	r5, r2
 800f246:	7d01      	ldrb	r1, [r0, #20]
 800f248:	4604      	mov	r4, r0
 800f24a:	f005 fbb9 	bl	80149c0 <ucdr_serialize_endian_uint32_t>
 800f24e:	b90d      	cbnz	r5, 800f254 <ucdr_serialize_sequence_uint8_t+0x14>
 800f250:	2001      	movs	r0, #1
 800f252:	bd70      	pop	{r4, r5, r6, pc}
 800f254:	7d21      	ldrb	r1, [r4, #20]
 800f256:	462b      	mov	r3, r5
 800f258:	4632      	mov	r2, r6
 800f25a:	4620      	mov	r0, r4
 800f25c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f260:	f005 b83a 	b.w	80142d8 <ucdr_serialize_endian_array_uint8_t>

0800f264 <ucdr_deserialize_sequence_uint8_t>:
 800f264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f268:	461d      	mov	r5, r3
 800f26a:	4616      	mov	r6, r2
 800f26c:	460f      	mov	r7, r1
 800f26e:	461a      	mov	r2, r3
 800f270:	7d01      	ldrb	r1, [r0, #20]
 800f272:	4604      	mov	r4, r0
 800f274:	f005 fccc 	bl	8014c10 <ucdr_deserialize_endian_uint32_t>
 800f278:	682b      	ldr	r3, [r5, #0]
 800f27a:	429e      	cmp	r6, r3
 800f27c:	bf3c      	itt	cc
 800f27e:	2201      	movcc	r2, #1
 800f280:	75a2      	strbcc	r2, [r4, #22]
 800f282:	b913      	cbnz	r3, 800f28a <ucdr_deserialize_sequence_uint8_t+0x26>
 800f284:	2001      	movs	r0, #1
 800f286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f28a:	7d21      	ldrb	r1, [r4, #20]
 800f28c:	463a      	mov	r2, r7
 800f28e:	4620      	mov	r0, r4
 800f290:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f294:	f005 b884 	b.w	80143a0 <ucdr_deserialize_endian_array_uint8_t>

0800f298 <uxr_buffer_delete_entity>:
 800f298:	b530      	push	{r4, r5, lr}
 800f29a:	b08f      	sub	sp, #60	; 0x3c
 800f29c:	2403      	movs	r4, #3
 800f29e:	2500      	movs	r5, #0
 800f2a0:	e9cd 4500 	strd	r4, r5, [sp]
 800f2a4:	9202      	str	r2, [sp, #8]
 800f2a6:	ab06      	add	r3, sp, #24
 800f2a8:	2204      	movs	r2, #4
 800f2aa:	9103      	str	r1, [sp, #12]
 800f2ac:	4604      	mov	r4, r0
 800f2ae:	f001 fa4b 	bl	8010748 <uxr_prepare_stream_to_write_submessage>
 800f2b2:	b918      	cbnz	r0, 800f2bc <uxr_buffer_delete_entity+0x24>
 800f2b4:	4604      	mov	r4, r0
 800f2b6:	4620      	mov	r0, r4
 800f2b8:	b00f      	add	sp, #60	; 0x3c
 800f2ba:	bd30      	pop	{r4, r5, pc}
 800f2bc:	9902      	ldr	r1, [sp, #8]
 800f2be:	aa05      	add	r2, sp, #20
 800f2c0:	4620      	mov	r0, r4
 800f2c2:	f001 fb7b 	bl	80109bc <uxr_init_base_object_request>
 800f2c6:	a905      	add	r1, sp, #20
 800f2c8:	4604      	mov	r4, r0
 800f2ca:	a806      	add	r0, sp, #24
 800f2cc:	f002 fdb6 	bl	8011e3c <uxr_serialize_DELETE_Payload>
 800f2d0:	4620      	mov	r0, r4
 800f2d2:	b00f      	add	sp, #60	; 0x3c
 800f2d4:	bd30      	pop	{r4, r5, pc}
 800f2d6:	bf00      	nop

0800f2d8 <uxr_common_create_entity>:
 800f2d8:	b530      	push	{r4, r5, lr}
 800f2da:	f3c2 4507 	ubfx	r5, r2, #16, #8
 800f2de:	b08d      	sub	sp, #52	; 0x34
 800f2e0:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800f2e4:	2d01      	cmp	r5, #1
 800f2e6:	bf0c      	ite	eq
 800f2e8:	f003 0201 	andeq.w	r2, r3, #1
 800f2ec:	2200      	movne	r2, #0
 800f2ee:	330e      	adds	r3, #14
 800f2f0:	4604      	mov	r4, r0
 800f2f2:	441a      	add	r2, r3
 800f2f4:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 800f2f8:	9001      	str	r0, [sp, #4]
 800f2fa:	2101      	movs	r1, #1
 800f2fc:	9100      	str	r1, [sp, #0]
 800f2fe:	b292      	uxth	r2, r2
 800f300:	9903      	ldr	r1, [sp, #12]
 800f302:	ab04      	add	r3, sp, #16
 800f304:	4620      	mov	r0, r4
 800f306:	f001 fa1f 	bl	8010748 <uxr_prepare_stream_to_write_submessage>
 800f30a:	b918      	cbnz	r0, 800f314 <uxr_common_create_entity+0x3c>
 800f30c:	4604      	mov	r4, r0
 800f30e:	4620      	mov	r0, r4
 800f310:	b00d      	add	sp, #52	; 0x34
 800f312:	bd30      	pop	{r4, r5, pc}
 800f314:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f316:	9902      	ldr	r1, [sp, #8]
 800f318:	4620      	mov	r0, r4
 800f31a:	f001 fb4f 	bl	80109bc <uxr_init_base_object_request>
 800f31e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f320:	4604      	mov	r4, r0
 800f322:	a804      	add	r0, sp, #16
 800f324:	f002 fcde 	bl	8011ce4 <uxr_serialize_CREATE_Payload>
 800f328:	4620      	mov	r0, r4
 800f32a:	b00d      	add	sp, #52	; 0x34
 800f32c:	bd30      	pop	{r4, r5, pc}
 800f32e:	bf00      	nop

0800f330 <uxr_buffer_create_participant_bin>:
 800f330:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f332:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 800f336:	ac11      	add	r4, sp, #68	; 0x44
 800f338:	9103      	str	r1, [sp, #12]
 800f33a:	9e9c      	ldr	r6, [sp, #624]	; 0x270
 800f33c:	f8a4 3210 	strh.w	r3, [r4, #528]	; 0x210
 800f340:	2103      	movs	r1, #3
 800f342:	7221      	strb	r1, [r4, #8]
 800f344:	2301      	movs	r3, #1
 800f346:	2100      	movs	r1, #0
 800f348:	7123      	strb	r3, [r4, #4]
 800f34a:	f89d 7274 	ldrb.w	r7, [sp, #628]	; 0x274
 800f34e:	9202      	str	r2, [sp, #8]
 800f350:	4605      	mov	r5, r0
 800f352:	f88d 1014 	strb.w	r1, [sp, #20]
 800f356:	b1ce      	cbz	r6, 800f38c <uxr_buffer_create_participant_bin+0x5c>
 800f358:	f88d 301c 	strb.w	r3, [sp, #28]
 800f35c:	9608      	str	r6, [sp, #32]
 800f35e:	a809      	add	r0, sp, #36	; 0x24
 800f360:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f364:	a915      	add	r1, sp, #84	; 0x54
 800f366:	f7ff fecf 	bl	800f108 <ucdr_init_buffer>
 800f36a:	a905      	add	r1, sp, #20
 800f36c:	a809      	add	r0, sp, #36	; 0x24
 800f36e:	f002 f881 	bl	8011474 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800f372:	980d      	ldr	r0, [sp, #52]	; 0x34
 800f374:	9401      	str	r4, [sp, #4]
 800f376:	b283      	uxth	r3, r0
 800f378:	9700      	str	r7, [sp, #0]
 800f37a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f37e:	60e0      	str	r0, [r4, #12]
 800f380:	4628      	mov	r0, r5
 800f382:	f7ff ffa9 	bl	800f2d8 <uxr_common_create_entity>
 800f386:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
 800f38a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f38c:	f88d 601c 	strb.w	r6, [sp, #28]
 800f390:	e7e5      	b.n	800f35e <uxr_buffer_create_participant_bin+0x2e>
 800f392:	bf00      	nop

0800f394 <uxr_buffer_create_topic_bin>:
 800f394:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f396:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800f39a:	ac13      	add	r4, sp, #76	; 0x4c
 800f39c:	4605      	mov	r5, r0
 800f39e:	9105      	str	r1, [sp, #20]
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	a997      	add	r1, sp, #604	; 0x25c
 800f3a4:	2602      	movs	r6, #2
 800f3a6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f3aa:	f89d 7280 	ldrb.w	r7, [sp, #640]	; 0x280
 800f3ae:	f88d 6050 	strb.w	r6, [sp, #80]	; 0x50
 800f3b2:	9e9f      	ldr	r6, [sp, #636]	; 0x27c
 800f3b4:	f000 f994 	bl	800f6e0 <uxr_object_id_to_raw>
 800f3b8:	9a9e      	ldr	r2, [sp, #632]	; 0x278
 800f3ba:	9206      	str	r2, [sp, #24]
 800f3bc:	2303      	movs	r3, #3
 800f3be:	2101      	movs	r1, #1
 800f3c0:	7223      	strb	r3, [r4, #8]
 800f3c2:	a80b      	add	r0, sp, #44	; 0x2c
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f3ca:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 800f3ce:	a917      	add	r1, sp, #92	; 0x5c
 800f3d0:	f88d 301c 	strb.w	r3, [sp, #28]
 800f3d4:	960a      	str	r6, [sp, #40]	; 0x28
 800f3d6:	f7ff fe97 	bl	800f108 <ucdr_init_buffer>
 800f3da:	a906      	add	r1, sp, #24
 800f3dc:	a80b      	add	r0, sp, #44	; 0x2c
 800f3de:	f002 f86b 	bl	80114b8 <uxr_serialize_OBJK_Topic_Binary>
 800f3e2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800f3e4:	9401      	str	r4, [sp, #4]
 800f3e6:	9700      	str	r7, [sp, #0]
 800f3e8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f3ec:	4628      	mov	r0, r5
 800f3ee:	b2b3      	uxth	r3, r6
 800f3f0:	60e6      	str	r6, [r4, #12]
 800f3f2:	f7ff ff71 	bl	800f2d8 <uxr_common_create_entity>
 800f3f6:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800f3fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f3fc <uxr_buffer_create_publisher_bin>:
 800f3fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f3fe:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 800f402:	ac0e      	add	r4, sp, #56	; 0x38
 800f404:	4605      	mov	r5, r0
 800f406:	9105      	str	r1, [sp, #20]
 800f408:	4618      	mov	r0, r3
 800f40a:	2603      	movs	r6, #3
 800f40c:	a992      	add	r1, sp, #584	; 0x248
 800f40e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f412:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 800f416:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 800f41a:	f000 f961 	bl	800f6e0 <uxr_object_id_to_raw>
 800f41e:	2300      	movs	r3, #0
 800f420:	a806      	add	r0, sp, #24
 800f422:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f426:	a912      	add	r1, sp, #72	; 0x48
 800f428:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800f42c:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800f430:	7226      	strb	r6, [r4, #8]
 800f432:	f7ff fe69 	bl	800f108 <ucdr_init_buffer>
 800f436:	a993      	add	r1, sp, #588	; 0x24c
 800f438:	a806      	add	r0, sp, #24
 800f43a:	f002 f8f1 	bl	8011620 <uxr_serialize_OBJK_Publisher_Binary>
 800f43e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800f440:	9700      	str	r7, [sp, #0]
 800f442:	9401      	str	r4, [sp, #4]
 800f444:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f448:	4628      	mov	r0, r5
 800f44a:	b2b3      	uxth	r3, r6
 800f44c:	60e6      	str	r6, [r4, #12]
 800f44e:	f7ff ff43 	bl	800f2d8 <uxr_common_create_entity>
 800f452:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 800f456:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f458 <uxr_buffer_create_subscriber_bin>:
 800f458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f45a:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 800f45e:	ac0e      	add	r4, sp, #56	; 0x38
 800f460:	4605      	mov	r5, r0
 800f462:	9105      	str	r1, [sp, #20]
 800f464:	4618      	mov	r0, r3
 800f466:	a992      	add	r1, sp, #584	; 0x248
 800f468:	2604      	movs	r6, #4
 800f46a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f46e:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 800f472:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 800f476:	f000 f933 	bl	800f6e0 <uxr_object_id_to_raw>
 800f47a:	2103      	movs	r1, #3
 800f47c:	2300      	movs	r3, #0
 800f47e:	a806      	add	r0, sp, #24
 800f480:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f484:	7221      	strb	r1, [r4, #8]
 800f486:	a912      	add	r1, sp, #72	; 0x48
 800f488:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800f48c:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800f490:	f7ff fe3a 	bl	800f108 <ucdr_init_buffer>
 800f494:	a993      	add	r1, sp, #588	; 0x24c
 800f496:	a806      	add	r0, sp, #24
 800f498:	f002 f972 	bl	8011780 <uxr_serialize_OBJK_Subscriber_Binary>
 800f49c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800f49e:	9700      	str	r7, [sp, #0]
 800f4a0:	9401      	str	r4, [sp, #4]
 800f4a2:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f4a6:	4628      	mov	r0, r5
 800f4a8:	b2b3      	uxth	r3, r6
 800f4aa:	60e6      	str	r6, [r4, #12]
 800f4ac:	f7ff ff14 	bl	800f2d8 <uxr_common_create_entity>
 800f4b0:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 800f4b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4b6:	bf00      	nop

0800f4b8 <uxr_buffer_create_datawriter_bin>:
 800f4b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4bc:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800f4c0:	ac1d      	add	r4, sp, #116	; 0x74
 800f4c2:	2505      	movs	r5, #5
 800f4c4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f4c8:	9105      	str	r1, [sp, #20]
 800f4ca:	4606      	mov	r6, r0
 800f4cc:	a9a1      	add	r1, sp, #644	; 0x284
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	7125      	strb	r5, [r4, #4]
 800f4d2:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 800f4d6:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 800f4da:	2703      	movs	r7, #3
 800f4dc:	f000 f900 	bl	800f6e0 <uxr_object_id_to_raw>
 800f4e0:	a90e      	add	r1, sp, #56	; 0x38
 800f4e2:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 800f4e4:	7227      	strb	r7, [r4, #8]
 800f4e6:	f000 f8fb 	bl	800f6e0 <uxr_object_id_to_raw>
 800f4ea:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 800f4ee:	f89d 12a5 	ldrb.w	r1, [sp, #677]	; 0x2a5
 800f4f2:	3d00      	subs	r5, #0
 800f4f4:	f04f 0300 	mov.w	r3, #0
 800f4f8:	bf18      	it	ne
 800f4fa:	2501      	movne	r5, #1
 800f4fc:	2201      	movs	r2, #1
 800f4fe:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 800f502:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 800f506:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800f50a:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800f50e:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800f512:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800f516:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800f51a:	bb89      	cbnz	r1, 800f580 <uxr_buffer_create_datawriter_bin+0xc8>
 800f51c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800f520:	f04f 0e23 	mov.w	lr, #35	; 0x23
 800f524:	f04f 0c13 	mov.w	ip, #19
 800f528:	250b      	movs	r5, #11
 800f52a:	2221      	movs	r2, #33	; 0x21
 800f52c:	2111      	movs	r1, #17
 800f52e:	2009      	movs	r0, #9
 800f530:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 800f534:	b923      	cbnz	r3, 800f540 <uxr_buffer_create_datawriter_bin+0x88>
 800f536:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 800f53a:	4672      	mov	r2, lr
 800f53c:	4661      	mov	r1, ip
 800f53e:	4628      	mov	r0, r5
 800f540:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 800f544:	2b01      	cmp	r3, #1
 800f546:	d025      	beq.n	800f594 <uxr_buffer_create_datawriter_bin+0xdc>
 800f548:	2b03      	cmp	r3, #3
 800f54a:	d029      	beq.n	800f5a0 <uxr_buffer_create_datawriter_bin+0xe8>
 800f54c:	b32b      	cbz	r3, 800f59a <uxr_buffer_create_datawriter_bin+0xe2>
 800f54e:	a806      	add	r0, sp, #24
 800f550:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f554:	a921      	add	r1, sp, #132	; 0x84
 800f556:	f7ff fdd7 	bl	800f108 <ucdr_init_buffer>
 800f55a:	a90e      	add	r1, sp, #56	; 0x38
 800f55c:	a806      	add	r0, sp, #24
 800f55e:	f002 f9c1 	bl	80118e4 <uxr_serialize_OBJK_DataWriter_Binary>
 800f562:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f564:	9401      	str	r4, [sp, #4]
 800f566:	b283      	uxth	r3, r0
 800f568:	f8cd 8000 	str.w	r8, [sp]
 800f56c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f570:	60e0      	str	r0, [r4, #12]
 800f572:	4630      	mov	r0, r6
 800f574:	f7ff feb0 	bl	800f2d8 <uxr_common_create_entity>
 800f578:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800f57c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f580:	f04f 0e22 	mov.w	lr, #34	; 0x22
 800f584:	f04f 0c12 	mov.w	ip, #18
 800f588:	250a      	movs	r5, #10
 800f58a:	2220      	movs	r2, #32
 800f58c:	2110      	movs	r1, #16
 800f58e:	2008      	movs	r0, #8
 800f590:	2702      	movs	r7, #2
 800f592:	e7cd      	b.n	800f530 <uxr_buffer_create_datawriter_bin+0x78>
 800f594:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800f598:	e7d9      	b.n	800f54e <uxr_buffer_create_datawriter_bin+0x96>
 800f59a:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800f59e:	e7d6      	b.n	800f54e <uxr_buffer_create_datawriter_bin+0x96>
 800f5a0:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800f5a4:	e7d3      	b.n	800f54e <uxr_buffer_create_datawriter_bin+0x96>
 800f5a6:	bf00      	nop

0800f5a8 <uxr_buffer_create_datareader_bin>:
 800f5a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5ac:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800f5b0:	ac1f      	add	r4, sp, #124	; 0x7c
 800f5b2:	2506      	movs	r5, #6
 800f5b4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800f5b8:	9105      	str	r1, [sp, #20]
 800f5ba:	4606      	mov	r6, r0
 800f5bc:	a9a3      	add	r1, sp, #652	; 0x28c
 800f5be:	4618      	mov	r0, r3
 800f5c0:	7125      	strb	r5, [r4, #4]
 800f5c2:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	; 0x2b0
 800f5c6:	f89d 82b4 	ldrb.w	r8, [sp, #692]	; 0x2b4
 800f5ca:	2703      	movs	r7, #3
 800f5cc:	f000 f888 	bl	800f6e0 <uxr_object_id_to_raw>
 800f5d0:	a90e      	add	r1, sp, #56	; 0x38
 800f5d2:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 800f5d4:	7227      	strb	r7, [r4, #8]
 800f5d6:	f000 f883 	bl	800f6e0 <uxr_object_id_to_raw>
 800f5da:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 800f5de:	f89d 12ad 	ldrb.w	r1, [sp, #685]	; 0x2ad
 800f5e2:	3d00      	subs	r5, #0
 800f5e4:	f04f 0300 	mov.w	r3, #0
 800f5e8:	bf18      	it	ne
 800f5ea:	2501      	movne	r5, #1
 800f5ec:	2201      	movs	r2, #1
 800f5ee:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 800f5f2:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 800f5f6:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 800f5fa:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800f5fe:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800f602:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800f606:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800f60a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800f60e:	bb89      	cbnz	r1, 800f674 <uxr_buffer_create_datareader_bin+0xcc>
 800f610:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800f614:	f04f 0e23 	mov.w	lr, #35	; 0x23
 800f618:	f04f 0c13 	mov.w	ip, #19
 800f61c:	250b      	movs	r5, #11
 800f61e:	2221      	movs	r2, #33	; 0x21
 800f620:	2111      	movs	r1, #17
 800f622:	2009      	movs	r0, #9
 800f624:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 800f628:	b923      	cbnz	r3, 800f634 <uxr_buffer_create_datareader_bin+0x8c>
 800f62a:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 800f62e:	4672      	mov	r2, lr
 800f630:	4661      	mov	r1, ip
 800f632:	4628      	mov	r0, r5
 800f634:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 800f638:	2b01      	cmp	r3, #1
 800f63a:	d025      	beq.n	800f688 <uxr_buffer_create_datareader_bin+0xe0>
 800f63c:	2b03      	cmp	r3, #3
 800f63e:	d029      	beq.n	800f694 <uxr_buffer_create_datareader_bin+0xec>
 800f640:	b32b      	cbz	r3, 800f68e <uxr_buffer_create_datareader_bin+0xe6>
 800f642:	a806      	add	r0, sp, #24
 800f644:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f648:	a923      	add	r1, sp, #140	; 0x8c
 800f64a:	f7ff fd5d 	bl	800f108 <ucdr_init_buffer>
 800f64e:	a90e      	add	r1, sp, #56	; 0x38
 800f650:	a806      	add	r0, sp, #24
 800f652:	f002 f90b 	bl	801186c <uxr_serialize_OBJK_DataReader_Binary>
 800f656:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f658:	9401      	str	r4, [sp, #4]
 800f65a:	b283      	uxth	r3, r0
 800f65c:	f8cd 8000 	str.w	r8, [sp]
 800f660:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800f664:	60e0      	str	r0, [r4, #12]
 800f666:	4630      	mov	r0, r6
 800f668:	f7ff fe36 	bl	800f2d8 <uxr_common_create_entity>
 800f66c:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800f670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f674:	f04f 0e22 	mov.w	lr, #34	; 0x22
 800f678:	f04f 0c12 	mov.w	ip, #18
 800f67c:	250a      	movs	r5, #10
 800f67e:	2220      	movs	r2, #32
 800f680:	2110      	movs	r1, #16
 800f682:	2008      	movs	r0, #8
 800f684:	2702      	movs	r7, #2
 800f686:	e7cd      	b.n	800f624 <uxr_buffer_create_datareader_bin+0x7c>
 800f688:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800f68c:	e7d9      	b.n	800f642 <uxr_buffer_create_datareader_bin+0x9a>
 800f68e:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800f692:	e7d6      	b.n	800f642 <uxr_buffer_create_datareader_bin+0x9a>
 800f694:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800f698:	e7d3      	b.n	800f642 <uxr_buffer_create_datareader_bin+0x9a>
 800f69a:	bf00      	nop

0800f69c <uxr_object_id>:
 800f69c:	b082      	sub	sp, #8
 800f69e:	2300      	movs	r3, #0
 800f6a0:	f88d 1006 	strb.w	r1, [sp, #6]
 800f6a4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f6a8:	f360 030f 	bfi	r3, r0, #0, #16
 800f6ac:	f362 431f 	bfi	r3, r2, #16, #16
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	b002      	add	sp, #8
 800f6b4:	4770      	bx	lr
 800f6b6:	bf00      	nop

0800f6b8 <uxr_object_id_from_raw>:
 800f6b8:	7843      	ldrb	r3, [r0, #1]
 800f6ba:	7801      	ldrb	r1, [r0, #0]
 800f6bc:	b082      	sub	sp, #8
 800f6be:	f003 000f 	and.w	r0, r3, #15
 800f6c2:	f88d 0006 	strb.w	r0, [sp, #6]
 800f6c6:	091b      	lsrs	r3, r3, #4
 800f6c8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800f6cc:	2200      	movs	r2, #0
 800f6ce:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800f6d2:	f363 020f 	bfi	r2, r3, #0, #16
 800f6d6:	f361 421f 	bfi	r2, r1, #16, #16
 800f6da:	4610      	mov	r0, r2
 800f6dc:	b002      	add	sp, #8
 800f6de:	4770      	bx	lr

0800f6e0 <uxr_object_id_to_raw>:
 800f6e0:	4602      	mov	r2, r0
 800f6e2:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800f6e6:	b082      	sub	sp, #8
 800f6e8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800f6ec:	f3c2 120b 	ubfx	r2, r2, #4, #12
 800f6f0:	700a      	strb	r2, [r1, #0]
 800f6f2:	704b      	strb	r3, [r1, #1]
 800f6f4:	b002      	add	sp, #8
 800f6f6:	4770      	bx	lr

0800f6f8 <uxr_buffer_request_data>:
 800f6f8:	b530      	push	{r4, r5, lr}
 800f6fa:	b095      	sub	sp, #84	; 0x54
 800f6fc:	4604      	mov	r4, r0
 800f6fe:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800f700:	9105      	str	r1, [sp, #20]
 800f702:	2d00      	cmp	r5, #0
 800f704:	bf14      	ite	ne
 800f706:	2101      	movne	r1, #1
 800f708:	2100      	moveq	r1, #0
 800f70a:	9204      	str	r2, [sp, #16]
 800f70c:	f04f 0200 	mov.w	r2, #0
 800f710:	9303      	str	r3, [sp, #12]
 800f712:	f88d 301c 	strb.w	r3, [sp, #28]
 800f716:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 800f71a:	f88d 201d 	strb.w	r2, [sp, #29]
 800f71e:	f88d 201e 	strb.w	r2, [sp, #30]
 800f722:	d021      	beq.n	800f768 <uxr_buffer_request_data+0x70>
 800f724:	686a      	ldr	r2, [r5, #4]
 800f726:	682b      	ldr	r3, [r5, #0]
 800f728:	f8cd 202a 	str.w	r2, [sp, #42]	; 0x2a
 800f72c:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 800f730:	2210      	movs	r2, #16
 800f732:	2000      	movs	r0, #0
 800f734:	2108      	movs	r1, #8
 800f736:	e9cd 1000 	strd	r1, r0, [sp]
 800f73a:	ab0c      	add	r3, sp, #48	; 0x30
 800f73c:	9905      	ldr	r1, [sp, #20]
 800f73e:	4620      	mov	r0, r4
 800f740:	f001 f802 	bl	8010748 <uxr_prepare_stream_to_write_submessage>
 800f744:	b918      	cbnz	r0, 800f74e <uxr_buffer_request_data+0x56>
 800f746:	4604      	mov	r4, r0
 800f748:	4620      	mov	r0, r4
 800f74a:	b015      	add	sp, #84	; 0x54
 800f74c:	bd30      	pop	{r4, r5, pc}
 800f74e:	9904      	ldr	r1, [sp, #16]
 800f750:	aa06      	add	r2, sp, #24
 800f752:	4620      	mov	r0, r4
 800f754:	f001 f932 	bl	80109bc <uxr_init_base_object_request>
 800f758:	a906      	add	r1, sp, #24
 800f75a:	4604      	mov	r4, r0
 800f75c:	a80c      	add	r0, sp, #48	; 0x30
 800f75e:	f002 fc17 	bl	8011f90 <uxr_serialize_READ_DATA_Payload>
 800f762:	4620      	mov	r0, r4
 800f764:	b015      	add	sp, #84	; 0x54
 800f766:	bd30      	pop	{r4, r5, pc}
 800f768:	2208      	movs	r2, #8
 800f76a:	e7e2      	b.n	800f732 <uxr_buffer_request_data+0x3a>

0800f76c <uxr_buffer_cancel_data>:
 800f76c:	b530      	push	{r4, r5, lr}
 800f76e:	b095      	sub	sp, #84	; 0x54
 800f770:	2400      	movs	r4, #0
 800f772:	2308      	movs	r3, #8
 800f774:	e9cd 4201 	strd	r4, r2, [sp, #4]
 800f778:	9300      	str	r3, [sp, #0]
 800f77a:	9205      	str	r2, [sp, #20]
 800f77c:	2501      	movs	r5, #1
 800f77e:	ab0c      	add	r3, sp, #48	; 0x30
 800f780:	2210      	movs	r2, #16
 800f782:	f8ad 401c 	strh.w	r4, [sp, #28]
 800f786:	f88d 401e 	strb.w	r4, [sp, #30]
 800f78a:	f8cd 4026 	str.w	r4, [sp, #38]	; 0x26
 800f78e:	f8cd 402a 	str.w	r4, [sp, #42]	; 0x2a
 800f792:	9103      	str	r1, [sp, #12]
 800f794:	4604      	mov	r4, r0
 800f796:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 800f79a:	f000 ffd5 	bl	8010748 <uxr_prepare_stream_to_write_submessage>
 800f79e:	b918      	cbnz	r0, 800f7a8 <uxr_buffer_cancel_data+0x3c>
 800f7a0:	4604      	mov	r4, r0
 800f7a2:	4620      	mov	r0, r4
 800f7a4:	b015      	add	sp, #84	; 0x54
 800f7a6:	bd30      	pop	{r4, r5, pc}
 800f7a8:	9905      	ldr	r1, [sp, #20]
 800f7aa:	aa06      	add	r2, sp, #24
 800f7ac:	4620      	mov	r0, r4
 800f7ae:	f001 f905 	bl	80109bc <uxr_init_base_object_request>
 800f7b2:	a906      	add	r1, sp, #24
 800f7b4:	4604      	mov	r4, r0
 800f7b6:	a80c      	add	r0, sp, #48	; 0x30
 800f7b8:	f002 fbea 	bl	8011f90 <uxr_serialize_READ_DATA_Payload>
 800f7bc:	4620      	mov	r0, r4
 800f7be:	b015      	add	sp, #84	; 0x54
 800f7c0:	bd30      	pop	{r4, r5, pc}
 800f7c2:	bf00      	nop

0800f7c4 <read_submessage_format>:
 800f7c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f7c8:	b095      	sub	sp, #84	; 0x54
 800f7ca:	f8bd 9078 	ldrh.w	r9, [sp, #120]	; 0x78
 800f7ce:	b113      	cbz	r3, 800f7d6 <read_submessage_format+0x12>
 800f7d0:	b015      	add	sp, #84	; 0x54
 800f7d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f7d6:	460c      	mov	r4, r1
 800f7d8:	4616      	mov	r6, r2
 800f7da:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800f7de:	461d      	mov	r5, r3
 800f7e0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800f7e2:	9304      	str	r3, [sp, #16]
 800f7e4:	1a52      	subs	r2, r2, r1
 800f7e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f7e8:	9305      	str	r3, [sp, #20]
 800f7ea:	4607      	mov	r7, r0
 800f7ec:	a80c      	add	r0, sp, #48	; 0x30
 800f7ee:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 800f7f2:	f7ff fc89 	bl	800f108 <ucdr_init_buffer>
 800f7f6:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800f7fa:	a80c      	add	r0, sp, #48	; 0x30
 800f7fc:	f7ff fc5a 	bl	800f0b4 <ucdr_set_on_full_buffer_callback>
 800f800:	69e3      	ldr	r3, [r4, #28]
 800f802:	b193      	cbz	r3, 800f82a <read_submessage_format+0x66>
 800f804:	f1b8 0f07 	cmp.w	r8, #7
 800f808:	751d      	strb	r5, [r3, #20]
 800f80a:	d03e      	beq.n	800f88a <read_submessage_format+0xc6>
 800f80c:	f1b8 0f08 	cmp.w	r8, #8
 800f810:	d02c      	beq.n	800f86c <read_submessage_format+0xa8>
 800f812:	f1b8 0f06 	cmp.w	r8, #6
 800f816:	d011      	beq.n	800f83c <read_submessage_format+0x78>
 800f818:	2201      	movs	r2, #1
 800f81a:	751a      	strb	r2, [r3, #20]
 800f81c:	4631      	mov	r1, r6
 800f81e:	4620      	mov	r0, r4
 800f820:	f7ff fcc2 	bl	800f1a8 <ucdr_advance_buffer>
 800f824:	b015      	add	sp, #84	; 0x54
 800f826:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f82a:	f1b8 0f07 	cmp.w	r8, #7
 800f82e:	d02c      	beq.n	800f88a <read_submessage_format+0xc6>
 800f830:	f1b8 0f08 	cmp.w	r8, #8
 800f834:	d01a      	beq.n	800f86c <read_submessage_format+0xa8>
 800f836:	f1b8 0f06 	cmp.w	r8, #6
 800f83a:	d1ef      	bne.n	800f81c <read_submessage_format+0x58>
 800f83c:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 800f840:	b18d      	cbz	r5, 800f866 <read_submessage_format+0xa2>
 800f842:	2306      	movs	r3, #6
 800f844:	f88d 3016 	strb.w	r3, [sp, #22]
 800f848:	aa0c      	add	r2, sp, #48	; 0x30
 800f84a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f84e:	9302      	str	r3, [sp, #8]
 800f850:	9200      	str	r2, [sp, #0]
 800f852:	9b04      	ldr	r3, [sp, #16]
 800f854:	9905      	ldr	r1, [sp, #20]
 800f856:	9601      	str	r6, [sp, #4]
 800f858:	464a      	mov	r2, r9
 800f85a:	4638      	mov	r0, r7
 800f85c:	47a8      	blx	r5
 800f85e:	2301      	movs	r3, #1
 800f860:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 800f864:	69e3      	ldr	r3, [r4, #28]
 800f866:	2b00      	cmp	r3, #0
 800f868:	d1d6      	bne.n	800f818 <read_submessage_format+0x54>
 800f86a:	e7d7      	b.n	800f81c <read_submessage_format+0x58>
 800f86c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800f870:	2a00      	cmp	r2, #0
 800f872:	d0f8      	beq.n	800f866 <read_submessage_format+0xa2>
 800f874:	a906      	add	r1, sp, #24
 800f876:	a80c      	add	r0, sp, #48	; 0x30
 800f878:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800f87a:	f002 fc29 	bl	80120d0 <uxr_deserialize_SampleIdentity>
 800f87e:	2800      	cmp	r0, #0
 800f880:	d13c      	bne.n	800f8fc <read_submessage_format+0x138>
 800f882:	69e3      	ldr	r3, [r4, #28]
 800f884:	2b00      	cmp	r3, #0
 800f886:	d1c7      	bne.n	800f818 <read_submessage_format+0x54>
 800f888:	e7c8      	b.n	800f81c <read_submessage_format+0x58>
 800f88a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800f88e:	b132      	cbz	r2, 800f89e <read_submessage_format+0xda>
 800f890:	a906      	add	r1, sp, #24
 800f892:	a80c      	add	r0, sp, #48	; 0x30
 800f894:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800f896:	f002 f8ff 	bl	8011a98 <uxr_deserialize_BaseObjectRequest>
 800f89a:	b930      	cbnz	r0, 800f8aa <read_submessage_format+0xe6>
 800f89c:	69e3      	ldr	r3, [r4, #28]
 800f89e:	68a2      	ldr	r2, [r4, #8]
 800f8a0:	4432      	add	r2, r6
 800f8a2:	60a2      	str	r2, [r4, #8]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d1b7      	bne.n	800f818 <read_submessage_format+0x54>
 800f8a8:	e7b8      	b.n	800f81c <read_submessage_format+0x58>
 800f8aa:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800f8ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f8b0:	1a52      	subs	r2, r2, r1
 800f8b2:	a80c      	add	r0, sp, #48	; 0x30
 800f8b4:	1aed      	subs	r5, r5, r3
 800f8b6:	f7ff fc27 	bl	800f108 <ucdr_init_buffer>
 800f8ba:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800f8be:	a80c      	add	r0, sp, #48	; 0x30
 800f8c0:	f7ff fbf8 	bl	800f0b4 <ucdr_set_on_full_buffer_callback>
 800f8c4:	4435      	add	r5, r6
 800f8c6:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800f8ca:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800f8ce:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800f8d2:	9002      	str	r0, [sp, #8]
 800f8d4:	2207      	movs	r2, #7
 800f8d6:	f88d 2016 	strb.w	r2, [sp, #22]
 800f8da:	b2ad      	uxth	r5, r5
 800f8dc:	aa0c      	add	r2, sp, #48	; 0x30
 800f8de:	9200      	str	r2, [sp, #0]
 800f8e0:	9501      	str	r5, [sp, #4]
 800f8e2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800f8e6:	b29b      	uxth	r3, r3
 800f8e8:	9905      	ldr	r1, [sp, #20]
 800f8ea:	f8d7 50ac 	ldr.w	r5, [r7, #172]	; 0xac
 800f8ee:	464a      	mov	r2, r9
 800f8f0:	4638      	mov	r0, r7
 800f8f2:	47a8      	blx	r5
 800f8f4:	2301      	movs	r3, #1
 800f8f6:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 800f8fa:	e7cf      	b.n	800f89c <read_submessage_format+0xd8>
 800f8fc:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800f900:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f902:	1a52      	subs	r2, r2, r1
 800f904:	a80c      	add	r0, sp, #48	; 0x30
 800f906:	1aed      	subs	r5, r5, r3
 800f908:	f7ff fbfe 	bl	800f108 <ucdr_init_buffer>
 800f90c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800f910:	a80c      	add	r0, sp, #48	; 0x30
 800f912:	f7ff fbcf 	bl	800f0b4 <ucdr_set_on_full_buffer_callback>
 800f916:	4435      	add	r5, r6
 800f918:	2308      	movs	r3, #8
 800f91a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800f91e:	f88d 3016 	strb.w	r3, [sp, #22]
 800f922:	b2ad      	uxth	r5, r5
 800f924:	ab0c      	add	r3, sp, #48	; 0x30
 800f926:	9300      	str	r3, [sp, #0]
 800f928:	9002      	str	r0, [sp, #8]
 800f92a:	9501      	str	r5, [sp, #4]
 800f92c:	ab06      	add	r3, sp, #24
 800f92e:	9905      	ldr	r1, [sp, #20]
 800f930:	f8d7 50a4 	ldr.w	r5, [r7, #164]	; 0xa4
 800f934:	464a      	mov	r2, r9
 800f936:	4638      	mov	r0, r7
 800f938:	47a8      	blx	r5
 800f93a:	2301      	movs	r3, #1
 800f93c:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 800f940:	e79f      	b.n	800f882 <read_submessage_format+0xbe>
 800f942:	bf00      	nop

0800f944 <on_get_fragmentation_info>:
 800f944:	b500      	push	{lr}
 800f946:	b08b      	sub	sp, #44	; 0x2c
 800f948:	4601      	mov	r1, r0
 800f94a:	2204      	movs	r2, #4
 800f94c:	a802      	add	r0, sp, #8
 800f94e:	f7ff fbdb 	bl	800f108 <ucdr_init_buffer>
 800f952:	f10d 0305 	add.w	r3, sp, #5
 800f956:	a802      	add	r0, sp, #8
 800f958:	f10d 0206 	add.w	r2, sp, #6
 800f95c:	a901      	add	r1, sp, #4
 800f95e:	f001 f9b1 	bl	8010cc4 <uxr_read_submessage_header>
 800f962:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f966:	2b0d      	cmp	r3, #13
 800f968:	d003      	beq.n	800f972 <on_get_fragmentation_info+0x2e>
 800f96a:	2000      	movs	r0, #0
 800f96c:	b00b      	add	sp, #44	; 0x2c
 800f96e:	f85d fb04 	ldr.w	pc, [sp], #4
 800f972:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f976:	f013 0f02 	tst.w	r3, #2
 800f97a:	bf14      	ite	ne
 800f97c:	2002      	movne	r0, #2
 800f97e:	2001      	moveq	r0, #1
 800f980:	b00b      	add	sp, #44	; 0x2c
 800f982:	f85d fb04 	ldr.w	pc, [sp], #4
 800f986:	bf00      	nop

0800f988 <read_submessage_get_info>:
 800f988:	b570      	push	{r4, r5, r6, lr}
 800f98a:	2500      	movs	r5, #0
 800f98c:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 800f990:	4604      	mov	r4, r0
 800f992:	f44f 7224 	mov.w	r2, #656	; 0x290
 800f996:	460e      	mov	r6, r1
 800f998:	a810      	add	r0, sp, #64	; 0x40
 800f99a:	4629      	mov	r1, r5
 800f99c:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800f9a0:	f007 fe0c 	bl	80175bc <memset>
 800f9a4:	a903      	add	r1, sp, #12
 800f9a6:	4630      	mov	r0, r6
 800f9a8:	f002 fa34 	bl	8011e14 <uxr_deserialize_GET_INFO_Payload>
 800f9ac:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800f9b0:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800f9b4:	4620      	mov	r0, r4
 800f9b6:	f000 fff9 	bl	80109ac <uxr_session_header_offset>
 800f9ba:	462b      	mov	r3, r5
 800f9bc:	9000      	str	r0, [sp, #0]
 800f9be:	a905      	add	r1, sp, #20
 800f9c0:	a808      	add	r0, sp, #32
 800f9c2:	220c      	movs	r2, #12
 800f9c4:	f7ff fb8e 	bl	800f0e4 <ucdr_init_buffer_origin_offset>
 800f9c8:	a910      	add	r1, sp, #64	; 0x40
 800f9ca:	a808      	add	r0, sp, #32
 800f9cc:	f002 fa94 	bl	8011ef8 <uxr_serialize_INFO_Payload>
 800f9d0:	9b08      	ldr	r3, [sp, #32]
 800f9d2:	462a      	mov	r2, r5
 800f9d4:	4629      	mov	r1, r5
 800f9d6:	4620      	mov	r0, r4
 800f9d8:	f000 ff90 	bl	80108fc <uxr_stamp_session_header>
 800f9dc:	a808      	add	r0, sp, #32
 800f9de:	f7ff fbbf 	bl	800f160 <ucdr_buffer_length>
 800f9e2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800f9e4:	4602      	mov	r2, r0
 800f9e6:	a905      	add	r1, sp, #20
 800f9e8:	e9d3 0400 	ldrd	r0, r4, [r3]
 800f9ec:	47a0      	blx	r4
 800f9ee:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 800f9f2:	bd70      	pop	{r4, r5, r6, pc}

0800f9f4 <write_submessage_acknack.isra.0>:
 800f9f4:	b570      	push	{r4, r5, r6, lr}
 800f9f6:	b092      	sub	sp, #72	; 0x48
 800f9f8:	4605      	mov	r5, r0
 800f9fa:	460e      	mov	r6, r1
 800f9fc:	4614      	mov	r4, r2
 800f9fe:	f000 ffd5 	bl	80109ac <uxr_session_header_offset>
 800fa02:	a905      	add	r1, sp, #20
 800fa04:	9000      	str	r0, [sp, #0]
 800fa06:	2300      	movs	r3, #0
 800fa08:	a80a      	add	r0, sp, #40	; 0x28
 800fa0a:	2211      	movs	r2, #17
 800fa0c:	f7ff fb6a 	bl	800f0e4 <ucdr_init_buffer_origin_offset>
 800fa10:	2218      	movs	r2, #24
 800fa12:	fb02 5404 	mla	r4, r2, r4, r5
 800fa16:	2300      	movs	r3, #0
 800fa18:	2205      	movs	r2, #5
 800fa1a:	3450      	adds	r4, #80	; 0x50
 800fa1c:	a80a      	add	r0, sp, #40	; 0x28
 800fa1e:	210a      	movs	r1, #10
 800fa20:	f001 f936 	bl	8010c90 <uxr_buffer_submessage_header>
 800fa24:	a903      	add	r1, sp, #12
 800fa26:	4620      	mov	r0, r4
 800fa28:	f005 fe4a 	bl	80156c0 <uxr_compute_acknack>
 800fa2c:	a903      	add	r1, sp, #12
 800fa2e:	ba43      	rev16	r3, r0
 800fa30:	a80a      	add	r0, sp, #40	; 0x28
 800fa32:	f8ad 300e 	strh.w	r3, [sp, #14]
 800fa36:	f88d 6010 	strb.w	r6, [sp, #16]
 800fa3a:	f002 facd 	bl	8011fd8 <uxr_serialize_ACKNACK_Payload>
 800fa3e:	2200      	movs	r2, #0
 800fa40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa42:	4611      	mov	r1, r2
 800fa44:	4628      	mov	r0, r5
 800fa46:	f000 ff59 	bl	80108fc <uxr_stamp_session_header>
 800fa4a:	a80a      	add	r0, sp, #40	; 0x28
 800fa4c:	f7ff fb88 	bl	800f160 <ucdr_buffer_length>
 800fa50:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800fa52:	4602      	mov	r2, r0
 800fa54:	a905      	add	r1, sp, #20
 800fa56:	e9d3 0400 	ldrd	r0, r4, [r3]
 800fa5a:	47a0      	blx	r4
 800fa5c:	b012      	add	sp, #72	; 0x48
 800fa5e:	bd70      	pop	{r4, r5, r6, pc}

0800fa60 <uxr_init_session>:
 800fa60:	b5d0      	push	{r4, r6, r7, lr}
 800fa62:	2300      	movs	r3, #0
 800fa64:	2600      	movs	r6, #0
 800fa66:	2700      	movs	r7, #0
 800fa68:	e9c0 6726 	strd	r6, r7, [r0, #152]	; 0x98
 800fa6c:	4604      	mov	r4, r0
 800fa6e:	6701      	str	r1, [r0, #112]	; 0x70
 800fa70:	e9c0 331d 	strd	r3, r3, [r0, #116]	; 0x74
 800fa74:	e9c0 331f 	strd	r3, r3, [r0, #124]	; 0x7c
 800fa78:	e9c0 3321 	strd	r3, r3, [r0, #132]	; 0x84
 800fa7c:	e9c0 3323 	strd	r3, r3, [r0, #140]	; 0x8c
 800fa80:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
 800fa84:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 800fa88:	2181      	movs	r1, #129	; 0x81
 800fa8a:	f000 fea1 	bl	80107d0 <uxr_init_session_info>
 800fa8e:	f104 0008 	add.w	r0, r4, #8
 800fa92:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
 800fa96:	f001 b817 	b.w	8010ac8 <uxr_init_stream_storage>
 800fa9a:	bf00      	nop

0800fa9c <uxr_set_status_callback>:
 800fa9c:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 800faa0:	4770      	bx	lr
 800faa2:	bf00      	nop

0800faa4 <uxr_set_topic_callback>:
 800faa4:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 800faa8:	4770      	bx	lr
 800faaa:	bf00      	nop

0800faac <uxr_set_request_callback>:
 800faac:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 800fab0:	4770      	bx	lr
 800fab2:	bf00      	nop

0800fab4 <uxr_set_reply_callback>:
 800fab4:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 800fab8:	4770      	bx	lr
 800faba:	bf00      	nop

0800fabc <uxr_create_output_best_effort_stream>:
 800fabc:	b510      	push	{r4, lr}
 800fabe:	b084      	sub	sp, #16
 800fac0:	e9cd 2100 	strd	r2, r1, [sp]
 800fac4:	4604      	mov	r4, r0
 800fac6:	f000 ff71 	bl	80109ac <uxr_session_header_offset>
 800faca:	e9dd 2100 	ldrd	r2, r1, [sp]
 800face:	4603      	mov	r3, r0
 800fad0:	f104 0008 	add.w	r0, r4, #8
 800fad4:	b004      	add	sp, #16
 800fad6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fada:	f001 b83f 	b.w	8010b5c <uxr_add_output_best_effort_buffer>
 800fade:	bf00      	nop

0800fae0 <uxr_create_output_reliable_stream>:
 800fae0:	b530      	push	{r4, r5, lr}
 800fae2:	b089      	sub	sp, #36	; 0x24
 800fae4:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800fae8:	9303      	str	r3, [sp, #12]
 800faea:	4604      	mov	r4, r0
 800faec:	f000 ff5e 	bl	80109ac <uxr_session_header_offset>
 800faf0:	4605      	mov	r5, r0
 800faf2:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800faf6:	9905      	ldr	r1, [sp, #20]
 800faf8:	9500      	str	r5, [sp, #0]
 800fafa:	f104 0008 	add.w	r0, r4, #8
 800fafe:	f001 f83f 	bl	8010b80 <uxr_add_output_reliable_buffer>
 800fb02:	2200      	movs	r2, #0
 800fb04:	b2c3      	uxtb	r3, r0
 800fb06:	f363 0207 	bfi	r2, r3, #0, #8
 800fb0a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800fb0e:	f363 220f 	bfi	r2, r3, #8, #8
 800fb12:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800fb16:	f363 4217 	bfi	r2, r3, #16, #8
 800fb1a:	0e03      	lsrs	r3, r0, #24
 800fb1c:	f363 621f 	bfi	r2, r3, #24, #8
 800fb20:	4610      	mov	r0, r2
 800fb22:	b009      	add	sp, #36	; 0x24
 800fb24:	bd30      	pop	{r4, r5, pc}
 800fb26:	bf00      	nop

0800fb28 <uxr_create_input_best_effort_stream>:
 800fb28:	b082      	sub	sp, #8
 800fb2a:	3008      	adds	r0, #8
 800fb2c:	b002      	add	sp, #8
 800fb2e:	f001 b841 	b.w	8010bb4 <uxr_add_input_best_effort_buffer>
 800fb32:	bf00      	nop

0800fb34 <uxr_create_input_reliable_stream>:
 800fb34:	b510      	push	{r4, lr}
 800fb36:	b084      	sub	sp, #16
 800fb38:	4c0b      	ldr	r4, [pc, #44]	; (800fb68 <uxr_create_input_reliable_stream+0x34>)
 800fb3a:	9400      	str	r4, [sp, #0]
 800fb3c:	3008      	adds	r0, #8
 800fb3e:	f001 f84f 	bl	8010be0 <uxr_add_input_reliable_buffer>
 800fb42:	2200      	movs	r2, #0
 800fb44:	b2c3      	uxtb	r3, r0
 800fb46:	f363 0207 	bfi	r2, r3, #0, #8
 800fb4a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800fb4e:	f363 220f 	bfi	r2, r3, #8, #8
 800fb52:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800fb56:	f363 4217 	bfi	r2, r3, #16, #8
 800fb5a:	0e03      	lsrs	r3, r0, #24
 800fb5c:	f363 621f 	bfi	r2, r3, #24, #8
 800fb60:	4610      	mov	r0, r2
 800fb62:	b004      	add	sp, #16
 800fb64:	bd10      	pop	{r4, pc}
 800fb66:	bf00      	nop
 800fb68:	0800f945 	.word	0x0800f945

0800fb6c <uxr_epoch_nanos>:
 800fb6c:	b510      	push	{r4, lr}
 800fb6e:	4604      	mov	r4, r0
 800fb70:	f001 f8f0 	bl	8010d54 <uxr_nanos>
 800fb74:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 800fb78:	1ac0      	subs	r0, r0, r3
 800fb7a:	eb61 0102 	sbc.w	r1, r1, r2
 800fb7e:	bd10      	pop	{r4, pc}

0800fb80 <uxr_flash_output_streams>:
 800fb80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb84:	7e03      	ldrb	r3, [r0, #24]
 800fb86:	b084      	sub	sp, #16
 800fb88:	4604      	mov	r4, r0
 800fb8a:	b1fb      	cbz	r3, 800fbcc <uxr_flash_output_streams+0x4c>
 800fb8c:	f04f 0900 	mov.w	r9, #0
 800fb90:	4648      	mov	r0, r9
 800fb92:	f10d 0802 	add.w	r8, sp, #2
 800fb96:	af03      	add	r7, sp, #12
 800fb98:	ae02      	add	r6, sp, #8
 800fb9a:	2201      	movs	r2, #1
 800fb9c:	4611      	mov	r1, r2
 800fb9e:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800fba2:	f000 ff3b 	bl	8010a1c <uxr_stream_id>
 800fba6:	3508      	adds	r5, #8
 800fba8:	4684      	mov	ip, r0
 800fbaa:	4643      	mov	r3, r8
 800fbac:	4628      	mov	r0, r5
 800fbae:	463a      	mov	r2, r7
 800fbb0:	4631      	mov	r1, r6
 800fbb2:	f8cd c004 	str.w	ip, [sp, #4]
 800fbb6:	f005 fe0b 	bl	80157d0 <uxr_prepare_best_effort_buffer_to_send>
 800fbba:	2800      	cmp	r0, #0
 800fbbc:	d13d      	bne.n	800fc3a <uxr_flash_output_streams+0xba>
 800fbbe:	7e23      	ldrb	r3, [r4, #24]
 800fbc0:	f109 0901 	add.w	r9, r9, #1
 800fbc4:	fa5f f089 	uxtb.w	r0, r9
 800fbc8:	4283      	cmp	r3, r0
 800fbca:	d8e6      	bhi.n	800fb9a <uxr_flash_output_streams+0x1a>
 800fbcc:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800fbd0:	b383      	cbz	r3, 800fc34 <uxr_flash_output_streams+0xb4>
 800fbd2:	f04f 0900 	mov.w	r9, #0
 800fbd6:	4648      	mov	r0, r9
 800fbd8:	f10d 0802 	add.w	r8, sp, #2
 800fbdc:	af03      	add	r7, sp, #12
 800fbde:	ae02      	add	r6, sp, #8
 800fbe0:	2201      	movs	r2, #1
 800fbe2:	2102      	movs	r1, #2
 800fbe4:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800fbe8:	f000 ff18 	bl	8010a1c <uxr_stream_id>
 800fbec:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800fbf0:	3520      	adds	r5, #32
 800fbf2:	9001      	str	r0, [sp, #4]
 800fbf4:	e00c      	b.n	800fc10 <uxr_flash_output_streams+0x90>
 800fbf6:	9b02      	ldr	r3, [sp, #8]
 800fbf8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800fbfc:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800fc00:	f000 fe7c 	bl	80108fc <uxr_stamp_session_header>
 800fc04:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800fc06:	9a03      	ldr	r2, [sp, #12]
 800fc08:	9902      	ldr	r1, [sp, #8]
 800fc0a:	e9d3 0a00 	ldrd	r0, sl, [r3]
 800fc0e:	47d0      	blx	sl
 800fc10:	4643      	mov	r3, r8
 800fc12:	463a      	mov	r2, r7
 800fc14:	4631      	mov	r1, r6
 800fc16:	4628      	mov	r0, r5
 800fc18:	f005 ffe2 	bl	8015be0 <uxr_prepare_next_reliable_buffer_to_send>
 800fc1c:	4603      	mov	r3, r0
 800fc1e:	4620      	mov	r0, r4
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d1e8      	bne.n	800fbf6 <uxr_flash_output_streams+0x76>
 800fc24:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800fc28:	f109 0901 	add.w	r9, r9, #1
 800fc2c:	fa5f f089 	uxtb.w	r0, r9
 800fc30:	4283      	cmp	r3, r0
 800fc32:	d8d5      	bhi.n	800fbe0 <uxr_flash_output_streams+0x60>
 800fc34:	b004      	add	sp, #16
 800fc36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc3a:	9b02      	ldr	r3, [sp, #8]
 800fc3c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800fc40:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800fc44:	4620      	mov	r0, r4
 800fc46:	f000 fe59 	bl	80108fc <uxr_stamp_session_header>
 800fc4a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800fc4c:	9a03      	ldr	r2, [sp, #12]
 800fc4e:	9902      	ldr	r1, [sp, #8]
 800fc50:	e9d3 0500 	ldrd	r0, r5, [r3]
 800fc54:	47a8      	blx	r5
 800fc56:	f109 0901 	add.w	r9, r9, #1
 800fc5a:	7e23      	ldrb	r3, [r4, #24]
 800fc5c:	fa5f f089 	uxtb.w	r0, r9
 800fc60:	4283      	cmp	r3, r0
 800fc62:	d89a      	bhi.n	800fb9a <uxr_flash_output_streams+0x1a>
 800fc64:	e7b2      	b.n	800fbcc <uxr_flash_output_streams+0x4c>
 800fc66:	bf00      	nop

0800fc68 <read_submessage_info>:
 800fc68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc6c:	460d      	mov	r5, r1
 800fc6e:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800fc72:	4669      	mov	r1, sp
 800fc74:	4607      	mov	r7, r0
 800fc76:	4628      	mov	r0, r5
 800fc78:	f001 ffd2 	bl	8011c20 <uxr_deserialize_BaseObjectReply>
 800fc7c:	a902      	add	r1, sp, #8
 800fc7e:	4604      	mov	r4, r0
 800fc80:	4628      	mov	r0, r5
 800fc82:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800fc86:	f004 fbd3 	bl	8014430 <ucdr_deserialize_bool>
 800fc8a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800fc8e:	4004      	ands	r4, r0
 800fc90:	b2e4      	uxtb	r4, r4
 800fc92:	b95b      	cbnz	r3, 800fcac <read_submessage_info+0x44>
 800fc94:	a987      	add	r1, sp, #540	; 0x21c
 800fc96:	4628      	mov	r0, r5
 800fc98:	f004 fbca 	bl	8014430 <ucdr_deserialize_bool>
 800fc9c:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 800fca0:	4606      	mov	r6, r0
 800fca2:	b94b      	cbnz	r3, 800fcb8 <read_submessage_info+0x50>
 800fca4:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800fca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcac:	a903      	add	r1, sp, #12
 800fcae:	4628      	mov	r0, r5
 800fcb0:	f001 fe44 	bl	801193c <uxr_deserialize_ObjectVariant>
 800fcb4:	4004      	ands	r4, r0
 800fcb6:	e7ed      	b.n	800fc94 <read_submessage_info+0x2c>
 800fcb8:	a988      	add	r1, sp, #544	; 0x220
 800fcba:	4628      	mov	r0, r5
 800fcbc:	f004 fbe8 	bl	8014490 <ucdr_deserialize_uint8_t>
 800fcc0:	4234      	tst	r4, r6
 800fcc2:	d0ef      	beq.n	800fca4 <read_submessage_info+0x3c>
 800fcc4:	2800      	cmp	r0, #0
 800fcc6:	d0ed      	beq.n	800fca4 <read_submessage_info+0x3c>
 800fcc8:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 800fccc:	2b0d      	cmp	r3, #13
 800fcce:	d1e9      	bne.n	800fca4 <read_submessage_info+0x3c>
 800fcd0:	4628      	mov	r0, r5
 800fcd2:	a98a      	add	r1, sp, #552	; 0x228
 800fcd4:	f005 f982 	bl	8014fdc <ucdr_deserialize_int16_t>
 800fcd8:	b140      	cbz	r0, 800fcec <read_submessage_info+0x84>
 800fcda:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	dd07      	ble.n	800fcf2 <read_submessage_info+0x8a>
 800fce2:	f1b8 0f00 	cmp.w	r8, #0
 800fce6:	bf14      	ite	ne
 800fce8:	2001      	movne	r0, #1
 800fcea:	2002      	moveq	r0, #2
 800fcec:	f887 00b5 	strb.w	r0, [r7, #181]	; 0xb5
 800fcf0:	e7d8      	b.n	800fca4 <read_submessage_info+0x3c>
 800fcf2:	2000      	movs	r0, #0
 800fcf4:	e7fa      	b.n	800fcec <read_submessage_info+0x84>
 800fcf6:	bf00      	nop

0800fcf8 <read_submessage_list>:
 800fcf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fcfc:	b098      	sub	sp, #96	; 0x60
 800fcfe:	f8df 9304 	ldr.w	r9, [pc, #772]	; 8010004 <read_submessage_list+0x30c>
 800fd02:	920b      	str	r2, [sp, #44]	; 0x2c
 800fd04:	4604      	mov	r4, r0
 800fd06:	4688      	mov	r8, r1
 800fd08:	f10d 0337 	add.w	r3, sp, #55	; 0x37
 800fd0c:	aa0e      	add	r2, sp, #56	; 0x38
 800fd0e:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 800fd12:	4640      	mov	r0, r8
 800fd14:	f000 ffd6 	bl	8010cc4 <uxr_read_submessage_header>
 800fd18:	2800      	cmp	r0, #0
 800fd1a:	f000 813d 	beq.w	800ff98 <read_submessage_list+0x2a0>
 800fd1e:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 800fd22:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 800fd26:	3b02      	subs	r3, #2
 800fd28:	2b0d      	cmp	r3, #13
 800fd2a:	d8ed      	bhi.n	800fd08 <read_submessage_list+0x10>
 800fd2c:	a101      	add	r1, pc, #4	; (adr r1, 800fd34 <read_submessage_list+0x3c>)
 800fd2e:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fd32:	bf00      	nop
 800fd34:	0800ff8f 	.word	0x0800ff8f
 800fd38:	0800fd09 	.word	0x0800fd09
 800fd3c:	0800ff7f 	.word	0x0800ff7f
 800fd40:	0800ff23 	.word	0x0800ff23
 800fd44:	0800ff19 	.word	0x0800ff19
 800fd48:	0800fd09 	.word	0x0800fd09
 800fd4c:	0800fd09 	.word	0x0800fd09
 800fd50:	0800fe7b 	.word	0x0800fe7b
 800fd54:	0800fe0d 	.word	0x0800fe0d
 800fd58:	0800fdcb 	.word	0x0800fdcb
 800fd5c:	0800fd09 	.word	0x0800fd09
 800fd60:	0800fd09 	.word	0x0800fd09
 800fd64:	0800fd09 	.word	0x0800fd09
 800fd68:	0800fd6d 	.word	0x0800fd6d
 800fd6c:	a912      	add	r1, sp, #72	; 0x48
 800fd6e:	4640      	mov	r0, r8
 800fd70:	f002 f982 	bl	8012078 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800fd74:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 800fd78:	2d00      	cmp	r5, #0
 800fd7a:	f000 8115 	beq.w	800ffa8 <read_submessage_list+0x2b0>
 800fd7e:	f000 ffe9 	bl	8010d54 <uxr_nanos>
 800fd82:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800fd84:	460b      	mov	r3, r1
 800fd86:	9916      	ldr	r1, [sp, #88]	; 0x58
 800fd88:	2700      	movs	r7, #0
 800fd8a:	fbc9 6701 	smlal	r6, r7, r9, r1
 800fd8e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800fd92:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800fd94:	4602      	mov	r2, r0
 800fd96:	9812      	ldr	r0, [sp, #72]	; 0x48
 800fd98:	460e      	mov	r6, r1
 800fd9a:	2700      	movs	r7, #0
 800fd9c:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800fda0:	9106      	str	r1, [sp, #24]
 800fda2:	fbc9 6700 	smlal	r6, r7, r9, r0
 800fda6:	9915      	ldr	r1, [sp, #84]	; 0x54
 800fda8:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800fdac:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800fdae:	2700      	movs	r7, #0
 800fdb0:	4608      	mov	r0, r1
 800fdb2:	4639      	mov	r1, r7
 800fdb4:	fbc9 0106 	smlal	r0, r1, r9, r6
 800fdb8:	e9cd 0100 	strd	r0, r1, [sp]
 800fdbc:	4620      	mov	r0, r4
 800fdbe:	47a8      	blx	r5
 800fdc0:	f04f 0301 	mov.w	r3, #1
 800fdc4:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 800fdc8:	e79e      	b.n	800fd08 <read_submessage_list+0x10>
 800fdca:	a912      	add	r1, sp, #72	; 0x48
 800fdcc:	4640      	mov	r0, r8
 800fdce:	f002 f941 	bl	8012054 <uxr_deserialize_HEARTBEAT_Payload>
 800fdd2:	2100      	movs	r1, #0
 800fdd4:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 800fdd8:	f000 fe4a 	bl	8010a70 <uxr_stream_id_from_raw>
 800fddc:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800fde0:	4603      	mov	r3, r0
 800fde2:	4629      	mov	r1, r5
 800fde4:	f104 0008 	add.w	r0, r4, #8
 800fde8:	9311      	str	r3, [sp, #68]	; 0x44
 800fdea:	f000 ff2f 	bl	8010c4c <uxr_get_input_reliable_stream>
 800fdee:	2800      	cmp	r0, #0
 800fdf0:	d08a      	beq.n	800fd08 <read_submessage_list+0x10>
 800fdf2:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 800fdf6:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
 800fdfa:	f005 fc55 	bl	80156a8 <uxr_process_heartbeat>
 800fdfe:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 800fe02:	462a      	mov	r2, r5
 800fe04:	4620      	mov	r0, r4
 800fe06:	f7ff fdf5 	bl	800f9f4 <write_submessage_acknack.isra.0>
 800fe0a:	e77d      	b.n	800fd08 <read_submessage_list+0x10>
 800fe0c:	a912      	add	r1, sp, #72	; 0x48
 800fe0e:	4640      	mov	r0, r8
 800fe10:	f002 f8f8 	bl	8012004 <uxr_deserialize_ACKNACK_Payload>
 800fe14:	2100      	movs	r1, #0
 800fe16:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 800fe1a:	f000 fe29 	bl	8010a70 <uxr_stream_id_from_raw>
 800fe1e:	4603      	mov	r3, r0
 800fe20:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800fe24:	f104 0008 	add.w	r0, r4, #8
 800fe28:	930f      	str	r3, [sp, #60]	; 0x3c
 800fe2a:	f000 fef9 	bl	8010c20 <uxr_get_output_reliable_stream>
 800fe2e:	4605      	mov	r5, r0
 800fe30:	2800      	cmp	r0, #0
 800fe32:	f43f af69 	beq.w	800fd08 <read_submessage_list+0x10>
 800fe36:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 800fe3a:	f89d 104b 	ldrb.w	r1, [sp, #75]	; 0x4b
 800fe3e:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 800fe42:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800fe46:	b289      	uxth	r1, r1
 800fe48:	f005 ff72 	bl	8015d30 <uxr_process_acknack>
 800fe4c:	4628      	mov	r0, r5
 800fe4e:	f005 ff35 	bl	8015cbc <uxr_begin_output_nack_buffer_it>
 800fe52:	af10      	add	r7, sp, #64	; 0x40
 800fe54:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
 800fe58:	e005      	b.n	800fe66 <read_submessage_list+0x16e>
 800fe5a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800fe5c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800fe5e:	9910      	ldr	r1, [sp, #64]	; 0x40
 800fe60:	e9d3 0600 	ldrd	r0, r6, [r3]
 800fe64:	47b0      	blx	r6
 800fe66:	f10d 033a 	add.w	r3, sp, #58	; 0x3a
 800fe6a:	aa11      	add	r2, sp, #68	; 0x44
 800fe6c:	4639      	mov	r1, r7
 800fe6e:	4628      	mov	r0, r5
 800fe70:	f005 ff26 	bl	8015cc0 <uxr_next_reliable_nack_buffer_to_send>
 800fe74:	2800      	cmp	r0, #0
 800fe76:	d1f0      	bne.n	800fe5a <read_submessage_list+0x162>
 800fe78:	e746      	b.n	800fd08 <read_submessage_list+0x10>
 800fe7a:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 800fe7e:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
 800fe82:	af10      	add	r7, sp, #64	; 0x40
 800fe84:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 800fe88:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
 800fe8c:	4639      	mov	r1, r7
 800fe8e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800fe92:	f89d 6037 	ldrb.w	r6, [sp, #55]	; 0x37
 800fe96:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 800fe9a:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
 800fe9e:	4640      	mov	r0, r8
 800fea0:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 800fea4:	f001 fdf8 	bl	8011a98 <uxr_deserialize_BaseObjectRequest>
 800fea8:	4638      	mov	r0, r7
 800feaa:	a911      	add	r1, sp, #68	; 0x44
 800feac:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 800feb0:	f000 fda2 	bl	80109f8 <uxr_parse_base_object_request>
 800feb4:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 800feb8:	9911      	ldr	r1, [sp, #68]	; 0x44
 800feba:	f8bd 703a 	ldrh.w	r7, [sp, #58]	; 0x3a
 800febe:	9112      	str	r1, [sp, #72]	; 0x48
 800fec0:	3d04      	subs	r5, #4
 800fec2:	f006 060e 	and.w	r6, r6, #14
 800fec6:	b2ad      	uxth	r5, r5
 800fec8:	f1ba 0f00 	cmp.w	sl, #0
 800fecc:	d006      	beq.n	800fedc <read_submessage_list+0x1e4>
 800fece:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800fed2:	9300      	str	r3, [sp, #0]
 800fed4:	463a      	mov	r2, r7
 800fed6:	2300      	movs	r3, #0
 800fed8:	4620      	mov	r0, r4
 800feda:	47d0      	blx	sl
 800fedc:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800fede:	b168      	cbz	r0, 800fefc <read_submessage_list+0x204>
 800fee0:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800fee2:	2300      	movs	r3, #0
 800fee4:	3902      	subs	r1, #2
 800fee6:	e002      	b.n	800feee <read_submessage_list+0x1f6>
 800fee8:	3301      	adds	r3, #1
 800feea:	4283      	cmp	r3, r0
 800feec:	d006      	beq.n	800fefc <read_submessage_list+0x204>
 800feee:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 800fef2:	42ba      	cmp	r2, r7
 800fef4:	d1f8      	bne.n	800fee8 <read_submessage_list+0x1f0>
 800fef6:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800fef8:	2100      	movs	r1, #0
 800fefa:	54d1      	strb	r1, [r2, r3]
 800fefc:	9811      	ldr	r0, [sp, #68]	; 0x44
 800fefe:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ff00:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 800ff04:	9302      	str	r3, [sp, #8]
 800ff06:	e9cd 1000 	strd	r1, r0, [sp]
 800ff0a:	4633      	mov	r3, r6
 800ff0c:	462a      	mov	r2, r5
 800ff0e:	4641      	mov	r1, r8
 800ff10:	4620      	mov	r0, r4
 800ff12:	f7ff fc57 	bl	800f7c4 <read_submessage_format>
 800ff16:	e6f7      	b.n	800fd08 <read_submessage_list+0x10>
 800ff18:	4641      	mov	r1, r8
 800ff1a:	4620      	mov	r0, r4
 800ff1c:	f7ff fea4 	bl	800fc68 <read_submessage_info>
 800ff20:	e6f2      	b.n	800fd08 <read_submessage_list+0x10>
 800ff22:	2a00      	cmp	r2, #0
 800ff24:	d03b      	beq.n	800ff9e <read_submessage_list+0x2a6>
 800ff26:	a912      	add	r1, sp, #72	; 0x48
 800ff28:	4640      	mov	r0, r8
 800ff2a:	f001 ffc7 	bl	8011ebc <uxr_deserialize_STATUS_Payload>
 800ff2e:	a910      	add	r1, sp, #64	; 0x40
 800ff30:	aa0f      	add	r2, sp, #60	; 0x3c
 800ff32:	a812      	add	r0, sp, #72	; 0x48
 800ff34:	f000 fd60 	bl	80109f8 <uxr_parse_base_object_request>
 800ff38:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 800ff3c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800ff3e:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 800ff42:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 800ff46:	9111      	str	r1, [sp, #68]	; 0x44
 800ff48:	b135      	cbz	r5, 800ff58 <read_submessage_list+0x260>
 800ff4a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800ff4e:	9300      	str	r3, [sp, #0]
 800ff50:	4632      	mov	r2, r6
 800ff52:	463b      	mov	r3, r7
 800ff54:	4620      	mov	r0, r4
 800ff56:	47a8      	blx	r5
 800ff58:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	f43f aed4 	beq.w	800fd08 <read_submessage_list+0x10>
 800ff60:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800ff62:	2100      	movs	r1, #0
 800ff64:	3802      	subs	r0, #2
 800ff66:	e003      	b.n	800ff70 <read_submessage_list+0x278>
 800ff68:	3101      	adds	r1, #1
 800ff6a:	4299      	cmp	r1, r3
 800ff6c:	f43f aecc 	beq.w	800fd08 <read_submessage_list+0x10>
 800ff70:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 800ff74:	42b2      	cmp	r2, r6
 800ff76:	d1f7      	bne.n	800ff68 <read_submessage_list+0x270>
 800ff78:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ff7a:	545f      	strb	r7, [r3, r1]
 800ff7c:	e6c4      	b.n	800fd08 <read_submessage_list+0x10>
 800ff7e:	2a00      	cmp	r2, #0
 800ff80:	f47f aec2 	bne.w	800fd08 <read_submessage_list+0x10>
 800ff84:	4641      	mov	r1, r8
 800ff86:	4620      	mov	r0, r4
 800ff88:	f000 fc7a 	bl	8010880 <uxr_read_create_session_status>
 800ff8c:	e6bc      	b.n	800fd08 <read_submessage_list+0x10>
 800ff8e:	4641      	mov	r1, r8
 800ff90:	4620      	mov	r0, r4
 800ff92:	f7ff fcf9 	bl	800f988 <read_submessage_get_info>
 800ff96:	e6b7      	b.n	800fd08 <read_submessage_list+0x10>
 800ff98:	b018      	add	sp, #96	; 0x60
 800ff9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff9e:	4641      	mov	r1, r8
 800ffa0:	4620      	mov	r0, r4
 800ffa2:	f000 fc79 	bl	8010898 <uxr_read_delete_session_status>
 800ffa6:	e6af      	b.n	800fd08 <read_submessage_list+0x10>
 800ffa8:	f000 fed4 	bl	8010d54 <uxr_nanos>
 800ffac:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ffae:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ffb0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ffb2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800ffb4:	2700      	movs	r7, #0
 800ffb6:	fbc9 6703 	smlal	r6, r7, r9, r3
 800ffba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ffbc:	eb16 0c00 	adds.w	ip, r6, r0
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ffc4:	eb47 0e01 	adc.w	lr, r7, r1
 800ffc8:	461e      	mov	r6, r3
 800ffca:	2100      	movs	r1, #0
 800ffcc:	2700      	movs	r7, #0
 800ffce:	fbc9 0105 	smlal	r0, r1, r9, r5
 800ffd2:	fbc9 6702 	smlal	r6, r7, r9, r2
 800ffd6:	1983      	adds	r3, r0, r6
 800ffd8:	eb41 0207 	adc.w	r2, r1, r7
 800ffdc:	ebbc 0303 	subs.w	r3, ip, r3
 800ffe0:	9308      	str	r3, [sp, #32]
 800ffe2:	eb6e 0302 	sbc.w	r3, lr, r2
 800ffe6:	9309      	str	r3, [sp, #36]	; 0x24
 800ffe8:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800ffec:	0fd3      	lsrs	r3, r2, #31
 800ffee:	18c9      	adds	r1, r1, r3
 800fff0:	f142 0200 	adc.w	r2, r2, #0
 800fff4:	084b      	lsrs	r3, r1, #1
 800fff6:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 800fffa:	1052      	asrs	r2, r2, #1
 800fffc:	e9c4 3226 	strd	r3, r2, [r4, #152]	; 0x98
 8010000:	e6de      	b.n	800fdc0 <read_submessage_list+0xc8>
 8010002:	bf00      	nop
 8010004:	3b9aca00 	.word	0x3b9aca00

08010008 <listen_message_reliably>:
 8010008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801000c:	1e0b      	subs	r3, r1, #0
 801000e:	b09d      	sub	sp, #116	; 0x74
 8010010:	bfb8      	it	lt
 8010012:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8010016:	9305      	str	r3, [sp, #20]
 8010018:	4607      	mov	r7, r0
 801001a:	f000 fe7f 	bl	8010d1c <uxr_millis>
 801001e:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 8010022:	4681      	mov	r9, r0
 8010024:	2a00      	cmp	r2, #0
 8010026:	f000 8095 	beq.w	8010154 <listen_message_reliably+0x14c>
 801002a:	2600      	movs	r6, #0
 801002c:	f04f 33ff 	mov.w	r3, #4294967295
 8010030:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8010034:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8010038:	4630      	mov	r0, r6
 801003a:	4688      	mov	r8, r1
 801003c:	46ca      	mov	sl, r9
 801003e:	e00f      	b.n	8010060 <listen_message_reliably+0x58>
 8010040:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010044:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010048:	42a2      	cmp	r2, r4
 801004a:	eb73 0105 	sbcs.w	r1, r3, r5
 801004e:	bfb8      	it	lt
 8010050:	e9cd 2302 	strdlt	r2, r3, [sp, #8]
 8010054:	3601      	adds	r6, #1
 8010056:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 801005a:	b2f0      	uxtb	r0, r6
 801005c:	4283      	cmp	r3, r0
 801005e:	d951      	bls.n	8010104 <listen_message_reliably+0xfc>
 8010060:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8010064:	2201      	movs	r2, #1
 8010066:	2102      	movs	r1, #2
 8010068:	f000 fcd8 	bl	8010a1c <uxr_stream_id>
 801006c:	00e4      	lsls	r4, r4, #3
 801006e:	f104 0520 	add.w	r5, r4, #32
 8010072:	443d      	add	r5, r7
 8010074:	4601      	mov	r1, r0
 8010076:	4643      	mov	r3, r8
 8010078:	4652      	mov	r2, sl
 801007a:	4628      	mov	r0, r5
 801007c:	9109      	str	r1, [sp, #36]	; 0x24
 801007e:	f005 fdf1 	bl	8015c64 <uxr_update_output_stream_heartbeat_timestamp>
 8010082:	193b      	adds	r3, r7, r4
 8010084:	2800      	cmp	r0, #0
 8010086:	d0db      	beq.n	8010040 <listen_message_reliably+0x38>
 8010088:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 801008c:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 8010090:	4638      	mov	r0, r7
 8010092:	f000 fc8b 	bl	80109ac <uxr_session_header_offset>
 8010096:	3501      	adds	r5, #1
 8010098:	f10d 0b50 	add.w	fp, sp, #80	; 0x50
 801009c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80100a0:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 80100a4:	9000      	str	r0, [sp, #0]
 80100a6:	2300      	movs	r3, #0
 80100a8:	4658      	mov	r0, fp
 80100aa:	2211      	movs	r2, #17
 80100ac:	a90c      	add	r1, sp, #48	; 0x30
 80100ae:	f7ff f819 	bl	800f0e4 <ucdr_init_buffer_origin_offset>
 80100b2:	2300      	movs	r3, #0
 80100b4:	2205      	movs	r2, #5
 80100b6:	210b      	movs	r1, #11
 80100b8:	4658      	mov	r0, fp
 80100ba:	f000 fde9 	bl	8010c90 <uxr_buffer_submessage_header>
 80100be:	8968      	ldrh	r0, [r5, #10]
 80100c0:	2101      	movs	r1, #1
 80100c2:	f005 fe8d 	bl	8015de0 <uxr_seq_num_add>
 80100c6:	892a      	ldrh	r2, [r5, #8]
 80100c8:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 80100cc:	4603      	mov	r3, r0
 80100ce:	a90a      	add	r1, sp, #40	; 0x28
 80100d0:	4658      	mov	r0, fp
 80100d2:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 80100d6:	f88d 902c 	strb.w	r9, [sp, #44]	; 0x2c
 80100da:	f001 ffa7 	bl	801202c <uxr_serialize_HEARTBEAT_Payload>
 80100de:	2200      	movs	r2, #0
 80100e0:	4611      	mov	r1, r2
 80100e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80100e4:	4638      	mov	r0, r7
 80100e6:	f000 fc09 	bl	80108fc <uxr_stamp_session_header>
 80100ea:	4658      	mov	r0, fp
 80100ec:	f7ff f838 	bl	800f160 <ucdr_buffer_length>
 80100f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80100f2:	4602      	mov	r2, r0
 80100f4:	a90c      	add	r1, sp, #48	; 0x30
 80100f6:	e9d3 0500 	ldrd	r0, r5, [r3]
 80100fa:	443c      	add	r4, r7
 80100fc:	47a8      	blx	r5
 80100fe:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8010102:	e79f      	b.n	8010044 <listen_message_reliably+0x3c>
 8010104:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 8010108:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 801010c:	f04f 31ff 	mov.w	r1, #4294967295
 8010110:	4294      	cmp	r4, r2
 8010112:	bf08      	it	eq
 8010114:	428b      	cmpeq	r3, r1
 8010116:	d01d      	beq.n	8010154 <listen_message_reliably+0x14c>
 8010118:	eba3 030a 	sub.w	r3, r3, sl
 801011c:	9905      	ldr	r1, [sp, #20]
 801011e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010120:	2b00      	cmp	r3, #0
 8010122:	bf08      	it	eq
 8010124:	2301      	moveq	r3, #1
 8010126:	4299      	cmp	r1, r3
 8010128:	bfa8      	it	ge
 801012a:	4619      	movge	r1, r3
 801012c:	6894      	ldr	r4, [r2, #8]
 801012e:	6810      	ldr	r0, [r2, #0]
 8010130:	4689      	mov	r9, r1
 8010132:	460b      	mov	r3, r1
 8010134:	aa08      	add	r2, sp, #32
 8010136:	a907      	add	r1, sp, #28
 8010138:	47a0      	blx	r4
 801013a:	b968      	cbnz	r0, 8010158 <listen_message_reliably+0x150>
 801013c:	9b05      	ldr	r3, [sp, #20]
 801013e:	eba3 0309 	sub.w	r3, r3, r9
 8010142:	2b00      	cmp	r3, #0
 8010144:	9305      	str	r3, [sp, #20]
 8010146:	f73f af68 	bgt.w	801001a <listen_message_reliably+0x12>
 801014a:	4604      	mov	r4, r0
 801014c:	4620      	mov	r0, r4
 801014e:	b01d      	add	sp, #116	; 0x74
 8010150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010154:	9b05      	ldr	r3, [sp, #20]
 8010156:	e7e1      	b.n	801011c <listen_message_reliably+0x114>
 8010158:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 801015c:	4604      	mov	r4, r0
 801015e:	a80c      	add	r0, sp, #48	; 0x30
 8010160:	f7fe ffd2 	bl	800f108 <ucdr_init_buffer>
 8010164:	2500      	movs	r5, #0
 8010166:	a90c      	add	r1, sp, #48	; 0x30
 8010168:	f10d 031a 	add.w	r3, sp, #26
 801016c:	aa06      	add	r2, sp, #24
 801016e:	4638      	mov	r0, r7
 8010170:	f88d 5018 	strb.w	r5, [sp, #24]
 8010174:	f000 fbd8 	bl	8010928 <uxr_read_session_header>
 8010178:	b918      	cbnz	r0, 8010182 <listen_message_reliably+0x17a>
 801017a:	4620      	mov	r0, r4
 801017c:	b01d      	add	sp, #116	; 0x74
 801017e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010182:	4629      	mov	r1, r5
 8010184:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8010188:	f000 fc72 	bl	8010a70 <uxr_stream_id_from_raw>
 801018c:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8010190:	2e01      	cmp	r6, #1
 8010192:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 8010196:	900a      	str	r0, [sp, #40]	; 0x28
 8010198:	fa5f fa80 	uxtb.w	sl, r0
 801019c:	f3c0 2507 	ubfx	r5, r0, #8, #8
 80101a0:	d04b      	beq.n	801023a <listen_message_reliably+0x232>
 80101a2:	2e02      	cmp	r6, #2
 80101a4:	d00f      	beq.n	80101c6 <listen_message_reliably+0x1be>
 80101a6:	2e00      	cmp	r6, #0
 80101a8:	d1e7      	bne.n	801017a <listen_message_reliably+0x172>
 80101aa:	4631      	mov	r1, r6
 80101ac:	4630      	mov	r0, r6
 80101ae:	f000 fc5f 	bl	8010a70 <uxr_stream_id_from_raw>
 80101b2:	a90c      	add	r1, sp, #48	; 0x30
 80101b4:	4602      	mov	r2, r0
 80101b6:	4638      	mov	r0, r7
 80101b8:	920a      	str	r2, [sp, #40]	; 0x28
 80101ba:	f7ff fd9d 	bl	800fcf8 <read_submessage_list>
 80101be:	4620      	mov	r0, r4
 80101c0:	b01d      	add	sp, #116	; 0x74
 80101c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101c6:	4629      	mov	r1, r5
 80101c8:	f107 0008 	add.w	r0, r7, #8
 80101cc:	f000 fd3e 	bl	8010c4c <uxr_get_input_reliable_stream>
 80101d0:	4680      	mov	r8, r0
 80101d2:	b348      	cbz	r0, 8010228 <listen_message_reliably+0x220>
 80101d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80101d6:	9202      	str	r2, [sp, #8]
 80101d8:	a80c      	add	r0, sp, #48	; 0x30
 80101da:	f7fe ffc5 	bl	800f168 <ucdr_buffer_remaining>
 80101de:	4603      	mov	r3, r0
 80101e0:	f10d 0019 	add.w	r0, sp, #25
 80101e4:	9000      	str	r0, [sp, #0]
 80101e6:	9a02      	ldr	r2, [sp, #8]
 80101e8:	4649      	mov	r1, r9
 80101ea:	4640      	mov	r0, r8
 80101ec:	f005 f95e 	bl	80154ac <uxr_receive_reliable_message>
 80101f0:	b1d0      	cbz	r0, 8010228 <listen_message_reliably+0x220>
 80101f2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d037      	beq.n	801026a <listen_message_reliably+0x262>
 80101fa:	ae14      	add	r6, sp, #80	; 0x50
 80101fc:	f04f 0902 	mov.w	r9, #2
 8010200:	e008      	b.n	8010214 <listen_message_reliably+0x20c>
 8010202:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 8010206:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 801020a:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 801020e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010210:	f7ff fd72 	bl	800fcf8 <read_submessage_list>
 8010214:	4631      	mov	r1, r6
 8010216:	2204      	movs	r2, #4
 8010218:	4640      	mov	r0, r8
 801021a:	f005 f9c7 	bl	80155ac <uxr_next_input_reliable_buffer_available>
 801021e:	4603      	mov	r3, r0
 8010220:	4631      	mov	r1, r6
 8010222:	4638      	mov	r0, r7
 8010224:	2b00      	cmp	r3, #0
 8010226:	d1ec      	bne.n	8010202 <listen_message_reliably+0x1fa>
 8010228:	4638      	mov	r0, r7
 801022a:	462a      	mov	r2, r5
 801022c:	4651      	mov	r1, sl
 801022e:	f7ff fbe1 	bl	800f9f4 <write_submessage_acknack.isra.0>
 8010232:	4620      	mov	r0, r4
 8010234:	b01d      	add	sp, #116	; 0x74
 8010236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801023a:	4629      	mov	r1, r5
 801023c:	f107 0008 	add.w	r0, r7, #8
 8010240:	f000 fcfa 	bl	8010c38 <uxr_get_input_best_effort_stream>
 8010244:	2800      	cmp	r0, #0
 8010246:	d098      	beq.n	801017a <listen_message_reliably+0x172>
 8010248:	4649      	mov	r1, r9
 801024a:	f005 f8ab 	bl	80153a4 <uxr_receive_best_effort_message>
 801024e:	2800      	cmp	r0, #0
 8010250:	d093      	beq.n	801017a <listen_message_reliably+0x172>
 8010252:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 8010256:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 801025a:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 801025e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010260:	a90c      	add	r1, sp, #48	; 0x30
 8010262:	4638      	mov	r0, r7
 8010264:	f7ff fd48 	bl	800fcf8 <read_submessage_list>
 8010268:	e787      	b.n	801017a <listen_message_reliably+0x172>
 801026a:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 801026e:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 8010272:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8010276:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010278:	a90c      	add	r1, sp, #48	; 0x30
 801027a:	4638      	mov	r0, r7
 801027c:	f7ff fd3c 	bl	800fcf8 <read_submessage_list>
 8010280:	e7bb      	b.n	80101fa <listen_message_reliably+0x1f2>
 8010282:	bf00      	nop

08010284 <uxr_run_session_until_confirm_delivery>:
 8010284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010288:	4606      	mov	r6, r0
 801028a:	460d      	mov	r5, r1
 801028c:	f000 fd46 	bl	8010d1c <uxr_millis>
 8010290:	4607      	mov	r7, r0
 8010292:	4630      	mov	r0, r6
 8010294:	f7ff fc74 	bl	800fb80 <uxr_flash_output_streams>
 8010298:	2d00      	cmp	r5, #0
 801029a:	f106 0808 	add.w	r8, r6, #8
 801029e:	bfa8      	it	ge
 80102a0:	462c      	movge	r4, r5
 80102a2:	da07      	bge.n	80102b4 <uxr_run_session_until_confirm_delivery+0x30>
 80102a4:	e00e      	b.n	80102c4 <uxr_run_session_until_confirm_delivery+0x40>
 80102a6:	f7ff feaf 	bl	8010008 <listen_message_reliably>
 80102aa:	f000 fd37 	bl	8010d1c <uxr_millis>
 80102ae:	1bc3      	subs	r3, r0, r7
 80102b0:	1aec      	subs	r4, r5, r3
 80102b2:	d407      	bmi.n	80102c4 <uxr_run_session_until_confirm_delivery+0x40>
 80102b4:	4640      	mov	r0, r8
 80102b6:	f000 fcd5 	bl	8010c64 <uxr_output_streams_confirmed>
 80102ba:	4603      	mov	r3, r0
 80102bc:	4621      	mov	r1, r4
 80102be:	4630      	mov	r0, r6
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d0f0      	beq.n	80102a6 <uxr_run_session_until_confirm_delivery+0x22>
 80102c4:	4640      	mov	r0, r8
 80102c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80102ca:	f000 bccb 	b.w	8010c64 <uxr_output_streams_confirmed>
 80102ce:	bf00      	nop

080102d0 <uxr_run_session_until_all_status>:
 80102d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102d4:	9d08      	ldr	r5, [sp, #32]
 80102d6:	460f      	mov	r7, r1
 80102d8:	4692      	mov	sl, r2
 80102da:	461c      	mov	r4, r3
 80102dc:	4606      	mov	r6, r0
 80102de:	f7ff fc4f 	bl	800fb80 <uxr_flash_output_streams>
 80102e2:	b125      	cbz	r5, 80102ee <uxr_run_session_until_all_status+0x1e>
 80102e4:	462a      	mov	r2, r5
 80102e6:	21ff      	movs	r1, #255	; 0xff
 80102e8:	4620      	mov	r0, r4
 80102ea:	f007 f967 	bl	80175bc <memset>
 80102ee:	e9c6 a41d 	strd	sl, r4, [r6, #116]	; 0x74
 80102f2:	67f5      	str	r5, [r6, #124]	; 0x7c
 80102f4:	f000 fd12 	bl	8010d1c <uxr_millis>
 80102f8:	f104 39ff 	add.w	r9, r4, #4294967295
 80102fc:	f1aa 0a02 	sub.w	sl, sl, #2
 8010300:	4680      	mov	r8, r0
 8010302:	4639      	mov	r1, r7
 8010304:	4630      	mov	r0, r6
 8010306:	f7ff fe7f 	bl	8010008 <listen_message_reliably>
 801030a:	f000 fd07 	bl	8010d1c <uxr_millis>
 801030e:	eba0 0008 	sub.w	r0, r0, r8
 8010312:	1a39      	subs	r1, r7, r0
 8010314:	b33d      	cbz	r5, 8010366 <uxr_run_session_until_all_status+0x96>
 8010316:	46cc      	mov	ip, r9
 8010318:	464a      	mov	r2, r9
 801031a:	2301      	movs	r3, #1
 801031c:	e002      	b.n	8010324 <uxr_run_session_until_all_status+0x54>
 801031e:	42ab      	cmp	r3, r5
 8010320:	d20c      	bcs.n	801033c <uxr_run_session_until_all_status+0x6c>
 8010322:	3301      	adds	r3, #1
 8010324:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8010328:	2cff      	cmp	r4, #255	; 0xff
 801032a:	d1f8      	bne.n	801031e <uxr_run_session_until_all_status+0x4e>
 801032c:	42ab      	cmp	r3, r5
 801032e:	f83a 0013 	ldrh.w	r0, [sl, r3, lsl #1]
 8010332:	d213      	bcs.n	801035c <uxr_run_session_until_all_status+0x8c>
 8010334:	2800      	cmp	r0, #0
 8010336:	d0f4      	beq.n	8010322 <uxr_run_session_until_all_status+0x52>
 8010338:	2900      	cmp	r1, #0
 801033a:	dce3      	bgt.n	8010304 <uxr_run_session_until_all_status+0x34>
 801033c:	2300      	movs	r3, #0
 801033e:	444d      	add	r5, r9
 8010340:	67f3      	str	r3, [r6, #124]	; 0x7c
 8010342:	e001      	b.n	8010348 <uxr_run_session_until_all_status+0x78>
 8010344:	2b01      	cmp	r3, #1
 8010346:	d812      	bhi.n	801036e <uxr_run_session_until_all_status+0x9e>
 8010348:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 801034c:	4565      	cmp	r5, ip
 801034e:	d1f9      	bne.n	8010344 <uxr_run_session_until_all_status+0x74>
 8010350:	2b01      	cmp	r3, #1
 8010352:	bf8c      	ite	hi
 8010354:	2000      	movhi	r0, #0
 8010356:	2001      	movls	r0, #1
 8010358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801035c:	2900      	cmp	r1, #0
 801035e:	dded      	ble.n	801033c <uxr_run_session_until_all_status+0x6c>
 8010360:	2800      	cmp	r0, #0
 8010362:	d1cf      	bne.n	8010304 <uxr_run_session_until_all_status+0x34>
 8010364:	e7ea      	b.n	801033c <uxr_run_session_until_all_status+0x6c>
 8010366:	67f5      	str	r5, [r6, #124]	; 0x7c
 8010368:	2001      	movs	r0, #1
 801036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801036e:	2000      	movs	r0, #0
 8010370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08010374 <uxr_create_session>:
 8010374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010378:	ed2d 8b02 	vpush	{d8}
 801037c:	f100 0808 	add.w	r8, r0, #8
 8010380:	b0a9      	sub	sp, #164	; 0xa4
 8010382:	4604      	mov	r4, r0
 8010384:	4640      	mov	r0, r8
 8010386:	f000 fba9 	bl	8010adc <uxr_reset_stream_storage>
 801038a:	4620      	mov	r0, r4
 801038c:	f000 fb0e 	bl	80109ac <uxr_session_header_offset>
 8010390:	a909      	add	r1, sp, #36	; 0x24
 8010392:	9000      	str	r0, [sp, #0]
 8010394:	2300      	movs	r3, #0
 8010396:	a810      	add	r0, sp, #64	; 0x40
 8010398:	221c      	movs	r2, #28
 801039a:	f7fe fea3 	bl	800f0e4 <ucdr_init_buffer_origin_offset>
 801039e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80103a0:	8a1a      	ldrh	r2, [r3, #16]
 80103a2:	3a04      	subs	r2, #4
 80103a4:	b292      	uxth	r2, r2
 80103a6:	4620      	mov	r0, r4
 80103a8:	a910      	add	r1, sp, #64	; 0x40
 80103aa:	f000 fa23 	bl	80107f4 <uxr_buffer_create_session>
 80103ae:	9910      	ldr	r1, [sp, #64]	; 0x40
 80103b0:	4620      	mov	r0, r4
 80103b2:	f000 fa8f 	bl	80108d4 <uxr_stamp_create_session_header>
 80103b6:	a810      	add	r0, sp, #64	; 0x40
 80103b8:	f7fe fed2 	bl	800f160 <ucdr_buffer_length>
 80103bc:	23ff      	movs	r3, #255	; 0xff
 80103be:	ee08 0a10 	vmov	s16, r0
 80103c2:	7163      	strb	r3, [r4, #5]
 80103c4:	f04f 090a 	mov.w	r9, #10
 80103c8:	46c2      	mov	sl, r8
 80103ca:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80103cc:	ee18 2a10 	vmov	r2, s16
 80103d0:	e9d3 0500 	ldrd	r0, r5, [r3]
 80103d4:	a909      	add	r1, sp, #36	; 0x24
 80103d6:	47a8      	blx	r5
 80103d8:	f000 fca0 	bl	8010d1c <uxr_millis>
 80103dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80103e0:	9002      	str	r0, [sp, #8]
 80103e2:	e00c      	b.n	80103fe <uxr_create_session+0x8a>
 80103e4:	f000 fc9a 	bl	8010d1c <uxr_millis>
 80103e8:	9b02      	ldr	r3, [sp, #8]
 80103ea:	7962      	ldrb	r2, [r4, #5]
 80103ec:	1ac0      	subs	r0, r0, r3
 80103ee:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	f340 8094 	ble.w	8010520 <uxr_create_session+0x1ac>
 80103f8:	2aff      	cmp	r2, #255	; 0xff
 80103fa:	f040 8097 	bne.w	801052c <uxr_create_session+0x1b8>
 80103fe:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8010400:	a905      	add	r1, sp, #20
 8010402:	6895      	ldr	r5, [r2, #8]
 8010404:	6810      	ldr	r0, [r2, #0]
 8010406:	aa06      	add	r2, sp, #24
 8010408:	47a8      	blx	r5
 801040a:	2800      	cmp	r0, #0
 801040c:	d0ea      	beq.n	80103e4 <uxr_create_session+0x70>
 801040e:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 8010412:	a818      	add	r0, sp, #96	; 0x60
 8010414:	f7fe fe78 	bl	800f108 <ucdr_init_buffer>
 8010418:	2500      	movs	r5, #0
 801041a:	f10d 0312 	add.w	r3, sp, #18
 801041e:	aa04      	add	r2, sp, #16
 8010420:	a918      	add	r1, sp, #96	; 0x60
 8010422:	4620      	mov	r0, r4
 8010424:	f88d 5010 	strb.w	r5, [sp, #16]
 8010428:	f000 fa7e 	bl	8010928 <uxr_read_session_header>
 801042c:	2800      	cmp	r0, #0
 801042e:	d0d9      	beq.n	80103e4 <uxr_create_session+0x70>
 8010430:	4629      	mov	r1, r5
 8010432:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8010436:	f000 fb1b 	bl	8010a70 <uxr_stream_id_from_raw>
 801043a:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801043e:	2f01      	cmp	r7, #1
 8010440:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8010444:	f8bd b012 	ldrh.w	fp, [sp, #18]
 8010448:	fa5f f880 	uxtb.w	r8, r0
 801044c:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8010450:	d04d      	beq.n	80104ee <uxr_create_session+0x17a>
 8010452:	2f02      	cmp	r7, #2
 8010454:	d00c      	beq.n	8010470 <uxr_create_session+0xfc>
 8010456:	2f00      	cmp	r7, #0
 8010458:	d1c4      	bne.n	80103e4 <uxr_create_session+0x70>
 801045a:	4639      	mov	r1, r7
 801045c:	4638      	mov	r0, r7
 801045e:	f000 fb07 	bl	8010a70 <uxr_stream_id_from_raw>
 8010462:	a918      	add	r1, sp, #96	; 0x60
 8010464:	4602      	mov	r2, r0
 8010466:	4620      	mov	r0, r4
 8010468:	9208      	str	r2, [sp, #32]
 801046a:	f7ff fc45 	bl	800fcf8 <read_submessage_list>
 801046e:	e7b9      	b.n	80103e4 <uxr_create_session+0x70>
 8010470:	4629      	mov	r1, r5
 8010472:	4650      	mov	r0, sl
 8010474:	f000 fbea 	bl	8010c4c <uxr_get_input_reliable_stream>
 8010478:	4606      	mov	r6, r0
 801047a:	b390      	cbz	r0, 80104e2 <uxr_create_session+0x16e>
 801047c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801047e:	9203      	str	r2, [sp, #12]
 8010480:	a818      	add	r0, sp, #96	; 0x60
 8010482:	f7fe fe71 	bl	800f168 <ucdr_buffer_remaining>
 8010486:	4603      	mov	r3, r0
 8010488:	f10d 0011 	add.w	r0, sp, #17
 801048c:	9000      	str	r0, [sp, #0]
 801048e:	9a03      	ldr	r2, [sp, #12]
 8010490:	4659      	mov	r1, fp
 8010492:	4630      	mov	r0, r6
 8010494:	f005 f80a 	bl	80154ac <uxr_receive_reliable_message>
 8010498:	b318      	cbz	r0, 80104e2 <uxr_create_session+0x16e>
 801049a:	f89d 3011 	ldrb.w	r3, [sp, #17]
 801049e:	b9b3      	cbnz	r3, 80104ce <uxr_create_session+0x15a>
 80104a0:	f88d 8020 	strb.w	r8, [sp, #32]
 80104a4:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 80104a8:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
 80104ac:	9a08      	ldr	r2, [sp, #32]
 80104ae:	a918      	add	r1, sp, #96	; 0x60
 80104b0:	4620      	mov	r0, r4
 80104b2:	f7ff fc21 	bl	800fcf8 <read_submessage_list>
 80104b6:	e00a      	b.n	80104ce <uxr_create_session+0x15a>
 80104b8:	f04f 0302 	mov.w	r3, #2
 80104bc:	f88d 8020 	strb.w	r8, [sp, #32]
 80104c0:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 80104c4:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 80104c8:	9a08      	ldr	r2, [sp, #32]
 80104ca:	f7ff fc15 	bl	800fcf8 <read_submessage_list>
 80104ce:	a920      	add	r1, sp, #128	; 0x80
 80104d0:	2204      	movs	r2, #4
 80104d2:	4630      	mov	r0, r6
 80104d4:	f005 f86a 	bl	80155ac <uxr_next_input_reliable_buffer_available>
 80104d8:	4603      	mov	r3, r0
 80104da:	a920      	add	r1, sp, #128	; 0x80
 80104dc:	4620      	mov	r0, r4
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d1ea      	bne.n	80104b8 <uxr_create_session+0x144>
 80104e2:	462a      	mov	r2, r5
 80104e4:	4641      	mov	r1, r8
 80104e6:	4620      	mov	r0, r4
 80104e8:	f7ff fa84 	bl	800f9f4 <write_submessage_acknack.isra.0>
 80104ec:	e77a      	b.n	80103e4 <uxr_create_session+0x70>
 80104ee:	4629      	mov	r1, r5
 80104f0:	4650      	mov	r0, sl
 80104f2:	f000 fba1 	bl	8010c38 <uxr_get_input_best_effort_stream>
 80104f6:	2800      	cmp	r0, #0
 80104f8:	f43f af74 	beq.w	80103e4 <uxr_create_session+0x70>
 80104fc:	4659      	mov	r1, fp
 80104fe:	f004 ff51 	bl	80153a4 <uxr_receive_best_effort_message>
 8010502:	2800      	cmp	r0, #0
 8010504:	f43f af6e 	beq.w	80103e4 <uxr_create_session+0x70>
 8010508:	f88d 8020 	strb.w	r8, [sp, #32]
 801050c:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8010510:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
 8010514:	9a08      	ldr	r2, [sp, #32]
 8010516:	a918      	add	r1, sp, #96	; 0x60
 8010518:	4620      	mov	r0, r4
 801051a:	f7ff fbed 	bl	800fcf8 <read_submessage_list>
 801051e:	e761      	b.n	80103e4 <uxr_create_session+0x70>
 8010520:	f1b9 0901 	subs.w	r9, r9, #1
 8010524:	d002      	beq.n	801052c <uxr_create_session+0x1b8>
 8010526:	2aff      	cmp	r2, #255	; 0xff
 8010528:	f43f af4f 	beq.w	80103ca <uxr_create_session+0x56>
 801052c:	b12a      	cbz	r2, 801053a <uxr_create_session+0x1c6>
 801052e:	2000      	movs	r0, #0
 8010530:	b029      	add	sp, #164	; 0xa4
 8010532:	ecbd 8b02 	vpop	{d8}
 8010536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801053a:	4650      	mov	r0, sl
 801053c:	f000 face 	bl	8010adc <uxr_reset_stream_storage>
 8010540:	2001      	movs	r0, #1
 8010542:	b029      	add	sp, #164	; 0xa4
 8010544:	ecbd 8b02 	vpop	{d8}
 8010548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801054c <wait_session_status>:
 801054c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010550:	4604      	mov	r4, r0
 8010552:	b09d      	sub	sp, #116	; 0x74
 8010554:	20ff      	movs	r0, #255	; 0xff
 8010556:	7160      	strb	r0, [r4, #5]
 8010558:	9304      	str	r3, [sp, #16]
 801055a:	2b00      	cmp	r3, #0
 801055c:	f000 80b8 	beq.w	80106d0 <wait_session_status+0x184>
 8010560:	2300      	movs	r3, #0
 8010562:	468b      	mov	fp, r1
 8010564:	4692      	mov	sl, r2
 8010566:	9303      	str	r3, [sp, #12]
 8010568:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801056a:	4652      	mov	r2, sl
 801056c:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010570:	4659      	mov	r1, fp
 8010572:	47a8      	blx	r5
 8010574:	f000 fbd2 	bl	8010d1c <uxr_millis>
 8010578:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801057c:	4605      	mov	r5, r0
 801057e:	e009      	b.n	8010594 <wait_session_status+0x48>
 8010580:	f000 fbcc 	bl	8010d1c <uxr_millis>
 8010584:	1b40      	subs	r0, r0, r5
 8010586:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 801058a:	2b00      	cmp	r3, #0
 801058c:	dd42      	ble.n	8010614 <wait_session_status+0xc8>
 801058e:	7960      	ldrb	r0, [r4, #5]
 8010590:	28ff      	cmp	r0, #255	; 0xff
 8010592:	d148      	bne.n	8010626 <wait_session_status+0xda>
 8010594:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8010596:	a908      	add	r1, sp, #32
 8010598:	6896      	ldr	r6, [r2, #8]
 801059a:	6810      	ldr	r0, [r2, #0]
 801059c:	aa09      	add	r2, sp, #36	; 0x24
 801059e:	47b0      	blx	r6
 80105a0:	2800      	cmp	r0, #0
 80105a2:	d0ed      	beq.n	8010580 <wait_session_status+0x34>
 80105a4:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80105a8:	a80c      	add	r0, sp, #48	; 0x30
 80105aa:	f7fe fdad 	bl	800f108 <ucdr_init_buffer>
 80105ae:	2600      	movs	r6, #0
 80105b0:	f10d 031e 	add.w	r3, sp, #30
 80105b4:	aa07      	add	r2, sp, #28
 80105b6:	a90c      	add	r1, sp, #48	; 0x30
 80105b8:	4620      	mov	r0, r4
 80105ba:	f88d 601c 	strb.w	r6, [sp, #28]
 80105be:	f000 f9b3 	bl	8010928 <uxr_read_session_header>
 80105c2:	2800      	cmp	r0, #0
 80105c4:	d0dc      	beq.n	8010580 <wait_session_status+0x34>
 80105c6:	4631      	mov	r1, r6
 80105c8:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80105cc:	f000 fa50 	bl	8010a70 <uxr_stream_id_from_raw>
 80105d0:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80105d4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80105d8:	9302      	str	r3, [sp, #8]
 80105da:	2f01      	cmp	r7, #1
 80105dc:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 80105e0:	fa5f f880 	uxtb.w	r8, r0
 80105e4:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80105e8:	d058      	beq.n	801069c <wait_session_status+0x150>
 80105ea:	2f02      	cmp	r7, #2
 80105ec:	d021      	beq.n	8010632 <wait_session_status+0xe6>
 80105ee:	2f00      	cmp	r7, #0
 80105f0:	d1c6      	bne.n	8010580 <wait_session_status+0x34>
 80105f2:	4639      	mov	r1, r7
 80105f4:	4638      	mov	r0, r7
 80105f6:	f000 fa3b 	bl	8010a70 <uxr_stream_id_from_raw>
 80105fa:	a90c      	add	r1, sp, #48	; 0x30
 80105fc:	4602      	mov	r2, r0
 80105fe:	4620      	mov	r0, r4
 8010600:	920b      	str	r2, [sp, #44]	; 0x2c
 8010602:	f7ff fb79 	bl	800fcf8 <read_submessage_list>
 8010606:	f000 fb89 	bl	8010d1c <uxr_millis>
 801060a:	1b40      	subs	r0, r0, r5
 801060c:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8010610:	2b00      	cmp	r3, #0
 8010612:	dcbc      	bgt.n	801058e <wait_session_status+0x42>
 8010614:	9b03      	ldr	r3, [sp, #12]
 8010616:	9a04      	ldr	r2, [sp, #16]
 8010618:	7960      	ldrb	r0, [r4, #5]
 801061a:	3301      	adds	r3, #1
 801061c:	429a      	cmp	r2, r3
 801061e:	9303      	str	r3, [sp, #12]
 8010620:	d001      	beq.n	8010626 <wait_session_status+0xda>
 8010622:	28ff      	cmp	r0, #255	; 0xff
 8010624:	d0a0      	beq.n	8010568 <wait_session_status+0x1c>
 8010626:	38ff      	subs	r0, #255	; 0xff
 8010628:	bf18      	it	ne
 801062a:	2001      	movne	r0, #1
 801062c:	b01d      	add	sp, #116	; 0x74
 801062e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010632:	4631      	mov	r1, r6
 8010634:	f104 0008 	add.w	r0, r4, #8
 8010638:	f000 fb08 	bl	8010c4c <uxr_get_input_reliable_stream>
 801063c:	4681      	mov	r9, r0
 801063e:	b338      	cbz	r0, 8010690 <wait_session_status+0x144>
 8010640:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010642:	9205      	str	r2, [sp, #20]
 8010644:	a80c      	add	r0, sp, #48	; 0x30
 8010646:	f7fe fd8f 	bl	800f168 <ucdr_buffer_remaining>
 801064a:	4603      	mov	r3, r0
 801064c:	f10d 001d 	add.w	r0, sp, #29
 8010650:	9000      	str	r0, [sp, #0]
 8010652:	9a05      	ldr	r2, [sp, #20]
 8010654:	9902      	ldr	r1, [sp, #8]
 8010656:	4648      	mov	r0, r9
 8010658:	f004 ff28 	bl	80154ac <uxr_receive_reliable_message>
 801065c:	b1c0      	cbz	r0, 8010690 <wait_session_status+0x144>
 801065e:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8010662:	b95b      	cbnz	r3, 801067c <wait_session_status+0x130>
 8010664:	e03c      	b.n	80106e0 <wait_session_status+0x194>
 8010666:	f04f 0302 	mov.w	r3, #2
 801066a:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 801066e:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8010672:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 8010676:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010678:	f7ff fb3e 	bl	800fcf8 <read_submessage_list>
 801067c:	a914      	add	r1, sp, #80	; 0x50
 801067e:	2204      	movs	r2, #4
 8010680:	4648      	mov	r0, r9
 8010682:	f004 ff93 	bl	80155ac <uxr_next_input_reliable_buffer_available>
 8010686:	4603      	mov	r3, r0
 8010688:	a914      	add	r1, sp, #80	; 0x50
 801068a:	4620      	mov	r0, r4
 801068c:	2b00      	cmp	r3, #0
 801068e:	d1ea      	bne.n	8010666 <wait_session_status+0x11a>
 8010690:	4632      	mov	r2, r6
 8010692:	4641      	mov	r1, r8
 8010694:	4620      	mov	r0, r4
 8010696:	f7ff f9ad 	bl	800f9f4 <write_submessage_acknack.isra.0>
 801069a:	e771      	b.n	8010580 <wait_session_status+0x34>
 801069c:	4631      	mov	r1, r6
 801069e:	f104 0008 	add.w	r0, r4, #8
 80106a2:	f000 fac9 	bl	8010c38 <uxr_get_input_best_effort_stream>
 80106a6:	2800      	cmp	r0, #0
 80106a8:	f43f af6a 	beq.w	8010580 <wait_session_status+0x34>
 80106ac:	9902      	ldr	r1, [sp, #8]
 80106ae:	f004 fe79 	bl	80153a4 <uxr_receive_best_effort_message>
 80106b2:	2800      	cmp	r0, #0
 80106b4:	f43f af64 	beq.w	8010580 <wait_session_status+0x34>
 80106b8:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 80106bc:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 80106c0:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 80106c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80106c6:	a90c      	add	r1, sp, #48	; 0x30
 80106c8:	4620      	mov	r0, r4
 80106ca:	f7ff fb15 	bl	800fcf8 <read_submessage_list>
 80106ce:	e757      	b.n	8010580 <wait_session_status+0x34>
 80106d0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80106d2:	e9d3 0400 	ldrd	r0, r4, [r3]
 80106d6:	47a0      	blx	r4
 80106d8:	2001      	movs	r0, #1
 80106da:	b01d      	add	sp, #116	; 0x74
 80106dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106e0:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 80106e4:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 80106e8:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 80106ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80106ee:	a90c      	add	r1, sp, #48	; 0x30
 80106f0:	4620      	mov	r0, r4
 80106f2:	f7ff fb01 	bl	800fcf8 <read_submessage_list>
 80106f6:	e7c1      	b.n	801067c <wait_session_status+0x130>

080106f8 <uxr_delete_session_retries>:
 80106f8:	b530      	push	{r4, r5, lr}
 80106fa:	b08f      	sub	sp, #60	; 0x3c
 80106fc:	4604      	mov	r4, r0
 80106fe:	460d      	mov	r5, r1
 8010700:	f000 f954 	bl	80109ac <uxr_session_header_offset>
 8010704:	2300      	movs	r3, #0
 8010706:	2210      	movs	r2, #16
 8010708:	9000      	str	r0, [sp, #0]
 801070a:	a902      	add	r1, sp, #8
 801070c:	a806      	add	r0, sp, #24
 801070e:	f7fe fce9 	bl	800f0e4 <ucdr_init_buffer_origin_offset>
 8010712:	a906      	add	r1, sp, #24
 8010714:	4620      	mov	r0, r4
 8010716:	f000 f897 	bl	8010848 <uxr_buffer_delete_session>
 801071a:	2200      	movs	r2, #0
 801071c:	4611      	mov	r1, r2
 801071e:	9b06      	ldr	r3, [sp, #24]
 8010720:	4620      	mov	r0, r4
 8010722:	f000 f8eb 	bl	80108fc <uxr_stamp_session_header>
 8010726:	a806      	add	r0, sp, #24
 8010728:	f7fe fd1a 	bl	800f160 <ucdr_buffer_length>
 801072c:	462b      	mov	r3, r5
 801072e:	4602      	mov	r2, r0
 8010730:	a902      	add	r1, sp, #8
 8010732:	4620      	mov	r0, r4
 8010734:	f7ff ff0a 	bl	801054c <wait_session_status>
 8010738:	b118      	cbz	r0, 8010742 <uxr_delete_session_retries+0x4a>
 801073a:	7960      	ldrb	r0, [r4, #5]
 801073c:	fab0 f080 	clz	r0, r0
 8010740:	0940      	lsrs	r0, r0, #5
 8010742:	b00f      	add	sp, #60	; 0x3c
 8010744:	bd30      	pop	{r4, r5, pc}
 8010746:	bf00      	nop

08010748 <uxr_prepare_stream_to_write_submessage>:
 8010748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801074c:	b082      	sub	sp, #8
 801074e:	4682      	mov	sl, r0
 8010750:	4610      	mov	r0, r2
 8010752:	4615      	mov	r5, r2
 8010754:	461e      	mov	r6, r3
 8010756:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 801075a:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 801075e:	9101      	str	r1, [sp, #4]
 8010760:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8010764:	f000 fad4 	bl	8010d10 <uxr_submessage_padding>
 8010768:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801076c:	f105 0904 	add.w	r9, r5, #4
 8010770:	2b01      	cmp	r3, #1
 8010772:	4481      	add	r9, r0
 8010774:	d01d      	beq.n	80107b2 <uxr_prepare_stream_to_write_submessage+0x6a>
 8010776:	2b02      	cmp	r3, #2
 8010778:	d116      	bne.n	80107a8 <uxr_prepare_stream_to_write_submessage+0x60>
 801077a:	4621      	mov	r1, r4
 801077c:	f10a 0008 	add.w	r0, sl, #8
 8010780:	f000 fa4e 	bl	8010c20 <uxr_get_output_reliable_stream>
 8010784:	4604      	mov	r4, r0
 8010786:	b158      	cbz	r0, 80107a0 <uxr_prepare_stream_to_write_submessage+0x58>
 8010788:	4649      	mov	r1, r9
 801078a:	4632      	mov	r2, r6
 801078c:	f005 f8c4 	bl	8015918 <uxr_prepare_reliable_buffer_to_write>
 8010790:	4604      	mov	r4, r0
 8010792:	b12c      	cbz	r4, 80107a0 <uxr_prepare_stream_to_write_submessage+0x58>
 8010794:	4643      	mov	r3, r8
 8010796:	b2aa      	uxth	r2, r5
 8010798:	4639      	mov	r1, r7
 801079a:	4630      	mov	r0, r6
 801079c:	f000 fa78 	bl	8010c90 <uxr_buffer_submessage_header>
 80107a0:	4620      	mov	r0, r4
 80107a2:	b002      	add	sp, #8
 80107a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107a8:	2400      	movs	r4, #0
 80107aa:	4620      	mov	r0, r4
 80107ac:	b002      	add	sp, #8
 80107ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107b2:	4621      	mov	r1, r4
 80107b4:	f10a 0008 	add.w	r0, sl, #8
 80107b8:	f000 fa2a 	bl	8010c10 <uxr_get_output_best_effort_stream>
 80107bc:	4604      	mov	r4, r0
 80107be:	2800      	cmp	r0, #0
 80107c0:	d0ee      	beq.n	80107a0 <uxr_prepare_stream_to_write_submessage+0x58>
 80107c2:	4649      	mov	r1, r9
 80107c4:	4632      	mov	r2, r6
 80107c6:	f004 ffe3 	bl	8015790 <uxr_prepare_best_effort_buffer_to_write>
 80107ca:	4604      	mov	r4, r0
 80107cc:	e7e1      	b.n	8010792 <uxr_prepare_stream_to_write_submessage+0x4a>
 80107ce:	bf00      	nop

080107d0 <uxr_init_session_info>:
 80107d0:	b470      	push	{r4, r5, r6}
 80107d2:	7102      	strb	r2, [r0, #4]
 80107d4:	0e16      	lsrs	r6, r2, #24
 80107d6:	f3c2 4507 	ubfx	r5, r2, #16, #8
 80107da:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80107de:	23ff      	movs	r3, #255	; 0xff
 80107e0:	2209      	movs	r2, #9
 80107e2:	7046      	strb	r6, [r0, #1]
 80107e4:	7085      	strb	r5, [r0, #2]
 80107e6:	70c4      	strb	r4, [r0, #3]
 80107e8:	7001      	strb	r1, [r0, #0]
 80107ea:	bc70      	pop	{r4, r5, r6}
 80107ec:	80c2      	strh	r2, [r0, #6]
 80107ee:	7143      	strb	r3, [r0, #5]
 80107f0:	4770      	bx	lr
 80107f2:	bf00      	nop

080107f4 <uxr_buffer_create_session>:
 80107f4:	b570      	push	{r4, r5, r6, lr}
 80107f6:	b088      	sub	sp, #32
 80107f8:	2300      	movs	r3, #0
 80107fa:	4d12      	ldr	r5, [pc, #72]	; (8010844 <uxr_buffer_create_session+0x50>)
 80107fc:	9307      	str	r3, [sp, #28]
 80107fe:	f8ad 201c 	strh.w	r2, [sp, #28]
 8010802:	7802      	ldrb	r2, [r0, #0]
 8010804:	9303      	str	r3, [sp, #12]
 8010806:	460c      	mov	r4, r1
 8010808:	f88d 200c 	strb.w	r2, [sp, #12]
 801080c:	2101      	movs	r1, #1
 801080e:	682a      	ldr	r2, [r5, #0]
 8010810:	f8d0 6001 	ldr.w	r6, [r0, #1]
 8010814:	88ad      	ldrh	r5, [r5, #4]
 8010816:	80c1      	strh	r1, [r0, #6]
 8010818:	f8ad 1004 	strh.w	r1, [sp, #4]
 801081c:	9200      	str	r2, [sp, #0]
 801081e:	4619      	mov	r1, r3
 8010820:	2210      	movs	r2, #16
 8010822:	4620      	mov	r0, r4
 8010824:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8010828:	9306      	str	r3, [sp, #24]
 801082a:	f88d 300d 	strb.w	r3, [sp, #13]
 801082e:	9602      	str	r6, [sp, #8]
 8010830:	f8ad 5006 	strh.w	r5, [sp, #6]
 8010834:	f000 fa2c 	bl	8010c90 <uxr_buffer_submessage_header>
 8010838:	4620      	mov	r0, r4
 801083a:	4669      	mov	r1, sp
 801083c:	f001 fa50 	bl	8011ce0 <uxr_serialize_CREATE_CLIENT_Payload>
 8010840:	b008      	add	sp, #32
 8010842:	bd70      	pop	{r4, r5, r6, pc}
 8010844:	080187b0 	.word	0x080187b0

08010848 <uxr_buffer_delete_session>:
 8010848:	b530      	push	{r4, r5, lr}
 801084a:	4b0c      	ldr	r3, [pc, #48]	; (801087c <uxr_buffer_delete_session+0x34>)
 801084c:	b083      	sub	sp, #12
 801084e:	891b      	ldrh	r3, [r3, #8]
 8010850:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010854:	2202      	movs	r2, #2
 8010856:	460c      	mov	r4, r1
 8010858:	80c2      	strh	r2, [r0, #6]
 801085a:	2300      	movs	r3, #0
 801085c:	2204      	movs	r2, #4
 801085e:	4608      	mov	r0, r1
 8010860:	f44f 7500 	mov.w	r5, #512	; 0x200
 8010864:	2103      	movs	r1, #3
 8010866:	f8ad 5004 	strh.w	r5, [sp, #4]
 801086a:	f000 fa11 	bl	8010c90 <uxr_buffer_submessage_header>
 801086e:	4620      	mov	r0, r4
 8010870:	a901      	add	r1, sp, #4
 8010872:	f001 fae3 	bl	8011e3c <uxr_serialize_DELETE_Payload>
 8010876:	b003      	add	sp, #12
 8010878:	bd30      	pop	{r4, r5, pc}
 801087a:	bf00      	nop
 801087c:	080187b0 	.word	0x080187b0

08010880 <uxr_read_create_session_status>:
 8010880:	b510      	push	{r4, lr}
 8010882:	b088      	sub	sp, #32
 8010884:	4604      	mov	r4, r0
 8010886:	4608      	mov	r0, r1
 8010888:	a901      	add	r1, sp, #4
 801088a:	f001 fae7 	bl	8011e5c <uxr_deserialize_STATUS_AGENT_Payload>
 801088e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010892:	7163      	strb	r3, [r4, #5]
 8010894:	b008      	add	sp, #32
 8010896:	bd10      	pop	{r4, pc}

08010898 <uxr_read_delete_session_status>:
 8010898:	b510      	push	{r4, lr}
 801089a:	4604      	mov	r4, r0
 801089c:	b084      	sub	sp, #16
 801089e:	4608      	mov	r0, r1
 80108a0:	a902      	add	r1, sp, #8
 80108a2:	f001 fb0b 	bl	8011ebc <uxr_deserialize_STATUS_Payload>
 80108a6:	88e3      	ldrh	r3, [r4, #6]
 80108a8:	2b02      	cmp	r3, #2
 80108aa:	d001      	beq.n	80108b0 <uxr_read_delete_session_status+0x18>
 80108ac:	b004      	add	sp, #16
 80108ae:	bd10      	pop	{r4, pc}
 80108b0:	f10d 000a 	add.w	r0, sp, #10
 80108b4:	f7fe ff00 	bl	800f6b8 <uxr_object_id_from_raw>
 80108b8:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80108bc:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80108c0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80108c4:	b29b      	uxth	r3, r3
 80108c6:	2b02      	cmp	r3, #2
 80108c8:	bf04      	itt	eq
 80108ca:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 80108ce:	7163      	strbeq	r3, [r4, #5]
 80108d0:	b004      	add	sp, #16
 80108d2:	bd10      	pop	{r4, pc}

080108d4 <uxr_stamp_create_session_header>:
 80108d4:	b510      	push	{r4, lr}
 80108d6:	4604      	mov	r4, r0
 80108d8:	b08a      	sub	sp, #40	; 0x28
 80108da:	a802      	add	r0, sp, #8
 80108dc:	2208      	movs	r2, #8
 80108de:	f7fe fc13 	bl	800f108 <ucdr_init_buffer>
 80108e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80108e6:	9400      	str	r4, [sp, #0]
 80108e8:	2300      	movs	r3, #0
 80108ea:	a802      	add	r0, sp, #8
 80108ec:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80108f0:	461a      	mov	r2, r3
 80108f2:	f000 fbcb 	bl	801108c <uxr_serialize_message_header>
 80108f6:	b00a      	add	sp, #40	; 0x28
 80108f8:	bd10      	pop	{r4, pc}
 80108fa:	bf00      	nop

080108fc <uxr_stamp_session_header>:
 80108fc:	b570      	push	{r4, r5, r6, lr}
 80108fe:	4604      	mov	r4, r0
 8010900:	b08c      	sub	sp, #48	; 0x30
 8010902:	460d      	mov	r5, r1
 8010904:	4616      	mov	r6, r2
 8010906:	4619      	mov	r1, r3
 8010908:	a804      	add	r0, sp, #16
 801090a:	2208      	movs	r2, #8
 801090c:	9603      	str	r6, [sp, #12]
 801090e:	f7fe fbfb 	bl	800f108 <ucdr_init_buffer>
 8010912:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010916:	9b03      	ldr	r3, [sp, #12]
 8010918:	9400      	str	r4, [sp, #0]
 801091a:	462a      	mov	r2, r5
 801091c:	a804      	add	r0, sp, #16
 801091e:	f000 fbb5 	bl	801108c <uxr_serialize_message_header>
 8010922:	b00c      	add	sp, #48	; 0x30
 8010924:	bd70      	pop	{r4, r5, r6, pc}
 8010926:	bf00      	nop

08010928 <uxr_read_session_header>:
 8010928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801092c:	4607      	mov	r7, r0
 801092e:	b084      	sub	sp, #16
 8010930:	4608      	mov	r0, r1
 8010932:	460c      	mov	r4, r1
 8010934:	4615      	mov	r5, r2
 8010936:	461e      	mov	r6, r3
 8010938:	f7fe fc16 	bl	800f168 <ucdr_buffer_remaining>
 801093c:	2808      	cmp	r0, #8
 801093e:	d803      	bhi.n	8010948 <uxr_read_session_header+0x20>
 8010940:	2000      	movs	r0, #0
 8010942:	b004      	add	sp, #16
 8010944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010948:	f10d 080c 	add.w	r8, sp, #12
 801094c:	4633      	mov	r3, r6
 801094e:	462a      	mov	r2, r5
 8010950:	4620      	mov	r0, r4
 8010952:	f8cd 8000 	str.w	r8, [sp]
 8010956:	f10d 010b 	add.w	r1, sp, #11
 801095a:	f000 fbb5 	bl	80110c8 <uxr_deserialize_message_header>
 801095e:	783a      	ldrb	r2, [r7, #0]
 8010960:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8010964:	4293      	cmp	r3, r2
 8010966:	d1eb      	bne.n	8010940 <uxr_read_session_header+0x18>
 8010968:	061b      	lsls	r3, r3, #24
 801096a:	d41c      	bmi.n	80109a6 <uxr_read_session_header+0x7e>
 801096c:	f898 2000 	ldrb.w	r2, [r8]
 8010970:	787b      	ldrb	r3, [r7, #1]
 8010972:	429a      	cmp	r2, r3
 8010974:	d003      	beq.n	801097e <uxr_read_session_header+0x56>
 8010976:	2001      	movs	r0, #1
 8010978:	f080 0001 	eor.w	r0, r0, #1
 801097c:	e7e1      	b.n	8010942 <uxr_read_session_header+0x1a>
 801097e:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8010982:	78bb      	ldrb	r3, [r7, #2]
 8010984:	429a      	cmp	r2, r3
 8010986:	f107 0102 	add.w	r1, r7, #2
 801098a:	d1f4      	bne.n	8010976 <uxr_read_session_header+0x4e>
 801098c:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8010990:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010994:	429a      	cmp	r2, r3
 8010996:	d1ee      	bne.n	8010976 <uxr_read_session_header+0x4e>
 8010998:	784b      	ldrb	r3, [r1, #1]
 801099a:	f89d 200f 	ldrb.w	r2, [sp, #15]
 801099e:	429a      	cmp	r2, r3
 80109a0:	d1e9      	bne.n	8010976 <uxr_read_session_header+0x4e>
 80109a2:	2000      	movs	r0, #0
 80109a4:	e7e8      	b.n	8010978 <uxr_read_session_header+0x50>
 80109a6:	2001      	movs	r0, #1
 80109a8:	e7cb      	b.n	8010942 <uxr_read_session_header+0x1a>
 80109aa:	bf00      	nop

080109ac <uxr_session_header_offset>:
 80109ac:	f990 3000 	ldrsb.w	r3, [r0]
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	bfac      	ite	ge
 80109b4:	2008      	movge	r0, #8
 80109b6:	2004      	movlt	r0, #4
 80109b8:	4770      	bx	lr
 80109ba:	bf00      	nop

080109bc <uxr_init_base_object_request>:
 80109bc:	b530      	push	{r4, r5, lr}
 80109be:	88c3      	ldrh	r3, [r0, #6]
 80109c0:	b083      	sub	sp, #12
 80109c2:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 80109c6:	9101      	str	r1, [sp, #4]
 80109c8:	f1a3 010a 	sub.w	r1, r3, #10
 80109cc:	b289      	uxth	r1, r1
 80109ce:	42a1      	cmp	r1, r4
 80109d0:	d80e      	bhi.n	80109f0 <uxr_init_base_object_request+0x34>
 80109d2:	3301      	adds	r3, #1
 80109d4:	b29c      	uxth	r4, r3
 80109d6:	f3c3 2507 	ubfx	r5, r3, #8, #8
 80109da:	b2db      	uxtb	r3, r3
 80109dc:	80c4      	strh	r4, [r0, #6]
 80109de:	1c91      	adds	r1, r2, #2
 80109e0:	9801      	ldr	r0, [sp, #4]
 80109e2:	7015      	strb	r5, [r2, #0]
 80109e4:	7053      	strb	r3, [r2, #1]
 80109e6:	f7fe fe7b 	bl	800f6e0 <uxr_object_id_to_raw>
 80109ea:	4620      	mov	r0, r4
 80109ec:	b003      	add	sp, #12
 80109ee:	bd30      	pop	{r4, r5, pc}
 80109f0:	230a      	movs	r3, #10
 80109f2:	461c      	mov	r4, r3
 80109f4:	2500      	movs	r5, #0
 80109f6:	e7f1      	b.n	80109dc <uxr_init_base_object_request+0x20>

080109f8 <uxr_parse_base_object_request>:
 80109f8:	b570      	push	{r4, r5, r6, lr}
 80109fa:	4604      	mov	r4, r0
 80109fc:	3002      	adds	r0, #2
 80109fe:	460d      	mov	r5, r1
 8010a00:	4616      	mov	r6, r2
 8010a02:	f7fe fe59 	bl	800f6b8 <uxr_object_id_from_raw>
 8010a06:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8010a0a:	8028      	strh	r0, [r5, #0]
 8010a0c:	806b      	strh	r3, [r5, #2]
 8010a0e:	7822      	ldrb	r2, [r4, #0]
 8010a10:	7863      	ldrb	r3, [r4, #1]
 8010a12:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8010a16:	8033      	strh	r3, [r6, #0]
 8010a18:	bd70      	pop	{r4, r5, r6, pc}
 8010a1a:	bf00      	nop

08010a1c <uxr_stream_id>:
 8010a1c:	b410      	push	{r4}
 8010a1e:	2901      	cmp	r1, #1
 8010a20:	b083      	sub	sp, #12
 8010a22:	d01f      	beq.n	8010a64 <uxr_stream_id+0x48>
 8010a24:	2902      	cmp	r1, #2
 8010a26:	f04f 0400 	mov.w	r4, #0
 8010a2a:	d01e      	beq.n	8010a6a <uxr_stream_id+0x4e>
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	f364 0307 	bfi	r3, r4, #0, #8
 8010a32:	f360 230f 	bfi	r3, r0, #8, #8
 8010a36:	f361 4317 	bfi	r3, r1, #16, #8
 8010a3a:	f362 631f 	bfi	r3, r2, #24, #8
 8010a3e:	b2da      	uxtb	r2, r3
 8010a40:	2000      	movs	r0, #0
 8010a42:	f362 0007 	bfi	r0, r2, #0, #8
 8010a46:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8010a4a:	f362 200f 	bfi	r0, r2, #8, #8
 8010a4e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8010a52:	f362 4017 	bfi	r0, r2, #16, #8
 8010a56:	0e1b      	lsrs	r3, r3, #24
 8010a58:	f363 601f 	bfi	r0, r3, #24, #8
 8010a5c:	b003      	add	sp, #12
 8010a5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010a62:	4770      	bx	lr
 8010a64:	1c44      	adds	r4, r0, #1
 8010a66:	b2e4      	uxtb	r4, r4
 8010a68:	e7e0      	b.n	8010a2c <uxr_stream_id+0x10>
 8010a6a:	f080 0480 	eor.w	r4, r0, #128	; 0x80
 8010a6e:	e7dd      	b.n	8010a2c <uxr_stream_id+0x10>

08010a70 <uxr_stream_id_from_raw>:
 8010a70:	b410      	push	{r4}
 8010a72:	b083      	sub	sp, #12
 8010a74:	b128      	cbz	r0, 8010a82 <uxr_stream_id_from_raw+0x12>
 8010a76:	0603      	lsls	r3, r0, #24
 8010a78:	d421      	bmi.n	8010abe <uxr_stream_id_from_raw+0x4e>
 8010a7a:	1e42      	subs	r2, r0, #1
 8010a7c:	b2d2      	uxtb	r2, r2
 8010a7e:	2401      	movs	r4, #1
 8010a80:	e001      	b.n	8010a86 <uxr_stream_id_from_raw+0x16>
 8010a82:	4604      	mov	r4, r0
 8010a84:	4602      	mov	r2, r0
 8010a86:	2300      	movs	r3, #0
 8010a88:	f360 0307 	bfi	r3, r0, #0, #8
 8010a8c:	f362 230f 	bfi	r3, r2, #8, #8
 8010a90:	f364 4317 	bfi	r3, r4, #16, #8
 8010a94:	f361 631f 	bfi	r3, r1, #24, #8
 8010a98:	b2da      	uxtb	r2, r3
 8010a9a:	2000      	movs	r0, #0
 8010a9c:	f362 0007 	bfi	r0, r2, #0, #8
 8010aa0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8010aa4:	f362 200f 	bfi	r0, r2, #8, #8
 8010aa8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8010aac:	f362 4017 	bfi	r0, r2, #16, #8
 8010ab0:	0e1b      	lsrs	r3, r3, #24
 8010ab2:	f363 601f 	bfi	r0, r3, #24, #8
 8010ab6:	b003      	add	sp, #12
 8010ab8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010abc:	4770      	bx	lr
 8010abe:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 8010ac2:	2402      	movs	r4, #2
 8010ac4:	e7df      	b.n	8010a86 <uxr_stream_id_from_raw+0x16>
 8010ac6:	bf00      	nop

08010ac8 <uxr_init_stream_storage>:
 8010ac8:	2300      	movs	r3, #0
 8010aca:	7403      	strb	r3, [r0, #16]
 8010acc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8010ad0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8010ad4:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 8010ad8:	4770      	bx	lr
 8010ada:	bf00      	nop

08010adc <uxr_reset_stream_storage>:
 8010adc:	b570      	push	{r4, r5, r6, lr}
 8010ade:	7c03      	ldrb	r3, [r0, #16]
 8010ae0:	4604      	mov	r4, r0
 8010ae2:	b153      	cbz	r3, 8010afa <uxr_reset_stream_storage+0x1e>
 8010ae4:	4606      	mov	r6, r0
 8010ae6:	2500      	movs	r5, #0
 8010ae8:	4630      	mov	r0, r6
 8010aea:	f004 fe4b 	bl	8015784 <uxr_reset_output_best_effort_stream>
 8010aee:	7c23      	ldrb	r3, [r4, #16]
 8010af0:	3501      	adds	r5, #1
 8010af2:	42ab      	cmp	r3, r5
 8010af4:	f106 0610 	add.w	r6, r6, #16
 8010af8:	d8f6      	bhi.n	8010ae8 <uxr_reset_stream_storage+0xc>
 8010afa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8010afe:	b163      	cbz	r3, 8010b1a <uxr_reset_stream_storage+0x3e>
 8010b00:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010b04:	2500      	movs	r5, #0
 8010b06:	4630      	mov	r0, r6
 8010b08:	f004 fc48 	bl	801539c <uxr_reset_input_best_effort_stream>
 8010b0c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8010b10:	3501      	adds	r5, #1
 8010b12:	42ab      	cmp	r3, r5
 8010b14:	f106 0602 	add.w	r6, r6, #2
 8010b18:	d8f5      	bhi.n	8010b06 <uxr_reset_stream_storage+0x2a>
 8010b1a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8010b1e:	b163      	cbz	r3, 8010b3a <uxr_reset_stream_storage+0x5e>
 8010b20:	f104 0618 	add.w	r6, r4, #24
 8010b24:	2500      	movs	r5, #0
 8010b26:	4630      	mov	r0, r6
 8010b28:	f004 fecc 	bl	80158c4 <uxr_reset_output_reliable_stream>
 8010b2c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8010b30:	3501      	adds	r5, #1
 8010b32:	42ab      	cmp	r3, r5
 8010b34:	f106 0628 	add.w	r6, r6, #40	; 0x28
 8010b38:	d8f5      	bhi.n	8010b26 <uxr_reset_stream_storage+0x4a>
 8010b3a:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8010b3e:	b163      	cbz	r3, 8010b5a <uxr_reset_stream_storage+0x7e>
 8010b40:	f104 0648 	add.w	r6, r4, #72	; 0x48
 8010b44:	2500      	movs	r5, #0
 8010b46:	4630      	mov	r0, r6
 8010b48:	f004 fc90 	bl	801546c <uxr_reset_input_reliable_stream>
 8010b4c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8010b50:	3501      	adds	r5, #1
 8010b52:	42ab      	cmp	r3, r5
 8010b54:	f106 0618 	add.w	r6, r6, #24
 8010b58:	d8f5      	bhi.n	8010b46 <uxr_reset_stream_storage+0x6a>
 8010b5a:	bd70      	pop	{r4, r5, r6, pc}

08010b5c <uxr_add_output_best_effort_buffer>:
 8010b5c:	b530      	push	{r4, r5, lr}
 8010b5e:	7c04      	ldrb	r4, [r0, #16]
 8010b60:	1c65      	adds	r5, r4, #1
 8010b62:	b083      	sub	sp, #12
 8010b64:	7405      	strb	r5, [r0, #16]
 8010b66:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8010b6a:	f004 fdff 	bl	801576c <uxr_init_output_best_effort_stream>
 8010b6e:	2201      	movs	r2, #1
 8010b70:	4620      	mov	r0, r4
 8010b72:	4611      	mov	r1, r2
 8010b74:	b003      	add	sp, #12
 8010b76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010b7a:	f7ff bf4f 	b.w	8010a1c <uxr_stream_id>
 8010b7e:	bf00      	nop

08010b80 <uxr_add_output_reliable_buffer>:
 8010b80:	b570      	push	{r4, r5, r6, lr}
 8010b82:	b084      	sub	sp, #16
 8010b84:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8010b88:	f89d 6020 	ldrb.w	r6, [sp, #32]
 8010b8c:	9600      	str	r6, [sp, #0]
 8010b8e:	2528      	movs	r5, #40	; 0x28
 8010b90:	1c66      	adds	r6, r4, #1
 8010b92:	fb05 0504 	mla	r5, r5, r4, r0
 8010b96:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
 8010b9a:	f105 0018 	add.w	r0, r5, #24
 8010b9e:	f004 fe5f 	bl	8015860 <uxr_init_output_reliable_stream>
 8010ba2:	4620      	mov	r0, r4
 8010ba4:	2201      	movs	r2, #1
 8010ba6:	2102      	movs	r1, #2
 8010ba8:	b004      	add	sp, #16
 8010baa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010bae:	f7ff bf35 	b.w	8010a1c <uxr_stream_id>
 8010bb2:	bf00      	nop

08010bb4 <uxr_add_input_best_effort_buffer>:
 8010bb4:	b510      	push	{r4, lr}
 8010bb6:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 8010bba:	1c62      	adds	r2, r4, #1
 8010bbc:	f104 0321 	add.w	r3, r4, #33	; 0x21
 8010bc0:	b082      	sub	sp, #8
 8010bc2:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 8010bc6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8010bca:	f004 fbe3 	bl	8015394 <uxr_init_input_best_effort_stream>
 8010bce:	4620      	mov	r0, r4
 8010bd0:	2200      	movs	r2, #0
 8010bd2:	2101      	movs	r1, #1
 8010bd4:	b002      	add	sp, #8
 8010bd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010bda:	f7ff bf1f 	b.w	8010a1c <uxr_stream_id>
 8010bde:	bf00      	nop

08010be0 <uxr_add_input_reliable_buffer>:
 8010be0:	b570      	push	{r4, r5, r6, lr}
 8010be2:	b084      	sub	sp, #16
 8010be4:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 8010be8:	9e08      	ldr	r6, [sp, #32]
 8010bea:	9600      	str	r6, [sp, #0]
 8010bec:	2518      	movs	r5, #24
 8010bee:	1c66      	adds	r6, r4, #1
 8010bf0:	fb05 0504 	mla	r5, r5, r4, r0
 8010bf4:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
 8010bf8:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8010bfc:	f004 fc12 	bl	8015424 <uxr_init_input_reliable_stream>
 8010c00:	4620      	mov	r0, r4
 8010c02:	2200      	movs	r2, #0
 8010c04:	2102      	movs	r1, #2
 8010c06:	b004      	add	sp, #16
 8010c08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010c0c:	f7ff bf06 	b.w	8010a1c <uxr_stream_id>

08010c10 <uxr_get_output_best_effort_stream>:
 8010c10:	7c03      	ldrb	r3, [r0, #16]
 8010c12:	428b      	cmp	r3, r1
 8010c14:	bf8c      	ite	hi
 8010c16:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8010c1a:	2000      	movls	r0, #0
 8010c1c:	4770      	bx	lr
 8010c1e:	bf00      	nop

08010c20 <uxr_get_output_reliable_stream>:
 8010c20:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8010c24:	428b      	cmp	r3, r1
 8010c26:	bf83      	ittte	hi
 8010c28:	2328      	movhi	r3, #40	; 0x28
 8010c2a:	fb03 0101 	mlahi	r1, r3, r1, r0
 8010c2e:	f101 0018 	addhi.w	r0, r1, #24
 8010c32:	2000      	movls	r0, #0
 8010c34:	4770      	bx	lr
 8010c36:	bf00      	nop

08010c38 <uxr_get_input_best_effort_stream>:
 8010c38:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8010c3c:	428b      	cmp	r3, r1
 8010c3e:	bf86      	itte	hi
 8010c40:	3121      	addhi	r1, #33	; 0x21
 8010c42:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8010c46:	2000      	movls	r0, #0
 8010c48:	4770      	bx	lr
 8010c4a:	bf00      	nop

08010c4c <uxr_get_input_reliable_stream>:
 8010c4c:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8010c50:	428b      	cmp	r3, r1
 8010c52:	bf83      	ittte	hi
 8010c54:	2318      	movhi	r3, #24
 8010c56:	fb03 0101 	mlahi	r1, r3, r1, r0
 8010c5a:	f101 0048 	addhi.w	r0, r1, #72	; 0x48
 8010c5e:	2000      	movls	r0, #0
 8010c60:	4770      	bx	lr
 8010c62:	bf00      	nop

08010c64 <uxr_output_streams_confirmed>:
 8010c64:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8010c68:	b183      	cbz	r3, 8010c8c <uxr_output_streams_confirmed+0x28>
 8010c6a:	b570      	push	{r4, r5, r6, lr}
 8010c6c:	4606      	mov	r6, r0
 8010c6e:	f100 0518 	add.w	r5, r0, #24
 8010c72:	2400      	movs	r4, #0
 8010c74:	e001      	b.n	8010c7a <uxr_output_streams_confirmed+0x16>
 8010c76:	3528      	adds	r5, #40	; 0x28
 8010c78:	b138      	cbz	r0, 8010c8a <uxr_output_streams_confirmed+0x26>
 8010c7a:	4628      	mov	r0, r5
 8010c7c:	f005 f886 	bl	8015d8c <uxr_is_output_up_to_date>
 8010c80:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 8010c84:	3401      	adds	r4, #1
 8010c86:	42a3      	cmp	r3, r4
 8010c88:	d8f5      	bhi.n	8010c76 <uxr_output_streams_confirmed+0x12>
 8010c8a:	bd70      	pop	{r4, r5, r6, pc}
 8010c8c:	2001      	movs	r0, #1
 8010c8e:	4770      	bx	lr

08010c90 <uxr_buffer_submessage_header>:
 8010c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c92:	4604      	mov	r4, r0
 8010c94:	460e      	mov	r6, r1
 8010c96:	2104      	movs	r1, #4
 8010c98:	4615      	mov	r5, r2
 8010c9a:	461f      	mov	r7, r3
 8010c9c:	f7fe fa4e 	bl	800f13c <ucdr_align_to>
 8010ca0:	2301      	movs	r3, #1
 8010ca2:	ea47 0203 	orr.w	r2, r7, r3
 8010ca6:	4631      	mov	r1, r6
 8010ca8:	7523      	strb	r3, [r4, #20]
 8010caa:	4620      	mov	r0, r4
 8010cac:	462b      	mov	r3, r5
 8010cae:	f000 fa2b 	bl	8011108 <uxr_serialize_submessage_header>
 8010cb2:	4620      	mov	r0, r4
 8010cb4:	f7fe fa58 	bl	800f168 <ucdr_buffer_remaining>
 8010cb8:	42a8      	cmp	r0, r5
 8010cba:	bf34      	ite	cc
 8010cbc:	2000      	movcc	r0, #0
 8010cbe:	2001      	movcs	r0, #1
 8010cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010cc2:	bf00      	nop

08010cc4 <uxr_read_submessage_header>:
 8010cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cc8:	4604      	mov	r4, r0
 8010cca:	460d      	mov	r5, r1
 8010ccc:	2104      	movs	r1, #4
 8010cce:	4616      	mov	r6, r2
 8010cd0:	4698      	mov	r8, r3
 8010cd2:	f7fe fa33 	bl	800f13c <ucdr_align_to>
 8010cd6:	4620      	mov	r0, r4
 8010cd8:	f7fe fa46 	bl	800f168 <ucdr_buffer_remaining>
 8010cdc:	2803      	cmp	r0, #3
 8010cde:	bf8c      	ite	hi
 8010ce0:	2701      	movhi	r7, #1
 8010ce2:	2700      	movls	r7, #0
 8010ce4:	d802      	bhi.n	8010cec <uxr_read_submessage_header+0x28>
 8010ce6:	4638      	mov	r0, r7
 8010ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cec:	4633      	mov	r3, r6
 8010cee:	4642      	mov	r2, r8
 8010cf0:	4620      	mov	r0, r4
 8010cf2:	4629      	mov	r1, r5
 8010cf4:	f000 fa1c 	bl	8011130 <uxr_deserialize_submessage_header>
 8010cf8:	f898 3000 	ldrb.w	r3, [r8]
 8010cfc:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 8010d00:	f003 0301 	and.w	r3, r3, #1
 8010d04:	f888 2000 	strb.w	r2, [r8]
 8010d08:	7523      	strb	r3, [r4, #20]
 8010d0a:	4638      	mov	r0, r7
 8010d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010d10 <uxr_submessage_padding>:
 8010d10:	f010 0003 	ands.w	r0, r0, #3
 8010d14:	bf18      	it	ne
 8010d16:	f1c0 0004 	rsbne	r0, r0, #4
 8010d1a:	4770      	bx	lr

08010d1c <uxr_millis>:
 8010d1c:	b510      	push	{r4, lr}
 8010d1e:	b084      	sub	sp, #16
 8010d20:	4669      	mov	r1, sp
 8010d22:	2001      	movs	r0, #1
 8010d24:	f7f1 ffb8 	bl	8002c98 <clock_gettime>
 8010d28:	e9dd 2400 	ldrd	r2, r4, [sp]
 8010d2c:	4907      	ldr	r1, [pc, #28]	; (8010d4c <uxr_millis+0x30>)
 8010d2e:	9802      	ldr	r0, [sp, #8]
 8010d30:	fba2 2301 	umull	r2, r3, r2, r1
 8010d34:	fb01 3304 	mla	r3, r1, r4, r3
 8010d38:	4604      	mov	r4, r0
 8010d3a:	1810      	adds	r0, r2, r0
 8010d3c:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 8010d40:	4a03      	ldr	r2, [pc, #12]	; (8010d50 <uxr_millis+0x34>)
 8010d42:	2300      	movs	r3, #0
 8010d44:	f7ef ff5a 	bl	8000bfc <__aeabi_ldivmod>
 8010d48:	b004      	add	sp, #16
 8010d4a:	bd10      	pop	{r4, pc}
 8010d4c:	3b9aca00 	.word	0x3b9aca00
 8010d50:	000f4240 	.word	0x000f4240

08010d54 <uxr_nanos>:
 8010d54:	b510      	push	{r4, lr}
 8010d56:	b084      	sub	sp, #16
 8010d58:	4669      	mov	r1, sp
 8010d5a:	2001      	movs	r0, #1
 8010d5c:	f7f1 ff9c 	bl	8002c98 <clock_gettime>
 8010d60:	e9dd 2400 	ldrd	r2, r4, [sp]
 8010d64:	4905      	ldr	r1, [pc, #20]	; (8010d7c <uxr_nanos+0x28>)
 8010d66:	9802      	ldr	r0, [sp, #8]
 8010d68:	fba2 2301 	umull	r2, r3, r2, r1
 8010d6c:	fb01 3304 	mla	r3, r1, r4, r3
 8010d70:	4604      	mov	r4, r0
 8010d72:	1810      	adds	r0, r2, r0
 8010d74:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 8010d78:	b004      	add	sp, #16
 8010d7a:	bd10      	pop	{r4, pc}
 8010d7c:	3b9aca00 	.word	0x3b9aca00

08010d80 <on_full_output_buffer_fragmented>:
 8010d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d84:	460c      	mov	r4, r1
 8010d86:	b08a      	sub	sp, #40	; 0x28
 8010d88:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 8010d8c:	4606      	mov	r6, r0
 8010d8e:	f104 0008 	add.w	r0, r4, #8
 8010d92:	f7ff ff45 	bl	8010c20 <uxr_get_output_reliable_stream>
 8010d96:	4605      	mov	r5, r0
 8010d98:	f005 f802 	bl	8015da0 <get_available_free_slots>
 8010d9c:	b968      	cbnz	r0, 8010dba <on_full_output_buffer_fragmented+0x3a>
 8010d9e:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 8010da2:	4620      	mov	r0, r4
 8010da4:	4798      	blx	r3
 8010da6:	b918      	cbnz	r0, 8010db0 <on_full_output_buffer_fragmented+0x30>
 8010da8:	2001      	movs	r0, #1
 8010daa:	b00a      	add	sp, #40	; 0x28
 8010dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010db0:	4628      	mov	r0, r5
 8010db2:	f004 fff5 	bl	8015da0 <get_available_free_slots>
 8010db6:	2800      	cmp	r0, #0
 8010db8:	d0f6      	beq.n	8010da8 <on_full_output_buffer_fragmented+0x28>
 8010dba:	8928      	ldrh	r0, [r5, #8]
 8010dbc:	89eb      	ldrh	r3, [r5, #14]
 8010dbe:	7b2a      	ldrb	r2, [r5, #12]
 8010dc0:	fbb3 f1f0 	udiv	r1, r3, r0
 8010dc4:	f5c2 427f 	rsb	r2, r2, #65280	; 0xff00
 8010dc8:	fb00 3111 	mls	r1, r0, r1, r3
 8010dcc:	b28b      	uxth	r3, r1
 8010dce:	32fc      	adds	r2, #252	; 0xfc
 8010dd0:	6869      	ldr	r1, [r5, #4]
 8010dd2:	fbb1 f1f0 	udiv	r1, r1, r0
 8010dd6:	1f0f      	subs	r7, r1, #4
 8010dd8:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
 8010ddc:	fb01 f103 	mul.w	r1, r1, r3
 8010de0:	443a      	add	r2, r7
 8010de2:	682b      	ldr	r3, [r5, #0]
 8010de4:	fa1f f882 	uxth.w	r8, r2
 8010de8:	3104      	adds	r1, #4
 8010dea:	4419      	add	r1, r3
 8010dec:	eba0 0008 	sub.w	r0, r0, r8
 8010df0:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 8010df4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010df8:	9300      	str	r3, [sp, #0]
 8010dfa:	463a      	mov	r2, r7
 8010dfc:	2300      	movs	r3, #0
 8010dfe:	a802      	add	r0, sp, #8
 8010e00:	f7fe f970 	bl	800f0e4 <ucdr_init_buffer_origin_offset>
 8010e04:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8010e08:	f102 0308 	add.w	r3, r2, #8
 8010e0c:	42bb      	cmp	r3, r7
 8010e0e:	d927      	bls.n	8010e60 <on_full_output_buffer_fragmented+0xe0>
 8010e10:	4642      	mov	r2, r8
 8010e12:	2300      	movs	r3, #0
 8010e14:	210d      	movs	r1, #13
 8010e16:	a802      	add	r0, sp, #8
 8010e18:	f7ff ff3a 	bl	8010c90 <uxr_buffer_submessage_header>
 8010e1c:	8928      	ldrh	r0, [r5, #8]
 8010e1e:	89eb      	ldrh	r3, [r5, #14]
 8010e20:	fbb3 f1f0 	udiv	r1, r3, r0
 8010e24:	fb00 3111 	mls	r1, r0, r1, r3
 8010e28:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010e2c:	b289      	uxth	r1, r1
 8010e2e:	fbb3 f3f0 	udiv	r3, r3, r0
 8010e32:	fb03 f301 	mul.w	r3, r3, r1
 8010e36:	50d7      	str	r7, [r2, r3]
 8010e38:	89e8      	ldrh	r0, [r5, #14]
 8010e3a:	2101      	movs	r1, #1
 8010e3c:	f004 ffd0 	bl	8015de0 <uxr_seq_num_add>
 8010e40:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8010e44:	81e8      	strh	r0, [r5, #14]
 8010e46:	1a52      	subs	r2, r2, r1
 8010e48:	4630      	mov	r0, r6
 8010e4a:	f7fe f95d 	bl	800f108 <ucdr_init_buffer>
 8010e4e:	4630      	mov	r0, r6
 8010e50:	490f      	ldr	r1, [pc, #60]	; (8010e90 <on_full_output_buffer_fragmented+0x110>)
 8010e52:	4622      	mov	r2, r4
 8010e54:	f7fe f92e 	bl	800f0b4 <ucdr_set_on_full_buffer_callback>
 8010e58:	2000      	movs	r0, #0
 8010e5a:	b00a      	add	sp, #40	; 0x28
 8010e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e60:	b292      	uxth	r2, r2
 8010e62:	2302      	movs	r3, #2
 8010e64:	210d      	movs	r1, #13
 8010e66:	a802      	add	r0, sp, #8
 8010e68:	f7ff ff12 	bl	8010c90 <uxr_buffer_submessage_header>
 8010e6c:	8928      	ldrh	r0, [r5, #8]
 8010e6e:	89eb      	ldrh	r3, [r5, #14]
 8010e70:	fbb3 f2f0 	udiv	r2, r3, r0
 8010e74:	fb00 3212 	mls	r2, r0, r2, r3
 8010e78:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 8010e7c:	686b      	ldr	r3, [r5, #4]
 8010e7e:	fbb3 f3f0 	udiv	r3, r3, r0
 8010e82:	b292      	uxth	r2, r2
 8010e84:	6828      	ldr	r0, [r5, #0]
 8010e86:	fb03 f302 	mul.w	r3, r3, r2
 8010e8a:	3108      	adds	r1, #8
 8010e8c:	50c1      	str	r1, [r0, r3]
 8010e8e:	e7d3      	b.n	8010e38 <on_full_output_buffer_fragmented+0xb8>
 8010e90:	08010d81 	.word	0x08010d81

08010e94 <uxr_prepare_output_stream>:
 8010e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e96:	b087      	sub	sp, #28
 8010e98:	2407      	movs	r4, #7
 8010e9a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8010e9c:	9202      	str	r2, [sp, #8]
 8010e9e:	2500      	movs	r5, #0
 8010ea0:	1d32      	adds	r2, r6, #4
 8010ea2:	e9cd 4500 	strd	r4, r5, [sp]
 8010ea6:	9103      	str	r1, [sp, #12]
 8010ea8:	461c      	mov	r4, r3
 8010eaa:	4606      	mov	r6, r0
 8010eac:	f7ff fc4c 	bl	8010748 <uxr_prepare_stream_to_write_submessage>
 8010eb0:	f080 0201 	eor.w	r2, r0, #1
 8010eb4:	b2d2      	uxtb	r2, r2
 8010eb6:	75a2      	strb	r2, [r4, #22]
 8010eb8:	b112      	cbz	r2, 8010ec0 <uxr_prepare_output_stream+0x2c>
 8010eba:	4628      	mov	r0, r5
 8010ebc:	b007      	add	sp, #28
 8010ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ec0:	aa05      	add	r2, sp, #20
 8010ec2:	9902      	ldr	r1, [sp, #8]
 8010ec4:	4630      	mov	r0, r6
 8010ec6:	f7ff fd79 	bl	80109bc <uxr_init_base_object_request>
 8010eca:	a905      	add	r1, sp, #20
 8010ecc:	4605      	mov	r5, r0
 8010ece:	4620      	mov	r0, r4
 8010ed0:	f001 f872 	bl	8011fb8 <uxr_serialize_WRITE_DATA_Payload_Data>
 8010ed4:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8010ed8:	e9d4 6706 	ldrd	r6, r7, [r4, #24]
 8010edc:	1a52      	subs	r2, r2, r1
 8010ede:	4620      	mov	r0, r4
 8010ee0:	f7fe f912 	bl	800f108 <ucdr_init_buffer>
 8010ee4:	4620      	mov	r0, r4
 8010ee6:	463a      	mov	r2, r7
 8010ee8:	4631      	mov	r1, r6
 8010eea:	f7fe f8e3 	bl	800f0b4 <ucdr_set_on_full_buffer_callback>
 8010eee:	4628      	mov	r0, r5
 8010ef0:	b007      	add	sp, #28
 8010ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010ef4 <uxr_prepare_output_stream_fragmented>:
 8010ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ef8:	b093      	sub	sp, #76	; 0x4c
 8010efa:	4605      	mov	r5, r0
 8010efc:	9107      	str	r1, [sp, #28]
 8010efe:	3008      	adds	r0, #8
 8010f00:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8010f04:	9303      	str	r3, [sp, #12]
 8010f06:	9206      	str	r2, [sp, #24]
 8010f08:	f7ff fe8a 	bl	8010c20 <uxr_get_output_reliable_stream>
 8010f0c:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8010f10:	2b01      	cmp	r3, #1
 8010f12:	f000 8094 	beq.w	801103e <uxr_prepare_output_stream_fragmented+0x14a>
 8010f16:	4604      	mov	r4, r0
 8010f18:	2800      	cmp	r0, #0
 8010f1a:	f000 8090 	beq.w	801103e <uxr_prepare_output_stream_fragmented+0x14a>
 8010f1e:	f004 ff3f 	bl	8015da0 <get_available_free_slots>
 8010f22:	2800      	cmp	r0, #0
 8010f24:	f000 8086 	beq.w	8011034 <uxr_prepare_output_stream_fragmented+0x140>
 8010f28:	8922      	ldrh	r2, [r4, #8]
 8010f2a:	89e7      	ldrh	r7, [r4, #14]
 8010f2c:	fbb7 f8f2 	udiv	r8, r7, r2
 8010f30:	e9d4 3100 	ldrd	r3, r1, [r4]
 8010f34:	fb02 7818 	mls	r8, r2, r8, r7
 8010f38:	fa1f f888 	uxth.w	r8, r8
 8010f3c:	fbb1 f2f2 	udiv	r2, r1, r2
 8010f40:	fb02 f808 	mul.w	r8, r2, r8
 8010f44:	f108 0804 	add.w	r8, r8, #4
 8010f48:	4498      	add	r8, r3
 8010f4a:	7b23      	ldrb	r3, [r4, #12]
 8010f4c:	f858 ac04 	ldr.w	sl, [r8, #-4]
 8010f50:	9204      	str	r2, [sp, #16]
 8010f52:	4553      	cmp	r3, sl
 8010f54:	f1a2 0b04 	sub.w	fp, r2, #4
 8010f58:	d37d      	bcc.n	8011056 <uxr_prepare_output_stream_fragmented+0x162>
 8010f5a:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8010f5c:	f8cd a000 	str.w	sl, [sp]
 8010f60:	f1ab 0904 	sub.w	r9, fp, #4
 8010f64:	eba9 0903 	sub.w	r9, r9, r3
 8010f68:	3608      	adds	r6, #8
 8010f6a:	a80a      	add	r0, sp, #40	; 0x28
 8010f6c:	2300      	movs	r3, #0
 8010f6e:	465a      	mov	r2, fp
 8010f70:	4641      	mov	r1, r8
 8010f72:	fa1f f989 	uxth.w	r9, r9
 8010f76:	9605      	str	r6, [sp, #20]
 8010f78:	f7fe f8b4 	bl	800f0e4 <ucdr_init_buffer_origin_offset>
 8010f7c:	455e      	cmp	r6, fp
 8010f7e:	bf34      	ite	cc
 8010f80:	2302      	movcc	r3, #2
 8010f82:	2300      	movcs	r3, #0
 8010f84:	464a      	mov	r2, r9
 8010f86:	210d      	movs	r1, #13
 8010f88:	a80a      	add	r0, sp, #40	; 0x28
 8010f8a:	f7ff fe81 	bl	8010c90 <uxr_buffer_submessage_header>
 8010f8e:	8920      	ldrh	r0, [r4, #8]
 8010f90:	fbb7 f3f0 	udiv	r3, r7, r0
 8010f94:	e9d4 2100 	ldrd	r2, r1, [r4]
 8010f98:	fb00 7313 	mls	r3, r0, r3, r7
 8010f9c:	b29b      	uxth	r3, r3
 8010f9e:	fbb1 f1f0 	udiv	r1, r1, r0
 8010fa2:	fb03 f301 	mul.w	r3, r3, r1
 8010fa6:	4638      	mov	r0, r7
 8010fa8:	f842 b003 	str.w	fp, [r2, r3]
 8010fac:	2101      	movs	r1, #1
 8010fae:	f004 ff17 	bl	8015de0 <uxr_seq_num_add>
 8010fb2:	9b04      	ldr	r3, [sp, #16]
 8010fb4:	9e03      	ldr	r6, [sp, #12]
 8010fb6:	f1a3 0208 	sub.w	r2, r3, #8
 8010fba:	f10a 0104 	add.w	r1, sl, #4
 8010fbe:	4607      	mov	r7, r0
 8010fc0:	eba2 020a 	sub.w	r2, r2, sl
 8010fc4:	4441      	add	r1, r8
 8010fc6:	4630      	mov	r0, r6
 8010fc8:	f7fe f89e 	bl	800f108 <ucdr_init_buffer>
 8010fcc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8010fce:	81e7      	strh	r7, [r4, #14]
 8010fd0:	1d1a      	adds	r2, r3, #4
 8010fd2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8010fd6:	bf28      	it	cs
 8010fd8:	2200      	movcs	r2, #0
 8010fda:	b292      	uxth	r2, r2
 8010fdc:	2300      	movs	r3, #0
 8010fde:	2107      	movs	r1, #7
 8010fe0:	4630      	mov	r0, r6
 8010fe2:	f7ff fe55 	bl	8010c90 <uxr_buffer_submessage_header>
 8010fe6:	9906      	ldr	r1, [sp, #24]
 8010fe8:	aa09      	add	r2, sp, #36	; 0x24
 8010fea:	4628      	mov	r0, r5
 8010fec:	f7ff fce6 	bl	80109bc <uxr_init_base_object_request>
 8010ff0:	4604      	mov	r4, r0
 8010ff2:	b328      	cbz	r0, 8011040 <uxr_prepare_output_stream_fragmented+0x14c>
 8010ff4:	9e03      	ldr	r6, [sp, #12]
 8010ff6:	a909      	add	r1, sp, #36	; 0x24
 8010ff8:	4630      	mov	r0, r6
 8010ffa:	f000 ffdd 	bl	8011fb8 <uxr_serialize_WRITE_DATA_Payload_Data>
 8010ffe:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8011002:	4630      	mov	r0, r6
 8011004:	1a52      	subs	r2, r2, r1
 8011006:	f7fe f87f 	bl	800f108 <ucdr_init_buffer>
 801100a:	9a05      	ldr	r2, [sp, #20]
 801100c:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 8011010:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011012:	9b07      	ldr	r3, [sp, #28]
 8011014:	f8c5 20b8 	str.w	r2, [r5, #184]	; 0xb8
 8011018:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801101a:	f8c5 20bc 	str.w	r2, [r5, #188]	; 0xbc
 801101e:	4630      	mov	r0, r6
 8011020:	4919      	ldr	r1, [pc, #100]	; (8011088 <uxr_prepare_output_stream_fragmented+0x194>)
 8011022:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 8011026:	462a      	mov	r2, r5
 8011028:	f7fe f844 	bl	800f0b4 <ucdr_set_on_full_buffer_callback>
 801102c:	4620      	mov	r0, r4
 801102e:	b013      	add	sp, #76	; 0x4c
 8011030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011034:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011036:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011038:	4628      	mov	r0, r5
 801103a:	4798      	blx	r3
 801103c:	b920      	cbnz	r0, 8011048 <uxr_prepare_output_stream_fragmented+0x154>
 801103e:	2400      	movs	r4, #0
 8011040:	4620      	mov	r0, r4
 8011042:	b013      	add	sp, #76	; 0x4c
 8011044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011048:	4620      	mov	r0, r4
 801104a:	f004 fea9 	bl	8015da0 <get_available_free_slots>
 801104e:	2800      	cmp	r0, #0
 8011050:	f47f af6a 	bne.w	8010f28 <uxr_prepare_output_stream_fragmented+0x34>
 8011054:	e7f3      	b.n	801103e <uxr_prepare_output_stream_fragmented+0x14a>
 8011056:	4638      	mov	r0, r7
 8011058:	2101      	movs	r1, #1
 801105a:	f004 fec1 	bl	8015de0 <uxr_seq_num_add>
 801105e:	8922      	ldrh	r2, [r4, #8]
 8011060:	fbb0 f8f2 	udiv	r8, r0, r2
 8011064:	fb02 0818 	mls	r8, r2, r8, r0
 8011068:	fa1f f888 	uxth.w	r8, r8
 801106c:	6863      	ldr	r3, [r4, #4]
 801106e:	fbb3 f3f2 	udiv	r3, r3, r2
 8011072:	6822      	ldr	r2, [r4, #0]
 8011074:	fb08 f803 	mul.w	r8, r8, r3
 8011078:	f108 0804 	add.w	r8, r8, #4
 801107c:	4490      	add	r8, r2
 801107e:	7b23      	ldrb	r3, [r4, #12]
 8011080:	f858 ac04 	ldr.w	sl, [r8, #-4]
 8011084:	4607      	mov	r7, r0
 8011086:	e768      	b.n	8010f5a <uxr_prepare_output_stream_fragmented+0x66>
 8011088:	08010d81 	.word	0x08010d81

0801108c <uxr_serialize_message_header>:
 801108c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801108e:	b083      	sub	sp, #12
 8011090:	4616      	mov	r6, r2
 8011092:	4604      	mov	r4, r0
 8011094:	9301      	str	r3, [sp, #4]
 8011096:	460d      	mov	r5, r1
 8011098:	9f08      	ldr	r7, [sp, #32]
 801109a:	f003 f9e3 	bl	8014464 <ucdr_serialize_uint8_t>
 801109e:	4631      	mov	r1, r6
 80110a0:	4620      	mov	r0, r4
 80110a2:	f003 f9df 	bl	8014464 <ucdr_serialize_uint8_t>
 80110a6:	9a01      	ldr	r2, [sp, #4]
 80110a8:	4620      	mov	r0, r4
 80110aa:	2101      	movs	r1, #1
 80110ac:	f003 fa86 	bl	80145bc <ucdr_serialize_endian_uint16_t>
 80110b0:	062b      	lsls	r3, r5, #24
 80110b2:	d501      	bpl.n	80110b8 <uxr_serialize_message_header+0x2c>
 80110b4:	b003      	add	sp, #12
 80110b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80110b8:	4639      	mov	r1, r7
 80110ba:	4620      	mov	r0, r4
 80110bc:	2204      	movs	r2, #4
 80110be:	b003      	add	sp, #12
 80110c0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80110c4:	f003 b8d6 	b.w	8014274 <ucdr_serialize_array_uint8_t>

080110c8 <uxr_deserialize_message_header>:
 80110c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80110ca:	b083      	sub	sp, #12
 80110cc:	4616      	mov	r6, r2
 80110ce:	4604      	mov	r4, r0
 80110d0:	9301      	str	r3, [sp, #4]
 80110d2:	460d      	mov	r5, r1
 80110d4:	9f08      	ldr	r7, [sp, #32]
 80110d6:	f003 f9db 	bl	8014490 <ucdr_deserialize_uint8_t>
 80110da:	4631      	mov	r1, r6
 80110dc:	4620      	mov	r0, r4
 80110de:	f003 f9d7 	bl	8014490 <ucdr_deserialize_uint8_t>
 80110e2:	9a01      	ldr	r2, [sp, #4]
 80110e4:	4620      	mov	r0, r4
 80110e6:	2101      	movs	r1, #1
 80110e8:	f003 fb5c 	bl	80147a4 <ucdr_deserialize_endian_uint16_t>
 80110ec:	f995 3000 	ldrsb.w	r3, [r5]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	da01      	bge.n	80110f8 <uxr_deserialize_message_header+0x30>
 80110f4:	b003      	add	sp, #12
 80110f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80110f8:	4639      	mov	r1, r7
 80110fa:	4620      	mov	r0, r4
 80110fc:	2204      	movs	r2, #4
 80110fe:	b003      	add	sp, #12
 8011100:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011104:	f003 b91a 	b.w	801433c <ucdr_deserialize_array_uint8_t>

08011108 <uxr_serialize_submessage_header>:
 8011108:	b530      	push	{r4, r5, lr}
 801110a:	b083      	sub	sp, #12
 801110c:	4615      	mov	r5, r2
 801110e:	4604      	mov	r4, r0
 8011110:	9301      	str	r3, [sp, #4]
 8011112:	f003 f9a7 	bl	8014464 <ucdr_serialize_uint8_t>
 8011116:	4629      	mov	r1, r5
 8011118:	4620      	mov	r0, r4
 801111a:	f003 f9a3 	bl	8014464 <ucdr_serialize_uint8_t>
 801111e:	9a01      	ldr	r2, [sp, #4]
 8011120:	4620      	mov	r0, r4
 8011122:	2101      	movs	r1, #1
 8011124:	b003      	add	sp, #12
 8011126:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801112a:	f003 ba47 	b.w	80145bc <ucdr_serialize_endian_uint16_t>
 801112e:	bf00      	nop

08011130 <uxr_deserialize_submessage_header>:
 8011130:	b530      	push	{r4, r5, lr}
 8011132:	b083      	sub	sp, #12
 8011134:	4615      	mov	r5, r2
 8011136:	4604      	mov	r4, r0
 8011138:	9301      	str	r3, [sp, #4]
 801113a:	f003 f9a9 	bl	8014490 <ucdr_deserialize_uint8_t>
 801113e:	4629      	mov	r1, r5
 8011140:	4620      	mov	r0, r4
 8011142:	f003 f9a5 	bl	8014490 <ucdr_deserialize_uint8_t>
 8011146:	9a01      	ldr	r2, [sp, #4]
 8011148:	4620      	mov	r0, r4
 801114a:	2101      	movs	r1, #1
 801114c:	b003      	add	sp, #12
 801114e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011152:	f003 bb27 	b.w	80147a4 <ucdr_deserialize_endian_uint16_t>
 8011156:	bf00      	nop

08011158 <uxr_serialize_CLIENT_Representation>:
 8011158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801115c:	2204      	movs	r2, #4
 801115e:	460c      	mov	r4, r1
 8011160:	4605      	mov	r5, r0
 8011162:	f003 f887 	bl	8014274 <ucdr_serialize_array_uint8_t>
 8011166:	1d21      	adds	r1, r4, #4
 8011168:	4607      	mov	r7, r0
 801116a:	2202      	movs	r2, #2
 801116c:	4628      	mov	r0, r5
 801116e:	f003 f881 	bl	8014274 <ucdr_serialize_array_uint8_t>
 8011172:	1da1      	adds	r1, r4, #6
 8011174:	4007      	ands	r7, r0
 8011176:	2202      	movs	r2, #2
 8011178:	4628      	mov	r0, r5
 801117a:	f003 f87b 	bl	8014274 <ucdr_serialize_array_uint8_t>
 801117e:	fa5f f887 	uxtb.w	r8, r7
 8011182:	2204      	movs	r2, #4
 8011184:	4607      	mov	r7, r0
 8011186:	f104 0108 	add.w	r1, r4, #8
 801118a:	4628      	mov	r0, r5
 801118c:	f003 f872 	bl	8014274 <ucdr_serialize_array_uint8_t>
 8011190:	ea08 0707 	and.w	r7, r8, r7
 8011194:	7b21      	ldrb	r1, [r4, #12]
 8011196:	4680      	mov	r8, r0
 8011198:	4628      	mov	r0, r5
 801119a:	f003 f963 	bl	8014464 <ucdr_serialize_uint8_t>
 801119e:	ea08 0807 	and.w	r8, r8, r7
 80111a2:	7b61      	ldrb	r1, [r4, #13]
 80111a4:	4607      	mov	r7, r0
 80111a6:	4628      	mov	r0, r5
 80111a8:	f003 f92c 	bl	8014404 <ucdr_serialize_bool>
 80111ac:	7b63      	ldrb	r3, [r4, #13]
 80111ae:	ea08 0707 	and.w	r7, r8, r7
 80111b2:	ea07 0600 	and.w	r6, r7, r0
 80111b6:	b933      	cbnz	r3, 80111c6 <uxr_serialize_CLIENT_Representation+0x6e>
 80111b8:	8ba1      	ldrh	r1, [r4, #28]
 80111ba:	4628      	mov	r0, r5
 80111bc:	f003 f97e 	bl	80144bc <ucdr_serialize_uint16_t>
 80111c0:	4030      	ands	r0, r6
 80111c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111c6:	6921      	ldr	r1, [r4, #16]
 80111c8:	4628      	mov	r0, r5
 80111ca:	f003 fb61 	bl	8014890 <ucdr_serialize_uint32_t>
 80111ce:	6923      	ldr	r3, [r4, #16]
 80111d0:	b1cb      	cbz	r3, 8011206 <uxr_serialize_CLIENT_Representation+0xae>
 80111d2:	b1d0      	cbz	r0, 801120a <uxr_serialize_CLIENT_Representation+0xb2>
 80111d4:	46a0      	mov	r8, r4
 80111d6:	f04f 0900 	mov.w	r9, #0
 80111da:	e002      	b.n	80111e2 <uxr_serialize_CLIENT_Representation+0x8a>
 80111dc:	f108 0808 	add.w	r8, r8, #8
 80111e0:	b198      	cbz	r0, 801120a <uxr_serialize_CLIENT_Representation+0xb2>
 80111e2:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80111e6:	4628      	mov	r0, r5
 80111e8:	f003 fffc 	bl	80151e4 <ucdr_serialize_string>
 80111ec:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80111f0:	4607      	mov	r7, r0
 80111f2:	4628      	mov	r0, r5
 80111f4:	f003 fff6 	bl	80151e4 <ucdr_serialize_string>
 80111f8:	6923      	ldr	r3, [r4, #16]
 80111fa:	f109 0901 	add.w	r9, r9, #1
 80111fe:	4038      	ands	r0, r7
 8011200:	4599      	cmp	r9, r3
 8011202:	b2c0      	uxtb	r0, r0
 8011204:	d3ea      	bcc.n	80111dc <uxr_serialize_CLIENT_Representation+0x84>
 8011206:	4006      	ands	r6, r0
 8011208:	e7d6      	b.n	80111b8 <uxr_serialize_CLIENT_Representation+0x60>
 801120a:	2600      	movs	r6, #0
 801120c:	e7d4      	b.n	80111b8 <uxr_serialize_CLIENT_Representation+0x60>
 801120e:	bf00      	nop

08011210 <uxr_deserialize_CLIENT_Representation>:
 8011210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011214:	2204      	movs	r2, #4
 8011216:	460c      	mov	r4, r1
 8011218:	4605      	mov	r5, r0
 801121a:	f003 f88f 	bl	801433c <ucdr_deserialize_array_uint8_t>
 801121e:	1d21      	adds	r1, r4, #4
 8011220:	4607      	mov	r7, r0
 8011222:	2202      	movs	r2, #2
 8011224:	4628      	mov	r0, r5
 8011226:	f003 f889 	bl	801433c <ucdr_deserialize_array_uint8_t>
 801122a:	1da1      	adds	r1, r4, #6
 801122c:	4007      	ands	r7, r0
 801122e:	2202      	movs	r2, #2
 8011230:	4628      	mov	r0, r5
 8011232:	f003 f883 	bl	801433c <ucdr_deserialize_array_uint8_t>
 8011236:	fa5f f887 	uxtb.w	r8, r7
 801123a:	2204      	movs	r2, #4
 801123c:	4607      	mov	r7, r0
 801123e:	f104 0108 	add.w	r1, r4, #8
 8011242:	4628      	mov	r0, r5
 8011244:	f003 f87a 	bl	801433c <ucdr_deserialize_array_uint8_t>
 8011248:	ea08 0707 	and.w	r7, r8, r7
 801124c:	f104 010c 	add.w	r1, r4, #12
 8011250:	4680      	mov	r8, r0
 8011252:	4628      	mov	r0, r5
 8011254:	f003 f91c 	bl	8014490 <ucdr_deserialize_uint8_t>
 8011258:	ea08 0807 	and.w	r8, r8, r7
 801125c:	f104 010d 	add.w	r1, r4, #13
 8011260:	4607      	mov	r7, r0
 8011262:	4628      	mov	r0, r5
 8011264:	f003 f8e4 	bl	8014430 <ucdr_deserialize_bool>
 8011268:	7b63      	ldrb	r3, [r4, #13]
 801126a:	ea08 0707 	and.w	r7, r8, r7
 801126e:	ea07 0600 	and.w	r6, r7, r0
 8011272:	b93b      	cbnz	r3, 8011284 <uxr_deserialize_CLIENT_Representation+0x74>
 8011274:	f104 011c 	add.w	r1, r4, #28
 8011278:	4628      	mov	r0, r5
 801127a:	f003 fa1f 	bl	80146bc <ucdr_deserialize_uint16_t>
 801127e:	4030      	ands	r0, r6
 8011280:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011284:	f104 0110 	add.w	r1, r4, #16
 8011288:	4628      	mov	r0, r5
 801128a:	f003 fc31 	bl	8014af0 <ucdr_deserialize_uint32_t>
 801128e:	6923      	ldr	r3, [r4, #16]
 8011290:	2b01      	cmp	r3, #1
 8011292:	d903      	bls.n	801129c <uxr_deserialize_CLIENT_Representation+0x8c>
 8011294:	2301      	movs	r3, #1
 8011296:	75ab      	strb	r3, [r5, #22]
 8011298:	2600      	movs	r6, #0
 801129a:	e7eb      	b.n	8011274 <uxr_deserialize_CLIENT_Representation+0x64>
 801129c:	b1fb      	cbz	r3, 80112de <uxr_deserialize_CLIENT_Representation+0xce>
 801129e:	2800      	cmp	r0, #0
 80112a0:	d0fa      	beq.n	8011298 <uxr_deserialize_CLIENT_Representation+0x88>
 80112a2:	46a0      	mov	r8, r4
 80112a4:	f04f 0900 	mov.w	r9, #0
 80112a8:	e003      	b.n	80112b2 <uxr_deserialize_CLIENT_Representation+0xa2>
 80112aa:	f108 0808 	add.w	r8, r8, #8
 80112ae:	2800      	cmp	r0, #0
 80112b0:	d0f2      	beq.n	8011298 <uxr_deserialize_CLIENT_Representation+0x88>
 80112b2:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80112b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80112ba:	4628      	mov	r0, r5
 80112bc:	f003 ffa2 	bl	8015204 <ucdr_deserialize_string>
 80112c0:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80112c4:	4607      	mov	r7, r0
 80112c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80112ca:	4628      	mov	r0, r5
 80112cc:	f003 ff9a 	bl	8015204 <ucdr_deserialize_string>
 80112d0:	6923      	ldr	r3, [r4, #16]
 80112d2:	f109 0901 	add.w	r9, r9, #1
 80112d6:	4038      	ands	r0, r7
 80112d8:	4599      	cmp	r9, r3
 80112da:	b2c0      	uxtb	r0, r0
 80112dc:	d3e5      	bcc.n	80112aa <uxr_deserialize_CLIENT_Representation+0x9a>
 80112de:	4006      	ands	r6, r0
 80112e0:	e7c8      	b.n	8011274 <uxr_deserialize_CLIENT_Representation+0x64>
 80112e2:	bf00      	nop

080112e4 <uxr_serialize_AGENT_Representation>:
 80112e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80112e8:	2204      	movs	r2, #4
 80112ea:	460c      	mov	r4, r1
 80112ec:	4605      	mov	r5, r0
 80112ee:	f002 ffc1 	bl	8014274 <ucdr_serialize_array_uint8_t>
 80112f2:	1d21      	adds	r1, r4, #4
 80112f4:	4606      	mov	r6, r0
 80112f6:	2202      	movs	r2, #2
 80112f8:	4628      	mov	r0, r5
 80112fa:	f002 ffbb 	bl	8014274 <ucdr_serialize_array_uint8_t>
 80112fe:	1da1      	adds	r1, r4, #6
 8011300:	4006      	ands	r6, r0
 8011302:	2202      	movs	r2, #2
 8011304:	4628      	mov	r0, r5
 8011306:	f002 ffb5 	bl	8014274 <ucdr_serialize_array_uint8_t>
 801130a:	b2f6      	uxtb	r6, r6
 801130c:	4603      	mov	r3, r0
 801130e:	7a21      	ldrb	r1, [r4, #8]
 8011310:	4628      	mov	r0, r5
 8011312:	401e      	ands	r6, r3
 8011314:	f003 f876 	bl	8014404 <ucdr_serialize_bool>
 8011318:	7a23      	ldrb	r3, [r4, #8]
 801131a:	ea00 0706 	and.w	r7, r0, r6
 801131e:	b913      	cbnz	r3, 8011326 <uxr_serialize_AGENT_Representation+0x42>
 8011320:	4638      	mov	r0, r7
 8011322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011326:	68e1      	ldr	r1, [r4, #12]
 8011328:	4628      	mov	r0, r5
 801132a:	f003 fab1 	bl	8014890 <ucdr_serialize_uint32_t>
 801132e:	68e3      	ldr	r3, [r4, #12]
 8011330:	b313      	cbz	r3, 8011378 <uxr_serialize_AGENT_Representation+0x94>
 8011332:	b1e8      	cbz	r0, 8011370 <uxr_serialize_AGENT_Representation+0x8c>
 8011334:	46a0      	mov	r8, r4
 8011336:	f04f 0900 	mov.w	r9, #0
 801133a:	e002      	b.n	8011342 <uxr_serialize_AGENT_Representation+0x5e>
 801133c:	f108 0808 	add.w	r8, r8, #8
 8011340:	b1b3      	cbz	r3, 8011370 <uxr_serialize_AGENT_Representation+0x8c>
 8011342:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011346:	4628      	mov	r0, r5
 8011348:	f003 ff4c 	bl	80151e4 <ucdr_serialize_string>
 801134c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8011350:	4606      	mov	r6, r0
 8011352:	4628      	mov	r0, r5
 8011354:	f003 ff46 	bl	80151e4 <ucdr_serialize_string>
 8011358:	68e2      	ldr	r2, [r4, #12]
 801135a:	f109 0901 	add.w	r9, r9, #1
 801135e:	ea06 0300 	and.w	r3, r6, r0
 8011362:	4591      	cmp	r9, r2
 8011364:	b2db      	uxtb	r3, r3
 8011366:	d3e9      	bcc.n	801133c <uxr_serialize_AGENT_Representation+0x58>
 8011368:	401f      	ands	r7, r3
 801136a:	4638      	mov	r0, r7
 801136c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011370:	2700      	movs	r7, #0
 8011372:	4638      	mov	r0, r7
 8011374:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011378:	4007      	ands	r7, r0
 801137a:	e7d1      	b.n	8011320 <uxr_serialize_AGENT_Representation+0x3c>

0801137c <uxr_serialize_ObjectVariant.part.0>:
 801137c:	b570      	push	{r4, r5, r6, lr}
 801137e:	780b      	ldrb	r3, [r1, #0]
 8011380:	3b01      	subs	r3, #1
 8011382:	460c      	mov	r4, r1
 8011384:	4605      	mov	r5, r0
 8011386:	2b0d      	cmp	r3, #13
 8011388:	d869      	bhi.n	801145e <uxr_serialize_ObjectVariant.part.0+0xe2>
 801138a:	e8df f003 	tbb	[pc, r3]
 801138e:	074a      	.short	0x074a
 8011390:	07073030 	.word	0x07073030
 8011394:	21680707 	.word	0x21680707
 8011398:	45632121 	.word	0x45632121
 801139c:	7909      	ldrb	r1, [r1, #4]
 801139e:	f003 f861 	bl	8014464 <ucdr_serialize_uint8_t>
 80113a2:	4606      	mov	r6, r0
 80113a4:	b158      	cbz	r0, 80113be <uxr_serialize_ObjectVariant.part.0+0x42>
 80113a6:	7923      	ldrb	r3, [r4, #4]
 80113a8:	2b02      	cmp	r3, #2
 80113aa:	d003      	beq.n	80113b4 <uxr_serialize_ObjectVariant.part.0+0x38>
 80113ac:	2b03      	cmp	r3, #3
 80113ae:	d029      	beq.n	8011404 <uxr_serialize_ObjectVariant.part.0+0x88>
 80113b0:	2b01      	cmp	r3, #1
 80113b2:	d104      	bne.n	80113be <uxr_serialize_ObjectVariant.part.0+0x42>
 80113b4:	68a1      	ldr	r1, [r4, #8]
 80113b6:	4628      	mov	r0, r5
 80113b8:	f003 ff14 	bl	80151e4 <ucdr_serialize_string>
 80113bc:	4606      	mov	r6, r0
 80113be:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 80113c2:	4628      	mov	r0, r5
 80113c4:	2202      	movs	r2, #2
 80113c6:	f002 ff55 	bl	8014274 <ucdr_serialize_array_uint8_t>
 80113ca:	4030      	ands	r0, r6
 80113cc:	b2c0      	uxtb	r0, r0
 80113ce:	bd70      	pop	{r4, r5, r6, pc}
 80113d0:	7909      	ldrb	r1, [r1, #4]
 80113d2:	f003 f847 	bl	8014464 <ucdr_serialize_uint8_t>
 80113d6:	b1e8      	cbz	r0, 8011414 <uxr_serialize_ObjectVariant.part.0+0x98>
 80113d8:	7923      	ldrb	r3, [r4, #4]
 80113da:	2b01      	cmp	r3, #1
 80113dc:	d001      	beq.n	80113e2 <uxr_serialize_ObjectVariant.part.0+0x66>
 80113de:	2b02      	cmp	r3, #2
 80113e0:	d13d      	bne.n	801145e <uxr_serialize_ObjectVariant.part.0+0xe2>
 80113e2:	68a1      	ldr	r1, [r4, #8]
 80113e4:	4628      	mov	r0, r5
 80113e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80113ea:	f003 befb 	b.w	80151e4 <ucdr_serialize_string>
 80113ee:	7909      	ldrb	r1, [r1, #4]
 80113f0:	f003 f838 	bl	8014464 <ucdr_serialize_uint8_t>
 80113f4:	4606      	mov	r6, r0
 80113f6:	2800      	cmp	r0, #0
 80113f8:	d0e1      	beq.n	80113be <uxr_serialize_ObjectVariant.part.0+0x42>
 80113fa:	7923      	ldrb	r3, [r4, #4]
 80113fc:	2b02      	cmp	r3, #2
 80113fe:	d0d9      	beq.n	80113b4 <uxr_serialize_ObjectVariant.part.0+0x38>
 8011400:	2b03      	cmp	r3, #3
 8011402:	d1dc      	bne.n	80113be <uxr_serialize_ObjectVariant.part.0+0x42>
 8011404:	68a2      	ldr	r2, [r4, #8]
 8011406:	f104 010c 	add.w	r1, r4, #12
 801140a:	4628      	mov	r0, r5
 801140c:	f7fd ff18 	bl	800f240 <ucdr_serialize_sequence_uint8_t>
 8011410:	4606      	mov	r6, r0
 8011412:	e7d4      	b.n	80113be <uxr_serialize_ObjectVariant.part.0+0x42>
 8011414:	2000      	movs	r0, #0
 8011416:	bd70      	pop	{r4, r5, r6, pc}
 8011418:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801141c:	3104      	adds	r1, #4
 801141e:	f7ff be9b 	b.w	8011158 <uxr_serialize_CLIENT_Representation>
 8011422:	7909      	ldrb	r1, [r1, #4]
 8011424:	f003 f81e 	bl	8014464 <ucdr_serialize_uint8_t>
 8011428:	4606      	mov	r6, r0
 801142a:	b158      	cbz	r0, 8011444 <uxr_serialize_ObjectVariant.part.0+0xc8>
 801142c:	7923      	ldrb	r3, [r4, #4]
 801142e:	2b02      	cmp	r3, #2
 8011430:	d003      	beq.n	801143a <uxr_serialize_ObjectVariant.part.0+0xbe>
 8011432:	2b03      	cmp	r3, #3
 8011434:	d015      	beq.n	8011462 <uxr_serialize_ObjectVariant.part.0+0xe6>
 8011436:	2b01      	cmp	r3, #1
 8011438:	d104      	bne.n	8011444 <uxr_serialize_ObjectVariant.part.0+0xc8>
 801143a:	68a1      	ldr	r1, [r4, #8]
 801143c:	4628      	mov	r0, r5
 801143e:	f003 fed1 	bl	80151e4 <ucdr_serialize_string>
 8011442:	4606      	mov	r6, r0
 8011444:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 8011448:	4628      	mov	r0, r5
 801144a:	f003 fd47 	bl	8014edc <ucdr_serialize_int16_t>
 801144e:	4030      	ands	r0, r6
 8011450:	b2c0      	uxtb	r0, r0
 8011452:	bd70      	pop	{r4, r5, r6, pc}
 8011454:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011458:	3104      	adds	r1, #4
 801145a:	f7ff bf43 	b.w	80112e4 <uxr_serialize_AGENT_Representation>
 801145e:	2001      	movs	r0, #1
 8011460:	bd70      	pop	{r4, r5, r6, pc}
 8011462:	68a2      	ldr	r2, [r4, #8]
 8011464:	f104 010c 	add.w	r1, r4, #12
 8011468:	4628      	mov	r0, r5
 801146a:	f7fd fee9 	bl	800f240 <ucdr_serialize_sequence_uint8_t>
 801146e:	4606      	mov	r6, r0
 8011470:	e7e8      	b.n	8011444 <uxr_serialize_ObjectVariant.part.0+0xc8>
 8011472:	bf00      	nop

08011474 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8011474:	b570      	push	{r4, r5, r6, lr}
 8011476:	460d      	mov	r5, r1
 8011478:	7809      	ldrb	r1, [r1, #0]
 801147a:	4606      	mov	r6, r0
 801147c:	f002 ffc2 	bl	8014404 <ucdr_serialize_bool>
 8011480:	782b      	ldrb	r3, [r5, #0]
 8011482:	4604      	mov	r4, r0
 8011484:	b94b      	cbnz	r3, 801149a <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8011486:	7a29      	ldrb	r1, [r5, #8]
 8011488:	4630      	mov	r0, r6
 801148a:	f002 ffbb 	bl	8014404 <ucdr_serialize_bool>
 801148e:	7a2b      	ldrb	r3, [r5, #8]
 8011490:	4004      	ands	r4, r0
 8011492:	b2e4      	uxtb	r4, r4
 8011494:	b943      	cbnz	r3, 80114a8 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8011496:	4620      	mov	r0, r4
 8011498:	bd70      	pop	{r4, r5, r6, pc}
 801149a:	6869      	ldr	r1, [r5, #4]
 801149c:	4630      	mov	r0, r6
 801149e:	f003 fea1 	bl	80151e4 <ucdr_serialize_string>
 80114a2:	4004      	ands	r4, r0
 80114a4:	b2e4      	uxtb	r4, r4
 80114a6:	e7ee      	b.n	8011486 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 80114a8:	68e9      	ldr	r1, [r5, #12]
 80114aa:	4630      	mov	r0, r6
 80114ac:	f003 fe9a 	bl	80151e4 <ucdr_serialize_string>
 80114b0:	4004      	ands	r4, r0
 80114b2:	4620      	mov	r0, r4
 80114b4:	bd70      	pop	{r4, r5, r6, pc}
 80114b6:	bf00      	nop

080114b8 <uxr_serialize_OBJK_Topic_Binary>:
 80114b8:	b570      	push	{r4, r5, r6, lr}
 80114ba:	460d      	mov	r5, r1
 80114bc:	6809      	ldr	r1, [r1, #0]
 80114be:	4606      	mov	r6, r0
 80114c0:	f003 fe90 	bl	80151e4 <ucdr_serialize_string>
 80114c4:	7929      	ldrb	r1, [r5, #4]
 80114c6:	4604      	mov	r4, r0
 80114c8:	4630      	mov	r0, r6
 80114ca:	f002 ff9b 	bl	8014404 <ucdr_serialize_bool>
 80114ce:	792b      	ldrb	r3, [r5, #4]
 80114d0:	4004      	ands	r4, r0
 80114d2:	b2e4      	uxtb	r4, r4
 80114d4:	b943      	cbnz	r3, 80114e8 <uxr_serialize_OBJK_Topic_Binary+0x30>
 80114d6:	7b29      	ldrb	r1, [r5, #12]
 80114d8:	4630      	mov	r0, r6
 80114da:	f002 ff93 	bl	8014404 <ucdr_serialize_bool>
 80114de:	7b2b      	ldrb	r3, [r5, #12]
 80114e0:	4004      	ands	r4, r0
 80114e2:	b93b      	cbnz	r3, 80114f4 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 80114e4:	4620      	mov	r0, r4
 80114e6:	bd70      	pop	{r4, r5, r6, pc}
 80114e8:	68a9      	ldr	r1, [r5, #8]
 80114ea:	4630      	mov	r0, r6
 80114ec:	f003 fe7a 	bl	80151e4 <ucdr_serialize_string>
 80114f0:	4004      	ands	r4, r0
 80114f2:	e7f0      	b.n	80114d6 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 80114f4:	6929      	ldr	r1, [r5, #16]
 80114f6:	4630      	mov	r0, r6
 80114f8:	f003 fe74 	bl	80151e4 <ucdr_serialize_string>
 80114fc:	4004      	ands	r4, r0
 80114fe:	b2e4      	uxtb	r4, r4
 8011500:	4620      	mov	r0, r4
 8011502:	bd70      	pop	{r4, r5, r6, pc}

08011504 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8011504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011508:	460c      	mov	r4, r1
 801150a:	7809      	ldrb	r1, [r1, #0]
 801150c:	4606      	mov	r6, r0
 801150e:	f002 ff79 	bl	8014404 <ucdr_serialize_bool>
 8011512:	7823      	ldrb	r3, [r4, #0]
 8011514:	4605      	mov	r5, r0
 8011516:	b96b      	cbnz	r3, 8011534 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8011518:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 801151c:	4630      	mov	r0, r6
 801151e:	f002 ff71 	bl	8014404 <ucdr_serialize_bool>
 8011522:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8011526:	4005      	ands	r5, r0
 8011528:	b2ed      	uxtb	r5, r5
 801152a:	2b00      	cmp	r3, #0
 801152c:	d169      	bne.n	8011602 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 801152e:	4628      	mov	r0, r5
 8011530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011534:	6861      	ldr	r1, [r4, #4]
 8011536:	4630      	mov	r0, r6
 8011538:	f003 f9aa 	bl	8014890 <ucdr_serialize_uint32_t>
 801153c:	6863      	ldr	r3, [r4, #4]
 801153e:	2b00      	cmp	r3, #0
 8011540:	d06b      	beq.n	801161a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8011542:	2800      	cmp	r0, #0
 8011544:	d067      	beq.n	8011616 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011546:	68a1      	ldr	r1, [r4, #8]
 8011548:	4630      	mov	r0, r6
 801154a:	f003 fe4b 	bl	80151e4 <ucdr_serialize_string>
 801154e:	6863      	ldr	r3, [r4, #4]
 8011550:	2b01      	cmp	r3, #1
 8011552:	d953      	bls.n	80115fc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011554:	2800      	cmp	r0, #0
 8011556:	d05e      	beq.n	8011616 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011558:	68e1      	ldr	r1, [r4, #12]
 801155a:	4630      	mov	r0, r6
 801155c:	f003 fe42 	bl	80151e4 <ucdr_serialize_string>
 8011560:	6863      	ldr	r3, [r4, #4]
 8011562:	2b02      	cmp	r3, #2
 8011564:	d94a      	bls.n	80115fc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011566:	2800      	cmp	r0, #0
 8011568:	d055      	beq.n	8011616 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801156a:	6921      	ldr	r1, [r4, #16]
 801156c:	4630      	mov	r0, r6
 801156e:	f003 fe39 	bl	80151e4 <ucdr_serialize_string>
 8011572:	6863      	ldr	r3, [r4, #4]
 8011574:	2b03      	cmp	r3, #3
 8011576:	d941      	bls.n	80115fc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011578:	2800      	cmp	r0, #0
 801157a:	d04c      	beq.n	8011616 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801157c:	6961      	ldr	r1, [r4, #20]
 801157e:	4630      	mov	r0, r6
 8011580:	f003 fe30 	bl	80151e4 <ucdr_serialize_string>
 8011584:	6863      	ldr	r3, [r4, #4]
 8011586:	2b04      	cmp	r3, #4
 8011588:	d938      	bls.n	80115fc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801158a:	2800      	cmp	r0, #0
 801158c:	d043      	beq.n	8011616 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801158e:	69a1      	ldr	r1, [r4, #24]
 8011590:	4630      	mov	r0, r6
 8011592:	f003 fe27 	bl	80151e4 <ucdr_serialize_string>
 8011596:	6863      	ldr	r3, [r4, #4]
 8011598:	2b05      	cmp	r3, #5
 801159a:	d92f      	bls.n	80115fc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801159c:	2800      	cmp	r0, #0
 801159e:	d03a      	beq.n	8011616 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80115a0:	69e1      	ldr	r1, [r4, #28]
 80115a2:	4630      	mov	r0, r6
 80115a4:	f003 fe1e 	bl	80151e4 <ucdr_serialize_string>
 80115a8:	6863      	ldr	r3, [r4, #4]
 80115aa:	2b06      	cmp	r3, #6
 80115ac:	d926      	bls.n	80115fc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80115ae:	b390      	cbz	r0, 8011616 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80115b0:	6a21      	ldr	r1, [r4, #32]
 80115b2:	4630      	mov	r0, r6
 80115b4:	f003 fe16 	bl	80151e4 <ucdr_serialize_string>
 80115b8:	6863      	ldr	r3, [r4, #4]
 80115ba:	2b07      	cmp	r3, #7
 80115bc:	d91e      	bls.n	80115fc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80115be:	b350      	cbz	r0, 8011616 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80115c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80115c2:	4630      	mov	r0, r6
 80115c4:	f003 fe0e 	bl	80151e4 <ucdr_serialize_string>
 80115c8:	6863      	ldr	r3, [r4, #4]
 80115ca:	2b08      	cmp	r3, #8
 80115cc:	d916      	bls.n	80115fc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80115ce:	b310      	cbz	r0, 8011616 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80115d0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80115d2:	4630      	mov	r0, r6
 80115d4:	f003 fe06 	bl	80151e4 <ucdr_serialize_string>
 80115d8:	6863      	ldr	r3, [r4, #4]
 80115da:	2b09      	cmp	r3, #9
 80115dc:	d90e      	bls.n	80115fc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80115de:	b1d0      	cbz	r0, 8011616 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80115e0:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 80115e4:	2709      	movs	r7, #9
 80115e6:	e000      	b.n	80115ea <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 80115e8:	b1a8      	cbz	r0, 8011616 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80115ea:	f858 1b04 	ldr.w	r1, [r8], #4
 80115ee:	4630      	mov	r0, r6
 80115f0:	f003 fdf8 	bl	80151e4 <ucdr_serialize_string>
 80115f4:	6862      	ldr	r2, [r4, #4]
 80115f6:	3701      	adds	r7, #1
 80115f8:	4297      	cmp	r7, r2
 80115fa:	d3f5      	bcc.n	80115e8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 80115fc:	4005      	ands	r5, r0
 80115fe:	b2ed      	uxtb	r5, r5
 8011600:	e78a      	b.n	8011518 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8011602:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011604:	4630      	mov	r0, r6
 8011606:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801160a:	f7fd fe19 	bl	800f240 <ucdr_serialize_sequence_uint8_t>
 801160e:	4005      	ands	r5, r0
 8011610:	4628      	mov	r0, r5
 8011612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011616:	2500      	movs	r5, #0
 8011618:	e77e      	b.n	8011518 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801161a:	4028      	ands	r0, r5
 801161c:	b2c5      	uxtb	r5, r0
 801161e:	e77b      	b.n	8011518 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08011620 <uxr_serialize_OBJK_Publisher_Binary>:
 8011620:	b570      	push	{r4, r5, r6, lr}
 8011622:	460d      	mov	r5, r1
 8011624:	7809      	ldrb	r1, [r1, #0]
 8011626:	4606      	mov	r6, r0
 8011628:	f002 feec 	bl	8014404 <ucdr_serialize_bool>
 801162c:	782b      	ldrb	r3, [r5, #0]
 801162e:	4604      	mov	r4, r0
 8011630:	b94b      	cbnz	r3, 8011646 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8011632:	7a29      	ldrb	r1, [r5, #8]
 8011634:	4630      	mov	r0, r6
 8011636:	f002 fee5 	bl	8014404 <ucdr_serialize_bool>
 801163a:	7a2b      	ldrb	r3, [r5, #8]
 801163c:	4004      	ands	r4, r0
 801163e:	b2e4      	uxtb	r4, r4
 8011640:	b943      	cbnz	r3, 8011654 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8011642:	4620      	mov	r0, r4
 8011644:	bd70      	pop	{r4, r5, r6, pc}
 8011646:	6869      	ldr	r1, [r5, #4]
 8011648:	4630      	mov	r0, r6
 801164a:	f003 fdcb 	bl	80151e4 <ucdr_serialize_string>
 801164e:	4004      	ands	r4, r0
 8011650:	b2e4      	uxtb	r4, r4
 8011652:	e7ee      	b.n	8011632 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8011654:	f105 010c 	add.w	r1, r5, #12
 8011658:	4630      	mov	r0, r6
 801165a:	f7ff ff53 	bl	8011504 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 801165e:	4004      	ands	r4, r0
 8011660:	4620      	mov	r0, r4
 8011662:	bd70      	pop	{r4, r5, r6, pc}

08011664 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8011664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011668:	460c      	mov	r4, r1
 801166a:	7809      	ldrb	r1, [r1, #0]
 801166c:	4606      	mov	r6, r0
 801166e:	f002 fec9 	bl	8014404 <ucdr_serialize_bool>
 8011672:	7823      	ldrb	r3, [r4, #0]
 8011674:	4605      	mov	r5, r0
 8011676:	b96b      	cbnz	r3, 8011694 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8011678:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 801167c:	4630      	mov	r0, r6
 801167e:	f002 fec1 	bl	8014404 <ucdr_serialize_bool>
 8011682:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8011686:	4005      	ands	r5, r0
 8011688:	b2ed      	uxtb	r5, r5
 801168a:	2b00      	cmp	r3, #0
 801168c:	d169      	bne.n	8011762 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 801168e:	4628      	mov	r0, r5
 8011690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011694:	6861      	ldr	r1, [r4, #4]
 8011696:	4630      	mov	r0, r6
 8011698:	f003 f8fa 	bl	8014890 <ucdr_serialize_uint32_t>
 801169c:	6863      	ldr	r3, [r4, #4]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d06b      	beq.n	801177a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 80116a2:	2800      	cmp	r0, #0
 80116a4:	d067      	beq.n	8011776 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80116a6:	68a1      	ldr	r1, [r4, #8]
 80116a8:	4630      	mov	r0, r6
 80116aa:	f003 fd9b 	bl	80151e4 <ucdr_serialize_string>
 80116ae:	6863      	ldr	r3, [r4, #4]
 80116b0:	2b01      	cmp	r3, #1
 80116b2:	d953      	bls.n	801175c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80116b4:	2800      	cmp	r0, #0
 80116b6:	d05e      	beq.n	8011776 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80116b8:	68e1      	ldr	r1, [r4, #12]
 80116ba:	4630      	mov	r0, r6
 80116bc:	f003 fd92 	bl	80151e4 <ucdr_serialize_string>
 80116c0:	6863      	ldr	r3, [r4, #4]
 80116c2:	2b02      	cmp	r3, #2
 80116c4:	d94a      	bls.n	801175c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80116c6:	2800      	cmp	r0, #0
 80116c8:	d055      	beq.n	8011776 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80116ca:	6921      	ldr	r1, [r4, #16]
 80116cc:	4630      	mov	r0, r6
 80116ce:	f003 fd89 	bl	80151e4 <ucdr_serialize_string>
 80116d2:	6863      	ldr	r3, [r4, #4]
 80116d4:	2b03      	cmp	r3, #3
 80116d6:	d941      	bls.n	801175c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80116d8:	2800      	cmp	r0, #0
 80116da:	d04c      	beq.n	8011776 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80116dc:	6961      	ldr	r1, [r4, #20]
 80116de:	4630      	mov	r0, r6
 80116e0:	f003 fd80 	bl	80151e4 <ucdr_serialize_string>
 80116e4:	6863      	ldr	r3, [r4, #4]
 80116e6:	2b04      	cmp	r3, #4
 80116e8:	d938      	bls.n	801175c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80116ea:	2800      	cmp	r0, #0
 80116ec:	d043      	beq.n	8011776 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80116ee:	69a1      	ldr	r1, [r4, #24]
 80116f0:	4630      	mov	r0, r6
 80116f2:	f003 fd77 	bl	80151e4 <ucdr_serialize_string>
 80116f6:	6863      	ldr	r3, [r4, #4]
 80116f8:	2b05      	cmp	r3, #5
 80116fa:	d92f      	bls.n	801175c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80116fc:	2800      	cmp	r0, #0
 80116fe:	d03a      	beq.n	8011776 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011700:	69e1      	ldr	r1, [r4, #28]
 8011702:	4630      	mov	r0, r6
 8011704:	f003 fd6e 	bl	80151e4 <ucdr_serialize_string>
 8011708:	6863      	ldr	r3, [r4, #4]
 801170a:	2b06      	cmp	r3, #6
 801170c:	d926      	bls.n	801175c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801170e:	b390      	cbz	r0, 8011776 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011710:	6a21      	ldr	r1, [r4, #32]
 8011712:	4630      	mov	r0, r6
 8011714:	f003 fd66 	bl	80151e4 <ucdr_serialize_string>
 8011718:	6863      	ldr	r3, [r4, #4]
 801171a:	2b07      	cmp	r3, #7
 801171c:	d91e      	bls.n	801175c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801171e:	b350      	cbz	r0, 8011776 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011720:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011722:	4630      	mov	r0, r6
 8011724:	f003 fd5e 	bl	80151e4 <ucdr_serialize_string>
 8011728:	6863      	ldr	r3, [r4, #4]
 801172a:	2b08      	cmp	r3, #8
 801172c:	d916      	bls.n	801175c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801172e:	b310      	cbz	r0, 8011776 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011730:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8011732:	4630      	mov	r0, r6
 8011734:	f003 fd56 	bl	80151e4 <ucdr_serialize_string>
 8011738:	6863      	ldr	r3, [r4, #4]
 801173a:	2b09      	cmp	r3, #9
 801173c:	d90e      	bls.n	801175c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801173e:	b1d0      	cbz	r0, 8011776 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011740:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8011744:	2709      	movs	r7, #9
 8011746:	e000      	b.n	801174a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8011748:	b1a8      	cbz	r0, 8011776 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801174a:	f858 1b04 	ldr.w	r1, [r8], #4
 801174e:	4630      	mov	r0, r6
 8011750:	f003 fd48 	bl	80151e4 <ucdr_serialize_string>
 8011754:	6862      	ldr	r2, [r4, #4]
 8011756:	3701      	adds	r7, #1
 8011758:	4297      	cmp	r7, r2
 801175a:	d3f5      	bcc.n	8011748 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 801175c:	4005      	ands	r5, r0
 801175e:	b2ed      	uxtb	r5, r5
 8011760:	e78a      	b.n	8011678 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8011762:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011764:	4630      	mov	r0, r6
 8011766:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801176a:	f7fd fd69 	bl	800f240 <ucdr_serialize_sequence_uint8_t>
 801176e:	4005      	ands	r5, r0
 8011770:	4628      	mov	r0, r5
 8011772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011776:	2500      	movs	r5, #0
 8011778:	e77e      	b.n	8011678 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801177a:	4028      	ands	r0, r5
 801177c:	b2c5      	uxtb	r5, r0
 801177e:	e77b      	b.n	8011678 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08011780 <uxr_serialize_OBJK_Subscriber_Binary>:
 8011780:	b570      	push	{r4, r5, r6, lr}
 8011782:	460d      	mov	r5, r1
 8011784:	7809      	ldrb	r1, [r1, #0]
 8011786:	4606      	mov	r6, r0
 8011788:	f002 fe3c 	bl	8014404 <ucdr_serialize_bool>
 801178c:	782b      	ldrb	r3, [r5, #0]
 801178e:	4604      	mov	r4, r0
 8011790:	b94b      	cbnz	r3, 80117a6 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8011792:	7a29      	ldrb	r1, [r5, #8]
 8011794:	4630      	mov	r0, r6
 8011796:	f002 fe35 	bl	8014404 <ucdr_serialize_bool>
 801179a:	7a2b      	ldrb	r3, [r5, #8]
 801179c:	4004      	ands	r4, r0
 801179e:	b2e4      	uxtb	r4, r4
 80117a0:	b943      	cbnz	r3, 80117b4 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 80117a2:	4620      	mov	r0, r4
 80117a4:	bd70      	pop	{r4, r5, r6, pc}
 80117a6:	6869      	ldr	r1, [r5, #4]
 80117a8:	4630      	mov	r0, r6
 80117aa:	f003 fd1b 	bl	80151e4 <ucdr_serialize_string>
 80117ae:	4004      	ands	r4, r0
 80117b0:	b2e4      	uxtb	r4, r4
 80117b2:	e7ee      	b.n	8011792 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 80117b4:	f105 010c 	add.w	r1, r5, #12
 80117b8:	4630      	mov	r0, r6
 80117ba:	f7ff ff53 	bl	8011664 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 80117be:	4004      	ands	r4, r0
 80117c0:	4620      	mov	r0, r4
 80117c2:	bd70      	pop	{r4, r5, r6, pc}

080117c4 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 80117c4:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 80117c8:	4688      	mov	r8, r1
 80117ca:	8809      	ldrh	r1, [r1, #0]
 80117cc:	4681      	mov	r9, r0
 80117ce:	f002 fe75 	bl	80144bc <ucdr_serialize_uint16_t>
 80117d2:	f898 1002 	ldrb.w	r1, [r8, #2]
 80117d6:	4606      	mov	r6, r0
 80117d8:	4648      	mov	r0, r9
 80117da:	f002 fe13 	bl	8014404 <ucdr_serialize_bool>
 80117de:	f898 3002 	ldrb.w	r3, [r8, #2]
 80117e2:	4030      	ands	r0, r6
 80117e4:	b2c5      	uxtb	r5, r0
 80117e6:	b9eb      	cbnz	r3, 8011824 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 80117e8:	f898 1006 	ldrb.w	r1, [r8, #6]
 80117ec:	4648      	mov	r0, r9
 80117ee:	f002 fe09 	bl	8014404 <ucdr_serialize_bool>
 80117f2:	f898 3006 	ldrb.w	r3, [r8, #6]
 80117f6:	4005      	ands	r5, r0
 80117f8:	bb7b      	cbnz	r3, 801185a <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 80117fa:	f898 100c 	ldrb.w	r1, [r8, #12]
 80117fe:	4648      	mov	r0, r9
 8011800:	f002 fe00 	bl	8014404 <ucdr_serialize_bool>
 8011804:	f898 300c 	ldrb.w	r3, [r8, #12]
 8011808:	4005      	ands	r5, r0
 801180a:	b9f3      	cbnz	r3, 801184a <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 801180c:	f898 1014 	ldrb.w	r1, [r8, #20]
 8011810:	4648      	mov	r0, r9
 8011812:	f002 fdf7 	bl	8014404 <ucdr_serialize_bool>
 8011816:	f898 3014 	ldrb.w	r3, [r8, #20]
 801181a:	4005      	ands	r5, r0
 801181c:	b94b      	cbnz	r3, 8011832 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 801181e:	4628      	mov	r0, r5
 8011820:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8011824:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8011828:	4648      	mov	r0, r9
 801182a:	f002 fe47 	bl	80144bc <ucdr_serialize_uint16_t>
 801182e:	4005      	ands	r5, r0
 8011830:	e7da      	b.n	80117e8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8011832:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8011836:	4648      	mov	r0, r9
 8011838:	f108 011c 	add.w	r1, r8, #28
 801183c:	f7fd fd00 	bl	800f240 <ucdr_serialize_sequence_uint8_t>
 8011840:	4028      	ands	r0, r5
 8011842:	b2c5      	uxtb	r5, r0
 8011844:	4628      	mov	r0, r5
 8011846:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801184a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801184e:	4648      	mov	r0, r9
 8011850:	f003 f81e 	bl	8014890 <ucdr_serialize_uint32_t>
 8011854:	4028      	ands	r0, r5
 8011856:	b2c5      	uxtb	r5, r0
 8011858:	e7d8      	b.n	801180c <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 801185a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801185e:	4648      	mov	r0, r9
 8011860:	f003 f816 	bl	8014890 <ucdr_serialize_uint32_t>
 8011864:	4028      	ands	r0, r5
 8011866:	b2c5      	uxtb	r5, r0
 8011868:	e7c7      	b.n	80117fa <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 801186a:	bf00      	nop

0801186c <uxr_serialize_OBJK_DataReader_Binary>:
 801186c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801186e:	2202      	movs	r2, #2
 8011870:	460c      	mov	r4, r1
 8011872:	4606      	mov	r6, r0
 8011874:	f002 fcfe 	bl	8014274 <ucdr_serialize_array_uint8_t>
 8011878:	78a1      	ldrb	r1, [r4, #2]
 801187a:	4605      	mov	r5, r0
 801187c:	4630      	mov	r0, r6
 801187e:	f002 fdc1 	bl	8014404 <ucdr_serialize_bool>
 8011882:	78a3      	ldrb	r3, [r4, #2]
 8011884:	4005      	ands	r5, r0
 8011886:	b2ed      	uxtb	r5, r5
 8011888:	b90b      	cbnz	r3, 801188e <uxr_serialize_OBJK_DataReader_Binary+0x22>
 801188a:	4628      	mov	r0, r5
 801188c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801188e:	f104 0108 	add.w	r1, r4, #8
 8011892:	4630      	mov	r0, r6
 8011894:	f7ff ff96 	bl	80117c4 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8011898:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801189c:	4607      	mov	r7, r0
 801189e:	4630      	mov	r0, r6
 80118a0:	f002 fdb0 	bl	8014404 <ucdr_serialize_bool>
 80118a4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80118a8:	4038      	ands	r0, r7
 80118aa:	b2c7      	uxtb	r7, r0
 80118ac:	b95b      	cbnz	r3, 80118c6 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 80118ae:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 80118b2:	4630      	mov	r0, r6
 80118b4:	f002 fda6 	bl	8014404 <ucdr_serialize_bool>
 80118b8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80118bc:	4007      	ands	r7, r0
 80118be:	b94b      	cbnz	r3, 80118d4 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 80118c0:	403d      	ands	r5, r7
 80118c2:	4628      	mov	r0, r5
 80118c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118c6:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 80118ca:	4630      	mov	r0, r6
 80118cc:	f003 fa36 	bl	8014d3c <ucdr_serialize_uint64_t>
 80118d0:	4007      	ands	r7, r0
 80118d2:	e7ec      	b.n	80118ae <uxr_serialize_OBJK_DataReader_Binary+0x42>
 80118d4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80118d6:	4630      	mov	r0, r6
 80118d8:	f003 fc84 	bl	80151e4 <ucdr_serialize_string>
 80118dc:	4007      	ands	r7, r0
 80118de:	b2ff      	uxtb	r7, r7
 80118e0:	e7ee      	b.n	80118c0 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 80118e2:	bf00      	nop

080118e4 <uxr_serialize_OBJK_DataWriter_Binary>:
 80118e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118e6:	2202      	movs	r2, #2
 80118e8:	460d      	mov	r5, r1
 80118ea:	4606      	mov	r6, r0
 80118ec:	f002 fcc2 	bl	8014274 <ucdr_serialize_array_uint8_t>
 80118f0:	78a9      	ldrb	r1, [r5, #2]
 80118f2:	4604      	mov	r4, r0
 80118f4:	4630      	mov	r0, r6
 80118f6:	f002 fd85 	bl	8014404 <ucdr_serialize_bool>
 80118fa:	78ab      	ldrb	r3, [r5, #2]
 80118fc:	4004      	ands	r4, r0
 80118fe:	b2e4      	uxtb	r4, r4
 8011900:	b90b      	cbnz	r3, 8011906 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8011902:	4620      	mov	r0, r4
 8011904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011906:	f105 0108 	add.w	r1, r5, #8
 801190a:	4630      	mov	r0, r6
 801190c:	f7ff ff5a 	bl	80117c4 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8011910:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 8011914:	4607      	mov	r7, r0
 8011916:	4630      	mov	r0, r6
 8011918:	f002 fd74 	bl	8014404 <ucdr_serialize_bool>
 801191c:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8011920:	4007      	ands	r7, r0
 8011922:	b2ff      	uxtb	r7, r7
 8011924:	b913      	cbnz	r3, 801192c <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8011926:	403c      	ands	r4, r7
 8011928:	4620      	mov	r0, r4
 801192a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801192c:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 8011930:	4630      	mov	r0, r6
 8011932:	f003 fa03 	bl	8014d3c <ucdr_serialize_uint64_t>
 8011936:	4007      	ands	r7, r0
 8011938:	e7f5      	b.n	8011926 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 801193a:	bf00      	nop

0801193c <uxr_deserialize_ObjectVariant>:
 801193c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801193e:	4605      	mov	r5, r0
 8011940:	460e      	mov	r6, r1
 8011942:	f002 fda5 	bl	8014490 <ucdr_deserialize_uint8_t>
 8011946:	b320      	cbz	r0, 8011992 <uxr_deserialize_ObjectVariant+0x56>
 8011948:	7833      	ldrb	r3, [r6, #0]
 801194a:	3b01      	subs	r3, #1
 801194c:	4604      	mov	r4, r0
 801194e:	2b0d      	cmp	r3, #13
 8011950:	d81d      	bhi.n	801198e <uxr_deserialize_ObjectVariant+0x52>
 8011952:	e8df f003 	tbb	[pc, r3]
 8011956:	2107      	.short	0x2107
 8011958:	21214b4b 	.word	0x21214b4b
 801195c:	381c2121 	.word	0x381c2121
 8011960:	876a3838 	.word	0x876a3838
 8011964:	1d31      	adds	r1, r6, #4
 8011966:	4628      	mov	r0, r5
 8011968:	f002 fd92 	bl	8014490 <ucdr_deserialize_uint8_t>
 801196c:	4607      	mov	r7, r0
 801196e:	b138      	cbz	r0, 8011980 <uxr_deserialize_ObjectVariant+0x44>
 8011970:	7933      	ldrb	r3, [r6, #4]
 8011972:	2b02      	cmp	r3, #2
 8011974:	d07c      	beq.n	8011a70 <uxr_deserialize_ObjectVariant+0x134>
 8011976:	2b03      	cmp	r3, #3
 8011978:	f000 8082 	beq.w	8011a80 <uxr_deserialize_ObjectVariant+0x144>
 801197c:	2b01      	cmp	r3, #1
 801197e:	d077      	beq.n	8011a70 <uxr_deserialize_ObjectVariant+0x134>
 8011980:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 8011984:	4628      	mov	r0, r5
 8011986:	f003 fb29 	bl	8014fdc <ucdr_deserialize_int16_t>
 801198a:	4038      	ands	r0, r7
 801198c:	b2c4      	uxtb	r4, r0
 801198e:	4620      	mov	r0, r4
 8011990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011992:	2400      	movs	r4, #0
 8011994:	4620      	mov	r0, r4
 8011996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011998:	1d31      	adds	r1, r6, #4
 801199a:	4628      	mov	r0, r5
 801199c:	f002 fd78 	bl	8014490 <ucdr_deserialize_uint8_t>
 80119a0:	4607      	mov	r7, r0
 80119a2:	b130      	cbz	r0, 80119b2 <uxr_deserialize_ObjectVariant+0x76>
 80119a4:	7933      	ldrb	r3, [r6, #4]
 80119a6:	2b02      	cmp	r3, #2
 80119a8:	d037      	beq.n	8011a1a <uxr_deserialize_ObjectVariant+0xde>
 80119aa:	2b03      	cmp	r3, #3
 80119ac:	d02a      	beq.n	8011a04 <uxr_deserialize_ObjectVariant+0xc8>
 80119ae:	2b01      	cmp	r3, #1
 80119b0:	d033      	beq.n	8011a1a <uxr_deserialize_ObjectVariant+0xde>
 80119b2:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 80119b6:	4628      	mov	r0, r5
 80119b8:	2202      	movs	r2, #2
 80119ba:	f002 fcbf 	bl	801433c <ucdr_deserialize_array_uint8_t>
 80119be:	4038      	ands	r0, r7
 80119c0:	b2c4      	uxtb	r4, r0
 80119c2:	4620      	mov	r0, r4
 80119c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80119c6:	1d31      	adds	r1, r6, #4
 80119c8:	4628      	mov	r0, r5
 80119ca:	f002 fd61 	bl	8014490 <ucdr_deserialize_uint8_t>
 80119ce:	2800      	cmp	r0, #0
 80119d0:	d0df      	beq.n	8011992 <uxr_deserialize_ObjectVariant+0x56>
 80119d2:	7933      	ldrb	r3, [r6, #4]
 80119d4:	2b01      	cmp	r3, #1
 80119d6:	d001      	beq.n	80119dc <uxr_deserialize_ObjectVariant+0xa0>
 80119d8:	2b02      	cmp	r3, #2
 80119da:	d1d8      	bne.n	801198e <uxr_deserialize_ObjectVariant+0x52>
 80119dc:	68b1      	ldr	r1, [r6, #8]
 80119de:	4628      	mov	r0, r5
 80119e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80119e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80119e8:	f003 bc0c 	b.w	8015204 <ucdr_deserialize_string>
 80119ec:	1d31      	adds	r1, r6, #4
 80119ee:	4628      	mov	r0, r5
 80119f0:	f002 fd4e 	bl	8014490 <ucdr_deserialize_uint8_t>
 80119f4:	4607      	mov	r7, r0
 80119f6:	2800      	cmp	r0, #0
 80119f8:	d0db      	beq.n	80119b2 <uxr_deserialize_ObjectVariant+0x76>
 80119fa:	7933      	ldrb	r3, [r6, #4]
 80119fc:	2b02      	cmp	r3, #2
 80119fe:	d00c      	beq.n	8011a1a <uxr_deserialize_ObjectVariant+0xde>
 8011a00:	2b03      	cmp	r3, #3
 8011a02:	d1d6      	bne.n	80119b2 <uxr_deserialize_ObjectVariant+0x76>
 8011a04:	f106 0308 	add.w	r3, r6, #8
 8011a08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011a0c:	f106 010c 	add.w	r1, r6, #12
 8011a10:	4628      	mov	r0, r5
 8011a12:	f7fd fc27 	bl	800f264 <ucdr_deserialize_sequence_uint8_t>
 8011a16:	4607      	mov	r7, r0
 8011a18:	e7cb      	b.n	80119b2 <uxr_deserialize_ObjectVariant+0x76>
 8011a1a:	68b1      	ldr	r1, [r6, #8]
 8011a1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011a20:	4628      	mov	r0, r5
 8011a22:	f003 fbef 	bl	8015204 <ucdr_deserialize_string>
 8011a26:	4607      	mov	r7, r0
 8011a28:	e7c3      	b.n	80119b2 <uxr_deserialize_ObjectVariant+0x76>
 8011a2a:	2204      	movs	r2, #4
 8011a2c:	18b1      	adds	r1, r6, r2
 8011a2e:	4628      	mov	r0, r5
 8011a30:	f002 fc84 	bl	801433c <ucdr_deserialize_array_uint8_t>
 8011a34:	2202      	movs	r2, #2
 8011a36:	4604      	mov	r4, r0
 8011a38:	f106 0108 	add.w	r1, r6, #8
 8011a3c:	4628      	mov	r0, r5
 8011a3e:	f002 fc7d 	bl	801433c <ucdr_deserialize_array_uint8_t>
 8011a42:	2202      	movs	r2, #2
 8011a44:	4004      	ands	r4, r0
 8011a46:	f106 010a 	add.w	r1, r6, #10
 8011a4a:	4628      	mov	r0, r5
 8011a4c:	f002 fc76 	bl	801433c <ucdr_deserialize_array_uint8_t>
 8011a50:	b2e4      	uxtb	r4, r4
 8011a52:	4603      	mov	r3, r0
 8011a54:	f106 010c 	add.w	r1, r6, #12
 8011a58:	4628      	mov	r0, r5
 8011a5a:	401c      	ands	r4, r3
 8011a5c:	f002 fce8 	bl	8014430 <ucdr_deserialize_bool>
 8011a60:	4004      	ands	r4, r0
 8011a62:	e794      	b.n	801198e <uxr_deserialize_ObjectVariant+0x52>
 8011a64:	1d31      	adds	r1, r6, #4
 8011a66:	4628      	mov	r0, r5
 8011a68:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011a6c:	f7ff bbd0 	b.w	8011210 <uxr_deserialize_CLIENT_Representation>
 8011a70:	68b1      	ldr	r1, [r6, #8]
 8011a72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011a76:	4628      	mov	r0, r5
 8011a78:	f003 fbc4 	bl	8015204 <ucdr_deserialize_string>
 8011a7c:	4607      	mov	r7, r0
 8011a7e:	e77f      	b.n	8011980 <uxr_deserialize_ObjectVariant+0x44>
 8011a80:	f106 0308 	add.w	r3, r6, #8
 8011a84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011a88:	f106 010c 	add.w	r1, r6, #12
 8011a8c:	4628      	mov	r0, r5
 8011a8e:	f7fd fbe9 	bl	800f264 <ucdr_deserialize_sequence_uint8_t>
 8011a92:	4607      	mov	r7, r0
 8011a94:	e774      	b.n	8011980 <uxr_deserialize_ObjectVariant+0x44>
 8011a96:	bf00      	nop

08011a98 <uxr_deserialize_BaseObjectRequest>:
 8011a98:	b570      	push	{r4, r5, r6, lr}
 8011a9a:	2202      	movs	r2, #2
 8011a9c:	4605      	mov	r5, r0
 8011a9e:	460e      	mov	r6, r1
 8011aa0:	f002 fc4c 	bl	801433c <ucdr_deserialize_array_uint8_t>
 8011aa4:	1cb1      	adds	r1, r6, #2
 8011aa6:	4604      	mov	r4, r0
 8011aa8:	2202      	movs	r2, #2
 8011aaa:	4628      	mov	r0, r5
 8011aac:	f002 fc46 	bl	801433c <ucdr_deserialize_array_uint8_t>
 8011ab0:	4020      	ands	r0, r4
 8011ab2:	b2c0      	uxtb	r0, r0
 8011ab4:	bd70      	pop	{r4, r5, r6, pc}
 8011ab6:	bf00      	nop

08011ab8 <uxr_serialize_AGENT_ActivityInfo>:
 8011ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011abc:	460e      	mov	r6, r1
 8011abe:	f9b1 1000 	ldrsh.w	r1, [r1]
 8011ac2:	4607      	mov	r7, r0
 8011ac4:	f003 fa0a 	bl	8014edc <ucdr_serialize_int16_t>
 8011ac8:	6871      	ldr	r1, [r6, #4]
 8011aca:	4680      	mov	r8, r0
 8011acc:	4638      	mov	r0, r7
 8011ace:	f002 fedf 	bl	8014890 <ucdr_serialize_uint32_t>
 8011ad2:	6873      	ldr	r3, [r6, #4]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d06a      	beq.n	8011bae <uxr_serialize_AGENT_ActivityInfo+0xf6>
 8011ad8:	b318      	cbz	r0, 8011b22 <uxr_serialize_AGENT_ActivityInfo+0x6a>
 8011ada:	f106 0904 	add.w	r9, r6, #4
 8011ade:	2500      	movs	r5, #0
 8011ae0:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 8011ae4:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 8011ae8:	7a21      	ldrb	r1, [r4, #8]
 8011aea:	4638      	mov	r0, r7
 8011aec:	f002 fcba 	bl	8014464 <ucdr_serialize_uint8_t>
 8011af0:	2800      	cmp	r0, #0
 8011af2:	d051      	beq.n	8011b98 <uxr_serialize_AGENT_ActivityInfo+0xe0>
 8011af4:	7a23      	ldrb	r3, [r4, #8]
 8011af6:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8011afa:	00c9      	lsls	r1, r1, #3
 8011afc:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 8011b00:	2b03      	cmp	r3, #3
 8011b02:	d859      	bhi.n	8011bb8 <uxr_serialize_AGENT_ActivityInfo+0x100>
 8011b04:	e8df f003 	tbb	[pc, r3]
 8011b08:	02122436 	.word	0x02122436
 8011b0c:	4449      	add	r1, r9
 8011b0e:	4638      	mov	r0, r7
 8011b10:	6889      	ldr	r1, [r1, #8]
 8011b12:	f003 fb67 	bl	80151e4 <ucdr_serialize_string>
 8011b16:	6873      	ldr	r3, [r6, #4]
 8011b18:	3501      	adds	r5, #1
 8011b1a:	429d      	cmp	r5, r3
 8011b1c:	d240      	bcs.n	8011ba0 <uxr_serialize_AGENT_ActivityInfo+0xe8>
 8011b1e:	2800      	cmp	r0, #0
 8011b20:	d1de      	bne.n	8011ae0 <uxr_serialize_AGENT_ActivityInfo+0x28>
 8011b22:	f04f 0800 	mov.w	r8, #0
 8011b26:	4640      	mov	r0, r8
 8011b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b2c:	3108      	adds	r1, #8
 8011b2e:	4449      	add	r1, r9
 8011b30:	2210      	movs	r2, #16
 8011b32:	4638      	mov	r0, r7
 8011b34:	f002 fb9e 	bl	8014274 <ucdr_serialize_array_uint8_t>
 8011b38:	44aa      	add	sl, r5
 8011b3a:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8011b3e:	4604      	mov	r4, r0
 8011b40:	f8da 101c 	ldr.w	r1, [sl, #28]
 8011b44:	4638      	mov	r0, r7
 8011b46:	f002 fea3 	bl	8014890 <ucdr_serialize_uint32_t>
 8011b4a:	4020      	ands	r0, r4
 8011b4c:	b2c0      	uxtb	r0, r0
 8011b4e:	e7e2      	b.n	8011b16 <uxr_serialize_AGENT_ActivityInfo+0x5e>
 8011b50:	3108      	adds	r1, #8
 8011b52:	4449      	add	r1, r9
 8011b54:	2204      	movs	r2, #4
 8011b56:	4638      	mov	r0, r7
 8011b58:	f002 fb8c 	bl	8014274 <ucdr_serialize_array_uint8_t>
 8011b5c:	44aa      	add	sl, r5
 8011b5e:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8011b62:	4604      	mov	r4, r0
 8011b64:	f8ba 1010 	ldrh.w	r1, [sl, #16]
 8011b68:	4638      	mov	r0, r7
 8011b6a:	f002 fca7 	bl	80144bc <ucdr_serialize_uint16_t>
 8011b6e:	4020      	ands	r0, r4
 8011b70:	b2c0      	uxtb	r0, r0
 8011b72:	e7d0      	b.n	8011b16 <uxr_serialize_AGENT_ActivityInfo+0x5e>
 8011b74:	3108      	adds	r1, #8
 8011b76:	4449      	add	r1, r9
 8011b78:	2202      	movs	r2, #2
 8011b7a:	4638      	mov	r0, r7
 8011b7c:	f002 fb7a 	bl	8014274 <ucdr_serialize_array_uint8_t>
 8011b80:	44aa      	add	sl, r5
 8011b82:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8011b86:	4604      	mov	r4, r0
 8011b88:	f89a 100e 	ldrb.w	r1, [sl, #14]
 8011b8c:	4638      	mov	r0, r7
 8011b8e:	f002 fc69 	bl	8014464 <ucdr_serialize_uint8_t>
 8011b92:	4020      	ands	r0, r4
 8011b94:	b2c0      	uxtb	r0, r0
 8011b96:	e7be      	b.n	8011b16 <uxr_serialize_AGENT_ActivityInfo+0x5e>
 8011b98:	6873      	ldr	r3, [r6, #4]
 8011b9a:	3501      	adds	r5, #1
 8011b9c:	429d      	cmp	r5, r3
 8011b9e:	d3c0      	bcc.n	8011b22 <uxr_serialize_AGENT_ActivityInfo+0x6a>
 8011ba0:	ea08 0000 	and.w	r0, r8, r0
 8011ba4:	fa5f f880 	uxtb.w	r8, r0
 8011ba8:	4640      	mov	r0, r8
 8011baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011bae:	ea08 0800 	and.w	r8, r8, r0
 8011bb2:	fa5f f888 	uxtb.w	r8, r8
 8011bb6:	e7b6      	b.n	8011b26 <uxr_serialize_AGENT_ActivityInfo+0x6e>
 8011bb8:	6873      	ldr	r3, [r6, #4]
 8011bba:	3501      	adds	r5, #1
 8011bbc:	42ab      	cmp	r3, r5
 8011bbe:	f104 0418 	add.w	r4, r4, #24
 8011bc2:	d891      	bhi.n	8011ae8 <uxr_serialize_AGENT_ActivityInfo+0x30>
 8011bc4:	e7af      	b.n	8011b26 <uxr_serialize_AGENT_ActivityInfo+0x6e>
 8011bc6:	bf00      	nop

08011bc8 <uxr_serialize_ActivityInfoVariant>:
 8011bc8:	b570      	push	{r4, r5, r6, lr}
 8011bca:	460d      	mov	r5, r1
 8011bcc:	7809      	ldrb	r1, [r1, #0]
 8011bce:	4606      	mov	r6, r0
 8011bd0:	f002 fc48 	bl	8014464 <ucdr_serialize_uint8_t>
 8011bd4:	b130      	cbz	r0, 8011be4 <uxr_serialize_ActivityInfoVariant+0x1c>
 8011bd6:	782b      	ldrb	r3, [r5, #0]
 8011bd8:	2b06      	cmp	r3, #6
 8011bda:	d019      	beq.n	8011c10 <uxr_serialize_ActivityInfoVariant+0x48>
 8011bdc:	2b0d      	cmp	r3, #13
 8011bde:	d010      	beq.n	8011c02 <uxr_serialize_ActivityInfoVariant+0x3a>
 8011be0:	2b05      	cmp	r3, #5
 8011be2:	d000      	beq.n	8011be6 <uxr_serialize_ActivityInfoVariant+0x1e>
 8011be4:	bd70      	pop	{r4, r5, r6, pc}
 8011be6:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8011bea:	4630      	mov	r0, r6
 8011bec:	f003 f976 	bl	8014edc <ucdr_serialize_int16_t>
 8011bf0:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8011bf4:	4604      	mov	r4, r0
 8011bf6:	4630      	mov	r0, r6
 8011bf8:	f003 f8a0 	bl	8014d3c <ucdr_serialize_uint64_t>
 8011bfc:	4020      	ands	r0, r4
 8011bfe:	b2c0      	uxtb	r0, r0
 8011c00:	bd70      	pop	{r4, r5, r6, pc}
 8011c02:	f105 0108 	add.w	r1, r5, #8
 8011c06:	4630      	mov	r0, r6
 8011c08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011c0c:	f7ff bf54 	b.w	8011ab8 <uxr_serialize_AGENT_ActivityInfo>
 8011c10:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8011c14:	4630      	mov	r0, r6
 8011c16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011c1a:	f003 b95f 	b.w	8014edc <ucdr_serialize_int16_t>
 8011c1e:	bf00      	nop

08011c20 <uxr_deserialize_BaseObjectReply>:
 8011c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c24:	2202      	movs	r2, #2
 8011c26:	4606      	mov	r6, r0
 8011c28:	460f      	mov	r7, r1
 8011c2a:	f002 fb87 	bl	801433c <ucdr_deserialize_array_uint8_t>
 8011c2e:	2202      	movs	r2, #2
 8011c30:	1cb9      	adds	r1, r7, #2
 8011c32:	4605      	mov	r5, r0
 8011c34:	4630      	mov	r0, r6
 8011c36:	f002 fb81 	bl	801433c <ucdr_deserialize_array_uint8_t>
 8011c3a:	1d39      	adds	r1, r7, #4
 8011c3c:	4680      	mov	r8, r0
 8011c3e:	4630      	mov	r0, r6
 8011c40:	f002 fc26 	bl	8014490 <ucdr_deserialize_uint8_t>
 8011c44:	1d79      	adds	r1, r7, #5
 8011c46:	4604      	mov	r4, r0
 8011c48:	4630      	mov	r0, r6
 8011c4a:	f002 fc21 	bl	8014490 <ucdr_deserialize_uint8_t>
 8011c4e:	ea05 0508 	and.w	r5, r5, r8
 8011c52:	402c      	ands	r4, r5
 8011c54:	4020      	ands	r0, r4
 8011c56:	b2c0      	uxtb	r0, r0
 8011c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011c5c <uxr_serialize_ReadSpecification>:
 8011c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c60:	460e      	mov	r6, r1
 8011c62:	7809      	ldrb	r1, [r1, #0]
 8011c64:	4607      	mov	r7, r0
 8011c66:	f002 fbfd 	bl	8014464 <ucdr_serialize_uint8_t>
 8011c6a:	7871      	ldrb	r1, [r6, #1]
 8011c6c:	4604      	mov	r4, r0
 8011c6e:	4638      	mov	r0, r7
 8011c70:	f002 fbf8 	bl	8014464 <ucdr_serialize_uint8_t>
 8011c74:	78b1      	ldrb	r1, [r6, #2]
 8011c76:	4004      	ands	r4, r0
 8011c78:	4638      	mov	r0, r7
 8011c7a:	f002 fbc3 	bl	8014404 <ucdr_serialize_bool>
 8011c7e:	78b3      	ldrb	r3, [r6, #2]
 8011c80:	b2e4      	uxtb	r4, r4
 8011c82:	4004      	ands	r4, r0
 8011c84:	b94b      	cbnz	r3, 8011c9a <uxr_serialize_ReadSpecification+0x3e>
 8011c86:	7a31      	ldrb	r1, [r6, #8]
 8011c88:	4638      	mov	r0, r7
 8011c8a:	f002 fbbb 	bl	8014404 <ucdr_serialize_bool>
 8011c8e:	7a33      	ldrb	r3, [r6, #8]
 8011c90:	4004      	ands	r4, r0
 8011c92:	b943      	cbnz	r3, 8011ca6 <uxr_serialize_ReadSpecification+0x4a>
 8011c94:	4620      	mov	r0, r4
 8011c96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c9a:	6871      	ldr	r1, [r6, #4]
 8011c9c:	4638      	mov	r0, r7
 8011c9e:	f003 faa1 	bl	80151e4 <ucdr_serialize_string>
 8011ca2:	4004      	ands	r4, r0
 8011ca4:	e7ef      	b.n	8011c86 <uxr_serialize_ReadSpecification+0x2a>
 8011ca6:	8971      	ldrh	r1, [r6, #10]
 8011ca8:	4638      	mov	r0, r7
 8011caa:	f002 fc07 	bl	80144bc <ucdr_serialize_uint16_t>
 8011cae:	89b1      	ldrh	r1, [r6, #12]
 8011cb0:	4605      	mov	r5, r0
 8011cb2:	4638      	mov	r0, r7
 8011cb4:	f002 fc02 	bl	80144bc <ucdr_serialize_uint16_t>
 8011cb8:	89f1      	ldrh	r1, [r6, #14]
 8011cba:	4005      	ands	r5, r0
 8011cbc:	4638      	mov	r0, r7
 8011cbe:	f002 fbfd 	bl	80144bc <ucdr_serialize_uint16_t>
 8011cc2:	8a31      	ldrh	r1, [r6, #16]
 8011cc4:	4680      	mov	r8, r0
 8011cc6:	4638      	mov	r0, r7
 8011cc8:	f002 fbf8 	bl	80144bc <ucdr_serialize_uint16_t>
 8011ccc:	b2ed      	uxtb	r5, r5
 8011cce:	4025      	ands	r5, r4
 8011cd0:	ea08 0505 	and.w	r5, r8, r5
 8011cd4:	ea00 0405 	and.w	r4, r0, r5
 8011cd8:	4620      	mov	r0, r4
 8011cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cde:	bf00      	nop

08011ce0 <uxr_serialize_CREATE_CLIENT_Payload>:
 8011ce0:	f7ff ba3a 	b.w	8011158 <uxr_serialize_CLIENT_Representation>

08011ce4 <uxr_serialize_CREATE_Payload>:
 8011ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ce6:	2202      	movs	r2, #2
 8011ce8:	4606      	mov	r6, r0
 8011cea:	460d      	mov	r5, r1
 8011cec:	f002 fac2 	bl	8014274 <ucdr_serialize_array_uint8_t>
 8011cf0:	1ca9      	adds	r1, r5, #2
 8011cf2:	4604      	mov	r4, r0
 8011cf4:	2202      	movs	r2, #2
 8011cf6:	4630      	mov	r0, r6
 8011cf8:	f002 fabc 	bl	8014274 <ucdr_serialize_array_uint8_t>
 8011cfc:	7929      	ldrb	r1, [r5, #4]
 8011cfe:	4607      	mov	r7, r0
 8011d00:	4630      	mov	r0, r6
 8011d02:	f002 fbaf 	bl	8014464 <ucdr_serialize_uint8_t>
 8011d06:	b328      	cbz	r0, 8011d54 <uxr_serialize_CREATE_Payload+0x70>
 8011d08:	792b      	ldrb	r3, [r5, #4]
 8011d0a:	403c      	ands	r4, r7
 8011d0c:	3b01      	subs	r3, #1
 8011d0e:	b2e4      	uxtb	r4, r4
 8011d10:	2b0d      	cmp	r3, #13
 8011d12:	d81d      	bhi.n	8011d50 <uxr_serialize_CREATE_Payload+0x6c>
 8011d14:	e8df f003 	tbb	[pc, r3]
 8011d18:	32320753 	.word	0x32320753
 8011d1c:	07070707 	.word	0x07070707
 8011d20:	2121211c 	.word	0x2121211c
 8011d24:	684c      	.short	0x684c
 8011d26:	7a29      	ldrb	r1, [r5, #8]
 8011d28:	4630      	mov	r0, r6
 8011d2a:	f002 fb9b 	bl	8014464 <ucdr_serialize_uint8_t>
 8011d2e:	4607      	mov	r7, r0
 8011d30:	b130      	cbz	r0, 8011d40 <uxr_serialize_CREATE_Payload+0x5c>
 8011d32:	7a2b      	ldrb	r3, [r5, #8]
 8011d34:	2b02      	cmp	r3, #2
 8011d36:	d035      	beq.n	8011da4 <uxr_serialize_CREATE_Payload+0xc0>
 8011d38:	2b03      	cmp	r3, #3
 8011d3a:	d02b      	beq.n	8011d94 <uxr_serialize_CREATE_Payload+0xb0>
 8011d3c:	2b01      	cmp	r3, #1
 8011d3e:	d031      	beq.n	8011da4 <uxr_serialize_CREATE_Payload+0xc0>
 8011d40:	f505 7104 	add.w	r1, r5, #528	; 0x210
 8011d44:	4630      	mov	r0, r6
 8011d46:	2202      	movs	r2, #2
 8011d48:	f002 fa94 	bl	8014274 <ucdr_serialize_array_uint8_t>
 8011d4c:	4038      	ands	r0, r7
 8011d4e:	4004      	ands	r4, r0
 8011d50:	4620      	mov	r0, r4
 8011d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d54:	2400      	movs	r4, #0
 8011d56:	4620      	mov	r0, r4
 8011d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d5a:	7a29      	ldrb	r1, [r5, #8]
 8011d5c:	4630      	mov	r0, r6
 8011d5e:	f002 fb81 	bl	8014464 <ucdr_serialize_uint8_t>
 8011d62:	2800      	cmp	r0, #0
 8011d64:	d0f6      	beq.n	8011d54 <uxr_serialize_CREATE_Payload+0x70>
 8011d66:	7a2b      	ldrb	r3, [r5, #8]
 8011d68:	2b01      	cmp	r3, #1
 8011d6a:	d001      	beq.n	8011d70 <uxr_serialize_CREATE_Payload+0x8c>
 8011d6c:	2b02      	cmp	r3, #2
 8011d6e:	d1ef      	bne.n	8011d50 <uxr_serialize_CREATE_Payload+0x6c>
 8011d70:	68e9      	ldr	r1, [r5, #12]
 8011d72:	4630      	mov	r0, r6
 8011d74:	f003 fa36 	bl	80151e4 <ucdr_serialize_string>
 8011d78:	4004      	ands	r4, r0
 8011d7a:	e7e9      	b.n	8011d50 <uxr_serialize_CREATE_Payload+0x6c>
 8011d7c:	7a29      	ldrb	r1, [r5, #8]
 8011d7e:	4630      	mov	r0, r6
 8011d80:	f002 fb70 	bl	8014464 <ucdr_serialize_uint8_t>
 8011d84:	4607      	mov	r7, r0
 8011d86:	2800      	cmp	r0, #0
 8011d88:	d0da      	beq.n	8011d40 <uxr_serialize_CREATE_Payload+0x5c>
 8011d8a:	7a2b      	ldrb	r3, [r5, #8]
 8011d8c:	2b02      	cmp	r3, #2
 8011d8e:	d009      	beq.n	8011da4 <uxr_serialize_CREATE_Payload+0xc0>
 8011d90:	2b03      	cmp	r3, #3
 8011d92:	d1d5      	bne.n	8011d40 <uxr_serialize_CREATE_Payload+0x5c>
 8011d94:	68ea      	ldr	r2, [r5, #12]
 8011d96:	f105 0110 	add.w	r1, r5, #16
 8011d9a:	4630      	mov	r0, r6
 8011d9c:	f7fd fa50 	bl	800f240 <ucdr_serialize_sequence_uint8_t>
 8011da0:	4607      	mov	r7, r0
 8011da2:	e7cd      	b.n	8011d40 <uxr_serialize_CREATE_Payload+0x5c>
 8011da4:	68e9      	ldr	r1, [r5, #12]
 8011da6:	4630      	mov	r0, r6
 8011da8:	f003 fa1c 	bl	80151e4 <ucdr_serialize_string>
 8011dac:	4607      	mov	r7, r0
 8011dae:	e7c7      	b.n	8011d40 <uxr_serialize_CREATE_Payload+0x5c>
 8011db0:	f105 0108 	add.w	r1, r5, #8
 8011db4:	4630      	mov	r0, r6
 8011db6:	f7ff fa95 	bl	80112e4 <uxr_serialize_AGENT_Representation>
 8011dba:	4004      	ands	r4, r0
 8011dbc:	e7c8      	b.n	8011d50 <uxr_serialize_CREATE_Payload+0x6c>
 8011dbe:	7a29      	ldrb	r1, [r5, #8]
 8011dc0:	4630      	mov	r0, r6
 8011dc2:	f002 fb4f 	bl	8014464 <ucdr_serialize_uint8_t>
 8011dc6:	4607      	mov	r7, r0
 8011dc8:	b130      	cbz	r0, 8011dd8 <uxr_serialize_CREATE_Payload+0xf4>
 8011dca:	7a2b      	ldrb	r3, [r5, #8]
 8011dcc:	2b02      	cmp	r3, #2
 8011dce:	d012      	beq.n	8011df6 <uxr_serialize_CREATE_Payload+0x112>
 8011dd0:	2b03      	cmp	r3, #3
 8011dd2:	d016      	beq.n	8011e02 <uxr_serialize_CREATE_Payload+0x11e>
 8011dd4:	2b01      	cmp	r3, #1
 8011dd6:	d00e      	beq.n	8011df6 <uxr_serialize_CREATE_Payload+0x112>
 8011dd8:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	; 0x210
 8011ddc:	4630      	mov	r0, r6
 8011dde:	f003 f87d 	bl	8014edc <ucdr_serialize_int16_t>
 8011de2:	4038      	ands	r0, r7
 8011de4:	4004      	ands	r4, r0
 8011de6:	e7b3      	b.n	8011d50 <uxr_serialize_CREATE_Payload+0x6c>
 8011de8:	f105 0108 	add.w	r1, r5, #8
 8011dec:	4630      	mov	r0, r6
 8011dee:	f7ff f9b3 	bl	8011158 <uxr_serialize_CLIENT_Representation>
 8011df2:	4004      	ands	r4, r0
 8011df4:	e7ac      	b.n	8011d50 <uxr_serialize_CREATE_Payload+0x6c>
 8011df6:	68e9      	ldr	r1, [r5, #12]
 8011df8:	4630      	mov	r0, r6
 8011dfa:	f003 f9f3 	bl	80151e4 <ucdr_serialize_string>
 8011dfe:	4607      	mov	r7, r0
 8011e00:	e7ea      	b.n	8011dd8 <uxr_serialize_CREATE_Payload+0xf4>
 8011e02:	68ea      	ldr	r2, [r5, #12]
 8011e04:	f105 0110 	add.w	r1, r5, #16
 8011e08:	4630      	mov	r0, r6
 8011e0a:	f7fd fa19 	bl	800f240 <ucdr_serialize_sequence_uint8_t>
 8011e0e:	4607      	mov	r7, r0
 8011e10:	e7e2      	b.n	8011dd8 <uxr_serialize_CREATE_Payload+0xf4>
 8011e12:	bf00      	nop

08011e14 <uxr_deserialize_GET_INFO_Payload>:
 8011e14:	b570      	push	{r4, r5, r6, lr}
 8011e16:	2202      	movs	r2, #2
 8011e18:	4605      	mov	r5, r0
 8011e1a:	460e      	mov	r6, r1
 8011e1c:	f002 fa8e 	bl	801433c <ucdr_deserialize_array_uint8_t>
 8011e20:	1cb1      	adds	r1, r6, #2
 8011e22:	2202      	movs	r2, #2
 8011e24:	4604      	mov	r4, r0
 8011e26:	4628      	mov	r0, r5
 8011e28:	f002 fa88 	bl	801433c <ucdr_deserialize_array_uint8_t>
 8011e2c:	1d31      	adds	r1, r6, #4
 8011e2e:	4004      	ands	r4, r0
 8011e30:	4628      	mov	r0, r5
 8011e32:	f002 fe5d 	bl	8014af0 <ucdr_deserialize_uint32_t>
 8011e36:	b2e4      	uxtb	r4, r4
 8011e38:	4020      	ands	r0, r4
 8011e3a:	bd70      	pop	{r4, r5, r6, pc}

08011e3c <uxr_serialize_DELETE_Payload>:
 8011e3c:	b570      	push	{r4, r5, r6, lr}
 8011e3e:	2202      	movs	r2, #2
 8011e40:	4605      	mov	r5, r0
 8011e42:	460e      	mov	r6, r1
 8011e44:	f002 fa16 	bl	8014274 <ucdr_serialize_array_uint8_t>
 8011e48:	1cb1      	adds	r1, r6, #2
 8011e4a:	4604      	mov	r4, r0
 8011e4c:	2202      	movs	r2, #2
 8011e4e:	4628      	mov	r0, r5
 8011e50:	f002 fa10 	bl	8014274 <ucdr_serialize_array_uint8_t>
 8011e54:	4020      	ands	r0, r4
 8011e56:	b2c0      	uxtb	r0, r0
 8011e58:	bd70      	pop	{r4, r5, r6, pc}
 8011e5a:	bf00      	nop

08011e5c <uxr_deserialize_STATUS_AGENT_Payload>:
 8011e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e60:	4606      	mov	r6, r0
 8011e62:	460f      	mov	r7, r1
 8011e64:	f002 fb14 	bl	8014490 <ucdr_deserialize_uint8_t>
 8011e68:	1c79      	adds	r1, r7, #1
 8011e6a:	4605      	mov	r5, r0
 8011e6c:	4630      	mov	r0, r6
 8011e6e:	f002 fb0f 	bl	8014490 <ucdr_deserialize_uint8_t>
 8011e72:	1d39      	adds	r1, r7, #4
 8011e74:	4681      	mov	r9, r0
 8011e76:	2204      	movs	r2, #4
 8011e78:	4630      	mov	r0, r6
 8011e7a:	f002 fa5f 	bl	801433c <ucdr_deserialize_array_uint8_t>
 8011e7e:	f107 0108 	add.w	r1, r7, #8
 8011e82:	4604      	mov	r4, r0
 8011e84:	2202      	movs	r2, #2
 8011e86:	4630      	mov	r0, r6
 8011e88:	f002 fa58 	bl	801433c <ucdr_deserialize_array_uint8_t>
 8011e8c:	f107 010a 	add.w	r1, r7, #10
 8011e90:	4680      	mov	r8, r0
 8011e92:	2202      	movs	r2, #2
 8011e94:	4630      	mov	r0, r6
 8011e96:	f002 fa51 	bl	801433c <ucdr_deserialize_array_uint8_t>
 8011e9a:	ea05 0509 	and.w	r5, r5, r9
 8011e9e:	b2ed      	uxtb	r5, r5
 8011ea0:	402c      	ands	r4, r5
 8011ea2:	f107 010c 	add.w	r1, r7, #12
 8011ea6:	4605      	mov	r5, r0
 8011ea8:	4630      	mov	r0, r6
 8011eaa:	f002 fac1 	bl	8014430 <ucdr_deserialize_bool>
 8011eae:	ea08 0404 	and.w	r4, r8, r4
 8011eb2:	4025      	ands	r5, r4
 8011eb4:	4028      	ands	r0, r5
 8011eb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011eba:	bf00      	nop

08011ebc <uxr_deserialize_STATUS_Payload>:
 8011ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ec0:	2202      	movs	r2, #2
 8011ec2:	4606      	mov	r6, r0
 8011ec4:	460f      	mov	r7, r1
 8011ec6:	f002 fa39 	bl	801433c <ucdr_deserialize_array_uint8_t>
 8011eca:	2202      	movs	r2, #2
 8011ecc:	1cb9      	adds	r1, r7, #2
 8011ece:	4605      	mov	r5, r0
 8011ed0:	4630      	mov	r0, r6
 8011ed2:	f002 fa33 	bl	801433c <ucdr_deserialize_array_uint8_t>
 8011ed6:	1d39      	adds	r1, r7, #4
 8011ed8:	4680      	mov	r8, r0
 8011eda:	4630      	mov	r0, r6
 8011edc:	f002 fad8 	bl	8014490 <ucdr_deserialize_uint8_t>
 8011ee0:	1d79      	adds	r1, r7, #5
 8011ee2:	4604      	mov	r4, r0
 8011ee4:	4630      	mov	r0, r6
 8011ee6:	f002 fad3 	bl	8014490 <ucdr_deserialize_uint8_t>
 8011eea:	ea05 0508 	and.w	r5, r5, r8
 8011eee:	402c      	ands	r4, r5
 8011ef0:	4020      	ands	r0, r4
 8011ef2:	b2c0      	uxtb	r0, r0
 8011ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011ef8 <uxr_serialize_INFO_Payload>:
 8011ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011efc:	2202      	movs	r2, #2
 8011efe:	460c      	mov	r4, r1
 8011f00:	4605      	mov	r5, r0
 8011f02:	f002 f9b7 	bl	8014274 <ucdr_serialize_array_uint8_t>
 8011f06:	2202      	movs	r2, #2
 8011f08:	4680      	mov	r8, r0
 8011f0a:	1ca1      	adds	r1, r4, #2
 8011f0c:	4628      	mov	r0, r5
 8011f0e:	f002 f9b1 	bl	8014274 <ucdr_serialize_array_uint8_t>
 8011f12:	7921      	ldrb	r1, [r4, #4]
 8011f14:	4607      	mov	r7, r0
 8011f16:	4628      	mov	r0, r5
 8011f18:	f002 faa4 	bl	8014464 <ucdr_serialize_uint8_t>
 8011f1c:	7961      	ldrb	r1, [r4, #5]
 8011f1e:	4606      	mov	r6, r0
 8011f20:	4628      	mov	r0, r5
 8011f22:	f002 fa9f 	bl	8014464 <ucdr_serialize_uint8_t>
 8011f26:	ea08 0807 	and.w	r8, r8, r7
 8011f2a:	ea06 0608 	and.w	r6, r6, r8
 8011f2e:	4006      	ands	r6, r0
 8011f30:	7a21      	ldrb	r1, [r4, #8]
 8011f32:	4628      	mov	r0, r5
 8011f34:	f002 fa66 	bl	8014404 <ucdr_serialize_bool>
 8011f38:	7a23      	ldrb	r3, [r4, #8]
 8011f3a:	b2f7      	uxtb	r7, r6
 8011f3c:	4606      	mov	r6, r0
 8011f3e:	b96b      	cbnz	r3, 8011f5c <uxr_serialize_INFO_Payload+0x64>
 8011f40:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 8011f44:	4628      	mov	r0, r5
 8011f46:	f002 fa5d 	bl	8014404 <ucdr_serialize_bool>
 8011f4a:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 8011f4e:	4030      	ands	r0, r6
 8011f50:	b2c6      	uxtb	r6, r0
 8011f52:	b983      	cbnz	r3, 8011f76 <uxr_serialize_INFO_Payload+0x7e>
 8011f54:	ea06 0007 	and.w	r0, r6, r7
 8011f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f5c:	7b21      	ldrb	r1, [r4, #12]
 8011f5e:	4628      	mov	r0, r5
 8011f60:	f002 fa80 	bl	8014464 <ucdr_serialize_uint8_t>
 8011f64:	b188      	cbz	r0, 8011f8a <uxr_serialize_INFO_Payload+0x92>
 8011f66:	f104 010c 	add.w	r1, r4, #12
 8011f6a:	4628      	mov	r0, r5
 8011f6c:	f7ff fa06 	bl	801137c <uxr_serialize_ObjectVariant.part.0>
 8011f70:	4030      	ands	r0, r6
 8011f72:	b2c6      	uxtb	r6, r0
 8011f74:	e7e4      	b.n	8011f40 <uxr_serialize_INFO_Payload+0x48>
 8011f76:	f504 7108 	add.w	r1, r4, #544	; 0x220
 8011f7a:	4628      	mov	r0, r5
 8011f7c:	f7ff fe24 	bl	8011bc8 <uxr_serialize_ActivityInfoVariant>
 8011f80:	4006      	ands	r6, r0
 8011f82:	ea06 0007 	and.w	r0, r6, r7
 8011f86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f8a:	4606      	mov	r6, r0
 8011f8c:	e7d8      	b.n	8011f40 <uxr_serialize_INFO_Payload+0x48>
 8011f8e:	bf00      	nop

08011f90 <uxr_serialize_READ_DATA_Payload>:
 8011f90:	b570      	push	{r4, r5, r6, lr}
 8011f92:	2202      	movs	r2, #2
 8011f94:	4605      	mov	r5, r0
 8011f96:	460e      	mov	r6, r1
 8011f98:	f002 f96c 	bl	8014274 <ucdr_serialize_array_uint8_t>
 8011f9c:	1cb1      	adds	r1, r6, #2
 8011f9e:	2202      	movs	r2, #2
 8011fa0:	4604      	mov	r4, r0
 8011fa2:	4628      	mov	r0, r5
 8011fa4:	f002 f966 	bl	8014274 <ucdr_serialize_array_uint8_t>
 8011fa8:	1d31      	adds	r1, r6, #4
 8011faa:	4004      	ands	r4, r0
 8011fac:	4628      	mov	r0, r5
 8011fae:	f7ff fe55 	bl	8011c5c <uxr_serialize_ReadSpecification>
 8011fb2:	b2e4      	uxtb	r4, r4
 8011fb4:	4020      	ands	r0, r4
 8011fb6:	bd70      	pop	{r4, r5, r6, pc}

08011fb8 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8011fb8:	b570      	push	{r4, r5, r6, lr}
 8011fba:	2202      	movs	r2, #2
 8011fbc:	4605      	mov	r5, r0
 8011fbe:	460e      	mov	r6, r1
 8011fc0:	f002 f958 	bl	8014274 <ucdr_serialize_array_uint8_t>
 8011fc4:	1cb1      	adds	r1, r6, #2
 8011fc6:	4604      	mov	r4, r0
 8011fc8:	2202      	movs	r2, #2
 8011fca:	4628      	mov	r0, r5
 8011fcc:	f002 f952 	bl	8014274 <ucdr_serialize_array_uint8_t>
 8011fd0:	4020      	ands	r0, r4
 8011fd2:	b2c0      	uxtb	r0, r0
 8011fd4:	bd70      	pop	{r4, r5, r6, pc}
 8011fd6:	bf00      	nop

08011fd8 <uxr_serialize_ACKNACK_Payload>:
 8011fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fda:	460f      	mov	r7, r1
 8011fdc:	460e      	mov	r6, r1
 8011fde:	f837 1b02 	ldrh.w	r1, [r7], #2
 8011fe2:	4605      	mov	r5, r0
 8011fe4:	f002 fa6a 	bl	80144bc <ucdr_serialize_uint16_t>
 8011fe8:	4639      	mov	r1, r7
 8011fea:	2202      	movs	r2, #2
 8011fec:	4604      	mov	r4, r0
 8011fee:	4628      	mov	r0, r5
 8011ff0:	f002 f940 	bl	8014274 <ucdr_serialize_array_uint8_t>
 8011ff4:	7931      	ldrb	r1, [r6, #4]
 8011ff6:	4004      	ands	r4, r0
 8011ff8:	4628      	mov	r0, r5
 8011ffa:	f002 fa33 	bl	8014464 <ucdr_serialize_uint8_t>
 8011ffe:	b2e4      	uxtb	r4, r4
 8012000:	4020      	ands	r0, r4
 8012002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012004 <uxr_deserialize_ACKNACK_Payload>:
 8012004:	b570      	push	{r4, r5, r6, lr}
 8012006:	4605      	mov	r5, r0
 8012008:	460e      	mov	r6, r1
 801200a:	f002 fb57 	bl	80146bc <ucdr_deserialize_uint16_t>
 801200e:	1cb1      	adds	r1, r6, #2
 8012010:	2202      	movs	r2, #2
 8012012:	4604      	mov	r4, r0
 8012014:	4628      	mov	r0, r5
 8012016:	f002 f991 	bl	801433c <ucdr_deserialize_array_uint8_t>
 801201a:	1d31      	adds	r1, r6, #4
 801201c:	4004      	ands	r4, r0
 801201e:	4628      	mov	r0, r5
 8012020:	f002 fa36 	bl	8014490 <ucdr_deserialize_uint8_t>
 8012024:	b2e4      	uxtb	r4, r4
 8012026:	4020      	ands	r0, r4
 8012028:	bd70      	pop	{r4, r5, r6, pc}
 801202a:	bf00      	nop

0801202c <uxr_serialize_HEARTBEAT_Payload>:
 801202c:	b570      	push	{r4, r5, r6, lr}
 801202e:	460d      	mov	r5, r1
 8012030:	8809      	ldrh	r1, [r1, #0]
 8012032:	4606      	mov	r6, r0
 8012034:	f002 fa42 	bl	80144bc <ucdr_serialize_uint16_t>
 8012038:	8869      	ldrh	r1, [r5, #2]
 801203a:	4604      	mov	r4, r0
 801203c:	4630      	mov	r0, r6
 801203e:	f002 fa3d 	bl	80144bc <ucdr_serialize_uint16_t>
 8012042:	7929      	ldrb	r1, [r5, #4]
 8012044:	4004      	ands	r4, r0
 8012046:	4630      	mov	r0, r6
 8012048:	f002 fa0c 	bl	8014464 <ucdr_serialize_uint8_t>
 801204c:	b2e4      	uxtb	r4, r4
 801204e:	4020      	ands	r0, r4
 8012050:	bd70      	pop	{r4, r5, r6, pc}
 8012052:	bf00      	nop

08012054 <uxr_deserialize_HEARTBEAT_Payload>:
 8012054:	b570      	push	{r4, r5, r6, lr}
 8012056:	4605      	mov	r5, r0
 8012058:	460e      	mov	r6, r1
 801205a:	f002 fb2f 	bl	80146bc <ucdr_deserialize_uint16_t>
 801205e:	1cb1      	adds	r1, r6, #2
 8012060:	4604      	mov	r4, r0
 8012062:	4628      	mov	r0, r5
 8012064:	f002 fb2a 	bl	80146bc <ucdr_deserialize_uint16_t>
 8012068:	1d31      	adds	r1, r6, #4
 801206a:	4004      	ands	r4, r0
 801206c:	4628      	mov	r0, r5
 801206e:	f002 fa0f 	bl	8014490 <ucdr_deserialize_uint8_t>
 8012072:	b2e4      	uxtb	r4, r4
 8012074:	4020      	ands	r0, r4
 8012076:	bd70      	pop	{r4, r5, r6, pc}

08012078 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8012078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801207c:	4605      	mov	r5, r0
 801207e:	460e      	mov	r6, r1
 8012080:	f003 f820 	bl	80150c4 <ucdr_deserialize_int32_t>
 8012084:	1d31      	adds	r1, r6, #4
 8012086:	4607      	mov	r7, r0
 8012088:	4628      	mov	r0, r5
 801208a:	f002 fd31 	bl	8014af0 <ucdr_deserialize_uint32_t>
 801208e:	f106 0108 	add.w	r1, r6, #8
 8012092:	4680      	mov	r8, r0
 8012094:	4628      	mov	r0, r5
 8012096:	f003 f815 	bl	80150c4 <ucdr_deserialize_int32_t>
 801209a:	f106 010c 	add.w	r1, r6, #12
 801209e:	4604      	mov	r4, r0
 80120a0:	4628      	mov	r0, r5
 80120a2:	f002 fd25 	bl	8014af0 <ucdr_deserialize_uint32_t>
 80120a6:	ea07 0708 	and.w	r7, r7, r8
 80120aa:	403c      	ands	r4, r7
 80120ac:	f106 0110 	add.w	r1, r6, #16
 80120b0:	4004      	ands	r4, r0
 80120b2:	4628      	mov	r0, r5
 80120b4:	f003 f806 	bl	80150c4 <ucdr_deserialize_int32_t>
 80120b8:	f106 0114 	add.w	r1, r6, #20
 80120bc:	4603      	mov	r3, r0
 80120be:	4628      	mov	r0, r5
 80120c0:	461d      	mov	r5, r3
 80120c2:	f002 fd15 	bl	8014af0 <ucdr_deserialize_uint32_t>
 80120c6:	b2e4      	uxtb	r4, r4
 80120c8:	402c      	ands	r4, r5
 80120ca:	4020      	ands	r0, r4
 80120cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080120d0 <uxr_deserialize_SampleIdentity>:
 80120d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120d4:	220c      	movs	r2, #12
 80120d6:	4604      	mov	r4, r0
 80120d8:	460d      	mov	r5, r1
 80120da:	f002 f92f 	bl	801433c <ucdr_deserialize_array_uint8_t>
 80120de:	2203      	movs	r2, #3
 80120e0:	f105 010c 	add.w	r1, r5, #12
 80120e4:	4607      	mov	r7, r0
 80120e6:	4620      	mov	r0, r4
 80120e8:	f002 f928 	bl	801433c <ucdr_deserialize_array_uint8_t>
 80120ec:	f105 010f 	add.w	r1, r5, #15
 80120f0:	4680      	mov	r8, r0
 80120f2:	4620      	mov	r0, r4
 80120f4:	f002 f9cc 	bl	8014490 <ucdr_deserialize_uint8_t>
 80120f8:	f105 0110 	add.w	r1, r5, #16
 80120fc:	4606      	mov	r6, r0
 80120fe:	4620      	mov	r0, r4
 8012100:	f002 ffe0 	bl	80150c4 <ucdr_deserialize_int32_t>
 8012104:	f105 0114 	add.w	r1, r5, #20
 8012108:	4603      	mov	r3, r0
 801210a:	4620      	mov	r0, r4
 801210c:	ea07 0708 	and.w	r7, r7, r8
 8012110:	461c      	mov	r4, r3
 8012112:	f002 fced 	bl	8014af0 <ucdr_deserialize_uint32_t>
 8012116:	403e      	ands	r6, r7
 8012118:	4034      	ands	r4, r6
 801211a:	4020      	ands	r0, r4
 801211c:	b2c0      	uxtb	r0, r0
 801211e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012122:	bf00      	nop

08012124 <rcl_convert_rmw_ret_to_rcl_ret>:
 8012124:	280b      	cmp	r0, #11
 8012126:	dc0d      	bgt.n	8012144 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8012128:	2800      	cmp	r0, #0
 801212a:	db09      	blt.n	8012140 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801212c:	280b      	cmp	r0, #11
 801212e:	d807      	bhi.n	8012140 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8012130:	e8df f000 	tbb	[pc, r0]
 8012134:	07060607 	.word	0x07060607
 8012138:	06060606 	.word	0x06060606
 801213c:	07070606 	.word	0x07070606
 8012140:	2001      	movs	r0, #1
 8012142:	4770      	bx	lr
 8012144:	28cb      	cmp	r0, #203	; 0xcb
 8012146:	bf18      	it	ne
 8012148:	2001      	movne	r0, #1
 801214a:	4770      	bx	lr

0801214c <rcl_get_zero_initialized_context>:
 801214c:	4a03      	ldr	r2, [pc, #12]	; (801215c <rcl_get_zero_initialized_context+0x10>)
 801214e:	4603      	mov	r3, r0
 8012150:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012154:	e883 0003 	stmia.w	r3, {r0, r1}
 8012158:	4618      	mov	r0, r3
 801215a:	4770      	bx	lr
 801215c:	08018964 	.word	0x08018964

08012160 <rcl_context_is_valid>:
 8012160:	b118      	cbz	r0, 801216a <rcl_context_is_valid+0xa>
 8012162:	6840      	ldr	r0, [r0, #4]
 8012164:	3800      	subs	r0, #0
 8012166:	bf18      	it	ne
 8012168:	2001      	movne	r0, #1
 801216a:	4770      	bx	lr

0801216c <__cleanup_context>:
 801216c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012170:	4606      	mov	r6, r0
 8012172:	6800      	ldr	r0, [r0, #0]
 8012174:	2300      	movs	r3, #0
 8012176:	6073      	str	r3, [r6, #4]
 8012178:	2800      	cmp	r0, #0
 801217a:	d04d      	beq.n	8012218 <__cleanup_context+0xac>
 801217c:	6947      	ldr	r7, [r0, #20]
 801217e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8012182:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8012186:	b137      	cbz	r7, 8012196 <__cleanup_context+0x2a>
 8012188:	3014      	adds	r0, #20
 801218a:	f000 fb1d 	bl	80127c8 <rcl_init_options_fini>
 801218e:	4607      	mov	r7, r0
 8012190:	2800      	cmp	r0, #0
 8012192:	d148      	bne.n	8012226 <__cleanup_context+0xba>
 8012194:	6830      	ldr	r0, [r6, #0]
 8012196:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8012198:	b143      	cbz	r3, 80121ac <__cleanup_context+0x40>
 801219a:	3028      	adds	r0, #40	; 0x28
 801219c:	f001 fdd4 	bl	8013d48 <rmw_context_fini>
 80121a0:	b118      	cbz	r0, 80121aa <__cleanup_context+0x3e>
 80121a2:	2f00      	cmp	r7, #0
 80121a4:	d042      	beq.n	801222c <__cleanup_context+0xc0>
 80121a6:	f7fb fe9d 	bl	800dee4 <rcutils_reset_error>
 80121aa:	6830      	ldr	r0, [r6, #0]
 80121ac:	f8d0 c020 	ldr.w	ip, [r0, #32]
 80121b0:	f1bc 0f00 	cmp.w	ip, #0
 80121b4:	d01c      	beq.n	80121f0 <__cleanup_context+0x84>
 80121b6:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 80121ba:	2a01      	cmp	r2, #1
 80121bc:	f173 0100 	sbcs.w	r1, r3, #0
 80121c0:	db12      	blt.n	80121e8 <__cleanup_context+0x7c>
 80121c2:	2400      	movs	r4, #0
 80121c4:	2500      	movs	r5, #0
 80121c6:	f85c 0024 	ldr.w	r0, [ip, r4, lsl #2]
 80121ca:	4649      	mov	r1, r9
 80121cc:	b1c0      	cbz	r0, 8012200 <__cleanup_context+0x94>
 80121ce:	47c0      	blx	r8
 80121d0:	6831      	ldr	r1, [r6, #0]
 80121d2:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 80121d6:	3401      	adds	r4, #1
 80121d8:	f145 0500 	adc.w	r5, r5, #0
 80121dc:	4294      	cmp	r4, r2
 80121de:	f8d1 c020 	ldr.w	ip, [r1, #32]
 80121e2:	eb75 0103 	sbcs.w	r1, r5, r3
 80121e6:	dbee      	blt.n	80121c6 <__cleanup_context+0x5a>
 80121e8:	4660      	mov	r0, ip
 80121ea:	4649      	mov	r1, r9
 80121ec:	47c0      	blx	r8
 80121ee:	6830      	ldr	r0, [r6, #0]
 80121f0:	4649      	mov	r1, r9
 80121f2:	47c0      	blx	r8
 80121f4:	2300      	movs	r3, #0
 80121f6:	e9c6 3300 	strd	r3, r3, [r6]
 80121fa:	4638      	mov	r0, r7
 80121fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012200:	3401      	adds	r4, #1
 8012202:	f145 0500 	adc.w	r5, r5, #0
 8012206:	4294      	cmp	r4, r2
 8012208:	eb75 0103 	sbcs.w	r1, r5, r3
 801220c:	dbdb      	blt.n	80121c6 <__cleanup_context+0x5a>
 801220e:	4660      	mov	r0, ip
 8012210:	4649      	mov	r1, r9
 8012212:	47c0      	blx	r8
 8012214:	6830      	ldr	r0, [r6, #0]
 8012216:	e7eb      	b.n	80121f0 <__cleanup_context+0x84>
 8012218:	4607      	mov	r7, r0
 801221a:	2300      	movs	r3, #0
 801221c:	e9c6 3300 	strd	r3, r3, [r6]
 8012220:	4638      	mov	r0, r7
 8012222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012226:	f7fb fe5d 	bl	800dee4 <rcutils_reset_error>
 801222a:	e7b3      	b.n	8012194 <__cleanup_context+0x28>
 801222c:	f7ff ff7a 	bl	8012124 <rcl_convert_rmw_ret_to_rcl_ret>
 8012230:	4607      	mov	r7, r0
 8012232:	e7b8      	b.n	80121a6 <__cleanup_context+0x3a>

08012234 <rcl_expand_topic_name>:
 8012234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012238:	b08b      	sub	sp, #44	; 0x2c
 801223a:	9306      	str	r3, [sp, #24]
 801223c:	2800      	cmp	r0, #0
 801223e:	f000 80d2 	beq.w	80123e6 <rcl_expand_topic_name+0x1b2>
 8012242:	460e      	mov	r6, r1
 8012244:	2900      	cmp	r1, #0
 8012246:	f000 80ce 	beq.w	80123e6 <rcl_expand_topic_name+0x1b2>
 801224a:	4617      	mov	r7, r2
 801224c:	2a00      	cmp	r2, #0
 801224e:	f000 80ca 	beq.w	80123e6 <rcl_expand_topic_name+0x1b2>
 8012252:	2b00      	cmp	r3, #0
 8012254:	f000 80c7 	beq.w	80123e6 <rcl_expand_topic_name+0x1b2>
 8012258:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801225a:	2b00      	cmp	r3, #0
 801225c:	f000 80c3 	beq.w	80123e6 <rcl_expand_topic_name+0x1b2>
 8012260:	a909      	add	r1, sp, #36	; 0x24
 8012262:	2200      	movs	r2, #0
 8012264:	4680      	mov	r8, r0
 8012266:	f000 ff67 	bl	8013138 <rcl_validate_topic_name>
 801226a:	4604      	mov	r4, r0
 801226c:	2800      	cmp	r0, #0
 801226e:	f040 80b6 	bne.w	80123de <rcl_expand_topic_name+0x1aa>
 8012272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012274:	2b00      	cmp	r3, #0
 8012276:	f040 80bf 	bne.w	80123f8 <rcl_expand_topic_name+0x1c4>
 801227a:	4602      	mov	r2, r0
 801227c:	a909      	add	r1, sp, #36	; 0x24
 801227e:	4630      	mov	r0, r6
 8012280:	f001 fac8 	bl	8013814 <rmw_validate_node_name>
 8012284:	2800      	cmp	r0, #0
 8012286:	f040 80b3 	bne.w	80123f0 <rcl_expand_topic_name+0x1bc>
 801228a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801228c:	2a00      	cmp	r2, #0
 801228e:	f040 80b8 	bne.w	8012402 <rcl_expand_topic_name+0x1ce>
 8012292:	a909      	add	r1, sp, #36	; 0x24
 8012294:	4638      	mov	r0, r7
 8012296:	f001 fa9f 	bl	80137d8 <rmw_validate_namespace>
 801229a:	2800      	cmp	r0, #0
 801229c:	f040 80a8 	bne.w	80123f0 <rcl_expand_topic_name+0x1bc>
 80122a0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80122a2:	2c00      	cmp	r4, #0
 80122a4:	f040 80f6 	bne.w	8012494 <rcl_expand_topic_name+0x260>
 80122a8:	217b      	movs	r1, #123	; 0x7b
 80122aa:	4640      	mov	r0, r8
 80122ac:	f005 f98e 	bl	80175cc <strchr>
 80122b0:	f898 3000 	ldrb.w	r3, [r8]
 80122b4:	2b2f      	cmp	r3, #47	; 0x2f
 80122b6:	4605      	mov	r5, r0
 80122b8:	f000 80c4 	beq.w	8012444 <rcl_expand_topic_name+0x210>
 80122bc:	2b7e      	cmp	r3, #126	; 0x7e
 80122be:	d16f      	bne.n	80123a0 <rcl_expand_topic_name+0x16c>
 80122c0:	4638      	mov	r0, r7
 80122c2:	f7ed ff97 	bl	80001f4 <strlen>
 80122c6:	4b87      	ldr	r3, [pc, #540]	; (80124e4 <rcl_expand_topic_name+0x2b0>)
 80122c8:	4987      	ldr	r1, [pc, #540]	; (80124e8 <rcl_expand_topic_name+0x2b4>)
 80122ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80122cc:	9604      	str	r6, [sp, #16]
 80122ce:	2801      	cmp	r0, #1
 80122d0:	bf0c      	ite	eq
 80122d2:	4618      	moveq	r0, r3
 80122d4:	4608      	movne	r0, r1
 80122d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80122da:	e9cd 2300 	strd	r2, r3, [sp]
 80122de:	e9cd 0702 	strd	r0, r7, [sp, #8]
 80122e2:	f108 0101 	add.w	r1, r8, #1
 80122e6:	9105      	str	r1, [sp, #20]
 80122e8:	ab14      	add	r3, sp, #80	; 0x50
 80122ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80122ec:	f001 f852 	bl	8013394 <rcutils_format_string_limit>
 80122f0:	4682      	mov	sl, r0
 80122f2:	2800      	cmp	r0, #0
 80122f4:	f000 80d0 	beq.w	8012498 <rcl_expand_topic_name+0x264>
 80122f8:	2d00      	cmp	r5, #0
 80122fa:	f000 80aa 	beq.w	8012452 <rcl_expand_topic_name+0x21e>
 80122fe:	217b      	movs	r1, #123	; 0x7b
 8012300:	f005 f964 	bl	80175cc <strchr>
 8012304:	46d1      	mov	r9, sl
 8012306:	4605      	mov	r5, r0
 8012308:	9407      	str	r4, [sp, #28]
 801230a:	46d3      	mov	fp, sl
 801230c:	464c      	mov	r4, r9
 801230e:	2d00      	cmp	r5, #0
 8012310:	f000 80c7 	beq.w	80124a2 <rcl_expand_topic_name+0x26e>
 8012314:	217d      	movs	r1, #125	; 0x7d
 8012316:	4620      	mov	r0, r4
 8012318:	f005 f958 	bl	80175cc <strchr>
 801231c:	eba0 0905 	sub.w	r9, r0, r5
 8012320:	f109 0a01 	add.w	sl, r9, #1
 8012324:	4871      	ldr	r0, [pc, #452]	; (80124ec <rcl_expand_topic_name+0x2b8>)
 8012326:	4652      	mov	r2, sl
 8012328:	4629      	mov	r1, r5
 801232a:	f005 f95c 	bl	80175e6 <strncmp>
 801232e:	2800      	cmp	r0, #0
 8012330:	f000 808d 	beq.w	801244e <rcl_expand_topic_name+0x21a>
 8012334:	486e      	ldr	r0, [pc, #440]	; (80124f0 <rcl_expand_topic_name+0x2bc>)
 8012336:	4652      	mov	r2, sl
 8012338:	4629      	mov	r1, r5
 801233a:	f005 f954 	bl	80175e6 <strncmp>
 801233e:	b130      	cbz	r0, 801234e <rcl_expand_topic_name+0x11a>
 8012340:	486c      	ldr	r0, [pc, #432]	; (80124f4 <rcl_expand_topic_name+0x2c0>)
 8012342:	4652      	mov	r2, sl
 8012344:	4629      	mov	r1, r5
 8012346:	f005 f94e 	bl	80175e6 <strncmp>
 801234a:	2800      	cmp	r0, #0
 801234c:	d15b      	bne.n	8012406 <rcl_expand_topic_name+0x1d2>
 801234e:	46b9      	mov	r9, r7
 8012350:	ab16      	add	r3, sp, #88	; 0x58
 8012352:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012356:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801235a:	ab14      	add	r3, sp, #80	; 0x50
 801235c:	4628      	mov	r0, r5
 801235e:	cb0c      	ldmia	r3, {r2, r3}
 8012360:	4651      	mov	r1, sl
 8012362:	f001 f963 	bl	801362c <rcutils_strndup>
 8012366:	4605      	mov	r5, r0
 8012368:	2800      	cmp	r0, #0
 801236a:	f000 80a4 	beq.w	80124b6 <rcl_expand_topic_name+0x282>
 801236e:	464a      	mov	r2, r9
 8012370:	4620      	mov	r0, r4
 8012372:	ab14      	add	r3, sp, #80	; 0x50
 8012374:	4629      	mov	r1, r5
 8012376:	f001 f85f 	bl	8013438 <rcutils_repl_str>
 801237a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801237c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801237e:	4604      	mov	r4, r0
 8012380:	4628      	mov	r0, r5
 8012382:	4798      	blx	r3
 8012384:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012386:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012388:	4658      	mov	r0, fp
 801238a:	4798      	blx	r3
 801238c:	2c00      	cmp	r4, #0
 801238e:	f000 8083 	beq.w	8012498 <rcl_expand_topic_name+0x264>
 8012392:	217b      	movs	r1, #123	; 0x7b
 8012394:	4620      	mov	r0, r4
 8012396:	f005 f919 	bl	80175cc <strchr>
 801239a:	46a3      	mov	fp, r4
 801239c:	4605      	mov	r5, r0
 801239e:	e7b6      	b.n	801230e <rcl_expand_topic_name+0xda>
 80123a0:	2800      	cmp	r0, #0
 80123a2:	d151      	bne.n	8012448 <rcl_expand_topic_name+0x214>
 80123a4:	4638      	mov	r0, r7
 80123a6:	f7ed ff25 	bl	80001f4 <strlen>
 80123aa:	4b53      	ldr	r3, [pc, #332]	; (80124f8 <rcl_expand_topic_name+0x2c4>)
 80123ac:	4a53      	ldr	r2, [pc, #332]	; (80124fc <rcl_expand_topic_name+0x2c8>)
 80123ae:	f8cd 8010 	str.w	r8, [sp, #16]
 80123b2:	2801      	cmp	r0, #1
 80123b4:	bf0c      	ite	eq
 80123b6:	4618      	moveq	r0, r3
 80123b8:	4610      	movne	r0, r2
 80123ba:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80123bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80123c0:	e9cd 3200 	strd	r3, r2, [sp]
 80123c4:	e9cd 0702 	strd	r0, r7, [sp, #8]
 80123c8:	ab14      	add	r3, sp, #80	; 0x50
 80123ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80123cc:	f000 ffe2 	bl	8013394 <rcutils_format_string_limit>
 80123d0:	4682      	mov	sl, r0
 80123d2:	4653      	mov	r3, sl
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d05f      	beq.n	8012498 <rcl_expand_topic_name+0x264>
 80123d8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80123da:	f8c3 a000 	str.w	sl, [r3]
 80123de:	4620      	mov	r0, r4
 80123e0:	b00b      	add	sp, #44	; 0x2c
 80123e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123e6:	240b      	movs	r4, #11
 80123e8:	4620      	mov	r0, r4
 80123ea:	b00b      	add	sp, #44	; 0x2c
 80123ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123f0:	f7ff fe98 	bl	8012124 <rcl_convert_rmw_ret_to_rcl_ret>
 80123f4:	4604      	mov	r4, r0
 80123f6:	e7f2      	b.n	80123de <rcl_expand_topic_name+0x1aa>
 80123f8:	2467      	movs	r4, #103	; 0x67
 80123fa:	4620      	mov	r0, r4
 80123fc:	b00b      	add	sp, #44	; 0x2c
 80123fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012402:	24c9      	movs	r4, #201	; 0xc9
 8012404:	e7eb      	b.n	80123de <rcl_expand_topic_name+0x1aa>
 8012406:	f109 32ff 	add.w	r2, r9, #4294967295
 801240a:	9806      	ldr	r0, [sp, #24]
 801240c:	1c69      	adds	r1, r5, #1
 801240e:	f7fb fe7f 	bl	800e110 <rcutils_string_map_getn>
 8012412:	4681      	mov	r9, r0
 8012414:	2800      	cmp	r0, #0
 8012416:	d19b      	bne.n	8012350 <rcl_expand_topic_name+0x11c>
 8012418:	aa16      	add	r2, sp, #88	; 0x58
 801241a:	ca07      	ldmia	r2, {r0, r1, r2}
 801241c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801241e:	f8c3 9000 	str.w	r9, [r3]
 8012422:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012426:	ab14      	add	r3, sp, #80	; 0x50
 8012428:	cb0c      	ldmia	r3, {r2, r3}
 801242a:	4651      	mov	r1, sl
 801242c:	4628      	mov	r0, r5
 801242e:	f001 f8fd 	bl	801362c <rcutils_strndup>
 8012432:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012434:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012436:	4798      	blx	r3
 8012438:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801243a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801243c:	4658      	mov	r0, fp
 801243e:	4798      	blx	r3
 8012440:	2469      	movs	r4, #105	; 0x69
 8012442:	e7cc      	b.n	80123de <rcl_expand_topic_name+0x1aa>
 8012444:	2800      	cmp	r0, #0
 8012446:	d03e      	beq.n	80124c6 <rcl_expand_topic_name+0x292>
 8012448:	46c1      	mov	r9, r8
 801244a:	46a2      	mov	sl, r4
 801244c:	e75c      	b.n	8012308 <rcl_expand_topic_name+0xd4>
 801244e:	46b1      	mov	r9, r6
 8012450:	e77e      	b.n	8012350 <rcl_expand_topic_name+0x11c>
 8012452:	f89a 3000 	ldrb.w	r3, [sl]
 8012456:	2b2f      	cmp	r3, #47	; 0x2f
 8012458:	d0be      	beq.n	80123d8 <rcl_expand_topic_name+0x1a4>
 801245a:	4638      	mov	r0, r7
 801245c:	f7ed feca 	bl	80001f4 <strlen>
 8012460:	4b25      	ldr	r3, [pc, #148]	; (80124f8 <rcl_expand_topic_name+0x2c4>)
 8012462:	4926      	ldr	r1, [pc, #152]	; (80124fc <rcl_expand_topic_name+0x2c8>)
 8012464:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012466:	f8cd a010 	str.w	sl, [sp, #16]
 801246a:	2801      	cmp	r0, #1
 801246c:	bf0c      	ite	eq
 801246e:	4618      	moveq	r0, r3
 8012470:	4608      	movne	r0, r1
 8012472:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012476:	e9cd 2300 	strd	r2, r3, [sp]
 801247a:	e9cd 0702 	strd	r0, r7, [sp, #8]
 801247e:	ab14      	add	r3, sp, #80	; 0x50
 8012480:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012482:	f000 ff87 	bl	8013394 <rcutils_format_string_limit>
 8012486:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012488:	9918      	ldr	r1, [sp, #96]	; 0x60
 801248a:	4603      	mov	r3, r0
 801248c:	4650      	mov	r0, sl
 801248e:	469a      	mov	sl, r3
 8012490:	4790      	blx	r2
 8012492:	e79e      	b.n	80123d2 <rcl_expand_topic_name+0x19e>
 8012494:	24ca      	movs	r4, #202	; 0xca
 8012496:	e7a2      	b.n	80123de <rcl_expand_topic_name+0x1aa>
 8012498:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801249a:	2300      	movs	r3, #0
 801249c:	6013      	str	r3, [r2, #0]
 801249e:	240a      	movs	r4, #10
 80124a0:	e79d      	b.n	80123de <rcl_expand_topic_name+0x1aa>
 80124a2:	465b      	mov	r3, fp
 80124a4:	9c07      	ldr	r4, [sp, #28]
 80124a6:	46da      	mov	sl, fp
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d1d2      	bne.n	8012452 <rcl_expand_topic_name+0x21e>
 80124ac:	f898 3000 	ldrb.w	r3, [r8]
 80124b0:	2b2f      	cmp	r3, #47	; 0x2f
 80124b2:	d091      	beq.n	80123d8 <rcl_expand_topic_name+0x1a4>
 80124b4:	e776      	b.n	80123a4 <rcl_expand_topic_name+0x170>
 80124b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80124b8:	9918      	ldr	r1, [sp, #96]	; 0x60
 80124ba:	601d      	str	r5, [r3, #0]
 80124bc:	4658      	mov	r0, fp
 80124be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80124c0:	4798      	blx	r3
 80124c2:	240a      	movs	r4, #10
 80124c4:	e78b      	b.n	80123de <rcl_expand_topic_name+0x1aa>
 80124c6:	e9dd 0117 	ldrd	r0, r1, [sp, #92]	; 0x5c
 80124ca:	e88d 0003 	stmia.w	sp, {r0, r1}
 80124ce:	ab14      	add	r3, sp, #80	; 0x50
 80124d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80124d2:	4640      	mov	r0, r8
 80124d4:	f001 f888 	bl	80135e8 <rcutils_strdup>
 80124d8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80124da:	2800      	cmp	r0, #0
 80124dc:	bf08      	it	eq
 80124de:	240a      	moveq	r4, #10
 80124e0:	6018      	str	r0, [r3, #0]
 80124e2:	e77c      	b.n	80123de <rcl_expand_topic_name+0x1aa>
 80124e4:	08018930 	.word	0x08018930
 80124e8:	0801896c 	.word	0x0801896c
 80124ec:	0801897c 	.word	0x0801897c
 80124f0:	08018984 	.word	0x08018984
 80124f4:	0801898c 	.word	0x0801898c
 80124f8:	08018940 	.word	0x08018940
 80124fc:	08018974 	.word	0x08018974

08012500 <rcl_get_default_topic_name_substitutions>:
 8012500:	2800      	cmp	r0, #0
 8012502:	bf0c      	ite	eq
 8012504:	200b      	moveq	r0, #11
 8012506:	2000      	movne	r0, #0
 8012508:	4770      	bx	lr
 801250a:	bf00      	nop

0801250c <rcl_init>:
 801250c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012510:	1e07      	subs	r7, r0, #0
 8012512:	b09f      	sub	sp, #124	; 0x7c
 8012514:	4688      	mov	r8, r1
 8012516:	4692      	mov	sl, r2
 8012518:	4699      	mov	r9, r3
 801251a:	f340 8097 	ble.w	801264c <rcl_init+0x140>
 801251e:	2900      	cmp	r1, #0
 8012520:	f000 8097 	beq.w	8012652 <rcl_init+0x146>
 8012524:	1f0d      	subs	r5, r1, #4
 8012526:	2400      	movs	r4, #0
 8012528:	f855 6f04 	ldr.w	r6, [r5, #4]!
 801252c:	3401      	adds	r4, #1
 801252e:	2e00      	cmp	r6, #0
 8012530:	f000 808f 	beq.w	8012652 <rcl_init+0x146>
 8012534:	42a7      	cmp	r7, r4
 8012536:	d1f7      	bne.n	8012528 <rcl_init+0x1c>
 8012538:	f1ba 0f00 	cmp.w	sl, #0
 801253c:	f000 8089 	beq.w	8012652 <rcl_init+0x146>
 8012540:	f8da 4000 	ldr.w	r4, [sl]
 8012544:	2c00      	cmp	r4, #0
 8012546:	f000 8084 	beq.w	8012652 <rcl_init+0x146>
 801254a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801254c:	ad19      	add	r5, sp, #100	; 0x64
 801254e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012550:	6823      	ldr	r3, [r4, #0]
 8012552:	602b      	str	r3, [r5, #0]
 8012554:	a819      	add	r0, sp, #100	; 0x64
 8012556:	f7fb fca1 	bl	800de9c <rcutils_allocator_is_valid>
 801255a:	2800      	cmp	r0, #0
 801255c:	d079      	beq.n	8012652 <rcl_init+0x146>
 801255e:	f1b9 0f00 	cmp.w	r9, #0
 8012562:	d076      	beq.n	8012652 <rcl_init+0x146>
 8012564:	f8d9 3000 	ldr.w	r3, [r9]
 8012568:	2b00      	cmp	r3, #0
 801256a:	d177      	bne.n	801265c <rcl_init+0x150>
 801256c:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 8012570:	2178      	movs	r1, #120	; 0x78
 8012572:	2001      	movs	r0, #1
 8012574:	4798      	blx	r3
 8012576:	4604      	mov	r4, r0
 8012578:	f8c9 0000 	str.w	r0, [r9]
 801257c:	2800      	cmp	r0, #0
 801257e:	f000 80ba 	beq.w	80126f6 <rcl_init+0x1ea>
 8012582:	a802      	add	r0, sp, #8
 8012584:	f001 f8be 	bl	8013704 <rmw_get_zero_initialized_context>
 8012588:	a902      	add	r1, sp, #8
 801258a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801258e:	2250      	movs	r2, #80	; 0x50
 8012590:	ac19      	add	r4, sp, #100	; 0x64
 8012592:	f005 f932 	bl	80177fa <memcpy>
 8012596:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012598:	f8d9 5000 	ldr.w	r5, [r9]
 801259c:	6826      	ldr	r6, [r4, #0]
 801259e:	462c      	mov	r4, r5
 80125a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80125a2:	f105 0114 	add.w	r1, r5, #20
 80125a6:	6026      	str	r6, [r4, #0]
 80125a8:	4650      	mov	r0, sl
 80125aa:	f000 f931 	bl	8012810 <rcl_init_options_copy>
 80125ae:	4606      	mov	r6, r0
 80125b0:	2800      	cmp	r0, #0
 80125b2:	d144      	bne.n	801263e <rcl_init+0x132>
 80125b4:	f8d9 a000 	ldr.w	sl, [r9]
 80125b8:	463c      	mov	r4, r7
 80125ba:	17fd      	asrs	r5, r7, #31
 80125bc:	e9ca 4506 	strd	r4, r5, [sl, #24]
 80125c0:	f8ca 0020 	str.w	r0, [sl, #32]
 80125c4:	2f00      	cmp	r7, #0
 80125c6:	d050      	beq.n	801266a <rcl_init+0x15e>
 80125c8:	f1b8 0f00 	cmp.w	r8, #0
 80125cc:	d04d      	beq.n	801266a <rcl_init+0x15e>
 80125ce:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 80125d2:	4638      	mov	r0, r7
 80125d4:	2104      	movs	r1, #4
 80125d6:	4798      	blx	r3
 80125d8:	f8ca 0020 	str.w	r0, [sl, #32]
 80125dc:	f8d9 a000 	ldr.w	sl, [r9]
 80125e0:	f8da 3020 	ldr.w	r3, [sl, #32]
 80125e4:	46d3      	mov	fp, sl
 80125e6:	b34b      	cbz	r3, 801263c <rcl_init+0x130>
 80125e8:	2f01      	cmp	r7, #1
 80125ea:	f175 0300 	sbcs.w	r3, r5, #0
 80125ee:	db3c      	blt.n	801266a <rcl_init+0x15e>
 80125f0:	f1a8 0804 	sub.w	r8, r8, #4
 80125f4:	2600      	movs	r6, #0
 80125f6:	2700      	movs	r7, #0
 80125f8:	e00c      	b.n	8012614 <rcl_init+0x108>
 80125fa:	f8d8 1000 	ldr.w	r1, [r8]
 80125fe:	f005 f8fc 	bl	80177fa <memcpy>
 8012602:	3601      	adds	r6, #1
 8012604:	f147 0700 	adc.w	r7, r7, #0
 8012608:	42bd      	cmp	r5, r7
 801260a:	bf08      	it	eq
 801260c:	42b4      	cmpeq	r4, r6
 801260e:	d02a      	beq.n	8012666 <rcl_init+0x15a>
 8012610:	f8d9 b000 	ldr.w	fp, [r9]
 8012614:	f858 0f04 	ldr.w	r0, [r8, #4]!
 8012618:	f7ed fdec 	bl	80001f4 <strlen>
 801261c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801261e:	991d      	ldr	r1, [sp, #116]	; 0x74
 8012620:	f8db a020 	ldr.w	sl, [fp, #32]
 8012624:	9001      	str	r0, [sp, #4]
 8012626:	4798      	blx	r3
 8012628:	f8d9 1000 	ldr.w	r1, [r9]
 801262c:	9a01      	ldr	r2, [sp, #4]
 801262e:	6a09      	ldr	r1, [r1, #32]
 8012630:	00b3      	lsls	r3, r6, #2
 8012632:	f84a 0003 	str.w	r0, [sl, r3]
 8012636:	58c8      	ldr	r0, [r1, r3]
 8012638:	2800      	cmp	r0, #0
 801263a:	d1de      	bne.n	80125fa <rcl_init+0xee>
 801263c:	260a      	movs	r6, #10
 801263e:	4648      	mov	r0, r9
 8012640:	f7ff fd94 	bl	801216c <__cleanup_context>
 8012644:	4630      	mov	r0, r6
 8012646:	b01f      	add	sp, #124	; 0x7c
 8012648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801264c:	2900      	cmp	r1, #0
 801264e:	f43f af73 	beq.w	8012538 <rcl_init+0x2c>
 8012652:	260b      	movs	r6, #11
 8012654:	4630      	mov	r0, r6
 8012656:	b01f      	add	sp, #124	; 0x7c
 8012658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801265c:	2664      	movs	r6, #100	; 0x64
 801265e:	4630      	mov	r0, r6
 8012660:	b01f      	add	sp, #124	; 0x7c
 8012662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012666:	f8d9 a000 	ldr.w	sl, [r9]
 801266a:	4a2c      	ldr	r2, [pc, #176]	; (801271c <rcl_init+0x210>)
 801266c:	6813      	ldr	r3, [r2, #0]
 801266e:	3301      	adds	r3, #1
 8012670:	d03b      	beq.n	80126ea <rcl_init+0x1de>
 8012672:	6013      	str	r3, [r2, #0]
 8012674:	4619      	mov	r1, r3
 8012676:	2000      	movs	r0, #0
 8012678:	f8da 4014 	ldr.w	r4, [sl, #20]
 801267c:	f8c9 3004 	str.w	r3, [r9, #4]
 8012680:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012682:	3301      	adds	r3, #1
 8012684:	e9c4 1006 	strd	r1, r0, [r4, #24]
 8012688:	d039      	beq.n	80126fe <rcl_init+0x1f2>
 801268a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 801268e:	b94b      	cbnz	r3, 80126a4 <rcl_init+0x198>
 8012690:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8012694:	f000 f962 	bl	801295c <rcl_get_localhost_only>
 8012698:	4606      	mov	r6, r0
 801269a:	2800      	cmp	r0, #0
 801269c:	d1cf      	bne.n	801263e <rcl_init+0x132>
 801269e:	f8d9 3000 	ldr.w	r3, [r9]
 80126a2:	695c      	ldr	r4, [r3, #20]
 80126a4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80126a6:	aa18      	add	r2, sp, #96	; 0x60
 80126a8:	a917      	add	r1, sp, #92	; 0x5c
 80126aa:	f000 fd33 	bl	8013114 <rcl_validate_enclave_name>
 80126ae:	4606      	mov	r6, r0
 80126b0:	2800      	cmp	r0, #0
 80126b2:	d1c4      	bne.n	801263e <rcl_init+0x132>
 80126b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80126b6:	bb03      	cbnz	r3, 80126fa <rcl_init+0x1ee>
 80126b8:	f8d9 1000 	ldr.w	r1, [r9]
 80126bc:	694b      	ldr	r3, [r1, #20]
 80126be:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80126c0:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80126c4:	f000 fbf2 	bl	8012eac <rcl_get_security_options_from_environment>
 80126c8:	4606      	mov	r6, r0
 80126ca:	2800      	cmp	r0, #0
 80126cc:	d1b7      	bne.n	801263e <rcl_init+0x132>
 80126ce:	f8d9 1000 	ldr.w	r1, [r9]
 80126d2:	6948      	ldr	r0, [r1, #20]
 80126d4:	3128      	adds	r1, #40	; 0x28
 80126d6:	3018      	adds	r0, #24
 80126d8:	f001 f9fe 	bl	8013ad8 <rmw_init>
 80126dc:	4606      	mov	r6, r0
 80126de:	2800      	cmp	r0, #0
 80126e0:	d0b8      	beq.n	8012654 <rcl_init+0x148>
 80126e2:	f7ff fd1f 	bl	8012124 <rcl_convert_rmw_ret_to_rcl_ret>
 80126e6:	4606      	mov	r6, r0
 80126e8:	e7a9      	b.n	801263e <rcl_init+0x132>
 80126ea:	2401      	movs	r4, #1
 80126ec:	4618      	mov	r0, r3
 80126ee:	4621      	mov	r1, r4
 80126f0:	6014      	str	r4, [r2, #0]
 80126f2:	4623      	mov	r3, r4
 80126f4:	e7c0      	b.n	8012678 <rcl_init+0x16c>
 80126f6:	260a      	movs	r6, #10
 80126f8:	e7ac      	b.n	8012654 <rcl_init+0x148>
 80126fa:	2601      	movs	r6, #1
 80126fc:	e79f      	b.n	801263e <rcl_init+0x132>
 80126fe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8012702:	f004 f80b 	bl	801671c <rcl_get_default_domain_id>
 8012706:	4606      	mov	r6, r0
 8012708:	2800      	cmp	r0, #0
 801270a:	d198      	bne.n	801263e <rcl_init+0x132>
 801270c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801270e:	3301      	adds	r3, #1
 8012710:	f8d9 3000 	ldr.w	r3, [r9]
 8012714:	bf08      	it	eq
 8012716:	6260      	streq	r0, [r4, #36]	; 0x24
 8012718:	695c      	ldr	r4, [r3, #20]
 801271a:	e7b6      	b.n	801268a <rcl_init+0x17e>
 801271c:	20009c00 	.word	0x20009c00

08012720 <rcl_get_zero_initialized_init_options>:
 8012720:	2000      	movs	r0, #0
 8012722:	4770      	bx	lr

08012724 <rcl_init_options_init>:
 8012724:	b084      	sub	sp, #16
 8012726:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012728:	b091      	sub	sp, #68	; 0x44
 801272a:	af17      	add	r7, sp, #92	; 0x5c
 801272c:	e887 000e 	stmia.w	r7, {r1, r2, r3}
 8012730:	2800      	cmp	r0, #0
 8012732:	d044      	beq.n	80127be <rcl_init_options_init+0x9a>
 8012734:	6803      	ldr	r3, [r0, #0]
 8012736:	4606      	mov	r6, r0
 8012738:	b133      	cbz	r3, 8012748 <rcl_init_options_init+0x24>
 801273a:	2464      	movs	r4, #100	; 0x64
 801273c:	4620      	mov	r0, r4
 801273e:	b011      	add	sp, #68	; 0x44
 8012740:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012744:	b004      	add	sp, #16
 8012746:	4770      	bx	lr
 8012748:	4638      	mov	r0, r7
 801274a:	f7fb fba7 	bl	800de9c <rcutils_allocator_is_valid>
 801274e:	2800      	cmp	r0, #0
 8012750:	d035      	beq.n	80127be <rcl_init_options_init+0x9a>
 8012752:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012754:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8012756:	2050      	movs	r0, #80	; 0x50
 8012758:	4798      	blx	r3
 801275a:	4604      	mov	r4, r0
 801275c:	6030      	str	r0, [r6, #0]
 801275e:	2800      	cmp	r0, #0
 8012760:	d02f      	beq.n	80127c2 <rcl_init_options_init+0x9e>
 8012762:	46bc      	mov	ip, r7
 8012764:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012768:	4625      	mov	r5, r4
 801276a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801276c:	f8dc 3000 	ldr.w	r3, [ip]
 8012770:	602b      	str	r3, [r5, #0]
 8012772:	a802      	add	r0, sp, #8
 8012774:	ad02      	add	r5, sp, #8
 8012776:	f000 ffcd 	bl	8013714 <rmw_get_zero_initialized_init_options>
 801277a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801277c:	3418      	adds	r4, #24
 801277e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012780:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012782:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012784:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012786:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012788:	e895 0003 	ldmia.w	r5, {r0, r1}
 801278c:	6833      	ldr	r3, [r6, #0]
 801278e:	e884 0003 	stmia.w	r4, {r0, r1}
 8012792:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8012796:	e88d 0003 	stmia.w	sp, {r0, r1}
 801279a:	f103 0018 	add.w	r0, r3, #24
 801279e:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80127a2:	f001 f8bf 	bl	8013924 <rmw_init_options_init>
 80127a6:	4604      	mov	r4, r0
 80127a8:	2800      	cmp	r0, #0
 80127aa:	d0c7      	beq.n	801273c <rcl_init_options_init+0x18>
 80127ac:	6830      	ldr	r0, [r6, #0]
 80127ae:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80127b0:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80127b2:	4798      	blx	r3
 80127b4:	4620      	mov	r0, r4
 80127b6:	f7ff fcb5 	bl	8012124 <rcl_convert_rmw_ret_to_rcl_ret>
 80127ba:	4604      	mov	r4, r0
 80127bc:	e7be      	b.n	801273c <rcl_init_options_init+0x18>
 80127be:	240b      	movs	r4, #11
 80127c0:	e7bc      	b.n	801273c <rcl_init_options_init+0x18>
 80127c2:	240a      	movs	r4, #10
 80127c4:	e7ba      	b.n	801273c <rcl_init_options_init+0x18>
 80127c6:	bf00      	nop

080127c8 <rcl_init_options_fini>:
 80127c8:	b570      	push	{r4, r5, r6, lr}
 80127ca:	b086      	sub	sp, #24
 80127cc:	b1c0      	cbz	r0, 8012800 <rcl_init_options_fini+0x38>
 80127ce:	6804      	ldr	r4, [r0, #0]
 80127d0:	4606      	mov	r6, r0
 80127d2:	b1ac      	cbz	r4, 8012800 <rcl_init_options_fini+0x38>
 80127d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80127d6:	ad01      	add	r5, sp, #4
 80127d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80127da:	6823      	ldr	r3, [r4, #0]
 80127dc:	602b      	str	r3, [r5, #0]
 80127de:	a801      	add	r0, sp, #4
 80127e0:	f7fb fb5c 	bl	800de9c <rcutils_allocator_is_valid>
 80127e4:	b160      	cbz	r0, 8012800 <rcl_init_options_fini+0x38>
 80127e6:	6830      	ldr	r0, [r6, #0]
 80127e8:	3018      	adds	r0, #24
 80127ea:	f001 f935 	bl	8013a58 <rmw_init_options_fini>
 80127ee:	4604      	mov	r4, r0
 80127f0:	b950      	cbnz	r0, 8012808 <rcl_init_options_fini+0x40>
 80127f2:	6830      	ldr	r0, [r6, #0]
 80127f4:	9b02      	ldr	r3, [sp, #8]
 80127f6:	9905      	ldr	r1, [sp, #20]
 80127f8:	4798      	blx	r3
 80127fa:	4620      	mov	r0, r4
 80127fc:	b006      	add	sp, #24
 80127fe:	bd70      	pop	{r4, r5, r6, pc}
 8012800:	240b      	movs	r4, #11
 8012802:	4620      	mov	r0, r4
 8012804:	b006      	add	sp, #24
 8012806:	bd70      	pop	{r4, r5, r6, pc}
 8012808:	f7ff fc8c 	bl	8012124 <rcl_convert_rmw_ret_to_rcl_ret>
 801280c:	4604      	mov	r4, r0
 801280e:	e7f8      	b.n	8012802 <rcl_init_options_fini+0x3a>

08012810 <rcl_init_options_copy>:
 8012810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012814:	b096      	sub	sp, #88	; 0x58
 8012816:	2800      	cmp	r0, #0
 8012818:	d063      	beq.n	80128e2 <rcl_init_options_copy+0xd2>
 801281a:	6806      	ldr	r6, [r0, #0]
 801281c:	4605      	mov	r5, r0
 801281e:	2e00      	cmp	r6, #0
 8012820:	d05f      	beq.n	80128e2 <rcl_init_options_copy+0xd2>
 8012822:	460c      	mov	r4, r1
 8012824:	2900      	cmp	r1, #0
 8012826:	d05c      	beq.n	80128e2 <rcl_init_options_copy+0xd2>
 8012828:	680b      	ldr	r3, [r1, #0]
 801282a:	b123      	cbz	r3, 8012836 <rcl_init_options_copy+0x26>
 801282c:	2664      	movs	r6, #100	; 0x64
 801282e:	4630      	mov	r0, r6
 8012830:	b016      	add	sp, #88	; 0x58
 8012832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012836:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8012838:	af11      	add	r7, sp, #68	; 0x44
 801283a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801283c:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 8012840:	6833      	ldr	r3, [r6, #0]
 8012842:	603b      	str	r3, [r7, #0]
 8012844:	4640      	mov	r0, r8
 8012846:	f7fb fb29 	bl	800de9c <rcutils_allocator_is_valid>
 801284a:	2800      	cmp	r0, #0
 801284c:	d049      	beq.n	80128e2 <rcl_init_options_copy+0xd2>
 801284e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012850:	9915      	ldr	r1, [sp, #84]	; 0x54
 8012852:	2050      	movs	r0, #80	; 0x50
 8012854:	4798      	blx	r3
 8012856:	4606      	mov	r6, r0
 8012858:	6020      	str	r0, [r4, #0]
 801285a:	2800      	cmp	r0, #0
 801285c:	d077      	beq.n	801294e <rcl_init_options_copy+0x13e>
 801285e:	46c4      	mov	ip, r8
 8012860:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012864:	4637      	mov	r7, r6
 8012866:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8012868:	f8dc 3000 	ldr.w	r3, [ip]
 801286c:	603b      	str	r3, [r7, #0]
 801286e:	a802      	add	r0, sp, #8
 8012870:	af02      	add	r7, sp, #8
 8012872:	f000 ff4f 	bl	8013714 <rmw_get_zero_initialized_init_options>
 8012876:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012878:	3618      	adds	r6, #24
 801287a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801287c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801287e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8012880:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012882:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8012884:	e897 0003 	ldmia.w	r7, {r0, r1}
 8012888:	ab16      	add	r3, sp, #88	; 0x58
 801288a:	e886 0003 	stmia.w	r6, {r0, r1}
 801288e:	e913 0003 	ldmdb	r3, {r0, r1}
 8012892:	6823      	ldr	r3, [r4, #0]
 8012894:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012898:	f103 0018 	add.w	r0, r3, #24
 801289c:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80128a0:	f001 f840 	bl	8013924 <rmw_init_options_init>
 80128a4:	4606      	mov	r6, r0
 80128a6:	bb08      	cbnz	r0, 80128ec <rcl_init_options_copy+0xdc>
 80128a8:	682f      	ldr	r7, [r5, #0]
 80128aa:	f8d4 c000 	ldr.w	ip, [r4]
 80128ae:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80128b0:	4666      	mov	r6, ip
 80128b2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80128b4:	683b      	ldr	r3, [r7, #0]
 80128b6:	6033      	str	r3, [r6, #0]
 80128b8:	f10c 0018 	add.w	r0, ip, #24
 80128bc:	f001 f8cc 	bl	8013a58 <rmw_init_options_fini>
 80128c0:	4607      	mov	r7, r0
 80128c2:	b1f0      	cbz	r0, 8012902 <rcl_init_options_copy+0xf2>
 80128c4:	f7fb faf8 	bl	800deb8 <rcutils_get_error_string>
 80128c8:	f7fb fb0c 	bl	800dee4 <rcutils_reset_error>
 80128cc:	4620      	mov	r0, r4
 80128ce:	f7ff ff7b 	bl	80127c8 <rcl_init_options_fini>
 80128d2:	4606      	mov	r6, r0
 80128d4:	2800      	cmp	r0, #0
 80128d6:	d1aa      	bne.n	801282e <rcl_init_options_copy+0x1e>
 80128d8:	4638      	mov	r0, r7
 80128da:	f7ff fc23 	bl	8012124 <rcl_convert_rmw_ret_to_rcl_ret>
 80128de:	4606      	mov	r6, r0
 80128e0:	e7a5      	b.n	801282e <rcl_init_options_copy+0x1e>
 80128e2:	260b      	movs	r6, #11
 80128e4:	4630      	mov	r0, r6
 80128e6:	b016      	add	sp, #88	; 0x58
 80128e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80128ee:	9915      	ldr	r1, [sp, #84]	; 0x54
 80128f0:	6820      	ldr	r0, [r4, #0]
 80128f2:	4798      	blx	r3
 80128f4:	4630      	mov	r0, r6
 80128f6:	f7ff fc15 	bl	8012124 <rcl_convert_rmw_ret_to_rcl_ret>
 80128fa:	4606      	mov	r6, r0
 80128fc:	2800      	cmp	r0, #0
 80128fe:	d0d3      	beq.n	80128a8 <rcl_init_options_copy+0x98>
 8012900:	e795      	b.n	801282e <rcl_init_options_copy+0x1e>
 8012902:	a802      	add	r0, sp, #8
 8012904:	ae02      	add	r6, sp, #8
 8012906:	6827      	ldr	r7, [r4, #0]
 8012908:	f000 ff04 	bl	8013714 <rmw_get_zero_initialized_init_options>
 801290c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801290e:	3718      	adds	r7, #24
 8012910:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8012912:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8012914:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8012916:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8012918:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801291a:	e896 0003 	ldmia.w	r6, {r0, r1}
 801291e:	682a      	ldr	r2, [r5, #0]
 8012920:	6823      	ldr	r3, [r4, #0]
 8012922:	e887 0003 	stmia.w	r7, {r0, r1}
 8012926:	f102 0018 	add.w	r0, r2, #24
 801292a:	f103 0118 	add.w	r1, r3, #24
 801292e:	f001 f851 	bl	80139d4 <rmw_init_options_copy>
 8012932:	4606      	mov	r6, r0
 8012934:	2800      	cmp	r0, #0
 8012936:	f43f af7a 	beq.w	801282e <rcl_init_options_copy+0x1e>
 801293a:	f7fb fabd 	bl	800deb8 <rcutils_get_error_string>
 801293e:	f7fb fad1 	bl	800dee4 <rcutils_reset_error>
 8012942:	4620      	mov	r0, r4
 8012944:	f7ff ff40 	bl	80127c8 <rcl_init_options_fini>
 8012948:	b118      	cbz	r0, 8012952 <rcl_init_options_copy+0x142>
 801294a:	4606      	mov	r6, r0
 801294c:	e76f      	b.n	801282e <rcl_init_options_copy+0x1e>
 801294e:	260a      	movs	r6, #10
 8012950:	e76d      	b.n	801282e <rcl_init_options_copy+0x1e>
 8012952:	4630      	mov	r0, r6
 8012954:	f7ff fbe6 	bl	8012124 <rcl_convert_rmw_ret_to_rcl_ret>
 8012958:	4606      	mov	r6, r0
 801295a:	e768      	b.n	801282e <rcl_init_options_copy+0x1e>

0801295c <rcl_get_localhost_only>:
 801295c:	b510      	push	{r4, lr}
 801295e:	b082      	sub	sp, #8
 8012960:	2300      	movs	r3, #0
 8012962:	9301      	str	r3, [sp, #4]
 8012964:	b1b8      	cbz	r0, 8012996 <rcl_get_localhost_only+0x3a>
 8012966:	4604      	mov	r4, r0
 8012968:	a901      	add	r1, sp, #4
 801296a:	480c      	ldr	r0, [pc, #48]	; (801299c <rcl_get_localhost_only+0x40>)
 801296c:	f000 fd4c 	bl	8013408 <rcutils_get_env>
 8012970:	b110      	cbz	r0, 8012978 <rcl_get_localhost_only+0x1c>
 8012972:	2001      	movs	r0, #1
 8012974:	b002      	add	sp, #8
 8012976:	bd10      	pop	{r4, pc}
 8012978:	9b01      	ldr	r3, [sp, #4]
 801297a:	b113      	cbz	r3, 8012982 <rcl_get_localhost_only+0x26>
 801297c:	781a      	ldrb	r2, [r3, #0]
 801297e:	2a31      	cmp	r2, #49	; 0x31
 8012980:	d004      	beq.n	801298c <rcl_get_localhost_only+0x30>
 8012982:	2302      	movs	r3, #2
 8012984:	2000      	movs	r0, #0
 8012986:	7023      	strb	r3, [r4, #0]
 8012988:	b002      	add	sp, #8
 801298a:	bd10      	pop	{r4, pc}
 801298c:	785b      	ldrb	r3, [r3, #1]
 801298e:	2b00      	cmp	r3, #0
 8012990:	d1f7      	bne.n	8012982 <rcl_get_localhost_only+0x26>
 8012992:	2301      	movs	r3, #1
 8012994:	e7f6      	b.n	8012984 <rcl_get_localhost_only+0x28>
 8012996:	200b      	movs	r0, #11
 8012998:	b002      	add	sp, #8
 801299a:	bd10      	pop	{r4, pc}
 801299c:	08018998 	.word	0x08018998

080129a0 <rcl_get_zero_initialized_node>:
 80129a0:	4a03      	ldr	r2, [pc, #12]	; (80129b0 <rcl_get_zero_initialized_node+0x10>)
 80129a2:	4603      	mov	r3, r0
 80129a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80129a8:	e883 0003 	stmia.w	r3, {r0, r1}
 80129ac:	4618      	mov	r0, r3
 80129ae:	4770      	bx	lr
 80129b0:	080189b8 	.word	0x080189b8

080129b4 <rcl_node_init>:
 80129b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129b8:	b09b      	sub	sp, #108	; 0x6c
 80129ba:	4604      	mov	r4, r0
 80129bc:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
 80129c0:	f04f 0c00 	mov.w	ip, #0
 80129c4:	a815      	add	r0, sp, #84	; 0x54
 80129c6:	460e      	mov	r6, r1
 80129c8:	4615      	mov	r5, r2
 80129ca:	461f      	mov	r7, r3
 80129cc:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
 80129d0:	f003 ff60 	bl	8016894 <rcl_guard_condition_get_default_options>
 80129d4:	f1b8 0f00 	cmp.w	r8, #0
 80129d8:	f000 80fd 	beq.w	8012bd6 <rcl_node_init+0x222>
 80129dc:	f108 0b04 	add.w	fp, r8, #4
 80129e0:	4658      	mov	r0, fp
 80129e2:	f7fb fa5b 	bl	800de9c <rcutils_allocator_is_valid>
 80129e6:	2800      	cmp	r0, #0
 80129e8:	f000 80f5 	beq.w	8012bd6 <rcl_node_init+0x222>
 80129ec:	2e00      	cmp	r6, #0
 80129ee:	f000 80f2 	beq.w	8012bd6 <rcl_node_init+0x222>
 80129f2:	2d00      	cmp	r5, #0
 80129f4:	f000 80ef 	beq.w	8012bd6 <rcl_node_init+0x222>
 80129f8:	2c00      	cmp	r4, #0
 80129fa:	f000 80ec 	beq.w	8012bd6 <rcl_node_init+0x222>
 80129fe:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8012a02:	f1b9 0f00 	cmp.w	r9, #0
 8012a06:	f040 8112 	bne.w	8012c2e <rcl_node_init+0x27a>
 8012a0a:	2f00      	cmp	r7, #0
 8012a0c:	f000 80e3 	beq.w	8012bd6 <rcl_node_init+0x222>
 8012a10:	4638      	mov	r0, r7
 8012a12:	f7ff fba5 	bl	8012160 <rcl_context_is_valid>
 8012a16:	4682      	mov	sl, r0
 8012a18:	2800      	cmp	r0, #0
 8012a1a:	f000 80e2 	beq.w	8012be2 <rcl_node_init+0x22e>
 8012a1e:	464a      	mov	r2, r9
 8012a20:	a914      	add	r1, sp, #80	; 0x50
 8012a22:	4630      	mov	r0, r6
 8012a24:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 8012a28:	f000 fef4 	bl	8013814 <rmw_validate_node_name>
 8012a2c:	4681      	mov	r9, r0
 8012a2e:	2800      	cmp	r0, #0
 8012a30:	f040 80d3 	bne.w	8012bda <rcl_node_init+0x226>
 8012a34:	9814      	ldr	r0, [sp, #80]	; 0x50
 8012a36:	2800      	cmp	r0, #0
 8012a38:	f040 8105 	bne.w	8012c46 <rcl_node_init+0x292>
 8012a3c:	4628      	mov	r0, r5
 8012a3e:	f7ed fbd9 	bl	80001f4 <strlen>
 8012a42:	2800      	cmp	r0, #0
 8012a44:	f040 80d0 	bne.w	8012be8 <rcl_node_init+0x234>
 8012a48:	4d8e      	ldr	r5, [pc, #568]	; (8012c84 <rcl_node_init+0x2d0>)
 8012a4a:	a914      	add	r1, sp, #80	; 0x50
 8012a4c:	2200      	movs	r2, #0
 8012a4e:	4628      	mov	r0, r5
 8012a50:	f000 fec2 	bl	80137d8 <rmw_validate_namespace>
 8012a54:	4681      	mov	r9, r0
 8012a56:	2800      	cmp	r0, #0
 8012a58:	f040 80bf 	bne.w	8012bda <rcl_node_init+0x226>
 8012a5c:	4682      	mov	sl, r0
 8012a5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	f040 80f5 	bne.w	8012c50 <rcl_node_init+0x29c>
 8012a66:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8012a6a:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8012a6e:	9307      	str	r3, [sp, #28]
 8012a70:	2030      	movs	r0, #48	; 0x30
 8012a72:	4790      	blx	r2
 8012a74:	4681      	mov	r9, r0
 8012a76:	6060      	str	r0, [r4, #4]
 8012a78:	2800      	cmp	r0, #0
 8012a7a:	f000 80de 	beq.w	8012c3a <rcl_node_init+0x286>
 8012a7e:	9b07      	ldr	r3, [sp, #28]
 8012a80:	e9c0 3308 	strd	r3, r3, [r0, #32]
 8012a84:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 8012a88:	a80a      	add	r0, sp, #40	; 0x28
 8012a8a:	f000 f92b 	bl	8012ce4 <rcl_node_get_default_options>
 8012a8e:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8012a92:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012a96:	46cc      	mov	ip, r9
 8012a98:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012a9c:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8012aa0:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8012aa4:	6861      	ldr	r1, [r4, #4]
 8012aa6:	6027      	str	r7, [r4, #0]
 8012aa8:	4640      	mov	r0, r8
 8012aaa:	f000 f937 	bl	8012d1c <rcl_node_options_copy>
 8012aae:	2800      	cmp	r0, #0
 8012ab0:	d167      	bne.n	8012b82 <rcl_node_init+0x1ce>
 8012ab2:	4628      	mov	r0, r5
 8012ab4:	f7ed fb9e 	bl	80001f4 <strlen>
 8012ab8:	4428      	add	r0, r5
 8012aba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012abe:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8012ac2:	2b2f      	cmp	r3, #47	; 0x2f
 8012ac4:	bf08      	it	eq
 8012ac6:	4970      	ldreq	r1, [pc, #448]	; (8012c88 <rcl_node_init+0x2d4>)
 8012ac8:	f8db 3010 	ldr.w	r3, [fp, #16]
 8012acc:	bf18      	it	ne
 8012ace:	496f      	ldrne	r1, [pc, #444]	; (8012c8c <rcl_node_init+0x2d8>)
 8012ad0:	9604      	str	r6, [sp, #16]
 8012ad2:	e9cd 1502 	strd	r1, r5, [sp, #8]
 8012ad6:	e9cd 3200 	strd	r3, r2, [sp]
 8012ada:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8012ade:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8012ae2:	f000 fc57 	bl	8013394 <rcutils_format_string_limit>
 8012ae6:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
 8012aea:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8012aee:	f8d9 3000 	ldr.w	r3, [r9]
 8012af2:	9313      	str	r3, [sp, #76]	; 0x4c
 8012af4:	1c59      	adds	r1, r3, #1
 8012af6:	f000 80b7 	beq.w	8012c68 <rcl_node_init+0x2b4>
 8012afa:	683a      	ldr	r2, [r7, #0]
 8012afc:	f8c9 301c 	str.w	r3, [r9, #28]
 8012b00:	6952      	ldr	r2, [r2, #20]
 8012b02:	6821      	ldr	r1, [r4, #0]
 8012b04:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8012b08:	6808      	ldr	r0, [r1, #0]
 8012b0a:	f1a2 0201 	sub.w	r2, r2, #1
 8012b0e:	fab2 f282 	clz	r2, r2
 8012b12:	0952      	lsrs	r2, r2, #5
 8012b14:	9200      	str	r2, [sp, #0]
 8012b16:	4631      	mov	r1, r6
 8012b18:	3028      	adds	r0, #40	; 0x28
 8012b1a:	462a      	mov	r2, r5
 8012b1c:	f001 fa44 	bl	8013fa8 <rmw_create_node>
 8012b20:	6863      	ldr	r3, [r4, #4]
 8012b22:	f8c9 0020 	str.w	r0, [r9, #32]
 8012b26:	6a18      	ldr	r0, [r3, #32]
 8012b28:	b368      	cbz	r0, 8012b86 <rcl_node_init+0x1d2>
 8012b2a:	f001 facf 	bl	80140cc <rmw_node_get_graph_guard_condition>
 8012b2e:	4681      	mov	r9, r0
 8012b30:	b338      	cbz	r0, 8012b82 <rcl_node_init+0x1ce>
 8012b32:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012b36:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8012b3a:	6866      	ldr	r6, [r4, #4]
 8012b3c:	2008      	movs	r0, #8
 8012b3e:	4798      	blx	r3
 8012b40:	6863      	ldr	r3, [r4, #4]
 8012b42:	6270      	str	r0, [r6, #36]	; 0x24
 8012b44:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8012b46:	b1f6      	cbz	r6, 8012b86 <rcl_node_init+0x1d2>
 8012b48:	a808      	add	r0, sp, #32
 8012b4a:	f003 fe1b 	bl	8016784 <rcl_get_zero_initialized_guard_condition>
 8012b4e:	a808      	add	r0, sp, #32
 8012b50:	c803      	ldmia	r0, {r0, r1}
 8012b52:	e886 0003 	stmia.w	r6, {r0, r1}
 8012b56:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8012b5a:	ae15      	add	r6, sp, #84	; 0x54
 8012b5c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8012b5e:	f8db 3000 	ldr.w	r3, [fp]
 8012b62:	6033      	str	r3, [r6, #0]
 8012b64:	ab1a      	add	r3, sp, #104	; 0x68
 8012b66:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8012b6a:	6866      	ldr	r6, [r4, #4]
 8012b6c:	6a76      	ldr	r6, [r6, #36]	; 0x24
 8012b6e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8012b72:	4649      	mov	r1, r9
 8012b74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012b76:	4630      	mov	r0, r6
 8012b78:	463a      	mov	r2, r7
 8012b7a:	f003 fe0d 	bl	8016798 <rcl_guard_condition_init_from_rmw>
 8012b7e:	4681      	mov	r9, r0
 8012b80:	b328      	cbz	r0, 8012bce <rcl_node_init+0x21a>
 8012b82:	6863      	ldr	r3, [r4, #4]
 8012b84:	b1f3      	cbz	r3, 8012bc4 <rcl_node_init+0x210>
 8012b86:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8012b88:	b128      	cbz	r0, 8012b96 <rcl_node_init+0x1e2>
 8012b8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012b8e:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8012b92:	4798      	blx	r3
 8012b94:	6863      	ldr	r3, [r4, #4]
 8012b96:	6a18      	ldr	r0, [r3, #32]
 8012b98:	b110      	cbz	r0, 8012ba0 <rcl_node_init+0x1ec>
 8012b9a:	f001 fa1d 	bl	8013fd8 <rmw_destroy_node>
 8012b9e:	6863      	ldr	r3, [r4, #4]
 8012ba0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012ba2:	b148      	cbz	r0, 8012bb8 <rcl_node_init+0x204>
 8012ba4:	f003 fe50 	bl	8016848 <rcl_guard_condition_fini>
 8012ba8:	6862      	ldr	r2, [r4, #4]
 8012baa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012bae:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8012bb0:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8012bb4:	4798      	blx	r3
 8012bb6:	6863      	ldr	r3, [r4, #4]
 8012bb8:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8012bbc:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8012bc0:	4618      	mov	r0, r3
 8012bc2:	4790      	blx	r2
 8012bc4:	2300      	movs	r3, #0
 8012bc6:	e9c4 3300 	strd	r3, r3, [r4]
 8012bca:	f04f 0901 	mov.w	r9, #1
 8012bce:	f1ba 0f00 	cmp.w	sl, #0
 8012bd2:	d125      	bne.n	8012c20 <rcl_node_init+0x26c>
 8012bd4:	e001      	b.n	8012bda <rcl_node_init+0x226>
 8012bd6:	f04f 090b 	mov.w	r9, #11
 8012bda:	4648      	mov	r0, r9
 8012bdc:	b01b      	add	sp, #108	; 0x6c
 8012bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012be2:	f04f 0965 	mov.w	r9, #101	; 0x65
 8012be6:	e7f8      	b.n	8012bda <rcl_node_init+0x226>
 8012be8:	782b      	ldrb	r3, [r5, #0]
 8012bea:	2b2f      	cmp	r3, #47	; 0x2f
 8012bec:	f43f af2d 	beq.w	8012a4a <rcl_node_init+0x96>
 8012bf0:	4927      	ldr	r1, [pc, #156]	; (8012c90 <rcl_node_init+0x2dc>)
 8012bf2:	f8db 3010 	ldr.w	r3, [fp, #16]
 8012bf6:	9300      	str	r3, [sp, #0]
 8012bf8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012bfc:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8012c00:	9503      	str	r5, [sp, #12]
 8012c02:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8012c06:	f000 fbc5 	bl	8013394 <rcutils_format_string_limit>
 8012c0a:	4605      	mov	r5, r0
 8012c0c:	b348      	cbz	r0, 8012c62 <rcl_node_init+0x2ae>
 8012c0e:	2200      	movs	r2, #0
 8012c10:	a914      	add	r1, sp, #80	; 0x50
 8012c12:	9214      	str	r2, [sp, #80]	; 0x50
 8012c14:	f000 fde0 	bl	80137d8 <rmw_validate_namespace>
 8012c18:	4681      	mov	r9, r0
 8012c1a:	2800      	cmp	r0, #0
 8012c1c:	f43f af1f 	beq.w	8012a5e <rcl_node_init+0xaa>
 8012c20:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012c24:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8012c28:	4628      	mov	r0, r5
 8012c2a:	4798      	blx	r3
 8012c2c:	e7d5      	b.n	8012bda <rcl_node_init+0x226>
 8012c2e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8012c32:	4648      	mov	r0, r9
 8012c34:	b01b      	add	sp, #108	; 0x6c
 8012c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c3a:	f04f 090a 	mov.w	r9, #10
 8012c3e:	f1ba 0f00 	cmp.w	sl, #0
 8012c42:	d1ed      	bne.n	8012c20 <rcl_node_init+0x26c>
 8012c44:	e7c9      	b.n	8012bda <rcl_node_init+0x226>
 8012c46:	f000 fe37 	bl	80138b8 <rmw_node_name_validation_result_string>
 8012c4a:	f04f 09c9 	mov.w	r9, #201	; 0xc9
 8012c4e:	e7c4      	b.n	8012bda <rcl_node_init+0x226>
 8012c50:	4618      	mov	r0, r3
 8012c52:	f000 fdd3 	bl	80137fc <rmw_namespace_validation_result_string>
 8012c56:	f04f 09ca 	mov.w	r9, #202	; 0xca
 8012c5a:	f1ba 0f00 	cmp.w	sl, #0
 8012c5e:	d1df      	bne.n	8012c20 <rcl_node_init+0x26c>
 8012c60:	e7bb      	b.n	8012bda <rcl_node_init+0x226>
 8012c62:	f04f 090a 	mov.w	r9, #10
 8012c66:	e7b8      	b.n	8012bda <rcl_node_init+0x226>
 8012c68:	a813      	add	r0, sp, #76	; 0x4c
 8012c6a:	f003 fd57 	bl	801671c <rcl_get_default_domain_id>
 8012c6e:	2800      	cmp	r0, #0
 8012c70:	d187      	bne.n	8012b82 <rcl_node_init+0x1ce>
 8012c72:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012c74:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8012c78:	1c5a      	adds	r2, r3, #1
 8012c7a:	bf04      	itt	eq
 8012c7c:	9013      	streq	r0, [sp, #76]	; 0x4c
 8012c7e:	4603      	moveq	r3, r0
 8012c80:	e73b      	b.n	8012afa <rcl_node_init+0x146>
 8012c82:	bf00      	nop
 8012c84:	080189b0 	.word	0x080189b0
 8012c88:	08018940 	.word	0x08018940
 8012c8c:	08018974 	.word	0x08018974
 8012c90:	080189b4 	.word	0x080189b4

08012c94 <rcl_node_is_valid>:
 8012c94:	b130      	cbz	r0, 8012ca4 <rcl_node_is_valid+0x10>
 8012c96:	6843      	ldr	r3, [r0, #4]
 8012c98:	b123      	cbz	r3, 8012ca4 <rcl_node_is_valid+0x10>
 8012c9a:	6a1b      	ldr	r3, [r3, #32]
 8012c9c:	b113      	cbz	r3, 8012ca4 <rcl_node_is_valid+0x10>
 8012c9e:	6800      	ldr	r0, [r0, #0]
 8012ca0:	f7ff ba5e 	b.w	8012160 <rcl_context_is_valid>
 8012ca4:	2000      	movs	r0, #0
 8012ca6:	4770      	bx	lr

08012ca8 <rcl_node_get_name>:
 8012ca8:	b120      	cbz	r0, 8012cb4 <rcl_node_get_name+0xc>
 8012caa:	6840      	ldr	r0, [r0, #4]
 8012cac:	b110      	cbz	r0, 8012cb4 <rcl_node_get_name+0xc>
 8012cae:	6a00      	ldr	r0, [r0, #32]
 8012cb0:	b100      	cbz	r0, 8012cb4 <rcl_node_get_name+0xc>
 8012cb2:	6880      	ldr	r0, [r0, #8]
 8012cb4:	4770      	bx	lr
 8012cb6:	bf00      	nop

08012cb8 <rcl_node_get_namespace>:
 8012cb8:	b120      	cbz	r0, 8012cc4 <rcl_node_get_namespace+0xc>
 8012cba:	6840      	ldr	r0, [r0, #4]
 8012cbc:	b110      	cbz	r0, 8012cc4 <rcl_node_get_namespace+0xc>
 8012cbe:	6a00      	ldr	r0, [r0, #32]
 8012cc0:	b100      	cbz	r0, 8012cc4 <rcl_node_get_namespace+0xc>
 8012cc2:	68c0      	ldr	r0, [r0, #12]
 8012cc4:	4770      	bx	lr
 8012cc6:	bf00      	nop

08012cc8 <rcl_node_get_options>:
 8012cc8:	b128      	cbz	r0, 8012cd6 <rcl_node_get_options+0xe>
 8012cca:	6840      	ldr	r0, [r0, #4]
 8012ccc:	b118      	cbz	r0, 8012cd6 <rcl_node_get_options+0xe>
 8012cce:	6a03      	ldr	r3, [r0, #32]
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	bf08      	it	eq
 8012cd4:	2000      	moveq	r0, #0
 8012cd6:	4770      	bx	lr

08012cd8 <rcl_node_get_rmw_handle>:
 8012cd8:	b110      	cbz	r0, 8012ce0 <rcl_node_get_rmw_handle+0x8>
 8012cda:	6840      	ldr	r0, [r0, #4]
 8012cdc:	b100      	cbz	r0, 8012ce0 <rcl_node_get_rmw_handle+0x8>
 8012cde:	6a00      	ldr	r0, [r0, #32]
 8012ce0:	4770      	bx	lr
 8012ce2:	bf00      	nop

08012ce4 <rcl_node_get_default_options>:
 8012ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ce6:	b087      	sub	sp, #28
 8012ce8:	4607      	mov	r7, r0
 8012cea:	466d      	mov	r5, sp
 8012cec:	4668      	mov	r0, sp
 8012cee:	f7fb f8c7 	bl	800de80 <rcutils_get_default_allocator>
 8012cf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012cf4:	4c08      	ldr	r4, [pc, #32]	; (8012d18 <rcl_node_get_default_options+0x34>)
 8012cf6:	f8d5 c000 	ldr.w	ip, [r5]
 8012cfa:	1d26      	adds	r6, r4, #4
 8012cfc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8012cfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012d00:	463d      	mov	r5, r7
 8012d02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012d04:	f8c6 c000 	str.w	ip, [r6]
 8012d08:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8012d0c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8012d10:	4638      	mov	r0, r7
 8012d12:	b007      	add	sp, #28
 8012d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d16:	bf00      	nop
 8012d18:	20000060 	.word	0x20000060

08012d1c <rcl_node_options_copy>:
 8012d1c:	b1c8      	cbz	r0, 8012d52 <rcl_node_options_copy+0x36>
 8012d1e:	b4f0      	push	{r4, r5, r6, r7}
 8012d20:	460f      	mov	r7, r1
 8012d22:	b199      	cbz	r1, 8012d4c <rcl_node_options_copy+0x30>
 8012d24:	4288      	cmp	r0, r1
 8012d26:	4606      	mov	r6, r0
 8012d28:	d010      	beq.n	8012d4c <rcl_node_options_copy+0x30>
 8012d2a:	4605      	mov	r5, r0
 8012d2c:	460c      	mov	r4, r1
 8012d2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012d32:	f844 3b04 	str.w	r3, [r4], #4
 8012d36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012d38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012d3a:	7e32      	ldrb	r2, [r6, #24]
 8012d3c:	6829      	ldr	r1, [r5, #0]
 8012d3e:	7e73      	ldrb	r3, [r6, #25]
 8012d40:	6021      	str	r1, [r4, #0]
 8012d42:	2000      	movs	r0, #0
 8012d44:	763a      	strb	r2, [r7, #24]
 8012d46:	767b      	strb	r3, [r7, #25]
 8012d48:	bcf0      	pop	{r4, r5, r6, r7}
 8012d4a:	4770      	bx	lr
 8012d4c:	200b      	movs	r0, #11
 8012d4e:	bcf0      	pop	{r4, r5, r6, r7}
 8012d50:	4770      	bx	lr
 8012d52:	200b      	movs	r0, #11
 8012d54:	4770      	bx	lr
 8012d56:	bf00      	nop

08012d58 <exact_match_lookup>:
 8012d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d5a:	f102 0708 	add.w	r7, r2, #8
 8012d5e:	460b      	mov	r3, r1
 8012d60:	4614      	mov	r4, r2
 8012d62:	4606      	mov	r6, r0
 8012d64:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8012d68:	b085      	sub	sp, #20
 8012d6a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012d6e:	4618      	mov	r0, r3
 8012d70:	4918      	ldr	r1, [pc, #96]	; (8012dd4 <exact_match_lookup+0x7c>)
 8012d72:	e894 000c 	ldmia.w	r4, {r2, r3}
 8012d76:	f000 faff 	bl	8013378 <rcutils_join_path>
 8012d7a:	7833      	ldrb	r3, [r6, #0]
 8012d7c:	2b2f      	cmp	r3, #47	; 0x2f
 8012d7e:	4605      	mov	r5, r0
 8012d80:	d021      	beq.n	8012dc6 <exact_match_lookup+0x6e>
 8012d82:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 8012d86:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012d8a:	1c70      	adds	r0, r6, #1
 8012d8c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8012d90:	f000 faf8 	bl	8013384 <rcutils_to_native_path>
 8012d94:	4606      	mov	r6, r0
 8012d96:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8012d9a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012d9e:	4631      	mov	r1, r6
 8012da0:	e894 000c 	ldmia.w	r4, {r2, r3}
 8012da4:	4628      	mov	r0, r5
 8012da6:	f000 fae7 	bl	8013378 <rcutils_join_path>
 8012daa:	6862      	ldr	r2, [r4, #4]
 8012dac:	6921      	ldr	r1, [r4, #16]
 8012dae:	4603      	mov	r3, r0
 8012db0:	4630      	mov	r0, r6
 8012db2:	461e      	mov	r6, r3
 8012db4:	4790      	blx	r2
 8012db6:	4628      	mov	r0, r5
 8012db8:	6863      	ldr	r3, [r4, #4]
 8012dba:	6921      	ldr	r1, [r4, #16]
 8012dbc:	4798      	blx	r3
 8012dbe:	4635      	mov	r5, r6
 8012dc0:	4628      	mov	r0, r5
 8012dc2:	b005      	add	sp, #20
 8012dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012dc6:	7873      	ldrb	r3, [r6, #1]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d1da      	bne.n	8012d82 <exact_match_lookup+0x2a>
 8012dcc:	4628      	mov	r0, r5
 8012dce:	b005      	add	sp, #20
 8012dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012dd2:	bf00      	nop
 8012dd4:	080189fc 	.word	0x080189fc

08012dd8 <rcl_get_secure_root>:
 8012dd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012ddc:	b085      	sub	sp, #20
 8012dde:	b168      	cbz	r0, 8012dfc <rcl_get_secure_root+0x24>
 8012de0:	4607      	mov	r7, r0
 8012de2:	4608      	mov	r0, r1
 8012de4:	460c      	mov	r4, r1
 8012de6:	f7fb f859 	bl	800de9c <rcutils_allocator_is_valid>
 8012dea:	b138      	cbz	r0, 8012dfc <rcl_get_secure_root+0x24>
 8012dec:	2300      	movs	r3, #0
 8012dee:	482d      	ldr	r0, [pc, #180]	; (8012ea4 <rcl_get_secure_root+0xcc>)
 8012df0:	9303      	str	r3, [sp, #12]
 8012df2:	a903      	add	r1, sp, #12
 8012df4:	f000 fb08 	bl	8013408 <rcutils_get_env>
 8012df8:	4605      	mov	r5, r0
 8012dfa:	b120      	cbz	r0, 8012e06 <rcl_get_secure_root+0x2e>
 8012dfc:	2500      	movs	r5, #0
 8012dfe:	4628      	mov	r0, r5
 8012e00:	b005      	add	sp, #20
 8012e02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012e06:	9b03      	ldr	r3, [sp, #12]
 8012e08:	781a      	ldrb	r2, [r3, #0]
 8012e0a:	2a00      	cmp	r2, #0
 8012e0c:	d0f6      	beq.n	8012dfc <rcl_get_secure_root+0x24>
 8012e0e:	f104 090c 	add.w	r9, r4, #12
 8012e12:	e899 0003 	ldmia.w	r9, {r0, r1}
 8012e16:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012e1a:	4618      	mov	r0, r3
 8012e1c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8012e20:	f000 fbe2 	bl	80135e8 <rcutils_strdup>
 8012e24:	4680      	mov	r8, r0
 8012e26:	2800      	cmp	r0, #0
 8012e28:	d0e8      	beq.n	8012dfc <rcl_get_secure_root+0x24>
 8012e2a:	481f      	ldr	r0, [pc, #124]	; (8012ea8 <rcl_get_secure_root+0xd0>)
 8012e2c:	9503      	str	r5, [sp, #12]
 8012e2e:	a903      	add	r1, sp, #12
 8012e30:	f000 faea 	bl	8013408 <rcutils_get_env>
 8012e34:	b160      	cbz	r0, 8012e50 <rcl_get_secure_root+0x78>
 8012e36:	2600      	movs	r6, #0
 8012e38:	6863      	ldr	r3, [r4, #4]
 8012e3a:	6921      	ldr	r1, [r4, #16]
 8012e3c:	4630      	mov	r0, r6
 8012e3e:	4798      	blx	r3
 8012e40:	4640      	mov	r0, r8
 8012e42:	6863      	ldr	r3, [r4, #4]
 8012e44:	6921      	ldr	r1, [r4, #16]
 8012e46:	4798      	blx	r3
 8012e48:	4628      	mov	r0, r5
 8012e4a:	b005      	add	sp, #20
 8012e4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012e50:	9b03      	ldr	r3, [sp, #12]
 8012e52:	781e      	ldrb	r6, [r3, #0]
 8012e54:	b1f6      	cbz	r6, 8012e94 <rcl_get_secure_root+0xbc>
 8012e56:	e899 0003 	ldmia.w	r9, {r0, r1}
 8012e5a:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012e5e:	4618      	mov	r0, r3
 8012e60:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8012e64:	f000 fbc0 	bl	80135e8 <rcutils_strdup>
 8012e68:	4606      	mov	r6, r0
 8012e6a:	2800      	cmp	r0, #0
 8012e6c:	d0e3      	beq.n	8012e36 <rcl_get_secure_root+0x5e>
 8012e6e:	4622      	mov	r2, r4
 8012e70:	4641      	mov	r1, r8
 8012e72:	f7ff ff71 	bl	8012d58 <exact_match_lookup>
 8012e76:	4605      	mov	r5, r0
 8012e78:	2d00      	cmp	r5, #0
 8012e7a:	d0dd      	beq.n	8012e38 <rcl_get_secure_root+0x60>
 8012e7c:	4628      	mov	r0, r5
 8012e7e:	f000 fa79 	bl	8013374 <rcutils_is_directory>
 8012e82:	4607      	mov	r7, r0
 8012e84:	2800      	cmp	r0, #0
 8012e86:	d1d7      	bne.n	8012e38 <rcl_get_secure_root+0x60>
 8012e88:	4628      	mov	r0, r5
 8012e8a:	6863      	ldr	r3, [r4, #4]
 8012e8c:	6921      	ldr	r1, [r4, #16]
 8012e8e:	4798      	blx	r3
 8012e90:	463d      	mov	r5, r7
 8012e92:	e7d1      	b.n	8012e38 <rcl_get_secure_root+0x60>
 8012e94:	4638      	mov	r0, r7
 8012e96:	4622      	mov	r2, r4
 8012e98:	4641      	mov	r1, r8
 8012e9a:	f7ff ff5d 	bl	8012d58 <exact_match_lookup>
 8012e9e:	4605      	mov	r5, r0
 8012ea0:	e7ea      	b.n	8012e78 <rcl_get_secure_root+0xa0>
 8012ea2:	bf00      	nop
 8012ea4:	08018a08 	.word	0x08018a08
 8012ea8:	08018a20 	.word	0x08018a20

08012eac <rcl_get_security_options_from_environment>:
 8012eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012eb0:	b082      	sub	sp, #8
 8012eb2:	4607      	mov	r7, r0
 8012eb4:	4688      	mov	r8, r1
 8012eb6:	2400      	movs	r4, #0
 8012eb8:	481d      	ldr	r0, [pc, #116]	; (8012f30 <rcl_get_security_options_from_environment+0x84>)
 8012eba:	9401      	str	r4, [sp, #4]
 8012ebc:	a901      	add	r1, sp, #4
 8012ebe:	4616      	mov	r6, r2
 8012ec0:	f000 faa2 	bl	8013408 <rcutils_get_env>
 8012ec4:	b120      	cbz	r0, 8012ed0 <rcl_get_security_options_from_environment+0x24>
 8012ec6:	2501      	movs	r5, #1
 8012ec8:	4628      	mov	r0, r5
 8012eca:	b002      	add	sp, #8
 8012ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ed0:	4918      	ldr	r1, [pc, #96]	; (8012f34 <rcl_get_security_options_from_environment+0x88>)
 8012ed2:	4604      	mov	r4, r0
 8012ed4:	9801      	ldr	r0, [sp, #4]
 8012ed6:	f7ed f983 	bl	80001e0 <strcmp>
 8012eda:	4605      	mov	r5, r0
 8012edc:	b9c8      	cbnz	r0, 8012f12 <rcl_get_security_options_from_environment+0x66>
 8012ede:	9001      	str	r0, [sp, #4]
 8012ee0:	b1ee      	cbz	r6, 8012f1e <rcl_get_security_options_from_environment+0x72>
 8012ee2:	4815      	ldr	r0, [pc, #84]	; (8012f38 <rcl_get_security_options_from_environment+0x8c>)
 8012ee4:	a901      	add	r1, sp, #4
 8012ee6:	f000 fa8f 	bl	8013408 <rcutils_get_env>
 8012eea:	2800      	cmp	r0, #0
 8012eec:	d1eb      	bne.n	8012ec6 <rcl_get_security_options_from_environment+0x1a>
 8012eee:	4913      	ldr	r1, [pc, #76]	; (8012f3c <rcl_get_security_options_from_environment+0x90>)
 8012ef0:	9801      	ldr	r0, [sp, #4]
 8012ef2:	f7ed f975 	bl	80001e0 <strcmp>
 8012ef6:	fab0 f080 	clz	r0, r0
 8012efa:	0940      	lsrs	r0, r0, #5
 8012efc:	7030      	strb	r0, [r6, #0]
 8012efe:	4641      	mov	r1, r8
 8012f00:	4638      	mov	r0, r7
 8012f02:	f7ff ff69 	bl	8012dd8 <rcl_get_secure_root>
 8012f06:	b160      	cbz	r0, 8012f22 <rcl_get_security_options_from_environment+0x76>
 8012f08:	6070      	str	r0, [r6, #4]
 8012f0a:	4628      	mov	r0, r5
 8012f0c:	b002      	add	sp, #8
 8012f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f12:	4625      	mov	r5, r4
 8012f14:	4628      	mov	r0, r5
 8012f16:	7034      	strb	r4, [r6, #0]
 8012f18:	b002      	add	sp, #8
 8012f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f1e:	250b      	movs	r5, #11
 8012f20:	e7d2      	b.n	8012ec8 <rcl_get_security_options_from_environment+0x1c>
 8012f22:	7835      	ldrb	r5, [r6, #0]
 8012f24:	f1a5 0501 	sub.w	r5, r5, #1
 8012f28:	fab5 f585 	clz	r5, r5
 8012f2c:	096d      	lsrs	r5, r5, #5
 8012f2e:	e7cb      	b.n	8012ec8 <rcl_get_security_options_from_environment+0x1c>
 8012f30:	080189c0 	.word	0x080189c0
 8012f34:	080189d4 	.word	0x080189d4
 8012f38:	080189dc 	.word	0x080189dc
 8012f3c:	080189f4 	.word	0x080189f4

08012f40 <rcl_get_system_time>:
 8012f40:	4608      	mov	r0, r1
 8012f42:	f000 bb8f 	b.w	8013664 <rcutils_system_time_now>
 8012f46:	bf00      	nop

08012f48 <rcl_get_steady_time>:
 8012f48:	4608      	mov	r0, r1
 8012f4a:	f000 bbb3 	b.w	80136b4 <rcutils_steady_time_now>
 8012f4e:	bf00      	nop

08012f50 <rcl_get_ros_time>:
 8012f50:	7a03      	ldrb	r3, [r0, #8]
 8012f52:	b510      	push	{r4, lr}
 8012f54:	460c      	mov	r4, r1
 8012f56:	b133      	cbz	r3, 8012f66 <rcl_get_ros_time+0x16>
 8012f58:	2105      	movs	r1, #5
 8012f5a:	f000 f9d7 	bl	801330c <__atomic_load_8>
 8012f5e:	e9c4 0100 	strd	r0, r1, [r4]
 8012f62:	2000      	movs	r0, #0
 8012f64:	bd10      	pop	{r4, pc}
 8012f66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f6a:	4608      	mov	r0, r1
 8012f6c:	f000 bb7a 	b.w	8013664 <rcutils_system_time_now>

08012f70 <rcl_clock_init>:
 8012f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f74:	4606      	mov	r6, r0
 8012f76:	4610      	mov	r0, r2
 8012f78:	4614      	mov	r4, r2
 8012f7a:	460d      	mov	r5, r1
 8012f7c:	f7fa ff8e 	bl	800de9c <rcutils_allocator_is_valid>
 8012f80:	b128      	cbz	r0, 8012f8e <rcl_clock_init+0x1e>
 8012f82:	2e03      	cmp	r6, #3
 8012f84:	d803      	bhi.n	8012f8e <rcl_clock_init+0x1e>
 8012f86:	e8df f006 	tbb	[pc, r6]
 8012f8a:	2c1b      	.short	0x2c1b
 8012f8c:	0554      	.short	0x0554
 8012f8e:	200b      	movs	r0, #11
 8012f90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f94:	2d00      	cmp	r5, #0
 8012f96:	d0fa      	beq.n	8012f8e <rcl_clock_init+0x1e>
 8012f98:	2c00      	cmp	r4, #0
 8012f9a:	d0f8      	beq.n	8012f8e <rcl_clock_init+0x1e>
 8012f9c:	2600      	movs	r6, #0
 8012f9e:	702e      	strb	r6, [r5, #0]
 8012fa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012fa2:	f105 0714 	add.w	r7, r5, #20
 8012fa6:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8012faa:	612e      	str	r6, [r5, #16]
 8012fac:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8012fae:	6823      	ldr	r3, [r4, #0]
 8012fb0:	603b      	str	r3, [r7, #0]
 8012fb2:	2303      	movs	r3, #3
 8012fb4:	4a2b      	ldr	r2, [pc, #172]	; (8013064 <rcl_clock_init+0xf4>)
 8012fb6:	702b      	strb	r3, [r5, #0]
 8012fb8:	4630      	mov	r0, r6
 8012fba:	60ea      	str	r2, [r5, #12]
 8012fbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012fc0:	2d00      	cmp	r5, #0
 8012fc2:	d0e4      	beq.n	8012f8e <rcl_clock_init+0x1e>
 8012fc4:	2600      	movs	r6, #0
 8012fc6:	702e      	strb	r6, [r5, #0]
 8012fc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012fca:	f105 0714 	add.w	r7, r5, #20
 8012fce:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8012fd2:	e9c5 6603 	strd	r6, r6, [r5, #12]
 8012fd6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8012fd8:	6823      	ldr	r3, [r4, #0]
 8012fda:	603b      	str	r3, [r7, #0]
 8012fdc:	4630      	mov	r0, r6
 8012fde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012fe2:	2d00      	cmp	r5, #0
 8012fe4:	d0d3      	beq.n	8012f8e <rcl_clock_init+0x1e>
 8012fe6:	2c00      	cmp	r4, #0
 8012fe8:	d0d1      	beq.n	8012f8e <rcl_clock_init+0x1e>
 8012fea:	2600      	movs	r6, #0
 8012fec:	702e      	strb	r6, [r5, #0]
 8012fee:	46a4      	mov	ip, r4
 8012ff0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012ff4:	f105 0714 	add.w	r7, r5, #20
 8012ff8:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8012ffc:	e9c5 6603 	strd	r6, r6, [r5, #12]
 8013000:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013002:	f8dc 3000 	ldr.w	r3, [ip]
 8013006:	603b      	str	r3, [r7, #0]
 8013008:	6921      	ldr	r1, [r4, #16]
 801300a:	6823      	ldr	r3, [r4, #0]
 801300c:	2010      	movs	r0, #16
 801300e:	4798      	blx	r3
 8013010:	4603      	mov	r3, r0
 8013012:	6128      	str	r0, [r5, #16]
 8013014:	b318      	cbz	r0, 801305e <rcl_clock_init+0xee>
 8013016:	f04f 0800 	mov.w	r8, #0
 801301a:	f04f 0900 	mov.w	r9, #0
 801301e:	7206      	strb	r6, [r0, #8]
 8013020:	e9c3 8900 	strd	r8, r9, [r3]
 8013024:	2301      	movs	r3, #1
 8013026:	4a10      	ldr	r2, [pc, #64]	; (8013068 <rcl_clock_init+0xf8>)
 8013028:	702b      	strb	r3, [r5, #0]
 801302a:	4630      	mov	r0, r6
 801302c:	60ea      	str	r2, [r5, #12]
 801302e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013032:	2d00      	cmp	r5, #0
 8013034:	d0ab      	beq.n	8012f8e <rcl_clock_init+0x1e>
 8013036:	2c00      	cmp	r4, #0
 8013038:	d0a9      	beq.n	8012f8e <rcl_clock_init+0x1e>
 801303a:	2600      	movs	r6, #0
 801303c:	702e      	strb	r6, [r5, #0]
 801303e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013040:	f105 0714 	add.w	r7, r5, #20
 8013044:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8013048:	612e      	str	r6, [r5, #16]
 801304a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801304c:	6823      	ldr	r3, [r4, #0]
 801304e:	603b      	str	r3, [r7, #0]
 8013050:	2302      	movs	r3, #2
 8013052:	4a06      	ldr	r2, [pc, #24]	; (801306c <rcl_clock_init+0xfc>)
 8013054:	702b      	strb	r3, [r5, #0]
 8013056:	4630      	mov	r0, r6
 8013058:	60ea      	str	r2, [r5, #12]
 801305a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801305e:	200a      	movs	r0, #10
 8013060:	e796      	b.n	8012f90 <rcl_clock_init+0x20>
 8013062:	bf00      	nop
 8013064:	08012f49 	.word	0x08012f49
 8013068:	08012f51 	.word	0x08012f51
 801306c:	08012f41 	.word	0x08012f41

08013070 <rcl_validate_enclave_name_with_size>:
 8013070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013072:	b0c3      	sub	sp, #268	; 0x10c
 8013074:	b1d0      	cbz	r0, 80130ac <rcl_validate_enclave_name_with_size+0x3c>
 8013076:	4615      	mov	r5, r2
 8013078:	b1c2      	cbz	r2, 80130ac <rcl_validate_enclave_name_with_size+0x3c>
 801307a:	461f      	mov	r7, r3
 801307c:	466a      	mov	r2, sp
 801307e:	ab01      	add	r3, sp, #4
 8013080:	460e      	mov	r6, r1
 8013082:	f000 fb5b 	bl	801373c <rmw_validate_namespace_with_size>
 8013086:	4604      	mov	r4, r0
 8013088:	b9e0      	cbnz	r0, 80130c4 <rcl_validate_enclave_name_with_size+0x54>
 801308a:	9b00      	ldr	r3, [sp, #0]
 801308c:	b923      	cbnz	r3, 8013098 <rcl_validate_enclave_name_with_size+0x28>
 801308e:	2300      	movs	r3, #0
 8013090:	602b      	str	r3, [r5, #0]
 8013092:	4620      	mov	r0, r4
 8013094:	b043      	add	sp, #268	; 0x10c
 8013096:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013098:	2b07      	cmp	r3, #7
 801309a:	d00b      	beq.n	80130b4 <rcl_validate_enclave_name_with_size+0x44>
 801309c:	1e5a      	subs	r2, r3, #1
 801309e:	2a05      	cmp	r2, #5
 80130a0:	d82e      	bhi.n	8013100 <rcl_validate_enclave_name_with_size+0x90>
 80130a2:	e8df f002 	tbb	[pc, r2]
 80130a6:	211e      	.short	0x211e
 80130a8:	152a2724 	.word	0x152a2724
 80130ac:	240b      	movs	r4, #11
 80130ae:	4620      	mov	r0, r4
 80130b0:	b043      	add	sp, #268	; 0x10c
 80130b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80130b4:	2eff      	cmp	r6, #255	; 0xff
 80130b6:	d9ea      	bls.n	801308e <rcl_validate_enclave_name_with_size+0x1e>
 80130b8:	602b      	str	r3, [r5, #0]
 80130ba:	2f00      	cmp	r7, #0
 80130bc:	d0e9      	beq.n	8013092 <rcl_validate_enclave_name_with_size+0x22>
 80130be:	23fe      	movs	r3, #254	; 0xfe
 80130c0:	603b      	str	r3, [r7, #0]
 80130c2:	e7e6      	b.n	8013092 <rcl_validate_enclave_name_with_size+0x22>
 80130c4:	f7ff f82e 	bl	8012124 <rcl_convert_rmw_ret_to_rcl_ret>
 80130c8:	4604      	mov	r4, r0
 80130ca:	4620      	mov	r0, r4
 80130cc:	b043      	add	sp, #268	; 0x10c
 80130ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80130d0:	2306      	movs	r3, #6
 80130d2:	602b      	str	r3, [r5, #0]
 80130d4:	2f00      	cmp	r7, #0
 80130d6:	d0dc      	beq.n	8013092 <rcl_validate_enclave_name_with_size+0x22>
 80130d8:	9b01      	ldr	r3, [sp, #4]
 80130da:	603b      	str	r3, [r7, #0]
 80130dc:	4620      	mov	r0, r4
 80130de:	b043      	add	sp, #268	; 0x10c
 80130e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80130e2:	2301      	movs	r3, #1
 80130e4:	602b      	str	r3, [r5, #0]
 80130e6:	e7f5      	b.n	80130d4 <rcl_validate_enclave_name_with_size+0x64>
 80130e8:	2302      	movs	r3, #2
 80130ea:	602b      	str	r3, [r5, #0]
 80130ec:	e7f2      	b.n	80130d4 <rcl_validate_enclave_name_with_size+0x64>
 80130ee:	2303      	movs	r3, #3
 80130f0:	602b      	str	r3, [r5, #0]
 80130f2:	e7ef      	b.n	80130d4 <rcl_validate_enclave_name_with_size+0x64>
 80130f4:	2304      	movs	r3, #4
 80130f6:	602b      	str	r3, [r5, #0]
 80130f8:	e7ec      	b.n	80130d4 <rcl_validate_enclave_name_with_size+0x64>
 80130fa:	2305      	movs	r3, #5
 80130fc:	602b      	str	r3, [r5, #0]
 80130fe:	e7e9      	b.n	80130d4 <rcl_validate_enclave_name_with_size+0x64>
 8013100:	4a03      	ldr	r2, [pc, #12]	; (8013110 <rcl_validate_enclave_name_with_size+0xa0>)
 8013102:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013106:	a802      	add	r0, sp, #8
 8013108:	f000 fa42 	bl	8013590 <rcutils_snprintf>
 801310c:	2401      	movs	r4, #1
 801310e:	e7c0      	b.n	8013092 <rcl_validate_enclave_name_with_size+0x22>
 8013110:	08018a40 	.word	0x08018a40

08013114 <rcl_validate_enclave_name>:
 8013114:	b168      	cbz	r0, 8013132 <rcl_validate_enclave_name+0x1e>
 8013116:	b570      	push	{r4, r5, r6, lr}
 8013118:	460d      	mov	r5, r1
 801311a:	4616      	mov	r6, r2
 801311c:	4604      	mov	r4, r0
 801311e:	f7ed f869 	bl	80001f4 <strlen>
 8013122:	4633      	mov	r3, r6
 8013124:	4601      	mov	r1, r0
 8013126:	462a      	mov	r2, r5
 8013128:	4620      	mov	r0, r4
 801312a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801312e:	f7ff bf9f 	b.w	8013070 <rcl_validate_enclave_name_with_size>
 8013132:	200b      	movs	r0, #11
 8013134:	4770      	bx	lr
 8013136:	bf00      	nop

08013138 <rcl_validate_topic_name>:
 8013138:	2800      	cmp	r0, #0
 801313a:	f000 808b 	beq.w	8013254 <rcl_validate_topic_name+0x11c>
 801313e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013142:	460e      	mov	r6, r1
 8013144:	2900      	cmp	r1, #0
 8013146:	f000 808c 	beq.w	8013262 <rcl_validate_topic_name+0x12a>
 801314a:	4617      	mov	r7, r2
 801314c:	4605      	mov	r5, r0
 801314e:	f7ed f851 	bl	80001f4 <strlen>
 8013152:	b1b0      	cbz	r0, 8013182 <rcl_validate_topic_name+0x4a>
 8013154:	f895 9000 	ldrb.w	r9, [r5]
 8013158:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 8013308 <rcl_validate_topic_name+0x1d0>
 801315c:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8013160:	f013 0304 	ands.w	r3, r3, #4
 8013164:	d178      	bne.n	8013258 <rcl_validate_topic_name+0x120>
 8013166:	f100 38ff 	add.w	r8, r0, #4294967295
 801316a:	f815 2008 	ldrb.w	r2, [r5, r8]
 801316e:	2a2f      	cmp	r2, #47	; 0x2f
 8013170:	d10e      	bne.n	8013190 <rcl_validate_topic_name+0x58>
 8013172:	2202      	movs	r2, #2
 8013174:	6032      	str	r2, [r6, #0]
 8013176:	b36f      	cbz	r7, 80131d4 <rcl_validate_topic_name+0x9c>
 8013178:	f8c7 8000 	str.w	r8, [r7]
 801317c:	4618      	mov	r0, r3
 801317e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013182:	2301      	movs	r3, #1
 8013184:	6033      	str	r3, [r6, #0]
 8013186:	b32f      	cbz	r7, 80131d4 <rcl_validate_topic_name+0x9c>
 8013188:	2000      	movs	r0, #0
 801318a:	6038      	str	r0, [r7, #0]
 801318c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013190:	461c      	mov	r4, r3
 8013192:	4619      	mov	r1, r3
 8013194:	f105 3aff 	add.w	sl, r5, #4294967295
 8013198:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801319c:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80131a0:	f1be 0f09 	cmp.w	lr, #9
 80131a4:	d946      	bls.n	8013234 <rcl_validate_topic_name+0xfc>
 80131a6:	f022 0e20 	bic.w	lr, r2, #32
 80131aa:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 80131ae:	f1be 0f19 	cmp.w	lr, #25
 80131b2:	d93f      	bls.n	8013234 <rcl_validate_topic_name+0xfc>
 80131b4:	2a5f      	cmp	r2, #95	; 0x5f
 80131b6:	d014      	beq.n	80131e2 <rcl_validate_topic_name+0xaa>
 80131b8:	2a2f      	cmp	r2, #47	; 0x2f
 80131ba:	d05b      	beq.n	8013274 <rcl_validate_topic_name+0x13c>
 80131bc:	2a7e      	cmp	r2, #126	; 0x7e
 80131be:	d052      	beq.n	8013266 <rcl_validate_topic_name+0x12e>
 80131c0:	2a7b      	cmp	r2, #123	; 0x7b
 80131c2:	d00a      	beq.n	80131da <rcl_validate_topic_name+0xa2>
 80131c4:	2a7d      	cmp	r2, #125	; 0x7d
 80131c6:	d16f      	bne.n	80132a8 <rcl_validate_topic_name+0x170>
 80131c8:	2c00      	cmp	r4, #0
 80131ca:	d15e      	bne.n	801328a <rcl_validate_topic_name+0x152>
 80131cc:	2305      	movs	r3, #5
 80131ce:	6033      	str	r3, [r6, #0]
 80131d0:	b107      	cbz	r7, 80131d4 <rcl_validate_topic_name+0x9c>
 80131d2:	6039      	str	r1, [r7, #0]
 80131d4:	2000      	movs	r0, #0
 80131d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80131da:	2c00      	cmp	r4, #0
 80131dc:	d14c      	bne.n	8013278 <rcl_validate_topic_name+0x140>
 80131de:	460b      	mov	r3, r1
 80131e0:	2401      	movs	r4, #1
 80131e2:	3101      	adds	r1, #1
 80131e4:	4288      	cmp	r0, r1
 80131e6:	d1d7      	bne.n	8013198 <rcl_validate_topic_name+0x60>
 80131e8:	2c00      	cmp	r4, #0
 80131ea:	d156      	bne.n	801329a <rcl_validate_topic_name+0x162>
 80131ec:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 80131f0:	4620      	mov	r0, r4
 80131f2:	d061      	beq.n	80132b8 <rcl_validate_topic_name+0x180>
 80131f4:	f108 0e01 	add.w	lr, r8, #1
 80131f8:	e007      	b.n	801320a <rcl_validate_topic_name+0xd2>
 80131fa:	2801      	cmp	r0, #1
 80131fc:	d047      	beq.n	801328e <rcl_validate_topic_name+0x156>
 80131fe:	461a      	mov	r2, r3
 8013200:	4291      	cmp	r1, r2
 8013202:	4618      	mov	r0, r3
 8013204:	f105 0501 	add.w	r5, r5, #1
 8013208:	d944      	bls.n	8013294 <rcl_validate_topic_name+0x15c>
 801320a:	4580      	cmp	r8, r0
 801320c:	f100 0301 	add.w	r3, r0, #1
 8013210:	d037      	beq.n	8013282 <rcl_validate_topic_name+0x14a>
 8013212:	782a      	ldrb	r2, [r5, #0]
 8013214:	2a2f      	cmp	r2, #47	; 0x2f
 8013216:	d1f0      	bne.n	80131fa <rcl_validate_topic_name+0xc2>
 8013218:	786b      	ldrb	r3, [r5, #1]
 801321a:	f81c 4003 	ldrb.w	r4, [ip, r3]
 801321e:	1c43      	adds	r3, r0, #1
 8013220:	0760      	lsls	r0, r4, #29
 8013222:	461a      	mov	r2, r3
 8013224:	d5ec      	bpl.n	8013200 <rcl_validate_topic_name+0xc8>
 8013226:	2304      	movs	r3, #4
 8013228:	6033      	str	r3, [r6, #0]
 801322a:	2f00      	cmp	r7, #0
 801322c:	d0d2      	beq.n	80131d4 <rcl_validate_topic_name+0x9c>
 801322e:	603a      	str	r2, [r7, #0]
 8013230:	2000      	movs	r0, #0
 8013232:	e7ab      	b.n	801318c <rcl_validate_topic_name+0x54>
 8013234:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8013238:	0752      	lsls	r2, r2, #29
 801323a:	d5d2      	bpl.n	80131e2 <rcl_validate_topic_name+0xaa>
 801323c:	2c00      	cmp	r4, #0
 801323e:	d0d0      	beq.n	80131e2 <rcl_validate_topic_name+0xaa>
 8013240:	2900      	cmp	r1, #0
 8013242:	d0ce      	beq.n	80131e2 <rcl_validate_topic_name+0xaa>
 8013244:	1e4a      	subs	r2, r1, #1
 8013246:	429a      	cmp	r2, r3
 8013248:	d1cb      	bne.n	80131e2 <rcl_validate_topic_name+0xaa>
 801324a:	2309      	movs	r3, #9
 801324c:	6033      	str	r3, [r6, #0]
 801324e:	2f00      	cmp	r7, #0
 8013250:	d1bf      	bne.n	80131d2 <rcl_validate_topic_name+0x9a>
 8013252:	e7bf      	b.n	80131d4 <rcl_validate_topic_name+0x9c>
 8013254:	200b      	movs	r0, #11
 8013256:	4770      	bx	lr
 8013258:	2304      	movs	r3, #4
 801325a:	6033      	str	r3, [r6, #0]
 801325c:	2f00      	cmp	r7, #0
 801325e:	d193      	bne.n	8013188 <rcl_validate_topic_name+0x50>
 8013260:	e7b8      	b.n	80131d4 <rcl_validate_topic_name+0x9c>
 8013262:	200b      	movs	r0, #11
 8013264:	e792      	b.n	801318c <rcl_validate_topic_name+0x54>
 8013266:	2900      	cmp	r1, #0
 8013268:	d0bb      	beq.n	80131e2 <rcl_validate_topic_name+0xaa>
 801326a:	2306      	movs	r3, #6
 801326c:	6033      	str	r3, [r6, #0]
 801326e:	2f00      	cmp	r7, #0
 8013270:	d1af      	bne.n	80131d2 <rcl_validate_topic_name+0x9a>
 8013272:	e7af      	b.n	80131d4 <rcl_validate_topic_name+0x9c>
 8013274:	2c00      	cmp	r4, #0
 8013276:	d0b4      	beq.n	80131e2 <rcl_validate_topic_name+0xaa>
 8013278:	2308      	movs	r3, #8
 801327a:	6033      	str	r3, [r6, #0]
 801327c:	2f00      	cmp	r7, #0
 801327e:	d1a8      	bne.n	80131d2 <rcl_validate_topic_name+0x9a>
 8013280:	e7a8      	b.n	80131d4 <rcl_validate_topic_name+0x9c>
 8013282:	4672      	mov	r2, lr
 8013284:	f108 0301 	add.w	r3, r8, #1
 8013288:	e7ba      	b.n	8013200 <rcl_validate_topic_name+0xc8>
 801328a:	2400      	movs	r4, #0
 801328c:	e7a9      	b.n	80131e2 <rcl_validate_topic_name+0xaa>
 801328e:	2202      	movs	r2, #2
 8013290:	4613      	mov	r3, r2
 8013292:	e7b5      	b.n	8013200 <rcl_validate_topic_name+0xc8>
 8013294:	2000      	movs	r0, #0
 8013296:	6030      	str	r0, [r6, #0]
 8013298:	e778      	b.n	801318c <rcl_validate_topic_name+0x54>
 801329a:	2205      	movs	r2, #5
 801329c:	6032      	str	r2, [r6, #0]
 801329e:	2f00      	cmp	r7, #0
 80132a0:	d098      	beq.n	80131d4 <rcl_validate_topic_name+0x9c>
 80132a2:	603b      	str	r3, [r7, #0]
 80132a4:	2000      	movs	r0, #0
 80132a6:	e771      	b.n	801318c <rcl_validate_topic_name+0x54>
 80132a8:	2c00      	cmp	r4, #0
 80132aa:	bf14      	ite	ne
 80132ac:	2308      	movne	r3, #8
 80132ae:	2303      	moveq	r3, #3
 80132b0:	6033      	str	r3, [r6, #0]
 80132b2:	2f00      	cmp	r7, #0
 80132b4:	d18d      	bne.n	80131d2 <rcl_validate_topic_name+0x9a>
 80132b6:	e78d      	b.n	80131d4 <rcl_validate_topic_name+0x9c>
 80132b8:	f108 0401 	add.w	r4, r8, #1
 80132bc:	e007      	b.n	80132ce <rcl_validate_topic_name+0x196>
 80132be:	2801      	cmp	r0, #1
 80132c0:	d019      	beq.n	80132f6 <rcl_validate_topic_name+0x1be>
 80132c2:	461a      	mov	r2, r3
 80132c4:	4291      	cmp	r1, r2
 80132c6:	4618      	mov	r0, r3
 80132c8:	f105 0501 	add.w	r5, r5, #1
 80132cc:	d9e2      	bls.n	8013294 <rcl_validate_topic_name+0x15c>
 80132ce:	4580      	cmp	r8, r0
 80132d0:	f100 0301 	add.w	r3, r0, #1
 80132d4:	d00b      	beq.n	80132ee <rcl_validate_topic_name+0x1b6>
 80132d6:	782a      	ldrb	r2, [r5, #0]
 80132d8:	2a2f      	cmp	r2, #47	; 0x2f
 80132da:	d1f0      	bne.n	80132be <rcl_validate_topic_name+0x186>
 80132dc:	786b      	ldrb	r3, [r5, #1]
 80132de:	f81c e003 	ldrb.w	lr, [ip, r3]
 80132e2:	1c43      	adds	r3, r0, #1
 80132e4:	f01e 0f04 	tst.w	lr, #4
 80132e8:	461a      	mov	r2, r3
 80132ea:	d0eb      	beq.n	80132c4 <rcl_validate_topic_name+0x18c>
 80132ec:	e79b      	b.n	8013226 <rcl_validate_topic_name+0xee>
 80132ee:	4622      	mov	r2, r4
 80132f0:	f108 0301 	add.w	r3, r8, #1
 80132f4:	e7e6      	b.n	80132c4 <rcl_validate_topic_name+0x18c>
 80132f6:	2307      	movs	r3, #7
 80132f8:	6033      	str	r3, [r6, #0]
 80132fa:	2f00      	cmp	r7, #0
 80132fc:	f43f af6a 	beq.w	80131d4 <rcl_validate_topic_name+0x9c>
 8013300:	6038      	str	r0, [r7, #0]
 8013302:	2000      	movs	r0, #0
 8013304:	e742      	b.n	801318c <rcl_validate_topic_name+0x54>
 8013306:	bf00      	nop
 8013308:	08019094 	.word	0x08019094

0801330c <__atomic_load_8>:
 801330c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8013310:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8013314:	4b14      	ldr	r3, [pc, #80]	; (8013368 <__atomic_load_8+0x5c>)
 8013316:	4a15      	ldr	r2, [pc, #84]	; (801336c <__atomic_load_8+0x60>)
 8013318:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801331c:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8013320:	fb03 f301 	mul.w	r3, r3, r1
 8013324:	ea83 33d3 	eor.w	r3, r3, r3, lsr #15
 8013328:	fba2 1203 	umull	r1, r2, r2, r3
 801332c:	0912      	lsrs	r2, r2, #4
 801332e:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8013332:	b430      	push	{r4, r5}
 8013334:	ebc2 02c1 	rsb	r2, r2, r1, lsl #3
 8013338:	4c0d      	ldr	r4, [pc, #52]	; (8013370 <__atomic_load_8+0x64>)
 801333a:	1a9b      	subs	r3, r3, r2
 801333c:	18e1      	adds	r1, r4, r3
 801333e:	f04f 0501 	mov.w	r5, #1
 8013342:	e8d1 2f4f 	ldrexb	r2, [r1]
 8013346:	e8c1 5f4c 	strexb	ip, r5, [r1]
 801334a:	f1bc 0f00 	cmp.w	ip, #0
 801334e:	d1f8      	bne.n	8013342 <__atomic_load_8+0x36>
 8013350:	f3bf 8f5b 	dmb	ish
 8013354:	b2d2      	uxtb	r2, r2
 8013356:	2a00      	cmp	r2, #0
 8013358:	d1f3      	bne.n	8013342 <__atomic_load_8+0x36>
 801335a:	e9d0 0100 	ldrd	r0, r1, [r0]
 801335e:	f3bf 8f5b 	dmb	ish
 8013362:	54e2      	strb	r2, [r4, r3]
 8013364:	bc30      	pop	{r4, r5}
 8013366:	4770      	bx	lr
 8013368:	27d4eb2d 	.word	0x27d4eb2d
 801336c:	b21642c9 	.word	0xb21642c9
 8013370:	20009c04 	.word	0x20009c04

08013374 <rcutils_is_directory>:
 8013374:	2000      	movs	r0, #0
 8013376:	4770      	bx	lr

08013378 <rcutils_join_path>:
 8013378:	b082      	sub	sp, #8
 801337a:	e88d 000c 	stmia.w	sp, {r2, r3}
 801337e:	2000      	movs	r0, #0
 8013380:	b002      	add	sp, #8
 8013382:	4770      	bx	lr

08013384 <rcutils_to_native_path>:
 8013384:	b084      	sub	sp, #16
 8013386:	a801      	add	r0, sp, #4
 8013388:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 801338c:	b004      	add	sp, #16
 801338e:	2000      	movs	r0, #0
 8013390:	4770      	bx	lr
 8013392:	bf00      	nop

08013394 <rcutils_format_string_limit>:
 8013394:	b40f      	push	{r0, r1, r2, r3}
 8013396:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013398:	b083      	sub	sp, #12
 801339a:	ac08      	add	r4, sp, #32
 801339c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801339e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80133a2:	b34e      	cbz	r6, 80133f8 <rcutils_format_string_limit+0x64>
 80133a4:	a808      	add	r0, sp, #32
 80133a6:	f7fa fd79 	bl	800de9c <rcutils_allocator_is_valid>
 80133aa:	b328      	cbz	r0, 80133f8 <rcutils_format_string_limit+0x64>
 80133ac:	2100      	movs	r1, #0
 80133ae:	ab0f      	add	r3, sp, #60	; 0x3c
 80133b0:	4608      	mov	r0, r1
 80133b2:	4632      	mov	r2, r6
 80133b4:	e9cd 3300 	strd	r3, r3, [sp]
 80133b8:	f000 f904 	bl	80135c4 <rcutils_vsnprintf>
 80133bc:	1c43      	adds	r3, r0, #1
 80133be:	4605      	mov	r5, r0
 80133c0:	d01a      	beq.n	80133f8 <rcutils_format_string_limit+0x64>
 80133c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80133c4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80133c6:	1c47      	adds	r7, r0, #1
 80133c8:	429f      	cmp	r7, r3
 80133ca:	bf84      	itt	hi
 80133cc:	461f      	movhi	r7, r3
 80133ce:	f103 35ff 	addhi.w	r5, r3, #4294967295
 80133d2:	4638      	mov	r0, r7
 80133d4:	9b08      	ldr	r3, [sp, #32]
 80133d6:	4798      	blx	r3
 80133d8:	4604      	mov	r4, r0
 80133da:	b168      	cbz	r0, 80133f8 <rcutils_format_string_limit+0x64>
 80133dc:	9b01      	ldr	r3, [sp, #4]
 80133de:	4632      	mov	r2, r6
 80133e0:	4639      	mov	r1, r7
 80133e2:	f000 f8ef 	bl	80135c4 <rcutils_vsnprintf>
 80133e6:	2800      	cmp	r0, #0
 80133e8:	db02      	blt.n	80133f0 <rcutils_format_string_limit+0x5c>
 80133ea:	2300      	movs	r3, #0
 80133ec:	5563      	strb	r3, [r4, r5]
 80133ee:	e004      	b.n	80133fa <rcutils_format_string_limit+0x66>
 80133f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80133f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80133f4:	4620      	mov	r0, r4
 80133f6:	4798      	blx	r3
 80133f8:	2400      	movs	r4, #0
 80133fa:	4620      	mov	r0, r4
 80133fc:	b003      	add	sp, #12
 80133fe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013402:	b004      	add	sp, #16
 8013404:	4770      	bx	lr
 8013406:	bf00      	nop

08013408 <rcutils_get_env>:
 8013408:	b168      	cbz	r0, 8013426 <rcutils_get_env+0x1e>
 801340a:	b510      	push	{r4, lr}
 801340c:	460c      	mov	r4, r1
 801340e:	b129      	cbz	r1, 801341c <rcutils_get_env+0x14>
 8013410:	f003 fbc8 	bl	8016ba4 <getenv>
 8013414:	b120      	cbz	r0, 8013420 <rcutils_get_env+0x18>
 8013416:	6020      	str	r0, [r4, #0]
 8013418:	2000      	movs	r0, #0
 801341a:	bd10      	pop	{r4, pc}
 801341c:	4803      	ldr	r0, [pc, #12]	; (801342c <rcutils_get_env+0x24>)
 801341e:	bd10      	pop	{r4, pc}
 8013420:	4b03      	ldr	r3, [pc, #12]	; (8013430 <rcutils_get_env+0x28>)
 8013422:	6023      	str	r3, [r4, #0]
 8013424:	bd10      	pop	{r4, pc}
 8013426:	4803      	ldr	r0, [pc, #12]	; (8013434 <rcutils_get_env+0x2c>)
 8013428:	4770      	bx	lr
 801342a:	bf00      	nop
 801342c:	08018abc 	.word	0x08018abc
 8013430:	08018be0 	.word	0x08018be0
 8013434:	08018aa0 	.word	0x08018aa0

08013438 <rcutils_repl_str>:
 8013438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801343c:	ed2d 8b02 	vpush	{d8}
 8013440:	b087      	sub	sp, #28
 8013442:	4680      	mov	r8, r0
 8013444:	4608      	mov	r0, r1
 8013446:	f8cd 8000 	str.w	r8, [sp]
 801344a:	ee08 2a10 	vmov	s16, r2
 801344e:	468a      	mov	sl, r1
 8013450:	4699      	mov	r9, r3
 8013452:	f7ec fecf 	bl	80001f4 <strlen>
 8013456:	2600      	movs	r6, #0
 8013458:	4647      	mov	r7, r8
 801345a:	9001      	str	r0, [sp, #4]
 801345c:	46b3      	mov	fp, r6
 801345e:	2510      	movs	r5, #16
 8013460:	46b0      	mov	r8, r6
 8013462:	e01d      	b.n	80134a0 <rcutils_repl_str+0x68>
 8013464:	f10b 0b01 	add.w	fp, fp, #1
 8013468:	455e      	cmp	r6, fp
 801346a:	d211      	bcs.n	8013490 <rcutils_repl_str+0x58>
 801346c:	442e      	add	r6, r5
 801346e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8013472:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8013476:	00b1      	lsls	r1, r6, #2
 8013478:	4798      	blx	r3
 801347a:	2800      	cmp	r0, #0
 801347c:	f000 8084 	beq.w	8013588 <rcutils_repl_str+0x150>
 8013480:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013484:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8013488:	bf28      	it	cs
 801348a:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 801348e:	4680      	mov	r8, r0
 8013490:	9a00      	ldr	r2, [sp, #0]
 8013492:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8013496:	1aa2      	subs	r2, r4, r2
 8013498:	f843 2c04 	str.w	r2, [r3, #-4]
 801349c:	9b01      	ldr	r3, [sp, #4]
 801349e:	18e7      	adds	r7, r4, r3
 80134a0:	4651      	mov	r1, sl
 80134a2:	4638      	mov	r0, r7
 80134a4:	f004 f8b1 	bl	801760a <strstr>
 80134a8:	4604      	mov	r4, r0
 80134aa:	4640      	mov	r0, r8
 80134ac:	2c00      	cmp	r4, #0
 80134ae:	d1d9      	bne.n	8013464 <rcutils_repl_str+0x2c>
 80134b0:	46b8      	mov	r8, r7
 80134b2:	4607      	mov	r7, r0
 80134b4:	4640      	mov	r0, r8
 80134b6:	f7ec fe9d 	bl	80001f4 <strlen>
 80134ba:	9b00      	ldr	r3, [sp, #0]
 80134bc:	eba8 0303 	sub.w	r3, r8, r3
 80134c0:	181d      	adds	r5, r3, r0
 80134c2:	9504      	str	r5, [sp, #16]
 80134c4:	f1bb 0f00 	cmp.w	fp, #0
 80134c8:	d03d      	beq.n	8013546 <rcutils_repl_str+0x10e>
 80134ca:	ee18 0a10 	vmov	r0, s16
 80134ce:	f7ec fe91 	bl	80001f4 <strlen>
 80134d2:	9b01      	ldr	r3, [sp, #4]
 80134d4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80134d8:	1ac3      	subs	r3, r0, r3
 80134da:	fb0b 5303 	mla	r3, fp, r3, r5
 80134de:	9305      	str	r3, [sp, #20]
 80134e0:	4606      	mov	r6, r0
 80134e2:	1c58      	adds	r0, r3, #1
 80134e4:	f8d9 3000 	ldr.w	r3, [r9]
 80134e8:	4798      	blx	r3
 80134ea:	9003      	str	r0, [sp, #12]
 80134ec:	2800      	cmp	r0, #0
 80134ee:	d04c      	beq.n	801358a <rcutils_repl_str+0x152>
 80134f0:	683a      	ldr	r2, [r7, #0]
 80134f2:	9900      	ldr	r1, [sp, #0]
 80134f4:	f004 f981 	bl	80177fa <memcpy>
 80134f8:	9b03      	ldr	r3, [sp, #12]
 80134fa:	683d      	ldr	r5, [r7, #0]
 80134fc:	ee18 8a10 	vmov	r8, s16
 8013500:	441d      	add	r5, r3
 8013502:	f10b 33ff 	add.w	r3, fp, #4294967295
 8013506:	9302      	str	r3, [sp, #8]
 8013508:	46ba      	mov	sl, r7
 801350a:	4632      	mov	r2, r6
 801350c:	4641      	mov	r1, r8
 801350e:	4628      	mov	r0, r5
 8013510:	f004 f973 	bl	80177fa <memcpy>
 8013514:	9b01      	ldr	r3, [sp, #4]
 8013516:	f85a 2b04 	ldr.w	r2, [sl], #4
 801351a:	441a      	add	r2, r3
 801351c:	9b00      	ldr	r3, [sp, #0]
 801351e:	1899      	adds	r1, r3, r2
 8013520:	9b02      	ldr	r3, [sp, #8]
 8013522:	4435      	add	r5, r6
 8013524:	429c      	cmp	r4, r3
 8013526:	4628      	mov	r0, r5
 8013528:	d025      	beq.n	8013576 <rcutils_repl_str+0x13e>
 801352a:	f8da 3000 	ldr.w	r3, [sl]
 801352e:	3401      	adds	r4, #1
 8013530:	1a9a      	subs	r2, r3, r2
 8013532:	4415      	add	r5, r2
 8013534:	f004 f961 	bl	80177fa <memcpy>
 8013538:	455c      	cmp	r4, fp
 801353a:	d3e6      	bcc.n	801350a <rcutils_repl_str+0xd2>
 801353c:	9a03      	ldr	r2, [sp, #12]
 801353e:	9905      	ldr	r1, [sp, #20]
 8013540:	2300      	movs	r3, #0
 8013542:	5453      	strb	r3, [r2, r1]
 8013544:	e00b      	b.n	801355e <rcutils_repl_str+0x126>
 8013546:	4628      	mov	r0, r5
 8013548:	f8d9 3000 	ldr.w	r3, [r9]
 801354c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8013550:	3001      	adds	r0, #1
 8013552:	4798      	blx	r3
 8013554:	9003      	str	r0, [sp, #12]
 8013556:	b110      	cbz	r0, 801355e <rcutils_repl_str+0x126>
 8013558:	9900      	ldr	r1, [sp, #0]
 801355a:	f004 f946 	bl	80177ea <strcpy>
 801355e:	4638      	mov	r0, r7
 8013560:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8013564:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8013568:	4798      	blx	r3
 801356a:	9803      	ldr	r0, [sp, #12]
 801356c:	b007      	add	sp, #28
 801356e:	ecbd 8b02 	vpop	{d8}
 8013572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013576:	9b04      	ldr	r3, [sp, #16]
 8013578:	3401      	adds	r4, #1
 801357a:	1a9a      	subs	r2, r3, r2
 801357c:	4415      	add	r5, r2
 801357e:	f004 f93c 	bl	80177fa <memcpy>
 8013582:	455c      	cmp	r4, fp
 8013584:	d3c1      	bcc.n	801350a <rcutils_repl_str+0xd2>
 8013586:	e7d9      	b.n	801353c <rcutils_repl_str+0x104>
 8013588:	4647      	mov	r7, r8
 801358a:	2300      	movs	r3, #0
 801358c:	9303      	str	r3, [sp, #12]
 801358e:	e7e6      	b.n	801355e <rcutils_repl_str+0x126>

08013590 <rcutils_snprintf>:
 8013590:	b40c      	push	{r2, r3}
 8013592:	b530      	push	{r4, r5, lr}
 8013594:	b083      	sub	sp, #12
 8013596:	ab06      	add	r3, sp, #24
 8013598:	f853 2b04 	ldr.w	r2, [r3], #4
 801359c:	9301      	str	r3, [sp, #4]
 801359e:	b152      	cbz	r2, 80135b6 <rcutils_snprintf+0x26>
 80135a0:	b138      	cbz	r0, 80135b2 <rcutils_snprintf+0x22>
 80135a2:	b141      	cbz	r1, 80135b6 <rcutils_snprintf+0x26>
 80135a4:	f003 ff66 	bl	8017474 <vsniprintf>
 80135a8:	b003      	add	sp, #12
 80135aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80135ae:	b002      	add	sp, #8
 80135b0:	4770      	bx	lr
 80135b2:	2900      	cmp	r1, #0
 80135b4:	d0f6      	beq.n	80135a4 <rcutils_snprintf+0x14>
 80135b6:	f004 f8eb 	bl	8017790 <__errno>
 80135ba:	2316      	movs	r3, #22
 80135bc:	6003      	str	r3, [r0, #0]
 80135be:	f04f 30ff 	mov.w	r0, #4294967295
 80135c2:	e7f1      	b.n	80135a8 <rcutils_snprintf+0x18>

080135c4 <rcutils_vsnprintf>:
 80135c4:	b570      	push	{r4, r5, r6, lr}
 80135c6:	b13a      	cbz	r2, 80135d8 <rcutils_vsnprintf+0x14>
 80135c8:	b120      	cbz	r0, 80135d4 <rcutils_vsnprintf+0x10>
 80135ca:	b129      	cbz	r1, 80135d8 <rcutils_vsnprintf+0x14>
 80135cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80135d0:	f003 bf50 	b.w	8017474 <vsniprintf>
 80135d4:	2900      	cmp	r1, #0
 80135d6:	d0f9      	beq.n	80135cc <rcutils_vsnprintf+0x8>
 80135d8:	f004 f8da 	bl	8017790 <__errno>
 80135dc:	2316      	movs	r3, #22
 80135de:	6003      	str	r3, [r0, #0]
 80135e0:	f04f 30ff 	mov.w	r0, #4294967295
 80135e4:	bd70      	pop	{r4, r5, r6, pc}
 80135e6:	bf00      	nop

080135e8 <rcutils_strdup>:
 80135e8:	b084      	sub	sp, #16
 80135ea:	b570      	push	{r4, r5, r6, lr}
 80135ec:	b082      	sub	sp, #8
 80135ee:	ac07      	add	r4, sp, #28
 80135f0:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 80135f4:	4605      	mov	r5, r0
 80135f6:	b1b0      	cbz	r0, 8013626 <rcutils_strdup+0x3e>
 80135f8:	f7ec fdfc 	bl	80001f4 <strlen>
 80135fc:	1c42      	adds	r2, r0, #1
 80135fe:	9b07      	ldr	r3, [sp, #28]
 8013600:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013602:	9201      	str	r2, [sp, #4]
 8013604:	4606      	mov	r6, r0
 8013606:	4610      	mov	r0, r2
 8013608:	4798      	blx	r3
 801360a:	4604      	mov	r4, r0
 801360c:	b128      	cbz	r0, 801361a <rcutils_strdup+0x32>
 801360e:	9a01      	ldr	r2, [sp, #4]
 8013610:	4629      	mov	r1, r5
 8013612:	f004 f8f2 	bl	80177fa <memcpy>
 8013616:	2300      	movs	r3, #0
 8013618:	55a3      	strb	r3, [r4, r6]
 801361a:	4620      	mov	r0, r4
 801361c:	b002      	add	sp, #8
 801361e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013622:	b004      	add	sp, #16
 8013624:	4770      	bx	lr
 8013626:	4604      	mov	r4, r0
 8013628:	e7f7      	b.n	801361a <rcutils_strdup+0x32>
 801362a:	bf00      	nop

0801362c <rcutils_strndup>:
 801362c:	b082      	sub	sp, #8
 801362e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013630:	460e      	mov	r6, r1
 8013632:	a906      	add	r1, sp, #24
 8013634:	e881 000c 	stmia.w	r1, {r2, r3}
 8013638:	4605      	mov	r5, r0
 801363a:	b180      	cbz	r0, 801365e <rcutils_strndup+0x32>
 801363c:	1c77      	adds	r7, r6, #1
 801363e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013640:	4638      	mov	r0, r7
 8013642:	4790      	blx	r2
 8013644:	4604      	mov	r4, r0
 8013646:	b128      	cbz	r0, 8013654 <rcutils_strndup+0x28>
 8013648:	463a      	mov	r2, r7
 801364a:	4629      	mov	r1, r5
 801364c:	f004 f8d5 	bl	80177fa <memcpy>
 8013650:	2300      	movs	r3, #0
 8013652:	55a3      	strb	r3, [r4, r6]
 8013654:	4620      	mov	r0, r4
 8013656:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801365a:	b002      	add	sp, #8
 801365c:	4770      	bx	lr
 801365e:	4604      	mov	r4, r0
 8013660:	e7f8      	b.n	8013654 <rcutils_strndup+0x28>
 8013662:	bf00      	nop

08013664 <rcutils_system_time_now>:
 8013664:	b310      	cbz	r0, 80136ac <rcutils_system_time_now+0x48>
 8013666:	b570      	push	{r4, r5, r6, lr}
 8013668:	b084      	sub	sp, #16
 801366a:	4669      	mov	r1, sp
 801366c:	4604      	mov	r4, r0
 801366e:	2001      	movs	r0, #1
 8013670:	f7ef fb12 	bl	8002c98 <clock_gettime>
 8013674:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013678:	2800      	cmp	r0, #0
 801367a:	f171 0300 	sbcs.w	r3, r1, #0
 801367e:	db12      	blt.n	80136a6 <rcutils_system_time_now+0x42>
 8013680:	9d02      	ldr	r5, [sp, #8]
 8013682:	2d00      	cmp	r5, #0
 8013684:	db0c      	blt.n	80136a0 <rcutils_system_time_now+0x3c>
 8013686:	4e0a      	ldr	r6, [pc, #40]	; (80136b0 <rcutils_system_time_now+0x4c>)
 8013688:	fba0 2306 	umull	r2, r3, r0, r6
 801368c:	1952      	adds	r2, r2, r5
 801368e:	fb06 3301 	mla	r3, r6, r1, r3
 8013692:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 8013696:	2000      	movs	r0, #0
 8013698:	e9c4 2300 	strd	r2, r3, [r4]
 801369c:	b004      	add	sp, #16
 801369e:	bd70      	pop	{r4, r5, r6, pc}
 80136a0:	ea50 0301 	orrs.w	r3, r0, r1
 80136a4:	d1ef      	bne.n	8013686 <rcutils_system_time_now+0x22>
 80136a6:	2002      	movs	r0, #2
 80136a8:	b004      	add	sp, #16
 80136aa:	bd70      	pop	{r4, r5, r6, pc}
 80136ac:	200b      	movs	r0, #11
 80136ae:	4770      	bx	lr
 80136b0:	3b9aca00 	.word	0x3b9aca00

080136b4 <rcutils_steady_time_now>:
 80136b4:	b310      	cbz	r0, 80136fc <rcutils_steady_time_now+0x48>
 80136b6:	b570      	push	{r4, r5, r6, lr}
 80136b8:	b084      	sub	sp, #16
 80136ba:	4669      	mov	r1, sp
 80136bc:	4604      	mov	r4, r0
 80136be:	2000      	movs	r0, #0
 80136c0:	f7ef faea 	bl	8002c98 <clock_gettime>
 80136c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80136c8:	2800      	cmp	r0, #0
 80136ca:	f171 0300 	sbcs.w	r3, r1, #0
 80136ce:	db12      	blt.n	80136f6 <rcutils_steady_time_now+0x42>
 80136d0:	9d02      	ldr	r5, [sp, #8]
 80136d2:	2d00      	cmp	r5, #0
 80136d4:	db0c      	blt.n	80136f0 <rcutils_steady_time_now+0x3c>
 80136d6:	4e0a      	ldr	r6, [pc, #40]	; (8013700 <rcutils_steady_time_now+0x4c>)
 80136d8:	fba0 2306 	umull	r2, r3, r0, r6
 80136dc:	1952      	adds	r2, r2, r5
 80136de:	fb06 3301 	mla	r3, r6, r1, r3
 80136e2:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 80136e6:	2000      	movs	r0, #0
 80136e8:	e9c4 2300 	strd	r2, r3, [r4]
 80136ec:	b004      	add	sp, #16
 80136ee:	bd70      	pop	{r4, r5, r6, pc}
 80136f0:	ea50 0301 	orrs.w	r3, r0, r1
 80136f4:	d1ef      	bne.n	80136d6 <rcutils_steady_time_now+0x22>
 80136f6:	2002      	movs	r0, #2
 80136f8:	b004      	add	sp, #16
 80136fa:	bd70      	pop	{r4, r5, r6, pc}
 80136fc:	200b      	movs	r0, #11
 80136fe:	4770      	bx	lr
 8013700:	3b9aca00 	.word	0x3b9aca00

08013704 <rmw_get_zero_initialized_context>:
 8013704:	b510      	push	{r4, lr}
 8013706:	2250      	movs	r2, #80	; 0x50
 8013708:	4604      	mov	r4, r0
 801370a:	2100      	movs	r1, #0
 801370c:	f003 ff56 	bl	80175bc <memset>
 8013710:	4620      	mov	r0, r4
 8013712:	bd10      	pop	{r4, pc}

08013714 <rmw_get_zero_initialized_init_options>:
 8013714:	b510      	push	{r4, lr}
 8013716:	2238      	movs	r2, #56	; 0x38
 8013718:	4604      	mov	r4, r0
 801371a:	2100      	movs	r1, #0
 801371c:	f003 ff4e 	bl	80175bc <memset>
 8013720:	f104 0010 	add.w	r0, r4, #16
 8013724:	f000 f806 	bl	8013734 <rmw_get_default_security_options>
 8013728:	f04f 33ff 	mov.w	r3, #4294967295
 801372c:	60e3      	str	r3, [r4, #12]
 801372e:	4620      	mov	r0, r4
 8013730:	bd10      	pop	{r4, pc}
 8013732:	bf00      	nop

08013734 <rmw_get_default_security_options>:
 8013734:	2200      	movs	r2, #0
 8013736:	7002      	strb	r2, [r0, #0]
 8013738:	6042      	str	r2, [r0, #4]
 801373a:	4770      	bx	lr

0801373c <rmw_validate_namespace_with_size>:
 801373c:	b340      	cbz	r0, 8013790 <rmw_validate_namespace_with_size+0x54>
 801373e:	b5d0      	push	{r4, r6, r7, lr}
 8013740:	4614      	mov	r4, r2
 8013742:	b0c2      	sub	sp, #264	; 0x108
 8013744:	b332      	cbz	r2, 8013794 <rmw_validate_namespace_with_size+0x58>
 8013746:	2901      	cmp	r1, #1
 8013748:	460f      	mov	r7, r1
 801374a:	461e      	mov	r6, r3
 801374c:	d102      	bne.n	8013754 <rmw_validate_namespace_with_size+0x18>
 801374e:	7803      	ldrb	r3, [r0, #0]
 8013750:	2b2f      	cmp	r3, #47	; 0x2f
 8013752:	d019      	beq.n	8013788 <rmw_validate_namespace_with_size+0x4c>
 8013754:	aa01      	add	r2, sp, #4
 8013756:	4669      	mov	r1, sp
 8013758:	f7fa fd24 	bl	800e1a4 <rmw_validate_full_topic_name>
 801375c:	b990      	cbnz	r0, 8013784 <rmw_validate_namespace_with_size+0x48>
 801375e:	9b00      	ldr	r3, [sp, #0]
 8013760:	b14b      	cbz	r3, 8013776 <rmw_validate_namespace_with_size+0x3a>
 8013762:	2b07      	cmp	r3, #7
 8013764:	d007      	beq.n	8013776 <rmw_validate_namespace_with_size+0x3a>
 8013766:	1e5a      	subs	r2, r3, #1
 8013768:	2a05      	cmp	r2, #5
 801376a:	d82b      	bhi.n	80137c4 <rmw_validate_namespace_with_size+0x88>
 801376c:	e8df f002 	tbb	[pc, r2]
 8013770:	24211e1b 	.word	0x24211e1b
 8013774:	1427      	.short	0x1427
 8013776:	2ff5      	cmp	r7, #245	; 0xf5
 8013778:	d906      	bls.n	8013788 <rmw_validate_namespace_with_size+0x4c>
 801377a:	2307      	movs	r3, #7
 801377c:	6023      	str	r3, [r4, #0]
 801377e:	b10e      	cbz	r6, 8013784 <rmw_validate_namespace_with_size+0x48>
 8013780:	23f4      	movs	r3, #244	; 0xf4
 8013782:	6033      	str	r3, [r6, #0]
 8013784:	b042      	add	sp, #264	; 0x108
 8013786:	bdd0      	pop	{r4, r6, r7, pc}
 8013788:	2000      	movs	r0, #0
 801378a:	6020      	str	r0, [r4, #0]
 801378c:	b042      	add	sp, #264	; 0x108
 801378e:	bdd0      	pop	{r4, r6, r7, pc}
 8013790:	200b      	movs	r0, #11
 8013792:	4770      	bx	lr
 8013794:	200b      	movs	r0, #11
 8013796:	e7f5      	b.n	8013784 <rmw_validate_namespace_with_size+0x48>
 8013798:	2306      	movs	r3, #6
 801379a:	6023      	str	r3, [r4, #0]
 801379c:	2e00      	cmp	r6, #0
 801379e:	d0f1      	beq.n	8013784 <rmw_validate_namespace_with_size+0x48>
 80137a0:	9b01      	ldr	r3, [sp, #4]
 80137a2:	6033      	str	r3, [r6, #0]
 80137a4:	e7ee      	b.n	8013784 <rmw_validate_namespace_with_size+0x48>
 80137a6:	2301      	movs	r3, #1
 80137a8:	6023      	str	r3, [r4, #0]
 80137aa:	e7f7      	b.n	801379c <rmw_validate_namespace_with_size+0x60>
 80137ac:	2302      	movs	r3, #2
 80137ae:	6023      	str	r3, [r4, #0]
 80137b0:	e7f4      	b.n	801379c <rmw_validate_namespace_with_size+0x60>
 80137b2:	2303      	movs	r3, #3
 80137b4:	6023      	str	r3, [r4, #0]
 80137b6:	e7f1      	b.n	801379c <rmw_validate_namespace_with_size+0x60>
 80137b8:	2304      	movs	r3, #4
 80137ba:	6023      	str	r3, [r4, #0]
 80137bc:	e7ee      	b.n	801379c <rmw_validate_namespace_with_size+0x60>
 80137be:	2305      	movs	r3, #5
 80137c0:	6023      	str	r3, [r4, #0]
 80137c2:	e7eb      	b.n	801379c <rmw_validate_namespace_with_size+0x60>
 80137c4:	4a03      	ldr	r2, [pc, #12]	; (80137d4 <rmw_validate_namespace_with_size+0x98>)
 80137c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80137ca:	a802      	add	r0, sp, #8
 80137cc:	f7ff fee0 	bl	8013590 <rcutils_snprintf>
 80137d0:	2001      	movs	r0, #1
 80137d2:	e7d7      	b.n	8013784 <rmw_validate_namespace_with_size+0x48>
 80137d4:	08018ad8 	.word	0x08018ad8

080137d8 <rmw_validate_namespace>:
 80137d8:	b168      	cbz	r0, 80137f6 <rmw_validate_namespace+0x1e>
 80137da:	b570      	push	{r4, r5, r6, lr}
 80137dc:	460d      	mov	r5, r1
 80137de:	4616      	mov	r6, r2
 80137e0:	4604      	mov	r4, r0
 80137e2:	f7ec fd07 	bl	80001f4 <strlen>
 80137e6:	4633      	mov	r3, r6
 80137e8:	4601      	mov	r1, r0
 80137ea:	462a      	mov	r2, r5
 80137ec:	4620      	mov	r0, r4
 80137ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80137f2:	f7ff bfa3 	b.w	801373c <rmw_validate_namespace_with_size>
 80137f6:	200b      	movs	r0, #11
 80137f8:	4770      	bx	lr
 80137fa:	bf00      	nop

080137fc <rmw_namespace_validation_result_string>:
 80137fc:	2807      	cmp	r0, #7
 80137fe:	bf9a      	itte	ls
 8013800:	4b02      	ldrls	r3, [pc, #8]	; (801380c <rmw_namespace_validation_result_string+0x10>)
 8013802:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8013806:	4802      	ldrhi	r0, [pc, #8]	; (8013810 <rmw_namespace_validation_result_string+0x14>)
 8013808:	4770      	bx	lr
 801380a:	bf00      	nop
 801380c:	08018cd0 	.word	0x08018cd0
 8013810:	08018b28 	.word	0x08018b28

08013814 <rmw_validate_node_name>:
 8013814:	2800      	cmp	r0, #0
 8013816:	d03b      	beq.n	8013890 <rmw_validate_node_name+0x7c>
 8013818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801381c:	460f      	mov	r7, r1
 801381e:	2900      	cmp	r1, #0
 8013820:	d038      	beq.n	8013894 <rmw_validate_node_name+0x80>
 8013822:	4615      	mov	r5, r2
 8013824:	4604      	mov	r4, r0
 8013826:	f7ec fce5 	bl	80001f4 <strlen>
 801382a:	b1e0      	cbz	r0, 8013866 <rmw_validate_node_name+0x52>
 801382c:	1e63      	subs	r3, r4, #1
 801382e:	eb03 0e00 	add.w	lr, r3, r0
 8013832:	f1c4 0c01 	rsb	ip, r4, #1
 8013836:	eb0c 0803 	add.w	r8, ip, r3
 801383a:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 801383e:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
 8013842:	f026 0220 	bic.w	r2, r6, #32
 8013846:	2909      	cmp	r1, #9
 8013848:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
 801384c:	d913      	bls.n	8013876 <rmw_validate_node_name+0x62>
 801384e:	2a19      	cmp	r2, #25
 8013850:	d911      	bls.n	8013876 <rmw_validate_node_name+0x62>
 8013852:	2e5f      	cmp	r6, #95	; 0x5f
 8013854:	d00f      	beq.n	8013876 <rmw_validate_node_name+0x62>
 8013856:	2302      	movs	r3, #2
 8013858:	603b      	str	r3, [r7, #0]
 801385a:	b10d      	cbz	r5, 8013860 <rmw_validate_node_name+0x4c>
 801385c:	f8c5 8000 	str.w	r8, [r5]
 8013860:	2000      	movs	r0, #0
 8013862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013866:	2301      	movs	r3, #1
 8013868:	603b      	str	r3, [r7, #0]
 801386a:	2d00      	cmp	r5, #0
 801386c:	d0f8      	beq.n	8013860 <rmw_validate_node_name+0x4c>
 801386e:	2000      	movs	r0, #0
 8013870:	6028      	str	r0, [r5, #0]
 8013872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013876:	4573      	cmp	r3, lr
 8013878:	d1dd      	bne.n	8013836 <rmw_validate_node_name+0x22>
 801387a:	7822      	ldrb	r2, [r4, #0]
 801387c:	4b0d      	ldr	r3, [pc, #52]	; (80138b4 <rmw_validate_node_name+0xa0>)
 801387e:	5cd3      	ldrb	r3, [r2, r3]
 8013880:	f013 0304 	ands.w	r3, r3, #4
 8013884:	d110      	bne.n	80138a8 <rmw_validate_node_name+0x94>
 8013886:	28ff      	cmp	r0, #255	; 0xff
 8013888:	d806      	bhi.n	8013898 <rmw_validate_node_name+0x84>
 801388a:	603b      	str	r3, [r7, #0]
 801388c:	4618      	mov	r0, r3
 801388e:	e7e8      	b.n	8013862 <rmw_validate_node_name+0x4e>
 8013890:	200b      	movs	r0, #11
 8013892:	4770      	bx	lr
 8013894:	200b      	movs	r0, #11
 8013896:	e7e4      	b.n	8013862 <rmw_validate_node_name+0x4e>
 8013898:	2204      	movs	r2, #4
 801389a:	603a      	str	r2, [r7, #0]
 801389c:	2d00      	cmp	r5, #0
 801389e:	d0df      	beq.n	8013860 <rmw_validate_node_name+0x4c>
 80138a0:	22fe      	movs	r2, #254	; 0xfe
 80138a2:	4618      	mov	r0, r3
 80138a4:	602a      	str	r2, [r5, #0]
 80138a6:	e7dc      	b.n	8013862 <rmw_validate_node_name+0x4e>
 80138a8:	2303      	movs	r3, #3
 80138aa:	603b      	str	r3, [r7, #0]
 80138ac:	2d00      	cmp	r5, #0
 80138ae:	d1de      	bne.n	801386e <rmw_validate_node_name+0x5a>
 80138b0:	e7d6      	b.n	8013860 <rmw_validate_node_name+0x4c>
 80138b2:	bf00      	nop
 80138b4:	08019094 	.word	0x08019094

080138b8 <rmw_node_name_validation_result_string>:
 80138b8:	2804      	cmp	r0, #4
 80138ba:	bf9a      	itte	ls
 80138bc:	4b02      	ldrls	r3, [pc, #8]	; (80138c8 <rmw_node_name_validation_result_string+0x10>)
 80138be:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80138c2:	4802      	ldrhi	r0, [pc, #8]	; (80138cc <rmw_node_name_validation_result_string+0x14>)
 80138c4:	4770      	bx	lr
 80138c6:	bf00      	nop
 80138c8:	08018ddc 	.word	0x08018ddc
 80138cc:	08018cf0 	.word	0x08018cf0

080138d0 <get_memory>:
 80138d0:	4603      	mov	r3, r0
 80138d2:	6840      	ldr	r0, [r0, #4]
 80138d4:	b158      	cbz	r0, 80138ee <get_memory+0x1e>
 80138d6:	6882      	ldr	r2, [r0, #8]
 80138d8:	605a      	str	r2, [r3, #4]
 80138da:	b10a      	cbz	r2, 80138e0 <get_memory+0x10>
 80138dc:	2100      	movs	r1, #0
 80138de:	6051      	str	r1, [r2, #4]
 80138e0:	681a      	ldr	r2, [r3, #0]
 80138e2:	6082      	str	r2, [r0, #8]
 80138e4:	b102      	cbz	r2, 80138e8 <get_memory+0x18>
 80138e6:	6050      	str	r0, [r2, #4]
 80138e8:	2200      	movs	r2, #0
 80138ea:	6042      	str	r2, [r0, #4]
 80138ec:	6018      	str	r0, [r3, #0]
 80138ee:	4770      	bx	lr

080138f0 <put_memory>:
 80138f0:	684b      	ldr	r3, [r1, #4]
 80138f2:	b10b      	cbz	r3, 80138f8 <put_memory+0x8>
 80138f4:	688a      	ldr	r2, [r1, #8]
 80138f6:	609a      	str	r2, [r3, #8]
 80138f8:	688a      	ldr	r2, [r1, #8]
 80138fa:	b102      	cbz	r2, 80138fe <put_memory+0xe>
 80138fc:	6053      	str	r3, [r2, #4]
 80138fe:	6803      	ldr	r3, [r0, #0]
 8013900:	428b      	cmp	r3, r1
 8013902:	6843      	ldr	r3, [r0, #4]
 8013904:	bf08      	it	eq
 8013906:	6002      	streq	r2, [r0, #0]
 8013908:	608b      	str	r3, [r1, #8]
 801390a:	b103      	cbz	r3, 801390e <put_memory+0x1e>
 801390c:	6059      	str	r1, [r3, #4]
 801390e:	2300      	movs	r3, #0
 8013910:	604b      	str	r3, [r1, #4]
 8013912:	6041      	str	r1, [r0, #4]
 8013914:	4770      	bx	lr
 8013916:	bf00      	nop

08013918 <rmw_get_implementation_identifier>:
 8013918:	4b01      	ldr	r3, [pc, #4]	; (8013920 <rmw_get_implementation_identifier+0x8>)
 801391a:	6818      	ldr	r0, [r3, #0]
 801391c:	4770      	bx	lr
 801391e:	bf00      	nop
 8013920:	08018e08 	.word	0x08018e08

08013924 <rmw_init_options_init>:
 8013924:	b084      	sub	sp, #16
 8013926:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801392a:	ad09      	add	r5, sp, #36	; 0x24
 801392c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8013930:	b130      	cbz	r0, 8013940 <rmw_init_options_init+0x1c>
 8013932:	4604      	mov	r4, r0
 8013934:	4628      	mov	r0, r5
 8013936:	f7fa fab1 	bl	800de9c <rcutils_allocator_is_valid>
 801393a:	b108      	cbz	r0, 8013940 <rmw_init_options_init+0x1c>
 801393c:	68a3      	ldr	r3, [r4, #8]
 801393e:	b123      	cbz	r3, 801394a <rmw_init_options_init+0x26>
 8013940:	200b      	movs	r0, #11
 8013942:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013946:	b004      	add	sp, #16
 8013948:	4770      	bx	lr
 801394a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801394c:	4f1c      	ldr	r7, [pc, #112]	; (80139c0 <rmw_init_options_init+0x9c>)
 801394e:	682e      	ldr	r6, [r5, #0]
 8013950:	683d      	ldr	r5, [r7, #0]
 8013952:	60a5      	str	r5, [r4, #8]
 8013954:	f04f 0800 	mov.w	r8, #0
 8013958:	f04f 0900 	mov.w	r9, #0
 801395c:	f104 0520 	add.w	r5, r4, #32
 8013960:	e9c4 8900 	strd	r8, r9, [r4]
 8013964:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013966:	4b17      	ldr	r3, [pc, #92]	; (80139c4 <rmw_init_options_init+0xa0>)
 8013968:	4817      	ldr	r0, [pc, #92]	; (80139c8 <rmw_init_options_init+0xa4>)
 801396a:	602e      	str	r6, [r5, #0]
 801396c:	4917      	ldr	r1, [pc, #92]	; (80139cc <rmw_init_options_init+0xa8>)
 801396e:	61e3      	str	r3, [r4, #28]
 8013970:	2203      	movs	r2, #3
 8013972:	f7fb f8b5 	bl	800eae0 <rmw_uxrce_init_init_options_impl_memory>
 8013976:	4814      	ldr	r0, [pc, #80]	; (80139c8 <rmw_init_options_init+0xa4>)
 8013978:	f7ff ffaa 	bl	80138d0 <get_memory>
 801397c:	b1e8      	cbz	r0, 80139ba <rmw_init_options_init+0x96>
 801397e:	4a14      	ldr	r2, [pc, #80]	; (80139d0 <rmw_init_options_init+0xac>)
 8013980:	68c3      	ldr	r3, [r0, #12]
 8013982:	6851      	ldr	r1, [r2, #4]
 8013984:	7810      	ldrb	r0, [r2, #0]
 8013986:	6363      	str	r3, [r4, #52]	; 0x34
 8013988:	7418      	strb	r0, [r3, #16]
 801398a:	6159      	str	r1, [r3, #20]
 801398c:	e9d2 5002 	ldrd	r5, r0, [r2, #8]
 8013990:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 8013994:	e9c3 5006 	strd	r5, r0, [r3, #24]
 8013998:	e9c3 1208 	strd	r1, r2, [r3, #32]
 801399c:	f7fd f9da 	bl	8010d54 <uxr_nanos>
 80139a0:	f003 fa04 	bl	8016dac <srand>
 80139a4:	f003 fa30 	bl	8016e08 <rand>
 80139a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80139aa:	6298      	str	r0, [r3, #40]	; 0x28
 80139ac:	2800      	cmp	r0, #0
 80139ae:	d0f9      	beq.n	80139a4 <rmw_init_options_init+0x80>
 80139b0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80139b4:	2000      	movs	r0, #0
 80139b6:	b004      	add	sp, #16
 80139b8:	4770      	bx	lr
 80139ba:	2001      	movs	r0, #1
 80139bc:	e7c1      	b.n	8013942 <rmw_init_options_init+0x1e>
 80139be:	bf00      	nop
 80139c0:	08018e08 	.word	0x08018e08
 80139c4:	080189b0 	.word	0x080189b0
 80139c8:	2000d194 	.word	0x2000d194
 80139cc:	2000cde8 	.word	0x2000cde8
 80139d0:	20009e78 	.word	0x20009e78

080139d4 <rmw_init_options_copy>:
 80139d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139d6:	b158      	cbz	r0, 80139f0 <rmw_init_options_copy+0x1c>
 80139d8:	460e      	mov	r6, r1
 80139da:	b149      	cbz	r1, 80139f0 <rmw_init_options_copy+0x1c>
 80139dc:	4604      	mov	r4, r0
 80139de:	6880      	ldr	r0, [r0, #8]
 80139e0:	b120      	cbz	r0, 80139ec <rmw_init_options_copy+0x18>
 80139e2:	4b1b      	ldr	r3, [pc, #108]	; (8013a50 <rmw_init_options_copy+0x7c>)
 80139e4:	6819      	ldr	r1, [r3, #0]
 80139e6:	f7ec fbfb 	bl	80001e0 <strcmp>
 80139ea:	bb60      	cbnz	r0, 8013a46 <rmw_init_options_copy+0x72>
 80139ec:	68b3      	ldr	r3, [r6, #8]
 80139ee:	b113      	cbz	r3, 80139f6 <rmw_init_options_copy+0x22>
 80139f0:	230b      	movs	r3, #11
 80139f2:	4618      	mov	r0, r3
 80139f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80139f6:	4623      	mov	r3, r4
 80139f8:	4632      	mov	r2, r6
 80139fa:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 80139fe:	681d      	ldr	r5, [r3, #0]
 8013a00:	6858      	ldr	r0, [r3, #4]
 8013a02:	6899      	ldr	r1, [r3, #8]
 8013a04:	68df      	ldr	r7, [r3, #12]
 8013a06:	60d7      	str	r7, [r2, #12]
 8013a08:	3310      	adds	r3, #16
 8013a0a:	4563      	cmp	r3, ip
 8013a0c:	6015      	str	r5, [r2, #0]
 8013a0e:	6050      	str	r0, [r2, #4]
 8013a10:	6091      	str	r1, [r2, #8]
 8013a12:	f102 0210 	add.w	r2, r2, #16
 8013a16:	d1f2      	bne.n	80139fe <rmw_init_options_copy+0x2a>
 8013a18:	6819      	ldr	r1, [r3, #0]
 8013a1a:	685b      	ldr	r3, [r3, #4]
 8013a1c:	480d      	ldr	r0, [pc, #52]	; (8013a54 <rmw_init_options_copy+0x80>)
 8013a1e:	6053      	str	r3, [r2, #4]
 8013a20:	6011      	str	r1, [r2, #0]
 8013a22:	f7ff ff55 	bl	80138d0 <get_memory>
 8013a26:	b188      	cbz	r0, 8013a4c <rmw_init_options_copy+0x78>
 8013a28:	68c5      	ldr	r5, [r0, #12]
 8013a2a:	6375      	str	r5, [r6, #52]	; 0x34
 8013a2c:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8013a2e:	3610      	adds	r6, #16
 8013a30:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013a32:	f105 0410 	add.w	r4, r5, #16
 8013a36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013a38:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8013a3c:	2300      	movs	r3, #0
 8013a3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013a42:	4618      	mov	r0, r3
 8013a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a46:	230c      	movs	r3, #12
 8013a48:	4618      	mov	r0, r3
 8013a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a4c:	2301      	movs	r3, #1
 8013a4e:	e7d0      	b.n	80139f2 <rmw_init_options_copy+0x1e>
 8013a50:	08018e08 	.word	0x08018e08
 8013a54:	2000d194 	.word	0x2000d194

08013a58 <rmw_init_options_fini>:
 8013a58:	2800      	cmp	r0, #0
 8013a5a:	d036      	beq.n	8013aca <rmw_init_options_fini+0x72>
 8013a5c:	b530      	push	{r4, r5, lr}
 8013a5e:	4604      	mov	r4, r0
 8013a60:	b08f      	sub	sp, #60	; 0x3c
 8013a62:	3020      	adds	r0, #32
 8013a64:	f7fa fa1a 	bl	800de9c <rcutils_allocator_is_valid>
 8013a68:	b328      	cbz	r0, 8013ab6 <rmw_init_options_fini+0x5e>
 8013a6a:	68a0      	ldr	r0, [r4, #8]
 8013a6c:	b120      	cbz	r0, 8013a78 <rmw_init_options_fini+0x20>
 8013a6e:	4b18      	ldr	r3, [pc, #96]	; (8013ad0 <rmw_init_options_fini+0x78>)
 8013a70:	6819      	ldr	r1, [r3, #0]
 8013a72:	f7ec fbb5 	bl	80001e0 <strcmp>
 8013a76:	bb30      	cbnz	r0, 8013ac6 <rmw_init_options_fini+0x6e>
 8013a78:	4b16      	ldr	r3, [pc, #88]	; (8013ad4 <rmw_init_options_fini+0x7c>)
 8013a7a:	6819      	ldr	r1, [r3, #0]
 8013a7c:	b1f9      	cbz	r1, 8013abe <rmw_init_options_fini+0x66>
 8013a7e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8013a80:	e001      	b.n	8013a86 <rmw_init_options_fini+0x2e>
 8013a82:	6889      	ldr	r1, [r1, #8]
 8013a84:	b1d9      	cbz	r1, 8013abe <rmw_init_options_fini+0x66>
 8013a86:	68cb      	ldr	r3, [r1, #12]
 8013a88:	429a      	cmp	r2, r3
 8013a8a:	d1fa      	bne.n	8013a82 <rmw_init_options_fini+0x2a>
 8013a8c:	4811      	ldr	r0, [pc, #68]	; (8013ad4 <rmw_init_options_fini+0x7c>)
 8013a8e:	f7ff ff2f 	bl	80138f0 <put_memory>
 8013a92:	466d      	mov	r5, sp
 8013a94:	4668      	mov	r0, sp
 8013a96:	f7ff fe3d 	bl	8013714 <rmw_get_zero_initialized_init_options>
 8013a9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013a9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013a9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013aa0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013aa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013aa4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013aa6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013aaa:	e884 0003 	stmia.w	r4, {r0, r1}
 8013aae:	2300      	movs	r3, #0
 8013ab0:	4618      	mov	r0, r3
 8013ab2:	b00f      	add	sp, #60	; 0x3c
 8013ab4:	bd30      	pop	{r4, r5, pc}
 8013ab6:	230b      	movs	r3, #11
 8013ab8:	4618      	mov	r0, r3
 8013aba:	b00f      	add	sp, #60	; 0x3c
 8013abc:	bd30      	pop	{r4, r5, pc}
 8013abe:	2301      	movs	r3, #1
 8013ac0:	4618      	mov	r0, r3
 8013ac2:	b00f      	add	sp, #60	; 0x3c
 8013ac4:	bd30      	pop	{r4, r5, pc}
 8013ac6:	230c      	movs	r3, #12
 8013ac8:	e7f2      	b.n	8013ab0 <rmw_init_options_fini+0x58>
 8013aca:	230b      	movs	r3, #11
 8013acc:	4618      	mov	r0, r3
 8013ace:	4770      	bx	lr
 8013ad0:	08018e08 	.word	0x08018e08
 8013ad4:	2000d194 	.word	0x2000d194

08013ad8 <rmw_init>:
 8013ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013adc:	b082      	sub	sp, #8
 8013ade:	2800      	cmp	r0, #0
 8013ae0:	f000 80d6 	beq.w	8013c90 <rmw_init+0x1b8>
 8013ae4:	460e      	mov	r6, r1
 8013ae6:	2900      	cmp	r1, #0
 8013ae8:	f000 80d2 	beq.w	8013c90 <rmw_init+0x1b8>
 8013aec:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013aee:	4605      	mov	r5, r0
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	f000 80cd 	beq.w	8013c90 <rmw_init+0x1b8>
 8013af6:	4b79      	ldr	r3, [pc, #484]	; (8013cdc <rmw_init+0x204>)
 8013af8:	6880      	ldr	r0, [r0, #8]
 8013afa:	f8d3 9000 	ldr.w	r9, [r3]
 8013afe:	b128      	cbz	r0, 8013b0c <rmw_init+0x34>
 8013b00:	4649      	mov	r1, r9
 8013b02:	f7ec fb6d 	bl	80001e0 <strcmp>
 8013b06:	2800      	cmp	r0, #0
 8013b08:	f040 80cc 	bne.w	8013ca4 <rmw_init+0x1cc>
 8013b0c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013b10:	68eb      	ldr	r3, [r5, #12]
 8013b12:	61f3      	str	r3, [r6, #28]
 8013b14:	e9c6 0100 	strd	r0, r1, [r6]
 8013b18:	2201      	movs	r2, #1
 8013b1a:	4971      	ldr	r1, [pc, #452]	; (8013ce0 <rmw_init+0x208>)
 8013b1c:	4871      	ldr	r0, [pc, #452]	; (8013ce4 <rmw_init+0x20c>)
 8013b1e:	f8c6 9008 	str.w	r9, [r6, #8]
 8013b22:	f7fa ff85 	bl	800ea30 <rmw_uxrce_init_session_memory>
 8013b26:	4870      	ldr	r0, [pc, #448]	; (8013ce8 <rmw_init+0x210>)
 8013b28:	4970      	ldr	r1, [pc, #448]	; (8013cec <rmw_init+0x214>)
 8013b2a:	2204      	movs	r2, #4
 8013b2c:	f7fa ffba 	bl	800eaa4 <rmw_uxrce_init_static_input_buffer_memory>
 8013b30:	486c      	ldr	r0, [pc, #432]	; (8013ce4 <rmw_init+0x20c>)
 8013b32:	f7ff fecd 	bl	80138d0 <get_memory>
 8013b36:	2800      	cmp	r0, #0
 8013b38:	f000 80af 	beq.w	8013c9a <rmw_init+0x1c2>
 8013b3c:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 8013b3e:	68c4      	ldr	r4, [r0, #12]
 8013b40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013b42:	7c39      	ldrb	r1, [r7, #16]
 8013b44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8013b48:	9001      	str	r0, [sp, #4]
 8013b4a:	6a38      	ldr	r0, [r7, #32]
 8013b4c:	9000      	str	r0, [sp, #0]
 8013b4e:	f104 0a10 	add.w	sl, r4, #16
 8013b52:	4650      	mov	r0, sl
 8013b54:	f001 fbda 	bl	801530c <uxr_set_custom_transport_callbacks>
 8013b58:	f241 5294 	movw	r2, #5524	; 0x1594
 8013b5c:	f241 5398 	movw	r3, #5528	; 0x1598
 8013b60:	f04f 0800 	mov.w	r8, #0
 8013b64:	f241 509c 	movw	r0, #5532	; 0x159c
 8013b68:	f504 51ad 	add.w	r1, r4, #5536	; 0x15a0
 8013b6c:	f844 8002 	str.w	r8, [r4, r2]
 8013b70:	f844 8003 	str.w	r8, [r4, r3]
 8013b74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013b78:	f504 735e 	add.w	r3, r4, #888	; 0x378
 8013b7c:	f844 8000 	str.w	r8, [r4, r0]
 8013b80:	e9c4 33e1 	strd	r3, r3, [r4, #900]	; 0x384
 8013b84:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 8013b88:	4859      	ldr	r0, [pc, #356]	; (8013cf0 <rmw_init+0x218>)
 8013b8a:	f8c1 8000 	str.w	r8, [r1]
 8013b8e:	2201      	movs	r2, #1
 8013b90:	e9c4 98da 	strd	r9, r8, [r4, #872]	; 0x368
 8013b94:	4957      	ldr	r1, [pc, #348]	; (8013cf4 <rmw_init+0x21c>)
 8013b96:	64b4      	str	r4, [r6, #72]	; 0x48
 8013b98:	f7fa ff30 	bl	800e9fc <rmw_uxrce_init_node_memory>
 8013b9c:	4956      	ldr	r1, [pc, #344]	; (8013cf8 <rmw_init+0x220>)
 8013b9e:	4857      	ldr	r0, [pc, #348]	; (8013cfc <rmw_init+0x224>)
 8013ba0:	2205      	movs	r2, #5
 8013ba2:	f7fa ff11 	bl	800e9c8 <rmw_uxrce_init_subscription_memory>
 8013ba6:	4956      	ldr	r1, [pc, #344]	; (8013d00 <rmw_init+0x228>)
 8013ba8:	4856      	ldr	r0, [pc, #344]	; (8013d04 <rmw_init+0x22c>)
 8013baa:	220a      	movs	r2, #10
 8013bac:	f7fa fef2 	bl	800e994 <rmw_uxrce_init_publisher_memory>
 8013bb0:	4955      	ldr	r1, [pc, #340]	; (8013d08 <rmw_init+0x230>)
 8013bb2:	4856      	ldr	r0, [pc, #344]	; (8013d0c <rmw_init+0x234>)
 8013bb4:	2201      	movs	r2, #1
 8013bb6:	f7fa feb9 	bl	800e92c <rmw_uxrce_init_service_memory>
 8013bba:	4955      	ldr	r1, [pc, #340]	; (8013d10 <rmw_init+0x238>)
 8013bbc:	4855      	ldr	r0, [pc, #340]	; (8013d14 <rmw_init+0x23c>)
 8013bbe:	2201      	movs	r2, #1
 8013bc0:	f7fa fece 	bl	800e960 <rmw_uxrce_init_client_memory>
 8013bc4:	4954      	ldr	r1, [pc, #336]	; (8013d18 <rmw_init+0x240>)
 8013bc6:	4855      	ldr	r0, [pc, #340]	; (8013d1c <rmw_init+0x244>)
 8013bc8:	220f      	movs	r2, #15
 8013bca:	f7fa ff4f 	bl	800ea6c <rmw_uxrce_init_topic_memory>
 8013bce:	4954      	ldr	r1, [pc, #336]	; (8013d20 <rmw_init+0x248>)
 8013bd0:	4854      	ldr	r0, [pc, #336]	; (8013d24 <rmw_init+0x24c>)
 8013bd2:	2203      	movs	r2, #3
 8013bd4:	f7fa ff84 	bl	800eae0 <rmw_uxrce_init_init_options_impl_memory>
 8013bd8:	4953      	ldr	r1, [pc, #332]	; (8013d28 <rmw_init+0x250>)
 8013bda:	4854      	ldr	r0, [pc, #336]	; (8013d2c <rmw_init+0x254>)
 8013bdc:	2204      	movs	r2, #4
 8013bde:	f7fa ff99 	bl	800eb14 <rmw_uxrce_init_wait_set_memory>
 8013be2:	4953      	ldr	r1, [pc, #332]	; (8013d30 <rmw_init+0x258>)
 8013be4:	4853      	ldr	r0, [pc, #332]	; (8013d34 <rmw_init+0x25c>)
 8013be6:	2204      	movs	r2, #4
 8013be8:	f7fa ffb0 	bl	800eb4c <rmw_uxrce_init_guard_condition_memory>
 8013bec:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8013bee:	6cb0      	ldr	r0, [r6, #72]	; 0x48
 8013bf0:	4642      	mov	r2, r8
 8013bf2:	f000 fab5 	bl	8014160 <rmw_uxrce_transport_init>
 8013bf6:	4607      	mov	r7, r0
 8013bf8:	2800      	cmp	r0, #0
 8013bfa:	d158      	bne.n	8013cae <rmw_init+0x1d6>
 8013bfc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8013bfe:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 8013c02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013c04:	4628      	mov	r0, r5
 8013c06:	f504 7122 	add.w	r1, r4, #648	; 0x288
 8013c0a:	f7fb ff29 	bl	800fa60 <uxr_init_session>
 8013c0e:	494a      	ldr	r1, [pc, #296]	; (8013d38 <rmw_init+0x260>)
 8013c10:	4622      	mov	r2, r4
 8013c12:	4628      	mov	r0, r5
 8013c14:	f7fb ff46 	bl	800faa4 <uxr_set_topic_callback>
 8013c18:	4948      	ldr	r1, [pc, #288]	; (8013d3c <rmw_init+0x264>)
 8013c1a:	463a      	mov	r2, r7
 8013c1c:	4628      	mov	r0, r5
 8013c1e:	f7fb ff3d 	bl	800fa9c <uxr_set_status_callback>
 8013c22:	4947      	ldr	r1, [pc, #284]	; (8013d40 <rmw_init+0x268>)
 8013c24:	463a      	mov	r2, r7
 8013c26:	4628      	mov	r0, r5
 8013c28:	f7fb ff40 	bl	800faac <uxr_set_request_callback>
 8013c2c:	4945      	ldr	r1, [pc, #276]	; (8013d44 <rmw_init+0x26c>)
 8013c2e:	463a      	mov	r2, r7
 8013c30:	4628      	mov	r0, r5
 8013c32:	f7fb ff3f 	bl	800fab4 <uxr_set_reply_callback>
 8013c36:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8013c3a:	2304      	movs	r3, #4
 8013c3c:	0092      	lsls	r2, r2, #2
 8013c3e:	f504 7165 	add.w	r1, r4, #916	; 0x394
 8013c42:	4628      	mov	r0, r5
 8013c44:	f7fb ff76 	bl	800fb34 <uxr_create_input_reliable_stream>
 8013c48:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8013c4c:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 8013c50:	0092      	lsls	r2, r2, #2
 8013c52:	2304      	movs	r3, #4
 8013c54:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 8013c58:	4628      	mov	r0, r5
 8013c5a:	f7fb ff41 	bl	800fae0 <uxr_create_output_reliable_stream>
 8013c5e:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 8013c62:	4628      	mov	r0, r5
 8013c64:	f7fb ff60 	bl	800fb28 <uxr_create_input_best_effort_stream>
 8013c68:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 8013c6c:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 8013c70:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8013c74:	4628      	mov	r0, r5
 8013c76:	3114      	adds	r1, #20
 8013c78:	f7fb ff20 	bl	800fabc <uxr_create_output_best_effort_stream>
 8013c7c:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 8013c80:	4628      	mov	r0, r5
 8013c82:	f7fc fb77 	bl	8010374 <uxr_create_session>
 8013c86:	b1f8      	cbz	r0, 8013cc8 <rmw_init+0x1f0>
 8013c88:	4638      	mov	r0, r7
 8013c8a:	b002      	add	sp, #8
 8013c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c90:	270b      	movs	r7, #11
 8013c92:	4638      	mov	r0, r7
 8013c94:	b002      	add	sp, #8
 8013c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c9a:	2701      	movs	r7, #1
 8013c9c:	4638      	mov	r0, r7
 8013c9e:	b002      	add	sp, #8
 8013ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ca4:	270c      	movs	r7, #12
 8013ca6:	4638      	mov	r0, r7
 8013ca8:	b002      	add	sp, #8
 8013caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013cae:	4650      	mov	r0, sl
 8013cb0:	f001 fb6c 	bl	801538c <uxr_close_custom_transport>
 8013cb4:	480b      	ldr	r0, [pc, #44]	; (8013ce4 <rmw_init+0x20c>)
 8013cb6:	4621      	mov	r1, r4
 8013cb8:	f7ff fe1a 	bl	80138f0 <put_memory>
 8013cbc:	4638      	mov	r0, r7
 8013cbe:	f8c6 8048 	str.w	r8, [r6, #72]	; 0x48
 8013cc2:	b002      	add	sp, #8
 8013cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013cc8:	4650      	mov	r0, sl
 8013cca:	f001 fb5f 	bl	801538c <uxr_close_custom_transport>
 8013cce:	4805      	ldr	r0, [pc, #20]	; (8013ce4 <rmw_init+0x20c>)
 8013cd0:	4621      	mov	r1, r4
 8013cd2:	f7ff fe0d 	bl	80138f0 <put_memory>
 8013cd6:	64b7      	str	r7, [r6, #72]	; 0x48
 8013cd8:	2701      	movs	r7, #1
 8013cda:	e7d5      	b.n	8013c88 <rmw_init+0x1b0>
 8013cdc:	08018e08 	.word	0x08018e08
 8013ce0:	2000d270 	.word	0x2000d270
 8013ce4:	2000d040 	.word	0x2000d040
 8013ce8:	20009e98 	.word	0x20009e98
 8013cec:	2000ac78 	.word	0x2000ac78
 8013cf0:	2000ce6c 	.word	0x2000ce6c
 8013cf4:	2000d050 	.word	0x2000d050
 8013cf8:	2000a7a0 	.word	0x2000a7a0
 8013cfc:	2000d104 	.word	0x2000d104
 8013d00:	20009eb8 	.word	0x20009eb8
 8013d04:	20009ea8 	.word	0x20009ea8
 8013d08:	2000d1a8 	.word	0x2000d1a8
 8013d0c:	2000d0f4 	.word	0x2000d0f4
 8013d10:	2000abb0 	.word	0x2000abb0
 8013d14:	2000a728 	.word	0x2000a728
 8013d18:	2000ce7c 	.word	0x2000ce7c
 8013d1c:	2000d030 	.word	0x2000d030
 8013d20:	2000cde8 	.word	0x2000cde8
 8013d24:	2000d194 	.word	0x2000d194
 8013d28:	2000cd78 	.word	0x2000cd78
 8013d2c:	2000e818 	.word	0x2000e818
 8013d30:	2000d114 	.word	0x2000d114
 8013d34:	2000d020 	.word	0x2000d020
 8013d38:	080168d1 	.word	0x080168d1
 8013d3c:	080168c9 	.word	0x080168c9
 8013d40:	08016965 	.word	0x08016965
 8013d44:	080169fd 	.word	0x080169fd

08013d48 <rmw_context_fini>:
 8013d48:	4b17      	ldr	r3, [pc, #92]	; (8013da8 <rmw_context_fini+0x60>)
 8013d4a:	b570      	push	{r4, r5, r6, lr}
 8013d4c:	681c      	ldr	r4, [r3, #0]
 8013d4e:	4605      	mov	r5, r0
 8013d50:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8013d52:	b33c      	cbz	r4, 8013da4 <rmw_context_fini+0x5c>
 8013d54:	2600      	movs	r6, #0
 8013d56:	e9d4 4302 	ldrd	r4, r3, [r4, #8]
 8013d5a:	691a      	ldr	r2, [r3, #16]
 8013d5c:	4282      	cmp	r2, r0
 8013d5e:	d018      	beq.n	8013d92 <rmw_context_fini+0x4a>
 8013d60:	2c00      	cmp	r4, #0
 8013d62:	d1f8      	bne.n	8013d56 <rmw_context_fini+0xe>
 8013d64:	b188      	cbz	r0, 8013d8a <rmw_context_fini+0x42>
 8013d66:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8013d6a:	789b      	ldrb	r3, [r3, #2]
 8013d6c:	2b01      	cmp	r3, #1
 8013d6e:	bf14      	ite	ne
 8013d70:	210a      	movne	r1, #10
 8013d72:	2100      	moveq	r1, #0
 8013d74:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013d78:	f7fc fcbe 	bl	80106f8 <uxr_delete_session_retries>
 8013d7c:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8013d7e:	f7fa feff 	bl	800eb80 <rmw_uxrce_fini_session_memory>
 8013d82:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8013d84:	3010      	adds	r0, #16
 8013d86:	f001 fb01 	bl	801538c <uxr_close_custom_transport>
 8013d8a:	2300      	movs	r3, #0
 8013d8c:	4630      	mov	r0, r6
 8013d8e:	64ab      	str	r3, [r5, #72]	; 0x48
 8013d90:	bd70      	pop	{r4, r5, r6, pc}
 8013d92:	f103 0018 	add.w	r0, r3, #24
 8013d96:	f000 f91f 	bl	8013fd8 <rmw_destroy_node>
 8013d9a:	4606      	mov	r6, r0
 8013d9c:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8013d9e:	2c00      	cmp	r4, #0
 8013da0:	d1d9      	bne.n	8013d56 <rmw_context_fini+0xe>
 8013da2:	e7df      	b.n	8013d64 <rmw_context_fini+0x1c>
 8013da4:	4626      	mov	r6, r4
 8013da6:	e7dd      	b.n	8013d64 <rmw_context_fini+0x1c>
 8013da8:	2000ce6c 	.word	0x2000ce6c

08013dac <create_topic>:
 8013dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013db0:	4605      	mov	r5, r0
 8013db2:	b084      	sub	sp, #16
 8013db4:	482b      	ldr	r0, [pc, #172]	; (8013e64 <create_topic+0xb8>)
 8013db6:	460f      	mov	r7, r1
 8013db8:	4616      	mov	r6, r2
 8013dba:	f7ff fd89 	bl	80138d0 <get_memory>
 8013dbe:	4604      	mov	r4, r0
 8013dc0:	2800      	cmp	r0, #0
 8013dc2:	d036      	beq.n	8013e32 <create_topic+0x86>
 8013dc4:	692a      	ldr	r2, [r5, #16]
 8013dc6:	68c4      	ldr	r4, [r0, #12]
 8013dc8:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8013e6c <create_topic+0xc0>
 8013dcc:	61a5      	str	r5, [r4, #24]
 8013dce:	f241 5396 	movw	r3, #5526	; 0x1596
 8013dd2:	6166      	str	r6, [r4, #20]
 8013dd4:	5ad0      	ldrh	r0, [r2, r3]
 8013dd6:	1c41      	adds	r1, r0, #1
 8013dd8:	52d1      	strh	r1, [r2, r3]
 8013dda:	2102      	movs	r1, #2
 8013ddc:	f7fb fc5e 	bl	800f69c <uxr_object_id>
 8013de0:	4641      	mov	r1, r8
 8013de2:	6120      	str	r0, [r4, #16]
 8013de4:	223c      	movs	r2, #60	; 0x3c
 8013de6:	4638      	mov	r0, r7
 8013de8:	f7fb f8a0 	bl	800ef2c <generate_topic_name>
 8013dec:	4607      	mov	r7, r0
 8013dee:	b320      	cbz	r0, 8013e3a <create_topic+0x8e>
 8013df0:	4f1d      	ldr	r7, [pc, #116]	; (8013e68 <create_topic+0xbc>)
 8013df2:	4630      	mov	r0, r6
 8013df4:	4639      	mov	r1, r7
 8013df6:	2264      	movs	r2, #100	; 0x64
 8013df8:	f7fb f868 	bl	800eecc <generate_type_name>
 8013dfc:	4606      	mov	r6, r0
 8013dfe:	b320      	cbz	r0, 8013e4a <create_topic+0x9e>
 8013e00:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
 8013e04:	2106      	movs	r1, #6
 8013e06:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8013e0a:	9701      	str	r7, [sp, #4]
 8013e0c:	f8cd 8000 	str.w	r8, [sp]
 8013e10:	9102      	str	r1, [sp, #8]
 8013e12:	6811      	ldr	r1, [r2, #0]
 8013e14:	6922      	ldr	r2, [r4, #16]
 8013e16:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013e1a:	f7fb fabb 	bl	800f394 <uxr_buffer_create_topic_bin>
 8013e1e:	4602      	mov	r2, r0
 8013e20:	6928      	ldr	r0, [r5, #16]
 8013e22:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8013e26:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8013e2a:	f7fb f819 	bl	800ee60 <run_xrce_session>
 8013e2e:	4605      	mov	r5, r0
 8013e30:	b198      	cbz	r0, 8013e5a <create_topic+0xae>
 8013e32:	4620      	mov	r0, r4
 8013e34:	b004      	add	sp, #16
 8013e36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e3a:	4620      	mov	r0, r4
 8013e3c:	f7fa ff16 	bl	800ec6c <rmw_uxrce_fini_topic_memory>
 8013e40:	463c      	mov	r4, r7
 8013e42:	4620      	mov	r0, r4
 8013e44:	b004      	add	sp, #16
 8013e46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e4a:	4620      	mov	r0, r4
 8013e4c:	f7fa ff0e 	bl	800ec6c <rmw_uxrce_fini_topic_memory>
 8013e50:	4634      	mov	r4, r6
 8013e52:	4620      	mov	r0, r4
 8013e54:	b004      	add	sp, #16
 8013e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e5a:	4620      	mov	r0, r4
 8013e5c:	f7fa ff06 	bl	800ec6c <rmw_uxrce_fini_topic_memory>
 8013e60:	462c      	mov	r4, r5
 8013e62:	e7e6      	b.n	8013e32 <create_topic+0x86>
 8013e64:	2000d030 	.word	0x2000d030
 8013e68:	20009c58 	.word	0x20009c58
 8013e6c:	20009c1c 	.word	0x20009c1c

08013e70 <destroy_topic>:
 8013e70:	b538      	push	{r3, r4, r5, lr}
 8013e72:	6985      	ldr	r5, [r0, #24]
 8013e74:	b1d5      	cbz	r5, 8013eac <destroy_topic+0x3c>
 8013e76:	4604      	mov	r4, r0
 8013e78:	6928      	ldr	r0, [r5, #16]
 8013e7a:	6922      	ldr	r2, [r4, #16]
 8013e7c:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8013e80:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013e84:	6819      	ldr	r1, [r3, #0]
 8013e86:	f7fb fa07 	bl	800f298 <uxr_buffer_delete_entity>
 8013e8a:	4602      	mov	r2, r0
 8013e8c:	6928      	ldr	r0, [r5, #16]
 8013e8e:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8013e92:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8013e96:	f7fa ffe3 	bl	800ee60 <run_xrce_session>
 8013e9a:	2800      	cmp	r0, #0
 8013e9c:	4620      	mov	r0, r4
 8013e9e:	bf14      	ite	ne
 8013ea0:	2400      	movne	r4, #0
 8013ea2:	2402      	moveq	r4, #2
 8013ea4:	f7fa fee2 	bl	800ec6c <rmw_uxrce_fini_topic_memory>
 8013ea8:	4620      	mov	r0, r4
 8013eaa:	bd38      	pop	{r3, r4, r5, pc}
 8013eac:	2401      	movs	r4, #1
 8013eae:	4620      	mov	r0, r4
 8013eb0:	bd38      	pop	{r3, r4, r5, pc}
 8013eb2:	bf00      	nop

08013eb4 <create_node>:
 8013eb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013eb8:	b083      	sub	sp, #12
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d05f      	beq.n	8013f7e <create_node+0xca>
 8013ebe:	4606      	mov	r6, r0
 8013ec0:	4835      	ldr	r0, [pc, #212]	; (8013f98 <create_node+0xe4>)
 8013ec2:	460f      	mov	r7, r1
 8013ec4:	4690      	mov	r8, r2
 8013ec6:	461d      	mov	r5, r3
 8013ec8:	f7ff fd02 	bl	80138d0 <get_memory>
 8013ecc:	2800      	cmp	r0, #0
 8013ece:	d056      	beq.n	8013f7e <create_node+0xca>
 8013ed0:	68c4      	ldr	r4, [r0, #12]
 8013ed2:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8013ed4:	6123      	str	r3, [r4, #16]
 8013ed6:	f7ff fd1f 	bl	8013918 <rmw_get_implementation_identifier>
 8013eda:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 8013ede:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8013ee2:	f8c4 9020 	str.w	r9, [r4, #32]
 8013ee6:	4630      	mov	r0, r6
 8013ee8:	f7ec f984 	bl	80001f4 <strlen>
 8013eec:	1c42      	adds	r2, r0, #1
 8013eee:	2a3c      	cmp	r2, #60	; 0x3c
 8013ef0:	f104 0518 	add.w	r5, r4, #24
 8013ef4:	d840      	bhi.n	8013f78 <create_node+0xc4>
 8013ef6:	4648      	mov	r0, r9
 8013ef8:	4631      	mov	r1, r6
 8013efa:	f104 0968 	add.w	r9, r4, #104	; 0x68
 8013efe:	f003 fc7c 	bl	80177fa <memcpy>
 8013f02:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 8013f06:	4638      	mov	r0, r7
 8013f08:	f7ec f974 	bl	80001f4 <strlen>
 8013f0c:	1c42      	adds	r2, r0, #1
 8013f0e:	2a3c      	cmp	r2, #60	; 0x3c
 8013f10:	d832      	bhi.n	8013f78 <create_node+0xc4>
 8013f12:	4639      	mov	r1, r7
 8013f14:	4648      	mov	r0, r9
 8013f16:	f003 fc70 	bl	80177fa <memcpy>
 8013f1a:	f241 5394 	movw	r3, #5524	; 0x1594
 8013f1e:	6922      	ldr	r2, [r4, #16]
 8013f20:	5ad0      	ldrh	r0, [r2, r3]
 8013f22:	2101      	movs	r1, #1
 8013f24:	eb00 0c01 	add.w	ip, r0, r1
 8013f28:	f822 c003 	strh.w	ip, [r2, r3]
 8013f2c:	f7fb fbb6 	bl	800f69c <uxr_object_id>
 8013f30:	6160      	str	r0, [r4, #20]
 8013f32:	783b      	ldrb	r3, [r7, #0]
 8013f34:	2b2f      	cmp	r3, #47	; 0x2f
 8013f36:	d127      	bne.n	8013f88 <create_node+0xd4>
 8013f38:	787b      	ldrb	r3, [r7, #1]
 8013f3a:	bb2b      	cbnz	r3, 8013f88 <create_node+0xd4>
 8013f3c:	4a17      	ldr	r2, [pc, #92]	; (8013f9c <create_node+0xe8>)
 8013f3e:	4818      	ldr	r0, [pc, #96]	; (8013fa0 <create_node+0xec>)
 8013f40:	4633      	mov	r3, r6
 8013f42:	213c      	movs	r1, #60	; 0x3c
 8013f44:	f003 f9d4 	bl	80172f0 <sniprintf>
 8013f48:	6920      	ldr	r0, [r4, #16]
 8013f4a:	4b15      	ldr	r3, [pc, #84]	; (8013fa0 <create_node+0xec>)
 8013f4c:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8013f50:	9300      	str	r3, [sp, #0]
 8013f52:	2306      	movs	r3, #6
 8013f54:	9301      	str	r3, [sp, #4]
 8013f56:	6811      	ldr	r1, [r2, #0]
 8013f58:	6962      	ldr	r2, [r4, #20]
 8013f5a:	fa1f f388 	uxth.w	r3, r8
 8013f5e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013f62:	f7fb f9e5 	bl	800f330 <uxr_buffer_create_participant_bin>
 8013f66:	4602      	mov	r2, r0
 8013f68:	6920      	ldr	r0, [r4, #16]
 8013f6a:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8013f6e:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8013f72:	f7fa ff75 	bl	800ee60 <run_xrce_session>
 8013f76:	b918      	cbnz	r0, 8013f80 <create_node+0xcc>
 8013f78:	4628      	mov	r0, r5
 8013f7a:	f7fa fe07 	bl	800eb8c <rmw_uxrce_fini_node_memory>
 8013f7e:	2500      	movs	r5, #0
 8013f80:	4628      	mov	r0, r5
 8013f82:	b003      	add	sp, #12
 8013f84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013f88:	4a06      	ldr	r2, [pc, #24]	; (8013fa4 <create_node+0xf0>)
 8013f8a:	9600      	str	r6, [sp, #0]
 8013f8c:	463b      	mov	r3, r7
 8013f8e:	213c      	movs	r1, #60	; 0x3c
 8013f90:	4803      	ldr	r0, [pc, #12]	; (8013fa0 <create_node+0xec>)
 8013f92:	f003 f9ad 	bl	80172f0 <sniprintf>
 8013f96:	e7d7      	b.n	8013f48 <create_node+0x94>
 8013f98:	2000ce6c 	.word	0x2000ce6c
 8013f9c:	08018934 	.word	0x08018934
 8013fa0:	20009cbc 	.word	0x20009cbc
 8013fa4:	08018974 	.word	0x08018974

08013fa8 <rmw_create_node>:
 8013fa8:	b199      	cbz	r1, 8013fd2 <rmw_create_node+0x2a>
 8013faa:	b430      	push	{r4, r5}
 8013fac:	4615      	mov	r5, r2
 8013fae:	461a      	mov	r2, r3
 8013fb0:	780b      	ldrb	r3, [r1, #0]
 8013fb2:	460c      	mov	r4, r1
 8013fb4:	b153      	cbz	r3, 8013fcc <rmw_create_node+0x24>
 8013fb6:	b14d      	cbz	r5, 8013fcc <rmw_create_node+0x24>
 8013fb8:	782b      	ldrb	r3, [r5, #0]
 8013fba:	b13b      	cbz	r3, 8013fcc <rmw_create_node+0x24>
 8013fbc:	b902      	cbnz	r2, 8013fc0 <rmw_create_node+0x18>
 8013fbe:	69c2      	ldr	r2, [r0, #28]
 8013fc0:	4603      	mov	r3, r0
 8013fc2:	4629      	mov	r1, r5
 8013fc4:	4620      	mov	r0, r4
 8013fc6:	bc30      	pop	{r4, r5}
 8013fc8:	f7ff bf74 	b.w	8013eb4 <create_node>
 8013fcc:	2000      	movs	r0, #0
 8013fce:	bc30      	pop	{r4, r5}
 8013fd0:	4770      	bx	lr
 8013fd2:	2000      	movs	r0, #0
 8013fd4:	4770      	bx	lr
 8013fd6:	bf00      	nop

08013fd8 <rmw_destroy_node>:
 8013fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fda:	2800      	cmp	r0, #0
 8013fdc:	d066      	beq.n	80140ac <rmw_destroy_node+0xd4>
 8013fde:	4607      	mov	r7, r0
 8013fe0:	6800      	ldr	r0, [r0, #0]
 8013fe2:	b128      	cbz	r0, 8013ff0 <rmw_destroy_node+0x18>
 8013fe4:	4b34      	ldr	r3, [pc, #208]	; (80140b8 <rmw_destroy_node+0xe0>)
 8013fe6:	6819      	ldr	r1, [r3, #0]
 8013fe8:	f7ec f8fa 	bl	80001e0 <strcmp>
 8013fec:	2800      	cmp	r0, #0
 8013fee:	d15d      	bne.n	80140ac <rmw_destroy_node+0xd4>
 8013ff0:	687c      	ldr	r4, [r7, #4]
 8013ff2:	2c00      	cmp	r4, #0
 8013ff4:	d05a      	beq.n	80140ac <rmw_destroy_node+0xd4>
 8013ff6:	4b31      	ldr	r3, [pc, #196]	; (80140bc <rmw_destroy_node+0xe4>)
 8013ff8:	681d      	ldr	r5, [r3, #0]
 8013ffa:	2d00      	cmp	r5, #0
 8013ffc:	d059      	beq.n	80140b2 <rmw_destroy_node+0xda>
 8013ffe:	2600      	movs	r6, #0
 8014000:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 8014004:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 8014008:	429c      	cmp	r4, r3
 801400a:	d047      	beq.n	801409c <rmw_destroy_node+0xc4>
 801400c:	2d00      	cmp	r5, #0
 801400e:	d1f7      	bne.n	8014000 <rmw_destroy_node+0x28>
 8014010:	4b2b      	ldr	r3, [pc, #172]	; (80140c0 <rmw_destroy_node+0xe8>)
 8014012:	681d      	ldr	r5, [r3, #0]
 8014014:	b15d      	cbz	r5, 801402e <rmw_destroy_node+0x56>
 8014016:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 801401a:	6a0b      	ldr	r3, [r1, #32]
 801401c:	429c      	cmp	r4, r3
 801401e:	d1f9      	bne.n	8014014 <rmw_destroy_node+0x3c>
 8014020:	317c      	adds	r1, #124	; 0x7c
 8014022:	4638      	mov	r0, r7
 8014024:	f7fa fbd0 	bl	800e7c8 <rmw_destroy_subscription>
 8014028:	4606      	mov	r6, r0
 801402a:	2d00      	cmp	r5, #0
 801402c:	d1f3      	bne.n	8014016 <rmw_destroy_node+0x3e>
 801402e:	4b25      	ldr	r3, [pc, #148]	; (80140c4 <rmw_destroy_node+0xec>)
 8014030:	681d      	ldr	r5, [r3, #0]
 8014032:	b15d      	cbz	r5, 801404c <rmw_destroy_node+0x74>
 8014034:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 8014038:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 801403a:	429c      	cmp	r4, r3
 801403c:	d1f9      	bne.n	8014032 <rmw_destroy_node+0x5a>
 801403e:	317c      	adds	r1, #124	; 0x7c
 8014040:	4638      	mov	r0, r7
 8014042:	f000 f849 	bl	80140d8 <rmw_destroy_service>
 8014046:	4606      	mov	r6, r0
 8014048:	2d00      	cmp	r5, #0
 801404a:	d1f3      	bne.n	8014034 <rmw_destroy_node+0x5c>
 801404c:	4b1e      	ldr	r3, [pc, #120]	; (80140c8 <rmw_destroy_node+0xf0>)
 801404e:	681d      	ldr	r5, [r3, #0]
 8014050:	b15d      	cbz	r5, 801406a <rmw_destroy_node+0x92>
 8014052:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 8014056:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8014058:	429c      	cmp	r4, r3
 801405a:	d1f9      	bne.n	8014050 <rmw_destroy_node+0x78>
 801405c:	317c      	adds	r1, #124	; 0x7c
 801405e:	4638      	mov	r0, r7
 8014060:	f002 fd16 	bl	8016a90 <rmw_destroy_client>
 8014064:	4606      	mov	r6, r0
 8014066:	2d00      	cmp	r5, #0
 8014068:	d1f3      	bne.n	8014052 <rmw_destroy_node+0x7a>
 801406a:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 801406e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8014072:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014076:	6819      	ldr	r1, [r3, #0]
 8014078:	f7fb f90e 	bl	800f298 <uxr_buffer_delete_entity>
 801407c:	4602      	mov	r2, r0
 801407e:	6920      	ldr	r0, [r4, #16]
 8014080:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8014084:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8014088:	f7fa feea 	bl	800ee60 <run_xrce_session>
 801408c:	2800      	cmp	r0, #0
 801408e:	bf08      	it	eq
 8014090:	2602      	moveq	r6, #2
 8014092:	4638      	mov	r0, r7
 8014094:	f7fa fd7a 	bl	800eb8c <rmw_uxrce_fini_node_memory>
 8014098:	4630      	mov	r0, r6
 801409a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801409c:	3184      	adds	r1, #132	; 0x84
 801409e:	4638      	mov	r0, r7
 80140a0:	f7fa fa60 	bl	800e564 <rmw_destroy_publisher>
 80140a4:	4606      	mov	r6, r0
 80140a6:	2d00      	cmp	r5, #0
 80140a8:	d1aa      	bne.n	8014000 <rmw_destroy_node+0x28>
 80140aa:	e7b1      	b.n	8014010 <rmw_destroy_node+0x38>
 80140ac:	2601      	movs	r6, #1
 80140ae:	4630      	mov	r0, r6
 80140b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140b2:	462e      	mov	r6, r5
 80140b4:	e7ac      	b.n	8014010 <rmw_destroy_node+0x38>
 80140b6:	bf00      	nop
 80140b8:	08018e08 	.word	0x08018e08
 80140bc:	20009ea8 	.word	0x20009ea8
 80140c0:	2000d104 	.word	0x2000d104
 80140c4:	2000d0f4 	.word	0x2000d0f4
 80140c8:	2000a728 	.word	0x2000a728

080140cc <rmw_node_get_graph_guard_condition>:
 80140cc:	6843      	ldr	r3, [r0, #4]
 80140ce:	6918      	ldr	r0, [r3, #16]
 80140d0:	f500 705a 	add.w	r0, r0, #872	; 0x368
 80140d4:	4770      	bx	lr
 80140d6:	bf00      	nop

080140d8 <rmw_destroy_service>:
 80140d8:	b570      	push	{r4, r5, r6, lr}
 80140da:	b128      	cbz	r0, 80140e8 <rmw_destroy_service+0x10>
 80140dc:	4604      	mov	r4, r0
 80140de:	6800      	ldr	r0, [r0, #0]
 80140e0:	460d      	mov	r5, r1
 80140e2:	f7fa ff3d 	bl	800ef60 <is_uxrce_rmw_identifier_valid>
 80140e6:	b910      	cbnz	r0, 80140ee <rmw_destroy_service+0x16>
 80140e8:	2401      	movs	r4, #1
 80140ea:	4620      	mov	r0, r4
 80140ec:	bd70      	pop	{r4, r5, r6, pc}
 80140ee:	6863      	ldr	r3, [r4, #4]
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d0f9      	beq.n	80140e8 <rmw_destroy_service+0x10>
 80140f4:	2d00      	cmp	r5, #0
 80140f6:	d0f7      	beq.n	80140e8 <rmw_destroy_service+0x10>
 80140f8:	6828      	ldr	r0, [r5, #0]
 80140fa:	f7fa ff31 	bl	800ef60 <is_uxrce_rmw_identifier_valid>
 80140fe:	2800      	cmp	r0, #0
 8014100:	d0f2      	beq.n	80140e8 <rmw_destroy_service+0x10>
 8014102:	686e      	ldr	r6, [r5, #4]
 8014104:	2e00      	cmp	r6, #0
 8014106:	d0ef      	beq.n	80140e8 <rmw_destroy_service+0x10>
 8014108:	6864      	ldr	r4, [r4, #4]
 801410a:	6932      	ldr	r2, [r6, #16]
 801410c:	6920      	ldr	r0, [r4, #16]
 801410e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8014112:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014116:	6819      	ldr	r1, [r3, #0]
 8014118:	f7fb fb28 	bl	800f76c <uxr_buffer_cancel_data>
 801411c:	4602      	mov	r2, r0
 801411e:	6920      	ldr	r0, [r4, #16]
 8014120:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8014124:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8014128:	f7fa fe9a 	bl	800ee60 <run_xrce_session>
 801412c:	6920      	ldr	r0, [r4, #16]
 801412e:	6932      	ldr	r2, [r6, #16]
 8014130:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8014134:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014138:	6819      	ldr	r1, [r3, #0]
 801413a:	f7fb f8ad 	bl	800f298 <uxr_buffer_delete_entity>
 801413e:	4602      	mov	r2, r0
 8014140:	6920      	ldr	r0, [r4, #16]
 8014142:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8014146:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801414a:	f7fa fe89 	bl	800ee60 <run_xrce_session>
 801414e:	2800      	cmp	r0, #0
 8014150:	4628      	mov	r0, r5
 8014152:	bf14      	ite	ne
 8014154:	2400      	movne	r4, #0
 8014156:	2402      	moveq	r4, #2
 8014158:	f7fa fd5c 	bl	800ec14 <rmw_uxrce_fini_service_memory>
 801415c:	e7c5      	b.n	80140ea <rmw_destroy_service+0x12>
 801415e:	bf00      	nop

08014160 <rmw_uxrce_transport_init>:
 8014160:	b508      	push	{r3, lr}
 8014162:	b108      	cbz	r0, 8014168 <rmw_uxrce_transport_init+0x8>
 8014164:	f100 0210 	add.w	r2, r0, #16
 8014168:	b139      	cbz	r1, 801417a <rmw_uxrce_transport_init+0x1a>
 801416a:	6949      	ldr	r1, [r1, #20]
 801416c:	4610      	mov	r0, r2
 801416e:	f001 f8d9 	bl	8015324 <uxr_init_custom_transport>
 8014172:	f080 0001 	eor.w	r0, r0, #1
 8014176:	b2c0      	uxtb	r0, r0
 8014178:	bd08      	pop	{r3, pc}
 801417a:	4b04      	ldr	r3, [pc, #16]	; (801418c <rmw_uxrce_transport_init+0x2c>)
 801417c:	4610      	mov	r0, r2
 801417e:	6859      	ldr	r1, [r3, #4]
 8014180:	f001 f8d0 	bl	8015324 <uxr_init_custom_transport>
 8014184:	f080 0001 	eor.w	r0, r0, #1
 8014188:	b2c0      	uxtb	r0, r0
 801418a:	bd08      	pop	{r3, pc}
 801418c:	20009e78 	.word	0x20009e78

08014190 <rmw_uros_epoch_nanos>:
 8014190:	4b05      	ldr	r3, [pc, #20]	; (80141a8 <rmw_uros_epoch_nanos+0x18>)
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	b123      	cbz	r3, 80141a0 <rmw_uros_epoch_nanos+0x10>
 8014196:	68d8      	ldr	r0, [r3, #12]
 8014198:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801419c:	f7fb bce6 	b.w	800fb6c <uxr_epoch_nanos>
 80141a0:	2000      	movs	r0, #0
 80141a2:	2100      	movs	r1, #0
 80141a4:	4770      	bx	lr
 80141a6:	bf00      	nop
 80141a8:	2000d040 	.word	0x2000d040

080141ac <ucdr_serialize_endian_array_char>:
 80141ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141b0:	4619      	mov	r1, r3
 80141b2:	461e      	mov	r6, r3
 80141b4:	4690      	mov	r8, r2
 80141b6:	4604      	mov	r4, r0
 80141b8:	f7fa ff54 	bl	800f064 <ucdr_check_buffer_available_for>
 80141bc:	b9e0      	cbnz	r0, 80141f8 <ucdr_serialize_endian_array_char+0x4c>
 80141be:	4637      	mov	r7, r6
 80141c0:	e009      	b.n	80141d6 <ucdr_serialize_endian_array_char+0x2a>
 80141c2:	68a0      	ldr	r0, [r4, #8]
 80141c4:	f003 fb19 	bl	80177fa <memcpy>
 80141c8:	68a2      	ldr	r2, [r4, #8]
 80141ca:	6923      	ldr	r3, [r4, #16]
 80141cc:	442a      	add	r2, r5
 80141ce:	442b      	add	r3, r5
 80141d0:	1b7f      	subs	r7, r7, r5
 80141d2:	60a2      	str	r2, [r4, #8]
 80141d4:	6123      	str	r3, [r4, #16]
 80141d6:	2201      	movs	r2, #1
 80141d8:	4639      	mov	r1, r7
 80141da:	4620      	mov	r0, r4
 80141dc:	f7fa ffc8 	bl	800f170 <ucdr_check_final_buffer_behavior_array>
 80141e0:	1bf1      	subs	r1, r6, r7
 80141e2:	4441      	add	r1, r8
 80141e4:	4605      	mov	r5, r0
 80141e6:	4602      	mov	r2, r0
 80141e8:	2800      	cmp	r0, #0
 80141ea:	d1ea      	bne.n	80141c2 <ucdr_serialize_endian_array_char+0x16>
 80141ec:	2301      	movs	r3, #1
 80141ee:	7da0      	ldrb	r0, [r4, #22]
 80141f0:	7563      	strb	r3, [r4, #21]
 80141f2:	4058      	eors	r0, r3
 80141f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141f8:	4632      	mov	r2, r6
 80141fa:	68a0      	ldr	r0, [r4, #8]
 80141fc:	4641      	mov	r1, r8
 80141fe:	f003 fafc 	bl	80177fa <memcpy>
 8014202:	68a2      	ldr	r2, [r4, #8]
 8014204:	6923      	ldr	r3, [r4, #16]
 8014206:	4432      	add	r2, r6
 8014208:	4433      	add	r3, r6
 801420a:	60a2      	str	r2, [r4, #8]
 801420c:	6123      	str	r3, [r4, #16]
 801420e:	e7ed      	b.n	80141ec <ucdr_serialize_endian_array_char+0x40>

08014210 <ucdr_deserialize_endian_array_char>:
 8014210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014214:	4619      	mov	r1, r3
 8014216:	461e      	mov	r6, r3
 8014218:	4690      	mov	r8, r2
 801421a:	4604      	mov	r4, r0
 801421c:	f7fa ff22 	bl	800f064 <ucdr_check_buffer_available_for>
 8014220:	b9e0      	cbnz	r0, 801425c <ucdr_deserialize_endian_array_char+0x4c>
 8014222:	4637      	mov	r7, r6
 8014224:	e009      	b.n	801423a <ucdr_deserialize_endian_array_char+0x2a>
 8014226:	68a1      	ldr	r1, [r4, #8]
 8014228:	f003 fae7 	bl	80177fa <memcpy>
 801422c:	68a2      	ldr	r2, [r4, #8]
 801422e:	6923      	ldr	r3, [r4, #16]
 8014230:	442a      	add	r2, r5
 8014232:	442b      	add	r3, r5
 8014234:	1b7f      	subs	r7, r7, r5
 8014236:	60a2      	str	r2, [r4, #8]
 8014238:	6123      	str	r3, [r4, #16]
 801423a:	2201      	movs	r2, #1
 801423c:	4639      	mov	r1, r7
 801423e:	4620      	mov	r0, r4
 8014240:	f7fa ff96 	bl	800f170 <ucdr_check_final_buffer_behavior_array>
 8014244:	4605      	mov	r5, r0
 8014246:	1bf0      	subs	r0, r6, r7
 8014248:	4440      	add	r0, r8
 801424a:	462a      	mov	r2, r5
 801424c:	2d00      	cmp	r5, #0
 801424e:	d1ea      	bne.n	8014226 <ucdr_deserialize_endian_array_char+0x16>
 8014250:	2301      	movs	r3, #1
 8014252:	7da0      	ldrb	r0, [r4, #22]
 8014254:	7563      	strb	r3, [r4, #21]
 8014256:	4058      	eors	r0, r3
 8014258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801425c:	4632      	mov	r2, r6
 801425e:	68a1      	ldr	r1, [r4, #8]
 8014260:	4640      	mov	r0, r8
 8014262:	f003 faca 	bl	80177fa <memcpy>
 8014266:	68a2      	ldr	r2, [r4, #8]
 8014268:	6923      	ldr	r3, [r4, #16]
 801426a:	4432      	add	r2, r6
 801426c:	4433      	add	r3, r6
 801426e:	60a2      	str	r2, [r4, #8]
 8014270:	6123      	str	r3, [r4, #16]
 8014272:	e7ed      	b.n	8014250 <ucdr_deserialize_endian_array_char+0x40>

08014274 <ucdr_serialize_array_uint8_t>:
 8014274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014278:	4688      	mov	r8, r1
 801427a:	4611      	mov	r1, r2
 801427c:	4616      	mov	r6, r2
 801427e:	4604      	mov	r4, r0
 8014280:	f7fa fef0 	bl	800f064 <ucdr_check_buffer_available_for>
 8014284:	b9e0      	cbnz	r0, 80142c0 <ucdr_serialize_array_uint8_t+0x4c>
 8014286:	4637      	mov	r7, r6
 8014288:	e009      	b.n	801429e <ucdr_serialize_array_uint8_t+0x2a>
 801428a:	68a0      	ldr	r0, [r4, #8]
 801428c:	f003 fab5 	bl	80177fa <memcpy>
 8014290:	68a2      	ldr	r2, [r4, #8]
 8014292:	6923      	ldr	r3, [r4, #16]
 8014294:	442a      	add	r2, r5
 8014296:	442b      	add	r3, r5
 8014298:	1b7f      	subs	r7, r7, r5
 801429a:	60a2      	str	r2, [r4, #8]
 801429c:	6123      	str	r3, [r4, #16]
 801429e:	2201      	movs	r2, #1
 80142a0:	4639      	mov	r1, r7
 80142a2:	4620      	mov	r0, r4
 80142a4:	f7fa ff64 	bl	800f170 <ucdr_check_final_buffer_behavior_array>
 80142a8:	1bf1      	subs	r1, r6, r7
 80142aa:	4441      	add	r1, r8
 80142ac:	4605      	mov	r5, r0
 80142ae:	4602      	mov	r2, r0
 80142b0:	2800      	cmp	r0, #0
 80142b2:	d1ea      	bne.n	801428a <ucdr_serialize_array_uint8_t+0x16>
 80142b4:	2301      	movs	r3, #1
 80142b6:	7da0      	ldrb	r0, [r4, #22]
 80142b8:	7563      	strb	r3, [r4, #21]
 80142ba:	4058      	eors	r0, r3
 80142bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142c0:	4632      	mov	r2, r6
 80142c2:	68a0      	ldr	r0, [r4, #8]
 80142c4:	4641      	mov	r1, r8
 80142c6:	f003 fa98 	bl	80177fa <memcpy>
 80142ca:	68a3      	ldr	r3, [r4, #8]
 80142cc:	6922      	ldr	r2, [r4, #16]
 80142ce:	4433      	add	r3, r6
 80142d0:	4432      	add	r2, r6
 80142d2:	60a3      	str	r3, [r4, #8]
 80142d4:	6122      	str	r2, [r4, #16]
 80142d6:	e7ed      	b.n	80142b4 <ucdr_serialize_array_uint8_t+0x40>

080142d8 <ucdr_serialize_endian_array_uint8_t>:
 80142d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142dc:	4619      	mov	r1, r3
 80142de:	461e      	mov	r6, r3
 80142e0:	4690      	mov	r8, r2
 80142e2:	4604      	mov	r4, r0
 80142e4:	f7fa febe 	bl	800f064 <ucdr_check_buffer_available_for>
 80142e8:	b9e0      	cbnz	r0, 8014324 <ucdr_serialize_endian_array_uint8_t+0x4c>
 80142ea:	4637      	mov	r7, r6
 80142ec:	e009      	b.n	8014302 <ucdr_serialize_endian_array_uint8_t+0x2a>
 80142ee:	68a0      	ldr	r0, [r4, #8]
 80142f0:	f003 fa83 	bl	80177fa <memcpy>
 80142f4:	68a2      	ldr	r2, [r4, #8]
 80142f6:	6923      	ldr	r3, [r4, #16]
 80142f8:	442a      	add	r2, r5
 80142fa:	442b      	add	r3, r5
 80142fc:	1b7f      	subs	r7, r7, r5
 80142fe:	60a2      	str	r2, [r4, #8]
 8014300:	6123      	str	r3, [r4, #16]
 8014302:	2201      	movs	r2, #1
 8014304:	4639      	mov	r1, r7
 8014306:	4620      	mov	r0, r4
 8014308:	f7fa ff32 	bl	800f170 <ucdr_check_final_buffer_behavior_array>
 801430c:	1bf1      	subs	r1, r6, r7
 801430e:	4441      	add	r1, r8
 8014310:	4605      	mov	r5, r0
 8014312:	4602      	mov	r2, r0
 8014314:	2800      	cmp	r0, #0
 8014316:	d1ea      	bne.n	80142ee <ucdr_serialize_endian_array_uint8_t+0x16>
 8014318:	2301      	movs	r3, #1
 801431a:	7da0      	ldrb	r0, [r4, #22]
 801431c:	7563      	strb	r3, [r4, #21]
 801431e:	4058      	eors	r0, r3
 8014320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014324:	4632      	mov	r2, r6
 8014326:	68a0      	ldr	r0, [r4, #8]
 8014328:	4641      	mov	r1, r8
 801432a:	f003 fa66 	bl	80177fa <memcpy>
 801432e:	68a2      	ldr	r2, [r4, #8]
 8014330:	6923      	ldr	r3, [r4, #16]
 8014332:	4432      	add	r2, r6
 8014334:	4433      	add	r3, r6
 8014336:	60a2      	str	r2, [r4, #8]
 8014338:	6123      	str	r3, [r4, #16]
 801433a:	e7ed      	b.n	8014318 <ucdr_serialize_endian_array_uint8_t+0x40>

0801433c <ucdr_deserialize_array_uint8_t>:
 801433c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014340:	4688      	mov	r8, r1
 8014342:	4611      	mov	r1, r2
 8014344:	4616      	mov	r6, r2
 8014346:	4604      	mov	r4, r0
 8014348:	f7fa fe8c 	bl	800f064 <ucdr_check_buffer_available_for>
 801434c:	b9e0      	cbnz	r0, 8014388 <ucdr_deserialize_array_uint8_t+0x4c>
 801434e:	4637      	mov	r7, r6
 8014350:	e009      	b.n	8014366 <ucdr_deserialize_array_uint8_t+0x2a>
 8014352:	68a1      	ldr	r1, [r4, #8]
 8014354:	f003 fa51 	bl	80177fa <memcpy>
 8014358:	68a2      	ldr	r2, [r4, #8]
 801435a:	6923      	ldr	r3, [r4, #16]
 801435c:	442a      	add	r2, r5
 801435e:	442b      	add	r3, r5
 8014360:	1b7f      	subs	r7, r7, r5
 8014362:	60a2      	str	r2, [r4, #8]
 8014364:	6123      	str	r3, [r4, #16]
 8014366:	2201      	movs	r2, #1
 8014368:	4639      	mov	r1, r7
 801436a:	4620      	mov	r0, r4
 801436c:	f7fa ff00 	bl	800f170 <ucdr_check_final_buffer_behavior_array>
 8014370:	4605      	mov	r5, r0
 8014372:	1bf0      	subs	r0, r6, r7
 8014374:	4440      	add	r0, r8
 8014376:	462a      	mov	r2, r5
 8014378:	2d00      	cmp	r5, #0
 801437a:	d1ea      	bne.n	8014352 <ucdr_deserialize_array_uint8_t+0x16>
 801437c:	2301      	movs	r3, #1
 801437e:	7da0      	ldrb	r0, [r4, #22]
 8014380:	7563      	strb	r3, [r4, #21]
 8014382:	4058      	eors	r0, r3
 8014384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014388:	4632      	mov	r2, r6
 801438a:	68a1      	ldr	r1, [r4, #8]
 801438c:	4640      	mov	r0, r8
 801438e:	f003 fa34 	bl	80177fa <memcpy>
 8014392:	68a3      	ldr	r3, [r4, #8]
 8014394:	6922      	ldr	r2, [r4, #16]
 8014396:	4433      	add	r3, r6
 8014398:	4432      	add	r2, r6
 801439a:	60a3      	str	r3, [r4, #8]
 801439c:	6122      	str	r2, [r4, #16]
 801439e:	e7ed      	b.n	801437c <ucdr_deserialize_array_uint8_t+0x40>

080143a0 <ucdr_deserialize_endian_array_uint8_t>:
 80143a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143a4:	4619      	mov	r1, r3
 80143a6:	461e      	mov	r6, r3
 80143a8:	4690      	mov	r8, r2
 80143aa:	4604      	mov	r4, r0
 80143ac:	f7fa fe5a 	bl	800f064 <ucdr_check_buffer_available_for>
 80143b0:	b9e0      	cbnz	r0, 80143ec <ucdr_deserialize_endian_array_uint8_t+0x4c>
 80143b2:	4637      	mov	r7, r6
 80143b4:	e009      	b.n	80143ca <ucdr_deserialize_endian_array_uint8_t+0x2a>
 80143b6:	68a1      	ldr	r1, [r4, #8]
 80143b8:	f003 fa1f 	bl	80177fa <memcpy>
 80143bc:	68a2      	ldr	r2, [r4, #8]
 80143be:	6923      	ldr	r3, [r4, #16]
 80143c0:	442a      	add	r2, r5
 80143c2:	442b      	add	r3, r5
 80143c4:	1b7f      	subs	r7, r7, r5
 80143c6:	60a2      	str	r2, [r4, #8]
 80143c8:	6123      	str	r3, [r4, #16]
 80143ca:	2201      	movs	r2, #1
 80143cc:	4639      	mov	r1, r7
 80143ce:	4620      	mov	r0, r4
 80143d0:	f7fa fece 	bl	800f170 <ucdr_check_final_buffer_behavior_array>
 80143d4:	4605      	mov	r5, r0
 80143d6:	1bf0      	subs	r0, r6, r7
 80143d8:	4440      	add	r0, r8
 80143da:	462a      	mov	r2, r5
 80143dc:	2d00      	cmp	r5, #0
 80143de:	d1ea      	bne.n	80143b6 <ucdr_deserialize_endian_array_uint8_t+0x16>
 80143e0:	2301      	movs	r3, #1
 80143e2:	7da0      	ldrb	r0, [r4, #22]
 80143e4:	7563      	strb	r3, [r4, #21]
 80143e6:	4058      	eors	r0, r3
 80143e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143ec:	4632      	mov	r2, r6
 80143ee:	68a1      	ldr	r1, [r4, #8]
 80143f0:	4640      	mov	r0, r8
 80143f2:	f003 fa02 	bl	80177fa <memcpy>
 80143f6:	68a2      	ldr	r2, [r4, #8]
 80143f8:	6923      	ldr	r3, [r4, #16]
 80143fa:	4432      	add	r2, r6
 80143fc:	4433      	add	r3, r6
 80143fe:	60a2      	str	r2, [r4, #8]
 8014400:	6123      	str	r3, [r4, #16]
 8014402:	e7ed      	b.n	80143e0 <ucdr_deserialize_endian_array_uint8_t+0x40>

08014404 <ucdr_serialize_bool>:
 8014404:	b538      	push	{r3, r4, r5, lr}
 8014406:	460d      	mov	r5, r1
 8014408:	2101      	movs	r1, #1
 801440a:	4604      	mov	r4, r0
 801440c:	f7fa fe36 	bl	800f07c <ucdr_check_final_buffer_behavior>
 8014410:	b148      	cbz	r0, 8014426 <ucdr_serialize_bool+0x22>
 8014412:	68a3      	ldr	r3, [r4, #8]
 8014414:	701d      	strb	r5, [r3, #0]
 8014416:	68a2      	ldr	r2, [r4, #8]
 8014418:	6923      	ldr	r3, [r4, #16]
 801441a:	3201      	adds	r2, #1
 801441c:	3301      	adds	r3, #1
 801441e:	2101      	movs	r1, #1
 8014420:	60a2      	str	r2, [r4, #8]
 8014422:	6123      	str	r3, [r4, #16]
 8014424:	7561      	strb	r1, [r4, #21]
 8014426:	7da0      	ldrb	r0, [r4, #22]
 8014428:	f080 0001 	eor.w	r0, r0, #1
 801442c:	bd38      	pop	{r3, r4, r5, pc}
 801442e:	bf00      	nop

08014430 <ucdr_deserialize_bool>:
 8014430:	b538      	push	{r3, r4, r5, lr}
 8014432:	460d      	mov	r5, r1
 8014434:	2101      	movs	r1, #1
 8014436:	4604      	mov	r4, r0
 8014438:	f7fa fe20 	bl	800f07c <ucdr_check_final_buffer_behavior>
 801443c:	b168      	cbz	r0, 801445a <ucdr_deserialize_bool+0x2a>
 801443e:	68a2      	ldr	r2, [r4, #8]
 8014440:	6923      	ldr	r3, [r4, #16]
 8014442:	f812 1b01 	ldrb.w	r1, [r2], #1
 8014446:	3900      	subs	r1, #0
 8014448:	f103 0301 	add.w	r3, r3, #1
 801444c:	bf18      	it	ne
 801444e:	2101      	movne	r1, #1
 8014450:	2001      	movs	r0, #1
 8014452:	7029      	strb	r1, [r5, #0]
 8014454:	60a2      	str	r2, [r4, #8]
 8014456:	6123      	str	r3, [r4, #16]
 8014458:	7560      	strb	r0, [r4, #21]
 801445a:	7da0      	ldrb	r0, [r4, #22]
 801445c:	f080 0001 	eor.w	r0, r0, #1
 8014460:	bd38      	pop	{r3, r4, r5, pc}
 8014462:	bf00      	nop

08014464 <ucdr_serialize_uint8_t>:
 8014464:	b538      	push	{r3, r4, r5, lr}
 8014466:	460d      	mov	r5, r1
 8014468:	2101      	movs	r1, #1
 801446a:	4604      	mov	r4, r0
 801446c:	f7fa fe06 	bl	800f07c <ucdr_check_final_buffer_behavior>
 8014470:	b148      	cbz	r0, 8014486 <ucdr_serialize_uint8_t+0x22>
 8014472:	68a3      	ldr	r3, [r4, #8]
 8014474:	701d      	strb	r5, [r3, #0]
 8014476:	68a2      	ldr	r2, [r4, #8]
 8014478:	6923      	ldr	r3, [r4, #16]
 801447a:	3201      	adds	r2, #1
 801447c:	3301      	adds	r3, #1
 801447e:	2101      	movs	r1, #1
 8014480:	60a2      	str	r2, [r4, #8]
 8014482:	6123      	str	r3, [r4, #16]
 8014484:	7561      	strb	r1, [r4, #21]
 8014486:	7da0      	ldrb	r0, [r4, #22]
 8014488:	f080 0001 	eor.w	r0, r0, #1
 801448c:	bd38      	pop	{r3, r4, r5, pc}
 801448e:	bf00      	nop

08014490 <ucdr_deserialize_uint8_t>:
 8014490:	b538      	push	{r3, r4, r5, lr}
 8014492:	460d      	mov	r5, r1
 8014494:	2101      	movs	r1, #1
 8014496:	4604      	mov	r4, r0
 8014498:	f7fa fdf0 	bl	800f07c <ucdr_check_final_buffer_behavior>
 801449c:	b150      	cbz	r0, 80144b4 <ucdr_deserialize_uint8_t+0x24>
 801449e:	68a3      	ldr	r3, [r4, #8]
 80144a0:	781b      	ldrb	r3, [r3, #0]
 80144a2:	702b      	strb	r3, [r5, #0]
 80144a4:	68a2      	ldr	r2, [r4, #8]
 80144a6:	6923      	ldr	r3, [r4, #16]
 80144a8:	3201      	adds	r2, #1
 80144aa:	3301      	adds	r3, #1
 80144ac:	2101      	movs	r1, #1
 80144ae:	60a2      	str	r2, [r4, #8]
 80144b0:	6123      	str	r3, [r4, #16]
 80144b2:	7561      	strb	r1, [r4, #21]
 80144b4:	7da0      	ldrb	r0, [r4, #22]
 80144b6:	f080 0001 	eor.w	r0, r0, #1
 80144ba:	bd38      	pop	{r3, r4, r5, pc}

080144bc <ucdr_serialize_uint16_t>:
 80144bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144c0:	b082      	sub	sp, #8
 80144c2:	460b      	mov	r3, r1
 80144c4:	2102      	movs	r1, #2
 80144c6:	4604      	mov	r4, r0
 80144c8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80144cc:	f7fa fe28 	bl	800f120 <ucdr_buffer_alignment>
 80144d0:	4601      	mov	r1, r0
 80144d2:	4620      	mov	r0, r4
 80144d4:	7d67      	ldrb	r7, [r4, #21]
 80144d6:	f7fa fe67 	bl	800f1a8 <ucdr_advance_buffer>
 80144da:	4620      	mov	r0, r4
 80144dc:	2102      	movs	r1, #2
 80144de:	f7fa fdc1 	bl	800f064 <ucdr_check_buffer_available_for>
 80144e2:	bb78      	cbnz	r0, 8014544 <ucdr_serialize_uint16_t+0x88>
 80144e4:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 80144e8:	42b5      	cmp	r5, r6
 80144ea:	d926      	bls.n	801453a <ucdr_serialize_uint16_t+0x7e>
 80144ec:	6922      	ldr	r2, [r4, #16]
 80144ee:	60a5      	str	r5, [r4, #8]
 80144f0:	1bad      	subs	r5, r5, r6
 80144f2:	442a      	add	r2, r5
 80144f4:	f1c5 0802 	rsb	r8, r5, #2
 80144f8:	6122      	str	r2, [r4, #16]
 80144fa:	4641      	mov	r1, r8
 80144fc:	4620      	mov	r0, r4
 80144fe:	f7fa fdbd 	bl	800f07c <ucdr_check_final_buffer_behavior>
 8014502:	2800      	cmp	r0, #0
 8014504:	d03b      	beq.n	801457e <ucdr_serialize_uint16_t+0xc2>
 8014506:	7d23      	ldrb	r3, [r4, #20]
 8014508:	2b01      	cmp	r3, #1
 801450a:	d04a      	beq.n	80145a2 <ucdr_serialize_uint16_t+0xe6>
 801450c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014510:	7033      	strb	r3, [r6, #0]
 8014512:	2d00      	cmp	r5, #0
 8014514:	d040      	beq.n	8014598 <ucdr_serialize_uint16_t+0xdc>
 8014516:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801451a:	7073      	strb	r3, [r6, #1]
 801451c:	6923      	ldr	r3, [r4, #16]
 801451e:	68a2      	ldr	r2, [r4, #8]
 8014520:	7da0      	ldrb	r0, [r4, #22]
 8014522:	3302      	adds	r3, #2
 8014524:	1b5b      	subs	r3, r3, r5
 8014526:	4442      	add	r2, r8
 8014528:	2102      	movs	r1, #2
 801452a:	f080 0001 	eor.w	r0, r0, #1
 801452e:	6123      	str	r3, [r4, #16]
 8014530:	60a2      	str	r2, [r4, #8]
 8014532:	7561      	strb	r1, [r4, #21]
 8014534:	b002      	add	sp, #8
 8014536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801453a:	2102      	movs	r1, #2
 801453c:	4620      	mov	r0, r4
 801453e:	f7fa fd9d 	bl	800f07c <ucdr_check_final_buffer_behavior>
 8014542:	b190      	cbz	r0, 801456a <ucdr_serialize_uint16_t+0xae>
 8014544:	7d23      	ldrb	r3, [r4, #20]
 8014546:	2b01      	cmp	r3, #1
 8014548:	68a3      	ldr	r3, [r4, #8]
 801454a:	d014      	beq.n	8014576 <ucdr_serialize_uint16_t+0xba>
 801454c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014550:	701a      	strb	r2, [r3, #0]
 8014552:	68a3      	ldr	r3, [r4, #8]
 8014554:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014558:	705a      	strb	r2, [r3, #1]
 801455a:	68a2      	ldr	r2, [r4, #8]
 801455c:	6923      	ldr	r3, [r4, #16]
 801455e:	3202      	adds	r2, #2
 8014560:	3302      	adds	r3, #2
 8014562:	2102      	movs	r1, #2
 8014564:	60a2      	str	r2, [r4, #8]
 8014566:	6123      	str	r3, [r4, #16]
 8014568:	7561      	strb	r1, [r4, #21]
 801456a:	7da0      	ldrb	r0, [r4, #22]
 801456c:	f080 0001 	eor.w	r0, r0, #1
 8014570:	b002      	add	sp, #8
 8014572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014576:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801457a:	801a      	strh	r2, [r3, #0]
 801457c:	e7ed      	b.n	801455a <ucdr_serialize_uint16_t+0x9e>
 801457e:	68a2      	ldr	r2, [r4, #8]
 8014580:	6923      	ldr	r3, [r4, #16]
 8014582:	7da0      	ldrb	r0, [r4, #22]
 8014584:	7567      	strb	r7, [r4, #21]
 8014586:	1b52      	subs	r2, r2, r5
 8014588:	1b5b      	subs	r3, r3, r5
 801458a:	f080 0001 	eor.w	r0, r0, #1
 801458e:	60a2      	str	r2, [r4, #8]
 8014590:	6123      	str	r3, [r4, #16]
 8014592:	b002      	add	sp, #8
 8014594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014598:	68a3      	ldr	r3, [r4, #8]
 801459a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801459e:	701a      	strb	r2, [r3, #0]
 80145a0:	e7bc      	b.n	801451c <ucdr_serialize_uint16_t+0x60>
 80145a2:	4630      	mov	r0, r6
 80145a4:	f10d 0606 	add.w	r6, sp, #6
 80145a8:	4631      	mov	r1, r6
 80145aa:	462a      	mov	r2, r5
 80145ac:	f003 f925 	bl	80177fa <memcpy>
 80145b0:	68a0      	ldr	r0, [r4, #8]
 80145b2:	4642      	mov	r2, r8
 80145b4:	1971      	adds	r1, r6, r5
 80145b6:	f003 f920 	bl	80177fa <memcpy>
 80145ba:	e7af      	b.n	801451c <ucdr_serialize_uint16_t+0x60>

080145bc <ucdr_serialize_endian_uint16_t>:
 80145bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80145c0:	b083      	sub	sp, #12
 80145c2:	460d      	mov	r5, r1
 80145c4:	2102      	movs	r1, #2
 80145c6:	4604      	mov	r4, r0
 80145c8:	f8ad 2006 	strh.w	r2, [sp, #6]
 80145cc:	f7fa fda8 	bl	800f120 <ucdr_buffer_alignment>
 80145d0:	4601      	mov	r1, r0
 80145d2:	4620      	mov	r0, r4
 80145d4:	f894 8015 	ldrb.w	r8, [r4, #21]
 80145d8:	f7fa fde6 	bl	800f1a8 <ucdr_advance_buffer>
 80145dc:	4620      	mov	r0, r4
 80145de:	2102      	movs	r1, #2
 80145e0:	f7fa fd40 	bl	800f064 <ucdr_check_buffer_available_for>
 80145e4:	bb70      	cbnz	r0, 8014644 <ucdr_serialize_endian_uint16_t+0x88>
 80145e6:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80145ea:	42be      	cmp	r6, r7
 80145ec:	d925      	bls.n	801463a <ucdr_serialize_endian_uint16_t+0x7e>
 80145ee:	6922      	ldr	r2, [r4, #16]
 80145f0:	60a6      	str	r6, [r4, #8]
 80145f2:	1bf6      	subs	r6, r6, r7
 80145f4:	4432      	add	r2, r6
 80145f6:	f1c6 0902 	rsb	r9, r6, #2
 80145fa:	6122      	str	r2, [r4, #16]
 80145fc:	4649      	mov	r1, r9
 80145fe:	4620      	mov	r0, r4
 8014600:	f7fa fd3c 	bl	800f07c <ucdr_check_final_buffer_behavior>
 8014604:	2800      	cmp	r0, #0
 8014606:	d039      	beq.n	801467c <ucdr_serialize_endian_uint16_t+0xc0>
 8014608:	2d01      	cmp	r5, #1
 801460a:	d04a      	beq.n	80146a2 <ucdr_serialize_endian_uint16_t+0xe6>
 801460c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014610:	703b      	strb	r3, [r7, #0]
 8014612:	2e00      	cmp	r6, #0
 8014614:	d040      	beq.n	8014698 <ucdr_serialize_endian_uint16_t+0xdc>
 8014616:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801461a:	707b      	strb	r3, [r7, #1]
 801461c:	6923      	ldr	r3, [r4, #16]
 801461e:	68a2      	ldr	r2, [r4, #8]
 8014620:	7da0      	ldrb	r0, [r4, #22]
 8014622:	3302      	adds	r3, #2
 8014624:	1b9b      	subs	r3, r3, r6
 8014626:	444a      	add	r2, r9
 8014628:	2102      	movs	r1, #2
 801462a:	f080 0001 	eor.w	r0, r0, #1
 801462e:	6123      	str	r3, [r4, #16]
 8014630:	60a2      	str	r2, [r4, #8]
 8014632:	7561      	strb	r1, [r4, #21]
 8014634:	b003      	add	sp, #12
 8014636:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801463a:	2102      	movs	r1, #2
 801463c:	4620      	mov	r0, r4
 801463e:	f7fa fd1d 	bl	800f07c <ucdr_check_final_buffer_behavior>
 8014642:	b188      	cbz	r0, 8014668 <ucdr_serialize_endian_uint16_t+0xac>
 8014644:	2d01      	cmp	r5, #1
 8014646:	68a3      	ldr	r3, [r4, #8]
 8014648:	d014      	beq.n	8014674 <ucdr_serialize_endian_uint16_t+0xb8>
 801464a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801464e:	701a      	strb	r2, [r3, #0]
 8014650:	68a3      	ldr	r3, [r4, #8]
 8014652:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014656:	705a      	strb	r2, [r3, #1]
 8014658:	68a2      	ldr	r2, [r4, #8]
 801465a:	6923      	ldr	r3, [r4, #16]
 801465c:	3202      	adds	r2, #2
 801465e:	3302      	adds	r3, #2
 8014660:	2102      	movs	r1, #2
 8014662:	60a2      	str	r2, [r4, #8]
 8014664:	6123      	str	r3, [r4, #16]
 8014666:	7561      	strb	r1, [r4, #21]
 8014668:	7da0      	ldrb	r0, [r4, #22]
 801466a:	f080 0001 	eor.w	r0, r0, #1
 801466e:	b003      	add	sp, #12
 8014670:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014674:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8014678:	801a      	strh	r2, [r3, #0]
 801467a:	e7ed      	b.n	8014658 <ucdr_serialize_endian_uint16_t+0x9c>
 801467c:	68a2      	ldr	r2, [r4, #8]
 801467e:	6923      	ldr	r3, [r4, #16]
 8014680:	7da0      	ldrb	r0, [r4, #22]
 8014682:	f884 8015 	strb.w	r8, [r4, #21]
 8014686:	1b92      	subs	r2, r2, r6
 8014688:	1b9b      	subs	r3, r3, r6
 801468a:	f080 0001 	eor.w	r0, r0, #1
 801468e:	60a2      	str	r2, [r4, #8]
 8014690:	6123      	str	r3, [r4, #16]
 8014692:	b003      	add	sp, #12
 8014694:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014698:	68a3      	ldr	r3, [r4, #8]
 801469a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801469e:	701a      	strb	r2, [r3, #0]
 80146a0:	e7bc      	b.n	801461c <ucdr_serialize_endian_uint16_t+0x60>
 80146a2:	f10d 0506 	add.w	r5, sp, #6
 80146a6:	4629      	mov	r1, r5
 80146a8:	4632      	mov	r2, r6
 80146aa:	4638      	mov	r0, r7
 80146ac:	f003 f8a5 	bl	80177fa <memcpy>
 80146b0:	68a0      	ldr	r0, [r4, #8]
 80146b2:	464a      	mov	r2, r9
 80146b4:	19a9      	adds	r1, r5, r6
 80146b6:	f003 f8a0 	bl	80177fa <memcpy>
 80146ba:	e7af      	b.n	801461c <ucdr_serialize_endian_uint16_t+0x60>

080146bc <ucdr_deserialize_uint16_t>:
 80146bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80146c0:	460d      	mov	r5, r1
 80146c2:	2102      	movs	r1, #2
 80146c4:	4604      	mov	r4, r0
 80146c6:	f7fa fd2b 	bl	800f120 <ucdr_buffer_alignment>
 80146ca:	4601      	mov	r1, r0
 80146cc:	4620      	mov	r0, r4
 80146ce:	f894 8015 	ldrb.w	r8, [r4, #21]
 80146d2:	f7fa fd69 	bl	800f1a8 <ucdr_advance_buffer>
 80146d6:	4620      	mov	r0, r4
 80146d8:	2102      	movs	r1, #2
 80146da:	f7fa fcc3 	bl	800f064 <ucdr_check_buffer_available_for>
 80146de:	bb60      	cbnz	r0, 801473a <ucdr_deserialize_uint16_t+0x7e>
 80146e0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80146e4:	42be      	cmp	r6, r7
 80146e6:	d923      	bls.n	8014730 <ucdr_deserialize_uint16_t+0x74>
 80146e8:	6922      	ldr	r2, [r4, #16]
 80146ea:	60a6      	str	r6, [r4, #8]
 80146ec:	1bf6      	subs	r6, r6, r7
 80146ee:	4432      	add	r2, r6
 80146f0:	f1c6 0902 	rsb	r9, r6, #2
 80146f4:	6122      	str	r2, [r4, #16]
 80146f6:	4649      	mov	r1, r9
 80146f8:	4620      	mov	r0, r4
 80146fa:	f7fa fcbf 	bl	800f07c <ucdr_check_final_buffer_behavior>
 80146fe:	2800      	cmp	r0, #0
 8014700:	d034      	beq.n	801476c <ucdr_deserialize_uint16_t+0xb0>
 8014702:	7d23      	ldrb	r3, [r4, #20]
 8014704:	2b01      	cmp	r3, #1
 8014706:	d042      	beq.n	801478e <ucdr_deserialize_uint16_t+0xd2>
 8014708:	787b      	ldrb	r3, [r7, #1]
 801470a:	702b      	strb	r3, [r5, #0]
 801470c:	2e00      	cmp	r6, #0
 801470e:	d03a      	beq.n	8014786 <ucdr_deserialize_uint16_t+0xca>
 8014710:	783b      	ldrb	r3, [r7, #0]
 8014712:	706b      	strb	r3, [r5, #1]
 8014714:	6923      	ldr	r3, [r4, #16]
 8014716:	68a2      	ldr	r2, [r4, #8]
 8014718:	7da0      	ldrb	r0, [r4, #22]
 801471a:	2102      	movs	r1, #2
 801471c:	3302      	adds	r3, #2
 801471e:	1b9b      	subs	r3, r3, r6
 8014720:	444a      	add	r2, r9
 8014722:	7561      	strb	r1, [r4, #21]
 8014724:	6123      	str	r3, [r4, #16]
 8014726:	60a2      	str	r2, [r4, #8]
 8014728:	f080 0001 	eor.w	r0, r0, #1
 801472c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014730:	2102      	movs	r1, #2
 8014732:	4620      	mov	r0, r4
 8014734:	f7fa fca2 	bl	800f07c <ucdr_check_final_buffer_behavior>
 8014738:	b180      	cbz	r0, 801475c <ucdr_deserialize_uint16_t+0xa0>
 801473a:	7d23      	ldrb	r3, [r4, #20]
 801473c:	2b01      	cmp	r3, #1
 801473e:	68a3      	ldr	r3, [r4, #8]
 8014740:	d011      	beq.n	8014766 <ucdr_deserialize_uint16_t+0xaa>
 8014742:	785b      	ldrb	r3, [r3, #1]
 8014744:	702b      	strb	r3, [r5, #0]
 8014746:	68a3      	ldr	r3, [r4, #8]
 8014748:	781b      	ldrb	r3, [r3, #0]
 801474a:	706b      	strb	r3, [r5, #1]
 801474c:	68a2      	ldr	r2, [r4, #8]
 801474e:	6923      	ldr	r3, [r4, #16]
 8014750:	3202      	adds	r2, #2
 8014752:	3302      	adds	r3, #2
 8014754:	2102      	movs	r1, #2
 8014756:	60a2      	str	r2, [r4, #8]
 8014758:	6123      	str	r3, [r4, #16]
 801475a:	7561      	strb	r1, [r4, #21]
 801475c:	7da0      	ldrb	r0, [r4, #22]
 801475e:	f080 0001 	eor.w	r0, r0, #1
 8014762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014766:	881b      	ldrh	r3, [r3, #0]
 8014768:	802b      	strh	r3, [r5, #0]
 801476a:	e7ef      	b.n	801474c <ucdr_deserialize_uint16_t+0x90>
 801476c:	68a2      	ldr	r2, [r4, #8]
 801476e:	6923      	ldr	r3, [r4, #16]
 8014770:	7da0      	ldrb	r0, [r4, #22]
 8014772:	f884 8015 	strb.w	r8, [r4, #21]
 8014776:	1b92      	subs	r2, r2, r6
 8014778:	1b9b      	subs	r3, r3, r6
 801477a:	60a2      	str	r2, [r4, #8]
 801477c:	6123      	str	r3, [r4, #16]
 801477e:	f080 0001 	eor.w	r0, r0, #1
 8014782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014786:	68a3      	ldr	r3, [r4, #8]
 8014788:	781b      	ldrb	r3, [r3, #0]
 801478a:	706b      	strb	r3, [r5, #1]
 801478c:	e7c2      	b.n	8014714 <ucdr_deserialize_uint16_t+0x58>
 801478e:	4639      	mov	r1, r7
 8014790:	4632      	mov	r2, r6
 8014792:	4628      	mov	r0, r5
 8014794:	f003 f831 	bl	80177fa <memcpy>
 8014798:	68a1      	ldr	r1, [r4, #8]
 801479a:	464a      	mov	r2, r9
 801479c:	19a8      	adds	r0, r5, r6
 801479e:	f003 f82c 	bl	80177fa <memcpy>
 80147a2:	e7b7      	b.n	8014714 <ucdr_deserialize_uint16_t+0x58>

080147a4 <ucdr_deserialize_endian_uint16_t>:
 80147a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80147a8:	460e      	mov	r6, r1
 80147aa:	2102      	movs	r1, #2
 80147ac:	4604      	mov	r4, r0
 80147ae:	4615      	mov	r5, r2
 80147b0:	f7fa fcb6 	bl	800f120 <ucdr_buffer_alignment>
 80147b4:	4601      	mov	r1, r0
 80147b6:	4620      	mov	r0, r4
 80147b8:	f894 9015 	ldrb.w	r9, [r4, #21]
 80147bc:	f7fa fcf4 	bl	800f1a8 <ucdr_advance_buffer>
 80147c0:	4620      	mov	r0, r4
 80147c2:	2102      	movs	r1, #2
 80147c4:	f7fa fc4e 	bl	800f064 <ucdr_check_buffer_available_for>
 80147c8:	bb70      	cbnz	r0, 8014828 <ucdr_deserialize_endian_uint16_t+0x84>
 80147ca:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 80147ce:	4547      	cmp	r7, r8
 80147d0:	d925      	bls.n	801481e <ucdr_deserialize_endian_uint16_t+0x7a>
 80147d2:	6922      	ldr	r2, [r4, #16]
 80147d4:	60a7      	str	r7, [r4, #8]
 80147d6:	eba7 0708 	sub.w	r7, r7, r8
 80147da:	443a      	add	r2, r7
 80147dc:	f1c7 0a02 	rsb	sl, r7, #2
 80147e0:	6122      	str	r2, [r4, #16]
 80147e2:	4651      	mov	r1, sl
 80147e4:	4620      	mov	r0, r4
 80147e6:	f7fa fc49 	bl	800f07c <ucdr_check_final_buffer_behavior>
 80147ea:	2800      	cmp	r0, #0
 80147ec:	d034      	beq.n	8014858 <ucdr_deserialize_endian_uint16_t+0xb4>
 80147ee:	2e01      	cmp	r6, #1
 80147f0:	d043      	beq.n	801487a <ucdr_deserialize_endian_uint16_t+0xd6>
 80147f2:	f898 3001 	ldrb.w	r3, [r8, #1]
 80147f6:	702b      	strb	r3, [r5, #0]
 80147f8:	2f00      	cmp	r7, #0
 80147fa:	d03a      	beq.n	8014872 <ucdr_deserialize_endian_uint16_t+0xce>
 80147fc:	f898 3000 	ldrb.w	r3, [r8]
 8014800:	706b      	strb	r3, [r5, #1]
 8014802:	6923      	ldr	r3, [r4, #16]
 8014804:	68a2      	ldr	r2, [r4, #8]
 8014806:	7da0      	ldrb	r0, [r4, #22]
 8014808:	2102      	movs	r1, #2
 801480a:	3302      	adds	r3, #2
 801480c:	1bdb      	subs	r3, r3, r7
 801480e:	4452      	add	r2, sl
 8014810:	7561      	strb	r1, [r4, #21]
 8014812:	6123      	str	r3, [r4, #16]
 8014814:	60a2      	str	r2, [r4, #8]
 8014816:	f080 0001 	eor.w	r0, r0, #1
 801481a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801481e:	2102      	movs	r1, #2
 8014820:	4620      	mov	r0, r4
 8014822:	f7fa fc2b 	bl	800f07c <ucdr_check_final_buffer_behavior>
 8014826:	b178      	cbz	r0, 8014848 <ucdr_deserialize_endian_uint16_t+0xa4>
 8014828:	2e01      	cmp	r6, #1
 801482a:	68a3      	ldr	r3, [r4, #8]
 801482c:	d011      	beq.n	8014852 <ucdr_deserialize_endian_uint16_t+0xae>
 801482e:	785b      	ldrb	r3, [r3, #1]
 8014830:	702b      	strb	r3, [r5, #0]
 8014832:	68a3      	ldr	r3, [r4, #8]
 8014834:	781b      	ldrb	r3, [r3, #0]
 8014836:	706b      	strb	r3, [r5, #1]
 8014838:	68a2      	ldr	r2, [r4, #8]
 801483a:	6923      	ldr	r3, [r4, #16]
 801483c:	3202      	adds	r2, #2
 801483e:	3302      	adds	r3, #2
 8014840:	2102      	movs	r1, #2
 8014842:	60a2      	str	r2, [r4, #8]
 8014844:	6123      	str	r3, [r4, #16]
 8014846:	7561      	strb	r1, [r4, #21]
 8014848:	7da0      	ldrb	r0, [r4, #22]
 801484a:	f080 0001 	eor.w	r0, r0, #1
 801484e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014852:	881b      	ldrh	r3, [r3, #0]
 8014854:	802b      	strh	r3, [r5, #0]
 8014856:	e7ef      	b.n	8014838 <ucdr_deserialize_endian_uint16_t+0x94>
 8014858:	68a2      	ldr	r2, [r4, #8]
 801485a:	6923      	ldr	r3, [r4, #16]
 801485c:	7da0      	ldrb	r0, [r4, #22]
 801485e:	f884 9015 	strb.w	r9, [r4, #21]
 8014862:	1bd2      	subs	r2, r2, r7
 8014864:	1bdb      	subs	r3, r3, r7
 8014866:	60a2      	str	r2, [r4, #8]
 8014868:	6123      	str	r3, [r4, #16]
 801486a:	f080 0001 	eor.w	r0, r0, #1
 801486e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014872:	68a3      	ldr	r3, [r4, #8]
 8014874:	781b      	ldrb	r3, [r3, #0]
 8014876:	706b      	strb	r3, [r5, #1]
 8014878:	e7c3      	b.n	8014802 <ucdr_deserialize_endian_uint16_t+0x5e>
 801487a:	4641      	mov	r1, r8
 801487c:	463a      	mov	r2, r7
 801487e:	4628      	mov	r0, r5
 8014880:	f002 ffbb 	bl	80177fa <memcpy>
 8014884:	68a1      	ldr	r1, [r4, #8]
 8014886:	4652      	mov	r2, sl
 8014888:	19e8      	adds	r0, r5, r7
 801488a:	f002 ffb6 	bl	80177fa <memcpy>
 801488e:	e7b8      	b.n	8014802 <ucdr_deserialize_endian_uint16_t+0x5e>

08014890 <ucdr_serialize_uint32_t>:
 8014890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014894:	b082      	sub	sp, #8
 8014896:	4604      	mov	r4, r0
 8014898:	9101      	str	r1, [sp, #4]
 801489a:	2104      	movs	r1, #4
 801489c:	f7fa fc40 	bl	800f120 <ucdr_buffer_alignment>
 80148a0:	4601      	mov	r1, r0
 80148a2:	4620      	mov	r0, r4
 80148a4:	7d67      	ldrb	r7, [r4, #21]
 80148a6:	f7fa fc7f 	bl	800f1a8 <ucdr_advance_buffer>
 80148aa:	4620      	mov	r0, r4
 80148ac:	2104      	movs	r1, #4
 80148ae:	f7fa fbd9 	bl	800f064 <ucdr_check_buffer_available_for>
 80148b2:	2800      	cmp	r0, #0
 80148b4:	d139      	bne.n	801492a <ucdr_serialize_uint32_t+0x9a>
 80148b6:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 80148ba:	42ae      	cmp	r6, r5
 80148bc:	d930      	bls.n	8014920 <ucdr_serialize_uint32_t+0x90>
 80148be:	6922      	ldr	r2, [r4, #16]
 80148c0:	60a6      	str	r6, [r4, #8]
 80148c2:	1b76      	subs	r6, r6, r5
 80148c4:	4432      	add	r2, r6
 80148c6:	f1c6 0804 	rsb	r8, r6, #4
 80148ca:	6122      	str	r2, [r4, #16]
 80148cc:	4641      	mov	r1, r8
 80148ce:	4620      	mov	r0, r4
 80148d0:	f7fa fbd4 	bl	800f07c <ucdr_check_final_buffer_behavior>
 80148d4:	2800      	cmp	r0, #0
 80148d6:	d04c      	beq.n	8014972 <ucdr_serialize_uint32_t+0xe2>
 80148d8:	7d23      	ldrb	r3, [r4, #20]
 80148da:	2b01      	cmp	r3, #1
 80148dc:	d063      	beq.n	80149a6 <ucdr_serialize_uint32_t+0x116>
 80148de:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80148e2:	702b      	strb	r3, [r5, #0]
 80148e4:	2e00      	cmp	r6, #0
 80148e6:	d051      	beq.n	801498c <ucdr_serialize_uint32_t+0xfc>
 80148e8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80148ec:	706b      	strb	r3, [r5, #1]
 80148ee:	2e01      	cmp	r6, #1
 80148f0:	d050      	beq.n	8014994 <ucdr_serialize_uint32_t+0x104>
 80148f2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80148f6:	70ab      	strb	r3, [r5, #2]
 80148f8:	2e02      	cmp	r6, #2
 80148fa:	d04f      	beq.n	801499c <ucdr_serialize_uint32_t+0x10c>
 80148fc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8014900:	70eb      	strb	r3, [r5, #3]
 8014902:	6923      	ldr	r3, [r4, #16]
 8014904:	68a2      	ldr	r2, [r4, #8]
 8014906:	7da0      	ldrb	r0, [r4, #22]
 8014908:	3304      	adds	r3, #4
 801490a:	1b9b      	subs	r3, r3, r6
 801490c:	4442      	add	r2, r8
 801490e:	2104      	movs	r1, #4
 8014910:	f080 0001 	eor.w	r0, r0, #1
 8014914:	6123      	str	r3, [r4, #16]
 8014916:	60a2      	str	r2, [r4, #8]
 8014918:	7561      	strb	r1, [r4, #21]
 801491a:	b002      	add	sp, #8
 801491c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014920:	2104      	movs	r1, #4
 8014922:	4620      	mov	r0, r4
 8014924:	f7fa fbaa 	bl	800f07c <ucdr_check_final_buffer_behavior>
 8014928:	b1d0      	cbz	r0, 8014960 <ucdr_serialize_uint32_t+0xd0>
 801492a:	7d23      	ldrb	r3, [r4, #20]
 801492c:	2b01      	cmp	r3, #1
 801492e:	68a3      	ldr	r3, [r4, #8]
 8014930:	d01c      	beq.n	801496c <ucdr_serialize_uint32_t+0xdc>
 8014932:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014936:	701a      	strb	r2, [r3, #0]
 8014938:	68a3      	ldr	r3, [r4, #8]
 801493a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801493e:	705a      	strb	r2, [r3, #1]
 8014940:	68a3      	ldr	r3, [r4, #8]
 8014942:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8014946:	709a      	strb	r2, [r3, #2]
 8014948:	68a3      	ldr	r3, [r4, #8]
 801494a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801494e:	70da      	strb	r2, [r3, #3]
 8014950:	68a2      	ldr	r2, [r4, #8]
 8014952:	6923      	ldr	r3, [r4, #16]
 8014954:	3204      	adds	r2, #4
 8014956:	3304      	adds	r3, #4
 8014958:	2104      	movs	r1, #4
 801495a:	60a2      	str	r2, [r4, #8]
 801495c:	6123      	str	r3, [r4, #16]
 801495e:	7561      	strb	r1, [r4, #21]
 8014960:	7da0      	ldrb	r0, [r4, #22]
 8014962:	f080 0001 	eor.w	r0, r0, #1
 8014966:	b002      	add	sp, #8
 8014968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801496c:	9a01      	ldr	r2, [sp, #4]
 801496e:	601a      	str	r2, [r3, #0]
 8014970:	e7ee      	b.n	8014950 <ucdr_serialize_uint32_t+0xc0>
 8014972:	68a2      	ldr	r2, [r4, #8]
 8014974:	6923      	ldr	r3, [r4, #16]
 8014976:	7da0      	ldrb	r0, [r4, #22]
 8014978:	7567      	strb	r7, [r4, #21]
 801497a:	1b92      	subs	r2, r2, r6
 801497c:	1b9b      	subs	r3, r3, r6
 801497e:	f080 0001 	eor.w	r0, r0, #1
 8014982:	60a2      	str	r2, [r4, #8]
 8014984:	6123      	str	r3, [r4, #16]
 8014986:	b002      	add	sp, #8
 8014988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801498c:	68a3      	ldr	r3, [r4, #8]
 801498e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014992:	701a      	strb	r2, [r3, #0]
 8014994:	68a3      	ldr	r3, [r4, #8]
 8014996:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801499a:	701a      	strb	r2, [r3, #0]
 801499c:	68a3      	ldr	r3, [r4, #8]
 801499e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80149a2:	701a      	strb	r2, [r3, #0]
 80149a4:	e7ad      	b.n	8014902 <ucdr_serialize_uint32_t+0x72>
 80149a6:	4628      	mov	r0, r5
 80149a8:	ad01      	add	r5, sp, #4
 80149aa:	4629      	mov	r1, r5
 80149ac:	4632      	mov	r2, r6
 80149ae:	f002 ff24 	bl	80177fa <memcpy>
 80149b2:	68a0      	ldr	r0, [r4, #8]
 80149b4:	4642      	mov	r2, r8
 80149b6:	19a9      	adds	r1, r5, r6
 80149b8:	f002 ff1f 	bl	80177fa <memcpy>
 80149bc:	e7a1      	b.n	8014902 <ucdr_serialize_uint32_t+0x72>
 80149be:	bf00      	nop

080149c0 <ucdr_serialize_endian_uint32_t>:
 80149c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80149c4:	b083      	sub	sp, #12
 80149c6:	460d      	mov	r5, r1
 80149c8:	2104      	movs	r1, #4
 80149ca:	4604      	mov	r4, r0
 80149cc:	9201      	str	r2, [sp, #4]
 80149ce:	f7fa fba7 	bl	800f120 <ucdr_buffer_alignment>
 80149d2:	4601      	mov	r1, r0
 80149d4:	4620      	mov	r0, r4
 80149d6:	f894 8015 	ldrb.w	r8, [r4, #21]
 80149da:	f7fa fbe5 	bl	800f1a8 <ucdr_advance_buffer>
 80149de:	4620      	mov	r0, r4
 80149e0:	2104      	movs	r1, #4
 80149e2:	f7fa fb3f 	bl	800f064 <ucdr_check_buffer_available_for>
 80149e6:	2800      	cmp	r0, #0
 80149e8:	d138      	bne.n	8014a5c <ucdr_serialize_endian_uint32_t+0x9c>
 80149ea:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80149ee:	42b7      	cmp	r7, r6
 80149f0:	d92f      	bls.n	8014a52 <ucdr_serialize_endian_uint32_t+0x92>
 80149f2:	6922      	ldr	r2, [r4, #16]
 80149f4:	60a7      	str	r7, [r4, #8]
 80149f6:	1bbf      	subs	r7, r7, r6
 80149f8:	443a      	add	r2, r7
 80149fa:	f1c7 0904 	rsb	r9, r7, #4
 80149fe:	6122      	str	r2, [r4, #16]
 8014a00:	4649      	mov	r1, r9
 8014a02:	4620      	mov	r0, r4
 8014a04:	f7fa fb3a 	bl	800f07c <ucdr_check_final_buffer_behavior>
 8014a08:	2800      	cmp	r0, #0
 8014a0a:	d04a      	beq.n	8014aa2 <ucdr_serialize_endian_uint32_t+0xe2>
 8014a0c:	2d01      	cmp	r5, #1
 8014a0e:	d063      	beq.n	8014ad8 <ucdr_serialize_endian_uint32_t+0x118>
 8014a10:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014a14:	7033      	strb	r3, [r6, #0]
 8014a16:	2f00      	cmp	r7, #0
 8014a18:	d051      	beq.n	8014abe <ucdr_serialize_endian_uint32_t+0xfe>
 8014a1a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014a1e:	7073      	strb	r3, [r6, #1]
 8014a20:	2f01      	cmp	r7, #1
 8014a22:	d050      	beq.n	8014ac6 <ucdr_serialize_endian_uint32_t+0x106>
 8014a24:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8014a28:	70b3      	strb	r3, [r6, #2]
 8014a2a:	2f02      	cmp	r7, #2
 8014a2c:	d04f      	beq.n	8014ace <ucdr_serialize_endian_uint32_t+0x10e>
 8014a2e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8014a32:	70f3      	strb	r3, [r6, #3]
 8014a34:	6923      	ldr	r3, [r4, #16]
 8014a36:	68a2      	ldr	r2, [r4, #8]
 8014a38:	7da0      	ldrb	r0, [r4, #22]
 8014a3a:	3304      	adds	r3, #4
 8014a3c:	1bdb      	subs	r3, r3, r7
 8014a3e:	444a      	add	r2, r9
 8014a40:	2104      	movs	r1, #4
 8014a42:	f080 0001 	eor.w	r0, r0, #1
 8014a46:	6123      	str	r3, [r4, #16]
 8014a48:	60a2      	str	r2, [r4, #8]
 8014a4a:	7561      	strb	r1, [r4, #21]
 8014a4c:	b003      	add	sp, #12
 8014a4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a52:	2104      	movs	r1, #4
 8014a54:	4620      	mov	r0, r4
 8014a56:	f7fa fb11 	bl	800f07c <ucdr_check_final_buffer_behavior>
 8014a5a:	b1c8      	cbz	r0, 8014a90 <ucdr_serialize_endian_uint32_t+0xd0>
 8014a5c:	2d01      	cmp	r5, #1
 8014a5e:	68a3      	ldr	r3, [r4, #8]
 8014a60:	d01c      	beq.n	8014a9c <ucdr_serialize_endian_uint32_t+0xdc>
 8014a62:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014a66:	701a      	strb	r2, [r3, #0]
 8014a68:	68a3      	ldr	r3, [r4, #8]
 8014a6a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014a6e:	705a      	strb	r2, [r3, #1]
 8014a70:	68a3      	ldr	r3, [r4, #8]
 8014a72:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8014a76:	709a      	strb	r2, [r3, #2]
 8014a78:	68a3      	ldr	r3, [r4, #8]
 8014a7a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8014a7e:	70da      	strb	r2, [r3, #3]
 8014a80:	68a2      	ldr	r2, [r4, #8]
 8014a82:	6923      	ldr	r3, [r4, #16]
 8014a84:	3204      	adds	r2, #4
 8014a86:	3304      	adds	r3, #4
 8014a88:	2104      	movs	r1, #4
 8014a8a:	60a2      	str	r2, [r4, #8]
 8014a8c:	6123      	str	r3, [r4, #16]
 8014a8e:	7561      	strb	r1, [r4, #21]
 8014a90:	7da0      	ldrb	r0, [r4, #22]
 8014a92:	f080 0001 	eor.w	r0, r0, #1
 8014a96:	b003      	add	sp, #12
 8014a98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a9c:	9a01      	ldr	r2, [sp, #4]
 8014a9e:	601a      	str	r2, [r3, #0]
 8014aa0:	e7ee      	b.n	8014a80 <ucdr_serialize_endian_uint32_t+0xc0>
 8014aa2:	68a2      	ldr	r2, [r4, #8]
 8014aa4:	6923      	ldr	r3, [r4, #16]
 8014aa6:	7da0      	ldrb	r0, [r4, #22]
 8014aa8:	f884 8015 	strb.w	r8, [r4, #21]
 8014aac:	1bd2      	subs	r2, r2, r7
 8014aae:	1bdb      	subs	r3, r3, r7
 8014ab0:	f080 0001 	eor.w	r0, r0, #1
 8014ab4:	60a2      	str	r2, [r4, #8]
 8014ab6:	6123      	str	r3, [r4, #16]
 8014ab8:	b003      	add	sp, #12
 8014aba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014abe:	68a3      	ldr	r3, [r4, #8]
 8014ac0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014ac4:	701a      	strb	r2, [r3, #0]
 8014ac6:	68a3      	ldr	r3, [r4, #8]
 8014ac8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8014acc:	701a      	strb	r2, [r3, #0]
 8014ace:	68a3      	ldr	r3, [r4, #8]
 8014ad0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8014ad4:	701a      	strb	r2, [r3, #0]
 8014ad6:	e7ad      	b.n	8014a34 <ucdr_serialize_endian_uint32_t+0x74>
 8014ad8:	ad01      	add	r5, sp, #4
 8014ada:	4629      	mov	r1, r5
 8014adc:	463a      	mov	r2, r7
 8014ade:	4630      	mov	r0, r6
 8014ae0:	f002 fe8b 	bl	80177fa <memcpy>
 8014ae4:	68a0      	ldr	r0, [r4, #8]
 8014ae6:	464a      	mov	r2, r9
 8014ae8:	19e9      	adds	r1, r5, r7
 8014aea:	f002 fe86 	bl	80177fa <memcpy>
 8014aee:	e7a1      	b.n	8014a34 <ucdr_serialize_endian_uint32_t+0x74>

08014af0 <ucdr_deserialize_uint32_t>:
 8014af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014af4:	460d      	mov	r5, r1
 8014af6:	2104      	movs	r1, #4
 8014af8:	4604      	mov	r4, r0
 8014afa:	f7fa fb11 	bl	800f120 <ucdr_buffer_alignment>
 8014afe:	4601      	mov	r1, r0
 8014b00:	4620      	mov	r0, r4
 8014b02:	f894 8015 	ldrb.w	r8, [r4, #21]
 8014b06:	f7fa fb4f 	bl	800f1a8 <ucdr_advance_buffer>
 8014b0a:	4620      	mov	r0, r4
 8014b0c:	2104      	movs	r1, #4
 8014b0e:	f7fa faa9 	bl	800f064 <ucdr_check_buffer_available_for>
 8014b12:	2800      	cmp	r0, #0
 8014b14:	d138      	bne.n	8014b88 <ucdr_deserialize_uint32_t+0x98>
 8014b16:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8014b1a:	42b7      	cmp	r7, r6
 8014b1c:	d92f      	bls.n	8014b7e <ucdr_deserialize_uint32_t+0x8e>
 8014b1e:	6922      	ldr	r2, [r4, #16]
 8014b20:	60a7      	str	r7, [r4, #8]
 8014b22:	1bbf      	subs	r7, r7, r6
 8014b24:	443a      	add	r2, r7
 8014b26:	f1c7 0904 	rsb	r9, r7, #4
 8014b2a:	6122      	str	r2, [r4, #16]
 8014b2c:	4649      	mov	r1, r9
 8014b2e:	4620      	mov	r0, r4
 8014b30:	f7fa faa4 	bl	800f07c <ucdr_check_final_buffer_behavior>
 8014b34:	2800      	cmp	r0, #0
 8014b36:	d046      	beq.n	8014bc6 <ucdr_deserialize_uint32_t+0xd6>
 8014b38:	7d23      	ldrb	r3, [r4, #20]
 8014b3a:	2b01      	cmp	r3, #1
 8014b3c:	d05c      	beq.n	8014bf8 <ucdr_deserialize_uint32_t+0x108>
 8014b3e:	78f3      	ldrb	r3, [r6, #3]
 8014b40:	702b      	strb	r3, [r5, #0]
 8014b42:	2f00      	cmp	r7, #0
 8014b44:	d04c      	beq.n	8014be0 <ucdr_deserialize_uint32_t+0xf0>
 8014b46:	78b3      	ldrb	r3, [r6, #2]
 8014b48:	706b      	strb	r3, [r5, #1]
 8014b4a:	2f01      	cmp	r7, #1
 8014b4c:	f105 0302 	add.w	r3, r5, #2
 8014b50:	d04a      	beq.n	8014be8 <ucdr_deserialize_uint32_t+0xf8>
 8014b52:	7873      	ldrb	r3, [r6, #1]
 8014b54:	70ab      	strb	r3, [r5, #2]
 8014b56:	2f02      	cmp	r7, #2
 8014b58:	f105 0303 	add.w	r3, r5, #3
 8014b5c:	d048      	beq.n	8014bf0 <ucdr_deserialize_uint32_t+0x100>
 8014b5e:	7833      	ldrb	r3, [r6, #0]
 8014b60:	70eb      	strb	r3, [r5, #3]
 8014b62:	6923      	ldr	r3, [r4, #16]
 8014b64:	68a2      	ldr	r2, [r4, #8]
 8014b66:	7da0      	ldrb	r0, [r4, #22]
 8014b68:	2104      	movs	r1, #4
 8014b6a:	3304      	adds	r3, #4
 8014b6c:	1bdb      	subs	r3, r3, r7
 8014b6e:	444a      	add	r2, r9
 8014b70:	7561      	strb	r1, [r4, #21]
 8014b72:	6123      	str	r3, [r4, #16]
 8014b74:	60a2      	str	r2, [r4, #8]
 8014b76:	f080 0001 	eor.w	r0, r0, #1
 8014b7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014b7e:	2104      	movs	r1, #4
 8014b80:	4620      	mov	r0, r4
 8014b82:	f7fa fa7b 	bl	800f07c <ucdr_check_final_buffer_behavior>
 8014b86:	b1b0      	cbz	r0, 8014bb6 <ucdr_deserialize_uint32_t+0xc6>
 8014b88:	7d23      	ldrb	r3, [r4, #20]
 8014b8a:	2b01      	cmp	r3, #1
 8014b8c:	68a3      	ldr	r3, [r4, #8]
 8014b8e:	d017      	beq.n	8014bc0 <ucdr_deserialize_uint32_t+0xd0>
 8014b90:	78db      	ldrb	r3, [r3, #3]
 8014b92:	702b      	strb	r3, [r5, #0]
 8014b94:	68a3      	ldr	r3, [r4, #8]
 8014b96:	789b      	ldrb	r3, [r3, #2]
 8014b98:	706b      	strb	r3, [r5, #1]
 8014b9a:	68a3      	ldr	r3, [r4, #8]
 8014b9c:	785b      	ldrb	r3, [r3, #1]
 8014b9e:	70ab      	strb	r3, [r5, #2]
 8014ba0:	68a3      	ldr	r3, [r4, #8]
 8014ba2:	781b      	ldrb	r3, [r3, #0]
 8014ba4:	70eb      	strb	r3, [r5, #3]
 8014ba6:	68a2      	ldr	r2, [r4, #8]
 8014ba8:	6923      	ldr	r3, [r4, #16]
 8014baa:	3204      	adds	r2, #4
 8014bac:	3304      	adds	r3, #4
 8014bae:	2104      	movs	r1, #4
 8014bb0:	60a2      	str	r2, [r4, #8]
 8014bb2:	6123      	str	r3, [r4, #16]
 8014bb4:	7561      	strb	r1, [r4, #21]
 8014bb6:	7da0      	ldrb	r0, [r4, #22]
 8014bb8:	f080 0001 	eor.w	r0, r0, #1
 8014bbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014bc0:	681b      	ldr	r3, [r3, #0]
 8014bc2:	602b      	str	r3, [r5, #0]
 8014bc4:	e7ef      	b.n	8014ba6 <ucdr_deserialize_uint32_t+0xb6>
 8014bc6:	68a2      	ldr	r2, [r4, #8]
 8014bc8:	6923      	ldr	r3, [r4, #16]
 8014bca:	7da0      	ldrb	r0, [r4, #22]
 8014bcc:	f884 8015 	strb.w	r8, [r4, #21]
 8014bd0:	1bd2      	subs	r2, r2, r7
 8014bd2:	1bdb      	subs	r3, r3, r7
 8014bd4:	60a2      	str	r2, [r4, #8]
 8014bd6:	6123      	str	r3, [r4, #16]
 8014bd8:	f080 0001 	eor.w	r0, r0, #1
 8014bdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014be0:	68a3      	ldr	r3, [r4, #8]
 8014be2:	789b      	ldrb	r3, [r3, #2]
 8014be4:	706b      	strb	r3, [r5, #1]
 8014be6:	1cab      	adds	r3, r5, #2
 8014be8:	68a2      	ldr	r2, [r4, #8]
 8014bea:	7852      	ldrb	r2, [r2, #1]
 8014bec:	f803 2b01 	strb.w	r2, [r3], #1
 8014bf0:	68a2      	ldr	r2, [r4, #8]
 8014bf2:	7812      	ldrb	r2, [r2, #0]
 8014bf4:	701a      	strb	r2, [r3, #0]
 8014bf6:	e7b4      	b.n	8014b62 <ucdr_deserialize_uint32_t+0x72>
 8014bf8:	4631      	mov	r1, r6
 8014bfa:	463a      	mov	r2, r7
 8014bfc:	4628      	mov	r0, r5
 8014bfe:	f002 fdfc 	bl	80177fa <memcpy>
 8014c02:	68a1      	ldr	r1, [r4, #8]
 8014c04:	464a      	mov	r2, r9
 8014c06:	19e8      	adds	r0, r5, r7
 8014c08:	f002 fdf7 	bl	80177fa <memcpy>
 8014c0c:	e7a9      	b.n	8014b62 <ucdr_deserialize_uint32_t+0x72>
 8014c0e:	bf00      	nop

08014c10 <ucdr_deserialize_endian_uint32_t>:
 8014c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014c14:	460e      	mov	r6, r1
 8014c16:	2104      	movs	r1, #4
 8014c18:	4604      	mov	r4, r0
 8014c1a:	4615      	mov	r5, r2
 8014c1c:	f7fa fa80 	bl	800f120 <ucdr_buffer_alignment>
 8014c20:	4601      	mov	r1, r0
 8014c22:	4620      	mov	r0, r4
 8014c24:	f894 9015 	ldrb.w	r9, [r4, #21]
 8014c28:	f7fa fabe 	bl	800f1a8 <ucdr_advance_buffer>
 8014c2c:	4620      	mov	r0, r4
 8014c2e:	2104      	movs	r1, #4
 8014c30:	f7fa fa18 	bl	800f064 <ucdr_check_buffer_available_for>
 8014c34:	2800      	cmp	r0, #0
 8014c36:	d13c      	bne.n	8014cb2 <ucdr_deserialize_endian_uint32_t+0xa2>
 8014c38:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8014c3c:	42bb      	cmp	r3, r7
 8014c3e:	d933      	bls.n	8014ca8 <ucdr_deserialize_endian_uint32_t+0x98>
 8014c40:	6922      	ldr	r2, [r4, #16]
 8014c42:	60a3      	str	r3, [r4, #8]
 8014c44:	eba3 0807 	sub.w	r8, r3, r7
 8014c48:	4442      	add	r2, r8
 8014c4a:	f1c8 0a04 	rsb	sl, r8, #4
 8014c4e:	6122      	str	r2, [r4, #16]
 8014c50:	4651      	mov	r1, sl
 8014c52:	4620      	mov	r0, r4
 8014c54:	f7fa fa12 	bl	800f07c <ucdr_check_final_buffer_behavior>
 8014c58:	2800      	cmp	r0, #0
 8014c5a:	d048      	beq.n	8014cee <ucdr_deserialize_endian_uint32_t+0xde>
 8014c5c:	2e01      	cmp	r6, #1
 8014c5e:	d061      	beq.n	8014d24 <ucdr_deserialize_endian_uint32_t+0x114>
 8014c60:	78fb      	ldrb	r3, [r7, #3]
 8014c62:	702b      	strb	r3, [r5, #0]
 8014c64:	f1b8 0f00 	cmp.w	r8, #0
 8014c68:	d050      	beq.n	8014d0c <ucdr_deserialize_endian_uint32_t+0xfc>
 8014c6a:	78bb      	ldrb	r3, [r7, #2]
 8014c6c:	706b      	strb	r3, [r5, #1]
 8014c6e:	f1b8 0f01 	cmp.w	r8, #1
 8014c72:	f105 0302 	add.w	r3, r5, #2
 8014c76:	d04d      	beq.n	8014d14 <ucdr_deserialize_endian_uint32_t+0x104>
 8014c78:	787b      	ldrb	r3, [r7, #1]
 8014c7a:	70ab      	strb	r3, [r5, #2]
 8014c7c:	f1b8 0f02 	cmp.w	r8, #2
 8014c80:	f105 0303 	add.w	r3, r5, #3
 8014c84:	d04a      	beq.n	8014d1c <ucdr_deserialize_endian_uint32_t+0x10c>
 8014c86:	783b      	ldrb	r3, [r7, #0]
 8014c88:	70eb      	strb	r3, [r5, #3]
 8014c8a:	6923      	ldr	r3, [r4, #16]
 8014c8c:	68a2      	ldr	r2, [r4, #8]
 8014c8e:	7da0      	ldrb	r0, [r4, #22]
 8014c90:	2104      	movs	r1, #4
 8014c92:	3304      	adds	r3, #4
 8014c94:	eba3 0308 	sub.w	r3, r3, r8
 8014c98:	4452      	add	r2, sl
 8014c9a:	7561      	strb	r1, [r4, #21]
 8014c9c:	6123      	str	r3, [r4, #16]
 8014c9e:	60a2      	str	r2, [r4, #8]
 8014ca0:	f080 0001 	eor.w	r0, r0, #1
 8014ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014ca8:	2104      	movs	r1, #4
 8014caa:	4620      	mov	r0, r4
 8014cac:	f7fa f9e6 	bl	800f07c <ucdr_check_final_buffer_behavior>
 8014cb0:	b1a8      	cbz	r0, 8014cde <ucdr_deserialize_endian_uint32_t+0xce>
 8014cb2:	2e01      	cmp	r6, #1
 8014cb4:	68a3      	ldr	r3, [r4, #8]
 8014cb6:	d017      	beq.n	8014ce8 <ucdr_deserialize_endian_uint32_t+0xd8>
 8014cb8:	78db      	ldrb	r3, [r3, #3]
 8014cba:	702b      	strb	r3, [r5, #0]
 8014cbc:	68a3      	ldr	r3, [r4, #8]
 8014cbe:	789b      	ldrb	r3, [r3, #2]
 8014cc0:	706b      	strb	r3, [r5, #1]
 8014cc2:	68a3      	ldr	r3, [r4, #8]
 8014cc4:	785b      	ldrb	r3, [r3, #1]
 8014cc6:	70ab      	strb	r3, [r5, #2]
 8014cc8:	68a3      	ldr	r3, [r4, #8]
 8014cca:	781b      	ldrb	r3, [r3, #0]
 8014ccc:	70eb      	strb	r3, [r5, #3]
 8014cce:	68a2      	ldr	r2, [r4, #8]
 8014cd0:	6923      	ldr	r3, [r4, #16]
 8014cd2:	3204      	adds	r2, #4
 8014cd4:	3304      	adds	r3, #4
 8014cd6:	2104      	movs	r1, #4
 8014cd8:	60a2      	str	r2, [r4, #8]
 8014cda:	6123      	str	r3, [r4, #16]
 8014cdc:	7561      	strb	r1, [r4, #21]
 8014cde:	7da0      	ldrb	r0, [r4, #22]
 8014ce0:	f080 0001 	eor.w	r0, r0, #1
 8014ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014ce8:	681b      	ldr	r3, [r3, #0]
 8014cea:	602b      	str	r3, [r5, #0]
 8014cec:	e7ef      	b.n	8014cce <ucdr_deserialize_endian_uint32_t+0xbe>
 8014cee:	68a2      	ldr	r2, [r4, #8]
 8014cf0:	6923      	ldr	r3, [r4, #16]
 8014cf2:	7da0      	ldrb	r0, [r4, #22]
 8014cf4:	f884 9015 	strb.w	r9, [r4, #21]
 8014cf8:	eba2 0208 	sub.w	r2, r2, r8
 8014cfc:	eba3 0308 	sub.w	r3, r3, r8
 8014d00:	60a2      	str	r2, [r4, #8]
 8014d02:	6123      	str	r3, [r4, #16]
 8014d04:	f080 0001 	eor.w	r0, r0, #1
 8014d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d0c:	68a3      	ldr	r3, [r4, #8]
 8014d0e:	789b      	ldrb	r3, [r3, #2]
 8014d10:	706b      	strb	r3, [r5, #1]
 8014d12:	1cab      	adds	r3, r5, #2
 8014d14:	68a2      	ldr	r2, [r4, #8]
 8014d16:	7852      	ldrb	r2, [r2, #1]
 8014d18:	f803 2b01 	strb.w	r2, [r3], #1
 8014d1c:	68a2      	ldr	r2, [r4, #8]
 8014d1e:	7812      	ldrb	r2, [r2, #0]
 8014d20:	701a      	strb	r2, [r3, #0]
 8014d22:	e7b2      	b.n	8014c8a <ucdr_deserialize_endian_uint32_t+0x7a>
 8014d24:	4639      	mov	r1, r7
 8014d26:	4642      	mov	r2, r8
 8014d28:	4628      	mov	r0, r5
 8014d2a:	f002 fd66 	bl	80177fa <memcpy>
 8014d2e:	68a1      	ldr	r1, [r4, #8]
 8014d30:	4652      	mov	r2, sl
 8014d32:	eb05 0008 	add.w	r0, r5, r8
 8014d36:	f002 fd60 	bl	80177fa <memcpy>
 8014d3a:	e7a6      	b.n	8014c8a <ucdr_deserialize_endian_uint32_t+0x7a>

08014d3c <ucdr_serialize_uint64_t>:
 8014d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d40:	2108      	movs	r1, #8
 8014d42:	b082      	sub	sp, #8
 8014d44:	4604      	mov	r4, r0
 8014d46:	e9cd 2300 	strd	r2, r3, [sp]
 8014d4a:	f7fa f9e9 	bl	800f120 <ucdr_buffer_alignment>
 8014d4e:	4601      	mov	r1, r0
 8014d50:	4620      	mov	r0, r4
 8014d52:	7d67      	ldrb	r7, [r4, #21]
 8014d54:	f7fa fa28 	bl	800f1a8 <ucdr_advance_buffer>
 8014d58:	4620      	mov	r0, r4
 8014d5a:	2108      	movs	r1, #8
 8014d5c:	f7fa f982 	bl	800f064 <ucdr_check_buffer_available_for>
 8014d60:	2800      	cmp	r0, #0
 8014d62:	d14e      	bne.n	8014e02 <ucdr_serialize_uint64_t+0xc6>
 8014d64:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 8014d68:	42b5      	cmp	r5, r6
 8014d6a:	d945      	bls.n	8014df8 <ucdr_serialize_uint64_t+0xbc>
 8014d6c:	6923      	ldr	r3, [r4, #16]
 8014d6e:	60a5      	str	r5, [r4, #8]
 8014d70:	1bad      	subs	r5, r5, r6
 8014d72:	442b      	add	r3, r5
 8014d74:	f1c5 0808 	rsb	r8, r5, #8
 8014d78:	6123      	str	r3, [r4, #16]
 8014d7a:	4641      	mov	r1, r8
 8014d7c:	4620      	mov	r0, r4
 8014d7e:	f7fa f97d 	bl	800f07c <ucdr_check_final_buffer_behavior>
 8014d82:	2800      	cmp	r0, #0
 8014d84:	d074      	beq.n	8014e70 <ucdr_serialize_uint64_t+0x134>
 8014d86:	7d23      	ldrb	r3, [r4, #20]
 8014d88:	2b01      	cmp	r3, #1
 8014d8a:	f000 809b 	beq.w	8014ec4 <ucdr_serialize_uint64_t+0x188>
 8014d8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014d92:	7033      	strb	r3, [r6, #0]
 8014d94:	2d00      	cmp	r5, #0
 8014d96:	d078      	beq.n	8014e8a <ucdr_serialize_uint64_t+0x14e>
 8014d98:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014d9c:	7073      	strb	r3, [r6, #1]
 8014d9e:	2d01      	cmp	r5, #1
 8014da0:	d077      	beq.n	8014e92 <ucdr_serialize_uint64_t+0x156>
 8014da2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8014da6:	70b3      	strb	r3, [r6, #2]
 8014da8:	2d02      	cmp	r5, #2
 8014daa:	d076      	beq.n	8014e9a <ucdr_serialize_uint64_t+0x15e>
 8014dac:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8014db0:	70f3      	strb	r3, [r6, #3]
 8014db2:	2d03      	cmp	r5, #3
 8014db4:	d075      	beq.n	8014ea2 <ucdr_serialize_uint64_t+0x166>
 8014db6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8014dba:	7133      	strb	r3, [r6, #4]
 8014dbc:	2d04      	cmp	r5, #4
 8014dbe:	d074      	beq.n	8014eaa <ucdr_serialize_uint64_t+0x16e>
 8014dc0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8014dc4:	7173      	strb	r3, [r6, #5]
 8014dc6:	2d05      	cmp	r5, #5
 8014dc8:	d073      	beq.n	8014eb2 <ucdr_serialize_uint64_t+0x176>
 8014dca:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8014dce:	71b3      	strb	r3, [r6, #6]
 8014dd0:	2d06      	cmp	r5, #6
 8014dd2:	d072      	beq.n	8014eba <ucdr_serialize_uint64_t+0x17e>
 8014dd4:	f89d 3000 	ldrb.w	r3, [sp]
 8014dd8:	71f3      	strb	r3, [r6, #7]
 8014dda:	6923      	ldr	r3, [r4, #16]
 8014ddc:	68a2      	ldr	r2, [r4, #8]
 8014dde:	7da0      	ldrb	r0, [r4, #22]
 8014de0:	3308      	adds	r3, #8
 8014de2:	1b5d      	subs	r5, r3, r5
 8014de4:	4442      	add	r2, r8
 8014de6:	2308      	movs	r3, #8
 8014de8:	f080 0001 	eor.w	r0, r0, #1
 8014dec:	6125      	str	r5, [r4, #16]
 8014dee:	60a2      	str	r2, [r4, #8]
 8014df0:	7563      	strb	r3, [r4, #21]
 8014df2:	b002      	add	sp, #8
 8014df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014df8:	2108      	movs	r1, #8
 8014dfa:	4620      	mov	r0, r4
 8014dfc:	f7fa f93e 	bl	800f07c <ucdr_check_final_buffer_behavior>
 8014e00:	b350      	cbz	r0, 8014e58 <ucdr_serialize_uint64_t+0x11c>
 8014e02:	7d23      	ldrb	r3, [r4, #20]
 8014e04:	2b01      	cmp	r3, #1
 8014e06:	d02d      	beq.n	8014e64 <ucdr_serialize_uint64_t+0x128>
 8014e08:	68a3      	ldr	r3, [r4, #8]
 8014e0a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014e0e:	701a      	strb	r2, [r3, #0]
 8014e10:	68a3      	ldr	r3, [r4, #8]
 8014e12:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014e16:	705a      	strb	r2, [r3, #1]
 8014e18:	68a3      	ldr	r3, [r4, #8]
 8014e1a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8014e1e:	709a      	strb	r2, [r3, #2]
 8014e20:	68a3      	ldr	r3, [r4, #8]
 8014e22:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8014e26:	70da      	strb	r2, [r3, #3]
 8014e28:	68a3      	ldr	r3, [r4, #8]
 8014e2a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8014e2e:	711a      	strb	r2, [r3, #4]
 8014e30:	68a3      	ldr	r3, [r4, #8]
 8014e32:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8014e36:	715a      	strb	r2, [r3, #5]
 8014e38:	68a3      	ldr	r3, [r4, #8]
 8014e3a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8014e3e:	719a      	strb	r2, [r3, #6]
 8014e40:	68a3      	ldr	r3, [r4, #8]
 8014e42:	f89d 2000 	ldrb.w	r2, [sp]
 8014e46:	71da      	strb	r2, [r3, #7]
 8014e48:	68a2      	ldr	r2, [r4, #8]
 8014e4a:	6923      	ldr	r3, [r4, #16]
 8014e4c:	3208      	adds	r2, #8
 8014e4e:	3308      	adds	r3, #8
 8014e50:	2108      	movs	r1, #8
 8014e52:	60a2      	str	r2, [r4, #8]
 8014e54:	6123      	str	r3, [r4, #16]
 8014e56:	7561      	strb	r1, [r4, #21]
 8014e58:	7da0      	ldrb	r0, [r4, #22]
 8014e5a:	f080 0001 	eor.w	r0, r0, #1
 8014e5e:	b002      	add	sp, #8
 8014e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e64:	466b      	mov	r3, sp
 8014e66:	cb03      	ldmia	r3!, {r0, r1}
 8014e68:	68a3      	ldr	r3, [r4, #8]
 8014e6a:	6018      	str	r0, [r3, #0]
 8014e6c:	6059      	str	r1, [r3, #4]
 8014e6e:	e7eb      	b.n	8014e48 <ucdr_serialize_uint64_t+0x10c>
 8014e70:	68a2      	ldr	r2, [r4, #8]
 8014e72:	6923      	ldr	r3, [r4, #16]
 8014e74:	7da0      	ldrb	r0, [r4, #22]
 8014e76:	7567      	strb	r7, [r4, #21]
 8014e78:	1b52      	subs	r2, r2, r5
 8014e7a:	f080 0001 	eor.w	r0, r0, #1
 8014e7e:	1b5d      	subs	r5, r3, r5
 8014e80:	60a2      	str	r2, [r4, #8]
 8014e82:	6125      	str	r5, [r4, #16]
 8014e84:	b002      	add	sp, #8
 8014e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e8a:	68a3      	ldr	r3, [r4, #8]
 8014e8c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014e90:	701a      	strb	r2, [r3, #0]
 8014e92:	68a3      	ldr	r3, [r4, #8]
 8014e94:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8014e98:	701a      	strb	r2, [r3, #0]
 8014e9a:	68a3      	ldr	r3, [r4, #8]
 8014e9c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8014ea0:	701a      	strb	r2, [r3, #0]
 8014ea2:	68a3      	ldr	r3, [r4, #8]
 8014ea4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8014ea8:	701a      	strb	r2, [r3, #0]
 8014eaa:	68a3      	ldr	r3, [r4, #8]
 8014eac:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8014eb0:	701a      	strb	r2, [r3, #0]
 8014eb2:	68a3      	ldr	r3, [r4, #8]
 8014eb4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8014eb8:	701a      	strb	r2, [r3, #0]
 8014eba:	68a3      	ldr	r3, [r4, #8]
 8014ebc:	f89d 2000 	ldrb.w	r2, [sp]
 8014ec0:	701a      	strb	r2, [r3, #0]
 8014ec2:	e78a      	b.n	8014dda <ucdr_serialize_uint64_t+0x9e>
 8014ec4:	4630      	mov	r0, r6
 8014ec6:	466e      	mov	r6, sp
 8014ec8:	4631      	mov	r1, r6
 8014eca:	462a      	mov	r2, r5
 8014ecc:	f002 fc95 	bl	80177fa <memcpy>
 8014ed0:	68a0      	ldr	r0, [r4, #8]
 8014ed2:	4642      	mov	r2, r8
 8014ed4:	1971      	adds	r1, r6, r5
 8014ed6:	f002 fc90 	bl	80177fa <memcpy>
 8014eda:	e77e      	b.n	8014dda <ucdr_serialize_uint64_t+0x9e>

08014edc <ucdr_serialize_int16_t>:
 8014edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ee0:	b082      	sub	sp, #8
 8014ee2:	460b      	mov	r3, r1
 8014ee4:	2102      	movs	r1, #2
 8014ee6:	4604      	mov	r4, r0
 8014ee8:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014eec:	f7fa f918 	bl	800f120 <ucdr_buffer_alignment>
 8014ef0:	4601      	mov	r1, r0
 8014ef2:	4620      	mov	r0, r4
 8014ef4:	7d67      	ldrb	r7, [r4, #21]
 8014ef6:	f7fa f957 	bl	800f1a8 <ucdr_advance_buffer>
 8014efa:	4620      	mov	r0, r4
 8014efc:	2102      	movs	r1, #2
 8014efe:	f7fa f8b1 	bl	800f064 <ucdr_check_buffer_available_for>
 8014f02:	bb78      	cbnz	r0, 8014f64 <ucdr_serialize_int16_t+0x88>
 8014f04:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 8014f08:	42b5      	cmp	r5, r6
 8014f0a:	d926      	bls.n	8014f5a <ucdr_serialize_int16_t+0x7e>
 8014f0c:	6922      	ldr	r2, [r4, #16]
 8014f0e:	60a5      	str	r5, [r4, #8]
 8014f10:	1bad      	subs	r5, r5, r6
 8014f12:	442a      	add	r2, r5
 8014f14:	f1c5 0802 	rsb	r8, r5, #2
 8014f18:	6122      	str	r2, [r4, #16]
 8014f1a:	4641      	mov	r1, r8
 8014f1c:	4620      	mov	r0, r4
 8014f1e:	f7fa f8ad 	bl	800f07c <ucdr_check_final_buffer_behavior>
 8014f22:	2800      	cmp	r0, #0
 8014f24:	d03b      	beq.n	8014f9e <ucdr_serialize_int16_t+0xc2>
 8014f26:	7d23      	ldrb	r3, [r4, #20]
 8014f28:	2b01      	cmp	r3, #1
 8014f2a:	d04a      	beq.n	8014fc2 <ucdr_serialize_int16_t+0xe6>
 8014f2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014f30:	7033      	strb	r3, [r6, #0]
 8014f32:	2d00      	cmp	r5, #0
 8014f34:	d040      	beq.n	8014fb8 <ucdr_serialize_int16_t+0xdc>
 8014f36:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014f3a:	7073      	strb	r3, [r6, #1]
 8014f3c:	6923      	ldr	r3, [r4, #16]
 8014f3e:	68a2      	ldr	r2, [r4, #8]
 8014f40:	7da0      	ldrb	r0, [r4, #22]
 8014f42:	3302      	adds	r3, #2
 8014f44:	1b5b      	subs	r3, r3, r5
 8014f46:	4442      	add	r2, r8
 8014f48:	2102      	movs	r1, #2
 8014f4a:	f080 0001 	eor.w	r0, r0, #1
 8014f4e:	6123      	str	r3, [r4, #16]
 8014f50:	60a2      	str	r2, [r4, #8]
 8014f52:	7561      	strb	r1, [r4, #21]
 8014f54:	b002      	add	sp, #8
 8014f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f5a:	2102      	movs	r1, #2
 8014f5c:	4620      	mov	r0, r4
 8014f5e:	f7fa f88d 	bl	800f07c <ucdr_check_final_buffer_behavior>
 8014f62:	b190      	cbz	r0, 8014f8a <ucdr_serialize_int16_t+0xae>
 8014f64:	7d23      	ldrb	r3, [r4, #20]
 8014f66:	2b01      	cmp	r3, #1
 8014f68:	68a3      	ldr	r3, [r4, #8]
 8014f6a:	d014      	beq.n	8014f96 <ucdr_serialize_int16_t+0xba>
 8014f6c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014f70:	701a      	strb	r2, [r3, #0]
 8014f72:	68a3      	ldr	r3, [r4, #8]
 8014f74:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014f78:	705a      	strb	r2, [r3, #1]
 8014f7a:	68a2      	ldr	r2, [r4, #8]
 8014f7c:	6923      	ldr	r3, [r4, #16]
 8014f7e:	3202      	adds	r2, #2
 8014f80:	3302      	adds	r3, #2
 8014f82:	2102      	movs	r1, #2
 8014f84:	60a2      	str	r2, [r4, #8]
 8014f86:	6123      	str	r3, [r4, #16]
 8014f88:	7561      	strb	r1, [r4, #21]
 8014f8a:	7da0      	ldrb	r0, [r4, #22]
 8014f8c:	f080 0001 	eor.w	r0, r0, #1
 8014f90:	b002      	add	sp, #8
 8014f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f96:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8014f9a:	801a      	strh	r2, [r3, #0]
 8014f9c:	e7ed      	b.n	8014f7a <ucdr_serialize_int16_t+0x9e>
 8014f9e:	68a2      	ldr	r2, [r4, #8]
 8014fa0:	6923      	ldr	r3, [r4, #16]
 8014fa2:	7da0      	ldrb	r0, [r4, #22]
 8014fa4:	7567      	strb	r7, [r4, #21]
 8014fa6:	1b52      	subs	r2, r2, r5
 8014fa8:	1b5b      	subs	r3, r3, r5
 8014faa:	f080 0001 	eor.w	r0, r0, #1
 8014fae:	60a2      	str	r2, [r4, #8]
 8014fb0:	6123      	str	r3, [r4, #16]
 8014fb2:	b002      	add	sp, #8
 8014fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014fb8:	68a3      	ldr	r3, [r4, #8]
 8014fba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8014fbe:	701a      	strb	r2, [r3, #0]
 8014fc0:	e7bc      	b.n	8014f3c <ucdr_serialize_int16_t+0x60>
 8014fc2:	4630      	mov	r0, r6
 8014fc4:	f10d 0606 	add.w	r6, sp, #6
 8014fc8:	4631      	mov	r1, r6
 8014fca:	462a      	mov	r2, r5
 8014fcc:	f002 fc15 	bl	80177fa <memcpy>
 8014fd0:	68a0      	ldr	r0, [r4, #8]
 8014fd2:	4642      	mov	r2, r8
 8014fd4:	1971      	adds	r1, r6, r5
 8014fd6:	f002 fc10 	bl	80177fa <memcpy>
 8014fda:	e7af      	b.n	8014f3c <ucdr_serialize_int16_t+0x60>

08014fdc <ucdr_deserialize_int16_t>:
 8014fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014fe0:	460d      	mov	r5, r1
 8014fe2:	2102      	movs	r1, #2
 8014fe4:	4604      	mov	r4, r0
 8014fe6:	f7fa f89b 	bl	800f120 <ucdr_buffer_alignment>
 8014fea:	4601      	mov	r1, r0
 8014fec:	4620      	mov	r0, r4
 8014fee:	f894 8015 	ldrb.w	r8, [r4, #21]
 8014ff2:	f7fa f8d9 	bl	800f1a8 <ucdr_advance_buffer>
 8014ff6:	4620      	mov	r0, r4
 8014ff8:	2102      	movs	r1, #2
 8014ffa:	f7fa f833 	bl	800f064 <ucdr_check_buffer_available_for>
 8014ffe:	bb60      	cbnz	r0, 801505a <ucdr_deserialize_int16_t+0x7e>
 8015000:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8015004:	42be      	cmp	r6, r7
 8015006:	d923      	bls.n	8015050 <ucdr_deserialize_int16_t+0x74>
 8015008:	6922      	ldr	r2, [r4, #16]
 801500a:	60a6      	str	r6, [r4, #8]
 801500c:	1bf6      	subs	r6, r6, r7
 801500e:	4432      	add	r2, r6
 8015010:	f1c6 0902 	rsb	r9, r6, #2
 8015014:	6122      	str	r2, [r4, #16]
 8015016:	4649      	mov	r1, r9
 8015018:	4620      	mov	r0, r4
 801501a:	f7fa f82f 	bl	800f07c <ucdr_check_final_buffer_behavior>
 801501e:	2800      	cmp	r0, #0
 8015020:	d034      	beq.n	801508c <ucdr_deserialize_int16_t+0xb0>
 8015022:	7d23      	ldrb	r3, [r4, #20]
 8015024:	2b01      	cmp	r3, #1
 8015026:	d042      	beq.n	80150ae <ucdr_deserialize_int16_t+0xd2>
 8015028:	787b      	ldrb	r3, [r7, #1]
 801502a:	702b      	strb	r3, [r5, #0]
 801502c:	2e00      	cmp	r6, #0
 801502e:	d03a      	beq.n	80150a6 <ucdr_deserialize_int16_t+0xca>
 8015030:	783b      	ldrb	r3, [r7, #0]
 8015032:	706b      	strb	r3, [r5, #1]
 8015034:	6923      	ldr	r3, [r4, #16]
 8015036:	68a2      	ldr	r2, [r4, #8]
 8015038:	7da0      	ldrb	r0, [r4, #22]
 801503a:	2102      	movs	r1, #2
 801503c:	3302      	adds	r3, #2
 801503e:	1b9b      	subs	r3, r3, r6
 8015040:	444a      	add	r2, r9
 8015042:	7561      	strb	r1, [r4, #21]
 8015044:	6123      	str	r3, [r4, #16]
 8015046:	60a2      	str	r2, [r4, #8]
 8015048:	f080 0001 	eor.w	r0, r0, #1
 801504c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015050:	2102      	movs	r1, #2
 8015052:	4620      	mov	r0, r4
 8015054:	f7fa f812 	bl	800f07c <ucdr_check_final_buffer_behavior>
 8015058:	b180      	cbz	r0, 801507c <ucdr_deserialize_int16_t+0xa0>
 801505a:	7d23      	ldrb	r3, [r4, #20]
 801505c:	2b01      	cmp	r3, #1
 801505e:	68a3      	ldr	r3, [r4, #8]
 8015060:	d011      	beq.n	8015086 <ucdr_deserialize_int16_t+0xaa>
 8015062:	785b      	ldrb	r3, [r3, #1]
 8015064:	702b      	strb	r3, [r5, #0]
 8015066:	68a3      	ldr	r3, [r4, #8]
 8015068:	781b      	ldrb	r3, [r3, #0]
 801506a:	706b      	strb	r3, [r5, #1]
 801506c:	68a2      	ldr	r2, [r4, #8]
 801506e:	6923      	ldr	r3, [r4, #16]
 8015070:	3202      	adds	r2, #2
 8015072:	3302      	adds	r3, #2
 8015074:	2102      	movs	r1, #2
 8015076:	60a2      	str	r2, [r4, #8]
 8015078:	6123      	str	r3, [r4, #16]
 801507a:	7561      	strb	r1, [r4, #21]
 801507c:	7da0      	ldrb	r0, [r4, #22]
 801507e:	f080 0001 	eor.w	r0, r0, #1
 8015082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015086:	881b      	ldrh	r3, [r3, #0]
 8015088:	802b      	strh	r3, [r5, #0]
 801508a:	e7ef      	b.n	801506c <ucdr_deserialize_int16_t+0x90>
 801508c:	68a2      	ldr	r2, [r4, #8]
 801508e:	6923      	ldr	r3, [r4, #16]
 8015090:	7da0      	ldrb	r0, [r4, #22]
 8015092:	f884 8015 	strb.w	r8, [r4, #21]
 8015096:	1b92      	subs	r2, r2, r6
 8015098:	1b9b      	subs	r3, r3, r6
 801509a:	60a2      	str	r2, [r4, #8]
 801509c:	6123      	str	r3, [r4, #16]
 801509e:	f080 0001 	eor.w	r0, r0, #1
 80150a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80150a6:	68a3      	ldr	r3, [r4, #8]
 80150a8:	781b      	ldrb	r3, [r3, #0]
 80150aa:	706b      	strb	r3, [r5, #1]
 80150ac:	e7c2      	b.n	8015034 <ucdr_deserialize_int16_t+0x58>
 80150ae:	4639      	mov	r1, r7
 80150b0:	4632      	mov	r2, r6
 80150b2:	4628      	mov	r0, r5
 80150b4:	f002 fba1 	bl	80177fa <memcpy>
 80150b8:	68a1      	ldr	r1, [r4, #8]
 80150ba:	464a      	mov	r2, r9
 80150bc:	19a8      	adds	r0, r5, r6
 80150be:	f002 fb9c 	bl	80177fa <memcpy>
 80150c2:	e7b7      	b.n	8015034 <ucdr_deserialize_int16_t+0x58>

080150c4 <ucdr_deserialize_int32_t>:
 80150c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80150c8:	460d      	mov	r5, r1
 80150ca:	2104      	movs	r1, #4
 80150cc:	4604      	mov	r4, r0
 80150ce:	f7fa f827 	bl	800f120 <ucdr_buffer_alignment>
 80150d2:	4601      	mov	r1, r0
 80150d4:	4620      	mov	r0, r4
 80150d6:	f894 8015 	ldrb.w	r8, [r4, #21]
 80150da:	f7fa f865 	bl	800f1a8 <ucdr_advance_buffer>
 80150de:	4620      	mov	r0, r4
 80150e0:	2104      	movs	r1, #4
 80150e2:	f7f9 ffbf 	bl	800f064 <ucdr_check_buffer_available_for>
 80150e6:	2800      	cmp	r0, #0
 80150e8:	d138      	bne.n	801515c <ucdr_deserialize_int32_t+0x98>
 80150ea:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80150ee:	42b7      	cmp	r7, r6
 80150f0:	d92f      	bls.n	8015152 <ucdr_deserialize_int32_t+0x8e>
 80150f2:	6922      	ldr	r2, [r4, #16]
 80150f4:	60a7      	str	r7, [r4, #8]
 80150f6:	1bbf      	subs	r7, r7, r6
 80150f8:	443a      	add	r2, r7
 80150fa:	f1c7 0904 	rsb	r9, r7, #4
 80150fe:	6122      	str	r2, [r4, #16]
 8015100:	4649      	mov	r1, r9
 8015102:	4620      	mov	r0, r4
 8015104:	f7f9 ffba 	bl	800f07c <ucdr_check_final_buffer_behavior>
 8015108:	2800      	cmp	r0, #0
 801510a:	d046      	beq.n	801519a <ucdr_deserialize_int32_t+0xd6>
 801510c:	7d23      	ldrb	r3, [r4, #20]
 801510e:	2b01      	cmp	r3, #1
 8015110:	d05c      	beq.n	80151cc <ucdr_deserialize_int32_t+0x108>
 8015112:	78f3      	ldrb	r3, [r6, #3]
 8015114:	702b      	strb	r3, [r5, #0]
 8015116:	2f00      	cmp	r7, #0
 8015118:	d04c      	beq.n	80151b4 <ucdr_deserialize_int32_t+0xf0>
 801511a:	78b3      	ldrb	r3, [r6, #2]
 801511c:	706b      	strb	r3, [r5, #1]
 801511e:	2f01      	cmp	r7, #1
 8015120:	f105 0302 	add.w	r3, r5, #2
 8015124:	d04a      	beq.n	80151bc <ucdr_deserialize_int32_t+0xf8>
 8015126:	7873      	ldrb	r3, [r6, #1]
 8015128:	70ab      	strb	r3, [r5, #2]
 801512a:	2f02      	cmp	r7, #2
 801512c:	f105 0303 	add.w	r3, r5, #3
 8015130:	d048      	beq.n	80151c4 <ucdr_deserialize_int32_t+0x100>
 8015132:	7833      	ldrb	r3, [r6, #0]
 8015134:	70eb      	strb	r3, [r5, #3]
 8015136:	6923      	ldr	r3, [r4, #16]
 8015138:	68a2      	ldr	r2, [r4, #8]
 801513a:	7da0      	ldrb	r0, [r4, #22]
 801513c:	2104      	movs	r1, #4
 801513e:	3304      	adds	r3, #4
 8015140:	1bdb      	subs	r3, r3, r7
 8015142:	444a      	add	r2, r9
 8015144:	7561      	strb	r1, [r4, #21]
 8015146:	6123      	str	r3, [r4, #16]
 8015148:	60a2      	str	r2, [r4, #8]
 801514a:	f080 0001 	eor.w	r0, r0, #1
 801514e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015152:	2104      	movs	r1, #4
 8015154:	4620      	mov	r0, r4
 8015156:	f7f9 ff91 	bl	800f07c <ucdr_check_final_buffer_behavior>
 801515a:	b1b0      	cbz	r0, 801518a <ucdr_deserialize_int32_t+0xc6>
 801515c:	7d23      	ldrb	r3, [r4, #20]
 801515e:	2b01      	cmp	r3, #1
 8015160:	68a3      	ldr	r3, [r4, #8]
 8015162:	d017      	beq.n	8015194 <ucdr_deserialize_int32_t+0xd0>
 8015164:	78db      	ldrb	r3, [r3, #3]
 8015166:	702b      	strb	r3, [r5, #0]
 8015168:	68a3      	ldr	r3, [r4, #8]
 801516a:	789b      	ldrb	r3, [r3, #2]
 801516c:	706b      	strb	r3, [r5, #1]
 801516e:	68a3      	ldr	r3, [r4, #8]
 8015170:	785b      	ldrb	r3, [r3, #1]
 8015172:	70ab      	strb	r3, [r5, #2]
 8015174:	68a3      	ldr	r3, [r4, #8]
 8015176:	781b      	ldrb	r3, [r3, #0]
 8015178:	70eb      	strb	r3, [r5, #3]
 801517a:	68a2      	ldr	r2, [r4, #8]
 801517c:	6923      	ldr	r3, [r4, #16]
 801517e:	3204      	adds	r2, #4
 8015180:	3304      	adds	r3, #4
 8015182:	2104      	movs	r1, #4
 8015184:	60a2      	str	r2, [r4, #8]
 8015186:	6123      	str	r3, [r4, #16]
 8015188:	7561      	strb	r1, [r4, #21]
 801518a:	7da0      	ldrb	r0, [r4, #22]
 801518c:	f080 0001 	eor.w	r0, r0, #1
 8015190:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015194:	681b      	ldr	r3, [r3, #0]
 8015196:	602b      	str	r3, [r5, #0]
 8015198:	e7ef      	b.n	801517a <ucdr_deserialize_int32_t+0xb6>
 801519a:	68a2      	ldr	r2, [r4, #8]
 801519c:	6923      	ldr	r3, [r4, #16]
 801519e:	7da0      	ldrb	r0, [r4, #22]
 80151a0:	f884 8015 	strb.w	r8, [r4, #21]
 80151a4:	1bd2      	subs	r2, r2, r7
 80151a6:	1bdb      	subs	r3, r3, r7
 80151a8:	60a2      	str	r2, [r4, #8]
 80151aa:	6123      	str	r3, [r4, #16]
 80151ac:	f080 0001 	eor.w	r0, r0, #1
 80151b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80151b4:	68a3      	ldr	r3, [r4, #8]
 80151b6:	789b      	ldrb	r3, [r3, #2]
 80151b8:	706b      	strb	r3, [r5, #1]
 80151ba:	1cab      	adds	r3, r5, #2
 80151bc:	68a2      	ldr	r2, [r4, #8]
 80151be:	7852      	ldrb	r2, [r2, #1]
 80151c0:	f803 2b01 	strb.w	r2, [r3], #1
 80151c4:	68a2      	ldr	r2, [r4, #8]
 80151c6:	7812      	ldrb	r2, [r2, #0]
 80151c8:	701a      	strb	r2, [r3, #0]
 80151ca:	e7b4      	b.n	8015136 <ucdr_deserialize_int32_t+0x72>
 80151cc:	4631      	mov	r1, r6
 80151ce:	463a      	mov	r2, r7
 80151d0:	4628      	mov	r0, r5
 80151d2:	f002 fb12 	bl	80177fa <memcpy>
 80151d6:	68a1      	ldr	r1, [r4, #8]
 80151d8:	464a      	mov	r2, r9
 80151da:	19e8      	adds	r0, r5, r7
 80151dc:	f002 fb0d 	bl	80177fa <memcpy>
 80151e0:	e7a9      	b.n	8015136 <ucdr_deserialize_int32_t+0x72>
 80151e2:	bf00      	nop

080151e4 <ucdr_serialize_string>:
 80151e4:	b510      	push	{r4, lr}
 80151e6:	b082      	sub	sp, #8
 80151e8:	4604      	mov	r4, r0
 80151ea:	4608      	mov	r0, r1
 80151ec:	9101      	str	r1, [sp, #4]
 80151ee:	f7eb f801 	bl	80001f4 <strlen>
 80151f2:	9901      	ldr	r1, [sp, #4]
 80151f4:	4602      	mov	r2, r0
 80151f6:	3201      	adds	r2, #1
 80151f8:	4620      	mov	r0, r4
 80151fa:	b002      	add	sp, #8
 80151fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015200:	f7f9 bff2 	b.w	800f1e8 <ucdr_serialize_sequence_char>

08015204 <ucdr_deserialize_string>:
 8015204:	b500      	push	{lr}
 8015206:	b083      	sub	sp, #12
 8015208:	ab01      	add	r3, sp, #4
 801520a:	f7f9 ffff 	bl	800f20c <ucdr_deserialize_sequence_char>
 801520e:	b003      	add	sp, #12
 8015210:	f85d fb04 	ldr.w	pc, [sp], #4

08015214 <get_custom_error>:
 8015214:	4b01      	ldr	r3, [pc, #4]	; (801521c <get_custom_error+0x8>)
 8015216:	7818      	ldrb	r0, [r3, #0]
 8015218:	4770      	bx	lr
 801521a:	bf00      	nop
 801521c:	20009cf8 	.word	0x20009cf8

08015220 <recv_custom_msg>:
 8015220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015224:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 8015228:	b089      	sub	sp, #36	; 0x24
 801522a:	2600      	movs	r6, #0
 801522c:	4604      	mov	r4, r0
 801522e:	9305      	str	r3, [sp, #20]
 8015230:	468a      	mov	sl, r1
 8015232:	4693      	mov	fp, r2
 8015234:	f88d 601e 	strb.w	r6, [sp, #30]
 8015238:	b325      	cbz	r5, 8015284 <recv_custom_msg+0x64>
 801523a:	f200 2902 	addw	r9, r0, #514	; 0x202
 801523e:	f10d 081f 	add.w	r8, sp, #31
 8015242:	af05      	add	r7, sp, #20
 8015244:	f10d 061e 	add.w	r6, sp, #30
 8015248:	f44f 7500 	mov.w	r5, #512	; 0x200
 801524c:	e002      	b.n	8015254 <recv_custom_msg+0x34>
 801524e:	9b05      	ldr	r3, [sp, #20]
 8015250:	2b00      	cmp	r3, #0
 8015252:	dd0f      	ble.n	8015274 <recv_custom_msg+0x54>
 8015254:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8015258:	e9cd 5600 	strd	r5, r6, [sp]
 801525c:	4623      	mov	r3, r4
 801525e:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 8015262:	4622      	mov	r2, r4
 8015264:	4648      	mov	r0, r9
 8015266:	f000 ffc9 	bl	80161fc <uxr_read_framed_msg>
 801526a:	2800      	cmp	r0, #0
 801526c:	d0ef      	beq.n	801524e <recv_custom_msg+0x2e>
 801526e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8015272:	b1b3      	cbz	r3, 80152a2 <recv_custom_msg+0x82>
 8015274:	4b0f      	ldr	r3, [pc, #60]	; (80152b4 <recv_custom_msg+0x94>)
 8015276:	f89d 201f 	ldrb.w	r2, [sp, #31]
 801527a:	701a      	strb	r2, [r3, #0]
 801527c:	2000      	movs	r0, #0
 801527e:	b009      	add	sp, #36	; 0x24
 8015280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015284:	f10d 021f 	add.w	r2, sp, #31
 8015288:	9200      	str	r2, [sp, #0]
 801528a:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 801528e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015292:	4601      	mov	r1, r0
 8015294:	47a8      	blx	r5
 8015296:	2800      	cmp	r0, #0
 8015298:	d0ec      	beq.n	8015274 <recv_custom_msg+0x54>
 801529a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801529e:	2b00      	cmp	r3, #0
 80152a0:	d1e8      	bne.n	8015274 <recv_custom_msg+0x54>
 80152a2:	f8cb 0000 	str.w	r0, [fp]
 80152a6:	2001      	movs	r0, #1
 80152a8:	f8ca 4000 	str.w	r4, [sl]
 80152ac:	b009      	add	sp, #36	; 0x24
 80152ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152b2:	bf00      	nop
 80152b4:	20009cf8 	.word	0x20009cf8

080152b8 <send_custom_msg>:
 80152b8:	b570      	push	{r4, r5, r6, lr}
 80152ba:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 80152be:	b086      	sub	sp, #24
 80152c0:	4616      	mov	r6, r2
 80152c2:	b975      	cbnz	r5, 80152e2 <send_custom_msg+0x2a>
 80152c4:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 80152c8:	f10d 0317 	add.w	r3, sp, #23
 80152cc:	47a0      	blx	r4
 80152ce:	b108      	cbz	r0, 80152d4 <send_custom_msg+0x1c>
 80152d0:	42b0      	cmp	r0, r6
 80152d2:	d015      	beq.n	8015300 <send_custom_msg+0x48>
 80152d4:	4b0c      	ldr	r3, [pc, #48]	; (8015308 <send_custom_msg+0x50>)
 80152d6:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80152da:	701a      	strb	r2, [r3, #0]
 80152dc:	2000      	movs	r0, #0
 80152de:	b006      	add	sp, #24
 80152e0:	bd70      	pop	{r4, r5, r6, pc}
 80152e2:	460b      	mov	r3, r1
 80152e4:	2200      	movs	r2, #0
 80152e6:	f10d 0117 	add.w	r1, sp, #23
 80152ea:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80152ee:	9600      	str	r6, [sp, #0]
 80152f0:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 80152f4:	4602      	mov	r2, r0
 80152f6:	f200 2002 	addw	r0, r0, #514	; 0x202
 80152fa:	f000 fd97 	bl	8015e2c <uxr_write_framed_msg>
 80152fe:	e7e6      	b.n	80152ce <send_custom_msg+0x16>
 8015300:	2001      	movs	r0, #1
 8015302:	b006      	add	sp, #24
 8015304:	bd70      	pop	{r4, r5, r6, pc}
 8015306:	bf00      	nop
 8015308:	20009cf8 	.word	0x20009cf8

0801530c <uxr_set_custom_transport_callbacks>:
 801530c:	b430      	push	{r4, r5}
 801530e:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 8015312:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 8015316:	e9c0 549c 	strd	r5, r4, [r0, #624]	; 0x270
 801531a:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 801531e:	bc30      	pop	{r4, r5}
 8015320:	4770      	bx	lr
 8015322:	bf00      	nop

08015324 <uxr_init_custom_transport>:
 8015324:	b538      	push	{r3, r4, r5, lr}
 8015326:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 801532a:	b303      	cbz	r3, 801536e <uxr_init_custom_transport+0x4a>
 801532c:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8015330:	4604      	mov	r4, r0
 8015332:	b1e2      	cbz	r2, 801536e <uxr_init_custom_transport+0x4a>
 8015334:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8015338:	b1ca      	cbz	r2, 801536e <uxr_init_custom_transport+0x4a>
 801533a:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 801533e:	b1b2      	cbz	r2, 801536e <uxr_init_custom_transport+0x4a>
 8015340:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 8015344:	4798      	blx	r3
 8015346:	4605      	mov	r5, r0
 8015348:	b188      	cbz	r0, 801536e <uxr_init_custom_transport+0x4a>
 801534a:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 801534e:	b98b      	cbnz	r3, 8015374 <uxr_init_custom_transport+0x50>
 8015350:	480b      	ldr	r0, [pc, #44]	; (8015380 <uxr_init_custom_transport+0x5c>)
 8015352:	490c      	ldr	r1, [pc, #48]	; (8015384 <uxr_init_custom_transport+0x60>)
 8015354:	4a0c      	ldr	r2, [pc, #48]	; (8015388 <uxr_init_custom_transport+0x64>)
 8015356:	f8c4 4278 	str.w	r4, [r4, #632]	; 0x278
 801535a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801535e:	e9c4 019f 	strd	r0, r1, [r4, #636]	; 0x27c
 8015362:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 8015366:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 801536a:	4628      	mov	r0, r5
 801536c:	bd38      	pop	{r3, r4, r5, pc}
 801536e:	2500      	movs	r5, #0
 8015370:	4628      	mov	r0, r5
 8015372:	bd38      	pop	{r3, r4, r5, pc}
 8015374:	2100      	movs	r1, #0
 8015376:	f204 2002 	addw	r0, r4, #514	; 0x202
 801537a:	f000 fd51 	bl	8015e20 <uxr_init_framing_io>
 801537e:	e7e7      	b.n	8015350 <uxr_init_custom_transport+0x2c>
 8015380:	080152b9 	.word	0x080152b9
 8015384:	08015221 	.word	0x08015221
 8015388:	08015215 	.word	0x08015215

0801538c <uxr_close_custom_transport>:
 801538c:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8015390:	4718      	bx	r3
 8015392:	bf00      	nop

08015394 <uxr_init_input_best_effort_stream>:
 8015394:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015398:	8003      	strh	r3, [r0, #0]
 801539a:	4770      	bx	lr

0801539c <uxr_reset_input_best_effort_stream>:
 801539c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80153a0:	8003      	strh	r3, [r0, #0]
 80153a2:	4770      	bx	lr

080153a4 <uxr_receive_best_effort_message>:
 80153a4:	b538      	push	{r3, r4, r5, lr}
 80153a6:	4604      	mov	r4, r0
 80153a8:	8800      	ldrh	r0, [r0, #0]
 80153aa:	460d      	mov	r5, r1
 80153ac:	f000 fd20 	bl	8015df0 <uxr_seq_num_cmp>
 80153b0:	4603      	mov	r3, r0
 80153b2:	2b00      	cmp	r3, #0
 80153b4:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 80153b8:	bfb8      	it	lt
 80153ba:	8025      	strhlt	r5, [r4, #0]
 80153bc:	bd38      	pop	{r3, r4, r5, pc}
 80153be:	bf00      	nop

080153c0 <on_full_input_buffer>:
 80153c0:	b570      	push	{r4, r5, r6, lr}
 80153c2:	6802      	ldr	r2, [r0, #0]
 80153c4:	460d      	mov	r5, r1
 80153c6:	6809      	ldr	r1, [r1, #0]
 80153c8:	686c      	ldr	r4, [r5, #4]
 80153ca:	1a53      	subs	r3, r2, r1
 80153cc:	4606      	mov	r6, r0
 80153ce:	8928      	ldrh	r0, [r5, #8]
 80153d0:	fbb4 f4f0 	udiv	r4, r4, r0
 80153d4:	fbb3 f3f4 	udiv	r3, r3, r4
 80153d8:	3301      	adds	r3, #1
 80153da:	b29b      	uxth	r3, r3
 80153dc:	fbb3 f2f0 	udiv	r2, r3, r0
 80153e0:	fb00 3312 	mls	r3, r0, r2, r3
 80153e4:	b29b      	uxth	r3, r3
 80153e6:	fb04 f403 	mul.w	r4, r4, r3
 80153ea:	1d23      	adds	r3, r4, #4
 80153ec:	440b      	add	r3, r1
 80153ee:	7d28      	ldrb	r0, [r5, #20]
 80153f0:	f853 2c04 	ldr.w	r2, [r3, #-4]
 80153f4:	b110      	cbz	r0, 80153fc <on_full_input_buffer+0x3c>
 80153f6:	2000      	movs	r0, #0
 80153f8:	f843 0c04 	str.w	r0, [r3, #-4]
 80153fc:	2a03      	cmp	r2, #3
 80153fe:	d801      	bhi.n	8015404 <on_full_input_buffer+0x44>
 8015400:	2001      	movs	r0, #1
 8015402:	bd70      	pop	{r4, r5, r6, pc}
 8015404:	3408      	adds	r4, #8
 8015406:	6933      	ldr	r3, [r6, #16]
 8015408:	4421      	add	r1, r4
 801540a:	4630      	mov	r0, r6
 801540c:	3a04      	subs	r2, #4
 801540e:	f7f9 fe73 	bl	800f0f8 <ucdr_init_buffer_origin>
 8015412:	4630      	mov	r0, r6
 8015414:	4902      	ldr	r1, [pc, #8]	; (8015420 <on_full_input_buffer+0x60>)
 8015416:	462a      	mov	r2, r5
 8015418:	f7f9 fe4c 	bl	800f0b4 <ucdr_set_on_full_buffer_callback>
 801541c:	2000      	movs	r0, #0
 801541e:	bd70      	pop	{r4, r5, r6, pc}
 8015420:	080153c1 	.word	0x080153c1

08015424 <uxr_init_input_reliable_stream>:
 8015424:	b470      	push	{r4, r5, r6}
 8015426:	9c03      	ldr	r4, [sp, #12]
 8015428:	6001      	str	r1, [r0, #0]
 801542a:	2600      	movs	r6, #0
 801542c:	8103      	strh	r3, [r0, #8]
 801542e:	6042      	str	r2, [r0, #4]
 8015430:	6104      	str	r4, [r0, #16]
 8015432:	7506      	strb	r6, [r0, #20]
 8015434:	b1ab      	cbz	r3, 8015462 <uxr_init_input_reliable_stream+0x3e>
 8015436:	600e      	str	r6, [r1, #0]
 8015438:	8901      	ldrh	r1, [r0, #8]
 801543a:	2901      	cmp	r1, #1
 801543c:	d911      	bls.n	8015462 <uxr_init_input_reliable_stream+0x3e>
 801543e:	2201      	movs	r2, #1
 8015440:	e9d0 5400 	ldrd	r5, r4, [r0]
 8015444:	fbb2 f3f1 	udiv	r3, r2, r1
 8015448:	fb01 2313 	mls	r3, r1, r3, r2
 801544c:	b29b      	uxth	r3, r3
 801544e:	fbb4 f1f1 	udiv	r1, r4, r1
 8015452:	fb03 f301 	mul.w	r3, r3, r1
 8015456:	3201      	adds	r2, #1
 8015458:	50ee      	str	r6, [r5, r3]
 801545a:	8901      	ldrh	r1, [r0, #8]
 801545c:	b292      	uxth	r2, r2
 801545e:	4291      	cmp	r1, r2
 8015460:	d8ee      	bhi.n	8015440 <uxr_init_input_reliable_stream+0x1c>
 8015462:	f04f 33ff 	mov.w	r3, #4294967295
 8015466:	bc70      	pop	{r4, r5, r6}
 8015468:	60c3      	str	r3, [r0, #12]
 801546a:	4770      	bx	lr

0801546c <uxr_reset_input_reliable_stream>:
 801546c:	8902      	ldrh	r2, [r0, #8]
 801546e:	b1ca      	cbz	r2, 80154a4 <uxr_reset_input_reliable_stream+0x38>
 8015470:	b470      	push	{r4, r5, r6}
 8015472:	2400      	movs	r4, #0
 8015474:	4621      	mov	r1, r4
 8015476:	4626      	mov	r6, r4
 8015478:	fbb1 f3f2 	udiv	r3, r1, r2
 801547c:	fb02 1313 	mls	r3, r2, r3, r1
 8015480:	e9d0 5100 	ldrd	r5, r1, [r0]
 8015484:	b29b      	uxth	r3, r3
 8015486:	fbb1 f2f2 	udiv	r2, r1, r2
 801548a:	fb03 f302 	mul.w	r3, r3, r2
 801548e:	3401      	adds	r4, #1
 8015490:	50ee      	str	r6, [r5, r3]
 8015492:	8902      	ldrh	r2, [r0, #8]
 8015494:	b2a1      	uxth	r1, r4
 8015496:	428a      	cmp	r2, r1
 8015498:	d8ee      	bhi.n	8015478 <uxr_reset_input_reliable_stream+0xc>
 801549a:	f04f 33ff 	mov.w	r3, #4294967295
 801549e:	bc70      	pop	{r4, r5, r6}
 80154a0:	60c3      	str	r3, [r0, #12]
 80154a2:	4770      	bx	lr
 80154a4:	f04f 33ff 	mov.w	r3, #4294967295
 80154a8:	60c3      	str	r3, [r0, #12]
 80154aa:	4770      	bx	lr

080154ac <uxr_receive_reliable_message>:
 80154ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80154b0:	4604      	mov	r4, r0
 80154b2:	460d      	mov	r5, r1
 80154b4:	8901      	ldrh	r1, [r0, #8]
 80154b6:	8980      	ldrh	r0, [r0, #12]
 80154b8:	4690      	mov	r8, r2
 80154ba:	461f      	mov	r7, r3
 80154bc:	f000 fc90 	bl	8015de0 <uxr_seq_num_add>
 80154c0:	4629      	mov	r1, r5
 80154c2:	4606      	mov	r6, r0
 80154c4:	89a0      	ldrh	r0, [r4, #12]
 80154c6:	f000 fc93 	bl	8015df0 <uxr_seq_num_cmp>
 80154ca:	2800      	cmp	r0, #0
 80154cc:	db0a      	blt.n	80154e4 <uxr_receive_reliable_message+0x38>
 80154ce:	2600      	movs	r6, #0
 80154d0:	89e0      	ldrh	r0, [r4, #14]
 80154d2:	4629      	mov	r1, r5
 80154d4:	f000 fc8c 	bl	8015df0 <uxr_seq_num_cmp>
 80154d8:	2800      	cmp	r0, #0
 80154da:	bfb8      	it	lt
 80154dc:	81e5      	strhlt	r5, [r4, #14]
 80154de:	4630      	mov	r0, r6
 80154e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80154e4:	4630      	mov	r0, r6
 80154e6:	4629      	mov	r1, r5
 80154e8:	f000 fc82 	bl	8015df0 <uxr_seq_num_cmp>
 80154ec:	2800      	cmp	r0, #0
 80154ee:	dbee      	blt.n	80154ce <uxr_receive_reliable_message+0x22>
 80154f0:	6923      	ldr	r3, [r4, #16]
 80154f2:	4640      	mov	r0, r8
 80154f4:	4798      	blx	r3
 80154f6:	2101      	movs	r1, #1
 80154f8:	4681      	mov	r9, r0
 80154fa:	89a0      	ldrh	r0, [r4, #12]
 80154fc:	f000 fc70 	bl	8015de0 <uxr_seq_num_add>
 8015500:	f1b9 0f00 	cmp.w	r9, #0
 8015504:	d101      	bne.n	801550a <uxr_receive_reliable_message+0x5e>
 8015506:	4285      	cmp	r5, r0
 8015508:	d049      	beq.n	801559e <uxr_receive_reliable_message+0xf2>
 801550a:	8921      	ldrh	r1, [r4, #8]
 801550c:	fbb5 f3f1 	udiv	r3, r5, r1
 8015510:	fb01 5313 	mls	r3, r1, r3, r5
 8015514:	b29b      	uxth	r3, r3
 8015516:	6862      	ldr	r2, [r4, #4]
 8015518:	6820      	ldr	r0, [r4, #0]
 801551a:	fbb2 f2f1 	udiv	r2, r2, r1
 801551e:	fb03 f302 	mul.w	r3, r3, r2
 8015522:	3304      	adds	r3, #4
 8015524:	4418      	add	r0, r3
 8015526:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801552a:	2b00      	cmp	r3, #0
 801552c:	d1cf      	bne.n	80154ce <uxr_receive_reliable_message+0x22>
 801552e:	4641      	mov	r1, r8
 8015530:	463a      	mov	r2, r7
 8015532:	f002 f962 	bl	80177fa <memcpy>
 8015536:	8921      	ldrh	r1, [r4, #8]
 8015538:	fbb5 f3f1 	udiv	r3, r5, r1
 801553c:	fb01 5313 	mls	r3, r1, r3, r5
 8015540:	b29b      	uxth	r3, r3
 8015542:	6862      	ldr	r2, [r4, #4]
 8015544:	fbb2 f2f1 	udiv	r2, r2, r1
 8015548:	6821      	ldr	r1, [r4, #0]
 801554a:	fb03 f302 	mul.w	r3, r3, r2
 801554e:	2201      	movs	r2, #1
 8015550:	50cf      	str	r7, [r1, r3]
 8015552:	9b08      	ldr	r3, [sp, #32]
 8015554:	701a      	strb	r2, [r3, #0]
 8015556:	f1b9 0f00 	cmp.w	r9, #0
 801555a:	d0b8      	beq.n	80154ce <uxr_receive_reliable_message+0x22>
 801555c:	89a6      	ldrh	r6, [r4, #12]
 801555e:	e001      	b.n	8015564 <uxr_receive_reliable_message+0xb8>
 8015560:	2801      	cmp	r0, #1
 8015562:	d1b4      	bne.n	80154ce <uxr_receive_reliable_message+0x22>
 8015564:	4630      	mov	r0, r6
 8015566:	2101      	movs	r1, #1
 8015568:	f000 fc3a 	bl	8015de0 <uxr_seq_num_add>
 801556c:	8921      	ldrh	r1, [r4, #8]
 801556e:	fbb0 f3f1 	udiv	r3, r0, r1
 8015572:	fb01 0313 	mls	r3, r1, r3, r0
 8015576:	b29b      	uxth	r3, r3
 8015578:	6862      	ldr	r2, [r4, #4]
 801557a:	fbb2 f2f1 	udiv	r2, r2, r1
 801557e:	4606      	mov	r6, r0
 8015580:	fb03 f302 	mul.w	r3, r3, r2
 8015584:	6820      	ldr	r0, [r4, #0]
 8015586:	3304      	adds	r3, #4
 8015588:	4418      	add	r0, r3
 801558a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801558e:	2b00      	cmp	r3, #0
 8015590:	d09d      	beq.n	80154ce <uxr_receive_reliable_message+0x22>
 8015592:	6923      	ldr	r3, [r4, #16]
 8015594:	4798      	blx	r3
 8015596:	2802      	cmp	r0, #2
 8015598:	d1e2      	bne.n	8015560 <uxr_receive_reliable_message+0xb4>
 801559a:	2601      	movs	r6, #1
 801559c:	e798      	b.n	80154d0 <uxr_receive_reliable_message+0x24>
 801559e:	9b08      	ldr	r3, [sp, #32]
 80155a0:	81a5      	strh	r5, [r4, #12]
 80155a2:	2601      	movs	r6, #1
 80155a4:	f883 9000 	strb.w	r9, [r3]
 80155a8:	e792      	b.n	80154d0 <uxr_receive_reliable_message+0x24>
 80155aa:	bf00      	nop

080155ac <uxr_next_input_reliable_buffer_available>:
 80155ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80155b0:	4604      	mov	r4, r0
 80155b2:	460e      	mov	r6, r1
 80155b4:	8980      	ldrh	r0, [r0, #12]
 80155b6:	2101      	movs	r1, #1
 80155b8:	4617      	mov	r7, r2
 80155ba:	f000 fc11 	bl	8015de0 <uxr_seq_num_add>
 80155be:	8921      	ldrh	r1, [r4, #8]
 80155c0:	fbb0 f3f1 	udiv	r3, r0, r1
 80155c4:	fb01 0313 	mls	r3, r1, r3, r0
 80155c8:	b29b      	uxth	r3, r3
 80155ca:	6862      	ldr	r2, [r4, #4]
 80155cc:	fbb2 f2f1 	udiv	r2, r2, r1
 80155d0:	fb03 f302 	mul.w	r3, r3, r2
 80155d4:	6822      	ldr	r2, [r4, #0]
 80155d6:	3304      	adds	r3, #4
 80155d8:	eb02 0803 	add.w	r8, r2, r3
 80155dc:	f858 9c04 	ldr.w	r9, [r8, #-4]
 80155e0:	f1b9 0f00 	cmp.w	r9, #0
 80155e4:	d025      	beq.n	8015632 <uxr_next_input_reliable_buffer_available+0x86>
 80155e6:	6923      	ldr	r3, [r4, #16]
 80155e8:	4605      	mov	r5, r0
 80155ea:	4640      	mov	r0, r8
 80155ec:	4798      	blx	r3
 80155ee:	4682      	mov	sl, r0
 80155f0:	b310      	cbz	r0, 8015638 <uxr_next_input_reliable_buffer_available+0x8c>
 80155f2:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 80155f6:	e005      	b.n	8015604 <uxr_next_input_reliable_buffer_available+0x58>
 80155f8:	6923      	ldr	r3, [r4, #16]
 80155fa:	4798      	blx	r3
 80155fc:	2802      	cmp	r0, #2
 80155fe:	d032      	beq.n	8015666 <uxr_next_input_reliable_buffer_available+0xba>
 8015600:	2801      	cmp	r0, #1
 8015602:	d116      	bne.n	8015632 <uxr_next_input_reliable_buffer_available+0x86>
 8015604:	4650      	mov	r0, sl
 8015606:	2101      	movs	r1, #1
 8015608:	f000 fbea 	bl	8015de0 <uxr_seq_num_add>
 801560c:	8921      	ldrh	r1, [r4, #8]
 801560e:	fbb0 f3f1 	udiv	r3, r0, r1
 8015612:	fb01 0313 	mls	r3, r1, r3, r0
 8015616:	b29b      	uxth	r3, r3
 8015618:	6862      	ldr	r2, [r4, #4]
 801561a:	fbb2 f2f1 	udiv	r2, r2, r1
 801561e:	4682      	mov	sl, r0
 8015620:	fb03 f302 	mul.w	r3, r3, r2
 8015624:	6820      	ldr	r0, [r4, #0]
 8015626:	3304      	adds	r3, #4
 8015628:	4418      	add	r0, r3
 801562a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801562e:	2b00      	cmp	r3, #0
 8015630:	d1e2      	bne.n	80155f8 <uxr_next_input_reliable_buffer_available+0x4c>
 8015632:	2000      	movs	r0, #0
 8015634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015638:	464a      	mov	r2, r9
 801563a:	4641      	mov	r1, r8
 801563c:	4630      	mov	r0, r6
 801563e:	f7f9 fd63 	bl	800f108 <ucdr_init_buffer>
 8015642:	8921      	ldrh	r1, [r4, #8]
 8015644:	fbb5 f3f1 	udiv	r3, r5, r1
 8015648:	fb01 5313 	mls	r3, r1, r3, r5
 801564c:	b29b      	uxth	r3, r3
 801564e:	6862      	ldr	r2, [r4, #4]
 8015650:	fbb2 f2f1 	udiv	r2, r2, r1
 8015654:	6821      	ldr	r1, [r4, #0]
 8015656:	fb03 f302 	mul.w	r3, r3, r2
 801565a:	2001      	movs	r0, #1
 801565c:	f841 a003 	str.w	sl, [r1, r3]
 8015660:	81a5      	strh	r5, [r4, #12]
 8015662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015666:	8922      	ldrh	r2, [r4, #8]
 8015668:	fbb5 f0f2 	udiv	r0, r5, r2
 801566c:	fb02 5510 	mls	r5, r2, r0, r5
 8015670:	b2ad      	uxth	r5, r5
 8015672:	6863      	ldr	r3, [r4, #4]
 8015674:	fbb3 f3f2 	udiv	r3, r3, r2
 8015678:	fb05 f503 	mul.w	r5, r5, r3
 801567c:	6823      	ldr	r3, [r4, #0]
 801567e:	2000      	movs	r0, #0
 8015680:	5158      	str	r0, [r3, r5]
 8015682:	eba9 0207 	sub.w	r2, r9, r7
 8015686:	eb08 0107 	add.w	r1, r8, r7
 801568a:	4630      	mov	r0, r6
 801568c:	f7f9 fd3c 	bl	800f108 <ucdr_init_buffer>
 8015690:	4630      	mov	r0, r6
 8015692:	4904      	ldr	r1, [pc, #16]	; (80156a4 <uxr_next_input_reliable_buffer_available+0xf8>)
 8015694:	4622      	mov	r2, r4
 8015696:	f7f9 fd0d 	bl	800f0b4 <ucdr_set_on_full_buffer_callback>
 801569a:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801569e:	2001      	movs	r0, #1
 80156a0:	e7c8      	b.n	8015634 <uxr_next_input_reliable_buffer_available+0x88>
 80156a2:	bf00      	nop
 80156a4:	080153c1 	.word	0x080153c1

080156a8 <uxr_process_heartbeat>:
 80156a8:	b538      	push	{r3, r4, r5, lr}
 80156aa:	4611      	mov	r1, r2
 80156ac:	4604      	mov	r4, r0
 80156ae:	89c0      	ldrh	r0, [r0, #14]
 80156b0:	4615      	mov	r5, r2
 80156b2:	f000 fb9d 	bl	8015df0 <uxr_seq_num_cmp>
 80156b6:	2800      	cmp	r0, #0
 80156b8:	bfb8      	it	lt
 80156ba:	81e5      	strhlt	r5, [r4, #14]
 80156bc:	bd38      	pop	{r3, r4, r5, pc}
 80156be:	bf00      	nop

080156c0 <uxr_compute_acknack>:
 80156c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80156c4:	8903      	ldrh	r3, [r0, #8]
 80156c6:	8986      	ldrh	r6, [r0, #12]
 80156c8:	4604      	mov	r4, r0
 80156ca:	460d      	mov	r5, r1
 80156cc:	b1d3      	cbz	r3, 8015704 <uxr_compute_acknack+0x44>
 80156ce:	4630      	mov	r0, r6
 80156d0:	2701      	movs	r7, #1
 80156d2:	e003      	b.n	80156dc <uxr_compute_acknack+0x1c>
 80156d4:	4567      	cmp	r7, ip
 80156d6:	d215      	bcs.n	8015704 <uxr_compute_acknack+0x44>
 80156d8:	89a0      	ldrh	r0, [r4, #12]
 80156da:	3701      	adds	r7, #1
 80156dc:	b2b9      	uxth	r1, r7
 80156de:	f000 fb7f 	bl	8015de0 <uxr_seq_num_add>
 80156e2:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80156e6:	fbb0 f2fc 	udiv	r2, r0, ip
 80156ea:	e9d4 1300 	ldrd	r1, r3, [r4]
 80156ee:	fb0c 0212 	mls	r2, ip, r2, r0
 80156f2:	b292      	uxth	r2, r2
 80156f4:	fbb3 f3fc 	udiv	r3, r3, ip
 80156f8:	fb02 1303 	mla	r3, r2, r3, r1
 80156fc:	681b      	ldr	r3, [r3, #0]
 80156fe:	2b00      	cmp	r3, #0
 8015700:	d1e8      	bne.n	80156d4 <uxr_compute_acknack+0x14>
 8015702:	4606      	mov	r6, r0
 8015704:	802e      	strh	r6, [r5, #0]
 8015706:	4630      	mov	r0, r6
 8015708:	2101      	movs	r1, #1
 801570a:	89e6      	ldrh	r6, [r4, #14]
 801570c:	f000 fb6c 	bl	8015de8 <uxr_seq_num_sub>
 8015710:	4601      	mov	r1, r0
 8015712:	4630      	mov	r0, r6
 8015714:	f000 fb68 	bl	8015de8 <uxr_seq_num_sub>
 8015718:	4606      	mov	r6, r0
 801571a:	b318      	cbz	r0, 8015764 <uxr_compute_acknack+0xa4>
 801571c:	f04f 0900 	mov.w	r9, #0
 8015720:	464f      	mov	r7, r9
 8015722:	f04f 0801 	mov.w	r8, #1
 8015726:	fa1f f189 	uxth.w	r1, r9
 801572a:	8828      	ldrh	r0, [r5, #0]
 801572c:	f000 fb58 	bl	8015de0 <uxr_seq_num_add>
 8015730:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015734:	6822      	ldr	r2, [r4, #0]
 8015736:	fbb0 f1fc 	udiv	r1, r0, ip
 801573a:	fb01 011c 	mls	r1, r1, ip, r0
 801573e:	b289      	uxth	r1, r1
 8015740:	6863      	ldr	r3, [r4, #4]
 8015742:	fbb3 f3fc 	udiv	r3, r3, ip
 8015746:	fb01 2303 	mla	r3, r1, r3, r2
 801574a:	fa08 f209 	lsl.w	r2, r8, r9
 801574e:	681b      	ldr	r3, [r3, #0]
 8015750:	f109 0901 	add.w	r9, r9, #1
 8015754:	b90b      	cbnz	r3, 801575a <uxr_compute_acknack+0x9a>
 8015756:	4317      	orrs	r7, r2
 8015758:	b2bf      	uxth	r7, r7
 801575a:	454e      	cmp	r6, r9
 801575c:	d1e3      	bne.n	8015726 <uxr_compute_acknack+0x66>
 801575e:	4638      	mov	r0, r7
 8015760:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015764:	4607      	mov	r7, r0
 8015766:	4638      	mov	r0, r7
 8015768:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801576c <uxr_init_output_best_effort_stream>:
 801576c:	b410      	push	{r4}
 801576e:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8015772:	81c4      	strh	r4, [r0, #14]
 8015774:	e9c0 1300 	strd	r1, r3, [r0]
 8015778:	f85d 4b04 	ldr.w	r4, [sp], #4
 801577c:	7303      	strb	r3, [r0, #12]
 801577e:	6082      	str	r2, [r0, #8]
 8015780:	4770      	bx	lr
 8015782:	bf00      	nop

08015784 <uxr_reset_output_best_effort_stream>:
 8015784:	7b02      	ldrb	r2, [r0, #12]
 8015786:	6042      	str	r2, [r0, #4]
 8015788:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801578c:	81c3      	strh	r3, [r0, #14]
 801578e:	4770      	bx	lr

08015790 <uxr_prepare_best_effort_buffer_to_write>:
 8015790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015792:	4604      	mov	r4, r0
 8015794:	b083      	sub	sp, #12
 8015796:	6840      	ldr	r0, [r0, #4]
 8015798:	460d      	mov	r5, r1
 801579a:	4616      	mov	r6, r2
 801579c:	f7fb fab8 	bl	8010d10 <uxr_submessage_padding>
 80157a0:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80157a4:	4410      	add	r0, r2
 80157a6:	1942      	adds	r2, r0, r5
 80157a8:	4293      	cmp	r3, r2
 80157aa:	bf2c      	ite	cs
 80157ac:	2701      	movcs	r7, #1
 80157ae:	2700      	movcc	r7, #0
 80157b0:	d202      	bcs.n	80157b8 <uxr_prepare_best_effort_buffer_to_write+0x28>
 80157b2:	4638      	mov	r0, r7
 80157b4:	b003      	add	sp, #12
 80157b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80157b8:	9000      	str	r0, [sp, #0]
 80157ba:	6821      	ldr	r1, [r4, #0]
 80157bc:	4630      	mov	r0, r6
 80157be:	2300      	movs	r3, #0
 80157c0:	f7f9 fc90 	bl	800f0e4 <ucdr_init_buffer_origin_offset>
 80157c4:	6861      	ldr	r1, [r4, #4]
 80157c6:	4638      	mov	r0, r7
 80157c8:	4429      	add	r1, r5
 80157ca:	6061      	str	r1, [r4, #4]
 80157cc:	b003      	add	sp, #12
 80157ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080157d0 <uxr_prepare_best_effort_buffer_to_send>:
 80157d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80157d4:	6845      	ldr	r5, [r0, #4]
 80157d6:	4604      	mov	r4, r0
 80157d8:	7b00      	ldrb	r0, [r0, #12]
 80157da:	4285      	cmp	r5, r0
 80157dc:	bf8c      	ite	hi
 80157de:	2701      	movhi	r7, #1
 80157e0:	2700      	movls	r7, #0
 80157e2:	d802      	bhi.n	80157ea <uxr_prepare_best_effort_buffer_to_send+0x1a>
 80157e4:	4638      	mov	r0, r7
 80157e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157ea:	4688      	mov	r8, r1
 80157ec:	89e0      	ldrh	r0, [r4, #14]
 80157ee:	2101      	movs	r1, #1
 80157f0:	4615      	mov	r5, r2
 80157f2:	461e      	mov	r6, r3
 80157f4:	f000 faf4 	bl	8015de0 <uxr_seq_num_add>
 80157f8:	e9d4 2300 	ldrd	r2, r3, [r4]
 80157fc:	81e0      	strh	r0, [r4, #14]
 80157fe:	8030      	strh	r0, [r6, #0]
 8015800:	f8c8 2000 	str.w	r2, [r8]
 8015804:	602b      	str	r3, [r5, #0]
 8015806:	7b23      	ldrb	r3, [r4, #12]
 8015808:	6063      	str	r3, [r4, #4]
 801580a:	4638      	mov	r0, r7
 801580c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015810 <on_full_output_buffer>:
 8015810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015812:	6802      	ldr	r2, [r0, #0]
 8015814:	460d      	mov	r5, r1
 8015816:	6809      	ldr	r1, [r1, #0]
 8015818:	892f      	ldrh	r7, [r5, #8]
 801581a:	686c      	ldr	r4, [r5, #4]
 801581c:	fbb4 f4f7 	udiv	r4, r4, r7
 8015820:	1a53      	subs	r3, r2, r1
 8015822:	fbb3 f3f4 	udiv	r3, r3, r4
 8015826:	3301      	adds	r3, #1
 8015828:	b29b      	uxth	r3, r3
 801582a:	fbb3 f2f7 	udiv	r2, r3, r7
 801582e:	fb07 3312 	mls	r3, r7, r2, r3
 8015832:	b29b      	uxth	r3, r3
 8015834:	fb04 f403 	mul.w	r4, r4, r3
 8015838:	7b2f      	ldrb	r7, [r5, #12]
 801583a:	590a      	ldr	r2, [r1, r4]
 801583c:	6903      	ldr	r3, [r0, #16]
 801583e:	443c      	add	r4, r7
 8015840:	3408      	adds	r4, #8
 8015842:	1bd2      	subs	r2, r2, r7
 8015844:	4606      	mov	r6, r0
 8015846:	4421      	add	r1, r4
 8015848:	3a04      	subs	r2, #4
 801584a:	f7f9 fc55 	bl	800f0f8 <ucdr_init_buffer_origin>
 801584e:	4630      	mov	r0, r6
 8015850:	4902      	ldr	r1, [pc, #8]	; (801585c <on_full_output_buffer+0x4c>)
 8015852:	462a      	mov	r2, r5
 8015854:	f7f9 fc2e 	bl	800f0b4 <ucdr_set_on_full_buffer_callback>
 8015858:	2000      	movs	r0, #0
 801585a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801585c:	08015811 	.word	0x08015811

08015860 <uxr_init_output_reliable_stream>:
 8015860:	b430      	push	{r4, r5}
 8015862:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8015866:	6001      	str	r1, [r0, #0]
 8015868:	8103      	strh	r3, [r0, #8]
 801586a:	6042      	str	r2, [r0, #4]
 801586c:	7304      	strb	r4, [r0, #12]
 801586e:	b1b3      	cbz	r3, 801589e <uxr_init_output_reliable_stream+0x3e>
 8015870:	600c      	str	r4, [r1, #0]
 8015872:	8901      	ldrh	r1, [r0, #8]
 8015874:	2901      	cmp	r1, #1
 8015876:	d912      	bls.n	801589e <uxr_init_output_reliable_stream+0x3e>
 8015878:	2201      	movs	r2, #1
 801587a:	e9d0 5400 	ldrd	r5, r4, [r0]
 801587e:	fbb2 f3f1 	udiv	r3, r2, r1
 8015882:	fb01 2313 	mls	r3, r1, r3, r2
 8015886:	b29b      	uxth	r3, r3
 8015888:	fbb4 f1f1 	udiv	r1, r4, r1
 801588c:	fb03 f301 	mul.w	r3, r3, r1
 8015890:	7b01      	ldrb	r1, [r0, #12]
 8015892:	50e9      	str	r1, [r5, r3]
 8015894:	3201      	adds	r2, #1
 8015896:	8901      	ldrh	r1, [r0, #8]
 8015898:	b292      	uxth	r2, r2
 801589a:	4291      	cmp	r1, r2
 801589c:	d8ed      	bhi.n	801587a <uxr_init_output_reliable_stream+0x1a>
 801589e:	f04f 32ff 	mov.w	r2, #4294967295
 80158a2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80158a6:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80158aa:	4b05      	ldr	r3, [pc, #20]	; (80158c0 <uxr_init_output_reliable_stream+0x60>)
 80158ac:	f8c0 300e 	str.w	r3, [r0, #14]
 80158b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80158b4:	2300      	movs	r3, #0
 80158b6:	bc30      	pop	{r4, r5}
 80158b8:	8242      	strh	r2, [r0, #18]
 80158ba:	8403      	strh	r3, [r0, #32]
 80158bc:	4770      	bx	lr
 80158be:	bf00      	nop
 80158c0:	ffff0000 	.word	0xffff0000

080158c4 <uxr_reset_output_reliable_stream>:
 80158c4:	8902      	ldrh	r2, [r0, #8]
 80158c6:	b430      	push	{r4, r5}
 80158c8:	b19a      	cbz	r2, 80158f2 <uxr_reset_output_reliable_stream+0x2e>
 80158ca:	2400      	movs	r4, #0
 80158cc:	4621      	mov	r1, r4
 80158ce:	fbb1 f3f2 	udiv	r3, r1, r2
 80158d2:	fb02 1313 	mls	r3, r2, r3, r1
 80158d6:	e9d0 5100 	ldrd	r5, r1, [r0]
 80158da:	b29b      	uxth	r3, r3
 80158dc:	fbb1 f2f2 	udiv	r2, r1, r2
 80158e0:	fb03 f302 	mul.w	r3, r3, r2
 80158e4:	7b02      	ldrb	r2, [r0, #12]
 80158e6:	50ea      	str	r2, [r5, r3]
 80158e8:	3401      	adds	r4, #1
 80158ea:	8902      	ldrh	r2, [r0, #8]
 80158ec:	b2a1      	uxth	r1, r4
 80158ee:	428a      	cmp	r2, r1
 80158f0:	d8ed      	bhi.n	80158ce <uxr_reset_output_reliable_stream+0xa>
 80158f2:	f04f 32ff 	mov.w	r2, #4294967295
 80158f6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80158fa:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80158fe:	4b05      	ldr	r3, [pc, #20]	; (8015914 <uxr_reset_output_reliable_stream+0x50>)
 8015900:	f8c0 300e 	str.w	r3, [r0, #14]
 8015904:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015908:	2300      	movs	r3, #0
 801590a:	bc30      	pop	{r4, r5}
 801590c:	8242      	strh	r2, [r0, #18]
 801590e:	8403      	strh	r3, [r0, #32]
 8015910:	4770      	bx	lr
 8015912:	bf00      	nop
 8015914:	ffff0000 	.word	0xffff0000

08015918 <uxr_prepare_reliable_buffer_to_write>:
 8015918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801591c:	89c5      	ldrh	r5, [r0, #14]
 801591e:	4604      	mov	r4, r0
 8015920:	8900      	ldrh	r0, [r0, #8]
 8015922:	fbb5 f3f0 	udiv	r3, r5, r0
 8015926:	4688      	mov	r8, r1
 8015928:	e9d4 1600 	ldrd	r1, r6, [r4]
 801592c:	fb00 5313 	mls	r3, r0, r3, r5
 8015930:	b29b      	uxth	r3, r3
 8015932:	fbb6 f0f0 	udiv	r0, r6, r0
 8015936:	fb00 f303 	mul.w	r3, r0, r3
 801593a:	3304      	adds	r3, #4
 801593c:	18cb      	adds	r3, r1, r3
 801593e:	b091      	sub	sp, #68	; 0x44
 8015940:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8015944:	9004      	str	r0, [sp, #16]
 8015946:	2104      	movs	r1, #4
 8015948:	4630      	mov	r0, r6
 801594a:	9305      	str	r3, [sp, #20]
 801594c:	9206      	str	r2, [sp, #24]
 801594e:	f7f9 fbdf 	bl	800f110 <ucdr_alignment>
 8015952:	1833      	adds	r3, r6, r0
 8015954:	9804      	ldr	r0, [sp, #16]
 8015956:	9303      	str	r3, [sp, #12]
 8015958:	eb03 0708 	add.w	r7, r3, r8
 801595c:	1f06      	subs	r6, r0, #4
 801595e:	42b7      	cmp	r7, r6
 8015960:	f240 80dc 	bls.w	8015b1c <uxr_prepare_reliable_buffer_to_write+0x204>
 8015964:	f894 e00c 	ldrb.w	lr, [r4, #12]
 8015968:	eb0e 0308 	add.w	r3, lr, r8
 801596c:	42b3      	cmp	r3, r6
 801596e:	f240 80c2 	bls.w	8015af6 <uxr_prepare_reliable_buffer_to_write+0x1de>
 8015972:	9b03      	ldr	r3, [sp, #12]
 8015974:	3304      	adds	r3, #4
 8015976:	42b3      	cmp	r3, r6
 8015978:	f080 8112 	bcs.w	8015ba0 <uxr_prepare_reliable_buffer_to_write+0x288>
 801597c:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015980:	f1bc 0f00 	cmp.w	ip, #0
 8015984:	f000 8127 	beq.w	8015bd6 <uxr_prepare_reliable_buffer_to_write+0x2be>
 8015988:	e9d4 7300 	ldrd	r7, r3, [r4]
 801598c:	2100      	movs	r1, #0
 801598e:	4608      	mov	r0, r1
 8015990:	460a      	mov	r2, r1
 8015992:	fbb3 f9fc 	udiv	r9, r3, ip
 8015996:	fbb2 f3fc 	udiv	r3, r2, ip
 801599a:	fb0c 2313 	mls	r3, ip, r3, r2
 801599e:	b29b      	uxth	r3, r3
 80159a0:	fb09 7303 	mla	r3, r9, r3, r7
 80159a4:	3101      	adds	r1, #1
 80159a6:	681b      	ldr	r3, [r3, #0]
 80159a8:	459e      	cmp	lr, r3
 80159aa:	bf08      	it	eq
 80159ac:	3001      	addeq	r0, #1
 80159ae:	b28a      	uxth	r2, r1
 80159b0:	bf08      	it	eq
 80159b2:	b280      	uxtheq	r0, r0
 80159b4:	4562      	cmp	r2, ip
 80159b6:	d3ee      	bcc.n	8015996 <uxr_prepare_reliable_buffer_to_write+0x7e>
 80159b8:	9b03      	ldr	r3, [sp, #12]
 80159ba:	1f37      	subs	r7, r6, #4
 80159bc:	b2bf      	uxth	r7, r7
 80159be:	eba7 0903 	sub.w	r9, r7, r3
 80159c2:	fa1f f989 	uxth.w	r9, r9
 80159c6:	eba7 070e 	sub.w	r7, r7, lr
 80159ca:	b2bf      	uxth	r7, r7
 80159cc:	eba8 0809 	sub.w	r8, r8, r9
 80159d0:	fbb8 faf7 	udiv	sl, r8, r7
 80159d4:	fb07 831a 	mls	r3, r7, sl, r8
 80159d8:	9707      	str	r7, [sp, #28]
 80159da:	2b00      	cmp	r3, #0
 80159dc:	f040 80bf 	bne.w	8015b5e <uxr_prepare_reliable_buffer_to_write+0x246>
 80159e0:	fa1f fa8a 	uxth.w	sl, sl
 80159e4:	4582      	cmp	sl, r0
 80159e6:	f200 8095 	bhi.w	8015b14 <uxr_prepare_reliable_buffer_to_write+0x1fc>
 80159ea:	f10d 0b20 	add.w	fp, sp, #32
 80159ee:	f1ba 0f00 	cmp.w	sl, #0
 80159f2:	d03a      	beq.n	8015a6a <uxr_prepare_reliable_buffer_to_write+0x152>
 80159f4:	f04f 0800 	mov.w	r8, #0
 80159f8:	f10d 0b20 	add.w	fp, sp, #32
 80159fc:	e000      	b.n	8015a00 <uxr_prepare_reliable_buffer_to_write+0xe8>
 80159fe:	46b9      	mov	r9, r7
 8015a00:	e9d4 3200 	ldrd	r3, r2, [r4]
 8015a04:	fbb5 f1fc 	udiv	r1, r5, ip
 8015a08:	fb0c 5111 	mls	r1, ip, r1, r5
 8015a0c:	b289      	uxth	r1, r1
 8015a0e:	fbb2 f2fc 	udiv	r2, r2, ip
 8015a12:	fb01 f102 	mul.w	r1, r1, r2
 8015a16:	3104      	adds	r1, #4
 8015a18:	4419      	add	r1, r3
 8015a1a:	4632      	mov	r2, r6
 8015a1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015a20:	9300      	str	r3, [sp, #0]
 8015a22:	4658      	mov	r0, fp
 8015a24:	2300      	movs	r3, #0
 8015a26:	f7f9 fb5d 	bl	800f0e4 <ucdr_init_buffer_origin_offset>
 8015a2a:	464a      	mov	r2, r9
 8015a2c:	2300      	movs	r3, #0
 8015a2e:	210d      	movs	r1, #13
 8015a30:	4658      	mov	r0, fp
 8015a32:	f7fb f92d 	bl	8010c90 <uxr_buffer_submessage_header>
 8015a36:	8920      	ldrh	r0, [r4, #8]
 8015a38:	fbb5 f3f0 	udiv	r3, r5, r0
 8015a3c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8015a40:	fb00 5313 	mls	r3, r0, r3, r5
 8015a44:	b29b      	uxth	r3, r3
 8015a46:	fbb1 f1f0 	udiv	r1, r1, r0
 8015a4a:	fb03 f301 	mul.w	r3, r3, r1
 8015a4e:	4628      	mov	r0, r5
 8015a50:	50d6      	str	r6, [r2, r3]
 8015a52:	2101      	movs	r1, #1
 8015a54:	f000 f9c4 	bl	8015de0 <uxr_seq_num_add>
 8015a58:	f108 0801 	add.w	r8, r8, #1
 8015a5c:	fa1f f388 	uxth.w	r3, r8
 8015a60:	459a      	cmp	sl, r3
 8015a62:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015a66:	4605      	mov	r5, r0
 8015a68:	d8c9      	bhi.n	80159fe <uxr_prepare_reliable_buffer_to_write+0xe6>
 8015a6a:	fbb5 f1fc 	udiv	r1, r5, ip
 8015a6e:	fb0c 5111 	mls	r1, ip, r1, r5
 8015a72:	b289      	uxth	r1, r1
 8015a74:	6863      	ldr	r3, [r4, #4]
 8015a76:	fbb3 fcfc 	udiv	ip, r3, ip
 8015a7a:	6823      	ldr	r3, [r4, #0]
 8015a7c:	fb01 f10c 	mul.w	r1, r1, ip
 8015a80:	3104      	adds	r1, #4
 8015a82:	4419      	add	r1, r3
 8015a84:	4632      	mov	r2, r6
 8015a86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015a8a:	9300      	str	r3, [sp, #0]
 8015a8c:	4658      	mov	r0, fp
 8015a8e:	2300      	movs	r3, #0
 8015a90:	f7f9 fb28 	bl	800f0e4 <ucdr_init_buffer_origin_offset>
 8015a94:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8015a98:	4658      	mov	r0, fp
 8015a9a:	fa1f f288 	uxth.w	r2, r8
 8015a9e:	2302      	movs	r3, #2
 8015aa0:	210d      	movs	r1, #13
 8015aa2:	f7fb f8f5 	bl	8010c90 <uxr_buffer_submessage_header>
 8015aa6:	e9d4 3200 	ldrd	r3, r2, [r4]
 8015aaa:	8921      	ldrh	r1, [r4, #8]
 8015aac:	9f03      	ldr	r7, [sp, #12]
 8015aae:	9307      	str	r3, [sp, #28]
 8015ab0:	9b05      	ldr	r3, [sp, #20]
 8015ab2:	7b26      	ldrb	r6, [r4, #12]
 8015ab4:	fbb5 f0f1 	udiv	r0, r5, r1
 8015ab8:	fbb2 f2f1 	udiv	r2, r2, r1
 8015abc:	fb01 5010 	mls	r0, r1, r0, r5
 8015ac0:	1d39      	adds	r1, r7, #4
 8015ac2:	440b      	add	r3, r1
 8015ac4:	b280      	uxth	r0, r0
 8015ac6:	fb00 f002 	mul.w	r0, r0, r2
 8015aca:	4619      	mov	r1, r3
 8015acc:	3604      	adds	r6, #4
 8015ace:	9b07      	ldr	r3, [sp, #28]
 8015ad0:	9a04      	ldr	r2, [sp, #16]
 8015ad2:	4446      	add	r6, r8
 8015ad4:	501e      	str	r6, [r3, r0]
 8015ad6:	9e06      	ldr	r6, [sp, #24]
 8015ad8:	3a08      	subs	r2, #8
 8015ada:	1bd2      	subs	r2, r2, r7
 8015adc:	4630      	mov	r0, r6
 8015ade:	f7f9 fb13 	bl	800f108 <ucdr_init_buffer>
 8015ae2:	4630      	mov	r0, r6
 8015ae4:	493d      	ldr	r1, [pc, #244]	; (8015bdc <uxr_prepare_reliable_buffer_to_write+0x2c4>)
 8015ae6:	4622      	mov	r2, r4
 8015ae8:	f7f9 fae4 	bl	800f0b4 <ucdr_set_on_full_buffer_callback>
 8015aec:	2001      	movs	r0, #1
 8015aee:	81e5      	strh	r5, [r4, #14]
 8015af0:	b011      	add	sp, #68	; 0x44
 8015af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015af6:	2101      	movs	r1, #1
 8015af8:	89e0      	ldrh	r0, [r4, #14]
 8015afa:	f000 f971 	bl	8015de0 <uxr_seq_num_add>
 8015afe:	8921      	ldrh	r1, [r4, #8]
 8015b00:	4605      	mov	r5, r0
 8015b02:	8a60      	ldrh	r0, [r4, #18]
 8015b04:	f000 f96c 	bl	8015de0 <uxr_seq_num_add>
 8015b08:	4601      	mov	r1, r0
 8015b0a:	4628      	mov	r0, r5
 8015b0c:	f000 f970 	bl	8015df0 <uxr_seq_num_cmp>
 8015b10:	2800      	cmp	r0, #0
 8015b12:	dd2a      	ble.n	8015b6a <uxr_prepare_reliable_buffer_to_write+0x252>
 8015b14:	2000      	movs	r0, #0
 8015b16:	b011      	add	sp, #68	; 0x44
 8015b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b1c:	8921      	ldrh	r1, [r4, #8]
 8015b1e:	8a60      	ldrh	r0, [r4, #18]
 8015b20:	f000 f95e 	bl	8015de0 <uxr_seq_num_add>
 8015b24:	4601      	mov	r1, r0
 8015b26:	4628      	mov	r0, r5
 8015b28:	f000 f962 	bl	8015df0 <uxr_seq_num_cmp>
 8015b2c:	2800      	cmp	r0, #0
 8015b2e:	dcf1      	bgt.n	8015b14 <uxr_prepare_reliable_buffer_to_write+0x1fc>
 8015b30:	8921      	ldrh	r1, [r4, #8]
 8015b32:	fbb5 f3f1 	udiv	r3, r5, r1
 8015b36:	e9d4 4200 	ldrd	r4, r2, [r4]
 8015b3a:	fb01 5313 	mls	r3, r1, r3, r5
 8015b3e:	b29b      	uxth	r3, r3
 8015b40:	fbb2 f2f1 	udiv	r2, r2, r1
 8015b44:	fb03 f302 	mul.w	r3, r3, r2
 8015b48:	e9dd 1005 	ldrd	r1, r0, [sp, #20]
 8015b4c:	50e7      	str	r7, [r4, r3]
 8015b4e:	9b03      	ldr	r3, [sp, #12]
 8015b50:	9300      	str	r3, [sp, #0]
 8015b52:	463a      	mov	r2, r7
 8015b54:	2300      	movs	r3, #0
 8015b56:	f7f9 fac5 	bl	800f0e4 <ucdr_init_buffer_origin_offset>
 8015b5a:	2001      	movs	r0, #1
 8015b5c:	e7db      	b.n	8015b16 <uxr_prepare_reliable_buffer_to_write+0x1fe>
 8015b5e:	f10a 0a01 	add.w	sl, sl, #1
 8015b62:	fa1f fa8a 	uxth.w	sl, sl
 8015b66:	9307      	str	r3, [sp, #28]
 8015b68:	e73c      	b.n	80159e4 <uxr_prepare_reliable_buffer_to_write+0xcc>
 8015b6a:	8920      	ldrh	r0, [r4, #8]
 8015b6c:	fbb5 f3f0 	udiv	r3, r5, r0
 8015b70:	fb00 5313 	mls	r3, r0, r3, r5
 8015b74:	b29b      	uxth	r3, r3
 8015b76:	6862      	ldr	r2, [r4, #4]
 8015b78:	6821      	ldr	r1, [r4, #0]
 8015b7a:	fbb2 f0f0 	udiv	r0, r2, r0
 8015b7e:	fb03 f300 	mul.w	r3, r3, r0
 8015b82:	7b22      	ldrb	r2, [r4, #12]
 8015b84:	9806      	ldr	r0, [sp, #24]
 8015b86:	3304      	adds	r3, #4
 8015b88:	4419      	add	r1, r3
 8015b8a:	4442      	add	r2, r8
 8015b8c:	f841 2c04 	str.w	r2, [r1, #-4]
 8015b90:	7b23      	ldrb	r3, [r4, #12]
 8015b92:	9300      	str	r3, [sp, #0]
 8015b94:	2300      	movs	r3, #0
 8015b96:	f7f9 faa5 	bl	800f0e4 <ucdr_init_buffer_origin_offset>
 8015b9a:	81e5      	strh	r5, [r4, #14]
 8015b9c:	2001      	movs	r0, #1
 8015b9e:	e7ba      	b.n	8015b16 <uxr_prepare_reliable_buffer_to_write+0x1fe>
 8015ba0:	4628      	mov	r0, r5
 8015ba2:	2101      	movs	r1, #1
 8015ba4:	f000 f91c 	bl	8015de0 <uxr_seq_num_add>
 8015ba8:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015bac:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015bb0:	fbb3 f1fc 	udiv	r1, r3, ip
 8015bb4:	fbb0 f3fc 	udiv	r3, r0, ip
 8015bb8:	fb0c 0313 	mls	r3, ip, r3, r0
 8015bbc:	b29b      	uxth	r3, r3
 8015bbe:	fb03 f301 	mul.w	r3, r3, r1
 8015bc2:	3304      	adds	r3, #4
 8015bc4:	18d3      	adds	r3, r2, r3
 8015bc6:	9305      	str	r3, [sp, #20]
 8015bc8:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8015bcc:	f894 e00c 	ldrb.w	lr, [r4, #12]
 8015bd0:	9303      	str	r3, [sp, #12]
 8015bd2:	4605      	mov	r5, r0
 8015bd4:	e6d4      	b.n	8015980 <uxr_prepare_reliable_buffer_to_write+0x68>
 8015bd6:	4660      	mov	r0, ip
 8015bd8:	e6ee      	b.n	80159b8 <uxr_prepare_reliable_buffer_to_write+0xa0>
 8015bda:	bf00      	nop
 8015bdc:	08015811 	.word	0x08015811

08015be0 <uxr_prepare_next_reliable_buffer_to_send>:
 8015be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015be4:	4605      	mov	r5, r0
 8015be6:	4688      	mov	r8, r1
 8015be8:	8a00      	ldrh	r0, [r0, #16]
 8015bea:	2101      	movs	r1, #1
 8015bec:	4617      	mov	r7, r2
 8015bee:	461e      	mov	r6, r3
 8015bf0:	f000 f8f6 	bl	8015de0 <uxr_seq_num_add>
 8015bf4:	8030      	strh	r0, [r6, #0]
 8015bf6:	892a      	ldrh	r2, [r5, #8]
 8015bf8:	fbb0 f3f2 	udiv	r3, r0, r2
 8015bfc:	fb02 0413 	mls	r4, r2, r3, r0
 8015c00:	b2a4      	uxth	r4, r4
 8015c02:	686b      	ldr	r3, [r5, #4]
 8015c04:	fbb3 f2f2 	udiv	r2, r3, r2
 8015c08:	682b      	ldr	r3, [r5, #0]
 8015c0a:	89e9      	ldrh	r1, [r5, #14]
 8015c0c:	fb04 f402 	mul.w	r4, r4, r2
 8015c10:	3404      	adds	r4, #4
 8015c12:	4423      	add	r3, r4
 8015c14:	f8c8 3000 	str.w	r3, [r8]
 8015c18:	682b      	ldr	r3, [r5, #0]
 8015c1a:	441c      	add	r4, r3
 8015c1c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8015c20:	603b      	str	r3, [r7, #0]
 8015c22:	f000 f8e5 	bl	8015df0 <uxr_seq_num_cmp>
 8015c26:	2800      	cmp	r0, #0
 8015c28:	dd02      	ble.n	8015c30 <uxr_prepare_next_reliable_buffer_to_send+0x50>
 8015c2a:	2000      	movs	r0, #0
 8015c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c30:	683a      	ldr	r2, [r7, #0]
 8015c32:	7b2b      	ldrb	r3, [r5, #12]
 8015c34:	429a      	cmp	r2, r3
 8015c36:	d9f8      	bls.n	8015c2a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8015c38:	8a69      	ldrh	r1, [r5, #18]
 8015c3a:	8a28      	ldrh	r0, [r5, #16]
 8015c3c:	f000 f8d4 	bl	8015de8 <uxr_seq_num_sub>
 8015c40:	892b      	ldrh	r3, [r5, #8]
 8015c42:	4283      	cmp	r3, r0
 8015c44:	d0f1      	beq.n	8015c2a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8015c46:	8830      	ldrh	r0, [r6, #0]
 8015c48:	89eb      	ldrh	r3, [r5, #14]
 8015c4a:	8228      	strh	r0, [r5, #16]
 8015c4c:	4298      	cmp	r0, r3
 8015c4e:	d002      	beq.n	8015c56 <uxr_prepare_next_reliable_buffer_to_send+0x76>
 8015c50:	2001      	movs	r0, #1
 8015c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c56:	2101      	movs	r1, #1
 8015c58:	f000 f8c2 	bl	8015de0 <uxr_seq_num_add>
 8015c5c:	81e8      	strh	r0, [r5, #14]
 8015c5e:	2001      	movs	r0, #1
 8015c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015c64 <uxr_update_output_stream_heartbeat_timestamp>:
 8015c64:	b5d0      	push	{r4, r6, r7, lr}
 8015c66:	8a01      	ldrh	r1, [r0, #16]
 8015c68:	4604      	mov	r4, r0
 8015c6a:	8a40      	ldrh	r0, [r0, #18]
 8015c6c:	4616      	mov	r6, r2
 8015c6e:	461f      	mov	r7, r3
 8015c70:	f000 f8be 	bl	8015df0 <uxr_seq_num_cmp>
 8015c74:	2800      	cmp	r0, #0
 8015c76:	db07      	blt.n	8015c88 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8015c78:	f04f 32ff 	mov.w	r2, #4294967295
 8015c7c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015c80:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8015c84:	2000      	movs	r0, #0
 8015c86:	bdd0      	pop	{r4, r6, r7, pc}
 8015c88:	f894 0020 	ldrb.w	r0, [r4, #32]
 8015c8c:	b948      	cbnz	r0, 8015ca2 <uxr_update_output_stream_heartbeat_timestamp+0x3e>
 8015c8e:	2301      	movs	r3, #1
 8015c90:	f884 3020 	strb.w	r3, [r4, #32]
 8015c94:	f116 0364 	adds.w	r3, r6, #100	; 0x64
 8015c98:	f147 0200 	adc.w	r2, r7, #0
 8015c9c:	e9c4 3206 	strd	r3, r2, [r4, #24]
 8015ca0:	bdd0      	pop	{r4, r6, r7, pc}
 8015ca2:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8015ca6:	4296      	cmp	r6, r2
 8015ca8:	eb77 0303 	sbcs.w	r3, r7, r3
 8015cac:	bfa5      	ittet	ge
 8015cae:	3001      	addge	r0, #1
 8015cb0:	f884 0020 	strbge.w	r0, [r4, #32]
 8015cb4:	2000      	movlt	r0, #0
 8015cb6:	2001      	movge	r0, #1
 8015cb8:	e7ec      	b.n	8015c94 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8015cba:	bf00      	nop

08015cbc <uxr_begin_output_nack_buffer_it>:
 8015cbc:	8a40      	ldrh	r0, [r0, #18]
 8015cbe:	4770      	bx	lr

08015cc0 <uxr_next_reliable_nack_buffer_to_send>:
 8015cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015cc4:	f890 9021 	ldrb.w	r9, [r0, #33]	; 0x21
 8015cc8:	f1b9 0f00 	cmp.w	r9, #0
 8015ccc:	d011      	beq.n	8015cf2 <uxr_next_reliable_nack_buffer_to_send+0x32>
 8015cce:	4605      	mov	r5, r0
 8015cd0:	8818      	ldrh	r0, [r3, #0]
 8015cd2:	460f      	mov	r7, r1
 8015cd4:	4690      	mov	r8, r2
 8015cd6:	461e      	mov	r6, r3
 8015cd8:	2101      	movs	r1, #1
 8015cda:	f000 f881 	bl	8015de0 <uxr_seq_num_add>
 8015cde:	8030      	strh	r0, [r6, #0]
 8015ce0:	8a29      	ldrh	r1, [r5, #16]
 8015ce2:	f000 f885 	bl	8015df0 <uxr_seq_num_cmp>
 8015ce6:	2800      	cmp	r0, #0
 8015ce8:	dd06      	ble.n	8015cf8 <uxr_next_reliable_nack_buffer_to_send+0x38>
 8015cea:	f04f 0900 	mov.w	r9, #0
 8015cee:	f885 9021 	strb.w	r9, [r5, #33]	; 0x21
 8015cf2:	4648      	mov	r0, r9
 8015cf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015cf8:	892a      	ldrh	r2, [r5, #8]
 8015cfa:	8830      	ldrh	r0, [r6, #0]
 8015cfc:	fbb0 f4f2 	udiv	r4, r0, r2
 8015d00:	fb02 0414 	mls	r4, r2, r4, r0
 8015d04:	b2a4      	uxth	r4, r4
 8015d06:	686b      	ldr	r3, [r5, #4]
 8015d08:	fbb3 f2f2 	udiv	r2, r3, r2
 8015d0c:	682b      	ldr	r3, [r5, #0]
 8015d0e:	fb04 f402 	mul.w	r4, r4, r2
 8015d12:	3404      	adds	r4, #4
 8015d14:	4423      	add	r3, r4
 8015d16:	603b      	str	r3, [r7, #0]
 8015d18:	682b      	ldr	r3, [r5, #0]
 8015d1a:	441c      	add	r4, r3
 8015d1c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8015d20:	f8c8 3000 	str.w	r3, [r8]
 8015d24:	7b2a      	ldrb	r2, [r5, #12]
 8015d26:	429a      	cmp	r2, r3
 8015d28:	d0d6      	beq.n	8015cd8 <uxr_next_reliable_nack_buffer_to_send+0x18>
 8015d2a:	4648      	mov	r0, r9
 8015d2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08015d30 <uxr_process_acknack>:
 8015d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d32:	4604      	mov	r4, r0
 8015d34:	460e      	mov	r6, r1
 8015d36:	4610      	mov	r0, r2
 8015d38:	2101      	movs	r1, #1
 8015d3a:	f000 f855 	bl	8015de8 <uxr_seq_num_sub>
 8015d3e:	8a61      	ldrh	r1, [r4, #18]
 8015d40:	f000 f852 	bl	8015de8 <uxr_seq_num_sub>
 8015d44:	b1c0      	cbz	r0, 8015d78 <uxr_process_acknack+0x48>
 8015d46:	4605      	mov	r5, r0
 8015d48:	2700      	movs	r7, #0
 8015d4a:	2101      	movs	r1, #1
 8015d4c:	8a60      	ldrh	r0, [r4, #18]
 8015d4e:	f000 f847 	bl	8015de0 <uxr_seq_num_add>
 8015d52:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015d56:	fbb0 f3fc 	udiv	r3, r0, ip
 8015d5a:	e9d4 2100 	ldrd	r2, r1, [r4]
 8015d5e:	fb0c 0313 	mls	r3, ip, r3, r0
 8015d62:	b29b      	uxth	r3, r3
 8015d64:	fbb1 f1fc 	udiv	r1, r1, ip
 8015d68:	3701      	adds	r7, #1
 8015d6a:	fb03 f301 	mul.w	r3, r3, r1
 8015d6e:	42bd      	cmp	r5, r7
 8015d70:	7b21      	ldrb	r1, [r4, #12]
 8015d72:	8260      	strh	r0, [r4, #18]
 8015d74:	50d1      	str	r1, [r2, r3]
 8015d76:	d1e8      	bne.n	8015d4a <uxr_process_acknack+0x1a>
 8015d78:	3e00      	subs	r6, #0
 8015d7a:	f04f 0300 	mov.w	r3, #0
 8015d7e:	bf18      	it	ne
 8015d80:	2601      	movne	r6, #1
 8015d82:	f884 3020 	strb.w	r3, [r4, #32]
 8015d86:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 8015d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015d8c <uxr_is_output_up_to_date>:
 8015d8c:	8a01      	ldrh	r1, [r0, #16]
 8015d8e:	8a40      	ldrh	r0, [r0, #18]
 8015d90:	b508      	push	{r3, lr}
 8015d92:	f000 f82d 	bl	8015df0 <uxr_seq_num_cmp>
 8015d96:	fab0 f080 	clz	r0, r0
 8015d9a:	0940      	lsrs	r0, r0, #5
 8015d9c:	bd08      	pop	{r3, pc}
 8015d9e:	bf00      	nop

08015da0 <get_available_free_slots>:
 8015da0:	8901      	ldrh	r1, [r0, #8]
 8015da2:	b1d9      	cbz	r1, 8015ddc <get_available_free_slots+0x3c>
 8015da4:	b4f0      	push	{r4, r5, r6, r7}
 8015da6:	2400      	movs	r4, #0
 8015da8:	6845      	ldr	r5, [r0, #4]
 8015daa:	6807      	ldr	r7, [r0, #0]
 8015dac:	7b06      	ldrb	r6, [r0, #12]
 8015dae:	fbb5 f5f1 	udiv	r5, r5, r1
 8015db2:	4620      	mov	r0, r4
 8015db4:	4622      	mov	r2, r4
 8015db6:	fbb2 f3f1 	udiv	r3, r2, r1
 8015dba:	fb01 2313 	mls	r3, r1, r3, r2
 8015dbe:	b29b      	uxth	r3, r3
 8015dc0:	fb05 7303 	mla	r3, r5, r3, r7
 8015dc4:	3401      	adds	r4, #1
 8015dc6:	681b      	ldr	r3, [r3, #0]
 8015dc8:	429e      	cmp	r6, r3
 8015dca:	bf08      	it	eq
 8015dcc:	3001      	addeq	r0, #1
 8015dce:	b2a2      	uxth	r2, r4
 8015dd0:	bf08      	it	eq
 8015dd2:	b280      	uxtheq	r0, r0
 8015dd4:	428a      	cmp	r2, r1
 8015dd6:	d3ee      	bcc.n	8015db6 <get_available_free_slots+0x16>
 8015dd8:	bcf0      	pop	{r4, r5, r6, r7}
 8015dda:	4770      	bx	lr
 8015ddc:	4608      	mov	r0, r1
 8015dde:	4770      	bx	lr

08015de0 <uxr_seq_num_add>:
 8015de0:	4408      	add	r0, r1
 8015de2:	b280      	uxth	r0, r0
 8015de4:	4770      	bx	lr
 8015de6:	bf00      	nop

08015de8 <uxr_seq_num_sub>:
 8015de8:	1a40      	subs	r0, r0, r1
 8015dea:	b280      	uxth	r0, r0
 8015dec:	4770      	bx	lr
 8015dee:	bf00      	nop

08015df0 <uxr_seq_num_cmp>:
 8015df0:	4288      	cmp	r0, r1
 8015df2:	d011      	beq.n	8015e18 <uxr_seq_num_cmp+0x28>
 8015df4:	d309      	bcc.n	8015e0a <uxr_seq_num_cmp+0x1a>
 8015df6:	4288      	cmp	r0, r1
 8015df8:	d910      	bls.n	8015e1c <uxr_seq_num_cmp+0x2c>
 8015dfa:	1a40      	subs	r0, r0, r1
 8015dfc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8015e00:	bfd4      	ite	le
 8015e02:	2001      	movle	r0, #1
 8015e04:	f04f 30ff 	movgt.w	r0, #4294967295
 8015e08:	4770      	bx	lr
 8015e0a:	1a0b      	subs	r3, r1, r0
 8015e0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015e10:	daf1      	bge.n	8015df6 <uxr_seq_num_cmp+0x6>
 8015e12:	f04f 30ff 	mov.w	r0, #4294967295
 8015e16:	4770      	bx	lr
 8015e18:	2000      	movs	r0, #0
 8015e1a:	4770      	bx	lr
 8015e1c:	2001      	movs	r0, #1
 8015e1e:	4770      	bx	lr

08015e20 <uxr_init_framing_io>:
 8015e20:	2300      	movs	r3, #0
 8015e22:	7041      	strb	r1, [r0, #1]
 8015e24:	7003      	strb	r3, [r0, #0]
 8015e26:	8583      	strh	r3, [r0, #44]	; 0x2c
 8015e28:	4770      	bx	lr
 8015e2a:	bf00      	nop

08015e2c <uxr_write_framed_msg>:
 8015e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e30:	7845      	ldrb	r5, [r0, #1]
 8015e32:	b085      	sub	sp, #20
 8015e34:	4604      	mov	r4, r0
 8015e36:	f1a5 0c7d 	sub.w	ip, r5, #125	; 0x7d
 8015e3a:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
 8015e3e:	f1bc 0f01 	cmp.w	ip, #1
 8015e42:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8015e46:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8015e4a:	f884 e038 	strb.w	lr, [r4, #56]	; 0x38
 8015e4e:	460e      	mov	r6, r1
 8015e50:	4617      	mov	r7, r2
 8015e52:	469b      	mov	fp, r3
 8015e54:	f240 8116 	bls.w	8016084 <uxr_write_framed_msg+0x258>
 8015e58:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8015e5c:	2302      	movs	r3, #2
 8015e5e:	2a01      	cmp	r2, #1
 8015e60:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 8015e64:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8015e68:	f240 8091 	bls.w	8015f8e <uxr_write_framed_msg+0x162>
 8015e6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015e6e:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 8015e72:	b2d9      	uxtb	r1, r3
 8015e74:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8015e78:	2203      	movs	r2, #3
 8015e7a:	2b01      	cmp	r3, #1
 8015e7c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015e80:	f240 809a 	bls.w	8015fb8 <uxr_write_framed_msg+0x18c>
 8015e84:	18a3      	adds	r3, r4, r2
 8015e86:	3201      	adds	r2, #1
 8015e88:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 8015e8c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015e90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015e92:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8015e96:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8015e9a:	2901      	cmp	r1, #1
 8015e9c:	eb04 0102 	add.w	r1, r4, r2
 8015ea0:	f240 8101 	bls.w	80160a6 <uxr_write_framed_msg+0x27a>
 8015ea4:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8015ea8:	3201      	adds	r2, #1
 8015eaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015eac:	b2d2      	uxtb	r2, r2
 8015eae:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	f000 8106 	beq.w	80160c4 <uxr_write_framed_msg+0x298>
 8015eb8:	f04f 0a00 	mov.w	sl, #0
 8015ebc:	46d1      	mov	r9, sl
 8015ebe:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8015ec2:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8015ec6:	2901      	cmp	r1, #1
 8015ec8:	f240 80a3 	bls.w	8016012 <uxr_write_framed_msg+0x1e6>
 8015ecc:	2a29      	cmp	r2, #41	; 0x29
 8015ece:	d87f      	bhi.n	8015fd0 <uxr_write_framed_msg+0x1a4>
 8015ed0:	18a1      	adds	r1, r4, r2
 8015ed2:	3201      	adds	r2, #1
 8015ed4:	b2d2      	uxtb	r2, r2
 8015ed6:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8015eda:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015ede:	ea8a 0303 	eor.w	r3, sl, r3
 8015ee2:	4984      	ldr	r1, [pc, #528]	; (80160f4 <uxr_write_framed_msg+0x2c8>)
 8015ee4:	b2db      	uxtb	r3, r3
 8015ee6:	f109 0901 	add.w	r9, r9, #1
 8015eea:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8015eee:	ea83 2a1a 	eor.w	sl, r3, sl, lsr #8
 8015ef2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015ef4:	454b      	cmp	r3, r9
 8015ef6:	d8e2      	bhi.n	8015ebe <uxr_write_framed_msg+0x92>
 8015ef8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8015efc:	fa5f f98a 	uxtb.w	r9, sl
 8015f00:	9301      	str	r3, [sp, #4]
 8015f02:	f04f 0b00 	mov.w	fp, #0
 8015f06:	f88d 900c 	strb.w	r9, [sp, #12]
 8015f0a:	f88d 300d 	strb.w	r3, [sp, #13]
 8015f0e:	f1a9 0a7d 	sub.w	sl, r9, #125	; 0x7d
 8015f12:	fa5f f18a 	uxtb.w	r1, sl
 8015f16:	2901      	cmp	r1, #1
 8015f18:	d920      	bls.n	8015f5c <uxr_write_framed_msg+0x130>
 8015f1a:	2a29      	cmp	r2, #41	; 0x29
 8015f1c:	f240 808b 	bls.w	8016036 <uxr_write_framed_msg+0x20a>
 8015f20:	2500      	movs	r5, #0
 8015f22:	e000      	b.n	8015f26 <uxr_write_framed_msg+0xfa>
 8015f24:	b160      	cbz	r0, 8015f40 <uxr_write_framed_msg+0x114>
 8015f26:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8015f2a:	1b52      	subs	r2, r2, r5
 8015f2c:	4421      	add	r1, r4
 8015f2e:	4643      	mov	r3, r8
 8015f30:	4638      	mov	r0, r7
 8015f32:	47b0      	blx	r6
 8015f34:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8015f38:	4405      	add	r5, r0
 8015f3a:	4295      	cmp	r5, r2
 8015f3c:	d3f2      	bcc.n	8015f24 <uxr_write_framed_msg+0xf8>
 8015f3e:	d003      	beq.n	8015f48 <uxr_write_framed_msg+0x11c>
 8015f40:	2000      	movs	r0, #0
 8015f42:	b005      	add	sp, #20
 8015f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f48:	fa5f f18a 	uxtb.w	r1, sl
 8015f4c:	f04f 0300 	mov.w	r3, #0
 8015f50:	2901      	cmp	r1, #1
 8015f52:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8015f56:	f04f 0200 	mov.w	r2, #0
 8015f5a:	d86c      	bhi.n	8016036 <uxr_write_framed_msg+0x20a>
 8015f5c:	1c51      	adds	r1, r2, #1
 8015f5e:	b2c9      	uxtb	r1, r1
 8015f60:	2929      	cmp	r1, #41	; 0x29
 8015f62:	d8dd      	bhi.n	8015f20 <uxr_write_framed_msg+0xf4>
 8015f64:	18a0      	adds	r0, r4, r2
 8015f66:	3202      	adds	r2, #2
 8015f68:	f089 0920 	eor.w	r9, r9, #32
 8015f6c:	b2d2      	uxtb	r2, r2
 8015f6e:	4659      	mov	r1, fp
 8015f70:	f04f 037d 	mov.w	r3, #125	; 0x7d
 8015f74:	f880 9039 	strb.w	r9, [r0, #57]	; 0x39
 8015f78:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8015f7c:	f04f 0b01 	mov.w	fp, #1
 8015f80:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015f84:	2900      	cmp	r1, #0
 8015f86:	d162      	bne.n	801604e <uxr_write_framed_msg+0x222>
 8015f88:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8015f8c:	e7bf      	b.n	8015f0e <uxr_write_framed_msg+0xe2>
 8015f8e:	2204      	movs	r2, #4
 8015f90:	2503      	movs	r5, #3
 8015f92:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015f94:	4423      	add	r3, r4
 8015f96:	b2c9      	uxtb	r1, r1
 8015f98:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8015f9c:	f883 c038 	strb.w	ip, [r3, #56]	; 0x38
 8015fa0:	4425      	add	r5, r4
 8015fa2:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8015fa6:	f080 0020 	eor.w	r0, r0, #32
 8015faa:	2b01      	cmp	r3, #1
 8015fac:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 8015fb0:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015fb4:	f63f af66 	bhi.w	8015e84 <uxr_write_framed_msg+0x58>
 8015fb8:	18a3      	adds	r3, r4, r2
 8015fba:	f081 0120 	eor.w	r1, r1, #32
 8015fbe:	3202      	adds	r2, #2
 8015fc0:	207d      	movs	r0, #125	; 0x7d
 8015fc2:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 8015fc6:	f883 0038 	strb.w	r0, [r3, #56]	; 0x38
 8015fca:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015fce:	e75f      	b.n	8015e90 <uxr_write_framed_msg+0x64>
 8015fd0:	2500      	movs	r5, #0
 8015fd2:	e001      	b.n	8015fd8 <uxr_write_framed_msg+0x1ac>
 8015fd4:	2800      	cmp	r0, #0
 8015fd6:	d0b3      	beq.n	8015f40 <uxr_write_framed_msg+0x114>
 8015fd8:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8015fdc:	1b52      	subs	r2, r2, r5
 8015fde:	4421      	add	r1, r4
 8015fe0:	4643      	mov	r3, r8
 8015fe2:	4638      	mov	r0, r7
 8015fe4:	47b0      	blx	r6
 8015fe6:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8015fea:	4405      	add	r5, r0
 8015fec:	4295      	cmp	r5, r2
 8015fee:	d3f1      	bcc.n	8015fd4 <uxr_write_framed_msg+0x1a8>
 8015ff0:	d1a6      	bne.n	8015f40 <uxr_write_framed_msg+0x114>
 8015ff2:	f04f 0300 	mov.w	r3, #0
 8015ff6:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8015ffa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015ffc:	454b      	cmp	r3, r9
 8015ffe:	d971      	bls.n	80160e4 <uxr_write_framed_msg+0x2b8>
 8016000:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8016004:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8016008:	2901      	cmp	r1, #1
 801600a:	f04f 0200 	mov.w	r2, #0
 801600e:	f63f af5d 	bhi.w	8015ecc <uxr_write_framed_msg+0xa0>
 8016012:	1c51      	adds	r1, r2, #1
 8016014:	b2c9      	uxtb	r1, r1
 8016016:	2929      	cmp	r1, #41	; 0x29
 8016018:	d8da      	bhi.n	8015fd0 <uxr_write_framed_msg+0x1a4>
 801601a:	18a0      	adds	r0, r4, r2
 801601c:	3202      	adds	r2, #2
 801601e:	b2d2      	uxtb	r2, r2
 8016020:	f083 0120 	eor.w	r1, r3, #32
 8016024:	f04f 057d 	mov.w	r5, #125	; 0x7d
 8016028:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 801602c:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
 8016030:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8016034:	e753      	b.n	8015ede <uxr_write_framed_msg+0xb2>
 8016036:	18a0      	adds	r0, r4, r2
 8016038:	3201      	adds	r2, #1
 801603a:	b2d2      	uxtb	r2, r2
 801603c:	4659      	mov	r1, fp
 801603e:	f880 9038 	strb.w	r9, [r0, #56]	; 0x38
 8016042:	f04f 0b01 	mov.w	fp, #1
 8016046:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801604a:	2900      	cmp	r1, #0
 801604c:	d09c      	beq.n	8015f88 <uxr_write_framed_msg+0x15c>
 801604e:	2500      	movs	r5, #0
 8016050:	e002      	b.n	8016058 <uxr_write_framed_msg+0x22c>
 8016052:	2800      	cmp	r0, #0
 8016054:	f43f af74 	beq.w	8015f40 <uxr_write_framed_msg+0x114>
 8016058:	f105 0138 	add.w	r1, r5, #56	; 0x38
 801605c:	1b52      	subs	r2, r2, r5
 801605e:	4421      	add	r1, r4
 8016060:	4643      	mov	r3, r8
 8016062:	4638      	mov	r0, r7
 8016064:	47b0      	blx	r6
 8016066:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801606a:	4405      	add	r5, r0
 801606c:	4295      	cmp	r5, r2
 801606e:	d3f0      	bcc.n	8016052 <uxr_write_framed_msg+0x226>
 8016070:	f47f af66 	bne.w	8015f40 <uxr_write_framed_msg+0x114>
 8016074:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016076:	2300      	movs	r3, #0
 8016078:	b290      	uxth	r0, r2
 801607a:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801607e:	b005      	add	sp, #20
 8016080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016084:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8016088:	f085 0520 	eor.w	r5, r5, #32
 801608c:	2303      	movs	r3, #3
 801608e:	217d      	movs	r1, #125	; 0x7d
 8016090:	2a01      	cmp	r2, #1
 8016092:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
 8016096:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801609a:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 801609e:	d814      	bhi.n	80160ca <uxr_write_framed_msg+0x29e>
 80160a0:	2205      	movs	r2, #5
 80160a2:	2504      	movs	r5, #4
 80160a4:	e775      	b.n	8015f92 <uxr_write_framed_msg+0x166>
 80160a6:	f083 0320 	eor.w	r3, r3, #32
 80160aa:	f881 3039 	strb.w	r3, [r1, #57]	; 0x39
 80160ae:	3202      	adds	r2, #2
 80160b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80160b2:	b2d2      	uxtb	r2, r2
 80160b4:	207d      	movs	r0, #125	; 0x7d
 80160b6:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 80160ba:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80160be:	2b00      	cmp	r3, #0
 80160c0:	f47f aefa 	bne.w	8015eb8 <uxr_write_framed_msg+0x8c>
 80160c4:	9301      	str	r3, [sp, #4]
 80160c6:	4699      	mov	r9, r3
 80160c8:	e71b      	b.n	8015f02 <uxr_write_framed_msg+0xd6>
 80160ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80160cc:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 80160d0:	b2d9      	uxtb	r1, r3
 80160d2:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 80160d6:	2204      	movs	r2, #4
 80160d8:	2b01      	cmp	r3, #1
 80160da:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80160de:	f63f aed1 	bhi.w	8015e84 <uxr_write_framed_msg+0x58>
 80160e2:	e769      	b.n	8015fb8 <uxr_write_framed_msg+0x18c>
 80160e4:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80160e8:	fa5f f98a 	uxtb.w	r9, sl
 80160ec:	9301      	str	r3, [sp, #4]
 80160ee:	2200      	movs	r2, #0
 80160f0:	e707      	b.n	8015f02 <uxr_write_framed_msg+0xd6>
 80160f2:	bf00      	nop
 80160f4:	08018e0c 	.word	0x08018e0c

080160f8 <uxr_framing_read_transport>:
 80160f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160fc:	4604      	mov	r4, r0
 80160fe:	b083      	sub	sp, #12
 8016100:	461f      	mov	r7, r3
 8016102:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8016106:	4689      	mov	r9, r1
 8016108:	4692      	mov	sl, r2
 801610a:	f7fa fe07 	bl	8010d1c <uxr_millis>
 801610e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8016112:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 8016116:	42b3      	cmp	r3, r6
 8016118:	4680      	mov	r8, r0
 801611a:	d05f      	beq.n	80161dc <uxr_framing_read_transport+0xe4>
 801611c:	d81b      	bhi.n	8016156 <uxr_framing_read_transport+0x5e>
 801611e:	1e75      	subs	r5, r6, #1
 8016120:	1aed      	subs	r5, r5, r3
 8016122:	b2ed      	uxtb	r5, r5
 8016124:	2600      	movs	r6, #0
 8016126:	455d      	cmp	r5, fp
 8016128:	d81e      	bhi.n	8016168 <uxr_framing_read_transport+0x70>
 801612a:	19ab      	adds	r3, r5, r6
 801612c:	455b      	cmp	r3, fp
 801612e:	bf84      	itt	hi
 8016130:	ebab 0605 	subhi.w	r6, fp, r5
 8016134:	b2f6      	uxtbhi	r6, r6
 8016136:	b9e5      	cbnz	r5, 8016172 <uxr_framing_read_transport+0x7a>
 8016138:	f04f 0b00 	mov.w	fp, #0
 801613c:	f7fa fdee 	bl	8010d1c <uxr_millis>
 8016140:	683b      	ldr	r3, [r7, #0]
 8016142:	eba0 0008 	sub.w	r0, r0, r8
 8016146:	1a1b      	subs	r3, r3, r0
 8016148:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801614c:	4658      	mov	r0, fp
 801614e:	603b      	str	r3, [r7, #0]
 8016150:	b003      	add	sp, #12
 8016152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016156:	2e00      	cmp	r6, #0
 8016158:	d048      	beq.n	80161ec <uxr_framing_read_transport+0xf4>
 801615a:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 801615e:	b2ed      	uxtb	r5, r5
 8016160:	3e01      	subs	r6, #1
 8016162:	455d      	cmp	r5, fp
 8016164:	b2f6      	uxtb	r6, r6
 8016166:	d9e0      	bls.n	801612a <uxr_framing_read_transport+0x32>
 8016168:	fa5f f58b 	uxtb.w	r5, fp
 801616c:	2600      	movs	r6, #0
 801616e:	2d00      	cmp	r5, #0
 8016170:	d0e2      	beq.n	8016138 <uxr_framing_read_transport+0x40>
 8016172:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8016176:	3102      	adds	r1, #2
 8016178:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801617a:	9300      	str	r3, [sp, #0]
 801617c:	683b      	ldr	r3, [r7, #0]
 801617e:	4421      	add	r1, r4
 8016180:	462a      	mov	r2, r5
 8016182:	4650      	mov	r0, sl
 8016184:	47c8      	blx	r9
 8016186:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801618a:	4a1b      	ldr	r2, [pc, #108]	; (80161f8 <uxr_framing_read_transport+0x100>)
 801618c:	4403      	add	r3, r0
 801618e:	0859      	lsrs	r1, r3, #1
 8016190:	fba2 2101 	umull	r2, r1, r2, r1
 8016194:	0889      	lsrs	r1, r1, #2
 8016196:	222a      	movs	r2, #42	; 0x2a
 8016198:	fb02 3111 	mls	r1, r2, r1, r3
 801619c:	4683      	mov	fp, r0
 801619e:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 80161a2:	2800      	cmp	r0, #0
 80161a4:	d0c8      	beq.n	8016138 <uxr_framing_read_transport+0x40>
 80161a6:	42a8      	cmp	r0, r5
 80161a8:	d1c8      	bne.n	801613c <uxr_framing_read_transport+0x44>
 80161aa:	b31e      	cbz	r6, 80161f4 <uxr_framing_read_transport+0xfc>
 80161ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80161ae:	9300      	str	r3, [sp, #0]
 80161b0:	3102      	adds	r1, #2
 80161b2:	4421      	add	r1, r4
 80161b4:	4632      	mov	r2, r6
 80161b6:	2300      	movs	r3, #0
 80161b8:	4650      	mov	r0, sl
 80161ba:	47c8      	blx	r9
 80161bc:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80161c0:	490d      	ldr	r1, [pc, #52]	; (80161f8 <uxr_framing_read_transport+0x100>)
 80161c2:	181a      	adds	r2, r3, r0
 80161c4:	0853      	lsrs	r3, r2, #1
 80161c6:	fba1 1303 	umull	r1, r3, r1, r3
 80161ca:	089b      	lsrs	r3, r3, #2
 80161cc:	212a      	movs	r1, #42	; 0x2a
 80161ce:	fb01 2313 	mls	r3, r1, r3, r2
 80161d2:	eb00 0b05 	add.w	fp, r0, r5
 80161d6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80161da:	e7af      	b.n	801613c <uxr_framing_read_transport+0x44>
 80161dc:	2600      	movs	r6, #0
 80161de:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 80161e2:	85a6      	strh	r6, [r4, #44]	; 0x2c
 80161e4:	d9c0      	bls.n	8016168 <uxr_framing_read_transport+0x70>
 80161e6:	2102      	movs	r1, #2
 80161e8:	2529      	movs	r5, #41	; 0x29
 80161ea:	e7c5      	b.n	8016178 <uxr_framing_read_transport+0x80>
 80161ec:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 80161f0:	b2ed      	uxtb	r5, r5
 80161f2:	e798      	b.n	8016126 <uxr_framing_read_transport+0x2e>
 80161f4:	46ab      	mov	fp, r5
 80161f6:	e7a1      	b.n	801613c <uxr_framing_read_transport+0x44>
 80161f8:	30c30c31 	.word	0x30c30c31

080161fc <uxr_read_framed_msg>:
 80161fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016200:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
 8016204:	f890 502d 	ldrb.w	r5, [r0, #45]	; 0x2d
 8016208:	42ae      	cmp	r6, r5
 801620a:	b083      	sub	sp, #12
 801620c:	4604      	mov	r4, r0
 801620e:	461f      	mov	r7, r3
 8016210:	4689      	mov	r9, r1
 8016212:	4692      	mov	sl, r2
 8016214:	f000 817d 	beq.w	8016512 <uxr_read_framed_msg+0x316>
 8016218:	7823      	ldrb	r3, [r4, #0]
 801621a:	4ecc      	ldr	r6, [pc, #816]	; (801654c <uxr_read_framed_msg+0x350>)
 801621c:	f8df 8330 	ldr.w	r8, [pc, #816]	; 8016550 <uxr_read_framed_msg+0x354>
 8016220:	2b07      	cmp	r3, #7
 8016222:	d8fd      	bhi.n	8016220 <uxr_read_framed_msg+0x24>
 8016224:	e8df f013 	tbh	[pc, r3, lsl #1]
 8016228:	00f40113 	.word	0x00f40113
 801622c:	00b700d4 	.word	0x00b700d4
 8016230:	004d008e 	.word	0x004d008e
 8016234:	00080030 	.word	0x00080030
 8016238:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801623c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8016240:	4298      	cmp	r0, r3
 8016242:	f000 8141 	beq.w	80164c8 <uxr_read_framed_msg+0x2cc>
 8016246:	18e2      	adds	r2, r4, r3
 8016248:	7891      	ldrb	r1, [r2, #2]
 801624a:	297d      	cmp	r1, #125	; 0x7d
 801624c:	f000 81a2 	beq.w	8016594 <uxr_read_framed_msg+0x398>
 8016250:	3301      	adds	r3, #1
 8016252:	085a      	lsrs	r2, r3, #1
 8016254:	fba6 0202 	umull	r0, r2, r6, r2
 8016258:	0892      	lsrs	r2, r2, #2
 801625a:	202a      	movs	r0, #42	; 0x2a
 801625c:	fb00 3312 	mls	r3, r0, r2, r3
 8016260:	297e      	cmp	r1, #126	; 0x7e
 8016262:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8016266:	f000 8251 	beq.w	801670c <uxr_read_framed_msg+0x510>
 801626a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801626c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801626e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8016272:	b29b      	uxth	r3, r3
 8016274:	2100      	movs	r1, #0
 8016276:	429a      	cmp	r2, r3
 8016278:	86a3      	strh	r3, [r4, #52]	; 0x34
 801627a:	7021      	strb	r1, [r4, #0]
 801627c:	f000 8182 	beq.w	8016584 <uxr_read_framed_msg+0x388>
 8016280:	2000      	movs	r0, #0
 8016282:	b003      	add	sp, #12
 8016284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016288:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801628c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8016290:	4298      	cmp	r0, r3
 8016292:	f000 8128 	beq.w	80164e6 <uxr_read_framed_msg+0x2ea>
 8016296:	18e2      	adds	r2, r4, r3
 8016298:	7891      	ldrb	r1, [r2, #2]
 801629a:	297d      	cmp	r1, #125	; 0x7d
 801629c:	f000 8196 	beq.w	80165cc <uxr_read_framed_msg+0x3d0>
 80162a0:	3301      	adds	r3, #1
 80162a2:	085a      	lsrs	r2, r3, #1
 80162a4:	fba6 0202 	umull	r0, r2, r6, r2
 80162a8:	0892      	lsrs	r2, r2, #2
 80162aa:	202a      	movs	r0, #42	; 0x2a
 80162ac:	fb00 3312 	mls	r3, r0, r2, r3
 80162b0:	297e      	cmp	r1, #126	; 0x7e
 80162b2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80162b6:	f000 8219 	beq.w	80166ec <uxr_read_framed_msg+0x4f0>
 80162ba:	2307      	movs	r3, #7
 80162bc:	86a1      	strh	r1, [r4, #52]	; 0x34
 80162be:	7023      	strb	r3, [r4, #0]
 80162c0:	e7ae      	b.n	8016220 <uxr_read_framed_msg+0x24>
 80162c2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80162c4:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 80162c6:	429d      	cmp	r5, r3
 80162c8:	d937      	bls.n	801633a <uxr_read_framed_msg+0x13e>
 80162ca:	ee07 9a90 	vmov	s15, r9
 80162ce:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80162d2:	e01e      	b.n	8016312 <uxr_read_framed_msg+0x116>
 80162d4:	f89e e002 	ldrb.w	lr, [lr, #2]
 80162d8:	f1be 0f7d 	cmp.w	lr, #125	; 0x7d
 80162dc:	f000 80d2 	beq.w	8016484 <uxr_read_framed_msg+0x288>
 80162e0:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 80162e4:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80162e8:	f000 8214 	beq.w	8016714 <uxr_read_framed_msg+0x518>
 80162ec:	f807 e003 	strb.w	lr, [r7, r3]
 80162f0:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 80162f2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80162f4:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 80162f6:	ea80 010e 	eor.w	r1, r0, lr
 80162fa:	b2c9      	uxtb	r1, r1
 80162fc:	3301      	adds	r3, #1
 80162fe:	f838 2011 	ldrh.w	r2, [r8, r1, lsl #1]
 8016302:	b29b      	uxth	r3, r3
 8016304:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8016308:	42ab      	cmp	r3, r5
 801630a:	86e2      	strh	r2, [r4, #54]	; 0x36
 801630c:	8663      	strh	r3, [r4, #50]	; 0x32
 801630e:	f080 8121 	bcs.w	8016554 <uxr_read_framed_msg+0x358>
 8016312:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
 8016316:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801631a:	f101 0b01 	add.w	fp, r1, #1
 801631e:	ea4f 025b 	mov.w	r2, fp, lsr #1
 8016322:	fba6 9202 	umull	r9, r2, r6, r2
 8016326:	0892      	lsrs	r2, r2, #2
 8016328:	4288      	cmp	r0, r1
 801632a:	eb04 0e01 	add.w	lr, r4, r1
 801632e:	fb0c b212 	mls	r2, ip, r2, fp
 8016332:	d1cf      	bne.n	80162d4 <uxr_read_framed_msg+0xd8>
 8016334:	ee17 9a90 	vmov	r9, s15
 8016338:	429d      	cmp	r5, r3
 801633a:	f040 8112 	bne.w	8016562 <uxr_read_framed_msg+0x366>
 801633e:	2306      	movs	r3, #6
 8016340:	7023      	strb	r3, [r4, #0]
 8016342:	e76d      	b.n	8016220 <uxr_read_framed_msg+0x24>
 8016344:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8016348:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801634c:	4298      	cmp	r0, r3
 801634e:	f000 80bb 	beq.w	80164c8 <uxr_read_framed_msg+0x2cc>
 8016352:	18e2      	adds	r2, r4, r3
 8016354:	7891      	ldrb	r1, [r2, #2]
 8016356:	297d      	cmp	r1, #125	; 0x7d
 8016358:	f000 8153 	beq.w	8016602 <uxr_read_framed_msg+0x406>
 801635c:	3301      	adds	r3, #1
 801635e:	085a      	lsrs	r2, r3, #1
 8016360:	fba6 0202 	umull	r0, r2, r6, r2
 8016364:	0892      	lsrs	r2, r2, #2
 8016366:	202a      	movs	r0, #42	; 0x2a
 8016368:	fb00 3212 	mls	r2, r0, r2, r3
 801636c:	297e      	cmp	r1, #126	; 0x7e
 801636e:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8016372:	f000 81cb 	beq.w	801670c <uxr_read_framed_msg+0x510>
 8016376:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8016378:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801637c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801637e:	b29b      	uxth	r3, r3
 8016380:	2000      	movs	r0, #0
 8016382:	428b      	cmp	r3, r1
 8016384:	8623      	strh	r3, [r4, #48]	; 0x30
 8016386:	8660      	strh	r0, [r4, #50]	; 0x32
 8016388:	86e0      	strh	r0, [r4, #54]	; 0x36
 801638a:	f240 80db 	bls.w	8016544 <uxr_read_framed_msg+0x348>
 801638e:	7020      	strb	r0, [r4, #0]
 8016390:	b003      	add	sp, #12
 8016392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016396:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801639a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801639e:	4298      	cmp	r0, r3
 80163a0:	f000 80a1 	beq.w	80164e6 <uxr_read_framed_msg+0x2ea>
 80163a4:	18e2      	adds	r2, r4, r3
 80163a6:	7891      	ldrb	r1, [r2, #2]
 80163a8:	297d      	cmp	r1, #125	; 0x7d
 80163aa:	f000 8167 	beq.w	801667c <uxr_read_framed_msg+0x480>
 80163ae:	3301      	adds	r3, #1
 80163b0:	085a      	lsrs	r2, r3, #1
 80163b2:	fba6 0202 	umull	r0, r2, r6, r2
 80163b6:	0892      	lsrs	r2, r2, #2
 80163b8:	202a      	movs	r0, #42	; 0x2a
 80163ba:	fb00 3312 	mls	r3, r0, r2, r3
 80163be:	297e      	cmp	r1, #126	; 0x7e
 80163c0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80163c4:	f000 8192 	beq.w	80166ec <uxr_read_framed_msg+0x4f0>
 80163c8:	2304      	movs	r3, #4
 80163ca:	8621      	strh	r1, [r4, #48]	; 0x30
 80163cc:	7023      	strb	r3, [r4, #0]
 80163ce:	e727      	b.n	8016220 <uxr_read_framed_msg+0x24>
 80163d0:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80163d4:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80163d8:	4290      	cmp	r0, r2
 80163da:	f000 80b1 	beq.w	8016540 <uxr_read_framed_msg+0x344>
 80163de:	18a3      	adds	r3, r4, r2
 80163e0:	7899      	ldrb	r1, [r3, #2]
 80163e2:	297d      	cmp	r1, #125	; 0x7d
 80163e4:	f000 8166 	beq.w	80166b4 <uxr_read_framed_msg+0x4b8>
 80163e8:	3201      	adds	r2, #1
 80163ea:	0850      	lsrs	r0, r2, #1
 80163ec:	fba6 3000 	umull	r3, r0, r6, r0
 80163f0:	0880      	lsrs	r0, r0, #2
 80163f2:	232a      	movs	r3, #42	; 0x2a
 80163f4:	fb03 2210 	mls	r2, r3, r0, r2
 80163f8:	297e      	cmp	r1, #126	; 0x7e
 80163fa:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80163fe:	f000 8187 	beq.w	8016710 <uxr_read_framed_msg+0x514>
 8016402:	7863      	ldrb	r3, [r4, #1]
 8016404:	428b      	cmp	r3, r1
 8016406:	bf0c      	ite	eq
 8016408:	2303      	moveq	r3, #3
 801640a:	2300      	movne	r3, #0
 801640c:	7023      	strb	r3, [r4, #0]
 801640e:	e707      	b.n	8016220 <uxr_read_framed_msg+0x24>
 8016410:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8016414:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8016418:	2200      	movs	r2, #0
 801641a:	4299      	cmp	r1, r3
 801641c:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 8016420:	d063      	beq.n	80164ea <uxr_read_framed_msg+0x2ee>
 8016422:	18e2      	adds	r2, r4, r3
 8016424:	7892      	ldrb	r2, [r2, #2]
 8016426:	2a7d      	cmp	r2, #125	; 0x7d
 8016428:	f000 8107 	beq.w	801663a <uxr_read_framed_msg+0x43e>
 801642c:	1c59      	adds	r1, r3, #1
 801642e:	084b      	lsrs	r3, r1, #1
 8016430:	fba6 0303 	umull	r0, r3, r6, r3
 8016434:	089b      	lsrs	r3, r3, #2
 8016436:	202a      	movs	r0, #42	; 0x2a
 8016438:	fb00 1313 	mls	r3, r0, r3, r1
 801643c:	2a7e      	cmp	r2, #126	; 0x7e
 801643e:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 8016442:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8016446:	d050      	beq.n	80164ea <uxr_read_framed_msg+0x2ee>
 8016448:	2302      	movs	r3, #2
 801644a:	7023      	strb	r3, [r4, #0]
 801644c:	e6e8      	b.n	8016220 <uxr_read_framed_msg+0x24>
 801644e:	f894 e02c 	ldrb.w	lr, [r4, #44]	; 0x2c
 8016452:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8016456:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801645a:	1c51      	adds	r1, r2, #1
 801645c:	084b      	lsrs	r3, r1, #1
 801645e:	fba6 5303 	umull	r5, r3, r6, r3
 8016462:	089b      	lsrs	r3, r3, #2
 8016464:	fb0c 1313 	mls	r3, ip, r3, r1
 8016468:	4596      	cmp	lr, r2
 801646a:	eb04 0002 	add.w	r0, r4, r2
 801646e:	b2da      	uxtb	r2, r3
 8016470:	f43f af06 	beq.w	8016280 <uxr_read_framed_msg+0x84>
 8016474:	7883      	ldrb	r3, [r0, #2]
 8016476:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801647a:	2b7e      	cmp	r3, #126	; 0x7e
 801647c:	d1ed      	bne.n	801645a <uxr_read_framed_msg+0x25e>
 801647e:	2301      	movs	r3, #1
 8016480:	7023      	strb	r3, [r4, #0]
 8016482:	e6cd      	b.n	8016220 <uxr_read_framed_msg+0x24>
 8016484:	f101 0b01 	add.w	fp, r1, #1
 8016488:	ea4f 025b 	mov.w	r2, fp, lsr #1
 801648c:	fba6 e202 	umull	lr, r2, r6, r2
 8016490:	3102      	adds	r1, #2
 8016492:	0892      	lsrs	r2, r2, #2
 8016494:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 8016498:	fb0c b212 	mls	r2, ip, r2, fp
 801649c:	fba6 9e0e 	umull	r9, lr, r6, lr
 80164a0:	eb04 0b02 	add.w	fp, r4, r2
 80164a4:	b2d2      	uxtb	r2, r2
 80164a6:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 80164aa:	4290      	cmp	r0, r2
 80164ac:	fb0c 111e 	mls	r1, ip, lr, r1
 80164b0:	f43f af40 	beq.w	8016334 <uxr_read_framed_msg+0x138>
 80164b4:	f89b e002 	ldrb.w	lr, [fp, #2]
 80164b8:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 80164bc:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 80164c0:	d036      	beq.n	8016530 <uxr_read_framed_msg+0x334>
 80164c2:	f08e 0e20 	eor.w	lr, lr, #32
 80164c6:	e711      	b.n	80162ec <uxr_read_framed_msg+0xf0>
 80164c8:	2301      	movs	r3, #1
 80164ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80164cc:	4649      	mov	r1, r9
 80164ce:	e9cd 2300 	strd	r2, r3, [sp]
 80164d2:	4620      	mov	r0, r4
 80164d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80164d6:	4652      	mov	r2, sl
 80164d8:	f7ff fe0e 	bl	80160f8 <uxr_framing_read_transport>
 80164dc:	2800      	cmp	r0, #0
 80164de:	f43f aecf 	beq.w	8016280 <uxr_read_framed_msg+0x84>
 80164e2:	7823      	ldrb	r3, [r4, #0]
 80164e4:	e69c      	b.n	8016220 <uxr_read_framed_msg+0x24>
 80164e6:	2302      	movs	r3, #2
 80164e8:	e7ef      	b.n	80164ca <uxr_read_framed_msg+0x2ce>
 80164ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80164ec:	2304      	movs	r3, #4
 80164ee:	e9cd 2300 	strd	r2, r3, [sp]
 80164f2:	4649      	mov	r1, r9
 80164f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80164f6:	4652      	mov	r2, sl
 80164f8:	4620      	mov	r0, r4
 80164fa:	f7ff fdfd 	bl	80160f8 <uxr_framing_read_transport>
 80164fe:	2800      	cmp	r0, #0
 8016500:	d1ef      	bne.n	80164e2 <uxr_read_framed_msg+0x2e6>
 8016502:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 8016506:	387e      	subs	r0, #126	; 0x7e
 8016508:	bf18      	it	ne
 801650a:	2001      	movne	r0, #1
 801650c:	2800      	cmp	r0, #0
 801650e:	d0e8      	beq.n	80164e2 <uxr_read_framed_msg+0x2e6>
 8016510:	e6b6      	b.n	8016280 <uxr_read_framed_msg+0x84>
 8016512:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8016514:	2305      	movs	r3, #5
 8016516:	e9cd 5300 	strd	r5, r3, [sp]
 801651a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801651c:	f7ff fdec 	bl	80160f8 <uxr_framing_read_transport>
 8016520:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8016524:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8016528:	429a      	cmp	r2, r3
 801652a:	f43f aea9 	beq.w	8016280 <uxr_read_framed_msg+0x84>
 801652e:	e673      	b.n	8016218 <uxr_read_framed_msg+0x1c>
 8016530:	429d      	cmp	r5, r3
 8016532:	ee17 9a90 	vmov	r9, s15
 8016536:	f43f af02 	beq.w	801633e <uxr_read_framed_msg+0x142>
 801653a:	2301      	movs	r3, #1
 801653c:	7023      	strb	r3, [r4, #0]
 801653e:	e66f      	b.n	8016220 <uxr_read_framed_msg+0x24>
 8016540:	2303      	movs	r3, #3
 8016542:	e7c2      	b.n	80164ca <uxr_read_framed_msg+0x2ce>
 8016544:	2305      	movs	r3, #5
 8016546:	7023      	strb	r3, [r4, #0]
 8016548:	e66a      	b.n	8016220 <uxr_read_framed_msg+0x24>
 801654a:	bf00      	nop
 801654c:	30c30c31 	.word	0x30c30c31
 8016550:	08018e0c 	.word	0x08018e0c
 8016554:	ee17 9a90 	vmov	r9, s15
 8016558:	f43f aef1 	beq.w	801633e <uxr_read_framed_msg+0x142>
 801655c:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 8016560:	d08d      	beq.n	801647e <uxr_read_framed_msg+0x282>
 8016562:	1aeb      	subs	r3, r5, r3
 8016564:	3302      	adds	r3, #2
 8016566:	9301      	str	r3, [sp, #4]
 8016568:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801656a:	9300      	str	r3, [sp, #0]
 801656c:	4652      	mov	r2, sl
 801656e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016570:	4649      	mov	r1, r9
 8016572:	4620      	mov	r0, r4
 8016574:	f7ff fdc0 	bl	80160f8 <uxr_framing_read_transport>
 8016578:	fab0 f080 	clz	r0, r0
 801657c:	0940      	lsrs	r0, r0, #5
 801657e:	2800      	cmp	r0, #0
 8016580:	d0af      	beq.n	80164e2 <uxr_read_framed_msg+0x2e6>
 8016582:	e67d      	b.n	8016280 <uxr_read_framed_msg+0x84>
 8016584:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016586:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 801658a:	7013      	strb	r3, [r2, #0]
 801658c:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 801658e:	b003      	add	sp, #12
 8016590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016594:	1c59      	adds	r1, r3, #1
 8016596:	084a      	lsrs	r2, r1, #1
 8016598:	fba6 5202 	umull	r5, r2, r6, r2
 801659c:	0892      	lsrs	r2, r2, #2
 801659e:	252a      	movs	r5, #42	; 0x2a
 80165a0:	fb05 1212 	mls	r2, r5, r2, r1
 80165a4:	b2d1      	uxtb	r1, r2
 80165a6:	4288      	cmp	r0, r1
 80165a8:	d08e      	beq.n	80164c8 <uxr_read_framed_msg+0x2cc>
 80165aa:	3302      	adds	r3, #2
 80165ac:	4422      	add	r2, r4
 80165ae:	0858      	lsrs	r0, r3, #1
 80165b0:	fba6 1000 	umull	r1, r0, r6, r0
 80165b4:	7891      	ldrb	r1, [r2, #2]
 80165b6:	0882      	lsrs	r2, r0, #2
 80165b8:	fb05 3312 	mls	r3, r5, r2, r3
 80165bc:	297e      	cmp	r1, #126	; 0x7e
 80165be:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80165c2:	f000 80a3 	beq.w	801670c <uxr_read_framed_msg+0x510>
 80165c6:	f081 0120 	eor.w	r1, r1, #32
 80165ca:	e64e      	b.n	801626a <uxr_read_framed_msg+0x6e>
 80165cc:	1c59      	adds	r1, r3, #1
 80165ce:	084a      	lsrs	r2, r1, #1
 80165d0:	fba6 5202 	umull	r5, r2, r6, r2
 80165d4:	0892      	lsrs	r2, r2, #2
 80165d6:	252a      	movs	r5, #42	; 0x2a
 80165d8:	fb05 1212 	mls	r2, r5, r2, r1
 80165dc:	b2d1      	uxtb	r1, r2
 80165de:	4288      	cmp	r0, r1
 80165e0:	d081      	beq.n	80164e6 <uxr_read_framed_msg+0x2ea>
 80165e2:	3302      	adds	r3, #2
 80165e4:	4422      	add	r2, r4
 80165e6:	0858      	lsrs	r0, r3, #1
 80165e8:	fba6 1000 	umull	r1, r0, r6, r0
 80165ec:	7891      	ldrb	r1, [r2, #2]
 80165ee:	0882      	lsrs	r2, r0, #2
 80165f0:	fb05 3312 	mls	r3, r5, r2, r3
 80165f4:	297e      	cmp	r1, #126	; 0x7e
 80165f6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80165fa:	d077      	beq.n	80166ec <uxr_read_framed_msg+0x4f0>
 80165fc:	f081 0120 	eor.w	r1, r1, #32
 8016600:	e65b      	b.n	80162ba <uxr_read_framed_msg+0xbe>
 8016602:	1c59      	adds	r1, r3, #1
 8016604:	084a      	lsrs	r2, r1, #1
 8016606:	fba6 5202 	umull	r5, r2, r6, r2
 801660a:	0892      	lsrs	r2, r2, #2
 801660c:	252a      	movs	r5, #42	; 0x2a
 801660e:	fb05 1212 	mls	r2, r5, r2, r1
 8016612:	b2d1      	uxtb	r1, r2
 8016614:	4288      	cmp	r0, r1
 8016616:	f43f af57 	beq.w	80164c8 <uxr_read_framed_msg+0x2cc>
 801661a:	3302      	adds	r3, #2
 801661c:	4422      	add	r2, r4
 801661e:	0858      	lsrs	r0, r3, #1
 8016620:	fba6 1000 	umull	r1, r0, r6, r0
 8016624:	7891      	ldrb	r1, [r2, #2]
 8016626:	0882      	lsrs	r2, r0, #2
 8016628:	fb05 3312 	mls	r3, r5, r2, r3
 801662c:	297e      	cmp	r1, #126	; 0x7e
 801662e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8016632:	d06b      	beq.n	801670c <uxr_read_framed_msg+0x510>
 8016634:	f081 0120 	eor.w	r1, r1, #32
 8016638:	e69d      	b.n	8016376 <uxr_read_framed_msg+0x17a>
 801663a:	1c5d      	adds	r5, r3, #1
 801663c:	086a      	lsrs	r2, r5, #1
 801663e:	fba6 0202 	umull	r0, r2, r6, r2
 8016642:	0892      	lsrs	r2, r2, #2
 8016644:	202a      	movs	r0, #42	; 0x2a
 8016646:	fb00 5212 	mls	r2, r0, r2, r5
 801664a:	b2d5      	uxtb	r5, r2
 801664c:	42a9      	cmp	r1, r5
 801664e:	f43f af4c 	beq.w	80164ea <uxr_read_framed_msg+0x2ee>
 8016652:	3302      	adds	r3, #2
 8016654:	4422      	add	r2, r4
 8016656:	0859      	lsrs	r1, r3, #1
 8016658:	fba6 5101 	umull	r5, r1, r6, r1
 801665c:	7895      	ldrb	r5, [r2, #2]
 801665e:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
 8016662:	088a      	lsrs	r2, r1, #2
 8016664:	fb00 3312 	mls	r3, r0, r2, r3
 8016668:	2d7e      	cmp	r5, #126	; 0x7e
 801666a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801666e:	f43f af3c 	beq.w	80164ea <uxr_read_framed_msg+0x2ee>
 8016672:	f085 0520 	eor.w	r5, r5, #32
 8016676:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
 801667a:	e6e5      	b.n	8016448 <uxr_read_framed_msg+0x24c>
 801667c:	1c59      	adds	r1, r3, #1
 801667e:	084a      	lsrs	r2, r1, #1
 8016680:	fba6 5202 	umull	r5, r2, r6, r2
 8016684:	0892      	lsrs	r2, r2, #2
 8016686:	252a      	movs	r5, #42	; 0x2a
 8016688:	fb05 1212 	mls	r2, r5, r2, r1
 801668c:	b2d1      	uxtb	r1, r2
 801668e:	4288      	cmp	r0, r1
 8016690:	f43f af29 	beq.w	80164e6 <uxr_read_framed_msg+0x2ea>
 8016694:	3302      	adds	r3, #2
 8016696:	4422      	add	r2, r4
 8016698:	0858      	lsrs	r0, r3, #1
 801669a:	fba6 1000 	umull	r1, r0, r6, r0
 801669e:	7891      	ldrb	r1, [r2, #2]
 80166a0:	0882      	lsrs	r2, r0, #2
 80166a2:	fb05 3312 	mls	r3, r5, r2, r3
 80166a6:	297e      	cmp	r1, #126	; 0x7e
 80166a8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80166ac:	d01e      	beq.n	80166ec <uxr_read_framed_msg+0x4f0>
 80166ae:	f081 0120 	eor.w	r1, r1, #32
 80166b2:	e689      	b.n	80163c8 <uxr_read_framed_msg+0x1cc>
 80166b4:	1c51      	adds	r1, r2, #1
 80166b6:	084b      	lsrs	r3, r1, #1
 80166b8:	fba6 5303 	umull	r5, r3, r6, r3
 80166bc:	089b      	lsrs	r3, r3, #2
 80166be:	252a      	movs	r5, #42	; 0x2a
 80166c0:	fb05 1313 	mls	r3, r5, r3, r1
 80166c4:	b2d9      	uxtb	r1, r3
 80166c6:	4288      	cmp	r0, r1
 80166c8:	f43f af3a 	beq.w	8016540 <uxr_read_framed_msg+0x344>
 80166cc:	3202      	adds	r2, #2
 80166ce:	4423      	add	r3, r4
 80166d0:	0850      	lsrs	r0, r2, #1
 80166d2:	789b      	ldrb	r3, [r3, #2]
 80166d4:	fba6 1000 	umull	r1, r0, r6, r0
 80166d8:	0880      	lsrs	r0, r0, #2
 80166da:	fb05 2210 	mls	r2, r5, r0, r2
 80166de:	2b7e      	cmp	r3, #126	; 0x7e
 80166e0:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80166e4:	d014      	beq.n	8016710 <uxr_read_framed_msg+0x514>
 80166e6:	f083 0120 	eor.w	r1, r3, #32
 80166ea:	e68a      	b.n	8016402 <uxr_read_framed_msg+0x206>
 80166ec:	2302      	movs	r3, #2
 80166ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80166f0:	4649      	mov	r1, r9
 80166f2:	e9cd 2300 	strd	r2, r3, [sp]
 80166f6:	4620      	mov	r0, r4
 80166f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80166fa:	4652      	mov	r2, sl
 80166fc:	f7ff fcfc 	bl	80160f8 <uxr_framing_read_transport>
 8016700:	2800      	cmp	r0, #0
 8016702:	f47f aeee 	bne.w	80164e2 <uxr_read_framed_msg+0x2e6>
 8016706:	2301      	movs	r3, #1
 8016708:	7023      	strb	r3, [r4, #0]
 801670a:	e589      	b.n	8016220 <uxr_read_framed_msg+0x24>
 801670c:	2301      	movs	r3, #1
 801670e:	e7ee      	b.n	80166ee <uxr_read_framed_msg+0x4f2>
 8016710:	2303      	movs	r3, #3
 8016712:	e7ec      	b.n	80166ee <uxr_read_framed_msg+0x4f2>
 8016714:	ee17 9a90 	vmov	r9, s15
 8016718:	e6b1      	b.n	801647e <uxr_read_framed_msg+0x282>
 801671a:	bf00      	nop

0801671c <rcl_get_default_domain_id>:
 801671c:	b530      	push	{r4, r5, lr}
 801671e:	b083      	sub	sp, #12
 8016720:	2300      	movs	r3, #0
 8016722:	9300      	str	r3, [sp, #0]
 8016724:	b1d0      	cbz	r0, 801675c <rcl_get_default_domain_id+0x40>
 8016726:	4604      	mov	r4, r0
 8016728:	4669      	mov	r1, sp
 801672a:	4815      	ldr	r0, [pc, #84]	; (8016780 <rcl_get_default_domain_id+0x64>)
 801672c:	f7fc fe6c 	bl	8013408 <rcutils_get_env>
 8016730:	4602      	mov	r2, r0
 8016732:	b110      	cbz	r0, 801673a <rcl_get_default_domain_id+0x1e>
 8016734:	2001      	movs	r0, #1
 8016736:	b003      	add	sp, #12
 8016738:	bd30      	pop	{r4, r5, pc}
 801673a:	9b00      	ldr	r3, [sp, #0]
 801673c:	b18b      	cbz	r3, 8016762 <rcl_get_default_domain_id+0x46>
 801673e:	7818      	ldrb	r0, [r3, #0]
 8016740:	2800      	cmp	r0, #0
 8016742:	d0f8      	beq.n	8016736 <rcl_get_default_domain_id+0x1a>
 8016744:	4618      	mov	r0, r3
 8016746:	a901      	add	r1, sp, #4
 8016748:	9201      	str	r2, [sp, #4]
 801674a:	f000 fc45 	bl	8016fd8 <strtoul>
 801674e:	4605      	mov	r5, r0
 8016750:	b150      	cbz	r0, 8016768 <rcl_get_default_domain_id+0x4c>
 8016752:	1c43      	adds	r3, r0, #1
 8016754:	d00d      	beq.n	8016772 <rcl_get_default_domain_id+0x56>
 8016756:	6025      	str	r5, [r4, #0]
 8016758:	2000      	movs	r0, #0
 801675a:	e7ec      	b.n	8016736 <rcl_get_default_domain_id+0x1a>
 801675c:	200b      	movs	r0, #11
 801675e:	b003      	add	sp, #12
 8016760:	bd30      	pop	{r4, r5, pc}
 8016762:	4618      	mov	r0, r3
 8016764:	b003      	add	sp, #12
 8016766:	bd30      	pop	{r4, r5, pc}
 8016768:	9b01      	ldr	r3, [sp, #4]
 801676a:	781b      	ldrb	r3, [r3, #0]
 801676c:	2b00      	cmp	r3, #0
 801676e:	d0f2      	beq.n	8016756 <rcl_get_default_domain_id+0x3a>
 8016770:	e7e0      	b.n	8016734 <rcl_get_default_domain_id+0x18>
 8016772:	f001 f80d 	bl	8017790 <__errno>
 8016776:	6803      	ldr	r3, [r0, #0]
 8016778:	2b22      	cmp	r3, #34	; 0x22
 801677a:	d1ec      	bne.n	8016756 <rcl_get_default_domain_id+0x3a>
 801677c:	e7da      	b.n	8016734 <rcl_get_default_domain_id+0x18>
 801677e:	bf00      	nop
 8016780:	0801900c 	.word	0x0801900c

08016784 <rcl_get_zero_initialized_guard_condition>:
 8016784:	4a03      	ldr	r2, [pc, #12]	; (8016794 <rcl_get_zero_initialized_guard_condition+0x10>)
 8016786:	4603      	mov	r3, r0
 8016788:	e892 0003 	ldmia.w	r2, {r0, r1}
 801678c:	e883 0003 	stmia.w	r3, {r0, r1}
 8016790:	4618      	mov	r0, r3
 8016792:	4770      	bx	lr
 8016794:	0801901c 	.word	0x0801901c

08016798 <rcl_guard_condition_init_from_rmw>:
 8016798:	b082      	sub	sp, #8
 801679a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801679e:	b086      	sub	sp, #24
 80167a0:	ac0c      	add	r4, sp, #48	; 0x30
 80167a2:	4684      	mov	ip, r0
 80167a4:	f844 3f04 	str.w	r3, [r4, #4]!
 80167a8:	460f      	mov	r7, r1
 80167aa:	4690      	mov	r8, r2
 80167ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80167ae:	ad01      	add	r5, sp, #4
 80167b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80167b2:	6823      	ldr	r3, [r4, #0]
 80167b4:	602b      	str	r3, [r5, #0]
 80167b6:	a801      	add	r0, sp, #4
 80167b8:	4664      	mov	r4, ip
 80167ba:	f7f7 fb6f 	bl	800de9c <rcutils_allocator_is_valid>
 80167be:	b328      	cbz	r0, 801680c <rcl_guard_condition_init_from_rmw+0x74>
 80167c0:	b324      	cbz	r4, 801680c <rcl_guard_condition_init_from_rmw+0x74>
 80167c2:	6866      	ldr	r6, [r4, #4]
 80167c4:	b9e6      	cbnz	r6, 8016800 <rcl_guard_condition_init_from_rmw+0x68>
 80167c6:	f1b8 0f00 	cmp.w	r8, #0
 80167ca:	d01f      	beq.n	801680c <rcl_guard_condition_init_from_rmw+0x74>
 80167cc:	4640      	mov	r0, r8
 80167ce:	f7fb fcc7 	bl	8012160 <rcl_context_is_valid>
 80167d2:	b308      	cbz	r0, 8016818 <rcl_guard_condition_init_from_rmw+0x80>
 80167d4:	9b01      	ldr	r3, [sp, #4]
 80167d6:	9905      	ldr	r1, [sp, #20]
 80167d8:	201c      	movs	r0, #28
 80167da:	4798      	blx	r3
 80167dc:	4605      	mov	r5, r0
 80167de:	6060      	str	r0, [r4, #4]
 80167e0:	b340      	cbz	r0, 8016834 <rcl_guard_condition_init_from_rmw+0x9c>
 80167e2:	b1df      	cbz	r7, 801681c <rcl_guard_condition_init_from_rmw+0x84>
 80167e4:	6007      	str	r7, [r0, #0]
 80167e6:	7106      	strb	r6, [r0, #4]
 80167e8:	ac01      	add	r4, sp, #4
 80167ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80167ec:	3508      	adds	r5, #8
 80167ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80167f0:	6823      	ldr	r3, [r4, #0]
 80167f2:	602b      	str	r3, [r5, #0]
 80167f4:	2000      	movs	r0, #0
 80167f6:	b006      	add	sp, #24
 80167f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80167fc:	b002      	add	sp, #8
 80167fe:	4770      	bx	lr
 8016800:	2064      	movs	r0, #100	; 0x64
 8016802:	b006      	add	sp, #24
 8016804:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016808:	b002      	add	sp, #8
 801680a:	4770      	bx	lr
 801680c:	200b      	movs	r0, #11
 801680e:	b006      	add	sp, #24
 8016810:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016814:	b002      	add	sp, #8
 8016816:	4770      	bx	lr
 8016818:	2065      	movs	r0, #101	; 0x65
 801681a:	e7f2      	b.n	8016802 <rcl_guard_condition_init_from_rmw+0x6a>
 801681c:	f8d8 0000 	ldr.w	r0, [r8]
 8016820:	3028      	adds	r0, #40	; 0x28
 8016822:	f000 f979 	bl	8016b18 <rmw_create_guard_condition>
 8016826:	6028      	str	r0, [r5, #0]
 8016828:	6865      	ldr	r5, [r4, #4]
 801682a:	682e      	ldr	r6, [r5, #0]
 801682c:	b126      	cbz	r6, 8016838 <rcl_guard_condition_init_from_rmw+0xa0>
 801682e:	2301      	movs	r3, #1
 8016830:	712b      	strb	r3, [r5, #4]
 8016832:	e7d9      	b.n	80167e8 <rcl_guard_condition_init_from_rmw+0x50>
 8016834:	200a      	movs	r0, #10
 8016836:	e7e4      	b.n	8016802 <rcl_guard_condition_init_from_rmw+0x6a>
 8016838:	4628      	mov	r0, r5
 801683a:	9b02      	ldr	r3, [sp, #8]
 801683c:	9905      	ldr	r1, [sp, #20]
 801683e:	4798      	blx	r3
 8016840:	6066      	str	r6, [r4, #4]
 8016842:	2001      	movs	r0, #1
 8016844:	e7dd      	b.n	8016802 <rcl_guard_condition_init_from_rmw+0x6a>
 8016846:	bf00      	nop

08016848 <rcl_guard_condition_fini>:
 8016848:	b570      	push	{r4, r5, r6, lr}
 801684a:	b082      	sub	sp, #8
 801684c:	b1f0      	cbz	r0, 801688c <rcl_guard_condition_fini+0x44>
 801684e:	4604      	mov	r4, r0
 8016850:	6840      	ldr	r0, [r0, #4]
 8016852:	b158      	cbz	r0, 801686c <rcl_guard_condition_fini+0x24>
 8016854:	6803      	ldr	r3, [r0, #0]
 8016856:	68c6      	ldr	r6, [r0, #12]
 8016858:	6981      	ldr	r1, [r0, #24]
 801685a:	b15b      	cbz	r3, 8016874 <rcl_guard_condition_fini+0x2c>
 801685c:	7905      	ldrb	r5, [r0, #4]
 801685e:	b95d      	cbnz	r5, 8016878 <rcl_guard_condition_fini+0x30>
 8016860:	47b0      	blx	r6
 8016862:	2300      	movs	r3, #0
 8016864:	4628      	mov	r0, r5
 8016866:	6063      	str	r3, [r4, #4]
 8016868:	b002      	add	sp, #8
 801686a:	bd70      	pop	{r4, r5, r6, pc}
 801686c:	4605      	mov	r5, r0
 801686e:	4628      	mov	r0, r5
 8016870:	b002      	add	sp, #8
 8016872:	bd70      	pop	{r4, r5, r6, pc}
 8016874:	461d      	mov	r5, r3
 8016876:	e7f3      	b.n	8016860 <rcl_guard_condition_fini+0x18>
 8016878:	4618      	mov	r0, r3
 801687a:	9101      	str	r1, [sp, #4]
 801687c:	f000 f960 	bl	8016b40 <rmw_destroy_guard_condition>
 8016880:	1e05      	subs	r5, r0, #0
 8016882:	9901      	ldr	r1, [sp, #4]
 8016884:	6860      	ldr	r0, [r4, #4]
 8016886:	bf18      	it	ne
 8016888:	2501      	movne	r5, #1
 801688a:	e7e9      	b.n	8016860 <rcl_guard_condition_fini+0x18>
 801688c:	250b      	movs	r5, #11
 801688e:	4628      	mov	r0, r5
 8016890:	b002      	add	sp, #8
 8016892:	bd70      	pop	{r4, r5, r6, pc}

08016894 <rcl_guard_condition_get_default_options>:
 8016894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016896:	b087      	sub	sp, #28
 8016898:	4607      	mov	r7, r0
 801689a:	466c      	mov	r4, sp
 801689c:	4668      	mov	r0, sp
 801689e:	f7f7 faef 	bl	800de80 <rcutils_get_default_allocator>
 80168a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80168a4:	4d07      	ldr	r5, [pc, #28]	; (80168c4 <rcl_guard_condition_get_default_options+0x30>)
 80168a6:	f8d4 c000 	ldr.w	ip, [r4]
 80168aa:	462e      	mov	r6, r5
 80168ac:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80168ae:	462c      	mov	r4, r5
 80168b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80168b2:	463c      	mov	r4, r7
 80168b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80168b6:	4638      	mov	r0, r7
 80168b8:	f8c6 c000 	str.w	ip, [r6]
 80168bc:	f8c4 c000 	str.w	ip, [r4]
 80168c0:	b007      	add	sp, #28
 80168c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80168c4:	20009cfc 	.word	0x20009cfc

080168c8 <on_status>:
 80168c8:	b082      	sub	sp, #8
 80168ca:	b002      	add	sp, #8
 80168cc:	4770      	bx	lr
 80168ce:	bf00      	nop

080168d0 <on_topic>:
 80168d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168d4:	4a21      	ldr	r2, [pc, #132]	; (801695c <on_topic+0x8c>)
 80168d6:	b094      	sub	sp, #80	; 0x50
 80168d8:	6812      	ldr	r2, [r2, #0]
 80168da:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80168dc:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 80168e0:	9113      	str	r1, [sp, #76]	; 0x4c
 80168e2:	9312      	str	r3, [sp, #72]	; 0x48
 80168e4:	b3ba      	cbz	r2, 8016956 <on_topic+0x86>
 80168e6:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 80168ea:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 80168ee:	e001      	b.n	80168f4 <on_topic+0x24>
 80168f0:	6892      	ldr	r2, [r2, #8]
 80168f2:	b382      	cbz	r2, 8016956 <on_topic+0x86>
 80168f4:	68d4      	ldr	r4, [r2, #12]
 80168f6:	8aa3      	ldrh	r3, [r4, #20]
 80168f8:	428b      	cmp	r3, r1
 80168fa:	d1f9      	bne.n	80168f0 <on_topic+0x20>
 80168fc:	7da3      	ldrb	r3, [r4, #22]
 80168fe:	4283      	cmp	r3, r0
 8016900:	d1f6      	bne.n	80168f0 <on_topic+0x20>
 8016902:	2248      	movs	r2, #72	; 0x48
 8016904:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8016908:	4668      	mov	r0, sp
 801690a:	f000 ff76 	bl	80177fa <memcpy>
 801690e:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8016912:	4620      	mov	r0, r4
 8016914:	f7f8 f9b6 	bl	800ec84 <rmw_uxrce_get_static_input_buffer_for_entity>
 8016918:	4607      	mov	r7, r0
 801691a:	b1e0      	cbz	r0, 8016956 <on_topic+0x86>
 801691c:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8016920:	462a      	mov	r2, r5
 8016922:	4630      	mov	r0, r6
 8016924:	f108 0110 	add.w	r1, r8, #16
 8016928:	f7fd fd08 	bl	801433c <ucdr_deserialize_array_uint8_t>
 801692c:	b930      	cbnz	r0, 801693c <on_topic+0x6c>
 801692e:	480c      	ldr	r0, [pc, #48]	; (8016960 <on_topic+0x90>)
 8016930:	4639      	mov	r1, r7
 8016932:	b014      	add	sp, #80	; 0x50
 8016934:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016938:	f7fc bfda 	b.w	80138f0 <put_memory>
 801693c:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 8016940:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 8016944:	f7fd fc24 	bl	8014190 <rmw_uros_epoch_nanos>
 8016948:	f608 0218 	addw	r2, r8, #2072	; 0x818
 801694c:	2305      	movs	r3, #5
 801694e:	e9c2 0100 	strd	r0, r1, [r2]
 8016952:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 8016956:	b014      	add	sp, #80	; 0x50
 8016958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801695c:	2000d104 	.word	0x2000d104
 8016960:	20009e98 	.word	0x20009e98

08016964 <on_request>:
 8016964:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016968:	4822      	ldr	r0, [pc, #136]	; (80169f4 <on_request+0x90>)
 801696a:	b095      	sub	sp, #84	; 0x54
 801696c:	9113      	str	r1, [sp, #76]	; 0x4c
 801696e:	6801      	ldr	r1, [r0, #0]
 8016970:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8016972:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 8016976:	2900      	cmp	r1, #0
 8016978:	d039      	beq.n	80169ee <on_request+0x8a>
 801697a:	461d      	mov	r5, r3
 801697c:	e001      	b.n	8016982 <on_request+0x1e>
 801697e:	6889      	ldr	r1, [r1, #8]
 8016980:	b3a9      	cbz	r1, 80169ee <on_request+0x8a>
 8016982:	68cc      	ldr	r4, [r1, #12]
 8016984:	8b20      	ldrh	r0, [r4, #24]
 8016986:	4290      	cmp	r0, r2
 8016988:	d1f9      	bne.n	801697e <on_request+0x1a>
 801698a:	2248      	movs	r2, #72	; 0x48
 801698c:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8016990:	4668      	mov	r0, sp
 8016992:	f000 ff32 	bl	80177fa <memcpy>
 8016996:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 801699a:	4620      	mov	r0, r4
 801699c:	f7f8 f972 	bl	800ec84 <rmw_uxrce_get_static_input_buffer_for_entity>
 80169a0:	4680      	mov	r8, r0
 80169a2:	b320      	cbz	r0, 80169ee <on_request+0x8a>
 80169a4:	f8d0 900c 	ldr.w	r9, [r0, #12]
 80169a8:	4632      	mov	r2, r6
 80169aa:	4638      	mov	r0, r7
 80169ac:	f109 0110 	add.w	r1, r9, #16
 80169b0:	f7fd fcc4 	bl	801433c <ucdr_deserialize_array_uint8_t>
 80169b4:	b930      	cbnz	r0, 80169c4 <on_request+0x60>
 80169b6:	4810      	ldr	r0, [pc, #64]	; (80169f8 <on_request+0x94>)
 80169b8:	4641      	mov	r1, r8
 80169ba:	b015      	add	sp, #84	; 0x54
 80169bc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80169c0:	f7fc bf96 	b.w	80138f0 <put_memory>
 80169c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80169c6:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 80169ca:	f609 0428 	addw	r4, r9, #2088	; 0x828
 80169ce:	f8c9 6810 	str.w	r6, [r9, #2064]	; 0x810
 80169d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80169d4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80169d8:	e884 0003 	stmia.w	r4, {r0, r1}
 80169dc:	f7fd fbd8 	bl	8014190 <rmw_uros_epoch_nanos>
 80169e0:	f609 0218 	addw	r2, r9, #2072	; 0x818
 80169e4:	2303      	movs	r3, #3
 80169e6:	e9c2 0100 	strd	r0, r1, [r2]
 80169ea:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 80169ee:	b015      	add	sp, #84	; 0x54
 80169f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80169f4:	2000d0f4 	.word	0x2000d0f4
 80169f8:	20009e98 	.word	0x20009e98

080169fc <on_reply>:
 80169fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016a00:	4821      	ldr	r0, [pc, #132]	; (8016a88 <on_reply+0x8c>)
 8016a02:	b095      	sub	sp, #84	; 0x54
 8016a04:	9113      	str	r1, [sp, #76]	; 0x4c
 8016a06:	6801      	ldr	r1, [r0, #0]
 8016a08:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8016a0a:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 8016a0e:	b3b9      	cbz	r1, 8016a80 <on_reply+0x84>
 8016a10:	461d      	mov	r5, r3
 8016a12:	e001      	b.n	8016a18 <on_reply+0x1c>
 8016a14:	6889      	ldr	r1, [r1, #8]
 8016a16:	b399      	cbz	r1, 8016a80 <on_reply+0x84>
 8016a18:	68cc      	ldr	r4, [r1, #12]
 8016a1a:	8b20      	ldrh	r0, [r4, #24]
 8016a1c:	4290      	cmp	r0, r2
 8016a1e:	d1f9      	bne.n	8016a14 <on_reply+0x18>
 8016a20:	2248      	movs	r2, #72	; 0x48
 8016a22:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8016a26:	4668      	mov	r0, sp
 8016a28:	f000 fee7 	bl	80177fa <memcpy>
 8016a2c:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8016a30:	4620      	mov	r0, r4
 8016a32:	f7f8 f927 	bl	800ec84 <rmw_uxrce_get_static_input_buffer_for_entity>
 8016a36:	4680      	mov	r8, r0
 8016a38:	b310      	cbz	r0, 8016a80 <on_reply+0x84>
 8016a3a:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8016a3e:	4632      	mov	r2, r6
 8016a40:	4638      	mov	r0, r7
 8016a42:	f109 0110 	add.w	r1, r9, #16
 8016a46:	f7fd fc79 	bl	801433c <ucdr_deserialize_array_uint8_t>
 8016a4a:	b930      	cbnz	r0, 8016a5a <on_reply+0x5e>
 8016a4c:	480f      	ldr	r0, [pc, #60]	; (8016a8c <on_reply+0x90>)
 8016a4e:	4641      	mov	r1, r8
 8016a50:	b015      	add	sp, #84	; 0x54
 8016a52:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016a56:	f7fc bf4b 	b.w	80138f0 <put_memory>
 8016a5a:	b2aa      	uxth	r2, r5
 8016a5c:	2300      	movs	r3, #0
 8016a5e:	f609 0128 	addw	r1, r9, #2088	; 0x828
 8016a62:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 8016a66:	f8c9 6810 	str.w	r6, [r9, #2064]	; 0x810
 8016a6a:	e9c1 2300 	strd	r2, r3, [r1]
 8016a6e:	f7fd fb8f 	bl	8014190 <rmw_uros_epoch_nanos>
 8016a72:	f609 0218 	addw	r2, r9, #2072	; 0x818
 8016a76:	2304      	movs	r3, #4
 8016a78:	e9c2 0100 	strd	r0, r1, [r2]
 8016a7c:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 8016a80:	b015      	add	sp, #84	; 0x54
 8016a82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016a86:	bf00      	nop
 8016a88:	2000a728 	.word	0x2000a728
 8016a8c:	20009e98 	.word	0x20009e98

08016a90 <rmw_destroy_client>:
 8016a90:	b570      	push	{r4, r5, r6, lr}
 8016a92:	b128      	cbz	r0, 8016aa0 <rmw_destroy_client+0x10>
 8016a94:	4604      	mov	r4, r0
 8016a96:	6800      	ldr	r0, [r0, #0]
 8016a98:	460d      	mov	r5, r1
 8016a9a:	f7f8 fa61 	bl	800ef60 <is_uxrce_rmw_identifier_valid>
 8016a9e:	b910      	cbnz	r0, 8016aa6 <rmw_destroy_client+0x16>
 8016aa0:	2401      	movs	r4, #1
 8016aa2:	4620      	mov	r0, r4
 8016aa4:	bd70      	pop	{r4, r5, r6, pc}
 8016aa6:	6863      	ldr	r3, [r4, #4]
 8016aa8:	2b00      	cmp	r3, #0
 8016aaa:	d0f9      	beq.n	8016aa0 <rmw_destroy_client+0x10>
 8016aac:	2d00      	cmp	r5, #0
 8016aae:	d0f7      	beq.n	8016aa0 <rmw_destroy_client+0x10>
 8016ab0:	6828      	ldr	r0, [r5, #0]
 8016ab2:	f7f8 fa55 	bl	800ef60 <is_uxrce_rmw_identifier_valid>
 8016ab6:	2800      	cmp	r0, #0
 8016ab8:	d0f2      	beq.n	8016aa0 <rmw_destroy_client+0x10>
 8016aba:	686e      	ldr	r6, [r5, #4]
 8016abc:	2e00      	cmp	r6, #0
 8016abe:	d0ef      	beq.n	8016aa0 <rmw_destroy_client+0x10>
 8016ac0:	6864      	ldr	r4, [r4, #4]
 8016ac2:	6932      	ldr	r2, [r6, #16]
 8016ac4:	6920      	ldr	r0, [r4, #16]
 8016ac6:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8016aca:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016ace:	6819      	ldr	r1, [r3, #0]
 8016ad0:	f7f8 fe4c 	bl	800f76c <uxr_buffer_cancel_data>
 8016ad4:	4602      	mov	r2, r0
 8016ad6:	6920      	ldr	r0, [r4, #16]
 8016ad8:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8016adc:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8016ae0:	f7f8 f9be 	bl	800ee60 <run_xrce_session>
 8016ae4:	6920      	ldr	r0, [r4, #16]
 8016ae6:	6932      	ldr	r2, [r6, #16]
 8016ae8:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8016aec:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016af0:	6819      	ldr	r1, [r3, #0]
 8016af2:	f7f8 fbd1 	bl	800f298 <uxr_buffer_delete_entity>
 8016af6:	4602      	mov	r2, r0
 8016af8:	6920      	ldr	r0, [r4, #16]
 8016afa:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8016afe:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8016b02:	f7f8 f9ad 	bl	800ee60 <run_xrce_session>
 8016b06:	2800      	cmp	r0, #0
 8016b08:	4628      	mov	r0, r5
 8016b0a:	bf14      	ite	ne
 8016b0c:	2400      	movne	r4, #0
 8016b0e:	2402      	moveq	r4, #2
 8016b10:	f7f8 f896 	bl	800ec40 <rmw_uxrce_fini_client_memory>
 8016b14:	e7c5      	b.n	8016aa2 <rmw_destroy_client+0x12>
 8016b16:	bf00      	nop

08016b18 <rmw_create_guard_condition>:
 8016b18:	b538      	push	{r3, r4, r5, lr}
 8016b1a:	4605      	mov	r5, r0
 8016b1c:	4807      	ldr	r0, [pc, #28]	; (8016b3c <rmw_create_guard_condition+0x24>)
 8016b1e:	f7fc fed7 	bl	80138d0 <get_memory>
 8016b22:	b148      	cbz	r0, 8016b38 <rmw_create_guard_condition+0x20>
 8016b24:	68c4      	ldr	r4, [r0, #12]
 8016b26:	2300      	movs	r3, #0
 8016b28:	61e5      	str	r5, [r4, #28]
 8016b2a:	7423      	strb	r3, [r4, #16]
 8016b2c:	f7fc fef4 	bl	8013918 <rmw_get_implementation_identifier>
 8016b30:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8016b34:	f104 0014 	add.w	r0, r4, #20
 8016b38:	bd38      	pop	{r3, r4, r5, pc}
 8016b3a:	bf00      	nop
 8016b3c:	2000d020 	.word	0x2000d020

08016b40 <rmw_destroy_guard_condition>:
 8016b40:	b508      	push	{r3, lr}
 8016b42:	4b08      	ldr	r3, [pc, #32]	; (8016b64 <rmw_destroy_guard_condition+0x24>)
 8016b44:	6819      	ldr	r1, [r3, #0]
 8016b46:	b911      	cbnz	r1, 8016b4e <rmw_destroy_guard_condition+0xe>
 8016b48:	e00a      	b.n	8016b60 <rmw_destroy_guard_condition+0x20>
 8016b4a:	6889      	ldr	r1, [r1, #8]
 8016b4c:	b141      	cbz	r1, 8016b60 <rmw_destroy_guard_condition+0x20>
 8016b4e:	68cb      	ldr	r3, [r1, #12]
 8016b50:	3314      	adds	r3, #20
 8016b52:	4298      	cmp	r0, r3
 8016b54:	d1f9      	bne.n	8016b4a <rmw_destroy_guard_condition+0xa>
 8016b56:	4803      	ldr	r0, [pc, #12]	; (8016b64 <rmw_destroy_guard_condition+0x24>)
 8016b58:	f7fc feca 	bl	80138f0 <put_memory>
 8016b5c:	2000      	movs	r0, #0
 8016b5e:	bd08      	pop	{r3, pc}
 8016b60:	2001      	movs	r0, #1
 8016b62:	bd08      	pop	{r3, pc}
 8016b64:	2000d020 	.word	0x2000d020

08016b68 <calloc>:
 8016b68:	4b02      	ldr	r3, [pc, #8]	; (8016b74 <calloc+0xc>)
 8016b6a:	460a      	mov	r2, r1
 8016b6c:	4601      	mov	r1, r0
 8016b6e:	6818      	ldr	r0, [r3, #0]
 8016b70:	f000 b802 	b.w	8016b78 <_calloc_r>
 8016b74:	200000d4 	.word	0x200000d4

08016b78 <_calloc_r>:
 8016b78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016b7a:	fba1 2402 	umull	r2, r4, r1, r2
 8016b7e:	b94c      	cbnz	r4, 8016b94 <_calloc_r+0x1c>
 8016b80:	4611      	mov	r1, r2
 8016b82:	9201      	str	r2, [sp, #4]
 8016b84:	f000 f886 	bl	8016c94 <_malloc_r>
 8016b88:	9a01      	ldr	r2, [sp, #4]
 8016b8a:	4605      	mov	r5, r0
 8016b8c:	b930      	cbnz	r0, 8016b9c <_calloc_r+0x24>
 8016b8e:	4628      	mov	r0, r5
 8016b90:	b003      	add	sp, #12
 8016b92:	bd30      	pop	{r4, r5, pc}
 8016b94:	220c      	movs	r2, #12
 8016b96:	6002      	str	r2, [r0, #0]
 8016b98:	2500      	movs	r5, #0
 8016b9a:	e7f8      	b.n	8016b8e <_calloc_r+0x16>
 8016b9c:	4621      	mov	r1, r4
 8016b9e:	f000 fd0d 	bl	80175bc <memset>
 8016ba2:	e7f4      	b.n	8016b8e <_calloc_r+0x16>

08016ba4 <getenv>:
 8016ba4:	b507      	push	{r0, r1, r2, lr}
 8016ba6:	4b04      	ldr	r3, [pc, #16]	; (8016bb8 <getenv+0x14>)
 8016ba8:	4601      	mov	r1, r0
 8016baa:	aa01      	add	r2, sp, #4
 8016bac:	6818      	ldr	r0, [r3, #0]
 8016bae:	f000 f805 	bl	8016bbc <_findenv_r>
 8016bb2:	b003      	add	sp, #12
 8016bb4:	f85d fb04 	ldr.w	pc, [sp], #4
 8016bb8:	200000d4 	.word	0x200000d4

08016bbc <_findenv_r>:
 8016bbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bc0:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8016c30 <_findenv_r+0x74>
 8016bc4:	4607      	mov	r7, r0
 8016bc6:	4689      	mov	r9, r1
 8016bc8:	4616      	mov	r6, r2
 8016bca:	f000 fe43 	bl	8017854 <__env_lock>
 8016bce:	f8da 4000 	ldr.w	r4, [sl]
 8016bd2:	b134      	cbz	r4, 8016be2 <_findenv_r+0x26>
 8016bd4:	464b      	mov	r3, r9
 8016bd6:	4698      	mov	r8, r3
 8016bd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016bdc:	b13a      	cbz	r2, 8016bee <_findenv_r+0x32>
 8016bde:	2a3d      	cmp	r2, #61	; 0x3d
 8016be0:	d1f9      	bne.n	8016bd6 <_findenv_r+0x1a>
 8016be2:	4638      	mov	r0, r7
 8016be4:	f000 fe3c 	bl	8017860 <__env_unlock>
 8016be8:	2000      	movs	r0, #0
 8016bea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bee:	eba8 0809 	sub.w	r8, r8, r9
 8016bf2:	46a3      	mov	fp, r4
 8016bf4:	f854 0b04 	ldr.w	r0, [r4], #4
 8016bf8:	2800      	cmp	r0, #0
 8016bfa:	d0f2      	beq.n	8016be2 <_findenv_r+0x26>
 8016bfc:	4642      	mov	r2, r8
 8016bfe:	4649      	mov	r1, r9
 8016c00:	f000 fcf1 	bl	80175e6 <strncmp>
 8016c04:	2800      	cmp	r0, #0
 8016c06:	d1f4      	bne.n	8016bf2 <_findenv_r+0x36>
 8016c08:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8016c0c:	eb03 0508 	add.w	r5, r3, r8
 8016c10:	f813 3008 	ldrb.w	r3, [r3, r8]
 8016c14:	2b3d      	cmp	r3, #61	; 0x3d
 8016c16:	d1ec      	bne.n	8016bf2 <_findenv_r+0x36>
 8016c18:	f8da 3000 	ldr.w	r3, [sl]
 8016c1c:	ebab 0303 	sub.w	r3, fp, r3
 8016c20:	109b      	asrs	r3, r3, #2
 8016c22:	4638      	mov	r0, r7
 8016c24:	6033      	str	r3, [r6, #0]
 8016c26:	f000 fe1b 	bl	8017860 <__env_unlock>
 8016c2a:	1c68      	adds	r0, r5, #1
 8016c2c:	e7dd      	b.n	8016bea <_findenv_r+0x2e>
 8016c2e:	bf00      	nop
 8016c30:	200000d8 	.word	0x200000d8

08016c34 <malloc>:
 8016c34:	4b02      	ldr	r3, [pc, #8]	; (8016c40 <malloc+0xc>)
 8016c36:	4601      	mov	r1, r0
 8016c38:	6818      	ldr	r0, [r3, #0]
 8016c3a:	f000 b82b 	b.w	8016c94 <_malloc_r>
 8016c3e:	bf00      	nop
 8016c40:	200000d4 	.word	0x200000d4

08016c44 <free>:
 8016c44:	4b02      	ldr	r3, [pc, #8]	; (8016c50 <free+0xc>)
 8016c46:	4601      	mov	r1, r0
 8016c48:	6818      	ldr	r0, [r3, #0]
 8016c4a:	f000 be0f 	b.w	801786c <_free_r>
 8016c4e:	bf00      	nop
 8016c50:	200000d4 	.word	0x200000d4

08016c54 <sbrk_aligned>:
 8016c54:	b570      	push	{r4, r5, r6, lr}
 8016c56:	4e0e      	ldr	r6, [pc, #56]	; (8016c90 <sbrk_aligned+0x3c>)
 8016c58:	460c      	mov	r4, r1
 8016c5a:	6831      	ldr	r1, [r6, #0]
 8016c5c:	4605      	mov	r5, r0
 8016c5e:	b911      	cbnz	r1, 8016c66 <sbrk_aligned+0x12>
 8016c60:	f000 fd74 	bl	801774c <_sbrk_r>
 8016c64:	6030      	str	r0, [r6, #0]
 8016c66:	4621      	mov	r1, r4
 8016c68:	4628      	mov	r0, r5
 8016c6a:	f000 fd6f 	bl	801774c <_sbrk_r>
 8016c6e:	1c43      	adds	r3, r0, #1
 8016c70:	d00a      	beq.n	8016c88 <sbrk_aligned+0x34>
 8016c72:	1cc4      	adds	r4, r0, #3
 8016c74:	f024 0403 	bic.w	r4, r4, #3
 8016c78:	42a0      	cmp	r0, r4
 8016c7a:	d007      	beq.n	8016c8c <sbrk_aligned+0x38>
 8016c7c:	1a21      	subs	r1, r4, r0
 8016c7e:	4628      	mov	r0, r5
 8016c80:	f000 fd64 	bl	801774c <_sbrk_r>
 8016c84:	3001      	adds	r0, #1
 8016c86:	d101      	bne.n	8016c8c <sbrk_aligned+0x38>
 8016c88:	f04f 34ff 	mov.w	r4, #4294967295
 8016c8c:	4620      	mov	r0, r4
 8016c8e:	bd70      	pop	{r4, r5, r6, pc}
 8016c90:	20009d14 	.word	0x20009d14

08016c94 <_malloc_r>:
 8016c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016c98:	1ccd      	adds	r5, r1, #3
 8016c9a:	f025 0503 	bic.w	r5, r5, #3
 8016c9e:	3508      	adds	r5, #8
 8016ca0:	2d0c      	cmp	r5, #12
 8016ca2:	bf38      	it	cc
 8016ca4:	250c      	movcc	r5, #12
 8016ca6:	2d00      	cmp	r5, #0
 8016ca8:	4607      	mov	r7, r0
 8016caa:	db01      	blt.n	8016cb0 <_malloc_r+0x1c>
 8016cac:	42a9      	cmp	r1, r5
 8016cae:	d905      	bls.n	8016cbc <_malloc_r+0x28>
 8016cb0:	230c      	movs	r3, #12
 8016cb2:	603b      	str	r3, [r7, #0]
 8016cb4:	2600      	movs	r6, #0
 8016cb6:	4630      	mov	r0, r6
 8016cb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016cbc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8016d90 <_malloc_r+0xfc>
 8016cc0:	f000 f868 	bl	8016d94 <__malloc_lock>
 8016cc4:	f8d8 3000 	ldr.w	r3, [r8]
 8016cc8:	461c      	mov	r4, r3
 8016cca:	bb5c      	cbnz	r4, 8016d24 <_malloc_r+0x90>
 8016ccc:	4629      	mov	r1, r5
 8016cce:	4638      	mov	r0, r7
 8016cd0:	f7ff ffc0 	bl	8016c54 <sbrk_aligned>
 8016cd4:	1c43      	adds	r3, r0, #1
 8016cd6:	4604      	mov	r4, r0
 8016cd8:	d155      	bne.n	8016d86 <_malloc_r+0xf2>
 8016cda:	f8d8 4000 	ldr.w	r4, [r8]
 8016cde:	4626      	mov	r6, r4
 8016ce0:	2e00      	cmp	r6, #0
 8016ce2:	d145      	bne.n	8016d70 <_malloc_r+0xdc>
 8016ce4:	2c00      	cmp	r4, #0
 8016ce6:	d048      	beq.n	8016d7a <_malloc_r+0xe6>
 8016ce8:	6823      	ldr	r3, [r4, #0]
 8016cea:	4631      	mov	r1, r6
 8016cec:	4638      	mov	r0, r7
 8016cee:	eb04 0903 	add.w	r9, r4, r3
 8016cf2:	f000 fd2b 	bl	801774c <_sbrk_r>
 8016cf6:	4581      	cmp	r9, r0
 8016cf8:	d13f      	bne.n	8016d7a <_malloc_r+0xe6>
 8016cfa:	6821      	ldr	r1, [r4, #0]
 8016cfc:	1a6d      	subs	r5, r5, r1
 8016cfe:	4629      	mov	r1, r5
 8016d00:	4638      	mov	r0, r7
 8016d02:	f7ff ffa7 	bl	8016c54 <sbrk_aligned>
 8016d06:	3001      	adds	r0, #1
 8016d08:	d037      	beq.n	8016d7a <_malloc_r+0xe6>
 8016d0a:	6823      	ldr	r3, [r4, #0]
 8016d0c:	442b      	add	r3, r5
 8016d0e:	6023      	str	r3, [r4, #0]
 8016d10:	f8d8 3000 	ldr.w	r3, [r8]
 8016d14:	2b00      	cmp	r3, #0
 8016d16:	d038      	beq.n	8016d8a <_malloc_r+0xf6>
 8016d18:	685a      	ldr	r2, [r3, #4]
 8016d1a:	42a2      	cmp	r2, r4
 8016d1c:	d12b      	bne.n	8016d76 <_malloc_r+0xe2>
 8016d1e:	2200      	movs	r2, #0
 8016d20:	605a      	str	r2, [r3, #4]
 8016d22:	e00f      	b.n	8016d44 <_malloc_r+0xb0>
 8016d24:	6822      	ldr	r2, [r4, #0]
 8016d26:	1b52      	subs	r2, r2, r5
 8016d28:	d41f      	bmi.n	8016d6a <_malloc_r+0xd6>
 8016d2a:	2a0b      	cmp	r2, #11
 8016d2c:	d917      	bls.n	8016d5e <_malloc_r+0xca>
 8016d2e:	1961      	adds	r1, r4, r5
 8016d30:	42a3      	cmp	r3, r4
 8016d32:	6025      	str	r5, [r4, #0]
 8016d34:	bf18      	it	ne
 8016d36:	6059      	strne	r1, [r3, #4]
 8016d38:	6863      	ldr	r3, [r4, #4]
 8016d3a:	bf08      	it	eq
 8016d3c:	f8c8 1000 	streq.w	r1, [r8]
 8016d40:	5162      	str	r2, [r4, r5]
 8016d42:	604b      	str	r3, [r1, #4]
 8016d44:	4638      	mov	r0, r7
 8016d46:	f104 060b 	add.w	r6, r4, #11
 8016d4a:	f000 f829 	bl	8016da0 <__malloc_unlock>
 8016d4e:	f026 0607 	bic.w	r6, r6, #7
 8016d52:	1d23      	adds	r3, r4, #4
 8016d54:	1af2      	subs	r2, r6, r3
 8016d56:	d0ae      	beq.n	8016cb6 <_malloc_r+0x22>
 8016d58:	1b9b      	subs	r3, r3, r6
 8016d5a:	50a3      	str	r3, [r4, r2]
 8016d5c:	e7ab      	b.n	8016cb6 <_malloc_r+0x22>
 8016d5e:	42a3      	cmp	r3, r4
 8016d60:	6862      	ldr	r2, [r4, #4]
 8016d62:	d1dd      	bne.n	8016d20 <_malloc_r+0x8c>
 8016d64:	f8c8 2000 	str.w	r2, [r8]
 8016d68:	e7ec      	b.n	8016d44 <_malloc_r+0xb0>
 8016d6a:	4623      	mov	r3, r4
 8016d6c:	6864      	ldr	r4, [r4, #4]
 8016d6e:	e7ac      	b.n	8016cca <_malloc_r+0x36>
 8016d70:	4634      	mov	r4, r6
 8016d72:	6876      	ldr	r6, [r6, #4]
 8016d74:	e7b4      	b.n	8016ce0 <_malloc_r+0x4c>
 8016d76:	4613      	mov	r3, r2
 8016d78:	e7cc      	b.n	8016d14 <_malloc_r+0x80>
 8016d7a:	230c      	movs	r3, #12
 8016d7c:	603b      	str	r3, [r7, #0]
 8016d7e:	4638      	mov	r0, r7
 8016d80:	f000 f80e 	bl	8016da0 <__malloc_unlock>
 8016d84:	e797      	b.n	8016cb6 <_malloc_r+0x22>
 8016d86:	6025      	str	r5, [r4, #0]
 8016d88:	e7dc      	b.n	8016d44 <_malloc_r+0xb0>
 8016d8a:	605b      	str	r3, [r3, #4]
 8016d8c:	deff      	udf	#255	; 0xff
 8016d8e:	bf00      	nop
 8016d90:	20009d10 	.word	0x20009d10

08016d94 <__malloc_lock>:
 8016d94:	4801      	ldr	r0, [pc, #4]	; (8016d9c <__malloc_lock+0x8>)
 8016d96:	f000 bd26 	b.w	80177e6 <__retarget_lock_acquire_recursive>
 8016d9a:	bf00      	nop
 8016d9c:	20009e59 	.word	0x20009e59

08016da0 <__malloc_unlock>:
 8016da0:	4801      	ldr	r0, [pc, #4]	; (8016da8 <__malloc_unlock+0x8>)
 8016da2:	f000 bd21 	b.w	80177e8 <__retarget_lock_release_recursive>
 8016da6:	bf00      	nop
 8016da8:	20009e59 	.word	0x20009e59

08016dac <srand>:
 8016dac:	b538      	push	{r3, r4, r5, lr}
 8016dae:	4b10      	ldr	r3, [pc, #64]	; (8016df0 <srand+0x44>)
 8016db0:	681d      	ldr	r5, [r3, #0]
 8016db2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8016db4:	4604      	mov	r4, r0
 8016db6:	b9b3      	cbnz	r3, 8016de6 <srand+0x3a>
 8016db8:	2018      	movs	r0, #24
 8016dba:	f7ff ff3b 	bl	8016c34 <malloc>
 8016dbe:	4602      	mov	r2, r0
 8016dc0:	6328      	str	r0, [r5, #48]	; 0x30
 8016dc2:	b920      	cbnz	r0, 8016dce <srand+0x22>
 8016dc4:	4b0b      	ldr	r3, [pc, #44]	; (8016df4 <srand+0x48>)
 8016dc6:	480c      	ldr	r0, [pc, #48]	; (8016df8 <srand+0x4c>)
 8016dc8:	2146      	movs	r1, #70	; 0x46
 8016dca:	f000 fd25 	bl	8017818 <__assert_func>
 8016dce:	490b      	ldr	r1, [pc, #44]	; (8016dfc <srand+0x50>)
 8016dd0:	4b0b      	ldr	r3, [pc, #44]	; (8016e00 <srand+0x54>)
 8016dd2:	e9c0 1300 	strd	r1, r3, [r0]
 8016dd6:	4b0b      	ldr	r3, [pc, #44]	; (8016e04 <srand+0x58>)
 8016dd8:	6083      	str	r3, [r0, #8]
 8016dda:	230b      	movs	r3, #11
 8016ddc:	8183      	strh	r3, [r0, #12]
 8016dde:	2100      	movs	r1, #0
 8016de0:	2001      	movs	r0, #1
 8016de2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016de6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8016de8:	2200      	movs	r2, #0
 8016dea:	611c      	str	r4, [r3, #16]
 8016dec:	615a      	str	r2, [r3, #20]
 8016dee:	bd38      	pop	{r3, r4, r5, pc}
 8016df0:	200000d4 	.word	0x200000d4
 8016df4:	08019024 	.word	0x08019024
 8016df8:	0801903b 	.word	0x0801903b
 8016dfc:	abcd330e 	.word	0xabcd330e
 8016e00:	e66d1234 	.word	0xe66d1234
 8016e04:	0005deec 	.word	0x0005deec

08016e08 <rand>:
 8016e08:	4b16      	ldr	r3, [pc, #88]	; (8016e64 <rand+0x5c>)
 8016e0a:	b510      	push	{r4, lr}
 8016e0c:	681c      	ldr	r4, [r3, #0]
 8016e0e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016e10:	b9b3      	cbnz	r3, 8016e40 <rand+0x38>
 8016e12:	2018      	movs	r0, #24
 8016e14:	f7ff ff0e 	bl	8016c34 <malloc>
 8016e18:	4602      	mov	r2, r0
 8016e1a:	6320      	str	r0, [r4, #48]	; 0x30
 8016e1c:	b920      	cbnz	r0, 8016e28 <rand+0x20>
 8016e1e:	4b12      	ldr	r3, [pc, #72]	; (8016e68 <rand+0x60>)
 8016e20:	4812      	ldr	r0, [pc, #72]	; (8016e6c <rand+0x64>)
 8016e22:	2152      	movs	r1, #82	; 0x52
 8016e24:	f000 fcf8 	bl	8017818 <__assert_func>
 8016e28:	4911      	ldr	r1, [pc, #68]	; (8016e70 <rand+0x68>)
 8016e2a:	4b12      	ldr	r3, [pc, #72]	; (8016e74 <rand+0x6c>)
 8016e2c:	e9c0 1300 	strd	r1, r3, [r0]
 8016e30:	4b11      	ldr	r3, [pc, #68]	; (8016e78 <rand+0x70>)
 8016e32:	6083      	str	r3, [r0, #8]
 8016e34:	230b      	movs	r3, #11
 8016e36:	8183      	strh	r3, [r0, #12]
 8016e38:	2100      	movs	r1, #0
 8016e3a:	2001      	movs	r0, #1
 8016e3c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016e40:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8016e42:	480e      	ldr	r0, [pc, #56]	; (8016e7c <rand+0x74>)
 8016e44:	690b      	ldr	r3, [r1, #16]
 8016e46:	694c      	ldr	r4, [r1, #20]
 8016e48:	4a0d      	ldr	r2, [pc, #52]	; (8016e80 <rand+0x78>)
 8016e4a:	4358      	muls	r0, r3
 8016e4c:	fb02 0004 	mla	r0, r2, r4, r0
 8016e50:	fba3 3202 	umull	r3, r2, r3, r2
 8016e54:	3301      	adds	r3, #1
 8016e56:	eb40 0002 	adc.w	r0, r0, r2
 8016e5a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8016e5e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8016e62:	bd10      	pop	{r4, pc}
 8016e64:	200000d4 	.word	0x200000d4
 8016e68:	08019024 	.word	0x08019024
 8016e6c:	0801903b 	.word	0x0801903b
 8016e70:	abcd330e 	.word	0xabcd330e
 8016e74:	e66d1234 	.word	0xe66d1234
 8016e78:	0005deec 	.word	0x0005deec
 8016e7c:	5851f42d 	.word	0x5851f42d
 8016e80:	4c957f2d 	.word	0x4c957f2d

08016e84 <realloc>:
 8016e84:	4b02      	ldr	r3, [pc, #8]	; (8016e90 <realloc+0xc>)
 8016e86:	460a      	mov	r2, r1
 8016e88:	4601      	mov	r1, r0
 8016e8a:	6818      	ldr	r0, [r3, #0]
 8016e8c:	f000 b802 	b.w	8016e94 <_realloc_r>
 8016e90:	200000d4 	.word	0x200000d4

08016e94 <_realloc_r>:
 8016e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e98:	4680      	mov	r8, r0
 8016e9a:	4614      	mov	r4, r2
 8016e9c:	460e      	mov	r6, r1
 8016e9e:	b921      	cbnz	r1, 8016eaa <_realloc_r+0x16>
 8016ea0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016ea4:	4611      	mov	r1, r2
 8016ea6:	f7ff bef5 	b.w	8016c94 <_malloc_r>
 8016eaa:	b92a      	cbnz	r2, 8016eb8 <_realloc_r+0x24>
 8016eac:	f000 fcde 	bl	801786c <_free_r>
 8016eb0:	4625      	mov	r5, r4
 8016eb2:	4628      	mov	r0, r5
 8016eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016eb8:	f000 fd24 	bl	8017904 <_malloc_usable_size_r>
 8016ebc:	4284      	cmp	r4, r0
 8016ebe:	4607      	mov	r7, r0
 8016ec0:	d802      	bhi.n	8016ec8 <_realloc_r+0x34>
 8016ec2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016ec6:	d812      	bhi.n	8016eee <_realloc_r+0x5a>
 8016ec8:	4621      	mov	r1, r4
 8016eca:	4640      	mov	r0, r8
 8016ecc:	f7ff fee2 	bl	8016c94 <_malloc_r>
 8016ed0:	4605      	mov	r5, r0
 8016ed2:	2800      	cmp	r0, #0
 8016ed4:	d0ed      	beq.n	8016eb2 <_realloc_r+0x1e>
 8016ed6:	42bc      	cmp	r4, r7
 8016ed8:	4622      	mov	r2, r4
 8016eda:	4631      	mov	r1, r6
 8016edc:	bf28      	it	cs
 8016ede:	463a      	movcs	r2, r7
 8016ee0:	f000 fc8b 	bl	80177fa <memcpy>
 8016ee4:	4631      	mov	r1, r6
 8016ee6:	4640      	mov	r0, r8
 8016ee8:	f000 fcc0 	bl	801786c <_free_r>
 8016eec:	e7e1      	b.n	8016eb2 <_realloc_r+0x1e>
 8016eee:	4635      	mov	r5, r6
 8016ef0:	e7df      	b.n	8016eb2 <_realloc_r+0x1e>
	...

08016ef4 <_strtoul_l.constprop.0>:
 8016ef4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016ef8:	4f36      	ldr	r7, [pc, #216]	; (8016fd4 <_strtoul_l.constprop.0+0xe0>)
 8016efa:	4686      	mov	lr, r0
 8016efc:	460d      	mov	r5, r1
 8016efe:	4628      	mov	r0, r5
 8016f00:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016f04:	5d3e      	ldrb	r6, [r7, r4]
 8016f06:	f016 0608 	ands.w	r6, r6, #8
 8016f0a:	d1f8      	bne.n	8016efe <_strtoul_l.constprop.0+0xa>
 8016f0c:	2c2d      	cmp	r4, #45	; 0x2d
 8016f0e:	d130      	bne.n	8016f72 <_strtoul_l.constprop.0+0x7e>
 8016f10:	782c      	ldrb	r4, [r5, #0]
 8016f12:	2601      	movs	r6, #1
 8016f14:	1c85      	adds	r5, r0, #2
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	d057      	beq.n	8016fca <_strtoul_l.constprop.0+0xd6>
 8016f1a:	2b10      	cmp	r3, #16
 8016f1c:	d109      	bne.n	8016f32 <_strtoul_l.constprop.0+0x3e>
 8016f1e:	2c30      	cmp	r4, #48	; 0x30
 8016f20:	d107      	bne.n	8016f32 <_strtoul_l.constprop.0+0x3e>
 8016f22:	7828      	ldrb	r0, [r5, #0]
 8016f24:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8016f28:	2858      	cmp	r0, #88	; 0x58
 8016f2a:	d149      	bne.n	8016fc0 <_strtoul_l.constprop.0+0xcc>
 8016f2c:	786c      	ldrb	r4, [r5, #1]
 8016f2e:	2310      	movs	r3, #16
 8016f30:	3502      	adds	r5, #2
 8016f32:	f04f 38ff 	mov.w	r8, #4294967295
 8016f36:	2700      	movs	r7, #0
 8016f38:	fbb8 f8f3 	udiv	r8, r8, r3
 8016f3c:	fb03 f908 	mul.w	r9, r3, r8
 8016f40:	ea6f 0909 	mvn.w	r9, r9
 8016f44:	4638      	mov	r0, r7
 8016f46:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8016f4a:	f1bc 0f09 	cmp.w	ip, #9
 8016f4e:	d815      	bhi.n	8016f7c <_strtoul_l.constprop.0+0x88>
 8016f50:	4664      	mov	r4, ip
 8016f52:	42a3      	cmp	r3, r4
 8016f54:	dd23      	ble.n	8016f9e <_strtoul_l.constprop.0+0xaa>
 8016f56:	f1b7 3fff 	cmp.w	r7, #4294967295
 8016f5a:	d007      	beq.n	8016f6c <_strtoul_l.constprop.0+0x78>
 8016f5c:	4580      	cmp	r8, r0
 8016f5e:	d31b      	bcc.n	8016f98 <_strtoul_l.constprop.0+0xa4>
 8016f60:	d101      	bne.n	8016f66 <_strtoul_l.constprop.0+0x72>
 8016f62:	45a1      	cmp	r9, r4
 8016f64:	db18      	blt.n	8016f98 <_strtoul_l.constprop.0+0xa4>
 8016f66:	fb00 4003 	mla	r0, r0, r3, r4
 8016f6a:	2701      	movs	r7, #1
 8016f6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016f70:	e7e9      	b.n	8016f46 <_strtoul_l.constprop.0+0x52>
 8016f72:	2c2b      	cmp	r4, #43	; 0x2b
 8016f74:	bf04      	itt	eq
 8016f76:	782c      	ldrbeq	r4, [r5, #0]
 8016f78:	1c85      	addeq	r5, r0, #2
 8016f7a:	e7cc      	b.n	8016f16 <_strtoul_l.constprop.0+0x22>
 8016f7c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8016f80:	f1bc 0f19 	cmp.w	ip, #25
 8016f84:	d801      	bhi.n	8016f8a <_strtoul_l.constprop.0+0x96>
 8016f86:	3c37      	subs	r4, #55	; 0x37
 8016f88:	e7e3      	b.n	8016f52 <_strtoul_l.constprop.0+0x5e>
 8016f8a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8016f8e:	f1bc 0f19 	cmp.w	ip, #25
 8016f92:	d804      	bhi.n	8016f9e <_strtoul_l.constprop.0+0xaa>
 8016f94:	3c57      	subs	r4, #87	; 0x57
 8016f96:	e7dc      	b.n	8016f52 <_strtoul_l.constprop.0+0x5e>
 8016f98:	f04f 37ff 	mov.w	r7, #4294967295
 8016f9c:	e7e6      	b.n	8016f6c <_strtoul_l.constprop.0+0x78>
 8016f9e:	1c7b      	adds	r3, r7, #1
 8016fa0:	d106      	bne.n	8016fb0 <_strtoul_l.constprop.0+0xbc>
 8016fa2:	2322      	movs	r3, #34	; 0x22
 8016fa4:	f8ce 3000 	str.w	r3, [lr]
 8016fa8:	4638      	mov	r0, r7
 8016faa:	b932      	cbnz	r2, 8016fba <_strtoul_l.constprop.0+0xc6>
 8016fac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016fb0:	b106      	cbz	r6, 8016fb4 <_strtoul_l.constprop.0+0xc0>
 8016fb2:	4240      	negs	r0, r0
 8016fb4:	2a00      	cmp	r2, #0
 8016fb6:	d0f9      	beq.n	8016fac <_strtoul_l.constprop.0+0xb8>
 8016fb8:	b107      	cbz	r7, 8016fbc <_strtoul_l.constprop.0+0xc8>
 8016fba:	1e69      	subs	r1, r5, #1
 8016fbc:	6011      	str	r1, [r2, #0]
 8016fbe:	e7f5      	b.n	8016fac <_strtoul_l.constprop.0+0xb8>
 8016fc0:	2430      	movs	r4, #48	; 0x30
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	d1b5      	bne.n	8016f32 <_strtoul_l.constprop.0+0x3e>
 8016fc6:	2308      	movs	r3, #8
 8016fc8:	e7b3      	b.n	8016f32 <_strtoul_l.constprop.0+0x3e>
 8016fca:	2c30      	cmp	r4, #48	; 0x30
 8016fcc:	d0a9      	beq.n	8016f22 <_strtoul_l.constprop.0+0x2e>
 8016fce:	230a      	movs	r3, #10
 8016fd0:	e7af      	b.n	8016f32 <_strtoul_l.constprop.0+0x3e>
 8016fd2:	bf00      	nop
 8016fd4:	08019094 	.word	0x08019094

08016fd8 <strtoul>:
 8016fd8:	4613      	mov	r3, r2
 8016fda:	460a      	mov	r2, r1
 8016fdc:	4601      	mov	r1, r0
 8016fde:	4802      	ldr	r0, [pc, #8]	; (8016fe8 <strtoul+0x10>)
 8016fe0:	6800      	ldr	r0, [r0, #0]
 8016fe2:	f7ff bf87 	b.w	8016ef4 <_strtoul_l.constprop.0>
 8016fe6:	bf00      	nop
 8016fe8:	200000d4 	.word	0x200000d4

08016fec <std>:
 8016fec:	2300      	movs	r3, #0
 8016fee:	b510      	push	{r4, lr}
 8016ff0:	4604      	mov	r4, r0
 8016ff2:	e9c0 3300 	strd	r3, r3, [r0]
 8016ff6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016ffa:	6083      	str	r3, [r0, #8]
 8016ffc:	8181      	strh	r1, [r0, #12]
 8016ffe:	6643      	str	r3, [r0, #100]	; 0x64
 8017000:	81c2      	strh	r2, [r0, #14]
 8017002:	6183      	str	r3, [r0, #24]
 8017004:	4619      	mov	r1, r3
 8017006:	2208      	movs	r2, #8
 8017008:	305c      	adds	r0, #92	; 0x5c
 801700a:	f000 fad7 	bl	80175bc <memset>
 801700e:	4b0d      	ldr	r3, [pc, #52]	; (8017044 <std+0x58>)
 8017010:	6263      	str	r3, [r4, #36]	; 0x24
 8017012:	4b0d      	ldr	r3, [pc, #52]	; (8017048 <std+0x5c>)
 8017014:	62a3      	str	r3, [r4, #40]	; 0x28
 8017016:	4b0d      	ldr	r3, [pc, #52]	; (801704c <std+0x60>)
 8017018:	62e3      	str	r3, [r4, #44]	; 0x2c
 801701a:	4b0d      	ldr	r3, [pc, #52]	; (8017050 <std+0x64>)
 801701c:	6323      	str	r3, [r4, #48]	; 0x30
 801701e:	4b0d      	ldr	r3, [pc, #52]	; (8017054 <std+0x68>)
 8017020:	6224      	str	r4, [r4, #32]
 8017022:	429c      	cmp	r4, r3
 8017024:	d006      	beq.n	8017034 <std+0x48>
 8017026:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801702a:	4294      	cmp	r4, r2
 801702c:	d002      	beq.n	8017034 <std+0x48>
 801702e:	33d0      	adds	r3, #208	; 0xd0
 8017030:	429c      	cmp	r4, r3
 8017032:	d105      	bne.n	8017040 <std+0x54>
 8017034:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801703c:	f000 bbd2 	b.w	80177e4 <__retarget_lock_init_recursive>
 8017040:	bd10      	pop	{r4, pc}
 8017042:	bf00      	nop
 8017044:	08017399 	.word	0x08017399
 8017048:	080173bb 	.word	0x080173bb
 801704c:	080173f3 	.word	0x080173f3
 8017050:	08017417 	.word	0x08017417
 8017054:	20009d18 	.word	0x20009d18

08017058 <stdio_exit_handler>:
 8017058:	4a02      	ldr	r2, [pc, #8]	; (8017064 <stdio_exit_handler+0xc>)
 801705a:	4903      	ldr	r1, [pc, #12]	; (8017068 <stdio_exit_handler+0x10>)
 801705c:	4803      	ldr	r0, [pc, #12]	; (801706c <stdio_exit_handler+0x14>)
 801705e:	f000 b869 	b.w	8017134 <_fwalk_sglue>
 8017062:	bf00      	nop
 8017064:	2000007c 	.word	0x2000007c
 8017068:	08018279 	.word	0x08018279
 801706c:	20000088 	.word	0x20000088

08017070 <cleanup_stdio>:
 8017070:	6841      	ldr	r1, [r0, #4]
 8017072:	4b0c      	ldr	r3, [pc, #48]	; (80170a4 <cleanup_stdio+0x34>)
 8017074:	4299      	cmp	r1, r3
 8017076:	b510      	push	{r4, lr}
 8017078:	4604      	mov	r4, r0
 801707a:	d001      	beq.n	8017080 <cleanup_stdio+0x10>
 801707c:	f001 f8fc 	bl	8018278 <_fflush_r>
 8017080:	68a1      	ldr	r1, [r4, #8]
 8017082:	4b09      	ldr	r3, [pc, #36]	; (80170a8 <cleanup_stdio+0x38>)
 8017084:	4299      	cmp	r1, r3
 8017086:	d002      	beq.n	801708e <cleanup_stdio+0x1e>
 8017088:	4620      	mov	r0, r4
 801708a:	f001 f8f5 	bl	8018278 <_fflush_r>
 801708e:	68e1      	ldr	r1, [r4, #12]
 8017090:	4b06      	ldr	r3, [pc, #24]	; (80170ac <cleanup_stdio+0x3c>)
 8017092:	4299      	cmp	r1, r3
 8017094:	d004      	beq.n	80170a0 <cleanup_stdio+0x30>
 8017096:	4620      	mov	r0, r4
 8017098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801709c:	f001 b8ec 	b.w	8018278 <_fflush_r>
 80170a0:	bd10      	pop	{r4, pc}
 80170a2:	bf00      	nop
 80170a4:	20009d18 	.word	0x20009d18
 80170a8:	20009d80 	.word	0x20009d80
 80170ac:	20009de8 	.word	0x20009de8

080170b0 <global_stdio_init.part.0>:
 80170b0:	b510      	push	{r4, lr}
 80170b2:	4b0b      	ldr	r3, [pc, #44]	; (80170e0 <global_stdio_init.part.0+0x30>)
 80170b4:	4c0b      	ldr	r4, [pc, #44]	; (80170e4 <global_stdio_init.part.0+0x34>)
 80170b6:	4a0c      	ldr	r2, [pc, #48]	; (80170e8 <global_stdio_init.part.0+0x38>)
 80170b8:	601a      	str	r2, [r3, #0]
 80170ba:	4620      	mov	r0, r4
 80170bc:	2200      	movs	r2, #0
 80170be:	2104      	movs	r1, #4
 80170c0:	f7ff ff94 	bl	8016fec <std>
 80170c4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80170c8:	2201      	movs	r2, #1
 80170ca:	2109      	movs	r1, #9
 80170cc:	f7ff ff8e 	bl	8016fec <std>
 80170d0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80170d4:	2202      	movs	r2, #2
 80170d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80170da:	2112      	movs	r1, #18
 80170dc:	f7ff bf86 	b.w	8016fec <std>
 80170e0:	20009e50 	.word	0x20009e50
 80170e4:	20009d18 	.word	0x20009d18
 80170e8:	08017059 	.word	0x08017059

080170ec <__sfp_lock_acquire>:
 80170ec:	4801      	ldr	r0, [pc, #4]	; (80170f4 <__sfp_lock_acquire+0x8>)
 80170ee:	f000 bb7a 	b.w	80177e6 <__retarget_lock_acquire_recursive>
 80170f2:	bf00      	nop
 80170f4:	20009e5a 	.word	0x20009e5a

080170f8 <__sfp_lock_release>:
 80170f8:	4801      	ldr	r0, [pc, #4]	; (8017100 <__sfp_lock_release+0x8>)
 80170fa:	f000 bb75 	b.w	80177e8 <__retarget_lock_release_recursive>
 80170fe:	bf00      	nop
 8017100:	20009e5a 	.word	0x20009e5a

08017104 <__sinit>:
 8017104:	b510      	push	{r4, lr}
 8017106:	4604      	mov	r4, r0
 8017108:	f7ff fff0 	bl	80170ec <__sfp_lock_acquire>
 801710c:	6a23      	ldr	r3, [r4, #32]
 801710e:	b11b      	cbz	r3, 8017118 <__sinit+0x14>
 8017110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017114:	f7ff bff0 	b.w	80170f8 <__sfp_lock_release>
 8017118:	4b04      	ldr	r3, [pc, #16]	; (801712c <__sinit+0x28>)
 801711a:	6223      	str	r3, [r4, #32]
 801711c:	4b04      	ldr	r3, [pc, #16]	; (8017130 <__sinit+0x2c>)
 801711e:	681b      	ldr	r3, [r3, #0]
 8017120:	2b00      	cmp	r3, #0
 8017122:	d1f5      	bne.n	8017110 <__sinit+0xc>
 8017124:	f7ff ffc4 	bl	80170b0 <global_stdio_init.part.0>
 8017128:	e7f2      	b.n	8017110 <__sinit+0xc>
 801712a:	bf00      	nop
 801712c:	08017071 	.word	0x08017071
 8017130:	20009e50 	.word	0x20009e50

08017134 <_fwalk_sglue>:
 8017134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017138:	4607      	mov	r7, r0
 801713a:	4688      	mov	r8, r1
 801713c:	4614      	mov	r4, r2
 801713e:	2600      	movs	r6, #0
 8017140:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017144:	f1b9 0901 	subs.w	r9, r9, #1
 8017148:	d505      	bpl.n	8017156 <_fwalk_sglue+0x22>
 801714a:	6824      	ldr	r4, [r4, #0]
 801714c:	2c00      	cmp	r4, #0
 801714e:	d1f7      	bne.n	8017140 <_fwalk_sglue+0xc>
 8017150:	4630      	mov	r0, r6
 8017152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017156:	89ab      	ldrh	r3, [r5, #12]
 8017158:	2b01      	cmp	r3, #1
 801715a:	d907      	bls.n	801716c <_fwalk_sglue+0x38>
 801715c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017160:	3301      	adds	r3, #1
 8017162:	d003      	beq.n	801716c <_fwalk_sglue+0x38>
 8017164:	4629      	mov	r1, r5
 8017166:	4638      	mov	r0, r7
 8017168:	47c0      	blx	r8
 801716a:	4306      	orrs	r6, r0
 801716c:	3568      	adds	r5, #104	; 0x68
 801716e:	e7e9      	b.n	8017144 <_fwalk_sglue+0x10>

08017170 <iprintf>:
 8017170:	b40f      	push	{r0, r1, r2, r3}
 8017172:	b507      	push	{r0, r1, r2, lr}
 8017174:	4906      	ldr	r1, [pc, #24]	; (8017190 <iprintf+0x20>)
 8017176:	ab04      	add	r3, sp, #16
 8017178:	6808      	ldr	r0, [r1, #0]
 801717a:	f853 2b04 	ldr.w	r2, [r3], #4
 801717e:	6881      	ldr	r1, [r0, #8]
 8017180:	9301      	str	r3, [sp, #4]
 8017182:	f000 fd49 	bl	8017c18 <_vfiprintf_r>
 8017186:	b003      	add	sp, #12
 8017188:	f85d eb04 	ldr.w	lr, [sp], #4
 801718c:	b004      	add	sp, #16
 801718e:	4770      	bx	lr
 8017190:	200000d4 	.word	0x200000d4

08017194 <setvbuf>:
 8017194:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017198:	461d      	mov	r5, r3
 801719a:	4b54      	ldr	r3, [pc, #336]	; (80172ec <setvbuf+0x158>)
 801719c:	681f      	ldr	r7, [r3, #0]
 801719e:	4604      	mov	r4, r0
 80171a0:	460e      	mov	r6, r1
 80171a2:	4690      	mov	r8, r2
 80171a4:	b127      	cbz	r7, 80171b0 <setvbuf+0x1c>
 80171a6:	6a3b      	ldr	r3, [r7, #32]
 80171a8:	b913      	cbnz	r3, 80171b0 <setvbuf+0x1c>
 80171aa:	4638      	mov	r0, r7
 80171ac:	f7ff ffaa 	bl	8017104 <__sinit>
 80171b0:	f1b8 0f02 	cmp.w	r8, #2
 80171b4:	d006      	beq.n	80171c4 <setvbuf+0x30>
 80171b6:	f1b8 0f01 	cmp.w	r8, #1
 80171ba:	f200 8094 	bhi.w	80172e6 <setvbuf+0x152>
 80171be:	2d00      	cmp	r5, #0
 80171c0:	f2c0 8091 	blt.w	80172e6 <setvbuf+0x152>
 80171c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80171c6:	07da      	lsls	r2, r3, #31
 80171c8:	d405      	bmi.n	80171d6 <setvbuf+0x42>
 80171ca:	89a3      	ldrh	r3, [r4, #12]
 80171cc:	059b      	lsls	r3, r3, #22
 80171ce:	d402      	bmi.n	80171d6 <setvbuf+0x42>
 80171d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80171d2:	f000 fb08 	bl	80177e6 <__retarget_lock_acquire_recursive>
 80171d6:	4621      	mov	r1, r4
 80171d8:	4638      	mov	r0, r7
 80171da:	f001 f84d 	bl	8018278 <_fflush_r>
 80171de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80171e0:	b141      	cbz	r1, 80171f4 <setvbuf+0x60>
 80171e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80171e6:	4299      	cmp	r1, r3
 80171e8:	d002      	beq.n	80171f0 <setvbuf+0x5c>
 80171ea:	4638      	mov	r0, r7
 80171ec:	f000 fb3e 	bl	801786c <_free_r>
 80171f0:	2300      	movs	r3, #0
 80171f2:	6363      	str	r3, [r4, #52]	; 0x34
 80171f4:	2300      	movs	r3, #0
 80171f6:	61a3      	str	r3, [r4, #24]
 80171f8:	6063      	str	r3, [r4, #4]
 80171fa:	89a3      	ldrh	r3, [r4, #12]
 80171fc:	0618      	lsls	r0, r3, #24
 80171fe:	d503      	bpl.n	8017208 <setvbuf+0x74>
 8017200:	6921      	ldr	r1, [r4, #16]
 8017202:	4638      	mov	r0, r7
 8017204:	f000 fb32 	bl	801786c <_free_r>
 8017208:	89a3      	ldrh	r3, [r4, #12]
 801720a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 801720e:	f023 0303 	bic.w	r3, r3, #3
 8017212:	f1b8 0f02 	cmp.w	r8, #2
 8017216:	81a3      	strh	r3, [r4, #12]
 8017218:	d05f      	beq.n	80172da <setvbuf+0x146>
 801721a:	ab01      	add	r3, sp, #4
 801721c:	466a      	mov	r2, sp
 801721e:	4621      	mov	r1, r4
 8017220:	4638      	mov	r0, r7
 8017222:	f001 f863 	bl	80182ec <__swhatbuf_r>
 8017226:	89a3      	ldrh	r3, [r4, #12]
 8017228:	4318      	orrs	r0, r3
 801722a:	81a0      	strh	r0, [r4, #12]
 801722c:	bb2d      	cbnz	r5, 801727a <setvbuf+0xe6>
 801722e:	9d00      	ldr	r5, [sp, #0]
 8017230:	4628      	mov	r0, r5
 8017232:	f7ff fcff 	bl	8016c34 <malloc>
 8017236:	4606      	mov	r6, r0
 8017238:	2800      	cmp	r0, #0
 801723a:	d150      	bne.n	80172de <setvbuf+0x14a>
 801723c:	f8dd 9000 	ldr.w	r9, [sp]
 8017240:	45a9      	cmp	r9, r5
 8017242:	d13e      	bne.n	80172c2 <setvbuf+0x12e>
 8017244:	f04f 35ff 	mov.w	r5, #4294967295
 8017248:	2200      	movs	r2, #0
 801724a:	60a2      	str	r2, [r4, #8]
 801724c:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8017250:	6022      	str	r2, [r4, #0]
 8017252:	6122      	str	r2, [r4, #16]
 8017254:	2201      	movs	r2, #1
 8017256:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801725a:	6162      	str	r2, [r4, #20]
 801725c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801725e:	f043 0302 	orr.w	r3, r3, #2
 8017262:	07d1      	lsls	r1, r2, #31
 8017264:	81a3      	strh	r3, [r4, #12]
 8017266:	d404      	bmi.n	8017272 <setvbuf+0xde>
 8017268:	059b      	lsls	r3, r3, #22
 801726a:	d402      	bmi.n	8017272 <setvbuf+0xde>
 801726c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801726e:	f000 fabb 	bl	80177e8 <__retarget_lock_release_recursive>
 8017272:	4628      	mov	r0, r5
 8017274:	b003      	add	sp, #12
 8017276:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801727a:	2e00      	cmp	r6, #0
 801727c:	d0d8      	beq.n	8017230 <setvbuf+0x9c>
 801727e:	6a3b      	ldr	r3, [r7, #32]
 8017280:	b913      	cbnz	r3, 8017288 <setvbuf+0xf4>
 8017282:	4638      	mov	r0, r7
 8017284:	f7ff ff3e 	bl	8017104 <__sinit>
 8017288:	f1b8 0f01 	cmp.w	r8, #1
 801728c:	bf08      	it	eq
 801728e:	89a3      	ldrheq	r3, [r4, #12]
 8017290:	6026      	str	r6, [r4, #0]
 8017292:	bf04      	itt	eq
 8017294:	f043 0301 	orreq.w	r3, r3, #1
 8017298:	81a3      	strheq	r3, [r4, #12]
 801729a:	89a3      	ldrh	r3, [r4, #12]
 801729c:	f013 0208 	ands.w	r2, r3, #8
 80172a0:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80172a4:	d01d      	beq.n	80172e2 <setvbuf+0x14e>
 80172a6:	07da      	lsls	r2, r3, #31
 80172a8:	bf41      	itttt	mi
 80172aa:	2200      	movmi	r2, #0
 80172ac:	426d      	negmi	r5, r5
 80172ae:	60a2      	strmi	r2, [r4, #8]
 80172b0:	61a5      	strmi	r5, [r4, #24]
 80172b2:	bf58      	it	pl
 80172b4:	60a5      	strpl	r5, [r4, #8]
 80172b6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80172b8:	f015 0501 	ands.w	r5, r5, #1
 80172bc:	d0d4      	beq.n	8017268 <setvbuf+0xd4>
 80172be:	2500      	movs	r5, #0
 80172c0:	e7d7      	b.n	8017272 <setvbuf+0xde>
 80172c2:	4648      	mov	r0, r9
 80172c4:	f7ff fcb6 	bl	8016c34 <malloc>
 80172c8:	4606      	mov	r6, r0
 80172ca:	2800      	cmp	r0, #0
 80172cc:	d0ba      	beq.n	8017244 <setvbuf+0xb0>
 80172ce:	89a3      	ldrh	r3, [r4, #12]
 80172d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80172d4:	81a3      	strh	r3, [r4, #12]
 80172d6:	464d      	mov	r5, r9
 80172d8:	e7d1      	b.n	801727e <setvbuf+0xea>
 80172da:	2500      	movs	r5, #0
 80172dc:	e7b4      	b.n	8017248 <setvbuf+0xb4>
 80172de:	46a9      	mov	r9, r5
 80172e0:	e7f5      	b.n	80172ce <setvbuf+0x13a>
 80172e2:	60a2      	str	r2, [r4, #8]
 80172e4:	e7e7      	b.n	80172b6 <setvbuf+0x122>
 80172e6:	f04f 35ff 	mov.w	r5, #4294967295
 80172ea:	e7c2      	b.n	8017272 <setvbuf+0xde>
 80172ec:	200000d4 	.word	0x200000d4

080172f0 <sniprintf>:
 80172f0:	b40c      	push	{r2, r3}
 80172f2:	b530      	push	{r4, r5, lr}
 80172f4:	4b17      	ldr	r3, [pc, #92]	; (8017354 <sniprintf+0x64>)
 80172f6:	1e0c      	subs	r4, r1, #0
 80172f8:	681d      	ldr	r5, [r3, #0]
 80172fa:	b09d      	sub	sp, #116	; 0x74
 80172fc:	da08      	bge.n	8017310 <sniprintf+0x20>
 80172fe:	238b      	movs	r3, #139	; 0x8b
 8017300:	602b      	str	r3, [r5, #0]
 8017302:	f04f 30ff 	mov.w	r0, #4294967295
 8017306:	b01d      	add	sp, #116	; 0x74
 8017308:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801730c:	b002      	add	sp, #8
 801730e:	4770      	bx	lr
 8017310:	f44f 7302 	mov.w	r3, #520	; 0x208
 8017314:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017318:	bf14      	ite	ne
 801731a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801731e:	4623      	moveq	r3, r4
 8017320:	9304      	str	r3, [sp, #16]
 8017322:	9307      	str	r3, [sp, #28]
 8017324:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017328:	9002      	str	r0, [sp, #8]
 801732a:	9006      	str	r0, [sp, #24]
 801732c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017330:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017332:	ab21      	add	r3, sp, #132	; 0x84
 8017334:	a902      	add	r1, sp, #8
 8017336:	4628      	mov	r0, r5
 8017338:	9301      	str	r3, [sp, #4]
 801733a:	f000 fb45 	bl	80179c8 <_svfiprintf_r>
 801733e:	1c43      	adds	r3, r0, #1
 8017340:	bfbc      	itt	lt
 8017342:	238b      	movlt	r3, #139	; 0x8b
 8017344:	602b      	strlt	r3, [r5, #0]
 8017346:	2c00      	cmp	r4, #0
 8017348:	d0dd      	beq.n	8017306 <sniprintf+0x16>
 801734a:	9b02      	ldr	r3, [sp, #8]
 801734c:	2200      	movs	r2, #0
 801734e:	701a      	strb	r2, [r3, #0]
 8017350:	e7d9      	b.n	8017306 <sniprintf+0x16>
 8017352:	bf00      	nop
 8017354:	200000d4 	.word	0x200000d4

08017358 <siprintf>:
 8017358:	b40e      	push	{r1, r2, r3}
 801735a:	b500      	push	{lr}
 801735c:	b09c      	sub	sp, #112	; 0x70
 801735e:	ab1d      	add	r3, sp, #116	; 0x74
 8017360:	9002      	str	r0, [sp, #8]
 8017362:	9006      	str	r0, [sp, #24]
 8017364:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017368:	4809      	ldr	r0, [pc, #36]	; (8017390 <siprintf+0x38>)
 801736a:	9107      	str	r1, [sp, #28]
 801736c:	9104      	str	r1, [sp, #16]
 801736e:	4909      	ldr	r1, [pc, #36]	; (8017394 <siprintf+0x3c>)
 8017370:	f853 2b04 	ldr.w	r2, [r3], #4
 8017374:	9105      	str	r1, [sp, #20]
 8017376:	6800      	ldr	r0, [r0, #0]
 8017378:	9301      	str	r3, [sp, #4]
 801737a:	a902      	add	r1, sp, #8
 801737c:	f000 fb24 	bl	80179c8 <_svfiprintf_r>
 8017380:	9b02      	ldr	r3, [sp, #8]
 8017382:	2200      	movs	r2, #0
 8017384:	701a      	strb	r2, [r3, #0]
 8017386:	b01c      	add	sp, #112	; 0x70
 8017388:	f85d eb04 	ldr.w	lr, [sp], #4
 801738c:	b003      	add	sp, #12
 801738e:	4770      	bx	lr
 8017390:	200000d4 	.word	0x200000d4
 8017394:	ffff0208 	.word	0xffff0208

08017398 <__sread>:
 8017398:	b510      	push	{r4, lr}
 801739a:	460c      	mov	r4, r1
 801739c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80173a0:	f000 f9c2 	bl	8017728 <_read_r>
 80173a4:	2800      	cmp	r0, #0
 80173a6:	bfab      	itete	ge
 80173a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80173aa:	89a3      	ldrhlt	r3, [r4, #12]
 80173ac:	181b      	addge	r3, r3, r0
 80173ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80173b2:	bfac      	ite	ge
 80173b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80173b6:	81a3      	strhlt	r3, [r4, #12]
 80173b8:	bd10      	pop	{r4, pc}

080173ba <__swrite>:
 80173ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173be:	461f      	mov	r7, r3
 80173c0:	898b      	ldrh	r3, [r1, #12]
 80173c2:	05db      	lsls	r3, r3, #23
 80173c4:	4605      	mov	r5, r0
 80173c6:	460c      	mov	r4, r1
 80173c8:	4616      	mov	r6, r2
 80173ca:	d505      	bpl.n	80173d8 <__swrite+0x1e>
 80173cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80173d0:	2302      	movs	r3, #2
 80173d2:	2200      	movs	r2, #0
 80173d4:	f000 f996 	bl	8017704 <_lseek_r>
 80173d8:	89a3      	ldrh	r3, [r4, #12]
 80173da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80173de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80173e2:	81a3      	strh	r3, [r4, #12]
 80173e4:	4632      	mov	r2, r6
 80173e6:	463b      	mov	r3, r7
 80173e8:	4628      	mov	r0, r5
 80173ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80173ee:	f000 b9bd 	b.w	801776c <_write_r>

080173f2 <__sseek>:
 80173f2:	b510      	push	{r4, lr}
 80173f4:	460c      	mov	r4, r1
 80173f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80173fa:	f000 f983 	bl	8017704 <_lseek_r>
 80173fe:	1c43      	adds	r3, r0, #1
 8017400:	89a3      	ldrh	r3, [r4, #12]
 8017402:	bf15      	itete	ne
 8017404:	6560      	strne	r0, [r4, #84]	; 0x54
 8017406:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801740a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801740e:	81a3      	strheq	r3, [r4, #12]
 8017410:	bf18      	it	ne
 8017412:	81a3      	strhne	r3, [r4, #12]
 8017414:	bd10      	pop	{r4, pc}

08017416 <__sclose>:
 8017416:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801741a:	f000 b90d 	b.w	8017638 <_close_r>

0801741e <_vsniprintf_r>:
 801741e:	b530      	push	{r4, r5, lr}
 8017420:	4614      	mov	r4, r2
 8017422:	2c00      	cmp	r4, #0
 8017424:	b09b      	sub	sp, #108	; 0x6c
 8017426:	4605      	mov	r5, r0
 8017428:	461a      	mov	r2, r3
 801742a:	da05      	bge.n	8017438 <_vsniprintf_r+0x1a>
 801742c:	238b      	movs	r3, #139	; 0x8b
 801742e:	6003      	str	r3, [r0, #0]
 8017430:	f04f 30ff 	mov.w	r0, #4294967295
 8017434:	b01b      	add	sp, #108	; 0x6c
 8017436:	bd30      	pop	{r4, r5, pc}
 8017438:	f44f 7302 	mov.w	r3, #520	; 0x208
 801743c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017440:	bf14      	ite	ne
 8017442:	f104 33ff 	addne.w	r3, r4, #4294967295
 8017446:	4623      	moveq	r3, r4
 8017448:	9302      	str	r3, [sp, #8]
 801744a:	9305      	str	r3, [sp, #20]
 801744c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017450:	9100      	str	r1, [sp, #0]
 8017452:	9104      	str	r1, [sp, #16]
 8017454:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017458:	4669      	mov	r1, sp
 801745a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801745c:	f000 fab4 	bl	80179c8 <_svfiprintf_r>
 8017460:	1c43      	adds	r3, r0, #1
 8017462:	bfbc      	itt	lt
 8017464:	238b      	movlt	r3, #139	; 0x8b
 8017466:	602b      	strlt	r3, [r5, #0]
 8017468:	2c00      	cmp	r4, #0
 801746a:	d0e3      	beq.n	8017434 <_vsniprintf_r+0x16>
 801746c:	9b00      	ldr	r3, [sp, #0]
 801746e:	2200      	movs	r2, #0
 8017470:	701a      	strb	r2, [r3, #0]
 8017472:	e7df      	b.n	8017434 <_vsniprintf_r+0x16>

08017474 <vsniprintf>:
 8017474:	b507      	push	{r0, r1, r2, lr}
 8017476:	9300      	str	r3, [sp, #0]
 8017478:	4613      	mov	r3, r2
 801747a:	460a      	mov	r2, r1
 801747c:	4601      	mov	r1, r0
 801747e:	4803      	ldr	r0, [pc, #12]	; (801748c <vsniprintf+0x18>)
 8017480:	6800      	ldr	r0, [r0, #0]
 8017482:	f7ff ffcc 	bl	801741e <_vsniprintf_r>
 8017486:	b003      	add	sp, #12
 8017488:	f85d fb04 	ldr.w	pc, [sp], #4
 801748c:	200000d4 	.word	0x200000d4

08017490 <__swbuf_r>:
 8017490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017492:	460e      	mov	r6, r1
 8017494:	4614      	mov	r4, r2
 8017496:	4605      	mov	r5, r0
 8017498:	b118      	cbz	r0, 80174a2 <__swbuf_r+0x12>
 801749a:	6a03      	ldr	r3, [r0, #32]
 801749c:	b90b      	cbnz	r3, 80174a2 <__swbuf_r+0x12>
 801749e:	f7ff fe31 	bl	8017104 <__sinit>
 80174a2:	69a3      	ldr	r3, [r4, #24]
 80174a4:	60a3      	str	r3, [r4, #8]
 80174a6:	89a3      	ldrh	r3, [r4, #12]
 80174a8:	071a      	lsls	r2, r3, #28
 80174aa:	d525      	bpl.n	80174f8 <__swbuf_r+0x68>
 80174ac:	6923      	ldr	r3, [r4, #16]
 80174ae:	b31b      	cbz	r3, 80174f8 <__swbuf_r+0x68>
 80174b0:	6823      	ldr	r3, [r4, #0]
 80174b2:	6922      	ldr	r2, [r4, #16]
 80174b4:	1a98      	subs	r0, r3, r2
 80174b6:	6963      	ldr	r3, [r4, #20]
 80174b8:	b2f6      	uxtb	r6, r6
 80174ba:	4283      	cmp	r3, r0
 80174bc:	4637      	mov	r7, r6
 80174be:	dc04      	bgt.n	80174ca <__swbuf_r+0x3a>
 80174c0:	4621      	mov	r1, r4
 80174c2:	4628      	mov	r0, r5
 80174c4:	f000 fed8 	bl	8018278 <_fflush_r>
 80174c8:	b9e0      	cbnz	r0, 8017504 <__swbuf_r+0x74>
 80174ca:	68a3      	ldr	r3, [r4, #8]
 80174cc:	3b01      	subs	r3, #1
 80174ce:	60a3      	str	r3, [r4, #8]
 80174d0:	6823      	ldr	r3, [r4, #0]
 80174d2:	1c5a      	adds	r2, r3, #1
 80174d4:	6022      	str	r2, [r4, #0]
 80174d6:	701e      	strb	r6, [r3, #0]
 80174d8:	6962      	ldr	r2, [r4, #20]
 80174da:	1c43      	adds	r3, r0, #1
 80174dc:	429a      	cmp	r2, r3
 80174de:	d004      	beq.n	80174ea <__swbuf_r+0x5a>
 80174e0:	89a3      	ldrh	r3, [r4, #12]
 80174e2:	07db      	lsls	r3, r3, #31
 80174e4:	d506      	bpl.n	80174f4 <__swbuf_r+0x64>
 80174e6:	2e0a      	cmp	r6, #10
 80174e8:	d104      	bne.n	80174f4 <__swbuf_r+0x64>
 80174ea:	4621      	mov	r1, r4
 80174ec:	4628      	mov	r0, r5
 80174ee:	f000 fec3 	bl	8018278 <_fflush_r>
 80174f2:	b938      	cbnz	r0, 8017504 <__swbuf_r+0x74>
 80174f4:	4638      	mov	r0, r7
 80174f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80174f8:	4621      	mov	r1, r4
 80174fa:	4628      	mov	r0, r5
 80174fc:	f000 f806 	bl	801750c <__swsetup_r>
 8017500:	2800      	cmp	r0, #0
 8017502:	d0d5      	beq.n	80174b0 <__swbuf_r+0x20>
 8017504:	f04f 37ff 	mov.w	r7, #4294967295
 8017508:	e7f4      	b.n	80174f4 <__swbuf_r+0x64>
	...

0801750c <__swsetup_r>:
 801750c:	b538      	push	{r3, r4, r5, lr}
 801750e:	4b2a      	ldr	r3, [pc, #168]	; (80175b8 <__swsetup_r+0xac>)
 8017510:	4605      	mov	r5, r0
 8017512:	6818      	ldr	r0, [r3, #0]
 8017514:	460c      	mov	r4, r1
 8017516:	b118      	cbz	r0, 8017520 <__swsetup_r+0x14>
 8017518:	6a03      	ldr	r3, [r0, #32]
 801751a:	b90b      	cbnz	r3, 8017520 <__swsetup_r+0x14>
 801751c:	f7ff fdf2 	bl	8017104 <__sinit>
 8017520:	89a3      	ldrh	r3, [r4, #12]
 8017522:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017526:	0718      	lsls	r0, r3, #28
 8017528:	d422      	bmi.n	8017570 <__swsetup_r+0x64>
 801752a:	06d9      	lsls	r1, r3, #27
 801752c:	d407      	bmi.n	801753e <__swsetup_r+0x32>
 801752e:	2309      	movs	r3, #9
 8017530:	602b      	str	r3, [r5, #0]
 8017532:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017536:	81a3      	strh	r3, [r4, #12]
 8017538:	f04f 30ff 	mov.w	r0, #4294967295
 801753c:	e034      	b.n	80175a8 <__swsetup_r+0x9c>
 801753e:	0758      	lsls	r0, r3, #29
 8017540:	d512      	bpl.n	8017568 <__swsetup_r+0x5c>
 8017542:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017544:	b141      	cbz	r1, 8017558 <__swsetup_r+0x4c>
 8017546:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801754a:	4299      	cmp	r1, r3
 801754c:	d002      	beq.n	8017554 <__swsetup_r+0x48>
 801754e:	4628      	mov	r0, r5
 8017550:	f000 f98c 	bl	801786c <_free_r>
 8017554:	2300      	movs	r3, #0
 8017556:	6363      	str	r3, [r4, #52]	; 0x34
 8017558:	89a3      	ldrh	r3, [r4, #12]
 801755a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801755e:	81a3      	strh	r3, [r4, #12]
 8017560:	2300      	movs	r3, #0
 8017562:	6063      	str	r3, [r4, #4]
 8017564:	6923      	ldr	r3, [r4, #16]
 8017566:	6023      	str	r3, [r4, #0]
 8017568:	89a3      	ldrh	r3, [r4, #12]
 801756a:	f043 0308 	orr.w	r3, r3, #8
 801756e:	81a3      	strh	r3, [r4, #12]
 8017570:	6923      	ldr	r3, [r4, #16]
 8017572:	b94b      	cbnz	r3, 8017588 <__swsetup_r+0x7c>
 8017574:	89a3      	ldrh	r3, [r4, #12]
 8017576:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801757a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801757e:	d003      	beq.n	8017588 <__swsetup_r+0x7c>
 8017580:	4621      	mov	r1, r4
 8017582:	4628      	mov	r0, r5
 8017584:	f000 fed8 	bl	8018338 <__smakebuf_r>
 8017588:	89a0      	ldrh	r0, [r4, #12]
 801758a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801758e:	f010 0301 	ands.w	r3, r0, #1
 8017592:	d00a      	beq.n	80175aa <__swsetup_r+0x9e>
 8017594:	2300      	movs	r3, #0
 8017596:	60a3      	str	r3, [r4, #8]
 8017598:	6963      	ldr	r3, [r4, #20]
 801759a:	425b      	negs	r3, r3
 801759c:	61a3      	str	r3, [r4, #24]
 801759e:	6923      	ldr	r3, [r4, #16]
 80175a0:	b943      	cbnz	r3, 80175b4 <__swsetup_r+0xa8>
 80175a2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80175a6:	d1c4      	bne.n	8017532 <__swsetup_r+0x26>
 80175a8:	bd38      	pop	{r3, r4, r5, pc}
 80175aa:	0781      	lsls	r1, r0, #30
 80175ac:	bf58      	it	pl
 80175ae:	6963      	ldrpl	r3, [r4, #20]
 80175b0:	60a3      	str	r3, [r4, #8]
 80175b2:	e7f4      	b.n	801759e <__swsetup_r+0x92>
 80175b4:	2000      	movs	r0, #0
 80175b6:	e7f7      	b.n	80175a8 <__swsetup_r+0x9c>
 80175b8:	200000d4 	.word	0x200000d4

080175bc <memset>:
 80175bc:	4402      	add	r2, r0
 80175be:	4603      	mov	r3, r0
 80175c0:	4293      	cmp	r3, r2
 80175c2:	d100      	bne.n	80175c6 <memset+0xa>
 80175c4:	4770      	bx	lr
 80175c6:	f803 1b01 	strb.w	r1, [r3], #1
 80175ca:	e7f9      	b.n	80175c0 <memset+0x4>

080175cc <strchr>:
 80175cc:	b2c9      	uxtb	r1, r1
 80175ce:	4603      	mov	r3, r0
 80175d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80175d4:	b11a      	cbz	r2, 80175de <strchr+0x12>
 80175d6:	428a      	cmp	r2, r1
 80175d8:	d1f9      	bne.n	80175ce <strchr+0x2>
 80175da:	4618      	mov	r0, r3
 80175dc:	4770      	bx	lr
 80175de:	2900      	cmp	r1, #0
 80175e0:	bf18      	it	ne
 80175e2:	2300      	movne	r3, #0
 80175e4:	e7f9      	b.n	80175da <strchr+0xe>

080175e6 <strncmp>:
 80175e6:	b510      	push	{r4, lr}
 80175e8:	b16a      	cbz	r2, 8017606 <strncmp+0x20>
 80175ea:	3901      	subs	r1, #1
 80175ec:	1884      	adds	r4, r0, r2
 80175ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80175f2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80175f6:	429a      	cmp	r2, r3
 80175f8:	d103      	bne.n	8017602 <strncmp+0x1c>
 80175fa:	42a0      	cmp	r0, r4
 80175fc:	d001      	beq.n	8017602 <strncmp+0x1c>
 80175fe:	2a00      	cmp	r2, #0
 8017600:	d1f5      	bne.n	80175ee <strncmp+0x8>
 8017602:	1ad0      	subs	r0, r2, r3
 8017604:	bd10      	pop	{r4, pc}
 8017606:	4610      	mov	r0, r2
 8017608:	e7fc      	b.n	8017604 <strncmp+0x1e>

0801760a <strstr>:
 801760a:	780a      	ldrb	r2, [r1, #0]
 801760c:	b570      	push	{r4, r5, r6, lr}
 801760e:	b96a      	cbnz	r2, 801762c <strstr+0x22>
 8017610:	bd70      	pop	{r4, r5, r6, pc}
 8017612:	429a      	cmp	r2, r3
 8017614:	d109      	bne.n	801762a <strstr+0x20>
 8017616:	460c      	mov	r4, r1
 8017618:	4605      	mov	r5, r0
 801761a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801761e:	2b00      	cmp	r3, #0
 8017620:	d0f6      	beq.n	8017610 <strstr+0x6>
 8017622:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8017626:	429e      	cmp	r6, r3
 8017628:	d0f7      	beq.n	801761a <strstr+0x10>
 801762a:	3001      	adds	r0, #1
 801762c:	7803      	ldrb	r3, [r0, #0]
 801762e:	2b00      	cmp	r3, #0
 8017630:	d1ef      	bne.n	8017612 <strstr+0x8>
 8017632:	4618      	mov	r0, r3
 8017634:	e7ec      	b.n	8017610 <strstr+0x6>
	...

08017638 <_close_r>:
 8017638:	b538      	push	{r3, r4, r5, lr}
 801763a:	4d06      	ldr	r5, [pc, #24]	; (8017654 <_close_r+0x1c>)
 801763c:	2300      	movs	r3, #0
 801763e:	4604      	mov	r4, r0
 8017640:	4608      	mov	r0, r1
 8017642:	602b      	str	r3, [r5, #0]
 8017644:	f7eb fd14 	bl	8003070 <_close>
 8017648:	1c43      	adds	r3, r0, #1
 801764a:	d102      	bne.n	8017652 <_close_r+0x1a>
 801764c:	682b      	ldr	r3, [r5, #0]
 801764e:	b103      	cbz	r3, 8017652 <_close_r+0x1a>
 8017650:	6023      	str	r3, [r4, #0]
 8017652:	bd38      	pop	{r3, r4, r5, pc}
 8017654:	20009e54 	.word	0x20009e54

08017658 <_reclaim_reent>:
 8017658:	4b29      	ldr	r3, [pc, #164]	; (8017700 <_reclaim_reent+0xa8>)
 801765a:	681b      	ldr	r3, [r3, #0]
 801765c:	4283      	cmp	r3, r0
 801765e:	b570      	push	{r4, r5, r6, lr}
 8017660:	4604      	mov	r4, r0
 8017662:	d04b      	beq.n	80176fc <_reclaim_reent+0xa4>
 8017664:	69c3      	ldr	r3, [r0, #28]
 8017666:	b143      	cbz	r3, 801767a <_reclaim_reent+0x22>
 8017668:	68db      	ldr	r3, [r3, #12]
 801766a:	2b00      	cmp	r3, #0
 801766c:	d144      	bne.n	80176f8 <_reclaim_reent+0xa0>
 801766e:	69e3      	ldr	r3, [r4, #28]
 8017670:	6819      	ldr	r1, [r3, #0]
 8017672:	b111      	cbz	r1, 801767a <_reclaim_reent+0x22>
 8017674:	4620      	mov	r0, r4
 8017676:	f000 f8f9 	bl	801786c <_free_r>
 801767a:	6961      	ldr	r1, [r4, #20]
 801767c:	b111      	cbz	r1, 8017684 <_reclaim_reent+0x2c>
 801767e:	4620      	mov	r0, r4
 8017680:	f000 f8f4 	bl	801786c <_free_r>
 8017684:	69e1      	ldr	r1, [r4, #28]
 8017686:	b111      	cbz	r1, 801768e <_reclaim_reent+0x36>
 8017688:	4620      	mov	r0, r4
 801768a:	f000 f8ef 	bl	801786c <_free_r>
 801768e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8017690:	b111      	cbz	r1, 8017698 <_reclaim_reent+0x40>
 8017692:	4620      	mov	r0, r4
 8017694:	f000 f8ea 	bl	801786c <_free_r>
 8017698:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801769a:	b111      	cbz	r1, 80176a2 <_reclaim_reent+0x4a>
 801769c:	4620      	mov	r0, r4
 801769e:	f000 f8e5 	bl	801786c <_free_r>
 80176a2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80176a4:	b111      	cbz	r1, 80176ac <_reclaim_reent+0x54>
 80176a6:	4620      	mov	r0, r4
 80176a8:	f000 f8e0 	bl	801786c <_free_r>
 80176ac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80176ae:	b111      	cbz	r1, 80176b6 <_reclaim_reent+0x5e>
 80176b0:	4620      	mov	r0, r4
 80176b2:	f000 f8db 	bl	801786c <_free_r>
 80176b6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80176b8:	b111      	cbz	r1, 80176c0 <_reclaim_reent+0x68>
 80176ba:	4620      	mov	r0, r4
 80176bc:	f000 f8d6 	bl	801786c <_free_r>
 80176c0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80176c2:	b111      	cbz	r1, 80176ca <_reclaim_reent+0x72>
 80176c4:	4620      	mov	r0, r4
 80176c6:	f000 f8d1 	bl	801786c <_free_r>
 80176ca:	6a23      	ldr	r3, [r4, #32]
 80176cc:	b1b3      	cbz	r3, 80176fc <_reclaim_reent+0xa4>
 80176ce:	4620      	mov	r0, r4
 80176d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80176d4:	4718      	bx	r3
 80176d6:	5949      	ldr	r1, [r1, r5]
 80176d8:	b941      	cbnz	r1, 80176ec <_reclaim_reent+0x94>
 80176da:	3504      	adds	r5, #4
 80176dc:	69e3      	ldr	r3, [r4, #28]
 80176de:	2d80      	cmp	r5, #128	; 0x80
 80176e0:	68d9      	ldr	r1, [r3, #12]
 80176e2:	d1f8      	bne.n	80176d6 <_reclaim_reent+0x7e>
 80176e4:	4620      	mov	r0, r4
 80176e6:	f000 f8c1 	bl	801786c <_free_r>
 80176ea:	e7c0      	b.n	801766e <_reclaim_reent+0x16>
 80176ec:	680e      	ldr	r6, [r1, #0]
 80176ee:	4620      	mov	r0, r4
 80176f0:	f000 f8bc 	bl	801786c <_free_r>
 80176f4:	4631      	mov	r1, r6
 80176f6:	e7ef      	b.n	80176d8 <_reclaim_reent+0x80>
 80176f8:	2500      	movs	r5, #0
 80176fa:	e7ef      	b.n	80176dc <_reclaim_reent+0x84>
 80176fc:	bd70      	pop	{r4, r5, r6, pc}
 80176fe:	bf00      	nop
 8017700:	200000d4 	.word	0x200000d4

08017704 <_lseek_r>:
 8017704:	b538      	push	{r3, r4, r5, lr}
 8017706:	4d07      	ldr	r5, [pc, #28]	; (8017724 <_lseek_r+0x20>)
 8017708:	4604      	mov	r4, r0
 801770a:	4608      	mov	r0, r1
 801770c:	4611      	mov	r1, r2
 801770e:	2200      	movs	r2, #0
 8017710:	602a      	str	r2, [r5, #0]
 8017712:	461a      	mov	r2, r3
 8017714:	f7eb fcc3 	bl	800309e <_lseek>
 8017718:	1c43      	adds	r3, r0, #1
 801771a:	d102      	bne.n	8017722 <_lseek_r+0x1e>
 801771c:	682b      	ldr	r3, [r5, #0]
 801771e:	b103      	cbz	r3, 8017722 <_lseek_r+0x1e>
 8017720:	6023      	str	r3, [r4, #0]
 8017722:	bd38      	pop	{r3, r4, r5, pc}
 8017724:	20009e54 	.word	0x20009e54

08017728 <_read_r>:
 8017728:	b538      	push	{r3, r4, r5, lr}
 801772a:	4d07      	ldr	r5, [pc, #28]	; (8017748 <_read_r+0x20>)
 801772c:	4604      	mov	r4, r0
 801772e:	4608      	mov	r0, r1
 8017730:	4611      	mov	r1, r2
 8017732:	2200      	movs	r2, #0
 8017734:	602a      	str	r2, [r5, #0]
 8017736:	461a      	mov	r2, r3
 8017738:	f7eb fcc2 	bl	80030c0 <_read>
 801773c:	1c43      	adds	r3, r0, #1
 801773e:	d102      	bne.n	8017746 <_read_r+0x1e>
 8017740:	682b      	ldr	r3, [r5, #0]
 8017742:	b103      	cbz	r3, 8017746 <_read_r+0x1e>
 8017744:	6023      	str	r3, [r4, #0]
 8017746:	bd38      	pop	{r3, r4, r5, pc}
 8017748:	20009e54 	.word	0x20009e54

0801774c <_sbrk_r>:
 801774c:	b538      	push	{r3, r4, r5, lr}
 801774e:	4d06      	ldr	r5, [pc, #24]	; (8017768 <_sbrk_r+0x1c>)
 8017750:	2300      	movs	r3, #0
 8017752:	4604      	mov	r4, r0
 8017754:	4608      	mov	r0, r1
 8017756:	602b      	str	r3, [r5, #0]
 8017758:	f7ec f95a 	bl	8003a10 <_sbrk>
 801775c:	1c43      	adds	r3, r0, #1
 801775e:	d102      	bne.n	8017766 <_sbrk_r+0x1a>
 8017760:	682b      	ldr	r3, [r5, #0]
 8017762:	b103      	cbz	r3, 8017766 <_sbrk_r+0x1a>
 8017764:	6023      	str	r3, [r4, #0]
 8017766:	bd38      	pop	{r3, r4, r5, pc}
 8017768:	20009e54 	.word	0x20009e54

0801776c <_write_r>:
 801776c:	b538      	push	{r3, r4, r5, lr}
 801776e:	4d07      	ldr	r5, [pc, #28]	; (801778c <_write_r+0x20>)
 8017770:	4604      	mov	r4, r0
 8017772:	4608      	mov	r0, r1
 8017774:	4611      	mov	r1, r2
 8017776:	2200      	movs	r2, #0
 8017778:	602a      	str	r2, [r5, #0]
 801777a:	461a      	mov	r2, r3
 801777c:	f7eb fc4c 	bl	8003018 <_write>
 8017780:	1c43      	adds	r3, r0, #1
 8017782:	d102      	bne.n	801778a <_write_r+0x1e>
 8017784:	682b      	ldr	r3, [r5, #0]
 8017786:	b103      	cbz	r3, 801778a <_write_r+0x1e>
 8017788:	6023      	str	r3, [r4, #0]
 801778a:	bd38      	pop	{r3, r4, r5, pc}
 801778c:	20009e54 	.word	0x20009e54

08017790 <__errno>:
 8017790:	4b01      	ldr	r3, [pc, #4]	; (8017798 <__errno+0x8>)
 8017792:	6818      	ldr	r0, [r3, #0]
 8017794:	4770      	bx	lr
 8017796:	bf00      	nop
 8017798:	200000d4 	.word	0x200000d4

0801779c <__libc_init_array>:
 801779c:	b570      	push	{r4, r5, r6, lr}
 801779e:	4d0d      	ldr	r5, [pc, #52]	; (80177d4 <__libc_init_array+0x38>)
 80177a0:	4c0d      	ldr	r4, [pc, #52]	; (80177d8 <__libc_init_array+0x3c>)
 80177a2:	1b64      	subs	r4, r4, r5
 80177a4:	10a4      	asrs	r4, r4, #2
 80177a6:	2600      	movs	r6, #0
 80177a8:	42a6      	cmp	r6, r4
 80177aa:	d109      	bne.n	80177c0 <__libc_init_array+0x24>
 80177ac:	4d0b      	ldr	r5, [pc, #44]	; (80177dc <__libc_init_array+0x40>)
 80177ae:	4c0c      	ldr	r4, [pc, #48]	; (80177e0 <__libc_init_array+0x44>)
 80177b0:	f000 fe88 	bl	80184c4 <_init>
 80177b4:	1b64      	subs	r4, r4, r5
 80177b6:	10a4      	asrs	r4, r4, #2
 80177b8:	2600      	movs	r6, #0
 80177ba:	42a6      	cmp	r6, r4
 80177bc:	d105      	bne.n	80177ca <__libc_init_array+0x2e>
 80177be:	bd70      	pop	{r4, r5, r6, pc}
 80177c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80177c4:	4798      	blx	r3
 80177c6:	3601      	adds	r6, #1
 80177c8:	e7ee      	b.n	80177a8 <__libc_init_array+0xc>
 80177ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80177ce:	4798      	blx	r3
 80177d0:	3601      	adds	r6, #1
 80177d2:	e7f2      	b.n	80177ba <__libc_init_array+0x1e>
 80177d4:	0801920c 	.word	0x0801920c
 80177d8:	0801920c 	.word	0x0801920c
 80177dc:	0801920c 	.word	0x0801920c
 80177e0:	08019210 	.word	0x08019210

080177e4 <__retarget_lock_init_recursive>:
 80177e4:	4770      	bx	lr

080177e6 <__retarget_lock_acquire_recursive>:
 80177e6:	4770      	bx	lr

080177e8 <__retarget_lock_release_recursive>:
 80177e8:	4770      	bx	lr

080177ea <strcpy>:
 80177ea:	4603      	mov	r3, r0
 80177ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 80177f0:	f803 2b01 	strb.w	r2, [r3], #1
 80177f4:	2a00      	cmp	r2, #0
 80177f6:	d1f9      	bne.n	80177ec <strcpy+0x2>
 80177f8:	4770      	bx	lr

080177fa <memcpy>:
 80177fa:	440a      	add	r2, r1
 80177fc:	4291      	cmp	r1, r2
 80177fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8017802:	d100      	bne.n	8017806 <memcpy+0xc>
 8017804:	4770      	bx	lr
 8017806:	b510      	push	{r4, lr}
 8017808:	f811 4b01 	ldrb.w	r4, [r1], #1
 801780c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017810:	4291      	cmp	r1, r2
 8017812:	d1f9      	bne.n	8017808 <memcpy+0xe>
 8017814:	bd10      	pop	{r4, pc}
	...

08017818 <__assert_func>:
 8017818:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801781a:	4614      	mov	r4, r2
 801781c:	461a      	mov	r2, r3
 801781e:	4b09      	ldr	r3, [pc, #36]	; (8017844 <__assert_func+0x2c>)
 8017820:	681b      	ldr	r3, [r3, #0]
 8017822:	4605      	mov	r5, r0
 8017824:	68d8      	ldr	r0, [r3, #12]
 8017826:	b14c      	cbz	r4, 801783c <__assert_func+0x24>
 8017828:	4b07      	ldr	r3, [pc, #28]	; (8017848 <__assert_func+0x30>)
 801782a:	9100      	str	r1, [sp, #0]
 801782c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017830:	4906      	ldr	r1, [pc, #24]	; (801784c <__assert_func+0x34>)
 8017832:	462b      	mov	r3, r5
 8017834:	f000 fd48 	bl	80182c8 <fiprintf>
 8017838:	f000 fdf6 	bl	8018428 <abort>
 801783c:	4b04      	ldr	r3, [pc, #16]	; (8017850 <__assert_func+0x38>)
 801783e:	461c      	mov	r4, r3
 8017840:	e7f3      	b.n	801782a <__assert_func+0x12>
 8017842:	bf00      	nop
 8017844:	200000d4 	.word	0x200000d4
 8017848:	08019194 	.word	0x08019194
 801784c:	080191a1 	.word	0x080191a1
 8017850:	080191cf 	.word	0x080191cf

08017854 <__env_lock>:
 8017854:	4801      	ldr	r0, [pc, #4]	; (801785c <__env_lock+0x8>)
 8017856:	f7ff bfc6 	b.w	80177e6 <__retarget_lock_acquire_recursive>
 801785a:	bf00      	nop
 801785c:	20009e58 	.word	0x20009e58

08017860 <__env_unlock>:
 8017860:	4801      	ldr	r0, [pc, #4]	; (8017868 <__env_unlock+0x8>)
 8017862:	f7ff bfc1 	b.w	80177e8 <__retarget_lock_release_recursive>
 8017866:	bf00      	nop
 8017868:	20009e58 	.word	0x20009e58

0801786c <_free_r>:
 801786c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801786e:	2900      	cmp	r1, #0
 8017870:	d044      	beq.n	80178fc <_free_r+0x90>
 8017872:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017876:	9001      	str	r0, [sp, #4]
 8017878:	2b00      	cmp	r3, #0
 801787a:	f1a1 0404 	sub.w	r4, r1, #4
 801787e:	bfb8      	it	lt
 8017880:	18e4      	addlt	r4, r4, r3
 8017882:	f7ff fa87 	bl	8016d94 <__malloc_lock>
 8017886:	4a1e      	ldr	r2, [pc, #120]	; (8017900 <_free_r+0x94>)
 8017888:	9801      	ldr	r0, [sp, #4]
 801788a:	6813      	ldr	r3, [r2, #0]
 801788c:	b933      	cbnz	r3, 801789c <_free_r+0x30>
 801788e:	6063      	str	r3, [r4, #4]
 8017890:	6014      	str	r4, [r2, #0]
 8017892:	b003      	add	sp, #12
 8017894:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017898:	f7ff ba82 	b.w	8016da0 <__malloc_unlock>
 801789c:	42a3      	cmp	r3, r4
 801789e:	d908      	bls.n	80178b2 <_free_r+0x46>
 80178a0:	6825      	ldr	r5, [r4, #0]
 80178a2:	1961      	adds	r1, r4, r5
 80178a4:	428b      	cmp	r3, r1
 80178a6:	bf01      	itttt	eq
 80178a8:	6819      	ldreq	r1, [r3, #0]
 80178aa:	685b      	ldreq	r3, [r3, #4]
 80178ac:	1949      	addeq	r1, r1, r5
 80178ae:	6021      	streq	r1, [r4, #0]
 80178b0:	e7ed      	b.n	801788e <_free_r+0x22>
 80178b2:	461a      	mov	r2, r3
 80178b4:	685b      	ldr	r3, [r3, #4]
 80178b6:	b10b      	cbz	r3, 80178bc <_free_r+0x50>
 80178b8:	42a3      	cmp	r3, r4
 80178ba:	d9fa      	bls.n	80178b2 <_free_r+0x46>
 80178bc:	6811      	ldr	r1, [r2, #0]
 80178be:	1855      	adds	r5, r2, r1
 80178c0:	42a5      	cmp	r5, r4
 80178c2:	d10b      	bne.n	80178dc <_free_r+0x70>
 80178c4:	6824      	ldr	r4, [r4, #0]
 80178c6:	4421      	add	r1, r4
 80178c8:	1854      	adds	r4, r2, r1
 80178ca:	42a3      	cmp	r3, r4
 80178cc:	6011      	str	r1, [r2, #0]
 80178ce:	d1e0      	bne.n	8017892 <_free_r+0x26>
 80178d0:	681c      	ldr	r4, [r3, #0]
 80178d2:	685b      	ldr	r3, [r3, #4]
 80178d4:	6053      	str	r3, [r2, #4]
 80178d6:	440c      	add	r4, r1
 80178d8:	6014      	str	r4, [r2, #0]
 80178da:	e7da      	b.n	8017892 <_free_r+0x26>
 80178dc:	d902      	bls.n	80178e4 <_free_r+0x78>
 80178de:	230c      	movs	r3, #12
 80178e0:	6003      	str	r3, [r0, #0]
 80178e2:	e7d6      	b.n	8017892 <_free_r+0x26>
 80178e4:	6825      	ldr	r5, [r4, #0]
 80178e6:	1961      	adds	r1, r4, r5
 80178e8:	428b      	cmp	r3, r1
 80178ea:	bf04      	itt	eq
 80178ec:	6819      	ldreq	r1, [r3, #0]
 80178ee:	685b      	ldreq	r3, [r3, #4]
 80178f0:	6063      	str	r3, [r4, #4]
 80178f2:	bf04      	itt	eq
 80178f4:	1949      	addeq	r1, r1, r5
 80178f6:	6021      	streq	r1, [r4, #0]
 80178f8:	6054      	str	r4, [r2, #4]
 80178fa:	e7ca      	b.n	8017892 <_free_r+0x26>
 80178fc:	b003      	add	sp, #12
 80178fe:	bd30      	pop	{r4, r5, pc}
 8017900:	20009d10 	.word	0x20009d10

08017904 <_malloc_usable_size_r>:
 8017904:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017908:	1f18      	subs	r0, r3, #4
 801790a:	2b00      	cmp	r3, #0
 801790c:	bfbc      	itt	lt
 801790e:	580b      	ldrlt	r3, [r1, r0]
 8017910:	18c0      	addlt	r0, r0, r3
 8017912:	4770      	bx	lr

08017914 <__ssputs_r>:
 8017914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017918:	688e      	ldr	r6, [r1, #8]
 801791a:	461f      	mov	r7, r3
 801791c:	42be      	cmp	r6, r7
 801791e:	680b      	ldr	r3, [r1, #0]
 8017920:	4682      	mov	sl, r0
 8017922:	460c      	mov	r4, r1
 8017924:	4690      	mov	r8, r2
 8017926:	d82c      	bhi.n	8017982 <__ssputs_r+0x6e>
 8017928:	898a      	ldrh	r2, [r1, #12]
 801792a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801792e:	d026      	beq.n	801797e <__ssputs_r+0x6a>
 8017930:	6965      	ldr	r5, [r4, #20]
 8017932:	6909      	ldr	r1, [r1, #16]
 8017934:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017938:	eba3 0901 	sub.w	r9, r3, r1
 801793c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017940:	1c7b      	adds	r3, r7, #1
 8017942:	444b      	add	r3, r9
 8017944:	106d      	asrs	r5, r5, #1
 8017946:	429d      	cmp	r5, r3
 8017948:	bf38      	it	cc
 801794a:	461d      	movcc	r5, r3
 801794c:	0553      	lsls	r3, r2, #21
 801794e:	d527      	bpl.n	80179a0 <__ssputs_r+0x8c>
 8017950:	4629      	mov	r1, r5
 8017952:	f7ff f99f 	bl	8016c94 <_malloc_r>
 8017956:	4606      	mov	r6, r0
 8017958:	b360      	cbz	r0, 80179b4 <__ssputs_r+0xa0>
 801795a:	6921      	ldr	r1, [r4, #16]
 801795c:	464a      	mov	r2, r9
 801795e:	f7ff ff4c 	bl	80177fa <memcpy>
 8017962:	89a3      	ldrh	r3, [r4, #12]
 8017964:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801796c:	81a3      	strh	r3, [r4, #12]
 801796e:	6126      	str	r6, [r4, #16]
 8017970:	6165      	str	r5, [r4, #20]
 8017972:	444e      	add	r6, r9
 8017974:	eba5 0509 	sub.w	r5, r5, r9
 8017978:	6026      	str	r6, [r4, #0]
 801797a:	60a5      	str	r5, [r4, #8]
 801797c:	463e      	mov	r6, r7
 801797e:	42be      	cmp	r6, r7
 8017980:	d900      	bls.n	8017984 <__ssputs_r+0x70>
 8017982:	463e      	mov	r6, r7
 8017984:	6820      	ldr	r0, [r4, #0]
 8017986:	4632      	mov	r2, r6
 8017988:	4641      	mov	r1, r8
 801798a:	f000 fd11 	bl	80183b0 <memmove>
 801798e:	68a3      	ldr	r3, [r4, #8]
 8017990:	1b9b      	subs	r3, r3, r6
 8017992:	60a3      	str	r3, [r4, #8]
 8017994:	6823      	ldr	r3, [r4, #0]
 8017996:	4433      	add	r3, r6
 8017998:	6023      	str	r3, [r4, #0]
 801799a:	2000      	movs	r0, #0
 801799c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80179a0:	462a      	mov	r2, r5
 80179a2:	f7ff fa77 	bl	8016e94 <_realloc_r>
 80179a6:	4606      	mov	r6, r0
 80179a8:	2800      	cmp	r0, #0
 80179aa:	d1e0      	bne.n	801796e <__ssputs_r+0x5a>
 80179ac:	6921      	ldr	r1, [r4, #16]
 80179ae:	4650      	mov	r0, sl
 80179b0:	f7ff ff5c 	bl	801786c <_free_r>
 80179b4:	230c      	movs	r3, #12
 80179b6:	f8ca 3000 	str.w	r3, [sl]
 80179ba:	89a3      	ldrh	r3, [r4, #12]
 80179bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80179c0:	81a3      	strh	r3, [r4, #12]
 80179c2:	f04f 30ff 	mov.w	r0, #4294967295
 80179c6:	e7e9      	b.n	801799c <__ssputs_r+0x88>

080179c8 <_svfiprintf_r>:
 80179c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179cc:	4698      	mov	r8, r3
 80179ce:	898b      	ldrh	r3, [r1, #12]
 80179d0:	061b      	lsls	r3, r3, #24
 80179d2:	b09d      	sub	sp, #116	; 0x74
 80179d4:	4607      	mov	r7, r0
 80179d6:	460d      	mov	r5, r1
 80179d8:	4614      	mov	r4, r2
 80179da:	d50e      	bpl.n	80179fa <_svfiprintf_r+0x32>
 80179dc:	690b      	ldr	r3, [r1, #16]
 80179de:	b963      	cbnz	r3, 80179fa <_svfiprintf_r+0x32>
 80179e0:	2140      	movs	r1, #64	; 0x40
 80179e2:	f7ff f957 	bl	8016c94 <_malloc_r>
 80179e6:	6028      	str	r0, [r5, #0]
 80179e8:	6128      	str	r0, [r5, #16]
 80179ea:	b920      	cbnz	r0, 80179f6 <_svfiprintf_r+0x2e>
 80179ec:	230c      	movs	r3, #12
 80179ee:	603b      	str	r3, [r7, #0]
 80179f0:	f04f 30ff 	mov.w	r0, #4294967295
 80179f4:	e0d0      	b.n	8017b98 <_svfiprintf_r+0x1d0>
 80179f6:	2340      	movs	r3, #64	; 0x40
 80179f8:	616b      	str	r3, [r5, #20]
 80179fa:	2300      	movs	r3, #0
 80179fc:	9309      	str	r3, [sp, #36]	; 0x24
 80179fe:	2320      	movs	r3, #32
 8017a00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017a04:	f8cd 800c 	str.w	r8, [sp, #12]
 8017a08:	2330      	movs	r3, #48	; 0x30
 8017a0a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8017bb0 <_svfiprintf_r+0x1e8>
 8017a0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017a12:	f04f 0901 	mov.w	r9, #1
 8017a16:	4623      	mov	r3, r4
 8017a18:	469a      	mov	sl, r3
 8017a1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017a1e:	b10a      	cbz	r2, 8017a24 <_svfiprintf_r+0x5c>
 8017a20:	2a25      	cmp	r2, #37	; 0x25
 8017a22:	d1f9      	bne.n	8017a18 <_svfiprintf_r+0x50>
 8017a24:	ebba 0b04 	subs.w	fp, sl, r4
 8017a28:	d00b      	beq.n	8017a42 <_svfiprintf_r+0x7a>
 8017a2a:	465b      	mov	r3, fp
 8017a2c:	4622      	mov	r2, r4
 8017a2e:	4629      	mov	r1, r5
 8017a30:	4638      	mov	r0, r7
 8017a32:	f7ff ff6f 	bl	8017914 <__ssputs_r>
 8017a36:	3001      	adds	r0, #1
 8017a38:	f000 80a9 	beq.w	8017b8e <_svfiprintf_r+0x1c6>
 8017a3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017a3e:	445a      	add	r2, fp
 8017a40:	9209      	str	r2, [sp, #36]	; 0x24
 8017a42:	f89a 3000 	ldrb.w	r3, [sl]
 8017a46:	2b00      	cmp	r3, #0
 8017a48:	f000 80a1 	beq.w	8017b8e <_svfiprintf_r+0x1c6>
 8017a4c:	2300      	movs	r3, #0
 8017a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8017a52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017a56:	f10a 0a01 	add.w	sl, sl, #1
 8017a5a:	9304      	str	r3, [sp, #16]
 8017a5c:	9307      	str	r3, [sp, #28]
 8017a5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017a62:	931a      	str	r3, [sp, #104]	; 0x68
 8017a64:	4654      	mov	r4, sl
 8017a66:	2205      	movs	r2, #5
 8017a68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017a6c:	4850      	ldr	r0, [pc, #320]	; (8017bb0 <_svfiprintf_r+0x1e8>)
 8017a6e:	f7e8 fbcf 	bl	8000210 <memchr>
 8017a72:	9a04      	ldr	r2, [sp, #16]
 8017a74:	b9d8      	cbnz	r0, 8017aae <_svfiprintf_r+0xe6>
 8017a76:	06d0      	lsls	r0, r2, #27
 8017a78:	bf44      	itt	mi
 8017a7a:	2320      	movmi	r3, #32
 8017a7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017a80:	0711      	lsls	r1, r2, #28
 8017a82:	bf44      	itt	mi
 8017a84:	232b      	movmi	r3, #43	; 0x2b
 8017a86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017a8a:	f89a 3000 	ldrb.w	r3, [sl]
 8017a8e:	2b2a      	cmp	r3, #42	; 0x2a
 8017a90:	d015      	beq.n	8017abe <_svfiprintf_r+0xf6>
 8017a92:	9a07      	ldr	r2, [sp, #28]
 8017a94:	4654      	mov	r4, sl
 8017a96:	2000      	movs	r0, #0
 8017a98:	f04f 0c0a 	mov.w	ip, #10
 8017a9c:	4621      	mov	r1, r4
 8017a9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017aa2:	3b30      	subs	r3, #48	; 0x30
 8017aa4:	2b09      	cmp	r3, #9
 8017aa6:	d94d      	bls.n	8017b44 <_svfiprintf_r+0x17c>
 8017aa8:	b1b0      	cbz	r0, 8017ad8 <_svfiprintf_r+0x110>
 8017aaa:	9207      	str	r2, [sp, #28]
 8017aac:	e014      	b.n	8017ad8 <_svfiprintf_r+0x110>
 8017aae:	eba0 0308 	sub.w	r3, r0, r8
 8017ab2:	fa09 f303 	lsl.w	r3, r9, r3
 8017ab6:	4313      	orrs	r3, r2
 8017ab8:	9304      	str	r3, [sp, #16]
 8017aba:	46a2      	mov	sl, r4
 8017abc:	e7d2      	b.n	8017a64 <_svfiprintf_r+0x9c>
 8017abe:	9b03      	ldr	r3, [sp, #12]
 8017ac0:	1d19      	adds	r1, r3, #4
 8017ac2:	681b      	ldr	r3, [r3, #0]
 8017ac4:	9103      	str	r1, [sp, #12]
 8017ac6:	2b00      	cmp	r3, #0
 8017ac8:	bfbb      	ittet	lt
 8017aca:	425b      	neglt	r3, r3
 8017acc:	f042 0202 	orrlt.w	r2, r2, #2
 8017ad0:	9307      	strge	r3, [sp, #28]
 8017ad2:	9307      	strlt	r3, [sp, #28]
 8017ad4:	bfb8      	it	lt
 8017ad6:	9204      	strlt	r2, [sp, #16]
 8017ad8:	7823      	ldrb	r3, [r4, #0]
 8017ada:	2b2e      	cmp	r3, #46	; 0x2e
 8017adc:	d10c      	bne.n	8017af8 <_svfiprintf_r+0x130>
 8017ade:	7863      	ldrb	r3, [r4, #1]
 8017ae0:	2b2a      	cmp	r3, #42	; 0x2a
 8017ae2:	d134      	bne.n	8017b4e <_svfiprintf_r+0x186>
 8017ae4:	9b03      	ldr	r3, [sp, #12]
 8017ae6:	1d1a      	adds	r2, r3, #4
 8017ae8:	681b      	ldr	r3, [r3, #0]
 8017aea:	9203      	str	r2, [sp, #12]
 8017aec:	2b00      	cmp	r3, #0
 8017aee:	bfb8      	it	lt
 8017af0:	f04f 33ff 	movlt.w	r3, #4294967295
 8017af4:	3402      	adds	r4, #2
 8017af6:	9305      	str	r3, [sp, #20]
 8017af8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8017bc0 <_svfiprintf_r+0x1f8>
 8017afc:	7821      	ldrb	r1, [r4, #0]
 8017afe:	2203      	movs	r2, #3
 8017b00:	4650      	mov	r0, sl
 8017b02:	f7e8 fb85 	bl	8000210 <memchr>
 8017b06:	b138      	cbz	r0, 8017b18 <_svfiprintf_r+0x150>
 8017b08:	9b04      	ldr	r3, [sp, #16]
 8017b0a:	eba0 000a 	sub.w	r0, r0, sl
 8017b0e:	2240      	movs	r2, #64	; 0x40
 8017b10:	4082      	lsls	r2, r0
 8017b12:	4313      	orrs	r3, r2
 8017b14:	3401      	adds	r4, #1
 8017b16:	9304      	str	r3, [sp, #16]
 8017b18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017b1c:	4825      	ldr	r0, [pc, #148]	; (8017bb4 <_svfiprintf_r+0x1ec>)
 8017b1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017b22:	2206      	movs	r2, #6
 8017b24:	f7e8 fb74 	bl	8000210 <memchr>
 8017b28:	2800      	cmp	r0, #0
 8017b2a:	d038      	beq.n	8017b9e <_svfiprintf_r+0x1d6>
 8017b2c:	4b22      	ldr	r3, [pc, #136]	; (8017bb8 <_svfiprintf_r+0x1f0>)
 8017b2e:	bb1b      	cbnz	r3, 8017b78 <_svfiprintf_r+0x1b0>
 8017b30:	9b03      	ldr	r3, [sp, #12]
 8017b32:	3307      	adds	r3, #7
 8017b34:	f023 0307 	bic.w	r3, r3, #7
 8017b38:	3308      	adds	r3, #8
 8017b3a:	9303      	str	r3, [sp, #12]
 8017b3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b3e:	4433      	add	r3, r6
 8017b40:	9309      	str	r3, [sp, #36]	; 0x24
 8017b42:	e768      	b.n	8017a16 <_svfiprintf_r+0x4e>
 8017b44:	fb0c 3202 	mla	r2, ip, r2, r3
 8017b48:	460c      	mov	r4, r1
 8017b4a:	2001      	movs	r0, #1
 8017b4c:	e7a6      	b.n	8017a9c <_svfiprintf_r+0xd4>
 8017b4e:	2300      	movs	r3, #0
 8017b50:	3401      	adds	r4, #1
 8017b52:	9305      	str	r3, [sp, #20]
 8017b54:	4619      	mov	r1, r3
 8017b56:	f04f 0c0a 	mov.w	ip, #10
 8017b5a:	4620      	mov	r0, r4
 8017b5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017b60:	3a30      	subs	r2, #48	; 0x30
 8017b62:	2a09      	cmp	r2, #9
 8017b64:	d903      	bls.n	8017b6e <_svfiprintf_r+0x1a6>
 8017b66:	2b00      	cmp	r3, #0
 8017b68:	d0c6      	beq.n	8017af8 <_svfiprintf_r+0x130>
 8017b6a:	9105      	str	r1, [sp, #20]
 8017b6c:	e7c4      	b.n	8017af8 <_svfiprintf_r+0x130>
 8017b6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8017b72:	4604      	mov	r4, r0
 8017b74:	2301      	movs	r3, #1
 8017b76:	e7f0      	b.n	8017b5a <_svfiprintf_r+0x192>
 8017b78:	ab03      	add	r3, sp, #12
 8017b7a:	9300      	str	r3, [sp, #0]
 8017b7c:	462a      	mov	r2, r5
 8017b7e:	4b0f      	ldr	r3, [pc, #60]	; (8017bbc <_svfiprintf_r+0x1f4>)
 8017b80:	a904      	add	r1, sp, #16
 8017b82:	4638      	mov	r0, r7
 8017b84:	f3af 8000 	nop.w
 8017b88:	1c42      	adds	r2, r0, #1
 8017b8a:	4606      	mov	r6, r0
 8017b8c:	d1d6      	bne.n	8017b3c <_svfiprintf_r+0x174>
 8017b8e:	89ab      	ldrh	r3, [r5, #12]
 8017b90:	065b      	lsls	r3, r3, #25
 8017b92:	f53f af2d 	bmi.w	80179f0 <_svfiprintf_r+0x28>
 8017b96:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017b98:	b01d      	add	sp, #116	; 0x74
 8017b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b9e:	ab03      	add	r3, sp, #12
 8017ba0:	9300      	str	r3, [sp, #0]
 8017ba2:	462a      	mov	r2, r5
 8017ba4:	4b05      	ldr	r3, [pc, #20]	; (8017bbc <_svfiprintf_r+0x1f4>)
 8017ba6:	a904      	add	r1, sp, #16
 8017ba8:	4638      	mov	r0, r7
 8017baa:	f000 f9bd 	bl	8017f28 <_printf_i>
 8017bae:	e7eb      	b.n	8017b88 <_svfiprintf_r+0x1c0>
 8017bb0:	080191d0 	.word	0x080191d0
 8017bb4:	080191da 	.word	0x080191da
 8017bb8:	00000000 	.word	0x00000000
 8017bbc:	08017915 	.word	0x08017915
 8017bc0:	080191d6 	.word	0x080191d6

08017bc4 <__sfputc_r>:
 8017bc4:	6893      	ldr	r3, [r2, #8]
 8017bc6:	3b01      	subs	r3, #1
 8017bc8:	2b00      	cmp	r3, #0
 8017bca:	b410      	push	{r4}
 8017bcc:	6093      	str	r3, [r2, #8]
 8017bce:	da08      	bge.n	8017be2 <__sfputc_r+0x1e>
 8017bd0:	6994      	ldr	r4, [r2, #24]
 8017bd2:	42a3      	cmp	r3, r4
 8017bd4:	db01      	blt.n	8017bda <__sfputc_r+0x16>
 8017bd6:	290a      	cmp	r1, #10
 8017bd8:	d103      	bne.n	8017be2 <__sfputc_r+0x1e>
 8017bda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017bde:	f7ff bc57 	b.w	8017490 <__swbuf_r>
 8017be2:	6813      	ldr	r3, [r2, #0]
 8017be4:	1c58      	adds	r0, r3, #1
 8017be6:	6010      	str	r0, [r2, #0]
 8017be8:	7019      	strb	r1, [r3, #0]
 8017bea:	4608      	mov	r0, r1
 8017bec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017bf0:	4770      	bx	lr

08017bf2 <__sfputs_r>:
 8017bf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017bf4:	4606      	mov	r6, r0
 8017bf6:	460f      	mov	r7, r1
 8017bf8:	4614      	mov	r4, r2
 8017bfa:	18d5      	adds	r5, r2, r3
 8017bfc:	42ac      	cmp	r4, r5
 8017bfe:	d101      	bne.n	8017c04 <__sfputs_r+0x12>
 8017c00:	2000      	movs	r0, #0
 8017c02:	e007      	b.n	8017c14 <__sfputs_r+0x22>
 8017c04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017c08:	463a      	mov	r2, r7
 8017c0a:	4630      	mov	r0, r6
 8017c0c:	f7ff ffda 	bl	8017bc4 <__sfputc_r>
 8017c10:	1c43      	adds	r3, r0, #1
 8017c12:	d1f3      	bne.n	8017bfc <__sfputs_r+0xa>
 8017c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017c18 <_vfiprintf_r>:
 8017c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c1c:	460d      	mov	r5, r1
 8017c1e:	b09d      	sub	sp, #116	; 0x74
 8017c20:	4614      	mov	r4, r2
 8017c22:	4698      	mov	r8, r3
 8017c24:	4606      	mov	r6, r0
 8017c26:	b118      	cbz	r0, 8017c30 <_vfiprintf_r+0x18>
 8017c28:	6a03      	ldr	r3, [r0, #32]
 8017c2a:	b90b      	cbnz	r3, 8017c30 <_vfiprintf_r+0x18>
 8017c2c:	f7ff fa6a 	bl	8017104 <__sinit>
 8017c30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017c32:	07d9      	lsls	r1, r3, #31
 8017c34:	d405      	bmi.n	8017c42 <_vfiprintf_r+0x2a>
 8017c36:	89ab      	ldrh	r3, [r5, #12]
 8017c38:	059a      	lsls	r2, r3, #22
 8017c3a:	d402      	bmi.n	8017c42 <_vfiprintf_r+0x2a>
 8017c3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017c3e:	f7ff fdd2 	bl	80177e6 <__retarget_lock_acquire_recursive>
 8017c42:	89ab      	ldrh	r3, [r5, #12]
 8017c44:	071b      	lsls	r3, r3, #28
 8017c46:	d501      	bpl.n	8017c4c <_vfiprintf_r+0x34>
 8017c48:	692b      	ldr	r3, [r5, #16]
 8017c4a:	b99b      	cbnz	r3, 8017c74 <_vfiprintf_r+0x5c>
 8017c4c:	4629      	mov	r1, r5
 8017c4e:	4630      	mov	r0, r6
 8017c50:	f7ff fc5c 	bl	801750c <__swsetup_r>
 8017c54:	b170      	cbz	r0, 8017c74 <_vfiprintf_r+0x5c>
 8017c56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017c58:	07dc      	lsls	r4, r3, #31
 8017c5a:	d504      	bpl.n	8017c66 <_vfiprintf_r+0x4e>
 8017c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8017c60:	b01d      	add	sp, #116	; 0x74
 8017c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c66:	89ab      	ldrh	r3, [r5, #12]
 8017c68:	0598      	lsls	r0, r3, #22
 8017c6a:	d4f7      	bmi.n	8017c5c <_vfiprintf_r+0x44>
 8017c6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017c6e:	f7ff fdbb 	bl	80177e8 <__retarget_lock_release_recursive>
 8017c72:	e7f3      	b.n	8017c5c <_vfiprintf_r+0x44>
 8017c74:	2300      	movs	r3, #0
 8017c76:	9309      	str	r3, [sp, #36]	; 0x24
 8017c78:	2320      	movs	r3, #32
 8017c7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017c7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8017c82:	2330      	movs	r3, #48	; 0x30
 8017c84:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8017e38 <_vfiprintf_r+0x220>
 8017c88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017c8c:	f04f 0901 	mov.w	r9, #1
 8017c90:	4623      	mov	r3, r4
 8017c92:	469a      	mov	sl, r3
 8017c94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017c98:	b10a      	cbz	r2, 8017c9e <_vfiprintf_r+0x86>
 8017c9a:	2a25      	cmp	r2, #37	; 0x25
 8017c9c:	d1f9      	bne.n	8017c92 <_vfiprintf_r+0x7a>
 8017c9e:	ebba 0b04 	subs.w	fp, sl, r4
 8017ca2:	d00b      	beq.n	8017cbc <_vfiprintf_r+0xa4>
 8017ca4:	465b      	mov	r3, fp
 8017ca6:	4622      	mov	r2, r4
 8017ca8:	4629      	mov	r1, r5
 8017caa:	4630      	mov	r0, r6
 8017cac:	f7ff ffa1 	bl	8017bf2 <__sfputs_r>
 8017cb0:	3001      	adds	r0, #1
 8017cb2:	f000 80a9 	beq.w	8017e08 <_vfiprintf_r+0x1f0>
 8017cb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017cb8:	445a      	add	r2, fp
 8017cba:	9209      	str	r2, [sp, #36]	; 0x24
 8017cbc:	f89a 3000 	ldrb.w	r3, [sl]
 8017cc0:	2b00      	cmp	r3, #0
 8017cc2:	f000 80a1 	beq.w	8017e08 <_vfiprintf_r+0x1f0>
 8017cc6:	2300      	movs	r3, #0
 8017cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8017ccc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017cd0:	f10a 0a01 	add.w	sl, sl, #1
 8017cd4:	9304      	str	r3, [sp, #16]
 8017cd6:	9307      	str	r3, [sp, #28]
 8017cd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017cdc:	931a      	str	r3, [sp, #104]	; 0x68
 8017cde:	4654      	mov	r4, sl
 8017ce0:	2205      	movs	r2, #5
 8017ce2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017ce6:	4854      	ldr	r0, [pc, #336]	; (8017e38 <_vfiprintf_r+0x220>)
 8017ce8:	f7e8 fa92 	bl	8000210 <memchr>
 8017cec:	9a04      	ldr	r2, [sp, #16]
 8017cee:	b9d8      	cbnz	r0, 8017d28 <_vfiprintf_r+0x110>
 8017cf0:	06d1      	lsls	r1, r2, #27
 8017cf2:	bf44      	itt	mi
 8017cf4:	2320      	movmi	r3, #32
 8017cf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017cfa:	0713      	lsls	r3, r2, #28
 8017cfc:	bf44      	itt	mi
 8017cfe:	232b      	movmi	r3, #43	; 0x2b
 8017d00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017d04:	f89a 3000 	ldrb.w	r3, [sl]
 8017d08:	2b2a      	cmp	r3, #42	; 0x2a
 8017d0a:	d015      	beq.n	8017d38 <_vfiprintf_r+0x120>
 8017d0c:	9a07      	ldr	r2, [sp, #28]
 8017d0e:	4654      	mov	r4, sl
 8017d10:	2000      	movs	r0, #0
 8017d12:	f04f 0c0a 	mov.w	ip, #10
 8017d16:	4621      	mov	r1, r4
 8017d18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017d1c:	3b30      	subs	r3, #48	; 0x30
 8017d1e:	2b09      	cmp	r3, #9
 8017d20:	d94d      	bls.n	8017dbe <_vfiprintf_r+0x1a6>
 8017d22:	b1b0      	cbz	r0, 8017d52 <_vfiprintf_r+0x13a>
 8017d24:	9207      	str	r2, [sp, #28]
 8017d26:	e014      	b.n	8017d52 <_vfiprintf_r+0x13a>
 8017d28:	eba0 0308 	sub.w	r3, r0, r8
 8017d2c:	fa09 f303 	lsl.w	r3, r9, r3
 8017d30:	4313      	orrs	r3, r2
 8017d32:	9304      	str	r3, [sp, #16]
 8017d34:	46a2      	mov	sl, r4
 8017d36:	e7d2      	b.n	8017cde <_vfiprintf_r+0xc6>
 8017d38:	9b03      	ldr	r3, [sp, #12]
 8017d3a:	1d19      	adds	r1, r3, #4
 8017d3c:	681b      	ldr	r3, [r3, #0]
 8017d3e:	9103      	str	r1, [sp, #12]
 8017d40:	2b00      	cmp	r3, #0
 8017d42:	bfbb      	ittet	lt
 8017d44:	425b      	neglt	r3, r3
 8017d46:	f042 0202 	orrlt.w	r2, r2, #2
 8017d4a:	9307      	strge	r3, [sp, #28]
 8017d4c:	9307      	strlt	r3, [sp, #28]
 8017d4e:	bfb8      	it	lt
 8017d50:	9204      	strlt	r2, [sp, #16]
 8017d52:	7823      	ldrb	r3, [r4, #0]
 8017d54:	2b2e      	cmp	r3, #46	; 0x2e
 8017d56:	d10c      	bne.n	8017d72 <_vfiprintf_r+0x15a>
 8017d58:	7863      	ldrb	r3, [r4, #1]
 8017d5a:	2b2a      	cmp	r3, #42	; 0x2a
 8017d5c:	d134      	bne.n	8017dc8 <_vfiprintf_r+0x1b0>
 8017d5e:	9b03      	ldr	r3, [sp, #12]
 8017d60:	1d1a      	adds	r2, r3, #4
 8017d62:	681b      	ldr	r3, [r3, #0]
 8017d64:	9203      	str	r2, [sp, #12]
 8017d66:	2b00      	cmp	r3, #0
 8017d68:	bfb8      	it	lt
 8017d6a:	f04f 33ff 	movlt.w	r3, #4294967295
 8017d6e:	3402      	adds	r4, #2
 8017d70:	9305      	str	r3, [sp, #20]
 8017d72:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8017e48 <_vfiprintf_r+0x230>
 8017d76:	7821      	ldrb	r1, [r4, #0]
 8017d78:	2203      	movs	r2, #3
 8017d7a:	4650      	mov	r0, sl
 8017d7c:	f7e8 fa48 	bl	8000210 <memchr>
 8017d80:	b138      	cbz	r0, 8017d92 <_vfiprintf_r+0x17a>
 8017d82:	9b04      	ldr	r3, [sp, #16]
 8017d84:	eba0 000a 	sub.w	r0, r0, sl
 8017d88:	2240      	movs	r2, #64	; 0x40
 8017d8a:	4082      	lsls	r2, r0
 8017d8c:	4313      	orrs	r3, r2
 8017d8e:	3401      	adds	r4, #1
 8017d90:	9304      	str	r3, [sp, #16]
 8017d92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017d96:	4829      	ldr	r0, [pc, #164]	; (8017e3c <_vfiprintf_r+0x224>)
 8017d98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017d9c:	2206      	movs	r2, #6
 8017d9e:	f7e8 fa37 	bl	8000210 <memchr>
 8017da2:	2800      	cmp	r0, #0
 8017da4:	d03f      	beq.n	8017e26 <_vfiprintf_r+0x20e>
 8017da6:	4b26      	ldr	r3, [pc, #152]	; (8017e40 <_vfiprintf_r+0x228>)
 8017da8:	bb1b      	cbnz	r3, 8017df2 <_vfiprintf_r+0x1da>
 8017daa:	9b03      	ldr	r3, [sp, #12]
 8017dac:	3307      	adds	r3, #7
 8017dae:	f023 0307 	bic.w	r3, r3, #7
 8017db2:	3308      	adds	r3, #8
 8017db4:	9303      	str	r3, [sp, #12]
 8017db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017db8:	443b      	add	r3, r7
 8017dba:	9309      	str	r3, [sp, #36]	; 0x24
 8017dbc:	e768      	b.n	8017c90 <_vfiprintf_r+0x78>
 8017dbe:	fb0c 3202 	mla	r2, ip, r2, r3
 8017dc2:	460c      	mov	r4, r1
 8017dc4:	2001      	movs	r0, #1
 8017dc6:	e7a6      	b.n	8017d16 <_vfiprintf_r+0xfe>
 8017dc8:	2300      	movs	r3, #0
 8017dca:	3401      	adds	r4, #1
 8017dcc:	9305      	str	r3, [sp, #20]
 8017dce:	4619      	mov	r1, r3
 8017dd0:	f04f 0c0a 	mov.w	ip, #10
 8017dd4:	4620      	mov	r0, r4
 8017dd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017dda:	3a30      	subs	r2, #48	; 0x30
 8017ddc:	2a09      	cmp	r2, #9
 8017dde:	d903      	bls.n	8017de8 <_vfiprintf_r+0x1d0>
 8017de0:	2b00      	cmp	r3, #0
 8017de2:	d0c6      	beq.n	8017d72 <_vfiprintf_r+0x15a>
 8017de4:	9105      	str	r1, [sp, #20]
 8017de6:	e7c4      	b.n	8017d72 <_vfiprintf_r+0x15a>
 8017de8:	fb0c 2101 	mla	r1, ip, r1, r2
 8017dec:	4604      	mov	r4, r0
 8017dee:	2301      	movs	r3, #1
 8017df0:	e7f0      	b.n	8017dd4 <_vfiprintf_r+0x1bc>
 8017df2:	ab03      	add	r3, sp, #12
 8017df4:	9300      	str	r3, [sp, #0]
 8017df6:	462a      	mov	r2, r5
 8017df8:	4b12      	ldr	r3, [pc, #72]	; (8017e44 <_vfiprintf_r+0x22c>)
 8017dfa:	a904      	add	r1, sp, #16
 8017dfc:	4630      	mov	r0, r6
 8017dfe:	f3af 8000 	nop.w
 8017e02:	4607      	mov	r7, r0
 8017e04:	1c78      	adds	r0, r7, #1
 8017e06:	d1d6      	bne.n	8017db6 <_vfiprintf_r+0x19e>
 8017e08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017e0a:	07d9      	lsls	r1, r3, #31
 8017e0c:	d405      	bmi.n	8017e1a <_vfiprintf_r+0x202>
 8017e0e:	89ab      	ldrh	r3, [r5, #12]
 8017e10:	059a      	lsls	r2, r3, #22
 8017e12:	d402      	bmi.n	8017e1a <_vfiprintf_r+0x202>
 8017e14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017e16:	f7ff fce7 	bl	80177e8 <__retarget_lock_release_recursive>
 8017e1a:	89ab      	ldrh	r3, [r5, #12]
 8017e1c:	065b      	lsls	r3, r3, #25
 8017e1e:	f53f af1d 	bmi.w	8017c5c <_vfiprintf_r+0x44>
 8017e22:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017e24:	e71c      	b.n	8017c60 <_vfiprintf_r+0x48>
 8017e26:	ab03      	add	r3, sp, #12
 8017e28:	9300      	str	r3, [sp, #0]
 8017e2a:	462a      	mov	r2, r5
 8017e2c:	4b05      	ldr	r3, [pc, #20]	; (8017e44 <_vfiprintf_r+0x22c>)
 8017e2e:	a904      	add	r1, sp, #16
 8017e30:	4630      	mov	r0, r6
 8017e32:	f000 f879 	bl	8017f28 <_printf_i>
 8017e36:	e7e4      	b.n	8017e02 <_vfiprintf_r+0x1ea>
 8017e38:	080191d0 	.word	0x080191d0
 8017e3c:	080191da 	.word	0x080191da
 8017e40:	00000000 	.word	0x00000000
 8017e44:	08017bf3 	.word	0x08017bf3
 8017e48:	080191d6 	.word	0x080191d6

08017e4c <_printf_common>:
 8017e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e50:	4616      	mov	r6, r2
 8017e52:	4699      	mov	r9, r3
 8017e54:	688a      	ldr	r2, [r1, #8]
 8017e56:	690b      	ldr	r3, [r1, #16]
 8017e58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017e5c:	4293      	cmp	r3, r2
 8017e5e:	bfb8      	it	lt
 8017e60:	4613      	movlt	r3, r2
 8017e62:	6033      	str	r3, [r6, #0]
 8017e64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017e68:	4607      	mov	r7, r0
 8017e6a:	460c      	mov	r4, r1
 8017e6c:	b10a      	cbz	r2, 8017e72 <_printf_common+0x26>
 8017e6e:	3301      	adds	r3, #1
 8017e70:	6033      	str	r3, [r6, #0]
 8017e72:	6823      	ldr	r3, [r4, #0]
 8017e74:	0699      	lsls	r1, r3, #26
 8017e76:	bf42      	ittt	mi
 8017e78:	6833      	ldrmi	r3, [r6, #0]
 8017e7a:	3302      	addmi	r3, #2
 8017e7c:	6033      	strmi	r3, [r6, #0]
 8017e7e:	6825      	ldr	r5, [r4, #0]
 8017e80:	f015 0506 	ands.w	r5, r5, #6
 8017e84:	d106      	bne.n	8017e94 <_printf_common+0x48>
 8017e86:	f104 0a19 	add.w	sl, r4, #25
 8017e8a:	68e3      	ldr	r3, [r4, #12]
 8017e8c:	6832      	ldr	r2, [r6, #0]
 8017e8e:	1a9b      	subs	r3, r3, r2
 8017e90:	42ab      	cmp	r3, r5
 8017e92:	dc26      	bgt.n	8017ee2 <_printf_common+0x96>
 8017e94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017e98:	1e13      	subs	r3, r2, #0
 8017e9a:	6822      	ldr	r2, [r4, #0]
 8017e9c:	bf18      	it	ne
 8017e9e:	2301      	movne	r3, #1
 8017ea0:	0692      	lsls	r2, r2, #26
 8017ea2:	d42b      	bmi.n	8017efc <_printf_common+0xb0>
 8017ea4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017ea8:	4649      	mov	r1, r9
 8017eaa:	4638      	mov	r0, r7
 8017eac:	47c0      	blx	r8
 8017eae:	3001      	adds	r0, #1
 8017eb0:	d01e      	beq.n	8017ef0 <_printf_common+0xa4>
 8017eb2:	6823      	ldr	r3, [r4, #0]
 8017eb4:	6922      	ldr	r2, [r4, #16]
 8017eb6:	f003 0306 	and.w	r3, r3, #6
 8017eba:	2b04      	cmp	r3, #4
 8017ebc:	bf02      	ittt	eq
 8017ebe:	68e5      	ldreq	r5, [r4, #12]
 8017ec0:	6833      	ldreq	r3, [r6, #0]
 8017ec2:	1aed      	subeq	r5, r5, r3
 8017ec4:	68a3      	ldr	r3, [r4, #8]
 8017ec6:	bf0c      	ite	eq
 8017ec8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017ecc:	2500      	movne	r5, #0
 8017ece:	4293      	cmp	r3, r2
 8017ed0:	bfc4      	itt	gt
 8017ed2:	1a9b      	subgt	r3, r3, r2
 8017ed4:	18ed      	addgt	r5, r5, r3
 8017ed6:	2600      	movs	r6, #0
 8017ed8:	341a      	adds	r4, #26
 8017eda:	42b5      	cmp	r5, r6
 8017edc:	d11a      	bne.n	8017f14 <_printf_common+0xc8>
 8017ede:	2000      	movs	r0, #0
 8017ee0:	e008      	b.n	8017ef4 <_printf_common+0xa8>
 8017ee2:	2301      	movs	r3, #1
 8017ee4:	4652      	mov	r2, sl
 8017ee6:	4649      	mov	r1, r9
 8017ee8:	4638      	mov	r0, r7
 8017eea:	47c0      	blx	r8
 8017eec:	3001      	adds	r0, #1
 8017eee:	d103      	bne.n	8017ef8 <_printf_common+0xac>
 8017ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8017ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ef8:	3501      	adds	r5, #1
 8017efa:	e7c6      	b.n	8017e8a <_printf_common+0x3e>
 8017efc:	18e1      	adds	r1, r4, r3
 8017efe:	1c5a      	adds	r2, r3, #1
 8017f00:	2030      	movs	r0, #48	; 0x30
 8017f02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017f06:	4422      	add	r2, r4
 8017f08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017f0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017f10:	3302      	adds	r3, #2
 8017f12:	e7c7      	b.n	8017ea4 <_printf_common+0x58>
 8017f14:	2301      	movs	r3, #1
 8017f16:	4622      	mov	r2, r4
 8017f18:	4649      	mov	r1, r9
 8017f1a:	4638      	mov	r0, r7
 8017f1c:	47c0      	blx	r8
 8017f1e:	3001      	adds	r0, #1
 8017f20:	d0e6      	beq.n	8017ef0 <_printf_common+0xa4>
 8017f22:	3601      	adds	r6, #1
 8017f24:	e7d9      	b.n	8017eda <_printf_common+0x8e>
	...

08017f28 <_printf_i>:
 8017f28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017f2c:	7e0f      	ldrb	r7, [r1, #24]
 8017f2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017f30:	2f78      	cmp	r7, #120	; 0x78
 8017f32:	4691      	mov	r9, r2
 8017f34:	4680      	mov	r8, r0
 8017f36:	460c      	mov	r4, r1
 8017f38:	469a      	mov	sl, r3
 8017f3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8017f3e:	d807      	bhi.n	8017f50 <_printf_i+0x28>
 8017f40:	2f62      	cmp	r7, #98	; 0x62
 8017f42:	d80a      	bhi.n	8017f5a <_printf_i+0x32>
 8017f44:	2f00      	cmp	r7, #0
 8017f46:	f000 80d4 	beq.w	80180f2 <_printf_i+0x1ca>
 8017f4a:	2f58      	cmp	r7, #88	; 0x58
 8017f4c:	f000 80c0 	beq.w	80180d0 <_printf_i+0x1a8>
 8017f50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017f54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017f58:	e03a      	b.n	8017fd0 <_printf_i+0xa8>
 8017f5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017f5e:	2b15      	cmp	r3, #21
 8017f60:	d8f6      	bhi.n	8017f50 <_printf_i+0x28>
 8017f62:	a101      	add	r1, pc, #4	; (adr r1, 8017f68 <_printf_i+0x40>)
 8017f64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017f68:	08017fc1 	.word	0x08017fc1
 8017f6c:	08017fd5 	.word	0x08017fd5
 8017f70:	08017f51 	.word	0x08017f51
 8017f74:	08017f51 	.word	0x08017f51
 8017f78:	08017f51 	.word	0x08017f51
 8017f7c:	08017f51 	.word	0x08017f51
 8017f80:	08017fd5 	.word	0x08017fd5
 8017f84:	08017f51 	.word	0x08017f51
 8017f88:	08017f51 	.word	0x08017f51
 8017f8c:	08017f51 	.word	0x08017f51
 8017f90:	08017f51 	.word	0x08017f51
 8017f94:	080180d9 	.word	0x080180d9
 8017f98:	08018001 	.word	0x08018001
 8017f9c:	08018093 	.word	0x08018093
 8017fa0:	08017f51 	.word	0x08017f51
 8017fa4:	08017f51 	.word	0x08017f51
 8017fa8:	080180fb 	.word	0x080180fb
 8017fac:	08017f51 	.word	0x08017f51
 8017fb0:	08018001 	.word	0x08018001
 8017fb4:	08017f51 	.word	0x08017f51
 8017fb8:	08017f51 	.word	0x08017f51
 8017fbc:	0801809b 	.word	0x0801809b
 8017fc0:	682b      	ldr	r3, [r5, #0]
 8017fc2:	1d1a      	adds	r2, r3, #4
 8017fc4:	681b      	ldr	r3, [r3, #0]
 8017fc6:	602a      	str	r2, [r5, #0]
 8017fc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017fcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017fd0:	2301      	movs	r3, #1
 8017fd2:	e09f      	b.n	8018114 <_printf_i+0x1ec>
 8017fd4:	6820      	ldr	r0, [r4, #0]
 8017fd6:	682b      	ldr	r3, [r5, #0]
 8017fd8:	0607      	lsls	r7, r0, #24
 8017fda:	f103 0104 	add.w	r1, r3, #4
 8017fde:	6029      	str	r1, [r5, #0]
 8017fe0:	d501      	bpl.n	8017fe6 <_printf_i+0xbe>
 8017fe2:	681e      	ldr	r6, [r3, #0]
 8017fe4:	e003      	b.n	8017fee <_printf_i+0xc6>
 8017fe6:	0646      	lsls	r6, r0, #25
 8017fe8:	d5fb      	bpl.n	8017fe2 <_printf_i+0xba>
 8017fea:	f9b3 6000 	ldrsh.w	r6, [r3]
 8017fee:	2e00      	cmp	r6, #0
 8017ff0:	da03      	bge.n	8017ffa <_printf_i+0xd2>
 8017ff2:	232d      	movs	r3, #45	; 0x2d
 8017ff4:	4276      	negs	r6, r6
 8017ff6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017ffa:	485a      	ldr	r0, [pc, #360]	; (8018164 <_printf_i+0x23c>)
 8017ffc:	230a      	movs	r3, #10
 8017ffe:	e012      	b.n	8018026 <_printf_i+0xfe>
 8018000:	682b      	ldr	r3, [r5, #0]
 8018002:	6820      	ldr	r0, [r4, #0]
 8018004:	1d19      	adds	r1, r3, #4
 8018006:	6029      	str	r1, [r5, #0]
 8018008:	0605      	lsls	r5, r0, #24
 801800a:	d501      	bpl.n	8018010 <_printf_i+0xe8>
 801800c:	681e      	ldr	r6, [r3, #0]
 801800e:	e002      	b.n	8018016 <_printf_i+0xee>
 8018010:	0641      	lsls	r1, r0, #25
 8018012:	d5fb      	bpl.n	801800c <_printf_i+0xe4>
 8018014:	881e      	ldrh	r6, [r3, #0]
 8018016:	4853      	ldr	r0, [pc, #332]	; (8018164 <_printf_i+0x23c>)
 8018018:	2f6f      	cmp	r7, #111	; 0x6f
 801801a:	bf0c      	ite	eq
 801801c:	2308      	moveq	r3, #8
 801801e:	230a      	movne	r3, #10
 8018020:	2100      	movs	r1, #0
 8018022:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018026:	6865      	ldr	r5, [r4, #4]
 8018028:	60a5      	str	r5, [r4, #8]
 801802a:	2d00      	cmp	r5, #0
 801802c:	bfa2      	ittt	ge
 801802e:	6821      	ldrge	r1, [r4, #0]
 8018030:	f021 0104 	bicge.w	r1, r1, #4
 8018034:	6021      	strge	r1, [r4, #0]
 8018036:	b90e      	cbnz	r6, 801803c <_printf_i+0x114>
 8018038:	2d00      	cmp	r5, #0
 801803a:	d04b      	beq.n	80180d4 <_printf_i+0x1ac>
 801803c:	4615      	mov	r5, r2
 801803e:	fbb6 f1f3 	udiv	r1, r6, r3
 8018042:	fb03 6711 	mls	r7, r3, r1, r6
 8018046:	5dc7      	ldrb	r7, [r0, r7]
 8018048:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801804c:	4637      	mov	r7, r6
 801804e:	42bb      	cmp	r3, r7
 8018050:	460e      	mov	r6, r1
 8018052:	d9f4      	bls.n	801803e <_printf_i+0x116>
 8018054:	2b08      	cmp	r3, #8
 8018056:	d10b      	bne.n	8018070 <_printf_i+0x148>
 8018058:	6823      	ldr	r3, [r4, #0]
 801805a:	07de      	lsls	r6, r3, #31
 801805c:	d508      	bpl.n	8018070 <_printf_i+0x148>
 801805e:	6923      	ldr	r3, [r4, #16]
 8018060:	6861      	ldr	r1, [r4, #4]
 8018062:	4299      	cmp	r1, r3
 8018064:	bfde      	ittt	le
 8018066:	2330      	movle	r3, #48	; 0x30
 8018068:	f805 3c01 	strble.w	r3, [r5, #-1]
 801806c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8018070:	1b52      	subs	r2, r2, r5
 8018072:	6122      	str	r2, [r4, #16]
 8018074:	f8cd a000 	str.w	sl, [sp]
 8018078:	464b      	mov	r3, r9
 801807a:	aa03      	add	r2, sp, #12
 801807c:	4621      	mov	r1, r4
 801807e:	4640      	mov	r0, r8
 8018080:	f7ff fee4 	bl	8017e4c <_printf_common>
 8018084:	3001      	adds	r0, #1
 8018086:	d14a      	bne.n	801811e <_printf_i+0x1f6>
 8018088:	f04f 30ff 	mov.w	r0, #4294967295
 801808c:	b004      	add	sp, #16
 801808e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018092:	6823      	ldr	r3, [r4, #0]
 8018094:	f043 0320 	orr.w	r3, r3, #32
 8018098:	6023      	str	r3, [r4, #0]
 801809a:	4833      	ldr	r0, [pc, #204]	; (8018168 <_printf_i+0x240>)
 801809c:	2778      	movs	r7, #120	; 0x78
 801809e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80180a2:	6823      	ldr	r3, [r4, #0]
 80180a4:	6829      	ldr	r1, [r5, #0]
 80180a6:	061f      	lsls	r7, r3, #24
 80180a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80180ac:	d402      	bmi.n	80180b4 <_printf_i+0x18c>
 80180ae:	065f      	lsls	r7, r3, #25
 80180b0:	bf48      	it	mi
 80180b2:	b2b6      	uxthmi	r6, r6
 80180b4:	07df      	lsls	r7, r3, #31
 80180b6:	bf48      	it	mi
 80180b8:	f043 0320 	orrmi.w	r3, r3, #32
 80180bc:	6029      	str	r1, [r5, #0]
 80180be:	bf48      	it	mi
 80180c0:	6023      	strmi	r3, [r4, #0]
 80180c2:	b91e      	cbnz	r6, 80180cc <_printf_i+0x1a4>
 80180c4:	6823      	ldr	r3, [r4, #0]
 80180c6:	f023 0320 	bic.w	r3, r3, #32
 80180ca:	6023      	str	r3, [r4, #0]
 80180cc:	2310      	movs	r3, #16
 80180ce:	e7a7      	b.n	8018020 <_printf_i+0xf8>
 80180d0:	4824      	ldr	r0, [pc, #144]	; (8018164 <_printf_i+0x23c>)
 80180d2:	e7e4      	b.n	801809e <_printf_i+0x176>
 80180d4:	4615      	mov	r5, r2
 80180d6:	e7bd      	b.n	8018054 <_printf_i+0x12c>
 80180d8:	682b      	ldr	r3, [r5, #0]
 80180da:	6826      	ldr	r6, [r4, #0]
 80180dc:	6961      	ldr	r1, [r4, #20]
 80180de:	1d18      	adds	r0, r3, #4
 80180e0:	6028      	str	r0, [r5, #0]
 80180e2:	0635      	lsls	r5, r6, #24
 80180e4:	681b      	ldr	r3, [r3, #0]
 80180e6:	d501      	bpl.n	80180ec <_printf_i+0x1c4>
 80180e8:	6019      	str	r1, [r3, #0]
 80180ea:	e002      	b.n	80180f2 <_printf_i+0x1ca>
 80180ec:	0670      	lsls	r0, r6, #25
 80180ee:	d5fb      	bpl.n	80180e8 <_printf_i+0x1c0>
 80180f0:	8019      	strh	r1, [r3, #0]
 80180f2:	2300      	movs	r3, #0
 80180f4:	6123      	str	r3, [r4, #16]
 80180f6:	4615      	mov	r5, r2
 80180f8:	e7bc      	b.n	8018074 <_printf_i+0x14c>
 80180fa:	682b      	ldr	r3, [r5, #0]
 80180fc:	1d1a      	adds	r2, r3, #4
 80180fe:	602a      	str	r2, [r5, #0]
 8018100:	681d      	ldr	r5, [r3, #0]
 8018102:	6862      	ldr	r2, [r4, #4]
 8018104:	2100      	movs	r1, #0
 8018106:	4628      	mov	r0, r5
 8018108:	f7e8 f882 	bl	8000210 <memchr>
 801810c:	b108      	cbz	r0, 8018112 <_printf_i+0x1ea>
 801810e:	1b40      	subs	r0, r0, r5
 8018110:	6060      	str	r0, [r4, #4]
 8018112:	6863      	ldr	r3, [r4, #4]
 8018114:	6123      	str	r3, [r4, #16]
 8018116:	2300      	movs	r3, #0
 8018118:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801811c:	e7aa      	b.n	8018074 <_printf_i+0x14c>
 801811e:	6923      	ldr	r3, [r4, #16]
 8018120:	462a      	mov	r2, r5
 8018122:	4649      	mov	r1, r9
 8018124:	4640      	mov	r0, r8
 8018126:	47d0      	blx	sl
 8018128:	3001      	adds	r0, #1
 801812a:	d0ad      	beq.n	8018088 <_printf_i+0x160>
 801812c:	6823      	ldr	r3, [r4, #0]
 801812e:	079b      	lsls	r3, r3, #30
 8018130:	d413      	bmi.n	801815a <_printf_i+0x232>
 8018132:	68e0      	ldr	r0, [r4, #12]
 8018134:	9b03      	ldr	r3, [sp, #12]
 8018136:	4298      	cmp	r0, r3
 8018138:	bfb8      	it	lt
 801813a:	4618      	movlt	r0, r3
 801813c:	e7a6      	b.n	801808c <_printf_i+0x164>
 801813e:	2301      	movs	r3, #1
 8018140:	4632      	mov	r2, r6
 8018142:	4649      	mov	r1, r9
 8018144:	4640      	mov	r0, r8
 8018146:	47d0      	blx	sl
 8018148:	3001      	adds	r0, #1
 801814a:	d09d      	beq.n	8018088 <_printf_i+0x160>
 801814c:	3501      	adds	r5, #1
 801814e:	68e3      	ldr	r3, [r4, #12]
 8018150:	9903      	ldr	r1, [sp, #12]
 8018152:	1a5b      	subs	r3, r3, r1
 8018154:	42ab      	cmp	r3, r5
 8018156:	dcf2      	bgt.n	801813e <_printf_i+0x216>
 8018158:	e7eb      	b.n	8018132 <_printf_i+0x20a>
 801815a:	2500      	movs	r5, #0
 801815c:	f104 0619 	add.w	r6, r4, #25
 8018160:	e7f5      	b.n	801814e <_printf_i+0x226>
 8018162:	bf00      	nop
 8018164:	080191e1 	.word	0x080191e1
 8018168:	080191f2 	.word	0x080191f2

0801816c <__sflush_r>:
 801816c:	898a      	ldrh	r2, [r1, #12]
 801816e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018172:	4605      	mov	r5, r0
 8018174:	0710      	lsls	r0, r2, #28
 8018176:	460c      	mov	r4, r1
 8018178:	d458      	bmi.n	801822c <__sflush_r+0xc0>
 801817a:	684b      	ldr	r3, [r1, #4]
 801817c:	2b00      	cmp	r3, #0
 801817e:	dc05      	bgt.n	801818c <__sflush_r+0x20>
 8018180:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018182:	2b00      	cmp	r3, #0
 8018184:	dc02      	bgt.n	801818c <__sflush_r+0x20>
 8018186:	2000      	movs	r0, #0
 8018188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801818c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801818e:	2e00      	cmp	r6, #0
 8018190:	d0f9      	beq.n	8018186 <__sflush_r+0x1a>
 8018192:	2300      	movs	r3, #0
 8018194:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018198:	682f      	ldr	r7, [r5, #0]
 801819a:	6a21      	ldr	r1, [r4, #32]
 801819c:	602b      	str	r3, [r5, #0]
 801819e:	d032      	beq.n	8018206 <__sflush_r+0x9a>
 80181a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80181a2:	89a3      	ldrh	r3, [r4, #12]
 80181a4:	075a      	lsls	r2, r3, #29
 80181a6:	d505      	bpl.n	80181b4 <__sflush_r+0x48>
 80181a8:	6863      	ldr	r3, [r4, #4]
 80181aa:	1ac0      	subs	r0, r0, r3
 80181ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80181ae:	b10b      	cbz	r3, 80181b4 <__sflush_r+0x48>
 80181b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80181b2:	1ac0      	subs	r0, r0, r3
 80181b4:	2300      	movs	r3, #0
 80181b6:	4602      	mov	r2, r0
 80181b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80181ba:	6a21      	ldr	r1, [r4, #32]
 80181bc:	4628      	mov	r0, r5
 80181be:	47b0      	blx	r6
 80181c0:	1c43      	adds	r3, r0, #1
 80181c2:	89a3      	ldrh	r3, [r4, #12]
 80181c4:	d106      	bne.n	80181d4 <__sflush_r+0x68>
 80181c6:	6829      	ldr	r1, [r5, #0]
 80181c8:	291d      	cmp	r1, #29
 80181ca:	d82b      	bhi.n	8018224 <__sflush_r+0xb8>
 80181cc:	4a29      	ldr	r2, [pc, #164]	; (8018274 <__sflush_r+0x108>)
 80181ce:	410a      	asrs	r2, r1
 80181d0:	07d6      	lsls	r6, r2, #31
 80181d2:	d427      	bmi.n	8018224 <__sflush_r+0xb8>
 80181d4:	2200      	movs	r2, #0
 80181d6:	6062      	str	r2, [r4, #4]
 80181d8:	04d9      	lsls	r1, r3, #19
 80181da:	6922      	ldr	r2, [r4, #16]
 80181dc:	6022      	str	r2, [r4, #0]
 80181de:	d504      	bpl.n	80181ea <__sflush_r+0x7e>
 80181e0:	1c42      	adds	r2, r0, #1
 80181e2:	d101      	bne.n	80181e8 <__sflush_r+0x7c>
 80181e4:	682b      	ldr	r3, [r5, #0]
 80181e6:	b903      	cbnz	r3, 80181ea <__sflush_r+0x7e>
 80181e8:	6560      	str	r0, [r4, #84]	; 0x54
 80181ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80181ec:	602f      	str	r7, [r5, #0]
 80181ee:	2900      	cmp	r1, #0
 80181f0:	d0c9      	beq.n	8018186 <__sflush_r+0x1a>
 80181f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80181f6:	4299      	cmp	r1, r3
 80181f8:	d002      	beq.n	8018200 <__sflush_r+0x94>
 80181fa:	4628      	mov	r0, r5
 80181fc:	f7ff fb36 	bl	801786c <_free_r>
 8018200:	2000      	movs	r0, #0
 8018202:	6360      	str	r0, [r4, #52]	; 0x34
 8018204:	e7c0      	b.n	8018188 <__sflush_r+0x1c>
 8018206:	2301      	movs	r3, #1
 8018208:	4628      	mov	r0, r5
 801820a:	47b0      	blx	r6
 801820c:	1c41      	adds	r1, r0, #1
 801820e:	d1c8      	bne.n	80181a2 <__sflush_r+0x36>
 8018210:	682b      	ldr	r3, [r5, #0]
 8018212:	2b00      	cmp	r3, #0
 8018214:	d0c5      	beq.n	80181a2 <__sflush_r+0x36>
 8018216:	2b1d      	cmp	r3, #29
 8018218:	d001      	beq.n	801821e <__sflush_r+0xb2>
 801821a:	2b16      	cmp	r3, #22
 801821c:	d101      	bne.n	8018222 <__sflush_r+0xb6>
 801821e:	602f      	str	r7, [r5, #0]
 8018220:	e7b1      	b.n	8018186 <__sflush_r+0x1a>
 8018222:	89a3      	ldrh	r3, [r4, #12]
 8018224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018228:	81a3      	strh	r3, [r4, #12]
 801822a:	e7ad      	b.n	8018188 <__sflush_r+0x1c>
 801822c:	690f      	ldr	r7, [r1, #16]
 801822e:	2f00      	cmp	r7, #0
 8018230:	d0a9      	beq.n	8018186 <__sflush_r+0x1a>
 8018232:	0793      	lsls	r3, r2, #30
 8018234:	680e      	ldr	r6, [r1, #0]
 8018236:	bf08      	it	eq
 8018238:	694b      	ldreq	r3, [r1, #20]
 801823a:	600f      	str	r7, [r1, #0]
 801823c:	bf18      	it	ne
 801823e:	2300      	movne	r3, #0
 8018240:	eba6 0807 	sub.w	r8, r6, r7
 8018244:	608b      	str	r3, [r1, #8]
 8018246:	f1b8 0f00 	cmp.w	r8, #0
 801824a:	dd9c      	ble.n	8018186 <__sflush_r+0x1a>
 801824c:	6a21      	ldr	r1, [r4, #32]
 801824e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018250:	4643      	mov	r3, r8
 8018252:	463a      	mov	r2, r7
 8018254:	4628      	mov	r0, r5
 8018256:	47b0      	blx	r6
 8018258:	2800      	cmp	r0, #0
 801825a:	dc06      	bgt.n	801826a <__sflush_r+0xfe>
 801825c:	89a3      	ldrh	r3, [r4, #12]
 801825e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018262:	81a3      	strh	r3, [r4, #12]
 8018264:	f04f 30ff 	mov.w	r0, #4294967295
 8018268:	e78e      	b.n	8018188 <__sflush_r+0x1c>
 801826a:	4407      	add	r7, r0
 801826c:	eba8 0800 	sub.w	r8, r8, r0
 8018270:	e7e9      	b.n	8018246 <__sflush_r+0xda>
 8018272:	bf00      	nop
 8018274:	dfbffffe 	.word	0xdfbffffe

08018278 <_fflush_r>:
 8018278:	b538      	push	{r3, r4, r5, lr}
 801827a:	690b      	ldr	r3, [r1, #16]
 801827c:	4605      	mov	r5, r0
 801827e:	460c      	mov	r4, r1
 8018280:	b913      	cbnz	r3, 8018288 <_fflush_r+0x10>
 8018282:	2500      	movs	r5, #0
 8018284:	4628      	mov	r0, r5
 8018286:	bd38      	pop	{r3, r4, r5, pc}
 8018288:	b118      	cbz	r0, 8018292 <_fflush_r+0x1a>
 801828a:	6a03      	ldr	r3, [r0, #32]
 801828c:	b90b      	cbnz	r3, 8018292 <_fflush_r+0x1a>
 801828e:	f7fe ff39 	bl	8017104 <__sinit>
 8018292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018296:	2b00      	cmp	r3, #0
 8018298:	d0f3      	beq.n	8018282 <_fflush_r+0xa>
 801829a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801829c:	07d0      	lsls	r0, r2, #31
 801829e:	d404      	bmi.n	80182aa <_fflush_r+0x32>
 80182a0:	0599      	lsls	r1, r3, #22
 80182a2:	d402      	bmi.n	80182aa <_fflush_r+0x32>
 80182a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80182a6:	f7ff fa9e 	bl	80177e6 <__retarget_lock_acquire_recursive>
 80182aa:	4628      	mov	r0, r5
 80182ac:	4621      	mov	r1, r4
 80182ae:	f7ff ff5d 	bl	801816c <__sflush_r>
 80182b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80182b4:	07da      	lsls	r2, r3, #31
 80182b6:	4605      	mov	r5, r0
 80182b8:	d4e4      	bmi.n	8018284 <_fflush_r+0xc>
 80182ba:	89a3      	ldrh	r3, [r4, #12]
 80182bc:	059b      	lsls	r3, r3, #22
 80182be:	d4e1      	bmi.n	8018284 <_fflush_r+0xc>
 80182c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80182c2:	f7ff fa91 	bl	80177e8 <__retarget_lock_release_recursive>
 80182c6:	e7dd      	b.n	8018284 <_fflush_r+0xc>

080182c8 <fiprintf>:
 80182c8:	b40e      	push	{r1, r2, r3}
 80182ca:	b503      	push	{r0, r1, lr}
 80182cc:	4601      	mov	r1, r0
 80182ce:	ab03      	add	r3, sp, #12
 80182d0:	4805      	ldr	r0, [pc, #20]	; (80182e8 <fiprintf+0x20>)
 80182d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80182d6:	6800      	ldr	r0, [r0, #0]
 80182d8:	9301      	str	r3, [sp, #4]
 80182da:	f7ff fc9d 	bl	8017c18 <_vfiprintf_r>
 80182de:	b002      	add	sp, #8
 80182e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80182e4:	b003      	add	sp, #12
 80182e6:	4770      	bx	lr
 80182e8:	200000d4 	.word	0x200000d4

080182ec <__swhatbuf_r>:
 80182ec:	b570      	push	{r4, r5, r6, lr}
 80182ee:	460c      	mov	r4, r1
 80182f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80182f4:	2900      	cmp	r1, #0
 80182f6:	b096      	sub	sp, #88	; 0x58
 80182f8:	4615      	mov	r5, r2
 80182fa:	461e      	mov	r6, r3
 80182fc:	da0d      	bge.n	801831a <__swhatbuf_r+0x2e>
 80182fe:	89a3      	ldrh	r3, [r4, #12]
 8018300:	f013 0f80 	tst.w	r3, #128	; 0x80
 8018304:	f04f 0100 	mov.w	r1, #0
 8018308:	bf0c      	ite	eq
 801830a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801830e:	2340      	movne	r3, #64	; 0x40
 8018310:	2000      	movs	r0, #0
 8018312:	6031      	str	r1, [r6, #0]
 8018314:	602b      	str	r3, [r5, #0]
 8018316:	b016      	add	sp, #88	; 0x58
 8018318:	bd70      	pop	{r4, r5, r6, pc}
 801831a:	466a      	mov	r2, sp
 801831c:	f000 f862 	bl	80183e4 <_fstat_r>
 8018320:	2800      	cmp	r0, #0
 8018322:	dbec      	blt.n	80182fe <__swhatbuf_r+0x12>
 8018324:	9901      	ldr	r1, [sp, #4]
 8018326:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801832a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801832e:	4259      	negs	r1, r3
 8018330:	4159      	adcs	r1, r3
 8018332:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018336:	e7eb      	b.n	8018310 <__swhatbuf_r+0x24>

08018338 <__smakebuf_r>:
 8018338:	898b      	ldrh	r3, [r1, #12]
 801833a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801833c:	079d      	lsls	r5, r3, #30
 801833e:	4606      	mov	r6, r0
 8018340:	460c      	mov	r4, r1
 8018342:	d507      	bpl.n	8018354 <__smakebuf_r+0x1c>
 8018344:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018348:	6023      	str	r3, [r4, #0]
 801834a:	6123      	str	r3, [r4, #16]
 801834c:	2301      	movs	r3, #1
 801834e:	6163      	str	r3, [r4, #20]
 8018350:	b002      	add	sp, #8
 8018352:	bd70      	pop	{r4, r5, r6, pc}
 8018354:	ab01      	add	r3, sp, #4
 8018356:	466a      	mov	r2, sp
 8018358:	f7ff ffc8 	bl	80182ec <__swhatbuf_r>
 801835c:	9900      	ldr	r1, [sp, #0]
 801835e:	4605      	mov	r5, r0
 8018360:	4630      	mov	r0, r6
 8018362:	f7fe fc97 	bl	8016c94 <_malloc_r>
 8018366:	b948      	cbnz	r0, 801837c <__smakebuf_r+0x44>
 8018368:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801836c:	059a      	lsls	r2, r3, #22
 801836e:	d4ef      	bmi.n	8018350 <__smakebuf_r+0x18>
 8018370:	f023 0303 	bic.w	r3, r3, #3
 8018374:	f043 0302 	orr.w	r3, r3, #2
 8018378:	81a3      	strh	r3, [r4, #12]
 801837a:	e7e3      	b.n	8018344 <__smakebuf_r+0xc>
 801837c:	89a3      	ldrh	r3, [r4, #12]
 801837e:	6020      	str	r0, [r4, #0]
 8018380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018384:	81a3      	strh	r3, [r4, #12]
 8018386:	9b00      	ldr	r3, [sp, #0]
 8018388:	6163      	str	r3, [r4, #20]
 801838a:	9b01      	ldr	r3, [sp, #4]
 801838c:	6120      	str	r0, [r4, #16]
 801838e:	b15b      	cbz	r3, 80183a8 <__smakebuf_r+0x70>
 8018390:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018394:	4630      	mov	r0, r6
 8018396:	f000 f837 	bl	8018408 <_isatty_r>
 801839a:	b128      	cbz	r0, 80183a8 <__smakebuf_r+0x70>
 801839c:	89a3      	ldrh	r3, [r4, #12]
 801839e:	f023 0303 	bic.w	r3, r3, #3
 80183a2:	f043 0301 	orr.w	r3, r3, #1
 80183a6:	81a3      	strh	r3, [r4, #12]
 80183a8:	89a3      	ldrh	r3, [r4, #12]
 80183aa:	431d      	orrs	r5, r3
 80183ac:	81a5      	strh	r5, [r4, #12]
 80183ae:	e7cf      	b.n	8018350 <__smakebuf_r+0x18>

080183b0 <memmove>:
 80183b0:	4288      	cmp	r0, r1
 80183b2:	b510      	push	{r4, lr}
 80183b4:	eb01 0402 	add.w	r4, r1, r2
 80183b8:	d902      	bls.n	80183c0 <memmove+0x10>
 80183ba:	4284      	cmp	r4, r0
 80183bc:	4623      	mov	r3, r4
 80183be:	d807      	bhi.n	80183d0 <memmove+0x20>
 80183c0:	1e43      	subs	r3, r0, #1
 80183c2:	42a1      	cmp	r1, r4
 80183c4:	d008      	beq.n	80183d8 <memmove+0x28>
 80183c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80183ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80183ce:	e7f8      	b.n	80183c2 <memmove+0x12>
 80183d0:	4402      	add	r2, r0
 80183d2:	4601      	mov	r1, r0
 80183d4:	428a      	cmp	r2, r1
 80183d6:	d100      	bne.n	80183da <memmove+0x2a>
 80183d8:	bd10      	pop	{r4, pc}
 80183da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80183de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80183e2:	e7f7      	b.n	80183d4 <memmove+0x24>

080183e4 <_fstat_r>:
 80183e4:	b538      	push	{r3, r4, r5, lr}
 80183e6:	4d07      	ldr	r5, [pc, #28]	; (8018404 <_fstat_r+0x20>)
 80183e8:	2300      	movs	r3, #0
 80183ea:	4604      	mov	r4, r0
 80183ec:	4608      	mov	r0, r1
 80183ee:	4611      	mov	r1, r2
 80183f0:	602b      	str	r3, [r5, #0]
 80183f2:	f7ea fe8d 	bl	8003110 <_fstat>
 80183f6:	1c43      	adds	r3, r0, #1
 80183f8:	d102      	bne.n	8018400 <_fstat_r+0x1c>
 80183fa:	682b      	ldr	r3, [r5, #0]
 80183fc:	b103      	cbz	r3, 8018400 <_fstat_r+0x1c>
 80183fe:	6023      	str	r3, [r4, #0]
 8018400:	bd38      	pop	{r3, r4, r5, pc}
 8018402:	bf00      	nop
 8018404:	20009e54 	.word	0x20009e54

08018408 <_isatty_r>:
 8018408:	b538      	push	{r3, r4, r5, lr}
 801840a:	4d06      	ldr	r5, [pc, #24]	; (8018424 <_isatty_r+0x1c>)
 801840c:	2300      	movs	r3, #0
 801840e:	4604      	mov	r4, r0
 8018410:	4608      	mov	r0, r1
 8018412:	602b      	str	r3, [r5, #0]
 8018414:	f7ea fdea 	bl	8002fec <_isatty>
 8018418:	1c43      	adds	r3, r0, #1
 801841a:	d102      	bne.n	8018422 <_isatty_r+0x1a>
 801841c:	682b      	ldr	r3, [r5, #0]
 801841e:	b103      	cbz	r3, 8018422 <_isatty_r+0x1a>
 8018420:	6023      	str	r3, [r4, #0]
 8018422:	bd38      	pop	{r3, r4, r5, pc}
 8018424:	20009e54 	.word	0x20009e54

08018428 <abort>:
 8018428:	b508      	push	{r3, lr}
 801842a:	2006      	movs	r0, #6
 801842c:	f000 f82c 	bl	8018488 <raise>
 8018430:	2001      	movs	r0, #1
 8018432:	f000 f845 	bl	80184c0 <_exit>

08018436 <_raise_r>:
 8018436:	291f      	cmp	r1, #31
 8018438:	b538      	push	{r3, r4, r5, lr}
 801843a:	4604      	mov	r4, r0
 801843c:	460d      	mov	r5, r1
 801843e:	d904      	bls.n	801844a <_raise_r+0x14>
 8018440:	2316      	movs	r3, #22
 8018442:	6003      	str	r3, [r0, #0]
 8018444:	f04f 30ff 	mov.w	r0, #4294967295
 8018448:	bd38      	pop	{r3, r4, r5, pc}
 801844a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801844c:	b112      	cbz	r2, 8018454 <_raise_r+0x1e>
 801844e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018452:	b94b      	cbnz	r3, 8018468 <_raise_r+0x32>
 8018454:	4620      	mov	r0, r4
 8018456:	f000 f831 	bl	80184bc <_getpid_r>
 801845a:	462a      	mov	r2, r5
 801845c:	4601      	mov	r1, r0
 801845e:	4620      	mov	r0, r4
 8018460:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018464:	f000 b818 	b.w	8018498 <_kill_r>
 8018468:	2b01      	cmp	r3, #1
 801846a:	d00a      	beq.n	8018482 <_raise_r+0x4c>
 801846c:	1c59      	adds	r1, r3, #1
 801846e:	d103      	bne.n	8018478 <_raise_r+0x42>
 8018470:	2316      	movs	r3, #22
 8018472:	6003      	str	r3, [r0, #0]
 8018474:	2001      	movs	r0, #1
 8018476:	e7e7      	b.n	8018448 <_raise_r+0x12>
 8018478:	2400      	movs	r4, #0
 801847a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801847e:	4628      	mov	r0, r5
 8018480:	4798      	blx	r3
 8018482:	2000      	movs	r0, #0
 8018484:	e7e0      	b.n	8018448 <_raise_r+0x12>
	...

08018488 <raise>:
 8018488:	4b02      	ldr	r3, [pc, #8]	; (8018494 <raise+0xc>)
 801848a:	4601      	mov	r1, r0
 801848c:	6818      	ldr	r0, [r3, #0]
 801848e:	f7ff bfd2 	b.w	8018436 <_raise_r>
 8018492:	bf00      	nop
 8018494:	200000d4 	.word	0x200000d4

08018498 <_kill_r>:
 8018498:	b538      	push	{r3, r4, r5, lr}
 801849a:	4d07      	ldr	r5, [pc, #28]	; (80184b8 <_kill_r+0x20>)
 801849c:	2300      	movs	r3, #0
 801849e:	4604      	mov	r4, r0
 80184a0:	4608      	mov	r0, r1
 80184a2:	4611      	mov	r1, r2
 80184a4:	602b      	str	r3, [r5, #0]
 80184a6:	f7ea fe56 	bl	8003156 <_kill>
 80184aa:	1c43      	adds	r3, r0, #1
 80184ac:	d102      	bne.n	80184b4 <_kill_r+0x1c>
 80184ae:	682b      	ldr	r3, [r5, #0]
 80184b0:	b103      	cbz	r3, 80184b4 <_kill_r+0x1c>
 80184b2:	6023      	str	r3, [r4, #0]
 80184b4:	bd38      	pop	{r3, r4, r5, pc}
 80184b6:	bf00      	nop
 80184b8:	20009e54 	.word	0x20009e54

080184bc <_getpid_r>:
 80184bc:	f7ea be43 	b.w	8003146 <_getpid>

080184c0 <_exit>:
 80184c0:	e7fe      	b.n	80184c0 <_exit>
	...

080184c4 <_init>:
 80184c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184c6:	bf00      	nop
 80184c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80184ca:	bc08      	pop	{r3}
 80184cc:	469e      	mov	lr, r3
 80184ce:	4770      	bx	lr

080184d0 <_fini>:
 80184d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184d2:	bf00      	nop
 80184d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80184d6:	bc08      	pop	{r3}
 80184d8:	469e      	mov	lr, r3
 80184da:	4770      	bx	lr
