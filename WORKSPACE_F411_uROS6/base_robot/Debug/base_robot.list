
base_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b224  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f68  0801b3c8  0801b3c8  0002b3c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c330  0801c330  000300f0  2**0
                  CONTENTS
  4 .ARM          00000008  0801c330  0801c330  0002c330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c338  0801c338  000300f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c338  0801c338  0002c338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c33c  0801c33c  0002c33c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  0801c340  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e788  200000f0  0801c430  000300f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000e878  0801c430  0003e878  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300f0  2**0
                  CONTENTS, READONLY
 12 .comment      0000009c  00000000  00000000  00030120  2**0
                  CONTENTS, READONLY
 13 .debug_info   000e5cc7  00000000  00000000  000301bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000182a8  00000000  00000000  00115e83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00004350  00000000  00000000  0012e130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016ec  00000000  00000000  00132480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025b46  00000000  00000000  00133b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00075ea8  00000000  00000000  001596b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b8e35  00000000  00000000  001cf55a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00010b20  00000000  00000000  00288390  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  00298eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00057b45  00000000  00000000  00298f3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00009b50  00000000  00000000  002f0a82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000f0 	.word	0x200000f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801b3ac 	.word	0x0801b3ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000f4 	.word	0x200000f4
 80001dc:	0801b3ac 	.word	0x0801b3ac

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2f>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b64:	bf24      	itt	cs
 8000b66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6e:	d90d      	bls.n	8000b8c <__aeabi_d2f+0x30>
 8000b70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b84:	bf08      	it	eq
 8000b86:	f020 0001 	biceq.w	r0, r0, #1
 8000b8a:	4770      	bx	lr
 8000b8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b90:	d121      	bne.n	8000bd6 <__aeabi_d2f+0x7a>
 8000b92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b96:	bfbc      	itt	lt
 8000b98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	4770      	bxlt	lr
 8000b9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba6:	f1c2 0218 	rsb	r2, r2, #24
 8000baa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	f040 0001 	orrne.w	r0, r0, #1
 8000bbc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc8:	ea40 000c 	orr.w	r0, r0, ip
 8000bcc:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd4:	e7cc      	b.n	8000b70 <__aeabi_d2f+0x14>
 8000bd6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bda:	d107      	bne.n	8000bec <__aeabi_d2f+0x90>
 8000bdc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be0:	bf1e      	ittt	ne
 8000be2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bea:	4770      	bxne	lr
 8000bec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <__aeabi_ldivmod>:
 8000bfc:	b97b      	cbnz	r3, 8000c1e <__aeabi_ldivmod+0x22>
 8000bfe:	b972      	cbnz	r2, 8000c1e <__aeabi_ldivmod+0x22>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bfbe      	ittt	lt
 8000c04:	2000      	movlt	r0, #0
 8000c06:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c0a:	e006      	blt.n	8000c1a <__aeabi_ldivmod+0x1e>
 8000c0c:	bf08      	it	eq
 8000c0e:	2800      	cmpeq	r0, #0
 8000c10:	bf1c      	itt	ne
 8000c12:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c16:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1a:	f000 b9bb 	b.w	8000f94 <__aeabi_idiv0>
 8000c1e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c22:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c26:	2900      	cmp	r1, #0
 8000c28:	db09      	blt.n	8000c3e <__aeabi_ldivmod+0x42>
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	db1a      	blt.n	8000c64 <__aeabi_ldivmod+0x68>
 8000c2e:	f000 f84d 	bl	8000ccc <__udivmoddi4>
 8000c32:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c3a:	b004      	add	sp, #16
 8000c3c:	4770      	bx	lr
 8000c3e:	4240      	negs	r0, r0
 8000c40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	db1b      	blt.n	8000c80 <__aeabi_ldivmod+0x84>
 8000c48:	f000 f840 	bl	8000ccc <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4240      	negs	r0, r0
 8000c58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c5c:	4252      	negs	r2, r2
 8000c5e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c62:	4770      	bx	lr
 8000c64:	4252      	negs	r2, r2
 8000c66:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c6a:	f000 f82f 	bl	8000ccc <__udivmoddi4>
 8000c6e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c76:	b004      	add	sp, #16
 8000c78:	4240      	negs	r0, r0
 8000c7a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7e:	4770      	bx	lr
 8000c80:	4252      	negs	r2, r2
 8000c82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c86:	f000 f821 	bl	8000ccc <__udivmoddi4>
 8000c8a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c92:	b004      	add	sp, #16
 8000c94:	4252      	negs	r2, r2
 8000c96:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c9a:	4770      	bx	lr

08000c9c <__aeabi_uldivmod>:
 8000c9c:	b953      	cbnz	r3, 8000cb4 <__aeabi_uldivmod+0x18>
 8000c9e:	b94a      	cbnz	r2, 8000cb4 <__aeabi_uldivmod+0x18>
 8000ca0:	2900      	cmp	r1, #0
 8000ca2:	bf08      	it	eq
 8000ca4:	2800      	cmpeq	r0, #0
 8000ca6:	bf1c      	itt	ne
 8000ca8:	f04f 31ff 	movne.w	r1, #4294967295
 8000cac:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb0:	f000 b970 	b.w	8000f94 <__aeabi_idiv0>
 8000cb4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cbc:	f000 f806 	bl	8000ccc <__udivmoddi4>
 8000cc0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc8:	b004      	add	sp, #16
 8000cca:	4770      	bx	lr

08000ccc <__udivmoddi4>:
 8000ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd0:	9e08      	ldr	r6, [sp, #32]
 8000cd2:	460d      	mov	r5, r1
 8000cd4:	4604      	mov	r4, r0
 8000cd6:	460f      	mov	r7, r1
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d14a      	bne.n	8000d72 <__udivmoddi4+0xa6>
 8000cdc:	428a      	cmp	r2, r1
 8000cde:	4694      	mov	ip, r2
 8000ce0:	d965      	bls.n	8000dae <__udivmoddi4+0xe2>
 8000ce2:	fab2 f382 	clz	r3, r2
 8000ce6:	b143      	cbz	r3, 8000cfa <__udivmoddi4+0x2e>
 8000ce8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cec:	f1c3 0220 	rsb	r2, r3, #32
 8000cf0:	409f      	lsls	r7, r3
 8000cf2:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf6:	4317      	orrs	r7, r2
 8000cf8:	409c      	lsls	r4, r3
 8000cfa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cfe:	fa1f f58c 	uxth.w	r5, ip
 8000d02:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d06:	0c22      	lsrs	r2, r4, #16
 8000d08:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d0c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d10:	fb01 f005 	mul.w	r0, r1, r5
 8000d14:	4290      	cmp	r0, r2
 8000d16:	d90a      	bls.n	8000d2e <__udivmoddi4+0x62>
 8000d18:	eb1c 0202 	adds.w	r2, ip, r2
 8000d1c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d20:	f080 811c 	bcs.w	8000f5c <__udivmoddi4+0x290>
 8000d24:	4290      	cmp	r0, r2
 8000d26:	f240 8119 	bls.w	8000f5c <__udivmoddi4+0x290>
 8000d2a:	3902      	subs	r1, #2
 8000d2c:	4462      	add	r2, ip
 8000d2e:	1a12      	subs	r2, r2, r0
 8000d30:	b2a4      	uxth	r4, r4
 8000d32:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d36:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d3a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3e:	fb00 f505 	mul.w	r5, r0, r5
 8000d42:	42a5      	cmp	r5, r4
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x90>
 8000d46:	eb1c 0404 	adds.w	r4, ip, r4
 8000d4a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d4e:	f080 8107 	bcs.w	8000f60 <__udivmoddi4+0x294>
 8000d52:	42a5      	cmp	r5, r4
 8000d54:	f240 8104 	bls.w	8000f60 <__udivmoddi4+0x294>
 8000d58:	4464      	add	r4, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d60:	1b64      	subs	r4, r4, r5
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11e      	cbz	r6, 8000d6e <__udivmoddi4+0xa2>
 8000d66:	40dc      	lsrs	r4, r3
 8000d68:	2300      	movs	r3, #0
 8000d6a:	e9c6 4300 	strd	r4, r3, [r6]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d908      	bls.n	8000d88 <__udivmoddi4+0xbc>
 8000d76:	2e00      	cmp	r6, #0
 8000d78:	f000 80ed 	beq.w	8000f56 <__udivmoddi4+0x28a>
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	e9c6 0500 	strd	r0, r5, [r6]
 8000d82:	4608      	mov	r0, r1
 8000d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d88:	fab3 f183 	clz	r1, r3
 8000d8c:	2900      	cmp	r1, #0
 8000d8e:	d149      	bne.n	8000e24 <__udivmoddi4+0x158>
 8000d90:	42ab      	cmp	r3, r5
 8000d92:	d302      	bcc.n	8000d9a <__udivmoddi4+0xce>
 8000d94:	4282      	cmp	r2, r0
 8000d96:	f200 80f8 	bhi.w	8000f8a <__udivmoddi4+0x2be>
 8000d9a:	1a84      	subs	r4, r0, r2
 8000d9c:	eb65 0203 	sbc.w	r2, r5, r3
 8000da0:	2001      	movs	r0, #1
 8000da2:	4617      	mov	r7, r2
 8000da4:	2e00      	cmp	r6, #0
 8000da6:	d0e2      	beq.n	8000d6e <__udivmoddi4+0xa2>
 8000da8:	e9c6 4700 	strd	r4, r7, [r6]
 8000dac:	e7df      	b.n	8000d6e <__udivmoddi4+0xa2>
 8000dae:	b902      	cbnz	r2, 8000db2 <__udivmoddi4+0xe6>
 8000db0:	deff      	udf	#255	; 0xff
 8000db2:	fab2 f382 	clz	r3, r2
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	f040 8090 	bne.w	8000edc <__udivmoddi4+0x210>
 8000dbc:	1a8a      	subs	r2, r1, r2
 8000dbe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc2:	fa1f fe8c 	uxth.w	lr, ip
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dcc:	fb07 2015 	mls	r0, r7, r5, r2
 8000dd0:	0c22      	lsrs	r2, r4, #16
 8000dd2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dd6:	fb0e f005 	mul.w	r0, lr, r5
 8000dda:	4290      	cmp	r0, r2
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x124>
 8000dde:	eb1c 0202 	adds.w	r2, ip, r2
 8000de2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x122>
 8000de8:	4290      	cmp	r0, r2
 8000dea:	f200 80cb 	bhi.w	8000f84 <__udivmoddi4+0x2b8>
 8000dee:	4645      	mov	r5, r8
 8000df0:	1a12      	subs	r2, r2, r0
 8000df2:	b2a4      	uxth	r4, r4
 8000df4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000df8:	fb07 2210 	mls	r2, r7, r0, r2
 8000dfc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e00:	fb0e fe00 	mul.w	lr, lr, r0
 8000e04:	45a6      	cmp	lr, r4
 8000e06:	d908      	bls.n	8000e1a <__udivmoddi4+0x14e>
 8000e08:	eb1c 0404 	adds.w	r4, ip, r4
 8000e0c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e10:	d202      	bcs.n	8000e18 <__udivmoddi4+0x14c>
 8000e12:	45a6      	cmp	lr, r4
 8000e14:	f200 80bb 	bhi.w	8000f8e <__udivmoddi4+0x2c2>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	eba4 040e 	sub.w	r4, r4, lr
 8000e1e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e22:	e79f      	b.n	8000d64 <__udivmoddi4+0x98>
 8000e24:	f1c1 0720 	rsb	r7, r1, #32
 8000e28:	408b      	lsls	r3, r1
 8000e2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e32:	fa05 f401 	lsl.w	r4, r5, r1
 8000e36:	fa20 f307 	lsr.w	r3, r0, r7
 8000e3a:	40fd      	lsrs	r5, r7
 8000e3c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e40:	4323      	orrs	r3, r4
 8000e42:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e46:	fa1f fe8c 	uxth.w	lr, ip
 8000e4a:	fb09 5518 	mls	r5, r9, r8, r5
 8000e4e:	0c1c      	lsrs	r4, r3, #16
 8000e50:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e54:	fb08 f50e 	mul.w	r5, r8, lr
 8000e58:	42a5      	cmp	r5, r4
 8000e5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5e:	fa00 f001 	lsl.w	r0, r0, r1
 8000e62:	d90b      	bls.n	8000e7c <__udivmoddi4+0x1b0>
 8000e64:	eb1c 0404 	adds.w	r4, ip, r4
 8000e68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e6c:	f080 8088 	bcs.w	8000f80 <__udivmoddi4+0x2b4>
 8000e70:	42a5      	cmp	r5, r4
 8000e72:	f240 8085 	bls.w	8000f80 <__udivmoddi4+0x2b4>
 8000e76:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7a:	4464      	add	r4, ip
 8000e7c:	1b64      	subs	r4, r4, r5
 8000e7e:	b29d      	uxth	r5, r3
 8000e80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e84:	fb09 4413 	mls	r4, r9, r3, r4
 8000e88:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e8c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e90:	45a6      	cmp	lr, r4
 8000e92:	d908      	bls.n	8000ea6 <__udivmoddi4+0x1da>
 8000e94:	eb1c 0404 	adds.w	r4, ip, r4
 8000e98:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e9c:	d26c      	bcs.n	8000f78 <__udivmoddi4+0x2ac>
 8000e9e:	45a6      	cmp	lr, r4
 8000ea0:	d96a      	bls.n	8000f78 <__udivmoddi4+0x2ac>
 8000ea2:	3b02      	subs	r3, #2
 8000ea4:	4464      	add	r4, ip
 8000ea6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000eaa:	fba3 9502 	umull	r9, r5, r3, r2
 8000eae:	eba4 040e 	sub.w	r4, r4, lr
 8000eb2:	42ac      	cmp	r4, r5
 8000eb4:	46c8      	mov	r8, r9
 8000eb6:	46ae      	mov	lr, r5
 8000eb8:	d356      	bcc.n	8000f68 <__udivmoddi4+0x29c>
 8000eba:	d053      	beq.n	8000f64 <__udivmoddi4+0x298>
 8000ebc:	b156      	cbz	r6, 8000ed4 <__udivmoddi4+0x208>
 8000ebe:	ebb0 0208 	subs.w	r2, r0, r8
 8000ec2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ec6:	fa04 f707 	lsl.w	r7, r4, r7
 8000eca:	40ca      	lsrs	r2, r1
 8000ecc:	40cc      	lsrs	r4, r1
 8000ece:	4317      	orrs	r7, r2
 8000ed0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000edc:	f1c3 0120 	rsb	r1, r3, #32
 8000ee0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ee4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ee8:	fa25 f101 	lsr.w	r1, r5, r1
 8000eec:	409d      	lsls	r5, r3
 8000eee:	432a      	orrs	r2, r5
 8000ef0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef4:	fa1f fe8c 	uxth.w	lr, ip
 8000ef8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000efc:	fb07 1510 	mls	r5, r7, r0, r1
 8000f00:	0c11      	lsrs	r1, r2, #16
 8000f02:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f06:	fb00 f50e 	mul.w	r5, r0, lr
 8000f0a:	428d      	cmp	r5, r1
 8000f0c:	fa04 f403 	lsl.w	r4, r4, r3
 8000f10:	d908      	bls.n	8000f24 <__udivmoddi4+0x258>
 8000f12:	eb1c 0101 	adds.w	r1, ip, r1
 8000f16:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1a:	d22f      	bcs.n	8000f7c <__udivmoddi4+0x2b0>
 8000f1c:	428d      	cmp	r5, r1
 8000f1e:	d92d      	bls.n	8000f7c <__udivmoddi4+0x2b0>
 8000f20:	3802      	subs	r0, #2
 8000f22:	4461      	add	r1, ip
 8000f24:	1b49      	subs	r1, r1, r5
 8000f26:	b292      	uxth	r2, r2
 8000f28:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f2c:	fb07 1115 	mls	r1, r7, r5, r1
 8000f30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f34:	fb05 f10e 	mul.w	r1, r5, lr
 8000f38:	4291      	cmp	r1, r2
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x282>
 8000f3c:	eb1c 0202 	adds.w	r2, ip, r2
 8000f40:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f44:	d216      	bcs.n	8000f74 <__udivmoddi4+0x2a8>
 8000f46:	4291      	cmp	r1, r2
 8000f48:	d914      	bls.n	8000f74 <__udivmoddi4+0x2a8>
 8000f4a:	3d02      	subs	r5, #2
 8000f4c:	4462      	add	r2, ip
 8000f4e:	1a52      	subs	r2, r2, r1
 8000f50:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f54:	e738      	b.n	8000dc8 <__udivmoddi4+0xfc>
 8000f56:	4631      	mov	r1, r6
 8000f58:	4630      	mov	r0, r6
 8000f5a:	e708      	b.n	8000d6e <__udivmoddi4+0xa2>
 8000f5c:	4639      	mov	r1, r7
 8000f5e:	e6e6      	b.n	8000d2e <__udivmoddi4+0x62>
 8000f60:	4610      	mov	r0, r2
 8000f62:	e6fb      	b.n	8000d5c <__udivmoddi4+0x90>
 8000f64:	4548      	cmp	r0, r9
 8000f66:	d2a9      	bcs.n	8000ebc <__udivmoddi4+0x1f0>
 8000f68:	ebb9 0802 	subs.w	r8, r9, r2
 8000f6c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f70:	3b01      	subs	r3, #1
 8000f72:	e7a3      	b.n	8000ebc <__udivmoddi4+0x1f0>
 8000f74:	4645      	mov	r5, r8
 8000f76:	e7ea      	b.n	8000f4e <__udivmoddi4+0x282>
 8000f78:	462b      	mov	r3, r5
 8000f7a:	e794      	b.n	8000ea6 <__udivmoddi4+0x1da>
 8000f7c:	4640      	mov	r0, r8
 8000f7e:	e7d1      	b.n	8000f24 <__udivmoddi4+0x258>
 8000f80:	46d0      	mov	r8, sl
 8000f82:	e77b      	b.n	8000e7c <__udivmoddi4+0x1b0>
 8000f84:	3d02      	subs	r5, #2
 8000f86:	4462      	add	r2, ip
 8000f88:	e732      	b.n	8000df0 <__udivmoddi4+0x124>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e70a      	b.n	8000da4 <__udivmoddi4+0xd8>
 8000f8e:	4464      	add	r4, ip
 8000f90:	3802      	subs	r0, #2
 8000f92:	e742      	b.n	8000e1a <__udivmoddi4+0x14e>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <writeReg>:
uint8_t performSingleRefCalibration(uint8_t vhv_init_byte);
//---------------------------------------------------------
// I2C communication Functions
//---------------------------------------------------------
// Write an 8-bit register
void writeReg(uint8_t reg, uint8_t value) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	460a      	mov	r2, r1
 8000fa2:	71fb      	strb	r3, [r7, #7]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	71bb      	strb	r3, [r7, #6]
	int status = i2c1_WriteRegBuffer((uint16_t)g_i2cAddr,reg,&value,1);
 8000fa8:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <writeReg+0x34>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	b298      	uxth	r0, r3
 8000fae:	1dba      	adds	r2, r7, #6
 8000fb0:	79f9      	ldrb	r1, [r7, #7]
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	f000 ff3c 	bl	8001e30 <i2c1_WriteRegBuffer>
 8000fb8:	60f8      	str	r0, [r7, #12]
	printf("write reg return status : %d\r\n", status);
 8000fba:	68f9      	ldr	r1, [r7, #12]
 8000fbc:	4804      	ldr	r0, [pc, #16]	; (8000fd0 <writeReg+0x38>)
 8000fbe:	f019 f86b 	bl	801a098 <iprintf>
}
 8000fc2:	bf00      	nop
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000000 	.word	0x20000000
 8000fd0:	0801b3c8 	.word	0x0801b3c8

08000fd4 <writeReg16Bit>:

// Write a 16-bit register
void writeReg16Bit(uint8_t reg, uint16_t value){
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	460a      	mov	r2, r1
 8000fde:	71fb      	strb	r3, [r7, #7]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	80bb      	strh	r3, [r7, #4]
	uint8_t tab[2];
	tab[0]= ((value >> 8));
 8000fe4:	88bb      	ldrh	r3, [r7, #4]
 8000fe6:	0a1b      	lsrs	r3, r3, #8
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	733b      	strb	r3, [r7, #12]
	tab[1] = ((value ) & 0xFF);
 8000fee:	88bb      	ldrh	r3, [r7, #4]
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	737b      	strb	r3, [r7, #13]
	i2c1_WriteRegBuffer((uint16_t)g_i2cAddr,reg,tab,2);
 8000ff4:	4b06      	ldr	r3, [pc, #24]	; (8001010 <writeReg16Bit+0x3c>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	b298      	uxth	r0, r3
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	79f9      	ldrb	r1, [r7, #7]
 8001000:	2302      	movs	r3, #2
 8001002:	f000 ff15 	bl	8001e30 <i2c1_WriteRegBuffer>
}
 8001006:	bf00      	nop
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000000 	.word	0x20000000

08001014 <readReg>:
		tab[0] = ((value ) & 0xFF);
		i2c1_WriteRegBuffer((uint16_t)g_i2cAddr,reg,tab,4);
}

// Read an 8-bit register
uint8_t readReg(uint8_t reg) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
  	uint8_t value=0;
 800101e:	2300      	movs	r3, #0
 8001020:	73fb      	strb	r3, [r7, #15]
  	i2c1_ReadRegBuffer((uint16_t)g_i2cAddr,reg,&value,1);
 8001022:	4b07      	ldr	r3, [pc, #28]	; (8001040 <readReg+0x2c>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	b298      	uxth	r0, r3
 8001028:	f107 020f 	add.w	r2, r7, #15
 800102c:	79f9      	ldrb	r1, [r7, #7]
 800102e:	2301      	movs	r3, #1
 8001030:	f000 fecc 	bl	8001dcc <i2c1_ReadRegBuffer>
  	return value;
 8001034:	7bfb      	ldrb	r3, [r7, #15]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000000 	.word	0x20000000

08001044 <readReg16Bit>:

// Read a 16-bit register
uint16_t readReg16Bit(uint8_t reg) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
	uint8_t tab[2];
	i2c1_ReadRegBuffer((uint16_t)g_i2cAddr,reg,tab,2);
 800104e:	4b0b      	ldr	r3, [pc, #44]	; (800107c <readReg16Bit+0x38>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	b298      	uxth	r0, r3
 8001054:	f107 020c 	add.w	r2, r7, #12
 8001058:	79f9      	ldrb	r1, [r7, #7]
 800105a:	2302      	movs	r3, #2
 800105c:	f000 feb6 	bl	8001dcc <i2c1_ReadRegBuffer>
  	uint16_t value= ((uint16_t)tab[0] << 8) | (uint16_t)tab[1];
 8001060:	7b3b      	ldrb	r3, [r7, #12]
 8001062:	021b      	lsls	r3, r3, #8
 8001064:	b21a      	sxth	r2, r3
 8001066:	7b7b      	ldrb	r3, [r7, #13]
 8001068:	b21b      	sxth	r3, r3
 800106a:	4313      	orrs	r3, r2
 800106c:	b21b      	sxth	r3, r3
 800106e:	81fb      	strh	r3, [r7, #14]
  	return value;
 8001070:	89fb      	ldrh	r3, [r7, #14]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000000 	.word	0x20000000

08001080 <initVL53L0X>:
// (VL53L0X_PerformRefSpadManagement()), since the API user manual says that it
// is performed by ST on the bare modules; it seems like that should work well
// enough unless a cover glass is added.
// If io_2v8 (optional) is true or not given, the sensor is configured for 2V8
// mode.
uint8_t initVL53L0X( ){
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
    writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
    readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01); // set bit 0
  }

  // "Set I2C standard mode"
  writeReg(0x88, 0x00);
 8001084:	2100      	movs	r1, #0
 8001086:	2088      	movs	r0, #136	; 0x88
 8001088:	f7ff ff86 	bl	8000f98 <writeReg>

  writeReg(0x80, 0x01);
 800108c:	2101      	movs	r1, #1
 800108e:	2080      	movs	r0, #128	; 0x80
 8001090:	f7ff ff82 	bl	8000f98 <writeReg>
  writeReg(0xFF, 0x01);
 8001094:	2101      	movs	r1, #1
 8001096:	20ff      	movs	r0, #255	; 0xff
 8001098:	f7ff ff7e 	bl	8000f98 <writeReg>
  writeReg(0x00, 0x00);
 800109c:	2100      	movs	r1, #0
 800109e:	2000      	movs	r0, #0
 80010a0:	f7ff ff7a 	bl	8000f98 <writeReg>
  g_stopVariable = readReg(0x91);
 80010a4:	2091      	movs	r0, #145	; 0x91
 80010a6:	f7ff ffb5 	bl	8001014 <readReg>
 80010aa:	4603      	mov	r3, r0
 80010ac:	461a      	mov	r2, r3
 80010ae:	4bd5      	ldr	r3, [pc, #852]	; (8001404 <initVL53L0X+0x384>)
 80010b0:	701a      	strb	r2, [r3, #0]
  writeReg(0x00, 0x01);
 80010b2:	2101      	movs	r1, #1
 80010b4:	2000      	movs	r0, #0
 80010b6:	f7ff ff6f 	bl	8000f98 <writeReg>
  writeReg(0xFF, 0x00);
 80010ba:	2100      	movs	r1, #0
 80010bc:	20ff      	movs	r0, #255	; 0xff
 80010be:	f7ff ff6b 	bl	8000f98 <writeReg>
  writeReg(0x80, 0x00);
 80010c2:	2100      	movs	r1, #0
 80010c4:	2080      	movs	r0, #128	; 0x80
 80010c6:	f7ff ff67 	bl	8000f98 <writeReg>

  // disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(MSRC_CONFIG_CONTROL, readReg(MSRC_CONFIG_CONTROL) | 0x12);
 80010ca:	2060      	movs	r0, #96	; 0x60
 80010cc:	f7ff ffa2 	bl	8001014 <readReg>
 80010d0:	4603      	mov	r3, r0
 80010d2:	f043 0312 	orr.w	r3, r3, #18
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4619      	mov	r1, r3
 80010da:	2060      	movs	r0, #96	; 0x60
 80010dc:	f7ff ff5c 	bl	8000f98 <writeReg>

  // set final range signal rate limit to 0.25 MCPS (million counts per second)
  setSignalRateLimit(0.25);
 80010e0:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 80010e4:	f000 f990 	bl	8001408 <setSignalRateLimit>

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 80010e8:	21ff      	movs	r1, #255	; 0xff
 80010ea:	2001      	movs	r0, #1
 80010ec:	f7ff ff54 	bl	8000f98 <writeReg>
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there

  // -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)

  writeReg(0xFF, 0x01);
 80010f0:	2101      	movs	r1, #1
 80010f2:	20ff      	movs	r0, #255	; 0xff
 80010f4:	f7ff ff50 	bl	8000f98 <writeReg>
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 80010f8:	2100      	movs	r1, #0
 80010fa:	204f      	movs	r0, #79	; 0x4f
 80010fc:	f7ff ff4c 	bl	8000f98 <writeReg>
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 8001100:	212c      	movs	r1, #44	; 0x2c
 8001102:	204e      	movs	r0, #78	; 0x4e
 8001104:	f7ff ff48 	bl	8000f98 <writeReg>
  writeReg(0xFF, 0x00);
 8001108:	2100      	movs	r1, #0
 800110a:	20ff      	movs	r0, #255	; 0xff
 800110c:	f7ff ff44 	bl	8000f98 <writeReg>
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 8001110:	21b4      	movs	r1, #180	; 0xb4
 8001112:	20b6      	movs	r0, #182	; 0xb6
 8001114:	f7ff ff40 	bl	8000f98 <writeReg>
  // -- VL53L0X_set_reference_spads() end

  // -- VL53L0X_load_tuning_settings() begin
  // DefaultTuningSettings from vl53l0x_tuning.h

  writeReg(0xFF, 0x01);
 8001118:	2101      	movs	r1, #1
 800111a:	20ff      	movs	r0, #255	; 0xff
 800111c:	f7ff ff3c 	bl	8000f98 <writeReg>
  writeReg(0x00, 0x00);
 8001120:	2100      	movs	r1, #0
 8001122:	2000      	movs	r0, #0
 8001124:	f7ff ff38 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x00);
 8001128:	2100      	movs	r1, #0
 800112a:	20ff      	movs	r0, #255	; 0xff
 800112c:	f7ff ff34 	bl	8000f98 <writeReg>
  writeReg(0x09, 0x00);
 8001130:	2100      	movs	r1, #0
 8001132:	2009      	movs	r0, #9
 8001134:	f7ff ff30 	bl	8000f98 <writeReg>
  writeReg(0x10, 0x00);
 8001138:	2100      	movs	r1, #0
 800113a:	2010      	movs	r0, #16
 800113c:	f7ff ff2c 	bl	8000f98 <writeReg>
  writeReg(0x11, 0x00);
 8001140:	2100      	movs	r1, #0
 8001142:	2011      	movs	r0, #17
 8001144:	f7ff ff28 	bl	8000f98 <writeReg>

  writeReg(0x24, 0x01);
 8001148:	2101      	movs	r1, #1
 800114a:	2024      	movs	r0, #36	; 0x24
 800114c:	f7ff ff24 	bl	8000f98 <writeReg>
  writeReg(0x25, 0xFF);
 8001150:	21ff      	movs	r1, #255	; 0xff
 8001152:	2025      	movs	r0, #37	; 0x25
 8001154:	f7ff ff20 	bl	8000f98 <writeReg>
  writeReg(0x75, 0x00);
 8001158:	2100      	movs	r1, #0
 800115a:	2075      	movs	r0, #117	; 0x75
 800115c:	f7ff ff1c 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x01);
 8001160:	2101      	movs	r1, #1
 8001162:	20ff      	movs	r0, #255	; 0xff
 8001164:	f7ff ff18 	bl	8000f98 <writeReg>
  writeReg(0x4E, 0x2C);
 8001168:	212c      	movs	r1, #44	; 0x2c
 800116a:	204e      	movs	r0, #78	; 0x4e
 800116c:	f7ff ff14 	bl	8000f98 <writeReg>
  writeReg(0x48, 0x00);
 8001170:	2100      	movs	r1, #0
 8001172:	2048      	movs	r0, #72	; 0x48
 8001174:	f7ff ff10 	bl	8000f98 <writeReg>
  writeReg(0x30, 0x20);
 8001178:	2120      	movs	r1, #32
 800117a:	2030      	movs	r0, #48	; 0x30
 800117c:	f7ff ff0c 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x00);
 8001180:	2100      	movs	r1, #0
 8001182:	20ff      	movs	r0, #255	; 0xff
 8001184:	f7ff ff08 	bl	8000f98 <writeReg>
  writeReg(0x30, 0x09);
 8001188:	2109      	movs	r1, #9
 800118a:	2030      	movs	r0, #48	; 0x30
 800118c:	f7ff ff04 	bl	8000f98 <writeReg>
  writeReg(0x54, 0x00);
 8001190:	2100      	movs	r1, #0
 8001192:	2054      	movs	r0, #84	; 0x54
 8001194:	f7ff ff00 	bl	8000f98 <writeReg>
  writeReg(0x31, 0x04);
 8001198:	2104      	movs	r1, #4
 800119a:	2031      	movs	r0, #49	; 0x31
 800119c:	f7ff fefc 	bl	8000f98 <writeReg>
  writeReg(0x32, 0x03);
 80011a0:	2103      	movs	r1, #3
 80011a2:	2032      	movs	r0, #50	; 0x32
 80011a4:	f7ff fef8 	bl	8000f98 <writeReg>
  writeReg(0x40, 0x83);
 80011a8:	2183      	movs	r1, #131	; 0x83
 80011aa:	2040      	movs	r0, #64	; 0x40
 80011ac:	f7ff fef4 	bl	8000f98 <writeReg>
  writeReg(0x46, 0x25);
 80011b0:	2125      	movs	r1, #37	; 0x25
 80011b2:	2046      	movs	r0, #70	; 0x46
 80011b4:	f7ff fef0 	bl	8000f98 <writeReg>
  writeReg(0x60, 0x00);
 80011b8:	2100      	movs	r1, #0
 80011ba:	2060      	movs	r0, #96	; 0x60
 80011bc:	f7ff feec 	bl	8000f98 <writeReg>
  writeReg(0x27, 0x00);
 80011c0:	2100      	movs	r1, #0
 80011c2:	2027      	movs	r0, #39	; 0x27
 80011c4:	f7ff fee8 	bl	8000f98 <writeReg>
  writeReg(0x50, 0x06);
 80011c8:	2106      	movs	r1, #6
 80011ca:	2050      	movs	r0, #80	; 0x50
 80011cc:	f7ff fee4 	bl	8000f98 <writeReg>
  writeReg(0x51, 0x00);
 80011d0:	2100      	movs	r1, #0
 80011d2:	2051      	movs	r0, #81	; 0x51
 80011d4:	f7ff fee0 	bl	8000f98 <writeReg>
  writeReg(0x52, 0x96);
 80011d8:	2196      	movs	r1, #150	; 0x96
 80011da:	2052      	movs	r0, #82	; 0x52
 80011dc:	f7ff fedc 	bl	8000f98 <writeReg>
  writeReg(0x56, 0x08);
 80011e0:	2108      	movs	r1, #8
 80011e2:	2056      	movs	r0, #86	; 0x56
 80011e4:	f7ff fed8 	bl	8000f98 <writeReg>
  writeReg(0x57, 0x30);
 80011e8:	2130      	movs	r1, #48	; 0x30
 80011ea:	2057      	movs	r0, #87	; 0x57
 80011ec:	f7ff fed4 	bl	8000f98 <writeReg>
  writeReg(0x61, 0x00);
 80011f0:	2100      	movs	r1, #0
 80011f2:	2061      	movs	r0, #97	; 0x61
 80011f4:	f7ff fed0 	bl	8000f98 <writeReg>
  writeReg(0x62, 0x00);
 80011f8:	2100      	movs	r1, #0
 80011fa:	2062      	movs	r0, #98	; 0x62
 80011fc:	f7ff fecc 	bl	8000f98 <writeReg>
  writeReg(0x64, 0x00);
 8001200:	2100      	movs	r1, #0
 8001202:	2064      	movs	r0, #100	; 0x64
 8001204:	f7ff fec8 	bl	8000f98 <writeReg>
  writeReg(0x65, 0x00);
 8001208:	2100      	movs	r1, #0
 800120a:	2065      	movs	r0, #101	; 0x65
 800120c:	f7ff fec4 	bl	8000f98 <writeReg>
  writeReg(0x66, 0xA0);
 8001210:	21a0      	movs	r1, #160	; 0xa0
 8001212:	2066      	movs	r0, #102	; 0x66
 8001214:	f7ff fec0 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x01);
 8001218:	2101      	movs	r1, #1
 800121a:	20ff      	movs	r0, #255	; 0xff
 800121c:	f7ff febc 	bl	8000f98 <writeReg>
  writeReg(0x22, 0x32);
 8001220:	2132      	movs	r1, #50	; 0x32
 8001222:	2022      	movs	r0, #34	; 0x22
 8001224:	f7ff feb8 	bl	8000f98 <writeReg>
  writeReg(0x47, 0x14);
 8001228:	2114      	movs	r1, #20
 800122a:	2047      	movs	r0, #71	; 0x47
 800122c:	f7ff feb4 	bl	8000f98 <writeReg>
  writeReg(0x49, 0xFF);
 8001230:	21ff      	movs	r1, #255	; 0xff
 8001232:	2049      	movs	r0, #73	; 0x49
 8001234:	f7ff feb0 	bl	8000f98 <writeReg>
  writeReg(0x4A, 0x00);
 8001238:	2100      	movs	r1, #0
 800123a:	204a      	movs	r0, #74	; 0x4a
 800123c:	f7ff feac 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x00);
 8001240:	2100      	movs	r1, #0
 8001242:	20ff      	movs	r0, #255	; 0xff
 8001244:	f7ff fea8 	bl	8000f98 <writeReg>
  writeReg(0x7A, 0x0A);
 8001248:	210a      	movs	r1, #10
 800124a:	207a      	movs	r0, #122	; 0x7a
 800124c:	f7ff fea4 	bl	8000f98 <writeReg>
  writeReg(0x7B, 0x00);
 8001250:	2100      	movs	r1, #0
 8001252:	207b      	movs	r0, #123	; 0x7b
 8001254:	f7ff fea0 	bl	8000f98 <writeReg>
  writeReg(0x78, 0x21);
 8001258:	2121      	movs	r1, #33	; 0x21
 800125a:	2078      	movs	r0, #120	; 0x78
 800125c:	f7ff fe9c 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x01);
 8001260:	2101      	movs	r1, #1
 8001262:	20ff      	movs	r0, #255	; 0xff
 8001264:	f7ff fe98 	bl	8000f98 <writeReg>
  writeReg(0x23, 0x34);
 8001268:	2134      	movs	r1, #52	; 0x34
 800126a:	2023      	movs	r0, #35	; 0x23
 800126c:	f7ff fe94 	bl	8000f98 <writeReg>
  writeReg(0x42, 0x00);
 8001270:	2100      	movs	r1, #0
 8001272:	2042      	movs	r0, #66	; 0x42
 8001274:	f7ff fe90 	bl	8000f98 <writeReg>
  writeReg(0x44, 0xFF);
 8001278:	21ff      	movs	r1, #255	; 0xff
 800127a:	2044      	movs	r0, #68	; 0x44
 800127c:	f7ff fe8c 	bl	8000f98 <writeReg>
  writeReg(0x45, 0x26);
 8001280:	2126      	movs	r1, #38	; 0x26
 8001282:	2045      	movs	r0, #69	; 0x45
 8001284:	f7ff fe88 	bl	8000f98 <writeReg>
  writeReg(0x46, 0x05);
 8001288:	2105      	movs	r1, #5
 800128a:	2046      	movs	r0, #70	; 0x46
 800128c:	f7ff fe84 	bl	8000f98 <writeReg>
  writeReg(0x40, 0x40);
 8001290:	2140      	movs	r1, #64	; 0x40
 8001292:	2040      	movs	r0, #64	; 0x40
 8001294:	f7ff fe80 	bl	8000f98 <writeReg>
  writeReg(0x0E, 0x06);
 8001298:	2106      	movs	r1, #6
 800129a:	200e      	movs	r0, #14
 800129c:	f7ff fe7c 	bl	8000f98 <writeReg>
  writeReg(0x20, 0x1A);
 80012a0:	211a      	movs	r1, #26
 80012a2:	2020      	movs	r0, #32
 80012a4:	f7ff fe78 	bl	8000f98 <writeReg>
  writeReg(0x43, 0x40);
 80012a8:	2140      	movs	r1, #64	; 0x40
 80012aa:	2043      	movs	r0, #67	; 0x43
 80012ac:	f7ff fe74 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x00);
 80012b0:	2100      	movs	r1, #0
 80012b2:	20ff      	movs	r0, #255	; 0xff
 80012b4:	f7ff fe70 	bl	8000f98 <writeReg>
  writeReg(0x34, 0x03);
 80012b8:	2103      	movs	r1, #3
 80012ba:	2034      	movs	r0, #52	; 0x34
 80012bc:	f7ff fe6c 	bl	8000f98 <writeReg>
  writeReg(0x35, 0x44);
 80012c0:	2144      	movs	r1, #68	; 0x44
 80012c2:	2035      	movs	r0, #53	; 0x35
 80012c4:	f7ff fe68 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x01);
 80012c8:	2101      	movs	r1, #1
 80012ca:	20ff      	movs	r0, #255	; 0xff
 80012cc:	f7ff fe64 	bl	8000f98 <writeReg>
  writeReg(0x31, 0x04);
 80012d0:	2104      	movs	r1, #4
 80012d2:	2031      	movs	r0, #49	; 0x31
 80012d4:	f7ff fe60 	bl	8000f98 <writeReg>
  writeReg(0x4B, 0x09);
 80012d8:	2109      	movs	r1, #9
 80012da:	204b      	movs	r0, #75	; 0x4b
 80012dc:	f7ff fe5c 	bl	8000f98 <writeReg>
  writeReg(0x4C, 0x05);
 80012e0:	2105      	movs	r1, #5
 80012e2:	204c      	movs	r0, #76	; 0x4c
 80012e4:	f7ff fe58 	bl	8000f98 <writeReg>
  writeReg(0x4D, 0x04);
 80012e8:	2104      	movs	r1, #4
 80012ea:	204d      	movs	r0, #77	; 0x4d
 80012ec:	f7ff fe54 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x00);
 80012f0:	2100      	movs	r1, #0
 80012f2:	20ff      	movs	r0, #255	; 0xff
 80012f4:	f7ff fe50 	bl	8000f98 <writeReg>
  writeReg(0x44, 0x00);
 80012f8:	2100      	movs	r1, #0
 80012fa:	2044      	movs	r0, #68	; 0x44
 80012fc:	f7ff fe4c 	bl	8000f98 <writeReg>
  writeReg(0x45, 0x20);
 8001300:	2120      	movs	r1, #32
 8001302:	2045      	movs	r0, #69	; 0x45
 8001304:	f7ff fe48 	bl	8000f98 <writeReg>
  writeReg(0x47, 0x08);
 8001308:	2108      	movs	r1, #8
 800130a:	2047      	movs	r0, #71	; 0x47
 800130c:	f7ff fe44 	bl	8000f98 <writeReg>
  writeReg(0x48, 0x28);
 8001310:	2128      	movs	r1, #40	; 0x28
 8001312:	2048      	movs	r0, #72	; 0x48
 8001314:	f7ff fe40 	bl	8000f98 <writeReg>
  writeReg(0x67, 0x00);
 8001318:	2100      	movs	r1, #0
 800131a:	2067      	movs	r0, #103	; 0x67
 800131c:	f7ff fe3c 	bl	8000f98 <writeReg>
  writeReg(0x70, 0x04);
 8001320:	2104      	movs	r1, #4
 8001322:	2070      	movs	r0, #112	; 0x70
 8001324:	f7ff fe38 	bl	8000f98 <writeReg>
  writeReg(0x71, 0x01);
 8001328:	2101      	movs	r1, #1
 800132a:	2071      	movs	r0, #113	; 0x71
 800132c:	f7ff fe34 	bl	8000f98 <writeReg>
  writeReg(0x72, 0xFE);
 8001330:	21fe      	movs	r1, #254	; 0xfe
 8001332:	2072      	movs	r0, #114	; 0x72
 8001334:	f7ff fe30 	bl	8000f98 <writeReg>
  writeReg(0x76, 0x00);
 8001338:	2100      	movs	r1, #0
 800133a:	2076      	movs	r0, #118	; 0x76
 800133c:	f7ff fe2c 	bl	8000f98 <writeReg>
  writeReg(0x77, 0x00);
 8001340:	2100      	movs	r1, #0
 8001342:	2077      	movs	r0, #119	; 0x77
 8001344:	f7ff fe28 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x01);
 8001348:	2101      	movs	r1, #1
 800134a:	20ff      	movs	r0, #255	; 0xff
 800134c:	f7ff fe24 	bl	8000f98 <writeReg>
  writeReg(0x0D, 0x01);
 8001350:	2101      	movs	r1, #1
 8001352:	200d      	movs	r0, #13
 8001354:	f7ff fe20 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x00);
 8001358:	2100      	movs	r1, #0
 800135a:	20ff      	movs	r0, #255	; 0xff
 800135c:	f7ff fe1c 	bl	8000f98 <writeReg>
  writeReg(0x80, 0x01);
 8001360:	2101      	movs	r1, #1
 8001362:	2080      	movs	r0, #128	; 0x80
 8001364:	f7ff fe18 	bl	8000f98 <writeReg>
  writeReg(0x01, 0xF8);
 8001368:	21f8      	movs	r1, #248	; 0xf8
 800136a:	2001      	movs	r0, #1
 800136c:	f7ff fe14 	bl	8000f98 <writeReg>

  writeReg(0xFF, 0x01);
 8001370:	2101      	movs	r1, #1
 8001372:	20ff      	movs	r0, #255	; 0xff
 8001374:	f7ff fe10 	bl	8000f98 <writeReg>
  writeReg(0x8E, 0x01);
 8001378:	2101      	movs	r1, #1
 800137a:	208e      	movs	r0, #142	; 0x8e
 800137c:	f7ff fe0c 	bl	8000f98 <writeReg>
  writeReg(0x00, 0x01);
 8001380:	2101      	movs	r1, #1
 8001382:	2000      	movs	r0, #0
 8001384:	f7ff fe08 	bl	8000f98 <writeReg>
  writeReg(0xFF, 0x00);
 8001388:	2100      	movs	r1, #0
 800138a:	20ff      	movs	r0, #255	; 0xff
 800138c:	f7ff fe04 	bl	8000f98 <writeReg>
  writeReg(0x80, 0x00);
 8001390:	2100      	movs	r1, #0
 8001392:	2080      	movs	r0, #128	; 0x80
 8001394:	f7ff fe00 	bl	8000f98 <writeReg>
  // -- VL53L0X_load_tuning_settings() end

  // "Set interrupt config to new sample ready"
  // -- VL53L0X_SetGpioConfig() begin

  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 8001398:	2104      	movs	r1, #4
 800139a:	200a      	movs	r0, #10
 800139c:	f7ff fdfc 	bl	8000f98 <writeReg>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 80013a0:	2084      	movs	r0, #132	; 0x84
 80013a2:	f7ff fe37 	bl	8001014 <readReg>
 80013a6:	4603      	mov	r3, r0
 80013a8:	f023 0310 	bic.w	r3, r3, #16
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	4619      	mov	r1, r3
 80013b0:	2084      	movs	r0, #132	; 0x84
 80013b2:	f7ff fdf1 	bl	8000f98 <writeReg>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80013b6:	2101      	movs	r1, #1
 80013b8:	200b      	movs	r0, #11
 80013ba:	f7ff fded 	bl	8000f98 <writeReg>
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80013be:	21e8      	movs	r1, #232	; 0xe8
 80013c0:	2001      	movs	r0, #1
 80013c2:	f7ff fde9 	bl	8000f98 <writeReg>

  // VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

  // -- VL53L0X_perform_vhv_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 80013c6:	2101      	movs	r1, #1
 80013c8:	2001      	movs	r0, #1
 80013ca:	f7ff fde5 	bl	8000f98 <writeReg>
  if (performSingleRefCalibration(0x40)) { return 1; }
 80013ce:	2040      	movs	r0, #64	; 0x40
 80013d0:	f000 f886 	bl	80014e0 <performSingleRefCalibration>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <initVL53L0X+0x35e>
 80013da:	2301      	movs	r3, #1
 80013dc:	e010      	b.n	8001400 <initVL53L0X+0x380>

  // -- VL53L0X_perform_vhv_calibration() end

  // -- VL53L0X_perform_phase_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 80013de:	2102      	movs	r1, #2
 80013e0:	2001      	movs	r0, #1
 80013e2:	f7ff fdd9 	bl	8000f98 <writeReg>
  if (performSingleRefCalibration(0x00)) { return 1; }
 80013e6:	2000      	movs	r0, #0
 80013e8:	f000 f87a 	bl	80014e0 <performSingleRefCalibration>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <initVL53L0X+0x376>
 80013f2:	2301      	movs	r3, #1
 80013f4:	e004      	b.n	8001400 <initVL53L0X+0x380>

  // -- VL53L0X_perform_phase_calibration() end

  // "restore the previous Sequence Config"
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80013f6:	21e8      	movs	r1, #232	; 0xe8
 80013f8:	2001      	movs	r0, #1
 80013fa:	f7ff fdcd 	bl	8000f98 <writeReg>

  // VL53L0X_PerformRefCalibration() end

  return 0;
 80013fe:	2300      	movs	r3, #0
}
 8001400:	4618      	mov	r0, r3
 8001402:	bd80      	pop	{r7, pc}
 8001404:	2000010c 	.word	0x2000010c

08001408 <setSignalRateLimit>:
// Setting a lower limit increases the potential range of the sensor but also
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
uint8_t setSignalRateLimit(float limit_Mcps)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	ed87 0a01 	vstr	s0, [r7, #4]
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 8001412:	edd7 7a01 	vldr	s15, [r7, #4]
 8001416:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800141a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800141e:	d40a      	bmi.n	8001436 <setSignalRateLimit+0x2e>
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f7ff f8a9 	bl	8000578 <__aeabi_f2d>
 8001426:	a311      	add	r3, pc, #68	; (adr r3, 800146c <setSignalRateLimit+0x64>)
 8001428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142c:	f7ff fb8c 	bl	8000b48 <__aeabi_dcmpgt>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <setSignalRateLimit+0x32>
 8001436:	2300      	movs	r3, #0
 8001438:	e00f      	b.n	800145a <setSignalRateLimit+0x52>

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 800143a:	edd7 7a01 	vldr	s15, [r7, #4]
 800143e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001468 <setSignalRateLimit+0x60>
 8001442:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001446:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800144a:	ee17 3a90 	vmov	r3, s15
 800144e:	b29b      	uxth	r3, r3
 8001450:	4619      	mov	r1, r3
 8001452:	2044      	movs	r0, #68	; 0x44
 8001454:	f7ff fdbe 	bl	8000fd4 <writeReg16Bit>
  return 0;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	f3af 8000 	nop.w
 8001468:	43000000 	.word	0x43000000
 800146c:	0a3d70a4 	.word	0x0a3d70a4
 8001470:	407fffd7 	.word	0x407fffd7

08001474 <readRangeSingleMillimeters>:

// Performs a single-shot range measurement and returns the reading in
// millimeters
// based on VL53L0X_PerformSingleRangingMeasurement()
// extraStats provides additional info for this measurment. Set to 0 if not needed.
uint16_t readRangeSingleMillimeters( /*statInfo_t *extraStats */) {
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
  writeReg(0x80, 0x01);
 800147a:	2101      	movs	r1, #1
 800147c:	2080      	movs	r0, #128	; 0x80
 800147e:	f7ff fd8b 	bl	8000f98 <writeReg>
  writeReg(0xFF, 0x01);
 8001482:	2101      	movs	r1, #1
 8001484:	20ff      	movs	r0, #255	; 0xff
 8001486:	f7ff fd87 	bl	8000f98 <writeReg>
  writeReg(0x00, 0x00);
 800148a:	2100      	movs	r1, #0
 800148c:	2000      	movs	r0, #0
 800148e:	f7ff fd83 	bl	8000f98 <writeReg>
  writeReg(0x91, g_stopVariable);
 8001492:	4b12      	ldr	r3, [pc, #72]	; (80014dc <readRangeSingleMillimeters+0x68>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	4619      	mov	r1, r3
 8001498:	2091      	movs	r0, #145	; 0x91
 800149a:	f7ff fd7d 	bl	8000f98 <writeReg>
  writeReg(0x00, 0x01);
 800149e:	2101      	movs	r1, #1
 80014a0:	2000      	movs	r0, #0
 80014a2:	f7ff fd79 	bl	8000f98 <writeReg>
  writeReg(0xFF, 0x00);
 80014a6:	2100      	movs	r1, #0
 80014a8:	20ff      	movs	r0, #255	; 0xff
 80014aa:	f7ff fd75 	bl	8000f98 <writeReg>
  writeReg(0x80, 0x00);
 80014ae:	2100      	movs	r1, #0
 80014b0:	2080      	movs	r0, #128	; 0x80
 80014b2:	f7ff fd71 	bl	8000f98 <writeReg>
  writeReg(SYSRANGE_START, 0x01);
 80014b6:	2101      	movs	r1, #1
 80014b8:	2000      	movs	r0, #0
 80014ba:	f7ff fd6d 	bl	8000f98 <writeReg>
	  while (readReg(SYSRANGE_START) & 0x01){};
	  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0){};
  }
  // assumptions: Linearity Corrective Gain is 1000 (default);
  // fractional ranging is not enabled
  temp = readReg16Bit(RESULT_RANGE_STATUS + 10);
 80014be:	201e      	movs	r0, #30
 80014c0:	f7ff fdc0 	bl	8001044 <readReg16Bit>
 80014c4:	4603      	mov	r3, r0
 80014c6:	80fb      	strh	r3, [r7, #6]
  temp+=0;

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80014c8:	2101      	movs	r1, #1
 80014ca:	200b      	movs	r0, #11
 80014cc:	f7ff fd64 	bl	8000f98 <writeReg>
  return temp;
 80014d0:	88fb      	ldrh	r3, [r7, #6]
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	2000010c 	.word	0x2000010c

080014e0 <performSingleRefCalibration>:


// based on VL53L0X_perform_single_ref_calibration()
uint8_t performSingleRefCalibration(uint8_t vhv_init_byte)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	4619      	mov	r1, r3
 80014f4:	2000      	movs	r0, #0
 80014f6:	f7ff fd4f 	bl	8000f98 <writeReg>

  if (ACTIVE_WHILE)
	  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0){};

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80014fa:	2101      	movs	r1, #1
 80014fc:	200b      	movs	r0, #11
 80014fe:	f7ff fd4b 	bl	8000f98 <writeReg>

  writeReg(SYSRANGE_START, 0x00);
 8001502:	2100      	movs	r1, #0
 8001504:	2000      	movs	r0, #0
 8001506:	f7ff fd47 	bl	8000f98 <writeReg>

  return 0;
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <captDistIR_Init>:
//=================================================================
//			ADC INIT FOR IR SENSOR SHARP GP2D12
//=================================================================

void  captDistIR_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
	adcHandle.Instance		= ADC1;
 8001518:	4b15      	ldr	r3, [pc, #84]	; (8001570 <captDistIR_Init+0x5c>)
 800151a:	4a16      	ldr	r2, [pc, #88]	; (8001574 <captDistIR_Init+0x60>)
 800151c:	601a      	str	r2, [r3, #0]

	adcHandle.Init.ClockPrescaler = ADC_CLOCKPRESCALER_PCLK_DIV2;
 800151e:	4b14      	ldr	r3, [pc, #80]	; (8001570 <captDistIR_Init+0x5c>)
 8001520:	2200      	movs	r2, #0
 8001522:	605a      	str	r2, [r3, #4]
	adcHandle.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001524:	4b12      	ldr	r3, [pc, #72]	; (8001570 <captDistIR_Init+0x5c>)
 8001526:	2200      	movs	r2, #0
 8001528:	60da      	str	r2, [r3, #12]
	adcHandle.Init.Resolution = ADC_RESOLUTION12b;
 800152a:	4b11      	ldr	r3, [pc, #68]	; (8001570 <captDistIR_Init+0x5c>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
	// Don't do continuous conversions - do them on demand
	adcHandle.Init.ContinuousConvMode    = DISABLE;  // Continuous mode disabled to have only 1 conversion at each conversion trig
 8001530:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <captDistIR_Init+0x5c>)
 8001532:	2200      	movs	r2, #0
 8001534:	619a      	str	r2, [r3, #24]
	// Disable the scan conversion so we do one at a time */
	adcHandle.Init.ScanConvMode = DISABLE;
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <captDistIR_Init+0x5c>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
	//Say how many channels would be used by the sequencer
	adcHandle.Init.NbrOfConversion = 2;
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <captDistIR_Init+0x5c>)
 800153e:	2202      	movs	r2, #2
 8001540:	621a      	str	r2, [r3, #32]
	adcHandle.Init.DiscontinuousConvMode = DISABLE;  // Parameter discarded because sequencer is disabled
 8001542:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <captDistIR_Init+0x5c>)
 8001544:	2200      	movs	r2, #0
 8001546:	625a      	str	r2, [r3, #36]	; 0x24
	adcHandle.Init.NbrOfDiscConversion = 2;
 8001548:	4b09      	ldr	r3, [pc, #36]	; (8001570 <captDistIR_Init+0x5c>)
 800154a:	2202      	movs	r2, #2
 800154c:	629a      	str	r2, [r3, #40]	; 0x28
	adcHandle.Init.ExternalTrigConvEdge =  ADC_EXTERNALTRIGCONVEDGE_NONE ;
 800154e:	4b08      	ldr	r3, [pc, #32]	; (8001570 <captDistIR_Init+0x5c>)
 8001550:	2200      	movs	r2, #0
 8001552:	62da      	str	r2, [r3, #44]	; 0x2c
	//Start conversion by software, not an external trigger
	adcHandle.Init.ExternalTrigConv = 0;
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <captDistIR_Init+0x5c>)
 8001556:	2200      	movs	r2, #0
 8001558:	631a      	str	r2, [r3, #48]	; 0x30
	adcHandle.Init.DMAContinuousRequests = DISABLE;
 800155a:	4b05      	ldr	r3, [pc, #20]	; (8001570 <captDistIR_Init+0x5c>)
 800155c:	2200      	movs	r2, #0
 800155e:	61da      	str	r2, [r3, #28]
	adcHandle.Init.EOCSelection = DISABLE;
 8001560:	4b03      	ldr	r3, [pc, #12]	; (8001570 <captDistIR_Init+0x5c>)
 8001562:	2200      	movs	r2, #0
 8001564:	615a      	str	r2, [r3, #20]

	HAL_ADC_Init(&adcHandle);
 8001566:	4802      	ldr	r0, [pc, #8]	; (8001570 <captDistIR_Init+0x5c>)
 8001568:	f003 fc2c 	bl	8004dc4 <HAL_ADC_Init>
}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20000110 	.word	0x20000110
 8001574:	40012000 	.word	0x40012000

08001578 <captDistIR_Get>:
//=================================================================
//			IR GET (POLL METHOD)
//=================================================================

int  captDistIR_Get(int* tab)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	sConfig.Channel      = ADC_CHANNEL_4;
 8001580:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <captDistIR_Get+0x80>)
 8001582:	2204      	movs	r2, #4
 8001584:	601a      	str	r2, [r3, #0]
	sConfig.Rank         = 1;
 8001586:	4b1c      	ldr	r3, [pc, #112]	; (80015f8 <captDistIR_Get+0x80>)
 8001588:	2201      	movs	r2, #1
 800158a:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800158c:	4b1a      	ldr	r3, [pc, #104]	; (80015f8 <captDistIR_Get+0x80>)
 800158e:	2203      	movs	r2, #3
 8001590:	609a      	str	r2, [r3, #8]
	HAL_ADC_ConfigChannel(&adcHandle, &sConfig);
 8001592:	4919      	ldr	r1, [pc, #100]	; (80015f8 <captDistIR_Get+0x80>)
 8001594:	4819      	ldr	r0, [pc, #100]	; (80015fc <captDistIR_Get+0x84>)
 8001596:	f003 fd01 	bl	8004f9c <HAL_ADC_ConfigChannel>

	HAL_ADC_Start(&adcHandle);					//Start the conversion
 800159a:	4818      	ldr	r0, [pc, #96]	; (80015fc <captDistIR_Get+0x84>)
 800159c:	f003 fc46 	bl	8004e2c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&adcHandle,10);	//Processing the conversion
 80015a0:	210a      	movs	r1, #10
 80015a2:	4816      	ldr	r0, [pc, #88]	; (80015fc <captDistIR_Get+0x84>)
 80015a4:	f003 fcae 	bl	8004f04 <HAL_ADC_PollForConversion>
	tab[0]=HAL_ADC_GetValue(&adcHandle); 		//Return the converted data
 80015a8:	4814      	ldr	r0, [pc, #80]	; (80015fc <captDistIR_Get+0x84>)
 80015aa:	f003 fcea 	bl	8004f82 <HAL_ADC_GetValue>
 80015ae:	4603      	mov	r3, r0
 80015b0:	461a      	mov	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	601a      	str	r2, [r3, #0]

	sConfig.Channel      = ADC_CHANNEL_8;
 80015b6:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <captDistIR_Get+0x80>)
 80015b8:	2208      	movs	r2, #8
 80015ba:	601a      	str	r2, [r3, #0]
	sConfig.Rank         = 1;
 80015bc:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <captDistIR_Get+0x80>)
 80015be:	2201      	movs	r2, #1
 80015c0:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80015c2:	4b0d      	ldr	r3, [pc, #52]	; (80015f8 <captDistIR_Get+0x80>)
 80015c4:	2203      	movs	r2, #3
 80015c6:	609a      	str	r2, [r3, #8]
	HAL_ADC_ConfigChannel(&adcHandle, &sConfig);
 80015c8:	490b      	ldr	r1, [pc, #44]	; (80015f8 <captDistIR_Get+0x80>)
 80015ca:	480c      	ldr	r0, [pc, #48]	; (80015fc <captDistIR_Get+0x84>)
 80015cc:	f003 fce6 	bl	8004f9c <HAL_ADC_ConfigChannel>

	HAL_ADC_Start(&adcHandle);						//Start the conversion
 80015d0:	480a      	ldr	r0, [pc, #40]	; (80015fc <captDistIR_Get+0x84>)
 80015d2:	f003 fc2b 	bl	8004e2c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&adcHandle,10);		//Processing the conversion
 80015d6:	210a      	movs	r1, #10
 80015d8:	4808      	ldr	r0, [pc, #32]	; (80015fc <captDistIR_Get+0x84>)
 80015da:	f003 fc93 	bl	8004f04 <HAL_ADC_PollForConversion>
	tab[1]=HAL_ADC_GetValue(&adcHandle); 			//Return the converted data
 80015de:	4807      	ldr	r0, [pc, #28]	; (80015fc <captDistIR_Get+0x84>)
 80015e0:	f003 fccf 	bl	8004f82 <HAL_ADC_GetValue>
 80015e4:	4602      	mov	r2, r0
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	3304      	adds	r3, #4
 80015ea:	601a      	str	r2, [r3, #0]

	return 0;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000154 	.word	0x20000154
 80015fc:	20000110 	.word	0x20000110

08001600 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	; 0x28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001608:	2300      	movs	r3, #0
 800160a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800160c:	f00b fbac 	bl	800cd68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001610:	4b58      	ldr	r3, [pc, #352]	; (8001774 <pvPortMallocMicroROS+0x174>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d101      	bne.n	800161c <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8001618:	f000 f98c 	bl	8001934 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800161c:	4b56      	ldr	r3, [pc, #344]	; (8001778 <pvPortMallocMicroROS+0x178>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4013      	ands	r3, r2
 8001624:	2b00      	cmp	r3, #0
 8001626:	f040 808e 	bne.w	8001746 <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d01d      	beq.n	800166c <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8001630:	2208      	movs	r2, #8
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4413      	add	r3, r2
 8001636:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	2b00      	cmp	r3, #0
 8001640:	d014      	beq.n	800166c <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f023 0307 	bic.w	r3, r3, #7
 8001648:	3308      	adds	r3, #8
 800164a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	2b00      	cmp	r3, #0
 8001654:	d00a      	beq.n	800166c <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800165a:	f383 8811 	msr	BASEPRI, r3
 800165e:	f3bf 8f6f 	isb	sy
 8001662:	f3bf 8f4f 	dsb	sy
 8001666:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001668:	bf00      	nop
 800166a:	e7fe      	b.n	800166a <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d069      	beq.n	8001746 <pvPortMallocMicroROS+0x146>
 8001672:	4b42      	ldr	r3, [pc, #264]	; (800177c <pvPortMallocMicroROS+0x17c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	429a      	cmp	r2, r3
 800167a:	d864      	bhi.n	8001746 <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800167c:	4b40      	ldr	r3, [pc, #256]	; (8001780 <pvPortMallocMicroROS+0x180>)
 800167e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001680:	4b3f      	ldr	r3, [pc, #252]	; (8001780 <pvPortMallocMicroROS+0x180>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001686:	e004      	b.n	8001692 <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800168c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	429a      	cmp	r2, r3
 800169a:	d903      	bls.n	80016a4 <pvPortMallocMicroROS+0xa4>
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1f1      	bne.n	8001688 <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80016a4:	4b33      	ldr	r3, [pc, #204]	; (8001774 <pvPortMallocMicroROS+0x174>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d04b      	beq.n	8001746 <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80016ae:	6a3b      	ldr	r3, [r7, #32]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2208      	movs	r2, #8
 80016b4:	4413      	add	r3, r2
 80016b6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80016b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	6a3b      	ldr	r3, [r7, #32]
 80016be:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80016c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c2:	685a      	ldr	r2, [r3, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	1ad2      	subs	r2, r2, r3
 80016c8:	2308      	movs	r3, #8
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d91f      	bls.n	8001710 <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80016d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4413      	add	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d00a      	beq.n	80016f8 <pvPortMallocMicroROS+0xf8>
	__asm volatile
 80016e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016e6:	f383 8811 	msr	BASEPRI, r3
 80016ea:	f3bf 8f6f 	isb	sy
 80016ee:	f3bf 8f4f 	dsb	sy
 80016f2:	613b      	str	r3, [r7, #16]
}
 80016f4:	bf00      	nop
 80016f6:	e7fe      	b.n	80016f6 <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80016f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fa:	685a      	ldr	r2, [r3, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	1ad2      	subs	r2, r2, r3
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800170a:	69b8      	ldr	r0, [r7, #24]
 800170c:	f000 f974 	bl	80019f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001710:	4b1a      	ldr	r3, [pc, #104]	; (800177c <pvPortMallocMicroROS+0x17c>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	4a18      	ldr	r2, [pc, #96]	; (800177c <pvPortMallocMicroROS+0x17c>)
 800171c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800171e:	4b17      	ldr	r3, [pc, #92]	; (800177c <pvPortMallocMicroROS+0x17c>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	4b18      	ldr	r3, [pc, #96]	; (8001784 <pvPortMallocMicroROS+0x184>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	429a      	cmp	r2, r3
 8001728:	d203      	bcs.n	8001732 <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800172a:	4b14      	ldr	r3, [pc, #80]	; (800177c <pvPortMallocMicroROS+0x17c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a15      	ldr	r2, [pc, #84]	; (8001784 <pvPortMallocMicroROS+0x184>)
 8001730:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	4b10      	ldr	r3, [pc, #64]	; (8001778 <pvPortMallocMicroROS+0x178>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	431a      	orrs	r2, r3
 800173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001746:	f00b fb1d 	bl	800cd84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	f003 0307 	and.w	r3, r3, #7
 8001750:	2b00      	cmp	r3, #0
 8001752:	d00a      	beq.n	800176a <pvPortMallocMicroROS+0x16a>
	__asm volatile
 8001754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001758:	f383 8811 	msr	BASEPRI, r3
 800175c:	f3bf 8f6f 	isb	sy
 8001760:	f3bf 8f4f 	dsb	sy
 8001764:	60fb      	str	r3, [r7, #12]
}
 8001766:	bf00      	nop
 8001768:	e7fe      	b.n	8001768 <pvPortMallocMicroROS+0x168>
	return pvReturn;
 800176a:	69fb      	ldr	r3, [r7, #28]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3728      	adds	r7, #40	; 0x28
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	2000416c 	.word	0x2000416c
 8001778:	20004178 	.word	0x20004178
 800177c:	20004170 	.word	0x20004170
 8001780:	20004164 	.word	0x20004164
 8001784:	20004174 	.word	0x20004174

08001788 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d048      	beq.n	800182c <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800179a:	2308      	movs	r3, #8
 800179c:	425b      	negs	r3, r3
 800179e:	697a      	ldr	r2, [r7, #20]
 80017a0:	4413      	add	r3, r2
 80017a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	685a      	ldr	r2, [r3, #4]
 80017ac:	4b21      	ldr	r3, [pc, #132]	; (8001834 <vPortFreeMicroROS+0xac>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4013      	ands	r3, r2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d10a      	bne.n	80017cc <vPortFreeMicroROS+0x44>
	__asm volatile
 80017b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017ba:	f383 8811 	msr	BASEPRI, r3
 80017be:	f3bf 8f6f 	isb	sy
 80017c2:	f3bf 8f4f 	dsb	sy
 80017c6:	60fb      	str	r3, [r7, #12]
}
 80017c8:	bf00      	nop
 80017ca:	e7fe      	b.n	80017ca <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d00a      	beq.n	80017ea <vPortFreeMicroROS+0x62>
	__asm volatile
 80017d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017d8:	f383 8811 	msr	BASEPRI, r3
 80017dc:	f3bf 8f6f 	isb	sy
 80017e0:	f3bf 8f4f 	dsb	sy
 80017e4:	60bb      	str	r3, [r7, #8]
}
 80017e6:	bf00      	nop
 80017e8:	e7fe      	b.n	80017e8 <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	685a      	ldr	r2, [r3, #4]
 80017ee:	4b11      	ldr	r3, [pc, #68]	; (8001834 <vPortFreeMicroROS+0xac>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4013      	ands	r3, r2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d019      	beq.n	800182c <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d115      	bne.n	800182c <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <vPortFreeMicroROS+0xac>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	43db      	mvns	r3, r3
 800180a:	401a      	ands	r2, r3
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001810:	f00b faaa 	bl	800cd68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	685a      	ldr	r2, [r3, #4]
 8001818:	4b07      	ldr	r3, [pc, #28]	; (8001838 <vPortFreeMicroROS+0xb0>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4413      	add	r3, r2
 800181e:	4a06      	ldr	r2, [pc, #24]	; (8001838 <vPortFreeMicroROS+0xb0>)
 8001820:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001822:	6938      	ldr	r0, [r7, #16]
 8001824:	f000 f8e8 	bl	80019f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001828:	f00b faac 	bl	800cd84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800182c:	bf00      	nop
 800182e:	3718      	adds	r7, #24
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20004178 	.word	0x20004178
 8001838:	20004170 	.word	0x20004170

0800183c <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 800183c:	b480      	push	{r7}
 800183e:	b087      	sub	sp, #28
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001848:	2308      	movs	r3, #8
 800184a:	425b      	negs	r3, r3
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	4413      	add	r3, r2
 8001850:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	685a      	ldr	r2, [r3, #4]
 800185a:	4b06      	ldr	r3, [pc, #24]	; (8001874 <getBlockSize+0x38>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	43db      	mvns	r3, r3
 8001860:	4013      	ands	r3, r2
 8001862:	60fb      	str	r3, [r7, #12]

	return count;
 8001864:	68fb      	ldr	r3, [r7, #12]
}
 8001866:	4618      	mov	r0, r3
 8001868:	371c      	adds	r7, #28
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	20004178 	.word	0x20004178

08001878 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b088      	sub	sp, #32
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001882:	f00b fa71 	bl	800cd68 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8001886:	6838      	ldr	r0, [r7, #0]
 8001888:	f7ff feba 	bl	8001600 <pvPortMallocMicroROS>
 800188c:	6138      	str	r0, [r7, #16]

	uint8_t *puc = ( uint8_t * ) pv;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	60fb      	str	r3, [r7, #12]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001892:	2308      	movs	r3, #8
 8001894:	425b      	negs	r3, r3
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	4413      	add	r3, r2
 800189a:	60fb      	str	r3, [r7, #12]
	pxLink = ( void * ) puc;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	60bb      	str	r3, [r7, #8]


	char *in_src = (char*)pv;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	61fb      	str	r3, [r7, #28]
  	char *in_dest = (char*)newmem;
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	61bb      	str	r3, [r7, #24]
	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <pvPortReallocMicroROS+0x70>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	43db      	mvns	r3, r3
 80018b2:	4013      	ands	r3, r2
 80018b4:	617b      	str	r3, [r7, #20]

  	while(count--)
 80018b6:	e007      	b.n	80018c8 <pvPortReallocMicroROS+0x50>
    	*in_dest++ = *in_src++;
 80018b8:	69fa      	ldr	r2, [r7, #28]
 80018ba:	1c53      	adds	r3, r2, #1
 80018bc:	61fb      	str	r3, [r7, #28]
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	1c59      	adds	r1, r3, #1
 80018c2:	61b9      	str	r1, [r7, #24]
 80018c4:	7812      	ldrb	r2, [r2, #0]
 80018c6:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	1e5a      	subs	r2, r3, #1
 80018cc:	617a      	str	r2, [r7, #20]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f2      	bne.n	80018b8 <pvPortReallocMicroROS+0x40>

	vPortFreeMicroROS(pv);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f7ff ff58 	bl	8001788 <vPortFreeMicroROS>

	( void ) xTaskResumeAll();
 80018d8:	f00b fa54 	bl	800cd84 <xTaskResumeAll>

	return newmem;
 80018dc:	693b      	ldr	r3, [r7, #16]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3720      	adds	r7, #32
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20004178 	.word	0x20004178

080018ec <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80018f6:	f00b fa37 	bl	800cd68 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	fb02 f303 	mul.w	r3, r2, r3
 8001902:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001904:	6978      	ldr	r0, [r7, #20]
 8001906:	f7ff fe7b 	bl	8001600 <pvPortMallocMicroROS>
 800190a:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	613b      	str	r3, [r7, #16]

  	while(count--)
 8001910:	e004      	b.n	800191c <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1c5a      	adds	r2, r3, #1
 8001916:	613a      	str	r2, [r7, #16]
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	1e5a      	subs	r2, r3, #1
 8001920:	617a      	str	r2, [r7, #20]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1f5      	bne.n	8001912 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001926:	f00b fa2d 	bl	800cd84 <xTaskResumeAll>
  	return mem;
 800192a:	68fb      	ldr	r3, [r7, #12]
}
 800192c:	4618      	mov	r0, r3
 800192e:	3718      	adds	r7, #24
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800193a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800193e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001940:	4b27      	ldr	r3, [pc, #156]	; (80019e0 <prvHeapInit+0xac>)
 8001942:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	2b00      	cmp	r3, #0
 800194c:	d00c      	beq.n	8001968 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	3307      	adds	r3, #7
 8001952:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f023 0307 	bic.w	r3, r3, #7
 800195a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800195c:	68ba      	ldr	r2, [r7, #8]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	4a1f      	ldr	r2, [pc, #124]	; (80019e0 <prvHeapInit+0xac>)
 8001964:	4413      	add	r3, r2
 8001966:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800196c:	4a1d      	ldr	r2, [pc, #116]	; (80019e4 <prvHeapInit+0xb0>)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001972:	4b1c      	ldr	r3, [pc, #112]	; (80019e4 <prvHeapInit+0xb0>)
 8001974:	2200      	movs	r2, #0
 8001976:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	68ba      	ldr	r2, [r7, #8]
 800197c:	4413      	add	r3, r2
 800197e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001980:	2208      	movs	r2, #8
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	1a9b      	subs	r3, r3, r2
 8001986:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f023 0307 	bic.w	r3, r3, #7
 800198e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4a15      	ldr	r2, [pc, #84]	; (80019e8 <prvHeapInit+0xb4>)
 8001994:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001996:	4b14      	ldr	r3, [pc, #80]	; (80019e8 <prvHeapInit+0xb4>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2200      	movs	r2, #0
 800199c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800199e:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <prvHeapInit+0xb4>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	68fa      	ldr	r2, [r7, #12]
 80019ae:	1ad2      	subs	r2, r2, r3
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <prvHeapInit+0xb4>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	4a0a      	ldr	r2, [pc, #40]	; (80019ec <prvHeapInit+0xb8>)
 80019c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	4a09      	ldr	r2, [pc, #36]	; (80019f0 <prvHeapInit+0xbc>)
 80019ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80019cc:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <prvHeapInit+0xc0>)
 80019ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80019d2:	601a      	str	r2, [r3, #0]
}
 80019d4:	bf00      	nop
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	20000164 	.word	0x20000164
 80019e4:	20004164 	.word	0x20004164
 80019e8:	2000416c 	.word	0x2000416c
 80019ec:	20004174 	.word	0x20004174
 80019f0:	20004170 	.word	0x20004170
 80019f4:	20004178 	.word	0x20004178

080019f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001a00:	4b28      	ldr	r3, [pc, #160]	; (8001aa4 <prvInsertBlockIntoFreeList+0xac>)
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	e002      	b.n	8001a0c <prvInsertBlockIntoFreeList+0x14>
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d8f7      	bhi.n	8001a06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	68ba      	ldr	r2, [r7, #8]
 8001a20:	4413      	add	r3, r2
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d108      	bne.n	8001a3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	685a      	ldr	r2, [r3, #4]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	441a      	add	r2, r3
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	68ba      	ldr	r2, [r7, #8]
 8001a44:	441a      	add	r2, r3
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d118      	bne.n	8001a80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	4b15      	ldr	r3, [pc, #84]	; (8001aa8 <prvInsertBlockIntoFreeList+0xb0>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d00d      	beq.n	8001a76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685a      	ldr	r2, [r3, #4]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	441a      	add	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	e008      	b.n	8001a88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001a76:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <prvInsertBlockIntoFreeList+0xb0>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	e003      	b.n	8001a88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001a88:	68fa      	ldr	r2, [r7, #12]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d002      	beq.n	8001a96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
 8001a96:	bf00      	nop
 8001a98:	3714      	adds	r7, #20
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	20004164 	.word	0x20004164
 8001aa8:	2000416c 	.word	0x2000416c

08001aac <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001aba:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001abc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ac0:	4904      	ldr	r1, [pc, #16]	; (8001ad4 <cubemx_transport_open+0x28>)
 8001ac2:	68f8      	ldr	r0, [r7, #12]
 8001ac4:	f008 fce8 	bl	800a498 <HAL_UART_Receive_DMA>
    return true;
 8001ac8:	2301      	movs	r3, #1
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	2000417c 	.word	0x2000417c

08001ad8 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001ae6:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f008 fd05 	bl	800a4f8 <HAL_UART_DMAStop>
    return true;
 8001aee:	2301      	movs	r3, #1
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
 8001b04:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001b0c:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b20      	cmp	r3, #32
 8001b18:	d11c      	bne.n	8001b54 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	461a      	mov	r2, r3
 8001b20:	68b9      	ldr	r1, [r7, #8]
 8001b22:	6978      	ldr	r0, [r7, #20]
 8001b24:	f008 fc3a 	bl	800a39c <HAL_UART_Transmit_DMA>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001b2c:	e002      	b.n	8001b34 <cubemx_transport_write+0x3c>
            osDelay(1);
 8001b2e:	2001      	movs	r0, #1
 8001b30:	f009 ff52 	bl	800b9d8 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001b34:	7cfb      	ldrb	r3, [r7, #19]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d105      	bne.n	8001b46 <cubemx_transport_write+0x4e>
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b20      	cmp	r3, #32
 8001b44:	d1f3      	bne.n	8001b2e <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8001b46:	7cfb      	ldrb	r3, [r7, #19]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d101      	bne.n	8001b50 <cubemx_transport_write+0x58>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	e002      	b.n	8001b56 <cubemx_transport_write+0x5e>
 8001b50:	2300      	movs	r3, #0
 8001b52:	e000      	b.n	8001b56 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001b54:	2300      	movs	r3, #0
    }
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3718      	adds	r7, #24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
	...

08001b60 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b088      	sub	sp, #32
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
 8001b6c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001b74:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b7a:	b672      	cpsid	i
}
 8001b7c:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001b8a:	4a1c      	ldr	r2, [pc, #112]	; (8001bfc <cubemx_transport_read+0x9c>)
 8001b8c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001b8e:	b662      	cpsie	i
}
 8001b90:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	3301      	adds	r3, #1
 8001b96:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001b98:	2001      	movs	r0, #1
 8001b9a:	f009 ff1d 	bl	800b9d8 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001b9e:	4b18      	ldr	r3, [pc, #96]	; (8001c00 <cubemx_transport_read+0xa0>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	4b16      	ldr	r3, [pc, #88]	; (8001bfc <cubemx_transport_read+0x9c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d103      	bne.n	8001bb2 <cubemx_transport_read+0x52>
 8001baa:	69fa      	ldr	r2, [r7, #28]
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	dbe3      	blt.n	8001b7a <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001bb6:	e011      	b.n	8001bdc <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8001bb8:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <cubemx_transport_read+0xa0>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	68b9      	ldr	r1, [r7, #8]
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	440b      	add	r3, r1
 8001bc2:	4910      	ldr	r1, [pc, #64]	; (8001c04 <cubemx_transport_read+0xa4>)
 8001bc4:	5c8a      	ldrb	r2, [r1, r2]
 8001bc6:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001bc8:	4b0d      	ldr	r3, [pc, #52]	; (8001c00 <cubemx_transport_read+0xa0>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bd2:	4a0b      	ldr	r2, [pc, #44]	; (8001c00 <cubemx_transport_read+0xa0>)
 8001bd4:	6013      	str	r3, [r2, #0]
        wrote++;
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001bdc:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <cubemx_transport_read+0xa0>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <cubemx_transport_read+0x9c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d003      	beq.n	8001bf0 <cubemx_transport_read+0x90>
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d3e3      	bcc.n	8001bb8 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001bf0:	69bb      	ldr	r3, [r7, #24]
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3720      	adds	r7, #32
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20004980 	.word	0x20004980
 8001c00:	2000497c 	.word	0x2000497c
 8001c04:	2000417c 	.word	0x2000417c

08001c08 <MX_GPIO_Init>:
#include "main.h"
#include "drv_gpio.h"

void MX_GPIO_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08a      	sub	sp, #40	; 0x28
 8001c0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0e:	f107 0314 	add.w	r3, r7, #20
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	605a      	str	r2, [r3, #4]
 8001c18:	609a      	str	r2, [r3, #8]
 8001c1a:	60da      	str	r2, [r3, #12]
 8001c1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	613b      	str	r3, [r7, #16]
 8001c22:	4b2d      	ldr	r3, [pc, #180]	; (8001cd8 <MX_GPIO_Init+0xd0>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	4a2c      	ldr	r2, [pc, #176]	; (8001cd8 <MX_GPIO_Init+0xd0>)
 8001c28:	f043 0304 	orr.w	r3, r3, #4
 8001c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2e:	4b2a      	ldr	r3, [pc, #168]	; (8001cd8 <MX_GPIO_Init+0xd0>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	f003 0304 	and.w	r3, r3, #4
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60fb      	str	r3, [r7, #12]
 8001c3e:	4b26      	ldr	r3, [pc, #152]	; (8001cd8 <MX_GPIO_Init+0xd0>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	4a25      	ldr	r2, [pc, #148]	; (8001cd8 <MX_GPIO_Init+0xd0>)
 8001c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c48:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4a:	4b23      	ldr	r3, [pc, #140]	; (8001cd8 <MX_GPIO_Init+0xd0>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	60bb      	str	r3, [r7, #8]
 8001c5a:	4b1f      	ldr	r3, [pc, #124]	; (8001cd8 <MX_GPIO_Init+0xd0>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	4a1e      	ldr	r2, [pc, #120]	; (8001cd8 <MX_GPIO_Init+0xd0>)
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	6313      	str	r3, [r2, #48]	; 0x30
 8001c66:	4b1c      	ldr	r3, [pc, #112]	; (8001cd8 <MX_GPIO_Init+0xd0>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	60bb      	str	r3, [r7, #8]
 8001c70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	607b      	str	r3, [r7, #4]
 8001c76:	4b18      	ldr	r3, [pc, #96]	; (8001cd8 <MX_GPIO_Init+0xd0>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	4a17      	ldr	r2, [pc, #92]	; (8001cd8 <MX_GPIO_Init+0xd0>)
 8001c7c:	f043 0302 	orr.w	r3, r3, #2
 8001c80:	6313      	str	r3, [r2, #48]	; 0x30
 8001c82:	4b15      	ldr	r3, [pc, #84]	; (8001cd8 <MX_GPIO_Init+0xd0>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	607b      	str	r3, [r7, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2120      	movs	r1, #32
 8001c92:	4812      	ldr	r0, [pc, #72]	; (8001cdc <MX_GPIO_Init+0xd4>)
 8001c94:	f004 f9dc 	bl	8006050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c9e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001ca2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ca8:	f107 0314 	add.w	r3, r7, #20
 8001cac:	4619      	mov	r1, r3
 8001cae:	480c      	ldr	r0, [pc, #48]	; (8001ce0 <MX_GPIO_Init+0xd8>)
 8001cb0:	f004 f84a 	bl	8005d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001cb4:	2320      	movs	r3, #32
 8001cb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001cc4:	f107 0314 	add.w	r3, r7, #20
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4804      	ldr	r0, [pc, #16]	; (8001cdc <MX_GPIO_Init+0xd4>)
 8001ccc:	f004 f83c 	bl	8005d48 <HAL_GPIO_Init>

}
 8001cd0:	bf00      	nop
 8001cd2:	3728      	adds	r7, #40	; 0x28
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40020000 	.word	0x40020000
 8001ce0:	40020800 	.word	0x40020800

08001ce4 <HAL_GPIO_EXTI_Callback>:

extern void quadEncoder_CallbackIndexL(void);
extern void quadEncoder_CallbackIndexR(void);

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 8001cee:	88fb      	ldrh	r3, [r7, #6]
 8001cf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cf4:	d017      	beq.n	8001d26 <HAL_GPIO_EXTI_Callback+0x42>
 8001cf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cfa:	dc16      	bgt.n	8001d2a <HAL_GPIO_EXTI_Callback+0x46>
 8001cfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d00:	d00e      	beq.n	8001d20 <HAL_GPIO_EXTI_Callback+0x3c>
 8001d02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d06:	dc10      	bgt.n	8001d2a <HAL_GPIO_EXTI_Callback+0x46>
 8001d08:	2b08      	cmp	r3, #8
 8001d0a:	d010      	beq.n	8001d2e <HAL_GPIO_EXTI_Callback+0x4a>
 8001d0c:	2b08      	cmp	r3, #8
 8001d0e:	dc0c      	bgt.n	8001d2a <HAL_GPIO_EXTI_Callback+0x46>
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d002      	beq.n	8001d1a <HAL_GPIO_EXTI_Callback+0x36>
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d00c      	beq.n	8001d32 <HAL_GPIO_EXTI_Callback+0x4e>
					break;

	case GPIO_PIN_13 :		// USER BUTTON
					break;

	default : 		break;
 8001d18:	e007      	b.n	8001d2a <HAL_GPIO_EXTI_Callback+0x46>
		quadEncoder_CallbackIndexR();
 8001d1a:	f001 fffd 	bl	8003d18 <quadEncoder_CallbackIndexR>
					break;
 8001d1e:	e009      	b.n	8001d34 <HAL_GPIO_EXTI_Callback+0x50>
		quadEncoder_CallbackIndexL();
 8001d20:	f001 ffd4 	bl	8003ccc <quadEncoder_CallbackIndexL>
					break;
 8001d24:	e006      	b.n	8001d34 <HAL_GPIO_EXTI_Callback+0x50>
					break;
 8001d26:	bf00      	nop
 8001d28:	e004      	b.n	8001d34 <HAL_GPIO_EXTI_Callback+0x50>
	default : 		break;
 8001d2a:	bf00      	nop
 8001d2c:	e002      	b.n	8001d34 <HAL_GPIO_EXTI_Callback+0x50>
					break;
 8001d2e:	bf00      	nop
 8001d30:	e000      	b.n	8001d34 <HAL_GPIO_EXTI_Callback+0x50>
					break;
 8001d32:	bf00      	nop


	}
}
 8001d34:	bf00      	nop
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <MX_I2C1_Init>:


I2C_HandleTypeDef hi2c1;

void MX_I2C1_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001d40:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <MX_I2C1_Init+0x50>)
 8001d42:	4a13      	ldr	r2, [pc, #76]	; (8001d90 <MX_I2C1_Init+0x54>)
 8001d44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d46:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <MX_I2C1_Init+0x50>)
 8001d48:	4a12      	ldr	r2, [pc, #72]	; (8001d94 <MX_I2C1_Init+0x58>)
 8001d4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d4c:	4b0f      	ldr	r3, [pc, #60]	; (8001d8c <MX_I2C1_Init+0x50>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d52:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <MX_I2C1_Init+0x50>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d58:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <MX_I2C1_Init+0x50>)
 8001d5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d5e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d60:	4b0a      	ldr	r3, [pc, #40]	; (8001d8c <MX_I2C1_Init+0x50>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d66:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <MX_I2C1_Init+0x50>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d6c:	4b07      	ldr	r3, [pc, #28]	; (8001d8c <MX_I2C1_Init+0x50>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d72:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <MX_I2C1_Init+0x50>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d78:	4804      	ldr	r0, [pc, #16]	; (8001d8c <MX_I2C1_Init+0x50>)
 8001d7a:	f004 f99b 	bl	80060b4 <HAL_I2C_Init>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d84:	f001 fc20 	bl	80035c8 <Error_Handler>
  }

}
 8001d88:	bf00      	nop
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20004984 	.word	0x20004984
 8001d90:	40005400 	.word	0x40005400
 8001d94:	000186a0 	.word	0x000186a0

08001d98 <i2c1_WriteBuffer>:

//======================================================================
// Transmit n_data bytes to i2c slave
//======================================================================
int i2c1_WriteBuffer(uint16_t addrSlave, uint8_t *data, int n_data)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b088      	sub	sp, #32
 8001d9c:	af02      	add	r7, sp, #8
 8001d9e:	4603      	mov	r3, r0
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
 8001da4:	81fb      	strh	r3, [r7, #14]
	int status;
	status = HAL_I2C_Master_Transmit(&hi2c1, addrSlave, data, n_data , 100);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	89f9      	ldrh	r1, [r7, #14]
 8001dac:	2264      	movs	r2, #100	; 0x64
 8001dae:	9200      	str	r2, [sp, #0]
 8001db0:	68ba      	ldr	r2, [r7, #8]
 8001db2:	4805      	ldr	r0, [pc, #20]	; (8001dc8 <i2c1_WriteBuffer+0x30>)
 8001db4:	f004 fac2 	bl	800633c <HAL_I2C_Master_Transmit>
 8001db8:	4603      	mov	r3, r0
 8001dba:	617b      	str	r3, [r7, #20]
	return status;
 8001dbc:	697b      	ldr	r3, [r7, #20]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20004984 	.word	0x20004984

08001dcc <i2c1_ReadRegBuffer>:
}
//======================================================================
// Receive n_data bytes - located at regAddr - from i2c slave
//======================================================================
int i2c1_ReadRegBuffer(uint16_t addrSlave, uint8_t  regAddr,  uint8_t *data, int n_data)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b088      	sub	sp, #32
 8001dd0:	af02      	add	r7, sp, #8
 8001dd2:	60ba      	str	r2, [r7, #8]
 8001dd4:	607b      	str	r3, [r7, #4]
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	81fb      	strh	r3, [r7, #14]
 8001dda:	460b      	mov	r3, r1
 8001ddc:	737b      	strb	r3, [r7, #13]
    int status;
    uint8_t RegAddr;
    RegAddr=regAddr;
 8001dde:	7b7b      	ldrb	r3, [r7, #13]
 8001de0:	74fb      	strb	r3, [r7, #19]
    do{
        status=HAL_I2C_Master_Transmit(&hi2c1, addrSlave, &RegAddr, 1, 100);
 8001de2:	f107 0213 	add.w	r2, r7, #19
 8001de6:	89f9      	ldrh	r1, [r7, #14]
 8001de8:	2364      	movs	r3, #100	; 0x64
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	2301      	movs	r3, #1
 8001dee:	480f      	ldr	r0, [pc, #60]	; (8001e2c <i2c1_ReadRegBuffer+0x60>)
 8001df0:	f004 faa4 	bl	800633c <HAL_I2C_Master_Transmit>
 8001df4:	4603      	mov	r3, r0
 8001df6:	617b      	str	r3, [r7, #20]
        if( status )
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d10f      	bne.n	8001e1e <i2c1_ReadRegBuffer+0x52>
            break;
        status =HAL_I2C_Master_Receive(&hi2c1, addrSlave, data, n_data, n_data*100);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2164      	movs	r1, #100	; 0x64
 8001e06:	fb01 f303 	mul.w	r3, r1, r3
 8001e0a:	89f9      	ldrh	r1, [r7, #14]
 8001e0c:	9300      	str	r3, [sp, #0]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	68ba      	ldr	r2, [r7, #8]
 8001e12:	4806      	ldr	r0, [pc, #24]	; (8001e2c <i2c1_ReadRegBuffer+0x60>)
 8001e14:	f004 fb90 	bl	8006538 <HAL_I2C_Master_Receive>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	617b      	str	r3, [r7, #20]
 8001e1c:	e000      	b.n	8001e20 <i2c1_ReadRegBuffer+0x54>
            break;
 8001e1e:	bf00      	nop
    }while(0);
    return status;
 8001e20:	697b      	ldr	r3, [r7, #20]
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20004984 	.word	0x20004984

08001e30 <i2c1_WriteRegBuffer>:

//======================================================================
// Write n_data bytes - have to be written at regAddr - to i2c slave
//======================================================================
int i2c1_WriteRegBuffer(uint16_t addrSlave, uint8_t  regAddr,  uint8_t *data, int n_data)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08c      	sub	sp, #48	; 0x30
 8001e34:	af02      	add	r7, sp, #8
 8001e36:	60ba      	str	r2, [r7, #8]
 8001e38:	607b      	str	r3, [r7, #4]
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	81fb      	strh	r3, [r7, #14]
 8001e3e:	460b      	mov	r3, r1
 8001e40:	737b      	strb	r3, [r7, #13]
    int status;
    uint8_t RegAddr[0x10];
    RegAddr[0]=regAddr;
 8001e42:	7b7b      	ldrb	r3, [r7, #13]
 8001e44:	753b      	strb	r3, [r7, #20]
    memcpy(RegAddr+1, data, n_data);
 8001e46:	f107 0314 	add.w	r3, r7, #20
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	68b9      	ldr	r1, [r7, #8]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f018 fc60 	bl	801a716 <memcpy>
   status=HAL_I2C_Master_Transmit(&hi2c1, addrSlave, RegAddr, n_data+1, 100);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	f107 0214 	add.w	r2, r7, #20
 8001e62:	89f9      	ldrh	r1, [r7, #14]
 8001e64:	2064      	movs	r0, #100	; 0x64
 8001e66:	9000      	str	r0, [sp, #0]
 8001e68:	4804      	ldr	r0, [pc, #16]	; (8001e7c <i2c1_WriteRegBuffer+0x4c>)
 8001e6a:	f004 fa67 	bl	800633c <HAL_I2C_Master_Transmit>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	627b      	str	r3, [r7, #36]	; 0x24
     return status;
 8001e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3728      	adds	r7, #40	; 0x28
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20004984 	.word	0x20004984

08001e80 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;
DMA_HandleTypeDef hdma_usart2_tx;


void MX_USART1_UART_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8001e84:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <MX_USART1_UART_Init+0x4c>)
 8001e86:	4a12      	ldr	r2, [pc, #72]	; (8001ed0 <MX_USART1_UART_Init+0x50>)
 8001e88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e8a:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <MX_USART1_UART_Init+0x4c>)
 8001e8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e92:	4b0e      	ldr	r3, [pc, #56]	; (8001ecc <MX_USART1_UART_Init+0x4c>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e98:	4b0c      	ldr	r3, [pc, #48]	; (8001ecc <MX_USART1_UART_Init+0x4c>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e9e:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <MX_USART1_UART_Init+0x4c>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ea4:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <MX_USART1_UART_Init+0x4c>)
 8001ea6:	220c      	movs	r2, #12
 8001ea8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eaa:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <MX_USART1_UART_Init+0x4c>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001eb0:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <MX_USART1_UART_Init+0x4c>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001eb6:	4805      	ldr	r0, [pc, #20]	; (8001ecc <MX_USART1_UART_Init+0x4c>)
 8001eb8:	f008 f8ef 	bl	800a09a <HAL_UART_Init>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ec2:	f001 fb81 	bl	80035c8 <Error_Handler>
  }
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	200049d8 	.word	0x200049d8
 8001ed0:	40011000 	.word	0x40011000

08001ed4 <MX_USART2_UART_Init>:


void MX_USART2_UART_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8001ed8:	4b11      	ldr	r3, [pc, #68]	; (8001f20 <MX_USART2_UART_Init+0x4c>)
 8001eda:	4a12      	ldr	r2, [pc, #72]	; (8001f24 <MX_USART2_UART_Init+0x50>)
 8001edc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ede:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <MX_USART2_UART_Init+0x4c>)
 8001ee0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ee4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ee6:	4b0e      	ldr	r3, [pc, #56]	; (8001f20 <MX_USART2_UART_Init+0x4c>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001eec:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <MX_USART2_UART_Init+0x4c>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ef2:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <MX_USART2_UART_Init+0x4c>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ef8:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <MX_USART2_UART_Init+0x4c>)
 8001efa:	220c      	movs	r2, #12
 8001efc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001efe:	4b08      	ldr	r3, [pc, #32]	; (8001f20 <MX_USART2_UART_Init+0x4c>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f04:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <MX_USART2_UART_Init+0x4c>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f0a:	4805      	ldr	r0, [pc, #20]	; (8001f20 <MX_USART2_UART_Init+0x4c>)
 8001f0c:	f008 f8c5 	bl	800a09a <HAL_UART_Init>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f16:	f001 fb57 	bl	80035c8 <Error_Handler>
  }
}
 8001f1a:	bf00      	nop
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20004a1c 	.word	0x20004a1c
 8001f24:	40004400 	.word	0x40004400

08001f28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	607b      	str	r3, [r7, #4]
 8001f32:	4b1f      	ldr	r3, [pc, #124]	; (8001fb0 <MX_DMA_Init+0x88>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	4a1e      	ldr	r2, [pc, #120]	; (8001fb0 <MX_DMA_Init+0x88>)
 8001f38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3e:	4b1c      	ldr	r3, [pc, #112]	; (8001fb0 <MX_DMA_Init+0x88>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f46:	607b      	str	r3, [r7, #4]
 8001f48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	603b      	str	r3, [r7, #0]
 8001f4e:	4b18      	ldr	r3, [pc, #96]	; (8001fb0 <MX_DMA_Init+0x88>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	4a17      	ldr	r2, [pc, #92]	; (8001fb0 <MX_DMA_Init+0x88>)
 8001f54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f58:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5a:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <MX_DMA_Init+0x88>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f62:	603b      	str	r3, [r7, #0]
 8001f64:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001f66:	2200      	movs	r2, #0
 8001f68:	2105      	movs	r1, #5
 8001f6a:	2010      	movs	r0, #16
 8001f6c:	f003 fab2 	bl	80054d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001f70:	2010      	movs	r0, #16
 8001f72:	f003 facb 	bl	800550c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001f76:	2200      	movs	r2, #0
 8001f78:	2105      	movs	r1, #5
 8001f7a:	2011      	movs	r0, #17
 8001f7c:	f003 faaa 	bl	80054d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001f80:	2011      	movs	r0, #17
 8001f82:	f003 fac3 	bl	800550c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001f86:	2200      	movs	r2, #0
 8001f88:	2105      	movs	r1, #5
 8001f8a:	203a      	movs	r0, #58	; 0x3a
 8001f8c:	f003 faa2 	bl	80054d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001f90:	203a      	movs	r0, #58	; 0x3a
 8001f92:	f003 fabb 	bl	800550c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8001f96:	2200      	movs	r2, #0
 8001f98:	2105      	movs	r1, #5
 8001f9a:	2046      	movs	r0, #70	; 0x46
 8001f9c:	f003 fa9a 	bl	80054d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001fa0:	2046      	movs	r0, #70	; 0x46
 8001fa2:	f003 fab3 	bl	800550c <HAL_NVIC_EnableIRQ>

}
 8001fa6:	bf00      	nop
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40023800 	.word	0x40023800

08001fb4 <i2c_send_byteS>:
{
	i2c1_WriteBuffer(LCD_ADDRESS, &dta, 1);
}
//=================================================================
void i2c_send_byteS(unsigned char *dta, unsigned char len)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	70fb      	strb	r3, [r7, #3]
	i2c1_WriteBuffer(LCD_ADDRESS, dta, len);
 8001fc0:	78fb      	ldrb	r3, [r7, #3]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	6879      	ldr	r1, [r7, #4]
 8001fc6:	207c      	movs	r0, #124	; 0x7c
 8001fc8:	f7ff fee6 	bl	8001d98 <i2c1_WriteBuffer>
}
 8001fcc:	bf00      	nop
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <groveLCD_begin>:
//=================================================================
void groveLCD_begin(uint8_t cols, uint8_t lines, uint8_t dotsize)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	71fb      	strb	r3, [r7, #7]
 8001fde:	460b      	mov	r3, r1
 8001fe0:	71bb      	strb	r3, [r7, #6]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	717b      	strb	r3, [r7, #5]
    if (lines > 1) {
 8001fe6:	79bb      	ldrb	r3, [r7, #6]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d906      	bls.n	8001ffa <groveLCD_begin+0x26>
        _displayfunction |= LCD_2LINE;
 8001fec:	4b33      	ldr	r3, [pc, #204]	; (80020bc <groveLCD_begin+0xe8>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	f043 0308 	orr.w	r3, r3, #8
 8001ff4:	b2da      	uxtb	r2, r3
 8001ff6:	4b31      	ldr	r3, [pc, #196]	; (80020bc <groveLCD_begin+0xe8>)
 8001ff8:	701a      	strb	r2, [r3, #0]
    }
    _numlines = lines;
 8001ffa:	4a31      	ldr	r2, [pc, #196]	; (80020c0 <groveLCD_begin+0xec>)
 8001ffc:	79bb      	ldrb	r3, [r7, #6]
 8001ffe:	7013      	strb	r3, [r2, #0]
    _currline = 0;
 8002000:	4b30      	ldr	r3, [pc, #192]	; (80020c4 <groveLCD_begin+0xf0>)
 8002002:	2200      	movs	r2, #0
 8002004:	701a      	strb	r2, [r3, #0]

    // for some 1 line displays you can select a 10 pixel high font
    if ((dotsize != 0) && (lines == 1)) {
 8002006:	797b      	ldrb	r3, [r7, #5]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d009      	beq.n	8002020 <groveLCD_begin+0x4c>
 800200c:	79bb      	ldrb	r3, [r7, #6]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d106      	bne.n	8002020 <groveLCD_begin+0x4c>
        _displayfunction |= LCD_5x10DOTS;
 8002012:	4b2a      	ldr	r3, [pc, #168]	; (80020bc <groveLCD_begin+0xe8>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	f043 0304 	orr.w	r3, r3, #4
 800201a:	b2da      	uxtb	r2, r3
 800201c:	4b27      	ldr	r3, [pc, #156]	; (80020bc <groveLCD_begin+0xe8>)
 800201e:	701a      	strb	r2, [r3, #0]
    }

    // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
    // according to datasheet, we need at least 40ms after power rises above 2.7V
    // before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
    HAL_Delay(50);
 8002020:	2032      	movs	r0, #50	; 0x32
 8002022:	f002 feab 	bl	8004d7c <HAL_Delay>

    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    groveLCD_command(LCD_FUNCTIONSET | _displayfunction);
 8002026:	4b25      	ldr	r3, [pc, #148]	; (80020bc <groveLCD_begin+0xe8>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	f043 0320 	orr.w	r3, r3, #32
 800202e:	b2db      	uxtb	r3, r3
 8002030:	4618      	mov	r0, r3
 8002032:	f000 f89b 	bl	800216c <groveLCD_command>
    HAL_Delay(5);  // wait more than 4.1ms
 8002036:	2005      	movs	r0, #5
 8002038:	f002 fea0 	bl	8004d7c <HAL_Delay>

    // second try
    groveLCD_command(LCD_FUNCTIONSET | _displayfunction);
 800203c:	4b1f      	ldr	r3, [pc, #124]	; (80020bc <groveLCD_begin+0xe8>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	f043 0320 	orr.w	r3, r3, #32
 8002044:	b2db      	uxtb	r3, r3
 8002046:	4618      	mov	r0, r3
 8002048:	f000 f890 	bl	800216c <groveLCD_command>
    HAL_Delay(5);
 800204c:	2005      	movs	r0, #5
 800204e:	f002 fe95 	bl	8004d7c <HAL_Delay>

    // third go
    groveLCD_command(LCD_FUNCTIONSET | _displayfunction);
 8002052:	4b1a      	ldr	r3, [pc, #104]	; (80020bc <groveLCD_begin+0xe8>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	f043 0320 	orr.w	r3, r3, #32
 800205a:	b2db      	uxtb	r3, r3
 800205c:	4618      	mov	r0, r3
 800205e:	f000 f885 	bl	800216c <groveLCD_command>


    // finally, set # lines, font size, etc.
    groveLCD_command(LCD_FUNCTIONSET | _displayfunction);
 8002062:	4b16      	ldr	r3, [pc, #88]	; (80020bc <groveLCD_begin+0xe8>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	f043 0320 	orr.w	r3, r3, #32
 800206a:	b2db      	uxtb	r3, r3
 800206c:	4618      	mov	r0, r3
 800206e:	f000 f87d 	bl	800216c <groveLCD_command>

    // turn the display on with no cursor or blinking default
    _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8002072:	4b15      	ldr	r3, [pc, #84]	; (80020c8 <groveLCD_begin+0xf4>)
 8002074:	2204      	movs	r2, #4
 8002076:	701a      	strb	r2, [r3, #0]
    groveLCD_display();
 8002078:	f000 f862 	bl	8002140 <groveLCD_display>

    // clear it off
    groveLCD_clear();
 800207c:	f000 f831 	bl	80020e2 <groveLCD_clear>

    // Initialize to default text direction (for romance languages)
    _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8002080:	4b12      	ldr	r3, [pc, #72]	; (80020cc <groveLCD_begin+0xf8>)
 8002082:	2202      	movs	r2, #2
 8002084:	701a      	strb	r2, [r3, #0]
    // set the entry mode
    groveLCD_command(LCD_ENTRYMODESET | _displaymode);
 8002086:	4b11      	ldr	r3, [pc, #68]	; (80020cc <groveLCD_begin+0xf8>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	f043 0304 	orr.w	r3, r3, #4
 800208e:	b2db      	uxtb	r3, r3
 8002090:	4618      	mov	r0, r3
 8002092:	f000 f86b 	bl	800216c <groveLCD_command>


    // backlight init
    groveLCD_setReg(REG_MODE1, 0);
 8002096:	2100      	movs	r1, #0
 8002098:	2000      	movs	r0, #0
 800209a:	f000 f8a4 	bl	80021e6 <groveLCD_setReg>
    // set LEDs controllable by both PWM and GRPPWM registers
    groveLCD_setReg(REG_OUTPUT, 0xFF);
 800209e:	21ff      	movs	r1, #255	; 0xff
 80020a0:	2008      	movs	r0, #8
 80020a2:	f000 f8a0 	bl	80021e6 <groveLCD_setReg>
    // set MODE2 values
    // 0010 0000 -> 0x20  (DMBLNK to 1, ie blinky mode)
    groveLCD_setReg(REG_MODE2, 0x20);
 80020a6:	2120      	movs	r1, #32
 80020a8:	2001      	movs	r0, #1
 80020aa:	f000 f89c 	bl	80021e6 <groveLCD_setReg>

    groveLCD_setColorWhite();
 80020ae:	f000 f80f 	bl	80020d0 <groveLCD_setColorWhite>

}
 80020b2:	bf00      	nop
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20004be0 	.word	0x20004be0
 80020c0:	20004be3 	.word	0x20004be3
 80020c4:	20004be4 	.word	0x20004be4
 80020c8:	20004be1 	.word	0x20004be1
 80020cc:	20004be2 	.word	0x20004be2

080020d0 <groveLCD_setColorWhite>:
//=================================================================
void groveLCD_setColorAll(){groveLCD_setRGB(0, 0, 0);}
void groveLCD_setColorWhite(){groveLCD_setRGB(255, 255, 255);}
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	22ff      	movs	r2, #255	; 0xff
 80020d6:	21ff      	movs	r1, #255	; 0xff
 80020d8:	20ff      	movs	r0, #255	; 0xff
 80020da:	f000 f896 	bl	800220a <groveLCD_setRGB>
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <groveLCD_clear>:
//=================================================================

/********** high level commands, for the user! */
void groveLCD_clear()
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	af00      	add	r7, sp, #0
	groveLCD_command(LCD_CLEARDISPLAY);        // clear display, set cursor position to zero
 80020e6:	2001      	movs	r0, #1
 80020e8:	f000 f840 	bl	800216c <groveLCD_command>
    HAL_Delay(2000);          // this command takes a long time!
 80020ec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80020f0:	f002 fe44 	bl	8004d7c <HAL_Delay>
}
 80020f4:	bf00      	nop
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <groveLCD_setCursor>:
	groveLCD_command(LCD_RETURNHOME);        // set cursor position to zero
    HAL_Delay(2000);        // this command takes a long time!
}
//=================================================================
void groveLCD_setCursor(uint8_t col, uint8_t row)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	460a      	mov	r2, r1
 8002102:	71fb      	strb	r3, [r7, #7]
 8002104:	4613      	mov	r3, r2
 8002106:	71bb      	strb	r3, [r7, #6]
    col = (row == 0 ? col|0x80 : col|0xc0);
 8002108:	79bb      	ldrb	r3, [r7, #6]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d104      	bne.n	8002118 <groveLCD_setCursor+0x20>
 800210e:	79fb      	ldrb	r3, [r7, #7]
 8002110:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002114:	b2db      	uxtb	r3, r3
 8002116:	e003      	b.n	8002120 <groveLCD_setCursor+0x28>
 8002118:	79fb      	ldrb	r3, [r7, #7]
 800211a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800211e:	b2db      	uxtb	r3, r3
 8002120:	71fb      	strb	r3, [r7, #7]
    unsigned char dta[2] = {0x80, col};
 8002122:	2380      	movs	r3, #128	; 0x80
 8002124:	733b      	strb	r3, [r7, #12]
 8002126:	79fb      	ldrb	r3, [r7, #7]
 8002128:	737b      	strb	r3, [r7, #13]
    i2c_send_byteS(dta, 2);
 800212a:	f107 030c 	add.w	r3, r7, #12
 800212e:	2102      	movs	r1, #2
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff ff3f 	bl	8001fb4 <i2c_send_byteS>
}
 8002136:	bf00      	nop
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
	...

08002140 <groveLCD_display>:
{
    _displaycontrol &= ~LCD_DISPLAYON;
    groveLCD_command(LCD_DISPLAYCONTROL | _displaycontrol);
}
//=================================================================
void groveLCD_display() {
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
    _displaycontrol |= LCD_DISPLAYON;
 8002144:	4b08      	ldr	r3, [pc, #32]	; (8002168 <groveLCD_display+0x28>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	f043 0304 	orr.w	r3, r3, #4
 800214c:	b2da      	uxtb	r2, r3
 800214e:	4b06      	ldr	r3, [pc, #24]	; (8002168 <groveLCD_display+0x28>)
 8002150:	701a      	strb	r2, [r3, #0]
    groveLCD_command(LCD_DISPLAYCONTROL | _displaycontrol);
 8002152:	4b05      	ldr	r3, [pc, #20]	; (8002168 <groveLCD_display+0x28>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	f043 0308 	orr.w	r3, r3, #8
 800215a:	b2db      	uxtb	r3, r3
 800215c:	4618      	mov	r0, r3
 800215e:	f000 f805 	bl	800216c <groveLCD_command>
}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	20004be1 	.word	0x20004be1

0800216c <groveLCD_command>:
//=================================================================
/*********** mid level commands, for sending data/cmds */

// send command
void groveLCD_command(uint8_t value)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	71fb      	strb	r3, [r7, #7]
    unsigned char dta[2] = {0x80, value};
 8002176:	2380      	movs	r3, #128	; 0x80
 8002178:	733b      	strb	r3, [r7, #12]
 800217a:	79fb      	ldrb	r3, [r7, #7]
 800217c:	737b      	strb	r3, [r7, #13]
    i2c_send_byteS(dta, 2);
 800217e:	f107 030c 	add.w	r3, r7, #12
 8002182:	2102      	movs	r1, #2
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff ff15 	bl	8001fb4 <i2c_send_byteS>
}
 800218a:	bf00      	nop
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <groveLCD_write>:
//=================================================================
// send data
int groveLCD_write(uint8_t value)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b084      	sub	sp, #16
 8002196:	af00      	add	r7, sp, #0
 8002198:	4603      	mov	r3, r0
 800219a:	71fb      	strb	r3, [r7, #7]
    unsigned char dta[2] = {0x40, value};
 800219c:	2340      	movs	r3, #64	; 0x40
 800219e:	733b      	strb	r3, [r7, #12]
 80021a0:	79fb      	ldrb	r3, [r7, #7]
 80021a2:	737b      	strb	r3, [r7, #13]
    i2c_send_byteS(dta, 2);
 80021a4:	f107 030c 	add.w	r3, r7, #12
 80021a8:	2102      	movs	r1, #2
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff ff02 	bl	8001fb4 <i2c_send_byteS>
    return 1; // assume sucess
 80021b0:	2301      	movs	r3, #1
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <groveLCD_putString>:
//=================================================================
void groveLCD_putString(char* s)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
	while(*s != '\0')
 80021c2:	e007      	b.n	80021d4 <groveLCD_putString+0x1a>
	{
		groveLCD_write(*s);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff ffe2 	bl	8002192 <groveLCD_write>
		s++;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	3301      	adds	r3, #1
 80021d2:	607b      	str	r3, [r7, #4]
	while(*s != '\0')
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1f3      	bne.n	80021c4 <groveLCD_putString+0xa>
	}
}
 80021dc:	bf00      	nop
 80021de:	bf00      	nop
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <groveLCD_setReg>:
//=================================================================
void groveLCD_setReg(unsigned char addr, unsigned char dta)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b082      	sub	sp, #8
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	4603      	mov	r3, r0
 80021ee:	460a      	mov	r2, r1
 80021f0:	71fb      	strb	r3, [r7, #7]
 80021f2:	4613      	mov	r3, r2
 80021f4:	71bb      	strb	r3, [r7, #6]
    i2c1_WriteRegBuffer(RGB_ADDRESS, addr,  &dta, 1);
 80021f6:	1dba      	adds	r2, r7, #6
 80021f8:	79f9      	ldrb	r1, [r7, #7]
 80021fa:	2301      	movs	r3, #1
 80021fc:	20c4      	movs	r0, #196	; 0xc4
 80021fe:	f7ff fe17 	bl	8001e30 <i2c1_WriteRegBuffer>
}
 8002202:	bf00      	nop
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <groveLCD_setRGB>:
//=================================================================
void groveLCD_setRGB(unsigned char r, unsigned char g, unsigned char b)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b082      	sub	sp, #8
 800220e:	af00      	add	r7, sp, #0
 8002210:	4603      	mov	r3, r0
 8002212:	71fb      	strb	r3, [r7, #7]
 8002214:	460b      	mov	r3, r1
 8002216:	71bb      	strb	r3, [r7, #6]
 8002218:	4613      	mov	r3, r2
 800221a:	717b      	strb	r3, [r7, #5]
	groveLCD_setReg(REG_RED, r);
 800221c:	79fb      	ldrb	r3, [r7, #7]
 800221e:	4619      	mov	r1, r3
 8002220:	2004      	movs	r0, #4
 8002222:	f7ff ffe0 	bl	80021e6 <groveLCD_setReg>
	groveLCD_setReg(REG_GREEN, g);
 8002226:	79bb      	ldrb	r3, [r7, #6]
 8002228:	4619      	mov	r1, r3
 800222a:	2003      	movs	r0, #3
 800222c:	f7ff ffdb 	bl	80021e6 <groveLCD_setReg>
	groveLCD_setReg(REG_BLUE, b);
 8002230:	797b      	ldrb	r3, [r7, #5]
 8002232:	4619      	mov	r1, r3
 8002234:	2002      	movs	r0, #2
 8002236:	f7ff ffd6 	bl	80021e6 <groveLCD_setReg>
}
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
	...

08002244 <groveLCD_setColor>:
    {0, 255, 0},                // green
    {0, 0, 255},                // blue
};
//=================================================================
void groveLCD_setColor(unsigned char color)
{
 8002244:	b590      	push	{r4, r7, lr}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	71fb      	strb	r3, [r7, #7]
    if(color > 3)return ;
 800224e:	79fb      	ldrb	r3, [r7, #7]
 8002250:	2b03      	cmp	r3, #3
 8002252:	d81a      	bhi.n	800228a <groveLCD_setColor+0x46>
    groveLCD_setRGB(color_define[color][0], color_define[color][1], color_define[color][2]);
 8002254:	79fa      	ldrb	r2, [r7, #7]
 8002256:	490f      	ldr	r1, [pc, #60]	; (8002294 <groveLCD_setColor+0x50>)
 8002258:	4613      	mov	r3, r2
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	4413      	add	r3, r2
 800225e:	440b      	add	r3, r1
 8002260:	7818      	ldrb	r0, [r3, #0]
 8002262:	79fa      	ldrb	r2, [r7, #7]
 8002264:	490b      	ldr	r1, [pc, #44]	; (8002294 <groveLCD_setColor+0x50>)
 8002266:	4613      	mov	r3, r2
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	4413      	add	r3, r2
 800226c:	440b      	add	r3, r1
 800226e:	3301      	adds	r3, #1
 8002270:	7819      	ldrb	r1, [r3, #0]
 8002272:	79fa      	ldrb	r2, [r7, #7]
 8002274:	4c07      	ldr	r4, [pc, #28]	; (8002294 <groveLCD_setColor+0x50>)
 8002276:	4613      	mov	r3, r2
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	4413      	add	r3, r2
 800227c:	4423      	add	r3, r4
 800227e:	3302      	adds	r3, #2
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	461a      	mov	r2, r3
 8002284:	f7ff ffc1 	bl	800220a <groveLCD_setRGB>
 8002288:	e000      	b.n	800228c <groveLCD_setColor+0x48>
    if(color > 3)return ;
 800228a:	bf00      	nop
}
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	bd90      	pop	{r4, r7, pc}
 8002292:	bf00      	nop
 8002294:	0801b7e4 	.word	0x0801b7e4

08002298 <groveLCD_term_printf>:
//============================================================
void groveLCD_term_printf(const char* fmt, ...)
{
 8002298:	b40f      	push	{r0, r1, r2, r3}
 800229a:	b5b0      	push	{r4, r5, r7, lr}
 800229c:	b0a4      	sub	sp, #144	; 0x90
 800229e:	af02      	add	r7, sp, #8
	unsigned long  ul;
	unsigned long long ull;
	unsigned long  size;
	unsigned int   sp;
	char           s[60];
	int first=0;
 80022a0:	2300      	movs	r3, #0
 80022a2:	677b      	str	r3, [r7, #116]	; 0x74

	va_start(ap, fmt);
 80022a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80022a8:	64bb      	str	r3, [r7, #72]	; 0x48

	while (*fmt != '\0') {
 80022aa:	e1cd      	b.n	8002648 <groveLCD_term_printf+0x3b0>
		if (*fmt =='%') {
 80022ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b25      	cmp	r3, #37	; 0x25
 80022b4:	f040 81bd 	bne.w	8002632 <groveLCD_term_printf+0x39a>
			size=0; sp=1;
 80022b8:	2300      	movs	r3, #0
 80022ba:	67fb      	str	r3, [r7, #124]	; 0x7c
 80022bc:	2301      	movs	r3, #1
 80022be:	67bb      	str	r3, [r7, #120]	; 0x78
			if (*++fmt=='0') {fmt++; sp=0;}	// parse %04d --> sp=0
 80022c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022c4:	3301      	adds	r3, #1
 80022c6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80022ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b30      	cmp	r3, #48	; 0x30
 80022d2:	d106      	bne.n	80022e2 <groveLCD_term_printf+0x4a>
 80022d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022d8:	3301      	adds	r3, #1
 80022da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80022de:	2300      	movs	r3, #0
 80022e0:	67bb      	str	r3, [r7, #120]	; 0x78
			ch=*fmt;
 80022e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			if ((ch>'0') && (ch<='9')) {	// parse %4d --> size=4
 80022ec:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80022f0:	2b30      	cmp	r3, #48	; 0x30
 80022f2:	d92c      	bls.n	800234e <groveLCD_term_printf+0xb6>
 80022f4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80022f8:	2b39      	cmp	r3, #57	; 0x39
 80022fa:	d828      	bhi.n	800234e <groveLCD_term_printf+0xb6>
				char tmp[10];
				int i=0;
 80022fc:	2300      	movs	r3, #0
 80022fe:	673b      	str	r3, [r7, #112]	; 0x70
				while ((ch>='0') && (ch<='9')) {
 8002300:	e012      	b.n	8002328 <groveLCD_term_printf+0x90>
					tmp[i++]=ch;
 8002302:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002304:	1c5a      	adds	r2, r3, #1
 8002306:	673a      	str	r2, [r7, #112]	; 0x70
 8002308:	3388      	adds	r3, #136	; 0x88
 800230a:	443b      	add	r3, r7
 800230c:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8002310:	f803 2c88 	strb.w	r2, [r3, #-136]
					ch=*++fmt;
 8002314:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002318:	3301      	adds	r3, #1
 800231a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800231e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				while ((ch>='0') && (ch<='9')) {
 8002328:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800232c:	2b2f      	cmp	r3, #47	; 0x2f
 800232e:	d903      	bls.n	8002338 <groveLCD_term_printf+0xa0>
 8002330:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002334:	2b39      	cmp	r3, #57	; 0x39
 8002336:	d9e4      	bls.n	8002302 <groveLCD_term_printf+0x6a>
				}
				tmp[i]='\0';
 8002338:	463a      	mov	r2, r7
 800233a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800233c:	4413      	add	r3, r2
 800233e:	2200      	movs	r2, #0
 8002340:	701a      	strb	r2, [r3, #0]
				size=str2num(tmp,10);
 8002342:	463b      	mov	r3, r7
 8002344:	210a      	movs	r1, #10
 8002346:	4618      	mov	r0, r3
 8002348:	f002 fb54 	bl	80049f4 <str2num>
 800234c:	67f8      	str	r0, [r7, #124]	; 0x7c
			}
			switch (ch) {
 800234e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002352:	2b25      	cmp	r3, #37	; 0x25
 8002354:	d03c      	beq.n	80023d0 <groveLCD_term_printf+0x138>
 8002356:	2b25      	cmp	r3, #37	; 0x25
 8002358:	f2c0 8164 	blt.w	8002624 <groveLCD_term_printf+0x38c>
 800235c:	2b78      	cmp	r3, #120	; 0x78
 800235e:	f300 8161 	bgt.w	8002624 <groveLCD_term_printf+0x38c>
 8002362:	2b63      	cmp	r3, #99	; 0x63
 8002364:	f2c0 815e 	blt.w	8002624 <groveLCD_term_printf+0x38c>
 8002368:	3b63      	subs	r3, #99	; 0x63
 800236a:	2b15      	cmp	r3, #21
 800236c:	f200 815a 	bhi.w	8002624 <groveLCD_term_printf+0x38c>
 8002370:	a201      	add	r2, pc, #4	; (adr r2, 8002378 <groveLCD_term_printf+0xe0>)
 8002372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002376:	bf00      	nop
 8002378:	080023d9 	.word	0x080023d9
 800237c:	08002403 	.word	0x08002403
 8002380:	08002625 	.word	0x08002625
 8002384:	08002503 	.word	0x08002503
 8002388:	08002625 	.word	0x08002625
 800238c:	08002625 	.word	0x08002625
 8002390:	08002625 	.word	0x08002625
 8002394:	08002625 	.word	0x08002625
 8002398:	08002625 	.word	0x08002625
 800239c:	08002625 	.word	0x08002625
 80023a0:	08002625 	.word	0x08002625
 80023a4:	08002625 	.word	0x08002625
 80023a8:	08002473 	.word	0x08002473
 80023ac:	0800249f 	.word	0x0800249f
 80023b0:	08002625 	.word	0x08002625
 80023b4:	08002625 	.word	0x08002625
 80023b8:	080023f1 	.word	0x080023f1
 80023bc:	08002625 	.word	0x08002625
 80023c0:	08002447 	.word	0x08002447
 80023c4:	08002625 	.word	0x08002625
 80023c8:	08002625 	.word	0x08002625
 80023cc:	080024d7 	.word	0x080024d7
				case '%':
					groveLCD_write('%');
 80023d0:	2025      	movs	r0, #37	; 0x25
 80023d2:	f7ff fede 	bl	8002192 <groveLCD_write>
					break;
 80023d6:	e132      	b.n	800263e <groveLCD_term_printf+0x3a6>
				case 'c':
					ch = va_arg(ap, int);
 80023d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023da:	1d1a      	adds	r2, r3, #4
 80023dc:	64ba      	str	r2, [r7, #72]	; 0x48
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					groveLCD_write(ch);
 80023e4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff fed2 	bl	8002192 <groveLCD_write>
					break;
 80023ee:	e126      	b.n	800263e <groveLCD_term_printf+0x3a6>
				case 's':
					p = va_arg(ap, char *);
 80023f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023f2:	1d1a      	adds	r2, r3, #4
 80023f4:	64ba      	str	r2, [r7, #72]	; 0x48
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	66fb      	str	r3, [r7, #108]	; 0x6c
					groveLCD_putString(p);
 80023fa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80023fc:	f7ff fedd 	bl	80021ba <groveLCD_putString>
					break;
 8002400:	e11d      	b.n	800263e <groveLCD_term_printf+0x3a6>
				case 'd':
					ul = va_arg(ap, long);
 8002402:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002404:	1d1a      	adds	r2, r3, #4
 8002406:	64ba      	str	r2, [r7, #72]	; 0x48
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					if ((long)ul < 0) {
 800240e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002412:	2b00      	cmp	r3, #0
 8002414:	da07      	bge.n	8002426 <groveLCD_term_printf+0x18e>
						groveLCD_write('-');
 8002416:	202d      	movs	r0, #45	; 0x2d
 8002418:	f7ff febb 	bl	8002192 <groveLCD_write>
						ul = -(long)ul;
 800241c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002420:	425b      	negs	r3, r3
 8002422:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
						//size--;
					}
					num2str(s, ul, 10, size, sp);
 8002426:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002428:	f107 000c 	add.w	r0, r7, #12
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002430:	220a      	movs	r2, #10
 8002432:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8002436:	f002 fa59 	bl	80048ec <num2str>
					groveLCD_putString(s);
 800243a:	f107 030c 	add.w	r3, r7, #12
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff febb 	bl	80021ba <groveLCD_putString>
					break;
 8002444:	e0fb      	b.n	800263e <groveLCD_term_printf+0x3a6>
				case 'u':
					ul = va_arg(ap, unsigned int);
 8002446:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002448:	1d1a      	adds	r2, r3, #4
 800244a:	64ba      	str	r2, [r7, #72]	; 0x48
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					num2str(s, ul, 10, size, sp);
 8002452:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002454:	f107 000c 	add.w	r0, r7, #12
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800245c:	220a      	movs	r2, #10
 800245e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8002462:	f002 fa43 	bl	80048ec <num2str>
					groveLCD_putString(s);
 8002466:	f107 030c 	add.w	r3, r7, #12
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff fea5 	bl	80021ba <groveLCD_putString>
					break;
 8002470:	e0e5      	b.n	800263e <groveLCD_term_printf+0x3a6>
				case 'o':
					ul = va_arg(ap, unsigned int);
 8002472:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002474:	1d1a      	adds	r2, r3, #4
 8002476:	64ba      	str	r2, [r7, #72]	; 0x48
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					num2str(s, ul, 8, size, sp);
 800247e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002480:	f107 000c 	add.w	r0, r7, #12
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002488:	2208      	movs	r2, #8
 800248a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800248e:	f002 fa2d 	bl	80048ec <num2str>
					groveLCD_putString(s);
 8002492:	f107 030c 	add.w	r3, r7, #12
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff fe8f 	bl	80021ba <groveLCD_putString>
					break;
 800249c:	e0cf      	b.n	800263e <groveLCD_term_printf+0x3a6>
				case 'p':
					groveLCD_write('0');
 800249e:	2030      	movs	r0, #48	; 0x30
 80024a0:	f7ff fe77 	bl	8002192 <groveLCD_write>
					groveLCD_write('x');
 80024a4:	2078      	movs	r0, #120	; 0x78
 80024a6:	f7ff fe74 	bl	8002192 <groveLCD_write>
					ul = va_arg(ap, unsigned int);
 80024aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024ac:	1d1a      	adds	r2, r3, #4
 80024ae:	64ba      	str	r2, [r7, #72]	; 0x48
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					num2str(s, ul, 16, size, sp);
 80024b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024b8:	f107 000c 	add.w	r0, r7, #12
 80024bc:	9300      	str	r3, [sp, #0]
 80024be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024c0:	2210      	movs	r2, #16
 80024c2:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80024c6:	f002 fa11 	bl	80048ec <num2str>
					groveLCD_putString(s);
 80024ca:	f107 030c 	add.w	r3, r7, #12
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff fe73 	bl	80021ba <groveLCD_putString>
					break;
 80024d4:	e0b3      	b.n	800263e <groveLCD_term_printf+0x3a6>
				case 'x':
					ul = va_arg(ap, unsigned int);
 80024d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024d8:	1d1a      	adds	r2, r3, #4
 80024da:	64ba      	str	r2, [r7, #72]	; 0x48
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					num2str(s, ul, 16, size, sp);
 80024e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024e4:	f107 000c 	add.w	r0, r7, #12
 80024e8:	9300      	str	r3, [sp, #0]
 80024ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024ec:	2210      	movs	r2, #16
 80024ee:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80024f2:	f002 f9fb 	bl	80048ec <num2str>
					groveLCD_putString(s);
 80024f6:	f107 030c 	add.w	r3, r7, #12
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff fe5d 	bl	80021ba <groveLCD_putString>
					break;
 8002500:	e09d      	b.n	800263e <groveLCD_term_printf+0x3a6>
				case 'f':
					if(first==0){ ull = va_arg(ap, long long unsigned int); first = 1;}
 8002502:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10c      	bne.n	8002522 <groveLCD_term_printf+0x28a>
 8002508:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800250a:	3307      	adds	r3, #7
 800250c:	f023 0307 	bic.w	r3, r3, #7
 8002510:	f103 0208 	add.w	r2, r3, #8
 8002514:	64ba      	str	r2, [r7, #72]	; 0x48
 8002516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800251a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 800251e:	2301      	movs	r3, #1
 8002520:	677b      	str	r3, [r7, #116]	; 0x74
					ull = va_arg(ap, long long unsigned int);
 8002522:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002524:	3307      	adds	r3, #7
 8002526:	f023 0307 	bic.w	r3, r3, #7
 800252a:	f103 0208 	add.w	r2, r3, #8
 800252e:	64ba      	str	r2, [r7, #72]	; 0x48
 8002530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002534:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
					int sign = ( ull & 0x80000000 ) >> 31;
 8002538:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800253c:	f04f 0200 	mov.w	r2, #0
 8002540:	f04f 0300 	mov.w	r3, #0
 8002544:	0fc2      	lsrs	r2, r0, #31
 8002546:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800254a:	0fcb      	lsrs	r3, r1, #31
 800254c:	4613      	mov	r3, r2
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	65fb      	str	r3, [r7, #92]	; 0x5c
					int m = (ull & 0x000FFFFF) ; // should be 0x007FFFFF
 8002554:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002556:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800255a:	65bb      	str	r3, [r7, #88]	; 0x58
					float mf = (float)m ;
 800255c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800255e:	ee07 3a90 	vmov	s15, r3
 8002562:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002566:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
					mf = mf / pow(2.0,20.0);
 800256a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800256e:	eddf 6a40 	vldr	s13, [pc, #256]	; 8002670 <groveLCD_term_printf+0x3d8>
 8002572:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002576:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
					mf = mf + 1.0;
 800257a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800257e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002582:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002586:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
					int e = ( ull & 0x78000000 ) >> 23 ; // should be int e = ( ul & 0x7F800000 ) >> 23;
 800258a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800258e:	f04f 0200 	mov.w	r2, #0
 8002592:	f04f 0300 	mov.w	r3, #0
 8002596:	0dc2      	lsrs	r2, r0, #23
 8002598:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 800259c:	0dcb      	lsrs	r3, r1, #23
 800259e:	4613      	mov	r3, r2
 80025a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025a4:	653b      	str	r3, [r7, #80]	; 0x50
					e = e | (( ull & 0x000F00000 ) >> 20);
 80025a6:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80025aa:	f04f 0200 	mov.w	r2, #0
 80025ae:	f04f 0300 	mov.w	r3, #0
 80025b2:	0d02      	lsrs	r2, r0, #20
 80025b4:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 80025b8:	0d0b      	lsrs	r3, r1, #20
 80025ba:	4613      	mov	r3, r2
 80025bc:	f003 020f 	and.w	r2, r3, #15
 80025c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025c2:	4313      	orrs	r3, r2
 80025c4:	653b      	str	r3, [r7, #80]	; 0x50
					e = e - 127;
 80025c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025c8:	3b7f      	subs	r3, #127	; 0x7f
 80025ca:	653b      	str	r3, [r7, #80]	; 0x50
					float f = mf*myPow(2.0,e);
 80025cc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80025ce:	f7fd ffd3 	bl	8000578 <__aeabi_f2d>
 80025d2:	4604      	mov	r4, r0
 80025d4:	460d      	mov	r5, r1
 80025d6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80025d8:	ed9f 0b23 	vldr	d0, [pc, #140]	; 8002668 <groveLCD_term_printf+0x3d0>
 80025dc:	f002 fb18 	bl	8004c10 <myPow>
 80025e0:	ec53 2b10 	vmov	r2, r3, d0
 80025e4:	4620      	mov	r0, r4
 80025e6:	4629      	mov	r1, r5
 80025e8:	f7fe f81e 	bl	8000628 <__aeabi_dmul>
 80025ec:	4602      	mov	r2, r0
 80025ee:	460b      	mov	r3, r1
 80025f0:	4610      	mov	r0, r2
 80025f2:	4619      	mov	r1, r3
 80025f4:	f7fe fab2 	bl	8000b5c <__aeabi_d2f>
 80025f8:	4603      	mov	r3, r0
 80025fa:	64fb      	str	r3, [r7, #76]	; 0x4c
					if(sign==1){ groveLCD_write('-'); }
 80025fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d102      	bne.n	8002608 <groveLCD_term_printf+0x370>
 8002602:	202d      	movs	r0, #45	; 0x2d
 8002604:	f7ff fdc5 	bl	8002192 <groveLCD_write>
					float2str((char*)s, f, 5);
 8002608:	f107 030c 	add.w	r3, r7, #12
 800260c:	2105      	movs	r1, #5
 800260e:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 8002612:	4618      	mov	r0, r3
 8002614:	f002 faac 	bl	8004b70 <float2str>
					groveLCD_putString((char*)s);
 8002618:	f107 030c 	add.w	r3, r7, #12
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff fdcc 	bl	80021ba <groveLCD_putString>
					break;
 8002622:	e00c      	b.n	800263e <groveLCD_term_printf+0x3a6>

				default:
					groveLCD_write(*fmt);
 8002624:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff fdb1 	bl	8002192 <groveLCD_write>
 8002630:	e005      	b.n	800263e <groveLCD_term_printf+0x3a6>
			}
		} else groveLCD_write(*fmt);
 8002632:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff fdaa 	bl	8002192 <groveLCD_write>
		fmt++;
 800263e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002642:	3301      	adds	r3, #1
 8002644:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	while (*fmt != '\0') {
 8002648:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	f47f ae2c 	bne.w	80022ac <groveLCD_term_printf+0x14>
	}
	va_end(ap);
}
 8002654:	bf00      	nop
 8002656:	bf00      	nop
 8002658:	3788      	adds	r7, #136	; 0x88
 800265a:	46bd      	mov	sp, r7
 800265c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002660:	b004      	add	sp, #16
 8002662:	4770      	bx	lr
 8002664:	f3af 8000 	nop.w
 8002668:	00000000 	.word	0x00000000
 800266c:	40000000 	.word	0x40000000
 8002670:	49800000 	.word	0x49800000

08002674 <CHECKMRRET>:
void * microros_allocate(size_t size, void * state);
void microros_deallocate(void * pointer, void * state);
void * microros_reallocate(void * pointer, size_t size, void * state);
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);

void CHECKMRRET(rcl_ret_t ret, char* msg){if (ret != RCL_RET_OK){ if (DEBUG_PRINTF){printf("Error : %d\r\nMsg : %s\r\n", (int)ret, msg); }}}
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <SubscriberCallbackFunction>:

void SubscriberCallbackFunction(const void *msgin){
 800268a:	b480      	push	{r7}
 800268c:	b085      	sub	sp, #20
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
#if SYNCHRO_EX == EXTEST_MICROROS
	std_msgs__msg__String * msg = (std_msgs__msg__String * )msgin;
	printf("\r\nMessage recue : %s\r\n", msg->data->data);
#elif SYNCHRO_EX == EXFINAL
	std_msgs__msg__Int32 * msg = (std_msgs__msg__Int32 * )msgin;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	60fb      	str	r3, [r7, #12]
	if (DEBUG_PRINTF)
		printf("\r\nMessage recue : %ld\r\n", msg->data);
#endif //SYNCHRO_EX
}
 8002696:	bf00      	nop
 8002698:	3714      	adds	r7, #20
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
	...

080026a4 <microros_task>:

// https://github.com/lFatality/stm32_micro_ros_setup
void microros_task(void *argument)
{
 80026a4:	b5b0      	push	{r4, r5, r7, lr}
 80026a6:	b0ec      	sub	sp, #432	; 0x1b0
 80026a8:	af02      	add	r7, sp, #8
 80026aa:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80026ae:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80026b2:	6018      	str	r0, [r3, #0]
	rcl_node_t node; //microRos structure wich represent a node ROS
	rcl_node_options_t node_opt; //microRos structure wich represent option of a node ROS
	rclc_executor_t executor; //microRos structure wich represent an executor wich can be use to receive message

	// micro-ROS configuration with freertos
	rmw_uros_set_custom_transport(
 80026b4:	4bd5      	ldr	r3, [pc, #852]	; (8002a0c <microros_task+0x368>)
 80026b6:	9301      	str	r3, [sp, #4]
 80026b8:	4bd5      	ldr	r3, [pc, #852]	; (8002a10 <microros_task+0x36c>)
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	4bd5      	ldr	r3, [pc, #852]	; (8002a14 <microros_task+0x370>)
 80026be:	4ad6      	ldr	r2, [pc, #856]	; (8002a18 <microros_task+0x374>)
 80026c0:	49d6      	ldr	r1, [pc, #856]	; (8002a1c <microros_task+0x378>)
 80026c2:	2001      	movs	r0, #1
 80026c4:	f00d fa94 	bl	800fbf0 <rmw_uros_set_custom_transport>
		cubemx_transport_open,
		cubemx_transport_close,
		cubemx_transport_write,
		cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80026c8:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80026cc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80026d0:	4618      	mov	r0, r3
 80026d2:	f00c fff7 	bl	800f6c4 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 80026d6:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80026da:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80026de:	4ad0      	ldr	r2, [pc, #832]	; (8002a20 <microros_task+0x37c>)
 80026e0:	601a      	str	r2, [r3, #0]
	freeRTOS_allocator.deallocate = microros_deallocate;
 80026e2:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80026e6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80026ea:	4ace      	ldr	r2, [pc, #824]	; (8002a24 <microros_task+0x380>)
 80026ec:	605a      	str	r2, [r3, #4]
	freeRTOS_allocator.reallocate = microros_reallocate;
 80026ee:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80026f2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80026f6:	4acc      	ldr	r2, [pc, #816]	; (8002a28 <microros_task+0x384>)
 80026f8:	609a      	str	r2, [r3, #8]
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80026fa:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80026fe:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002702:	4aca      	ldr	r2, [pc, #808]	; (8002a2c <microros_task+0x388>)
 8002704:	60da      	str	r2, [r3, #12]

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8002706:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800270a:	4618      	mov	r0, r3
 800270c:	f00c ffe8 	bl	800f6e0 <rcutils_set_default_allocator>
 8002710:	4603      	mov	r3, r0
 8002712:	f083 0301 	eor.w	r3, r3, #1
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <microros_task+0x80>
		printf("Error on default allocators (line %d)\r\n", __LINE__);
 800271c:	21c1      	movs	r1, #193	; 0xc1
 800271e:	48c4      	ldr	r0, [pc, #784]	; (8002a30 <microros_task+0x38c>)
 8002720:	f017 fcba 	bl	801a098 <iprintf>
	}

	allocator = rcl_get_default_allocator();
 8002724:	463b      	mov	r3, r7
 8002726:	4618      	mov	r0, r3
 8002728:	f00c fffa 	bl	800f720 <rcutils_get_default_allocator>
 800272c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002730:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002734:	f507 749e 	add.w	r4, r7, #316	; 0x13c
 8002738:	461d      	mov	r5, r3
 800273a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800273c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800273e:	682b      	ldr	r3, [r5, #0]
 8002740:	6023      	str	r3, [r4, #0]

	//create init_options
	CHECKMRRET(rclc_support_init(&support, 0, NULL, &allocator), "error on init support");
 8002742:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8002746:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 800274a:	2200      	movs	r2, #0
 800274c:	2100      	movs	r1, #0
 800274e:	f00c fecd 	bl	800f4ec <rclc_support_init>
 8002752:	4603      	mov	r3, r0
 8002754:	49b7      	ldr	r1, [pc, #732]	; (8002a34 <microros_task+0x390>)
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff ff8c 	bl	8002674 <CHECKMRRET>
	// create node
	node_opt = rcl_node_get_default_options(); //Get default node options
 800275c:	463b      	mov	r3, r7
 800275e:	4618      	mov	r0, r3
 8002760:	f00c f87c 	bl	800e85c <rcl_node_get_default_options>
 8002764:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002768:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800276c:	f507 748c 	add.w	r4, r7, #280	; 0x118
 8002770:	461d      	mov	r5, r3
 8002772:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002774:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002776:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800277a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	node_opt.domain_id = ROS_DOMAIN_ID; //Set the ROS_DOMAIN_ID
 800277e:	2300      	movs	r3, #0
 8002780:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	CHECKMRRET(rclc_node_init_with_options(&node, "STM32_node", "", &support, &node_opt), "error on init node");
 8002784:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8002788:	f507 709a 	add.w	r0, r7, #308	; 0x134
 800278c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	4613      	mov	r3, r2
 8002794:	4aa8      	ldr	r2, [pc, #672]	; (8002a38 <microros_task+0x394>)
 8002796:	49a9      	ldr	r1, [pc, #676]	; (8002a3c <microros_task+0x398>)
 8002798:	f00c fef6 	bl	800f588 <rclc_node_init_with_options>
 800279c:	4603      	mov	r3, r0
 800279e:	49a8      	ldr	r1, [pc, #672]	; (8002a40 <microros_task+0x39c>)
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff ff67 	bl	8002674 <CHECKMRRET>
		ret = rclc_executor_spin_some(&executor, 100*1000*1000);
		vTaskDelay(SAMPLING_PERIOD_ms);
	}
#elif SYNCHRO_EX == EXFINAL
	//Init the queue mesage
	MicroRosPubMsg MsgToPub = {'N', 0, 0};
 80027a6:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80027aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80027ae:	224e      	movs	r2, #78	; 0x4e
 80027b0:	701a      	strb	r2, [r3, #0]
 80027b2:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80027b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80027ba:	2200      	movs	r2, #0
 80027bc:	605a      	str	r2, [r3, #4]
 80027be:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80027c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80027c6:	2200      	movs	r2, #0
 80027c8:	609a      	str	r2, [r3, #8]
	MicroRosSubMsg SubToMsg = {DEFAULT_DIR, 0, 0, DEFAULT_MODE, DEFAULT_SPEED};
 80027ca:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80027ce:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80027d2:	4a9c      	ldr	r2, [pc, #624]	; (8002a44 <microros_task+0x3a0>)
 80027d4:	461c      	mov	r4, r3
 80027d6:	4615      	mov	r5, r2
 80027d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027dc:	682b      	ldr	r3, [r5, #0]
 80027de:	6023      	str	r3, [r4, #0]
	/* PUBLISHER */
	//Use to publish the direction of robot in sensor mode
	rcl_publisher_t capteur_dir_pub;
	char* capteur_dir_topic = CAPTEUR_DIR_TOPIC;
 80027e0:	4b99      	ldr	r3, [pc, #612]	; (8002a48 <microros_task+0x3a4>)
 80027e2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	std_msgs__msg__Int32 capteur_dir_msg;
	//Use to publish the actual mode of the robot
	rcl_publisher_t etat_mode_pub;
	char* etat_mode_topic = ETAT_MODE_TOPIC;
 80027e6:	4b99      	ldr	r3, [pc, #612]	; (8002a4c <microros_task+0x3a8>)
 80027e8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	std_msgs__msg__Int32 etat_mode_msg;
	//Use to publish the actual speed of the robot
	rcl_publisher_t etat_speed_pub;
	char* etat_speed_topic = ETAT_SPEED_TOPIC;
 80027ec:	4b98      	ldr	r3, [pc, #608]	; (8002a50 <microros_task+0x3ac>)
 80027ee:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
	std_msgs__msg__Int32 etat_speed_msg;
	/* SUBSCRIBER */
	//Use to receive the x position of object see by the camera
	rcl_subscription_t camera_x_sub;
	char* camera_x_topic = CAMERA_X_TOPIC;
 80027f2:	4b98      	ldr	r3, [pc, #608]	; (8002a54 <microros_task+0x3b0>)
 80027f4:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
	std_msgs__msg__Int32 camera_x_msg;
	//Use to receive the y position of object see by the camera
	rcl_subscription_t camera_y_sub;
	char* camera_y_topic = CAMERA_Y_TOPIC;
 80027f8:	4b97      	ldr	r3, [pc, #604]	; (8002a58 <microros_task+0x3b4>)
 80027fa:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	std_msgs__msg__Int32 camera_y_msg;
	//Use to receive the remote control in remote mode
	rcl_subscription_t telecommande_dir_sub;
	char* telecommande_dir_topic = TELECOMMANDE_DIR_TOPIC;
 80027fe:	4b97      	ldr	r3, [pc, #604]	; (8002a5c <microros_task+0x3b8>)
 8002800:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	std_msgs__msg__Int32 telecommande_dir_msg;
	//Use to receive the mode config
	rcl_subscription_t config_mode_sub;
	char* config_mode_topic = CONFIG_MODE_TOPIC;
 8002804:	4b96      	ldr	r3, [pc, #600]	; (8002a60 <microros_task+0x3bc>)
 8002806:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	std_msgs__msg__Int32 config_mode_msg;
	//Use to receive the speed config
	rcl_subscription_t config_speed_sub;
	char* config_speed_topic = CONFIG_SPEED_TOPIC;
 800280a:	4b96      	ldr	r3, [pc, #600]	; (8002a64 <microros_task+0x3c0>)
 800280c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	std_msgs__msg__Int32 config_speed_msg;

	// create publisher
	createPublisher(&capteur_dir_pub, &node,
 8002810:	f00e f860 	bl	80108d4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8002814:	4602      	mov	r2, r0
 8002816:	f507 719a 	add.w	r1, r7, #308	; 0x134
 800281a:	f107 0060 	add.w	r0, r7, #96	; 0x60
 800281e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002822:	9300      	str	r3, [sp, #0]
 8002824:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002828:	f000 fed4 	bl	80035d4 <createPublisher>
		ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
		capteur_dir_topic, &capteur_dir_msg);

	createPublisher(&etat_mode_pub, &node,
 800282c:	f00e f852 	bl	80108d4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8002830:	4602      	mov	r2, r0
 8002832:	f507 719a 	add.w	r1, r7, #308	; 0x134
 8002836:	f107 0058 	add.w	r0, r7, #88	; 0x58
 800283a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002844:	f000 fec6 	bl	80035d4 <createPublisher>
		ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
		etat_mode_topic, &etat_mode_msg);

	createPublisher(&etat_speed_pub, &node,
 8002848:	f00e f844 	bl	80108d4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 800284c:	4602      	mov	r2, r0
 800284e:	f507 719a 	add.w	r1, r7, #308	; 0x134
 8002852:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002856:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002860:	f000 feb8 	bl	80035d4 <createPublisher>
		ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
		etat_speed_topic, &etat_speed_msg);

	//create subscriber
	createSubscriber(&camera_x_sub, &node,
 8002864:	f00e f836 	bl	80108d4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8002868:	4602      	mov	r2, r0
 800286a:	f507 719a 	add.w	r1, r7, #308	; 0x134
 800286e:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002872:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800287c:	f000 fec6 	bl	800360c <createSubscriber>
		ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
		camera_x_topic, &camera_x_msg);

	createSubscriber(&camera_y_sub, &node,
 8002880:	f00e f828 	bl	80108d4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8002884:	4602      	mov	r2, r0
 8002886:	f507 719a 	add.w	r1, r7, #308	; 0x134
 800288a:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800288e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002898:	f000 feb8 	bl	800360c <createSubscriber>
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			camera_y_topic, &camera_y_msg);

	createSubscriber(&telecommande_dir_sub, &node,
 800289c:	f00e f81a 	bl	80108d4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 80028a0:	4602      	mov	r2, r0
 80028a2:	f507 719a 	add.w	r1, r7, #308	; 0x134
 80028a6:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80028aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80028b4:	f000 feaa 	bl	800360c <createSubscriber>
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			telecommande_dir_topic, &telecommande_dir_msg);

	createSubscriber(&config_mode_sub, &node,
 80028b8:	f00e f80c 	bl	80108d4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 80028bc:	4602      	mov	r2, r0
 80028be:	f507 719a 	add.w	r1, r7, #308	; 0x134
 80028c2:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80028c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80028d0:	f000 fe9c 	bl	800360c <createSubscriber>
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			config_mode_topic, &config_mode_msg);

	createSubscriber(&config_speed_sub, &node,
 80028d4:	f00d fffe 	bl	80108d4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 80028d8:	4602      	mov	r2, r0
 80028da:	f507 719a 	add.w	r1, r7, #308	; 0x134
 80028de:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80028e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80028ec:	f000 fe8e 	bl	800360c <createSubscriber>
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			config_speed_topic, &config_speed_msg);

	//Init the executor
	CHECKMRRET(rclc_executor_init(&executor, &support.context, 5, &allocator), "Error on init executor");
 80028f0:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 80028f4:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80028f8:	1d19      	adds	r1, r3, #4
 80028fa:	f107 0098 	add.w	r0, r7, #152	; 0x98
 80028fe:	4613      	mov	r3, r2
 8002900:	2205      	movs	r2, #5
 8002902:	f00c fb95 	bl	800f030 <rclc_executor_init>
 8002906:	4603      	mov	r3, r0
 8002908:	4957      	ldr	r1, [pc, #348]	; (8002a68 <microros_task+0x3c4>)
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff feb2 	bl	8002674 <CHECKMRRET>
	/*Add subscriber to executor to let it check if message is receive on this
	topic and store the data on the message structure after call the callback*/
	CHECKMRRET(rclc_executor_add_subscription(&executor, &camera_x_sub, &camera_x_msg, &SubscriberCallbackFunction, ON_NEW_DATA), "error add camera_x_sub");
 8002910:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8002914:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002918:	f107 0098 	add.w	r0, r7, #152	; 0x98
 800291c:	2300      	movs	r3, #0
 800291e:	9300      	str	r3, [sp, #0]
 8002920:	4b52      	ldr	r3, [pc, #328]	; (8002a6c <microros_task+0x3c8>)
 8002922:	f00c fbf9 	bl	800f118 <rclc_executor_add_subscription>
 8002926:	4603      	mov	r3, r0
 8002928:	4951      	ldr	r1, [pc, #324]	; (8002a70 <microros_task+0x3cc>)
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff fea2 	bl	8002674 <CHECKMRRET>
	CHECKMRRET(rclc_executor_add_subscription(&executor, &camera_y_sub, &camera_y_msg, &SubscriberCallbackFunction, ON_NEW_DATA), "error add camera_y_sub");
 8002930:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002934:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8002938:	f107 0098 	add.w	r0, r7, #152	; 0x98
 800293c:	2300      	movs	r3, #0
 800293e:	9300      	str	r3, [sp, #0]
 8002940:	4b4a      	ldr	r3, [pc, #296]	; (8002a6c <microros_task+0x3c8>)
 8002942:	f00c fbe9 	bl	800f118 <rclc_executor_add_subscription>
 8002946:	4603      	mov	r3, r0
 8002948:	494a      	ldr	r1, [pc, #296]	; (8002a74 <microros_task+0x3d0>)
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff fe92 	bl	8002674 <CHECKMRRET>
	CHECKMRRET(rclc_executor_add_subscription(&executor, &telecommande_dir_sub, &telecommande_dir_msg, &SubscriberCallbackFunction, ON_NEW_DATA), "error add telecommande_dir_sub");
 8002950:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002954:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002958:	f107 0098 	add.w	r0, r7, #152	; 0x98
 800295c:	2300      	movs	r3, #0
 800295e:	9300      	str	r3, [sp, #0]
 8002960:	4b42      	ldr	r3, [pc, #264]	; (8002a6c <microros_task+0x3c8>)
 8002962:	f00c fbd9 	bl	800f118 <rclc_executor_add_subscription>
 8002966:	4603      	mov	r3, r0
 8002968:	4943      	ldr	r1, [pc, #268]	; (8002a78 <microros_task+0x3d4>)
 800296a:	4618      	mov	r0, r3
 800296c:	f7ff fe82 	bl	8002674 <CHECKMRRET>
	CHECKMRRET(rclc_executor_add_subscription(&executor, &config_mode_sub, &config_mode_msg, &SubscriberCallbackFunction, ON_NEW_DATA), "error add config_mode_sub");
 8002970:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002974:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002978:	f107 0098 	add.w	r0, r7, #152	; 0x98
 800297c:	2300      	movs	r3, #0
 800297e:	9300      	str	r3, [sp, #0]
 8002980:	4b3a      	ldr	r3, [pc, #232]	; (8002a6c <microros_task+0x3c8>)
 8002982:	f00c fbc9 	bl	800f118 <rclc_executor_add_subscription>
 8002986:	4603      	mov	r3, r0
 8002988:	493c      	ldr	r1, [pc, #240]	; (8002a7c <microros_task+0x3d8>)
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff fe72 	bl	8002674 <CHECKMRRET>
	CHECKMRRET(rclc_executor_add_subscription(&executor, &config_speed_sub, &config_speed_msg, &SubscriberCallbackFunction, ON_NEW_DATA), "error add config_speed_sub");
 8002990:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002994:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002998:	f107 0098 	add.w	r0, r7, #152	; 0x98
 800299c:	2300      	movs	r3, #0
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	4b32      	ldr	r3, [pc, #200]	; (8002a6c <microros_task+0x3c8>)
 80029a2:	f00c fbb9 	bl	800f118 <rclc_executor_add_subscription>
 80029a6:	4603      	mov	r3, r0
 80029a8:	4935      	ldr	r1, [pc, #212]	; (8002a80 <microros_task+0x3dc>)
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff fe62 	bl	8002674 <CHECKMRRET>

	for(;;)
	{
		if (!uxQueueMessagesWaiting(qhMR_sub)) //If no message in 'output' queue
 80029b0:	4b34      	ldr	r3, [pc, #208]	; (8002a84 <microros_task+0x3e0>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f009 fdd7 	bl	800c568 <uxQueueMessagesWaiting>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d108      	bne.n	80029d2 <microros_task+0x32e>
			xQueueSend(qhMR_sub, ( void * ) &SubToMsg, portMAX_DELAY); //Send queue message
 80029c0:	4b30      	ldr	r3, [pc, #192]	; (8002a84 <microros_task+0x3e0>)
 80029c2:	6818      	ldr	r0, [r3, #0]
 80029c4:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80029c8:	2300      	movs	r3, #0
 80029ca:	f04f 32ff 	mov.w	r2, #4294967295
 80029ce:	f009 fa45 	bl	800be5c <xQueueGenericSend>
		rclc_executor_spin_some(&executor, 1*1000*1000); //Execute executor
 80029d2:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80029d6:	4a2c      	ldr	r2, [pc, #176]	; (8002a88 <microros_task+0x3e4>)
 80029d8:	f04f 0300 	mov.w	r3, #0
 80029dc:	4608      	mov	r0, r1
 80029de:	f00c fd4f 	bl	800f480 <rclc_executor_spin_some>

		//Put the receive data into the queue message structure
		SubToMsg.dir = telecommande_dir_msg.data;
 80029e2:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80029e6:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80029f0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80029f4:	601a      	str	r2, [r3, #0]
		SubToMsg.x = camera_x_msg.data;
 80029f6:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80029fa:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002a04:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002a08:	605a      	str	r2, [r3, #4]
 8002a0a:	e03f      	b.n	8002a8c <microros_task+0x3e8>
 8002a0c:	08001b61 	.word	0x08001b61
 8002a10:	08001af9 	.word	0x08001af9
 8002a14:	08001ad9 	.word	0x08001ad9
 8002a18:	08001aad 	.word	0x08001aad
 8002a1c:	200049d8 	.word	0x200049d8
 8002a20:	08003651 	.word	0x08003651
 8002a24:	08003695 	.word	0x08003695
 8002a28:	080036cd 	.word	0x080036cd
 8002a2c:	08003739 	.word	0x08003739
 8002a30:	0801b3f4 	.word	0x0801b3f4
 8002a34:	0801b41c 	.word	0x0801b41c
 8002a38:	0801b434 	.word	0x0801b434
 8002a3c:	0801b438 	.word	0x0801b438
 8002a40:	0801b444 	.word	0x0801b444
 8002a44:	0801b5b0 	.word	0x0801b5b0
 8002a48:	0801b458 	.word	0x0801b458
 8002a4c:	0801b464 	.word	0x0801b464
 8002a50:	0801b470 	.word	0x0801b470
 8002a54:	0801b47c 	.word	0x0801b47c
 8002a58:	0801b488 	.word	0x0801b488
 8002a5c:	0801b494 	.word	0x0801b494
 8002a60:	0801b4a0 	.word	0x0801b4a0
 8002a64:	0801b4a8 	.word	0x0801b4a8
 8002a68:	0801b4b0 	.word	0x0801b4b0
 8002a6c:	0800268b 	.word	0x0800268b
 8002a70:	0801b4c8 	.word	0x0801b4c8
 8002a74:	0801b4e0 	.word	0x0801b4e0
 8002a78:	0801b4f8 	.word	0x0801b4f8
 8002a7c:	0801b518 	.word	0x0801b518
 8002a80:	0801b534 	.word	0x0801b534
 8002a84:	20004bf4 	.word	0x20004bf4
 8002a88:	000f4240 	.word	0x000f4240
		SubToMsg.y = camera_y_msg.data;
 8002a8c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002a90:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002a9a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002a9e:	609a      	str	r2, [r3, #8]
		SubToMsg.mode = config_mode_msg.data;
 8002aa0:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002aa4:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002aae:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002ab2:	60da      	str	r2, [r3, #12]
		SubToMsg.speed = config_speed_msg.data;
 8002ab4:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002ab8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002ac2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002ac6:	611a      	str	r2, [r3, #16]

		if (uxQueueMessagesWaiting(qhMR_pub)) //If no message in 'input' queue
 8002ac8:	4b2d      	ldr	r3, [pc, #180]	; (8002b80 <microros_task+0x4dc>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f009 fd4b 	bl	800c568 <uxQueueMessagesWaiting>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d04e      	beq.n	8002b76 <microros_task+0x4d2>
		{
			xQueueReceive(qhMR_pub, &MsgToPub, portMAX_DELAY); //Receive data
 8002ad8:	4b29      	ldr	r3, [pc, #164]	; (8002b80 <microros_task+0x4dc>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8002ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f009 fb53 	bl	800c190 <xQueueReceive>
			capteur_dir_msg.data = (int)MsgToPub.dir;
 8002aea:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002aee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	461a      	mov	r2, r3
 8002af6:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002afa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002afe:	601a      	str	r2, [r3, #0]
			etat_mode_msg.data = MsgToPub.mode;
 8002b00:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002b04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002b08:	685a      	ldr	r2, [r3, #4]
 8002b0a:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002b0e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002b12:	601a      	str	r2, [r3, #0]
			etat_speed_msg.data = MsgToPub.speed;
 8002b14:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002b18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002b1c:	689a      	ldr	r2, [r3, #8]
 8002b1e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002b22:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8002b26:	601a      	str	r2, [r3, #0]

			//Publish data
			CHECKMRRET(rcl_publish(&capteur_dir_pub, &capteur_dir_msg, NULL), "erreur publish capteur_dir_pub");
 8002b28:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002b2c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002b30:	2200      	movs	r2, #0
 8002b32:	4618      	mov	r0, r3
 8002b34:	f00b ffea 	bl	800eb0c <rcl_publish>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	4912      	ldr	r1, [pc, #72]	; (8002b84 <microros_task+0x4e0>)
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff fd99 	bl	8002674 <CHECKMRRET>
			CHECKMRRET(rcl_publish(&etat_mode_pub, &etat_mode_msg, NULL), "erreur publish etat_mode_pub");
 8002b42:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8002b46:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f00b ffdd 	bl	800eb0c <rcl_publish>
 8002b52:	4603      	mov	r3, r0
 8002b54:	490c      	ldr	r1, [pc, #48]	; (8002b88 <microros_task+0x4e4>)
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7ff fd8c 	bl	8002674 <CHECKMRRET>
			CHECKMRRET(rcl_publish(&etat_speed_pub, &etat_speed_msg, NULL), "erreur publish etat_speed_pub");
 8002b5c:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8002b60:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002b64:	2200      	movs	r2, #0
 8002b66:	4618      	mov	r0, r3
 8002b68:	f00b ffd0 	bl	800eb0c <rcl_publish>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	4907      	ldr	r1, [pc, #28]	; (8002b8c <microros_task+0x4e8>)
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff fd7f 	bl	8002674 <CHECKMRRET>

			#if DEBUG_PRINTF
			printf("\r\nReceive from decision :\r\nDirection : %d\r\nMode : %d\r\nSpeed : %d\r\n", capteur_dir_msg.data, etat_mode_msg.data, etat_speed_msg.data);
			#endif //DEBUG_PRINTF
		}
		vTaskDelay(SAMPLING_PERIOD_ms);
 8002b76:	2005      	movs	r0, #5
 8002b78:	f00a f852 	bl	800cc20 <vTaskDelay>
		if (!uxQueueMessagesWaiting(qhMR_sub)) //If no message in 'output' queue
 8002b7c:	e718      	b.n	80029b0 <microros_task+0x30c>
 8002b7e:	bf00      	nop
 8002b80:	20004bf8 	.word	0x20004bf8
 8002b84:	0801b550 	.word	0x0801b550
 8002b88:	0801b570 	.word	0x0801b570
 8002b8c:	0801b590 	.word	0x0801b590

08002b90 <task_Motor_Left>:
	}
#endif //SYNCHRO_EX
}

void task_Motor_Left(void *pvParameters)
{
 8002b90:	b5b0      	push	{r4, r5, r7, lr}
 8002b92:	b088      	sub	sp, #32
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
	int16_t consigne = 0; //Store the desirate speed
 8002b98:	2300      	movs	r3, #0
 8002b9a:	81fb      	strh	r3, [r7, #14]

	float ui = 0.0; //Integral term of the correcteur
 8002b9c:	f04f 0300 	mov.w	r3, #0
 8002ba0:	61fb      	str	r3, [r7, #28]
	float up = 0.0; //Proportionnal term of the correcteur
 8002ba2:	f04f 0300 	mov.w	r3, #0
 8002ba6:	61bb      	str	r3, [r7, #24]
	int err = 0; //Error term of the correcteur
 8002ba8:	2300      	movs	r3, #0
 8002baa:	617b      	str	r3, [r7, #20]
	int speed = 0; //Actual speed of motor
 8002bac:	2300      	movs	r3, #0
 8002bae:	613b      	str	r3, [r7, #16]

	for (;;)
	{
		xQueueReceive(q_mot_L, &consigne, portMAX_DELAY); //receive wanted speed
 8002bb0:	4b35      	ldr	r3, [pc, #212]	; (8002c88 <task_Motor_Left+0xf8>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f107 010e 	add.w	r1, r7, #14
 8002bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f009 fae7 	bl	800c190 <xQueueReceive>

		speed = quadEncoder_GetSpeedL(); //Get actual speed
 8002bc2:	f000 ffdf 	bl	8003b84 <quadEncoder_GetSpeedL>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	613b      	str	r3, [r7, #16]
		//Calculate term of correcteur
		err=consigne-speed;
 8002bca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	617b      	str	r3, [r7, #20]
		up=LKp*(float)err;
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	ee07 3a90 	vmov	s15, r3
 8002bdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002be0:	ee17 0a90 	vmov	r0, s15
 8002be4:	f7fd fcc8 	bl	8000578 <__aeabi_f2d>
 8002be8:	a323      	add	r3, pc, #140	; (adr r3, 8002c78 <task_Motor_Left+0xe8>)
 8002bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bee:	f7fd fd1b 	bl	8000628 <__aeabi_dmul>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	4610      	mov	r0, r2
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	f7fd ffaf 	bl	8000b5c <__aeabi_d2f>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	61bb      	str	r3, [r7, #24]
		ui=ui+LKp*LKi*(float)err;
 8002c02:	69f8      	ldr	r0, [r7, #28]
 8002c04:	f7fd fcb8 	bl	8000578 <__aeabi_f2d>
 8002c08:	4604      	mov	r4, r0
 8002c0a:	460d      	mov	r5, r1
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	ee07 3a90 	vmov	s15, r3
 8002c12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c16:	ee17 0a90 	vmov	r0, s15
 8002c1a:	f7fd fcad 	bl	8000578 <__aeabi_f2d>
 8002c1e:	a318      	add	r3, pc, #96	; (adr r3, 8002c80 <task_Motor_Left+0xf0>)
 8002c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c24:	f7fd fd00 	bl	8000628 <__aeabi_dmul>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	4620      	mov	r0, r4
 8002c2e:	4629      	mov	r1, r5
 8002c30:	f7fd fb44 	bl	80002bc <__adddf3>
 8002c34:	4602      	mov	r2, r0
 8002c36:	460b      	mov	r3, r1
 8002c38:	4610      	mov	r0, r2
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	f7fd ff8e 	bl	8000b5c <__aeabi_d2f>
 8002c40:	4603      	mov	r3, r0
 8002c42:	61fb      	str	r3, [r7, #28]

		motorLeft_SetDuty(100+(int)(up+ui)); //Set duty cycle of the motor
 8002c44:	ed97 7a06 	vldr	s14, [r7, #24]
 8002c48:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c54:	ee17 3a90 	vmov	r3, s15
 8002c58:	3364      	adds	r3, #100	; 0x64
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f000 feb6 	bl	80039cc <motorLeft_SetDuty>

		xSemaphoreGive(xSem_Supervision); //Give semaphore to liberate the decision task
 8002c60:	4b0a      	ldr	r3, [pc, #40]	; (8002c8c <task_Motor_Left+0xfc>)
 8002c62:	6818      	ldr	r0, [r3, #0]
 8002c64:	2300      	movs	r3, #0
 8002c66:	2200      	movs	r2, #0
 8002c68:	2100      	movs	r1, #0
 8002c6a:	f009 f8f7 	bl	800be5c <xQueueGenericSend>
		vTaskDelay(SAMPLING_PERIOD_ms);
 8002c6e:	2005      	movs	r0, #5
 8002c70:	f009 ffd6 	bl	800cc20 <vTaskDelay>
		xQueueReceive(q_mot_L, &consigne, portMAX_DELAY); //receive wanted speed
 8002c74:	e79c      	b.n	8002bb0 <task_Motor_Left+0x20>
 8002c76:	bf00      	nop
 8002c78:	d2f1a9fc 	.word	0xd2f1a9fc
 8002c7c:	3f50624d 	.word	0x3f50624d
 8002c80:	47ae147b 	.word	0x47ae147b
 8002c84:	3f547ae1 	.word	0x3f547ae1
 8002c88:	20004bec 	.word	0x20004bec
 8002c8c:	20004be8 	.word	0x20004be8

08002c90 <task_Motor_Right>:
	}
}

void task_Motor_Right(void *pvParameters)
{
 8002c90:	b5b0      	push	{r4, r5, r7, lr}
 8002c92:	b088      	sub	sp, #32
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
	int16_t consigne = 0; //Store the desirate speed
 8002c98:	2300      	movs	r3, #0
 8002c9a:	81fb      	strh	r3, [r7, #14]

	float ui = 0.0; //Integral term of the correcteur
 8002c9c:	f04f 0300 	mov.w	r3, #0
 8002ca0:	61fb      	str	r3, [r7, #28]
	float up = 0.0; //Proportionnal term of the correcteur
 8002ca2:	f04f 0300 	mov.w	r3, #0
 8002ca6:	61bb      	str	r3, [r7, #24]
	int err = 0; //Error term of the correcteur
 8002ca8:	2300      	movs	r3, #0
 8002caa:	617b      	str	r3, [r7, #20]
	int speed = 0; //Actual speed of motor
 8002cac:	2300      	movs	r3, #0
 8002cae:	613b      	str	r3, [r7, #16]

	for (;;)
	{
		xQueueReceive(q_mot_R, &consigne, portMAX_DELAY); //receive wanted speed
 8002cb0:	4b35      	ldr	r3, [pc, #212]	; (8002d88 <task_Motor_Right+0xf8>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f107 010e 	add.w	r1, r7, #14
 8002cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f009 fa67 	bl	800c190 <xQueueReceive>

		speed = quadEncoder_GetSpeedR(); //Get actual speed
 8002cc2:	f000 ffb1 	bl	8003c28 <quadEncoder_GetSpeedR>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	613b      	str	r3, [r7, #16]
		//Calculate term of correcteur
		err=consigne-speed;
 8002cca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	617b      	str	r3, [r7, #20]
		up=RKp*(float)err;
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	ee07 3a90 	vmov	s15, r3
 8002cdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ce0:	ee17 0a90 	vmov	r0, s15
 8002ce4:	f7fd fc48 	bl	8000578 <__aeabi_f2d>
 8002ce8:	a323      	add	r3, pc, #140	; (adr r3, 8002d78 <task_Motor_Right+0xe8>)
 8002cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cee:	f7fd fc9b 	bl	8000628 <__aeabi_dmul>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	4610      	mov	r0, r2
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	f7fd ff2f 	bl	8000b5c <__aeabi_d2f>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	61bb      	str	r3, [r7, #24]
		ui=ui+RKp*RKi*(float)err;
 8002d02:	69f8      	ldr	r0, [r7, #28]
 8002d04:	f7fd fc38 	bl	8000578 <__aeabi_f2d>
 8002d08:	4604      	mov	r4, r0
 8002d0a:	460d      	mov	r5, r1
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	ee07 3a90 	vmov	s15, r3
 8002d12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d16:	ee17 0a90 	vmov	r0, s15
 8002d1a:	f7fd fc2d 	bl	8000578 <__aeabi_f2d>
 8002d1e:	a318      	add	r3, pc, #96	; (adr r3, 8002d80 <task_Motor_Right+0xf0>)
 8002d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d24:	f7fd fc80 	bl	8000628 <__aeabi_dmul>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	4620      	mov	r0, r4
 8002d2e:	4629      	mov	r1, r5
 8002d30:	f7fd fac4 	bl	80002bc <__adddf3>
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	4610      	mov	r0, r2
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	f7fd ff0e 	bl	8000b5c <__aeabi_d2f>
 8002d40:	4603      	mov	r3, r0
 8002d42:	61fb      	str	r3, [r7, #28]

		motorRight_SetDuty(100+(int)(up+ui)); //Set duty cycle of the motor
 8002d44:	ed97 7a06 	vldr	s14, [r7, #24]
 8002d48:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d54:	ee17 3a90 	vmov	r3, s15
 8002d58:	3364      	adds	r3, #100	; 0x64
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f000 fe46 	bl	80039ec <motorRight_SetDuty>

		xSemaphoreGive(xSem_Supervision);//Give semaphore to liberate the decision task
 8002d60:	4b0a      	ldr	r3, [pc, #40]	; (8002d8c <task_Motor_Right+0xfc>)
 8002d62:	6818      	ldr	r0, [r3, #0]
 8002d64:	2300      	movs	r3, #0
 8002d66:	2200      	movs	r2, #0
 8002d68:	2100      	movs	r1, #0
 8002d6a:	f009 f877 	bl	800be5c <xQueueGenericSend>
		vTaskDelay(SAMPLING_PERIOD_ms);
 8002d6e:	2005      	movs	r0, #5
 8002d70:	f009 ff56 	bl	800cc20 <vTaskDelay>
		xQueueReceive(q_mot_R, &consigne, portMAX_DELAY); //receive wanted speed
 8002d74:	e79c      	b.n	8002cb0 <task_Motor_Right+0x20>
 8002d76:	bf00      	nop
 8002d78:	d2f1a9fc 	.word	0xd2f1a9fc
 8002d7c:	3f50624d 	.word	0x3f50624d
 8002d80:	47ae147b 	.word	0x47ae147b
 8002d84:	3f547ae1 	.word	0x3f547ae1
 8002d88:	20004bf0 	.word	0x20004bf0
 8002d8c:	20004be8 	.word	0x20004be8

08002d90 <task_VL53>:
	}
}

#if VL53
void task_VL53(void *pvParameters)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
	static uint16_t dist;
	static const int SEUIL = 20; //Trigger
	int obs = 0; //Bool to indicate if we detect an obstacle or not
 8002d98:	2300      	movs	r3, #0
 8002d9a:	60bb      	str	r3, [r7, #8]

	int tmp = 0; //For debug purpose
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
		dist = readRangeSingleMillimeters()/10; //Get the distance from the sensor
 8002da0:	f7fe fb68 	bl	8001474 <readRangeSingleMillimeters>
 8002da4:	4603      	mov	r3, r0
 8002da6:	461a      	mov	r2, r3
 8002da8:	4b1e      	ldr	r3, [pc, #120]	; (8002e24 <task_VL53+0x94>)
 8002daa:	fba3 2302 	umull	r2, r3, r3, r2
 8002dae:	08db      	lsrs	r3, r3, #3
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	4b1d      	ldr	r3, [pc, #116]	; (8002e28 <task_VL53+0x98>)
 8002db4:	801a      	strh	r2, [r3, #0]

		if (tmp > 10000)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f242 7210 	movw	r2, #10000	; 0x2710
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	dd08      	ble.n	8002dd2 <task_VL53+0x42>
		{
			printf("Valeur VL53 : %d\r\n", dist);
 8002dc0:	4b19      	ldr	r3, [pc, #100]	; (8002e28 <task_VL53+0x98>)
 8002dc2:	881b      	ldrh	r3, [r3, #0]
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4819      	ldr	r0, [pc, #100]	; (8002e2c <task_VL53+0x9c>)
 8002dc8:	f017 f966 	bl	801a098 <iprintf>
			tmp = 0;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	e002      	b.n	8002dd8 <task_VL53+0x48>
		}
		else
			tmp++;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	60fb      	str	r3, [r7, #12]

		if (dist < SEUIL && dist != 0) //If distance is less than the trigger
 8002dd8:	4b13      	ldr	r3, [pc, #76]	; (8002e28 <task_VL53+0x98>)
 8002dda:	881b      	ldrh	r3, [r3, #0]
 8002ddc:	461a      	mov	r2, r3
 8002dde:	4b14      	ldr	r3, [pc, #80]	; (8002e30 <task_VL53+0xa0>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	da06      	bge.n	8002df4 <task_VL53+0x64>
 8002de6:	4b10      	ldr	r3, [pc, #64]	; (8002e28 <task_VL53+0x98>)
 8002de8:	881b      	ldrh	r3, [r3, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d002      	beq.n	8002df4 <task_VL53+0x64>
			obs = 1; //We detect an obstacle
 8002dee:	2301      	movs	r3, #1
 8002df0:	60bb      	str	r3, [r7, #8]
 8002df2:	e001      	b.n	8002df8 <task_VL53+0x68>
		else
			obs = 0; //We do not detect an obstacle
 8002df4:	2300      	movs	r3, #0
 8002df6:	60bb      	str	r3, [r7, #8]

		if (!uxQueueMessagesWaiting(qhVl53)) //If no data in queue
 8002df8:	4b0e      	ldr	r3, [pc, #56]	; (8002e34 <task_VL53+0xa4>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f009 fbb3 	bl	800c568 <uxQueueMessagesWaiting>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d108      	bne.n	8002e1a <task_VL53+0x8a>
			xQueueSend(qhVl53, (void *)&obs, portMAX_DELAY); //Send data
 8002e08:	4b0a      	ldr	r3, [pc, #40]	; (8002e34 <task_VL53+0xa4>)
 8002e0a:	6818      	ldr	r0, [r3, #0]
 8002e0c:	f107 0108 	add.w	r1, r7, #8
 8002e10:	2300      	movs	r3, #0
 8002e12:	f04f 32ff 	mov.w	r2, #4294967295
 8002e16:	f009 f821 	bl	800be5c <xQueueGenericSend>

		vTaskDelay(SAMPLING_PERIOD_ms);
 8002e1a:	2005      	movs	r0, #5
 8002e1c:	f009 ff00 	bl	800cc20 <vTaskDelay>
		dist = readRangeSingleMillimeters()/10; //Get the distance from the sensor
 8002e20:	e7be      	b.n	8002da0 <task_VL53+0x10>
 8002e22:	bf00      	nop
 8002e24:	cccccccd 	.word	0xcccccccd
 8002e28:	20004c04 	.word	0x20004c04
 8002e2c:	0801b5c4 	.word	0x0801b5c4
 8002e30:	0801b7f0 	.word	0x0801b7f0
 8002e34:	20004c00 	.word	0x20004c00

08002e38 <task_Grove_LCD>:
#endif //VL53


#if LCD
void task_Grove_LCD(void *pvParameters)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
#elif SYNCHRO_EX == EXFINAL
	AMessage pxRxedMessage;

	for(;;)
	{
		if (uxQueueMessagesWaiting(qhLCD)) //If data in the queue
 8002e40:	4b19      	ldr	r3, [pc, #100]	; (8002ea8 <task_Grove_LCD+0x70>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f009 fb8f 	bl	800c568 <uxQueueMessagesWaiting>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d026      	beq.n	8002e9e <task_Grove_LCD+0x66>
		{
			xQueueReceive(qhLCD, &pxRxedMessage, portMAX_DELAY); //Receive data
 8002e50:	4b15      	ldr	r3, [pc, #84]	; (8002ea8 <task_Grove_LCD+0x70>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f107 0108 	add.w	r1, r7, #8
 8002e58:	f04f 32ff 	mov.w	r2, #4294967295
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f009 f997 	bl	800c190 <xQueueReceive>
			int mode = pxRxedMessage.data;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	617b      	str	r3, [r7, #20]
			char direction=pxRxedMessage.command;
 8002e66:	7a3b      	ldrb	r3, [r7, #8]
 8002e68:	74fb      	strb	r3, [r7, #19]
			groveLCD_setCursor(0,0);
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	2000      	movs	r0, #0
 8002e6e:	f7ff f943 	bl	80020f8 <groveLCD_setCursor>
			//Write on screen information about mode
			if (mode == MODE_OBS)
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d105      	bne.n	8002e84 <task_Grove_LCD+0x4c>
				groveLCD_term_printf("M:Obstacle  D:%c", direction);
 8002e78:	7cfb      	ldrb	r3, [r7, #19]
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	480b      	ldr	r0, [pc, #44]	; (8002eac <task_Grove_LCD+0x74>)
 8002e7e:	f7ff fa0b 	bl	8002298 <groveLCD_term_printf>
 8002e82:	e00c      	b.n	8002e9e <task_Grove_LCD+0x66>
			else if (mode == MODE_ZIG)
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d103      	bne.n	8002e92 <task_Grove_LCD+0x5a>
				groveLCD_term_printf("M:Manuel        ");
 8002e8a:	4809      	ldr	r0, [pc, #36]	; (8002eb0 <task_Grove_LCD+0x78>)
 8002e8c:	f7ff fa04 	bl	8002298 <groveLCD_term_printf>
 8002e90:	e005      	b.n	8002e9e <task_Grove_LCD+0x66>
			else if (mode == MODE_CAM)
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d102      	bne.n	8002e9e <task_Grove_LCD+0x66>
				groveLCD_term_printf("M:Camera        ");
 8002e98:	4806      	ldr	r0, [pc, #24]	; (8002eb4 <task_Grove_LCD+0x7c>)
 8002e9a:	f7ff f9fd 	bl	8002298 <groveLCD_term_printf>
		}

		vTaskDelay(SAMPLING_PERIOD_ms);
 8002e9e:	2005      	movs	r0, #5
 8002ea0:	f009 febe 	bl	800cc20 <vTaskDelay>
		if (uxQueueMessagesWaiting(qhLCD)) //If data in the queue
 8002ea4:	e7cc      	b.n	8002e40 <task_Grove_LCD+0x8>
 8002ea6:	bf00      	nop
 8002ea8:	20004bfc 	.word	0x20004bfc
 8002eac:	0801b5d8 	.word	0x0801b5d8
 8002eb0:	0801b5ec 	.word	0x0801b5ec
 8002eb4:	0801b600 	.word	0x0801b600

08002eb8 <task_Supervision>:
#endif //SYNCHRO_EX
}
#endif //LCD

void task_Supervision(void *pvParameters)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b090      	sub	sp, #64	; 0x40
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
	int16_t speedLeft; //Motor left speed
	int16_t speedRight; //Motor rigth speed

	int table[2]; //VL53L0X sensors values
	#if VL53
	int vl53 = 0; //VL530X detect an obstacle or not
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	633b      	str	r3, [r7, #48]	; 0x30
#endif //MICROROS

	for (;;)
	{
		#if MICROROS
		if (uxQueueMessagesWaiting(qhMR_sub)) //If data  are in the the queue
 8002ec4:	4b9a      	ldr	r3, [pc, #616]	; (8003130 <task_Supervision+0x278>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f009 fb4d 	bl	800c568 <uxQueueMessagesWaiting>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d029      	beq.n	8002f28 <task_Supervision+0x70>
		{
			xQueueReceive(qhMR_sub, &SubToMsg, portMAX_DELAY); //Receive data
 8002ed4:	4b96      	ldr	r3, [pc, #600]	; (8003130 <task_Supervision+0x278>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f107 0114 	add.w	r1, r7, #20
 8002edc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f009 f955 	bl	800c190 <xQueueReceive>
			//Set mode, speed and direction if the data is correct
			if (SubToMsg.mode >= 0 && SubToMsg.mode < LAST_MODE)
 8002ee6:	6a3b      	ldr	r3, [r7, #32]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	db05      	blt.n	8002ef8 <task_Supervision+0x40>
 8002eec:	6a3b      	ldr	r3, [r7, #32]
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	dc02      	bgt.n	8002ef8 <task_Supervision+0x40>
				mode = SubToMsg.mode;
 8002ef2:	6a3b      	ldr	r3, [r7, #32]
 8002ef4:	4a8f      	ldr	r2, [pc, #572]	; (8003134 <task_Supervision+0x27c>)
 8002ef6:	6013      	str	r3, [r2, #0]
			if (SubToMsg.dir >= 0 && SubToMsg.dir < LAST_DIR)
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	db05      	blt.n	8002f0a <task_Supervision+0x52>
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	2b08      	cmp	r3, #8
 8002f02:	dc02      	bgt.n	8002f0a <task_Supervision+0x52>
				direction = SubToMsg.dir;
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	4a8c      	ldr	r2, [pc, #560]	; (8003138 <task_Supervision+0x280>)
 8002f08:	6013      	str	r3, [r2, #0]
			if (SubToMsg.speed > 0 && SubToMsg.speed < LAST_SPEED)
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	dd05      	ble.n	8002f1c <task_Supervision+0x64>
 8002f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f12:	2b63      	cmp	r3, #99	; 0x63
 8002f14:	dc02      	bgt.n	8002f1c <task_Supervision+0x64>
				speed = SubToMsg.speed;
 8002f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f18:	4a88      	ldr	r2, [pc, #544]	; (800313c <task_Supervision+0x284>)
 8002f1a:	6013      	str	r3, [r2, #0]
			//Set x and y position
			x = SubToMsg.x;
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	4a88      	ldr	r2, [pc, #544]	; (8003140 <task_Supervision+0x288>)
 8002f20:	6013      	str	r3, [r2, #0]
			y = SubToMsg.y;
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	4a87      	ldr	r2, [pc, #540]	; (8003144 <task_Supervision+0x28c>)
 8002f26:	6013      	str	r3, [r2, #0]
			printf("%cc%c[2J%c[0;0HVariable to make decision : \n\rDirection : %d\r\nMode: %d\r\nSpeed : %d\r\nX: %d\r\nY : %d\r\n", 0x1b, 0x1b, 0x1b, direction, mode, speed, x, y);
			#endif //DEBUG_PRINTF
		}
		#endif //MICROROS

		if (mode == MODE_ZIG) //Mode manual
 8002f28:	4b82      	ldr	r3, [pc, #520]	; (8003134 <task_Supervision+0x27c>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	f040 80e3 	bne.w	80030f8 <task_Supervision+0x240>
		{
			dir = 'N'; //No direction information
 8002f32:	4b85      	ldr	r3, [pc, #532]	; (8003148 <task_Supervision+0x290>)
 8002f34:	224e      	movs	r2, #78	; 0x4e
 8002f36:	701a      	strb	r2, [r3, #0]
			obs = 0; //No obstacle
 8002f38:	4b84      	ldr	r3, [pc, #528]	; (800314c <task_Supervision+0x294>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	601a      	str	r2, [r3, #0]
			switch(direction) //Set the motor speed depending of the direction variable
 8002f3e:	4b7e      	ldr	r3, [pc, #504]	; (8003138 <task_Supervision+0x280>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2b08      	cmp	r3, #8
 8002f44:	f200 80d3 	bhi.w	80030ee <task_Supervision+0x236>
 8002f48:	a201      	add	r2, pc, #4	; (adr r2, 8002f50 <task_Supervision+0x98>)
 8002f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f4e:	bf00      	nop
 8002f50:	08002f7f 	.word	0x08002f7f
 8002f54:	08003009 	.word	0x08003009
 8002f58:	08002fad 	.word	0x08002fad
 8002f5c:	08002fdb 	.word	0x08002fdb
 8002f60:	08002f75 	.word	0x08002f75
 8002f64:	08003037 	.word	0x08003037
 8002f68:	08003063 	.word	0x08003063
 8002f6c:	0800308f 	.word	0x0800308f
 8002f70:	080030bf 	.word	0x080030bf
			{
				case STOP:
					speedLeft = 0;
 8002f74:	2300      	movs	r3, #0
 8002f76:	87fb      	strh	r3, [r7, #62]	; 0x3e
					speedRight = 0;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	87bb      	strh	r3, [r7, #60]	; 0x3c
					break;
 8002f7c:	e198      	b.n	80032b0 <task_Supervision+0x3f8>
				case AVANT:
					speedLeft = VITESSE_KART+(8*(speed-50));
 8002f7e:	4b6f      	ldr	r3, [pc, #444]	; (800313c <task_Supervision+0x284>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	3b32      	subs	r3, #50	; 0x32
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	b21b      	sxth	r3, r3
 8002f92:	87fb      	strh	r3, [r7, #62]	; 0x3e
					speedRight = VITESSE_KART+(8*(speed-50));
 8002f94:	4b69      	ldr	r3, [pc, #420]	; (800313c <task_Supervision+0x284>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	3b32      	subs	r3, #50	; 0x32
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	b21b      	sxth	r3, r3
 8002fa8:	87bb      	strh	r3, [r7, #60]	; 0x3c
					break;
 8002faa:	e181      	b.n	80032b0 <task_Supervision+0x3f8>
				case RECULE:
					speedLeft = -(VITESSE_KART+(8*(speed-50)));
 8002fac:	4b63      	ldr	r3, [pc, #396]	; (800313c <task_Supervision+0x284>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	3b32      	subs	r3, #50	; 0x32
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	4b65      	ldr	r3, [pc, #404]	; (8003150 <task_Supervision+0x298>)
 8002fba:	1a9b      	subs	r3, r3, r2
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	b21b      	sxth	r3, r3
 8002fc0:	87fb      	strh	r3, [r7, #62]	; 0x3e
					speedRight = -(VITESSE_KART+(8*(speed-50)));
 8002fc2:	4b5e      	ldr	r3, [pc, #376]	; (800313c <task_Supervision+0x284>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	3b32      	subs	r3, #50	; 0x32
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	4b60      	ldr	r3, [pc, #384]	; (8003150 <task_Supervision+0x298>)
 8002fd0:	1a9b      	subs	r3, r3, r2
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	b21b      	sxth	r3, r3
 8002fd6:	87bb      	strh	r3, [r7, #60]	; 0x3c
					break;
 8002fd8:	e16a      	b.n	80032b0 <task_Supervision+0x3f8>
				case DROITE:
					speedLeft = VITESSE_KART+(8*(speed-50));
 8002fda:	4b58      	ldr	r3, [pc, #352]	; (800313c <task_Supervision+0x284>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	3b32      	subs	r3, #50	; 0x32
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	b21b      	sxth	r3, r3
 8002fee:	87fb      	strh	r3, [r7, #62]	; 0x3e
					speedRight = -(VITESSE_KART+(8*(speed-50)));
 8002ff0:	4b52      	ldr	r3, [pc, #328]	; (800313c <task_Supervision+0x284>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	3b32      	subs	r3, #50	; 0x32
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	00db      	lsls	r3, r3, #3
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	4b54      	ldr	r3, [pc, #336]	; (8003150 <task_Supervision+0x298>)
 8002ffe:	1a9b      	subs	r3, r3, r2
 8003000:	b29b      	uxth	r3, r3
 8003002:	b21b      	sxth	r3, r3
 8003004:	87bb      	strh	r3, [r7, #60]	; 0x3c
					break;
 8003006:	e153      	b.n	80032b0 <task_Supervision+0x3f8>
				case GAUCHE:
					speedLeft = -(VITESSE_KART+(8*(speed-50)));
 8003008:	4b4c      	ldr	r3, [pc, #304]	; (800313c <task_Supervision+0x284>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	3b32      	subs	r3, #50	; 0x32
 800300e:	b29b      	uxth	r3, r3
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	b29a      	uxth	r2, r3
 8003014:	4b4e      	ldr	r3, [pc, #312]	; (8003150 <task_Supervision+0x298>)
 8003016:	1a9b      	subs	r3, r3, r2
 8003018:	b29b      	uxth	r3, r3
 800301a:	b21b      	sxth	r3, r3
 800301c:	87fb      	strh	r3, [r7, #62]	; 0x3e
					speedRight = VITESSE_KART+(8*(speed-50));
 800301e:	4b47      	ldr	r3, [pc, #284]	; (800313c <task_Supervision+0x284>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	3b32      	subs	r3, #50	; 0x32
 8003024:	b29b      	uxth	r3, r3
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	b29b      	uxth	r3, r3
 800302a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800302e:	b29b      	uxth	r3, r3
 8003030:	b21b      	sxth	r3, r3
 8003032:	87bb      	strh	r3, [r7, #60]	; 0x3c
					break;
 8003034:	e13c      	b.n	80032b0 <task_Supervision+0x3f8>
				case AVANT_GAUCHE:
					speedLeft = (VITESSE_KART/2)+(8*(speed-50));
 8003036:	4b41      	ldr	r3, [pc, #260]	; (800313c <task_Supervision+0x284>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	3b32      	subs	r3, #50	; 0x32
 800303c:	b29b      	uxth	r3, r3
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	b29b      	uxth	r3, r3
 8003042:	33fa      	adds	r3, #250	; 0xfa
 8003044:	b29b      	uxth	r3, r3
 8003046:	b21b      	sxth	r3, r3
 8003048:	87fb      	strh	r3, [r7, #62]	; 0x3e
					speedRight = VITESSE_KART+(8*(speed-50));
 800304a:	4b3c      	ldr	r3, [pc, #240]	; (800313c <task_Supervision+0x284>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	3b32      	subs	r3, #50	; 0x32
 8003050:	b29b      	uxth	r3, r3
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	b29b      	uxth	r3, r3
 8003056:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800305a:	b29b      	uxth	r3, r3
 800305c:	b21b      	sxth	r3, r3
 800305e:	87bb      	strh	r3, [r7, #60]	; 0x3c
					break;
 8003060:	e126      	b.n	80032b0 <task_Supervision+0x3f8>
				case AVANT_DROITE:
					speedLeft = VITESSE_KART+(8*(speed-50));
 8003062:	4b36      	ldr	r3, [pc, #216]	; (800313c <task_Supervision+0x284>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	3b32      	subs	r3, #50	; 0x32
 8003068:	b29b      	uxth	r3, r3
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	b29b      	uxth	r3, r3
 800306e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003072:	b29b      	uxth	r3, r3
 8003074:	b21b      	sxth	r3, r3
 8003076:	87fb      	strh	r3, [r7, #62]	; 0x3e
					speedRight = (VITESSE_KART/2)+(8*(speed-50));
 8003078:	4b30      	ldr	r3, [pc, #192]	; (800313c <task_Supervision+0x284>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	3b32      	subs	r3, #50	; 0x32
 800307e:	b29b      	uxth	r3, r3
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	b29b      	uxth	r3, r3
 8003084:	33fa      	adds	r3, #250	; 0xfa
 8003086:	b29b      	uxth	r3, r3
 8003088:	b21b      	sxth	r3, r3
 800308a:	87bb      	strh	r3, [r7, #60]	; 0x3c
					break;
 800308c:	e110      	b.n	80032b0 <task_Supervision+0x3f8>
				case RECULE_GAUCHE:
					speedLeft = -(VITESSE_KART+(8*(speed-50)));
 800308e:	4b2b      	ldr	r3, [pc, #172]	; (800313c <task_Supervision+0x284>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	3b32      	subs	r3, #50	; 0x32
 8003094:	b29b      	uxth	r3, r3
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	b29a      	uxth	r2, r3
 800309a:	4b2d      	ldr	r3, [pc, #180]	; (8003150 <task_Supervision+0x298>)
 800309c:	1a9b      	subs	r3, r3, r2
 800309e:	b29b      	uxth	r3, r3
 80030a0:	b21b      	sxth	r3, r3
 80030a2:	87fb      	strh	r3, [r7, #62]	; 0x3e
					speedRight = -((VITESSE_KART/2)+(8*(speed-50)));
 80030a4:	4b25      	ldr	r3, [pc, #148]	; (800313c <task_Supervision+0x284>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	3b32      	subs	r3, #50	; 0x32
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 80030b4:	1a9b      	subs	r3, r3, r2
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	b21b      	sxth	r3, r3
 80030ba:	87bb      	strh	r3, [r7, #60]	; 0x3c
					break;
 80030bc:	e0f8      	b.n	80032b0 <task_Supervision+0x3f8>
				case RECULE_DROITE:
					speedLeft = -((VITESSE_KART/2)+(8*(speed-50)));
 80030be:	4b1f      	ldr	r3, [pc, #124]	; (800313c <task_Supervision+0x284>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	3b32      	subs	r3, #50	; 0x32
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	f06f 03f9 	mvn.w	r3, #249	; 0xf9
 80030ce:	1a9b      	subs	r3, r3, r2
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	b21b      	sxth	r3, r3
 80030d4:	87fb      	strh	r3, [r7, #62]	; 0x3e
					speedRight = -(VITESSE_KART+(8*(speed-50)));
 80030d6:	4b19      	ldr	r3, [pc, #100]	; (800313c <task_Supervision+0x284>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	3b32      	subs	r3, #50	; 0x32
 80030dc:	b29b      	uxth	r3, r3
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	4b1b      	ldr	r3, [pc, #108]	; (8003150 <task_Supervision+0x298>)
 80030e4:	1a9b      	subs	r3, r3, r2
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	b21b      	sxth	r3, r3
 80030ea:	87bb      	strh	r3, [r7, #60]	; 0x3c
					break;
 80030ec:	e0e0      	b.n	80032b0 <task_Supervision+0x3f8>
				default:
					speedLeft = 0;
 80030ee:	2300      	movs	r3, #0
 80030f0:	87fb      	strh	r3, [r7, #62]	; 0x3e
					speedRight = 0;
 80030f2:	2300      	movs	r3, #0
 80030f4:	87bb      	strh	r3, [r7, #60]	; 0x3c
					break;
 80030f6:	e0db      	b.n	80032b0 <task_Supervision+0x3f8>
			}
		}
		else if (mode == MODE_OBS) //Mode obstacle
 80030f8:	4b0e      	ldr	r3, [pc, #56]	; (8003134 <task_Supervision+0x27c>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f040 80a0 	bne.w	8003242 <task_Supervision+0x38a>
		{
			//Get sensors informations
			captDistIR_Get(table);
 8003102:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003106:	4618      	mov	r0, r3
 8003108:	f7fe fa36 	bl	8001578 <captDistIR_Get>
			#if VL53
			if (uxQueueMessagesWaiting(qhVl53))
 800310c:	4b11      	ldr	r3, [pc, #68]	; (8003154 <task_Supervision+0x29c>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4618      	mov	r0, r3
 8003112:	f009 fa29 	bl	800c568 <uxQueueMessagesWaiting>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d01d      	beq.n	8003158 <task_Supervision+0x2a0>
				xQueueReceive(qhVl53, &vl53, portMAX_DELAY);
 800311c:	4b0d      	ldr	r3, [pc, #52]	; (8003154 <task_Supervision+0x29c>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003124:	f04f 32ff 	mov.w	r2, #4294967295
 8003128:	4618      	mov	r0, r3
 800312a:	f009 f831 	bl	800c190 <xQueueReceive>
 800312e:	e015      	b.n	800315c <task_Supervision+0x2a4>
 8003130:	20004bf4 	.word	0x20004bf4
 8003134:	20000004 	.word	0x20000004
 8003138:	20000008 	.word	0x20000008
 800313c:	2000000c 	.word	0x2000000c
 8003140:	20004c08 	.word	0x20004c08
 8003144:	20004c0c 	.word	0x20004c0c
 8003148:	20000010 	.word	0x20000010
 800314c:	20004c10 	.word	0x20004c10
 8003150:	fffffe0c 	.word	0xfffffe0c
 8003154:	20004c00 	.word	0x20004c00
			else
				vl53 = 0;
 8003158:	2300      	movs	r3, #0
 800315a:	633b      	str	r3, [r7, #48]	; 0x30

			if (vl53 == 1) //if an obstacle is detected on the back we stop
 800315c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800315e:	2b01      	cmp	r3, #1
 8003160:	d10a      	bne.n	8003178 <task_Supervision+0x2c0>
			{
				speedLeft = 0;
 8003162:	2300      	movs	r3, #0
 8003164:	87fb      	strh	r3, [r7, #62]	; 0x3e
				speedRight = 0;
 8003166:	2300      	movs	r3, #0
 8003168:	87bb      	strh	r3, [r7, #60]	; 0x3c
				dir = 'S';
 800316a:	4b7c      	ldr	r3, [pc, #496]	; (800335c <task_Supervision+0x4a4>)
 800316c:	2253      	movs	r2, #83	; 0x53
 800316e:	701a      	strb	r2, [r3, #0]
				obs = 1;
 8003170:	4b7b      	ldr	r3, [pc, #492]	; (8003360 <task_Supervision+0x4a8>)
 8003172:	2201      	movs	r2, #1
 8003174:	601a      	str	r2, [r3, #0]
 8003176:	e09b      	b.n	80032b0 <task_Supervision+0x3f8>
			}
			else
			#endif //VL53
			if (table[0] > SEUIL_DIST_SENSOR || table[1] > SEUIL_DIST_SENSOR) //We have an obstacle in front of the robot
 8003178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800317a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800317e:	dc03      	bgt.n	8003188 <task_Supervision+0x2d0>
 8003180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003182:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003186:	dd4f      	ble.n	8003228 <task_Supervision+0x370>
			{
				if (obs > 10) //If we detect more than 10 different obstacle we turn on the left until they are no more obstacle
 8003188:	4b75      	ldr	r3, [pc, #468]	; (8003360 <task_Supervision+0x4a8>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2b0a      	cmp	r3, #10
 800318e:	dd09      	ble.n	80031a4 <task_Supervision+0x2ec>
				{
					speedLeft = VITESSE_OBS/2;
 8003190:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003194:	87fb      	strh	r3, [r7, #62]	; 0x3e
					speedRight = -VITESSE_OBS/2;
 8003196:	f64f 630c 	movw	r3, #65036	; 0xfe0c
 800319a:	87bb      	strh	r3, [r7, #60]	; 0x3c
					dir = 'G';
 800319c:	4b6f      	ldr	r3, [pc, #444]	; (800335c <task_Supervision+0x4a4>)
 800319e:	2247      	movs	r2, #71	; 0x47
 80031a0:	701a      	strb	r2, [r3, #0]
				if (obs > 10) //If we detect more than 10 different obstacle we turn on the left until they are no more obstacle
 80031a2:	e084      	b.n	80032ae <task_Supervision+0x3f6>
				}
				else
				{
					speedLeft = 0;
 80031a4:	2300      	movs	r3, #0
 80031a6:	87fb      	strh	r3, [r7, #62]	; 0x3e
					speedRight = 0;
 80031a8:	2300      	movs	r3, #0
 80031aa:	87bb      	strh	r3, [r7, #60]	; 0x3c

					if (table[0] > table[1] && table[0] > SEUIL_DIST_SENSOR) //We have an obstacle on our right
 80031ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b0:	429a      	cmp	r2, r3
 80031b2:	dd18      	ble.n	80031e6 <task_Supervision+0x32e>
 80031b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031b6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80031ba:	dd14      	ble.n	80031e6 <task_Supervision+0x32e>
					{
						dir = 'G';
 80031bc:	4b67      	ldr	r3, [pc, #412]	; (800335c <task_Supervision+0x4a4>)
 80031be:	2247      	movs	r2, #71	; 0x47
 80031c0:	701a      	strb	r2, [r3, #0]
						speedLeft = -VITESSE_OBS/2;
 80031c2:	f64f 630c 	movw	r3, #65036	; 0xfe0c
 80031c6:	87fb      	strh	r3, [r7, #62]	; 0x3e
						speedRight = VITESSE_OBS/2;
 80031c8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80031cc:	87bb      	strh	r3, [r7, #60]	; 0x3c
						if (obs%2 == 0)
 80031ce:	4b64      	ldr	r3, [pc, #400]	; (8003360 <task_Supervision+0x4a8>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d125      	bne.n	8003226 <task_Supervision+0x36e>
							obs++;
 80031da:	4b61      	ldr	r3, [pc, #388]	; (8003360 <task_Supervision+0x4a8>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	3301      	adds	r3, #1
 80031e0:	4a5f      	ldr	r2, [pc, #380]	; (8003360 <task_Supervision+0x4a8>)
 80031e2:	6013      	str	r3, [r2, #0]
						if (obs%2 == 0)
 80031e4:	e01f      	b.n	8003226 <task_Supervision+0x36e>
					}
					else if (table[0] < table[1] && table[1] > SEUIL_DIST_SENSOR) //We have an obstacle on left right
 80031e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ea:	429a      	cmp	r2, r3
 80031ec:	da5f      	bge.n	80032ae <task_Supervision+0x3f6>
 80031ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80031f4:	dd5b      	ble.n	80032ae <task_Supervision+0x3f6>
					{
						dir = 'D';
 80031f6:	4b59      	ldr	r3, [pc, #356]	; (800335c <task_Supervision+0x4a4>)
 80031f8:	2244      	movs	r2, #68	; 0x44
 80031fa:	701a      	strb	r2, [r3, #0]
						speedLeft = VITESSE_OBS/2;
 80031fc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003200:	87fb      	strh	r3, [r7, #62]	; 0x3e
						speedRight = -VITESSE_OBS/2;
 8003202:	f64f 630c 	movw	r3, #65036	; 0xfe0c
 8003206:	87bb      	strh	r3, [r7, #60]	; 0x3c
						if (obs%2 == 1)
 8003208:	4b55      	ldr	r3, [pc, #340]	; (8003360 <task_Supervision+0x4a8>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2b00      	cmp	r3, #0
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	bfb8      	it	lt
 8003214:	425b      	neglt	r3, r3
 8003216:	2b01      	cmp	r3, #1
 8003218:	d149      	bne.n	80032ae <task_Supervision+0x3f6>
							obs++;
 800321a:	4b51      	ldr	r3, [pc, #324]	; (8003360 <task_Supervision+0x4a8>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	3301      	adds	r3, #1
 8003220:	4a4f      	ldr	r2, [pc, #316]	; (8003360 <task_Supervision+0x4a8>)
 8003222:	6013      	str	r3, [r2, #0]
				if (obs > 10) //If we detect more than 10 different obstacle we turn on the left until they are no more obstacle
 8003224:	e043      	b.n	80032ae <task_Supervision+0x3f6>
 8003226:	e042      	b.n	80032ae <task_Supervision+0x3f6>
					}
				}
			}
			else //No obstacle
			{
				speedLeft = VITESSE_OBS;
 8003228:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800322c:	87fb      	strh	r3, [r7, #62]	; 0x3e
				speedRight = VITESSE_OBS;
 800322e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003232:	87bb      	strh	r3, [r7, #60]	; 0x3c
				dir = 'F';
 8003234:	4b49      	ldr	r3, [pc, #292]	; (800335c <task_Supervision+0x4a4>)
 8003236:	2246      	movs	r2, #70	; 0x46
 8003238:	701a      	strb	r2, [r3, #0]
				obs = 0;
 800323a:	4b49      	ldr	r3, [pc, #292]	; (8003360 <task_Supervision+0x4a8>)
 800323c:	2200      	movs	r2, #0
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	e036      	b.n	80032b0 <task_Supervision+0x3f8>
			}
		}
		else if (mode == MODE_CAM) //Mode camera
 8003242:	4b48      	ldr	r3, [pc, #288]	; (8003364 <task_Supervision+0x4ac>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2b02      	cmp	r3, #2
 8003248:	d132      	bne.n	80032b0 <task_Supervision+0x3f8>
		{
			dir = 'N';
 800324a:	4b44      	ldr	r3, [pc, #272]	; (800335c <task_Supervision+0x4a4>)
 800324c:	224e      	movs	r2, #78	; 0x4e
 800324e:	701a      	strb	r2, [r3, #0]
			obs = 0;
 8003250:	4b43      	ldr	r3, [pc, #268]	; (8003360 <task_Supervision+0x4a8>)
 8003252:	2200      	movs	r2, #0
 8003254:	601a      	str	r2, [r3, #0]

			if(x < 0 || y < 0) //No object
 8003256:	4b44      	ldr	r3, [pc, #272]	; (8003368 <task_Supervision+0x4b0>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	db03      	blt.n	8003266 <task_Supervision+0x3ae>
 800325e:	4b43      	ldr	r3, [pc, #268]	; (800336c <task_Supervision+0x4b4>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	da04      	bge.n	8003270 <task_Supervision+0x3b8>
			{
				speedLeft = 0;
 8003266:	2300      	movs	r3, #0
 8003268:	87fb      	strh	r3, [r7, #62]	; 0x3e
				speedRight = 0;
 800326a:	2300      	movs	r3, #0
 800326c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800326e:	e01f      	b.n	80032b0 <task_Supervision+0x3f8>
			}
			else //Try to keep the object on the center
			{
				speedLeft = VITESSE_CAM - ((CAMERA_X_MAX/2 - x))/3; // (int) (((float) ((x-CAMERA_X_MAX/2)/CAMERA_X_MAX))*500);
 8003270:	4b3d      	ldr	r3, [pc, #244]	; (8003368 <task_Supervision+0x4b0>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8003278:	4a3d      	ldr	r2, [pc, #244]	; (8003370 <task_Supervision+0x4b8>)
 800327a:	fb82 1203 	smull	r1, r2, r2, r3
 800327e:	17db      	asrs	r3, r3, #31
 8003280:	1a9b      	subs	r3, r3, r2
 8003282:	b29b      	uxth	r3, r3
 8003284:	f203 134d 	addw	r3, r3, #333	; 0x14d
 8003288:	b29b      	uxth	r3, r3
 800328a:	b21b      	sxth	r3, r3
 800328c:	87fb      	strh	r3, [r7, #62]	; 0x3e
				speedRight = VITESSE_CAM + ((CAMERA_X_MAX/2 - x))/3; // (int) (((float) (x/CAMERA_X_MAX))*500);
 800328e:	4b36      	ldr	r3, [pc, #216]	; (8003368 <task_Supervision+0x4b0>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8003296:	4a36      	ldr	r2, [pc, #216]	; (8003370 <task_Supervision+0x4b8>)
 8003298:	fb82 1203 	smull	r1, r2, r2, r3
 800329c:	17db      	asrs	r3, r3, #31
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	f203 134d 	addw	r3, r3, #333	; 0x14d
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	b21b      	sxth	r3, r3
 80032aa:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80032ac:	e000      	b.n	80032b0 <task_Supervision+0x3f8>
				if (obs > 10) //If we detect more than 10 different obstacle we turn on the left until they are no more obstacle
 80032ae:	bf00      	nop

		#if DEBUG_MOTOR
		printf("Motor L : %d || R : %d\r\n", speedLeft, speedRight);
		#endif

		xQueueSend( q_mot_L, ( void * ) &speedLeft,  portMAX_DELAY ); //Send motor left speed
 80032b0:	4b30      	ldr	r3, [pc, #192]	; (8003374 <task_Supervision+0x4bc>)
 80032b2:	6818      	ldr	r0, [r3, #0]
 80032b4:	f107 013e 	add.w	r1, r7, #62	; 0x3e
 80032b8:	2300      	movs	r3, #0
 80032ba:	f04f 32ff 	mov.w	r2, #4294967295
 80032be:	f008 fdcd 	bl	800be5c <xQueueGenericSend>
		xSemaphoreTake( xSem_Supervision, portMAX_DELAY );
 80032c2:	4b2d      	ldr	r3, [pc, #180]	; (8003378 <task_Supervision+0x4c0>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f04f 31ff 	mov.w	r1, #4294967295
 80032ca:	4618      	mov	r0, r3
 80032cc:	f009 f840 	bl	800c350 <xQueueSemaphoreTake>

		xQueueSend( q_mot_R, ( void * ) &speedRight,  portMAX_DELAY ); //Send motor right speed
 80032d0:	4b2a      	ldr	r3, [pc, #168]	; (800337c <task_Supervision+0x4c4>)
 80032d2:	6818      	ldr	r0, [r3, #0]
 80032d4:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80032d8:	2300      	movs	r3, #0
 80032da:	f04f 32ff 	mov.w	r2, #4294967295
 80032de:	f008 fdbd 	bl	800be5c <xQueueGenericSend>
		xSemaphoreTake( xSem_Supervision, portMAX_DELAY );
 80032e2:	4b25      	ldr	r3, [pc, #148]	; (8003378 <task_Supervision+0x4c0>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f04f 31ff 	mov.w	r1, #4294967295
 80032ea:	4618      	mov	r0, r3
 80032ec:	f009 f830 	bl	800c350 <xQueueSemaphoreTake>

	#if MICROROS
		MsgToPub.dir = dir;
 80032f0:	4b1a      	ldr	r3, [pc, #104]	; (800335c <task_Supervision+0x4a4>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	723b      	strb	r3, [r7, #8]
		MsgToPub.mode = mode;
 80032f6:	4b1b      	ldr	r3, [pc, #108]	; (8003364 <task_Supervision+0x4ac>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	60fb      	str	r3, [r7, #12]
		MsgToPub.speed = speed;
 80032fc:	4b20      	ldr	r3, [pc, #128]	; (8003380 <task_Supervision+0x4c8>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	613b      	str	r3, [r7, #16]
		if (!uxQueueMessagesWaiting(qhMR_pub)) //If no data in queue
 8003302:	4b20      	ldr	r3, [pc, #128]	; (8003384 <task_Supervision+0x4cc>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4618      	mov	r0, r3
 8003308:	f009 f92e 	bl	800c568 <uxQueueMessagesWaiting>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d108      	bne.n	8003324 <task_Supervision+0x46c>
			xQueueSend(qhMR_pub, ( void * ) &MsgToPub, portMAX_DELAY); //Send data
 8003312:	4b1c      	ldr	r3, [pc, #112]	; (8003384 <task_Supervision+0x4cc>)
 8003314:	6818      	ldr	r0, [r3, #0]
 8003316:	f107 0108 	add.w	r1, r7, #8
 800331a:	2300      	movs	r3, #0
 800331c:	f04f 32ff 	mov.w	r2, #4294967295
 8003320:	f008 fd9c 	bl	800be5c <xQueueGenericSend>
	#endif //MICROROS

	#if LCD
		if (!uxQueueMessagesWaiting(qhLCD)) //If no data in queue
 8003324:	4b18      	ldr	r3, [pc, #96]	; (8003388 <task_Supervision+0x4d0>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4618      	mov	r0, r3
 800332a:	f009 f91d 	bl	800c568 <uxQueueMessagesWaiting>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d10f      	bne.n	8003354 <task_Supervision+0x49c>
		{
			pxMessage.data=mode;
 8003334:	4b0b      	ldr	r3, [pc, #44]	; (8003364 <task_Supervision+0x4ac>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	62fb      	str	r3, [r7, #44]	; 0x2c
			pxMessage.command=dir;
 800333a:	4b08      	ldr	r3, [pc, #32]	; (800335c <task_Supervision+0x4a4>)
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			xQueueSend( qhLCD, ( void * ) &pxMessage, portMAX_DELAY); //Send data
 8003342:	4b11      	ldr	r3, [pc, #68]	; (8003388 <task_Supervision+0x4d0>)
 8003344:	6818      	ldr	r0, [r3, #0]
 8003346:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800334a:	2300      	movs	r3, #0
 800334c:	f04f 32ff 	mov.w	r2, #4294967295
 8003350:	f008 fd84 	bl	800be5c <xQueueGenericSend>
		}
	#endif //LCD

		vTaskDelay(SAMPLING_PERIOD_ms);
 8003354:	2005      	movs	r0, #5
 8003356:	f009 fc63 	bl	800cc20 <vTaskDelay>
		if (uxQueueMessagesWaiting(qhMR_sub)) //If data  are in the the queue
 800335a:	e5b3      	b.n	8002ec4 <task_Supervision+0xc>
 800335c:	20000010 	.word	0x20000010
 8003360:	20004c10 	.word	0x20004c10
 8003364:	20000004 	.word	0x20000004
 8003368:	20004c08 	.word	0x20004c08
 800336c:	20004c0c 	.word	0x20004c0c
 8003370:	55555556 	.word	0x55555556
 8003374:	20004bec 	.word	0x20004bec
 8003378:	20004be8 	.word	0x20004be8
 800337c:	20004bf0 	.word	0x20004bf0
 8003380:	2000000c 	.word	0x2000000c
 8003384:	20004bf8 	.word	0x20004bf8
 8003388:	20004bfc 	.word	0x20004bfc

0800338c <main>:
	}
#endif //SYNCHRO_EX
}

int main(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af02      	add	r7, sp, #8
  HAL_Init();
 8003392:	f001 fcb1 	bl	8004cf8 <HAL_Init>
  SystemClock_Config();
 8003396:	f001 fa3f 	bl	8004818 <SystemClock_Config>
  MX_GPIO_Init();
 800339a:	f7fe fc35 	bl	8001c08 <MX_GPIO_Init>
  MX_DMA_Init();
 800339e:	f7fe fdc3 	bl	8001f28 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80033a2:	f7fe fd97 	bl	8001ed4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80033a6:	f7fe fcc9 	bl	8001d3c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80033aa:	f7fe fd69 	bl	8001e80 <MX_USART1_UART_Init>

  RetargetInit(&huart2); //make printf and scanf work with uart2
 80033ae:	4865      	ldr	r0, [pc, #404]	; (8003544 <main+0x1b8>)
 80033b0:	f000 fcd8 	bl	8003d64 <RetargetInit>
  printf("%cc%c[2J%c[0;0HTitouan//Jeremy//Louanne//Donald\r\n", 0x1b, 0x1b, 0x1b);
 80033b4:	231b      	movs	r3, #27
 80033b6:	221b      	movs	r2, #27
 80033b8:	211b      	movs	r1, #27
 80033ba:	4863      	ldr	r0, [pc, #396]	; (8003548 <main+0x1bc>)
 80033bc:	f016 fe6c 	bl	801a098 <iprintf>

  motorCommand_Init();
 80033c0:	f000 faaa 	bl	8003918 <motorCommand_Init>
  quadEncoder_Init();
 80033c4:	f000 fb22 	bl	8003a0c <quadEncoder_Init>
  captDistIR_Init();
 80033c8:	f7fe f8a4 	bl	8001514 <captDistIR_Init>

  HAL_Delay(500);
 80033cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80033d0:	f001 fcd4 	bl	8004d7c <HAL_Delay>

#if VL53
  initVL53L0X();
 80033d4:	f7fd fe54 	bl	8001080 <initVL53L0X>
  for (int i=0 ; i<20 ; i++)
 80033d8:	2300      	movs	r3, #0
 80033da:	607b      	str	r3, [r7, #4]
 80033dc:	e00f      	b.n	80033fe <main+0x72>
  {
	  printf("%d\r\n", readRangeSingleMillimeters()/10);
 80033de:	f7fe f849 	bl	8001474 <readRangeSingleMillimeters>
 80033e2:	4603      	mov	r3, r0
 80033e4:	461a      	mov	r2, r3
 80033e6:	4b59      	ldr	r3, [pc, #356]	; (800354c <main+0x1c0>)
 80033e8:	fba3 2302 	umull	r2, r3, r3, r2
 80033ec:	08db      	lsrs	r3, r3, #3
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	4619      	mov	r1, r3
 80033f2:	4857      	ldr	r0, [pc, #348]	; (8003550 <main+0x1c4>)
 80033f4:	f016 fe50 	bl	801a098 <iprintf>
  for (int i=0 ; i<20 ; i++)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3301      	adds	r3, #1
 80033fc:	607b      	str	r3, [r7, #4]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b13      	cmp	r3, #19
 8003402:	ddec      	ble.n	80033de <main+0x52>
  }
  HAL_Delay(500);
 8003404:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003408:	f001 fcb8 	bl	8004d7c <HAL_Delay>
#endif //VL53

  // Test Ecran LCD
#if LCD
  groveLCD_begin(16,2,0); // !! cette fonction prend du temps
 800340c:	2200      	movs	r2, #0
 800340e:	2102      	movs	r1, #2
 8003410:	2010      	movs	r0, #16
 8003412:	f7fe fddf 	bl	8001fd4 <groveLCD_begin>
  HAL_Delay(100);
 8003416:	2064      	movs	r0, #100	; 0x64
 8003418:	f001 fcb0 	bl	8004d7c <HAL_Delay>
  groveLCD_setCursor(0,0);
 800341c:	2100      	movs	r1, #0
 800341e:	2000      	movs	r0, #0
 8003420:	f7fe fe6a 	bl	80020f8 <groveLCD_setCursor>
  groveLCD_setColor(1);
 8003424:	2001      	movs	r0, #1
 8003426:	f7fe ff0d 	bl	8002244 <groveLCD_setColor>
  groveLCD_term_printf("Titouan//Jeremy//Louanne");
 800342a:	484a      	ldr	r0, [pc, #296]	; (8003554 <main+0x1c8>)
 800342c:	f7fe ff34 	bl	8002298 <groveLCD_term_printf>
  HAL_Delay(1000);
 8003430:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003434:	f001 fca2 	bl	8004d7c <HAL_Delay>
#endif //LCD

  osKernelInitialize();
 8003438:	f008 fa84 	bl	800b944 <osKernelInitialize>
	xTaskCreate(test_vl53, ( const portCHAR * ) "test_vl53", 128 /* stack size */, NULL, tskIDLE_PRIORITY, NULL);
#elif SYNCHRO_EX == EXTEST_MICROROS
    xTaskCreate(microros_task, ( const portCHAR * ) "microros_task", 3000 /* stack size */, NULL, tskIDLE_PRIORITY, NULL);
#elif SYNCHRO_EX == EXFINAL
	#if MICROROS
    xTaskCreate(microros_task, ( const portCHAR * ) "microros_task", 3000 /* stack size */, NULL, 24, NULL);
 800343c:	2300      	movs	r3, #0
 800343e:	9301      	str	r3, [sp, #4]
 8003440:	2318      	movs	r3, #24
 8003442:	9300      	str	r3, [sp, #0]
 8003444:	2300      	movs	r3, #0
 8003446:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800344a:	4943      	ldr	r1, [pc, #268]	; (8003558 <main+0x1cc>)
 800344c:	4843      	ldr	r0, [pc, #268]	; (800355c <main+0x1d0>)
 800344e:	f009 fa8c 	bl	800c96a <xTaskCreate>
	#endif //MICROROS
    xTaskCreate(task_Supervision, ( const portCHAR * ) "task Supervision", 128 /* stack size */, NULL, 27, NULL);
 8003452:	2300      	movs	r3, #0
 8003454:	9301      	str	r3, [sp, #4]
 8003456:	231b      	movs	r3, #27
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	2300      	movs	r3, #0
 800345c:	2280      	movs	r2, #128	; 0x80
 800345e:	4940      	ldr	r1, [pc, #256]	; (8003560 <main+0x1d4>)
 8003460:	4840      	ldr	r0, [pc, #256]	; (8003564 <main+0x1d8>)
 8003462:	f009 fa82 	bl	800c96a <xTaskCreate>
	xTaskCreate(task_Motor_Left, ( const portCHAR * ) "task Motor Left", 128 /* stack size */, NULL, 25, NULL);
 8003466:	2300      	movs	r3, #0
 8003468:	9301      	str	r3, [sp, #4]
 800346a:	2319      	movs	r3, #25
 800346c:	9300      	str	r3, [sp, #0]
 800346e:	2300      	movs	r3, #0
 8003470:	2280      	movs	r2, #128	; 0x80
 8003472:	493d      	ldr	r1, [pc, #244]	; (8003568 <main+0x1dc>)
 8003474:	483d      	ldr	r0, [pc, #244]	; (800356c <main+0x1e0>)
 8003476:	f009 fa78 	bl	800c96a <xTaskCreate>
	xTaskCreate(task_Motor_Right, ( const portCHAR * ) "task Motor Right", 128 /* stack size */, NULL, 26, NULL);
 800347a:	2300      	movs	r3, #0
 800347c:	9301      	str	r3, [sp, #4]
 800347e:	231a      	movs	r3, #26
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	2300      	movs	r3, #0
 8003484:	2280      	movs	r2, #128	; 0x80
 8003486:	493a      	ldr	r1, [pc, #232]	; (8003570 <main+0x1e4>)
 8003488:	483a      	ldr	r0, [pc, #232]	; (8003574 <main+0x1e8>)
 800348a:	f009 fa6e 	bl	800c96a <xTaskCreate>

	#if VL53
	xTaskCreate(task_VL53, ( const portCHAR * ) "task VL53", 128 /* stack size */, NULL, 23, NULL);
 800348e:	2300      	movs	r3, #0
 8003490:	9301      	str	r3, [sp, #4]
 8003492:	2317      	movs	r3, #23
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	2300      	movs	r3, #0
 8003498:	2280      	movs	r2, #128	; 0x80
 800349a:	4937      	ldr	r1, [pc, #220]	; (8003578 <main+0x1ec>)
 800349c:	4837      	ldr	r0, [pc, #220]	; (800357c <main+0x1f0>)
 800349e:	f009 fa64 	bl	800c96a <xTaskCreate>
	#endif //VL53

	#if LCD
	xTaskCreate(task_Grove_LCD, ( const portCHAR * ) "task LCD", 128 /* stack size */, NULL, 23, NULL);
 80034a2:	2300      	movs	r3, #0
 80034a4:	9301      	str	r3, [sp, #4]
 80034a6:	2317      	movs	r3, #23
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	2300      	movs	r3, #0
 80034ac:	2280      	movs	r2, #128	; 0x80
 80034ae:	4934      	ldr	r1, [pc, #208]	; (8003580 <main+0x1f4>)
 80034b0:	4834      	ldr	r0, [pc, #208]	; (8003584 <main+0x1f8>)
 80034b2:	f009 fa5a 	bl	800c96a <xTaskCreate>
	#endif //LCD
#endif //SYNCHRO_EX

	//Create the semaphore
    vSemaphoreCreateBinary(xSem_Supervision);
 80034b6:	2203      	movs	r2, #3
 80034b8:	2100      	movs	r1, #0
 80034ba:	2001      	movs	r0, #1
 80034bc:	f008 fc70 	bl	800bda0 <xQueueGenericCreate>
 80034c0:	4603      	mov	r3, r0
 80034c2:	4a31      	ldr	r2, [pc, #196]	; (8003588 <main+0x1fc>)
 80034c4:	6013      	str	r3, [r2, #0]
 80034c6:	4b30      	ldr	r3, [pc, #192]	; (8003588 <main+0x1fc>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d006      	beq.n	80034dc <main+0x150>
 80034ce:	4b2e      	ldr	r3, [pc, #184]	; (8003588 <main+0x1fc>)
 80034d0:	6818      	ldr	r0, [r3, #0]
 80034d2:	2300      	movs	r3, #0
 80034d4:	2200      	movs	r2, #0
 80034d6:	2100      	movs	r1, #0
 80034d8:	f008 fcc0 	bl	800be5c <xQueueGenericSend>

    //Init all the queue
    q_mot_L = xQueueCreate(1, sizeof(int16_t));
 80034dc:	2200      	movs	r2, #0
 80034de:	2102      	movs	r1, #2
 80034e0:	2001      	movs	r0, #1
 80034e2:	f008 fc5d 	bl	800bda0 <xQueueGenericCreate>
 80034e6:	4603      	mov	r3, r0
 80034e8:	4a28      	ldr	r2, [pc, #160]	; (800358c <main+0x200>)
 80034ea:	6013      	str	r3, [r2, #0]
    q_mot_R = xQueueCreate(1, sizeof(int16_t));
 80034ec:	2200      	movs	r2, #0
 80034ee:	2102      	movs	r1, #2
 80034f0:	2001      	movs	r0, #1
 80034f2:	f008 fc55 	bl	800bda0 <xQueueGenericCreate>
 80034f6:	4603      	mov	r3, r0
 80034f8:	4a25      	ldr	r2, [pc, #148]	; (8003590 <main+0x204>)
 80034fa:	6013      	str	r3, [r2, #0]
    qhVl53 = xQueueCreate(1, sizeof(int));
 80034fc:	2200      	movs	r2, #0
 80034fe:	2104      	movs	r1, #4
 8003500:	2001      	movs	r0, #1
 8003502:	f008 fc4d 	bl	800bda0 <xQueueGenericCreate>
 8003506:	4603      	mov	r3, r0
 8003508:	4a22      	ldr	r2, [pc, #136]	; (8003594 <main+0x208>)
 800350a:	6013      	str	r3, [r2, #0]

    qhMR_sub = xQueueCreate(1, sizeof(MicroRosSubMsg));
 800350c:	2200      	movs	r2, #0
 800350e:	2114      	movs	r1, #20
 8003510:	2001      	movs	r0, #1
 8003512:	f008 fc45 	bl	800bda0 <xQueueGenericCreate>
 8003516:	4603      	mov	r3, r0
 8003518:	4a1f      	ldr	r2, [pc, #124]	; (8003598 <main+0x20c>)
 800351a:	6013      	str	r3, [r2, #0]
    qhMR_pub = xQueueCreate(1, sizeof(MicroRosPubMsg));
 800351c:	2200      	movs	r2, #0
 800351e:	210c      	movs	r1, #12
 8003520:	2001      	movs	r0, #1
 8003522:	f008 fc3d 	bl	800bda0 <xQueueGenericCreate>
 8003526:	4603      	mov	r3, r0
 8003528:	4a1c      	ldr	r2, [pc, #112]	; (800359c <main+0x210>)
 800352a:	6013      	str	r3, [r2, #0]
    qhLCD = xQueueCreate(1, sizeof(AMessage));
 800352c:	2200      	movs	r2, #0
 800352e:	2108      	movs	r1, #8
 8003530:	2001      	movs	r0, #1
 8003532:	f008 fc35 	bl	800bda0 <xQueueGenericCreate>
 8003536:	4603      	mov	r3, r0
 8003538:	4a19      	ldr	r2, [pc, #100]	; (80035a0 <main+0x214>)
 800353a:	6013      	str	r3, [r2, #0]

    osKernelStart();
 800353c:	f008 fa26 	bl	800b98c <osKernelStart>
    while(1){}
 8003540:	e7fe      	b.n	8003540 <main+0x1b4>
 8003542:	bf00      	nop
 8003544:	20004a1c 	.word	0x20004a1c
 8003548:	0801b614 	.word	0x0801b614
 800354c:	cccccccd 	.word	0xcccccccd
 8003550:	0801b648 	.word	0x0801b648
 8003554:	0801b650 	.word	0x0801b650
 8003558:	0801b66c 	.word	0x0801b66c
 800355c:	080026a5 	.word	0x080026a5
 8003560:	0801b67c 	.word	0x0801b67c
 8003564:	08002eb9 	.word	0x08002eb9
 8003568:	0801b690 	.word	0x0801b690
 800356c:	08002b91 	.word	0x08002b91
 8003570:	0801b6a0 	.word	0x0801b6a0
 8003574:	08002c91 	.word	0x08002c91
 8003578:	0801b6b4 	.word	0x0801b6b4
 800357c:	08002d91 	.word	0x08002d91
 8003580:	0801b6c0 	.word	0x0801b6c0
 8003584:	08002e39 	.word	0x08002e39
 8003588:	20004be8 	.word	0x20004be8
 800358c:	20004bec 	.word	0x20004bec
 8003590:	20004bf0 	.word	0x20004bf0
 8003594:	20004c00 	.word	0x20004c00
 8003598:	20004bf4 	.word	0x20004bf4
 800359c:	20004bf8 	.word	0x20004bf8
 80035a0:	20004bfc 	.word	0x20004bfc

080035a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM4)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a04      	ldr	r2, [pc, #16]	; (80035c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d101      	bne.n	80035ba <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80035b6:	f001 fbc1 	bl	8004d3c <HAL_IncTick>
  }
}
 80035ba:	bf00      	nop
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	40000800 	.word	0x40000800

080035c8 <Error_Handler>:
//=========================================================================
void Error_Handler(void)
{
 80035c8:	b480      	push	{r7}
 80035ca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80035cc:	b672      	cpsid	i
}
 80035ce:	bf00      	nop
  __disable_irq();
  while (1)
 80035d0:	e7fe      	b.n	80035d0 <Error_Handler+0x8>
	...

080035d4 <createPublisher>:
void createPublisher(rcl_publisher_t* publisher,
	const rcl_node_t* node,
	const rosidl_message_type_support_t* type_support,
	const char* topic_name,
	std_msgs__msg__Int32* msg)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
 80035e0:	603b      	str	r3, [r7, #0]
	rcl_ret_t ret = rclc_publisher_init_default(publisher, node, type_support, topic_name);
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	68b9      	ldr	r1, [r7, #8]
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f00b fffb 	bl	800f5e4 <rclc_publisher_init_default>
 80035ee:	6178      	str	r0, [r7, #20]
	printf("Publisher %s is created with result %d\r\n", topic_name, (int)ret);
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	6839      	ldr	r1, [r7, #0]
 80035f4:	4804      	ldr	r0, [pc, #16]	; (8003608 <createPublisher+0x34>)
 80035f6:	f016 fd4f 	bl	801a098 <iprintf>
#if STRING == 1
	(*msg).data.data = (char * ) malloc(ARRAY_LEN * sizeof(char));
	(*msg).data.size = 0;
	(*msg).data.capacity = ARRAY_LEN;
#else
	(*msg).data = 0;
 80035fa:	6a3b      	ldr	r3, [r7, #32]
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]
#endif

}
 8003600:	bf00      	nop
 8003602:	3718      	adds	r7, #24
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	0801b734 	.word	0x0801b734

0800360c <createSubscriber>:
void createSubscriber(rcl_subscription_t* subscription,
	rcl_node_t* node,
	const rosidl_message_type_support_t* type_support,
	const char* topic_name,
	std_msgs__msg__Int32* msg)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
 8003618:	603b      	str	r3, [r7, #0]
	*subscription = rcl_get_zero_initialized_subscription();
 800361a:	f00b fa9b 	bl	800eb54 <rcl_get_zero_initialized_subscription>
 800361e:	4602      	mov	r2, r0
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	601a      	str	r2, [r3, #0]

	rcl_ret_t ret = rclc_subscription_init_default(subscription, node,
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	68b9      	ldr	r1, [r7, #8]
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f00c f80e 	bl	800f64c <rclc_subscription_init_default>
 8003630:	6178      	str	r0, [r7, #20]
		type_support, topic_name);
	printf("Subscription %s is created with result %d\r\n", topic_name, (int)ret);
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	6839      	ldr	r1, [r7, #0]
 8003636:	4805      	ldr	r0, [pc, #20]	; (800364c <createSubscriber+0x40>)
 8003638:	f016 fd2e 	bl	801a098 <iprintf>
#if STRING == 1
	(*msg).data.data = (char * ) malloc(ARRAY_LEN * sizeof(char));
	(*msg).data.size = 0;
	(*msg).data.capacity = ARRAY_LEN;
#else
	(*msg).data = 0;
 800363c:	6a3b      	ldr	r3, [r7, #32]
 800363e:	2200      	movs	r2, #0
 8003640:	601a      	str	r2, [r3, #0]
#endif
}
 8003642:	bf00      	nop
 8003644:	3718      	adds	r7, #24
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	0801b760 	.word	0x0801b760

08003650 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800365a:	4b0c      	ldr	r3, [pc, #48]	; (800368c <microros_allocate+0x3c>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	461a      	mov	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4413      	add	r3, r2
 8003664:	461a      	mov	r2, r3
 8003666:	4b09      	ldr	r3, [pc, #36]	; (800368c <microros_allocate+0x3c>)
 8003668:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800366a:	4b09      	ldr	r3, [pc, #36]	; (8003690 <microros_allocate+0x40>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	461a      	mov	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4413      	add	r3, r2
 8003674:	461a      	mov	r2, r3
 8003676:	4b06      	ldr	r3, [pc, #24]	; (8003690 <microros_allocate+0x40>)
 8003678:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f7fd ffc0 	bl	8001600 <pvPortMallocMicroROS>
 8003680:	4603      	mov	r3, r0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	20004c14 	.word	0x20004c14
 8003690:	20004c18 	.word	0x20004c18

08003694 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00c      	beq.n	80036be <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f7fe f8c9 	bl	800183c <getBlockSize>
 80036aa:	4603      	mov	r3, r0
 80036ac:	4a06      	ldr	r2, [pc, #24]	; (80036c8 <microros_deallocate+0x34>)
 80036ae:	6812      	ldr	r2, [r2, #0]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	461a      	mov	r2, r3
 80036b4:	4b04      	ldr	r3, [pc, #16]	; (80036c8 <microros_deallocate+0x34>)
 80036b6:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7fe f865 	bl	8001788 <vPortFreeMicroROS>
  }
}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	20004c18 	.word	0x20004c18

080036cc <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80036d8:	4b15      	ldr	r3, [pc, #84]	; (8003730 <microros_reallocate+0x64>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	461a      	mov	r2, r3
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	4413      	add	r3, r2
 80036e2:	461a      	mov	r2, r3
 80036e4:	4b12      	ldr	r3, [pc, #72]	; (8003730 <microros_reallocate+0x64>)
 80036e6:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80036e8:	4b12      	ldr	r3, [pc, #72]	; (8003734 <microros_reallocate+0x68>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	461a      	mov	r2, r3
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	4413      	add	r3, r2
 80036f2:	461a      	mov	r2, r3
 80036f4:	4b0f      	ldr	r3, [pc, #60]	; (8003734 <microros_reallocate+0x68>)
 80036f6:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d104      	bne.n	8003708 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80036fe:	68b8      	ldr	r0, [r7, #8]
 8003700:	f7fd ff7e 	bl	8001600 <pvPortMallocMicroROS>
 8003704:	4603      	mov	r3, r0
 8003706:	e00e      	b.n	8003726 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8003708:	68f8      	ldr	r0, [r7, #12]
 800370a:	f7fe f897 	bl	800183c <getBlockSize>
 800370e:	4603      	mov	r3, r0
 8003710:	4a08      	ldr	r2, [pc, #32]	; (8003734 <microros_reallocate+0x68>)
 8003712:	6812      	ldr	r2, [r2, #0]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	461a      	mov	r2, r3
 8003718:	4b06      	ldr	r3, [pc, #24]	; (8003734 <microros_reallocate+0x68>)
 800371a:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 800371c:	68b9      	ldr	r1, [r7, #8]
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f7fe f8aa 	bl	8001878 <pvPortReallocMicroROS>
 8003724:	4603      	mov	r3, r0
  }
}
 8003726:	4618      	mov	r0, r3
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	20004c14 	.word	0x20004c14
 8003734:	20004c18 	.word	0x20004c18

08003738 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	fb02 f303 	mul.w	r3, r2, r3
 800374c:	4a0c      	ldr	r2, [pc, #48]	; (8003780 <microros_zero_allocate+0x48>)
 800374e:	6812      	ldr	r2, [r2, #0]
 8003750:	4413      	add	r3, r2
 8003752:	461a      	mov	r2, r3
 8003754:	4b0a      	ldr	r3, [pc, #40]	; (8003780 <microros_zero_allocate+0x48>)
 8003756:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	68ba      	ldr	r2, [r7, #8]
 800375c:	fb02 f303 	mul.w	r3, r2, r3
 8003760:	4a08      	ldr	r2, [pc, #32]	; (8003784 <microros_zero_allocate+0x4c>)
 8003762:	6812      	ldr	r2, [r2, #0]
 8003764:	4413      	add	r3, r2
 8003766:	461a      	mov	r2, r3
 8003768:	4b06      	ldr	r3, [pc, #24]	; (8003784 <microros_zero_allocate+0x4c>)
 800376a:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 800376c:	68b9      	ldr	r1, [r7, #8]
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	f7fe f8bc 	bl	80018ec <pvPortCallocMicroROS>
 8003774:	4603      	mov	r3, r0
 8003776:	4618      	mov	r0, r3
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	20004c14 	.word	0x20004c14
 8003784:	20004c18 	.word	0x20004c18

08003788 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8003788:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800378c:	b086      	sub	sp, #24
 800378e:	af00      	add	r7, sp, #0
 8003790:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003794:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8003796:	2300      	movs	r3, #0
 8003798:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800379a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800379e:	a320      	add	r3, pc, #128	; (adr r3, 8003820 <UTILS_NanosecondsToTimespec+0x98>)
 80037a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a4:	f7fd fa2a 	bl	8000bfc <__aeabi_ldivmod>
 80037a8:	4602      	mov	r2, r0
 80037aa:	460b      	mov	r3, r1
 80037ac:	6879      	ldr	r1, [r7, #4]
 80037ae:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80037b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037b6:	a31a      	add	r3, pc, #104	; (adr r3, 8003820 <UTILS_NanosecondsToTimespec+0x98>)
 80037b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037bc:	f7fd fa1e 	bl	8000bfc <__aeabi_ldivmod>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	da20      	bge.n	800380e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	4a11      	ldr	r2, [pc, #68]	; (8003818 <UTILS_NanosecondsToTimespec+0x90>)
 80037d2:	fb82 1203 	smull	r1, r2, r2, r3
 80037d6:	1712      	asrs	r2, r2, #28
 80037d8:	17db      	asrs	r3, r3, #31
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	3301      	adds	r3, #1
 80037de:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e6:	6979      	ldr	r1, [r7, #20]
 80037e8:	17c8      	asrs	r0, r1, #31
 80037ea:	460c      	mov	r4, r1
 80037ec:	4605      	mov	r5, r0
 80037ee:	ebb2 0804 	subs.w	r8, r2, r4
 80037f2:	eb63 0905 	sbc.w	r9, r3, r5
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	4906      	ldr	r1, [pc, #24]	; (800381c <UTILS_NanosecondsToTimespec+0x94>)
 8003804:	fb01 f303 	mul.w	r3, r1, r3
 8003808:	441a      	add	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	609a      	str	r2, [r3, #8]
    }
}
 800380e:	bf00      	nop
 8003810:	3718      	adds	r7, #24
 8003812:	46bd      	mov	sp, r7
 8003814:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003818:	44b82fa1 	.word	0x44b82fa1
 800381c:	3b9aca00 	.word	0x3b9aca00
 8003820:	3b9aca00 	.word	0x3b9aca00
 8003824:	00000000 	.word	0x00000000

08003828 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8003828:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800382c:	b08e      	sub	sp, #56	; 0x38
 800382e:	af00      	add	r7, sp, #0
 8003830:	6278      	str	r0, [r7, #36]	; 0x24
 8003832:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8003834:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003838:	2300      	movs	r3, #0
 800383a:	6013      	str	r3, [r2, #0]
 800383c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800383e:	f04f 0200 	mov.w	r2, #0
 8003842:	f04f 0300 	mov.w	r3, #0
 8003846:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800384a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800384e:	4618      	mov	r0, r3
 8003850:	f009 fd18 	bl	800d284 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8003854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003856:	17da      	asrs	r2, r3, #31
 8003858:	61bb      	str	r3, [r7, #24]
 800385a:	61fa      	str	r2, [r7, #28]
 800385c:	f04f 0200 	mov.w	r2, #0
 8003860:	f04f 0300 	mov.w	r3, #0
 8003864:	69b9      	ldr	r1, [r7, #24]
 8003866:	000b      	movs	r3, r1
 8003868:	2200      	movs	r2, #0
 800386a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800386e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003870:	2200      	movs	r2, #0
 8003872:	461c      	mov	r4, r3
 8003874:	4615      	mov	r5, r2
 8003876:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800387a:	1911      	adds	r1, r2, r4
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	416b      	adcs	r3, r5
 8003880:	60fb      	str	r3, [r7, #12]
 8003882:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003886:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800388a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800388e:	4602      	mov	r2, r0
 8003890:	460b      	mov	r3, r1
 8003892:	f04f 0400 	mov.w	r4, #0
 8003896:	f04f 0500 	mov.w	r5, #0
 800389a:	015d      	lsls	r5, r3, #5
 800389c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80038a0:	0154      	lsls	r4, r2, #5
 80038a2:	4622      	mov	r2, r4
 80038a4:	462b      	mov	r3, r5
 80038a6:	ebb2 0800 	subs.w	r8, r2, r0
 80038aa:	eb63 0901 	sbc.w	r9, r3, r1
 80038ae:	f04f 0200 	mov.w	r2, #0
 80038b2:	f04f 0300 	mov.w	r3, #0
 80038b6:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80038ba:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80038be:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80038c2:	4690      	mov	r8, r2
 80038c4:	4699      	mov	r9, r3
 80038c6:	eb18 0a00 	adds.w	sl, r8, r0
 80038ca:	eb49 0b01 	adc.w	fp, r9, r1
 80038ce:	f04f 0200 	mov.w	r2, #0
 80038d2:	f04f 0300 	mov.w	r3, #0
 80038d6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038da:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038de:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038e2:	ebb2 040a 	subs.w	r4, r2, sl
 80038e6:	603c      	str	r4, [r7, #0]
 80038e8:	eb63 030b 	sbc.w	r3, r3, fp
 80038ec:	607b      	str	r3, [r7, #4]
 80038ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038f2:	4623      	mov	r3, r4
 80038f4:	181b      	adds	r3, r3, r0
 80038f6:	613b      	str	r3, [r7, #16]
 80038f8:	462b      	mov	r3, r5
 80038fa:	eb41 0303 	adc.w	r3, r1, r3
 80038fe:	617b      	str	r3, [r7, #20]
 8003900:	6a3a      	ldr	r2, [r7, #32]
 8003902:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003906:	f7ff ff3f 	bl	8003788 <UTILS_NanosecondsToTimespec>

    return 0;
 800390a:	2300      	movs	r3, #0
 800390c:	4618      	mov	r0, r3
 800390e:	3738      	adds	r7, #56	; 0x38
 8003910:	46bd      	mov	sp, r7
 8003912:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003918 <motorCommand_Init>:
// TIMER 3 (PWM)  : CH1 et CH2
// ENABLE : Sortie Logique (GPIO) PA7
//=================================================================

void motorCommand_Init(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
	unsigned int uwPrescalerValue = 0;
 800391e:	2300      	movs	r3, #0
 8003920:	607b      	str	r3, [r7, #4]

	/* Compute the prescaler value to have TIM4 counter clock equal to 10MHz */
	  uwPrescalerValue = (unsigned int) ((SystemCoreClock / 10000000) - 1);
 8003922:	4b24      	ldr	r3, [pc, #144]	; (80039b4 <motorCommand_Init+0x9c>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a24      	ldr	r2, [pc, #144]	; (80039b8 <motorCommand_Init+0xa0>)
 8003928:	fba2 2303 	umull	r2, r3, r2, r3
 800392c:	0d9b      	lsrs	r3, r3, #22
 800392e:	3b01      	subs	r3, #1
 8003930:	607b      	str	r3, [r7, #4]
	  TimHandle.Instance = TIM3;
 8003932:	4b22      	ldr	r3, [pc, #136]	; (80039bc <motorCommand_Init+0xa4>)
 8003934:	4a22      	ldr	r2, [pc, #136]	; (80039c0 <motorCommand_Init+0xa8>)
 8003936:	601a      	str	r2, [r3, #0]
	  TimHandle.Init.Period = 200 - 1; // 100MHz/200=50kHz
 8003938:	4b20      	ldr	r3, [pc, #128]	; (80039bc <motorCommand_Init+0xa4>)
 800393a:	22c7      	movs	r2, #199	; 0xc7
 800393c:	60da      	str	r2, [r3, #12]
	  TimHandle.Init.Prescaler = uwPrescalerValue;
 800393e:	4a1f      	ldr	r2, [pc, #124]	; (80039bc <motorCommand_Init+0xa4>)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6053      	str	r3, [r2, #4]
	  TimHandle.Init.ClockDivision = 0;
 8003944:	4b1d      	ldr	r3, [pc, #116]	; (80039bc <motorCommand_Init+0xa4>)
 8003946:	2200      	movs	r2, #0
 8003948:	611a      	str	r2, [r3, #16]
	  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 800394a:	4b1c      	ldr	r3, [pc, #112]	; (80039bc <motorCommand_Init+0xa4>)
 800394c:	2200      	movs	r2, #0
 800394e:	609a      	str	r2, [r3, #8]

	  HAL_TIM_Base_Init(&TimHandle);
 8003950:	481a      	ldr	r0, [pc, #104]	; (80039bc <motorCommand_Init+0xa4>)
 8003952:	f005 fcc1 	bl	80092d8 <HAL_TIM_Base_Init>

	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003956:	4b1b      	ldr	r3, [pc, #108]	; (80039c4 <motorCommand_Init+0xac>)
 8003958:	2260      	movs	r2, #96	; 0x60
 800395a:	601a      	str	r2, [r3, #0]
	  sConfigOC.Pulse = 0x5;// Specifies the pulse value to be loaded into the Capture Compare Register. This parameter can be a number between Min_Data = 0x0000 and Max_Data = 0xFFFF */
 800395c:	4b19      	ldr	r3, [pc, #100]	; (80039c4 <motorCommand_Init+0xac>)
 800395e:	2205      	movs	r2, #5
 8003960:	605a      	str	r2, [r3, #4]

	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003962:	4b18      	ldr	r3, [pc, #96]	; (80039c4 <motorCommand_Init+0xac>)
 8003964:	2200      	movs	r2, #0
 8003966:	609a      	str	r2, [r3, #8]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003968:	4b16      	ldr	r3, [pc, #88]	; (80039c4 <motorCommand_Init+0xac>)
 800396a:	2200      	movs	r2, #0
 800396c:	611a      	str	r2, [r3, #16]

	 HAL_TIM_PWM_ConfigChannel(&TimHandle, &sConfigOC, TIM_CHANNEL_1);
 800396e:	2200      	movs	r2, #0
 8003970:	4914      	ldr	r1, [pc, #80]	; (80039c4 <motorCommand_Init+0xac>)
 8003972:	4812      	ldr	r0, [pc, #72]	; (80039bc <motorCommand_Init+0xa4>)
 8003974:	f006 f862 	bl	8009a3c <HAL_TIM_PWM_ConfigChannel>
	 HAL_TIM_PWM_ConfigChannel(&TimHandle, &sConfigOC, TIM_CHANNEL_2);
 8003978:	2204      	movs	r2, #4
 800397a:	4912      	ldr	r1, [pc, #72]	; (80039c4 <motorCommand_Init+0xac>)
 800397c:	480f      	ldr	r0, [pc, #60]	; (80039bc <motorCommand_Init+0xa4>)
 800397e:	f006 f85d 	bl	8009a3c <HAL_TIM_PWM_ConfigChannel>

	 // CHANGEMENT DU RAPPORT CYCLIQUE
	 __HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_1, 100);	// 100 : moteurs au repos
 8003982:	4b0e      	ldr	r3, [pc, #56]	; (80039bc <motorCommand_Init+0xa4>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2264      	movs	r2, #100	; 0x64
 8003988:	635a      	str	r2, [r3, #52]	; 0x34
	 __HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_2, 100);
 800398a:	4b0c      	ldr	r3, [pc, #48]	; (80039bc <motorCommand_Init+0xa4>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2264      	movs	r2, #100	; 0x64
 8003990:	639a      	str	r2, [r3, #56]	; 0x38

	  HAL_TIM_PWM_Start(&TimHandle, TIM_CHANNEL_1);	// MOTOR RIGHT
 8003992:	2100      	movs	r1, #0
 8003994:	4809      	ldr	r0, [pc, #36]	; (80039bc <motorCommand_Init+0xa4>)
 8003996:	f005 fd5b 	bl	8009450 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&TimHandle, TIM_CHANNEL_2); // MOTOR LEFT
 800399a:	2104      	movs	r1, #4
 800399c:	4807      	ldr	r0, [pc, #28]	; (80039bc <motorCommand_Init+0xa4>)
 800399e:	f005 fd57 	bl	8009450 <HAL_TIM_PWM_Start>

	  // ENABLE MOTEUR (SI INVERSEUR)
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 80039a2:	2200      	movs	r2, #0
 80039a4:	2108      	movs	r1, #8
 80039a6:	4808      	ldr	r0, [pc, #32]	; (80039c8 <motorCommand_Init+0xb0>)
 80039a8:	f002 fb52 	bl	8006050 <HAL_GPIO_WritePin>
}
 80039ac:	bf00      	nop
 80039ae:	3708      	adds	r7, #8
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	20000014 	.word	0x20000014
 80039b8:	6b5fca6b 	.word	0x6b5fca6b
 80039bc:	20004c1c 	.word	0x20004c1c
 80039c0:	40000400 	.word	0x40000400
 80039c4:	20004c64 	.word	0x20004c64
 80039c8:	40020400 	.word	0x40020400

080039cc <motorLeft_SetDuty>:

//=================================================================
//			SET DUTY CYCLE LEFT
//=================================================================
void motorLeft_SetDuty(int duty)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_1, duty);
 80039d4:	4b04      	ldr	r3, [pc, #16]	; (80039e8 <motorLeft_SetDuty+0x1c>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	635a      	str	r2, [r3, #52]	; 0x34
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr
 80039e8:	20004c1c 	.word	0x20004c1c

080039ec <motorRight_SetDuty>:
//=================================================================
//			SET DUTY CYCLE RIGHT
//=================================================================
void motorRight_SetDuty(int duty)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_2, duty);
 80039f4:	4b04      	ldr	r3, [pc, #16]	; (8003a08 <motorRight_SetDuty+0x1c>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	639a      	str	r2, [r3, #56]	; 0x38
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr
 8003a08:	20004c1c 	.word	0x20004c1c

08003a0c <quadEncoder_Init>:
//================================================================
//		TIMER INIT
//================================================================

void quadEncoder_Init(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b08a      	sub	sp, #40	; 0x28
 8003a10:	af00      	add	r7, sp, #0
	TIM_Encoder_InitTypeDef sConfig;
	//--------------------------------------------------
	// TIMER 1
	//--------------------------------------------------
	TimEncoderHandleLeft.Instance = TIM1;
 8003a12:	4b35      	ldr	r3, [pc, #212]	; (8003ae8 <quadEncoder_Init+0xdc>)
 8003a14:	4a35      	ldr	r2, [pc, #212]	; (8003aec <quadEncoder_Init+0xe0>)
 8003a16:	601a      	str	r2, [r3, #0]
	TimEncoderHandleLeft.Init.Prescaler = 0;
 8003a18:	4b33      	ldr	r3, [pc, #204]	; (8003ae8 <quadEncoder_Init+0xdc>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	605a      	str	r2, [r3, #4]
	TimEncoderHandleLeft.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a1e:	4b32      	ldr	r3, [pc, #200]	; (8003ae8 <quadEncoder_Init+0xdc>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	609a      	str	r2, [r3, #8]
	TimEncoderHandleLeft.Init.Period = COUNT_PER_ROUND*4;
 8003a24:	4b30      	ldr	r3, [pc, #192]	; (8003ae8 <quadEncoder_Init+0xdc>)
 8003a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a2a:	60da      	str	r2, [r3, #12]
	TimEncoderHandleLeft.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a2c:	4b2e      	ldr	r3, [pc, #184]	; (8003ae8 <quadEncoder_Init+0xdc>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	611a      	str	r2, [r3, #16]

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003a32:	2303      	movs	r3, #3
 8003a34:	607b      	str	r3, [r7, #4]
	sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003a36:	2300      	movs	r3, #0
 8003a38:	60bb      	str	r3, [r7, #8]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 8003a3e:	2308      	movs	r3, #8
 8003a40:	613b      	str	r3, [r7, #16]
	sConfig.IC1Filter = 0x0F;
 8003a42:	230f      	movs	r3, #15
 8003a44:	617b      	str	r3, [r7, #20]
	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003a46:	2300      	movs	r3, #0
 8003a48:	61bb      	str	r3, [r7, #24]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;//TIM_ICSELECTION_DIRECTTI; //TIM_TI1SELECTION_XORCOMBINATION
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 8003a4e:	2308      	movs	r3, #8
 8003a50:	623b      	str	r3, [r7, #32]
	sConfig.IC2Filter = 0x0F;
 8003a52:	230f      	movs	r3, #15
 8003a54:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_TIM_Encoder_Init(&TimEncoderHandleLeft, &sConfig);
 8003a56:	1d3b      	adds	r3, r7, #4
 8003a58:	4619      	mov	r1, r3
 8003a5a:	4823      	ldr	r0, [pc, #140]	; (8003ae8 <quadEncoder_Init+0xdc>)
 8003a5c:	f005 fda8 	bl	80095b0 <HAL_TIM_Encoder_Init>

	__HAL_TIM_SetCounter(&TimEncoderHandleLeft, 0);
 8003a60:	4b21      	ldr	r3, [pc, #132]	; (8003ae8 <quadEncoder_Init+0xdc>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2200      	movs	r2, #0
 8003a66:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_1);
 8003a68:	2100      	movs	r1, #0
 8003a6a:	481f      	ldr	r0, [pc, #124]	; (8003ae8 <quadEncoder_Init+0xdc>)
 8003a6c:	f005 fe50 	bl	8009710 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_2);
 8003a70:	2104      	movs	r1, #4
 8003a72:	481d      	ldr	r0, [pc, #116]	; (8003ae8 <quadEncoder_Init+0xdc>)
 8003a74:	f005 fe4c 	bl	8009710 <HAL_TIM_Encoder_Start>

	//--------------------------------------------------
	// TIMER 2
	//--------------------------------------------------
	TimEncoderHandleRight.Instance = TIM2;
 8003a78:	4b1d      	ldr	r3, [pc, #116]	; (8003af0 <quadEncoder_Init+0xe4>)
 8003a7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003a7e:	601a      	str	r2, [r3, #0]
	TimEncoderHandleRight.Init.Prescaler = 0;
 8003a80:	4b1b      	ldr	r3, [pc, #108]	; (8003af0 <quadEncoder_Init+0xe4>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	605a      	str	r2, [r3, #4]
	TimEncoderHandleRight.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a86:	4b1a      	ldr	r3, [pc, #104]	; (8003af0 <quadEncoder_Init+0xe4>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	609a      	str	r2, [r3, #8]
	TimEncoderHandleRight.Init.Period = COUNT_PER_ROUND*4;
 8003a8c:	4b18      	ldr	r3, [pc, #96]	; (8003af0 <quadEncoder_Init+0xe4>)
 8003a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a92:	60da      	str	r2, [r3, #12]
	TimEncoderHandleRight.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a94:	4b16      	ldr	r3, [pc, #88]	; (8003af0 <quadEncoder_Init+0xe4>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	611a      	str	r2, [r3, #16]

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	607b      	str	r3, [r7, #4]
	sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	60bb      	str	r3, [r7, #8]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 8003aa6:	2308      	movs	r3, #8
 8003aa8:	613b      	str	r3, [r7, #16]
	sConfig.IC1Filter = 0x0F;
 8003aaa:	230f      	movs	r3, #15
 8003aac:	617b      	str	r3, [r7, #20]
	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	61bb      	str	r3, [r7, #24]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;//TIM_ICSELECTION_DIRECTTI; //TIM_TI1SELECTION_XORCOMBINATION
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 8003ab6:	2308      	movs	r3, #8
 8003ab8:	623b      	str	r3, [r7, #32]
	sConfig.IC2Filter = 0x0F;
 8003aba:	230f      	movs	r3, #15
 8003abc:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_TIM_Encoder_Init(&TimEncoderHandleRight, &sConfig);
 8003abe:	1d3b      	adds	r3, r7, #4
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	480b      	ldr	r0, [pc, #44]	; (8003af0 <quadEncoder_Init+0xe4>)
 8003ac4:	f005 fd74 	bl	80095b0 <HAL_TIM_Encoder_Init>

	__HAL_TIM_SetCounter(&TimEncoderHandleRight, 0);
 8003ac8:	4b09      	ldr	r3, [pc, #36]	; (8003af0 <quadEncoder_Init+0xe4>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2200      	movs	r2, #0
 8003ace:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_1);
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	4807      	ldr	r0, [pc, #28]	; (8003af0 <quadEncoder_Init+0xe4>)
 8003ad4:	f005 fe1c 	bl	8009710 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_2);
 8003ad8:	2104      	movs	r1, #4
 8003ada:	4805      	ldr	r0, [pc, #20]	; (8003af0 <quadEncoder_Init+0xe4>)
 8003adc:	f005 fe18 	bl	8009710 <HAL_TIM_Encoder_Start>
}
 8003ae0:	bf00      	nop
 8003ae2:	3728      	adds	r7, #40	; 0x28
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	20004c80 	.word	0x20004c80
 8003aec:	40010000 	.word	0x40010000
 8003af0:	20004cc8 	.word	0x20004cc8

08003af4 <quadEncoder_PosCalcL>:
//================================================================
//		POSITION LEFT CALC
//================================================================

void quadEncoder_PosCalcL(int* AngPos)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]

int POSCNTcopy = 0;
 8003afc:	2300      	movs	r3, #0
 8003afe:	60fb      	str	r3, [r7, #12]
POSCNTcopy = (int)TIM1->CNT;
 8003b00:	4b0c      	ldr	r3, [pc, #48]	; (8003b34 <quadEncoder_PosCalcL+0x40>)
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	60fb      	str	r3, [r7, #12]
AngPos[1] = AngPos[0];
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	3304      	adds	r3, #4
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	6812      	ldr	r2, [r2, #0]
 8003b0e:	601a      	str	r2, [r3, #0]
AngPos[0] = (unsigned int)(((unsigned long)POSCNTcopy * COEFF)/1000); // 0 <= POSCNT <= 4999 to 0 <= AngPos <= 32767
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f641 129b 	movw	r2, #6555	; 0x199b
 8003b16:	fb02 f303 	mul.w	r3, r2, r3
 8003b1a:	4a07      	ldr	r2, [pc, #28]	; (8003b38 <quadEncoder_PosCalcL+0x44>)
 8003b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b20:	099b      	lsrs	r3, r3, #6
 8003b22:	461a      	mov	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	601a      	str	r2, [r3, #0]
}
 8003b28:	bf00      	nop
 8003b2a:	3714      	adds	r7, #20
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr
 8003b34:	40010000 	.word	0x40010000
 8003b38:	10624dd3 	.word	0x10624dd3

08003b3c <quadEncoder_PosCalcR>:
//================================================================
//		POSITION RIGHT CALC
//================================================================

void quadEncoder_PosCalcR(int* AngPos)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]

int POSCNTcopy = 0;
 8003b44:	2300      	movs	r3, #0
 8003b46:	60fb      	str	r3, [r7, #12]
POSCNTcopy = (int)TIM2->CNT;
 8003b48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4e:	60fb      	str	r3, [r7, #12]
AngPos[1] = AngPos[0];
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	3304      	adds	r3, #4
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	6812      	ldr	r2, [r2, #0]
 8003b58:	601a      	str	r2, [r3, #0]
AngPos[0] = (unsigned int)(((unsigned long)POSCNTcopy * COEFF)/1000); // 0 <= POSCNT <= 4999 to 0 <= AngPos <= 32767
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f641 129b 	movw	r2, #6555	; 0x199b
 8003b60:	fb02 f303 	mul.w	r3, r2, r3
 8003b64:	4a06      	ldr	r2, [pc, #24]	; (8003b80 <quadEncoder_PosCalcR+0x44>)
 8003b66:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6a:	099b      	lsrs	r3, r3, #6
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	601a      	str	r2, [r3, #0]
}
 8003b72:	bf00      	nop
 8003b74:	3714      	adds	r7, #20
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	10624dd3 	.word	0x10624dd3

08003b84 <quadEncoder_GetSpeedL>:
//		SPEED LEFT
//--> must be called every Te
//================================================================

int16_t quadEncoder_GetSpeedL(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
	static int AngPos[2] = {0,0};
	static int16_t SpeedL=0;

	quadEncoder_PosCalcL(AngPos);
 8003b88:	4824      	ldr	r0, [pc, #144]	; (8003c1c <quadEncoder_GetSpeedL+0x98>)
 8003b8a:	f7ff ffb3 	bl	8003af4 <quadEncoder_PosCalcL>
	SpeedL = AngPos[0] - AngPos[1];
 8003b8e:	4b23      	ldr	r3, [pc, #140]	; (8003c1c <quadEncoder_GetSpeedL+0x98>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	4b21      	ldr	r3, [pc, #132]	; (8003c1c <quadEncoder_GetSpeedL+0x98>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	b21a      	sxth	r2, r3
 8003ba0:	4b1f      	ldr	r3, [pc, #124]	; (8003c20 <quadEncoder_GetSpeedL+0x9c>)
 8003ba2:	801a      	strh	r2, [r3, #0]
	if (SpeedL >= 0)
 8003ba4:	4b1e      	ldr	r3, [pc, #120]	; (8003c20 <quadEncoder_GetSpeedL+0x9c>)
 8003ba6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	db10      	blt.n	8003bd0 <quadEncoder_GetSpeedL+0x4c>
	{
		if (SpeedL >= HALF_MAX_COUNT)
 8003bae:	4b1c      	ldr	r3, [pc, #112]	; (8003c20 <quadEncoder_GetSpeedL+0x9c>)
 8003bb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bb8:	db1a      	blt.n	8003bf0 <quadEncoder_GetSpeedL+0x6c>
			{
			SpeedL = SpeedL - MAX_COUNT;
 8003bba:	4b19      	ldr	r3, [pc, #100]	; (8003c20 <quadEncoder_GetSpeedL+0x9c>)
 8003bbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	b21a      	sxth	r2, r3
 8003bca:	4b15      	ldr	r3, [pc, #84]	; (8003c20 <quadEncoder_GetSpeedL+0x9c>)
 8003bcc:	801a      	strh	r2, [r3, #0]
 8003bce:	e00f      	b.n	8003bf0 <quadEncoder_GetSpeedL+0x6c>
			}
	}
	else
	{
		if (SpeedL < -HALF_MAX_COUNT)
 8003bd0:	4b13      	ldr	r3, [pc, #76]	; (8003c20 <quadEncoder_GetSpeedL+0x9c>)
 8003bd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bd6:	f513 4f80 	cmn.w	r3, #16384	; 0x4000
 8003bda:	da09      	bge.n	8003bf0 <quadEncoder_GetSpeedL+0x6c>
			{
			SpeedL = SpeedL + MAX_COUNT;
 8003bdc:	4b10      	ldr	r3, [pc, #64]	; (8003c20 <quadEncoder_GetSpeedL+0x9c>)
 8003bde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	b21a      	sxth	r2, r3
 8003bec:	4b0c      	ldr	r3, [pc, #48]	; (8003c20 <quadEncoder_GetSpeedL+0x9c>)
 8003bee:	801a      	strh	r2, [r3, #0]
	// 1 tour = 32767
	// Nbre de Tours pendant Te: DELTA_pos/32767
	// Nbre de Tours pendant 1s (Te en ms) : (DELTA_pos/32767)*(1000/Te)
	// Nbre de Tours par minute : : (DELTA_pos/32767)*((60*1000)/Te)

	SpeedL=(SpeedL*60*1000)/(32767*TE_ms);
 8003bf0:	4b0b      	ldr	r3, [pc, #44]	; (8003c20 <quadEncoder_GetSpeedL+0x9c>)
 8003bf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003bfc:	fb02 f303 	mul.w	r3, r2, r3
 8003c00:	4a08      	ldr	r2, [pc, #32]	; (8003c24 <quadEncoder_GetSpeedL+0xa0>)
 8003c02:	fb82 1203 	smull	r1, r2, r2, r3
 8003c06:	1412      	asrs	r2, r2, #16
 8003c08:	17db      	asrs	r3, r3, #31
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	b21a      	sxth	r2, r3
 8003c0e:	4b04      	ldr	r3, [pc, #16]	; (8003c20 <quadEncoder_GetSpeedL+0x9c>)
 8003c10:	801a      	strh	r2, [r3, #0]
	return SpeedL;
 8003c12:	4b03      	ldr	r3, [pc, #12]	; (8003c20 <quadEncoder_GetSpeedL+0x9c>)
 8003c14:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	20004d18 	.word	0x20004d18
 8003c20:	20004d20 	.word	0x20004d20
 8003c24:	66673335 	.word	0x66673335

08003c28 <quadEncoder_GetSpeedR>:
//		SPEED RIGHT
//-->  must be called every Te
//================================================================

int16_t quadEncoder_GetSpeedR(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
	static int AngPos[2] = {0,0};
	static int16_t SpeedR=0;


	quadEncoder_PosCalcR(AngPos);
 8003c2c:	4824      	ldr	r0, [pc, #144]	; (8003cc0 <quadEncoder_GetSpeedR+0x98>)
 8003c2e:	f7ff ff85 	bl	8003b3c <quadEncoder_PosCalcR>
	SpeedR = AngPos[0] - AngPos[1];
 8003c32:	4b23      	ldr	r3, [pc, #140]	; (8003cc0 <quadEncoder_GetSpeedR+0x98>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	4b21      	ldr	r3, [pc, #132]	; (8003cc0 <quadEncoder_GetSpeedR+0x98>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	b21a      	sxth	r2, r3
 8003c44:	4b1f      	ldr	r3, [pc, #124]	; (8003cc4 <quadEncoder_GetSpeedR+0x9c>)
 8003c46:	801a      	strh	r2, [r3, #0]
	if (SpeedR >= 0)
 8003c48:	4b1e      	ldr	r3, [pc, #120]	; (8003cc4 <quadEncoder_GetSpeedR+0x9c>)
 8003c4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	db10      	blt.n	8003c74 <quadEncoder_GetSpeedR+0x4c>
	{
		if (SpeedR >= HALF_MAX_COUNT)
 8003c52:	4b1c      	ldr	r3, [pc, #112]	; (8003cc4 <quadEncoder_GetSpeedR+0x9c>)
 8003c54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c5c:	db1a      	blt.n	8003c94 <quadEncoder_GetSpeedR+0x6c>
			{
			SpeedR = SpeedR - MAX_COUNT;
 8003c5e:	4b19      	ldr	r3, [pc, #100]	; (8003cc4 <quadEncoder_GetSpeedR+0x9c>)
 8003c60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	b21a      	sxth	r2, r3
 8003c6e:	4b15      	ldr	r3, [pc, #84]	; (8003cc4 <quadEncoder_GetSpeedR+0x9c>)
 8003c70:	801a      	strh	r2, [r3, #0]
 8003c72:	e00f      	b.n	8003c94 <quadEncoder_GetSpeedR+0x6c>
			}
	}
	else
	{
		if (SpeedR < -HALF_MAX_COUNT)
 8003c74:	4b13      	ldr	r3, [pc, #76]	; (8003cc4 <quadEncoder_GetSpeedR+0x9c>)
 8003c76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c7a:	f513 4f80 	cmn.w	r3, #16384	; 0x4000
 8003c7e:	da09      	bge.n	8003c94 <quadEncoder_GetSpeedR+0x6c>
			{
			SpeedR = SpeedR + MAX_COUNT;
 8003c80:	4b10      	ldr	r3, [pc, #64]	; (8003cc4 <quadEncoder_GetSpeedR+0x9c>)
 8003c82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	b21a      	sxth	r2, r3
 8003c90:	4b0c      	ldr	r3, [pc, #48]	; (8003cc4 <quadEncoder_GetSpeedR+0x9c>)
 8003c92:	801a      	strh	r2, [r3, #0]
	// 1 tour = 32767
	// Nbre de Tours pendant Te: DELTA_pos/32767
	// Nbre de Tours pendant 1s (Te en ms) : (DELTA_pos/32767)*(1000/Te)
	// Nbre de Tours par minute : : (DELTA_pos/32767)*((60*1000)/Te)

	SpeedR=(SpeedR*60*1000)/(32767*TE_ms);
 8003c94:	4b0b      	ldr	r3, [pc, #44]	; (8003cc4 <quadEncoder_GetSpeedR+0x9c>)
 8003c96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003ca0:	fb02 f303 	mul.w	r3, r2, r3
 8003ca4:	4a08      	ldr	r2, [pc, #32]	; (8003cc8 <quadEncoder_GetSpeedR+0xa0>)
 8003ca6:	fb82 1203 	smull	r1, r2, r2, r3
 8003caa:	1412      	asrs	r2, r2, #16
 8003cac:	17db      	asrs	r3, r3, #31
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	b21a      	sxth	r2, r3
 8003cb2:	4b04      	ldr	r3, [pc, #16]	; (8003cc4 <quadEncoder_GetSpeedR+0x9c>)
 8003cb4:	801a      	strh	r2, [r3, #0]
	return SpeedR;
 8003cb6:	4b03      	ldr	r3, [pc, #12]	; (8003cc4 <quadEncoder_GetSpeedR+0x9c>)
 8003cb8:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	20004d24 	.word	0x20004d24
 8003cc4:	20004d2c 	.word	0x20004d2c
 8003cc8:	66673335 	.word	0x66673335

08003ccc <quadEncoder_CallbackIndexL>:
//================================================================
//		MAJ index Left
//================================================================

void quadEncoder_CallbackIndexL()
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	af00      	add	r7, sp, #0
				if (__HAL_TIM_DIRECTION_STATUS(&TimEncoderHandleLeft)==1)
 8003cd0:	4b0f      	ldr	r3, [pc, #60]	; (8003d10 <quadEncoder_CallbackIndexL+0x44>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0310 	and.w	r3, r3, #16
 8003cda:	2b10      	cmp	r3, #16
 8003cdc:	d105      	bne.n	8003cea <quadEncoder_CallbackIndexL+0x1e>
				{
					indexL--;
 8003cde:	4b0d      	ldr	r3, [pc, #52]	; (8003d14 <quadEncoder_CallbackIndexL+0x48>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	4a0b      	ldr	r2, [pc, #44]	; (8003d14 <quadEncoder_CallbackIndexL+0x48>)
 8003ce6:	6013      	str	r3, [r2, #0]
 8003ce8:	e004      	b.n	8003cf4 <quadEncoder_CallbackIndexL+0x28>
				}
				else
				{
					indexL++;
 8003cea:	4b0a      	ldr	r3, [pc, #40]	; (8003d14 <quadEncoder_CallbackIndexL+0x48>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	3301      	adds	r3, #1
 8003cf0:	4a08      	ldr	r2, [pc, #32]	; (8003d14 <quadEncoder_CallbackIndexL+0x48>)
 8003cf2:	6013      	str	r3, [r2, #0]
				}


				__HAL_TIM_SetCounter(&TimEncoderHandleLeft, 0);		// RAZ Counter
 8003cf4:	4b06      	ldr	r3, [pc, #24]	; (8003d10 <quadEncoder_CallbackIndexL+0x44>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_1);
 8003cfc:	2100      	movs	r1, #0
 8003cfe:	4804      	ldr	r0, [pc, #16]	; (8003d10 <quadEncoder_CallbackIndexL+0x44>)
 8003d00:	f005 fd06 	bl	8009710 <HAL_TIM_Encoder_Start>
				HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_2);
 8003d04:	2104      	movs	r1, #4
 8003d06:	4802      	ldr	r0, [pc, #8]	; (8003d10 <quadEncoder_CallbackIndexL+0x44>)
 8003d08:	f005 fd02 	bl	8009710 <HAL_TIM_Encoder_Start>

}
 8003d0c:	bf00      	nop
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	20004c80 	.word	0x20004c80
 8003d14:	20004d10 	.word	0x20004d10

08003d18 <quadEncoder_CallbackIndexR>:
//================================================================
//		MAJ index Right
//================================================================

void quadEncoder_CallbackIndexR()
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
				if (__HAL_TIM_DIRECTION_STATUS(&TimEncoderHandleRight)==1)
 8003d1c:	4b0f      	ldr	r3, [pc, #60]	; (8003d5c <quadEncoder_CallbackIndexR+0x44>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0310 	and.w	r3, r3, #16
 8003d26:	2b10      	cmp	r3, #16
 8003d28:	d105      	bne.n	8003d36 <quadEncoder_CallbackIndexR+0x1e>
				{
					indexR--;
 8003d2a:	4b0d      	ldr	r3, [pc, #52]	; (8003d60 <quadEncoder_CallbackIndexR+0x48>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	4a0b      	ldr	r2, [pc, #44]	; (8003d60 <quadEncoder_CallbackIndexR+0x48>)
 8003d32:	6013      	str	r3, [r2, #0]
 8003d34:	e004      	b.n	8003d40 <quadEncoder_CallbackIndexR+0x28>

				}
				else
				{
					indexR++;
 8003d36:	4b0a      	ldr	r3, [pc, #40]	; (8003d60 <quadEncoder_CallbackIndexR+0x48>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	4a08      	ldr	r2, [pc, #32]	; (8003d60 <quadEncoder_CallbackIndexR+0x48>)
 8003d3e:	6013      	str	r3, [r2, #0]
				}

				__HAL_TIM_SetCounter(&TimEncoderHandleRight, 0);			// RAZ Counter
 8003d40:	4b06      	ldr	r3, [pc, #24]	; (8003d5c <quadEncoder_CallbackIndexR+0x44>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2200      	movs	r2, #0
 8003d46:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_1);
 8003d48:	2100      	movs	r1, #0
 8003d4a:	4804      	ldr	r0, [pc, #16]	; (8003d5c <quadEncoder_CallbackIndexR+0x44>)
 8003d4c:	f005 fce0 	bl	8009710 <HAL_TIM_Encoder_Start>
				HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_2);
 8003d50:	2104      	movs	r1, #4
 8003d52:	4802      	ldr	r0, [pc, #8]	; (8003d5c <quadEncoder_CallbackIndexR+0x44>)
 8003d54:	f005 fcdc 	bl	8009710 <HAL_TIM_Encoder_Start>

}
 8003d58:	bf00      	nop
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	20004cc8 	.word	0x20004cc8
 8003d60:	20004d14 	.word	0x20004d14

08003d64 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8003d6c:	4a07      	ldr	r2, [pc, #28]	; (8003d8c <RetargetInit+0x28>)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8003d72:	4b07      	ldr	r3, [pc, #28]	; (8003d90 <RetargetInit+0x2c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	6898      	ldr	r0, [r3, #8]
 8003d78:	2300      	movs	r3, #0
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	2100      	movs	r1, #0
 8003d7e:	f016 f99d 	bl	801a0bc <setvbuf>
}
 8003d82:	bf00      	nop
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	20004d30 	.word	0x20004d30
 8003d90:	200000e8 	.word	0x200000e8

08003d94 <_isatty>:

int _isatty(int fd) {
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	db04      	blt.n	8003dac <_isatty+0x18>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	dc01      	bgt.n	8003dac <_isatty+0x18>
    return 1;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e005      	b.n	8003db8 <_isatty+0x24>

  errno = EBADF;
 8003dac:	f016 fc7e 	bl	801a6ac <__errno>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2209      	movs	r2, #9
 8003db4:	601a      	str	r2, [r3, #0]
  return 0;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3708      	adds	r7, #8
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <_write>:

int _write(int fd, char* ptr, int len) {
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d002      	beq.n	8003dd8 <_write+0x18>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d111      	bne.n	8003dfc <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8003dd8:	4b0e      	ldr	r3, [pc, #56]	; (8003e14 <_write+0x54>)
 8003dda:	6818      	ldr	r0, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	f04f 33ff 	mov.w	r3, #4294967295
 8003de4:	68b9      	ldr	r1, [r7, #8]
 8003de6:	f006 f9a5 	bl	800a134 <HAL_UART_Transmit>
 8003dea:	4603      	mov	r3, r0
 8003dec:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8003dee:	7dfb      	ldrb	r3, [r7, #23]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d101      	bne.n	8003df8 <_write+0x38>
      return len;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	e008      	b.n	8003e0a <_write+0x4a>
    else
      return EIO;
 8003df8:	2305      	movs	r3, #5
 8003dfa:	e006      	b.n	8003e0a <_write+0x4a>
  }
  errno = EBADF;
 8003dfc:	f016 fc56 	bl	801a6ac <__errno>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2209      	movs	r2, #9
 8003e04:	601a      	str	r2, [r3, #0]
  return -1;
 8003e06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3718      	adds	r7, #24
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	20004d30 	.word	0x20004d30

08003e18 <_close>:

int _close(int fd) {
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	db04      	blt.n	8003e30 <_close+0x18>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	dc01      	bgt.n	8003e30 <_close+0x18>
    return 0;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	e006      	b.n	8003e3e <_close+0x26>

  errno = EBADF;
 8003e30:	f016 fc3c 	bl	801a6ac <__errno>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2209      	movs	r2, #9
 8003e38:	601a      	str	r2, [r3, #0]
  return -1;
 8003e3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b084      	sub	sp, #16
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	60f8      	str	r0, [r7, #12]
 8003e4e:	60b9      	str	r1, [r7, #8]
 8003e50:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8003e52:	f016 fc2b 	bl	801a6ac <__errno>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2209      	movs	r2, #9
 8003e5a:	601a      	str	r2, [r3, #0]
  return -1;
 8003e5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <_read>:

int _read(int fd, char* ptr, int len) {
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b086      	sub	sp, #24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d110      	bne.n	8003e9c <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8003e7a:	4b0e      	ldr	r3, [pc, #56]	; (8003eb4 <_read+0x4c>)
 8003e7c:	6818      	ldr	r0, [r3, #0]
 8003e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e82:	2201      	movs	r2, #1
 8003e84:	68b9      	ldr	r1, [r7, #8]
 8003e86:	f006 f9e7 	bl	800a258 <HAL_UART_Receive>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8003e8e:	7dfb      	ldrb	r3, [r7, #23]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d101      	bne.n	8003e98 <_read+0x30>
      return 1;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e008      	b.n	8003eaa <_read+0x42>
    else
      return EIO;
 8003e98:	2305      	movs	r3, #5
 8003e9a:	e006      	b.n	8003eaa <_read+0x42>
  }
  errno = EBADF;
 8003e9c:	f016 fc06 	bl	801a6ac <__errno>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2209      	movs	r2, #9
 8003ea4:	601a      	str	r2, [r3, #0]
  return -1;
 8003ea6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3718      	adds	r7, #24
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	20004d30 	.word	0x20004d30

08003eb8 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	db08      	blt.n	8003eda <_fstat+0x22>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	dc05      	bgt.n	8003eda <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ed4:	605a      	str	r2, [r3, #4]
    return 0;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	e005      	b.n	8003ee6 <_fstat+0x2e>
  }

  errno = EBADF;
 8003eda:	f016 fbe7 	bl	801a6ac <__errno>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2209      	movs	r2, #9
 8003ee2:	601a      	str	r2, [r3, #0]
  return 0;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3708      	adds	r7, #8
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <_getpid>:

int _getpid(void)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	af00      	add	r7, sp, #0
	return 1;
 8003ef2:	2301      	movs	r3, #1
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr

08003efe <_kill>:

int _kill(int pid, int sig)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b082      	sub	sp, #8
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
 8003f06:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003f08:	f016 fbd0 	bl	801a6ac <__errno>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2216      	movs	r2, #22
 8003f10:	601a      	str	r2, [r3, #0]
	return -1;
 8003f12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3708      	adds	r7, #8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
	...

08003f20 <HAL_MspInit>:
void HAL_Encoder_Timer1_MspInit(void);
void HAL_Encoder_Timer2_MspInit(void);
void HAL_adcir_MspInit(void);

void HAL_MspInit(void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f26:	2300      	movs	r3, #0
 8003f28:	617b      	str	r3, [r7, #20]
 8003f2a:	4b32      	ldr	r3, [pc, #200]	; (8003ff4 <HAL_MspInit+0xd4>)
 8003f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f2e:	4a31      	ldr	r2, [pc, #196]	; (8003ff4 <HAL_MspInit+0xd4>)
 8003f30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f34:	6453      	str	r3, [r2, #68]	; 0x44
 8003f36:	4b2f      	ldr	r3, [pc, #188]	; (8003ff4 <HAL_MspInit+0xd4>)
 8003f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f3e:	617b      	str	r3, [r7, #20]
 8003f40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f42:	2300      	movs	r3, #0
 8003f44:	613b      	str	r3, [r7, #16]
 8003f46:	4b2b      	ldr	r3, [pc, #172]	; (8003ff4 <HAL_MspInit+0xd4>)
 8003f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4a:	4a2a      	ldr	r2, [pc, #168]	; (8003ff4 <HAL_MspInit+0xd4>)
 8003f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f50:	6413      	str	r3, [r2, #64]	; 0x40
 8003f52:	4b28      	ldr	r3, [pc, #160]	; (8003ff4 <HAL_MspInit+0xd4>)
 8003f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f5a:	613b      	str	r3, [r7, #16]
 8003f5c:	693b      	ldr	r3, [r7, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f5e:	2300      	movs	r3, #0
 8003f60:	60fb      	str	r3, [r7, #12]
 8003f62:	4b24      	ldr	r3, [pc, #144]	; (8003ff4 <HAL_MspInit+0xd4>)
 8003f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f66:	4a23      	ldr	r2, [pc, #140]	; (8003ff4 <HAL_MspInit+0xd4>)
 8003f68:	f043 0304 	orr.w	r3, r3, #4
 8003f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f6e:	4b21      	ldr	r3, [pc, #132]	; (8003ff4 <HAL_MspInit+0xd4>)
 8003f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f72:	f003 0304 	and.w	r3, r3, #4
 8003f76:	60fb      	str	r3, [r7, #12]
 8003f78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60bb      	str	r3, [r7, #8]
 8003f7e:	4b1d      	ldr	r3, [pc, #116]	; (8003ff4 <HAL_MspInit+0xd4>)
 8003f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f82:	4a1c      	ldr	r2, [pc, #112]	; (8003ff4 <HAL_MspInit+0xd4>)
 8003f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f88:	6313      	str	r3, [r2, #48]	; 0x30
 8003f8a:	4b1a      	ldr	r3, [pc, #104]	; (8003ff4 <HAL_MspInit+0xd4>)
 8003f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f92:	60bb      	str	r3, [r7, #8]
 8003f94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f96:	2300      	movs	r3, #0
 8003f98:	607b      	str	r3, [r7, #4]
 8003f9a:	4b16      	ldr	r3, [pc, #88]	; (8003ff4 <HAL_MspInit+0xd4>)
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9e:	4a15      	ldr	r2, [pc, #84]	; (8003ff4 <HAL_MspInit+0xd4>)
 8003fa0:	f043 0301 	orr.w	r3, r3, #1
 8003fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8003fa6:	4b13      	ldr	r3, [pc, #76]	; (8003ff4 <HAL_MspInit+0xd4>)
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	607b      	str	r3, [r7, #4]
 8003fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	603b      	str	r3, [r7, #0]
 8003fb6:	4b0f      	ldr	r3, [pc, #60]	; (8003ff4 <HAL_MspInit+0xd4>)
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fba:	4a0e      	ldr	r2, [pc, #56]	; (8003ff4 <HAL_MspInit+0xd4>)
 8003fbc:	f043 0302 	orr.w	r3, r3, #2
 8003fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8003fc2:	4b0c      	ldr	r3, [pc, #48]	; (8003ff4 <HAL_MspInit+0xd4>)
 8003fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	603b      	str	r3, [r7, #0]
 8003fcc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003fce:	2200      	movs	r2, #0
 8003fd0:	210f      	movs	r1, #15
 8003fd2:	f06f 0001 	mvn.w	r0, #1
 8003fd6:	f001 fa7d 	bl	80054d4 <HAL_NVIC_SetPriority>

  HAL_PWM_Timer3_MspInit();
 8003fda:	f000 f88b 	bl	80040f4 <HAL_PWM_Timer3_MspInit>
  HAL_Encoder_Timer1_MspInit();
 8003fde:	f000 f80b 	bl	8003ff8 <HAL_Encoder_Timer1_MspInit>
  HAL_Encoder_Timer2_MspInit();
 8003fe2:	f000 f849 	bl	8004078 <HAL_Encoder_Timer2_MspInit>
  HAL_adcir_MspInit();
 8003fe6:	f000 f8e3 	bl	80041b0 <HAL_adcir_MspInit>
}
 8003fea:	bf00      	nop
 8003fec:	3718      	adds	r7, #24
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	40023800 	.word	0x40023800

08003ff8 <HAL_Encoder_Timer1_MspInit>:
PWM1/1	-->	PA8		-- Encodeur Voie A
PWM1/2	--> PA9		-- Encodeur Voie B
EXTI1	--> PB10		-- Index encodeur
******************************************************************/
void HAL_Encoder_Timer1_MspInit(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __TIM1_CLK_ENABLE();
 8003ffe:	2300      	movs	r3, #0
 8004000:	603b      	str	r3, [r7, #0]
 8004002:	4b1a      	ldr	r3, [pc, #104]	; (800406c <HAL_Encoder_Timer1_MspInit+0x74>)
 8004004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004006:	4a19      	ldr	r2, [pc, #100]	; (800406c <HAL_Encoder_Timer1_MspInit+0x74>)
 8004008:	f043 0301 	orr.w	r3, r3, #1
 800400c:	6453      	str	r3, [r2, #68]	; 0x44
 800400e:	4b17      	ldr	r3, [pc, #92]	; (800406c <HAL_Encoder_Timer1_MspInit+0x74>)
 8004010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	603b      	str	r3, [r7, #0]
 8004018:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 800401a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800401e:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP; // hal_gpio.h
 8004020:	2302      	movs	r3, #2
 8004022:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004024:	2301      	movs	r3, #1
 8004026:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8004028:	2301      	movs	r3, #1
 800402a:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF1_TIM1 ; // hal_gpio_ex.h
 800402c:	2301      	movs	r3, #1
 800402e:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004030:	1d3b      	adds	r3, r7, #4
 8004032:	4619      	mov	r1, r3
 8004034:	480e      	ldr	r0, [pc, #56]	; (8004070 <HAL_Encoder_Timer1_MspInit+0x78>)
 8004036:	f001 fe87 	bl	8005d48 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800403a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800403e:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004040:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004044:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004046:	2300      	movs	r3, #0
 8004048:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800404a:	1d3b      	adds	r3, r7, #4
 800404c:	4619      	mov	r1, r3
 800404e:	4809      	ldr	r0, [pc, #36]	; (8004074 <HAL_Encoder_Timer1_MspInit+0x7c>)
 8004050:	f001 fe7a 	bl	8005d48 <HAL_GPIO_Init>

	  /* Enable and set EXTI Line0 Interrupt to the lowest priority */
	  HAL_NVIC_SetPriority(EXTI15_10_IRQn, EXTI15_10_IRQ_PRIO, 0);
 8004054:	2200      	movs	r2, #0
 8004056:	2107      	movs	r1, #7
 8004058:	2028      	movs	r0, #40	; 0x28
 800405a:	f001 fa3b 	bl	80054d4 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800405e:	2028      	movs	r0, #40	; 0x28
 8004060:	f001 fa54 	bl	800550c <HAL_NVIC_EnableIRQ>
}
 8004064:	bf00      	nop
 8004066:	3718      	adds	r7, #24
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	40023800 	.word	0x40023800
 8004070:	40020000 	.word	0x40020000
 8004074:	40020400 	.word	0x40020400

08004078 <HAL_Encoder_Timer2_MspInit>:
PWM2/1	-->	PA0		-- Encodeur Voie A
PWM2/2	--> PA1		-- Encodeur Voie B
EXTI 	--> PC0		-- Index Moteur
******************************************************************/
void HAL_Encoder_Timer2_MspInit(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b086      	sub	sp, #24
 800407c:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __TIM2_CLK_ENABLE();
 800407e:	2300      	movs	r3, #0
 8004080:	603b      	str	r3, [r7, #0]
 8004082:	4b19      	ldr	r3, [pc, #100]	; (80040e8 <HAL_Encoder_Timer2_MspInit+0x70>)
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	4a18      	ldr	r2, [pc, #96]	; (80040e8 <HAL_Encoder_Timer2_MspInit+0x70>)
 8004088:	f043 0301 	orr.w	r3, r3, #1
 800408c:	6413      	str	r3, [r2, #64]	; 0x40
 800408e:	4b16      	ldr	r3, [pc, #88]	; (80040e8 <HAL_Encoder_Timer2_MspInit+0x70>)
 8004090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	603b      	str	r3, [r7, #0]
 8004098:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800409a:	2303      	movs	r3, #3
 800409c:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP; // hal_gpio.h
 800409e:	2302      	movs	r3, #2
 80040a0:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040a2:	2301      	movs	r3, #1
 80040a4:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80040a6:	2301      	movs	r3, #1
 80040a8:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF1_TIM2 ; // hal_gpio_ex.h
 80040aa:	2301      	movs	r3, #1
 80040ac:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040ae:	1d3b      	adds	r3, r7, #4
 80040b0:	4619      	mov	r1, r3
 80040b2:	480e      	ldr	r0, [pc, #56]	; (80040ec <HAL_Encoder_Timer2_MspInit+0x74>)
 80040b4:	f001 fe48 	bl	8005d48 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80040b8:	2301      	movs	r3, #1
 80040ba:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80040bc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80040c0:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c2:	2300      	movs	r3, #0
 80040c4:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040c6:	1d3b      	adds	r3, r7, #4
 80040c8:	4619      	mov	r1, r3
 80040ca:	4809      	ldr	r0, [pc, #36]	; (80040f0 <HAL_Encoder_Timer2_MspInit+0x78>)
 80040cc:	f001 fe3c 	bl	8005d48 <HAL_GPIO_Init>

	  /* Enable and set EXTI Line0 Interrupt to the lowest priority */
	  HAL_NVIC_SetPriority(EXTI0_IRQn, EXTI0_IRQ_PRIO, 0);
 80040d0:	2200      	movs	r2, #0
 80040d2:	2106      	movs	r1, #6
 80040d4:	2006      	movs	r0, #6
 80040d6:	f001 f9fd 	bl	80054d4 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80040da:	2006      	movs	r0, #6
 80040dc:	f001 fa16 	bl	800550c <HAL_NVIC_EnableIRQ>
}
 80040e0:	bf00      	nop
 80040e2:	3718      	adds	r7, #24
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	40023800 	.word	0x40023800
 80040ec:	40020000 	.word	0x40020000
 80040f0:	40020800 	.word	0x40020800

080040f4 <HAL_PWM_Timer3_MspInit>:
PA6 --> PWM3/1
PC7 --> PWM3/2
PB3 --> ENABLE MOTEUR (actif état Bas)
******************************************************************/
void HAL_PWM_Timer3_MspInit(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __TIM3_CLK_ENABLE();
 80040fa:	2300      	movs	r3, #0
 80040fc:	603b      	str	r3, [r7, #0]
 80040fe:	4b28      	ldr	r3, [pc, #160]	; (80041a0 <HAL_PWM_Timer3_MspInit+0xac>)
 8004100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004102:	4a27      	ldr	r2, [pc, #156]	; (80041a0 <HAL_PWM_Timer3_MspInit+0xac>)
 8004104:	f043 0302 	orr.w	r3, r3, #2
 8004108:	6413      	str	r3, [r2, #64]	; 0x40
 800410a:	4b25      	ldr	r3, [pc, #148]	; (80041a0 <HAL_PWM_Timer3_MspInit+0xac>)
 800410c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	603b      	str	r3, [r7, #0]
 8004114:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004116:	2340      	movs	r3, #64	; 0x40
 8004118:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800411a:	2302      	movs	r3, #2
 800411c:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800411e:	2301      	movs	r3, #1
 8004120:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8004122:	2301      	movs	r3, #1
 8004124:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF2_TIM3 ; // hal_gpio_ex.h
 8004126:	2302      	movs	r3, #2
 8004128:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800412a:	1d3b      	adds	r3, r7, #4
 800412c:	4619      	mov	r1, r3
 800412e:	481d      	ldr	r0, [pc, #116]	; (80041a4 <HAL_PWM_Timer3_MspInit+0xb0>)
 8004130:	f001 fe0a 	bl	8005d48 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004134:	2380      	movs	r3, #128	; 0x80
 8004136:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004138:	2302      	movs	r3, #2
 800413a:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800413c:	2301      	movs	r3, #1
 800413e:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8004140:	2301      	movs	r3, #1
 8004142:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF2_TIM3 ; // hal_gpio_ex.h
 8004144:	2302      	movs	r3, #2
 8004146:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004148:	1d3b      	adds	r3, r7, #4
 800414a:	4619      	mov	r1, r3
 800414c:	4816      	ldr	r0, [pc, #88]	; (80041a8 <HAL_PWM_Timer3_MspInit+0xb4>)
 800414e:	f001 fdfb 	bl	8005d48 <HAL_GPIO_Init>

	  // ENABLE MOTEUR : SORTIE LOGIQUE PB3
	  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004152:	2380      	movs	r3, #128	; 0x80
 8004154:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004156:	2300      	movs	r3, #0
 8004158:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800415a:	2300      	movs	r3, #0
 800415c:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800415e:	1d3b      	adds	r3, r7, #4
 8004160:	4619      	mov	r1, r3
 8004162:	4810      	ldr	r0, [pc, #64]	; (80041a4 <HAL_PWM_Timer3_MspInit+0xb0>)
 8004164:	f001 fdf0 	bl	8005d48 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8004168:	2201      	movs	r2, #1
 800416a:	2180      	movs	r1, #128	; 0x80
 800416c:	480d      	ldr	r0, [pc, #52]	; (80041a4 <HAL_PWM_Timer3_MspInit+0xb0>)
 800416e:	f001 ff6f 	bl	8006050 <HAL_GPIO_WritePin>

	  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004172:	2308      	movs	r3, #8
 8004174:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004176:	2301      	movs	r3, #1
 8004178:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800417a:	2301      	movs	r3, #1
 800417c:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800417e:	2302      	movs	r3, #2
 8004180:	613b      	str	r3, [r7, #16]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004182:	1d3b      	adds	r3, r7, #4
 8004184:	4619      	mov	r1, r3
 8004186:	4809      	ldr	r0, [pc, #36]	; (80041ac <HAL_PWM_Timer3_MspInit+0xb8>)
 8004188:	f001 fdde 	bl	8005d48 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 800418c:	2201      	movs	r2, #1
 800418e:	2108      	movs	r1, #8
 8004190:	4806      	ldr	r0, [pc, #24]	; (80041ac <HAL_PWM_Timer3_MspInit+0xb8>)
 8004192:	f001 ff5d 	bl	8006050 <HAL_GPIO_WritePin>




}
 8004196:	bf00      	nop
 8004198:	3718      	adds	r7, #24
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	40023800 	.word	0x40023800
 80041a4:	40020000 	.word	0x40020000
 80041a8:	40020800 	.word	0x40020800
 80041ac:	40020400 	.word	0x40020400

080041b0 <HAL_adcir_MspInit>:
ADC1_4	--> PA4
ADC1_8	--> PB0
http://stm32f4-discovery.com/2014/04/library-06-ad-converter-on-stm32f4xx/
******************************************************************/
void HAL_adcir_MspInit(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;
	  /* Peripheral clock enable */
	  __ADC1_CLK_ENABLE();
 80041b6:	2300      	movs	r3, #0
 80041b8:	603b      	str	r3, [r7, #0]
 80041ba:	4b13      	ldr	r3, [pc, #76]	; (8004208 <HAL_adcir_MspInit+0x58>)
 80041bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041be:	4a12      	ldr	r2, [pc, #72]	; (8004208 <HAL_adcir_MspInit+0x58>)
 80041c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041c4:	6453      	str	r3, [r2, #68]	; 0x44
 80041c6:	4b10      	ldr	r3, [pc, #64]	; (8004208 <HAL_adcir_MspInit+0x58>)
 80041c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ce:	603b      	str	r3, [r7, #0]
 80041d0:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_4 ;
 80041d2:	2310      	movs	r3, #16
 80041d4:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80041d6:	2303      	movs	r3, #3
 80041d8:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041da:	2300      	movs	r3, #0
 80041dc:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041de:	1d3b      	adds	r3, r7, #4
 80041e0:	4619      	mov	r1, r3
 80041e2:	480a      	ldr	r0, [pc, #40]	; (800420c <HAL_adcir_MspInit+0x5c>)
 80041e4:	f001 fdb0 	bl	8005d48 <HAL_GPIO_Init>


	  GPIO_InitStruct.Pin = GPIO_PIN_0 ;
 80041e8:	2301      	movs	r3, #1
 80041ea:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80041ec:	2303      	movs	r3, #3
 80041ee:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041f0:	2300      	movs	r3, #0
 80041f2:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041f4:	1d3b      	adds	r3, r7, #4
 80041f6:	4619      	mov	r1, r3
 80041f8:	4805      	ldr	r0, [pc, #20]	; (8004210 <HAL_adcir_MspInit+0x60>)
 80041fa:	f001 fda5 	bl	8005d48 <HAL_GPIO_Init>

}
 80041fe:	bf00      	nop
 8004200:	3718      	adds	r7, #24
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	40023800 	.word	0x40023800
 800420c:	40020000 	.word	0x40020000
 8004210:	40020400 	.word	0x40020400

08004214 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
******************************************************************/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b08a      	sub	sp, #40	; 0x28
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800421c:	f107 0314 	add.w	r3, r7, #20
 8004220:	2200      	movs	r2, #0
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	605a      	str	r2, [r3, #4]
 8004226:	609a      	str	r2, [r3, #8]
 8004228:	60da      	str	r2, [r3, #12]
 800422a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a21      	ldr	r2, [pc, #132]	; (80042b8 <HAL_I2C_MspInit+0xa4>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d13c      	bne.n	80042b0 <HAL_I2C_MspInit+0x9c>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004236:	2300      	movs	r3, #0
 8004238:	613b      	str	r3, [r7, #16]
 800423a:	4b20      	ldr	r3, [pc, #128]	; (80042bc <HAL_I2C_MspInit+0xa8>)
 800423c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423e:	4a1f      	ldr	r2, [pc, #124]	; (80042bc <HAL_I2C_MspInit+0xa8>)
 8004240:	f043 0302 	orr.w	r3, r3, #2
 8004244:	6313      	str	r3, [r2, #48]	; 0x30
 8004246:	4b1d      	ldr	r3, [pc, #116]	; (80042bc <HAL_I2C_MspInit+0xa8>)
 8004248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	613b      	str	r3, [r7, #16]
 8004250:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004252:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004258:	2312      	movs	r3, #18
 800425a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800425c:	2300      	movs	r3, #0
 800425e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004260:	2303      	movs	r3, #3
 8004262:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004264:	2304      	movs	r3, #4
 8004266:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004268:	f107 0314 	add.w	r3, r7, #20
 800426c:	4619      	mov	r1, r3
 800426e:	4814      	ldr	r0, [pc, #80]	; (80042c0 <HAL_I2C_MspInit+0xac>)
 8004270:	f001 fd6a 	bl	8005d48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004274:	2300      	movs	r3, #0
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	4b10      	ldr	r3, [pc, #64]	; (80042bc <HAL_I2C_MspInit+0xa8>)
 800427a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427c:	4a0f      	ldr	r2, [pc, #60]	; (80042bc <HAL_I2C_MspInit+0xa8>)
 800427e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004282:	6413      	str	r3, [r2, #64]	; 0x40
 8004284:	4b0d      	ldr	r3, [pc, #52]	; (80042bc <HAL_I2C_MspInit+0xa8>)
 8004286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800428c:	60fb      	str	r3, [r7, #12]
 800428e:	68fb      	ldr	r3, [r7, #12]

	  HAL_NVIC_SetPriority(I2C1_ER_IRQn, I2C1_ER_IRQ_PRIO, 0);
 8004290:	2200      	movs	r2, #0
 8004292:	2102      	movs	r1, #2
 8004294:	2020      	movs	r0, #32
 8004296:	f001 f91d 	bl	80054d4 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800429a:	2020      	movs	r0, #32
 800429c:	f001 f936 	bl	800550c <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_SetPriority(I2C1_EV_IRQn, I2C1_EV_IRQ_PRIO, 0);
 80042a0:	2200      	movs	r2, #0
 80042a2:	210b      	movs	r1, #11
 80042a4:	201f      	movs	r0, #31
 80042a6:	f001 f915 	bl	80054d4 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80042aa:	201f      	movs	r0, #31
 80042ac:	f001 f92e 	bl	800550c <HAL_NVIC_EnableIRQ>



  }

}
 80042b0:	bf00      	nop
 80042b2:	3728      	adds	r7, #40	; 0x28
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	40005400 	.word	0x40005400
 80042bc:	40023800 	.word	0x40023800
 80042c0:	40020400 	.word	0x40020400

080042c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
******************************************************************/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b08c      	sub	sp, #48	; 0x30
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042cc:	f107 031c 	add.w	r3, r7, #28
 80042d0:	2200      	movs	r2, #0
 80042d2:	601a      	str	r2, [r3, #0]
 80042d4:	605a      	str	r2, [r3, #4]
 80042d6:	609a      	str	r2, [r3, #8]
 80042d8:	60da      	str	r2, [r3, #12]
 80042da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4aa2      	ldr	r2, [pc, #648]	; (800456c <HAL_UART_MspInit+0x2a8>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	f040 80a5 	bne.w	8004432 <HAL_UART_MspInit+0x16e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80042e8:	2300      	movs	r3, #0
 80042ea:	61bb      	str	r3, [r7, #24]
 80042ec:	4ba0      	ldr	r3, [pc, #640]	; (8004570 <HAL_UART_MspInit+0x2ac>)
 80042ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f0:	4a9f      	ldr	r2, [pc, #636]	; (8004570 <HAL_UART_MspInit+0x2ac>)
 80042f2:	f043 0310 	orr.w	r3, r3, #16
 80042f6:	6453      	str	r3, [r2, #68]	; 0x44
 80042f8:	4b9d      	ldr	r3, [pc, #628]	; (8004570 <HAL_UART_MspInit+0x2ac>)
 80042fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042fc:	f003 0310 	and.w	r3, r3, #16
 8004300:	61bb      	str	r3, [r7, #24]
 8004302:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004304:	2300      	movs	r3, #0
 8004306:	617b      	str	r3, [r7, #20]
 8004308:	4b99      	ldr	r3, [pc, #612]	; (8004570 <HAL_UART_MspInit+0x2ac>)
 800430a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430c:	4a98      	ldr	r2, [pc, #608]	; (8004570 <HAL_UART_MspInit+0x2ac>)
 800430e:	f043 0301 	orr.w	r3, r3, #1
 8004312:	6313      	str	r3, [r2, #48]	; 0x30
 8004314:	4b96      	ldr	r3, [pc, #600]	; (8004570 <HAL_UART_MspInit+0x2ac>)
 8004316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	617b      	str	r3, [r7, #20]
 800431e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004320:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004324:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004326:	2302      	movs	r3, #2
 8004328:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800432a:	2300      	movs	r3, #0
 800432c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800432e:	2303      	movs	r3, #3
 8004330:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004332:	2307      	movs	r3, #7
 8004334:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004336:	f107 031c 	add.w	r3, r7, #28
 800433a:	4619      	mov	r1, r3
 800433c:	488d      	ldr	r0, [pc, #564]	; (8004574 <HAL_UART_MspInit+0x2b0>)
 800433e:	f001 fd03 	bl	8005d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004342:	2340      	movs	r3, #64	; 0x40
 8004344:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004346:	2302      	movs	r3, #2
 8004348:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800434a:	2300      	movs	r3, #0
 800434c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800434e:	2303      	movs	r3, #3
 8004350:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004352:	2307      	movs	r3, #7
 8004354:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004356:	f107 031c 	add.w	r3, r7, #28
 800435a:	4619      	mov	r1, r3
 800435c:	4886      	ldr	r0, [pc, #536]	; (8004578 <HAL_UART_MspInit+0x2b4>)
 800435e:	f001 fcf3 	bl	8005d48 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8004362:	4b86      	ldr	r3, [pc, #536]	; (800457c <HAL_UART_MspInit+0x2b8>)
 8004364:	4a86      	ldr	r2, [pc, #536]	; (8004580 <HAL_UART_MspInit+0x2bc>)
 8004366:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8004368:	4b84      	ldr	r3, [pc, #528]	; (800457c <HAL_UART_MspInit+0x2b8>)
 800436a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800436e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004370:	4b82      	ldr	r3, [pc, #520]	; (800457c <HAL_UART_MspInit+0x2b8>)
 8004372:	2200      	movs	r2, #0
 8004374:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004376:	4b81      	ldr	r3, [pc, #516]	; (800457c <HAL_UART_MspInit+0x2b8>)
 8004378:	2200      	movs	r2, #0
 800437a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800437c:	4b7f      	ldr	r3, [pc, #508]	; (800457c <HAL_UART_MspInit+0x2b8>)
 800437e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004382:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004384:	4b7d      	ldr	r3, [pc, #500]	; (800457c <HAL_UART_MspInit+0x2b8>)
 8004386:	2200      	movs	r2, #0
 8004388:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800438a:	4b7c      	ldr	r3, [pc, #496]	; (800457c <HAL_UART_MspInit+0x2b8>)
 800438c:	2200      	movs	r2, #0
 800438e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8004390:	4b7a      	ldr	r3, [pc, #488]	; (800457c <HAL_UART_MspInit+0x2b8>)
 8004392:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004396:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004398:	4b78      	ldr	r3, [pc, #480]	; (800457c <HAL_UART_MspInit+0x2b8>)
 800439a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800439e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80043a0:	4b76      	ldr	r3, [pc, #472]	; (800457c <HAL_UART_MspInit+0x2b8>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80043a6:	4875      	ldr	r0, [pc, #468]	; (800457c <HAL_UART_MspInit+0x2b8>)
 80043a8:	f001 f8be 	bl	8005528 <HAL_DMA_Init>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 80043b2:	f7ff f909 	bl	80035c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a70      	ldr	r2, [pc, #448]	; (800457c <HAL_UART_MspInit+0x2b8>)
 80043ba:	639a      	str	r2, [r3, #56]	; 0x38
 80043bc:	4a6f      	ldr	r2, [pc, #444]	; (800457c <HAL_UART_MspInit+0x2b8>)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80043c2:	4b70      	ldr	r3, [pc, #448]	; (8004584 <HAL_UART_MspInit+0x2c0>)
 80043c4:	4a70      	ldr	r2, [pc, #448]	; (8004588 <HAL_UART_MspInit+0x2c4>)
 80043c6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80043c8:	4b6e      	ldr	r3, [pc, #440]	; (8004584 <HAL_UART_MspInit+0x2c0>)
 80043ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80043ce:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80043d0:	4b6c      	ldr	r3, [pc, #432]	; (8004584 <HAL_UART_MspInit+0x2c0>)
 80043d2:	2240      	movs	r2, #64	; 0x40
 80043d4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043d6:	4b6b      	ldr	r3, [pc, #428]	; (8004584 <HAL_UART_MspInit+0x2c0>)
 80043d8:	2200      	movs	r2, #0
 80043da:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80043dc:	4b69      	ldr	r3, [pc, #420]	; (8004584 <HAL_UART_MspInit+0x2c0>)
 80043de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043e2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043e4:	4b67      	ldr	r3, [pc, #412]	; (8004584 <HAL_UART_MspInit+0x2c0>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043ea:	4b66      	ldr	r3, [pc, #408]	; (8004584 <HAL_UART_MspInit+0x2c0>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80043f0:	4b64      	ldr	r3, [pc, #400]	; (8004584 <HAL_UART_MspInit+0x2c0>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80043f6:	4b63      	ldr	r3, [pc, #396]	; (8004584 <HAL_UART_MspInit+0x2c0>)
 80043f8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80043fc:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80043fe:	4b61      	ldr	r3, [pc, #388]	; (8004584 <HAL_UART_MspInit+0x2c0>)
 8004400:	2200      	movs	r2, #0
 8004402:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004404:	485f      	ldr	r0, [pc, #380]	; (8004584 <HAL_UART_MspInit+0x2c0>)
 8004406:	f001 f88f 	bl	8005528 <HAL_DMA_Init>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d001      	beq.n	8004414 <HAL_UART_MspInit+0x150>
    {
      Error_Handler();
 8004410:	f7ff f8da 	bl	80035c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a5b      	ldr	r2, [pc, #364]	; (8004584 <HAL_UART_MspInit+0x2c0>)
 8004418:	635a      	str	r2, [r3, #52]	; 0x34
 800441a:	4a5a      	ldr	r2, [pc, #360]	; (8004584 <HAL_UART_MspInit+0x2c0>)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004420:	2200      	movs	r2, #0
 8004422:	2105      	movs	r1, #5
 8004424:	2025      	movs	r0, #37	; 0x25
 8004426:	f001 f855 	bl	80054d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800442a:	2025      	movs	r0, #37	; 0x25
 800442c:	f001 f86e 	bl	800550c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004430:	e098      	b.n	8004564 <HAL_UART_MspInit+0x2a0>
  else if(huart->Instance==USART2)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a55      	ldr	r2, [pc, #340]	; (800458c <HAL_UART_MspInit+0x2c8>)
 8004438:	4293      	cmp	r3, r2
 800443a:	f040 8093 	bne.w	8004564 <HAL_UART_MspInit+0x2a0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800443e:	2300      	movs	r3, #0
 8004440:	613b      	str	r3, [r7, #16]
 8004442:	4b4b      	ldr	r3, [pc, #300]	; (8004570 <HAL_UART_MspInit+0x2ac>)
 8004444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004446:	4a4a      	ldr	r2, [pc, #296]	; (8004570 <HAL_UART_MspInit+0x2ac>)
 8004448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800444c:	6413      	str	r3, [r2, #64]	; 0x40
 800444e:	4b48      	ldr	r3, [pc, #288]	; (8004570 <HAL_UART_MspInit+0x2ac>)
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004456:	613b      	str	r3, [r7, #16]
 8004458:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800445a:	2300      	movs	r3, #0
 800445c:	60fb      	str	r3, [r7, #12]
 800445e:	4b44      	ldr	r3, [pc, #272]	; (8004570 <HAL_UART_MspInit+0x2ac>)
 8004460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004462:	4a43      	ldr	r2, [pc, #268]	; (8004570 <HAL_UART_MspInit+0x2ac>)
 8004464:	f043 0301 	orr.w	r3, r3, #1
 8004468:	6313      	str	r3, [r2, #48]	; 0x30
 800446a:	4b41      	ldr	r3, [pc, #260]	; (8004570 <HAL_UART_MspInit+0x2ac>)
 800446c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	60fb      	str	r3, [r7, #12]
 8004474:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004476:	230c      	movs	r3, #12
 8004478:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800447a:	2302      	movs	r3, #2
 800447c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800447e:	2300      	movs	r3, #0
 8004480:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004482:	2303      	movs	r3, #3
 8004484:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004486:	2307      	movs	r3, #7
 8004488:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800448a:	f107 031c 	add.w	r3, r7, #28
 800448e:	4619      	mov	r1, r3
 8004490:	4838      	ldr	r0, [pc, #224]	; (8004574 <HAL_UART_MspInit+0x2b0>)
 8004492:	f001 fc59 	bl	8005d48 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004496:	4b3e      	ldr	r3, [pc, #248]	; (8004590 <HAL_UART_MspInit+0x2cc>)
 8004498:	4a3e      	ldr	r2, [pc, #248]	; (8004594 <HAL_UART_MspInit+0x2d0>)
 800449a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800449c:	4b3c      	ldr	r3, [pc, #240]	; (8004590 <HAL_UART_MspInit+0x2cc>)
 800449e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80044a2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80044a4:	4b3a      	ldr	r3, [pc, #232]	; (8004590 <HAL_UART_MspInit+0x2cc>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044aa:	4b39      	ldr	r3, [pc, #228]	; (8004590 <HAL_UART_MspInit+0x2cc>)
 80044ac:	2200      	movs	r2, #0
 80044ae:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80044b0:	4b37      	ldr	r3, [pc, #220]	; (8004590 <HAL_UART_MspInit+0x2cc>)
 80044b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044b6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80044b8:	4b35      	ldr	r3, [pc, #212]	; (8004590 <HAL_UART_MspInit+0x2cc>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80044be:	4b34      	ldr	r3, [pc, #208]	; (8004590 <HAL_UART_MspInit+0x2cc>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80044c4:	4b32      	ldr	r3, [pc, #200]	; (8004590 <HAL_UART_MspInit+0x2cc>)
 80044c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044ca:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80044cc:	4b30      	ldr	r3, [pc, #192]	; (8004590 <HAL_UART_MspInit+0x2cc>)
 80044ce:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80044d2:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80044d4:	4b2e      	ldr	r3, [pc, #184]	; (8004590 <HAL_UART_MspInit+0x2cc>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80044da:	482d      	ldr	r0, [pc, #180]	; (8004590 <HAL_UART_MspInit+0x2cc>)
 80044dc:	f001 f824 	bl	8005528 <HAL_DMA_Init>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d001      	beq.n	80044ea <HAL_UART_MspInit+0x226>
      Error_Handler();
 80044e6:	f7ff f86f 	bl	80035c8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a28      	ldr	r2, [pc, #160]	; (8004590 <HAL_UART_MspInit+0x2cc>)
 80044ee:	639a      	str	r2, [r3, #56]	; 0x38
 80044f0:	4a27      	ldr	r2, [pc, #156]	; (8004590 <HAL_UART_MspInit+0x2cc>)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80044f6:	4b28      	ldr	r3, [pc, #160]	; (8004598 <HAL_UART_MspInit+0x2d4>)
 80044f8:	4a28      	ldr	r2, [pc, #160]	; (800459c <HAL_UART_MspInit+0x2d8>)
 80044fa:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80044fc:	4b26      	ldr	r3, [pc, #152]	; (8004598 <HAL_UART_MspInit+0x2d4>)
 80044fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004502:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004504:	4b24      	ldr	r3, [pc, #144]	; (8004598 <HAL_UART_MspInit+0x2d4>)
 8004506:	2240      	movs	r2, #64	; 0x40
 8004508:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800450a:	4b23      	ldr	r3, [pc, #140]	; (8004598 <HAL_UART_MspInit+0x2d4>)
 800450c:	2200      	movs	r2, #0
 800450e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004510:	4b21      	ldr	r3, [pc, #132]	; (8004598 <HAL_UART_MspInit+0x2d4>)
 8004512:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004516:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004518:	4b1f      	ldr	r3, [pc, #124]	; (8004598 <HAL_UART_MspInit+0x2d4>)
 800451a:	2200      	movs	r2, #0
 800451c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800451e:	4b1e      	ldr	r3, [pc, #120]	; (8004598 <HAL_UART_MspInit+0x2d4>)
 8004520:	2200      	movs	r2, #0
 8004522:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004524:	4b1c      	ldr	r3, [pc, #112]	; (8004598 <HAL_UART_MspInit+0x2d4>)
 8004526:	2200      	movs	r2, #0
 8004528:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800452a:	4b1b      	ldr	r3, [pc, #108]	; (8004598 <HAL_UART_MspInit+0x2d4>)
 800452c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004530:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004532:	4b19      	ldr	r3, [pc, #100]	; (8004598 <HAL_UART_MspInit+0x2d4>)
 8004534:	2200      	movs	r2, #0
 8004536:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004538:	4817      	ldr	r0, [pc, #92]	; (8004598 <HAL_UART_MspInit+0x2d4>)
 800453a:	f000 fff5 	bl	8005528 <HAL_DMA_Init>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d001      	beq.n	8004548 <HAL_UART_MspInit+0x284>
      Error_Handler();
 8004544:	f7ff f840 	bl	80035c8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a13      	ldr	r2, [pc, #76]	; (8004598 <HAL_UART_MspInit+0x2d4>)
 800454c:	635a      	str	r2, [r3, #52]	; 0x34
 800454e:	4a12      	ldr	r2, [pc, #72]	; (8004598 <HAL_UART_MspInit+0x2d4>)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8004554:	2200      	movs	r2, #0
 8004556:	2105      	movs	r1, #5
 8004558:	2026      	movs	r0, #38	; 0x26
 800455a:	f000 ffbb 	bl	80054d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800455e:	2026      	movs	r0, #38	; 0x26
 8004560:	f000 ffd4 	bl	800550c <HAL_NVIC_EnableIRQ>
}
 8004564:	bf00      	nop
 8004566:	3730      	adds	r7, #48	; 0x30
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	40011000 	.word	0x40011000
 8004570:	40023800 	.word	0x40023800
 8004574:	40020000 	.word	0x40020000
 8004578:	40020400 	.word	0x40020400
 800457c:	20004a60 	.word	0x20004a60
 8004580:	40026440 	.word	0x40026440
 8004584:	20004ac0 	.word	0x20004ac0
 8004588:	400264b8 	.word	0x400264b8
 800458c:	40004400 	.word	0x40004400
 8004590:	20004b20 	.word	0x20004b20
 8004594:	40026088 	.word	0x40026088
 8004598:	20004b80 	.word	0x20004b80
 800459c:	400260a0 	.word	0x400260a0

080045a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b08c      	sub	sp, #48	; 0x30
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80045a8:	2300      	movs	r3, #0
 80045aa:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80045ac:	2300      	movs	r3, #0
 80045ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80045b0:	2300      	movs	r3, #0
 80045b2:	60bb      	str	r3, [r7, #8]
 80045b4:	4b2f      	ldr	r3, [pc, #188]	; (8004674 <HAL_InitTick+0xd4>)
 80045b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b8:	4a2e      	ldr	r2, [pc, #184]	; (8004674 <HAL_InitTick+0xd4>)
 80045ba:	f043 0304 	orr.w	r3, r3, #4
 80045be:	6413      	str	r3, [r2, #64]	; 0x40
 80045c0:	4b2c      	ldr	r3, [pc, #176]	; (8004674 <HAL_InitTick+0xd4>)
 80045c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c4:	f003 0304 	and.w	r3, r3, #4
 80045c8:	60bb      	str	r3, [r7, #8]
 80045ca:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80045cc:	f107 020c 	add.w	r2, r7, #12
 80045d0:	f107 0310 	add.w	r3, r7, #16
 80045d4:	4611      	mov	r1, r2
 80045d6:	4618      	mov	r0, r3
 80045d8:	f004 fe4c 	bl	8009274 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80045dc:	f004 fe36 	bl	800924c <HAL_RCC_GetPCLK2Freq>
 80045e0:	4603      	mov	r3, r0
 80045e2:	005b      	lsls	r3, r3, #1
 80045e4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80045e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e8:	4a23      	ldr	r2, [pc, #140]	; (8004678 <HAL_InitTick+0xd8>)
 80045ea:	fba2 2303 	umull	r2, r3, r2, r3
 80045ee:	0c9b      	lsrs	r3, r3, #18
 80045f0:	3b01      	subs	r3, #1
 80045f2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim4.Instance = TIM4;
 80045f4:	4b21      	ldr	r3, [pc, #132]	; (800467c <HAL_InitTick+0xdc>)
 80045f6:	4a22      	ldr	r2, [pc, #136]	; (8004680 <HAL_InitTick+0xe0>)
 80045f8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80045fa:	4b20      	ldr	r3, [pc, #128]	; (800467c <HAL_InitTick+0xdc>)
 80045fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004600:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8004602:	4a1e      	ldr	r2, [pc, #120]	; (800467c <HAL_InitTick+0xdc>)
 8004604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004606:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8004608:	4b1c      	ldr	r3, [pc, #112]	; (800467c <HAL_InitTick+0xdc>)
 800460a:	2200      	movs	r2, #0
 800460c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800460e:	4b1b      	ldr	r3, [pc, #108]	; (800467c <HAL_InitTick+0xdc>)
 8004610:	2200      	movs	r2, #0
 8004612:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004614:	4b19      	ldr	r3, [pc, #100]	; (800467c <HAL_InitTick+0xdc>)
 8004616:	2200      	movs	r2, #0
 8004618:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800461a:	4818      	ldr	r0, [pc, #96]	; (800467c <HAL_InitTick+0xdc>)
 800461c:	f004 fe5c 	bl	80092d8 <HAL_TIM_Base_Init>
 8004620:	4603      	mov	r3, r0
 8004622:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8004626:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800462a:	2b00      	cmp	r3, #0
 800462c:	d11b      	bne.n	8004666 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800462e:	4813      	ldr	r0, [pc, #76]	; (800467c <HAL_InitTick+0xdc>)
 8004630:	f004 feac 	bl	800938c <HAL_TIM_Base_Start_IT>
 8004634:	4603      	mov	r3, r0
 8004636:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800463a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800463e:	2b00      	cmp	r3, #0
 8004640:	d111      	bne.n	8004666 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004642:	201e      	movs	r0, #30
 8004644:	f000 ff62 	bl	800550c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b0f      	cmp	r3, #15
 800464c:	d808      	bhi.n	8004660 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800464e:	2200      	movs	r2, #0
 8004650:	6879      	ldr	r1, [r7, #4]
 8004652:	201e      	movs	r0, #30
 8004654:	f000 ff3e 	bl	80054d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004658:	4a0a      	ldr	r2, [pc, #40]	; (8004684 <HAL_InitTick+0xe4>)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6013      	str	r3, [r2, #0]
 800465e:	e002      	b.n	8004666 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8004666:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800466a:	4618      	mov	r0, r3
 800466c:	3730      	adds	r7, #48	; 0x30
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	40023800 	.word	0x40023800
 8004678:	431bde83 	.word	0x431bde83
 800467c:	20004d34 	.word	0x20004d34
 8004680:	40000800 	.word	0x40000800
 8004684:	2000002c 	.word	0x2000002c

08004688 <NMI_Handler>:
extern TIM_HandleTypeDef htim4;
extern I2C_HandleTypeDef hi2c1;


void NMI_Handler(void)
{
 8004688:	b480      	push	{r7}
 800468a:	af00      	add	r7, sp, #0
  while (1)
 800468c:	e7fe      	b.n	800468c <NMI_Handler+0x4>

0800468e <HardFault_Handler>:
  {
  }
}

void HardFault_Handler(void)
{
 800468e:	b480      	push	{r7}
 8004690:	af00      	add	r7, sp, #0

  while (1)
 8004692:	e7fe      	b.n	8004692 <HardFault_Handler+0x4>

08004694 <MemManage_Handler>:
  {
  }
}

void MemManage_Handler(void)
{
 8004694:	b480      	push	{r7}
 8004696:	af00      	add	r7, sp, #0
  while (1)
 8004698:	e7fe      	b.n	8004698 <MemManage_Handler+0x4>

0800469a <BusFault_Handler>:
  }
}


void BusFault_Handler(void)
{
 800469a:	b480      	push	{r7}
 800469c:	af00      	add	r7, sp, #0
  while (1)
 800469e:	e7fe      	b.n	800469e <BusFault_Handler+0x4>

080046a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80046a0:	b480      	push	{r7}
 80046a2:	af00      	add	r7, sp, #0
  while (1)
 80046a4:	e7fe      	b.n	80046a4 <UsageFault_Handler+0x4>

080046a6 <DebugMon_Handler>:
  {
  }
}

void DebugMon_Handler(void)
{
 80046a6:	b480      	push	{r7}
 80046a8:	af00      	add	r7, sp, #0
}
 80046aa:	bf00      	nop
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <DMA1_Stream5_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/

void DMA1_Stream5_IRQHandler(void)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80046b8:	4802      	ldr	r0, [pc, #8]	; (80046c4 <DMA1_Stream5_IRQHandler+0x10>)
 80046ba:	f001 f8cd 	bl	8005858 <HAL_DMA_IRQHandler>
}
 80046be:	bf00      	nop
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	20004b20 	.word	0x20004b20

080046c8 <DMA1_Stream6_IRQHandler>:


void DMA1_Stream6_IRQHandler(void)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80046cc:	4802      	ldr	r0, [pc, #8]	; (80046d8 <DMA1_Stream6_IRQHandler+0x10>)
 80046ce:	f001 f8c3 	bl	8005858 <HAL_DMA_IRQHandler>
}
 80046d2:	bf00      	nop
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	20004b80 	.word	0x20004b80

080046dc <TIM4_IRQHandler>:
{
  HAL_TIM_IRQHandler(&htim1);
}*/

void TIM4_IRQHandler(void)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim4);
 80046e0:	4802      	ldr	r0, [pc, #8]	; (80046ec <TIM4_IRQHandler+0x10>)
 80046e2:	f005 f8a3 	bl	800982c <HAL_TIM_IRQHandler>
}
 80046e6:	bf00      	nop
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	20004d34 	.word	0x20004d34

080046f0 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart1);
 80046f4:	4802      	ldr	r0, [pc, #8]	; (8004700 <USART1_IRQHandler+0x10>)
 80046f6:	f005 ff7f 	bl	800a5f8 <HAL_UART_IRQHandler>
}
 80046fa:	bf00      	nop
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	200049d8 	.word	0x200049d8

08004704 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart2);
 8004708:	4802      	ldr	r0, [pc, #8]	; (8004714 <USART2_IRQHandler+0x10>)
 800470a:	f005 ff75 	bl	800a5f8 <HAL_UART_IRQHandler>
}
 800470e:	bf00      	nop
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	20004a1c 	.word	0x20004a1c

08004718 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800471c:	4802      	ldr	r0, [pc, #8]	; (8004728 <DMA2_Stream2_IRQHandler+0x10>)
 800471e:	f001 f89b 	bl	8005858 <HAL_DMA_IRQHandler>
}
 8004722:	bf00      	nop
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	20004a60 	.word	0x20004a60

0800472c <DMA2_Stream7_IRQHandler>:

void DMA2_Stream7_IRQHandler(void)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004730:	4802      	ldr	r0, [pc, #8]	; (800473c <DMA2_Stream7_IRQHandler+0x10>)
 8004732:	f001 f891 	bl	8005858 <HAL_DMA_IRQHandler>
}
 8004736:	bf00      	nop
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	20004ac0 	.word	0x20004ac0

08004740 <EXTI15_10_IRQHandler>:

//=======================================================
//		ENCODER INDEX LEFT
//=======================================================
void EXTI15_10_IRQHandler(void)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8004744:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004748:	f001 fc9c 	bl	8006084 <HAL_GPIO_EXTI_IRQHandler>
}
 800474c:	bf00      	nop
 800474e:	bd80      	pop	{r7, pc}

08004750 <EXTI0_IRQHandler>:
//=======================================================
//		ENCODER INDEX RIGHT
//=======================================================

void EXTI0_IRQHandler(void)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004754:	2001      	movs	r0, #1
 8004756:	f001 fc95 	bl	8006084 <HAL_GPIO_EXTI_IRQHandler>
}
 800475a:	bf00      	nop
 800475c:	bd80      	pop	{r7, pc}
	...

08004760 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	af00      	add	r7, sp, #0
	  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004764:	4802      	ldr	r0, [pc, #8]	; (8004770 <I2C1_EV_IRQHandler+0x10>)
 8004766:	f002 f90d 	bl	8006984 <HAL_I2C_EV_IRQHandler>
}
 800476a:	bf00      	nop
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	20004984 	.word	0x20004984

08004774 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	af00      	add	r7, sp, #0
	  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004778:	4802      	ldr	r0, [pc, #8]	; (8004784 <I2C1_ER_IRQHandler+0x10>)
 800477a:	f002 fa56 	bl	8006c2a <HAL_I2C_ER_IRQHandler>
}
 800477e:	bf00      	nop
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	20004984 	.word	0x20004984

08004788 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b086      	sub	sp, #24
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004790:	4a14      	ldr	r2, [pc, #80]	; (80047e4 <_sbrk+0x5c>)
 8004792:	4b15      	ldr	r3, [pc, #84]	; (80047e8 <_sbrk+0x60>)
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800479c:	4b13      	ldr	r3, [pc, #76]	; (80047ec <_sbrk+0x64>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d102      	bne.n	80047aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80047a4:	4b11      	ldr	r3, [pc, #68]	; (80047ec <_sbrk+0x64>)
 80047a6:	4a12      	ldr	r2, [pc, #72]	; (80047f0 <_sbrk+0x68>)
 80047a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80047aa:	4b10      	ldr	r3, [pc, #64]	; (80047ec <_sbrk+0x64>)
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4413      	add	r3, r2
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d207      	bcs.n	80047c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80047b8:	f015 ff78 	bl	801a6ac <__errno>
 80047bc:	4603      	mov	r3, r0
 80047be:	220c      	movs	r2, #12
 80047c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80047c2:	f04f 33ff 	mov.w	r3, #4294967295
 80047c6:	e009      	b.n	80047dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80047c8:	4b08      	ldr	r3, [pc, #32]	; (80047ec <_sbrk+0x64>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80047ce:	4b07      	ldr	r3, [pc, #28]	; (80047ec <_sbrk+0x64>)
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4413      	add	r3, r2
 80047d6:	4a05      	ldr	r2, [pc, #20]	; (80047ec <_sbrk+0x64>)
 80047d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80047da:	68fb      	ldr	r3, [r7, #12]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3718      	adds	r7, #24
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	20020000 	.word	0x20020000
 80047e8:	00000400 	.word	0x00000400
 80047ec:	20004d7c 	.word	0x20004d7c
 80047f0:	2000e878 	.word	0x2000e878

080047f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80047f4:	b480      	push	{r7}
 80047f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80047f8:	4b06      	ldr	r3, [pc, #24]	; (8004814 <SystemInit+0x20>)
 80047fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047fe:	4a05      	ldr	r2, [pc, #20]	; (8004814 <SystemInit+0x20>)
 8004800:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004804:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004808:	bf00      	nop
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	e000ed00 	.word	0xe000ed00

08004818 <SystemClock_Config>:


#include "main.h"

void SystemClock_Config(void)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b094      	sub	sp, #80	; 0x50
 800481c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800481e:	f107 0320 	add.w	r3, r7, #32
 8004822:	2230      	movs	r2, #48	; 0x30
 8004824:	2100      	movs	r1, #0
 8004826:	4618      	mov	r0, r3
 8004828:	f015 fe56 	bl	801a4d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800482c:	f107 030c 	add.w	r3, r7, #12
 8004830:	2200      	movs	r2, #0
 8004832:	601a      	str	r2, [r3, #0]
 8004834:	605a      	str	r2, [r3, #4]
 8004836:	609a      	str	r2, [r3, #8]
 8004838:	60da      	str	r2, [r3, #12]
 800483a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800483c:	2300      	movs	r3, #0
 800483e:	60bb      	str	r3, [r7, #8]
 8004840:	4b28      	ldr	r3, [pc, #160]	; (80048e4 <SystemClock_Config+0xcc>)
 8004842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004844:	4a27      	ldr	r2, [pc, #156]	; (80048e4 <SystemClock_Config+0xcc>)
 8004846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800484a:	6413      	str	r3, [r2, #64]	; 0x40
 800484c:	4b25      	ldr	r3, [pc, #148]	; (80048e4 <SystemClock_Config+0xcc>)
 800484e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004854:	60bb      	str	r3, [r7, #8]
 8004856:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004858:	2300      	movs	r3, #0
 800485a:	607b      	str	r3, [r7, #4]
 800485c:	4b22      	ldr	r3, [pc, #136]	; (80048e8 <SystemClock_Config+0xd0>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a21      	ldr	r2, [pc, #132]	; (80048e8 <SystemClock_Config+0xd0>)
 8004862:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004866:	6013      	str	r3, [r2, #0]
 8004868:	4b1f      	ldr	r3, [pc, #124]	; (80048e8 <SystemClock_Config+0xd0>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004870:	607b      	str	r3, [r7, #4]
 8004872:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004874:	2301      	movs	r3, #1
 8004876:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004878:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800487c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800487e:	2302      	movs	r3, #2
 8004880:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004882:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004886:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004888:	2308      	movs	r3, #8
 800488a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 800488c:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8004890:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8004892:	2306      	movs	r3, #6
 8004894:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004896:	2304      	movs	r3, #4
 8004898:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800489a:	f107 0320 	add.w	r3, r7, #32
 800489e:	4618      	mov	r0, r3
 80048a0:	f004 f850 	bl	8008944 <HAL_RCC_OscConfig>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80048aa:	f7fe fe8d 	bl	80035c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80048ae:	230f      	movs	r3, #15
 80048b0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80048b2:	2302      	movs	r3, #2
 80048b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80048b6:	2300      	movs	r3, #0
 80048b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80048ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80048be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80048c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80048c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80048c6:	f107 030c 	add.w	r3, r7, #12
 80048ca:	2102      	movs	r1, #2
 80048cc:	4618      	mov	r0, r3
 80048ce:	f004 fab1 	bl	8008e34 <HAL_RCC_ClockConfig>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d001      	beq.n	80048dc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80048d8:	f7fe fe76 	bl	80035c8 <Error_Handler>
  }
}
 80048dc:	bf00      	nop
 80048de:	3750      	adds	r7, #80	; 0x50
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	40023800 	.word	0x40023800
 80048e8:	40007000 	.word	0x40007000

080048ec <num2str>:
#include "util.h"

//=================================================================
void num2str(char *s, unsigned int number, unsigned int base, unsigned int size, int sp)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b089      	sub	sp, #36	; 0x24
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
 80048f8:	603b      	str	r3, [r7, #0]
        static char  hexChars[] = "0123456789ABCDEF";

        char *p=s;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	617b      	str	r3, [r7, #20]
        unsigned int i;
        char tmp;

        // get digits
        do {
                *s++=hexChars[number % base];
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	fbb3 f2f2 	udiv	r2, r3, r2
 8004906:	6879      	ldr	r1, [r7, #4]
 8004908:	fb01 f202 	mul.w	r2, r1, r2
 800490c:	1a9a      	subs	r2, r3, r2
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	1c59      	adds	r1, r3, #1
 8004912:	60f9      	str	r1, [r7, #12]
 8004914:	4936      	ldr	r1, [pc, #216]	; (80049f0 <num2str+0x104>)
 8004916:	5c8a      	ldrb	r2, [r1, r2]
 8004918:	701a      	strb	r2, [r3, #0]
        } while (number /= base);
 800491a:	68ba      	ldr	r2, [r7, #8]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004922:	60bb      	str	r3, [r7, #8]
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1e9      	bne.n	80048fe <num2str+0x12>
        *s='\0';
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	701a      	strb	r2, [r3, #0]

        // reverse string
        cnt=s-p;
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	613b      	str	r3, [r7, #16]
        for (i=0;i<cnt/2;i++) {
 8004938:	2300      	movs	r3, #0
 800493a:	61fb      	str	r3, [r7, #28]
 800493c:	e01a      	b.n	8004974 <num2str+0x88>
                tmp=p[i]; p[i] = p[cnt-i-1]; p[cnt-i-1]=tmp;
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	4413      	add	r3, r2
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	76fb      	strb	r3, [r7, #27]
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	3b01      	subs	r3, #1
 8004950:	697a      	ldr	r2, [r7, #20]
 8004952:	441a      	add	r2, r3
 8004954:	6979      	ldr	r1, [r7, #20]
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	440b      	add	r3, r1
 800495a:	7812      	ldrb	r2, [r2, #0]
 800495c:	701a      	strb	r2, [r3, #0]
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	3b01      	subs	r3, #1
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	4413      	add	r3, r2
 800496a:	7efa      	ldrb	r2, [r7, #27]
 800496c:	701a      	strb	r2, [r3, #0]
        for (i=0;i<cnt/2;i++) {
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	3301      	adds	r3, #1
 8004972:	61fb      	str	r3, [r7, #28]
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	085b      	lsrs	r3, r3, #1
 8004978:	69fa      	ldr	r2, [r7, #28]
 800497a:	429a      	cmp	r2, r3
 800497c:	d3df      	bcc.n	800493e <num2str+0x52>
        }

        // add extra space
        if (cnt<size) {
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	429a      	cmp	r2, r3
 8004984:	d22d      	bcs.n	80049e2 <num2str+0xf6>
                for (i=cnt;i==0;i--)
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	61fb      	str	r3, [r7, #28]
 800498a:	e00e      	b.n	80049aa <num2str+0xbe>
                		{p[i+size-cnt]=p[i];}
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	441a      	add	r2, r3
 8004992:	69f9      	ldr	r1, [r7, #28]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	4419      	add	r1, r3
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	1acb      	subs	r3, r1, r3
 800499c:	6979      	ldr	r1, [r7, #20]
 800499e:	440b      	add	r3, r1
 80049a0:	7812      	ldrb	r2, [r2, #0]
 80049a2:	701a      	strb	r2, [r3, #0]
                for (i=cnt;i==0;i--)
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	3b01      	subs	r3, #1
 80049a8:	61fb      	str	r3, [r7, #28]
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d0ed      	beq.n	800498c <num2str+0xa0>
                if (sp) tmp=' '; else tmp='0';
 80049b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d002      	beq.n	80049bc <num2str+0xd0>
 80049b6:	2320      	movs	r3, #32
 80049b8:	76fb      	strb	r3, [r7, #27]
 80049ba:	e001      	b.n	80049c0 <num2str+0xd4>
 80049bc:	2330      	movs	r3, #48	; 0x30
 80049be:	76fb      	strb	r3, [r7, #27]
                for (i=0;i<size-cnt;i++) p[i]=tmp;
 80049c0:	2300      	movs	r3, #0
 80049c2:	61fb      	str	r3, [r7, #28]
 80049c4:	e007      	b.n	80049d6 <num2str+0xea>
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	4413      	add	r3, r2
 80049cc:	7efa      	ldrb	r2, [r7, #27]
 80049ce:	701a      	strb	r2, [r3, #0]
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	3301      	adds	r3, #1
 80049d4:	61fb      	str	r3, [r7, #28]
 80049d6:	683a      	ldr	r2, [r7, #0]
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	69fa      	ldr	r2, [r7, #28]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d3f1      	bcc.n	80049c6 <num2str+0xda>
        }
}
 80049e2:	bf00      	nop
 80049e4:	3724      	adds	r7, #36	; 0x24
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	20000018 	.word	0x20000018

080049f4 <str2num>:

//=================================================================
unsigned int str2num(char *s, unsigned base)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b087      	sub	sp, #28
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
	unsigned int u=0, d;
 80049fe:	2300      	movs	r3, #0
 8004a00:	617b      	str	r3, [r7, #20]
	char ch=*s++;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	1c5a      	adds	r2, r3, #1
 8004a06:	607a      	str	r2, [r7, #4]
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	73fb      	strb	r3, [r7, #15]
	while (ch) {
 8004a0c:	e02e      	b.n	8004a6c <str2num+0x78>
		if ((ch>='0') && (ch<='9')) d=ch-'0';
 8004a0e:	7bfb      	ldrb	r3, [r7, #15]
 8004a10:	2b2f      	cmp	r3, #47	; 0x2f
 8004a12:	d906      	bls.n	8004a22 <str2num+0x2e>
 8004a14:	7bfb      	ldrb	r3, [r7, #15]
 8004a16:	2b39      	cmp	r3, #57	; 0x39
 8004a18:	d803      	bhi.n	8004a22 <str2num+0x2e>
 8004a1a:	7bfb      	ldrb	r3, [r7, #15]
 8004a1c:	3b30      	subs	r3, #48	; 0x30
 8004a1e:	613b      	str	r3, [r7, #16]
 8004a20:	e018      	b.n	8004a54 <str2num+0x60>
		else if ((base==16) && (ch>='A') && (ch<='F')) d=ch-'A'+10;
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	2b10      	cmp	r3, #16
 8004a26:	d109      	bne.n	8004a3c <str2num+0x48>
 8004a28:	7bfb      	ldrb	r3, [r7, #15]
 8004a2a:	2b40      	cmp	r3, #64	; 0x40
 8004a2c:	d906      	bls.n	8004a3c <str2num+0x48>
 8004a2e:	7bfb      	ldrb	r3, [r7, #15]
 8004a30:	2b46      	cmp	r3, #70	; 0x46
 8004a32:	d803      	bhi.n	8004a3c <str2num+0x48>
 8004a34:	7bfb      	ldrb	r3, [r7, #15]
 8004a36:	3b37      	subs	r3, #55	; 0x37
 8004a38:	613b      	str	r3, [r7, #16]
 8004a3a:	e00b      	b.n	8004a54 <str2num+0x60>
		else if ((base==16) && (ch>='a') && (ch<='f')) d=ch-'a'+10;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	2b10      	cmp	r3, #16
 8004a40:	d117      	bne.n	8004a72 <str2num+0x7e>
 8004a42:	7bfb      	ldrb	r3, [r7, #15]
 8004a44:	2b60      	cmp	r3, #96	; 0x60
 8004a46:	d914      	bls.n	8004a72 <str2num+0x7e>
 8004a48:	7bfb      	ldrb	r3, [r7, #15]
 8004a4a:	2b66      	cmp	r3, #102	; 0x66
 8004a4c:	d811      	bhi.n	8004a72 <str2num+0x7e>
 8004a4e:	7bfb      	ldrb	r3, [r7, #15]
 8004a50:	3b57      	subs	r3, #87	; 0x57
 8004a52:	613b      	str	r3, [r7, #16]
		else break;
		u=d+base*u;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	697a      	ldr	r2, [r7, #20]
 8004a58:	fb02 f303 	mul.w	r3, r2, r3
 8004a5c:	693a      	ldr	r2, [r7, #16]
 8004a5e:	4413      	add	r3, r2
 8004a60:	617b      	str	r3, [r7, #20]
		ch=*s++;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	1c5a      	adds	r2, r3, #1
 8004a66:	607a      	str	r2, [r7, #4]
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	73fb      	strb	r3, [r7, #15]
	while (ch) {
 8004a6c:	7bfb      	ldrb	r3, [r7, #15]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1cd      	bne.n	8004a0e <str2num+0x1a>
	}
	return u;
 8004a72:	697b      	ldr	r3, [r7, #20]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	371c      	adds	r7, #28
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <reverse>:

//=================================================================
void reverse(char *str, int len)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b087      	sub	sp, #28
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
    int i=0, j=len-1, temp;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	617b      	str	r3, [r7, #20]
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	3b01      	subs	r3, #1
 8004a92:	613b      	str	r3, [r7, #16]
    while (i<j)
 8004a94:	e018      	b.n	8004ac8 <reverse+0x48>
    {
        temp = str[i];
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	441a      	add	r2, r3
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	6879      	ldr	r1, [r7, #4]
 8004aaa:	440b      	add	r3, r1
 8004aac:	7812      	ldrb	r2, [r2, #0]
 8004aae:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	b2d2      	uxtb	r2, r2
 8004aba:	701a      	strb	r2, [r3, #0]
        i++; j--;
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	3301      	adds	r3, #1
 8004ac0:	617b      	str	r3, [r7, #20]
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	613b      	str	r3, [r7, #16]
    while (i<j)
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	dbe2      	blt.n	8004a96 <reverse+0x16>
    }
}
 8004ad0:	bf00      	nop
 8004ad2:	bf00      	nop
 8004ad4:	371c      	adds	r7, #28
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
	...

08004ae0 <intToStr>:

//=================================================================
int intToStr(int x, char str[], int d)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]
    int i = 0;
 8004aec:	2300      	movs	r3, #0
 8004aee:	617b      	str	r3, [r7, #20]
    while (x)
 8004af0:	e01d      	b.n	8004b2e <intToStr+0x4e>
    {
        str[i++] = (x%10) + '0';
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	4b1d      	ldr	r3, [pc, #116]	; (8004b6c <intToStr+0x8c>)
 8004af6:	fb83 1302 	smull	r1, r3, r3, r2
 8004afa:	1099      	asrs	r1, r3, #2
 8004afc:	17d3      	asrs	r3, r2, #31
 8004afe:	1ac9      	subs	r1, r1, r3
 8004b00:	460b      	mov	r3, r1
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	440b      	add	r3, r1
 8004b06:	005b      	lsls	r3, r3, #1
 8004b08:	1ad1      	subs	r1, r2, r3
 8004b0a:	b2ca      	uxtb	r2, r1
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	1c59      	adds	r1, r3, #1
 8004b10:	6179      	str	r1, [r7, #20]
 8004b12:	4619      	mov	r1, r3
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	440b      	add	r3, r1
 8004b18:	3230      	adds	r2, #48	; 0x30
 8004b1a:	b2d2      	uxtb	r2, r2
 8004b1c:	701a      	strb	r2, [r3, #0]
        x = x/10;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	4a12      	ldr	r2, [pc, #72]	; (8004b6c <intToStr+0x8c>)
 8004b22:	fb82 1203 	smull	r1, r2, r2, r3
 8004b26:	1092      	asrs	r2, r2, #2
 8004b28:	17db      	asrs	r3, r3, #31
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	60fb      	str	r3, [r7, #12]
    while (x)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1de      	bne.n	8004af2 <intToStr+0x12>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 8004b34:	e007      	b.n	8004b46 <intToStr+0x66>
        str[i++] = '0';
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	1c5a      	adds	r2, r3, #1
 8004b3a:	617a      	str	r2, [r7, #20]
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	4413      	add	r3, r2
 8004b42:	2230      	movs	r2, #48	; 0x30
 8004b44:	701a      	strb	r2, [r3, #0]
    while (i < d)
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	dbf3      	blt.n	8004b36 <intToStr+0x56>

    reverse(str, i);
 8004b4e:	6979      	ldr	r1, [r7, #20]
 8004b50:	68b8      	ldr	r0, [r7, #8]
 8004b52:	f7ff ff95 	bl	8004a80 <reverse>
    str[i] = '\0';
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	701a      	strb	r2, [r3, #0]
    return i;
 8004b60:	697b      	ldr	r3, [r7, #20]
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3718      	adds	r7, #24
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	66666667 	.word	0x66666667

08004b70 <float2str>:
//=================================================================
void float2str( char *res, float n, int afterpoint)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b088      	sub	sp, #32
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	ed87 0a02 	vstr	s0, [r7, #8]
 8004b7c:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 8004b7e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004b82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b86:	ee17 3a90 	vmov	r3, s15
 8004b8a:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	ee07 3a90 	vmov	s15, r3
 8004b92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b96:	ed97 7a02 	vldr	s14, [r7, #8]
 8004b9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b9e:	edc7 7a06 	vstr	s15, [r7, #24]

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	68f9      	ldr	r1, [r7, #12]
 8004ba6:	69f8      	ldr	r0, [r7, #28]
 8004ba8:	f7ff ff9a 	bl	8004ae0 <intToStr>
 8004bac:	6178      	str	r0, [r7, #20]

    // check for display option after point
    if (afterpoint != 0)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d025      	beq.n	8004c00 <float2str+0x90>
    {
        res[i] = '.';  // add dot
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	4413      	add	r3, r2
 8004bba:	222e      	movs	r2, #46	; 0x2e
 8004bbc:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter is needed
        // to handle cases like 233.007
        fpart = fpart * (float)myPow(10.0, afterpoint);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8004c08 <float2str+0x98>
 8004bc4:	f000 f824 	bl	8004c10 <myPow>
 8004bc8:	ec53 2b10 	vmov	r2, r3, d0
 8004bcc:	4610      	mov	r0, r2
 8004bce:	4619      	mov	r1, r3
 8004bd0:	f7fb ffc4 	bl	8000b5c <__aeabi_d2f>
 8004bd4:	ee07 0a10 	vmov	s14, r0
 8004bd8:	edd7 7a06 	vldr	s15, [r7, #24]
 8004bdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004be0:	edc7 7a06 	vstr	s15, [r7, #24]

        intToStr((int)fpart, res + i + 1, afterpoint);
 8004be4:	edd7 7a06 	vldr	s15, [r7, #24]
 8004be8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	3301      	adds	r3, #1
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	ee17 0a90 	vmov	r0, s15
 8004bfc:	f7ff ff70 	bl	8004ae0 <intToStr>
    }
}
 8004c00:	bf00      	nop
 8004c02:	3720      	adds	r7, #32
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	00000000 	.word	0x00000000
 8004c0c:	40240000 	.word	0x40240000

08004c10 <myPow>:
//=================================================================
double myPow(double x, int n) {
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b088      	sub	sp, #32
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	ed87 0b02 	vstr	d0, [r7, #8]
 8004c1a:	6078      	str	r0, [r7, #4]
    unsigned int p = abs(n);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	bfb8      	it	lt
 8004c22:	425b      	neglt	r3, r3
 8004c24:	61fb      	str	r3, [r7, #28]
    double result = 1;
 8004c26:	f04f 0200 	mov.w	r2, #0
 8004c2a:	4b1d      	ldr	r3, [pc, #116]	; (8004ca0 <myPow+0x90>)
 8004c2c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    while(p > 0)
 8004c30:	e01b      	b.n	8004c6a <myPow+0x5a>
    {
        if(p & 1) // if bit is set
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d009      	beq.n	8004c50 <myPow+0x40>
        {
            result = result * x;
 8004c3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c40:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004c44:	f7fb fcf0 	bl	8000628 <__aeabi_dmul>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	e9c7 2304 	strd	r2, r3, [r7, #16]
        }
        p = p >> 1;
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	085b      	lsrs	r3, r3, #1
 8004c54:	61fb      	str	r3, [r7, #28]
        x = x * x;
 8004c56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c5e:	f7fb fce3 	bl	8000628 <__aeabi_dmul>
 8004c62:	4602      	mov	r2, r0
 8004c64:	460b      	mov	r3, r1
 8004c66:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while(p > 0)
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d1e0      	bne.n	8004c32 <myPow+0x22>
    }

    if(n < 0)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	da09      	bge.n	8004c8a <myPow+0x7a>
    {
        return 1/result;
 8004c76:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004c7a:	f04f 0000 	mov.w	r0, #0
 8004c7e:	4908      	ldr	r1, [pc, #32]	; (8004ca0 <myPow+0x90>)
 8004c80:	f7fb fdfc 	bl	800087c <__aeabi_ddiv>
 8004c84:	4602      	mov	r2, r0
 8004c86:	460b      	mov	r3, r1
 8004c88:	e001      	b.n	8004c8e <myPow+0x7e>
    }
    return result;
 8004c8a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8004c8e:	ec43 2b17 	vmov	d7, r2, r3
 8004c92:	eeb0 0a47 	vmov.f32	s0, s14
 8004c96:	eef0 0a67 	vmov.f32	s1, s15
 8004c9a:	3720      	adds	r7, #32
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	3ff00000 	.word	0x3ff00000

08004ca4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004ca4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004cdc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004ca8:	480d      	ldr	r0, [pc, #52]	; (8004ce0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004caa:	490e      	ldr	r1, [pc, #56]	; (8004ce4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004cac:	4a0e      	ldr	r2, [pc, #56]	; (8004ce8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004cb0:	e002      	b.n	8004cb8 <LoopCopyDataInit>

08004cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004cb6:	3304      	adds	r3, #4

08004cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004cbc:	d3f9      	bcc.n	8004cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004cbe:	4a0b      	ldr	r2, [pc, #44]	; (8004cec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004cc0:	4c0b      	ldr	r4, [pc, #44]	; (8004cf0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004cc4:	e001      	b.n	8004cca <LoopFillZerobss>

08004cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004cc8:	3204      	adds	r2, #4

08004cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ccc:	d3fb      	bcc.n	8004cc6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004cce:	f7ff fd91 	bl	80047f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004cd2:	f015 fcf1 	bl	801a6b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004cd6:	f7fe fb59 	bl	800338c <main>
  bx  lr    
 8004cda:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004cdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ce4:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 8004ce8:	0801c340 	.word	0x0801c340
  ldr r2, =_sbss
 8004cec:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8004cf0:	2000e878 	.word	0x2000e878

08004cf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004cf4:	e7fe      	b.n	8004cf4 <ADC_IRQHandler>
	...

08004cf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004cfc:	4b0e      	ldr	r3, [pc, #56]	; (8004d38 <HAL_Init+0x40>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a0d      	ldr	r2, [pc, #52]	; (8004d38 <HAL_Init+0x40>)
 8004d02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004d08:	4b0b      	ldr	r3, [pc, #44]	; (8004d38 <HAL_Init+0x40>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a0a      	ldr	r2, [pc, #40]	; (8004d38 <HAL_Init+0x40>)
 8004d0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004d14:	4b08      	ldr	r3, [pc, #32]	; (8004d38 <HAL_Init+0x40>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a07      	ldr	r2, [pc, #28]	; (8004d38 <HAL_Init+0x40>)
 8004d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d20:	2003      	movs	r0, #3
 8004d22:	f000 fbcc 	bl	80054be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004d26:	200f      	movs	r0, #15
 8004d28:	f7ff fc3a 	bl	80045a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004d2c:	f7ff f8f8 	bl	8003f20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	40023c00 	.word	0x40023c00

08004d3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004d40:	4b06      	ldr	r3, [pc, #24]	; (8004d5c <HAL_IncTick+0x20>)
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	461a      	mov	r2, r3
 8004d46:	4b06      	ldr	r3, [pc, #24]	; (8004d60 <HAL_IncTick+0x24>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	4a04      	ldr	r2, [pc, #16]	; (8004d60 <HAL_IncTick+0x24>)
 8004d4e:	6013      	str	r3, [r2, #0]
}
 8004d50:	bf00      	nop
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	20000030 	.word	0x20000030
 8004d60:	20004d80 	.word	0x20004d80

08004d64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d64:	b480      	push	{r7}
 8004d66:	af00      	add	r7, sp, #0
  return uwTick;
 8004d68:	4b03      	ldr	r3, [pc, #12]	; (8004d78 <HAL_GetTick+0x14>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	20004d80 	.word	0x20004d80

08004d7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d84:	f7ff ffee 	bl	8004d64 <HAL_GetTick>
 8004d88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d94:	d005      	beq.n	8004da2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d96:	4b0a      	ldr	r3, [pc, #40]	; (8004dc0 <HAL_Delay+0x44>)
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	4413      	add	r3, r2
 8004da0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004da2:	bf00      	nop
 8004da4:	f7ff ffde 	bl	8004d64 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d8f7      	bhi.n	8004da4 <HAL_Delay+0x28>
  {
  }
}
 8004db4:	bf00      	nop
 8004db6:	bf00      	nop
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	20000030 	.word	0x20000030

08004dc4 <HAL_ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  /* Check ADC handle */
  if(hadc == NULL)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <HAL_ADC_Init+0x12>
  {
     return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e01b      	b.n	8004e0e <HAL_ADC_Init+0x4a>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d102      	bne.n	8004de8 <HAL_ADC_Init+0x24>
  {
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 f817 	bl	8004e16 <HAL_ADC_MspInit>
  }
  
  /* Initialize the ADC state */
  hadc->State = HAL_ADC_STATE_BUSY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2202      	movs	r2, #2
 8004dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set ADC parameters */
  ADC_Init(hadc);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 f9d7 	bl	80051a4 <ADC_Init>
  
  /* Set ADC error code to none */
  hadc->ErrorCode = HAL_ADC_ERROR_NONE;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Initialize the ADC state */
  hadc->State = HAL_ADC_STATE_READY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3708      	adds	r7, #8
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <HAL_ADC_MspInit>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004e16:	b480      	push	{r7}
 8004e18:	b083      	sub	sp, #12
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */ 
}
 8004e1e:	bf00      	nop
 8004e20:	370c      	adds	r7, #12
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
	...

08004e2c <HAL_ADC_Start>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  uint16_t i = 0;
 8004e34:	2300      	movs	r3, #0
 8004e36:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d101      	bne.n	8004e46 <HAL_ADC_Start+0x1a>
 8004e42:	2302      	movs	r3, #2
 8004e44:	e053      	b.n	8004eee <HAL_ADC_Start+0xc2>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Check if an injected conversion is ongoing */
  if(hadc->State == HAL_ADC_STATE_BUSY_INJ)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b22      	cmp	r3, #34	; 0x22
 8004e58:	d104      	bne.n	8004e64 <HAL_ADC_Start+0x38>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_BUSY_INJ_REG;  
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2232      	movs	r2, #50	; 0x32
 8004e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004e62:	e003      	b.n	8004e6c <HAL_ADC_Start+0x40>
  }
  else
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_BUSY_REG;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2212      	movs	r2, #18
 8004e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  } 
    
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d010      	beq.n	8004e9c <HAL_ADC_Start+0x70>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	689a      	ldr	r2, [r3, #8]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f042 0201 	orr.w	r2, r2, #1
 8004e88:	609a      	str	r2, [r3, #8]
    
    /* Delay inserted to wait during Tstab time the ADC's stabilization */
    for(; i <= 540; i++)
 8004e8a:	e003      	b.n	8004e94 <HAL_ADC_Start+0x68>
    {
      __NOP();
 8004e8c:	bf00      	nop
    for(; i <= 540; i++)
 8004e8e:	89fb      	ldrh	r3, [r7, #14]
 8004e90:	3301      	adds	r3, #1
 8004e92:	81fb      	strh	r3, [r7, #14]
 8004e94:	89fb      	ldrh	r3, [r7, #14]
 8004e96:	f5b3 7f07 	cmp.w	r3, #540	; 0x21c
 8004e9a:	d9f7      	bls.n	8004e8c <HAL_ADC_Start+0x60>
    }
  }

  /* Check if Multimode enabled */
  if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8004e9c:	4b17      	ldr	r3, [pc, #92]	; (8004efc <HAL_ADC_Start+0xd0>)
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f003 031f 	and.w	r3, r3, #31
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d10c      	bne.n	8004ec2 <HAL_ADC_Start+0x96>
  {
    /* if no external trigger present enable software conversion of regular channels */
    if(hadc->Init.ExternalTrigConvEdge == ADC_EXTERNALTRIGCONVEDGE_NONE)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d119      	bne.n	8004ee4 <HAL_ADC_Start+0xb8>
    {
      /* Enable the selected ADC software conversion for regular group */
      hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	689a      	ldr	r2, [r3, #8]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004ebe:	609a      	str	r2, [r3, #8]
 8004ec0:	e010      	b.n	8004ee4 <HAL_ADC_Start+0xb8>
    }
  }
  else
  {
    /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
    if((hadc->Instance == ADC1) && (hadc->Init.ExternalTrigConvEdge == ADC_EXTERNALTRIGCONVEDGE_NONE))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a0e      	ldr	r2, [pc, #56]	; (8004f00 <HAL_ADC_Start+0xd4>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d10b      	bne.n	8004ee4 <HAL_ADC_Start+0xb8>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d107      	bne.n	8004ee4 <HAL_ADC_Start+0xb8>
    {
      /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	689a      	ldr	r2, [r3, #8]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004ee2:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3714      	adds	r7, #20
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	40012300 	.word	0x40012300
 8004f00:	40012000 	.word	0x40012000

08004f04 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout: Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	60fb      	str	r3, [r7, #12]
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004f12:	f7ff ff27 	bl	8004d64 <HAL_GetTick>
 8004f16:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004f18:	e018      	b.n	8004f4c <HAL_ADC_PollForConversion+0x48>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f20:	d014      	beq.n	8004f4c <HAL_ADC_PollForConversion+0x48>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d007      	beq.n	8004f38 <HAL_ADC_PollForConversion+0x34>
 8004f28:	f7ff ff1c 	bl	8004d64 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	683a      	ldr	r2, [r7, #0]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d209      	bcs.n	8004f4c <HAL_ADC_PollForConversion+0x48>
      {
        hadc->State= HAL_ADC_STATE_TIMEOUT;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2203      	movs	r2, #3
 8004f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e016      	b.n	8004f7a <HAL_ADC_PollForConversion+0x76>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d1df      	bne.n	8004f1a <HAL_ADC_PollForConversion+0x16>
      }
    }
  }
  
  /* Check if an injected conversion is ready */
  if(hadc->State == HAL_ADC_STATE_EOC_INJ)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b25      	cmp	r3, #37	; 0x25
 8004f64:	d104      	bne.n	8004f70 <HAL_ADC_PollForConversion+0x6c>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_EOC_INJ_REG;  
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2235      	movs	r2, #53	; 0x35
 8004f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004f6e:	e003      	b.n	8004f78 <HAL_ADC_PollForConversion+0x74>
  }
  else
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_EOC_REG;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2215      	movs	r2, #21
 8004f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <HAL_ADC_GetValue>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004f82:	b480      	push	{r7}
 8004f84:	b083      	sub	sp, #12
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig: ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d101      	bne.n	8004fb4 <HAL_ADC_ConfigChannel+0x18>
 8004fb0:	2302      	movs	r3, #2
 8004fb2:	e0ed      	b.n	8005190 <HAL_ADC_ConfigChannel+0x1f4>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2b09      	cmp	r3, #9
 8004fc2:	d925      	bls.n	8005010 <HAL_ADC_ConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68d9      	ldr	r1, [r3, #12]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	005b      	lsls	r3, r3, #1
 8004fd6:	4413      	add	r3, r2
 8004fd8:	3b1e      	subs	r3, #30
 8004fda:	2207      	movs	r2, #7
 8004fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe0:	43da      	mvns	r2, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	400a      	ands	r2, r1
 8004fe8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68d9      	ldr	r1, [r3, #12]
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	689a      	ldr	r2, [r3, #8]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	005b      	lsls	r3, r3, #1
 8005000:	4403      	add	r3, r0
 8005002:	3b1e      	subs	r3, #30
 8005004:	409a      	lsls	r2, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	430a      	orrs	r2, r1
 800500c:	60da      	str	r2, [r3, #12]
 800500e:	e022      	b.n	8005056 <HAL_ADC_ConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	6919      	ldr	r1, [r3, #16]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	b29b      	uxth	r3, r3
 800501c:	461a      	mov	r2, r3
 800501e:	4613      	mov	r3, r2
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	4413      	add	r3, r2
 8005024:	2207      	movs	r2, #7
 8005026:	fa02 f303 	lsl.w	r3, r2, r3
 800502a:	43da      	mvns	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	400a      	ands	r2, r1
 8005032:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	6919      	ldr	r1, [r3, #16]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	689a      	ldr	r2, [r3, #8]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	b29b      	uxth	r3, r3
 8005044:	4618      	mov	r0, r3
 8005046:	4603      	mov	r3, r0
 8005048:	005b      	lsls	r3, r3, #1
 800504a:	4403      	add	r3, r0
 800504c:	409a      	lsls	r2, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	430a      	orrs	r2, r1
 8005054:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	2b06      	cmp	r3, #6
 800505c:	d824      	bhi.n	80050a8 <HAL_ADC_ConfigChannel+0x10c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685a      	ldr	r2, [r3, #4]
 8005068:	4613      	mov	r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4413      	add	r3, r2
 800506e:	3b05      	subs	r3, #5
 8005070:	221f      	movs	r2, #31
 8005072:	fa02 f303 	lsl.w	r3, r2, r3
 8005076:	43da      	mvns	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	400a      	ands	r2, r1
 800507e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	b29b      	uxth	r3, r3
 800508c:	4618      	mov	r0, r3
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	685a      	ldr	r2, [r3, #4]
 8005092:	4613      	mov	r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4413      	add	r3, r2
 8005098:	3b05      	subs	r3, #5
 800509a:	fa00 f203 	lsl.w	r2, r0, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	430a      	orrs	r2, r1
 80050a4:	635a      	str	r2, [r3, #52]	; 0x34
 80050a6:	e04c      	b.n	8005142 <HAL_ADC_ConfigChannel+0x1a6>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	2b0c      	cmp	r3, #12
 80050ae:	d824      	bhi.n	80050fa <HAL_ADC_ConfigChannel+0x15e>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	685a      	ldr	r2, [r3, #4]
 80050ba:	4613      	mov	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	4413      	add	r3, r2
 80050c0:	3b23      	subs	r3, #35	; 0x23
 80050c2:	221f      	movs	r2, #31
 80050c4:	fa02 f303 	lsl.w	r3, r2, r3
 80050c8:	43da      	mvns	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	400a      	ands	r2, r1
 80050d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	b29b      	uxth	r3, r3
 80050de:	4618      	mov	r0, r3
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	4613      	mov	r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4413      	add	r3, r2
 80050ea:	3b23      	subs	r3, #35	; 0x23
 80050ec:	fa00 f203 	lsl.w	r2, r0, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	430a      	orrs	r2, r1
 80050f6:	631a      	str	r2, [r3, #48]	; 0x30
 80050f8:	e023      	b.n	8005142 <HAL_ADC_ConfigChannel+0x1a6>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	685a      	ldr	r2, [r3, #4]
 8005104:	4613      	mov	r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	3b41      	subs	r3, #65	; 0x41
 800510c:	221f      	movs	r2, #31
 800510e:	fa02 f303 	lsl.w	r3, r2, r3
 8005112:	43da      	mvns	r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	400a      	ands	r2, r1
 800511a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	b29b      	uxth	r3, r3
 8005128:	4618      	mov	r0, r3
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	685a      	ldr	r2, [r3, #4]
 800512e:	4613      	mov	r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	4413      	add	r3, r2
 8005134:	3b41      	subs	r3, #65	; 0x41
 8005136:	fa00 f203 	lsl.w	r2, r0, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	430a      	orrs	r2, r1
 8005140:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a15      	ldr	r2, [pc, #84]	; (800519c <HAL_ADC_ConfigChannel+0x200>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d109      	bne.n	8005160 <HAL_ADC_ConfigChannel+0x1c4>
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2b12      	cmp	r3, #18
 8005152:	d105      	bne.n	8005160 <HAL_ADC_ConfigChannel+0x1c4>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8005154:	4b12      	ldr	r3, [pc, #72]	; (80051a0 <HAL_ADC_ConfigChannel+0x204>)
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	4a11      	ldr	r2, [pc, #68]	; (80051a0 <HAL_ADC_ConfigChannel+0x204>)
 800515a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800515e:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a0d      	ldr	r2, [pc, #52]	; (800519c <HAL_ADC_ConfigChannel+0x200>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d10d      	bne.n	8005186 <HAL_ADC_ConfigChannel+0x1ea>
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2b10      	cmp	r3, #16
 8005170:	d003      	beq.n	800517a <HAL_ADC_ConfigChannel+0x1de>
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2b11      	cmp	r3, #17
 8005178:	d105      	bne.n	8005186 <HAL_ADC_ConfigChannel+0x1ea>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800517a:	4b09      	ldr	r3, [pc, #36]	; (80051a0 <HAL_ADC_ConfigChannel+0x204>)
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	4a08      	ldr	r2, [pc, #32]	; (80051a0 <HAL_ADC_ConfigChannel+0x204>)
 8005180:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005184:	6053      	str	r3, [r2, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr
 800519c:	40012000 	.word	0x40012000
 80051a0:	40012300 	.word	0x40012300

080051a4 <ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80051ac:	4b6c      	ldr	r3, [pc, #432]	; (8005360 <ADC_Init+0x1bc>)
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	4a6b      	ldr	r2, [pc, #428]	; (8005360 <ADC_Init+0x1bc>)
 80051b2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80051b6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80051b8:	4b69      	ldr	r3, [pc, #420]	; (8005360 <ADC_Init+0x1bc>)
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	4967      	ldr	r1, [pc, #412]	; (8005360 <ADC_Init+0x1bc>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	6859      	ldr	r1, [r3, #4]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	021a      	lsls	r2, r3, #8
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	430a      	orrs	r2, r1
 80051e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	685a      	ldr	r2, [r3, #4]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80051f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	6859      	ldr	r1, [r3, #4]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	689a      	ldr	r2, [r3, #8]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	430a      	orrs	r2, r1
 800520a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	689a      	ldr	r2, [r3, #8]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800521a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6899      	ldr	r1, [r3, #8]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	68da      	ldr	r2, [r3, #12]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	430a      	orrs	r2, r1
 800522c:	609a      	str	r2, [r3, #8]
  
  /* Select external trigger to start conversion */
  hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	689a      	ldr	r2, [r3, #8]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800523c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	6899      	ldr	r1, [r3, #8]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	430a      	orrs	r2, r1
 800524e:	609a      	str	r2, [r3, #8]

  /* Select external trigger polarity */
  hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	689a      	ldr	r2, [r3, #8]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800525e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6899      	ldr	r1, [r3, #8]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	430a      	orrs	r2, r1
 8005270:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	689a      	ldr	r2, [r3, #8]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f022 0202 	bic.w	r2, r2, #2
 8005280:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	6899      	ldr	r1, [r3, #8]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	005a      	lsls	r2, r3, #1
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	430a      	orrs	r2, r1
 8005294:	609a      	str	r2, [r3, #8]
  
  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529a:	2b00      	cmp	r3, #0
 800529c:	d01b      	beq.n	80052d6 <ADC_Init+0x132>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	685a      	ldr	r2, [r3, #4]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052ac:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	685a      	ldr	r2, [r3, #4]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80052bc:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	6859      	ldr	r1, [r3, #4]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c8:	3b01      	subs	r3, #1
 80052ca:	035a      	lsls	r2, r3, #13
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	430a      	orrs	r2, r1
 80052d2:	605a      	str	r2, [r3, #4]
 80052d4:	e007      	b.n	80052e6 <ADC_Init+0x142>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	685a      	ldr	r2, [r3, #4]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052e4:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80052f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a1b      	ldr	r3, [r3, #32]
 8005300:	3b01      	subs	r3, #1
 8005302:	051a      	lsls	r2, r3, #20
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	430a      	orrs	r2, r1
 800530a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	689a      	ldr	r2, [r3, #8]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800531a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6899      	ldr	r1, [r3, #8]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	69db      	ldr	r3, [r3, #28]
 8005326:	025a      	lsls	r2, r3, #9
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	430a      	orrs	r2, r1
 800532e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	689a      	ldr	r2, [r3, #8]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800533e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	6899      	ldr	r1, [r3, #8]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	029a      	lsls	r2, r3, #10
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	430a      	orrs	r2, r1
 8005352:	609a      	str	r2, [r3, #8]
}
 8005354:	bf00      	nop
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr
 8005360:	40012300 	.word	0x40012300

08005364 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f003 0307 	and.w	r3, r3, #7
 8005372:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005374:	4b0c      	ldr	r3, [pc, #48]	; (80053a8 <__NVIC_SetPriorityGrouping+0x44>)
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800537a:	68ba      	ldr	r2, [r7, #8]
 800537c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005380:	4013      	ands	r3, r2
 8005382:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800538c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005394:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005396:	4a04      	ldr	r2, [pc, #16]	; (80053a8 <__NVIC_SetPriorityGrouping+0x44>)
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	60d3      	str	r3, [r2, #12]
}
 800539c:	bf00      	nop
 800539e:	3714      	adds	r7, #20
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr
 80053a8:	e000ed00 	.word	0xe000ed00

080053ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80053ac:	b480      	push	{r7}
 80053ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053b0:	4b04      	ldr	r3, [pc, #16]	; (80053c4 <__NVIC_GetPriorityGrouping+0x18>)
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	0a1b      	lsrs	r3, r3, #8
 80053b6:	f003 0307 	and.w	r3, r3, #7
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr
 80053c4:	e000ed00 	.word	0xe000ed00

080053c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	4603      	mov	r3, r0
 80053d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	db0b      	blt.n	80053f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053da:	79fb      	ldrb	r3, [r7, #7]
 80053dc:	f003 021f 	and.w	r2, r3, #31
 80053e0:	4907      	ldr	r1, [pc, #28]	; (8005400 <__NVIC_EnableIRQ+0x38>)
 80053e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053e6:	095b      	lsrs	r3, r3, #5
 80053e8:	2001      	movs	r0, #1
 80053ea:	fa00 f202 	lsl.w	r2, r0, r2
 80053ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80053f2:	bf00      	nop
 80053f4:	370c      	adds	r7, #12
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	e000e100 	.word	0xe000e100

08005404 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	4603      	mov	r3, r0
 800540c:	6039      	str	r1, [r7, #0]
 800540e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005414:	2b00      	cmp	r3, #0
 8005416:	db0a      	blt.n	800542e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	b2da      	uxtb	r2, r3
 800541c:	490c      	ldr	r1, [pc, #48]	; (8005450 <__NVIC_SetPriority+0x4c>)
 800541e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005422:	0112      	lsls	r2, r2, #4
 8005424:	b2d2      	uxtb	r2, r2
 8005426:	440b      	add	r3, r1
 8005428:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800542c:	e00a      	b.n	8005444 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	b2da      	uxtb	r2, r3
 8005432:	4908      	ldr	r1, [pc, #32]	; (8005454 <__NVIC_SetPriority+0x50>)
 8005434:	79fb      	ldrb	r3, [r7, #7]
 8005436:	f003 030f 	and.w	r3, r3, #15
 800543a:	3b04      	subs	r3, #4
 800543c:	0112      	lsls	r2, r2, #4
 800543e:	b2d2      	uxtb	r2, r2
 8005440:	440b      	add	r3, r1
 8005442:	761a      	strb	r2, [r3, #24]
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr
 8005450:	e000e100 	.word	0xe000e100
 8005454:	e000ed00 	.word	0xe000ed00

08005458 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005458:	b480      	push	{r7}
 800545a:	b089      	sub	sp, #36	; 0x24
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f003 0307 	and.w	r3, r3, #7
 800546a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	f1c3 0307 	rsb	r3, r3, #7
 8005472:	2b04      	cmp	r3, #4
 8005474:	bf28      	it	cs
 8005476:	2304      	movcs	r3, #4
 8005478:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	3304      	adds	r3, #4
 800547e:	2b06      	cmp	r3, #6
 8005480:	d902      	bls.n	8005488 <NVIC_EncodePriority+0x30>
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	3b03      	subs	r3, #3
 8005486:	e000      	b.n	800548a <NVIC_EncodePriority+0x32>
 8005488:	2300      	movs	r3, #0
 800548a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800548c:	f04f 32ff 	mov.w	r2, #4294967295
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	fa02 f303 	lsl.w	r3, r2, r3
 8005496:	43da      	mvns	r2, r3
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	401a      	ands	r2, r3
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054a0:	f04f 31ff 	mov.w	r1, #4294967295
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	fa01 f303 	lsl.w	r3, r1, r3
 80054aa:	43d9      	mvns	r1, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054b0:	4313      	orrs	r3, r2
         );
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3724      	adds	r7, #36	; 0x24
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr

080054be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b082      	sub	sp, #8
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f7ff ff4c 	bl	8005364 <__NVIC_SetPriorityGrouping>
}
 80054cc:	bf00      	nop
 80054ce:	3708      	adds	r7, #8
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b086      	sub	sp, #24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	4603      	mov	r3, r0
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
 80054e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80054e2:	2300      	movs	r3, #0
 80054e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80054e6:	f7ff ff61 	bl	80053ac <__NVIC_GetPriorityGrouping>
 80054ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	68b9      	ldr	r1, [r7, #8]
 80054f0:	6978      	ldr	r0, [r7, #20]
 80054f2:	f7ff ffb1 	bl	8005458 <NVIC_EncodePriority>
 80054f6:	4602      	mov	r2, r0
 80054f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054fc:	4611      	mov	r1, r2
 80054fe:	4618      	mov	r0, r3
 8005500:	f7ff ff80 	bl	8005404 <__NVIC_SetPriority>
}
 8005504:	bf00      	nop
 8005506:	3718      	adds	r7, #24
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	4603      	mov	r3, r0
 8005514:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800551a:	4618      	mov	r0, r3
 800551c:	f7ff ff54 	bl	80053c8 <__NVIC_EnableIRQ>
}
 8005520:	bf00      	nop
 8005522:	3708      	adds	r7, #8
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b086      	sub	sp, #24
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005530:	2300      	movs	r3, #0
 8005532:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005534:	f7ff fc16 	bl	8004d64 <HAL_GetTick>
 8005538:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d101      	bne.n	8005544 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e099      	b.n	8005678 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2202      	movs	r2, #2
 8005548:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f022 0201 	bic.w	r2, r2, #1
 8005562:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005564:	e00f      	b.n	8005586 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005566:	f7ff fbfd 	bl	8004d64 <HAL_GetTick>
 800556a:	4602      	mov	r2, r0
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	2b05      	cmp	r3, #5
 8005572:	d908      	bls.n	8005586 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2220      	movs	r2, #32
 8005578:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2203      	movs	r2, #3
 800557e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e078      	b.n	8005678 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0301 	and.w	r3, r3, #1
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1e8      	bne.n	8005566 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800559c:	697a      	ldr	r2, [r7, #20]
 800559e:	4b38      	ldr	r3, [pc, #224]	; (8005680 <HAL_DMA_Init+0x158>)
 80055a0:	4013      	ands	r3, r2
 80055a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685a      	ldr	r2, [r3, #4]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80055b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a1b      	ldr	r3, [r3, #32]
 80055d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055dc:	2b04      	cmp	r3, #4
 80055de:	d107      	bne.n	80055f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e8:	4313      	orrs	r3, r2
 80055ea:	697a      	ldr	r2, [r7, #20]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	697a      	ldr	r2, [r7, #20]
 80055f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	f023 0307 	bic.w	r3, r3, #7
 8005606:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	4313      	orrs	r3, r2
 8005610:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005616:	2b04      	cmp	r3, #4
 8005618:	d117      	bne.n	800564a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	4313      	orrs	r3, r2
 8005622:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00e      	beq.n	800564a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 fb0f 	bl	8005c50 <DMA_CheckFifoParam>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d008      	beq.n	800564a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2240      	movs	r2, #64	; 0x40
 800563c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005646:	2301      	movs	r3, #1
 8005648:	e016      	b.n	8005678 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 fac6 	bl	8005be4 <DMA_CalcBaseAndBitshift>
 8005658:	4603      	mov	r3, r0
 800565a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005660:	223f      	movs	r2, #63	; 0x3f
 8005662:	409a      	lsls	r2, r3
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2201      	movs	r2, #1
 8005672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	3718      	adds	r7, #24
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	f010803f 	.word	0xf010803f

08005684 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b086      	sub	sp, #24
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	607a      	str	r2, [r7, #4]
 8005690:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005692:	2300      	movs	r3, #0
 8005694:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800569a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d101      	bne.n	80056aa <HAL_DMA_Start_IT+0x26>
 80056a6:	2302      	movs	r3, #2
 80056a8:	e040      	b.n	800572c <HAL_DMA_Start_IT+0xa8>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2201      	movs	r2, #1
 80056ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d12f      	bne.n	800571e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2202      	movs	r2, #2
 80056c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	68b9      	ldr	r1, [r7, #8]
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f000 fa58 	bl	8005b88 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056dc:	223f      	movs	r2, #63	; 0x3f
 80056de:	409a      	lsls	r2, r3
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f042 0216 	orr.w	r2, r2, #22
 80056f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d007      	beq.n	800570c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f042 0208 	orr.w	r2, r2, #8
 800570a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f042 0201 	orr.w	r2, r2, #1
 800571a:	601a      	str	r2, [r3, #0]
 800571c:	e005      	b.n	800572a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005726:	2302      	movs	r3, #2
 8005728:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800572a:	7dfb      	ldrb	r3, [r7, #23]
}
 800572c:	4618      	mov	r0, r3
 800572e:	3718      	adds	r7, #24
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005740:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005742:	f7ff fb0f 	bl	8004d64 <HAL_GetTick>
 8005746:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800574e:	b2db      	uxtb	r3, r3
 8005750:	2b02      	cmp	r3, #2
 8005752:	d008      	beq.n	8005766 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2280      	movs	r2, #128	; 0x80
 8005758:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e052      	b.n	800580c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f022 0216 	bic.w	r2, r2, #22
 8005774:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	695a      	ldr	r2, [r3, #20]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005784:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578a:	2b00      	cmp	r3, #0
 800578c:	d103      	bne.n	8005796 <HAL_DMA_Abort+0x62>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005792:	2b00      	cmp	r3, #0
 8005794:	d007      	beq.n	80057a6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f022 0208 	bic.w	r2, r2, #8
 80057a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f022 0201 	bic.w	r2, r2, #1
 80057b4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80057b6:	e013      	b.n	80057e0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80057b8:	f7ff fad4 	bl	8004d64 <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	2b05      	cmp	r3, #5
 80057c4:	d90c      	bls.n	80057e0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2220      	movs	r2, #32
 80057ca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2203      	movs	r2, #3
 80057d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	e015      	b.n	800580c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0301 	and.w	r3, r3, #1
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1e4      	bne.n	80057b8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057f2:	223f      	movs	r2, #63	; 0x3f
 80057f4:	409a      	lsls	r2, r3
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2201      	movs	r2, #1
 80057fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	4618      	mov	r0, r3
 800580e:	3710      	adds	r7, #16
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005822:	b2db      	uxtb	r3, r3
 8005824:	2b02      	cmp	r3, #2
 8005826:	d004      	beq.n	8005832 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2280      	movs	r2, #128	; 0x80
 800582c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e00c      	b.n	800584c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2205      	movs	r2, #5
 8005836:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f022 0201 	bic.w	r2, r2, #1
 8005848:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b086      	sub	sp, #24
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005860:	2300      	movs	r3, #0
 8005862:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005864:	4b8e      	ldr	r3, [pc, #568]	; (8005aa0 <HAL_DMA_IRQHandler+0x248>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a8e      	ldr	r2, [pc, #568]	; (8005aa4 <HAL_DMA_IRQHandler+0x24c>)
 800586a:	fba2 2303 	umull	r2, r3, r2, r3
 800586e:	0a9b      	lsrs	r3, r3, #10
 8005870:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005876:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005882:	2208      	movs	r2, #8
 8005884:	409a      	lsls	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	4013      	ands	r3, r2
 800588a:	2b00      	cmp	r3, #0
 800588c:	d01a      	beq.n	80058c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0304 	and.w	r3, r3, #4
 8005898:	2b00      	cmp	r3, #0
 800589a:	d013      	beq.n	80058c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f022 0204 	bic.w	r2, r2, #4
 80058aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058b0:	2208      	movs	r2, #8
 80058b2:	409a      	lsls	r2, r3
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058bc:	f043 0201 	orr.w	r2, r3, #1
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058c8:	2201      	movs	r2, #1
 80058ca:	409a      	lsls	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	4013      	ands	r3, r2
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d012      	beq.n	80058fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00b      	beq.n	80058fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058e6:	2201      	movs	r2, #1
 80058e8:	409a      	lsls	r2, r3
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058f2:	f043 0202 	orr.w	r2, r3, #2
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058fe:	2204      	movs	r2, #4
 8005900:	409a      	lsls	r2, r3
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	4013      	ands	r3, r2
 8005906:	2b00      	cmp	r3, #0
 8005908:	d012      	beq.n	8005930 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0302 	and.w	r3, r3, #2
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00b      	beq.n	8005930 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800591c:	2204      	movs	r2, #4
 800591e:	409a      	lsls	r2, r3
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005928:	f043 0204 	orr.w	r2, r3, #4
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005934:	2210      	movs	r2, #16
 8005936:	409a      	lsls	r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	4013      	ands	r3, r2
 800593c:	2b00      	cmp	r3, #0
 800593e:	d043      	beq.n	80059c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0308 	and.w	r3, r3, #8
 800594a:	2b00      	cmp	r3, #0
 800594c:	d03c      	beq.n	80059c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005952:	2210      	movs	r2, #16
 8005954:	409a      	lsls	r2, r3
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005964:	2b00      	cmp	r3, #0
 8005966:	d018      	beq.n	800599a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d108      	bne.n	8005988 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597a:	2b00      	cmp	r3, #0
 800597c:	d024      	beq.n	80059c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	4798      	blx	r3
 8005986:	e01f      	b.n	80059c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800598c:	2b00      	cmp	r3, #0
 800598e:	d01b      	beq.n	80059c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	4798      	blx	r3
 8005998:	e016      	b.n	80059c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d107      	bne.n	80059b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f022 0208 	bic.w	r2, r2, #8
 80059b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d003      	beq.n	80059c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059cc:	2220      	movs	r2, #32
 80059ce:	409a      	lsls	r2, r3
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	4013      	ands	r3, r2
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f000 808f 	beq.w	8005af8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0310 	and.w	r3, r3, #16
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f000 8087 	beq.w	8005af8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059ee:	2220      	movs	r2, #32
 80059f0:	409a      	lsls	r2, r3
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	2b05      	cmp	r3, #5
 8005a00:	d136      	bne.n	8005a70 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f022 0216 	bic.w	r2, r2, #22
 8005a10:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	695a      	ldr	r2, [r3, #20]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a20:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d103      	bne.n	8005a32 <HAL_DMA_IRQHandler+0x1da>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d007      	beq.n	8005a42 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f022 0208 	bic.w	r2, r2, #8
 8005a40:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a46:	223f      	movs	r2, #63	; 0x3f
 8005a48:	409a      	lsls	r2, r3
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2201      	movs	r2, #1
 8005a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d07e      	beq.n	8005b64 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	4798      	blx	r3
        }
        return;
 8005a6e:	e079      	b.n	8005b64 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d01d      	beq.n	8005aba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d10d      	bne.n	8005aa8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d031      	beq.n	8005af8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	4798      	blx	r3
 8005a9c:	e02c      	b.n	8005af8 <HAL_DMA_IRQHandler+0x2a0>
 8005a9e:	bf00      	nop
 8005aa0:	20000014 	.word	0x20000014
 8005aa4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d023      	beq.n	8005af8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	4798      	blx	r3
 8005ab8:	e01e      	b.n	8005af8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d10f      	bne.n	8005ae8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f022 0210 	bic.w	r2, r2, #16
 8005ad6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d003      	beq.n	8005af8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d032      	beq.n	8005b66 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b04:	f003 0301 	and.w	r3, r3, #1
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d022      	beq.n	8005b52 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2205      	movs	r2, #5
 8005b10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f022 0201 	bic.w	r2, r2, #1
 8005b22:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	3301      	adds	r3, #1
 8005b28:	60bb      	str	r3, [r7, #8]
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d307      	bcc.n	8005b40 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d1f2      	bne.n	8005b24 <HAL_DMA_IRQHandler+0x2cc>
 8005b3e:	e000      	b.n	8005b42 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005b40:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d005      	beq.n	8005b66 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	4798      	blx	r3
 8005b62:	e000      	b.n	8005b66 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005b64:	bf00      	nop
    }
  }
}
 8005b66:	3718      	adds	r7, #24
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b7a:	b2db      	uxtb	r3, r3
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	370c      	adds	r7, #12
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	607a      	str	r2, [r7, #4]
 8005b94:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ba4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	683a      	ldr	r2, [r7, #0]
 8005bac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	2b40      	cmp	r3, #64	; 0x40
 8005bb4:	d108      	bne.n	8005bc8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68ba      	ldr	r2, [r7, #8]
 8005bc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005bc6:	e007      	b.n	8005bd8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68ba      	ldr	r2, [r7, #8]
 8005bce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	60da      	str	r2, [r3, #12]
}
 8005bd8:	bf00      	nop
 8005bda:	3714      	adds	r7, #20
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b085      	sub	sp, #20
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	3b10      	subs	r3, #16
 8005bf4:	4a14      	ldr	r2, [pc, #80]	; (8005c48 <DMA_CalcBaseAndBitshift+0x64>)
 8005bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8005bfa:	091b      	lsrs	r3, r3, #4
 8005bfc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005bfe:	4a13      	ldr	r2, [pc, #76]	; (8005c4c <DMA_CalcBaseAndBitshift+0x68>)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	4413      	add	r3, r2
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	461a      	mov	r2, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2b03      	cmp	r3, #3
 8005c10:	d909      	bls.n	8005c26 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005c1a:	f023 0303 	bic.w	r3, r3, #3
 8005c1e:	1d1a      	adds	r2, r3, #4
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	659a      	str	r2, [r3, #88]	; 0x58
 8005c24:	e007      	b.n	8005c36 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005c2e:	f023 0303 	bic.w	r3, r3, #3
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3714      	adds	r7, #20
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	aaaaaaab 	.word	0xaaaaaaab
 8005c4c:	0801b80c 	.word	0x0801b80c

08005c50 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b085      	sub	sp, #20
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c60:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d11f      	bne.n	8005caa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	2b03      	cmp	r3, #3
 8005c6e:	d856      	bhi.n	8005d1e <DMA_CheckFifoParam+0xce>
 8005c70:	a201      	add	r2, pc, #4	; (adr r2, 8005c78 <DMA_CheckFifoParam+0x28>)
 8005c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c76:	bf00      	nop
 8005c78:	08005c89 	.word	0x08005c89
 8005c7c:	08005c9b 	.word	0x08005c9b
 8005c80:	08005c89 	.word	0x08005c89
 8005c84:	08005d1f 	.word	0x08005d1f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d046      	beq.n	8005d22 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c98:	e043      	b.n	8005d22 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005ca2:	d140      	bne.n	8005d26 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ca8:	e03d      	b.n	8005d26 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	699b      	ldr	r3, [r3, #24]
 8005cae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cb2:	d121      	bne.n	8005cf8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	2b03      	cmp	r3, #3
 8005cb8:	d837      	bhi.n	8005d2a <DMA_CheckFifoParam+0xda>
 8005cba:	a201      	add	r2, pc, #4	; (adr r2, 8005cc0 <DMA_CheckFifoParam+0x70>)
 8005cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc0:	08005cd1 	.word	0x08005cd1
 8005cc4:	08005cd7 	.word	0x08005cd7
 8005cc8:	08005cd1 	.word	0x08005cd1
 8005ccc:	08005ce9 	.word	0x08005ce9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8005cd4:	e030      	b.n	8005d38 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d025      	beq.n	8005d2e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ce6:	e022      	b.n	8005d2e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005cf0:	d11f      	bne.n	8005d32 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005cf6:	e01c      	b.n	8005d32 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d903      	bls.n	8005d06 <DMA_CheckFifoParam+0xb6>
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	2b03      	cmp	r3, #3
 8005d02:	d003      	beq.n	8005d0c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005d04:	e018      	b.n	8005d38 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	73fb      	strb	r3, [r7, #15]
      break;
 8005d0a:	e015      	b.n	8005d38 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d00e      	beq.n	8005d36 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	73fb      	strb	r3, [r7, #15]
      break;
 8005d1c:	e00b      	b.n	8005d36 <DMA_CheckFifoParam+0xe6>
      break;
 8005d1e:	bf00      	nop
 8005d20:	e00a      	b.n	8005d38 <DMA_CheckFifoParam+0xe8>
      break;
 8005d22:	bf00      	nop
 8005d24:	e008      	b.n	8005d38 <DMA_CheckFifoParam+0xe8>
      break;
 8005d26:	bf00      	nop
 8005d28:	e006      	b.n	8005d38 <DMA_CheckFifoParam+0xe8>
      break;
 8005d2a:	bf00      	nop
 8005d2c:	e004      	b.n	8005d38 <DMA_CheckFifoParam+0xe8>
      break;
 8005d2e:	bf00      	nop
 8005d30:	e002      	b.n	8005d38 <DMA_CheckFifoParam+0xe8>
      break;   
 8005d32:	bf00      	nop
 8005d34:	e000      	b.n	8005d38 <DMA_CheckFifoParam+0xe8>
      break;
 8005d36:	bf00      	nop
    }
  } 
  
  return status; 
 8005d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3714      	adds	r7, #20
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop

08005d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b089      	sub	sp, #36	; 0x24
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005d52:	2300      	movs	r3, #0
 8005d54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005d56:	2300      	movs	r3, #0
 8005d58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d5e:	2300      	movs	r3, #0
 8005d60:	61fb      	str	r3, [r7, #28]
 8005d62:	e159      	b.n	8006018 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005d64:	2201      	movs	r2, #1
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	697a      	ldr	r2, [r7, #20]
 8005d74:	4013      	ands	r3, r2
 8005d76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	f040 8148 	bne.w	8006012 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	f003 0303 	and.w	r3, r3, #3
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d005      	beq.n	8005d9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d130      	bne.n	8005dfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	005b      	lsls	r3, r3, #1
 8005da4:	2203      	movs	r2, #3
 8005da6:	fa02 f303 	lsl.w	r3, r2, r3
 8005daa:	43db      	mvns	r3, r3
 8005dac:	69ba      	ldr	r2, [r7, #24]
 8005dae:	4013      	ands	r3, r2
 8005db0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	68da      	ldr	r2, [r3, #12]
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	005b      	lsls	r3, r3, #1
 8005dba:	fa02 f303 	lsl.w	r3, r2, r3
 8005dbe:	69ba      	ldr	r2, [r7, #24]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	69ba      	ldr	r2, [r7, #24]
 8005dc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd8:	43db      	mvns	r3, r3
 8005dda:	69ba      	ldr	r2, [r7, #24]
 8005ddc:	4013      	ands	r3, r2
 8005dde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	091b      	lsrs	r3, r3, #4
 8005de6:	f003 0201 	and.w	r2, r3, #1
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	fa02 f303 	lsl.w	r3, r2, r3
 8005df0:	69ba      	ldr	r2, [r7, #24]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	69ba      	ldr	r2, [r7, #24]
 8005dfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	f003 0303 	and.w	r3, r3, #3
 8005e04:	2b03      	cmp	r3, #3
 8005e06:	d017      	beq.n	8005e38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	005b      	lsls	r3, r3, #1
 8005e12:	2203      	movs	r2, #3
 8005e14:	fa02 f303 	lsl.w	r3, r2, r3
 8005e18:	43db      	mvns	r3, r3
 8005e1a:	69ba      	ldr	r2, [r7, #24]
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	689a      	ldr	r2, [r3, #8]
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	005b      	lsls	r3, r3, #1
 8005e28:	fa02 f303 	lsl.w	r3, r2, r3
 8005e2c:	69ba      	ldr	r2, [r7, #24]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	69ba      	ldr	r2, [r7, #24]
 8005e36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	f003 0303 	and.w	r3, r3, #3
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d123      	bne.n	8005e8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	08da      	lsrs	r2, r3, #3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	3208      	adds	r2, #8
 8005e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	f003 0307 	and.w	r3, r3, #7
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	220f      	movs	r2, #15
 8005e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e60:	43db      	mvns	r3, r3
 8005e62:	69ba      	ldr	r2, [r7, #24]
 8005e64:	4013      	ands	r3, r2
 8005e66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	691a      	ldr	r2, [r3, #16]
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	f003 0307 	and.w	r3, r3, #7
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	fa02 f303 	lsl.w	r3, r2, r3
 8005e78:	69ba      	ldr	r2, [r7, #24]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	08da      	lsrs	r2, r3, #3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	3208      	adds	r2, #8
 8005e86:	69b9      	ldr	r1, [r7, #24]
 8005e88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	005b      	lsls	r3, r3, #1
 8005e96:	2203      	movs	r2, #3
 8005e98:	fa02 f303 	lsl.w	r3, r2, r3
 8005e9c:	43db      	mvns	r3, r3
 8005e9e:	69ba      	ldr	r2, [r7, #24]
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	f003 0203 	and.w	r2, r3, #3
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	005b      	lsls	r3, r3, #1
 8005eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb4:	69ba      	ldr	r2, [r7, #24]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	69ba      	ldr	r2, [r7, #24]
 8005ebe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	f000 80a2 	beq.w	8006012 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ece:	2300      	movs	r3, #0
 8005ed0:	60fb      	str	r3, [r7, #12]
 8005ed2:	4b57      	ldr	r3, [pc, #348]	; (8006030 <HAL_GPIO_Init+0x2e8>)
 8005ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ed6:	4a56      	ldr	r2, [pc, #344]	; (8006030 <HAL_GPIO_Init+0x2e8>)
 8005ed8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005edc:	6453      	str	r3, [r2, #68]	; 0x44
 8005ede:	4b54      	ldr	r3, [pc, #336]	; (8006030 <HAL_GPIO_Init+0x2e8>)
 8005ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ee6:	60fb      	str	r3, [r7, #12]
 8005ee8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005eea:	4a52      	ldr	r2, [pc, #328]	; (8006034 <HAL_GPIO_Init+0x2ec>)
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	089b      	lsrs	r3, r3, #2
 8005ef0:	3302      	adds	r3, #2
 8005ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	f003 0303 	and.w	r3, r3, #3
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	220f      	movs	r2, #15
 8005f02:	fa02 f303 	lsl.w	r3, r2, r3
 8005f06:	43db      	mvns	r3, r3
 8005f08:	69ba      	ldr	r2, [r7, #24]
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a49      	ldr	r2, [pc, #292]	; (8006038 <HAL_GPIO_Init+0x2f0>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d019      	beq.n	8005f4a <HAL_GPIO_Init+0x202>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a48      	ldr	r2, [pc, #288]	; (800603c <HAL_GPIO_Init+0x2f4>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d013      	beq.n	8005f46 <HAL_GPIO_Init+0x1fe>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a47      	ldr	r2, [pc, #284]	; (8006040 <HAL_GPIO_Init+0x2f8>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d00d      	beq.n	8005f42 <HAL_GPIO_Init+0x1fa>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a46      	ldr	r2, [pc, #280]	; (8006044 <HAL_GPIO_Init+0x2fc>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d007      	beq.n	8005f3e <HAL_GPIO_Init+0x1f6>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a45      	ldr	r2, [pc, #276]	; (8006048 <HAL_GPIO_Init+0x300>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d101      	bne.n	8005f3a <HAL_GPIO_Init+0x1f2>
 8005f36:	2304      	movs	r3, #4
 8005f38:	e008      	b.n	8005f4c <HAL_GPIO_Init+0x204>
 8005f3a:	2307      	movs	r3, #7
 8005f3c:	e006      	b.n	8005f4c <HAL_GPIO_Init+0x204>
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e004      	b.n	8005f4c <HAL_GPIO_Init+0x204>
 8005f42:	2302      	movs	r3, #2
 8005f44:	e002      	b.n	8005f4c <HAL_GPIO_Init+0x204>
 8005f46:	2301      	movs	r3, #1
 8005f48:	e000      	b.n	8005f4c <HAL_GPIO_Init+0x204>
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	69fa      	ldr	r2, [r7, #28]
 8005f4e:	f002 0203 	and.w	r2, r2, #3
 8005f52:	0092      	lsls	r2, r2, #2
 8005f54:	4093      	lsls	r3, r2
 8005f56:	69ba      	ldr	r2, [r7, #24]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f5c:	4935      	ldr	r1, [pc, #212]	; (8006034 <HAL_GPIO_Init+0x2ec>)
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	089b      	lsrs	r3, r3, #2
 8005f62:	3302      	adds	r3, #2
 8005f64:	69ba      	ldr	r2, [r7, #24]
 8005f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005f6a:	4b38      	ldr	r3, [pc, #224]	; (800604c <HAL_GPIO_Init+0x304>)
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	43db      	mvns	r3, r3
 8005f74:	69ba      	ldr	r2, [r7, #24]
 8005f76:	4013      	ands	r3, r2
 8005f78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d003      	beq.n	8005f8e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005f86:	69ba      	ldr	r2, [r7, #24]
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005f8e:	4a2f      	ldr	r2, [pc, #188]	; (800604c <HAL_GPIO_Init+0x304>)
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005f94:	4b2d      	ldr	r3, [pc, #180]	; (800604c <HAL_GPIO_Init+0x304>)
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	43db      	mvns	r3, r3
 8005f9e:	69ba      	ldr	r2, [r7, #24]
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d003      	beq.n	8005fb8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005fb0:	69ba      	ldr	r2, [r7, #24]
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005fb8:	4a24      	ldr	r2, [pc, #144]	; (800604c <HAL_GPIO_Init+0x304>)
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005fbe:	4b23      	ldr	r3, [pc, #140]	; (800604c <HAL_GPIO_Init+0x304>)
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	43db      	mvns	r3, r3
 8005fc8:	69ba      	ldr	r2, [r7, #24]
 8005fca:	4013      	ands	r3, r2
 8005fcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d003      	beq.n	8005fe2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005fda:	69ba      	ldr	r2, [r7, #24]
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005fe2:	4a1a      	ldr	r2, [pc, #104]	; (800604c <HAL_GPIO_Init+0x304>)
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005fe8:	4b18      	ldr	r3, [pc, #96]	; (800604c <HAL_GPIO_Init+0x304>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	43db      	mvns	r3, r3
 8005ff2:	69ba      	ldr	r2, [r7, #24]
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006000:	2b00      	cmp	r3, #0
 8006002:	d003      	beq.n	800600c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006004:	69ba      	ldr	r2, [r7, #24]
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	4313      	orrs	r3, r2
 800600a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800600c:	4a0f      	ldr	r2, [pc, #60]	; (800604c <HAL_GPIO_Init+0x304>)
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	3301      	adds	r3, #1
 8006016:	61fb      	str	r3, [r7, #28]
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	2b0f      	cmp	r3, #15
 800601c:	f67f aea2 	bls.w	8005d64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006020:	bf00      	nop
 8006022:	bf00      	nop
 8006024:	3724      	adds	r7, #36	; 0x24
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	40023800 	.word	0x40023800
 8006034:	40013800 	.word	0x40013800
 8006038:	40020000 	.word	0x40020000
 800603c:	40020400 	.word	0x40020400
 8006040:	40020800 	.word	0x40020800
 8006044:	40020c00 	.word	0x40020c00
 8006048:	40021000 	.word	0x40021000
 800604c:	40013c00 	.word	0x40013c00

08006050 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	460b      	mov	r3, r1
 800605a:	807b      	strh	r3, [r7, #2]
 800605c:	4613      	mov	r3, r2
 800605e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006060:	787b      	ldrb	r3, [r7, #1]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d003      	beq.n	800606e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006066:	887a      	ldrh	r2, [r7, #2]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800606c:	e003      	b.n	8006076 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800606e:	887b      	ldrh	r3, [r7, #2]
 8006070:	041a      	lsls	r2, r3, #16
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	619a      	str	r2, [r3, #24]
}
 8006076:	bf00      	nop
 8006078:	370c      	adds	r7, #12
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
	...

08006084 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
 800608a:	4603      	mov	r3, r0
 800608c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800608e:	4b08      	ldr	r3, [pc, #32]	; (80060b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006090:	695a      	ldr	r2, [r3, #20]
 8006092:	88fb      	ldrh	r3, [r7, #6]
 8006094:	4013      	ands	r3, r2
 8006096:	2b00      	cmp	r3, #0
 8006098:	d006      	beq.n	80060a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800609a:	4a05      	ldr	r2, [pc, #20]	; (80060b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800609c:	88fb      	ldrh	r3, [r7, #6]
 800609e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80060a0:	88fb      	ldrh	r3, [r7, #6]
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7fb fe1e 	bl	8001ce4 <HAL_GPIO_EXTI_Callback>
  }
}
 80060a8:	bf00      	nop
 80060aa:	3708      	adds	r7, #8
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	40013c00 	.word	0x40013c00

080060b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d101      	bne.n	80060c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e12b      	b.n	800631e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d106      	bne.n	80060e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f7fe f89a 	bl	8004214 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2224      	movs	r2, #36	; 0x24
 80060e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f022 0201 	bic.w	r2, r2, #1
 80060f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006106:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006116:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006118:	f003 f884 	bl	8009224 <HAL_RCC_GetPCLK1Freq>
 800611c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	4a81      	ldr	r2, [pc, #516]	; (8006328 <HAL_I2C_Init+0x274>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d807      	bhi.n	8006138 <HAL_I2C_Init+0x84>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	4a80      	ldr	r2, [pc, #512]	; (800632c <HAL_I2C_Init+0x278>)
 800612c:	4293      	cmp	r3, r2
 800612e:	bf94      	ite	ls
 8006130:	2301      	movls	r3, #1
 8006132:	2300      	movhi	r3, #0
 8006134:	b2db      	uxtb	r3, r3
 8006136:	e006      	b.n	8006146 <HAL_I2C_Init+0x92>
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	4a7d      	ldr	r2, [pc, #500]	; (8006330 <HAL_I2C_Init+0x27c>)
 800613c:	4293      	cmp	r3, r2
 800613e:	bf94      	ite	ls
 8006140:	2301      	movls	r3, #1
 8006142:	2300      	movhi	r3, #0
 8006144:	b2db      	uxtb	r3, r3
 8006146:	2b00      	cmp	r3, #0
 8006148:	d001      	beq.n	800614e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e0e7      	b.n	800631e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	4a78      	ldr	r2, [pc, #480]	; (8006334 <HAL_I2C_Init+0x280>)
 8006152:	fba2 2303 	umull	r2, r3, r2, r3
 8006156:	0c9b      	lsrs	r3, r3, #18
 8006158:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68ba      	ldr	r2, [r7, #8]
 800616a:	430a      	orrs	r2, r1
 800616c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	6a1b      	ldr	r3, [r3, #32]
 8006174:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	4a6a      	ldr	r2, [pc, #424]	; (8006328 <HAL_I2C_Init+0x274>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d802      	bhi.n	8006188 <HAL_I2C_Init+0xd4>
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	3301      	adds	r3, #1
 8006186:	e009      	b.n	800619c <HAL_I2C_Init+0xe8>
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800618e:	fb02 f303 	mul.w	r3, r2, r3
 8006192:	4a69      	ldr	r2, [pc, #420]	; (8006338 <HAL_I2C_Init+0x284>)
 8006194:	fba2 2303 	umull	r2, r3, r2, r3
 8006198:	099b      	lsrs	r3, r3, #6
 800619a:	3301      	adds	r3, #1
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	6812      	ldr	r2, [r2, #0]
 80061a0:	430b      	orrs	r3, r1
 80061a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	69db      	ldr	r3, [r3, #28]
 80061aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80061ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	495c      	ldr	r1, [pc, #368]	; (8006328 <HAL_I2C_Init+0x274>)
 80061b8:	428b      	cmp	r3, r1
 80061ba:	d819      	bhi.n	80061f0 <HAL_I2C_Init+0x13c>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	1e59      	subs	r1, r3, #1
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	005b      	lsls	r3, r3, #1
 80061c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80061ca:	1c59      	adds	r1, r3, #1
 80061cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80061d0:	400b      	ands	r3, r1
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00a      	beq.n	80061ec <HAL_I2C_Init+0x138>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	1e59      	subs	r1, r3, #1
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	005b      	lsls	r3, r3, #1
 80061e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80061e4:	3301      	adds	r3, #1
 80061e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061ea:	e051      	b.n	8006290 <HAL_I2C_Init+0x1dc>
 80061ec:	2304      	movs	r3, #4
 80061ee:	e04f      	b.n	8006290 <HAL_I2C_Init+0x1dc>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d111      	bne.n	800621c <HAL_I2C_Init+0x168>
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	1e58      	subs	r0, r3, #1
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6859      	ldr	r1, [r3, #4]
 8006200:	460b      	mov	r3, r1
 8006202:	005b      	lsls	r3, r3, #1
 8006204:	440b      	add	r3, r1
 8006206:	fbb0 f3f3 	udiv	r3, r0, r3
 800620a:	3301      	adds	r3, #1
 800620c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006210:	2b00      	cmp	r3, #0
 8006212:	bf0c      	ite	eq
 8006214:	2301      	moveq	r3, #1
 8006216:	2300      	movne	r3, #0
 8006218:	b2db      	uxtb	r3, r3
 800621a:	e012      	b.n	8006242 <HAL_I2C_Init+0x18e>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	1e58      	subs	r0, r3, #1
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6859      	ldr	r1, [r3, #4]
 8006224:	460b      	mov	r3, r1
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	440b      	add	r3, r1
 800622a:	0099      	lsls	r1, r3, #2
 800622c:	440b      	add	r3, r1
 800622e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006232:	3301      	adds	r3, #1
 8006234:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006238:	2b00      	cmp	r3, #0
 800623a:	bf0c      	ite	eq
 800623c:	2301      	moveq	r3, #1
 800623e:	2300      	movne	r3, #0
 8006240:	b2db      	uxtb	r3, r3
 8006242:	2b00      	cmp	r3, #0
 8006244:	d001      	beq.n	800624a <HAL_I2C_Init+0x196>
 8006246:	2301      	movs	r3, #1
 8006248:	e022      	b.n	8006290 <HAL_I2C_Init+0x1dc>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10e      	bne.n	8006270 <HAL_I2C_Init+0x1bc>
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	1e58      	subs	r0, r3, #1
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6859      	ldr	r1, [r3, #4]
 800625a:	460b      	mov	r3, r1
 800625c:	005b      	lsls	r3, r3, #1
 800625e:	440b      	add	r3, r1
 8006260:	fbb0 f3f3 	udiv	r3, r0, r3
 8006264:	3301      	adds	r3, #1
 8006266:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800626a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800626e:	e00f      	b.n	8006290 <HAL_I2C_Init+0x1dc>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	1e58      	subs	r0, r3, #1
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6859      	ldr	r1, [r3, #4]
 8006278:	460b      	mov	r3, r1
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	440b      	add	r3, r1
 800627e:	0099      	lsls	r1, r3, #2
 8006280:	440b      	add	r3, r1
 8006282:	fbb0 f3f3 	udiv	r3, r0, r3
 8006286:	3301      	adds	r3, #1
 8006288:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800628c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006290:	6879      	ldr	r1, [r7, #4]
 8006292:	6809      	ldr	r1, [r1, #0]
 8006294:	4313      	orrs	r3, r2
 8006296:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	69da      	ldr	r2, [r3, #28]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a1b      	ldr	r3, [r3, #32]
 80062aa:	431a      	orrs	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	430a      	orrs	r2, r1
 80062b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80062be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	6911      	ldr	r1, [r2, #16]
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	68d2      	ldr	r2, [r2, #12]
 80062ca:	4311      	orrs	r1, r2
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	6812      	ldr	r2, [r2, #0]
 80062d0:	430b      	orrs	r3, r1
 80062d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	695a      	ldr	r2, [r3, #20]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	699b      	ldr	r3, [r3, #24]
 80062e6:	431a      	orrs	r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	430a      	orrs	r2, r1
 80062ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f042 0201 	orr.w	r2, r2, #1
 80062fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2220      	movs	r2, #32
 800630a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3710      	adds	r7, #16
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	000186a0 	.word	0x000186a0
 800632c:	001e847f 	.word	0x001e847f
 8006330:	003d08ff 	.word	0x003d08ff
 8006334:	431bde83 	.word	0x431bde83
 8006338:	10624dd3 	.word	0x10624dd3

0800633c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b088      	sub	sp, #32
 8006340:	af02      	add	r7, sp, #8
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	607a      	str	r2, [r7, #4]
 8006346:	461a      	mov	r2, r3
 8006348:	460b      	mov	r3, r1
 800634a:	817b      	strh	r3, [r7, #10]
 800634c:	4613      	mov	r3, r2
 800634e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006350:	f7fe fd08 	bl	8004d64 <HAL_GetTick>
 8006354:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800635c:	b2db      	uxtb	r3, r3
 800635e:	2b20      	cmp	r3, #32
 8006360:	f040 80e0 	bne.w	8006524 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	9300      	str	r3, [sp, #0]
 8006368:	2319      	movs	r3, #25
 800636a:	2201      	movs	r2, #1
 800636c:	4970      	ldr	r1, [pc, #448]	; (8006530 <HAL_I2C_Master_Transmit+0x1f4>)
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	f002 f8be 	bl	80084f0 <I2C_WaitOnFlagUntilTimeout>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d001      	beq.n	800637e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800637a:	2302      	movs	r3, #2
 800637c:	e0d3      	b.n	8006526 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006384:	2b01      	cmp	r3, #1
 8006386:	d101      	bne.n	800638c <HAL_I2C_Master_Transmit+0x50>
 8006388:	2302      	movs	r3, #2
 800638a:	e0cc      	b.n	8006526 <HAL_I2C_Master_Transmit+0x1ea>
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 0301 	and.w	r3, r3, #1
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d007      	beq.n	80063b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f042 0201 	orr.w	r2, r2, #1
 80063b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2221      	movs	r2, #33	; 0x21
 80063c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2210      	movs	r2, #16
 80063ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	893a      	ldrh	r2, [r7, #8]
 80063e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	4a50      	ldr	r2, [pc, #320]	; (8006534 <HAL_I2C_Master_Transmit+0x1f8>)
 80063f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80063f4:	8979      	ldrh	r1, [r7, #10]
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	6a3a      	ldr	r2, [r7, #32]
 80063fa:	68f8      	ldr	r0, [r7, #12]
 80063fc:	f001 fe80 	bl	8008100 <I2C_MasterRequestWrite>
 8006400:	4603      	mov	r3, r0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d001      	beq.n	800640a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e08d      	b.n	8006526 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800640a:	2300      	movs	r3, #0
 800640c:	613b      	str	r3, [r7, #16]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	695b      	ldr	r3, [r3, #20]
 8006414:	613b      	str	r3, [r7, #16]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	699b      	ldr	r3, [r3, #24]
 800641c:	613b      	str	r3, [r7, #16]
 800641e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006420:	e066      	b.n	80064f0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006422:	697a      	ldr	r2, [r7, #20]
 8006424:	6a39      	ldr	r1, [r7, #32]
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f002 f938 	bl	800869c <I2C_WaitOnTXEFlagUntilTimeout>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00d      	beq.n	800644e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006436:	2b04      	cmp	r3, #4
 8006438:	d107      	bne.n	800644a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006448:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e06b      	b.n	8006526 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006452:	781a      	ldrb	r2, [r3, #0]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645e:	1c5a      	adds	r2, r3, #1
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006468:	b29b      	uxth	r3, r3
 800646a:	3b01      	subs	r3, #1
 800646c:	b29a      	uxth	r2, r3
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006476:	3b01      	subs	r3, #1
 8006478:	b29a      	uxth	r2, r3
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	695b      	ldr	r3, [r3, #20]
 8006484:	f003 0304 	and.w	r3, r3, #4
 8006488:	2b04      	cmp	r3, #4
 800648a:	d11b      	bne.n	80064c4 <HAL_I2C_Master_Transmit+0x188>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006490:	2b00      	cmp	r3, #0
 8006492:	d017      	beq.n	80064c4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006498:	781a      	ldrb	r2, [r3, #0]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a4:	1c5a      	adds	r2, r3, #1
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	3b01      	subs	r3, #1
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064bc:	3b01      	subs	r3, #1
 80064be:	b29a      	uxth	r2, r3
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	6a39      	ldr	r1, [r7, #32]
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	f002 f928 	bl	800871e <I2C_WaitOnBTFFlagUntilTimeout>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d00d      	beq.n	80064f0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d8:	2b04      	cmp	r3, #4
 80064da:	d107      	bne.n	80064ec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064ea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	e01a      	b.n	8006526 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d194      	bne.n	8006422 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006506:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2220      	movs	r2, #32
 800650c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006520:	2300      	movs	r3, #0
 8006522:	e000      	b.n	8006526 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006524:	2302      	movs	r3, #2
  }
}
 8006526:	4618      	mov	r0, r3
 8006528:	3718      	adds	r7, #24
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	00100002 	.word	0x00100002
 8006534:	ffff0000 	.word	0xffff0000

08006538 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b08c      	sub	sp, #48	; 0x30
 800653c:	af02      	add	r7, sp, #8
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	607a      	str	r2, [r7, #4]
 8006542:	461a      	mov	r2, r3
 8006544:	460b      	mov	r3, r1
 8006546:	817b      	strh	r3, [r7, #10]
 8006548:	4613      	mov	r3, r2
 800654a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800654c:	f7fe fc0a 	bl	8004d64 <HAL_GetTick>
 8006550:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006558:	b2db      	uxtb	r3, r3
 800655a:	2b20      	cmp	r3, #32
 800655c:	f040 820b 	bne.w	8006976 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006562:	9300      	str	r3, [sp, #0]
 8006564:	2319      	movs	r3, #25
 8006566:	2201      	movs	r2, #1
 8006568:	497c      	ldr	r1, [pc, #496]	; (800675c <HAL_I2C_Master_Receive+0x224>)
 800656a:	68f8      	ldr	r0, [r7, #12]
 800656c:	f001 ffc0 	bl	80084f0 <I2C_WaitOnFlagUntilTimeout>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d001      	beq.n	800657a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006576:	2302      	movs	r3, #2
 8006578:	e1fe      	b.n	8006978 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006580:	2b01      	cmp	r3, #1
 8006582:	d101      	bne.n	8006588 <HAL_I2C_Master_Receive+0x50>
 8006584:	2302      	movs	r3, #2
 8006586:	e1f7      	b.n	8006978 <HAL_I2C_Master_Receive+0x440>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 0301 	and.w	r3, r3, #1
 800659a:	2b01      	cmp	r3, #1
 800659c:	d007      	beq.n	80065ae <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f042 0201 	orr.w	r2, r2, #1
 80065ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2222      	movs	r2, #34	; 0x22
 80065c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2210      	movs	r2, #16
 80065ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2200      	movs	r2, #0
 80065d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	893a      	ldrh	r2, [r7, #8]
 80065de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065e4:	b29a      	uxth	r2, r3
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	4a5c      	ldr	r2, [pc, #368]	; (8006760 <HAL_I2C_Master_Receive+0x228>)
 80065ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80065f0:	8979      	ldrh	r1, [r7, #10]
 80065f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	f001 fe04 	bl	8008204 <I2C_MasterRequestRead>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d001      	beq.n	8006606 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e1b8      	b.n	8006978 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800660a:	2b00      	cmp	r3, #0
 800660c:	d113      	bne.n	8006636 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800660e:	2300      	movs	r3, #0
 8006610:	623b      	str	r3, [r7, #32]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	695b      	ldr	r3, [r3, #20]
 8006618:	623b      	str	r3, [r7, #32]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	699b      	ldr	r3, [r3, #24]
 8006620:	623b      	str	r3, [r7, #32]
 8006622:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006632:	601a      	str	r2, [r3, #0]
 8006634:	e18c      	b.n	8006950 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800663a:	2b01      	cmp	r3, #1
 800663c:	d11b      	bne.n	8006676 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800664c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800664e:	2300      	movs	r3, #0
 8006650:	61fb      	str	r3, [r7, #28]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	695b      	ldr	r3, [r3, #20]
 8006658:	61fb      	str	r3, [r7, #28]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	699b      	ldr	r3, [r3, #24]
 8006660:	61fb      	str	r3, [r7, #28]
 8006662:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006672:	601a      	str	r2, [r3, #0]
 8006674:	e16c      	b.n	8006950 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800667a:	2b02      	cmp	r3, #2
 800667c:	d11b      	bne.n	80066b6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800668c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800669c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800669e:	2300      	movs	r3, #0
 80066a0:	61bb      	str	r3, [r7, #24]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	695b      	ldr	r3, [r3, #20]
 80066a8:	61bb      	str	r3, [r7, #24]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	699b      	ldr	r3, [r3, #24]
 80066b0:	61bb      	str	r3, [r7, #24]
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	e14c      	b.n	8006950 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80066c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066c6:	2300      	movs	r3, #0
 80066c8:	617b      	str	r3, [r7, #20]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	695b      	ldr	r3, [r3, #20]
 80066d0:	617b      	str	r3, [r7, #20]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	699b      	ldr	r3, [r3, #24]
 80066d8:	617b      	str	r3, [r7, #20]
 80066da:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80066dc:	e138      	b.n	8006950 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066e2:	2b03      	cmp	r3, #3
 80066e4:	f200 80f1 	bhi.w	80068ca <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d123      	bne.n	8006738 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066f4:	68f8      	ldr	r0, [r7, #12]
 80066f6:	f002 f885 	bl	8008804 <I2C_WaitOnRXNEFlagUntilTimeout>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d001      	beq.n	8006704 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e139      	b.n	8006978 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	691a      	ldr	r2, [r3, #16]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670e:	b2d2      	uxtb	r2, r2
 8006710:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006716:	1c5a      	adds	r2, r3, #1
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006720:	3b01      	subs	r3, #1
 8006722:	b29a      	uxth	r2, r3
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800672c:	b29b      	uxth	r3, r3
 800672e:	3b01      	subs	r3, #1
 8006730:	b29a      	uxth	r2, r3
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006736:	e10b      	b.n	8006950 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800673c:	2b02      	cmp	r3, #2
 800673e:	d14e      	bne.n	80067de <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006742:	9300      	str	r3, [sp, #0]
 8006744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006746:	2200      	movs	r2, #0
 8006748:	4906      	ldr	r1, [pc, #24]	; (8006764 <HAL_I2C_Master_Receive+0x22c>)
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f001 fed0 	bl	80084f0 <I2C_WaitOnFlagUntilTimeout>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d008      	beq.n	8006768 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e10e      	b.n	8006978 <HAL_I2C_Master_Receive+0x440>
 800675a:	bf00      	nop
 800675c:	00100002 	.word	0x00100002
 8006760:	ffff0000 	.word	0xffff0000
 8006764:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006776:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	691a      	ldr	r2, [r3, #16]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006782:	b2d2      	uxtb	r2, r2
 8006784:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678a:	1c5a      	adds	r2, r3, #1
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006794:	3b01      	subs	r3, #1
 8006796:	b29a      	uxth	r2, r3
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	3b01      	subs	r3, #1
 80067a4:	b29a      	uxth	r2, r3
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	691a      	ldr	r2, [r3, #16]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b4:	b2d2      	uxtb	r2, r2
 80067b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067bc:	1c5a      	adds	r2, r3, #1
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067c6:	3b01      	subs	r3, #1
 80067c8:	b29a      	uxth	r2, r3
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	3b01      	subs	r3, #1
 80067d6:	b29a      	uxth	r2, r3
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80067dc:	e0b8      	b.n	8006950 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80067de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e0:	9300      	str	r3, [sp, #0]
 80067e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e4:	2200      	movs	r2, #0
 80067e6:	4966      	ldr	r1, [pc, #408]	; (8006980 <HAL_I2C_Master_Receive+0x448>)
 80067e8:	68f8      	ldr	r0, [r7, #12]
 80067ea:	f001 fe81 	bl	80084f0 <I2C_WaitOnFlagUntilTimeout>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d001      	beq.n	80067f8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e0bf      	b.n	8006978 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006806:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	691a      	ldr	r2, [r3, #16]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006812:	b2d2      	uxtb	r2, r2
 8006814:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681a:	1c5a      	adds	r2, r3, #1
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006824:	3b01      	subs	r3, #1
 8006826:	b29a      	uxth	r2, r3
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006830:	b29b      	uxth	r3, r3
 8006832:	3b01      	subs	r3, #1
 8006834:	b29a      	uxth	r2, r3
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800683a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683c:	9300      	str	r3, [sp, #0]
 800683e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006840:	2200      	movs	r2, #0
 8006842:	494f      	ldr	r1, [pc, #316]	; (8006980 <HAL_I2C_Master_Receive+0x448>)
 8006844:	68f8      	ldr	r0, [r7, #12]
 8006846:	f001 fe53 	bl	80084f0 <I2C_WaitOnFlagUntilTimeout>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d001      	beq.n	8006854 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	e091      	b.n	8006978 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006862:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	691a      	ldr	r2, [r3, #16]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686e:	b2d2      	uxtb	r2, r2
 8006870:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006876:	1c5a      	adds	r2, r3, #1
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006880:	3b01      	subs	r3, #1
 8006882:	b29a      	uxth	r2, r3
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800688c:	b29b      	uxth	r3, r3
 800688e:	3b01      	subs	r3, #1
 8006890:	b29a      	uxth	r2, r3
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	691a      	ldr	r2, [r3, #16]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a0:	b2d2      	uxtb	r2, r2
 80068a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a8:	1c5a      	adds	r2, r3, #1
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068b2:	3b01      	subs	r3, #1
 80068b4:	b29a      	uxth	r2, r3
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068be:	b29b      	uxth	r3, r3
 80068c0:	3b01      	subs	r3, #1
 80068c2:	b29a      	uxth	r2, r3
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80068c8:	e042      	b.n	8006950 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80068ce:	68f8      	ldr	r0, [r7, #12]
 80068d0:	f001 ff98 	bl	8008804 <I2C_WaitOnRXNEFlagUntilTimeout>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d001      	beq.n	80068de <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e04c      	b.n	8006978 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	691a      	ldr	r2, [r3, #16]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e8:	b2d2      	uxtb	r2, r2
 80068ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f0:	1c5a      	adds	r2, r3, #1
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068fa:	3b01      	subs	r3, #1
 80068fc:	b29a      	uxth	r2, r3
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006906:	b29b      	uxth	r3, r3
 8006908:	3b01      	subs	r3, #1
 800690a:	b29a      	uxth	r2, r3
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	695b      	ldr	r3, [r3, #20]
 8006916:	f003 0304 	and.w	r3, r3, #4
 800691a:	2b04      	cmp	r3, #4
 800691c:	d118      	bne.n	8006950 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	691a      	ldr	r2, [r3, #16]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006928:	b2d2      	uxtb	r2, r2
 800692a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006930:	1c5a      	adds	r2, r3, #1
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800693a:	3b01      	subs	r3, #1
 800693c:	b29a      	uxth	r2, r3
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006946:	b29b      	uxth	r3, r3
 8006948:	3b01      	subs	r3, #1
 800694a:	b29a      	uxth	r2, r3
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006954:	2b00      	cmp	r3, #0
 8006956:	f47f aec2 	bne.w	80066de <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2220      	movs	r2, #32
 800695e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2200      	movs	r2, #0
 800696e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006972:	2300      	movs	r3, #0
 8006974:	e000      	b.n	8006978 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006976:	2302      	movs	r3, #2
  }
}
 8006978:	4618      	mov	r0, r3
 800697a:	3728      	adds	r7, #40	; 0x28
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}
 8006980:	00010004 	.word	0x00010004

08006984 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b088      	sub	sp, #32
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800698c:	2300      	movs	r3, #0
 800698e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800699c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069a4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069ac:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80069ae:	7bfb      	ldrb	r3, [r7, #15]
 80069b0:	2b10      	cmp	r3, #16
 80069b2:	d003      	beq.n	80069bc <HAL_I2C_EV_IRQHandler+0x38>
 80069b4:	7bfb      	ldrb	r3, [r7, #15]
 80069b6:	2b40      	cmp	r3, #64	; 0x40
 80069b8:	f040 80b1 	bne.w	8006b1e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	699b      	ldr	r3, [r3, #24]
 80069c2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	695b      	ldr	r3, [r3, #20]
 80069ca:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80069cc:	69fb      	ldr	r3, [r7, #28]
 80069ce:	f003 0301 	and.w	r3, r3, #1
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d10d      	bne.n	80069f2 <HAL_I2C_EV_IRQHandler+0x6e>
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80069dc:	d003      	beq.n	80069e6 <HAL_I2C_EV_IRQHandler+0x62>
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80069e4:	d101      	bne.n	80069ea <HAL_I2C_EV_IRQHandler+0x66>
 80069e6:	2301      	movs	r3, #1
 80069e8:	e000      	b.n	80069ec <HAL_I2C_EV_IRQHandler+0x68>
 80069ea:	2300      	movs	r3, #0
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	f000 8114 	beq.w	8006c1a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	f003 0301 	and.w	r3, r3, #1
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d00b      	beq.n	8006a14 <HAL_I2C_EV_IRQHandler+0x90>
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d006      	beq.n	8006a14 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f001 ff81 	bl	800890e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 fd5e 	bl	80074ce <I2C_Master_SB>
 8006a12:	e083      	b.n	8006b1c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	f003 0308 	and.w	r3, r3, #8
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d008      	beq.n	8006a30 <HAL_I2C_EV_IRQHandler+0xac>
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d003      	beq.n	8006a30 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 fdd6 	bl	80075da <I2C_Master_ADD10>
 8006a2e:	e075      	b.n	8006b1c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a30:	69fb      	ldr	r3, [r7, #28]
 8006a32:	f003 0302 	and.w	r3, r3, #2
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d008      	beq.n	8006a4c <HAL_I2C_EV_IRQHandler+0xc8>
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d003      	beq.n	8006a4c <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 fdf2 	bl	800762e <I2C_Master_ADDR>
 8006a4a:	e067      	b.n	8006b1c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	f003 0304 	and.w	r3, r3, #4
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d036      	beq.n	8006ac4 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a64:	f000 80db 	beq.w	8006c1e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d00d      	beq.n	8006a8e <HAL_I2C_EV_IRQHandler+0x10a>
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d008      	beq.n	8006a8e <HAL_I2C_EV_IRQHandler+0x10a>
 8006a7c:	69fb      	ldr	r3, [r7, #28]
 8006a7e:	f003 0304 	and.w	r3, r3, #4
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d103      	bne.n	8006a8e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 f9d6 	bl	8006e38 <I2C_MasterTransmit_TXE>
 8006a8c:	e046      	b.n	8006b1c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	f003 0304 	and.w	r3, r3, #4
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f000 80c2 	beq.w	8006c1e <HAL_I2C_EV_IRQHandler+0x29a>
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	f000 80bc 	beq.w	8006c1e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006aa6:	7bbb      	ldrb	r3, [r7, #14]
 8006aa8:	2b21      	cmp	r3, #33	; 0x21
 8006aaa:	d103      	bne.n	8006ab4 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 fa5f 	bl	8006f70 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ab2:	e0b4      	b.n	8006c1e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006ab4:	7bfb      	ldrb	r3, [r7, #15]
 8006ab6:	2b40      	cmp	r3, #64	; 0x40
 8006ab8:	f040 80b1 	bne.w	8006c1e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 facd 	bl	800705c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ac2:	e0ac      	b.n	8006c1e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ace:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ad2:	f000 80a4 	beq.w	8006c1e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d00d      	beq.n	8006afc <HAL_I2C_EV_IRQHandler+0x178>
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d008      	beq.n	8006afc <HAL_I2C_EV_IRQHandler+0x178>
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	f003 0304 	and.w	r3, r3, #4
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d103      	bne.n	8006afc <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 fb45 	bl	8007184 <I2C_MasterReceive_RXNE>
 8006afa:	e00f      	b.n	8006b1c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	f003 0304 	and.w	r3, r3, #4
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	f000 808b 	beq.w	8006c1e <HAL_I2C_EV_IRQHandler+0x29a>
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	f000 8085 	beq.w	8006c1e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 fbf0 	bl	80072fa <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b1a:	e080      	b.n	8006c1e <HAL_I2C_EV_IRQHandler+0x29a>
 8006b1c:	e07f      	b.n	8006c1e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d004      	beq.n	8006b30 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	695b      	ldr	r3, [r3, #20]
 8006b2c:	61fb      	str	r3, [r7, #28]
 8006b2e:	e007      	b.n	8006b40 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	699b      	ldr	r3, [r3, #24]
 8006b36:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	695b      	ldr	r3, [r3, #20]
 8006b3e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	f003 0302 	and.w	r3, r3, #2
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d011      	beq.n	8006b6e <HAL_I2C_EV_IRQHandler+0x1ea>
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d00c      	beq.n	8006b6e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d003      	beq.n	8006b64 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	699b      	ldr	r3, [r3, #24]
 8006b62:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006b64:	69b9      	ldr	r1, [r7, #24]
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 ffb0 	bl	8007acc <I2C_Slave_ADDR>
 8006b6c:	e05a      	b.n	8006c24 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	f003 0310 	and.w	r3, r3, #16
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d008      	beq.n	8006b8a <HAL_I2C_EV_IRQHandler+0x206>
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d003      	beq.n	8006b8a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 ffea 	bl	8007b5c <I2C_Slave_STOPF>
 8006b88:	e04c      	b.n	8006c24 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006b8a:	7bbb      	ldrb	r3, [r7, #14]
 8006b8c:	2b21      	cmp	r3, #33	; 0x21
 8006b8e:	d002      	beq.n	8006b96 <HAL_I2C_EV_IRQHandler+0x212>
 8006b90:	7bbb      	ldrb	r3, [r7, #14]
 8006b92:	2b29      	cmp	r3, #41	; 0x29
 8006b94:	d120      	bne.n	8006bd8 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006b96:	69fb      	ldr	r3, [r7, #28]
 8006b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d00d      	beq.n	8006bbc <HAL_I2C_EV_IRQHandler+0x238>
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d008      	beq.n	8006bbc <HAL_I2C_EV_IRQHandler+0x238>
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	f003 0304 	and.w	r3, r3, #4
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d103      	bne.n	8006bbc <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 fecb 	bl	8007950 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006bba:	e032      	b.n	8006c22 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	f003 0304 	and.w	r3, r3, #4
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d02d      	beq.n	8006c22 <HAL_I2C_EV_IRQHandler+0x29e>
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d028      	beq.n	8006c22 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 fefa 	bl	80079ca <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006bd6:	e024      	b.n	8006c22 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00d      	beq.n	8006bfe <HAL_I2C_EV_IRQHandler+0x27a>
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d008      	beq.n	8006bfe <HAL_I2C_EV_IRQHandler+0x27a>
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	f003 0304 	and.w	r3, r3, #4
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d103      	bne.n	8006bfe <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 ff08 	bl	8007a0c <I2C_SlaveReceive_RXNE>
 8006bfc:	e012      	b.n	8006c24 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	f003 0304 	and.w	r3, r3, #4
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d00d      	beq.n	8006c24 <HAL_I2C_EV_IRQHandler+0x2a0>
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d008      	beq.n	8006c24 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 ff38 	bl	8007a88 <I2C_SlaveReceive_BTF>
 8006c18:	e004      	b.n	8006c24 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8006c1a:	bf00      	nop
 8006c1c:	e002      	b.n	8006c24 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c1e:	bf00      	nop
 8006c20:	e000      	b.n	8006c24 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006c22:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006c24:	3720      	adds	r7, #32
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}

08006c2a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006c2a:	b580      	push	{r7, lr}
 8006c2c:	b08a      	sub	sp, #40	; 0x28
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	695b      	ldr	r3, [r3, #20]
 8006c38:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8006c42:	2300      	movs	r3, #0
 8006c44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c4c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006c4e:	6a3b      	ldr	r3, [r7, #32]
 8006c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d00d      	beq.n	8006c74 <HAL_I2C_ER_IRQHandler+0x4a>
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d008      	beq.n	8006c74 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8006c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c64:	f043 0301 	orr.w	r3, r3, #1
 8006c68:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006c72:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006c74:	6a3b      	ldr	r3, [r7, #32]
 8006c76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00d      	beq.n	8006c9a <HAL_I2C_ER_IRQHandler+0x70>
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d008      	beq.n	8006c9a <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8a:	f043 0302 	orr.w	r3, r3, #2
 8006c8e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006c98:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006c9a:	6a3b      	ldr	r3, [r7, #32]
 8006c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d03e      	beq.n	8006d22 <HAL_I2C_ER_IRQHandler+0xf8>
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d039      	beq.n	8006d22 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8006cae:	7efb      	ldrb	r3, [r7, #27]
 8006cb0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cc0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006cc8:	7ebb      	ldrb	r3, [r7, #26]
 8006cca:	2b20      	cmp	r3, #32
 8006ccc:	d112      	bne.n	8006cf4 <HAL_I2C_ER_IRQHandler+0xca>
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d10f      	bne.n	8006cf4 <HAL_I2C_ER_IRQHandler+0xca>
 8006cd4:	7cfb      	ldrb	r3, [r7, #19]
 8006cd6:	2b21      	cmp	r3, #33	; 0x21
 8006cd8:	d008      	beq.n	8006cec <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006cda:	7cfb      	ldrb	r3, [r7, #19]
 8006cdc:	2b29      	cmp	r3, #41	; 0x29
 8006cde:	d005      	beq.n	8006cec <HAL_I2C_ER_IRQHandler+0xc2>
 8006ce0:	7cfb      	ldrb	r3, [r7, #19]
 8006ce2:	2b28      	cmp	r3, #40	; 0x28
 8006ce4:	d106      	bne.n	8006cf4 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2b21      	cmp	r3, #33	; 0x21
 8006cea:	d103      	bne.n	8006cf4 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f001 f865 	bl	8007dbc <I2C_Slave_AF>
 8006cf2:	e016      	b.n	8006d22 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006cfc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d00:	f043 0304 	orr.w	r3, r3, #4
 8006d04:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006d06:	7efb      	ldrb	r3, [r7, #27]
 8006d08:	2b10      	cmp	r3, #16
 8006d0a:	d002      	beq.n	8006d12 <HAL_I2C_ER_IRQHandler+0xe8>
 8006d0c:	7efb      	ldrb	r3, [r7, #27]
 8006d0e:	2b40      	cmp	r3, #64	; 0x40
 8006d10:	d107      	bne.n	8006d22 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d20:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006d22:	6a3b      	ldr	r3, [r7, #32]
 8006d24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d00d      	beq.n	8006d48 <HAL_I2C_ER_IRQHandler+0x11e>
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d008      	beq.n	8006d48 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d38:	f043 0308 	orr.w	r3, r3, #8
 8006d3c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8006d46:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d008      	beq.n	8006d60 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d54:	431a      	orrs	r2, r3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f001 f89e 	bl	8007e9c <I2C_ITError>
  }
}
 8006d60:	bf00      	nop
 8006d62:	3728      	adds	r7, #40	; 0x28
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006d70:	bf00      	nop
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006d84:	bf00      	nop
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006d98:	bf00      	nop
 8006d9a:	370c      	adds	r7, #12
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006dac:	bf00      	nop
 8006dae:	370c      	adds	r7, #12
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	70fb      	strb	r3, [r7, #3]
 8006dc4:	4613      	mov	r3, r2
 8006dc6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006dc8:	bf00      	nop
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006ddc:	bf00      	nop
 8006dde:	370c      	adds	r7, #12
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006df0:	bf00      	nop
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006e04:	bf00      	nop
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006e18:	bf00      	nop
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006e2c:	bf00      	nop
 8006e2e:	370c      	adds	r7, #12
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e46:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e4e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e54:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d150      	bne.n	8006f00 <I2C_MasterTransmit_TXE+0xc8>
 8006e5e:	7bfb      	ldrb	r3, [r7, #15]
 8006e60:	2b21      	cmp	r3, #33	; 0x21
 8006e62:	d14d      	bne.n	8006f00 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	2b08      	cmp	r3, #8
 8006e68:	d01d      	beq.n	8006ea6 <I2C_MasterTransmit_TXE+0x6e>
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	2b20      	cmp	r3, #32
 8006e6e:	d01a      	beq.n	8006ea6 <I2C_MasterTransmit_TXE+0x6e>
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006e76:	d016      	beq.n	8006ea6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	685a      	ldr	r2, [r3, #4]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e86:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2211      	movs	r2, #17
 8006e8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2220      	movs	r2, #32
 8006e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f7ff ff62 	bl	8006d68 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006ea4:	e060      	b.n	8006f68 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	685a      	ldr	r2, [r3, #4]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006eb4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ec4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2220      	movs	r2, #32
 8006ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	2b40      	cmp	r3, #64	; 0x40
 8006ede:	d107      	bne.n	8006ef0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f7ff ff7d 	bl	8006de8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006eee:	e03b      	b.n	8006f68 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f7ff ff35 	bl	8006d68 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006efe:	e033      	b.n	8006f68 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006f00:	7bfb      	ldrb	r3, [r7, #15]
 8006f02:	2b21      	cmp	r3, #33	; 0x21
 8006f04:	d005      	beq.n	8006f12 <I2C_MasterTransmit_TXE+0xda>
 8006f06:	7bbb      	ldrb	r3, [r7, #14]
 8006f08:	2b40      	cmp	r3, #64	; 0x40
 8006f0a:	d12d      	bne.n	8006f68 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006f0c:	7bfb      	ldrb	r3, [r7, #15]
 8006f0e:	2b22      	cmp	r3, #34	; 0x22
 8006f10:	d12a      	bne.n	8006f68 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d108      	bne.n	8006f2e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	685a      	ldr	r2, [r3, #4]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f2a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006f2c:	e01c      	b.n	8006f68 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	2b40      	cmp	r3, #64	; 0x40
 8006f38:	d103      	bne.n	8006f42 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 f88e 	bl	800705c <I2C_MemoryTransmit_TXE_BTF>
}
 8006f40:	e012      	b.n	8006f68 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f46:	781a      	ldrb	r2, [r3, #0]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f52:	1c5a      	adds	r2, r3, #1
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	3b01      	subs	r3, #1
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006f66:	e7ff      	b.n	8006f68 <I2C_MasterTransmit_TXE+0x130>
 8006f68:	bf00      	nop
 8006f6a:	3710      	adds	r7, #16
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f7c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	2b21      	cmp	r3, #33	; 0x21
 8006f88:	d164      	bne.n	8007054 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d012      	beq.n	8006fba <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f98:	781a      	ldrb	r2, [r3, #0]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa4:	1c5a      	adds	r2, r3, #1
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	b29a      	uxth	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006fb8:	e04c      	b.n	8007054 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2b08      	cmp	r3, #8
 8006fbe:	d01d      	beq.n	8006ffc <I2C_MasterTransmit_BTF+0x8c>
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2b20      	cmp	r3, #32
 8006fc4:	d01a      	beq.n	8006ffc <I2C_MasterTransmit_BTF+0x8c>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006fcc:	d016      	beq.n	8006ffc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	685a      	ldr	r2, [r3, #4]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006fdc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2211      	movs	r2, #17
 8006fe2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2220      	movs	r2, #32
 8006ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f7ff feb7 	bl	8006d68 <HAL_I2C_MasterTxCpltCallback>
}
 8006ffa:	e02b      	b.n	8007054 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	685a      	ldr	r2, [r3, #4]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800700a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800701a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2220      	movs	r2, #32
 8007026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007030:	b2db      	uxtb	r3, r3
 8007032:	2b40      	cmp	r3, #64	; 0x40
 8007034:	d107      	bne.n	8007046 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f7ff fed2 	bl	8006de8 <HAL_I2C_MemTxCpltCallback>
}
 8007044:	e006      	b.n	8007054 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f7ff fe8a 	bl	8006d68 <HAL_I2C_MasterTxCpltCallback>
}
 8007054:	bf00      	nop
 8007056:	3710      	adds	r7, #16
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800706a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007070:	2b00      	cmp	r3, #0
 8007072:	d11d      	bne.n	80070b0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007078:	2b01      	cmp	r3, #1
 800707a:	d10b      	bne.n	8007094 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007080:	b2da      	uxtb	r2, r3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800708c:	1c9a      	adds	r2, r3, #2
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8007092:	e073      	b.n	800717c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007098:	b29b      	uxth	r3, r3
 800709a:	121b      	asrs	r3, r3, #8
 800709c:	b2da      	uxtb	r2, r3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070a8:	1c5a      	adds	r2, r3, #1
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	651a      	str	r2, [r3, #80]	; 0x50
}
 80070ae:	e065      	b.n	800717c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d10b      	bne.n	80070d0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070bc:	b2da      	uxtb	r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070c8:	1c5a      	adds	r2, r3, #1
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80070ce:	e055      	b.n	800717c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070d4:	2b02      	cmp	r3, #2
 80070d6:	d151      	bne.n	800717c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80070d8:	7bfb      	ldrb	r3, [r7, #15]
 80070da:	2b22      	cmp	r3, #34	; 0x22
 80070dc:	d10d      	bne.n	80070fa <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070ec:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070f2:	1c5a      	adds	r2, r3, #1
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80070f8:	e040      	b.n	800717c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070fe:	b29b      	uxth	r3, r3
 8007100:	2b00      	cmp	r3, #0
 8007102:	d015      	beq.n	8007130 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8007104:	7bfb      	ldrb	r3, [r7, #15]
 8007106:	2b21      	cmp	r3, #33	; 0x21
 8007108:	d112      	bne.n	8007130 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710e:	781a      	ldrb	r2, [r3, #0]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711a:	1c5a      	adds	r2, r3, #1
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007124:	b29b      	uxth	r3, r3
 8007126:	3b01      	subs	r3, #1
 8007128:	b29a      	uxth	r2, r3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800712e:	e025      	b.n	800717c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007134:	b29b      	uxth	r3, r3
 8007136:	2b00      	cmp	r3, #0
 8007138:	d120      	bne.n	800717c <I2C_MemoryTransmit_TXE_BTF+0x120>
 800713a:	7bfb      	ldrb	r3, [r7, #15]
 800713c:	2b21      	cmp	r3, #33	; 0x21
 800713e:	d11d      	bne.n	800717c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	685a      	ldr	r2, [r3, #4]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800714e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800715e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2220      	movs	r2, #32
 800716a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f7ff fe36 	bl	8006de8 <HAL_I2C_MemTxCpltCallback>
}
 800717c:	bf00      	nop
 800717e:	3710      	adds	r7, #16
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007192:	b2db      	uxtb	r3, r3
 8007194:	2b22      	cmp	r3, #34	; 0x22
 8007196:	f040 80ac 	bne.w	80072f2 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800719e:	b29b      	uxth	r3, r3
 80071a0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2b03      	cmp	r3, #3
 80071a6:	d921      	bls.n	80071ec <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	691a      	ldr	r2, [r3, #16]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b2:	b2d2      	uxtb	r2, r2
 80071b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ba:	1c5a      	adds	r2, r3, #1
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	3b01      	subs	r3, #1
 80071c8:	b29a      	uxth	r2, r3
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	2b03      	cmp	r3, #3
 80071d6:	f040 808c 	bne.w	80072f2 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	685a      	ldr	r2, [r3, #4]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071e8:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80071ea:	e082      	b.n	80072f2 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f0:	2b02      	cmp	r3, #2
 80071f2:	d075      	beq.n	80072e0 <I2C_MasterReceive_RXNE+0x15c>
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d002      	beq.n	8007200 <I2C_MasterReceive_RXNE+0x7c>
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d16f      	bne.n	80072e0 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f001 facd 	bl	80087a0 <I2C_WaitOnSTOPRequestThroughIT>
 8007206:	4603      	mov	r3, r0
 8007208:	2b00      	cmp	r3, #0
 800720a:	d142      	bne.n	8007292 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800721a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	685a      	ldr	r2, [r3, #4]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800722a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	691a      	ldr	r2, [r3, #16]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007236:	b2d2      	uxtb	r2, r2
 8007238:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723e:	1c5a      	adds	r2, r3, #1
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007248:	b29b      	uxth	r3, r3
 800724a:	3b01      	subs	r3, #1
 800724c:	b29a      	uxth	r2, r3
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2220      	movs	r2, #32
 8007256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007260:	b2db      	uxtb	r3, r3
 8007262:	2b40      	cmp	r3, #64	; 0x40
 8007264:	d10a      	bne.n	800727c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f7ff fdc1 	bl	8006dfc <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800727a:	e03a      	b.n	80072f2 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2212      	movs	r2, #18
 8007288:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f7ff fd76 	bl	8006d7c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007290:	e02f      	b.n	80072f2 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	685a      	ldr	r2, [r3, #4]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80072a0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	691a      	ldr	r2, [r3, #16]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ac:	b2d2      	uxtb	r2, r2
 80072ae:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b4:	1c5a      	adds	r2, r3, #1
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072be:	b29b      	uxth	r3, r3
 80072c0:	3b01      	subs	r3, #1
 80072c2:	b29a      	uxth	r2, r3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2220      	movs	r2, #32
 80072cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f7ff fd99 	bl	8006e10 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80072de:	e008      	b.n	80072f2 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	685a      	ldr	r2, [r3, #4]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072ee:	605a      	str	r2, [r3, #4]
}
 80072f0:	e7ff      	b.n	80072f2 <I2C_MasterReceive_RXNE+0x16e>
 80072f2:	bf00      	nop
 80072f4:	3710      	adds	r7, #16
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b084      	sub	sp, #16
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007306:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800730c:	b29b      	uxth	r3, r3
 800730e:	2b04      	cmp	r3, #4
 8007310:	d11b      	bne.n	800734a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	685a      	ldr	r2, [r3, #4]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007320:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	691a      	ldr	r2, [r3, #16]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732c:	b2d2      	uxtb	r2, r2
 800732e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007334:	1c5a      	adds	r2, r3, #1
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800733e:	b29b      	uxth	r3, r3
 8007340:	3b01      	subs	r3, #1
 8007342:	b29a      	uxth	r2, r3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007348:	e0bd      	b.n	80074c6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800734e:	b29b      	uxth	r3, r3
 8007350:	2b03      	cmp	r3, #3
 8007352:	d129      	bne.n	80073a8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	685a      	ldr	r2, [r3, #4]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007362:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2b04      	cmp	r3, #4
 8007368:	d00a      	beq.n	8007380 <I2C_MasterReceive_BTF+0x86>
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2b02      	cmp	r3, #2
 800736e:	d007      	beq.n	8007380 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800737e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	691a      	ldr	r2, [r3, #16]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738a:	b2d2      	uxtb	r2, r2
 800738c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007392:	1c5a      	adds	r2, r3, #1
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800739c:	b29b      	uxth	r3, r3
 800739e:	3b01      	subs	r3, #1
 80073a0:	b29a      	uxth	r2, r3
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80073a6:	e08e      	b.n	80074c6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	2b02      	cmp	r3, #2
 80073b0:	d176      	bne.n	80074a0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d002      	beq.n	80073be <I2C_MasterReceive_BTF+0xc4>
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2b10      	cmp	r3, #16
 80073bc:	d108      	bne.n	80073d0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073cc:	601a      	str	r2, [r3, #0]
 80073ce:	e019      	b.n	8007404 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2b04      	cmp	r3, #4
 80073d4:	d002      	beq.n	80073dc <I2C_MasterReceive_BTF+0xe2>
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2b02      	cmp	r3, #2
 80073da:	d108      	bne.n	80073ee <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80073ea:	601a      	str	r2, [r3, #0]
 80073ec:	e00a      	b.n	8007404 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2b10      	cmp	r3, #16
 80073f2:	d007      	beq.n	8007404 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007402:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	691a      	ldr	r2, [r3, #16]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740e:	b2d2      	uxtb	r2, r2
 8007410:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007416:	1c5a      	adds	r2, r3, #1
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007420:	b29b      	uxth	r3, r3
 8007422:	3b01      	subs	r3, #1
 8007424:	b29a      	uxth	r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	691a      	ldr	r2, [r3, #16]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007434:	b2d2      	uxtb	r2, r2
 8007436:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743c:	1c5a      	adds	r2, r3, #1
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007446:	b29b      	uxth	r3, r3
 8007448:	3b01      	subs	r3, #1
 800744a:	b29a      	uxth	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	685a      	ldr	r2, [r3, #4]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800745e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2220      	movs	r2, #32
 8007464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800746e:	b2db      	uxtb	r3, r3
 8007470:	2b40      	cmp	r3, #64	; 0x40
 8007472:	d10a      	bne.n	800748a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f7ff fcba 	bl	8006dfc <HAL_I2C_MemRxCpltCallback>
}
 8007488:	e01d      	b.n	80074c6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2212      	movs	r2, #18
 8007496:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f7ff fc6f 	bl	8006d7c <HAL_I2C_MasterRxCpltCallback>
}
 800749e:	e012      	b.n	80074c6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	691a      	ldr	r2, [r3, #16]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074aa:	b2d2      	uxtb	r2, r2
 80074ac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b2:	1c5a      	adds	r2, r3, #1
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074bc:	b29b      	uxth	r3, r3
 80074be:	3b01      	subs	r3, #1
 80074c0:	b29a      	uxth	r2, r3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80074c6:	bf00      	nop
 80074c8:	3710      	adds	r7, #16
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}

080074ce <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80074ce:	b480      	push	{r7}
 80074d0:	b083      	sub	sp, #12
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	2b40      	cmp	r3, #64	; 0x40
 80074e0:	d117      	bne.n	8007512 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d109      	bne.n	80074fe <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	461a      	mov	r2, r3
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80074fa:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80074fc:	e067      	b.n	80075ce <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007502:	b2db      	uxtb	r3, r3
 8007504:	f043 0301 	orr.w	r3, r3, #1
 8007508:	b2da      	uxtb	r2, r3
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	611a      	str	r2, [r3, #16]
}
 8007510:	e05d      	b.n	80075ce <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	691b      	ldr	r3, [r3, #16]
 8007516:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800751a:	d133      	bne.n	8007584 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007522:	b2db      	uxtb	r3, r3
 8007524:	2b21      	cmp	r3, #33	; 0x21
 8007526:	d109      	bne.n	800753c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800752c:	b2db      	uxtb	r3, r3
 800752e:	461a      	mov	r2, r3
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007538:	611a      	str	r2, [r3, #16]
 800753a:	e008      	b.n	800754e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007540:	b2db      	uxtb	r3, r3
 8007542:	f043 0301 	orr.w	r3, r3, #1
 8007546:	b2da      	uxtb	r2, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007552:	2b00      	cmp	r3, #0
 8007554:	d004      	beq.n	8007560 <I2C_Master_SB+0x92>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800755a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800755c:	2b00      	cmp	r3, #0
 800755e:	d108      	bne.n	8007572 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007564:	2b00      	cmp	r3, #0
 8007566:	d032      	beq.n	80075ce <I2C_Master_SB+0x100>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800756c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800756e:	2b00      	cmp	r3, #0
 8007570:	d02d      	beq.n	80075ce <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	685a      	ldr	r2, [r3, #4]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007580:	605a      	str	r2, [r3, #4]
}
 8007582:	e024      	b.n	80075ce <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007588:	2b00      	cmp	r3, #0
 800758a:	d10e      	bne.n	80075aa <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007590:	b29b      	uxth	r3, r3
 8007592:	11db      	asrs	r3, r3, #7
 8007594:	b2db      	uxtb	r3, r3
 8007596:	f003 0306 	and.w	r3, r3, #6
 800759a:	b2db      	uxtb	r3, r3
 800759c:	f063 030f 	orn	r3, r3, #15
 80075a0:	b2da      	uxtb	r2, r3
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	611a      	str	r2, [r3, #16]
}
 80075a8:	e011      	b.n	80075ce <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d10d      	bne.n	80075ce <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	11db      	asrs	r3, r3, #7
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	f003 0306 	and.w	r3, r3, #6
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	f063 030e 	orn	r3, r3, #14
 80075c6:	b2da      	uxtb	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	611a      	str	r2, [r3, #16]
}
 80075ce:	bf00      	nop
 80075d0:	370c      	adds	r7, #12
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr

080075da <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80075da:	b480      	push	{r7}
 80075dc:	b083      	sub	sp, #12
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075e6:	b2da      	uxtb	r2, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d004      	beq.n	8007600 <I2C_Master_ADD10+0x26>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d108      	bne.n	8007612 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007604:	2b00      	cmp	r3, #0
 8007606:	d00c      	beq.n	8007622 <I2C_Master_ADD10+0x48>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800760c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800760e:	2b00      	cmp	r3, #0
 8007610:	d007      	beq.n	8007622 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	685a      	ldr	r2, [r3, #4]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007620:	605a      	str	r2, [r3, #4]
  }
}
 8007622:	bf00      	nop
 8007624:	370c      	adds	r7, #12
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr

0800762e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800762e:	b480      	push	{r7}
 8007630:	b091      	sub	sp, #68	; 0x44
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800763c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007644:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800764a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007652:	b2db      	uxtb	r3, r3
 8007654:	2b22      	cmp	r3, #34	; 0x22
 8007656:	f040 8169 	bne.w	800792c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800765e:	2b00      	cmp	r3, #0
 8007660:	d10f      	bne.n	8007682 <I2C_Master_ADDR+0x54>
 8007662:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007666:	2b40      	cmp	r3, #64	; 0x40
 8007668:	d10b      	bne.n	8007682 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800766a:	2300      	movs	r3, #0
 800766c:	633b      	str	r3, [r7, #48]	; 0x30
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	695b      	ldr	r3, [r3, #20]
 8007674:	633b      	str	r3, [r7, #48]	; 0x30
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	699b      	ldr	r3, [r3, #24]
 800767c:	633b      	str	r3, [r7, #48]	; 0x30
 800767e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007680:	e160      	b.n	8007944 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007686:	2b00      	cmp	r3, #0
 8007688:	d11d      	bne.n	80076c6 <I2C_Master_ADDR+0x98>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	691b      	ldr	r3, [r3, #16]
 800768e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007692:	d118      	bne.n	80076c6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007694:	2300      	movs	r3, #0
 8007696:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	695b      	ldr	r3, [r3, #20]
 800769e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	699b      	ldr	r3, [r3, #24]
 80076a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076b8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076be:	1c5a      	adds	r2, r3, #1
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	651a      	str	r2, [r3, #80]	; 0x50
 80076c4:	e13e      	b.n	8007944 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d113      	bne.n	80076f8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076d0:	2300      	movs	r3, #0
 80076d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	695b      	ldr	r3, [r3, #20]
 80076da:	62bb      	str	r3, [r7, #40]	; 0x28
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	699b      	ldr	r3, [r3, #24]
 80076e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80076e4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076f4:	601a      	str	r2, [r3, #0]
 80076f6:	e115      	b.n	8007924 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	2b01      	cmp	r3, #1
 8007700:	f040 808a 	bne.w	8007818 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007706:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800770a:	d137      	bne.n	800777c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800771a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007726:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800772a:	d113      	bne.n	8007754 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800773a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800773c:	2300      	movs	r3, #0
 800773e:	627b      	str	r3, [r7, #36]	; 0x24
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	695b      	ldr	r3, [r3, #20]
 8007746:	627b      	str	r3, [r7, #36]	; 0x24
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	699b      	ldr	r3, [r3, #24]
 800774e:	627b      	str	r3, [r7, #36]	; 0x24
 8007750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007752:	e0e7      	b.n	8007924 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007754:	2300      	movs	r3, #0
 8007756:	623b      	str	r3, [r7, #32]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	695b      	ldr	r3, [r3, #20]
 800775e:	623b      	str	r3, [r7, #32]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	699b      	ldr	r3, [r3, #24]
 8007766:	623b      	str	r3, [r7, #32]
 8007768:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007778:	601a      	str	r2, [r3, #0]
 800777a:	e0d3      	b.n	8007924 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800777c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800777e:	2b08      	cmp	r3, #8
 8007780:	d02e      	beq.n	80077e0 <I2C_Master_ADDR+0x1b2>
 8007782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007784:	2b20      	cmp	r3, #32
 8007786:	d02b      	beq.n	80077e0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800778a:	2b12      	cmp	r3, #18
 800778c:	d102      	bne.n	8007794 <I2C_Master_ADDR+0x166>
 800778e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007790:	2b01      	cmp	r3, #1
 8007792:	d125      	bne.n	80077e0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007796:	2b04      	cmp	r3, #4
 8007798:	d00e      	beq.n	80077b8 <I2C_Master_ADDR+0x18a>
 800779a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800779c:	2b02      	cmp	r3, #2
 800779e:	d00b      	beq.n	80077b8 <I2C_Master_ADDR+0x18a>
 80077a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a2:	2b10      	cmp	r3, #16
 80077a4:	d008      	beq.n	80077b8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077b4:	601a      	str	r2, [r3, #0]
 80077b6:	e007      	b.n	80077c8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80077c6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077c8:	2300      	movs	r3, #0
 80077ca:	61fb      	str	r3, [r7, #28]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	695b      	ldr	r3, [r3, #20]
 80077d2:	61fb      	str	r3, [r7, #28]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	699b      	ldr	r3, [r3, #24]
 80077da:	61fb      	str	r3, [r7, #28]
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	e0a1      	b.n	8007924 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077ee:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077f0:	2300      	movs	r3, #0
 80077f2:	61bb      	str	r3, [r7, #24]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	695b      	ldr	r3, [r3, #20]
 80077fa:	61bb      	str	r3, [r7, #24]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	699b      	ldr	r3, [r3, #24]
 8007802:	61bb      	str	r3, [r7, #24]
 8007804:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007814:	601a      	str	r2, [r3, #0]
 8007816:	e085      	b.n	8007924 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800781c:	b29b      	uxth	r3, r3
 800781e:	2b02      	cmp	r3, #2
 8007820:	d14d      	bne.n	80078be <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007824:	2b04      	cmp	r3, #4
 8007826:	d016      	beq.n	8007856 <I2C_Master_ADDR+0x228>
 8007828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800782a:	2b02      	cmp	r3, #2
 800782c:	d013      	beq.n	8007856 <I2C_Master_ADDR+0x228>
 800782e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007830:	2b10      	cmp	r3, #16
 8007832:	d010      	beq.n	8007856 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007842:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007852:	601a      	str	r2, [r3, #0]
 8007854:	e007      	b.n	8007866 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007864:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007870:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007874:	d117      	bne.n	80078a6 <I2C_Master_ADDR+0x278>
 8007876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007878:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800787c:	d00b      	beq.n	8007896 <I2C_Master_ADDR+0x268>
 800787e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007880:	2b01      	cmp	r3, #1
 8007882:	d008      	beq.n	8007896 <I2C_Master_ADDR+0x268>
 8007884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007886:	2b08      	cmp	r3, #8
 8007888:	d005      	beq.n	8007896 <I2C_Master_ADDR+0x268>
 800788a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800788c:	2b10      	cmp	r3, #16
 800788e:	d002      	beq.n	8007896 <I2C_Master_ADDR+0x268>
 8007890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007892:	2b20      	cmp	r3, #32
 8007894:	d107      	bne.n	80078a6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	685a      	ldr	r2, [r3, #4]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80078a4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078a6:	2300      	movs	r3, #0
 80078a8:	617b      	str	r3, [r7, #20]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	695b      	ldr	r3, [r3, #20]
 80078b0:	617b      	str	r3, [r7, #20]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	699b      	ldr	r3, [r3, #24]
 80078b8:	617b      	str	r3, [r7, #20]
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	e032      	b.n	8007924 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80078cc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078dc:	d117      	bne.n	800790e <I2C_Master_ADDR+0x2e0>
 80078de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80078e4:	d00b      	beq.n	80078fe <I2C_Master_ADDR+0x2d0>
 80078e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d008      	beq.n	80078fe <I2C_Master_ADDR+0x2d0>
 80078ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ee:	2b08      	cmp	r3, #8
 80078f0:	d005      	beq.n	80078fe <I2C_Master_ADDR+0x2d0>
 80078f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f4:	2b10      	cmp	r3, #16
 80078f6:	d002      	beq.n	80078fe <I2C_Master_ADDR+0x2d0>
 80078f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078fa:	2b20      	cmp	r3, #32
 80078fc:	d107      	bne.n	800790e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	685a      	ldr	r2, [r3, #4]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800790c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800790e:	2300      	movs	r3, #0
 8007910:	613b      	str	r3, [r7, #16]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	695b      	ldr	r3, [r3, #20]
 8007918:	613b      	str	r3, [r7, #16]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	699b      	ldr	r3, [r3, #24]
 8007920:	613b      	str	r3, [r7, #16]
 8007922:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2200      	movs	r2, #0
 8007928:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800792a:	e00b      	b.n	8007944 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800792c:	2300      	movs	r3, #0
 800792e:	60fb      	str	r3, [r7, #12]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	695b      	ldr	r3, [r3, #20]
 8007936:	60fb      	str	r3, [r7, #12]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	699b      	ldr	r3, [r3, #24]
 800793e:	60fb      	str	r3, [r7, #12]
 8007940:	68fb      	ldr	r3, [r7, #12]
}
 8007942:	e7ff      	b.n	8007944 <I2C_Master_ADDR+0x316>
 8007944:	bf00      	nop
 8007946:	3744      	adds	r7, #68	; 0x44
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800795e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007964:	b29b      	uxth	r3, r3
 8007966:	2b00      	cmp	r3, #0
 8007968:	d02b      	beq.n	80079c2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796e:	781a      	ldrb	r2, [r3, #0]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797a:	1c5a      	adds	r2, r3, #1
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007984:	b29b      	uxth	r3, r3
 8007986:	3b01      	subs	r3, #1
 8007988:	b29a      	uxth	r2, r3
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007992:	b29b      	uxth	r3, r3
 8007994:	2b00      	cmp	r3, #0
 8007996:	d114      	bne.n	80079c2 <I2C_SlaveTransmit_TXE+0x72>
 8007998:	7bfb      	ldrb	r3, [r7, #15]
 800799a:	2b29      	cmp	r3, #41	; 0x29
 800799c:	d111      	bne.n	80079c2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	685a      	ldr	r2, [r3, #4]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079ac:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2221      	movs	r2, #33	; 0x21
 80079b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2228      	movs	r2, #40	; 0x28
 80079b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f7ff f9e7 	bl	8006d90 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80079c2:	bf00      	nop
 80079c4:	3710      	adds	r7, #16
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80079ca:	b480      	push	{r7}
 80079cc:	b083      	sub	sp, #12
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d011      	beq.n	8007a00 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e0:	781a      	ldrb	r2, [r3, #0]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ec:	1c5a      	adds	r2, r3, #1
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	3b01      	subs	r3, #1
 80079fa:	b29a      	uxth	r2, r3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007a00:	bf00      	nop
 8007a02:	370c      	adds	r7, #12
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a1a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d02c      	beq.n	8007a80 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	691a      	ldr	r2, [r3, #16]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a30:	b2d2      	uxtb	r2, r2
 8007a32:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a38:	1c5a      	adds	r2, r3, #1
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	3b01      	subs	r3, #1
 8007a46:	b29a      	uxth	r2, r3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d114      	bne.n	8007a80 <I2C_SlaveReceive_RXNE+0x74>
 8007a56:	7bfb      	ldrb	r3, [r7, #15]
 8007a58:	2b2a      	cmp	r3, #42	; 0x2a
 8007a5a:	d111      	bne.n	8007a80 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	685a      	ldr	r2, [r3, #4]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a6a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2222      	movs	r2, #34	; 0x22
 8007a70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2228      	movs	r2, #40	; 0x28
 8007a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f7ff f992 	bl	8006da4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007a80:	bf00      	nop
 8007a82:	3710      	adds	r7, #16
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d012      	beq.n	8007ac0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	691a      	ldr	r2, [r3, #16]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa4:	b2d2      	uxtb	r2, r2
 8007aa6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aac:	1c5a      	adds	r2, r3, #1
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	3b01      	subs	r3, #1
 8007aba:	b29a      	uxth	r2, r3
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007ac0:	bf00      	nop
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr

08007acc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ae0:	b2db      	uxtb	r3, r3
 8007ae2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007ae6:	2b28      	cmp	r3, #40	; 0x28
 8007ae8:	d125      	bne.n	8007b36 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	685a      	ldr	r2, [r3, #4]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007af8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	f003 0304 	and.w	r3, r3, #4
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d101      	bne.n	8007b08 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007b04:	2301      	movs	r3, #1
 8007b06:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d103      	bne.n	8007b1a <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	68db      	ldr	r3, [r3, #12]
 8007b16:	81bb      	strh	r3, [r7, #12]
 8007b18:	e002      	b.n	8007b20 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	699b      	ldr	r3, [r3, #24]
 8007b1e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007b28:	89ba      	ldrh	r2, [r7, #12]
 8007b2a:	7bfb      	ldrb	r3, [r7, #15]
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f7ff f942 	bl	8006db8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007b34:	e00e      	b.n	8007b54 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b36:	2300      	movs	r3, #0
 8007b38:	60bb      	str	r3, [r7, #8]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	695b      	ldr	r3, [r3, #20]
 8007b40:	60bb      	str	r3, [r7, #8]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	699b      	ldr	r3, [r3, #24]
 8007b48:	60bb      	str	r3, [r7, #8]
 8007b4a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007b54:	bf00      	nop
 8007b56:	3710      	adds	r7, #16
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b6a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	685a      	ldr	r2, [r3, #4]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007b7a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	60bb      	str	r3, [r7, #8]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	695b      	ldr	r3, [r3, #20]
 8007b86:	60bb      	str	r3, [r7, #8]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f042 0201 	orr.w	r2, r2, #1
 8007b96:	601a      	str	r2, [r3, #0]
 8007b98:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	681a      	ldr	r2, [r3, #0]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ba8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bb8:	d172      	bne.n	8007ca0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007bba:	7bfb      	ldrb	r3, [r7, #15]
 8007bbc:	2b22      	cmp	r3, #34	; 0x22
 8007bbe:	d002      	beq.n	8007bc6 <I2C_Slave_STOPF+0x6a>
 8007bc0:	7bfb      	ldrb	r3, [r7, #15]
 8007bc2:	2b2a      	cmp	r3, #42	; 0x2a
 8007bc4:	d135      	bne.n	8007c32 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	b29a      	uxth	r2, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d005      	beq.n	8007bea <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007be2:	f043 0204 	orr.w	r2, r3, #4
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	685a      	ldr	r2, [r3, #4]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007bf8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7fd ffb4 	bl	8005b6c <HAL_DMA_GetState>
 8007c04:	4603      	mov	r3, r0
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d049      	beq.n	8007c9e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c0e:	4a69      	ldr	r2, [pc, #420]	; (8007db4 <I2C_Slave_STOPF+0x258>)
 8007c10:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c16:	4618      	mov	r0, r3
 8007c18:	f7fd fdfc 	bl	8005814 <HAL_DMA_Abort_IT>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d03d      	beq.n	8007c9e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007c2c:	4610      	mov	r0, r2
 8007c2e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007c30:	e035      	b.n	8007c9e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	b29a      	uxth	r2, r3
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d005      	beq.n	8007c56 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c4e:	f043 0204 	orr.w	r2, r3, #4
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	685a      	ldr	r2, [r3, #4]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c64:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f7fd ff7e 	bl	8005b6c <HAL_DMA_GetState>
 8007c70:	4603      	mov	r3, r0
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d014      	beq.n	8007ca0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c7a:	4a4e      	ldr	r2, [pc, #312]	; (8007db4 <I2C_Slave_STOPF+0x258>)
 8007c7c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c82:	4618      	mov	r0, r3
 8007c84:	f7fd fdc6 	bl	8005814 <HAL_DMA_Abort_IT>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d008      	beq.n	8007ca0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007c98:	4610      	mov	r0, r2
 8007c9a:	4798      	blx	r3
 8007c9c:	e000      	b.n	8007ca0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007c9e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d03e      	beq.n	8007d28 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	695b      	ldr	r3, [r3, #20]
 8007cb0:	f003 0304 	and.w	r3, r3, #4
 8007cb4:	2b04      	cmp	r3, #4
 8007cb6:	d112      	bne.n	8007cde <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	691a      	ldr	r2, [r3, #16]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc2:	b2d2      	uxtb	r2, r2
 8007cc4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cca:	1c5a      	adds	r2, r3, #1
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	3b01      	subs	r3, #1
 8007cd8:	b29a      	uxth	r2, r3
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	695b      	ldr	r3, [r3, #20]
 8007ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ce8:	2b40      	cmp	r3, #64	; 0x40
 8007cea:	d112      	bne.n	8007d12 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	691a      	ldr	r2, [r3, #16]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf6:	b2d2      	uxtb	r2, r2
 8007cf8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfe:	1c5a      	adds	r2, r3, #1
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	3b01      	subs	r3, #1
 8007d0c:	b29a      	uxth	r2, r3
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d005      	beq.n	8007d28 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d20:	f043 0204 	orr.w	r2, r3, #4
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d003      	beq.n	8007d38 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 f8b3 	bl	8007e9c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007d36:	e039      	b.n	8007dac <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007d38:	7bfb      	ldrb	r3, [r7, #15]
 8007d3a:	2b2a      	cmp	r3, #42	; 0x2a
 8007d3c:	d109      	bne.n	8007d52 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2228      	movs	r2, #40	; 0x28
 8007d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f7ff f829 	bl	8006da4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	2b28      	cmp	r3, #40	; 0x28
 8007d5c:	d111      	bne.n	8007d82 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	4a15      	ldr	r2, [pc, #84]	; (8007db8 <I2C_Slave_STOPF+0x25c>)
 8007d62:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2220      	movs	r2, #32
 8007d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f7ff f82a 	bl	8006dd4 <HAL_I2C_ListenCpltCallback>
}
 8007d80:	e014      	b.n	8007dac <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d86:	2b22      	cmp	r3, #34	; 0x22
 8007d88:	d002      	beq.n	8007d90 <I2C_Slave_STOPF+0x234>
 8007d8a:	7bfb      	ldrb	r3, [r7, #15]
 8007d8c:	2b22      	cmp	r3, #34	; 0x22
 8007d8e:	d10d      	bne.n	8007dac <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2200      	movs	r2, #0
 8007d94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2220      	movs	r2, #32
 8007d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f7fe fffc 	bl	8006da4 <HAL_I2C_SlaveRxCpltCallback>
}
 8007dac:	bf00      	nop
 8007dae:	3710      	adds	r7, #16
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	080083a1 	.word	0x080083a1
 8007db8:	ffff0000 	.word	0xffff0000

08007dbc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dca:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	2b08      	cmp	r3, #8
 8007dd6:	d002      	beq.n	8007dde <I2C_Slave_AF+0x22>
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	2b20      	cmp	r3, #32
 8007ddc:	d129      	bne.n	8007e32 <I2C_Slave_AF+0x76>
 8007dde:	7bfb      	ldrb	r3, [r7, #15]
 8007de0:	2b28      	cmp	r3, #40	; 0x28
 8007de2:	d126      	bne.n	8007e32 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	4a2c      	ldr	r2, [pc, #176]	; (8007e98 <I2C_Slave_AF+0xdc>)
 8007de8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	685a      	ldr	r2, [r3, #4]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007df8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007e02:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e12:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2220      	movs	r2, #32
 8007e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f7fe ffd2 	bl	8006dd4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007e30:	e02e      	b.n	8007e90 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007e32:	7bfb      	ldrb	r3, [r7, #15]
 8007e34:	2b21      	cmp	r3, #33	; 0x21
 8007e36:	d126      	bne.n	8007e86 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	4a17      	ldr	r2, [pc, #92]	; (8007e98 <I2C_Slave_AF+0xdc>)
 8007e3c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2221      	movs	r2, #33	; 0x21
 8007e42:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2220      	movs	r2, #32
 8007e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	685a      	ldr	r2, [r3, #4]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007e62:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007e6c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	681a      	ldr	r2, [r3, #0]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e7c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f7fe ff86 	bl	8006d90 <HAL_I2C_SlaveTxCpltCallback>
}
 8007e84:	e004      	b.n	8007e90 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007e8e:	615a      	str	r2, [r3, #20]
}
 8007e90:	bf00      	nop
 8007e92:	3710      	adds	r7, #16
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}
 8007e98:	ffff0000 	.word	0xffff0000

08007e9c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eaa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007eb2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007eb4:	7bbb      	ldrb	r3, [r7, #14]
 8007eb6:	2b10      	cmp	r3, #16
 8007eb8:	d002      	beq.n	8007ec0 <I2C_ITError+0x24>
 8007eba:	7bbb      	ldrb	r3, [r7, #14]
 8007ebc:	2b40      	cmp	r3, #64	; 0x40
 8007ebe:	d10a      	bne.n	8007ed6 <I2C_ITError+0x3a>
 8007ec0:	7bfb      	ldrb	r3, [r7, #15]
 8007ec2:	2b22      	cmp	r3, #34	; 0x22
 8007ec4:	d107      	bne.n	8007ed6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ed4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007ed6:	7bfb      	ldrb	r3, [r7, #15]
 8007ed8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007edc:	2b28      	cmp	r3, #40	; 0x28
 8007ede:	d107      	bne.n	8007ef0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2228      	movs	r2, #40	; 0x28
 8007eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007eee:	e015      	b.n	8007f1c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007efa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007efe:	d00a      	beq.n	8007f16 <I2C_ITError+0x7a>
 8007f00:	7bfb      	ldrb	r3, [r7, #15]
 8007f02:	2b60      	cmp	r3, #96	; 0x60
 8007f04:	d007      	beq.n	8007f16 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2220      	movs	r2, #32
 8007f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f2a:	d162      	bne.n	8007ff2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	685a      	ldr	r2, [r3, #4]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f3a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d020      	beq.n	8007f8c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f4e:	4a6a      	ldr	r2, [pc, #424]	; (80080f8 <I2C_ITError+0x25c>)
 8007f50:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f56:	4618      	mov	r0, r3
 8007f58:	f7fd fc5c 	bl	8005814 <HAL_DMA_Abort_IT>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	f000 8089 	beq.w	8008076 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f022 0201 	bic.w	r2, r2, #1
 8007f72:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2220      	movs	r2, #32
 8007f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007f86:	4610      	mov	r0, r2
 8007f88:	4798      	blx	r3
 8007f8a:	e074      	b.n	8008076 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f90:	4a59      	ldr	r2, [pc, #356]	; (80080f8 <I2C_ITError+0x25c>)
 8007f92:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f7fd fc3b 	bl	8005814 <HAL_DMA_Abort_IT>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d068      	beq.n	8008076 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	695b      	ldr	r3, [r3, #20]
 8007faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fae:	2b40      	cmp	r3, #64	; 0x40
 8007fb0:	d10b      	bne.n	8007fca <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	691a      	ldr	r2, [r3, #16]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fbc:	b2d2      	uxtb	r2, r2
 8007fbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc4:	1c5a      	adds	r2, r3, #1
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f022 0201 	bic.w	r2, r2, #1
 8007fd8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2220      	movs	r2, #32
 8007fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007fec:	4610      	mov	r0, r2
 8007fee:	4798      	blx	r3
 8007ff0:	e041      	b.n	8008076 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	2b60      	cmp	r3, #96	; 0x60
 8007ffc:	d125      	bne.n	800804a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2220      	movs	r2, #32
 8008002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	695b      	ldr	r3, [r3, #20]
 8008012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008016:	2b40      	cmp	r3, #64	; 0x40
 8008018:	d10b      	bne.n	8008032 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	691a      	ldr	r2, [r3, #16]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008024:	b2d2      	uxtb	r2, r2
 8008026:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800802c:	1c5a      	adds	r2, r3, #1
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f022 0201 	bic.w	r2, r2, #1
 8008040:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f7fe feee 	bl	8006e24 <HAL_I2C_AbortCpltCallback>
 8008048:	e015      	b.n	8008076 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	695b      	ldr	r3, [r3, #20]
 8008050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008054:	2b40      	cmp	r3, #64	; 0x40
 8008056:	d10b      	bne.n	8008070 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	691a      	ldr	r2, [r3, #16]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008062:	b2d2      	uxtb	r2, r2
 8008064:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800806a:	1c5a      	adds	r2, r3, #1
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f7fe fecd 	bl	8006e10 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800807a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	f003 0301 	and.w	r3, r3, #1
 8008082:	2b00      	cmp	r3, #0
 8008084:	d10e      	bne.n	80080a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800808c:	2b00      	cmp	r3, #0
 800808e:	d109      	bne.n	80080a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008096:	2b00      	cmp	r3, #0
 8008098:	d104      	bne.n	80080a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d007      	beq.n	80080b4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	685a      	ldr	r2, [r3, #4]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80080b2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080ba:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c0:	f003 0304 	and.w	r3, r3, #4
 80080c4:	2b04      	cmp	r3, #4
 80080c6:	d113      	bne.n	80080f0 <I2C_ITError+0x254>
 80080c8:	7bfb      	ldrb	r3, [r7, #15]
 80080ca:	2b28      	cmp	r3, #40	; 0x28
 80080cc:	d110      	bne.n	80080f0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	4a0a      	ldr	r2, [pc, #40]	; (80080fc <I2C_ITError+0x260>)
 80080d2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2220      	movs	r2, #32
 80080de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f7fe fe72 	bl	8006dd4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80080f0:	bf00      	nop
 80080f2:	3710      	adds	r7, #16
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}
 80080f8:	080083a1 	.word	0x080083a1
 80080fc:	ffff0000 	.word	0xffff0000

08008100 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b088      	sub	sp, #32
 8008104:	af02      	add	r7, sp, #8
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	607a      	str	r2, [r7, #4]
 800810a:	603b      	str	r3, [r7, #0]
 800810c:	460b      	mov	r3, r1
 800810e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008114:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	2b08      	cmp	r3, #8
 800811a:	d006      	beq.n	800812a <I2C_MasterRequestWrite+0x2a>
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	2b01      	cmp	r3, #1
 8008120:	d003      	beq.n	800812a <I2C_MasterRequestWrite+0x2a>
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008128:	d108      	bne.n	800813c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008138:	601a      	str	r2, [r3, #0]
 800813a:	e00b      	b.n	8008154 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008140:	2b12      	cmp	r3, #18
 8008142:	d107      	bne.n	8008154 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008152:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	9300      	str	r3, [sp, #0]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2200      	movs	r2, #0
 800815c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008160:	68f8      	ldr	r0, [r7, #12]
 8008162:	f000 f9c5 	bl	80084f0 <I2C_WaitOnFlagUntilTimeout>
 8008166:	4603      	mov	r3, r0
 8008168:	2b00      	cmp	r3, #0
 800816a:	d00d      	beq.n	8008188 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800817a:	d103      	bne.n	8008184 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008182:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008184:	2303      	movs	r3, #3
 8008186:	e035      	b.n	80081f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	691b      	ldr	r3, [r3, #16]
 800818c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008190:	d108      	bne.n	80081a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008192:	897b      	ldrh	r3, [r7, #10]
 8008194:	b2db      	uxtb	r3, r3
 8008196:	461a      	mov	r2, r3
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80081a0:	611a      	str	r2, [r3, #16]
 80081a2:	e01b      	b.n	80081dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80081a4:	897b      	ldrh	r3, [r7, #10]
 80081a6:	11db      	asrs	r3, r3, #7
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	f003 0306 	and.w	r3, r3, #6
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	f063 030f 	orn	r3, r3, #15
 80081b4:	b2da      	uxtb	r2, r3
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	490e      	ldr	r1, [pc, #56]	; (80081fc <I2C_MasterRequestWrite+0xfc>)
 80081c2:	68f8      	ldr	r0, [r7, #12]
 80081c4:	f000 f9eb 	bl	800859e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d001      	beq.n	80081d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80081ce:	2301      	movs	r3, #1
 80081d0:	e010      	b.n	80081f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80081d2:	897b      	ldrh	r3, [r7, #10]
 80081d4:	b2da      	uxtb	r2, r3
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	4907      	ldr	r1, [pc, #28]	; (8008200 <I2C_MasterRequestWrite+0x100>)
 80081e2:	68f8      	ldr	r0, [r7, #12]
 80081e4:	f000 f9db 	bl	800859e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80081e8:	4603      	mov	r3, r0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d001      	beq.n	80081f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	e000      	b.n	80081f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80081f2:	2300      	movs	r3, #0
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3718      	adds	r7, #24
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}
 80081fc:	00010008 	.word	0x00010008
 8008200:	00010002 	.word	0x00010002

08008204 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b088      	sub	sp, #32
 8008208:	af02      	add	r7, sp, #8
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	607a      	str	r2, [r7, #4]
 800820e:	603b      	str	r3, [r7, #0]
 8008210:	460b      	mov	r3, r1
 8008212:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008218:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008228:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	2b08      	cmp	r3, #8
 800822e:	d006      	beq.n	800823e <I2C_MasterRequestRead+0x3a>
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	2b01      	cmp	r3, #1
 8008234:	d003      	beq.n	800823e <I2C_MasterRequestRead+0x3a>
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800823c:	d108      	bne.n	8008250 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	681a      	ldr	r2, [r3, #0]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800824c:	601a      	str	r2, [r3, #0]
 800824e:	e00b      	b.n	8008268 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008254:	2b11      	cmp	r3, #17
 8008256:	d107      	bne.n	8008268 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	681a      	ldr	r2, [r3, #0]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008266:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	9300      	str	r3, [sp, #0]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2200      	movs	r2, #0
 8008270:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008274:	68f8      	ldr	r0, [r7, #12]
 8008276:	f000 f93b 	bl	80084f0 <I2C_WaitOnFlagUntilTimeout>
 800827a:	4603      	mov	r3, r0
 800827c:	2b00      	cmp	r3, #0
 800827e:	d00d      	beq.n	800829c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800828a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800828e:	d103      	bne.n	8008298 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008296:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008298:	2303      	movs	r3, #3
 800829a:	e079      	b.n	8008390 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	691b      	ldr	r3, [r3, #16]
 80082a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082a4:	d108      	bne.n	80082b8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80082a6:	897b      	ldrh	r3, [r7, #10]
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	f043 0301 	orr.w	r3, r3, #1
 80082ae:	b2da      	uxtb	r2, r3
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	611a      	str	r2, [r3, #16]
 80082b6:	e05f      	b.n	8008378 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80082b8:	897b      	ldrh	r3, [r7, #10]
 80082ba:	11db      	asrs	r3, r3, #7
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	f003 0306 	and.w	r3, r3, #6
 80082c2:	b2db      	uxtb	r3, r3
 80082c4:	f063 030f 	orn	r3, r3, #15
 80082c8:	b2da      	uxtb	r2, r3
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	4930      	ldr	r1, [pc, #192]	; (8008398 <I2C_MasterRequestRead+0x194>)
 80082d6:	68f8      	ldr	r0, [r7, #12]
 80082d8:	f000 f961 	bl	800859e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80082dc:	4603      	mov	r3, r0
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d001      	beq.n	80082e6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	e054      	b.n	8008390 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80082e6:	897b      	ldrh	r3, [r7, #10]
 80082e8:	b2da      	uxtb	r2, r3
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	4929      	ldr	r1, [pc, #164]	; (800839c <I2C_MasterRequestRead+0x198>)
 80082f6:	68f8      	ldr	r0, [r7, #12]
 80082f8:	f000 f951 	bl	800859e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d001      	beq.n	8008306 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8008302:	2301      	movs	r3, #1
 8008304:	e044      	b.n	8008390 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008306:	2300      	movs	r3, #0
 8008308:	613b      	str	r3, [r7, #16]
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	695b      	ldr	r3, [r3, #20]
 8008310:	613b      	str	r3, [r7, #16]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	699b      	ldr	r3, [r3, #24]
 8008318:	613b      	str	r3, [r7, #16]
 800831a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800832a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	9300      	str	r3, [sp, #0]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2200      	movs	r2, #0
 8008334:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008338:	68f8      	ldr	r0, [r7, #12]
 800833a:	f000 f8d9 	bl	80084f0 <I2C_WaitOnFlagUntilTimeout>
 800833e:	4603      	mov	r3, r0
 8008340:	2b00      	cmp	r3, #0
 8008342:	d00d      	beq.n	8008360 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800834e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008352:	d103      	bne.n	800835c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f44f 7200 	mov.w	r2, #512	; 0x200
 800835a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800835c:	2303      	movs	r3, #3
 800835e:	e017      	b.n	8008390 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8008360:	897b      	ldrh	r3, [r7, #10]
 8008362:	11db      	asrs	r3, r3, #7
 8008364:	b2db      	uxtb	r3, r3
 8008366:	f003 0306 	and.w	r3, r3, #6
 800836a:	b2db      	uxtb	r3, r3
 800836c:	f063 030e 	orn	r3, r3, #14
 8008370:	b2da      	uxtb	r2, r3
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	4907      	ldr	r1, [pc, #28]	; (800839c <I2C_MasterRequestRead+0x198>)
 800837e:	68f8      	ldr	r0, [r7, #12]
 8008380:	f000 f90d 	bl	800859e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008384:	4603      	mov	r3, r0
 8008386:	2b00      	cmp	r3, #0
 8008388:	d001      	beq.n	800838e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800838a:	2301      	movs	r3, #1
 800838c:	e000      	b.n	8008390 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800838e:	2300      	movs	r3, #0
}
 8008390:	4618      	mov	r0, r3
 8008392:	3718      	adds	r7, #24
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}
 8008398:	00010008 	.word	0x00010008
 800839c:	00010002 	.word	0x00010002

080083a0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b086      	sub	sp, #24
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80083a8:	2300      	movs	r3, #0
 80083aa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083b8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80083ba:	4b4b      	ldr	r3, [pc, #300]	; (80084e8 <I2C_DMAAbort+0x148>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	08db      	lsrs	r3, r3, #3
 80083c0:	4a4a      	ldr	r2, [pc, #296]	; (80084ec <I2C_DMAAbort+0x14c>)
 80083c2:	fba2 2303 	umull	r2, r3, r2, r3
 80083c6:	0a1a      	lsrs	r2, r3, #8
 80083c8:	4613      	mov	r3, r2
 80083ca:	009b      	lsls	r3, r3, #2
 80083cc:	4413      	add	r3, r2
 80083ce:	00da      	lsls	r2, r3, #3
 80083d0:	1ad3      	subs	r3, r2, r3
 80083d2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d106      	bne.n	80083e8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083de:	f043 0220 	orr.w	r2, r3, #32
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80083e6:	e00a      	b.n	80083fe <I2C_DMAAbort+0x5e>
    }
    count--;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	3b01      	subs	r3, #1
 80083ec:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80083f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083fc:	d0ea      	beq.n	80083d4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008402:	2b00      	cmp	r3, #0
 8008404:	d003      	beq.n	800840e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800840a:	2200      	movs	r2, #0
 800840c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008412:	2b00      	cmp	r3, #0
 8008414:	d003      	beq.n	800841e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800841a:	2200      	movs	r2, #0
 800841c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	681a      	ldr	r2, [r3, #0]
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800842c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	2200      	movs	r2, #0
 8008432:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008438:	2b00      	cmp	r3, #0
 800843a:	d003      	beq.n	8008444 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008440:	2200      	movs	r2, #0
 8008442:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008448:	2b00      	cmp	r3, #0
 800844a:	d003      	beq.n	8008454 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008450:	2200      	movs	r2, #0
 8008452:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f022 0201 	bic.w	r2, r2, #1
 8008462:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800846a:	b2db      	uxtb	r3, r3
 800846c:	2b60      	cmp	r3, #96	; 0x60
 800846e:	d10e      	bne.n	800848e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	2220      	movs	r2, #32
 8008474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	2200      	movs	r2, #0
 800847c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	2200      	movs	r2, #0
 8008484:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008486:	6978      	ldr	r0, [r7, #20]
 8008488:	f7fe fccc 	bl	8006e24 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800848c:	e027      	b.n	80084de <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800848e:	7cfb      	ldrb	r3, [r7, #19]
 8008490:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008494:	2b28      	cmp	r3, #40	; 0x28
 8008496:	d117      	bne.n	80084c8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f042 0201 	orr.w	r2, r2, #1
 80084a6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80084b6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	2200      	movs	r2, #0
 80084bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	2228      	movs	r2, #40	; 0x28
 80084c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80084c6:	e007      	b.n	80084d8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	2220      	movs	r2, #32
 80084cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	2200      	movs	r2, #0
 80084d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80084d8:	6978      	ldr	r0, [r7, #20]
 80084da:	f7fe fc99 	bl	8006e10 <HAL_I2C_ErrorCallback>
}
 80084de:	bf00      	nop
 80084e0:	3718      	adds	r7, #24
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	bf00      	nop
 80084e8:	20000014 	.word	0x20000014
 80084ec:	14f8b589 	.word	0x14f8b589

080084f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b084      	sub	sp, #16
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	603b      	str	r3, [r7, #0]
 80084fc:	4613      	mov	r3, r2
 80084fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008500:	e025      	b.n	800854e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008508:	d021      	beq.n	800854e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800850a:	f7fc fc2b 	bl	8004d64 <HAL_GetTick>
 800850e:	4602      	mov	r2, r0
 8008510:	69bb      	ldr	r3, [r7, #24]
 8008512:	1ad3      	subs	r3, r2, r3
 8008514:	683a      	ldr	r2, [r7, #0]
 8008516:	429a      	cmp	r2, r3
 8008518:	d302      	bcc.n	8008520 <I2C_WaitOnFlagUntilTimeout+0x30>
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d116      	bne.n	800854e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2200      	movs	r2, #0
 8008524:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2220      	movs	r2, #32
 800852a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2200      	movs	r2, #0
 8008532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800853a:	f043 0220 	orr.w	r2, r3, #32
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2200      	movs	r2, #0
 8008546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800854a:	2301      	movs	r3, #1
 800854c:	e023      	b.n	8008596 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	0c1b      	lsrs	r3, r3, #16
 8008552:	b2db      	uxtb	r3, r3
 8008554:	2b01      	cmp	r3, #1
 8008556:	d10d      	bne.n	8008574 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	695b      	ldr	r3, [r3, #20]
 800855e:	43da      	mvns	r2, r3
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	4013      	ands	r3, r2
 8008564:	b29b      	uxth	r3, r3
 8008566:	2b00      	cmp	r3, #0
 8008568:	bf0c      	ite	eq
 800856a:	2301      	moveq	r3, #1
 800856c:	2300      	movne	r3, #0
 800856e:	b2db      	uxtb	r3, r3
 8008570:	461a      	mov	r2, r3
 8008572:	e00c      	b.n	800858e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	699b      	ldr	r3, [r3, #24]
 800857a:	43da      	mvns	r2, r3
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	4013      	ands	r3, r2
 8008580:	b29b      	uxth	r3, r3
 8008582:	2b00      	cmp	r3, #0
 8008584:	bf0c      	ite	eq
 8008586:	2301      	moveq	r3, #1
 8008588:	2300      	movne	r3, #0
 800858a:	b2db      	uxtb	r3, r3
 800858c:	461a      	mov	r2, r3
 800858e:	79fb      	ldrb	r3, [r7, #7]
 8008590:	429a      	cmp	r2, r3
 8008592:	d0b6      	beq.n	8008502 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008594:	2300      	movs	r3, #0
}
 8008596:	4618      	mov	r0, r3
 8008598:	3710      	adds	r7, #16
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}

0800859e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800859e:	b580      	push	{r7, lr}
 80085a0:	b084      	sub	sp, #16
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	60f8      	str	r0, [r7, #12]
 80085a6:	60b9      	str	r1, [r7, #8]
 80085a8:	607a      	str	r2, [r7, #4]
 80085aa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80085ac:	e051      	b.n	8008652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	695b      	ldr	r3, [r3, #20]
 80085b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085bc:	d123      	bne.n	8008606 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085cc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80085d6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2200      	movs	r2, #0
 80085dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2220      	movs	r2, #32
 80085e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2200      	movs	r2, #0
 80085ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f2:	f043 0204 	orr.w	r2, r3, #4
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2200      	movs	r2, #0
 80085fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008602:	2301      	movs	r3, #1
 8008604:	e046      	b.n	8008694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800860c:	d021      	beq.n	8008652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800860e:	f7fc fba9 	bl	8004d64 <HAL_GetTick>
 8008612:	4602      	mov	r2, r0
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	1ad3      	subs	r3, r2, r3
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	429a      	cmp	r2, r3
 800861c:	d302      	bcc.n	8008624 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d116      	bne.n	8008652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2200      	movs	r2, #0
 8008628:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2220      	movs	r2, #32
 800862e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2200      	movs	r2, #0
 8008636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800863e:	f043 0220 	orr.w	r2, r3, #32
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2200      	movs	r2, #0
 800864a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800864e:	2301      	movs	r3, #1
 8008650:	e020      	b.n	8008694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	0c1b      	lsrs	r3, r3, #16
 8008656:	b2db      	uxtb	r3, r3
 8008658:	2b01      	cmp	r3, #1
 800865a:	d10c      	bne.n	8008676 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	695b      	ldr	r3, [r3, #20]
 8008662:	43da      	mvns	r2, r3
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	4013      	ands	r3, r2
 8008668:	b29b      	uxth	r3, r3
 800866a:	2b00      	cmp	r3, #0
 800866c:	bf14      	ite	ne
 800866e:	2301      	movne	r3, #1
 8008670:	2300      	moveq	r3, #0
 8008672:	b2db      	uxtb	r3, r3
 8008674:	e00b      	b.n	800868e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	699b      	ldr	r3, [r3, #24]
 800867c:	43da      	mvns	r2, r3
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	4013      	ands	r3, r2
 8008682:	b29b      	uxth	r3, r3
 8008684:	2b00      	cmp	r3, #0
 8008686:	bf14      	ite	ne
 8008688:	2301      	movne	r3, #1
 800868a:	2300      	moveq	r3, #0
 800868c:	b2db      	uxtb	r3, r3
 800868e:	2b00      	cmp	r3, #0
 8008690:	d18d      	bne.n	80085ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008692:	2300      	movs	r3, #0
}
 8008694:	4618      	mov	r0, r3
 8008696:	3710      	adds	r7, #16
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b084      	sub	sp, #16
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	60f8      	str	r0, [r7, #12]
 80086a4:	60b9      	str	r1, [r7, #8]
 80086a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80086a8:	e02d      	b.n	8008706 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80086aa:	68f8      	ldr	r0, [r7, #12]
 80086ac:	f000 f900 	bl	80088b0 <I2C_IsAcknowledgeFailed>
 80086b0:	4603      	mov	r3, r0
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d001      	beq.n	80086ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80086b6:	2301      	movs	r3, #1
 80086b8:	e02d      	b.n	8008716 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086c0:	d021      	beq.n	8008706 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086c2:	f7fc fb4f 	bl	8004d64 <HAL_GetTick>
 80086c6:	4602      	mov	r2, r0
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	1ad3      	subs	r3, r2, r3
 80086cc:	68ba      	ldr	r2, [r7, #8]
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d302      	bcc.n	80086d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d116      	bne.n	8008706 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2200      	movs	r2, #0
 80086dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2220      	movs	r2, #32
 80086e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2200      	movs	r2, #0
 80086ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f2:	f043 0220 	orr.w	r2, r3, #32
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2200      	movs	r2, #0
 80086fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008702:	2301      	movs	r3, #1
 8008704:	e007      	b.n	8008716 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	695b      	ldr	r3, [r3, #20]
 800870c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008710:	2b80      	cmp	r3, #128	; 0x80
 8008712:	d1ca      	bne.n	80086aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008714:	2300      	movs	r3, #0
}
 8008716:	4618      	mov	r0, r3
 8008718:	3710      	adds	r7, #16
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}

0800871e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800871e:	b580      	push	{r7, lr}
 8008720:	b084      	sub	sp, #16
 8008722:	af00      	add	r7, sp, #0
 8008724:	60f8      	str	r0, [r7, #12]
 8008726:	60b9      	str	r1, [r7, #8]
 8008728:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800872a:	e02d      	b.n	8008788 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800872c:	68f8      	ldr	r0, [r7, #12]
 800872e:	f000 f8bf 	bl	80088b0 <I2C_IsAcknowledgeFailed>
 8008732:	4603      	mov	r3, r0
 8008734:	2b00      	cmp	r3, #0
 8008736:	d001      	beq.n	800873c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008738:	2301      	movs	r3, #1
 800873a:	e02d      	b.n	8008798 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008742:	d021      	beq.n	8008788 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008744:	f7fc fb0e 	bl	8004d64 <HAL_GetTick>
 8008748:	4602      	mov	r2, r0
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	1ad3      	subs	r3, r2, r3
 800874e:	68ba      	ldr	r2, [r7, #8]
 8008750:	429a      	cmp	r2, r3
 8008752:	d302      	bcc.n	800875a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d116      	bne.n	8008788 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2200      	movs	r2, #0
 800875e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2220      	movs	r2, #32
 8008764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2200      	movs	r2, #0
 800876c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008774:	f043 0220 	orr.w	r2, r3, #32
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2200      	movs	r2, #0
 8008780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008784:	2301      	movs	r3, #1
 8008786:	e007      	b.n	8008798 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	695b      	ldr	r3, [r3, #20]
 800878e:	f003 0304 	and.w	r3, r3, #4
 8008792:	2b04      	cmp	r3, #4
 8008794:	d1ca      	bne.n	800872c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008796:	2300      	movs	r3, #0
}
 8008798:	4618      	mov	r0, r3
 800879a:	3710      	adds	r7, #16
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b085      	sub	sp, #20
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80087a8:	2300      	movs	r3, #0
 80087aa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80087ac:	4b13      	ldr	r3, [pc, #76]	; (80087fc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	08db      	lsrs	r3, r3, #3
 80087b2:	4a13      	ldr	r2, [pc, #76]	; (8008800 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80087b4:	fba2 2303 	umull	r2, r3, r2, r3
 80087b8:	0a1a      	lsrs	r2, r3, #8
 80087ba:	4613      	mov	r3, r2
 80087bc:	009b      	lsls	r3, r3, #2
 80087be:	4413      	add	r3, r2
 80087c0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	3b01      	subs	r3, #1
 80087c6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d107      	bne.n	80087de <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087d2:	f043 0220 	orr.w	r2, r3, #32
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80087da:	2301      	movs	r3, #1
 80087dc:	e008      	b.n	80087f0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80087e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087ec:	d0e9      	beq.n	80087c2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80087ee:	2300      	movs	r3, #0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3714      	adds	r7, #20
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr
 80087fc:	20000014 	.word	0x20000014
 8008800:	14f8b589 	.word	0x14f8b589

08008804 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	60b9      	str	r1, [r7, #8]
 800880e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008810:	e042      	b.n	8008898 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	695b      	ldr	r3, [r3, #20]
 8008818:	f003 0310 	and.w	r3, r3, #16
 800881c:	2b10      	cmp	r3, #16
 800881e:	d119      	bne.n	8008854 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f06f 0210 	mvn.w	r2, #16
 8008828:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2200      	movs	r2, #0
 800882e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2220      	movs	r2, #32
 8008834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2200      	movs	r2, #0
 800883c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2200      	movs	r2, #0
 800884c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008850:	2301      	movs	r3, #1
 8008852:	e029      	b.n	80088a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008854:	f7fc fa86 	bl	8004d64 <HAL_GetTick>
 8008858:	4602      	mov	r2, r0
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	1ad3      	subs	r3, r2, r3
 800885e:	68ba      	ldr	r2, [r7, #8]
 8008860:	429a      	cmp	r2, r3
 8008862:	d302      	bcc.n	800886a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d116      	bne.n	8008898 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2200      	movs	r2, #0
 800886e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2220      	movs	r2, #32
 8008874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2200      	movs	r2, #0
 800887c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008884:	f043 0220 	orr.w	r2, r3, #32
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2200      	movs	r2, #0
 8008890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008894:	2301      	movs	r3, #1
 8008896:	e007      	b.n	80088a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	695b      	ldr	r3, [r3, #20]
 800889e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088a2:	2b40      	cmp	r3, #64	; 0x40
 80088a4:	d1b5      	bne.n	8008812 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80088a6:	2300      	movs	r3, #0
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3710      	adds	r7, #16
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b083      	sub	sp, #12
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	695b      	ldr	r3, [r3, #20]
 80088be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088c6:	d11b      	bne.n	8008900 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80088d0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2200      	movs	r2, #0
 80088d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2220      	movs	r2, #32
 80088dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2200      	movs	r2, #0
 80088e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ec:	f043 0204 	orr.w	r2, r3, #4
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2200      	movs	r2, #0
 80088f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80088fc:	2301      	movs	r3, #1
 80088fe:	e000      	b.n	8008902 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008900:	2300      	movs	r3, #0
}
 8008902:	4618      	mov	r0, r3
 8008904:	370c      	adds	r7, #12
 8008906:	46bd      	mov	sp, r7
 8008908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890c:	4770      	bx	lr

0800890e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800890e:	b480      	push	{r7}
 8008910:	b083      	sub	sp, #12
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800891a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800891e:	d103      	bne.n	8008928 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2201      	movs	r2, #1
 8008924:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008926:	e007      	b.n	8008938 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800892c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008930:	d102      	bne.n	8008938 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2208      	movs	r2, #8
 8008936:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008938:	bf00      	nop
 800893a:	370c      	adds	r7, #12
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr

08008944 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b086      	sub	sp, #24
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d101      	bne.n	8008956 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008952:	2301      	movs	r3, #1
 8008954:	e267      	b.n	8008e26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f003 0301 	and.w	r3, r3, #1
 800895e:	2b00      	cmp	r3, #0
 8008960:	d075      	beq.n	8008a4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008962:	4b88      	ldr	r3, [pc, #544]	; (8008b84 <HAL_RCC_OscConfig+0x240>)
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	f003 030c 	and.w	r3, r3, #12
 800896a:	2b04      	cmp	r3, #4
 800896c:	d00c      	beq.n	8008988 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800896e:	4b85      	ldr	r3, [pc, #532]	; (8008b84 <HAL_RCC_OscConfig+0x240>)
 8008970:	689b      	ldr	r3, [r3, #8]
 8008972:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008976:	2b08      	cmp	r3, #8
 8008978:	d112      	bne.n	80089a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800897a:	4b82      	ldr	r3, [pc, #520]	; (8008b84 <HAL_RCC_OscConfig+0x240>)
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008982:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008986:	d10b      	bne.n	80089a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008988:	4b7e      	ldr	r3, [pc, #504]	; (8008b84 <HAL_RCC_OscConfig+0x240>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008990:	2b00      	cmp	r3, #0
 8008992:	d05b      	beq.n	8008a4c <HAL_RCC_OscConfig+0x108>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d157      	bne.n	8008a4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800899c:	2301      	movs	r3, #1
 800899e:	e242      	b.n	8008e26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089a8:	d106      	bne.n	80089b8 <HAL_RCC_OscConfig+0x74>
 80089aa:	4b76      	ldr	r3, [pc, #472]	; (8008b84 <HAL_RCC_OscConfig+0x240>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4a75      	ldr	r2, [pc, #468]	; (8008b84 <HAL_RCC_OscConfig+0x240>)
 80089b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089b4:	6013      	str	r3, [r2, #0]
 80089b6:	e01d      	b.n	80089f4 <HAL_RCC_OscConfig+0xb0>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80089c0:	d10c      	bne.n	80089dc <HAL_RCC_OscConfig+0x98>
 80089c2:	4b70      	ldr	r3, [pc, #448]	; (8008b84 <HAL_RCC_OscConfig+0x240>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a6f      	ldr	r2, [pc, #444]	; (8008b84 <HAL_RCC_OscConfig+0x240>)
 80089c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80089cc:	6013      	str	r3, [r2, #0]
 80089ce:	4b6d      	ldr	r3, [pc, #436]	; (8008b84 <HAL_RCC_OscConfig+0x240>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a6c      	ldr	r2, [pc, #432]	; (8008b84 <HAL_RCC_OscConfig+0x240>)
 80089d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089d8:	6013      	str	r3, [r2, #0]
 80089da:	e00b      	b.n	80089f4 <HAL_RCC_OscConfig+0xb0>
 80089dc:	4b69      	ldr	r3, [pc, #420]	; (8008b84 <HAL_RCC_OscConfig+0x240>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a68      	ldr	r2, [pc, #416]	; (8008b84 <HAL_RCC_OscConfig+0x240>)
 80089e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089e6:	6013      	str	r3, [r2, #0]
 80089e8:	4b66      	ldr	r3, [pc, #408]	; (8008b84 <HAL_RCC_OscConfig+0x240>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a65      	ldr	r2, [pc, #404]	; (8008b84 <HAL_RCC_OscConfig+0x240>)
 80089ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80089f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d013      	beq.n	8008a24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089fc:	f7fc f9b2 	bl	8004d64 <HAL_GetTick>
 8008a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a02:	e008      	b.n	8008a16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008a04:	f7fc f9ae 	bl	8004d64 <HAL_GetTick>
 8008a08:	4602      	mov	r2, r0
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	1ad3      	subs	r3, r2, r3
 8008a0e:	2b64      	cmp	r3, #100	; 0x64
 8008a10:	d901      	bls.n	8008a16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008a12:	2303      	movs	r3, #3
 8008a14:	e207      	b.n	8008e26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a16:	4b5b      	ldr	r3, [pc, #364]	; (8008b84 <HAL_RCC_OscConfig+0x240>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d0f0      	beq.n	8008a04 <HAL_RCC_OscConfig+0xc0>
 8008a22:	e014      	b.n	8008a4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a24:	f7fc f99e 	bl	8004d64 <HAL_GetTick>
 8008a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008a2a:	e008      	b.n	8008a3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008a2c:	f7fc f99a 	bl	8004d64 <HAL_GetTick>
 8008a30:	4602      	mov	r2, r0
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	1ad3      	subs	r3, r2, r3
 8008a36:	2b64      	cmp	r3, #100	; 0x64
 8008a38:	d901      	bls.n	8008a3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008a3a:	2303      	movs	r3, #3
 8008a3c:	e1f3      	b.n	8008e26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008a3e:	4b51      	ldr	r3, [pc, #324]	; (8008b84 <HAL_RCC_OscConfig+0x240>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d1f0      	bne.n	8008a2c <HAL_RCC_OscConfig+0xe8>
 8008a4a:	e000      	b.n	8008a4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f003 0302 	and.w	r3, r3, #2
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d063      	beq.n	8008b22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008a5a:	4b4a      	ldr	r3, [pc, #296]	; (8008b84 <HAL_RCC_OscConfig+0x240>)
 8008a5c:	689b      	ldr	r3, [r3, #8]
 8008a5e:	f003 030c 	and.w	r3, r3, #12
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d00b      	beq.n	8008a7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008a66:	4b47      	ldr	r3, [pc, #284]	; (8008b84 <HAL_RCC_OscConfig+0x240>)
 8008a68:	689b      	ldr	r3, [r3, #8]
 8008a6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008a6e:	2b08      	cmp	r3, #8
 8008a70:	d11c      	bne.n	8008aac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008a72:	4b44      	ldr	r3, [pc, #272]	; (8008b84 <HAL_RCC_OscConfig+0x240>)
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d116      	bne.n	8008aac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008a7e:	4b41      	ldr	r3, [pc, #260]	; (8008b84 <HAL_RCC_OscConfig+0x240>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f003 0302 	and.w	r3, r3, #2
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d005      	beq.n	8008a96 <HAL_RCC_OscConfig+0x152>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	68db      	ldr	r3, [r3, #12]
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	d001      	beq.n	8008a96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008a92:	2301      	movs	r3, #1
 8008a94:	e1c7      	b.n	8008e26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a96:	4b3b      	ldr	r3, [pc, #236]	; (8008b84 <HAL_RCC_OscConfig+0x240>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	691b      	ldr	r3, [r3, #16]
 8008aa2:	00db      	lsls	r3, r3, #3
 8008aa4:	4937      	ldr	r1, [pc, #220]	; (8008b84 <HAL_RCC_OscConfig+0x240>)
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008aaa:	e03a      	b.n	8008b22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	68db      	ldr	r3, [r3, #12]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d020      	beq.n	8008af6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008ab4:	4b34      	ldr	r3, [pc, #208]	; (8008b88 <HAL_RCC_OscConfig+0x244>)
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aba:	f7fc f953 	bl	8004d64 <HAL_GetTick>
 8008abe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ac0:	e008      	b.n	8008ad4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008ac2:	f7fc f94f 	bl	8004d64 <HAL_GetTick>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	1ad3      	subs	r3, r2, r3
 8008acc:	2b02      	cmp	r3, #2
 8008ace:	d901      	bls.n	8008ad4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008ad0:	2303      	movs	r3, #3
 8008ad2:	e1a8      	b.n	8008e26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ad4:	4b2b      	ldr	r3, [pc, #172]	; (8008b84 <HAL_RCC_OscConfig+0x240>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f003 0302 	and.w	r3, r3, #2
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d0f0      	beq.n	8008ac2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ae0:	4b28      	ldr	r3, [pc, #160]	; (8008b84 <HAL_RCC_OscConfig+0x240>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	691b      	ldr	r3, [r3, #16]
 8008aec:	00db      	lsls	r3, r3, #3
 8008aee:	4925      	ldr	r1, [pc, #148]	; (8008b84 <HAL_RCC_OscConfig+0x240>)
 8008af0:	4313      	orrs	r3, r2
 8008af2:	600b      	str	r3, [r1, #0]
 8008af4:	e015      	b.n	8008b22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008af6:	4b24      	ldr	r3, [pc, #144]	; (8008b88 <HAL_RCC_OscConfig+0x244>)
 8008af8:	2200      	movs	r2, #0
 8008afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008afc:	f7fc f932 	bl	8004d64 <HAL_GetTick>
 8008b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008b02:	e008      	b.n	8008b16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008b04:	f7fc f92e 	bl	8004d64 <HAL_GetTick>
 8008b08:	4602      	mov	r2, r0
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	1ad3      	subs	r3, r2, r3
 8008b0e:	2b02      	cmp	r3, #2
 8008b10:	d901      	bls.n	8008b16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008b12:	2303      	movs	r3, #3
 8008b14:	e187      	b.n	8008e26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008b16:	4b1b      	ldr	r3, [pc, #108]	; (8008b84 <HAL_RCC_OscConfig+0x240>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f003 0302 	and.w	r3, r3, #2
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d1f0      	bne.n	8008b04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f003 0308 	and.w	r3, r3, #8
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d036      	beq.n	8008b9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	695b      	ldr	r3, [r3, #20]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d016      	beq.n	8008b64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008b36:	4b15      	ldr	r3, [pc, #84]	; (8008b8c <HAL_RCC_OscConfig+0x248>)
 8008b38:	2201      	movs	r2, #1
 8008b3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b3c:	f7fc f912 	bl	8004d64 <HAL_GetTick>
 8008b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008b42:	e008      	b.n	8008b56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008b44:	f7fc f90e 	bl	8004d64 <HAL_GetTick>
 8008b48:	4602      	mov	r2, r0
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	1ad3      	subs	r3, r2, r3
 8008b4e:	2b02      	cmp	r3, #2
 8008b50:	d901      	bls.n	8008b56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008b52:	2303      	movs	r3, #3
 8008b54:	e167      	b.n	8008e26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008b56:	4b0b      	ldr	r3, [pc, #44]	; (8008b84 <HAL_RCC_OscConfig+0x240>)
 8008b58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b5a:	f003 0302 	and.w	r3, r3, #2
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d0f0      	beq.n	8008b44 <HAL_RCC_OscConfig+0x200>
 8008b62:	e01b      	b.n	8008b9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008b64:	4b09      	ldr	r3, [pc, #36]	; (8008b8c <HAL_RCC_OscConfig+0x248>)
 8008b66:	2200      	movs	r2, #0
 8008b68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008b6a:	f7fc f8fb 	bl	8004d64 <HAL_GetTick>
 8008b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008b70:	e00e      	b.n	8008b90 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008b72:	f7fc f8f7 	bl	8004d64 <HAL_GetTick>
 8008b76:	4602      	mov	r2, r0
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	1ad3      	subs	r3, r2, r3
 8008b7c:	2b02      	cmp	r3, #2
 8008b7e:	d907      	bls.n	8008b90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008b80:	2303      	movs	r3, #3
 8008b82:	e150      	b.n	8008e26 <HAL_RCC_OscConfig+0x4e2>
 8008b84:	40023800 	.word	0x40023800
 8008b88:	42470000 	.word	0x42470000
 8008b8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008b90:	4b88      	ldr	r3, [pc, #544]	; (8008db4 <HAL_RCC_OscConfig+0x470>)
 8008b92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b94:	f003 0302 	and.w	r3, r3, #2
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d1ea      	bne.n	8008b72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f003 0304 	and.w	r3, r3, #4
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	f000 8097 	beq.w	8008cd8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008baa:	2300      	movs	r3, #0
 8008bac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008bae:	4b81      	ldr	r3, [pc, #516]	; (8008db4 <HAL_RCC_OscConfig+0x470>)
 8008bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d10f      	bne.n	8008bda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008bba:	2300      	movs	r3, #0
 8008bbc:	60bb      	str	r3, [r7, #8]
 8008bbe:	4b7d      	ldr	r3, [pc, #500]	; (8008db4 <HAL_RCC_OscConfig+0x470>)
 8008bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bc2:	4a7c      	ldr	r2, [pc, #496]	; (8008db4 <HAL_RCC_OscConfig+0x470>)
 8008bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8008bca:	4b7a      	ldr	r3, [pc, #488]	; (8008db4 <HAL_RCC_OscConfig+0x470>)
 8008bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008bd2:	60bb      	str	r3, [r7, #8]
 8008bd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008bda:	4b77      	ldr	r3, [pc, #476]	; (8008db8 <HAL_RCC_OscConfig+0x474>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d118      	bne.n	8008c18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008be6:	4b74      	ldr	r3, [pc, #464]	; (8008db8 <HAL_RCC_OscConfig+0x474>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a73      	ldr	r2, [pc, #460]	; (8008db8 <HAL_RCC_OscConfig+0x474>)
 8008bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008bf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008bf2:	f7fc f8b7 	bl	8004d64 <HAL_GetTick>
 8008bf6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008bf8:	e008      	b.n	8008c0c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008bfa:	f7fc f8b3 	bl	8004d64 <HAL_GetTick>
 8008bfe:	4602      	mov	r2, r0
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	1ad3      	subs	r3, r2, r3
 8008c04:	2b02      	cmp	r3, #2
 8008c06:	d901      	bls.n	8008c0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008c08:	2303      	movs	r3, #3
 8008c0a:	e10c      	b.n	8008e26 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c0c:	4b6a      	ldr	r3, [pc, #424]	; (8008db8 <HAL_RCC_OscConfig+0x474>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d0f0      	beq.n	8008bfa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	689b      	ldr	r3, [r3, #8]
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d106      	bne.n	8008c2e <HAL_RCC_OscConfig+0x2ea>
 8008c20:	4b64      	ldr	r3, [pc, #400]	; (8008db4 <HAL_RCC_OscConfig+0x470>)
 8008c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c24:	4a63      	ldr	r2, [pc, #396]	; (8008db4 <HAL_RCC_OscConfig+0x470>)
 8008c26:	f043 0301 	orr.w	r3, r3, #1
 8008c2a:	6713      	str	r3, [r2, #112]	; 0x70
 8008c2c:	e01c      	b.n	8008c68 <HAL_RCC_OscConfig+0x324>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	689b      	ldr	r3, [r3, #8]
 8008c32:	2b05      	cmp	r3, #5
 8008c34:	d10c      	bne.n	8008c50 <HAL_RCC_OscConfig+0x30c>
 8008c36:	4b5f      	ldr	r3, [pc, #380]	; (8008db4 <HAL_RCC_OscConfig+0x470>)
 8008c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c3a:	4a5e      	ldr	r2, [pc, #376]	; (8008db4 <HAL_RCC_OscConfig+0x470>)
 8008c3c:	f043 0304 	orr.w	r3, r3, #4
 8008c40:	6713      	str	r3, [r2, #112]	; 0x70
 8008c42:	4b5c      	ldr	r3, [pc, #368]	; (8008db4 <HAL_RCC_OscConfig+0x470>)
 8008c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c46:	4a5b      	ldr	r2, [pc, #364]	; (8008db4 <HAL_RCC_OscConfig+0x470>)
 8008c48:	f043 0301 	orr.w	r3, r3, #1
 8008c4c:	6713      	str	r3, [r2, #112]	; 0x70
 8008c4e:	e00b      	b.n	8008c68 <HAL_RCC_OscConfig+0x324>
 8008c50:	4b58      	ldr	r3, [pc, #352]	; (8008db4 <HAL_RCC_OscConfig+0x470>)
 8008c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c54:	4a57      	ldr	r2, [pc, #348]	; (8008db4 <HAL_RCC_OscConfig+0x470>)
 8008c56:	f023 0301 	bic.w	r3, r3, #1
 8008c5a:	6713      	str	r3, [r2, #112]	; 0x70
 8008c5c:	4b55      	ldr	r3, [pc, #340]	; (8008db4 <HAL_RCC_OscConfig+0x470>)
 8008c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c60:	4a54      	ldr	r2, [pc, #336]	; (8008db4 <HAL_RCC_OscConfig+0x470>)
 8008c62:	f023 0304 	bic.w	r3, r3, #4
 8008c66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	689b      	ldr	r3, [r3, #8]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d015      	beq.n	8008c9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c70:	f7fc f878 	bl	8004d64 <HAL_GetTick>
 8008c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c76:	e00a      	b.n	8008c8e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008c78:	f7fc f874 	bl	8004d64 <HAL_GetTick>
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	1ad3      	subs	r3, r2, r3
 8008c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d901      	bls.n	8008c8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008c8a:	2303      	movs	r3, #3
 8008c8c:	e0cb      	b.n	8008e26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c8e:	4b49      	ldr	r3, [pc, #292]	; (8008db4 <HAL_RCC_OscConfig+0x470>)
 8008c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c92:	f003 0302 	and.w	r3, r3, #2
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d0ee      	beq.n	8008c78 <HAL_RCC_OscConfig+0x334>
 8008c9a:	e014      	b.n	8008cc6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008c9c:	f7fc f862 	bl	8004d64 <HAL_GetTick>
 8008ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ca2:	e00a      	b.n	8008cba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ca4:	f7fc f85e 	bl	8004d64 <HAL_GetTick>
 8008ca8:	4602      	mov	r2, r0
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	1ad3      	subs	r3, r2, r3
 8008cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d901      	bls.n	8008cba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008cb6:	2303      	movs	r3, #3
 8008cb8:	e0b5      	b.n	8008e26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008cba:	4b3e      	ldr	r3, [pc, #248]	; (8008db4 <HAL_RCC_OscConfig+0x470>)
 8008cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cbe:	f003 0302 	and.w	r3, r3, #2
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d1ee      	bne.n	8008ca4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008cc6:	7dfb      	ldrb	r3, [r7, #23]
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	d105      	bne.n	8008cd8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ccc:	4b39      	ldr	r3, [pc, #228]	; (8008db4 <HAL_RCC_OscConfig+0x470>)
 8008cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cd0:	4a38      	ldr	r2, [pc, #224]	; (8008db4 <HAL_RCC_OscConfig+0x470>)
 8008cd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008cd6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	699b      	ldr	r3, [r3, #24]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	f000 80a1 	beq.w	8008e24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008ce2:	4b34      	ldr	r3, [pc, #208]	; (8008db4 <HAL_RCC_OscConfig+0x470>)
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	f003 030c 	and.w	r3, r3, #12
 8008cea:	2b08      	cmp	r3, #8
 8008cec:	d05c      	beq.n	8008da8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	699b      	ldr	r3, [r3, #24]
 8008cf2:	2b02      	cmp	r3, #2
 8008cf4:	d141      	bne.n	8008d7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008cf6:	4b31      	ldr	r3, [pc, #196]	; (8008dbc <HAL_RCC_OscConfig+0x478>)
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008cfc:	f7fc f832 	bl	8004d64 <HAL_GetTick>
 8008d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d02:	e008      	b.n	8008d16 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d04:	f7fc f82e 	bl	8004d64 <HAL_GetTick>
 8008d08:	4602      	mov	r2, r0
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	1ad3      	subs	r3, r2, r3
 8008d0e:	2b02      	cmp	r3, #2
 8008d10:	d901      	bls.n	8008d16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008d12:	2303      	movs	r3, #3
 8008d14:	e087      	b.n	8008e26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d16:	4b27      	ldr	r3, [pc, #156]	; (8008db4 <HAL_RCC_OscConfig+0x470>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d1f0      	bne.n	8008d04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	69da      	ldr	r2, [r3, #28]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6a1b      	ldr	r3, [r3, #32]
 8008d2a:	431a      	orrs	r2, r3
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d30:	019b      	lsls	r3, r3, #6
 8008d32:	431a      	orrs	r2, r3
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d38:	085b      	lsrs	r3, r3, #1
 8008d3a:	3b01      	subs	r3, #1
 8008d3c:	041b      	lsls	r3, r3, #16
 8008d3e:	431a      	orrs	r2, r3
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d44:	061b      	lsls	r3, r3, #24
 8008d46:	491b      	ldr	r1, [pc, #108]	; (8008db4 <HAL_RCC_OscConfig+0x470>)
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008d4c:	4b1b      	ldr	r3, [pc, #108]	; (8008dbc <HAL_RCC_OscConfig+0x478>)
 8008d4e:	2201      	movs	r2, #1
 8008d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d52:	f7fc f807 	bl	8004d64 <HAL_GetTick>
 8008d56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d58:	e008      	b.n	8008d6c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d5a:	f7fc f803 	bl	8004d64 <HAL_GetTick>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	1ad3      	subs	r3, r2, r3
 8008d64:	2b02      	cmp	r3, #2
 8008d66:	d901      	bls.n	8008d6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008d68:	2303      	movs	r3, #3
 8008d6a:	e05c      	b.n	8008e26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d6c:	4b11      	ldr	r3, [pc, #68]	; (8008db4 <HAL_RCC_OscConfig+0x470>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d0f0      	beq.n	8008d5a <HAL_RCC_OscConfig+0x416>
 8008d78:	e054      	b.n	8008e24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d7a:	4b10      	ldr	r3, [pc, #64]	; (8008dbc <HAL_RCC_OscConfig+0x478>)
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d80:	f7fb fff0 	bl	8004d64 <HAL_GetTick>
 8008d84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d86:	e008      	b.n	8008d9a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d88:	f7fb ffec 	bl	8004d64 <HAL_GetTick>
 8008d8c:	4602      	mov	r2, r0
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	1ad3      	subs	r3, r2, r3
 8008d92:	2b02      	cmp	r3, #2
 8008d94:	d901      	bls.n	8008d9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008d96:	2303      	movs	r3, #3
 8008d98:	e045      	b.n	8008e26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d9a:	4b06      	ldr	r3, [pc, #24]	; (8008db4 <HAL_RCC_OscConfig+0x470>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d1f0      	bne.n	8008d88 <HAL_RCC_OscConfig+0x444>
 8008da6:	e03d      	b.n	8008e24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	699b      	ldr	r3, [r3, #24]
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d107      	bne.n	8008dc0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008db0:	2301      	movs	r3, #1
 8008db2:	e038      	b.n	8008e26 <HAL_RCC_OscConfig+0x4e2>
 8008db4:	40023800 	.word	0x40023800
 8008db8:	40007000 	.word	0x40007000
 8008dbc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008dc0:	4b1b      	ldr	r3, [pc, #108]	; (8008e30 <HAL_RCC_OscConfig+0x4ec>)
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	699b      	ldr	r3, [r3, #24]
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	d028      	beq.n	8008e20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d121      	bne.n	8008e20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d11a      	bne.n	8008e20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008dea:	68fa      	ldr	r2, [r7, #12]
 8008dec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008df0:	4013      	ands	r3, r2
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008df6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d111      	bne.n	8008e20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e06:	085b      	lsrs	r3, r3, #1
 8008e08:	3b01      	subs	r3, #1
 8008e0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d107      	bne.n	8008e20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d001      	beq.n	8008e24 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008e20:	2301      	movs	r3, #1
 8008e22:	e000      	b.n	8008e26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008e24:	2300      	movs	r3, #0
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3718      	adds	r7, #24
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
 8008e2e:	bf00      	nop
 8008e30:	40023800 	.word	0x40023800

08008e34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b084      	sub	sp, #16
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d101      	bne.n	8008e48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008e44:	2301      	movs	r3, #1
 8008e46:	e0cc      	b.n	8008fe2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008e48:	4b68      	ldr	r3, [pc, #416]	; (8008fec <HAL_RCC_ClockConfig+0x1b8>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f003 0307 	and.w	r3, r3, #7
 8008e50:	683a      	ldr	r2, [r7, #0]
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d90c      	bls.n	8008e70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e56:	4b65      	ldr	r3, [pc, #404]	; (8008fec <HAL_RCC_ClockConfig+0x1b8>)
 8008e58:	683a      	ldr	r2, [r7, #0]
 8008e5a:	b2d2      	uxtb	r2, r2
 8008e5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e5e:	4b63      	ldr	r3, [pc, #396]	; (8008fec <HAL_RCC_ClockConfig+0x1b8>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f003 0307 	and.w	r3, r3, #7
 8008e66:	683a      	ldr	r2, [r7, #0]
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d001      	beq.n	8008e70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	e0b8      	b.n	8008fe2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f003 0302 	and.w	r3, r3, #2
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d020      	beq.n	8008ebe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f003 0304 	and.w	r3, r3, #4
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d005      	beq.n	8008e94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008e88:	4b59      	ldr	r3, [pc, #356]	; (8008ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	4a58      	ldr	r2, [pc, #352]	; (8008ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8008e8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008e92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f003 0308 	and.w	r3, r3, #8
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d005      	beq.n	8008eac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008ea0:	4b53      	ldr	r3, [pc, #332]	; (8008ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8008ea2:	689b      	ldr	r3, [r3, #8]
 8008ea4:	4a52      	ldr	r2, [pc, #328]	; (8008ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8008ea6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008eaa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008eac:	4b50      	ldr	r3, [pc, #320]	; (8008ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8008eae:	689b      	ldr	r3, [r3, #8]
 8008eb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	494d      	ldr	r1, [pc, #308]	; (8008ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f003 0301 	and.w	r3, r3, #1
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d044      	beq.n	8008f54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	d107      	bne.n	8008ee2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ed2:	4b47      	ldr	r3, [pc, #284]	; (8008ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d119      	bne.n	8008f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	e07f      	b.n	8008fe2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	2b02      	cmp	r3, #2
 8008ee8:	d003      	beq.n	8008ef2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008eee:	2b03      	cmp	r3, #3
 8008ef0:	d107      	bne.n	8008f02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ef2:	4b3f      	ldr	r3, [pc, #252]	; (8008ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d109      	bne.n	8008f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008efe:	2301      	movs	r3, #1
 8008f00:	e06f      	b.n	8008fe2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f02:	4b3b      	ldr	r3, [pc, #236]	; (8008ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f003 0302 	and.w	r3, r3, #2
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d101      	bne.n	8008f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	e067      	b.n	8008fe2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008f12:	4b37      	ldr	r3, [pc, #220]	; (8008ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	f023 0203 	bic.w	r2, r3, #3
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	4934      	ldr	r1, [pc, #208]	; (8008ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8008f20:	4313      	orrs	r3, r2
 8008f22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008f24:	f7fb ff1e 	bl	8004d64 <HAL_GetTick>
 8008f28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f2a:	e00a      	b.n	8008f42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f2c:	f7fb ff1a 	bl	8004d64 <HAL_GetTick>
 8008f30:	4602      	mov	r2, r0
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	1ad3      	subs	r3, r2, r3
 8008f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d901      	bls.n	8008f42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008f3e:	2303      	movs	r3, #3
 8008f40:	e04f      	b.n	8008fe2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f42:	4b2b      	ldr	r3, [pc, #172]	; (8008ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8008f44:	689b      	ldr	r3, [r3, #8]
 8008f46:	f003 020c 	and.w	r2, r3, #12
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	009b      	lsls	r3, r3, #2
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d1eb      	bne.n	8008f2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008f54:	4b25      	ldr	r3, [pc, #148]	; (8008fec <HAL_RCC_ClockConfig+0x1b8>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f003 0307 	and.w	r3, r3, #7
 8008f5c:	683a      	ldr	r2, [r7, #0]
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d20c      	bcs.n	8008f7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f62:	4b22      	ldr	r3, [pc, #136]	; (8008fec <HAL_RCC_ClockConfig+0x1b8>)
 8008f64:	683a      	ldr	r2, [r7, #0]
 8008f66:	b2d2      	uxtb	r2, r2
 8008f68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f6a:	4b20      	ldr	r3, [pc, #128]	; (8008fec <HAL_RCC_ClockConfig+0x1b8>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f003 0307 	and.w	r3, r3, #7
 8008f72:	683a      	ldr	r2, [r7, #0]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d001      	beq.n	8008f7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	e032      	b.n	8008fe2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f003 0304 	and.w	r3, r3, #4
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d008      	beq.n	8008f9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008f88:	4b19      	ldr	r3, [pc, #100]	; (8008ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8008f8a:	689b      	ldr	r3, [r3, #8]
 8008f8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	68db      	ldr	r3, [r3, #12]
 8008f94:	4916      	ldr	r1, [pc, #88]	; (8008ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8008f96:	4313      	orrs	r3, r2
 8008f98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f003 0308 	and.w	r3, r3, #8
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d009      	beq.n	8008fba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008fa6:	4b12      	ldr	r3, [pc, #72]	; (8008ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8008fa8:	689b      	ldr	r3, [r3, #8]
 8008faa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	691b      	ldr	r3, [r3, #16]
 8008fb2:	00db      	lsls	r3, r3, #3
 8008fb4:	490e      	ldr	r1, [pc, #56]	; (8008ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008fba:	f000 f821 	bl	8009000 <HAL_RCC_GetSysClockFreq>
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	4b0b      	ldr	r3, [pc, #44]	; (8008ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8008fc2:	689b      	ldr	r3, [r3, #8]
 8008fc4:	091b      	lsrs	r3, r3, #4
 8008fc6:	f003 030f 	and.w	r3, r3, #15
 8008fca:	490a      	ldr	r1, [pc, #40]	; (8008ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8008fcc:	5ccb      	ldrb	r3, [r1, r3]
 8008fce:	fa22 f303 	lsr.w	r3, r2, r3
 8008fd2:	4a09      	ldr	r2, [pc, #36]	; (8008ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8008fd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008fd6:	4b09      	ldr	r3, [pc, #36]	; (8008ffc <HAL_RCC_ClockConfig+0x1c8>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f7fb fae0 	bl	80045a0 <HAL_InitTick>

  return HAL_OK;
 8008fe0:	2300      	movs	r3, #0
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3710      	adds	r7, #16
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}
 8008fea:	bf00      	nop
 8008fec:	40023c00 	.word	0x40023c00
 8008ff0:	40023800 	.word	0x40023800
 8008ff4:	0801b7f4 	.word	0x0801b7f4
 8008ff8:	20000014 	.word	0x20000014
 8008ffc:	2000002c 	.word	0x2000002c

08009000 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009000:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009004:	b094      	sub	sp, #80	; 0x50
 8009006:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009008:	2300      	movs	r3, #0
 800900a:	647b      	str	r3, [r7, #68]	; 0x44
 800900c:	2300      	movs	r3, #0
 800900e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009010:	2300      	movs	r3, #0
 8009012:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8009014:	2300      	movs	r3, #0
 8009016:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009018:	4b79      	ldr	r3, [pc, #484]	; (8009200 <HAL_RCC_GetSysClockFreq+0x200>)
 800901a:	689b      	ldr	r3, [r3, #8]
 800901c:	f003 030c 	and.w	r3, r3, #12
 8009020:	2b08      	cmp	r3, #8
 8009022:	d00d      	beq.n	8009040 <HAL_RCC_GetSysClockFreq+0x40>
 8009024:	2b08      	cmp	r3, #8
 8009026:	f200 80e1 	bhi.w	80091ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800902a:	2b00      	cmp	r3, #0
 800902c:	d002      	beq.n	8009034 <HAL_RCC_GetSysClockFreq+0x34>
 800902e:	2b04      	cmp	r3, #4
 8009030:	d003      	beq.n	800903a <HAL_RCC_GetSysClockFreq+0x3a>
 8009032:	e0db      	b.n	80091ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009034:	4b73      	ldr	r3, [pc, #460]	; (8009204 <HAL_RCC_GetSysClockFreq+0x204>)
 8009036:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8009038:	e0db      	b.n	80091f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800903a:	4b73      	ldr	r3, [pc, #460]	; (8009208 <HAL_RCC_GetSysClockFreq+0x208>)
 800903c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800903e:	e0d8      	b.n	80091f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009040:	4b6f      	ldr	r3, [pc, #444]	; (8009200 <HAL_RCC_GetSysClockFreq+0x200>)
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009048:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800904a:	4b6d      	ldr	r3, [pc, #436]	; (8009200 <HAL_RCC_GetSysClockFreq+0x200>)
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009052:	2b00      	cmp	r3, #0
 8009054:	d063      	beq.n	800911e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009056:	4b6a      	ldr	r3, [pc, #424]	; (8009200 <HAL_RCC_GetSysClockFreq+0x200>)
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	099b      	lsrs	r3, r3, #6
 800905c:	2200      	movs	r2, #0
 800905e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009060:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009064:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009068:	633b      	str	r3, [r7, #48]	; 0x30
 800906a:	2300      	movs	r3, #0
 800906c:	637b      	str	r3, [r7, #52]	; 0x34
 800906e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009072:	4622      	mov	r2, r4
 8009074:	462b      	mov	r3, r5
 8009076:	f04f 0000 	mov.w	r0, #0
 800907a:	f04f 0100 	mov.w	r1, #0
 800907e:	0159      	lsls	r1, r3, #5
 8009080:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009084:	0150      	lsls	r0, r2, #5
 8009086:	4602      	mov	r2, r0
 8009088:	460b      	mov	r3, r1
 800908a:	4621      	mov	r1, r4
 800908c:	1a51      	subs	r1, r2, r1
 800908e:	6139      	str	r1, [r7, #16]
 8009090:	4629      	mov	r1, r5
 8009092:	eb63 0301 	sbc.w	r3, r3, r1
 8009096:	617b      	str	r3, [r7, #20]
 8009098:	f04f 0200 	mov.w	r2, #0
 800909c:	f04f 0300 	mov.w	r3, #0
 80090a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80090a4:	4659      	mov	r1, fp
 80090a6:	018b      	lsls	r3, r1, #6
 80090a8:	4651      	mov	r1, sl
 80090aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80090ae:	4651      	mov	r1, sl
 80090b0:	018a      	lsls	r2, r1, #6
 80090b2:	4651      	mov	r1, sl
 80090b4:	ebb2 0801 	subs.w	r8, r2, r1
 80090b8:	4659      	mov	r1, fp
 80090ba:	eb63 0901 	sbc.w	r9, r3, r1
 80090be:	f04f 0200 	mov.w	r2, #0
 80090c2:	f04f 0300 	mov.w	r3, #0
 80090c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80090ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80090ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80090d2:	4690      	mov	r8, r2
 80090d4:	4699      	mov	r9, r3
 80090d6:	4623      	mov	r3, r4
 80090d8:	eb18 0303 	adds.w	r3, r8, r3
 80090dc:	60bb      	str	r3, [r7, #8]
 80090de:	462b      	mov	r3, r5
 80090e0:	eb49 0303 	adc.w	r3, r9, r3
 80090e4:	60fb      	str	r3, [r7, #12]
 80090e6:	f04f 0200 	mov.w	r2, #0
 80090ea:	f04f 0300 	mov.w	r3, #0
 80090ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80090f2:	4629      	mov	r1, r5
 80090f4:	024b      	lsls	r3, r1, #9
 80090f6:	4621      	mov	r1, r4
 80090f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80090fc:	4621      	mov	r1, r4
 80090fe:	024a      	lsls	r2, r1, #9
 8009100:	4610      	mov	r0, r2
 8009102:	4619      	mov	r1, r3
 8009104:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009106:	2200      	movs	r2, #0
 8009108:	62bb      	str	r3, [r7, #40]	; 0x28
 800910a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800910c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009110:	f7f7 fdc4 	bl	8000c9c <__aeabi_uldivmod>
 8009114:	4602      	mov	r2, r0
 8009116:	460b      	mov	r3, r1
 8009118:	4613      	mov	r3, r2
 800911a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800911c:	e058      	b.n	80091d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800911e:	4b38      	ldr	r3, [pc, #224]	; (8009200 <HAL_RCC_GetSysClockFreq+0x200>)
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	099b      	lsrs	r3, r3, #6
 8009124:	2200      	movs	r2, #0
 8009126:	4618      	mov	r0, r3
 8009128:	4611      	mov	r1, r2
 800912a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800912e:	623b      	str	r3, [r7, #32]
 8009130:	2300      	movs	r3, #0
 8009132:	627b      	str	r3, [r7, #36]	; 0x24
 8009134:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009138:	4642      	mov	r2, r8
 800913a:	464b      	mov	r3, r9
 800913c:	f04f 0000 	mov.w	r0, #0
 8009140:	f04f 0100 	mov.w	r1, #0
 8009144:	0159      	lsls	r1, r3, #5
 8009146:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800914a:	0150      	lsls	r0, r2, #5
 800914c:	4602      	mov	r2, r0
 800914e:	460b      	mov	r3, r1
 8009150:	4641      	mov	r1, r8
 8009152:	ebb2 0a01 	subs.w	sl, r2, r1
 8009156:	4649      	mov	r1, r9
 8009158:	eb63 0b01 	sbc.w	fp, r3, r1
 800915c:	f04f 0200 	mov.w	r2, #0
 8009160:	f04f 0300 	mov.w	r3, #0
 8009164:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009168:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800916c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009170:	ebb2 040a 	subs.w	r4, r2, sl
 8009174:	eb63 050b 	sbc.w	r5, r3, fp
 8009178:	f04f 0200 	mov.w	r2, #0
 800917c:	f04f 0300 	mov.w	r3, #0
 8009180:	00eb      	lsls	r3, r5, #3
 8009182:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009186:	00e2      	lsls	r2, r4, #3
 8009188:	4614      	mov	r4, r2
 800918a:	461d      	mov	r5, r3
 800918c:	4643      	mov	r3, r8
 800918e:	18e3      	adds	r3, r4, r3
 8009190:	603b      	str	r3, [r7, #0]
 8009192:	464b      	mov	r3, r9
 8009194:	eb45 0303 	adc.w	r3, r5, r3
 8009198:	607b      	str	r3, [r7, #4]
 800919a:	f04f 0200 	mov.w	r2, #0
 800919e:	f04f 0300 	mov.w	r3, #0
 80091a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80091a6:	4629      	mov	r1, r5
 80091a8:	028b      	lsls	r3, r1, #10
 80091aa:	4621      	mov	r1, r4
 80091ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80091b0:	4621      	mov	r1, r4
 80091b2:	028a      	lsls	r2, r1, #10
 80091b4:	4610      	mov	r0, r2
 80091b6:	4619      	mov	r1, r3
 80091b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091ba:	2200      	movs	r2, #0
 80091bc:	61bb      	str	r3, [r7, #24]
 80091be:	61fa      	str	r2, [r7, #28]
 80091c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80091c4:	f7f7 fd6a 	bl	8000c9c <__aeabi_uldivmod>
 80091c8:	4602      	mov	r2, r0
 80091ca:	460b      	mov	r3, r1
 80091cc:	4613      	mov	r3, r2
 80091ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80091d0:	4b0b      	ldr	r3, [pc, #44]	; (8009200 <HAL_RCC_GetSysClockFreq+0x200>)
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	0c1b      	lsrs	r3, r3, #16
 80091d6:	f003 0303 	and.w	r3, r3, #3
 80091da:	3301      	adds	r3, #1
 80091dc:	005b      	lsls	r3, r3, #1
 80091de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80091e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80091e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80091e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80091ea:	e002      	b.n	80091f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80091ec:	4b05      	ldr	r3, [pc, #20]	; (8009204 <HAL_RCC_GetSysClockFreq+0x204>)
 80091ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80091f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80091f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3750      	adds	r7, #80	; 0x50
 80091f8:	46bd      	mov	sp, r7
 80091fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80091fe:	bf00      	nop
 8009200:	40023800 	.word	0x40023800
 8009204:	00f42400 	.word	0x00f42400
 8009208:	007a1200 	.word	0x007a1200

0800920c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800920c:	b480      	push	{r7}
 800920e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009210:	4b03      	ldr	r3, [pc, #12]	; (8009220 <HAL_RCC_GetHCLKFreq+0x14>)
 8009212:	681b      	ldr	r3, [r3, #0]
}
 8009214:	4618      	mov	r0, r3
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr
 800921e:	bf00      	nop
 8009220:	20000014 	.word	0x20000014

08009224 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009228:	f7ff fff0 	bl	800920c <HAL_RCC_GetHCLKFreq>
 800922c:	4602      	mov	r2, r0
 800922e:	4b05      	ldr	r3, [pc, #20]	; (8009244 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009230:	689b      	ldr	r3, [r3, #8]
 8009232:	0a9b      	lsrs	r3, r3, #10
 8009234:	f003 0307 	and.w	r3, r3, #7
 8009238:	4903      	ldr	r1, [pc, #12]	; (8009248 <HAL_RCC_GetPCLK1Freq+0x24>)
 800923a:	5ccb      	ldrb	r3, [r1, r3]
 800923c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009240:	4618      	mov	r0, r3
 8009242:	bd80      	pop	{r7, pc}
 8009244:	40023800 	.word	0x40023800
 8009248:	0801b804 	.word	0x0801b804

0800924c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009250:	f7ff ffdc 	bl	800920c <HAL_RCC_GetHCLKFreq>
 8009254:	4602      	mov	r2, r0
 8009256:	4b05      	ldr	r3, [pc, #20]	; (800926c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009258:	689b      	ldr	r3, [r3, #8]
 800925a:	0b5b      	lsrs	r3, r3, #13
 800925c:	f003 0307 	and.w	r3, r3, #7
 8009260:	4903      	ldr	r1, [pc, #12]	; (8009270 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009262:	5ccb      	ldrb	r3, [r1, r3]
 8009264:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009268:	4618      	mov	r0, r3
 800926a:	bd80      	pop	{r7, pc}
 800926c:	40023800 	.word	0x40023800
 8009270:	0801b804 	.word	0x0801b804

08009274 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	220f      	movs	r2, #15
 8009282:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009284:	4b12      	ldr	r3, [pc, #72]	; (80092d0 <HAL_RCC_GetClockConfig+0x5c>)
 8009286:	689b      	ldr	r3, [r3, #8]
 8009288:	f003 0203 	and.w	r2, r3, #3
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009290:	4b0f      	ldr	r3, [pc, #60]	; (80092d0 <HAL_RCC_GetClockConfig+0x5c>)
 8009292:	689b      	ldr	r3, [r3, #8]
 8009294:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800929c:	4b0c      	ldr	r3, [pc, #48]	; (80092d0 <HAL_RCC_GetClockConfig+0x5c>)
 800929e:	689b      	ldr	r3, [r3, #8]
 80092a0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80092a8:	4b09      	ldr	r3, [pc, #36]	; (80092d0 <HAL_RCC_GetClockConfig+0x5c>)
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	08db      	lsrs	r3, r3, #3
 80092ae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80092b6:	4b07      	ldr	r3, [pc, #28]	; (80092d4 <HAL_RCC_GetClockConfig+0x60>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f003 0207 	and.w	r2, r3, #7
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	601a      	str	r2, [r3, #0]
}
 80092c2:	bf00      	nop
 80092c4:	370c      	adds	r7, #12
 80092c6:	46bd      	mov	sp, r7
 80092c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092cc:	4770      	bx	lr
 80092ce:	bf00      	nop
 80092d0:	40023800 	.word	0x40023800
 80092d4:	40023c00 	.word	0x40023c00

080092d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b082      	sub	sp, #8
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d101      	bne.n	80092ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80092e6:	2301      	movs	r3, #1
 80092e8:	e041      	b.n	800936e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092f0:	b2db      	uxtb	r3, r3
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d106      	bne.n	8009304 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2200      	movs	r2, #0
 80092fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f000 f839 	bl	8009376 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2202      	movs	r2, #2
 8009308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681a      	ldr	r2, [r3, #0]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	3304      	adds	r3, #4
 8009314:	4619      	mov	r1, r3
 8009316:	4610      	mov	r0, r2
 8009318:	f000 fc7a 	bl	8009c10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2201      	movs	r2, #1
 8009320:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2201      	movs	r2, #1
 8009328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2201      	movs	r2, #1
 8009330:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2201      	movs	r2, #1
 8009338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2201      	movs	r2, #1
 8009340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2201      	movs	r2, #1
 8009348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2201      	movs	r2, #1
 8009350:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2201      	movs	r2, #1
 8009358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2201      	movs	r2, #1
 8009360:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2201      	movs	r2, #1
 8009368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800936c:	2300      	movs	r3, #0
}
 800936e:	4618      	mov	r0, r3
 8009370:	3708      	adds	r7, #8
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}

08009376 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009376:	b480      	push	{r7}
 8009378:	b083      	sub	sp, #12
 800937a:	af00      	add	r7, sp, #0
 800937c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800937e:	bf00      	nop
 8009380:	370c      	adds	r7, #12
 8009382:	46bd      	mov	sp, r7
 8009384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009388:	4770      	bx	lr
	...

0800938c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800938c:	b480      	push	{r7}
 800938e:	b085      	sub	sp, #20
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800939a:	b2db      	uxtb	r3, r3
 800939c:	2b01      	cmp	r3, #1
 800939e:	d001      	beq.n	80093a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80093a0:	2301      	movs	r3, #1
 80093a2:	e044      	b.n	800942e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2202      	movs	r2, #2
 80093a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	68da      	ldr	r2, [r3, #12]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f042 0201 	orr.w	r2, r2, #1
 80093ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4a1e      	ldr	r2, [pc, #120]	; (800943c <HAL_TIM_Base_Start_IT+0xb0>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d018      	beq.n	80093f8 <HAL_TIM_Base_Start_IT+0x6c>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093ce:	d013      	beq.n	80093f8 <HAL_TIM_Base_Start_IT+0x6c>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4a1a      	ldr	r2, [pc, #104]	; (8009440 <HAL_TIM_Base_Start_IT+0xb4>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d00e      	beq.n	80093f8 <HAL_TIM_Base_Start_IT+0x6c>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4a19      	ldr	r2, [pc, #100]	; (8009444 <HAL_TIM_Base_Start_IT+0xb8>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d009      	beq.n	80093f8 <HAL_TIM_Base_Start_IT+0x6c>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4a17      	ldr	r2, [pc, #92]	; (8009448 <HAL_TIM_Base_Start_IT+0xbc>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d004      	beq.n	80093f8 <HAL_TIM_Base_Start_IT+0x6c>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	4a16      	ldr	r2, [pc, #88]	; (800944c <HAL_TIM_Base_Start_IT+0xc0>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d111      	bne.n	800941c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	689b      	ldr	r3, [r3, #8]
 80093fe:	f003 0307 	and.w	r3, r3, #7
 8009402:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	2b06      	cmp	r3, #6
 8009408:	d010      	beq.n	800942c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	681a      	ldr	r2, [r3, #0]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f042 0201 	orr.w	r2, r2, #1
 8009418:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800941a:	e007      	b.n	800942c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	681a      	ldr	r2, [r3, #0]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f042 0201 	orr.w	r2, r2, #1
 800942a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800942c:	2300      	movs	r3, #0
}
 800942e:	4618      	mov	r0, r3
 8009430:	3714      	adds	r7, #20
 8009432:	46bd      	mov	sp, r7
 8009434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009438:	4770      	bx	lr
 800943a:	bf00      	nop
 800943c:	40010000 	.word	0x40010000
 8009440:	40000400 	.word	0x40000400
 8009444:	40000800 	.word	0x40000800
 8009448:	40000c00 	.word	0x40000c00
 800944c:	40014000 	.word	0x40014000

08009450 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b084      	sub	sp, #16
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d109      	bne.n	8009474 <HAL_TIM_PWM_Start+0x24>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009466:	b2db      	uxtb	r3, r3
 8009468:	2b01      	cmp	r3, #1
 800946a:	bf14      	ite	ne
 800946c:	2301      	movne	r3, #1
 800946e:	2300      	moveq	r3, #0
 8009470:	b2db      	uxtb	r3, r3
 8009472:	e022      	b.n	80094ba <HAL_TIM_PWM_Start+0x6a>
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	2b04      	cmp	r3, #4
 8009478:	d109      	bne.n	800948e <HAL_TIM_PWM_Start+0x3e>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009480:	b2db      	uxtb	r3, r3
 8009482:	2b01      	cmp	r3, #1
 8009484:	bf14      	ite	ne
 8009486:	2301      	movne	r3, #1
 8009488:	2300      	moveq	r3, #0
 800948a:	b2db      	uxtb	r3, r3
 800948c:	e015      	b.n	80094ba <HAL_TIM_PWM_Start+0x6a>
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	2b08      	cmp	r3, #8
 8009492:	d109      	bne.n	80094a8 <HAL_TIM_PWM_Start+0x58>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800949a:	b2db      	uxtb	r3, r3
 800949c:	2b01      	cmp	r3, #1
 800949e:	bf14      	ite	ne
 80094a0:	2301      	movne	r3, #1
 80094a2:	2300      	moveq	r3, #0
 80094a4:	b2db      	uxtb	r3, r3
 80094a6:	e008      	b.n	80094ba <HAL_TIM_PWM_Start+0x6a>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80094ae:	b2db      	uxtb	r3, r3
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	bf14      	ite	ne
 80094b4:	2301      	movne	r3, #1
 80094b6:	2300      	moveq	r3, #0
 80094b8:	b2db      	uxtb	r3, r3
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d001      	beq.n	80094c2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80094be:	2301      	movs	r3, #1
 80094c0:	e068      	b.n	8009594 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d104      	bne.n	80094d2 <HAL_TIM_PWM_Start+0x82>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2202      	movs	r2, #2
 80094cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80094d0:	e013      	b.n	80094fa <HAL_TIM_PWM_Start+0xaa>
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	2b04      	cmp	r3, #4
 80094d6:	d104      	bne.n	80094e2 <HAL_TIM_PWM_Start+0x92>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2202      	movs	r2, #2
 80094dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80094e0:	e00b      	b.n	80094fa <HAL_TIM_PWM_Start+0xaa>
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	2b08      	cmp	r3, #8
 80094e6:	d104      	bne.n	80094f2 <HAL_TIM_PWM_Start+0xa2>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2202      	movs	r2, #2
 80094ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80094f0:	e003      	b.n	80094fa <HAL_TIM_PWM_Start+0xaa>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2202      	movs	r2, #2
 80094f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	2201      	movs	r2, #1
 8009500:	6839      	ldr	r1, [r7, #0]
 8009502:	4618      	mov	r0, r3
 8009504:	f000 fd90 	bl	800a028 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a23      	ldr	r2, [pc, #140]	; (800959c <HAL_TIM_PWM_Start+0x14c>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d107      	bne.n	8009522 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009520:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	4a1d      	ldr	r2, [pc, #116]	; (800959c <HAL_TIM_PWM_Start+0x14c>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d018      	beq.n	800955e <HAL_TIM_PWM_Start+0x10e>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009534:	d013      	beq.n	800955e <HAL_TIM_PWM_Start+0x10e>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4a19      	ldr	r2, [pc, #100]	; (80095a0 <HAL_TIM_PWM_Start+0x150>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d00e      	beq.n	800955e <HAL_TIM_PWM_Start+0x10e>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a17      	ldr	r2, [pc, #92]	; (80095a4 <HAL_TIM_PWM_Start+0x154>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d009      	beq.n	800955e <HAL_TIM_PWM_Start+0x10e>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4a16      	ldr	r2, [pc, #88]	; (80095a8 <HAL_TIM_PWM_Start+0x158>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d004      	beq.n	800955e <HAL_TIM_PWM_Start+0x10e>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4a14      	ldr	r2, [pc, #80]	; (80095ac <HAL_TIM_PWM_Start+0x15c>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d111      	bne.n	8009582 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	689b      	ldr	r3, [r3, #8]
 8009564:	f003 0307 	and.w	r3, r3, #7
 8009568:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2b06      	cmp	r3, #6
 800956e:	d010      	beq.n	8009592 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f042 0201 	orr.w	r2, r2, #1
 800957e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009580:	e007      	b.n	8009592 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	681a      	ldr	r2, [r3, #0]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f042 0201 	orr.w	r2, r2, #1
 8009590:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009592:	2300      	movs	r3, #0
}
 8009594:	4618      	mov	r0, r3
 8009596:	3710      	adds	r7, #16
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}
 800959c:	40010000 	.word	0x40010000
 80095a0:	40000400 	.word	0x40000400
 80095a4:	40000800 	.word	0x40000800
 80095a8:	40000c00 	.word	0x40000c00
 80095ac:	40014000 	.word	0x40014000

080095b0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b086      	sub	sp, #24
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d101      	bne.n	80095c4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80095c0:	2301      	movs	r3, #1
 80095c2:	e097      	b.n	80096f4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095ca:	b2db      	uxtb	r3, r3
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d106      	bne.n	80095de <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2200      	movs	r2, #0
 80095d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 f88f 	bl	80096fc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2202      	movs	r2, #2
 80095e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	689b      	ldr	r3, [r3, #8]
 80095ec:	687a      	ldr	r2, [r7, #4]
 80095ee:	6812      	ldr	r2, [r2, #0]
 80095f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80095f4:	f023 0307 	bic.w	r3, r3, #7
 80095f8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	3304      	adds	r3, #4
 8009602:	4619      	mov	r1, r3
 8009604:	4610      	mov	r0, r2
 8009606:	f000 fb03 	bl	8009c10 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	689b      	ldr	r3, [r3, #8]
 8009610:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	699b      	ldr	r3, [r3, #24]
 8009618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	6a1b      	ldr	r3, [r3, #32]
 8009620:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	697a      	ldr	r2, [r7, #20]
 8009628:	4313      	orrs	r3, r2
 800962a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009632:	f023 0303 	bic.w	r3, r3, #3
 8009636:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	689a      	ldr	r2, [r3, #8]
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	699b      	ldr	r3, [r3, #24]
 8009640:	021b      	lsls	r3, r3, #8
 8009642:	4313      	orrs	r3, r2
 8009644:	693a      	ldr	r2, [r7, #16]
 8009646:	4313      	orrs	r3, r2
 8009648:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009650:	f023 030c 	bic.w	r3, r3, #12
 8009654:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800965c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009660:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	68da      	ldr	r2, [r3, #12]
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	69db      	ldr	r3, [r3, #28]
 800966a:	021b      	lsls	r3, r3, #8
 800966c:	4313      	orrs	r3, r2
 800966e:	693a      	ldr	r2, [r7, #16]
 8009670:	4313      	orrs	r3, r2
 8009672:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	691b      	ldr	r3, [r3, #16]
 8009678:	011a      	lsls	r2, r3, #4
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	6a1b      	ldr	r3, [r3, #32]
 800967e:	031b      	lsls	r3, r3, #12
 8009680:	4313      	orrs	r3, r2
 8009682:	693a      	ldr	r2, [r7, #16]
 8009684:	4313      	orrs	r3, r2
 8009686:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800968e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009696:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	685a      	ldr	r2, [r3, #4]
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	695b      	ldr	r3, [r3, #20]
 80096a0:	011b      	lsls	r3, r3, #4
 80096a2:	4313      	orrs	r3, r2
 80096a4:	68fa      	ldr	r2, [r7, #12]
 80096a6:	4313      	orrs	r3, r2
 80096a8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	697a      	ldr	r2, [r7, #20]
 80096b0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	693a      	ldr	r2, [r7, #16]
 80096b8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	68fa      	ldr	r2, [r7, #12]
 80096c0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2201      	movs	r2, #1
 80096c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2201      	movs	r2, #1
 80096ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2201      	movs	r2, #1
 80096d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2201      	movs	r2, #1
 80096de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2201      	movs	r2, #1
 80096e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2201      	movs	r2, #1
 80096ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80096f2:	2300      	movs	r3, #0
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3718      	adds	r7, #24
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b083      	sub	sp, #12
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 8009704:	bf00      	nop
 8009706:	370c      	adds	r7, #12
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr

08009710 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b084      	sub	sp, #16
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009720:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009728:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009730:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009738:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d110      	bne.n	8009762 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009740:	7bfb      	ldrb	r3, [r7, #15]
 8009742:	2b01      	cmp	r3, #1
 8009744:	d102      	bne.n	800974c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009746:	7b7b      	ldrb	r3, [r7, #13]
 8009748:	2b01      	cmp	r3, #1
 800974a:	d001      	beq.n	8009750 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800974c:	2301      	movs	r3, #1
 800974e:	e069      	b.n	8009824 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2202      	movs	r2, #2
 8009754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2202      	movs	r2, #2
 800975c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009760:	e031      	b.n	80097c6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	2b04      	cmp	r3, #4
 8009766:	d110      	bne.n	800978a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009768:	7bbb      	ldrb	r3, [r7, #14]
 800976a:	2b01      	cmp	r3, #1
 800976c:	d102      	bne.n	8009774 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800976e:	7b3b      	ldrb	r3, [r7, #12]
 8009770:	2b01      	cmp	r3, #1
 8009772:	d001      	beq.n	8009778 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009774:	2301      	movs	r3, #1
 8009776:	e055      	b.n	8009824 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2202      	movs	r2, #2
 800977c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2202      	movs	r2, #2
 8009784:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009788:	e01d      	b.n	80097c6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800978a:	7bfb      	ldrb	r3, [r7, #15]
 800978c:	2b01      	cmp	r3, #1
 800978e:	d108      	bne.n	80097a2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009790:	7bbb      	ldrb	r3, [r7, #14]
 8009792:	2b01      	cmp	r3, #1
 8009794:	d105      	bne.n	80097a2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009796:	7b7b      	ldrb	r3, [r7, #13]
 8009798:	2b01      	cmp	r3, #1
 800979a:	d102      	bne.n	80097a2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800979c:	7b3b      	ldrb	r3, [r7, #12]
 800979e:	2b01      	cmp	r3, #1
 80097a0:	d001      	beq.n	80097a6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80097a2:	2301      	movs	r3, #1
 80097a4:	e03e      	b.n	8009824 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2202      	movs	r2, #2
 80097aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2202      	movs	r2, #2
 80097b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2202      	movs	r2, #2
 80097ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2202      	movs	r2, #2
 80097c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d003      	beq.n	80097d4 <HAL_TIM_Encoder_Start+0xc4>
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	2b04      	cmp	r3, #4
 80097d0:	d008      	beq.n	80097e4 <HAL_TIM_Encoder_Start+0xd4>
 80097d2:	e00f      	b.n	80097f4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	2201      	movs	r2, #1
 80097da:	2100      	movs	r1, #0
 80097dc:	4618      	mov	r0, r3
 80097de:	f000 fc23 	bl	800a028 <TIM_CCxChannelCmd>
      break;
 80097e2:	e016      	b.n	8009812 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	2201      	movs	r2, #1
 80097ea:	2104      	movs	r1, #4
 80097ec:	4618      	mov	r0, r3
 80097ee:	f000 fc1b 	bl	800a028 <TIM_CCxChannelCmd>
      break;
 80097f2:	e00e      	b.n	8009812 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	2201      	movs	r2, #1
 80097fa:	2100      	movs	r1, #0
 80097fc:	4618      	mov	r0, r3
 80097fe:	f000 fc13 	bl	800a028 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	2201      	movs	r2, #1
 8009808:	2104      	movs	r1, #4
 800980a:	4618      	mov	r0, r3
 800980c:	f000 fc0c 	bl	800a028 <TIM_CCxChannelCmd>
      break;
 8009810:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f042 0201 	orr.w	r2, r2, #1
 8009820:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009822:	2300      	movs	r3, #0
}
 8009824:	4618      	mov	r0, r3
 8009826:	3710      	adds	r7, #16
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}

0800982c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b082      	sub	sp, #8
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	691b      	ldr	r3, [r3, #16]
 800983a:	f003 0302 	and.w	r3, r3, #2
 800983e:	2b02      	cmp	r3, #2
 8009840:	d122      	bne.n	8009888 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	68db      	ldr	r3, [r3, #12]
 8009848:	f003 0302 	and.w	r3, r3, #2
 800984c:	2b02      	cmp	r3, #2
 800984e:	d11b      	bne.n	8009888 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f06f 0202 	mvn.w	r2, #2
 8009858:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2201      	movs	r2, #1
 800985e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	699b      	ldr	r3, [r3, #24]
 8009866:	f003 0303 	and.w	r3, r3, #3
 800986a:	2b00      	cmp	r3, #0
 800986c:	d003      	beq.n	8009876 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f000 f9b0 	bl	8009bd4 <HAL_TIM_IC_CaptureCallback>
 8009874:	e005      	b.n	8009882 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f000 f9a2 	bl	8009bc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f000 f9b3 	bl	8009be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2200      	movs	r2, #0
 8009886:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	691b      	ldr	r3, [r3, #16]
 800988e:	f003 0304 	and.w	r3, r3, #4
 8009892:	2b04      	cmp	r3, #4
 8009894:	d122      	bne.n	80098dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	68db      	ldr	r3, [r3, #12]
 800989c:	f003 0304 	and.w	r3, r3, #4
 80098a0:	2b04      	cmp	r3, #4
 80098a2:	d11b      	bne.n	80098dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f06f 0204 	mvn.w	r2, #4
 80098ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2202      	movs	r2, #2
 80098b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	699b      	ldr	r3, [r3, #24]
 80098ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d003      	beq.n	80098ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f000 f986 	bl	8009bd4 <HAL_TIM_IC_CaptureCallback>
 80098c8:	e005      	b.n	80098d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f000 f978 	bl	8009bc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f000 f989 	bl	8009be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2200      	movs	r2, #0
 80098da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	691b      	ldr	r3, [r3, #16]
 80098e2:	f003 0308 	and.w	r3, r3, #8
 80098e6:	2b08      	cmp	r3, #8
 80098e8:	d122      	bne.n	8009930 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	68db      	ldr	r3, [r3, #12]
 80098f0:	f003 0308 	and.w	r3, r3, #8
 80098f4:	2b08      	cmp	r3, #8
 80098f6:	d11b      	bne.n	8009930 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f06f 0208 	mvn.w	r2, #8
 8009900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2204      	movs	r2, #4
 8009906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	69db      	ldr	r3, [r3, #28]
 800990e:	f003 0303 	and.w	r3, r3, #3
 8009912:	2b00      	cmp	r3, #0
 8009914:	d003      	beq.n	800991e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f000 f95c 	bl	8009bd4 <HAL_TIM_IC_CaptureCallback>
 800991c:	e005      	b.n	800992a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 f94e 	bl	8009bc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 f95f 	bl	8009be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2200      	movs	r2, #0
 800992e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	691b      	ldr	r3, [r3, #16]
 8009936:	f003 0310 	and.w	r3, r3, #16
 800993a:	2b10      	cmp	r3, #16
 800993c:	d122      	bne.n	8009984 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	68db      	ldr	r3, [r3, #12]
 8009944:	f003 0310 	and.w	r3, r3, #16
 8009948:	2b10      	cmp	r3, #16
 800994a:	d11b      	bne.n	8009984 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f06f 0210 	mvn.w	r2, #16
 8009954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2208      	movs	r2, #8
 800995a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	69db      	ldr	r3, [r3, #28]
 8009962:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009966:	2b00      	cmp	r3, #0
 8009968:	d003      	beq.n	8009972 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 f932 	bl	8009bd4 <HAL_TIM_IC_CaptureCallback>
 8009970:	e005      	b.n	800997e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f000 f924 	bl	8009bc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 f935 	bl	8009be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2200      	movs	r2, #0
 8009982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	691b      	ldr	r3, [r3, #16]
 800998a:	f003 0301 	and.w	r3, r3, #1
 800998e:	2b01      	cmp	r3, #1
 8009990:	d10e      	bne.n	80099b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	68db      	ldr	r3, [r3, #12]
 8009998:	f003 0301 	and.w	r3, r3, #1
 800999c:	2b01      	cmp	r3, #1
 800999e:	d107      	bne.n	80099b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f06f 0201 	mvn.w	r2, #1
 80099a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f7f9 fdfa 	bl	80035a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	691b      	ldr	r3, [r3, #16]
 80099b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099ba:	2b80      	cmp	r3, #128	; 0x80
 80099bc:	d10e      	bne.n	80099dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	68db      	ldr	r3, [r3, #12]
 80099c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099c8:	2b80      	cmp	r3, #128	; 0x80
 80099ca:	d107      	bne.n	80099dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80099d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f000 fb55 	bl	800a086 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	691b      	ldr	r3, [r3, #16]
 80099e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099e6:	2b40      	cmp	r3, #64	; 0x40
 80099e8:	d10e      	bne.n	8009a08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	68db      	ldr	r3, [r3, #12]
 80099f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099f4:	2b40      	cmp	r3, #64	; 0x40
 80099f6:	d107      	bne.n	8009a08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 f8fa 	bl	8009bfc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	691b      	ldr	r3, [r3, #16]
 8009a0e:	f003 0320 	and.w	r3, r3, #32
 8009a12:	2b20      	cmp	r3, #32
 8009a14:	d10e      	bne.n	8009a34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	68db      	ldr	r3, [r3, #12]
 8009a1c:	f003 0320 	and.w	r3, r3, #32
 8009a20:	2b20      	cmp	r3, #32
 8009a22:	d107      	bne.n	8009a34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f06f 0220 	mvn.w	r2, #32
 8009a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f000 fb1f 	bl	800a072 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009a34:	bf00      	nop
 8009a36:	3708      	adds	r7, #8
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b086      	sub	sp, #24
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	60f8      	str	r0, [r7, #12]
 8009a44:	60b9      	str	r1, [r7, #8]
 8009a46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	d101      	bne.n	8009a5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009a56:	2302      	movs	r3, #2
 8009a58:	e0ae      	b.n	8009bb8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2b0c      	cmp	r3, #12
 8009a66:	f200 809f 	bhi.w	8009ba8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009a6a:	a201      	add	r2, pc, #4	; (adr r2, 8009a70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a70:	08009aa5 	.word	0x08009aa5
 8009a74:	08009ba9 	.word	0x08009ba9
 8009a78:	08009ba9 	.word	0x08009ba9
 8009a7c:	08009ba9 	.word	0x08009ba9
 8009a80:	08009ae5 	.word	0x08009ae5
 8009a84:	08009ba9 	.word	0x08009ba9
 8009a88:	08009ba9 	.word	0x08009ba9
 8009a8c:	08009ba9 	.word	0x08009ba9
 8009a90:	08009b27 	.word	0x08009b27
 8009a94:	08009ba9 	.word	0x08009ba9
 8009a98:	08009ba9 	.word	0x08009ba9
 8009a9c:	08009ba9 	.word	0x08009ba9
 8009aa0:	08009b67 	.word	0x08009b67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	68b9      	ldr	r1, [r7, #8]
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f000 f930 	bl	8009d10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	699a      	ldr	r2, [r3, #24]
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f042 0208 	orr.w	r2, r2, #8
 8009abe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	699a      	ldr	r2, [r3, #24]
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f022 0204 	bic.w	r2, r2, #4
 8009ace:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	6999      	ldr	r1, [r3, #24]
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	691a      	ldr	r2, [r3, #16]
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	430a      	orrs	r2, r1
 8009ae0:	619a      	str	r2, [r3, #24]
      break;
 8009ae2:	e064      	b.n	8009bae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	68b9      	ldr	r1, [r7, #8]
 8009aea:	4618      	mov	r0, r3
 8009aec:	f000 f976 	bl	8009ddc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	699a      	ldr	r2, [r3, #24]
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009afe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	699a      	ldr	r2, [r3, #24]
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	6999      	ldr	r1, [r3, #24]
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	691b      	ldr	r3, [r3, #16]
 8009b1a:	021a      	lsls	r2, r3, #8
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	430a      	orrs	r2, r1
 8009b22:	619a      	str	r2, [r3, #24]
      break;
 8009b24:	e043      	b.n	8009bae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	68b9      	ldr	r1, [r7, #8]
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f000 f9c1 	bl	8009eb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	69da      	ldr	r2, [r3, #28]
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f042 0208 	orr.w	r2, r2, #8
 8009b40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	69da      	ldr	r2, [r3, #28]
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f022 0204 	bic.w	r2, r2, #4
 8009b50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	69d9      	ldr	r1, [r3, #28]
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	691a      	ldr	r2, [r3, #16]
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	430a      	orrs	r2, r1
 8009b62:	61da      	str	r2, [r3, #28]
      break;
 8009b64:	e023      	b.n	8009bae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	68b9      	ldr	r1, [r7, #8]
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f000 fa0b 	bl	8009f88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	69da      	ldr	r2, [r3, #28]
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	69da      	ldr	r2, [r3, #28]
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	69d9      	ldr	r1, [r3, #28]
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	691b      	ldr	r3, [r3, #16]
 8009b9c:	021a      	lsls	r2, r3, #8
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	430a      	orrs	r2, r1
 8009ba4:	61da      	str	r2, [r3, #28]
      break;
 8009ba6:	e002      	b.n	8009bae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	75fb      	strb	r3, [r7, #23]
      break;
 8009bac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009bb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3718      	adds	r7, #24
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}

08009bc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b083      	sub	sp, #12
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009bc8:	bf00      	nop
 8009bca:	370c      	adds	r7, #12
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr

08009bd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b083      	sub	sp, #12
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009bdc:	bf00      	nop
 8009bde:	370c      	adds	r7, #12
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr

08009be8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b083      	sub	sp, #12
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009bf0:	bf00      	nop
 8009bf2:	370c      	adds	r7, #12
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr

08009bfc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b083      	sub	sp, #12
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009c04:	bf00      	nop
 8009c06:	370c      	adds	r7, #12
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr

08009c10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b085      	sub	sp, #20
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	4a34      	ldr	r2, [pc, #208]	; (8009cf4 <TIM_Base_SetConfig+0xe4>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d00f      	beq.n	8009c48 <TIM_Base_SetConfig+0x38>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c2e:	d00b      	beq.n	8009c48 <TIM_Base_SetConfig+0x38>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	4a31      	ldr	r2, [pc, #196]	; (8009cf8 <TIM_Base_SetConfig+0xe8>)
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d007      	beq.n	8009c48 <TIM_Base_SetConfig+0x38>
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	4a30      	ldr	r2, [pc, #192]	; (8009cfc <TIM_Base_SetConfig+0xec>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d003      	beq.n	8009c48 <TIM_Base_SetConfig+0x38>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	4a2f      	ldr	r2, [pc, #188]	; (8009d00 <TIM_Base_SetConfig+0xf0>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d108      	bne.n	8009c5a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	685b      	ldr	r3, [r3, #4]
 8009c54:	68fa      	ldr	r2, [r7, #12]
 8009c56:	4313      	orrs	r3, r2
 8009c58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	4a25      	ldr	r2, [pc, #148]	; (8009cf4 <TIM_Base_SetConfig+0xe4>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d01b      	beq.n	8009c9a <TIM_Base_SetConfig+0x8a>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c68:	d017      	beq.n	8009c9a <TIM_Base_SetConfig+0x8a>
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	4a22      	ldr	r2, [pc, #136]	; (8009cf8 <TIM_Base_SetConfig+0xe8>)
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d013      	beq.n	8009c9a <TIM_Base_SetConfig+0x8a>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	4a21      	ldr	r2, [pc, #132]	; (8009cfc <TIM_Base_SetConfig+0xec>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d00f      	beq.n	8009c9a <TIM_Base_SetConfig+0x8a>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	4a20      	ldr	r2, [pc, #128]	; (8009d00 <TIM_Base_SetConfig+0xf0>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d00b      	beq.n	8009c9a <TIM_Base_SetConfig+0x8a>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	4a1f      	ldr	r2, [pc, #124]	; (8009d04 <TIM_Base_SetConfig+0xf4>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d007      	beq.n	8009c9a <TIM_Base_SetConfig+0x8a>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	4a1e      	ldr	r2, [pc, #120]	; (8009d08 <TIM_Base_SetConfig+0xf8>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d003      	beq.n	8009c9a <TIM_Base_SetConfig+0x8a>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	4a1d      	ldr	r2, [pc, #116]	; (8009d0c <TIM_Base_SetConfig+0xfc>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d108      	bne.n	8009cac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ca0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	68db      	ldr	r3, [r3, #12]
 8009ca6:	68fa      	ldr	r2, [r7, #12]
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	695b      	ldr	r3, [r3, #20]
 8009cb6:	4313      	orrs	r3, r2
 8009cb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	68fa      	ldr	r2, [r7, #12]
 8009cbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	689a      	ldr	r2, [r3, #8]
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	681a      	ldr	r2, [r3, #0]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	4a08      	ldr	r2, [pc, #32]	; (8009cf4 <TIM_Base_SetConfig+0xe4>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d103      	bne.n	8009ce0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	691a      	ldr	r2, [r3, #16]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2201      	movs	r2, #1
 8009ce4:	615a      	str	r2, [r3, #20]
}
 8009ce6:	bf00      	nop
 8009ce8:	3714      	adds	r7, #20
 8009cea:	46bd      	mov	sp, r7
 8009cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf0:	4770      	bx	lr
 8009cf2:	bf00      	nop
 8009cf4:	40010000 	.word	0x40010000
 8009cf8:	40000400 	.word	0x40000400
 8009cfc:	40000800 	.word	0x40000800
 8009d00:	40000c00 	.word	0x40000c00
 8009d04:	40014000 	.word	0x40014000
 8009d08:	40014400 	.word	0x40014400
 8009d0c:	40014800 	.word	0x40014800

08009d10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b087      	sub	sp, #28
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6a1b      	ldr	r3, [r3, #32]
 8009d1e:	f023 0201 	bic.w	r2, r3, #1
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6a1b      	ldr	r3, [r3, #32]
 8009d2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	699b      	ldr	r3, [r3, #24]
 8009d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f023 0303 	bic.w	r3, r3, #3
 8009d46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	68fa      	ldr	r2, [r7, #12]
 8009d4e:	4313      	orrs	r3, r2
 8009d50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	f023 0302 	bic.w	r3, r3, #2
 8009d58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	689b      	ldr	r3, [r3, #8]
 8009d5e:	697a      	ldr	r2, [r7, #20]
 8009d60:	4313      	orrs	r3, r2
 8009d62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	4a1c      	ldr	r2, [pc, #112]	; (8009dd8 <TIM_OC1_SetConfig+0xc8>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d10c      	bne.n	8009d86 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	f023 0308 	bic.w	r3, r3, #8
 8009d72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	68db      	ldr	r3, [r3, #12]
 8009d78:	697a      	ldr	r2, [r7, #20]
 8009d7a:	4313      	orrs	r3, r2
 8009d7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	f023 0304 	bic.w	r3, r3, #4
 8009d84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	4a13      	ldr	r2, [pc, #76]	; (8009dd8 <TIM_OC1_SetConfig+0xc8>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d111      	bne.n	8009db2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009d9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	695b      	ldr	r3, [r3, #20]
 8009da2:	693a      	ldr	r2, [r7, #16]
 8009da4:	4313      	orrs	r3, r2
 8009da6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	699b      	ldr	r3, [r3, #24]
 8009dac:	693a      	ldr	r2, [r7, #16]
 8009dae:	4313      	orrs	r3, r2
 8009db0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	693a      	ldr	r2, [r7, #16]
 8009db6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	68fa      	ldr	r2, [r7, #12]
 8009dbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	685a      	ldr	r2, [r3, #4]
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	697a      	ldr	r2, [r7, #20]
 8009dca:	621a      	str	r2, [r3, #32]
}
 8009dcc:	bf00      	nop
 8009dce:	371c      	adds	r7, #28
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr
 8009dd8:	40010000 	.word	0x40010000

08009ddc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b087      	sub	sp, #28
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6a1b      	ldr	r3, [r3, #32]
 8009dea:	f023 0210 	bic.w	r2, r3, #16
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6a1b      	ldr	r3, [r3, #32]
 8009df6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	685b      	ldr	r3, [r3, #4]
 8009dfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	699b      	ldr	r3, [r3, #24]
 8009e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	021b      	lsls	r3, r3, #8
 8009e1a:	68fa      	ldr	r2, [r7, #12]
 8009e1c:	4313      	orrs	r3, r2
 8009e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	f023 0320 	bic.w	r3, r3, #32
 8009e26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	689b      	ldr	r3, [r3, #8]
 8009e2c:	011b      	lsls	r3, r3, #4
 8009e2e:	697a      	ldr	r2, [r7, #20]
 8009e30:	4313      	orrs	r3, r2
 8009e32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	4a1e      	ldr	r2, [pc, #120]	; (8009eb0 <TIM_OC2_SetConfig+0xd4>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d10d      	bne.n	8009e58 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	68db      	ldr	r3, [r3, #12]
 8009e48:	011b      	lsls	r3, r3, #4
 8009e4a:	697a      	ldr	r2, [r7, #20]
 8009e4c:	4313      	orrs	r3, r2
 8009e4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	4a15      	ldr	r2, [pc, #84]	; (8009eb0 <TIM_OC2_SetConfig+0xd4>)
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d113      	bne.n	8009e88 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009e66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009e6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	695b      	ldr	r3, [r3, #20]
 8009e74:	009b      	lsls	r3, r3, #2
 8009e76:	693a      	ldr	r2, [r7, #16]
 8009e78:	4313      	orrs	r3, r2
 8009e7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	699b      	ldr	r3, [r3, #24]
 8009e80:	009b      	lsls	r3, r3, #2
 8009e82:	693a      	ldr	r2, [r7, #16]
 8009e84:	4313      	orrs	r3, r2
 8009e86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	693a      	ldr	r2, [r7, #16]
 8009e8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	68fa      	ldr	r2, [r7, #12]
 8009e92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	685a      	ldr	r2, [r3, #4]
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	697a      	ldr	r2, [r7, #20]
 8009ea0:	621a      	str	r2, [r3, #32]
}
 8009ea2:	bf00      	nop
 8009ea4:	371c      	adds	r7, #28
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr
 8009eae:	bf00      	nop
 8009eb0:	40010000 	.word	0x40010000

08009eb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b087      	sub	sp, #28
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6a1b      	ldr	r3, [r3, #32]
 8009ec2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6a1b      	ldr	r3, [r3, #32]
 8009ece:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	69db      	ldr	r3, [r3, #28]
 8009eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f023 0303 	bic.w	r3, r3, #3
 8009eea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	68fa      	ldr	r2, [r7, #12]
 8009ef2:	4313      	orrs	r3, r2
 8009ef4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009efc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	689b      	ldr	r3, [r3, #8]
 8009f02:	021b      	lsls	r3, r3, #8
 8009f04:	697a      	ldr	r2, [r7, #20]
 8009f06:	4313      	orrs	r3, r2
 8009f08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	4a1d      	ldr	r2, [pc, #116]	; (8009f84 <TIM_OC3_SetConfig+0xd0>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d10d      	bne.n	8009f2e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009f18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	68db      	ldr	r3, [r3, #12]
 8009f1e:	021b      	lsls	r3, r3, #8
 8009f20:	697a      	ldr	r2, [r7, #20]
 8009f22:	4313      	orrs	r3, r2
 8009f24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009f2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	4a14      	ldr	r2, [pc, #80]	; (8009f84 <TIM_OC3_SetConfig+0xd0>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d113      	bne.n	8009f5e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009f44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	695b      	ldr	r3, [r3, #20]
 8009f4a:	011b      	lsls	r3, r3, #4
 8009f4c:	693a      	ldr	r2, [r7, #16]
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	699b      	ldr	r3, [r3, #24]
 8009f56:	011b      	lsls	r3, r3, #4
 8009f58:	693a      	ldr	r2, [r7, #16]
 8009f5a:	4313      	orrs	r3, r2
 8009f5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	693a      	ldr	r2, [r7, #16]
 8009f62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	68fa      	ldr	r2, [r7, #12]
 8009f68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	685a      	ldr	r2, [r3, #4]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	697a      	ldr	r2, [r7, #20]
 8009f76:	621a      	str	r2, [r3, #32]
}
 8009f78:	bf00      	nop
 8009f7a:	371c      	adds	r7, #28
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr
 8009f84:	40010000 	.word	0x40010000

08009f88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b087      	sub	sp, #28
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
 8009f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6a1b      	ldr	r3, [r3, #32]
 8009f96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6a1b      	ldr	r3, [r3, #32]
 8009fa2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	69db      	ldr	r3, [r3, #28]
 8009fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	021b      	lsls	r3, r3, #8
 8009fc6:	68fa      	ldr	r2, [r7, #12]
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009fd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	689b      	ldr	r3, [r3, #8]
 8009fd8:	031b      	lsls	r3, r3, #12
 8009fda:	693a      	ldr	r2, [r7, #16]
 8009fdc:	4313      	orrs	r3, r2
 8009fde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	4a10      	ldr	r2, [pc, #64]	; (800a024 <TIM_OC4_SetConfig+0x9c>)
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d109      	bne.n	8009ffc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009fee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	695b      	ldr	r3, [r3, #20]
 8009ff4:	019b      	lsls	r3, r3, #6
 8009ff6:	697a      	ldr	r2, [r7, #20]
 8009ff8:	4313      	orrs	r3, r2
 8009ffa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	697a      	ldr	r2, [r7, #20]
 800a000:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	68fa      	ldr	r2, [r7, #12]
 800a006:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	685a      	ldr	r2, [r3, #4]
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	693a      	ldr	r2, [r7, #16]
 800a014:	621a      	str	r2, [r3, #32]
}
 800a016:	bf00      	nop
 800a018:	371c      	adds	r7, #28
 800a01a:	46bd      	mov	sp, r7
 800a01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a020:	4770      	bx	lr
 800a022:	bf00      	nop
 800a024:	40010000 	.word	0x40010000

0800a028 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a028:	b480      	push	{r7}
 800a02a:	b087      	sub	sp, #28
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	60f8      	str	r0, [r7, #12]
 800a030:	60b9      	str	r1, [r7, #8]
 800a032:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	f003 031f 	and.w	r3, r3, #31
 800a03a:	2201      	movs	r2, #1
 800a03c:	fa02 f303 	lsl.w	r3, r2, r3
 800a040:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	6a1a      	ldr	r2, [r3, #32]
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	43db      	mvns	r3, r3
 800a04a:	401a      	ands	r2, r3
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	6a1a      	ldr	r2, [r3, #32]
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	f003 031f 	and.w	r3, r3, #31
 800a05a:	6879      	ldr	r1, [r7, #4]
 800a05c:	fa01 f303 	lsl.w	r3, r1, r3
 800a060:	431a      	orrs	r2, r3
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	621a      	str	r2, [r3, #32]
}
 800a066:	bf00      	nop
 800a068:	371c      	adds	r7, #28
 800a06a:	46bd      	mov	sp, r7
 800a06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a070:	4770      	bx	lr

0800a072 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a072:	b480      	push	{r7}
 800a074:	b083      	sub	sp, #12
 800a076:	af00      	add	r7, sp, #0
 800a078:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a07a:	bf00      	nop
 800a07c:	370c      	adds	r7, #12
 800a07e:	46bd      	mov	sp, r7
 800a080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a084:	4770      	bx	lr

0800a086 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a086:	b480      	push	{r7}
 800a088:	b083      	sub	sp, #12
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a08e:	bf00      	nop
 800a090:	370c      	adds	r7, #12
 800a092:	46bd      	mov	sp, r7
 800a094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a098:	4770      	bx	lr

0800a09a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a09a:	b580      	push	{r7, lr}
 800a09c:	b082      	sub	sp, #8
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d101      	bne.n	800a0ac <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	e03f      	b.n	800a12c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0b2:	b2db      	uxtb	r3, r3
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d106      	bne.n	800a0c6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f7fa f8ff 	bl	80042c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2224      	movs	r2, #36	; 0x24
 800a0ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	68da      	ldr	r2, [r3, #12]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a0dc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f001 f978 	bl	800b3d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	691a      	ldr	r2, [r3, #16]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a0f2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	695a      	ldr	r2, [r3, #20]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a102:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	68da      	ldr	r2, [r3, #12]
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a112:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2200      	movs	r2, #0
 800a118:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2220      	movs	r2, #32
 800a11e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2220      	movs	r2, #32
 800a126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a12a:	2300      	movs	r3, #0
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3708      	adds	r7, #8
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}

0800a134 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b08a      	sub	sp, #40	; 0x28
 800a138:	af02      	add	r7, sp, #8
 800a13a:	60f8      	str	r0, [r7, #12]
 800a13c:	60b9      	str	r1, [r7, #8]
 800a13e:	603b      	str	r3, [r7, #0]
 800a140:	4613      	mov	r3, r2
 800a142:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a144:	2300      	movs	r3, #0
 800a146:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a14e:	b2db      	uxtb	r3, r3
 800a150:	2b20      	cmp	r3, #32
 800a152:	d17c      	bne.n	800a24e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d002      	beq.n	800a160 <HAL_UART_Transmit+0x2c>
 800a15a:	88fb      	ldrh	r3, [r7, #6]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d101      	bne.n	800a164 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a160:	2301      	movs	r3, #1
 800a162:	e075      	b.n	800a250 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a16a:	2b01      	cmp	r3, #1
 800a16c:	d101      	bne.n	800a172 <HAL_UART_Transmit+0x3e>
 800a16e:	2302      	movs	r3, #2
 800a170:	e06e      	b.n	800a250 <HAL_UART_Transmit+0x11c>
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	2201      	movs	r2, #1
 800a176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	2200      	movs	r2, #0
 800a17e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2221      	movs	r2, #33	; 0x21
 800a184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a188:	f7fa fdec 	bl	8004d64 <HAL_GetTick>
 800a18c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	88fa      	ldrh	r2, [r7, #6]
 800a192:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	88fa      	ldrh	r2, [r7, #6]
 800a198:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	689b      	ldr	r3, [r3, #8]
 800a19e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1a2:	d108      	bne.n	800a1b6 <HAL_UART_Transmit+0x82>
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	691b      	ldr	r3, [r3, #16]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d104      	bne.n	800a1b6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	61bb      	str	r3, [r7, #24]
 800a1b4:	e003      	b.n	800a1be <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a1c6:	e02a      	b.n	800a21e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	9300      	str	r3, [sp, #0]
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	2180      	movs	r1, #128	; 0x80
 800a1d2:	68f8      	ldr	r0, [r7, #12]
 800a1d4:	f000 fe2f 	bl	800ae36 <UART_WaitOnFlagUntilTimeout>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d001      	beq.n	800a1e2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a1de:	2303      	movs	r3, #3
 800a1e0:	e036      	b.n	800a250 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a1e2:	69fb      	ldr	r3, [r7, #28]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d10b      	bne.n	800a200 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a1e8:	69bb      	ldr	r3, [r7, #24]
 800a1ea:	881b      	ldrh	r3, [r3, #0]
 800a1ec:	461a      	mov	r2, r3
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a1f6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a1f8:	69bb      	ldr	r3, [r7, #24]
 800a1fa:	3302      	adds	r3, #2
 800a1fc:	61bb      	str	r3, [r7, #24]
 800a1fe:	e007      	b.n	800a210 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a200:	69fb      	ldr	r3, [r7, #28]
 800a202:	781a      	ldrb	r2, [r3, #0]
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a20a:	69fb      	ldr	r3, [r7, #28]
 800a20c:	3301      	adds	r3, #1
 800a20e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a214:	b29b      	uxth	r3, r3
 800a216:	3b01      	subs	r3, #1
 800a218:	b29a      	uxth	r2, r3
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a222:	b29b      	uxth	r3, r3
 800a224:	2b00      	cmp	r3, #0
 800a226:	d1cf      	bne.n	800a1c8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	9300      	str	r3, [sp, #0]
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	2200      	movs	r2, #0
 800a230:	2140      	movs	r1, #64	; 0x40
 800a232:	68f8      	ldr	r0, [r7, #12]
 800a234:	f000 fdff 	bl	800ae36 <UART_WaitOnFlagUntilTimeout>
 800a238:	4603      	mov	r3, r0
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d001      	beq.n	800a242 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a23e:	2303      	movs	r3, #3
 800a240:	e006      	b.n	800a250 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2220      	movs	r2, #32
 800a246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a24a:	2300      	movs	r3, #0
 800a24c:	e000      	b.n	800a250 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a24e:	2302      	movs	r3, #2
  }
}
 800a250:	4618      	mov	r0, r3
 800a252:	3720      	adds	r7, #32
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}

0800a258 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b08a      	sub	sp, #40	; 0x28
 800a25c:	af02      	add	r7, sp, #8
 800a25e:	60f8      	str	r0, [r7, #12]
 800a260:	60b9      	str	r1, [r7, #8]
 800a262:	603b      	str	r3, [r7, #0]
 800a264:	4613      	mov	r3, r2
 800a266:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a268:	2300      	movs	r3, #0
 800a26a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a272:	b2db      	uxtb	r3, r3
 800a274:	2b20      	cmp	r3, #32
 800a276:	f040 808c 	bne.w	800a392 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d002      	beq.n	800a286 <HAL_UART_Receive+0x2e>
 800a280:	88fb      	ldrh	r3, [r7, #6]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d101      	bne.n	800a28a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800a286:	2301      	movs	r3, #1
 800a288:	e084      	b.n	800a394 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a290:	2b01      	cmp	r3, #1
 800a292:	d101      	bne.n	800a298 <HAL_UART_Receive+0x40>
 800a294:	2302      	movs	r3, #2
 800a296:	e07d      	b.n	800a394 <HAL_UART_Receive+0x13c>
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	2201      	movs	r2, #1
 800a29c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	2222      	movs	r2, #34	; 0x22
 800a2aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a2b4:	f7fa fd56 	bl	8004d64 <HAL_GetTick>
 800a2b8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	88fa      	ldrh	r2, [r7, #6]
 800a2be:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	88fa      	ldrh	r2, [r7, #6]
 800a2c4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	689b      	ldr	r3, [r3, #8]
 800a2ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2ce:	d108      	bne.n	800a2e2 <HAL_UART_Receive+0x8a>
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	691b      	ldr	r3, [r3, #16]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d104      	bne.n	800a2e2 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	61bb      	str	r3, [r7, #24]
 800a2e0:	e003      	b.n	800a2ea <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800a2f2:	e043      	b.n	800a37c <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	9300      	str	r3, [sp, #0]
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	2120      	movs	r1, #32
 800a2fe:	68f8      	ldr	r0, [r7, #12]
 800a300:	f000 fd99 	bl	800ae36 <UART_WaitOnFlagUntilTimeout>
 800a304:	4603      	mov	r3, r0
 800a306:	2b00      	cmp	r3, #0
 800a308:	d001      	beq.n	800a30e <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800a30a:	2303      	movs	r3, #3
 800a30c:	e042      	b.n	800a394 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800a30e:	69fb      	ldr	r3, [r7, #28]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d10c      	bne.n	800a32e <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a320:	b29a      	uxth	r2, r3
 800a322:	69bb      	ldr	r3, [r7, #24]
 800a324:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a326:	69bb      	ldr	r3, [r7, #24]
 800a328:	3302      	adds	r3, #2
 800a32a:	61bb      	str	r3, [r7, #24]
 800a32c:	e01f      	b.n	800a36e <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	689b      	ldr	r3, [r3, #8]
 800a332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a336:	d007      	beq.n	800a348 <HAL_UART_Receive+0xf0>
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d10a      	bne.n	800a356 <HAL_UART_Receive+0xfe>
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	691b      	ldr	r3, [r3, #16]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d106      	bne.n	800a356 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	b2da      	uxtb	r2, r3
 800a350:	69fb      	ldr	r3, [r7, #28]
 800a352:	701a      	strb	r2, [r3, #0]
 800a354:	e008      	b.n	800a368 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	b2db      	uxtb	r3, r3
 800a35e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a362:	b2da      	uxtb	r2, r3
 800a364:	69fb      	ldr	r3, [r7, #28]
 800a366:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800a368:	69fb      	ldr	r3, [r7, #28]
 800a36a:	3301      	adds	r3, #1
 800a36c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a372:	b29b      	uxth	r3, r3
 800a374:	3b01      	subs	r3, #1
 800a376:	b29a      	uxth	r2, r3
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a380:	b29b      	uxth	r3, r3
 800a382:	2b00      	cmp	r3, #0
 800a384:	d1b6      	bne.n	800a2f4 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	2220      	movs	r2, #32
 800a38a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800a38e:	2300      	movs	r3, #0
 800a390:	e000      	b.n	800a394 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800a392:	2302      	movs	r3, #2
  }
}
 800a394:	4618      	mov	r0, r3
 800a396:	3720      	adds	r7, #32
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b08c      	sub	sp, #48	; 0x30
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	60f8      	str	r0, [r7, #12]
 800a3a4:	60b9      	str	r1, [r7, #8]
 800a3a6:	4613      	mov	r3, r2
 800a3a8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3b0:	b2db      	uxtb	r3, r3
 800a3b2:	2b20      	cmp	r3, #32
 800a3b4:	d165      	bne.n	800a482 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d002      	beq.n	800a3c2 <HAL_UART_Transmit_DMA+0x26>
 800a3bc:	88fb      	ldrh	r3, [r7, #6]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d101      	bne.n	800a3c6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	e05e      	b.n	800a484 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d101      	bne.n	800a3d4 <HAL_UART_Transmit_DMA+0x38>
 800a3d0:	2302      	movs	r3, #2
 800a3d2:	e057      	b.n	800a484 <HAL_UART_Transmit_DMA+0xe8>
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a3dc:	68ba      	ldr	r2, [r7, #8]
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	88fa      	ldrh	r2, [r7, #6]
 800a3e6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	88fa      	ldrh	r2, [r7, #6]
 800a3ec:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2221      	movs	r2, #33	; 0x21
 800a3f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a400:	4a22      	ldr	r2, [pc, #136]	; (800a48c <HAL_UART_Transmit_DMA+0xf0>)
 800a402:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a408:	4a21      	ldr	r2, [pc, #132]	; (800a490 <HAL_UART_Transmit_DMA+0xf4>)
 800a40a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a410:	4a20      	ldr	r2, [pc, #128]	; (800a494 <HAL_UART_Transmit_DMA+0xf8>)
 800a412:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a418:	2200      	movs	r2, #0
 800a41a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800a41c:	f107 0308 	add.w	r3, r7, #8
 800a420:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a428:	6819      	ldr	r1, [r3, #0]
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	3304      	adds	r3, #4
 800a430:	461a      	mov	r2, r3
 800a432:	88fb      	ldrh	r3, [r7, #6]
 800a434:	f7fb f926 	bl	8005684 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a440:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	2200      	movs	r2, #0
 800a446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	3314      	adds	r3, #20
 800a450:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a452:	69bb      	ldr	r3, [r7, #24]
 800a454:	e853 3f00 	ldrex	r3, [r3]
 800a458:	617b      	str	r3, [r7, #20]
   return(result);
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a460:	62bb      	str	r3, [r7, #40]	; 0x28
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	3314      	adds	r3, #20
 800a468:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a46a:	627a      	str	r2, [r7, #36]	; 0x24
 800a46c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a46e:	6a39      	ldr	r1, [r7, #32]
 800a470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a472:	e841 2300 	strex	r3, r2, [r1]
 800a476:	61fb      	str	r3, [r7, #28]
   return(result);
 800a478:	69fb      	ldr	r3, [r7, #28]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d1e5      	bne.n	800a44a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800a47e:	2300      	movs	r3, #0
 800a480:	e000      	b.n	800a484 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800a482:	2302      	movs	r3, #2
  }
}
 800a484:	4618      	mov	r0, r3
 800a486:	3730      	adds	r7, #48	; 0x30
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}
 800a48c:	0800ab91 	.word	0x0800ab91
 800a490:	0800ac2b 	.word	0x0800ac2b
 800a494:	0800ada3 	.word	0x0800ada3

0800a498 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b084      	sub	sp, #16
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	60f8      	str	r0, [r7, #12]
 800a4a0:	60b9      	str	r1, [r7, #8]
 800a4a2:	4613      	mov	r3, r2
 800a4a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a4ac:	b2db      	uxtb	r3, r3
 800a4ae:	2b20      	cmp	r3, #32
 800a4b0:	d11d      	bne.n	800a4ee <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d002      	beq.n	800a4be <HAL_UART_Receive_DMA+0x26>
 800a4b8:	88fb      	ldrh	r3, [r7, #6]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d101      	bne.n	800a4c2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a4be:	2301      	movs	r3, #1
 800a4c0:	e016      	b.n	800a4f0 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	d101      	bne.n	800a4d0 <HAL_UART_Receive_DMA+0x38>
 800a4cc:	2302      	movs	r3, #2
 800a4ce:	e00f      	b.n	800a4f0 <HAL_UART_Receive_DMA+0x58>
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a4de:	88fb      	ldrh	r3, [r7, #6]
 800a4e0:	461a      	mov	r2, r3
 800a4e2:	68b9      	ldr	r1, [r7, #8]
 800a4e4:	68f8      	ldr	r0, [r7, #12]
 800a4e6:	f000 fd15 	bl	800af14 <UART_Start_Receive_DMA>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	e000      	b.n	800a4f0 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a4ee:	2302      	movs	r3, #2
  }
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	3710      	adds	r7, #16
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}

0800a4f8 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b090      	sub	sp, #64	; 0x40
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a500:	2300      	movs	r3, #0
 800a502:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	695b      	ldr	r3, [r3, #20]
 800a50a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a50e:	2b80      	cmp	r3, #128	; 0x80
 800a510:	bf0c      	ite	eq
 800a512:	2301      	moveq	r3, #1
 800a514:	2300      	movne	r3, #0
 800a516:	b2db      	uxtb	r3, r3
 800a518:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a520:	b2db      	uxtb	r3, r3
 800a522:	2b21      	cmp	r3, #33	; 0x21
 800a524:	d128      	bne.n	800a578 <HAL_UART_DMAStop+0x80>
 800a526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d025      	beq.n	800a578 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	3314      	adds	r3, #20
 800a532:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a536:	e853 3f00 	ldrex	r3, [r3]
 800a53a:	623b      	str	r3, [r7, #32]
   return(result);
 800a53c:	6a3b      	ldr	r3, [r7, #32]
 800a53e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a542:	63bb      	str	r3, [r7, #56]	; 0x38
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	3314      	adds	r3, #20
 800a54a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a54c:	633a      	str	r2, [r7, #48]	; 0x30
 800a54e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a550:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a552:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a554:	e841 2300 	strex	r3, r2, [r1]
 800a558:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d1e5      	bne.n	800a52c <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a564:	2b00      	cmp	r3, #0
 800a566:	d004      	beq.n	800a572 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a56c:	4618      	mov	r0, r3
 800a56e:	f7fb f8e1 	bl	8005734 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f000 fd6c 	bl	800b050 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	695b      	ldr	r3, [r3, #20]
 800a57e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a582:	2b40      	cmp	r3, #64	; 0x40
 800a584:	bf0c      	ite	eq
 800a586:	2301      	moveq	r3, #1
 800a588:	2300      	movne	r3, #0
 800a58a:	b2db      	uxtb	r3, r3
 800a58c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a594:	b2db      	uxtb	r3, r3
 800a596:	2b22      	cmp	r3, #34	; 0x22
 800a598:	d128      	bne.n	800a5ec <HAL_UART_DMAStop+0xf4>
 800a59a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d025      	beq.n	800a5ec <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	3314      	adds	r3, #20
 800a5a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	e853 3f00 	ldrex	r3, [r3]
 800a5ae:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a5b6:	637b      	str	r3, [r7, #52]	; 0x34
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	3314      	adds	r3, #20
 800a5be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a5c0:	61fa      	str	r2, [r7, #28]
 800a5c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5c4:	69b9      	ldr	r1, [r7, #24]
 800a5c6:	69fa      	ldr	r2, [r7, #28]
 800a5c8:	e841 2300 	strex	r3, r2, [r1]
 800a5cc:	617b      	str	r3, [r7, #20]
   return(result);
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d1e5      	bne.n	800a5a0 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d004      	beq.n	800a5e6 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f7fb f8a7 	bl	8005734 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f000 fd5a 	bl	800b0a0 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800a5ec:	2300      	movs	r3, #0
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3740      	adds	r7, #64	; 0x40
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}
	...

0800a5f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b0ba      	sub	sp, #232	; 0xe8
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	68db      	ldr	r3, [r3, #12]
 800a610:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	695b      	ldr	r3, [r3, #20]
 800a61a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a61e:	2300      	movs	r3, #0
 800a620:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a624:	2300      	movs	r3, #0
 800a626:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a62a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a62e:	f003 030f 	and.w	r3, r3, #15
 800a632:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a636:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d10f      	bne.n	800a65e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a63e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a642:	f003 0320 	and.w	r3, r3, #32
 800a646:	2b00      	cmp	r3, #0
 800a648:	d009      	beq.n	800a65e <HAL_UART_IRQHandler+0x66>
 800a64a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a64e:	f003 0320 	and.w	r3, r3, #32
 800a652:	2b00      	cmp	r3, #0
 800a654:	d003      	beq.n	800a65e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f000 fe01 	bl	800b25e <UART_Receive_IT>
      return;
 800a65c:	e256      	b.n	800ab0c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a65e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a662:	2b00      	cmp	r3, #0
 800a664:	f000 80de 	beq.w	800a824 <HAL_UART_IRQHandler+0x22c>
 800a668:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a66c:	f003 0301 	and.w	r3, r3, #1
 800a670:	2b00      	cmp	r3, #0
 800a672:	d106      	bne.n	800a682 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a678:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	f000 80d1 	beq.w	800a824 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a686:	f003 0301 	and.w	r3, r3, #1
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d00b      	beq.n	800a6a6 <HAL_UART_IRQHandler+0xae>
 800a68e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a696:	2b00      	cmp	r3, #0
 800a698:	d005      	beq.n	800a6a6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a69e:	f043 0201 	orr.w	r2, r3, #1
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a6a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6aa:	f003 0304 	and.w	r3, r3, #4
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d00b      	beq.n	800a6ca <HAL_UART_IRQHandler+0xd2>
 800a6b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a6b6:	f003 0301 	and.w	r3, r3, #1
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d005      	beq.n	800a6ca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6c2:	f043 0202 	orr.w	r2, r3, #2
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a6ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6ce:	f003 0302 	and.w	r3, r3, #2
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d00b      	beq.n	800a6ee <HAL_UART_IRQHandler+0xf6>
 800a6d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a6da:	f003 0301 	and.w	r3, r3, #1
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d005      	beq.n	800a6ee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6e6:	f043 0204 	orr.w	r2, r3, #4
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a6ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6f2:	f003 0308 	and.w	r3, r3, #8
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d011      	beq.n	800a71e <HAL_UART_IRQHandler+0x126>
 800a6fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6fe:	f003 0320 	and.w	r3, r3, #32
 800a702:	2b00      	cmp	r3, #0
 800a704:	d105      	bne.n	800a712 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a706:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a70a:	f003 0301 	and.w	r3, r3, #1
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d005      	beq.n	800a71e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a716:	f043 0208 	orr.w	r2, r3, #8
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a722:	2b00      	cmp	r3, #0
 800a724:	f000 81ed 	beq.w	800ab02 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a72c:	f003 0320 	and.w	r3, r3, #32
 800a730:	2b00      	cmp	r3, #0
 800a732:	d008      	beq.n	800a746 <HAL_UART_IRQHandler+0x14e>
 800a734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a738:	f003 0320 	and.w	r3, r3, #32
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d002      	beq.n	800a746 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f000 fd8c 	bl	800b25e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	695b      	ldr	r3, [r3, #20]
 800a74c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a750:	2b40      	cmp	r3, #64	; 0x40
 800a752:	bf0c      	ite	eq
 800a754:	2301      	moveq	r3, #1
 800a756:	2300      	movne	r3, #0
 800a758:	b2db      	uxtb	r3, r3
 800a75a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a762:	f003 0308 	and.w	r3, r3, #8
 800a766:	2b00      	cmp	r3, #0
 800a768:	d103      	bne.n	800a772 <HAL_UART_IRQHandler+0x17a>
 800a76a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d04f      	beq.n	800a812 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f000 fc94 	bl	800b0a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	695b      	ldr	r3, [r3, #20]
 800a77e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a782:	2b40      	cmp	r3, #64	; 0x40
 800a784:	d141      	bne.n	800a80a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	3314      	adds	r3, #20
 800a78c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a790:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a794:	e853 3f00 	ldrex	r3, [r3]
 800a798:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a79c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a7a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	3314      	adds	r3, #20
 800a7ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a7b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a7b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a7be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a7c2:	e841 2300 	strex	r3, r2, [r1]
 800a7c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a7ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d1d9      	bne.n	800a786 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d013      	beq.n	800a802 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7de:	4a7d      	ldr	r2, [pc, #500]	; (800a9d4 <HAL_UART_IRQHandler+0x3dc>)
 800a7e0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f7fb f814 	bl	8005814 <HAL_DMA_Abort_IT>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d016      	beq.n	800a820 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7f8:	687a      	ldr	r2, [r7, #4]
 800a7fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a7fc:	4610      	mov	r0, r2
 800a7fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a800:	e00e      	b.n	800a820 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f000 f9ae 	bl	800ab64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a808:	e00a      	b.n	800a820 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f000 f9aa 	bl	800ab64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a810:	e006      	b.n	800a820 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f000 f9a6 	bl	800ab64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2200      	movs	r2, #0
 800a81c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a81e:	e170      	b.n	800ab02 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a820:	bf00      	nop
    return;
 800a822:	e16e      	b.n	800ab02 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a828:	2b01      	cmp	r3, #1
 800a82a:	f040 814a 	bne.w	800aac2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a82e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a832:	f003 0310 	and.w	r3, r3, #16
 800a836:	2b00      	cmp	r3, #0
 800a838:	f000 8143 	beq.w	800aac2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a83c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a840:	f003 0310 	and.w	r3, r3, #16
 800a844:	2b00      	cmp	r3, #0
 800a846:	f000 813c 	beq.w	800aac2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a84a:	2300      	movs	r3, #0
 800a84c:	60bb      	str	r3, [r7, #8]
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	60bb      	str	r3, [r7, #8]
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	685b      	ldr	r3, [r3, #4]
 800a85c:	60bb      	str	r3, [r7, #8]
 800a85e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	695b      	ldr	r3, [r3, #20]
 800a866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a86a:	2b40      	cmp	r3, #64	; 0x40
 800a86c:	f040 80b4 	bne.w	800a9d8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	685b      	ldr	r3, [r3, #4]
 800a878:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a87c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a880:	2b00      	cmp	r3, #0
 800a882:	f000 8140 	beq.w	800ab06 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a88a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a88e:	429a      	cmp	r2, r3
 800a890:	f080 8139 	bcs.w	800ab06 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a89a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8a0:	69db      	ldr	r3, [r3, #28]
 800a8a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8a6:	f000 8088 	beq.w	800a9ba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	330c      	adds	r3, #12
 800a8b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a8b8:	e853 3f00 	ldrex	r3, [r3]
 800a8bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a8c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a8c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a8c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	330c      	adds	r3, #12
 800a8d2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a8d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a8da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8de:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a8e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a8e6:	e841 2300 	strex	r3, r2, [r1]
 800a8ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a8ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d1d9      	bne.n	800a8aa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	3314      	adds	r3, #20
 800a8fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a900:	e853 3f00 	ldrex	r3, [r3]
 800a904:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a906:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a908:	f023 0301 	bic.w	r3, r3, #1
 800a90c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	3314      	adds	r3, #20
 800a916:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a91a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a91e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a920:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a922:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a926:	e841 2300 	strex	r3, r2, [r1]
 800a92a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a92c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d1e1      	bne.n	800a8f6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	3314      	adds	r3, #20
 800a938:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a93a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a93c:	e853 3f00 	ldrex	r3, [r3]
 800a940:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a942:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a944:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a948:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	3314      	adds	r3, #20
 800a952:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a956:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a958:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a95a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a95c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a95e:	e841 2300 	strex	r3, r2, [r1]
 800a962:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a964:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a966:	2b00      	cmp	r3, #0
 800a968:	d1e3      	bne.n	800a932 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2220      	movs	r2, #32
 800a96e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2200      	movs	r2, #0
 800a976:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	330c      	adds	r3, #12
 800a97e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a982:	e853 3f00 	ldrex	r3, [r3]
 800a986:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a988:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a98a:	f023 0310 	bic.w	r3, r3, #16
 800a98e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	330c      	adds	r3, #12
 800a998:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a99c:	65ba      	str	r2, [r7, #88]	; 0x58
 800a99e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a9a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a9a4:	e841 2300 	strex	r3, r2, [r1]
 800a9a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a9aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d1e3      	bne.n	800a978 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f7fa febd 	bl	8005734 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a9c2:	b29b      	uxth	r3, r3
 800a9c4:	1ad3      	subs	r3, r2, r3
 800a9c6:	b29b      	uxth	r3, r3
 800a9c8:	4619      	mov	r1, r3
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f000 f8d4 	bl	800ab78 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a9d0:	e099      	b.n	800ab06 <HAL_UART_IRQHandler+0x50e>
 800a9d2:	bf00      	nop
 800a9d4:	0800b167 	.word	0x0800b167
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a9e0:	b29b      	uxth	r3, r3
 800a9e2:	1ad3      	subs	r3, r2, r3
 800a9e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a9ec:	b29b      	uxth	r3, r3
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	f000 808b 	beq.w	800ab0a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a9f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	f000 8086 	beq.w	800ab0a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	330c      	adds	r3, #12
 800aa04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa08:	e853 3f00 	ldrex	r3, [r3]
 800aa0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800aa0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aa14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	330c      	adds	r3, #12
 800aa1e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800aa22:	647a      	str	r2, [r7, #68]	; 0x44
 800aa24:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800aa28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aa2a:	e841 2300 	strex	r3, r2, [r1]
 800aa2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800aa30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d1e3      	bne.n	800a9fe <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	3314      	adds	r3, #20
 800aa3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa40:	e853 3f00 	ldrex	r3, [r3]
 800aa44:	623b      	str	r3, [r7, #32]
   return(result);
 800aa46:	6a3b      	ldr	r3, [r7, #32]
 800aa48:	f023 0301 	bic.w	r3, r3, #1
 800aa4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	3314      	adds	r3, #20
 800aa56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800aa5a:	633a      	str	r2, [r7, #48]	; 0x30
 800aa5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aa60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa62:	e841 2300 	strex	r3, r2, [r1]
 800aa66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aa68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d1e3      	bne.n	800aa36 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2220      	movs	r2, #32
 800aa72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2200      	movs	r2, #0
 800aa7a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	330c      	adds	r3, #12
 800aa82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	e853 3f00 	ldrex	r3, [r3]
 800aa8a:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	f023 0310 	bic.w	r3, r3, #16
 800aa92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	330c      	adds	r3, #12
 800aa9c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800aaa0:	61fa      	str	r2, [r7, #28]
 800aaa2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaa4:	69b9      	ldr	r1, [r7, #24]
 800aaa6:	69fa      	ldr	r2, [r7, #28]
 800aaa8:	e841 2300 	strex	r3, r2, [r1]
 800aaac:	617b      	str	r3, [r7, #20]
   return(result);
 800aaae:	697b      	ldr	r3, [r7, #20]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d1e3      	bne.n	800aa7c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800aab4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800aab8:	4619      	mov	r1, r3
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f000 f85c 	bl	800ab78 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800aac0:	e023      	b.n	800ab0a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800aac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d009      	beq.n	800aae2 <HAL_UART_IRQHandler+0x4ea>
 800aace:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d003      	beq.n	800aae2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f000 fb57 	bl	800b18e <UART_Transmit_IT>
    return;
 800aae0:	e014      	b.n	800ab0c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800aae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d00e      	beq.n	800ab0c <HAL_UART_IRQHandler+0x514>
 800aaee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aaf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d008      	beq.n	800ab0c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f000 fb97 	bl	800b22e <UART_EndTransmit_IT>
    return;
 800ab00:	e004      	b.n	800ab0c <HAL_UART_IRQHandler+0x514>
    return;
 800ab02:	bf00      	nop
 800ab04:	e002      	b.n	800ab0c <HAL_UART_IRQHandler+0x514>
      return;
 800ab06:	bf00      	nop
 800ab08:	e000      	b.n	800ab0c <HAL_UART_IRQHandler+0x514>
      return;
 800ab0a:	bf00      	nop
  }
}
 800ab0c:	37e8      	adds	r7, #232	; 0xe8
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
 800ab12:	bf00      	nop

0800ab14 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ab14:	b480      	push	{r7}
 800ab16:	b083      	sub	sp, #12
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ab1c:	bf00      	nop
 800ab1e:	370c      	adds	r7, #12
 800ab20:	46bd      	mov	sp, r7
 800ab22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab26:	4770      	bx	lr

0800ab28 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b083      	sub	sp, #12
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800ab30:	bf00      	nop
 800ab32:	370c      	adds	r7, #12
 800ab34:	46bd      	mov	sp, r7
 800ab36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3a:	4770      	bx	lr

0800ab3c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b083      	sub	sp, #12
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800ab44:	bf00      	nop
 800ab46:	370c      	adds	r7, #12
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4e:	4770      	bx	lr

0800ab50 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ab50:	b480      	push	{r7}
 800ab52:	b083      	sub	sp, #12
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800ab58:	bf00      	nop
 800ab5a:	370c      	adds	r7, #12
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab62:	4770      	bx	lr

0800ab64 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b083      	sub	sp, #12
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ab6c:	bf00      	nop
 800ab6e:	370c      	adds	r7, #12
 800ab70:	46bd      	mov	sp, r7
 800ab72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab76:	4770      	bx	lr

0800ab78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b083      	sub	sp, #12
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	460b      	mov	r3, r1
 800ab82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ab84:	bf00      	nop
 800ab86:	370c      	adds	r7, #12
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8e:	4770      	bx	lr

0800ab90 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b090      	sub	sp, #64	; 0x40
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d137      	bne.n	800ac1c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800abac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abae:	2200      	movs	r2, #0
 800abb0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800abb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	3314      	adds	r3, #20
 800abb8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abbc:	e853 3f00 	ldrex	r3, [r3]
 800abc0:	623b      	str	r3, [r7, #32]
   return(result);
 800abc2:	6a3b      	ldr	r3, [r7, #32]
 800abc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800abc8:	63bb      	str	r3, [r7, #56]	; 0x38
 800abca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	3314      	adds	r3, #20
 800abd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800abd2:	633a      	str	r2, [r7, #48]	; 0x30
 800abd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800abd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abda:	e841 2300 	strex	r3, r2, [r1]
 800abde:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800abe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d1e5      	bne.n	800abb2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800abe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	330c      	adds	r3, #12
 800abec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	e853 3f00 	ldrex	r3, [r3]
 800abf4:	60fb      	str	r3, [r7, #12]
   return(result);
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abfc:	637b      	str	r3, [r7, #52]	; 0x34
 800abfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	330c      	adds	r3, #12
 800ac04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac06:	61fa      	str	r2, [r7, #28]
 800ac08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac0a:	69b9      	ldr	r1, [r7, #24]
 800ac0c:	69fa      	ldr	r2, [r7, #28]
 800ac0e:	e841 2300 	strex	r3, r2, [r1]
 800ac12:	617b      	str	r3, [r7, #20]
   return(result);
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d1e5      	bne.n	800abe6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ac1a:	e002      	b.n	800ac22 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800ac1c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ac1e:	f7ff ff79 	bl	800ab14 <HAL_UART_TxCpltCallback>
}
 800ac22:	bf00      	nop
 800ac24:	3740      	adds	r7, #64	; 0x40
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}

0800ac2a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ac2a:	b580      	push	{r7, lr}
 800ac2c:	b084      	sub	sp, #16
 800ac2e:	af00      	add	r7, sp, #0
 800ac30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac36:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ac38:	68f8      	ldr	r0, [r7, #12]
 800ac3a:	f7ff ff75 	bl	800ab28 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac3e:	bf00      	nop
 800ac40:	3710      	adds	r7, #16
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}

0800ac46 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ac46:	b580      	push	{r7, lr}
 800ac48:	b09c      	sub	sp, #112	; 0x70
 800ac4a:	af00      	add	r7, sp, #0
 800ac4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac52:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d172      	bne.n	800ad48 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800ac62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac64:	2200      	movs	r2, #0
 800ac66:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	330c      	adds	r3, #12
 800ac6e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac72:	e853 3f00 	ldrex	r3, [r3]
 800ac76:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ac78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac7e:	66bb      	str	r3, [r7, #104]	; 0x68
 800ac80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	330c      	adds	r3, #12
 800ac86:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ac88:	65ba      	str	r2, [r7, #88]	; 0x58
 800ac8a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac8c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ac8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ac90:	e841 2300 	strex	r3, r2, [r1]
 800ac94:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ac96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d1e5      	bne.n	800ac68 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	3314      	adds	r3, #20
 800aca2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca6:	e853 3f00 	ldrex	r3, [r3]
 800acaa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800acac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acae:	f023 0301 	bic.w	r3, r3, #1
 800acb2:	667b      	str	r3, [r7, #100]	; 0x64
 800acb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	3314      	adds	r3, #20
 800acba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800acbc:	647a      	str	r2, [r7, #68]	; 0x44
 800acbe:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acc0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800acc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800acc4:	e841 2300 	strex	r3, r2, [r1]
 800acc8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800acca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800accc:	2b00      	cmp	r3, #0
 800acce:	d1e5      	bne.n	800ac9c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800acd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	3314      	adds	r3, #20
 800acd6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acda:	e853 3f00 	ldrex	r3, [r3]
 800acde:	623b      	str	r3, [r7, #32]
   return(result);
 800ace0:	6a3b      	ldr	r3, [r7, #32]
 800ace2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ace6:	663b      	str	r3, [r7, #96]	; 0x60
 800ace8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	3314      	adds	r3, #20
 800acee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800acf0:	633a      	str	r2, [r7, #48]	; 0x30
 800acf2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acf4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800acf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acf8:	e841 2300 	strex	r3, r2, [r1]
 800acfc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800acfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d1e5      	bne.n	800acd0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ad04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad06:	2220      	movs	r2, #32
 800ad08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad10:	2b01      	cmp	r3, #1
 800ad12:	d119      	bne.n	800ad48 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	330c      	adds	r3, #12
 800ad1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad1c:	693b      	ldr	r3, [r7, #16]
 800ad1e:	e853 3f00 	ldrex	r3, [r3]
 800ad22:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	f023 0310 	bic.w	r3, r3, #16
 800ad2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	330c      	adds	r3, #12
 800ad32:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ad34:	61fa      	str	r2, [r7, #28]
 800ad36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad38:	69b9      	ldr	r1, [r7, #24]
 800ad3a:	69fa      	ldr	r2, [r7, #28]
 800ad3c:	e841 2300 	strex	r3, r2, [r1]
 800ad40:	617b      	str	r3, [r7, #20]
   return(result);
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d1e5      	bne.n	800ad14 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad4c:	2b01      	cmp	r3, #1
 800ad4e:	d106      	bne.n	800ad5e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ad50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad52:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ad54:	4619      	mov	r1, r3
 800ad56:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ad58:	f7ff ff0e 	bl	800ab78 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ad5c:	e002      	b.n	800ad64 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800ad5e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ad60:	f7ff feec 	bl	800ab3c <HAL_UART_RxCpltCallback>
}
 800ad64:	bf00      	nop
 800ad66:	3770      	adds	r7, #112	; 0x70
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}

0800ad6c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b084      	sub	sp, #16
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad78:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad7e:	2b01      	cmp	r3, #1
 800ad80:	d108      	bne.n	800ad94 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ad86:	085b      	lsrs	r3, r3, #1
 800ad88:	b29b      	uxth	r3, r3
 800ad8a:	4619      	mov	r1, r3
 800ad8c:	68f8      	ldr	r0, [r7, #12]
 800ad8e:	f7ff fef3 	bl	800ab78 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ad92:	e002      	b.n	800ad9a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800ad94:	68f8      	ldr	r0, [r7, #12]
 800ad96:	f7ff fedb 	bl	800ab50 <HAL_UART_RxHalfCpltCallback>
}
 800ad9a:	bf00      	nop
 800ad9c:	3710      	adds	r7, #16
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}

0800ada2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ada2:	b580      	push	{r7, lr}
 800ada4:	b084      	sub	sp, #16
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800adaa:	2300      	movs	r3, #0
 800adac:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adb2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	695b      	ldr	r3, [r3, #20]
 800adba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adbe:	2b80      	cmp	r3, #128	; 0x80
 800adc0:	bf0c      	ite	eq
 800adc2:	2301      	moveq	r3, #1
 800adc4:	2300      	movne	r3, #0
 800adc6:	b2db      	uxtb	r3, r3
 800adc8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800add0:	b2db      	uxtb	r3, r3
 800add2:	2b21      	cmp	r3, #33	; 0x21
 800add4:	d108      	bne.n	800ade8 <UART_DMAError+0x46>
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d005      	beq.n	800ade8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	2200      	movs	r2, #0
 800ade0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800ade2:	68b8      	ldr	r0, [r7, #8]
 800ade4:	f000 f934 	bl	800b050 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	695b      	ldr	r3, [r3, #20]
 800adee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adf2:	2b40      	cmp	r3, #64	; 0x40
 800adf4:	bf0c      	ite	eq
 800adf6:	2301      	moveq	r3, #1
 800adf8:	2300      	movne	r3, #0
 800adfa:	b2db      	uxtb	r3, r3
 800adfc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ae04:	b2db      	uxtb	r3, r3
 800ae06:	2b22      	cmp	r3, #34	; 0x22
 800ae08:	d108      	bne.n	800ae1c <UART_DMAError+0x7a>
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d005      	beq.n	800ae1c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	2200      	movs	r2, #0
 800ae14:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800ae16:	68b8      	ldr	r0, [r7, #8]
 800ae18:	f000 f942 	bl	800b0a0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae20:	f043 0210 	orr.w	r2, r3, #16
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ae28:	68b8      	ldr	r0, [r7, #8]
 800ae2a:	f7ff fe9b 	bl	800ab64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae2e:	bf00      	nop
 800ae30:	3710      	adds	r7, #16
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}

0800ae36 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800ae36:	b580      	push	{r7, lr}
 800ae38:	b090      	sub	sp, #64	; 0x40
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	60f8      	str	r0, [r7, #12]
 800ae3e:	60b9      	str	r1, [r7, #8]
 800ae40:	603b      	str	r3, [r7, #0]
 800ae42:	4613      	mov	r3, r2
 800ae44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae46:	e050      	b.n	800aeea <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae4e:	d04c      	beq.n	800aeea <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800ae50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d007      	beq.n	800ae66 <UART_WaitOnFlagUntilTimeout+0x30>
 800ae56:	f7f9 ff85 	bl	8004d64 <HAL_GetTick>
 800ae5a:	4602      	mov	r2, r0
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	1ad3      	subs	r3, r2, r3
 800ae60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d241      	bcs.n	800aeea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	330c      	adds	r3, #12
 800ae6c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae70:	e853 3f00 	ldrex	r3, [r3]
 800ae74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ae76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae78:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ae7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	330c      	adds	r3, #12
 800ae84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ae86:	637a      	str	r2, [r7, #52]	; 0x34
 800ae88:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ae8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae8e:	e841 2300 	strex	r3, r2, [r1]
 800ae92:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ae94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d1e5      	bne.n	800ae66 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	3314      	adds	r3, #20
 800aea0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	e853 3f00 	ldrex	r3, [r3]
 800aea8:	613b      	str	r3, [r7, #16]
   return(result);
 800aeaa:	693b      	ldr	r3, [r7, #16]
 800aeac:	f023 0301 	bic.w	r3, r3, #1
 800aeb0:	63bb      	str	r3, [r7, #56]	; 0x38
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	3314      	adds	r3, #20
 800aeb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aeba:	623a      	str	r2, [r7, #32]
 800aebc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aebe:	69f9      	ldr	r1, [r7, #28]
 800aec0:	6a3a      	ldr	r2, [r7, #32]
 800aec2:	e841 2300 	strex	r3, r2, [r1]
 800aec6:	61bb      	str	r3, [r7, #24]
   return(result);
 800aec8:	69bb      	ldr	r3, [r7, #24]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d1e5      	bne.n	800ae9a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	2220      	movs	r2, #32
 800aed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	2220      	movs	r2, #32
 800aeda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2200      	movs	r2, #0
 800aee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800aee6:	2303      	movs	r3, #3
 800aee8:	e00f      	b.n	800af0a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	681a      	ldr	r2, [r3, #0]
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	4013      	ands	r3, r2
 800aef4:	68ba      	ldr	r2, [r7, #8]
 800aef6:	429a      	cmp	r2, r3
 800aef8:	bf0c      	ite	eq
 800aefa:	2301      	moveq	r3, #1
 800aefc:	2300      	movne	r3, #0
 800aefe:	b2db      	uxtb	r3, r3
 800af00:	461a      	mov	r2, r3
 800af02:	79fb      	ldrb	r3, [r7, #7]
 800af04:	429a      	cmp	r2, r3
 800af06:	d09f      	beq.n	800ae48 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800af08:	2300      	movs	r3, #0
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3740      	adds	r7, #64	; 0x40
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}
	...

0800af14 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b098      	sub	sp, #96	; 0x60
 800af18:	af00      	add	r7, sp, #0
 800af1a:	60f8      	str	r0, [r7, #12]
 800af1c:	60b9      	str	r1, [r7, #8]
 800af1e:	4613      	mov	r3, r2
 800af20:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800af22:	68ba      	ldr	r2, [r7, #8]
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	88fa      	ldrh	r2, [r7, #6]
 800af2c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	2200      	movs	r2, #0
 800af32:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	2222      	movs	r2, #34	; 0x22
 800af38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af40:	4a40      	ldr	r2, [pc, #256]	; (800b044 <UART_Start_Receive_DMA+0x130>)
 800af42:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af48:	4a3f      	ldr	r2, [pc, #252]	; (800b048 <UART_Start_Receive_DMA+0x134>)
 800af4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af50:	4a3e      	ldr	r2, [pc, #248]	; (800b04c <UART_Start_Receive_DMA+0x138>)
 800af52:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af58:	2200      	movs	r2, #0
 800af5a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800af5c:	f107 0308 	add.w	r3, r7, #8
 800af60:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	3304      	adds	r3, #4
 800af6c:	4619      	mov	r1, r3
 800af6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800af70:	681a      	ldr	r2, [r3, #0]
 800af72:	88fb      	ldrh	r3, [r7, #6]
 800af74:	f7fa fb86 	bl	8005684 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800af78:	2300      	movs	r3, #0
 800af7a:	613b      	str	r3, [r7, #16]
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	613b      	str	r3, [r7, #16]
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	685b      	ldr	r3, [r3, #4]
 800af8a:	613b      	str	r3, [r7, #16]
 800af8c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	2200      	movs	r2, #0
 800af92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	691b      	ldr	r3, [r3, #16]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d019      	beq.n	800afd2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	330c      	adds	r3, #12
 800afa4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afa8:	e853 3f00 	ldrex	r3, [r3]
 800afac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800afae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800afb4:	65bb      	str	r3, [r7, #88]	; 0x58
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	330c      	adds	r3, #12
 800afbc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800afbe:	64fa      	str	r2, [r7, #76]	; 0x4c
 800afc0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afc2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800afc4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800afc6:	e841 2300 	strex	r3, r2, [r1]
 800afca:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800afcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d1e5      	bne.n	800af9e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	3314      	adds	r3, #20
 800afd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afdc:	e853 3f00 	ldrex	r3, [r3]
 800afe0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800afe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afe4:	f043 0301 	orr.w	r3, r3, #1
 800afe8:	657b      	str	r3, [r7, #84]	; 0x54
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	3314      	adds	r3, #20
 800aff0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aff2:	63ba      	str	r2, [r7, #56]	; 0x38
 800aff4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aff6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800aff8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800affa:	e841 2300 	strex	r3, r2, [r1]
 800affe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b002:	2b00      	cmp	r3, #0
 800b004:	d1e5      	bne.n	800afd2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	3314      	adds	r3, #20
 800b00c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b00e:	69bb      	ldr	r3, [r7, #24]
 800b010:	e853 3f00 	ldrex	r3, [r3]
 800b014:	617b      	str	r3, [r7, #20]
   return(result);
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b01c:	653b      	str	r3, [r7, #80]	; 0x50
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	3314      	adds	r3, #20
 800b024:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b026:	627a      	str	r2, [r7, #36]	; 0x24
 800b028:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b02a:	6a39      	ldr	r1, [r7, #32]
 800b02c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b02e:	e841 2300 	strex	r3, r2, [r1]
 800b032:	61fb      	str	r3, [r7, #28]
   return(result);
 800b034:	69fb      	ldr	r3, [r7, #28]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d1e5      	bne.n	800b006 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800b03a:	2300      	movs	r3, #0
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3760      	adds	r7, #96	; 0x60
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}
 800b044:	0800ac47 	.word	0x0800ac47
 800b048:	0800ad6d 	.word	0x0800ad6d
 800b04c:	0800ada3 	.word	0x0800ada3

0800b050 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b050:	b480      	push	{r7}
 800b052:	b089      	sub	sp, #36	; 0x24
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	330c      	adds	r3, #12
 800b05e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	e853 3f00 	ldrex	r3, [r3]
 800b066:	60bb      	str	r3, [r7, #8]
   return(result);
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b06e:	61fb      	str	r3, [r7, #28]
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	330c      	adds	r3, #12
 800b076:	69fa      	ldr	r2, [r7, #28]
 800b078:	61ba      	str	r2, [r7, #24]
 800b07a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b07c:	6979      	ldr	r1, [r7, #20]
 800b07e:	69ba      	ldr	r2, [r7, #24]
 800b080:	e841 2300 	strex	r3, r2, [r1]
 800b084:	613b      	str	r3, [r7, #16]
   return(result);
 800b086:	693b      	ldr	r3, [r7, #16]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d1e5      	bne.n	800b058 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2220      	movs	r2, #32
 800b090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b094:	bf00      	nop
 800b096:	3724      	adds	r7, #36	; 0x24
 800b098:	46bd      	mov	sp, r7
 800b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09e:	4770      	bx	lr

0800b0a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b095      	sub	sp, #84	; 0x54
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	330c      	adds	r3, #12
 800b0ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0b2:	e853 3f00 	ldrex	r3, [r3]
 800b0b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b0be:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	330c      	adds	r3, #12
 800b0c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b0c8:	643a      	str	r2, [r7, #64]	; 0x40
 800b0ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b0ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b0d0:	e841 2300 	strex	r3, r2, [r1]
 800b0d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d1e5      	bne.n	800b0a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	3314      	adds	r3, #20
 800b0e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0e4:	6a3b      	ldr	r3, [r7, #32]
 800b0e6:	e853 3f00 	ldrex	r3, [r3]
 800b0ea:	61fb      	str	r3, [r7, #28]
   return(result);
 800b0ec:	69fb      	ldr	r3, [r7, #28]
 800b0ee:	f023 0301 	bic.w	r3, r3, #1
 800b0f2:	64bb      	str	r3, [r7, #72]	; 0x48
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	3314      	adds	r3, #20
 800b0fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b0fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b0fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b100:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b102:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b104:	e841 2300 	strex	r3, r2, [r1]
 800b108:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d1e5      	bne.n	800b0dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b114:	2b01      	cmp	r3, #1
 800b116:	d119      	bne.n	800b14c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	330c      	adds	r3, #12
 800b11e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	e853 3f00 	ldrex	r3, [r3]
 800b126:	60bb      	str	r3, [r7, #8]
   return(result);
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	f023 0310 	bic.w	r3, r3, #16
 800b12e:	647b      	str	r3, [r7, #68]	; 0x44
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	330c      	adds	r3, #12
 800b136:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b138:	61ba      	str	r2, [r7, #24]
 800b13a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b13c:	6979      	ldr	r1, [r7, #20]
 800b13e:	69ba      	ldr	r2, [r7, #24]
 800b140:	e841 2300 	strex	r3, r2, [r1]
 800b144:	613b      	str	r3, [r7, #16]
   return(result);
 800b146:	693b      	ldr	r3, [r7, #16]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d1e5      	bne.n	800b118 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2220      	movs	r2, #32
 800b150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2200      	movs	r2, #0
 800b158:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b15a:	bf00      	nop
 800b15c:	3754      	adds	r7, #84	; 0x54
 800b15e:	46bd      	mov	sp, r7
 800b160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b164:	4770      	bx	lr

0800b166 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b166:	b580      	push	{r7, lr}
 800b168:	b084      	sub	sp, #16
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b172:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	2200      	movs	r2, #0
 800b178:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	2200      	movs	r2, #0
 800b17e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b180:	68f8      	ldr	r0, [r7, #12]
 800b182:	f7ff fcef 	bl	800ab64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b186:	bf00      	nop
 800b188:	3710      	adds	r7, #16
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}

0800b18e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b18e:	b480      	push	{r7}
 800b190:	b085      	sub	sp, #20
 800b192:	af00      	add	r7, sp, #0
 800b194:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b19c:	b2db      	uxtb	r3, r3
 800b19e:	2b21      	cmp	r3, #33	; 0x21
 800b1a0:	d13e      	bne.n	800b220 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	689b      	ldr	r3, [r3, #8]
 800b1a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1aa:	d114      	bne.n	800b1d6 <UART_Transmit_IT+0x48>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	691b      	ldr	r3, [r3, #16]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d110      	bne.n	800b1d6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6a1b      	ldr	r3, [r3, #32]
 800b1b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	881b      	ldrh	r3, [r3, #0]
 800b1be:	461a      	mov	r2, r3
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b1c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6a1b      	ldr	r3, [r3, #32]
 800b1ce:	1c9a      	adds	r2, r3, #2
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	621a      	str	r2, [r3, #32]
 800b1d4:	e008      	b.n	800b1e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6a1b      	ldr	r3, [r3, #32]
 800b1da:	1c59      	adds	r1, r3, #1
 800b1dc:	687a      	ldr	r2, [r7, #4]
 800b1de:	6211      	str	r1, [r2, #32]
 800b1e0:	781a      	ldrb	r2, [r3, #0]
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b1ec:	b29b      	uxth	r3, r3
 800b1ee:	3b01      	subs	r3, #1
 800b1f0:	b29b      	uxth	r3, r3
 800b1f2:	687a      	ldr	r2, [r7, #4]
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d10f      	bne.n	800b21c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	68da      	ldr	r2, [r3, #12]
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b20a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	68da      	ldr	r2, [r3, #12]
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b21a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b21c:	2300      	movs	r3, #0
 800b21e:	e000      	b.n	800b222 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b220:	2302      	movs	r3, #2
  }
}
 800b222:	4618      	mov	r0, r3
 800b224:	3714      	adds	r7, #20
 800b226:	46bd      	mov	sp, r7
 800b228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22c:	4770      	bx	lr

0800b22e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b22e:	b580      	push	{r7, lr}
 800b230:	b082      	sub	sp, #8
 800b232:	af00      	add	r7, sp, #0
 800b234:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	68da      	ldr	r2, [r3, #12]
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b244:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2220      	movs	r2, #32
 800b24a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f7ff fc60 	bl	800ab14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b254:	2300      	movs	r3, #0
}
 800b256:	4618      	mov	r0, r3
 800b258:	3708      	adds	r7, #8
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}

0800b25e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b25e:	b580      	push	{r7, lr}
 800b260:	b08c      	sub	sp, #48	; 0x30
 800b262:	af00      	add	r7, sp, #0
 800b264:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b26c:	b2db      	uxtb	r3, r3
 800b26e:	2b22      	cmp	r3, #34	; 0x22
 800b270:	f040 80ab 	bne.w	800b3ca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	689b      	ldr	r3, [r3, #8]
 800b278:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b27c:	d117      	bne.n	800b2ae <UART_Receive_IT+0x50>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	691b      	ldr	r3, [r3, #16]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d113      	bne.n	800b2ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b286:	2300      	movs	r3, #0
 800b288:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b28e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	685b      	ldr	r3, [r3, #4]
 800b296:	b29b      	uxth	r3, r3
 800b298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b29c:	b29a      	uxth	r2, r3
 800b29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2a6:	1c9a      	adds	r2, r3, #2
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	629a      	str	r2, [r3, #40]	; 0x28
 800b2ac:	e026      	b.n	800b2fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	689b      	ldr	r3, [r3, #8]
 800b2bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2c0:	d007      	beq.n	800b2d2 <UART_Receive_IT+0x74>
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	689b      	ldr	r3, [r3, #8]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d10a      	bne.n	800b2e0 <UART_Receive_IT+0x82>
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	691b      	ldr	r3, [r3, #16]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d106      	bne.n	800b2e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	685b      	ldr	r3, [r3, #4]
 800b2d8:	b2da      	uxtb	r2, r3
 800b2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2dc:	701a      	strb	r2, [r3, #0]
 800b2de:	e008      	b.n	800b2f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	685b      	ldr	r3, [r3, #4]
 800b2e6:	b2db      	uxtb	r3, r3
 800b2e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2ec:	b2da      	uxtb	r2, r3
 800b2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2f6:	1c5a      	adds	r2, r3, #1
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b300:	b29b      	uxth	r3, r3
 800b302:	3b01      	subs	r3, #1
 800b304:	b29b      	uxth	r3, r3
 800b306:	687a      	ldr	r2, [r7, #4]
 800b308:	4619      	mov	r1, r3
 800b30a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d15a      	bne.n	800b3c6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	68da      	ldr	r2, [r3, #12]
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	f022 0220 	bic.w	r2, r2, #32
 800b31e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	68da      	ldr	r2, [r3, #12]
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b32e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	695a      	ldr	r2, [r3, #20]
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	f022 0201 	bic.w	r2, r2, #1
 800b33e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2220      	movs	r2, #32
 800b344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	d135      	bne.n	800b3bc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2200      	movs	r2, #0
 800b354:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	330c      	adds	r3, #12
 800b35c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b35e:	697b      	ldr	r3, [r7, #20]
 800b360:	e853 3f00 	ldrex	r3, [r3]
 800b364:	613b      	str	r3, [r7, #16]
   return(result);
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	f023 0310 	bic.w	r3, r3, #16
 800b36c:	627b      	str	r3, [r7, #36]	; 0x24
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	330c      	adds	r3, #12
 800b374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b376:	623a      	str	r2, [r7, #32]
 800b378:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b37a:	69f9      	ldr	r1, [r7, #28]
 800b37c:	6a3a      	ldr	r2, [r7, #32]
 800b37e:	e841 2300 	strex	r3, r2, [r1]
 800b382:	61bb      	str	r3, [r7, #24]
   return(result);
 800b384:	69bb      	ldr	r3, [r7, #24]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d1e5      	bne.n	800b356 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f003 0310 	and.w	r3, r3, #16
 800b394:	2b10      	cmp	r3, #16
 800b396:	d10a      	bne.n	800b3ae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b398:	2300      	movs	r3, #0
 800b39a:	60fb      	str	r3, [r7, #12]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	60fb      	str	r3, [r7, #12]
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	685b      	ldr	r3, [r3, #4]
 800b3aa:	60fb      	str	r3, [r7, #12]
 800b3ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b3b2:	4619      	mov	r1, r3
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f7ff fbdf 	bl	800ab78 <HAL_UARTEx_RxEventCallback>
 800b3ba:	e002      	b.n	800b3c2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f7ff fbbd 	bl	800ab3c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	e002      	b.n	800b3cc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	e000      	b.n	800b3cc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b3ca:	2302      	movs	r3, #2
  }
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	3730      	adds	r7, #48	; 0x30
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}

0800b3d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b3d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b3d8:	b0c0      	sub	sp, #256	; 0x100
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b3e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	691b      	ldr	r3, [r3, #16]
 800b3e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b3ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3f0:	68d9      	ldr	r1, [r3, #12]
 800b3f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3f6:	681a      	ldr	r2, [r3, #0]
 800b3f8:	ea40 0301 	orr.w	r3, r0, r1
 800b3fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b3fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b402:	689a      	ldr	r2, [r3, #8]
 800b404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b408:	691b      	ldr	r3, [r3, #16]
 800b40a:	431a      	orrs	r2, r3
 800b40c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b410:	695b      	ldr	r3, [r3, #20]
 800b412:	431a      	orrs	r2, r3
 800b414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b418:	69db      	ldr	r3, [r3, #28]
 800b41a:	4313      	orrs	r3, r2
 800b41c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	68db      	ldr	r3, [r3, #12]
 800b428:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b42c:	f021 010c 	bic.w	r1, r1, #12
 800b430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b434:	681a      	ldr	r2, [r3, #0]
 800b436:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b43a:	430b      	orrs	r3, r1
 800b43c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b43e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	695b      	ldr	r3, [r3, #20]
 800b446:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b44a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b44e:	6999      	ldr	r1, [r3, #24]
 800b450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b454:	681a      	ldr	r2, [r3, #0]
 800b456:	ea40 0301 	orr.w	r3, r0, r1
 800b45a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b45c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b460:	681a      	ldr	r2, [r3, #0]
 800b462:	4b8f      	ldr	r3, [pc, #572]	; (800b6a0 <UART_SetConfig+0x2cc>)
 800b464:	429a      	cmp	r2, r3
 800b466:	d005      	beq.n	800b474 <UART_SetConfig+0xa0>
 800b468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b46c:	681a      	ldr	r2, [r3, #0]
 800b46e:	4b8d      	ldr	r3, [pc, #564]	; (800b6a4 <UART_SetConfig+0x2d0>)
 800b470:	429a      	cmp	r2, r3
 800b472:	d104      	bne.n	800b47e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b474:	f7fd feea 	bl	800924c <HAL_RCC_GetPCLK2Freq>
 800b478:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b47c:	e003      	b.n	800b486 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b47e:	f7fd fed1 	bl	8009224 <HAL_RCC_GetPCLK1Freq>
 800b482:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b48a:	69db      	ldr	r3, [r3, #28]
 800b48c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b490:	f040 810c 	bne.w	800b6ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b494:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b498:	2200      	movs	r2, #0
 800b49a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b49e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b4a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b4a6:	4622      	mov	r2, r4
 800b4a8:	462b      	mov	r3, r5
 800b4aa:	1891      	adds	r1, r2, r2
 800b4ac:	65b9      	str	r1, [r7, #88]	; 0x58
 800b4ae:	415b      	adcs	r3, r3
 800b4b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b4b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b4b6:	4621      	mov	r1, r4
 800b4b8:	eb12 0801 	adds.w	r8, r2, r1
 800b4bc:	4629      	mov	r1, r5
 800b4be:	eb43 0901 	adc.w	r9, r3, r1
 800b4c2:	f04f 0200 	mov.w	r2, #0
 800b4c6:	f04f 0300 	mov.w	r3, #0
 800b4ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b4ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b4d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b4d6:	4690      	mov	r8, r2
 800b4d8:	4699      	mov	r9, r3
 800b4da:	4623      	mov	r3, r4
 800b4dc:	eb18 0303 	adds.w	r3, r8, r3
 800b4e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b4e4:	462b      	mov	r3, r5
 800b4e6:	eb49 0303 	adc.w	r3, r9, r3
 800b4ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b4ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4f2:	685b      	ldr	r3, [r3, #4]
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b4fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b4fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b502:	460b      	mov	r3, r1
 800b504:	18db      	adds	r3, r3, r3
 800b506:	653b      	str	r3, [r7, #80]	; 0x50
 800b508:	4613      	mov	r3, r2
 800b50a:	eb42 0303 	adc.w	r3, r2, r3
 800b50e:	657b      	str	r3, [r7, #84]	; 0x54
 800b510:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b514:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b518:	f7f5 fbc0 	bl	8000c9c <__aeabi_uldivmod>
 800b51c:	4602      	mov	r2, r0
 800b51e:	460b      	mov	r3, r1
 800b520:	4b61      	ldr	r3, [pc, #388]	; (800b6a8 <UART_SetConfig+0x2d4>)
 800b522:	fba3 2302 	umull	r2, r3, r3, r2
 800b526:	095b      	lsrs	r3, r3, #5
 800b528:	011c      	lsls	r4, r3, #4
 800b52a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b52e:	2200      	movs	r2, #0
 800b530:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b534:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b538:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b53c:	4642      	mov	r2, r8
 800b53e:	464b      	mov	r3, r9
 800b540:	1891      	adds	r1, r2, r2
 800b542:	64b9      	str	r1, [r7, #72]	; 0x48
 800b544:	415b      	adcs	r3, r3
 800b546:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b548:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b54c:	4641      	mov	r1, r8
 800b54e:	eb12 0a01 	adds.w	sl, r2, r1
 800b552:	4649      	mov	r1, r9
 800b554:	eb43 0b01 	adc.w	fp, r3, r1
 800b558:	f04f 0200 	mov.w	r2, #0
 800b55c:	f04f 0300 	mov.w	r3, #0
 800b560:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b564:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b568:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b56c:	4692      	mov	sl, r2
 800b56e:	469b      	mov	fp, r3
 800b570:	4643      	mov	r3, r8
 800b572:	eb1a 0303 	adds.w	r3, sl, r3
 800b576:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b57a:	464b      	mov	r3, r9
 800b57c:	eb4b 0303 	adc.w	r3, fp, r3
 800b580:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b588:	685b      	ldr	r3, [r3, #4]
 800b58a:	2200      	movs	r2, #0
 800b58c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b590:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b594:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b598:	460b      	mov	r3, r1
 800b59a:	18db      	adds	r3, r3, r3
 800b59c:	643b      	str	r3, [r7, #64]	; 0x40
 800b59e:	4613      	mov	r3, r2
 800b5a0:	eb42 0303 	adc.w	r3, r2, r3
 800b5a4:	647b      	str	r3, [r7, #68]	; 0x44
 800b5a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b5aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b5ae:	f7f5 fb75 	bl	8000c9c <__aeabi_uldivmod>
 800b5b2:	4602      	mov	r2, r0
 800b5b4:	460b      	mov	r3, r1
 800b5b6:	4611      	mov	r1, r2
 800b5b8:	4b3b      	ldr	r3, [pc, #236]	; (800b6a8 <UART_SetConfig+0x2d4>)
 800b5ba:	fba3 2301 	umull	r2, r3, r3, r1
 800b5be:	095b      	lsrs	r3, r3, #5
 800b5c0:	2264      	movs	r2, #100	; 0x64
 800b5c2:	fb02 f303 	mul.w	r3, r2, r3
 800b5c6:	1acb      	subs	r3, r1, r3
 800b5c8:	00db      	lsls	r3, r3, #3
 800b5ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b5ce:	4b36      	ldr	r3, [pc, #216]	; (800b6a8 <UART_SetConfig+0x2d4>)
 800b5d0:	fba3 2302 	umull	r2, r3, r3, r2
 800b5d4:	095b      	lsrs	r3, r3, #5
 800b5d6:	005b      	lsls	r3, r3, #1
 800b5d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b5dc:	441c      	add	r4, r3
 800b5de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b5e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b5ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b5f0:	4642      	mov	r2, r8
 800b5f2:	464b      	mov	r3, r9
 800b5f4:	1891      	adds	r1, r2, r2
 800b5f6:	63b9      	str	r1, [r7, #56]	; 0x38
 800b5f8:	415b      	adcs	r3, r3
 800b5fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b5fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b600:	4641      	mov	r1, r8
 800b602:	1851      	adds	r1, r2, r1
 800b604:	6339      	str	r1, [r7, #48]	; 0x30
 800b606:	4649      	mov	r1, r9
 800b608:	414b      	adcs	r3, r1
 800b60a:	637b      	str	r3, [r7, #52]	; 0x34
 800b60c:	f04f 0200 	mov.w	r2, #0
 800b610:	f04f 0300 	mov.w	r3, #0
 800b614:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b618:	4659      	mov	r1, fp
 800b61a:	00cb      	lsls	r3, r1, #3
 800b61c:	4651      	mov	r1, sl
 800b61e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b622:	4651      	mov	r1, sl
 800b624:	00ca      	lsls	r2, r1, #3
 800b626:	4610      	mov	r0, r2
 800b628:	4619      	mov	r1, r3
 800b62a:	4603      	mov	r3, r0
 800b62c:	4642      	mov	r2, r8
 800b62e:	189b      	adds	r3, r3, r2
 800b630:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b634:	464b      	mov	r3, r9
 800b636:	460a      	mov	r2, r1
 800b638:	eb42 0303 	adc.w	r3, r2, r3
 800b63c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b644:	685b      	ldr	r3, [r3, #4]
 800b646:	2200      	movs	r2, #0
 800b648:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b64c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b650:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b654:	460b      	mov	r3, r1
 800b656:	18db      	adds	r3, r3, r3
 800b658:	62bb      	str	r3, [r7, #40]	; 0x28
 800b65a:	4613      	mov	r3, r2
 800b65c:	eb42 0303 	adc.w	r3, r2, r3
 800b660:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b662:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b666:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b66a:	f7f5 fb17 	bl	8000c9c <__aeabi_uldivmod>
 800b66e:	4602      	mov	r2, r0
 800b670:	460b      	mov	r3, r1
 800b672:	4b0d      	ldr	r3, [pc, #52]	; (800b6a8 <UART_SetConfig+0x2d4>)
 800b674:	fba3 1302 	umull	r1, r3, r3, r2
 800b678:	095b      	lsrs	r3, r3, #5
 800b67a:	2164      	movs	r1, #100	; 0x64
 800b67c:	fb01 f303 	mul.w	r3, r1, r3
 800b680:	1ad3      	subs	r3, r2, r3
 800b682:	00db      	lsls	r3, r3, #3
 800b684:	3332      	adds	r3, #50	; 0x32
 800b686:	4a08      	ldr	r2, [pc, #32]	; (800b6a8 <UART_SetConfig+0x2d4>)
 800b688:	fba2 2303 	umull	r2, r3, r2, r3
 800b68c:	095b      	lsrs	r3, r3, #5
 800b68e:	f003 0207 	and.w	r2, r3, #7
 800b692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	4422      	add	r2, r4
 800b69a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b69c:	e106      	b.n	800b8ac <UART_SetConfig+0x4d8>
 800b69e:	bf00      	nop
 800b6a0:	40011000 	.word	0x40011000
 800b6a4:	40011400 	.word	0x40011400
 800b6a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b6ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b6b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b6ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b6be:	4642      	mov	r2, r8
 800b6c0:	464b      	mov	r3, r9
 800b6c2:	1891      	adds	r1, r2, r2
 800b6c4:	6239      	str	r1, [r7, #32]
 800b6c6:	415b      	adcs	r3, r3
 800b6c8:	627b      	str	r3, [r7, #36]	; 0x24
 800b6ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b6ce:	4641      	mov	r1, r8
 800b6d0:	1854      	adds	r4, r2, r1
 800b6d2:	4649      	mov	r1, r9
 800b6d4:	eb43 0501 	adc.w	r5, r3, r1
 800b6d8:	f04f 0200 	mov.w	r2, #0
 800b6dc:	f04f 0300 	mov.w	r3, #0
 800b6e0:	00eb      	lsls	r3, r5, #3
 800b6e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b6e6:	00e2      	lsls	r2, r4, #3
 800b6e8:	4614      	mov	r4, r2
 800b6ea:	461d      	mov	r5, r3
 800b6ec:	4643      	mov	r3, r8
 800b6ee:	18e3      	adds	r3, r4, r3
 800b6f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b6f4:	464b      	mov	r3, r9
 800b6f6:	eb45 0303 	adc.w	r3, r5, r3
 800b6fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b6fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b702:	685b      	ldr	r3, [r3, #4]
 800b704:	2200      	movs	r2, #0
 800b706:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b70a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b70e:	f04f 0200 	mov.w	r2, #0
 800b712:	f04f 0300 	mov.w	r3, #0
 800b716:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b71a:	4629      	mov	r1, r5
 800b71c:	008b      	lsls	r3, r1, #2
 800b71e:	4621      	mov	r1, r4
 800b720:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b724:	4621      	mov	r1, r4
 800b726:	008a      	lsls	r2, r1, #2
 800b728:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b72c:	f7f5 fab6 	bl	8000c9c <__aeabi_uldivmod>
 800b730:	4602      	mov	r2, r0
 800b732:	460b      	mov	r3, r1
 800b734:	4b60      	ldr	r3, [pc, #384]	; (800b8b8 <UART_SetConfig+0x4e4>)
 800b736:	fba3 2302 	umull	r2, r3, r3, r2
 800b73a:	095b      	lsrs	r3, r3, #5
 800b73c:	011c      	lsls	r4, r3, #4
 800b73e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b742:	2200      	movs	r2, #0
 800b744:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b748:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b74c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b750:	4642      	mov	r2, r8
 800b752:	464b      	mov	r3, r9
 800b754:	1891      	adds	r1, r2, r2
 800b756:	61b9      	str	r1, [r7, #24]
 800b758:	415b      	adcs	r3, r3
 800b75a:	61fb      	str	r3, [r7, #28]
 800b75c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b760:	4641      	mov	r1, r8
 800b762:	1851      	adds	r1, r2, r1
 800b764:	6139      	str	r1, [r7, #16]
 800b766:	4649      	mov	r1, r9
 800b768:	414b      	adcs	r3, r1
 800b76a:	617b      	str	r3, [r7, #20]
 800b76c:	f04f 0200 	mov.w	r2, #0
 800b770:	f04f 0300 	mov.w	r3, #0
 800b774:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b778:	4659      	mov	r1, fp
 800b77a:	00cb      	lsls	r3, r1, #3
 800b77c:	4651      	mov	r1, sl
 800b77e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b782:	4651      	mov	r1, sl
 800b784:	00ca      	lsls	r2, r1, #3
 800b786:	4610      	mov	r0, r2
 800b788:	4619      	mov	r1, r3
 800b78a:	4603      	mov	r3, r0
 800b78c:	4642      	mov	r2, r8
 800b78e:	189b      	adds	r3, r3, r2
 800b790:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b794:	464b      	mov	r3, r9
 800b796:	460a      	mov	r2, r1
 800b798:	eb42 0303 	adc.w	r3, r2, r3
 800b79c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b7a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7a4:	685b      	ldr	r3, [r3, #4]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	67bb      	str	r3, [r7, #120]	; 0x78
 800b7aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b7ac:	f04f 0200 	mov.w	r2, #0
 800b7b0:	f04f 0300 	mov.w	r3, #0
 800b7b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b7b8:	4649      	mov	r1, r9
 800b7ba:	008b      	lsls	r3, r1, #2
 800b7bc:	4641      	mov	r1, r8
 800b7be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b7c2:	4641      	mov	r1, r8
 800b7c4:	008a      	lsls	r2, r1, #2
 800b7c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b7ca:	f7f5 fa67 	bl	8000c9c <__aeabi_uldivmod>
 800b7ce:	4602      	mov	r2, r0
 800b7d0:	460b      	mov	r3, r1
 800b7d2:	4611      	mov	r1, r2
 800b7d4:	4b38      	ldr	r3, [pc, #224]	; (800b8b8 <UART_SetConfig+0x4e4>)
 800b7d6:	fba3 2301 	umull	r2, r3, r3, r1
 800b7da:	095b      	lsrs	r3, r3, #5
 800b7dc:	2264      	movs	r2, #100	; 0x64
 800b7de:	fb02 f303 	mul.w	r3, r2, r3
 800b7e2:	1acb      	subs	r3, r1, r3
 800b7e4:	011b      	lsls	r3, r3, #4
 800b7e6:	3332      	adds	r3, #50	; 0x32
 800b7e8:	4a33      	ldr	r2, [pc, #204]	; (800b8b8 <UART_SetConfig+0x4e4>)
 800b7ea:	fba2 2303 	umull	r2, r3, r2, r3
 800b7ee:	095b      	lsrs	r3, r3, #5
 800b7f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b7f4:	441c      	add	r4, r3
 800b7f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	673b      	str	r3, [r7, #112]	; 0x70
 800b7fe:	677a      	str	r2, [r7, #116]	; 0x74
 800b800:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b804:	4642      	mov	r2, r8
 800b806:	464b      	mov	r3, r9
 800b808:	1891      	adds	r1, r2, r2
 800b80a:	60b9      	str	r1, [r7, #8]
 800b80c:	415b      	adcs	r3, r3
 800b80e:	60fb      	str	r3, [r7, #12]
 800b810:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b814:	4641      	mov	r1, r8
 800b816:	1851      	adds	r1, r2, r1
 800b818:	6039      	str	r1, [r7, #0]
 800b81a:	4649      	mov	r1, r9
 800b81c:	414b      	adcs	r3, r1
 800b81e:	607b      	str	r3, [r7, #4]
 800b820:	f04f 0200 	mov.w	r2, #0
 800b824:	f04f 0300 	mov.w	r3, #0
 800b828:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b82c:	4659      	mov	r1, fp
 800b82e:	00cb      	lsls	r3, r1, #3
 800b830:	4651      	mov	r1, sl
 800b832:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b836:	4651      	mov	r1, sl
 800b838:	00ca      	lsls	r2, r1, #3
 800b83a:	4610      	mov	r0, r2
 800b83c:	4619      	mov	r1, r3
 800b83e:	4603      	mov	r3, r0
 800b840:	4642      	mov	r2, r8
 800b842:	189b      	adds	r3, r3, r2
 800b844:	66bb      	str	r3, [r7, #104]	; 0x68
 800b846:	464b      	mov	r3, r9
 800b848:	460a      	mov	r2, r1
 800b84a:	eb42 0303 	adc.w	r3, r2, r3
 800b84e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b854:	685b      	ldr	r3, [r3, #4]
 800b856:	2200      	movs	r2, #0
 800b858:	663b      	str	r3, [r7, #96]	; 0x60
 800b85a:	667a      	str	r2, [r7, #100]	; 0x64
 800b85c:	f04f 0200 	mov.w	r2, #0
 800b860:	f04f 0300 	mov.w	r3, #0
 800b864:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b868:	4649      	mov	r1, r9
 800b86a:	008b      	lsls	r3, r1, #2
 800b86c:	4641      	mov	r1, r8
 800b86e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b872:	4641      	mov	r1, r8
 800b874:	008a      	lsls	r2, r1, #2
 800b876:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b87a:	f7f5 fa0f 	bl	8000c9c <__aeabi_uldivmod>
 800b87e:	4602      	mov	r2, r0
 800b880:	460b      	mov	r3, r1
 800b882:	4b0d      	ldr	r3, [pc, #52]	; (800b8b8 <UART_SetConfig+0x4e4>)
 800b884:	fba3 1302 	umull	r1, r3, r3, r2
 800b888:	095b      	lsrs	r3, r3, #5
 800b88a:	2164      	movs	r1, #100	; 0x64
 800b88c:	fb01 f303 	mul.w	r3, r1, r3
 800b890:	1ad3      	subs	r3, r2, r3
 800b892:	011b      	lsls	r3, r3, #4
 800b894:	3332      	adds	r3, #50	; 0x32
 800b896:	4a08      	ldr	r2, [pc, #32]	; (800b8b8 <UART_SetConfig+0x4e4>)
 800b898:	fba2 2303 	umull	r2, r3, r2, r3
 800b89c:	095b      	lsrs	r3, r3, #5
 800b89e:	f003 020f 	and.w	r2, r3, #15
 800b8a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	4422      	add	r2, r4
 800b8aa:	609a      	str	r2, [r3, #8]
}
 800b8ac:	bf00      	nop
 800b8ae:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b8b8:	51eb851f 	.word	0x51eb851f

0800b8bc <__NVIC_SetPriority>:
{
 800b8bc:	b480      	push	{r7}
 800b8be:	b083      	sub	sp, #12
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	6039      	str	r1, [r7, #0]
 800b8c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b8c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	db0a      	blt.n	800b8e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	b2da      	uxtb	r2, r3
 800b8d4:	490c      	ldr	r1, [pc, #48]	; (800b908 <__NVIC_SetPriority+0x4c>)
 800b8d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b8da:	0112      	lsls	r2, r2, #4
 800b8dc:	b2d2      	uxtb	r2, r2
 800b8de:	440b      	add	r3, r1
 800b8e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b8e4:	e00a      	b.n	800b8fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	b2da      	uxtb	r2, r3
 800b8ea:	4908      	ldr	r1, [pc, #32]	; (800b90c <__NVIC_SetPriority+0x50>)
 800b8ec:	79fb      	ldrb	r3, [r7, #7]
 800b8ee:	f003 030f 	and.w	r3, r3, #15
 800b8f2:	3b04      	subs	r3, #4
 800b8f4:	0112      	lsls	r2, r2, #4
 800b8f6:	b2d2      	uxtb	r2, r2
 800b8f8:	440b      	add	r3, r1
 800b8fa:	761a      	strb	r2, [r3, #24]
}
 800b8fc:	bf00      	nop
 800b8fe:	370c      	adds	r7, #12
 800b900:	46bd      	mov	sp, r7
 800b902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b906:	4770      	bx	lr
 800b908:	e000e100 	.word	0xe000e100
 800b90c:	e000ed00 	.word	0xe000ed00

0800b910 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b910:	b580      	push	{r7, lr}
 800b912:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b914:	4b05      	ldr	r3, [pc, #20]	; (800b92c <SysTick_Handler+0x1c>)
 800b916:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b918:	f001 fe38 	bl	800d58c <xTaskGetSchedulerState>
 800b91c:	4603      	mov	r3, r0
 800b91e:	2b01      	cmp	r3, #1
 800b920:	d001      	beq.n	800b926 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b922:	f002 fd21 	bl	800e368 <xPortSysTickHandler>
  }
}
 800b926:	bf00      	nop
 800b928:	bd80      	pop	{r7, pc}
 800b92a:	bf00      	nop
 800b92c:	e000e010 	.word	0xe000e010

0800b930 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b930:	b580      	push	{r7, lr}
 800b932:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b934:	2100      	movs	r1, #0
 800b936:	f06f 0004 	mvn.w	r0, #4
 800b93a:	f7ff ffbf 	bl	800b8bc <__NVIC_SetPriority>
#endif
}
 800b93e:	bf00      	nop
 800b940:	bd80      	pop	{r7, pc}
	...

0800b944 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b944:	b480      	push	{r7}
 800b946:	b083      	sub	sp, #12
 800b948:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b94a:	f3ef 8305 	mrs	r3, IPSR
 800b94e:	603b      	str	r3, [r7, #0]
  return(result);
 800b950:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b952:	2b00      	cmp	r3, #0
 800b954:	d003      	beq.n	800b95e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b956:	f06f 0305 	mvn.w	r3, #5
 800b95a:	607b      	str	r3, [r7, #4]
 800b95c:	e00c      	b.n	800b978 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b95e:	4b0a      	ldr	r3, [pc, #40]	; (800b988 <osKernelInitialize+0x44>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d105      	bne.n	800b972 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b966:	4b08      	ldr	r3, [pc, #32]	; (800b988 <osKernelInitialize+0x44>)
 800b968:	2201      	movs	r2, #1
 800b96a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b96c:	2300      	movs	r3, #0
 800b96e:	607b      	str	r3, [r7, #4]
 800b970:	e002      	b.n	800b978 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b972:	f04f 33ff 	mov.w	r3, #4294967295
 800b976:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b978:	687b      	ldr	r3, [r7, #4]
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	370c      	adds	r7, #12
 800b97e:	46bd      	mov	sp, r7
 800b980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b984:	4770      	bx	lr
 800b986:	bf00      	nop
 800b988:	20004d84 	.word	0x20004d84

0800b98c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b082      	sub	sp, #8
 800b990:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b992:	f3ef 8305 	mrs	r3, IPSR
 800b996:	603b      	str	r3, [r7, #0]
  return(result);
 800b998:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d003      	beq.n	800b9a6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800b99e:	f06f 0305 	mvn.w	r3, #5
 800b9a2:	607b      	str	r3, [r7, #4]
 800b9a4:	e010      	b.n	800b9c8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b9a6:	4b0b      	ldr	r3, [pc, #44]	; (800b9d4 <osKernelStart+0x48>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	2b01      	cmp	r3, #1
 800b9ac:	d109      	bne.n	800b9c2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b9ae:	f7ff ffbf 	bl	800b930 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b9b2:	4b08      	ldr	r3, [pc, #32]	; (800b9d4 <osKernelStart+0x48>)
 800b9b4:	2202      	movs	r2, #2
 800b9b6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b9b8:	f001 f966 	bl	800cc88 <vTaskStartScheduler>
      stat = osOK;
 800b9bc:	2300      	movs	r3, #0
 800b9be:	607b      	str	r3, [r7, #4]
 800b9c0:	e002      	b.n	800b9c8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b9c2:	f04f 33ff 	mov.w	r3, #4294967295
 800b9c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b9c8:	687b      	ldr	r3, [r7, #4]
}
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	3708      	adds	r7, #8
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}
 800b9d2:	bf00      	nop
 800b9d4:	20004d84 	.word	0x20004d84

0800b9d8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b084      	sub	sp, #16
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b9e0:	f3ef 8305 	mrs	r3, IPSR
 800b9e4:	60bb      	str	r3, [r7, #8]
  return(result);
 800b9e6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d003      	beq.n	800b9f4 <osDelay+0x1c>
    stat = osErrorISR;
 800b9ec:	f06f 0305 	mvn.w	r3, #5
 800b9f0:	60fb      	str	r3, [r7, #12]
 800b9f2:	e007      	b.n	800ba04 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d002      	beq.n	800ba04 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f001 f90e 	bl	800cc20 <vTaskDelay>
    }
  }

  return (stat);
 800ba04:	68fb      	ldr	r3, [r7, #12]
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	3710      	adds	r7, #16
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}
	...

0800ba10 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ba10:	b480      	push	{r7}
 800ba12:	b085      	sub	sp, #20
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	60f8      	str	r0, [r7, #12]
 800ba18:	60b9      	str	r1, [r7, #8]
 800ba1a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	4a07      	ldr	r2, [pc, #28]	; (800ba3c <vApplicationGetIdleTaskMemory+0x2c>)
 800ba20:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ba22:	68bb      	ldr	r3, [r7, #8]
 800ba24:	4a06      	ldr	r2, [pc, #24]	; (800ba40 <vApplicationGetIdleTaskMemory+0x30>)
 800ba26:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2280      	movs	r2, #128	; 0x80
 800ba2c:	601a      	str	r2, [r3, #0]
}
 800ba2e:	bf00      	nop
 800ba30:	3714      	adds	r7, #20
 800ba32:	46bd      	mov	sp, r7
 800ba34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba38:	4770      	bx	lr
 800ba3a:	bf00      	nop
 800ba3c:	20004d88 	.word	0x20004d88
 800ba40:	20004e30 	.word	0x20004e30

0800ba44 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ba44:	b480      	push	{r7}
 800ba46:	b085      	sub	sp, #20
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	60f8      	str	r0, [r7, #12]
 800ba4c:	60b9      	str	r1, [r7, #8]
 800ba4e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	4a07      	ldr	r2, [pc, #28]	; (800ba70 <vApplicationGetTimerTaskMemory+0x2c>)
 800ba54:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	4a06      	ldr	r2, [pc, #24]	; (800ba74 <vApplicationGetTimerTaskMemory+0x30>)
 800ba5a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ba62:	601a      	str	r2, [r3, #0]
}
 800ba64:	bf00      	nop
 800ba66:	3714      	adds	r7, #20
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6e:	4770      	bx	lr
 800ba70:	20005030 	.word	0x20005030
 800ba74:	200050d8 	.word	0x200050d8

0800ba78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ba78:	b480      	push	{r7}
 800ba7a:	b083      	sub	sp, #12
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f103 0208 	add.w	r2, r3, #8
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f04f 32ff 	mov.w	r2, #4294967295
 800ba90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f103 0208 	add.w	r2, r3, #8
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f103 0208 	add.w	r2, r3, #8
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2200      	movs	r2, #0
 800baaa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800baac:	bf00      	nop
 800baae:	370c      	adds	r7, #12
 800bab0:	46bd      	mov	sp, r7
 800bab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab6:	4770      	bx	lr

0800bab8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bab8:	b480      	push	{r7}
 800baba:	b083      	sub	sp, #12
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2200      	movs	r2, #0
 800bac4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bac6:	bf00      	nop
 800bac8:	370c      	adds	r7, #12
 800baca:	46bd      	mov	sp, r7
 800bacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad0:	4770      	bx	lr

0800bad2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bad2:	b480      	push	{r7}
 800bad4:	b085      	sub	sp, #20
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	6078      	str	r0, [r7, #4]
 800bada:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	685b      	ldr	r3, [r3, #4]
 800bae0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	68fa      	ldr	r2, [r7, #12]
 800bae6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	689a      	ldr	r2, [r3, #8]
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	689b      	ldr	r3, [r3, #8]
 800baf4:	683a      	ldr	r2, [r7, #0]
 800baf6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	683a      	ldr	r2, [r7, #0]
 800bafc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	687a      	ldr	r2, [r7, #4]
 800bb02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	1c5a      	adds	r2, r3, #1
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	601a      	str	r2, [r3, #0]
}
 800bb0e:	bf00      	nop
 800bb10:	3714      	adds	r7, #20
 800bb12:	46bd      	mov	sp, r7
 800bb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb18:	4770      	bx	lr

0800bb1a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bb1a:	b480      	push	{r7}
 800bb1c:	b085      	sub	sp, #20
 800bb1e:	af00      	add	r7, sp, #0
 800bb20:	6078      	str	r0, [r7, #4]
 800bb22:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb30:	d103      	bne.n	800bb3a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	691b      	ldr	r3, [r3, #16]
 800bb36:	60fb      	str	r3, [r7, #12]
 800bb38:	e00c      	b.n	800bb54 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	3308      	adds	r3, #8
 800bb3e:	60fb      	str	r3, [r7, #12]
 800bb40:	e002      	b.n	800bb48 <vListInsert+0x2e>
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	685b      	ldr	r3, [r3, #4]
 800bb46:	60fb      	str	r3, [r7, #12]
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	685b      	ldr	r3, [r3, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	68ba      	ldr	r2, [r7, #8]
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d2f6      	bcs.n	800bb42 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	685a      	ldr	r2, [r3, #4]
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	685b      	ldr	r3, [r3, #4]
 800bb60:	683a      	ldr	r2, [r7, #0]
 800bb62:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	68fa      	ldr	r2, [r7, #12]
 800bb68:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	683a      	ldr	r2, [r7, #0]
 800bb6e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	687a      	ldr	r2, [r7, #4]
 800bb74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	1c5a      	adds	r2, r3, #1
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	601a      	str	r2, [r3, #0]
}
 800bb80:	bf00      	nop
 800bb82:	3714      	adds	r7, #20
 800bb84:	46bd      	mov	sp, r7
 800bb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8a:	4770      	bx	lr

0800bb8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bb8c:	b480      	push	{r7}
 800bb8e:	b085      	sub	sp, #20
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	691b      	ldr	r3, [r3, #16]
 800bb98:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	685b      	ldr	r3, [r3, #4]
 800bb9e:	687a      	ldr	r2, [r7, #4]
 800bba0:	6892      	ldr	r2, [r2, #8]
 800bba2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	689b      	ldr	r3, [r3, #8]
 800bba8:	687a      	ldr	r2, [r7, #4]
 800bbaa:	6852      	ldr	r2, [r2, #4]
 800bbac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	685b      	ldr	r3, [r3, #4]
 800bbb2:	687a      	ldr	r2, [r7, #4]
 800bbb4:	429a      	cmp	r2, r3
 800bbb6:	d103      	bne.n	800bbc0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	689a      	ldr	r2, [r3, #8]
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	1e5a      	subs	r2, r3, #1
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	681b      	ldr	r3, [r3, #0]
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	3714      	adds	r7, #20
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbde:	4770      	bx	lr

0800bbe0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b084      	sub	sp, #16
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
 800bbe8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d10a      	bne.n	800bc0a <xQueueGenericReset+0x2a>
	__asm volatile
 800bbf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf8:	f383 8811 	msr	BASEPRI, r3
 800bbfc:	f3bf 8f6f 	isb	sy
 800bc00:	f3bf 8f4f 	dsb	sy
 800bc04:	60bb      	str	r3, [r7, #8]
}
 800bc06:	bf00      	nop
 800bc08:	e7fe      	b.n	800bc08 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bc0a:	f002 fb1b 	bl	800e244 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	681a      	ldr	r2, [r3, #0]
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc16:	68f9      	ldr	r1, [r7, #12]
 800bc18:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bc1a:	fb01 f303 	mul.w	r3, r1, r3
 800bc1e:	441a      	add	r2, r3
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	2200      	movs	r2, #0
 800bc28:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	681a      	ldr	r2, [r3, #0]
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	681a      	ldr	r2, [r3, #0]
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc3a:	3b01      	subs	r3, #1
 800bc3c:	68f9      	ldr	r1, [r7, #12]
 800bc3e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bc40:	fb01 f303 	mul.w	r3, r1, r3
 800bc44:	441a      	add	r2, r3
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	22ff      	movs	r2, #255	; 0xff
 800bc4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	22ff      	movs	r2, #255	; 0xff
 800bc56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d114      	bne.n	800bc8a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	691b      	ldr	r3, [r3, #16]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d01a      	beq.n	800bc9e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	3310      	adds	r3, #16
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	f001 faa5 	bl	800d1bc <xTaskRemoveFromEventList>
 800bc72:	4603      	mov	r3, r0
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d012      	beq.n	800bc9e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bc78:	4b0c      	ldr	r3, [pc, #48]	; (800bcac <xQueueGenericReset+0xcc>)
 800bc7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc7e:	601a      	str	r2, [r3, #0]
 800bc80:	f3bf 8f4f 	dsb	sy
 800bc84:	f3bf 8f6f 	isb	sy
 800bc88:	e009      	b.n	800bc9e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	3310      	adds	r3, #16
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f7ff fef2 	bl	800ba78 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	3324      	adds	r3, #36	; 0x24
 800bc98:	4618      	mov	r0, r3
 800bc9a:	f7ff feed 	bl	800ba78 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bc9e:	f002 fb01 	bl	800e2a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bca2:	2301      	movs	r3, #1
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	3710      	adds	r7, #16
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}
 800bcac:	e000ed04 	.word	0xe000ed04

0800bcb0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b08e      	sub	sp, #56	; 0x38
 800bcb4:	af02      	add	r7, sp, #8
 800bcb6:	60f8      	str	r0, [r7, #12]
 800bcb8:	60b9      	str	r1, [r7, #8]
 800bcba:	607a      	str	r2, [r7, #4]
 800bcbc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d10a      	bne.n	800bcda <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bcc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc8:	f383 8811 	msr	BASEPRI, r3
 800bccc:	f3bf 8f6f 	isb	sy
 800bcd0:	f3bf 8f4f 	dsb	sy
 800bcd4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bcd6:	bf00      	nop
 800bcd8:	e7fe      	b.n	800bcd8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d10a      	bne.n	800bcf6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce4:	f383 8811 	msr	BASEPRI, r3
 800bce8:	f3bf 8f6f 	isb	sy
 800bcec:	f3bf 8f4f 	dsb	sy
 800bcf0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bcf2:	bf00      	nop
 800bcf4:	e7fe      	b.n	800bcf4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d002      	beq.n	800bd02 <xQueueGenericCreateStatic+0x52>
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d001      	beq.n	800bd06 <xQueueGenericCreateStatic+0x56>
 800bd02:	2301      	movs	r3, #1
 800bd04:	e000      	b.n	800bd08 <xQueueGenericCreateStatic+0x58>
 800bd06:	2300      	movs	r3, #0
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d10a      	bne.n	800bd22 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bd0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd10:	f383 8811 	msr	BASEPRI, r3
 800bd14:	f3bf 8f6f 	isb	sy
 800bd18:	f3bf 8f4f 	dsb	sy
 800bd1c:	623b      	str	r3, [r7, #32]
}
 800bd1e:	bf00      	nop
 800bd20:	e7fe      	b.n	800bd20 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d102      	bne.n	800bd2e <xQueueGenericCreateStatic+0x7e>
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d101      	bne.n	800bd32 <xQueueGenericCreateStatic+0x82>
 800bd2e:	2301      	movs	r3, #1
 800bd30:	e000      	b.n	800bd34 <xQueueGenericCreateStatic+0x84>
 800bd32:	2300      	movs	r3, #0
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d10a      	bne.n	800bd4e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bd38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd3c:	f383 8811 	msr	BASEPRI, r3
 800bd40:	f3bf 8f6f 	isb	sy
 800bd44:	f3bf 8f4f 	dsb	sy
 800bd48:	61fb      	str	r3, [r7, #28]
}
 800bd4a:	bf00      	nop
 800bd4c:	e7fe      	b.n	800bd4c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bd4e:	2350      	movs	r3, #80	; 0x50
 800bd50:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	2b50      	cmp	r3, #80	; 0x50
 800bd56:	d00a      	beq.n	800bd6e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bd58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd5c:	f383 8811 	msr	BASEPRI, r3
 800bd60:	f3bf 8f6f 	isb	sy
 800bd64:	f3bf 8f4f 	dsb	sy
 800bd68:	61bb      	str	r3, [r7, #24]
}
 800bd6a:	bf00      	nop
 800bd6c:	e7fe      	b.n	800bd6c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bd6e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bd74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d00d      	beq.n	800bd96 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bd7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd7c:	2201      	movs	r2, #1
 800bd7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bd82:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bd86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd88:	9300      	str	r3, [sp, #0]
 800bd8a:	4613      	mov	r3, r2
 800bd8c:	687a      	ldr	r2, [r7, #4]
 800bd8e:	68b9      	ldr	r1, [r7, #8]
 800bd90:	68f8      	ldr	r0, [r7, #12]
 800bd92:	f000 f83f 	bl	800be14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bd96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bd98:	4618      	mov	r0, r3
 800bd9a:	3730      	adds	r7, #48	; 0x30
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}

0800bda0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b08a      	sub	sp, #40	; 0x28
 800bda4:	af02      	add	r7, sp, #8
 800bda6:	60f8      	str	r0, [r7, #12]
 800bda8:	60b9      	str	r1, [r7, #8]
 800bdaa:	4613      	mov	r3, r2
 800bdac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d10a      	bne.n	800bdca <xQueueGenericCreate+0x2a>
	__asm volatile
 800bdb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb8:	f383 8811 	msr	BASEPRI, r3
 800bdbc:	f3bf 8f6f 	isb	sy
 800bdc0:	f3bf 8f4f 	dsb	sy
 800bdc4:	613b      	str	r3, [r7, #16]
}
 800bdc6:	bf00      	nop
 800bdc8:	e7fe      	b.n	800bdc8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	68ba      	ldr	r2, [r7, #8]
 800bdce:	fb02 f303 	mul.w	r3, r2, r3
 800bdd2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bdd4:	69fb      	ldr	r3, [r7, #28]
 800bdd6:	3350      	adds	r3, #80	; 0x50
 800bdd8:	4618      	mov	r0, r3
 800bdda:	f002 fb55 	bl	800e488 <pvPortMalloc>
 800bdde:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bde0:	69bb      	ldr	r3, [r7, #24]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d011      	beq.n	800be0a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bde6:	69bb      	ldr	r3, [r7, #24]
 800bde8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	3350      	adds	r3, #80	; 0x50
 800bdee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bdf0:	69bb      	ldr	r3, [r7, #24]
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bdf8:	79fa      	ldrb	r2, [r7, #7]
 800bdfa:	69bb      	ldr	r3, [r7, #24]
 800bdfc:	9300      	str	r3, [sp, #0]
 800bdfe:	4613      	mov	r3, r2
 800be00:	697a      	ldr	r2, [r7, #20]
 800be02:	68b9      	ldr	r1, [r7, #8]
 800be04:	68f8      	ldr	r0, [r7, #12]
 800be06:	f000 f805 	bl	800be14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800be0a:	69bb      	ldr	r3, [r7, #24]
	}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3720      	adds	r7, #32
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}

0800be14 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b084      	sub	sp, #16
 800be18:	af00      	add	r7, sp, #0
 800be1a:	60f8      	str	r0, [r7, #12]
 800be1c:	60b9      	str	r1, [r7, #8]
 800be1e:	607a      	str	r2, [r7, #4]
 800be20:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d103      	bne.n	800be30 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800be28:	69bb      	ldr	r3, [r7, #24]
 800be2a:	69ba      	ldr	r2, [r7, #24]
 800be2c:	601a      	str	r2, [r3, #0]
 800be2e:	e002      	b.n	800be36 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800be30:	69bb      	ldr	r3, [r7, #24]
 800be32:	687a      	ldr	r2, [r7, #4]
 800be34:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800be36:	69bb      	ldr	r3, [r7, #24]
 800be38:	68fa      	ldr	r2, [r7, #12]
 800be3a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800be3c:	69bb      	ldr	r3, [r7, #24]
 800be3e:	68ba      	ldr	r2, [r7, #8]
 800be40:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800be42:	2101      	movs	r1, #1
 800be44:	69b8      	ldr	r0, [r7, #24]
 800be46:	f7ff fecb 	bl	800bbe0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800be4a:	69bb      	ldr	r3, [r7, #24]
 800be4c:	78fa      	ldrb	r2, [r7, #3]
 800be4e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800be52:	bf00      	nop
 800be54:	3710      	adds	r7, #16
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}
	...

0800be5c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b08e      	sub	sp, #56	; 0x38
 800be60:	af00      	add	r7, sp, #0
 800be62:	60f8      	str	r0, [r7, #12]
 800be64:	60b9      	str	r1, [r7, #8]
 800be66:	607a      	str	r2, [r7, #4]
 800be68:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800be6a:	2300      	movs	r3, #0
 800be6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800be72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be74:	2b00      	cmp	r3, #0
 800be76:	d10a      	bne.n	800be8e <xQueueGenericSend+0x32>
	__asm volatile
 800be78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be7c:	f383 8811 	msr	BASEPRI, r3
 800be80:	f3bf 8f6f 	isb	sy
 800be84:	f3bf 8f4f 	dsb	sy
 800be88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800be8a:	bf00      	nop
 800be8c:	e7fe      	b.n	800be8c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d103      	bne.n	800be9c <xQueueGenericSend+0x40>
 800be94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d101      	bne.n	800bea0 <xQueueGenericSend+0x44>
 800be9c:	2301      	movs	r3, #1
 800be9e:	e000      	b.n	800bea2 <xQueueGenericSend+0x46>
 800bea0:	2300      	movs	r3, #0
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d10a      	bne.n	800bebc <xQueueGenericSend+0x60>
	__asm volatile
 800bea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beaa:	f383 8811 	msr	BASEPRI, r3
 800beae:	f3bf 8f6f 	isb	sy
 800beb2:	f3bf 8f4f 	dsb	sy
 800beb6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800beb8:	bf00      	nop
 800beba:	e7fe      	b.n	800beba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	2b02      	cmp	r3, #2
 800bec0:	d103      	bne.n	800beca <xQueueGenericSend+0x6e>
 800bec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bec6:	2b01      	cmp	r3, #1
 800bec8:	d101      	bne.n	800bece <xQueueGenericSend+0x72>
 800beca:	2301      	movs	r3, #1
 800becc:	e000      	b.n	800bed0 <xQueueGenericSend+0x74>
 800bece:	2300      	movs	r3, #0
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d10a      	bne.n	800beea <xQueueGenericSend+0x8e>
	__asm volatile
 800bed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bed8:	f383 8811 	msr	BASEPRI, r3
 800bedc:	f3bf 8f6f 	isb	sy
 800bee0:	f3bf 8f4f 	dsb	sy
 800bee4:	623b      	str	r3, [r7, #32]
}
 800bee6:	bf00      	nop
 800bee8:	e7fe      	b.n	800bee8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800beea:	f001 fb4f 	bl	800d58c <xTaskGetSchedulerState>
 800beee:	4603      	mov	r3, r0
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d102      	bne.n	800befa <xQueueGenericSend+0x9e>
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d101      	bne.n	800befe <xQueueGenericSend+0xa2>
 800befa:	2301      	movs	r3, #1
 800befc:	e000      	b.n	800bf00 <xQueueGenericSend+0xa4>
 800befe:	2300      	movs	r3, #0
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d10a      	bne.n	800bf1a <xQueueGenericSend+0xbe>
	__asm volatile
 800bf04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf08:	f383 8811 	msr	BASEPRI, r3
 800bf0c:	f3bf 8f6f 	isb	sy
 800bf10:	f3bf 8f4f 	dsb	sy
 800bf14:	61fb      	str	r3, [r7, #28]
}
 800bf16:	bf00      	nop
 800bf18:	e7fe      	b.n	800bf18 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bf1a:	f002 f993 	bl	800e244 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bf1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf26:	429a      	cmp	r2, r3
 800bf28:	d302      	bcc.n	800bf30 <xQueueGenericSend+0xd4>
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	2b02      	cmp	r3, #2
 800bf2e:	d129      	bne.n	800bf84 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bf30:	683a      	ldr	r2, [r7, #0]
 800bf32:	68b9      	ldr	r1, [r7, #8]
 800bf34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf36:	f000 fb4d 	bl	800c5d4 <prvCopyDataToQueue>
 800bf3a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bf3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d010      	beq.n	800bf66 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bf44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf46:	3324      	adds	r3, #36	; 0x24
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f001 f937 	bl	800d1bc <xTaskRemoveFromEventList>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d013      	beq.n	800bf7c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bf54:	4b3f      	ldr	r3, [pc, #252]	; (800c054 <xQueueGenericSend+0x1f8>)
 800bf56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf5a:	601a      	str	r2, [r3, #0]
 800bf5c:	f3bf 8f4f 	dsb	sy
 800bf60:	f3bf 8f6f 	isb	sy
 800bf64:	e00a      	b.n	800bf7c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bf66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d007      	beq.n	800bf7c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bf6c:	4b39      	ldr	r3, [pc, #228]	; (800c054 <xQueueGenericSend+0x1f8>)
 800bf6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf72:	601a      	str	r2, [r3, #0]
 800bf74:	f3bf 8f4f 	dsb	sy
 800bf78:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bf7c:	f002 f992 	bl	800e2a4 <vPortExitCritical>
				return pdPASS;
 800bf80:	2301      	movs	r3, #1
 800bf82:	e063      	b.n	800c04c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d103      	bne.n	800bf92 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bf8a:	f002 f98b 	bl	800e2a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	e05c      	b.n	800c04c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bf92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d106      	bne.n	800bfa6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bf98:	f107 0314 	add.w	r3, r7, #20
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	f001 f997 	bl	800d2d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bfa6:	f002 f97d 	bl	800e2a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bfaa:	f000 fedd 	bl	800cd68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bfae:	f002 f949 	bl	800e244 <vPortEnterCritical>
 800bfb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bfb8:	b25b      	sxtb	r3, r3
 800bfba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfbe:	d103      	bne.n	800bfc8 <xQueueGenericSend+0x16c>
 800bfc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bfc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bfce:	b25b      	sxtb	r3, r3
 800bfd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfd4:	d103      	bne.n	800bfde <xQueueGenericSend+0x182>
 800bfd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd8:	2200      	movs	r2, #0
 800bfda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bfde:	f002 f961 	bl	800e2a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bfe2:	1d3a      	adds	r2, r7, #4
 800bfe4:	f107 0314 	add.w	r3, r7, #20
 800bfe8:	4611      	mov	r1, r2
 800bfea:	4618      	mov	r0, r3
 800bfec:	f001 f986 	bl	800d2fc <xTaskCheckForTimeOut>
 800bff0:	4603      	mov	r3, r0
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d124      	bne.n	800c040 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bff6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bff8:	f000 fbe4 	bl	800c7c4 <prvIsQueueFull>
 800bffc:	4603      	mov	r3, r0
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d018      	beq.n	800c034 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c004:	3310      	adds	r3, #16
 800c006:	687a      	ldr	r2, [r7, #4]
 800c008:	4611      	mov	r1, r2
 800c00a:	4618      	mov	r0, r3
 800c00c:	f001 f886 	bl	800d11c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c010:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c012:	f000 fb6f 	bl	800c6f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c016:	f000 feb5 	bl	800cd84 <xTaskResumeAll>
 800c01a:	4603      	mov	r3, r0
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	f47f af7c 	bne.w	800bf1a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c022:	4b0c      	ldr	r3, [pc, #48]	; (800c054 <xQueueGenericSend+0x1f8>)
 800c024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c028:	601a      	str	r2, [r3, #0]
 800c02a:	f3bf 8f4f 	dsb	sy
 800c02e:	f3bf 8f6f 	isb	sy
 800c032:	e772      	b.n	800bf1a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c034:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c036:	f000 fb5d 	bl	800c6f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c03a:	f000 fea3 	bl	800cd84 <xTaskResumeAll>
 800c03e:	e76c      	b.n	800bf1a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c040:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c042:	f000 fb57 	bl	800c6f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c046:	f000 fe9d 	bl	800cd84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c04a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	3738      	adds	r7, #56	; 0x38
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}
 800c054:	e000ed04 	.word	0xe000ed04

0800c058 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b090      	sub	sp, #64	; 0x40
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	60f8      	str	r0, [r7, #12]
 800c060:	60b9      	str	r1, [r7, #8]
 800c062:	607a      	str	r2, [r7, #4]
 800c064:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c06a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d10a      	bne.n	800c086 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c074:	f383 8811 	msr	BASEPRI, r3
 800c078:	f3bf 8f6f 	isb	sy
 800c07c:	f3bf 8f4f 	dsb	sy
 800c080:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c082:	bf00      	nop
 800c084:	e7fe      	b.n	800c084 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c086:	68bb      	ldr	r3, [r7, #8]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d103      	bne.n	800c094 <xQueueGenericSendFromISR+0x3c>
 800c08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c08e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c090:	2b00      	cmp	r3, #0
 800c092:	d101      	bne.n	800c098 <xQueueGenericSendFromISR+0x40>
 800c094:	2301      	movs	r3, #1
 800c096:	e000      	b.n	800c09a <xQueueGenericSendFromISR+0x42>
 800c098:	2300      	movs	r3, #0
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d10a      	bne.n	800c0b4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a2:	f383 8811 	msr	BASEPRI, r3
 800c0a6:	f3bf 8f6f 	isb	sy
 800c0aa:	f3bf 8f4f 	dsb	sy
 800c0ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c0b0:	bf00      	nop
 800c0b2:	e7fe      	b.n	800c0b2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	2b02      	cmp	r3, #2
 800c0b8:	d103      	bne.n	800c0c2 <xQueueGenericSendFromISR+0x6a>
 800c0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0be:	2b01      	cmp	r3, #1
 800c0c0:	d101      	bne.n	800c0c6 <xQueueGenericSendFromISR+0x6e>
 800c0c2:	2301      	movs	r3, #1
 800c0c4:	e000      	b.n	800c0c8 <xQueueGenericSendFromISR+0x70>
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d10a      	bne.n	800c0e2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d0:	f383 8811 	msr	BASEPRI, r3
 800c0d4:	f3bf 8f6f 	isb	sy
 800c0d8:	f3bf 8f4f 	dsb	sy
 800c0dc:	623b      	str	r3, [r7, #32]
}
 800c0de:	bf00      	nop
 800c0e0:	e7fe      	b.n	800c0e0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c0e2:	f002 f991 	bl	800e408 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c0e6:	f3ef 8211 	mrs	r2, BASEPRI
 800c0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ee:	f383 8811 	msr	BASEPRI, r3
 800c0f2:	f3bf 8f6f 	isb	sy
 800c0f6:	f3bf 8f4f 	dsb	sy
 800c0fa:	61fa      	str	r2, [r7, #28]
 800c0fc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c0fe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c100:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c104:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c10a:	429a      	cmp	r2, r3
 800c10c:	d302      	bcc.n	800c114 <xQueueGenericSendFromISR+0xbc>
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	2b02      	cmp	r3, #2
 800c112:	d12f      	bne.n	800c174 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c116:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c11a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c11e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c122:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c124:	683a      	ldr	r2, [r7, #0]
 800c126:	68b9      	ldr	r1, [r7, #8]
 800c128:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c12a:	f000 fa53 	bl	800c5d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c12e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c132:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c136:	d112      	bne.n	800c15e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c13a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d016      	beq.n	800c16e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c142:	3324      	adds	r3, #36	; 0x24
 800c144:	4618      	mov	r0, r3
 800c146:	f001 f839 	bl	800d1bc <xTaskRemoveFromEventList>
 800c14a:	4603      	mov	r3, r0
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d00e      	beq.n	800c16e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d00b      	beq.n	800c16e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2201      	movs	r2, #1
 800c15a:	601a      	str	r2, [r3, #0]
 800c15c:	e007      	b.n	800c16e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c15e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c162:	3301      	adds	r3, #1
 800c164:	b2db      	uxtb	r3, r3
 800c166:	b25a      	sxtb	r2, r3
 800c168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c16a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c16e:	2301      	movs	r3, #1
 800c170:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c172:	e001      	b.n	800c178 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c174:	2300      	movs	r3, #0
 800c176:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c17a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c17c:	697b      	ldr	r3, [r7, #20]
 800c17e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c182:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c186:	4618      	mov	r0, r3
 800c188:	3740      	adds	r7, #64	; 0x40
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}
	...

0800c190 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b08c      	sub	sp, #48	; 0x30
 800c194:	af00      	add	r7, sp, #0
 800c196:	60f8      	str	r0, [r7, #12]
 800c198:	60b9      	str	r1, [r7, #8]
 800c19a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c19c:	2300      	movs	r3, #0
 800c19e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d10a      	bne.n	800c1c0 <xQueueReceive+0x30>
	__asm volatile
 800c1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ae:	f383 8811 	msr	BASEPRI, r3
 800c1b2:	f3bf 8f6f 	isb	sy
 800c1b6:	f3bf 8f4f 	dsb	sy
 800c1ba:	623b      	str	r3, [r7, #32]
}
 800c1bc:	bf00      	nop
 800c1be:	e7fe      	b.n	800c1be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c1c0:	68bb      	ldr	r3, [r7, #8]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d103      	bne.n	800c1ce <xQueueReceive+0x3e>
 800c1c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d101      	bne.n	800c1d2 <xQueueReceive+0x42>
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	e000      	b.n	800c1d4 <xQueueReceive+0x44>
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d10a      	bne.n	800c1ee <xQueueReceive+0x5e>
	__asm volatile
 800c1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1dc:	f383 8811 	msr	BASEPRI, r3
 800c1e0:	f3bf 8f6f 	isb	sy
 800c1e4:	f3bf 8f4f 	dsb	sy
 800c1e8:	61fb      	str	r3, [r7, #28]
}
 800c1ea:	bf00      	nop
 800c1ec:	e7fe      	b.n	800c1ec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c1ee:	f001 f9cd 	bl	800d58c <xTaskGetSchedulerState>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d102      	bne.n	800c1fe <xQueueReceive+0x6e>
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d101      	bne.n	800c202 <xQueueReceive+0x72>
 800c1fe:	2301      	movs	r3, #1
 800c200:	e000      	b.n	800c204 <xQueueReceive+0x74>
 800c202:	2300      	movs	r3, #0
 800c204:	2b00      	cmp	r3, #0
 800c206:	d10a      	bne.n	800c21e <xQueueReceive+0x8e>
	__asm volatile
 800c208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c20c:	f383 8811 	msr	BASEPRI, r3
 800c210:	f3bf 8f6f 	isb	sy
 800c214:	f3bf 8f4f 	dsb	sy
 800c218:	61bb      	str	r3, [r7, #24]
}
 800c21a:	bf00      	nop
 800c21c:	e7fe      	b.n	800c21c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c21e:	f002 f811 	bl	800e244 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c226:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d01f      	beq.n	800c26e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c22e:	68b9      	ldr	r1, [r7, #8]
 800c230:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c232:	f000 fa39 	bl	800c6a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c238:	1e5a      	subs	r2, r3, #1
 800c23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c23c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c240:	691b      	ldr	r3, [r3, #16]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d00f      	beq.n	800c266 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c248:	3310      	adds	r3, #16
 800c24a:	4618      	mov	r0, r3
 800c24c:	f000 ffb6 	bl	800d1bc <xTaskRemoveFromEventList>
 800c250:	4603      	mov	r3, r0
 800c252:	2b00      	cmp	r3, #0
 800c254:	d007      	beq.n	800c266 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c256:	4b3d      	ldr	r3, [pc, #244]	; (800c34c <xQueueReceive+0x1bc>)
 800c258:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c25c:	601a      	str	r2, [r3, #0]
 800c25e:	f3bf 8f4f 	dsb	sy
 800c262:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c266:	f002 f81d 	bl	800e2a4 <vPortExitCritical>
				return pdPASS;
 800c26a:	2301      	movs	r3, #1
 800c26c:	e069      	b.n	800c342 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d103      	bne.n	800c27c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c274:	f002 f816 	bl	800e2a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c278:	2300      	movs	r3, #0
 800c27a:	e062      	b.n	800c342 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d106      	bne.n	800c290 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c282:	f107 0310 	add.w	r3, r7, #16
 800c286:	4618      	mov	r0, r3
 800c288:	f001 f822 	bl	800d2d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c28c:	2301      	movs	r3, #1
 800c28e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c290:	f002 f808 	bl	800e2a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c294:	f000 fd68 	bl	800cd68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c298:	f001 ffd4 	bl	800e244 <vPortEnterCritical>
 800c29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c29e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c2a2:	b25b      	sxtb	r3, r3
 800c2a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2a8:	d103      	bne.n	800c2b2 <xQueueReceive+0x122>
 800c2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c2b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c2b8:	b25b      	sxtb	r3, r3
 800c2ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2be:	d103      	bne.n	800c2c8 <xQueueReceive+0x138>
 800c2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c2c8:	f001 ffec 	bl	800e2a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c2cc:	1d3a      	adds	r2, r7, #4
 800c2ce:	f107 0310 	add.w	r3, r7, #16
 800c2d2:	4611      	mov	r1, r2
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	f001 f811 	bl	800d2fc <xTaskCheckForTimeOut>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d123      	bne.n	800c328 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c2e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2e2:	f000 fa59 	bl	800c798 <prvIsQueueEmpty>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d017      	beq.n	800c31c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ee:	3324      	adds	r3, #36	; 0x24
 800c2f0:	687a      	ldr	r2, [r7, #4]
 800c2f2:	4611      	mov	r1, r2
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	f000 ff11 	bl	800d11c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c2fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2fc:	f000 f9fa 	bl	800c6f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c300:	f000 fd40 	bl	800cd84 <xTaskResumeAll>
 800c304:	4603      	mov	r3, r0
 800c306:	2b00      	cmp	r3, #0
 800c308:	d189      	bne.n	800c21e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c30a:	4b10      	ldr	r3, [pc, #64]	; (800c34c <xQueueReceive+0x1bc>)
 800c30c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c310:	601a      	str	r2, [r3, #0]
 800c312:	f3bf 8f4f 	dsb	sy
 800c316:	f3bf 8f6f 	isb	sy
 800c31a:	e780      	b.n	800c21e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c31c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c31e:	f000 f9e9 	bl	800c6f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c322:	f000 fd2f 	bl	800cd84 <xTaskResumeAll>
 800c326:	e77a      	b.n	800c21e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c328:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c32a:	f000 f9e3 	bl	800c6f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c32e:	f000 fd29 	bl	800cd84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c332:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c334:	f000 fa30 	bl	800c798 <prvIsQueueEmpty>
 800c338:	4603      	mov	r3, r0
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	f43f af6f 	beq.w	800c21e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c340:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c342:	4618      	mov	r0, r3
 800c344:	3730      	adds	r7, #48	; 0x30
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}
 800c34a:	bf00      	nop
 800c34c:	e000ed04 	.word	0xe000ed04

0800c350 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b08e      	sub	sp, #56	; 0x38
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
 800c358:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c35a:	2300      	movs	r3, #0
 800c35c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c362:	2300      	movs	r3, #0
 800c364:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d10a      	bne.n	800c382 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c36c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c370:	f383 8811 	msr	BASEPRI, r3
 800c374:	f3bf 8f6f 	isb	sy
 800c378:	f3bf 8f4f 	dsb	sy
 800c37c:	623b      	str	r3, [r7, #32]
}
 800c37e:	bf00      	nop
 800c380:	e7fe      	b.n	800c380 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c386:	2b00      	cmp	r3, #0
 800c388:	d00a      	beq.n	800c3a0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c38a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c38e:	f383 8811 	msr	BASEPRI, r3
 800c392:	f3bf 8f6f 	isb	sy
 800c396:	f3bf 8f4f 	dsb	sy
 800c39a:	61fb      	str	r3, [r7, #28]
}
 800c39c:	bf00      	nop
 800c39e:	e7fe      	b.n	800c39e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c3a0:	f001 f8f4 	bl	800d58c <xTaskGetSchedulerState>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d102      	bne.n	800c3b0 <xQueueSemaphoreTake+0x60>
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d101      	bne.n	800c3b4 <xQueueSemaphoreTake+0x64>
 800c3b0:	2301      	movs	r3, #1
 800c3b2:	e000      	b.n	800c3b6 <xQueueSemaphoreTake+0x66>
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d10a      	bne.n	800c3d0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3be:	f383 8811 	msr	BASEPRI, r3
 800c3c2:	f3bf 8f6f 	isb	sy
 800c3c6:	f3bf 8f4f 	dsb	sy
 800c3ca:	61bb      	str	r3, [r7, #24]
}
 800c3cc:	bf00      	nop
 800c3ce:	e7fe      	b.n	800c3ce <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c3d0:	f001 ff38 	bl	800e244 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3d8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d024      	beq.n	800c42a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c3e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3e2:	1e5a      	subs	r2, r3, #1
 800c3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3e6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d104      	bne.n	800c3fa <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c3f0:	f001 fa42 	bl	800d878 <pvTaskIncrementMutexHeldCount>
 800c3f4:	4602      	mov	r2, r0
 800c3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3f8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3fc:	691b      	ldr	r3, [r3, #16]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d00f      	beq.n	800c422 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c404:	3310      	adds	r3, #16
 800c406:	4618      	mov	r0, r3
 800c408:	f000 fed8 	bl	800d1bc <xTaskRemoveFromEventList>
 800c40c:	4603      	mov	r3, r0
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d007      	beq.n	800c422 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c412:	4b54      	ldr	r3, [pc, #336]	; (800c564 <xQueueSemaphoreTake+0x214>)
 800c414:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c418:	601a      	str	r2, [r3, #0]
 800c41a:	f3bf 8f4f 	dsb	sy
 800c41e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c422:	f001 ff3f 	bl	800e2a4 <vPortExitCritical>
				return pdPASS;
 800c426:	2301      	movs	r3, #1
 800c428:	e097      	b.n	800c55a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d111      	bne.n	800c454 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c432:	2b00      	cmp	r3, #0
 800c434:	d00a      	beq.n	800c44c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c43a:	f383 8811 	msr	BASEPRI, r3
 800c43e:	f3bf 8f6f 	isb	sy
 800c442:	f3bf 8f4f 	dsb	sy
 800c446:	617b      	str	r3, [r7, #20]
}
 800c448:	bf00      	nop
 800c44a:	e7fe      	b.n	800c44a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c44c:	f001 ff2a 	bl	800e2a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c450:	2300      	movs	r3, #0
 800c452:	e082      	b.n	800c55a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c456:	2b00      	cmp	r3, #0
 800c458:	d106      	bne.n	800c468 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c45a:	f107 030c 	add.w	r3, r7, #12
 800c45e:	4618      	mov	r0, r3
 800c460:	f000 ff36 	bl	800d2d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c464:	2301      	movs	r3, #1
 800c466:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c468:	f001 ff1c 	bl	800e2a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c46c:	f000 fc7c 	bl	800cd68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c470:	f001 fee8 	bl	800e244 <vPortEnterCritical>
 800c474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c476:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c47a:	b25b      	sxtb	r3, r3
 800c47c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c480:	d103      	bne.n	800c48a <xQueueSemaphoreTake+0x13a>
 800c482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c484:	2200      	movs	r2, #0
 800c486:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c48a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c48c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c490:	b25b      	sxtb	r3, r3
 800c492:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c496:	d103      	bne.n	800c4a0 <xQueueSemaphoreTake+0x150>
 800c498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c49a:	2200      	movs	r2, #0
 800c49c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c4a0:	f001 ff00 	bl	800e2a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c4a4:	463a      	mov	r2, r7
 800c4a6:	f107 030c 	add.w	r3, r7, #12
 800c4aa:	4611      	mov	r1, r2
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	f000 ff25 	bl	800d2fc <xTaskCheckForTimeOut>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d132      	bne.n	800c51e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c4b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4ba:	f000 f96d 	bl	800c798 <prvIsQueueEmpty>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d026      	beq.n	800c512 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d109      	bne.n	800c4e0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c4cc:	f001 feba 	bl	800e244 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4d2:	689b      	ldr	r3, [r3, #8]
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	f001 f877 	bl	800d5c8 <xTaskPriorityInherit>
 800c4da:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c4dc:	f001 fee2 	bl	800e2a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4e2:	3324      	adds	r3, #36	; 0x24
 800c4e4:	683a      	ldr	r2, [r7, #0]
 800c4e6:	4611      	mov	r1, r2
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	f000 fe17 	bl	800d11c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c4ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4f0:	f000 f900 	bl	800c6f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c4f4:	f000 fc46 	bl	800cd84 <xTaskResumeAll>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	f47f af68 	bne.w	800c3d0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c500:	4b18      	ldr	r3, [pc, #96]	; (800c564 <xQueueSemaphoreTake+0x214>)
 800c502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c506:	601a      	str	r2, [r3, #0]
 800c508:	f3bf 8f4f 	dsb	sy
 800c50c:	f3bf 8f6f 	isb	sy
 800c510:	e75e      	b.n	800c3d0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c512:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c514:	f000 f8ee 	bl	800c6f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c518:	f000 fc34 	bl	800cd84 <xTaskResumeAll>
 800c51c:	e758      	b.n	800c3d0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c51e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c520:	f000 f8e8 	bl	800c6f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c524:	f000 fc2e 	bl	800cd84 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c528:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c52a:	f000 f935 	bl	800c798 <prvIsQueueEmpty>
 800c52e:	4603      	mov	r3, r0
 800c530:	2b00      	cmp	r3, #0
 800c532:	f43f af4d 	beq.w	800c3d0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d00d      	beq.n	800c558 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c53c:	f001 fe82 	bl	800e244 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c540:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c542:	f000 f82f 	bl	800c5a4 <prvGetDisinheritPriorityAfterTimeout>
 800c546:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c54a:	689b      	ldr	r3, [r3, #8]
 800c54c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c54e:	4618      	mov	r0, r3
 800c550:	f001 f910 	bl	800d774 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c554:	f001 fea6 	bl	800e2a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c558:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c55a:	4618      	mov	r0, r3
 800c55c:	3738      	adds	r7, #56	; 0x38
 800c55e:	46bd      	mov	sp, r7
 800c560:	bd80      	pop	{r7, pc}
 800c562:	bf00      	nop
 800c564:	e000ed04 	.word	0xe000ed04

0800c568 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b084      	sub	sp, #16
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d10a      	bne.n	800c58c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800c576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c57a:	f383 8811 	msr	BASEPRI, r3
 800c57e:	f3bf 8f6f 	isb	sy
 800c582:	f3bf 8f4f 	dsb	sy
 800c586:	60bb      	str	r3, [r7, #8]
}
 800c588:	bf00      	nop
 800c58a:	e7fe      	b.n	800c58a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800c58c:	f001 fe5a 	bl	800e244 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c594:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800c596:	f001 fe85 	bl	800e2a4 <vPortExitCritical>

	return uxReturn;
 800c59a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800c59c:	4618      	mov	r0, r3
 800c59e:	3710      	adds	r7, #16
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}

0800c5a4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c5a4:	b480      	push	{r7}
 800c5a6:	b085      	sub	sp, #20
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d006      	beq.n	800c5c2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800c5be:	60fb      	str	r3, [r7, #12]
 800c5c0:	e001      	b.n	800c5c6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c5c6:	68fb      	ldr	r3, [r7, #12]
	}
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	3714      	adds	r7, #20
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d2:	4770      	bx	lr

0800c5d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b086      	sub	sp, #24
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	60f8      	str	r0, [r7, #12]
 800c5dc:	60b9      	str	r1, [r7, #8]
 800c5de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d10d      	bne.n	800c60e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d14d      	bne.n	800c696 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	689b      	ldr	r3, [r3, #8]
 800c5fe:	4618      	mov	r0, r3
 800c600:	f001 f84a 	bl	800d698 <xTaskPriorityDisinherit>
 800c604:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	2200      	movs	r2, #0
 800c60a:	609a      	str	r2, [r3, #8]
 800c60c:	e043      	b.n	800c696 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d119      	bne.n	800c648 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	6858      	ldr	r0, [r3, #4]
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c61c:	461a      	mov	r2, r3
 800c61e:	68b9      	ldr	r1, [r7, #8]
 800c620:	f00e f879 	bl	801a716 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	685a      	ldr	r2, [r3, #4]
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c62c:	441a      	add	r2, r3
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	685a      	ldr	r2, [r3, #4]
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	689b      	ldr	r3, [r3, #8]
 800c63a:	429a      	cmp	r2, r3
 800c63c:	d32b      	bcc.n	800c696 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	681a      	ldr	r2, [r3, #0]
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	605a      	str	r2, [r3, #4]
 800c646:	e026      	b.n	800c696 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	68d8      	ldr	r0, [r3, #12]
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c650:	461a      	mov	r2, r3
 800c652:	68b9      	ldr	r1, [r7, #8]
 800c654:	f00e f85f 	bl	801a716 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	68da      	ldr	r2, [r3, #12]
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c660:	425b      	negs	r3, r3
 800c662:	441a      	add	r2, r3
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	68da      	ldr	r2, [r3, #12]
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	429a      	cmp	r2, r3
 800c672:	d207      	bcs.n	800c684 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	689a      	ldr	r2, [r3, #8]
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c67c:	425b      	negs	r3, r3
 800c67e:	441a      	add	r2, r3
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2b02      	cmp	r3, #2
 800c688:	d105      	bne.n	800c696 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c68a:	693b      	ldr	r3, [r7, #16]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d002      	beq.n	800c696 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c690:	693b      	ldr	r3, [r7, #16]
 800c692:	3b01      	subs	r3, #1
 800c694:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	1c5a      	adds	r2, r3, #1
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c69e:	697b      	ldr	r3, [r7, #20]
}
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	3718      	adds	r7, #24
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}

0800c6a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b082      	sub	sp, #8
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
 800c6b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d018      	beq.n	800c6ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	68da      	ldr	r2, [r3, #12]
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6c2:	441a      	add	r2, r3
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	68da      	ldr	r2, [r3, #12]
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	689b      	ldr	r3, [r3, #8]
 800c6d0:	429a      	cmp	r2, r3
 800c6d2:	d303      	bcc.n	800c6dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681a      	ldr	r2, [r3, #0]
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	68d9      	ldr	r1, [r3, #12]
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6e4:	461a      	mov	r2, r3
 800c6e6:	6838      	ldr	r0, [r7, #0]
 800c6e8:	f00e f815 	bl	801a716 <memcpy>
	}
}
 800c6ec:	bf00      	nop
 800c6ee:	3708      	adds	r7, #8
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}

0800c6f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b084      	sub	sp, #16
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c6fc:	f001 fda2 	bl	800e244 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c706:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c708:	e011      	b.n	800c72e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d012      	beq.n	800c738 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	3324      	adds	r3, #36	; 0x24
 800c716:	4618      	mov	r0, r3
 800c718:	f000 fd50 	bl	800d1bc <xTaskRemoveFromEventList>
 800c71c:	4603      	mov	r3, r0
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d001      	beq.n	800c726 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c722:	f000 fe4d 	bl	800d3c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c726:	7bfb      	ldrb	r3, [r7, #15]
 800c728:	3b01      	subs	r3, #1
 800c72a:	b2db      	uxtb	r3, r3
 800c72c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c72e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c732:	2b00      	cmp	r3, #0
 800c734:	dce9      	bgt.n	800c70a <prvUnlockQueue+0x16>
 800c736:	e000      	b.n	800c73a <prvUnlockQueue+0x46>
					break;
 800c738:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	22ff      	movs	r2, #255	; 0xff
 800c73e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c742:	f001 fdaf 	bl	800e2a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c746:	f001 fd7d 	bl	800e244 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c750:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c752:	e011      	b.n	800c778 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	691b      	ldr	r3, [r3, #16]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d012      	beq.n	800c782 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	3310      	adds	r3, #16
 800c760:	4618      	mov	r0, r3
 800c762:	f000 fd2b 	bl	800d1bc <xTaskRemoveFromEventList>
 800c766:	4603      	mov	r3, r0
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d001      	beq.n	800c770 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c76c:	f000 fe28 	bl	800d3c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c770:	7bbb      	ldrb	r3, [r7, #14]
 800c772:	3b01      	subs	r3, #1
 800c774:	b2db      	uxtb	r3, r3
 800c776:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c778:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	dce9      	bgt.n	800c754 <prvUnlockQueue+0x60>
 800c780:	e000      	b.n	800c784 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c782:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	22ff      	movs	r2, #255	; 0xff
 800c788:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c78c:	f001 fd8a 	bl	800e2a4 <vPortExitCritical>
}
 800c790:	bf00      	nop
 800c792:	3710      	adds	r7, #16
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}

0800c798 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b084      	sub	sp, #16
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c7a0:	f001 fd50 	bl	800e244 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d102      	bne.n	800c7b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c7ac:	2301      	movs	r3, #1
 800c7ae:	60fb      	str	r3, [r7, #12]
 800c7b0:	e001      	b.n	800c7b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c7b6:	f001 fd75 	bl	800e2a4 <vPortExitCritical>

	return xReturn;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3710      	adds	r7, #16
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}

0800c7c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b084      	sub	sp, #16
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c7cc:	f001 fd3a 	bl	800e244 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7d8:	429a      	cmp	r2, r3
 800c7da:	d102      	bne.n	800c7e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c7dc:	2301      	movs	r3, #1
 800c7de:	60fb      	str	r3, [r7, #12]
 800c7e0:	e001      	b.n	800c7e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c7e6:	f001 fd5d 	bl	800e2a4 <vPortExitCritical>

	return xReturn;
 800c7ea:	68fb      	ldr	r3, [r7, #12]
}
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	3710      	adds	r7, #16
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	bd80      	pop	{r7, pc}

0800c7f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c7f4:	b480      	push	{r7}
 800c7f6:	b085      	sub	sp, #20
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
 800c7fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c7fe:	2300      	movs	r3, #0
 800c800:	60fb      	str	r3, [r7, #12]
 800c802:	e014      	b.n	800c82e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c804:	4a0f      	ldr	r2, [pc, #60]	; (800c844 <vQueueAddToRegistry+0x50>)
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d10b      	bne.n	800c828 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c810:	490c      	ldr	r1, [pc, #48]	; (800c844 <vQueueAddToRegistry+0x50>)
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	683a      	ldr	r2, [r7, #0]
 800c816:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c81a:	4a0a      	ldr	r2, [pc, #40]	; (800c844 <vQueueAddToRegistry+0x50>)
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	00db      	lsls	r3, r3, #3
 800c820:	4413      	add	r3, r2
 800c822:	687a      	ldr	r2, [r7, #4]
 800c824:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c826:	e006      	b.n	800c836 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	3301      	adds	r3, #1
 800c82c:	60fb      	str	r3, [r7, #12]
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	2b07      	cmp	r3, #7
 800c832:	d9e7      	bls.n	800c804 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c834:	bf00      	nop
 800c836:	bf00      	nop
 800c838:	3714      	adds	r7, #20
 800c83a:	46bd      	mov	sp, r7
 800c83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c840:	4770      	bx	lr
 800c842:	bf00      	nop
 800c844:	200054d8 	.word	0x200054d8

0800c848 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b086      	sub	sp, #24
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	60f8      	str	r0, [r7, #12]
 800c850:	60b9      	str	r1, [r7, #8]
 800c852:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c858:	f001 fcf4 	bl	800e244 <vPortEnterCritical>
 800c85c:	697b      	ldr	r3, [r7, #20]
 800c85e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c862:	b25b      	sxtb	r3, r3
 800c864:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c868:	d103      	bne.n	800c872 <vQueueWaitForMessageRestricted+0x2a>
 800c86a:	697b      	ldr	r3, [r7, #20]
 800c86c:	2200      	movs	r2, #0
 800c86e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c878:	b25b      	sxtb	r3, r3
 800c87a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c87e:	d103      	bne.n	800c888 <vQueueWaitForMessageRestricted+0x40>
 800c880:	697b      	ldr	r3, [r7, #20]
 800c882:	2200      	movs	r2, #0
 800c884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c888:	f001 fd0c 	bl	800e2a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c88c:	697b      	ldr	r3, [r7, #20]
 800c88e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c890:	2b00      	cmp	r3, #0
 800c892:	d106      	bne.n	800c8a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c894:	697b      	ldr	r3, [r7, #20]
 800c896:	3324      	adds	r3, #36	; 0x24
 800c898:	687a      	ldr	r2, [r7, #4]
 800c89a:	68b9      	ldr	r1, [r7, #8]
 800c89c:	4618      	mov	r0, r3
 800c89e:	f000 fc61 	bl	800d164 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c8a2:	6978      	ldr	r0, [r7, #20]
 800c8a4:	f7ff ff26 	bl	800c6f4 <prvUnlockQueue>
	}
 800c8a8:	bf00      	nop
 800c8aa:	3718      	adds	r7, #24
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd80      	pop	{r7, pc}

0800c8b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b08e      	sub	sp, #56	; 0x38
 800c8b4:	af04      	add	r7, sp, #16
 800c8b6:	60f8      	str	r0, [r7, #12]
 800c8b8:	60b9      	str	r1, [r7, #8]
 800c8ba:	607a      	str	r2, [r7, #4]
 800c8bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c8be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d10a      	bne.n	800c8da <xTaskCreateStatic+0x2a>
	__asm volatile
 800c8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8c8:	f383 8811 	msr	BASEPRI, r3
 800c8cc:	f3bf 8f6f 	isb	sy
 800c8d0:	f3bf 8f4f 	dsb	sy
 800c8d4:	623b      	str	r3, [r7, #32]
}
 800c8d6:	bf00      	nop
 800c8d8:	e7fe      	b.n	800c8d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c8da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d10a      	bne.n	800c8f6 <xTaskCreateStatic+0x46>
	__asm volatile
 800c8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e4:	f383 8811 	msr	BASEPRI, r3
 800c8e8:	f3bf 8f6f 	isb	sy
 800c8ec:	f3bf 8f4f 	dsb	sy
 800c8f0:	61fb      	str	r3, [r7, #28]
}
 800c8f2:	bf00      	nop
 800c8f4:	e7fe      	b.n	800c8f4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c8f6:	23a8      	movs	r3, #168	; 0xa8
 800c8f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c8fa:	693b      	ldr	r3, [r7, #16]
 800c8fc:	2ba8      	cmp	r3, #168	; 0xa8
 800c8fe:	d00a      	beq.n	800c916 <xTaskCreateStatic+0x66>
	__asm volatile
 800c900:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c904:	f383 8811 	msr	BASEPRI, r3
 800c908:	f3bf 8f6f 	isb	sy
 800c90c:	f3bf 8f4f 	dsb	sy
 800c910:	61bb      	str	r3, [r7, #24]
}
 800c912:	bf00      	nop
 800c914:	e7fe      	b.n	800c914 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c916:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d01e      	beq.n	800c95c <xTaskCreateStatic+0xac>
 800c91e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c920:	2b00      	cmp	r3, #0
 800c922:	d01b      	beq.n	800c95c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c926:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c92a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c92c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c930:	2202      	movs	r2, #2
 800c932:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c936:	2300      	movs	r3, #0
 800c938:	9303      	str	r3, [sp, #12]
 800c93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c93c:	9302      	str	r3, [sp, #8]
 800c93e:	f107 0314 	add.w	r3, r7, #20
 800c942:	9301      	str	r3, [sp, #4]
 800c944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c946:	9300      	str	r3, [sp, #0]
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	687a      	ldr	r2, [r7, #4]
 800c94c:	68b9      	ldr	r1, [r7, #8]
 800c94e:	68f8      	ldr	r0, [r7, #12]
 800c950:	f000 f850 	bl	800c9f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c954:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c956:	f000 f8f3 	bl	800cb40 <prvAddNewTaskToReadyList>
 800c95a:	e001      	b.n	800c960 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c95c:	2300      	movs	r3, #0
 800c95e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c960:	697b      	ldr	r3, [r7, #20]
	}
 800c962:	4618      	mov	r0, r3
 800c964:	3728      	adds	r7, #40	; 0x28
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}

0800c96a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c96a:	b580      	push	{r7, lr}
 800c96c:	b08c      	sub	sp, #48	; 0x30
 800c96e:	af04      	add	r7, sp, #16
 800c970:	60f8      	str	r0, [r7, #12]
 800c972:	60b9      	str	r1, [r7, #8]
 800c974:	603b      	str	r3, [r7, #0]
 800c976:	4613      	mov	r3, r2
 800c978:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c97a:	88fb      	ldrh	r3, [r7, #6]
 800c97c:	009b      	lsls	r3, r3, #2
 800c97e:	4618      	mov	r0, r3
 800c980:	f001 fd82 	bl	800e488 <pvPortMalloc>
 800c984:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c986:	697b      	ldr	r3, [r7, #20]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d00e      	beq.n	800c9aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c98c:	20a8      	movs	r0, #168	; 0xa8
 800c98e:	f001 fd7b 	bl	800e488 <pvPortMalloc>
 800c992:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c994:	69fb      	ldr	r3, [r7, #28]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d003      	beq.n	800c9a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c99a:	69fb      	ldr	r3, [r7, #28]
 800c99c:	697a      	ldr	r2, [r7, #20]
 800c99e:	631a      	str	r2, [r3, #48]	; 0x30
 800c9a0:	e005      	b.n	800c9ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c9a2:	6978      	ldr	r0, [r7, #20]
 800c9a4:	f001 fe3c 	bl	800e620 <vPortFree>
 800c9a8:	e001      	b.n	800c9ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c9ae:	69fb      	ldr	r3, [r7, #28]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d017      	beq.n	800c9e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c9b4:	69fb      	ldr	r3, [r7, #28]
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c9bc:	88fa      	ldrh	r2, [r7, #6]
 800c9be:	2300      	movs	r3, #0
 800c9c0:	9303      	str	r3, [sp, #12]
 800c9c2:	69fb      	ldr	r3, [r7, #28]
 800c9c4:	9302      	str	r3, [sp, #8]
 800c9c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9c8:	9301      	str	r3, [sp, #4]
 800c9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9cc:	9300      	str	r3, [sp, #0]
 800c9ce:	683b      	ldr	r3, [r7, #0]
 800c9d0:	68b9      	ldr	r1, [r7, #8]
 800c9d2:	68f8      	ldr	r0, [r7, #12]
 800c9d4:	f000 f80e 	bl	800c9f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c9d8:	69f8      	ldr	r0, [r7, #28]
 800c9da:	f000 f8b1 	bl	800cb40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c9de:	2301      	movs	r3, #1
 800c9e0:	61bb      	str	r3, [r7, #24]
 800c9e2:	e002      	b.n	800c9ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c9e4:	f04f 33ff 	mov.w	r3, #4294967295
 800c9e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c9ea:	69bb      	ldr	r3, [r7, #24]
	}
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	3720      	adds	r7, #32
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bd80      	pop	{r7, pc}

0800c9f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b088      	sub	sp, #32
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	60f8      	str	r0, [r7, #12]
 800c9fc:	60b9      	str	r1, [r7, #8]
 800c9fe:	607a      	str	r2, [r7, #4]
 800ca00:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ca02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca04:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	009b      	lsls	r3, r3, #2
 800ca0a:	461a      	mov	r2, r3
 800ca0c:	21a5      	movs	r1, #165	; 0xa5
 800ca0e:	f00d fd63 	bl	801a4d8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ca12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ca1c:	3b01      	subs	r3, #1
 800ca1e:	009b      	lsls	r3, r3, #2
 800ca20:	4413      	add	r3, r2
 800ca22:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ca24:	69bb      	ldr	r3, [r7, #24]
 800ca26:	f023 0307 	bic.w	r3, r3, #7
 800ca2a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ca2c:	69bb      	ldr	r3, [r7, #24]
 800ca2e:	f003 0307 	and.w	r3, r3, #7
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d00a      	beq.n	800ca4c <prvInitialiseNewTask+0x58>
	__asm volatile
 800ca36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca3a:	f383 8811 	msr	BASEPRI, r3
 800ca3e:	f3bf 8f6f 	isb	sy
 800ca42:	f3bf 8f4f 	dsb	sy
 800ca46:	617b      	str	r3, [r7, #20]
}
 800ca48:	bf00      	nop
 800ca4a:	e7fe      	b.n	800ca4a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ca4c:	68bb      	ldr	r3, [r7, #8]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d01f      	beq.n	800ca92 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ca52:	2300      	movs	r3, #0
 800ca54:	61fb      	str	r3, [r7, #28]
 800ca56:	e012      	b.n	800ca7e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ca58:	68ba      	ldr	r2, [r7, #8]
 800ca5a:	69fb      	ldr	r3, [r7, #28]
 800ca5c:	4413      	add	r3, r2
 800ca5e:	7819      	ldrb	r1, [r3, #0]
 800ca60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca62:	69fb      	ldr	r3, [r7, #28]
 800ca64:	4413      	add	r3, r2
 800ca66:	3334      	adds	r3, #52	; 0x34
 800ca68:	460a      	mov	r2, r1
 800ca6a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ca6c:	68ba      	ldr	r2, [r7, #8]
 800ca6e:	69fb      	ldr	r3, [r7, #28]
 800ca70:	4413      	add	r3, r2
 800ca72:	781b      	ldrb	r3, [r3, #0]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d006      	beq.n	800ca86 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ca78:	69fb      	ldr	r3, [r7, #28]
 800ca7a:	3301      	adds	r3, #1
 800ca7c:	61fb      	str	r3, [r7, #28]
 800ca7e:	69fb      	ldr	r3, [r7, #28]
 800ca80:	2b0f      	cmp	r3, #15
 800ca82:	d9e9      	bls.n	800ca58 <prvInitialiseNewTask+0x64>
 800ca84:	e000      	b.n	800ca88 <prvInitialiseNewTask+0x94>
			{
				break;
 800ca86:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ca88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ca90:	e003      	b.n	800ca9a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ca92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca94:	2200      	movs	r2, #0
 800ca96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ca9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca9c:	2b37      	cmp	r3, #55	; 0x37
 800ca9e:	d901      	bls.n	800caa4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800caa0:	2337      	movs	r3, #55	; 0x37
 800caa2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800caa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800caa8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800caaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800caae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cab2:	2200      	movs	r2, #0
 800cab4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cab8:	3304      	adds	r3, #4
 800caba:	4618      	mov	r0, r3
 800cabc:	f7fe fffc 	bl	800bab8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cac2:	3318      	adds	r3, #24
 800cac4:	4618      	mov	r0, r3
 800cac6:	f7fe fff7 	bl	800bab8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800caca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cacc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cace:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cad2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cad8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cadc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cade:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cae2:	2200      	movs	r2, #0
 800cae4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caea:	2200      	movs	r2, #0
 800caec:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800caf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caf2:	3354      	adds	r3, #84	; 0x54
 800caf4:	224c      	movs	r2, #76	; 0x4c
 800caf6:	2100      	movs	r1, #0
 800caf8:	4618      	mov	r0, r3
 800cafa:	f00d fced 	bl	801a4d8 <memset>
 800cafe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb00:	4a0c      	ldr	r2, [pc, #48]	; (800cb34 <prvInitialiseNewTask+0x140>)
 800cb02:	659a      	str	r2, [r3, #88]	; 0x58
 800cb04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb06:	4a0c      	ldr	r2, [pc, #48]	; (800cb38 <prvInitialiseNewTask+0x144>)
 800cb08:	65da      	str	r2, [r3, #92]	; 0x5c
 800cb0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb0c:	4a0b      	ldr	r2, [pc, #44]	; (800cb3c <prvInitialiseNewTask+0x148>)
 800cb0e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cb10:	683a      	ldr	r2, [r7, #0]
 800cb12:	68f9      	ldr	r1, [r7, #12]
 800cb14:	69b8      	ldr	r0, [r7, #24]
 800cb16:	f001 fa65 	bl	800dfe4 <pxPortInitialiseStack>
 800cb1a:	4602      	mov	r2, r0
 800cb1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb1e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cb20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d002      	beq.n	800cb2c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cb26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb2a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cb2c:	bf00      	nop
 800cb2e:	3720      	adds	r7, #32
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd80      	pop	{r7, pc}
 800cb34:	20009d68 	.word	0x20009d68
 800cb38:	20009dd0 	.word	0x20009dd0
 800cb3c:	20009e38 	.word	0x20009e38

0800cb40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b082      	sub	sp, #8
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cb48:	f001 fb7c 	bl	800e244 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cb4c:	4b2d      	ldr	r3, [pc, #180]	; (800cc04 <prvAddNewTaskToReadyList+0xc4>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	3301      	adds	r3, #1
 800cb52:	4a2c      	ldr	r2, [pc, #176]	; (800cc04 <prvAddNewTaskToReadyList+0xc4>)
 800cb54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cb56:	4b2c      	ldr	r3, [pc, #176]	; (800cc08 <prvAddNewTaskToReadyList+0xc8>)
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d109      	bne.n	800cb72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cb5e:	4a2a      	ldr	r2, [pc, #168]	; (800cc08 <prvAddNewTaskToReadyList+0xc8>)
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cb64:	4b27      	ldr	r3, [pc, #156]	; (800cc04 <prvAddNewTaskToReadyList+0xc4>)
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	2b01      	cmp	r3, #1
 800cb6a:	d110      	bne.n	800cb8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cb6c:	f000 fc4c 	bl	800d408 <prvInitialiseTaskLists>
 800cb70:	e00d      	b.n	800cb8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cb72:	4b26      	ldr	r3, [pc, #152]	; (800cc0c <prvAddNewTaskToReadyList+0xcc>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d109      	bne.n	800cb8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cb7a:	4b23      	ldr	r3, [pc, #140]	; (800cc08 <prvAddNewTaskToReadyList+0xc8>)
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb84:	429a      	cmp	r2, r3
 800cb86:	d802      	bhi.n	800cb8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cb88:	4a1f      	ldr	r2, [pc, #124]	; (800cc08 <prvAddNewTaskToReadyList+0xc8>)
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cb8e:	4b20      	ldr	r3, [pc, #128]	; (800cc10 <prvAddNewTaskToReadyList+0xd0>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	3301      	adds	r3, #1
 800cb94:	4a1e      	ldr	r2, [pc, #120]	; (800cc10 <prvAddNewTaskToReadyList+0xd0>)
 800cb96:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cb98:	4b1d      	ldr	r3, [pc, #116]	; (800cc10 <prvAddNewTaskToReadyList+0xd0>)
 800cb9a:	681a      	ldr	r2, [r3, #0]
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cba4:	4b1b      	ldr	r3, [pc, #108]	; (800cc14 <prvAddNewTaskToReadyList+0xd4>)
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	d903      	bls.n	800cbb4 <prvAddNewTaskToReadyList+0x74>
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbb0:	4a18      	ldr	r2, [pc, #96]	; (800cc14 <prvAddNewTaskToReadyList+0xd4>)
 800cbb2:	6013      	str	r3, [r2, #0]
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbb8:	4613      	mov	r3, r2
 800cbba:	009b      	lsls	r3, r3, #2
 800cbbc:	4413      	add	r3, r2
 800cbbe:	009b      	lsls	r3, r3, #2
 800cbc0:	4a15      	ldr	r2, [pc, #84]	; (800cc18 <prvAddNewTaskToReadyList+0xd8>)
 800cbc2:	441a      	add	r2, r3
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	3304      	adds	r3, #4
 800cbc8:	4619      	mov	r1, r3
 800cbca:	4610      	mov	r0, r2
 800cbcc:	f7fe ff81 	bl	800bad2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cbd0:	f001 fb68 	bl	800e2a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cbd4:	4b0d      	ldr	r3, [pc, #52]	; (800cc0c <prvAddNewTaskToReadyList+0xcc>)
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d00e      	beq.n	800cbfa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cbdc:	4b0a      	ldr	r3, [pc, #40]	; (800cc08 <prvAddNewTaskToReadyList+0xc8>)
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbe6:	429a      	cmp	r2, r3
 800cbe8:	d207      	bcs.n	800cbfa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cbea:	4b0c      	ldr	r3, [pc, #48]	; (800cc1c <prvAddNewTaskToReadyList+0xdc>)
 800cbec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbf0:	601a      	str	r2, [r3, #0]
 800cbf2:	f3bf 8f4f 	dsb	sy
 800cbf6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cbfa:	bf00      	nop
 800cbfc:	3708      	adds	r7, #8
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}
 800cc02:	bf00      	nop
 800cc04:	200059ec 	.word	0x200059ec
 800cc08:	20005518 	.word	0x20005518
 800cc0c:	200059f8 	.word	0x200059f8
 800cc10:	20005a08 	.word	0x20005a08
 800cc14:	200059f4 	.word	0x200059f4
 800cc18:	2000551c 	.word	0x2000551c
 800cc1c:	e000ed04 	.word	0xe000ed04

0800cc20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b084      	sub	sp, #16
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cc28:	2300      	movs	r3, #0
 800cc2a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d017      	beq.n	800cc62 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cc32:	4b13      	ldr	r3, [pc, #76]	; (800cc80 <vTaskDelay+0x60>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d00a      	beq.n	800cc50 <vTaskDelay+0x30>
	__asm volatile
 800cc3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc3e:	f383 8811 	msr	BASEPRI, r3
 800cc42:	f3bf 8f6f 	isb	sy
 800cc46:	f3bf 8f4f 	dsb	sy
 800cc4a:	60bb      	str	r3, [r7, #8]
}
 800cc4c:	bf00      	nop
 800cc4e:	e7fe      	b.n	800cc4e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cc50:	f000 f88a 	bl	800cd68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cc54:	2100      	movs	r1, #0
 800cc56:	6878      	ldr	r0, [r7, #4]
 800cc58:	f000 fe22 	bl	800d8a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cc5c:	f000 f892 	bl	800cd84 <xTaskResumeAll>
 800cc60:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d107      	bne.n	800cc78 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cc68:	4b06      	ldr	r3, [pc, #24]	; (800cc84 <vTaskDelay+0x64>)
 800cc6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc6e:	601a      	str	r2, [r3, #0]
 800cc70:	f3bf 8f4f 	dsb	sy
 800cc74:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cc78:	bf00      	nop
 800cc7a:	3710      	adds	r7, #16
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}
 800cc80:	20005a14 	.word	0x20005a14
 800cc84:	e000ed04 	.word	0xe000ed04

0800cc88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b08a      	sub	sp, #40	; 0x28
 800cc8c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cc92:	2300      	movs	r3, #0
 800cc94:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cc96:	463a      	mov	r2, r7
 800cc98:	1d39      	adds	r1, r7, #4
 800cc9a:	f107 0308 	add.w	r3, r7, #8
 800cc9e:	4618      	mov	r0, r3
 800cca0:	f7fe feb6 	bl	800ba10 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cca4:	6839      	ldr	r1, [r7, #0]
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	68ba      	ldr	r2, [r7, #8]
 800ccaa:	9202      	str	r2, [sp, #8]
 800ccac:	9301      	str	r3, [sp, #4]
 800ccae:	2300      	movs	r3, #0
 800ccb0:	9300      	str	r3, [sp, #0]
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	460a      	mov	r2, r1
 800ccb6:	4924      	ldr	r1, [pc, #144]	; (800cd48 <vTaskStartScheduler+0xc0>)
 800ccb8:	4824      	ldr	r0, [pc, #144]	; (800cd4c <vTaskStartScheduler+0xc4>)
 800ccba:	f7ff fdf9 	bl	800c8b0 <xTaskCreateStatic>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	4a23      	ldr	r2, [pc, #140]	; (800cd50 <vTaskStartScheduler+0xc8>)
 800ccc2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ccc4:	4b22      	ldr	r3, [pc, #136]	; (800cd50 <vTaskStartScheduler+0xc8>)
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d002      	beq.n	800ccd2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cccc:	2301      	movs	r3, #1
 800ccce:	617b      	str	r3, [r7, #20]
 800ccd0:	e001      	b.n	800ccd6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ccd6:	697b      	ldr	r3, [r7, #20]
 800ccd8:	2b01      	cmp	r3, #1
 800ccda:	d102      	bne.n	800cce2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ccdc:	f000 fe34 	bl	800d948 <xTimerCreateTimerTask>
 800cce0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cce2:	697b      	ldr	r3, [r7, #20]
 800cce4:	2b01      	cmp	r3, #1
 800cce6:	d11b      	bne.n	800cd20 <vTaskStartScheduler+0x98>
	__asm volatile
 800cce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccec:	f383 8811 	msr	BASEPRI, r3
 800ccf0:	f3bf 8f6f 	isb	sy
 800ccf4:	f3bf 8f4f 	dsb	sy
 800ccf8:	613b      	str	r3, [r7, #16]
}
 800ccfa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ccfc:	4b15      	ldr	r3, [pc, #84]	; (800cd54 <vTaskStartScheduler+0xcc>)
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	3354      	adds	r3, #84	; 0x54
 800cd02:	4a15      	ldr	r2, [pc, #84]	; (800cd58 <vTaskStartScheduler+0xd0>)
 800cd04:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cd06:	4b15      	ldr	r3, [pc, #84]	; (800cd5c <vTaskStartScheduler+0xd4>)
 800cd08:	f04f 32ff 	mov.w	r2, #4294967295
 800cd0c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cd0e:	4b14      	ldr	r3, [pc, #80]	; (800cd60 <vTaskStartScheduler+0xd8>)
 800cd10:	2201      	movs	r2, #1
 800cd12:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cd14:	4b13      	ldr	r3, [pc, #76]	; (800cd64 <vTaskStartScheduler+0xdc>)
 800cd16:	2200      	movs	r2, #0
 800cd18:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cd1a:	f001 f9f1 	bl	800e100 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cd1e:	e00e      	b.n	800cd3e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cd20:	697b      	ldr	r3, [r7, #20]
 800cd22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd26:	d10a      	bne.n	800cd3e <vTaskStartScheduler+0xb6>
	__asm volatile
 800cd28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd2c:	f383 8811 	msr	BASEPRI, r3
 800cd30:	f3bf 8f6f 	isb	sy
 800cd34:	f3bf 8f4f 	dsb	sy
 800cd38:	60fb      	str	r3, [r7, #12]
}
 800cd3a:	bf00      	nop
 800cd3c:	e7fe      	b.n	800cd3c <vTaskStartScheduler+0xb4>
}
 800cd3e:	bf00      	nop
 800cd40:	3718      	adds	r7, #24
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}
 800cd46:	bf00      	nop
 800cd48:	0801b78c 	.word	0x0801b78c
 800cd4c:	0800d3d9 	.word	0x0800d3d9
 800cd50:	20005a10 	.word	0x20005a10
 800cd54:	20005518 	.word	0x20005518
 800cd58:	200000e8 	.word	0x200000e8
 800cd5c:	20005a0c 	.word	0x20005a0c
 800cd60:	200059f8 	.word	0x200059f8
 800cd64:	200059f0 	.word	0x200059f0

0800cd68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cd68:	b480      	push	{r7}
 800cd6a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cd6c:	4b04      	ldr	r3, [pc, #16]	; (800cd80 <vTaskSuspendAll+0x18>)
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	3301      	adds	r3, #1
 800cd72:	4a03      	ldr	r2, [pc, #12]	; (800cd80 <vTaskSuspendAll+0x18>)
 800cd74:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cd76:	bf00      	nop
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7e:	4770      	bx	lr
 800cd80:	20005a14 	.word	0x20005a14

0800cd84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b084      	sub	sp, #16
 800cd88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cd92:	4b42      	ldr	r3, [pc, #264]	; (800ce9c <xTaskResumeAll+0x118>)
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d10a      	bne.n	800cdb0 <xTaskResumeAll+0x2c>
	__asm volatile
 800cd9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd9e:	f383 8811 	msr	BASEPRI, r3
 800cda2:	f3bf 8f6f 	isb	sy
 800cda6:	f3bf 8f4f 	dsb	sy
 800cdaa:	603b      	str	r3, [r7, #0]
}
 800cdac:	bf00      	nop
 800cdae:	e7fe      	b.n	800cdae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cdb0:	f001 fa48 	bl	800e244 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cdb4:	4b39      	ldr	r3, [pc, #228]	; (800ce9c <xTaskResumeAll+0x118>)
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	3b01      	subs	r3, #1
 800cdba:	4a38      	ldr	r2, [pc, #224]	; (800ce9c <xTaskResumeAll+0x118>)
 800cdbc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cdbe:	4b37      	ldr	r3, [pc, #220]	; (800ce9c <xTaskResumeAll+0x118>)
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d162      	bne.n	800ce8c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cdc6:	4b36      	ldr	r3, [pc, #216]	; (800cea0 <xTaskResumeAll+0x11c>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d05e      	beq.n	800ce8c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cdce:	e02f      	b.n	800ce30 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cdd0:	4b34      	ldr	r3, [pc, #208]	; (800cea4 <xTaskResumeAll+0x120>)
 800cdd2:	68db      	ldr	r3, [r3, #12]
 800cdd4:	68db      	ldr	r3, [r3, #12]
 800cdd6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	3318      	adds	r3, #24
 800cddc:	4618      	mov	r0, r3
 800cdde:	f7fe fed5 	bl	800bb8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	3304      	adds	r3, #4
 800cde6:	4618      	mov	r0, r3
 800cde8:	f7fe fed0 	bl	800bb8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdf0:	4b2d      	ldr	r3, [pc, #180]	; (800cea8 <xTaskResumeAll+0x124>)
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	429a      	cmp	r2, r3
 800cdf6:	d903      	bls.n	800ce00 <xTaskResumeAll+0x7c>
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdfc:	4a2a      	ldr	r2, [pc, #168]	; (800cea8 <xTaskResumeAll+0x124>)
 800cdfe:	6013      	str	r3, [r2, #0]
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce04:	4613      	mov	r3, r2
 800ce06:	009b      	lsls	r3, r3, #2
 800ce08:	4413      	add	r3, r2
 800ce0a:	009b      	lsls	r3, r3, #2
 800ce0c:	4a27      	ldr	r2, [pc, #156]	; (800ceac <xTaskResumeAll+0x128>)
 800ce0e:	441a      	add	r2, r3
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	3304      	adds	r3, #4
 800ce14:	4619      	mov	r1, r3
 800ce16:	4610      	mov	r0, r2
 800ce18:	f7fe fe5b 	bl	800bad2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce20:	4b23      	ldr	r3, [pc, #140]	; (800ceb0 <xTaskResumeAll+0x12c>)
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce26:	429a      	cmp	r2, r3
 800ce28:	d302      	bcc.n	800ce30 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ce2a:	4b22      	ldr	r3, [pc, #136]	; (800ceb4 <xTaskResumeAll+0x130>)
 800ce2c:	2201      	movs	r2, #1
 800ce2e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ce30:	4b1c      	ldr	r3, [pc, #112]	; (800cea4 <xTaskResumeAll+0x120>)
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d1cb      	bne.n	800cdd0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d001      	beq.n	800ce42 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ce3e:	f000 fb85 	bl	800d54c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ce42:	4b1d      	ldr	r3, [pc, #116]	; (800ceb8 <xTaskResumeAll+0x134>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d010      	beq.n	800ce70 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ce4e:	f000 f847 	bl	800cee0 <xTaskIncrementTick>
 800ce52:	4603      	mov	r3, r0
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d002      	beq.n	800ce5e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ce58:	4b16      	ldr	r3, [pc, #88]	; (800ceb4 <xTaskResumeAll+0x130>)
 800ce5a:	2201      	movs	r2, #1
 800ce5c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	3b01      	subs	r3, #1
 800ce62:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d1f1      	bne.n	800ce4e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ce6a:	4b13      	ldr	r3, [pc, #76]	; (800ceb8 <xTaskResumeAll+0x134>)
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ce70:	4b10      	ldr	r3, [pc, #64]	; (800ceb4 <xTaskResumeAll+0x130>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d009      	beq.n	800ce8c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ce78:	2301      	movs	r3, #1
 800ce7a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ce7c:	4b0f      	ldr	r3, [pc, #60]	; (800cebc <xTaskResumeAll+0x138>)
 800ce7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce82:	601a      	str	r2, [r3, #0]
 800ce84:	f3bf 8f4f 	dsb	sy
 800ce88:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ce8c:	f001 fa0a 	bl	800e2a4 <vPortExitCritical>

	return xAlreadyYielded;
 800ce90:	68bb      	ldr	r3, [r7, #8]
}
 800ce92:	4618      	mov	r0, r3
 800ce94:	3710      	adds	r7, #16
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}
 800ce9a:	bf00      	nop
 800ce9c:	20005a14 	.word	0x20005a14
 800cea0:	200059ec 	.word	0x200059ec
 800cea4:	200059ac 	.word	0x200059ac
 800cea8:	200059f4 	.word	0x200059f4
 800ceac:	2000551c 	.word	0x2000551c
 800ceb0:	20005518 	.word	0x20005518
 800ceb4:	20005a00 	.word	0x20005a00
 800ceb8:	200059fc 	.word	0x200059fc
 800cebc:	e000ed04 	.word	0xe000ed04

0800cec0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cec0:	b480      	push	{r7}
 800cec2:	b083      	sub	sp, #12
 800cec4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cec6:	4b05      	ldr	r3, [pc, #20]	; (800cedc <xTaskGetTickCount+0x1c>)
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cecc:	687b      	ldr	r3, [r7, #4]
}
 800cece:	4618      	mov	r0, r3
 800ced0:	370c      	adds	r7, #12
 800ced2:	46bd      	mov	sp, r7
 800ced4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced8:	4770      	bx	lr
 800ceda:	bf00      	nop
 800cedc:	200059f0 	.word	0x200059f0

0800cee0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b086      	sub	sp, #24
 800cee4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cee6:	2300      	movs	r3, #0
 800cee8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ceea:	4b4f      	ldr	r3, [pc, #316]	; (800d028 <xTaskIncrementTick+0x148>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	f040 808f 	bne.w	800d012 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cef4:	4b4d      	ldr	r3, [pc, #308]	; (800d02c <xTaskIncrementTick+0x14c>)
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	3301      	adds	r3, #1
 800cefa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cefc:	4a4b      	ldr	r2, [pc, #300]	; (800d02c <xTaskIncrementTick+0x14c>)
 800cefe:	693b      	ldr	r3, [r7, #16]
 800cf00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cf02:	693b      	ldr	r3, [r7, #16]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d120      	bne.n	800cf4a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cf08:	4b49      	ldr	r3, [pc, #292]	; (800d030 <xTaskIncrementTick+0x150>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d00a      	beq.n	800cf28 <xTaskIncrementTick+0x48>
	__asm volatile
 800cf12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf16:	f383 8811 	msr	BASEPRI, r3
 800cf1a:	f3bf 8f6f 	isb	sy
 800cf1e:	f3bf 8f4f 	dsb	sy
 800cf22:	603b      	str	r3, [r7, #0]
}
 800cf24:	bf00      	nop
 800cf26:	e7fe      	b.n	800cf26 <xTaskIncrementTick+0x46>
 800cf28:	4b41      	ldr	r3, [pc, #260]	; (800d030 <xTaskIncrementTick+0x150>)
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	60fb      	str	r3, [r7, #12]
 800cf2e:	4b41      	ldr	r3, [pc, #260]	; (800d034 <xTaskIncrementTick+0x154>)
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	4a3f      	ldr	r2, [pc, #252]	; (800d030 <xTaskIncrementTick+0x150>)
 800cf34:	6013      	str	r3, [r2, #0]
 800cf36:	4a3f      	ldr	r2, [pc, #252]	; (800d034 <xTaskIncrementTick+0x154>)
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	6013      	str	r3, [r2, #0]
 800cf3c:	4b3e      	ldr	r3, [pc, #248]	; (800d038 <xTaskIncrementTick+0x158>)
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	3301      	adds	r3, #1
 800cf42:	4a3d      	ldr	r2, [pc, #244]	; (800d038 <xTaskIncrementTick+0x158>)
 800cf44:	6013      	str	r3, [r2, #0]
 800cf46:	f000 fb01 	bl	800d54c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cf4a:	4b3c      	ldr	r3, [pc, #240]	; (800d03c <xTaskIncrementTick+0x15c>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	693a      	ldr	r2, [r7, #16]
 800cf50:	429a      	cmp	r2, r3
 800cf52:	d349      	bcc.n	800cfe8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cf54:	4b36      	ldr	r3, [pc, #216]	; (800d030 <xTaskIncrementTick+0x150>)
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d104      	bne.n	800cf68 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf5e:	4b37      	ldr	r3, [pc, #220]	; (800d03c <xTaskIncrementTick+0x15c>)
 800cf60:	f04f 32ff 	mov.w	r2, #4294967295
 800cf64:	601a      	str	r2, [r3, #0]
					break;
 800cf66:	e03f      	b.n	800cfe8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf68:	4b31      	ldr	r3, [pc, #196]	; (800d030 <xTaskIncrementTick+0x150>)
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	68db      	ldr	r3, [r3, #12]
 800cf6e:	68db      	ldr	r3, [r3, #12]
 800cf70:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	685b      	ldr	r3, [r3, #4]
 800cf76:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cf78:	693a      	ldr	r2, [r7, #16]
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	429a      	cmp	r2, r3
 800cf7e:	d203      	bcs.n	800cf88 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cf80:	4a2e      	ldr	r2, [pc, #184]	; (800d03c <xTaskIncrementTick+0x15c>)
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cf86:	e02f      	b.n	800cfe8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cf88:	68bb      	ldr	r3, [r7, #8]
 800cf8a:	3304      	adds	r3, #4
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	f7fe fdfd 	bl	800bb8c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cf92:	68bb      	ldr	r3, [r7, #8]
 800cf94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d004      	beq.n	800cfa4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cf9a:	68bb      	ldr	r3, [r7, #8]
 800cf9c:	3318      	adds	r3, #24
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	f7fe fdf4 	bl	800bb8c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cfa4:	68bb      	ldr	r3, [r7, #8]
 800cfa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfa8:	4b25      	ldr	r3, [pc, #148]	; (800d040 <xTaskIncrementTick+0x160>)
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	429a      	cmp	r2, r3
 800cfae:	d903      	bls.n	800cfb8 <xTaskIncrementTick+0xd8>
 800cfb0:	68bb      	ldr	r3, [r7, #8]
 800cfb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfb4:	4a22      	ldr	r2, [pc, #136]	; (800d040 <xTaskIncrementTick+0x160>)
 800cfb6:	6013      	str	r3, [r2, #0]
 800cfb8:	68bb      	ldr	r3, [r7, #8]
 800cfba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfbc:	4613      	mov	r3, r2
 800cfbe:	009b      	lsls	r3, r3, #2
 800cfc0:	4413      	add	r3, r2
 800cfc2:	009b      	lsls	r3, r3, #2
 800cfc4:	4a1f      	ldr	r2, [pc, #124]	; (800d044 <xTaskIncrementTick+0x164>)
 800cfc6:	441a      	add	r2, r3
 800cfc8:	68bb      	ldr	r3, [r7, #8]
 800cfca:	3304      	adds	r3, #4
 800cfcc:	4619      	mov	r1, r3
 800cfce:	4610      	mov	r0, r2
 800cfd0:	f7fe fd7f 	bl	800bad2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cfd4:	68bb      	ldr	r3, [r7, #8]
 800cfd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfd8:	4b1b      	ldr	r3, [pc, #108]	; (800d048 <xTaskIncrementTick+0x168>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfde:	429a      	cmp	r2, r3
 800cfe0:	d3b8      	bcc.n	800cf54 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cfe2:	2301      	movs	r3, #1
 800cfe4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cfe6:	e7b5      	b.n	800cf54 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cfe8:	4b17      	ldr	r3, [pc, #92]	; (800d048 <xTaskIncrementTick+0x168>)
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfee:	4915      	ldr	r1, [pc, #84]	; (800d044 <xTaskIncrementTick+0x164>)
 800cff0:	4613      	mov	r3, r2
 800cff2:	009b      	lsls	r3, r3, #2
 800cff4:	4413      	add	r3, r2
 800cff6:	009b      	lsls	r3, r3, #2
 800cff8:	440b      	add	r3, r1
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	2b01      	cmp	r3, #1
 800cffe:	d901      	bls.n	800d004 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d000:	2301      	movs	r3, #1
 800d002:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d004:	4b11      	ldr	r3, [pc, #68]	; (800d04c <xTaskIncrementTick+0x16c>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d007      	beq.n	800d01c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d00c:	2301      	movs	r3, #1
 800d00e:	617b      	str	r3, [r7, #20]
 800d010:	e004      	b.n	800d01c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d012:	4b0f      	ldr	r3, [pc, #60]	; (800d050 <xTaskIncrementTick+0x170>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	3301      	adds	r3, #1
 800d018:	4a0d      	ldr	r2, [pc, #52]	; (800d050 <xTaskIncrementTick+0x170>)
 800d01a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d01c:	697b      	ldr	r3, [r7, #20]
}
 800d01e:	4618      	mov	r0, r3
 800d020:	3718      	adds	r7, #24
 800d022:	46bd      	mov	sp, r7
 800d024:	bd80      	pop	{r7, pc}
 800d026:	bf00      	nop
 800d028:	20005a14 	.word	0x20005a14
 800d02c:	200059f0 	.word	0x200059f0
 800d030:	200059a4 	.word	0x200059a4
 800d034:	200059a8 	.word	0x200059a8
 800d038:	20005a04 	.word	0x20005a04
 800d03c:	20005a0c 	.word	0x20005a0c
 800d040:	200059f4 	.word	0x200059f4
 800d044:	2000551c 	.word	0x2000551c
 800d048:	20005518 	.word	0x20005518
 800d04c:	20005a00 	.word	0x20005a00
 800d050:	200059fc 	.word	0x200059fc

0800d054 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d054:	b480      	push	{r7}
 800d056:	b085      	sub	sp, #20
 800d058:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d05a:	4b2a      	ldr	r3, [pc, #168]	; (800d104 <vTaskSwitchContext+0xb0>)
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d003      	beq.n	800d06a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d062:	4b29      	ldr	r3, [pc, #164]	; (800d108 <vTaskSwitchContext+0xb4>)
 800d064:	2201      	movs	r2, #1
 800d066:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d068:	e046      	b.n	800d0f8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800d06a:	4b27      	ldr	r3, [pc, #156]	; (800d108 <vTaskSwitchContext+0xb4>)
 800d06c:	2200      	movs	r2, #0
 800d06e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d070:	4b26      	ldr	r3, [pc, #152]	; (800d10c <vTaskSwitchContext+0xb8>)
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	60fb      	str	r3, [r7, #12]
 800d076:	e010      	b.n	800d09a <vTaskSwitchContext+0x46>
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d10a      	bne.n	800d094 <vTaskSwitchContext+0x40>
	__asm volatile
 800d07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d082:	f383 8811 	msr	BASEPRI, r3
 800d086:	f3bf 8f6f 	isb	sy
 800d08a:	f3bf 8f4f 	dsb	sy
 800d08e:	607b      	str	r3, [r7, #4]
}
 800d090:	bf00      	nop
 800d092:	e7fe      	b.n	800d092 <vTaskSwitchContext+0x3e>
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	3b01      	subs	r3, #1
 800d098:	60fb      	str	r3, [r7, #12]
 800d09a:	491d      	ldr	r1, [pc, #116]	; (800d110 <vTaskSwitchContext+0xbc>)
 800d09c:	68fa      	ldr	r2, [r7, #12]
 800d09e:	4613      	mov	r3, r2
 800d0a0:	009b      	lsls	r3, r3, #2
 800d0a2:	4413      	add	r3, r2
 800d0a4:	009b      	lsls	r3, r3, #2
 800d0a6:	440b      	add	r3, r1
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d0e4      	beq.n	800d078 <vTaskSwitchContext+0x24>
 800d0ae:	68fa      	ldr	r2, [r7, #12]
 800d0b0:	4613      	mov	r3, r2
 800d0b2:	009b      	lsls	r3, r3, #2
 800d0b4:	4413      	add	r3, r2
 800d0b6:	009b      	lsls	r3, r3, #2
 800d0b8:	4a15      	ldr	r2, [pc, #84]	; (800d110 <vTaskSwitchContext+0xbc>)
 800d0ba:	4413      	add	r3, r2
 800d0bc:	60bb      	str	r3, [r7, #8]
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	685b      	ldr	r3, [r3, #4]
 800d0c2:	685a      	ldr	r2, [r3, #4]
 800d0c4:	68bb      	ldr	r3, [r7, #8]
 800d0c6:	605a      	str	r2, [r3, #4]
 800d0c8:	68bb      	ldr	r3, [r7, #8]
 800d0ca:	685a      	ldr	r2, [r3, #4]
 800d0cc:	68bb      	ldr	r3, [r7, #8]
 800d0ce:	3308      	adds	r3, #8
 800d0d0:	429a      	cmp	r2, r3
 800d0d2:	d104      	bne.n	800d0de <vTaskSwitchContext+0x8a>
 800d0d4:	68bb      	ldr	r3, [r7, #8]
 800d0d6:	685b      	ldr	r3, [r3, #4]
 800d0d8:	685a      	ldr	r2, [r3, #4]
 800d0da:	68bb      	ldr	r3, [r7, #8]
 800d0dc:	605a      	str	r2, [r3, #4]
 800d0de:	68bb      	ldr	r3, [r7, #8]
 800d0e0:	685b      	ldr	r3, [r3, #4]
 800d0e2:	68db      	ldr	r3, [r3, #12]
 800d0e4:	4a0b      	ldr	r2, [pc, #44]	; (800d114 <vTaskSwitchContext+0xc0>)
 800d0e6:	6013      	str	r3, [r2, #0]
 800d0e8:	4a08      	ldr	r2, [pc, #32]	; (800d10c <vTaskSwitchContext+0xb8>)
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d0ee:	4b09      	ldr	r3, [pc, #36]	; (800d114 <vTaskSwitchContext+0xc0>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	3354      	adds	r3, #84	; 0x54
 800d0f4:	4a08      	ldr	r2, [pc, #32]	; (800d118 <vTaskSwitchContext+0xc4>)
 800d0f6:	6013      	str	r3, [r2, #0]
}
 800d0f8:	bf00      	nop
 800d0fa:	3714      	adds	r7, #20
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d102:	4770      	bx	lr
 800d104:	20005a14 	.word	0x20005a14
 800d108:	20005a00 	.word	0x20005a00
 800d10c:	200059f4 	.word	0x200059f4
 800d110:	2000551c 	.word	0x2000551c
 800d114:	20005518 	.word	0x20005518
 800d118:	200000e8 	.word	0x200000e8

0800d11c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b084      	sub	sp, #16
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
 800d124:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d10a      	bne.n	800d142 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d130:	f383 8811 	msr	BASEPRI, r3
 800d134:	f3bf 8f6f 	isb	sy
 800d138:	f3bf 8f4f 	dsb	sy
 800d13c:	60fb      	str	r3, [r7, #12]
}
 800d13e:	bf00      	nop
 800d140:	e7fe      	b.n	800d140 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d142:	4b07      	ldr	r3, [pc, #28]	; (800d160 <vTaskPlaceOnEventList+0x44>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	3318      	adds	r3, #24
 800d148:	4619      	mov	r1, r3
 800d14a:	6878      	ldr	r0, [r7, #4]
 800d14c:	f7fe fce5 	bl	800bb1a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d150:	2101      	movs	r1, #1
 800d152:	6838      	ldr	r0, [r7, #0]
 800d154:	f000 fba4 	bl	800d8a0 <prvAddCurrentTaskToDelayedList>
}
 800d158:	bf00      	nop
 800d15a:	3710      	adds	r7, #16
 800d15c:	46bd      	mov	sp, r7
 800d15e:	bd80      	pop	{r7, pc}
 800d160:	20005518 	.word	0x20005518

0800d164 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d164:	b580      	push	{r7, lr}
 800d166:	b086      	sub	sp, #24
 800d168:	af00      	add	r7, sp, #0
 800d16a:	60f8      	str	r0, [r7, #12]
 800d16c:	60b9      	str	r1, [r7, #8]
 800d16e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d10a      	bne.n	800d18c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d17a:	f383 8811 	msr	BASEPRI, r3
 800d17e:	f3bf 8f6f 	isb	sy
 800d182:	f3bf 8f4f 	dsb	sy
 800d186:	617b      	str	r3, [r7, #20]
}
 800d188:	bf00      	nop
 800d18a:	e7fe      	b.n	800d18a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d18c:	4b0a      	ldr	r3, [pc, #40]	; (800d1b8 <vTaskPlaceOnEventListRestricted+0x54>)
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	3318      	adds	r3, #24
 800d192:	4619      	mov	r1, r3
 800d194:	68f8      	ldr	r0, [r7, #12]
 800d196:	f7fe fc9c 	bl	800bad2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d002      	beq.n	800d1a6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d1a0:	f04f 33ff 	mov.w	r3, #4294967295
 800d1a4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d1a6:	6879      	ldr	r1, [r7, #4]
 800d1a8:	68b8      	ldr	r0, [r7, #8]
 800d1aa:	f000 fb79 	bl	800d8a0 <prvAddCurrentTaskToDelayedList>
	}
 800d1ae:	bf00      	nop
 800d1b0:	3718      	adds	r7, #24
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	bd80      	pop	{r7, pc}
 800d1b6:	bf00      	nop
 800d1b8:	20005518 	.word	0x20005518

0800d1bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b086      	sub	sp, #24
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	68db      	ldr	r3, [r3, #12]
 800d1c8:	68db      	ldr	r3, [r3, #12]
 800d1ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d1cc:	693b      	ldr	r3, [r7, #16]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d10a      	bne.n	800d1e8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d1d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1d6:	f383 8811 	msr	BASEPRI, r3
 800d1da:	f3bf 8f6f 	isb	sy
 800d1de:	f3bf 8f4f 	dsb	sy
 800d1e2:	60fb      	str	r3, [r7, #12]
}
 800d1e4:	bf00      	nop
 800d1e6:	e7fe      	b.n	800d1e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d1e8:	693b      	ldr	r3, [r7, #16]
 800d1ea:	3318      	adds	r3, #24
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	f7fe fccd 	bl	800bb8c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d1f2:	4b1e      	ldr	r3, [pc, #120]	; (800d26c <xTaskRemoveFromEventList+0xb0>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d11d      	bne.n	800d236 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d1fa:	693b      	ldr	r3, [r7, #16]
 800d1fc:	3304      	adds	r3, #4
 800d1fe:	4618      	mov	r0, r3
 800d200:	f7fe fcc4 	bl	800bb8c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d204:	693b      	ldr	r3, [r7, #16]
 800d206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d208:	4b19      	ldr	r3, [pc, #100]	; (800d270 <xTaskRemoveFromEventList+0xb4>)
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	429a      	cmp	r2, r3
 800d20e:	d903      	bls.n	800d218 <xTaskRemoveFromEventList+0x5c>
 800d210:	693b      	ldr	r3, [r7, #16]
 800d212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d214:	4a16      	ldr	r2, [pc, #88]	; (800d270 <xTaskRemoveFromEventList+0xb4>)
 800d216:	6013      	str	r3, [r2, #0]
 800d218:	693b      	ldr	r3, [r7, #16]
 800d21a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d21c:	4613      	mov	r3, r2
 800d21e:	009b      	lsls	r3, r3, #2
 800d220:	4413      	add	r3, r2
 800d222:	009b      	lsls	r3, r3, #2
 800d224:	4a13      	ldr	r2, [pc, #76]	; (800d274 <xTaskRemoveFromEventList+0xb8>)
 800d226:	441a      	add	r2, r3
 800d228:	693b      	ldr	r3, [r7, #16]
 800d22a:	3304      	adds	r3, #4
 800d22c:	4619      	mov	r1, r3
 800d22e:	4610      	mov	r0, r2
 800d230:	f7fe fc4f 	bl	800bad2 <vListInsertEnd>
 800d234:	e005      	b.n	800d242 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d236:	693b      	ldr	r3, [r7, #16]
 800d238:	3318      	adds	r3, #24
 800d23a:	4619      	mov	r1, r3
 800d23c:	480e      	ldr	r0, [pc, #56]	; (800d278 <xTaskRemoveFromEventList+0xbc>)
 800d23e:	f7fe fc48 	bl	800bad2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d242:	693b      	ldr	r3, [r7, #16]
 800d244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d246:	4b0d      	ldr	r3, [pc, #52]	; (800d27c <xTaskRemoveFromEventList+0xc0>)
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d24c:	429a      	cmp	r2, r3
 800d24e:	d905      	bls.n	800d25c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d250:	2301      	movs	r3, #1
 800d252:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d254:	4b0a      	ldr	r3, [pc, #40]	; (800d280 <xTaskRemoveFromEventList+0xc4>)
 800d256:	2201      	movs	r2, #1
 800d258:	601a      	str	r2, [r3, #0]
 800d25a:	e001      	b.n	800d260 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d25c:	2300      	movs	r3, #0
 800d25e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d260:	697b      	ldr	r3, [r7, #20]
}
 800d262:	4618      	mov	r0, r3
 800d264:	3718      	adds	r7, #24
 800d266:	46bd      	mov	sp, r7
 800d268:	bd80      	pop	{r7, pc}
 800d26a:	bf00      	nop
 800d26c:	20005a14 	.word	0x20005a14
 800d270:	200059f4 	.word	0x200059f4
 800d274:	2000551c 	.word	0x2000551c
 800d278:	200059ac 	.word	0x200059ac
 800d27c:	20005518 	.word	0x20005518
 800d280:	20005a00 	.word	0x20005a00

0800d284 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b084      	sub	sp, #16
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d10a      	bne.n	800d2a8 <vTaskSetTimeOutState+0x24>
	__asm volatile
 800d292:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d296:	f383 8811 	msr	BASEPRI, r3
 800d29a:	f3bf 8f6f 	isb	sy
 800d29e:	f3bf 8f4f 	dsb	sy
 800d2a2:	60fb      	str	r3, [r7, #12]
}
 800d2a4:	bf00      	nop
 800d2a6:	e7fe      	b.n	800d2a6 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800d2a8:	f000 ffcc 	bl	800e244 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d2ac:	4b06      	ldr	r3, [pc, #24]	; (800d2c8 <vTaskSetTimeOutState+0x44>)
 800d2ae:	681a      	ldr	r2, [r3, #0]
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800d2b4:	4b05      	ldr	r3, [pc, #20]	; (800d2cc <vTaskSetTimeOutState+0x48>)
 800d2b6:	681a      	ldr	r2, [r3, #0]
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800d2bc:	f000 fff2 	bl	800e2a4 <vPortExitCritical>
}
 800d2c0:	bf00      	nop
 800d2c2:	3710      	adds	r7, #16
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	bd80      	pop	{r7, pc}
 800d2c8:	20005a04 	.word	0x20005a04
 800d2cc:	200059f0 	.word	0x200059f0

0800d2d0 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d2d0:	b480      	push	{r7}
 800d2d2:	b083      	sub	sp, #12
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d2d8:	4b06      	ldr	r3, [pc, #24]	; (800d2f4 <vTaskInternalSetTimeOutState+0x24>)
 800d2da:	681a      	ldr	r2, [r3, #0]
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d2e0:	4b05      	ldr	r3, [pc, #20]	; (800d2f8 <vTaskInternalSetTimeOutState+0x28>)
 800d2e2:	681a      	ldr	r2, [r3, #0]
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	605a      	str	r2, [r3, #4]
}
 800d2e8:	bf00      	nop
 800d2ea:	370c      	adds	r7, #12
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f2:	4770      	bx	lr
 800d2f4:	20005a04 	.word	0x20005a04
 800d2f8:	200059f0 	.word	0x200059f0

0800d2fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b088      	sub	sp, #32
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
 800d304:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d10a      	bne.n	800d322 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d310:	f383 8811 	msr	BASEPRI, r3
 800d314:	f3bf 8f6f 	isb	sy
 800d318:	f3bf 8f4f 	dsb	sy
 800d31c:	613b      	str	r3, [r7, #16]
}
 800d31e:	bf00      	nop
 800d320:	e7fe      	b.n	800d320 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d10a      	bne.n	800d33e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d32c:	f383 8811 	msr	BASEPRI, r3
 800d330:	f3bf 8f6f 	isb	sy
 800d334:	f3bf 8f4f 	dsb	sy
 800d338:	60fb      	str	r3, [r7, #12]
}
 800d33a:	bf00      	nop
 800d33c:	e7fe      	b.n	800d33c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d33e:	f000 ff81 	bl	800e244 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d342:	4b1d      	ldr	r3, [pc, #116]	; (800d3b8 <xTaskCheckForTimeOut+0xbc>)
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	685b      	ldr	r3, [r3, #4]
 800d34c:	69ba      	ldr	r2, [r7, #24]
 800d34e:	1ad3      	subs	r3, r2, r3
 800d350:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d35a:	d102      	bne.n	800d362 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d35c:	2300      	movs	r3, #0
 800d35e:	61fb      	str	r3, [r7, #28]
 800d360:	e023      	b.n	800d3aa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681a      	ldr	r2, [r3, #0]
 800d366:	4b15      	ldr	r3, [pc, #84]	; (800d3bc <xTaskCheckForTimeOut+0xc0>)
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	429a      	cmp	r2, r3
 800d36c:	d007      	beq.n	800d37e <xTaskCheckForTimeOut+0x82>
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	685b      	ldr	r3, [r3, #4]
 800d372:	69ba      	ldr	r2, [r7, #24]
 800d374:	429a      	cmp	r2, r3
 800d376:	d302      	bcc.n	800d37e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d378:	2301      	movs	r3, #1
 800d37a:	61fb      	str	r3, [r7, #28]
 800d37c:	e015      	b.n	800d3aa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	697a      	ldr	r2, [r7, #20]
 800d384:	429a      	cmp	r2, r3
 800d386:	d20b      	bcs.n	800d3a0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	681a      	ldr	r2, [r3, #0]
 800d38c:	697b      	ldr	r3, [r7, #20]
 800d38e:	1ad2      	subs	r2, r2, r3
 800d390:	683b      	ldr	r3, [r7, #0]
 800d392:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d394:	6878      	ldr	r0, [r7, #4]
 800d396:	f7ff ff9b 	bl	800d2d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d39a:	2300      	movs	r3, #0
 800d39c:	61fb      	str	r3, [r7, #28]
 800d39e:	e004      	b.n	800d3aa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d3a6:	2301      	movs	r3, #1
 800d3a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d3aa:	f000 ff7b 	bl	800e2a4 <vPortExitCritical>

	return xReturn;
 800d3ae:	69fb      	ldr	r3, [r7, #28]
}
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	3720      	adds	r7, #32
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}
 800d3b8:	200059f0 	.word	0x200059f0
 800d3bc:	20005a04 	.word	0x20005a04

0800d3c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d3c0:	b480      	push	{r7}
 800d3c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d3c4:	4b03      	ldr	r3, [pc, #12]	; (800d3d4 <vTaskMissedYield+0x14>)
 800d3c6:	2201      	movs	r2, #1
 800d3c8:	601a      	str	r2, [r3, #0]
}
 800d3ca:	bf00      	nop
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d2:	4770      	bx	lr
 800d3d4:	20005a00 	.word	0x20005a00

0800d3d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b082      	sub	sp, #8
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d3e0:	f000 f852 	bl	800d488 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d3e4:	4b06      	ldr	r3, [pc, #24]	; (800d400 <prvIdleTask+0x28>)
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	2b01      	cmp	r3, #1
 800d3ea:	d9f9      	bls.n	800d3e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d3ec:	4b05      	ldr	r3, [pc, #20]	; (800d404 <prvIdleTask+0x2c>)
 800d3ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3f2:	601a      	str	r2, [r3, #0]
 800d3f4:	f3bf 8f4f 	dsb	sy
 800d3f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d3fc:	e7f0      	b.n	800d3e0 <prvIdleTask+0x8>
 800d3fe:	bf00      	nop
 800d400:	2000551c 	.word	0x2000551c
 800d404:	e000ed04 	.word	0xe000ed04

0800d408 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b082      	sub	sp, #8
 800d40c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d40e:	2300      	movs	r3, #0
 800d410:	607b      	str	r3, [r7, #4]
 800d412:	e00c      	b.n	800d42e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d414:	687a      	ldr	r2, [r7, #4]
 800d416:	4613      	mov	r3, r2
 800d418:	009b      	lsls	r3, r3, #2
 800d41a:	4413      	add	r3, r2
 800d41c:	009b      	lsls	r3, r3, #2
 800d41e:	4a12      	ldr	r2, [pc, #72]	; (800d468 <prvInitialiseTaskLists+0x60>)
 800d420:	4413      	add	r3, r2
 800d422:	4618      	mov	r0, r3
 800d424:	f7fe fb28 	bl	800ba78 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	3301      	adds	r3, #1
 800d42c:	607b      	str	r3, [r7, #4]
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	2b37      	cmp	r3, #55	; 0x37
 800d432:	d9ef      	bls.n	800d414 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d434:	480d      	ldr	r0, [pc, #52]	; (800d46c <prvInitialiseTaskLists+0x64>)
 800d436:	f7fe fb1f 	bl	800ba78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d43a:	480d      	ldr	r0, [pc, #52]	; (800d470 <prvInitialiseTaskLists+0x68>)
 800d43c:	f7fe fb1c 	bl	800ba78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d440:	480c      	ldr	r0, [pc, #48]	; (800d474 <prvInitialiseTaskLists+0x6c>)
 800d442:	f7fe fb19 	bl	800ba78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d446:	480c      	ldr	r0, [pc, #48]	; (800d478 <prvInitialiseTaskLists+0x70>)
 800d448:	f7fe fb16 	bl	800ba78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d44c:	480b      	ldr	r0, [pc, #44]	; (800d47c <prvInitialiseTaskLists+0x74>)
 800d44e:	f7fe fb13 	bl	800ba78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d452:	4b0b      	ldr	r3, [pc, #44]	; (800d480 <prvInitialiseTaskLists+0x78>)
 800d454:	4a05      	ldr	r2, [pc, #20]	; (800d46c <prvInitialiseTaskLists+0x64>)
 800d456:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d458:	4b0a      	ldr	r3, [pc, #40]	; (800d484 <prvInitialiseTaskLists+0x7c>)
 800d45a:	4a05      	ldr	r2, [pc, #20]	; (800d470 <prvInitialiseTaskLists+0x68>)
 800d45c:	601a      	str	r2, [r3, #0]
}
 800d45e:	bf00      	nop
 800d460:	3708      	adds	r7, #8
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}
 800d466:	bf00      	nop
 800d468:	2000551c 	.word	0x2000551c
 800d46c:	2000597c 	.word	0x2000597c
 800d470:	20005990 	.word	0x20005990
 800d474:	200059ac 	.word	0x200059ac
 800d478:	200059c0 	.word	0x200059c0
 800d47c:	200059d8 	.word	0x200059d8
 800d480:	200059a4 	.word	0x200059a4
 800d484:	200059a8 	.word	0x200059a8

0800d488 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b082      	sub	sp, #8
 800d48c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d48e:	e019      	b.n	800d4c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d490:	f000 fed8 	bl	800e244 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d494:	4b10      	ldr	r3, [pc, #64]	; (800d4d8 <prvCheckTasksWaitingTermination+0x50>)
 800d496:	68db      	ldr	r3, [r3, #12]
 800d498:	68db      	ldr	r3, [r3, #12]
 800d49a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	3304      	adds	r3, #4
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f7fe fb73 	bl	800bb8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d4a6:	4b0d      	ldr	r3, [pc, #52]	; (800d4dc <prvCheckTasksWaitingTermination+0x54>)
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	3b01      	subs	r3, #1
 800d4ac:	4a0b      	ldr	r2, [pc, #44]	; (800d4dc <prvCheckTasksWaitingTermination+0x54>)
 800d4ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d4b0:	4b0b      	ldr	r3, [pc, #44]	; (800d4e0 <prvCheckTasksWaitingTermination+0x58>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	3b01      	subs	r3, #1
 800d4b6:	4a0a      	ldr	r2, [pc, #40]	; (800d4e0 <prvCheckTasksWaitingTermination+0x58>)
 800d4b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d4ba:	f000 fef3 	bl	800e2a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d4be:	6878      	ldr	r0, [r7, #4]
 800d4c0:	f000 f810 	bl	800d4e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d4c4:	4b06      	ldr	r3, [pc, #24]	; (800d4e0 <prvCheckTasksWaitingTermination+0x58>)
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d1e1      	bne.n	800d490 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d4cc:	bf00      	nop
 800d4ce:	bf00      	nop
 800d4d0:	3708      	adds	r7, #8
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bd80      	pop	{r7, pc}
 800d4d6:	bf00      	nop
 800d4d8:	200059c0 	.word	0x200059c0
 800d4dc:	200059ec 	.word	0x200059ec
 800d4e0:	200059d4 	.word	0x200059d4

0800d4e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b084      	sub	sp, #16
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	3354      	adds	r3, #84	; 0x54
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	f00d f83f 	bl	801a574 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d108      	bne.n	800d512 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d504:	4618      	mov	r0, r3
 800d506:	f001 f88b 	bl	800e620 <vPortFree>
				vPortFree( pxTCB );
 800d50a:	6878      	ldr	r0, [r7, #4]
 800d50c:	f001 f888 	bl	800e620 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d510:	e018      	b.n	800d544 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800d518:	2b01      	cmp	r3, #1
 800d51a:	d103      	bne.n	800d524 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d51c:	6878      	ldr	r0, [r7, #4]
 800d51e:	f001 f87f 	bl	800e620 <vPortFree>
	}
 800d522:	e00f      	b.n	800d544 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800d52a:	2b02      	cmp	r3, #2
 800d52c:	d00a      	beq.n	800d544 <prvDeleteTCB+0x60>
	__asm volatile
 800d52e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d532:	f383 8811 	msr	BASEPRI, r3
 800d536:	f3bf 8f6f 	isb	sy
 800d53a:	f3bf 8f4f 	dsb	sy
 800d53e:	60fb      	str	r3, [r7, #12]
}
 800d540:	bf00      	nop
 800d542:	e7fe      	b.n	800d542 <prvDeleteTCB+0x5e>
	}
 800d544:	bf00      	nop
 800d546:	3710      	adds	r7, #16
 800d548:	46bd      	mov	sp, r7
 800d54a:	bd80      	pop	{r7, pc}

0800d54c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d54c:	b480      	push	{r7}
 800d54e:	b083      	sub	sp, #12
 800d550:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d552:	4b0c      	ldr	r3, [pc, #48]	; (800d584 <prvResetNextTaskUnblockTime+0x38>)
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d104      	bne.n	800d566 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d55c:	4b0a      	ldr	r3, [pc, #40]	; (800d588 <prvResetNextTaskUnblockTime+0x3c>)
 800d55e:	f04f 32ff 	mov.w	r2, #4294967295
 800d562:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d564:	e008      	b.n	800d578 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d566:	4b07      	ldr	r3, [pc, #28]	; (800d584 <prvResetNextTaskUnblockTime+0x38>)
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	68db      	ldr	r3, [r3, #12]
 800d56c:	68db      	ldr	r3, [r3, #12]
 800d56e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	685b      	ldr	r3, [r3, #4]
 800d574:	4a04      	ldr	r2, [pc, #16]	; (800d588 <prvResetNextTaskUnblockTime+0x3c>)
 800d576:	6013      	str	r3, [r2, #0]
}
 800d578:	bf00      	nop
 800d57a:	370c      	adds	r7, #12
 800d57c:	46bd      	mov	sp, r7
 800d57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d582:	4770      	bx	lr
 800d584:	200059a4 	.word	0x200059a4
 800d588:	20005a0c 	.word	0x20005a0c

0800d58c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d58c:	b480      	push	{r7}
 800d58e:	b083      	sub	sp, #12
 800d590:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d592:	4b0b      	ldr	r3, [pc, #44]	; (800d5c0 <xTaskGetSchedulerState+0x34>)
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d102      	bne.n	800d5a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d59a:	2301      	movs	r3, #1
 800d59c:	607b      	str	r3, [r7, #4]
 800d59e:	e008      	b.n	800d5b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d5a0:	4b08      	ldr	r3, [pc, #32]	; (800d5c4 <xTaskGetSchedulerState+0x38>)
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d102      	bne.n	800d5ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d5a8:	2302      	movs	r3, #2
 800d5aa:	607b      	str	r3, [r7, #4]
 800d5ac:	e001      	b.n	800d5b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d5b2:	687b      	ldr	r3, [r7, #4]
	}
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	370c      	adds	r7, #12
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5be:	4770      	bx	lr
 800d5c0:	200059f8 	.word	0x200059f8
 800d5c4:	20005a14 	.word	0x20005a14

0800d5c8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b084      	sub	sp, #16
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d051      	beq.n	800d682 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d5de:	68bb      	ldr	r3, [r7, #8]
 800d5e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5e2:	4b2a      	ldr	r3, [pc, #168]	; (800d68c <xTaskPriorityInherit+0xc4>)
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5e8:	429a      	cmp	r2, r3
 800d5ea:	d241      	bcs.n	800d670 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d5ec:	68bb      	ldr	r3, [r7, #8]
 800d5ee:	699b      	ldr	r3, [r3, #24]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	db06      	blt.n	800d602 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5f4:	4b25      	ldr	r3, [pc, #148]	; (800d68c <xTaskPriorityInherit+0xc4>)
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d5fe:	68bb      	ldr	r3, [r7, #8]
 800d600:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d602:	68bb      	ldr	r3, [r7, #8]
 800d604:	6959      	ldr	r1, [r3, #20]
 800d606:	68bb      	ldr	r3, [r7, #8]
 800d608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d60a:	4613      	mov	r3, r2
 800d60c:	009b      	lsls	r3, r3, #2
 800d60e:	4413      	add	r3, r2
 800d610:	009b      	lsls	r3, r3, #2
 800d612:	4a1f      	ldr	r2, [pc, #124]	; (800d690 <xTaskPriorityInherit+0xc8>)
 800d614:	4413      	add	r3, r2
 800d616:	4299      	cmp	r1, r3
 800d618:	d122      	bne.n	800d660 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	3304      	adds	r3, #4
 800d61e:	4618      	mov	r0, r3
 800d620:	f7fe fab4 	bl	800bb8c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d624:	4b19      	ldr	r3, [pc, #100]	; (800d68c <xTaskPriorityInherit+0xc4>)
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d62a:	68bb      	ldr	r3, [r7, #8]
 800d62c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d62e:	68bb      	ldr	r3, [r7, #8]
 800d630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d632:	4b18      	ldr	r3, [pc, #96]	; (800d694 <xTaskPriorityInherit+0xcc>)
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	429a      	cmp	r2, r3
 800d638:	d903      	bls.n	800d642 <xTaskPriorityInherit+0x7a>
 800d63a:	68bb      	ldr	r3, [r7, #8]
 800d63c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d63e:	4a15      	ldr	r2, [pc, #84]	; (800d694 <xTaskPriorityInherit+0xcc>)
 800d640:	6013      	str	r3, [r2, #0]
 800d642:	68bb      	ldr	r3, [r7, #8]
 800d644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d646:	4613      	mov	r3, r2
 800d648:	009b      	lsls	r3, r3, #2
 800d64a:	4413      	add	r3, r2
 800d64c:	009b      	lsls	r3, r3, #2
 800d64e:	4a10      	ldr	r2, [pc, #64]	; (800d690 <xTaskPriorityInherit+0xc8>)
 800d650:	441a      	add	r2, r3
 800d652:	68bb      	ldr	r3, [r7, #8]
 800d654:	3304      	adds	r3, #4
 800d656:	4619      	mov	r1, r3
 800d658:	4610      	mov	r0, r2
 800d65a:	f7fe fa3a 	bl	800bad2 <vListInsertEnd>
 800d65e:	e004      	b.n	800d66a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d660:	4b0a      	ldr	r3, [pc, #40]	; (800d68c <xTaskPriorityInherit+0xc4>)
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d666:	68bb      	ldr	r3, [r7, #8]
 800d668:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d66a:	2301      	movs	r3, #1
 800d66c:	60fb      	str	r3, [r7, #12]
 800d66e:	e008      	b.n	800d682 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d670:	68bb      	ldr	r3, [r7, #8]
 800d672:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d674:	4b05      	ldr	r3, [pc, #20]	; (800d68c <xTaskPriorityInherit+0xc4>)
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d67a:	429a      	cmp	r2, r3
 800d67c:	d201      	bcs.n	800d682 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d67e:	2301      	movs	r3, #1
 800d680:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d682:	68fb      	ldr	r3, [r7, #12]
	}
 800d684:	4618      	mov	r0, r3
 800d686:	3710      	adds	r7, #16
 800d688:	46bd      	mov	sp, r7
 800d68a:	bd80      	pop	{r7, pc}
 800d68c:	20005518 	.word	0x20005518
 800d690:	2000551c 	.word	0x2000551c
 800d694:	200059f4 	.word	0x200059f4

0800d698 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b086      	sub	sp, #24
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d056      	beq.n	800d75c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d6ae:	4b2e      	ldr	r3, [pc, #184]	; (800d768 <xTaskPriorityDisinherit+0xd0>)
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	693a      	ldr	r2, [r7, #16]
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	d00a      	beq.n	800d6ce <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d6b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6bc:	f383 8811 	msr	BASEPRI, r3
 800d6c0:	f3bf 8f6f 	isb	sy
 800d6c4:	f3bf 8f4f 	dsb	sy
 800d6c8:	60fb      	str	r3, [r7, #12]
}
 800d6ca:	bf00      	nop
 800d6cc:	e7fe      	b.n	800d6cc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d6ce:	693b      	ldr	r3, [r7, #16]
 800d6d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d10a      	bne.n	800d6ec <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d6d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6da:	f383 8811 	msr	BASEPRI, r3
 800d6de:	f3bf 8f6f 	isb	sy
 800d6e2:	f3bf 8f4f 	dsb	sy
 800d6e6:	60bb      	str	r3, [r7, #8]
}
 800d6e8:	bf00      	nop
 800d6ea:	e7fe      	b.n	800d6ea <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d6ec:	693b      	ldr	r3, [r7, #16]
 800d6ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d6f0:	1e5a      	subs	r2, r3, #1
 800d6f2:	693b      	ldr	r3, [r7, #16]
 800d6f4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d6f6:	693b      	ldr	r3, [r7, #16]
 800d6f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6fa:	693b      	ldr	r3, [r7, #16]
 800d6fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d6fe:	429a      	cmp	r2, r3
 800d700:	d02c      	beq.n	800d75c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d702:	693b      	ldr	r3, [r7, #16]
 800d704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d706:	2b00      	cmp	r3, #0
 800d708:	d128      	bne.n	800d75c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d70a:	693b      	ldr	r3, [r7, #16]
 800d70c:	3304      	adds	r3, #4
 800d70e:	4618      	mov	r0, r3
 800d710:	f7fe fa3c 	bl	800bb8c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d714:	693b      	ldr	r3, [r7, #16]
 800d716:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d718:	693b      	ldr	r3, [r7, #16]
 800d71a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d71c:	693b      	ldr	r3, [r7, #16]
 800d71e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d720:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d724:	693b      	ldr	r3, [r7, #16]
 800d726:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d728:	693b      	ldr	r3, [r7, #16]
 800d72a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d72c:	4b0f      	ldr	r3, [pc, #60]	; (800d76c <xTaskPriorityDisinherit+0xd4>)
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	429a      	cmp	r2, r3
 800d732:	d903      	bls.n	800d73c <xTaskPriorityDisinherit+0xa4>
 800d734:	693b      	ldr	r3, [r7, #16]
 800d736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d738:	4a0c      	ldr	r2, [pc, #48]	; (800d76c <xTaskPriorityDisinherit+0xd4>)
 800d73a:	6013      	str	r3, [r2, #0]
 800d73c:	693b      	ldr	r3, [r7, #16]
 800d73e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d740:	4613      	mov	r3, r2
 800d742:	009b      	lsls	r3, r3, #2
 800d744:	4413      	add	r3, r2
 800d746:	009b      	lsls	r3, r3, #2
 800d748:	4a09      	ldr	r2, [pc, #36]	; (800d770 <xTaskPriorityDisinherit+0xd8>)
 800d74a:	441a      	add	r2, r3
 800d74c:	693b      	ldr	r3, [r7, #16]
 800d74e:	3304      	adds	r3, #4
 800d750:	4619      	mov	r1, r3
 800d752:	4610      	mov	r0, r2
 800d754:	f7fe f9bd 	bl	800bad2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d758:	2301      	movs	r3, #1
 800d75a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d75c:	697b      	ldr	r3, [r7, #20]
	}
 800d75e:	4618      	mov	r0, r3
 800d760:	3718      	adds	r7, #24
 800d762:	46bd      	mov	sp, r7
 800d764:	bd80      	pop	{r7, pc}
 800d766:	bf00      	nop
 800d768:	20005518 	.word	0x20005518
 800d76c:	200059f4 	.word	0x200059f4
 800d770:	2000551c 	.word	0x2000551c

0800d774 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d774:	b580      	push	{r7, lr}
 800d776:	b088      	sub	sp, #32
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
 800d77c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d782:	2301      	movs	r3, #1
 800d784:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d06a      	beq.n	800d862 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d78c:	69bb      	ldr	r3, [r7, #24]
 800d78e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d790:	2b00      	cmp	r3, #0
 800d792:	d10a      	bne.n	800d7aa <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d794:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d798:	f383 8811 	msr	BASEPRI, r3
 800d79c:	f3bf 8f6f 	isb	sy
 800d7a0:	f3bf 8f4f 	dsb	sy
 800d7a4:	60fb      	str	r3, [r7, #12]
}
 800d7a6:	bf00      	nop
 800d7a8:	e7fe      	b.n	800d7a8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d7aa:	69bb      	ldr	r3, [r7, #24]
 800d7ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7ae:	683a      	ldr	r2, [r7, #0]
 800d7b0:	429a      	cmp	r2, r3
 800d7b2:	d902      	bls.n	800d7ba <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d7b4:	683b      	ldr	r3, [r7, #0]
 800d7b6:	61fb      	str	r3, [r7, #28]
 800d7b8:	e002      	b.n	800d7c0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d7ba:	69bb      	ldr	r3, [r7, #24]
 800d7bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7be:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d7c0:	69bb      	ldr	r3, [r7, #24]
 800d7c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7c4:	69fa      	ldr	r2, [r7, #28]
 800d7c6:	429a      	cmp	r2, r3
 800d7c8:	d04b      	beq.n	800d862 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d7ca:	69bb      	ldr	r3, [r7, #24]
 800d7cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7ce:	697a      	ldr	r2, [r7, #20]
 800d7d0:	429a      	cmp	r2, r3
 800d7d2:	d146      	bne.n	800d862 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d7d4:	4b25      	ldr	r3, [pc, #148]	; (800d86c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	69ba      	ldr	r2, [r7, #24]
 800d7da:	429a      	cmp	r2, r3
 800d7dc:	d10a      	bne.n	800d7f4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7e2:	f383 8811 	msr	BASEPRI, r3
 800d7e6:	f3bf 8f6f 	isb	sy
 800d7ea:	f3bf 8f4f 	dsb	sy
 800d7ee:	60bb      	str	r3, [r7, #8]
}
 800d7f0:	bf00      	nop
 800d7f2:	e7fe      	b.n	800d7f2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d7f4:	69bb      	ldr	r3, [r7, #24]
 800d7f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7f8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d7fa:	69bb      	ldr	r3, [r7, #24]
 800d7fc:	69fa      	ldr	r2, [r7, #28]
 800d7fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d800:	69bb      	ldr	r3, [r7, #24]
 800d802:	699b      	ldr	r3, [r3, #24]
 800d804:	2b00      	cmp	r3, #0
 800d806:	db04      	blt.n	800d812 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d808:	69fb      	ldr	r3, [r7, #28]
 800d80a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d80e:	69bb      	ldr	r3, [r7, #24]
 800d810:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d812:	69bb      	ldr	r3, [r7, #24]
 800d814:	6959      	ldr	r1, [r3, #20]
 800d816:	693a      	ldr	r2, [r7, #16]
 800d818:	4613      	mov	r3, r2
 800d81a:	009b      	lsls	r3, r3, #2
 800d81c:	4413      	add	r3, r2
 800d81e:	009b      	lsls	r3, r3, #2
 800d820:	4a13      	ldr	r2, [pc, #76]	; (800d870 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d822:	4413      	add	r3, r2
 800d824:	4299      	cmp	r1, r3
 800d826:	d11c      	bne.n	800d862 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d828:	69bb      	ldr	r3, [r7, #24]
 800d82a:	3304      	adds	r3, #4
 800d82c:	4618      	mov	r0, r3
 800d82e:	f7fe f9ad 	bl	800bb8c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d832:	69bb      	ldr	r3, [r7, #24]
 800d834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d836:	4b0f      	ldr	r3, [pc, #60]	; (800d874 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	429a      	cmp	r2, r3
 800d83c:	d903      	bls.n	800d846 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800d83e:	69bb      	ldr	r3, [r7, #24]
 800d840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d842:	4a0c      	ldr	r2, [pc, #48]	; (800d874 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d844:	6013      	str	r3, [r2, #0]
 800d846:	69bb      	ldr	r3, [r7, #24]
 800d848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d84a:	4613      	mov	r3, r2
 800d84c:	009b      	lsls	r3, r3, #2
 800d84e:	4413      	add	r3, r2
 800d850:	009b      	lsls	r3, r3, #2
 800d852:	4a07      	ldr	r2, [pc, #28]	; (800d870 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d854:	441a      	add	r2, r3
 800d856:	69bb      	ldr	r3, [r7, #24]
 800d858:	3304      	adds	r3, #4
 800d85a:	4619      	mov	r1, r3
 800d85c:	4610      	mov	r0, r2
 800d85e:	f7fe f938 	bl	800bad2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d862:	bf00      	nop
 800d864:	3720      	adds	r7, #32
 800d866:	46bd      	mov	sp, r7
 800d868:	bd80      	pop	{r7, pc}
 800d86a:	bf00      	nop
 800d86c:	20005518 	.word	0x20005518
 800d870:	2000551c 	.word	0x2000551c
 800d874:	200059f4 	.word	0x200059f4

0800d878 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d878:	b480      	push	{r7}
 800d87a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d87c:	4b07      	ldr	r3, [pc, #28]	; (800d89c <pvTaskIncrementMutexHeldCount+0x24>)
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d004      	beq.n	800d88e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d884:	4b05      	ldr	r3, [pc, #20]	; (800d89c <pvTaskIncrementMutexHeldCount+0x24>)
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d88a:	3201      	adds	r2, #1
 800d88c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800d88e:	4b03      	ldr	r3, [pc, #12]	; (800d89c <pvTaskIncrementMutexHeldCount+0x24>)
 800d890:	681b      	ldr	r3, [r3, #0]
	}
 800d892:	4618      	mov	r0, r3
 800d894:	46bd      	mov	sp, r7
 800d896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89a:	4770      	bx	lr
 800d89c:	20005518 	.word	0x20005518

0800d8a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b084      	sub	sp, #16
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
 800d8a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d8aa:	4b21      	ldr	r3, [pc, #132]	; (800d930 <prvAddCurrentTaskToDelayedList+0x90>)
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d8b0:	4b20      	ldr	r3, [pc, #128]	; (800d934 <prvAddCurrentTaskToDelayedList+0x94>)
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	3304      	adds	r3, #4
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	f7fe f968 	bl	800bb8c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8c2:	d10a      	bne.n	800d8da <prvAddCurrentTaskToDelayedList+0x3a>
 800d8c4:	683b      	ldr	r3, [r7, #0]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d007      	beq.n	800d8da <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d8ca:	4b1a      	ldr	r3, [pc, #104]	; (800d934 <prvAddCurrentTaskToDelayedList+0x94>)
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	3304      	adds	r3, #4
 800d8d0:	4619      	mov	r1, r3
 800d8d2:	4819      	ldr	r0, [pc, #100]	; (800d938 <prvAddCurrentTaskToDelayedList+0x98>)
 800d8d4:	f7fe f8fd 	bl	800bad2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d8d8:	e026      	b.n	800d928 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d8da:	68fa      	ldr	r2, [r7, #12]
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	4413      	add	r3, r2
 800d8e0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d8e2:	4b14      	ldr	r3, [pc, #80]	; (800d934 <prvAddCurrentTaskToDelayedList+0x94>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	68ba      	ldr	r2, [r7, #8]
 800d8e8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d8ea:	68ba      	ldr	r2, [r7, #8]
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	429a      	cmp	r2, r3
 800d8f0:	d209      	bcs.n	800d906 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d8f2:	4b12      	ldr	r3, [pc, #72]	; (800d93c <prvAddCurrentTaskToDelayedList+0x9c>)
 800d8f4:	681a      	ldr	r2, [r3, #0]
 800d8f6:	4b0f      	ldr	r3, [pc, #60]	; (800d934 <prvAddCurrentTaskToDelayedList+0x94>)
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	3304      	adds	r3, #4
 800d8fc:	4619      	mov	r1, r3
 800d8fe:	4610      	mov	r0, r2
 800d900:	f7fe f90b 	bl	800bb1a <vListInsert>
}
 800d904:	e010      	b.n	800d928 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d906:	4b0e      	ldr	r3, [pc, #56]	; (800d940 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d908:	681a      	ldr	r2, [r3, #0]
 800d90a:	4b0a      	ldr	r3, [pc, #40]	; (800d934 <prvAddCurrentTaskToDelayedList+0x94>)
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	3304      	adds	r3, #4
 800d910:	4619      	mov	r1, r3
 800d912:	4610      	mov	r0, r2
 800d914:	f7fe f901 	bl	800bb1a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d918:	4b0a      	ldr	r3, [pc, #40]	; (800d944 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	68ba      	ldr	r2, [r7, #8]
 800d91e:	429a      	cmp	r2, r3
 800d920:	d202      	bcs.n	800d928 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d922:	4a08      	ldr	r2, [pc, #32]	; (800d944 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d924:	68bb      	ldr	r3, [r7, #8]
 800d926:	6013      	str	r3, [r2, #0]
}
 800d928:	bf00      	nop
 800d92a:	3710      	adds	r7, #16
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bd80      	pop	{r7, pc}
 800d930:	200059f0 	.word	0x200059f0
 800d934:	20005518 	.word	0x20005518
 800d938:	200059d8 	.word	0x200059d8
 800d93c:	200059a8 	.word	0x200059a8
 800d940:	200059a4 	.word	0x200059a4
 800d944:	20005a0c 	.word	0x20005a0c

0800d948 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b08a      	sub	sp, #40	; 0x28
 800d94c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d94e:	2300      	movs	r3, #0
 800d950:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d952:	f000 fb07 	bl	800df64 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d956:	4b1c      	ldr	r3, [pc, #112]	; (800d9c8 <xTimerCreateTimerTask+0x80>)
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d021      	beq.n	800d9a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d95e:	2300      	movs	r3, #0
 800d960:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d962:	2300      	movs	r3, #0
 800d964:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d966:	1d3a      	adds	r2, r7, #4
 800d968:	f107 0108 	add.w	r1, r7, #8
 800d96c:	f107 030c 	add.w	r3, r7, #12
 800d970:	4618      	mov	r0, r3
 800d972:	f7fe f867 	bl	800ba44 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d976:	6879      	ldr	r1, [r7, #4]
 800d978:	68bb      	ldr	r3, [r7, #8]
 800d97a:	68fa      	ldr	r2, [r7, #12]
 800d97c:	9202      	str	r2, [sp, #8]
 800d97e:	9301      	str	r3, [sp, #4]
 800d980:	2302      	movs	r3, #2
 800d982:	9300      	str	r3, [sp, #0]
 800d984:	2300      	movs	r3, #0
 800d986:	460a      	mov	r2, r1
 800d988:	4910      	ldr	r1, [pc, #64]	; (800d9cc <xTimerCreateTimerTask+0x84>)
 800d98a:	4811      	ldr	r0, [pc, #68]	; (800d9d0 <xTimerCreateTimerTask+0x88>)
 800d98c:	f7fe ff90 	bl	800c8b0 <xTaskCreateStatic>
 800d990:	4603      	mov	r3, r0
 800d992:	4a10      	ldr	r2, [pc, #64]	; (800d9d4 <xTimerCreateTimerTask+0x8c>)
 800d994:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d996:	4b0f      	ldr	r3, [pc, #60]	; (800d9d4 <xTimerCreateTimerTask+0x8c>)
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d001      	beq.n	800d9a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d99e:	2301      	movs	r3, #1
 800d9a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d9a2:	697b      	ldr	r3, [r7, #20]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d10a      	bne.n	800d9be <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9ac:	f383 8811 	msr	BASEPRI, r3
 800d9b0:	f3bf 8f6f 	isb	sy
 800d9b4:	f3bf 8f4f 	dsb	sy
 800d9b8:	613b      	str	r3, [r7, #16]
}
 800d9ba:	bf00      	nop
 800d9bc:	e7fe      	b.n	800d9bc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d9be:	697b      	ldr	r3, [r7, #20]
}
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	3718      	adds	r7, #24
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	bd80      	pop	{r7, pc}
 800d9c8:	20005a48 	.word	0x20005a48
 800d9cc:	0801b794 	.word	0x0801b794
 800d9d0:	0800db0d 	.word	0x0800db0d
 800d9d4:	20005a4c 	.word	0x20005a4c

0800d9d8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b08a      	sub	sp, #40	; 0x28
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	60f8      	str	r0, [r7, #12]
 800d9e0:	60b9      	str	r1, [r7, #8]
 800d9e2:	607a      	str	r2, [r7, #4]
 800d9e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d10a      	bne.n	800da06 <xTimerGenericCommand+0x2e>
	__asm volatile
 800d9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9f4:	f383 8811 	msr	BASEPRI, r3
 800d9f8:	f3bf 8f6f 	isb	sy
 800d9fc:	f3bf 8f4f 	dsb	sy
 800da00:	623b      	str	r3, [r7, #32]
}
 800da02:	bf00      	nop
 800da04:	e7fe      	b.n	800da04 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800da06:	4b1a      	ldr	r3, [pc, #104]	; (800da70 <xTimerGenericCommand+0x98>)
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d02a      	beq.n	800da64 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800da0e:	68bb      	ldr	r3, [r7, #8]
 800da10:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800da1a:	68bb      	ldr	r3, [r7, #8]
 800da1c:	2b05      	cmp	r3, #5
 800da1e:	dc18      	bgt.n	800da52 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800da20:	f7ff fdb4 	bl	800d58c <xTaskGetSchedulerState>
 800da24:	4603      	mov	r3, r0
 800da26:	2b02      	cmp	r3, #2
 800da28:	d109      	bne.n	800da3e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800da2a:	4b11      	ldr	r3, [pc, #68]	; (800da70 <xTimerGenericCommand+0x98>)
 800da2c:	6818      	ldr	r0, [r3, #0]
 800da2e:	f107 0110 	add.w	r1, r7, #16
 800da32:	2300      	movs	r3, #0
 800da34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da36:	f7fe fa11 	bl	800be5c <xQueueGenericSend>
 800da3a:	6278      	str	r0, [r7, #36]	; 0x24
 800da3c:	e012      	b.n	800da64 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800da3e:	4b0c      	ldr	r3, [pc, #48]	; (800da70 <xTimerGenericCommand+0x98>)
 800da40:	6818      	ldr	r0, [r3, #0]
 800da42:	f107 0110 	add.w	r1, r7, #16
 800da46:	2300      	movs	r3, #0
 800da48:	2200      	movs	r2, #0
 800da4a:	f7fe fa07 	bl	800be5c <xQueueGenericSend>
 800da4e:	6278      	str	r0, [r7, #36]	; 0x24
 800da50:	e008      	b.n	800da64 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800da52:	4b07      	ldr	r3, [pc, #28]	; (800da70 <xTimerGenericCommand+0x98>)
 800da54:	6818      	ldr	r0, [r3, #0]
 800da56:	f107 0110 	add.w	r1, r7, #16
 800da5a:	2300      	movs	r3, #0
 800da5c:	683a      	ldr	r2, [r7, #0]
 800da5e:	f7fe fafb 	bl	800c058 <xQueueGenericSendFromISR>
 800da62:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800da64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800da66:	4618      	mov	r0, r3
 800da68:	3728      	adds	r7, #40	; 0x28
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bd80      	pop	{r7, pc}
 800da6e:	bf00      	nop
 800da70:	20005a48 	.word	0x20005a48

0800da74 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800da74:	b580      	push	{r7, lr}
 800da76:	b088      	sub	sp, #32
 800da78:	af02      	add	r7, sp, #8
 800da7a:	6078      	str	r0, [r7, #4]
 800da7c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da7e:	4b22      	ldr	r3, [pc, #136]	; (800db08 <prvProcessExpiredTimer+0x94>)
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	68db      	ldr	r3, [r3, #12]
 800da84:	68db      	ldr	r3, [r3, #12]
 800da86:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800da88:	697b      	ldr	r3, [r7, #20]
 800da8a:	3304      	adds	r3, #4
 800da8c:	4618      	mov	r0, r3
 800da8e:	f7fe f87d 	bl	800bb8c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800da92:	697b      	ldr	r3, [r7, #20]
 800da94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da98:	f003 0304 	and.w	r3, r3, #4
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d022      	beq.n	800dae6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800daa0:	697b      	ldr	r3, [r7, #20]
 800daa2:	699a      	ldr	r2, [r3, #24]
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	18d1      	adds	r1, r2, r3
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	683a      	ldr	r2, [r7, #0]
 800daac:	6978      	ldr	r0, [r7, #20]
 800daae:	f000 f8d1 	bl	800dc54 <prvInsertTimerInActiveList>
 800dab2:	4603      	mov	r3, r0
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d01f      	beq.n	800daf8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dab8:	2300      	movs	r3, #0
 800daba:	9300      	str	r3, [sp, #0]
 800dabc:	2300      	movs	r3, #0
 800dabe:	687a      	ldr	r2, [r7, #4]
 800dac0:	2100      	movs	r1, #0
 800dac2:	6978      	ldr	r0, [r7, #20]
 800dac4:	f7ff ff88 	bl	800d9d8 <xTimerGenericCommand>
 800dac8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800daca:	693b      	ldr	r3, [r7, #16]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d113      	bne.n	800daf8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800dad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dad4:	f383 8811 	msr	BASEPRI, r3
 800dad8:	f3bf 8f6f 	isb	sy
 800dadc:	f3bf 8f4f 	dsb	sy
 800dae0:	60fb      	str	r3, [r7, #12]
}
 800dae2:	bf00      	nop
 800dae4:	e7fe      	b.n	800dae4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dae6:	697b      	ldr	r3, [r7, #20]
 800dae8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800daec:	f023 0301 	bic.w	r3, r3, #1
 800daf0:	b2da      	uxtb	r2, r3
 800daf2:	697b      	ldr	r3, [r7, #20]
 800daf4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800daf8:	697b      	ldr	r3, [r7, #20]
 800dafa:	6a1b      	ldr	r3, [r3, #32]
 800dafc:	6978      	ldr	r0, [r7, #20]
 800dafe:	4798      	blx	r3
}
 800db00:	bf00      	nop
 800db02:	3718      	adds	r7, #24
 800db04:	46bd      	mov	sp, r7
 800db06:	bd80      	pop	{r7, pc}
 800db08:	20005a40 	.word	0x20005a40

0800db0c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b084      	sub	sp, #16
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800db14:	f107 0308 	add.w	r3, r7, #8
 800db18:	4618      	mov	r0, r3
 800db1a:	f000 f857 	bl	800dbcc <prvGetNextExpireTime>
 800db1e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800db20:	68bb      	ldr	r3, [r7, #8]
 800db22:	4619      	mov	r1, r3
 800db24:	68f8      	ldr	r0, [r7, #12]
 800db26:	f000 f803 	bl	800db30 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800db2a:	f000 f8d5 	bl	800dcd8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800db2e:	e7f1      	b.n	800db14 <prvTimerTask+0x8>

0800db30 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b084      	sub	sp, #16
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
 800db38:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800db3a:	f7ff f915 	bl	800cd68 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800db3e:	f107 0308 	add.w	r3, r7, #8
 800db42:	4618      	mov	r0, r3
 800db44:	f000 f866 	bl	800dc14 <prvSampleTimeNow>
 800db48:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800db4a:	68bb      	ldr	r3, [r7, #8]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d130      	bne.n	800dbb2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d10a      	bne.n	800db6c <prvProcessTimerOrBlockTask+0x3c>
 800db56:	687a      	ldr	r2, [r7, #4]
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	429a      	cmp	r2, r3
 800db5c:	d806      	bhi.n	800db6c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800db5e:	f7ff f911 	bl	800cd84 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800db62:	68f9      	ldr	r1, [r7, #12]
 800db64:	6878      	ldr	r0, [r7, #4]
 800db66:	f7ff ff85 	bl	800da74 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800db6a:	e024      	b.n	800dbb6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d008      	beq.n	800db84 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800db72:	4b13      	ldr	r3, [pc, #76]	; (800dbc0 <prvProcessTimerOrBlockTask+0x90>)
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d101      	bne.n	800db80 <prvProcessTimerOrBlockTask+0x50>
 800db7c:	2301      	movs	r3, #1
 800db7e:	e000      	b.n	800db82 <prvProcessTimerOrBlockTask+0x52>
 800db80:	2300      	movs	r3, #0
 800db82:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800db84:	4b0f      	ldr	r3, [pc, #60]	; (800dbc4 <prvProcessTimerOrBlockTask+0x94>)
 800db86:	6818      	ldr	r0, [r3, #0]
 800db88:	687a      	ldr	r2, [r7, #4]
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	1ad3      	subs	r3, r2, r3
 800db8e:	683a      	ldr	r2, [r7, #0]
 800db90:	4619      	mov	r1, r3
 800db92:	f7fe fe59 	bl	800c848 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800db96:	f7ff f8f5 	bl	800cd84 <xTaskResumeAll>
 800db9a:	4603      	mov	r3, r0
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d10a      	bne.n	800dbb6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800dba0:	4b09      	ldr	r3, [pc, #36]	; (800dbc8 <prvProcessTimerOrBlockTask+0x98>)
 800dba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dba6:	601a      	str	r2, [r3, #0]
 800dba8:	f3bf 8f4f 	dsb	sy
 800dbac:	f3bf 8f6f 	isb	sy
}
 800dbb0:	e001      	b.n	800dbb6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800dbb2:	f7ff f8e7 	bl	800cd84 <xTaskResumeAll>
}
 800dbb6:	bf00      	nop
 800dbb8:	3710      	adds	r7, #16
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	bd80      	pop	{r7, pc}
 800dbbe:	bf00      	nop
 800dbc0:	20005a44 	.word	0x20005a44
 800dbc4:	20005a48 	.word	0x20005a48
 800dbc8:	e000ed04 	.word	0xe000ed04

0800dbcc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800dbcc:	b480      	push	{r7}
 800dbce:	b085      	sub	sp, #20
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800dbd4:	4b0e      	ldr	r3, [pc, #56]	; (800dc10 <prvGetNextExpireTime+0x44>)
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d101      	bne.n	800dbe2 <prvGetNextExpireTime+0x16>
 800dbde:	2201      	movs	r2, #1
 800dbe0:	e000      	b.n	800dbe4 <prvGetNextExpireTime+0x18>
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d105      	bne.n	800dbfc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dbf0:	4b07      	ldr	r3, [pc, #28]	; (800dc10 <prvGetNextExpireTime+0x44>)
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	68db      	ldr	r3, [r3, #12]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	60fb      	str	r3, [r7, #12]
 800dbfa:	e001      	b.n	800dc00 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800dc00:	68fb      	ldr	r3, [r7, #12]
}
 800dc02:	4618      	mov	r0, r3
 800dc04:	3714      	adds	r7, #20
 800dc06:	46bd      	mov	sp, r7
 800dc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0c:	4770      	bx	lr
 800dc0e:	bf00      	nop
 800dc10:	20005a40 	.word	0x20005a40

0800dc14 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b084      	sub	sp, #16
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800dc1c:	f7ff f950 	bl	800cec0 <xTaskGetTickCount>
 800dc20:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800dc22:	4b0b      	ldr	r3, [pc, #44]	; (800dc50 <prvSampleTimeNow+0x3c>)
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	68fa      	ldr	r2, [r7, #12]
 800dc28:	429a      	cmp	r2, r3
 800dc2a:	d205      	bcs.n	800dc38 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800dc2c:	f000 f936 	bl	800de9c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2201      	movs	r2, #1
 800dc34:	601a      	str	r2, [r3, #0]
 800dc36:	e002      	b.n	800dc3e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800dc3e:	4a04      	ldr	r2, [pc, #16]	; (800dc50 <prvSampleTimeNow+0x3c>)
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800dc44:	68fb      	ldr	r3, [r7, #12]
}
 800dc46:	4618      	mov	r0, r3
 800dc48:	3710      	adds	r7, #16
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	bd80      	pop	{r7, pc}
 800dc4e:	bf00      	nop
 800dc50:	20005a50 	.word	0x20005a50

0800dc54 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b086      	sub	sp, #24
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	60f8      	str	r0, [r7, #12]
 800dc5c:	60b9      	str	r1, [r7, #8]
 800dc5e:	607a      	str	r2, [r7, #4]
 800dc60:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800dc62:	2300      	movs	r3, #0
 800dc64:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	68ba      	ldr	r2, [r7, #8]
 800dc6a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	68fa      	ldr	r2, [r7, #12]
 800dc70:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800dc72:	68ba      	ldr	r2, [r7, #8]
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	429a      	cmp	r2, r3
 800dc78:	d812      	bhi.n	800dca0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc7a:	687a      	ldr	r2, [r7, #4]
 800dc7c:	683b      	ldr	r3, [r7, #0]
 800dc7e:	1ad2      	subs	r2, r2, r3
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	699b      	ldr	r3, [r3, #24]
 800dc84:	429a      	cmp	r2, r3
 800dc86:	d302      	bcc.n	800dc8e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dc88:	2301      	movs	r3, #1
 800dc8a:	617b      	str	r3, [r7, #20]
 800dc8c:	e01b      	b.n	800dcc6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800dc8e:	4b10      	ldr	r3, [pc, #64]	; (800dcd0 <prvInsertTimerInActiveList+0x7c>)
 800dc90:	681a      	ldr	r2, [r3, #0]
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	3304      	adds	r3, #4
 800dc96:	4619      	mov	r1, r3
 800dc98:	4610      	mov	r0, r2
 800dc9a:	f7fd ff3e 	bl	800bb1a <vListInsert>
 800dc9e:	e012      	b.n	800dcc6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dca0:	687a      	ldr	r2, [r7, #4]
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	429a      	cmp	r2, r3
 800dca6:	d206      	bcs.n	800dcb6 <prvInsertTimerInActiveList+0x62>
 800dca8:	68ba      	ldr	r2, [r7, #8]
 800dcaa:	683b      	ldr	r3, [r7, #0]
 800dcac:	429a      	cmp	r2, r3
 800dcae:	d302      	bcc.n	800dcb6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800dcb0:	2301      	movs	r3, #1
 800dcb2:	617b      	str	r3, [r7, #20]
 800dcb4:	e007      	b.n	800dcc6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dcb6:	4b07      	ldr	r3, [pc, #28]	; (800dcd4 <prvInsertTimerInActiveList+0x80>)
 800dcb8:	681a      	ldr	r2, [r3, #0]
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	3304      	adds	r3, #4
 800dcbe:	4619      	mov	r1, r3
 800dcc0:	4610      	mov	r0, r2
 800dcc2:	f7fd ff2a 	bl	800bb1a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800dcc6:	697b      	ldr	r3, [r7, #20]
}
 800dcc8:	4618      	mov	r0, r3
 800dcca:	3718      	adds	r7, #24
 800dccc:	46bd      	mov	sp, r7
 800dcce:	bd80      	pop	{r7, pc}
 800dcd0:	20005a44 	.word	0x20005a44
 800dcd4:	20005a40 	.word	0x20005a40

0800dcd8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b08e      	sub	sp, #56	; 0x38
 800dcdc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dcde:	e0ca      	b.n	800de76 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	da18      	bge.n	800dd18 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800dce6:	1d3b      	adds	r3, r7, #4
 800dce8:	3304      	adds	r3, #4
 800dcea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800dcec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d10a      	bne.n	800dd08 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800dcf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcf6:	f383 8811 	msr	BASEPRI, r3
 800dcfa:	f3bf 8f6f 	isb	sy
 800dcfe:	f3bf 8f4f 	dsb	sy
 800dd02:	61fb      	str	r3, [r7, #28]
}
 800dd04:	bf00      	nop
 800dd06:	e7fe      	b.n	800dd06 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800dd08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd0e:	6850      	ldr	r0, [r2, #4]
 800dd10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd12:	6892      	ldr	r2, [r2, #8]
 800dd14:	4611      	mov	r1, r2
 800dd16:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	f2c0 80ab 	blt.w	800de76 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800dd24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd26:	695b      	ldr	r3, [r3, #20]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d004      	beq.n	800dd36 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dd2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd2e:	3304      	adds	r3, #4
 800dd30:	4618      	mov	r0, r3
 800dd32:	f7fd ff2b 	bl	800bb8c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dd36:	463b      	mov	r3, r7
 800dd38:	4618      	mov	r0, r3
 800dd3a:	f7ff ff6b 	bl	800dc14 <prvSampleTimeNow>
 800dd3e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	2b09      	cmp	r3, #9
 800dd44:	f200 8096 	bhi.w	800de74 <prvProcessReceivedCommands+0x19c>
 800dd48:	a201      	add	r2, pc, #4	; (adr r2, 800dd50 <prvProcessReceivedCommands+0x78>)
 800dd4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd4e:	bf00      	nop
 800dd50:	0800dd79 	.word	0x0800dd79
 800dd54:	0800dd79 	.word	0x0800dd79
 800dd58:	0800dd79 	.word	0x0800dd79
 800dd5c:	0800dded 	.word	0x0800dded
 800dd60:	0800de01 	.word	0x0800de01
 800dd64:	0800de4b 	.word	0x0800de4b
 800dd68:	0800dd79 	.word	0x0800dd79
 800dd6c:	0800dd79 	.word	0x0800dd79
 800dd70:	0800dded 	.word	0x0800dded
 800dd74:	0800de01 	.word	0x0800de01
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dd78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd7e:	f043 0301 	orr.w	r3, r3, #1
 800dd82:	b2da      	uxtb	r2, r3
 800dd84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dd8a:	68ba      	ldr	r2, [r7, #8]
 800dd8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd8e:	699b      	ldr	r3, [r3, #24]
 800dd90:	18d1      	adds	r1, r2, r3
 800dd92:	68bb      	ldr	r3, [r7, #8]
 800dd94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd98:	f7ff ff5c 	bl	800dc54 <prvInsertTimerInActiveList>
 800dd9c:	4603      	mov	r3, r0
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d069      	beq.n	800de76 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dda2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dda4:	6a1b      	ldr	r3, [r3, #32]
 800dda6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dda8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ddaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ddb0:	f003 0304 	and.w	r3, r3, #4
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d05e      	beq.n	800de76 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ddb8:	68ba      	ldr	r2, [r7, #8]
 800ddba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddbc:	699b      	ldr	r3, [r3, #24]
 800ddbe:	441a      	add	r2, r3
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	9300      	str	r3, [sp, #0]
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	2100      	movs	r1, #0
 800ddc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ddca:	f7ff fe05 	bl	800d9d8 <xTimerGenericCommand>
 800ddce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ddd0:	6a3b      	ldr	r3, [r7, #32]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d14f      	bne.n	800de76 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ddd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddda:	f383 8811 	msr	BASEPRI, r3
 800ddde:	f3bf 8f6f 	isb	sy
 800dde2:	f3bf 8f4f 	dsb	sy
 800dde6:	61bb      	str	r3, [r7, #24]
}
 800dde8:	bf00      	nop
 800ddea:	e7fe      	b.n	800ddea <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ddec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ddf2:	f023 0301 	bic.w	r3, r3, #1
 800ddf6:	b2da      	uxtb	r2, r3
 800ddf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddfa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ddfe:	e03a      	b.n	800de76 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800de00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de06:	f043 0301 	orr.w	r3, r3, #1
 800de0a:	b2da      	uxtb	r2, r3
 800de0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800de12:	68ba      	ldr	r2, [r7, #8]
 800de14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de16:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800de18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de1a:	699b      	ldr	r3, [r3, #24]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d10a      	bne.n	800de36 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800de20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de24:	f383 8811 	msr	BASEPRI, r3
 800de28:	f3bf 8f6f 	isb	sy
 800de2c:	f3bf 8f4f 	dsb	sy
 800de30:	617b      	str	r3, [r7, #20]
}
 800de32:	bf00      	nop
 800de34:	e7fe      	b.n	800de34 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800de36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de38:	699a      	ldr	r2, [r3, #24]
 800de3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de3c:	18d1      	adds	r1, r2, r3
 800de3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de44:	f7ff ff06 	bl	800dc54 <prvInsertTimerInActiveList>
					break;
 800de48:	e015      	b.n	800de76 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800de4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de50:	f003 0302 	and.w	r3, r3, #2
 800de54:	2b00      	cmp	r3, #0
 800de56:	d103      	bne.n	800de60 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800de58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de5a:	f000 fbe1 	bl	800e620 <vPortFree>
 800de5e:	e00a      	b.n	800de76 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800de60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de66:	f023 0301 	bic.w	r3, r3, #1
 800de6a:	b2da      	uxtb	r2, r3
 800de6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800de72:	e000      	b.n	800de76 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800de74:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800de76:	4b08      	ldr	r3, [pc, #32]	; (800de98 <prvProcessReceivedCommands+0x1c0>)
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	1d39      	adds	r1, r7, #4
 800de7c:	2200      	movs	r2, #0
 800de7e:	4618      	mov	r0, r3
 800de80:	f7fe f986 	bl	800c190 <xQueueReceive>
 800de84:	4603      	mov	r3, r0
 800de86:	2b00      	cmp	r3, #0
 800de88:	f47f af2a 	bne.w	800dce0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800de8c:	bf00      	nop
 800de8e:	bf00      	nop
 800de90:	3730      	adds	r7, #48	; 0x30
 800de92:	46bd      	mov	sp, r7
 800de94:	bd80      	pop	{r7, pc}
 800de96:	bf00      	nop
 800de98:	20005a48 	.word	0x20005a48

0800de9c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b088      	sub	sp, #32
 800dea0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dea2:	e048      	b.n	800df36 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dea4:	4b2d      	ldr	r3, [pc, #180]	; (800df5c <prvSwitchTimerLists+0xc0>)
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	68db      	ldr	r3, [r3, #12]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800deae:	4b2b      	ldr	r3, [pc, #172]	; (800df5c <prvSwitchTimerLists+0xc0>)
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	68db      	ldr	r3, [r3, #12]
 800deb4:	68db      	ldr	r3, [r3, #12]
 800deb6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	3304      	adds	r3, #4
 800debc:	4618      	mov	r0, r3
 800debe:	f7fd fe65 	bl	800bb8c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	6a1b      	ldr	r3, [r3, #32]
 800dec6:	68f8      	ldr	r0, [r7, #12]
 800dec8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ded0:	f003 0304 	and.w	r3, r3, #4
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d02e      	beq.n	800df36 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	699b      	ldr	r3, [r3, #24]
 800dedc:	693a      	ldr	r2, [r7, #16]
 800dede:	4413      	add	r3, r2
 800dee0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800dee2:	68ba      	ldr	r2, [r7, #8]
 800dee4:	693b      	ldr	r3, [r7, #16]
 800dee6:	429a      	cmp	r2, r3
 800dee8:	d90e      	bls.n	800df08 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	68ba      	ldr	r2, [r7, #8]
 800deee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	68fa      	ldr	r2, [r7, #12]
 800def4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800def6:	4b19      	ldr	r3, [pc, #100]	; (800df5c <prvSwitchTimerLists+0xc0>)
 800def8:	681a      	ldr	r2, [r3, #0]
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	3304      	adds	r3, #4
 800defe:	4619      	mov	r1, r3
 800df00:	4610      	mov	r0, r2
 800df02:	f7fd fe0a 	bl	800bb1a <vListInsert>
 800df06:	e016      	b.n	800df36 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800df08:	2300      	movs	r3, #0
 800df0a:	9300      	str	r3, [sp, #0]
 800df0c:	2300      	movs	r3, #0
 800df0e:	693a      	ldr	r2, [r7, #16]
 800df10:	2100      	movs	r1, #0
 800df12:	68f8      	ldr	r0, [r7, #12]
 800df14:	f7ff fd60 	bl	800d9d8 <xTimerGenericCommand>
 800df18:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d10a      	bne.n	800df36 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800df20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df24:	f383 8811 	msr	BASEPRI, r3
 800df28:	f3bf 8f6f 	isb	sy
 800df2c:	f3bf 8f4f 	dsb	sy
 800df30:	603b      	str	r3, [r7, #0]
}
 800df32:	bf00      	nop
 800df34:	e7fe      	b.n	800df34 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800df36:	4b09      	ldr	r3, [pc, #36]	; (800df5c <prvSwitchTimerLists+0xc0>)
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d1b1      	bne.n	800dea4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800df40:	4b06      	ldr	r3, [pc, #24]	; (800df5c <prvSwitchTimerLists+0xc0>)
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800df46:	4b06      	ldr	r3, [pc, #24]	; (800df60 <prvSwitchTimerLists+0xc4>)
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	4a04      	ldr	r2, [pc, #16]	; (800df5c <prvSwitchTimerLists+0xc0>)
 800df4c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800df4e:	4a04      	ldr	r2, [pc, #16]	; (800df60 <prvSwitchTimerLists+0xc4>)
 800df50:	697b      	ldr	r3, [r7, #20]
 800df52:	6013      	str	r3, [r2, #0]
}
 800df54:	bf00      	nop
 800df56:	3718      	adds	r7, #24
 800df58:	46bd      	mov	sp, r7
 800df5a:	bd80      	pop	{r7, pc}
 800df5c:	20005a40 	.word	0x20005a40
 800df60:	20005a44 	.word	0x20005a44

0800df64 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800df64:	b580      	push	{r7, lr}
 800df66:	b082      	sub	sp, #8
 800df68:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800df6a:	f000 f96b 	bl	800e244 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800df6e:	4b15      	ldr	r3, [pc, #84]	; (800dfc4 <prvCheckForValidListAndQueue+0x60>)
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d120      	bne.n	800dfb8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800df76:	4814      	ldr	r0, [pc, #80]	; (800dfc8 <prvCheckForValidListAndQueue+0x64>)
 800df78:	f7fd fd7e 	bl	800ba78 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800df7c:	4813      	ldr	r0, [pc, #76]	; (800dfcc <prvCheckForValidListAndQueue+0x68>)
 800df7e:	f7fd fd7b 	bl	800ba78 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800df82:	4b13      	ldr	r3, [pc, #76]	; (800dfd0 <prvCheckForValidListAndQueue+0x6c>)
 800df84:	4a10      	ldr	r2, [pc, #64]	; (800dfc8 <prvCheckForValidListAndQueue+0x64>)
 800df86:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800df88:	4b12      	ldr	r3, [pc, #72]	; (800dfd4 <prvCheckForValidListAndQueue+0x70>)
 800df8a:	4a10      	ldr	r2, [pc, #64]	; (800dfcc <prvCheckForValidListAndQueue+0x68>)
 800df8c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800df8e:	2300      	movs	r3, #0
 800df90:	9300      	str	r3, [sp, #0]
 800df92:	4b11      	ldr	r3, [pc, #68]	; (800dfd8 <prvCheckForValidListAndQueue+0x74>)
 800df94:	4a11      	ldr	r2, [pc, #68]	; (800dfdc <prvCheckForValidListAndQueue+0x78>)
 800df96:	2110      	movs	r1, #16
 800df98:	200a      	movs	r0, #10
 800df9a:	f7fd fe89 	bl	800bcb0 <xQueueGenericCreateStatic>
 800df9e:	4603      	mov	r3, r0
 800dfa0:	4a08      	ldr	r2, [pc, #32]	; (800dfc4 <prvCheckForValidListAndQueue+0x60>)
 800dfa2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800dfa4:	4b07      	ldr	r3, [pc, #28]	; (800dfc4 <prvCheckForValidListAndQueue+0x60>)
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d005      	beq.n	800dfb8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800dfac:	4b05      	ldr	r3, [pc, #20]	; (800dfc4 <prvCheckForValidListAndQueue+0x60>)
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	490b      	ldr	r1, [pc, #44]	; (800dfe0 <prvCheckForValidListAndQueue+0x7c>)
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	f7fe fc1e 	bl	800c7f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dfb8:	f000 f974 	bl	800e2a4 <vPortExitCritical>
}
 800dfbc:	bf00      	nop
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	bd80      	pop	{r7, pc}
 800dfc2:	bf00      	nop
 800dfc4:	20005a48 	.word	0x20005a48
 800dfc8:	20005a18 	.word	0x20005a18
 800dfcc:	20005a2c 	.word	0x20005a2c
 800dfd0:	20005a40 	.word	0x20005a40
 800dfd4:	20005a44 	.word	0x20005a44
 800dfd8:	20005af4 	.word	0x20005af4
 800dfdc:	20005a54 	.word	0x20005a54
 800dfe0:	0801b79c 	.word	0x0801b79c

0800dfe4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dfe4:	b480      	push	{r7}
 800dfe6:	b085      	sub	sp, #20
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	60f8      	str	r0, [r7, #12]
 800dfec:	60b9      	str	r1, [r7, #8]
 800dfee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	3b04      	subs	r3, #4
 800dff4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800dffc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	3b04      	subs	r3, #4
 800e002:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e004:	68bb      	ldr	r3, [r7, #8]
 800e006:	f023 0201 	bic.w	r2, r3, #1
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	3b04      	subs	r3, #4
 800e012:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e014:	4a0c      	ldr	r2, [pc, #48]	; (800e048 <pxPortInitialiseStack+0x64>)
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	3b14      	subs	r3, #20
 800e01e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e020:	687a      	ldr	r2, [r7, #4]
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	3b04      	subs	r3, #4
 800e02a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	f06f 0202 	mvn.w	r2, #2
 800e032:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	3b20      	subs	r3, #32
 800e038:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e03a:	68fb      	ldr	r3, [r7, #12]
}
 800e03c:	4618      	mov	r0, r3
 800e03e:	3714      	adds	r7, #20
 800e040:	46bd      	mov	sp, r7
 800e042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e046:	4770      	bx	lr
 800e048:	0800e04d 	.word	0x0800e04d

0800e04c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e04c:	b480      	push	{r7}
 800e04e:	b085      	sub	sp, #20
 800e050:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e052:	2300      	movs	r3, #0
 800e054:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e056:	4b12      	ldr	r3, [pc, #72]	; (800e0a0 <prvTaskExitError+0x54>)
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e05e:	d00a      	beq.n	800e076 <prvTaskExitError+0x2a>
	__asm volatile
 800e060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e064:	f383 8811 	msr	BASEPRI, r3
 800e068:	f3bf 8f6f 	isb	sy
 800e06c:	f3bf 8f4f 	dsb	sy
 800e070:	60fb      	str	r3, [r7, #12]
}
 800e072:	bf00      	nop
 800e074:	e7fe      	b.n	800e074 <prvTaskExitError+0x28>
	__asm volatile
 800e076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e07a:	f383 8811 	msr	BASEPRI, r3
 800e07e:	f3bf 8f6f 	isb	sy
 800e082:	f3bf 8f4f 	dsb	sy
 800e086:	60bb      	str	r3, [r7, #8]
}
 800e088:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e08a:	bf00      	nop
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d0fc      	beq.n	800e08c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e092:	bf00      	nop
 800e094:	bf00      	nop
 800e096:	3714      	adds	r7, #20
 800e098:	46bd      	mov	sp, r7
 800e09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09e:	4770      	bx	lr
 800e0a0:	20000034 	.word	0x20000034
	...

0800e0b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e0b0:	4b07      	ldr	r3, [pc, #28]	; (800e0d0 <pxCurrentTCBConst2>)
 800e0b2:	6819      	ldr	r1, [r3, #0]
 800e0b4:	6808      	ldr	r0, [r1, #0]
 800e0b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0ba:	f380 8809 	msr	PSP, r0
 800e0be:	f3bf 8f6f 	isb	sy
 800e0c2:	f04f 0000 	mov.w	r0, #0
 800e0c6:	f380 8811 	msr	BASEPRI, r0
 800e0ca:	4770      	bx	lr
 800e0cc:	f3af 8000 	nop.w

0800e0d0 <pxCurrentTCBConst2>:
 800e0d0:	20005518 	.word	0x20005518
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e0d4:	bf00      	nop
 800e0d6:	bf00      	nop

0800e0d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e0d8:	4808      	ldr	r0, [pc, #32]	; (800e0fc <prvPortStartFirstTask+0x24>)
 800e0da:	6800      	ldr	r0, [r0, #0]
 800e0dc:	6800      	ldr	r0, [r0, #0]
 800e0de:	f380 8808 	msr	MSP, r0
 800e0e2:	f04f 0000 	mov.w	r0, #0
 800e0e6:	f380 8814 	msr	CONTROL, r0
 800e0ea:	b662      	cpsie	i
 800e0ec:	b661      	cpsie	f
 800e0ee:	f3bf 8f4f 	dsb	sy
 800e0f2:	f3bf 8f6f 	isb	sy
 800e0f6:	df00      	svc	0
 800e0f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e0fa:	bf00      	nop
 800e0fc:	e000ed08 	.word	0xe000ed08

0800e100 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b086      	sub	sp, #24
 800e104:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e106:	4b46      	ldr	r3, [pc, #280]	; (800e220 <xPortStartScheduler+0x120>)
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	4a46      	ldr	r2, [pc, #280]	; (800e224 <xPortStartScheduler+0x124>)
 800e10c:	4293      	cmp	r3, r2
 800e10e:	d10a      	bne.n	800e126 <xPortStartScheduler+0x26>
	__asm volatile
 800e110:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e114:	f383 8811 	msr	BASEPRI, r3
 800e118:	f3bf 8f6f 	isb	sy
 800e11c:	f3bf 8f4f 	dsb	sy
 800e120:	613b      	str	r3, [r7, #16]
}
 800e122:	bf00      	nop
 800e124:	e7fe      	b.n	800e124 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e126:	4b3e      	ldr	r3, [pc, #248]	; (800e220 <xPortStartScheduler+0x120>)
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	4a3f      	ldr	r2, [pc, #252]	; (800e228 <xPortStartScheduler+0x128>)
 800e12c:	4293      	cmp	r3, r2
 800e12e:	d10a      	bne.n	800e146 <xPortStartScheduler+0x46>
	__asm volatile
 800e130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e134:	f383 8811 	msr	BASEPRI, r3
 800e138:	f3bf 8f6f 	isb	sy
 800e13c:	f3bf 8f4f 	dsb	sy
 800e140:	60fb      	str	r3, [r7, #12]
}
 800e142:	bf00      	nop
 800e144:	e7fe      	b.n	800e144 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e146:	4b39      	ldr	r3, [pc, #228]	; (800e22c <xPortStartScheduler+0x12c>)
 800e148:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e14a:	697b      	ldr	r3, [r7, #20]
 800e14c:	781b      	ldrb	r3, [r3, #0]
 800e14e:	b2db      	uxtb	r3, r3
 800e150:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e152:	697b      	ldr	r3, [r7, #20]
 800e154:	22ff      	movs	r2, #255	; 0xff
 800e156:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e158:	697b      	ldr	r3, [r7, #20]
 800e15a:	781b      	ldrb	r3, [r3, #0]
 800e15c:	b2db      	uxtb	r3, r3
 800e15e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e160:	78fb      	ldrb	r3, [r7, #3]
 800e162:	b2db      	uxtb	r3, r3
 800e164:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e168:	b2da      	uxtb	r2, r3
 800e16a:	4b31      	ldr	r3, [pc, #196]	; (800e230 <xPortStartScheduler+0x130>)
 800e16c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e16e:	4b31      	ldr	r3, [pc, #196]	; (800e234 <xPortStartScheduler+0x134>)
 800e170:	2207      	movs	r2, #7
 800e172:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e174:	e009      	b.n	800e18a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e176:	4b2f      	ldr	r3, [pc, #188]	; (800e234 <xPortStartScheduler+0x134>)
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	3b01      	subs	r3, #1
 800e17c:	4a2d      	ldr	r2, [pc, #180]	; (800e234 <xPortStartScheduler+0x134>)
 800e17e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e180:	78fb      	ldrb	r3, [r7, #3]
 800e182:	b2db      	uxtb	r3, r3
 800e184:	005b      	lsls	r3, r3, #1
 800e186:	b2db      	uxtb	r3, r3
 800e188:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e18a:	78fb      	ldrb	r3, [r7, #3]
 800e18c:	b2db      	uxtb	r3, r3
 800e18e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e192:	2b80      	cmp	r3, #128	; 0x80
 800e194:	d0ef      	beq.n	800e176 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e196:	4b27      	ldr	r3, [pc, #156]	; (800e234 <xPortStartScheduler+0x134>)
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	f1c3 0307 	rsb	r3, r3, #7
 800e19e:	2b04      	cmp	r3, #4
 800e1a0:	d00a      	beq.n	800e1b8 <xPortStartScheduler+0xb8>
	__asm volatile
 800e1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1a6:	f383 8811 	msr	BASEPRI, r3
 800e1aa:	f3bf 8f6f 	isb	sy
 800e1ae:	f3bf 8f4f 	dsb	sy
 800e1b2:	60bb      	str	r3, [r7, #8]
}
 800e1b4:	bf00      	nop
 800e1b6:	e7fe      	b.n	800e1b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e1b8:	4b1e      	ldr	r3, [pc, #120]	; (800e234 <xPortStartScheduler+0x134>)
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	021b      	lsls	r3, r3, #8
 800e1be:	4a1d      	ldr	r2, [pc, #116]	; (800e234 <xPortStartScheduler+0x134>)
 800e1c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e1c2:	4b1c      	ldr	r3, [pc, #112]	; (800e234 <xPortStartScheduler+0x134>)
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e1ca:	4a1a      	ldr	r2, [pc, #104]	; (800e234 <xPortStartScheduler+0x134>)
 800e1cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	b2da      	uxtb	r2, r3
 800e1d2:	697b      	ldr	r3, [r7, #20]
 800e1d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e1d6:	4b18      	ldr	r3, [pc, #96]	; (800e238 <xPortStartScheduler+0x138>)
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	4a17      	ldr	r2, [pc, #92]	; (800e238 <xPortStartScheduler+0x138>)
 800e1dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e1e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e1e2:	4b15      	ldr	r3, [pc, #84]	; (800e238 <xPortStartScheduler+0x138>)
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	4a14      	ldr	r2, [pc, #80]	; (800e238 <xPortStartScheduler+0x138>)
 800e1e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e1ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e1ee:	f000 f8dd 	bl	800e3ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e1f2:	4b12      	ldr	r3, [pc, #72]	; (800e23c <xPortStartScheduler+0x13c>)
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e1f8:	f000 f8fc 	bl	800e3f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e1fc:	4b10      	ldr	r3, [pc, #64]	; (800e240 <xPortStartScheduler+0x140>)
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	4a0f      	ldr	r2, [pc, #60]	; (800e240 <xPortStartScheduler+0x140>)
 800e202:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e206:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e208:	f7ff ff66 	bl	800e0d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e20c:	f7fe ff22 	bl	800d054 <vTaskSwitchContext>
	prvTaskExitError();
 800e210:	f7ff ff1c 	bl	800e04c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e214:	2300      	movs	r3, #0
}
 800e216:	4618      	mov	r0, r3
 800e218:	3718      	adds	r7, #24
 800e21a:	46bd      	mov	sp, r7
 800e21c:	bd80      	pop	{r7, pc}
 800e21e:	bf00      	nop
 800e220:	e000ed00 	.word	0xe000ed00
 800e224:	410fc271 	.word	0x410fc271
 800e228:	410fc270 	.word	0x410fc270
 800e22c:	e000e400 	.word	0xe000e400
 800e230:	20005b44 	.word	0x20005b44
 800e234:	20005b48 	.word	0x20005b48
 800e238:	e000ed20 	.word	0xe000ed20
 800e23c:	20000034 	.word	0x20000034
 800e240:	e000ef34 	.word	0xe000ef34

0800e244 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e244:	b480      	push	{r7}
 800e246:	b083      	sub	sp, #12
 800e248:	af00      	add	r7, sp, #0
	__asm volatile
 800e24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e24e:	f383 8811 	msr	BASEPRI, r3
 800e252:	f3bf 8f6f 	isb	sy
 800e256:	f3bf 8f4f 	dsb	sy
 800e25a:	607b      	str	r3, [r7, #4]
}
 800e25c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e25e:	4b0f      	ldr	r3, [pc, #60]	; (800e29c <vPortEnterCritical+0x58>)
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	3301      	adds	r3, #1
 800e264:	4a0d      	ldr	r2, [pc, #52]	; (800e29c <vPortEnterCritical+0x58>)
 800e266:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e268:	4b0c      	ldr	r3, [pc, #48]	; (800e29c <vPortEnterCritical+0x58>)
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	2b01      	cmp	r3, #1
 800e26e:	d10f      	bne.n	800e290 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e270:	4b0b      	ldr	r3, [pc, #44]	; (800e2a0 <vPortEnterCritical+0x5c>)
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	b2db      	uxtb	r3, r3
 800e276:	2b00      	cmp	r3, #0
 800e278:	d00a      	beq.n	800e290 <vPortEnterCritical+0x4c>
	__asm volatile
 800e27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e27e:	f383 8811 	msr	BASEPRI, r3
 800e282:	f3bf 8f6f 	isb	sy
 800e286:	f3bf 8f4f 	dsb	sy
 800e28a:	603b      	str	r3, [r7, #0]
}
 800e28c:	bf00      	nop
 800e28e:	e7fe      	b.n	800e28e <vPortEnterCritical+0x4a>
	}
}
 800e290:	bf00      	nop
 800e292:	370c      	adds	r7, #12
 800e294:	46bd      	mov	sp, r7
 800e296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29a:	4770      	bx	lr
 800e29c:	20000034 	.word	0x20000034
 800e2a0:	e000ed04 	.word	0xe000ed04

0800e2a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e2a4:	b480      	push	{r7}
 800e2a6:	b083      	sub	sp, #12
 800e2a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e2aa:	4b12      	ldr	r3, [pc, #72]	; (800e2f4 <vPortExitCritical+0x50>)
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d10a      	bne.n	800e2c8 <vPortExitCritical+0x24>
	__asm volatile
 800e2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2b6:	f383 8811 	msr	BASEPRI, r3
 800e2ba:	f3bf 8f6f 	isb	sy
 800e2be:	f3bf 8f4f 	dsb	sy
 800e2c2:	607b      	str	r3, [r7, #4]
}
 800e2c4:	bf00      	nop
 800e2c6:	e7fe      	b.n	800e2c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e2c8:	4b0a      	ldr	r3, [pc, #40]	; (800e2f4 <vPortExitCritical+0x50>)
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	3b01      	subs	r3, #1
 800e2ce:	4a09      	ldr	r2, [pc, #36]	; (800e2f4 <vPortExitCritical+0x50>)
 800e2d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e2d2:	4b08      	ldr	r3, [pc, #32]	; (800e2f4 <vPortExitCritical+0x50>)
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d105      	bne.n	800e2e6 <vPortExitCritical+0x42>
 800e2da:	2300      	movs	r3, #0
 800e2dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e2de:	683b      	ldr	r3, [r7, #0]
 800e2e0:	f383 8811 	msr	BASEPRI, r3
}
 800e2e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e2e6:	bf00      	nop
 800e2e8:	370c      	adds	r7, #12
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f0:	4770      	bx	lr
 800e2f2:	bf00      	nop
 800e2f4:	20000034 	.word	0x20000034
	...

0800e300 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e300:	f3ef 8009 	mrs	r0, PSP
 800e304:	f3bf 8f6f 	isb	sy
 800e308:	4b15      	ldr	r3, [pc, #84]	; (800e360 <pxCurrentTCBConst>)
 800e30a:	681a      	ldr	r2, [r3, #0]
 800e30c:	f01e 0f10 	tst.w	lr, #16
 800e310:	bf08      	it	eq
 800e312:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e316:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e31a:	6010      	str	r0, [r2, #0]
 800e31c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e320:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e324:	f380 8811 	msr	BASEPRI, r0
 800e328:	f3bf 8f4f 	dsb	sy
 800e32c:	f3bf 8f6f 	isb	sy
 800e330:	f7fe fe90 	bl	800d054 <vTaskSwitchContext>
 800e334:	f04f 0000 	mov.w	r0, #0
 800e338:	f380 8811 	msr	BASEPRI, r0
 800e33c:	bc09      	pop	{r0, r3}
 800e33e:	6819      	ldr	r1, [r3, #0]
 800e340:	6808      	ldr	r0, [r1, #0]
 800e342:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e346:	f01e 0f10 	tst.w	lr, #16
 800e34a:	bf08      	it	eq
 800e34c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e350:	f380 8809 	msr	PSP, r0
 800e354:	f3bf 8f6f 	isb	sy
 800e358:	4770      	bx	lr
 800e35a:	bf00      	nop
 800e35c:	f3af 8000 	nop.w

0800e360 <pxCurrentTCBConst>:
 800e360:	20005518 	.word	0x20005518
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e364:	bf00      	nop
 800e366:	bf00      	nop

0800e368 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b082      	sub	sp, #8
 800e36c:	af00      	add	r7, sp, #0
	__asm volatile
 800e36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e372:	f383 8811 	msr	BASEPRI, r3
 800e376:	f3bf 8f6f 	isb	sy
 800e37a:	f3bf 8f4f 	dsb	sy
 800e37e:	607b      	str	r3, [r7, #4]
}
 800e380:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e382:	f7fe fdad 	bl	800cee0 <xTaskIncrementTick>
 800e386:	4603      	mov	r3, r0
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d003      	beq.n	800e394 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e38c:	4b06      	ldr	r3, [pc, #24]	; (800e3a8 <xPortSysTickHandler+0x40>)
 800e38e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e392:	601a      	str	r2, [r3, #0]
 800e394:	2300      	movs	r3, #0
 800e396:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e398:	683b      	ldr	r3, [r7, #0]
 800e39a:	f383 8811 	msr	BASEPRI, r3
}
 800e39e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e3a0:	bf00      	nop
 800e3a2:	3708      	adds	r7, #8
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	bd80      	pop	{r7, pc}
 800e3a8:	e000ed04 	.word	0xe000ed04

0800e3ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e3ac:	b480      	push	{r7}
 800e3ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e3b0:	4b0b      	ldr	r3, [pc, #44]	; (800e3e0 <vPortSetupTimerInterrupt+0x34>)
 800e3b2:	2200      	movs	r2, #0
 800e3b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e3b6:	4b0b      	ldr	r3, [pc, #44]	; (800e3e4 <vPortSetupTimerInterrupt+0x38>)
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e3bc:	4b0a      	ldr	r3, [pc, #40]	; (800e3e8 <vPortSetupTimerInterrupt+0x3c>)
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	4a0a      	ldr	r2, [pc, #40]	; (800e3ec <vPortSetupTimerInterrupt+0x40>)
 800e3c2:	fba2 2303 	umull	r2, r3, r2, r3
 800e3c6:	099b      	lsrs	r3, r3, #6
 800e3c8:	4a09      	ldr	r2, [pc, #36]	; (800e3f0 <vPortSetupTimerInterrupt+0x44>)
 800e3ca:	3b01      	subs	r3, #1
 800e3cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e3ce:	4b04      	ldr	r3, [pc, #16]	; (800e3e0 <vPortSetupTimerInterrupt+0x34>)
 800e3d0:	2207      	movs	r2, #7
 800e3d2:	601a      	str	r2, [r3, #0]
}
 800e3d4:	bf00      	nop
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3dc:	4770      	bx	lr
 800e3de:	bf00      	nop
 800e3e0:	e000e010 	.word	0xe000e010
 800e3e4:	e000e018 	.word	0xe000e018
 800e3e8:	20000014 	.word	0x20000014
 800e3ec:	10624dd3 	.word	0x10624dd3
 800e3f0:	e000e014 	.word	0xe000e014

0800e3f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e3f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e404 <vPortEnableVFP+0x10>
 800e3f8:	6801      	ldr	r1, [r0, #0]
 800e3fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e3fe:	6001      	str	r1, [r0, #0]
 800e400:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e402:	bf00      	nop
 800e404:	e000ed88 	.word	0xe000ed88

0800e408 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e408:	b480      	push	{r7}
 800e40a:	b085      	sub	sp, #20
 800e40c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e40e:	f3ef 8305 	mrs	r3, IPSR
 800e412:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	2b0f      	cmp	r3, #15
 800e418:	d914      	bls.n	800e444 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e41a:	4a17      	ldr	r2, [pc, #92]	; (800e478 <vPortValidateInterruptPriority+0x70>)
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	4413      	add	r3, r2
 800e420:	781b      	ldrb	r3, [r3, #0]
 800e422:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e424:	4b15      	ldr	r3, [pc, #84]	; (800e47c <vPortValidateInterruptPriority+0x74>)
 800e426:	781b      	ldrb	r3, [r3, #0]
 800e428:	7afa      	ldrb	r2, [r7, #11]
 800e42a:	429a      	cmp	r2, r3
 800e42c:	d20a      	bcs.n	800e444 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e432:	f383 8811 	msr	BASEPRI, r3
 800e436:	f3bf 8f6f 	isb	sy
 800e43a:	f3bf 8f4f 	dsb	sy
 800e43e:	607b      	str	r3, [r7, #4]
}
 800e440:	bf00      	nop
 800e442:	e7fe      	b.n	800e442 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e444:	4b0e      	ldr	r3, [pc, #56]	; (800e480 <vPortValidateInterruptPriority+0x78>)
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e44c:	4b0d      	ldr	r3, [pc, #52]	; (800e484 <vPortValidateInterruptPriority+0x7c>)
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	429a      	cmp	r2, r3
 800e452:	d90a      	bls.n	800e46a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e454:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e458:	f383 8811 	msr	BASEPRI, r3
 800e45c:	f3bf 8f6f 	isb	sy
 800e460:	f3bf 8f4f 	dsb	sy
 800e464:	603b      	str	r3, [r7, #0]
}
 800e466:	bf00      	nop
 800e468:	e7fe      	b.n	800e468 <vPortValidateInterruptPriority+0x60>
	}
 800e46a:	bf00      	nop
 800e46c:	3714      	adds	r7, #20
 800e46e:	46bd      	mov	sp, r7
 800e470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e474:	4770      	bx	lr
 800e476:	bf00      	nop
 800e478:	e000e3f0 	.word	0xe000e3f0
 800e47c:	20005b44 	.word	0x20005b44
 800e480:	e000ed0c 	.word	0xe000ed0c
 800e484:	20005b48 	.word	0x20005b48

0800e488 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e488:	b580      	push	{r7, lr}
 800e48a:	b08a      	sub	sp, #40	; 0x28
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e490:	2300      	movs	r3, #0
 800e492:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e494:	f7fe fc68 	bl	800cd68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e498:	4b5b      	ldr	r3, [pc, #364]	; (800e608 <pvPortMalloc+0x180>)
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d101      	bne.n	800e4a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e4a0:	f000 f920 	bl	800e6e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e4a4:	4b59      	ldr	r3, [pc, #356]	; (800e60c <pvPortMalloc+0x184>)
 800e4a6:	681a      	ldr	r2, [r3, #0]
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	4013      	ands	r3, r2
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	f040 8093 	bne.w	800e5d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d01d      	beq.n	800e4f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e4b8:	2208      	movs	r2, #8
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	4413      	add	r3, r2
 800e4be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f003 0307 	and.w	r3, r3, #7
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d014      	beq.n	800e4f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	f023 0307 	bic.w	r3, r3, #7
 800e4d0:	3308      	adds	r3, #8
 800e4d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	f003 0307 	and.w	r3, r3, #7
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d00a      	beq.n	800e4f4 <pvPortMalloc+0x6c>
	__asm volatile
 800e4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4e2:	f383 8811 	msr	BASEPRI, r3
 800e4e6:	f3bf 8f6f 	isb	sy
 800e4ea:	f3bf 8f4f 	dsb	sy
 800e4ee:	617b      	str	r3, [r7, #20]
}
 800e4f0:	bf00      	nop
 800e4f2:	e7fe      	b.n	800e4f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d06e      	beq.n	800e5d8 <pvPortMalloc+0x150>
 800e4fa:	4b45      	ldr	r3, [pc, #276]	; (800e610 <pvPortMalloc+0x188>)
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	687a      	ldr	r2, [r7, #4]
 800e500:	429a      	cmp	r2, r3
 800e502:	d869      	bhi.n	800e5d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e504:	4b43      	ldr	r3, [pc, #268]	; (800e614 <pvPortMalloc+0x18c>)
 800e506:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e508:	4b42      	ldr	r3, [pc, #264]	; (800e614 <pvPortMalloc+0x18c>)
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e50e:	e004      	b.n	800e51a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e512:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e51c:	685b      	ldr	r3, [r3, #4]
 800e51e:	687a      	ldr	r2, [r7, #4]
 800e520:	429a      	cmp	r2, r3
 800e522:	d903      	bls.n	800e52c <pvPortMalloc+0xa4>
 800e524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d1f1      	bne.n	800e510 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e52c:	4b36      	ldr	r3, [pc, #216]	; (800e608 <pvPortMalloc+0x180>)
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e532:	429a      	cmp	r2, r3
 800e534:	d050      	beq.n	800e5d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e536:	6a3b      	ldr	r3, [r7, #32]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	2208      	movs	r2, #8
 800e53c:	4413      	add	r3, r2
 800e53e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e542:	681a      	ldr	r2, [r3, #0]
 800e544:	6a3b      	ldr	r3, [r7, #32]
 800e546:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e54a:	685a      	ldr	r2, [r3, #4]
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	1ad2      	subs	r2, r2, r3
 800e550:	2308      	movs	r3, #8
 800e552:	005b      	lsls	r3, r3, #1
 800e554:	429a      	cmp	r2, r3
 800e556:	d91f      	bls.n	800e598 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	4413      	add	r3, r2
 800e55e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e560:	69bb      	ldr	r3, [r7, #24]
 800e562:	f003 0307 	and.w	r3, r3, #7
 800e566:	2b00      	cmp	r3, #0
 800e568:	d00a      	beq.n	800e580 <pvPortMalloc+0xf8>
	__asm volatile
 800e56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e56e:	f383 8811 	msr	BASEPRI, r3
 800e572:	f3bf 8f6f 	isb	sy
 800e576:	f3bf 8f4f 	dsb	sy
 800e57a:	613b      	str	r3, [r7, #16]
}
 800e57c:	bf00      	nop
 800e57e:	e7fe      	b.n	800e57e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e582:	685a      	ldr	r2, [r3, #4]
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	1ad2      	subs	r2, r2, r3
 800e588:	69bb      	ldr	r3, [r7, #24]
 800e58a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e58e:	687a      	ldr	r2, [r7, #4]
 800e590:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e592:	69b8      	ldr	r0, [r7, #24]
 800e594:	f000 f908 	bl	800e7a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e598:	4b1d      	ldr	r3, [pc, #116]	; (800e610 <pvPortMalloc+0x188>)
 800e59a:	681a      	ldr	r2, [r3, #0]
 800e59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e59e:	685b      	ldr	r3, [r3, #4]
 800e5a0:	1ad3      	subs	r3, r2, r3
 800e5a2:	4a1b      	ldr	r2, [pc, #108]	; (800e610 <pvPortMalloc+0x188>)
 800e5a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e5a6:	4b1a      	ldr	r3, [pc, #104]	; (800e610 <pvPortMalloc+0x188>)
 800e5a8:	681a      	ldr	r2, [r3, #0]
 800e5aa:	4b1b      	ldr	r3, [pc, #108]	; (800e618 <pvPortMalloc+0x190>)
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	429a      	cmp	r2, r3
 800e5b0:	d203      	bcs.n	800e5ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e5b2:	4b17      	ldr	r3, [pc, #92]	; (800e610 <pvPortMalloc+0x188>)
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	4a18      	ldr	r2, [pc, #96]	; (800e618 <pvPortMalloc+0x190>)
 800e5b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5bc:	685a      	ldr	r2, [r3, #4]
 800e5be:	4b13      	ldr	r3, [pc, #76]	; (800e60c <pvPortMalloc+0x184>)
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	431a      	orrs	r2, r3
 800e5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e5ce:	4b13      	ldr	r3, [pc, #76]	; (800e61c <pvPortMalloc+0x194>)
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	3301      	adds	r3, #1
 800e5d4:	4a11      	ldr	r2, [pc, #68]	; (800e61c <pvPortMalloc+0x194>)
 800e5d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e5d8:	f7fe fbd4 	bl	800cd84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e5dc:	69fb      	ldr	r3, [r7, #28]
 800e5de:	f003 0307 	and.w	r3, r3, #7
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d00a      	beq.n	800e5fc <pvPortMalloc+0x174>
	__asm volatile
 800e5e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5ea:	f383 8811 	msr	BASEPRI, r3
 800e5ee:	f3bf 8f6f 	isb	sy
 800e5f2:	f3bf 8f4f 	dsb	sy
 800e5f6:	60fb      	str	r3, [r7, #12]
}
 800e5f8:	bf00      	nop
 800e5fa:	e7fe      	b.n	800e5fa <pvPortMalloc+0x172>
	return pvReturn;
 800e5fc:	69fb      	ldr	r3, [r7, #28]
}
 800e5fe:	4618      	mov	r0, r3
 800e600:	3728      	adds	r7, #40	; 0x28
 800e602:	46bd      	mov	sp, r7
 800e604:	bd80      	pop	{r7, pc}
 800e606:	bf00      	nop
 800e608:	20009b54 	.word	0x20009b54
 800e60c:	20009b68 	.word	0x20009b68
 800e610:	20009b58 	.word	0x20009b58
 800e614:	20009b4c 	.word	0x20009b4c
 800e618:	20009b5c 	.word	0x20009b5c
 800e61c:	20009b60 	.word	0x20009b60

0800e620 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b086      	sub	sp, #24
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d04d      	beq.n	800e6ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e632:	2308      	movs	r3, #8
 800e634:	425b      	negs	r3, r3
 800e636:	697a      	ldr	r2, [r7, #20]
 800e638:	4413      	add	r3, r2
 800e63a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e63c:	697b      	ldr	r3, [r7, #20]
 800e63e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e640:	693b      	ldr	r3, [r7, #16]
 800e642:	685a      	ldr	r2, [r3, #4]
 800e644:	4b24      	ldr	r3, [pc, #144]	; (800e6d8 <vPortFree+0xb8>)
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	4013      	ands	r3, r2
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d10a      	bne.n	800e664 <vPortFree+0x44>
	__asm volatile
 800e64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e652:	f383 8811 	msr	BASEPRI, r3
 800e656:	f3bf 8f6f 	isb	sy
 800e65a:	f3bf 8f4f 	dsb	sy
 800e65e:	60fb      	str	r3, [r7, #12]
}
 800e660:	bf00      	nop
 800e662:	e7fe      	b.n	800e662 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e664:	693b      	ldr	r3, [r7, #16]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d00a      	beq.n	800e682 <vPortFree+0x62>
	__asm volatile
 800e66c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e670:	f383 8811 	msr	BASEPRI, r3
 800e674:	f3bf 8f6f 	isb	sy
 800e678:	f3bf 8f4f 	dsb	sy
 800e67c:	60bb      	str	r3, [r7, #8]
}
 800e67e:	bf00      	nop
 800e680:	e7fe      	b.n	800e680 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e682:	693b      	ldr	r3, [r7, #16]
 800e684:	685a      	ldr	r2, [r3, #4]
 800e686:	4b14      	ldr	r3, [pc, #80]	; (800e6d8 <vPortFree+0xb8>)
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	4013      	ands	r3, r2
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d01e      	beq.n	800e6ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e690:	693b      	ldr	r3, [r7, #16]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d11a      	bne.n	800e6ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e698:	693b      	ldr	r3, [r7, #16]
 800e69a:	685a      	ldr	r2, [r3, #4]
 800e69c:	4b0e      	ldr	r3, [pc, #56]	; (800e6d8 <vPortFree+0xb8>)
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	43db      	mvns	r3, r3
 800e6a2:	401a      	ands	r2, r3
 800e6a4:	693b      	ldr	r3, [r7, #16]
 800e6a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e6a8:	f7fe fb5e 	bl	800cd68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e6ac:	693b      	ldr	r3, [r7, #16]
 800e6ae:	685a      	ldr	r2, [r3, #4]
 800e6b0:	4b0a      	ldr	r3, [pc, #40]	; (800e6dc <vPortFree+0xbc>)
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	4413      	add	r3, r2
 800e6b6:	4a09      	ldr	r2, [pc, #36]	; (800e6dc <vPortFree+0xbc>)
 800e6b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e6ba:	6938      	ldr	r0, [r7, #16]
 800e6bc:	f000 f874 	bl	800e7a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e6c0:	4b07      	ldr	r3, [pc, #28]	; (800e6e0 <vPortFree+0xc0>)
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	3301      	adds	r3, #1
 800e6c6:	4a06      	ldr	r2, [pc, #24]	; (800e6e0 <vPortFree+0xc0>)
 800e6c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e6ca:	f7fe fb5b 	bl	800cd84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e6ce:	bf00      	nop
 800e6d0:	3718      	adds	r7, #24
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	bd80      	pop	{r7, pc}
 800e6d6:	bf00      	nop
 800e6d8:	20009b68 	.word	0x20009b68
 800e6dc:	20009b58 	.word	0x20009b58
 800e6e0:	20009b64 	.word	0x20009b64

0800e6e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e6e4:	b480      	push	{r7}
 800e6e6:	b085      	sub	sp, #20
 800e6e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e6ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e6ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e6f0:	4b27      	ldr	r3, [pc, #156]	; (800e790 <prvHeapInit+0xac>)
 800e6f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	f003 0307 	and.w	r3, r3, #7
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d00c      	beq.n	800e718 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	3307      	adds	r3, #7
 800e702:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	f023 0307 	bic.w	r3, r3, #7
 800e70a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e70c:	68ba      	ldr	r2, [r7, #8]
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	1ad3      	subs	r3, r2, r3
 800e712:	4a1f      	ldr	r2, [pc, #124]	; (800e790 <prvHeapInit+0xac>)
 800e714:	4413      	add	r3, r2
 800e716:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e71c:	4a1d      	ldr	r2, [pc, #116]	; (800e794 <prvHeapInit+0xb0>)
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e722:	4b1c      	ldr	r3, [pc, #112]	; (800e794 <prvHeapInit+0xb0>)
 800e724:	2200      	movs	r2, #0
 800e726:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	68ba      	ldr	r2, [r7, #8]
 800e72c:	4413      	add	r3, r2
 800e72e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e730:	2208      	movs	r2, #8
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	1a9b      	subs	r3, r3, r2
 800e736:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	f023 0307 	bic.w	r3, r3, #7
 800e73e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	4a15      	ldr	r2, [pc, #84]	; (800e798 <prvHeapInit+0xb4>)
 800e744:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e746:	4b14      	ldr	r3, [pc, #80]	; (800e798 <prvHeapInit+0xb4>)
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	2200      	movs	r2, #0
 800e74c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e74e:	4b12      	ldr	r3, [pc, #72]	; (800e798 <prvHeapInit+0xb4>)
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	2200      	movs	r2, #0
 800e754:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e75a:	683b      	ldr	r3, [r7, #0]
 800e75c:	68fa      	ldr	r2, [r7, #12]
 800e75e:	1ad2      	subs	r2, r2, r3
 800e760:	683b      	ldr	r3, [r7, #0]
 800e762:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e764:	4b0c      	ldr	r3, [pc, #48]	; (800e798 <prvHeapInit+0xb4>)
 800e766:	681a      	ldr	r2, [r3, #0]
 800e768:	683b      	ldr	r3, [r7, #0]
 800e76a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e76c:	683b      	ldr	r3, [r7, #0]
 800e76e:	685b      	ldr	r3, [r3, #4]
 800e770:	4a0a      	ldr	r2, [pc, #40]	; (800e79c <prvHeapInit+0xb8>)
 800e772:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e774:	683b      	ldr	r3, [r7, #0]
 800e776:	685b      	ldr	r3, [r3, #4]
 800e778:	4a09      	ldr	r2, [pc, #36]	; (800e7a0 <prvHeapInit+0xbc>)
 800e77a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e77c:	4b09      	ldr	r3, [pc, #36]	; (800e7a4 <prvHeapInit+0xc0>)
 800e77e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e782:	601a      	str	r2, [r3, #0]
}
 800e784:	bf00      	nop
 800e786:	3714      	adds	r7, #20
 800e788:	46bd      	mov	sp, r7
 800e78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78e:	4770      	bx	lr
 800e790:	20005b4c 	.word	0x20005b4c
 800e794:	20009b4c 	.word	0x20009b4c
 800e798:	20009b54 	.word	0x20009b54
 800e79c:	20009b5c 	.word	0x20009b5c
 800e7a0:	20009b58 	.word	0x20009b58
 800e7a4:	20009b68 	.word	0x20009b68

0800e7a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e7a8:	b480      	push	{r7}
 800e7aa:	b085      	sub	sp, #20
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e7b0:	4b28      	ldr	r3, [pc, #160]	; (800e854 <prvInsertBlockIntoFreeList+0xac>)
 800e7b2:	60fb      	str	r3, [r7, #12]
 800e7b4:	e002      	b.n	800e7bc <prvInsertBlockIntoFreeList+0x14>
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	60fb      	str	r3, [r7, #12]
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	687a      	ldr	r2, [r7, #4]
 800e7c2:	429a      	cmp	r2, r3
 800e7c4:	d8f7      	bhi.n	800e7b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	685b      	ldr	r3, [r3, #4]
 800e7ce:	68ba      	ldr	r2, [r7, #8]
 800e7d0:	4413      	add	r3, r2
 800e7d2:	687a      	ldr	r2, [r7, #4]
 800e7d4:	429a      	cmp	r2, r3
 800e7d6:	d108      	bne.n	800e7ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	685a      	ldr	r2, [r3, #4]
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	685b      	ldr	r3, [r3, #4]
 800e7e0:	441a      	add	r2, r3
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	685b      	ldr	r3, [r3, #4]
 800e7f2:	68ba      	ldr	r2, [r7, #8]
 800e7f4:	441a      	add	r2, r3
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	429a      	cmp	r2, r3
 800e7fc:	d118      	bne.n	800e830 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	681a      	ldr	r2, [r3, #0]
 800e802:	4b15      	ldr	r3, [pc, #84]	; (800e858 <prvInsertBlockIntoFreeList+0xb0>)
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	429a      	cmp	r2, r3
 800e808:	d00d      	beq.n	800e826 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	685a      	ldr	r2, [r3, #4]
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	685b      	ldr	r3, [r3, #4]
 800e814:	441a      	add	r2, r3
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	681a      	ldr	r2, [r3, #0]
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	601a      	str	r2, [r3, #0]
 800e824:	e008      	b.n	800e838 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e826:	4b0c      	ldr	r3, [pc, #48]	; (800e858 <prvInsertBlockIntoFreeList+0xb0>)
 800e828:	681a      	ldr	r2, [r3, #0]
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	601a      	str	r2, [r3, #0]
 800e82e:	e003      	b.n	800e838 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	681a      	ldr	r2, [r3, #0]
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e838:	68fa      	ldr	r2, [r7, #12]
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	429a      	cmp	r2, r3
 800e83e:	d002      	beq.n	800e846 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	687a      	ldr	r2, [r7, #4]
 800e844:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e846:	bf00      	nop
 800e848:	3714      	adds	r7, #20
 800e84a:	46bd      	mov	sp, r7
 800e84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e850:	4770      	bx	lr
 800e852:	bf00      	nop
 800e854:	20009b4c 	.word	0x20009b4c
 800e858:	20009b54 	.word	0x20009b54

0800e85c <rcl_node_get_default_options>:
 800e85c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e85e:	b087      	sub	sp, #28
 800e860:	4607      	mov	r7, r0
 800e862:	466d      	mov	r5, sp
 800e864:	4668      	mov	r0, sp
 800e866:	f000 ff5b 	bl	800f720 <rcutils_get_default_allocator>
 800e86a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e86c:	4c08      	ldr	r4, [pc, #32]	; (800e890 <rcl_node_get_default_options+0x34>)
 800e86e:	f8d5 c000 	ldr.w	ip, [r5]
 800e872:	1d26      	adds	r6, r4, #4
 800e874:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e876:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e878:	463d      	mov	r5, r7
 800e87a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e87c:	f8c6 c000 	str.w	ip, [r6]
 800e880:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800e884:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800e888:	4638      	mov	r0, r7
 800e88a:	b007      	add	sp, #28
 800e88c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e88e:	bf00      	nop
 800e890:	20000038 	.word	0x20000038

0800e894 <rcl_node_options_copy>:
 800e894:	b1c8      	cbz	r0, 800e8ca <rcl_node_options_copy+0x36>
 800e896:	b4f0      	push	{r4, r5, r6, r7}
 800e898:	460f      	mov	r7, r1
 800e89a:	b199      	cbz	r1, 800e8c4 <rcl_node_options_copy+0x30>
 800e89c:	4288      	cmp	r0, r1
 800e89e:	4606      	mov	r6, r0
 800e8a0:	d010      	beq.n	800e8c4 <rcl_node_options_copy+0x30>
 800e8a2:	4605      	mov	r5, r0
 800e8a4:	460c      	mov	r4, r1
 800e8a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e8aa:	f844 3b04 	str.w	r3, [r4], #4
 800e8ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e8b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e8b2:	7e32      	ldrb	r2, [r6, #24]
 800e8b4:	6829      	ldr	r1, [r5, #0]
 800e8b6:	7e73      	ldrb	r3, [r6, #25]
 800e8b8:	6021      	str	r1, [r4, #0]
 800e8ba:	2000      	movs	r0, #0
 800e8bc:	763a      	strb	r2, [r7, #24]
 800e8be:	767b      	strb	r3, [r7, #25]
 800e8c0:	bcf0      	pop	{r4, r5, r6, r7}
 800e8c2:	4770      	bx	lr
 800e8c4:	200b      	movs	r0, #11
 800e8c6:	bcf0      	pop	{r4, r5, r6, r7}
 800e8c8:	4770      	bx	lr
 800e8ca:	200b      	movs	r0, #11
 800e8cc:	4770      	bx	lr
 800e8ce:	bf00      	nop

0800e8d0 <rcl_get_zero_initialized_publisher>:
 800e8d0:	4b01      	ldr	r3, [pc, #4]	; (800e8d8 <rcl_get_zero_initialized_publisher+0x8>)
 800e8d2:	6818      	ldr	r0, [r3, #0]
 800e8d4:	4770      	bx	lr
 800e8d6:	bf00      	nop
 800e8d8:	0801b814 	.word	0x0801b814

0800e8dc <rcl_publisher_init>:
 800e8dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8e0:	b091      	sub	sp, #68	; 0x44
 800e8e2:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800e8e4:	b3d7      	cbz	r7, 800e95c <rcl_publisher_init+0x80>
 800e8e6:	f107 0950 	add.w	r9, r7, #80	; 0x50
 800e8ea:	4604      	mov	r4, r0
 800e8ec:	4648      	mov	r0, r9
 800e8ee:	4688      	mov	r8, r1
 800e8f0:	4616      	mov	r6, r2
 800e8f2:	461d      	mov	r5, r3
 800e8f4:	f000 ff22 	bl	800f73c <rcutils_allocator_is_valid>
 800e8f8:	b380      	cbz	r0, 800e95c <rcl_publisher_init+0x80>
 800e8fa:	b37c      	cbz	r4, 800e95c <rcl_publisher_init+0x80>
 800e8fc:	f8d4 a000 	ldr.w	sl, [r4]
 800e900:	f1ba 0f00 	cmp.w	sl, #0
 800e904:	d004      	beq.n	800e910 <rcl_publisher_init+0x34>
 800e906:	2564      	movs	r5, #100	; 0x64
 800e908:	4628      	mov	r0, r5
 800e90a:	b011      	add	sp, #68	; 0x44
 800e90c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e910:	4640      	mov	r0, r8
 800e912:	f006 fdf9 	bl	8015508 <rcl_node_is_valid>
 800e916:	b330      	cbz	r0, 800e966 <rcl_publisher_init+0x8a>
 800e918:	b306      	cbz	r6, 800e95c <rcl_publisher_init+0x80>
 800e91a:	b1fd      	cbz	r5, 800e95c <rcl_publisher_init+0x80>
 800e91c:	46ce      	mov	lr, r9
 800e91e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e922:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 800e926:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e92a:	f8de 3000 	ldr.w	r3, [lr]
 800e92e:	f8cc 3000 	str.w	r3, [ip]
 800e932:	f000 ff3f 	bl	800f7b4 <rcutils_get_zero_initialized_string_map>
 800e936:	ab10      	add	r3, sp, #64	; 0x40
 800e938:	4684      	mov	ip, r0
 800e93a:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800e93e:	f8cd c020 	str.w	ip, [sp, #32]
 800e942:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800e946:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 800e94a:	4651      	mov	r1, sl
 800e94c:	a808      	add	r0, sp, #32
 800e94e:	f000 ffab 	bl	800f8a8 <rcutils_string_map_init>
 800e952:	b150      	cbz	r0, 800e96a <rcl_publisher_init+0x8e>
 800e954:	280a      	cmp	r0, #10
 800e956:	d013      	beq.n	800e980 <rcl_publisher_init+0xa4>
 800e958:	2501      	movs	r5, #1
 800e95a:	e7d5      	b.n	800e908 <rcl_publisher_init+0x2c>
 800e95c:	250b      	movs	r5, #11
 800e95e:	4628      	mov	r0, r5
 800e960:	b011      	add	sp, #68	; 0x44
 800e962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e966:	25c8      	movs	r5, #200	; 0xc8
 800e968:	e7ce      	b.n	800e908 <rcl_publisher_init+0x2c>
 800e96a:	a808      	add	r0, sp, #32
 800e96c:	f006 fa02 	bl	8014d74 <rcl_get_default_topic_name_substitutions>
 800e970:	4682      	mov	sl, r0
 800e972:	b138      	cbz	r0, 800e984 <rcl_publisher_init+0xa8>
 800e974:	a808      	add	r0, sp, #32
 800e976:	f000 ffd7 	bl	800f928 <rcutils_string_map_fini>
 800e97a:	f1ba 0f0a 	cmp.w	sl, #10
 800e97e:	d1eb      	bne.n	800e958 <rcl_publisher_init+0x7c>
 800e980:	250a      	movs	r5, #10
 800e982:	e7c1      	b.n	800e908 <rcl_publisher_init+0x2c>
 800e984:	4640      	mov	r0, r8
 800e986:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800e98a:	f006 fdc7 	bl	801551c <rcl_node_get_name>
 800e98e:	4682      	mov	sl, r0
 800e990:	4640      	mov	r0, r8
 800e992:	f006 fdcb 	bl	801552c <rcl_node_get_namespace>
 800e996:	4686      	mov	lr, r0
 800e998:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800e99c:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 800e9a0:	46ec      	mov	ip, sp
 800e9a2:	f8cd b014 	str.w	fp, [sp, #20]
 800e9a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e9aa:	f8d9 3000 	ldr.w	r3, [r9]
 800e9ae:	f8cc 3000 	str.w	r3, [ip]
 800e9b2:	4628      	mov	r0, r5
 800e9b4:	4651      	mov	r1, sl
 800e9b6:	4672      	mov	r2, lr
 800e9b8:	ab08      	add	r3, sp, #32
 800e9ba:	f006 f875 	bl	8014aa8 <rcl_expand_topic_name>
 800e9be:	4605      	mov	r5, r0
 800e9c0:	a808      	add	r0, sp, #32
 800e9c2:	f000 ffb1 	bl	800f928 <rcutils_string_map_fini>
 800e9c6:	b920      	cbnz	r0, 800e9d2 <rcl_publisher_init+0xf6>
 800e9c8:	b15d      	cbz	r5, 800e9e2 <rcl_publisher_init+0x106>
 800e9ca:	2d67      	cmp	r5, #103	; 0x67
 800e9cc:	d002      	beq.n	800e9d4 <rcl_publisher_init+0xf8>
 800e9ce:	2d69      	cmp	r5, #105	; 0x69
 800e9d0:	d05f      	beq.n	800ea92 <rcl_publisher_init+0x1b6>
 800e9d2:	2501      	movs	r5, #1
 800e9d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e9d6:	2800      	cmp	r0, #0
 800e9d8:	d096      	beq.n	800e908 <rcl_publisher_init+0x2c>
 800e9da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e9dc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e9de:	4798      	blx	r3
 800e9e0:	e792      	b.n	800e908 <rcl_publisher_init+0x2c>
 800e9e2:	4640      	mov	r0, r8
 800e9e4:	f006 fdaa 	bl	801553c <rcl_node_get_options>
 800e9e8:	2800      	cmp	r0, #0
 800e9ea:	d0f2      	beq.n	800e9d2 <rcl_publisher_init+0xf6>
 800e9ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e9ee:	f7f1 fc01 	bl	80001f4 <strlen>
 800e9f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9f4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e9f6:	3001      	adds	r0, #1
 800e9f8:	4798      	blx	r3
 800e9fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e9fc:	9107      	str	r1, [sp, #28]
 800e9fe:	4681      	mov	r9, r0
 800ea00:	4608      	mov	r0, r1
 800ea02:	f7f1 fbf7 	bl	80001f4 <strlen>
 800ea06:	9907      	ldr	r1, [sp, #28]
 800ea08:	1c42      	adds	r2, r0, #1
 800ea0a:	4648      	mov	r0, r9
 800ea0c:	f00b fe83 	bl	801a716 <memcpy>
 800ea10:	462a      	mov	r2, r5
 800ea12:	4648      	mov	r0, r9
 800ea14:	a90a      	add	r1, sp, #40	; 0x28
 800ea16:	f001 f865 	bl	800fae4 <rmw_validate_full_topic_name>
 800ea1a:	2800      	cmp	r0, #0
 800ea1c:	d137      	bne.n	800ea8e <rcl_publisher_init+0x1b2>
 800ea1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d138      	bne.n	800ea96 <rcl_publisher_init+0x1ba>
 800ea24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea26:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ea28:	20c0      	movs	r0, #192	; 0xc0
 800ea2a:	4798      	blx	r3
 800ea2c:	6020      	str	r0, [r4, #0]
 800ea2e:	b3a0      	cbz	r0, 800ea9a <rcl_publisher_init+0x1be>
 800ea30:	4640      	mov	r0, r8
 800ea32:	f006 fd8b 	bl	801554c <rcl_node_get_rmw_handle>
 800ea36:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ea3a:	9300      	str	r3, [sp, #0]
 800ea3c:	4631      	mov	r1, r6
 800ea3e:	463b      	mov	r3, r7
 800ea40:	464a      	mov	r2, r9
 800ea42:	6825      	ldr	r5, [r4, #0]
 800ea44:	f001 f94e 	bl	800fce4 <rmw_create_publisher>
 800ea48:	6821      	ldr	r1, [r4, #0]
 800ea4a:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
 800ea4e:	f8d1 00bc 	ldr.w	r0, [r1, #188]	; 0xbc
 800ea52:	b388      	cbz	r0, 800eab8 <rcl_publisher_init+0x1dc>
 800ea54:	3168      	adds	r1, #104	; 0x68
 800ea56:	f001 fa23 	bl	800fea0 <rmw_publisher_get_actual_qos>
 800ea5a:	6823      	ldr	r3, [r4, #0]
 800ea5c:	4605      	mov	r5, r0
 800ea5e:	b9f0      	cbnz	r0, 800ea9e <rcl_publisher_init+0x1c2>
 800ea60:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800ea64:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 800ea68:	4618      	mov	r0, r3
 800ea6a:	2268      	movs	r2, #104	; 0x68
 800ea6c:	4639      	mov	r1, r7
 800ea6e:	f00b fe52 	bl	801a716 <memcpy>
 800ea72:	f8d8 2000 	ldr.w	r2, [r8]
 800ea76:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
 800ea7a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ea7c:	b110      	cbz	r0, 800ea84 <rcl_publisher_init+0x1a8>
 800ea7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea80:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ea82:	4798      	blx	r3
 800ea84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea86:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ea88:	4648      	mov	r0, r9
 800ea8a:	4798      	blx	r3
 800ea8c:	e73c      	b.n	800e908 <rcl_publisher_init+0x2c>
 800ea8e:	2501      	movs	r5, #1
 800ea90:	e7f3      	b.n	800ea7a <rcl_publisher_init+0x19e>
 800ea92:	2567      	movs	r5, #103	; 0x67
 800ea94:	e79e      	b.n	800e9d4 <rcl_publisher_init+0xf8>
 800ea96:	2567      	movs	r5, #103	; 0x67
 800ea98:	e7ef      	b.n	800ea7a <rcl_publisher_init+0x19e>
 800ea9a:	250a      	movs	r5, #10
 800ea9c:	e7ed      	b.n	800ea7a <rcl_publisher_init+0x19e>
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d0f5      	beq.n	800ea8e <rcl_publisher_init+0x1b2>
 800eaa2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800eaa6:	b13b      	cbz	r3, 800eab8 <rcl_publisher_init+0x1dc>
 800eaa8:	4640      	mov	r0, r8
 800eaaa:	f006 fd4f 	bl	801554c <rcl_node_get_rmw_handle>
 800eaae:	6823      	ldr	r3, [r4, #0]
 800eab0:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 800eab4:	f001 f9f6 	bl	800fea4 <rmw_destroy_publisher>
 800eab8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eaba:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800eabc:	6820      	ldr	r0, [r4, #0]
 800eabe:	4798      	blx	r3
 800eac0:	2300      	movs	r3, #0
 800eac2:	6023      	str	r3, [r4, #0]
 800eac4:	2501      	movs	r5, #1
 800eac6:	e7d8      	b.n	800ea7a <rcl_publisher_init+0x19e>

0800eac8 <rcl_publisher_get_default_options>:
 800eac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eaca:	4f0e      	ldr	r7, [pc, #56]	; (800eb04 <rcl_publisher_get_default_options+0x3c>)
 800eacc:	490e      	ldr	r1, [pc, #56]	; (800eb08 <rcl_publisher_get_default_options+0x40>)
 800eace:	b087      	sub	sp, #28
 800ead0:	4606      	mov	r6, r0
 800ead2:	2250      	movs	r2, #80	; 0x50
 800ead4:	4638      	mov	r0, r7
 800ead6:	f00b fe1e 	bl	801a716 <memcpy>
 800eada:	466c      	mov	r4, sp
 800eadc:	4668      	mov	r0, sp
 800eade:	f000 fe1f 	bl	800f720 <rcutils_get_default_allocator>
 800eae2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800eae4:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800eae8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800eaea:	6823      	ldr	r3, [r4, #0]
 800eaec:	602b      	str	r3, [r5, #0]
 800eaee:	f000 ffe1 	bl	800fab4 <rmw_get_default_publisher_options>
 800eaf2:	4639      	mov	r1, r7
 800eaf4:	6678      	str	r0, [r7, #100]	; 0x64
 800eaf6:	2268      	movs	r2, #104	; 0x68
 800eaf8:	4630      	mov	r0, r6
 800eafa:	f00b fe0c 	bl	801a716 <memcpy>
 800eafe:	4630      	mov	r0, r6
 800eb00:	b007      	add	sp, #28
 800eb02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb04:	20009b70 	.word	0x20009b70
 800eb08:	0801b818 	.word	0x0801b818

0800eb0c <rcl_publish>:
 800eb0c:	b1f8      	cbz	r0, 800eb4e <rcl_publish+0x42>
 800eb0e:	6803      	ldr	r3, [r0, #0]
 800eb10:	b570      	push	{r4, r5, r6, lr}
 800eb12:	4604      	mov	r4, r0
 800eb14:	b1b3      	cbz	r3, 800eb44 <rcl_publish+0x38>
 800eb16:	4616      	mov	r6, r2
 800eb18:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800eb1c:	b192      	cbz	r2, 800eb44 <rcl_publish+0x38>
 800eb1e:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800eb22:	460d      	mov	r5, r1
 800eb24:	f005 ff56 	bl	80149d4 <rcl_context_is_valid>
 800eb28:	b160      	cbz	r0, 800eb44 <rcl_publish+0x38>
 800eb2a:	6823      	ldr	r3, [r4, #0]
 800eb2c:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 800eb30:	b140      	cbz	r0, 800eb44 <rcl_publish+0x38>
 800eb32:	b155      	cbz	r5, 800eb4a <rcl_publish+0x3e>
 800eb34:	4632      	mov	r2, r6
 800eb36:	4629      	mov	r1, r5
 800eb38:	f001 f874 	bl	800fc24 <rmw_publish>
 800eb3c:	3800      	subs	r0, #0
 800eb3e:	bf18      	it	ne
 800eb40:	2001      	movne	r0, #1
 800eb42:	bd70      	pop	{r4, r5, r6, pc}
 800eb44:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800eb48:	bd70      	pop	{r4, r5, r6, pc}
 800eb4a:	200b      	movs	r0, #11
 800eb4c:	bd70      	pop	{r4, r5, r6, pc}
 800eb4e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800eb52:	4770      	bx	lr

0800eb54 <rcl_get_zero_initialized_subscription>:
 800eb54:	4b01      	ldr	r3, [pc, #4]	; (800eb5c <rcl_get_zero_initialized_subscription+0x8>)
 800eb56:	6818      	ldr	r0, [r3, #0]
 800eb58:	4770      	bx	lr
 800eb5a:	bf00      	nop
 800eb5c:	0801b868 	.word	0x0801b868

0800eb60 <rcl_subscription_init>:
 800eb60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb64:	b091      	sub	sp, #68	; 0x44
 800eb66:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800eb68:	b1d7      	cbz	r7, 800eba0 <rcl_subscription_init+0x40>
 800eb6a:	f107 0950 	add.w	r9, r7, #80	; 0x50
 800eb6e:	4604      	mov	r4, r0
 800eb70:	4648      	mov	r0, r9
 800eb72:	4688      	mov	r8, r1
 800eb74:	4616      	mov	r6, r2
 800eb76:	461d      	mov	r5, r3
 800eb78:	f000 fde0 	bl	800f73c <rcutils_allocator_is_valid>
 800eb7c:	b180      	cbz	r0, 800eba0 <rcl_subscription_init+0x40>
 800eb7e:	b17c      	cbz	r4, 800eba0 <rcl_subscription_init+0x40>
 800eb80:	4640      	mov	r0, r8
 800eb82:	f006 fcc1 	bl	8015508 <rcl_node_is_valid>
 800eb86:	b380      	cbz	r0, 800ebea <rcl_subscription_init+0x8a>
 800eb88:	b156      	cbz	r6, 800eba0 <rcl_subscription_init+0x40>
 800eb8a:	b14d      	cbz	r5, 800eba0 <rcl_subscription_init+0x40>
 800eb8c:	f8d4 a000 	ldr.w	sl, [r4]
 800eb90:	f1ba 0f00 	cmp.w	sl, #0
 800eb94:	d009      	beq.n	800ebaa <rcl_subscription_init+0x4a>
 800eb96:	2564      	movs	r5, #100	; 0x64
 800eb98:	4628      	mov	r0, r5
 800eb9a:	b011      	add	sp, #68	; 0x44
 800eb9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eba0:	250b      	movs	r5, #11
 800eba2:	4628      	mov	r0, r5
 800eba4:	b011      	add	sp, #68	; 0x44
 800eba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebaa:	46ce      	mov	lr, r9
 800ebac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ebb0:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 800ebb4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ebb8:	f8de 3000 	ldr.w	r3, [lr]
 800ebbc:	f8cc 3000 	str.w	r3, [ip]
 800ebc0:	f000 fdf8 	bl	800f7b4 <rcutils_get_zero_initialized_string_map>
 800ebc4:	ab10      	add	r3, sp, #64	; 0x40
 800ebc6:	4684      	mov	ip, r0
 800ebc8:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800ebcc:	f8cd c020 	str.w	ip, [sp, #32]
 800ebd0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ebd4:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 800ebd8:	4651      	mov	r1, sl
 800ebda:	a808      	add	r0, sp, #32
 800ebdc:	f000 fe64 	bl	800f8a8 <rcutils_string_map_init>
 800ebe0:	b140      	cbz	r0, 800ebf4 <rcl_subscription_init+0x94>
 800ebe2:	280a      	cmp	r0, #10
 800ebe4:	d011      	beq.n	800ec0a <rcl_subscription_init+0xaa>
 800ebe6:	2501      	movs	r5, #1
 800ebe8:	e7db      	b.n	800eba2 <rcl_subscription_init+0x42>
 800ebea:	25c8      	movs	r5, #200	; 0xc8
 800ebec:	4628      	mov	r0, r5
 800ebee:	b011      	add	sp, #68	; 0x44
 800ebf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebf4:	a808      	add	r0, sp, #32
 800ebf6:	f006 f8bd 	bl	8014d74 <rcl_get_default_topic_name_substitutions>
 800ebfa:	4682      	mov	sl, r0
 800ebfc:	b138      	cbz	r0, 800ec0e <rcl_subscription_init+0xae>
 800ebfe:	a808      	add	r0, sp, #32
 800ec00:	f000 fe92 	bl	800f928 <rcutils_string_map_fini>
 800ec04:	f1ba 0f0a 	cmp.w	sl, #10
 800ec08:	d1ed      	bne.n	800ebe6 <rcl_subscription_init+0x86>
 800ec0a:	250a      	movs	r5, #10
 800ec0c:	e7c9      	b.n	800eba2 <rcl_subscription_init+0x42>
 800ec0e:	4640      	mov	r0, r8
 800ec10:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800ec14:	f006 fc82 	bl	801551c <rcl_node_get_name>
 800ec18:	4682      	mov	sl, r0
 800ec1a:	4640      	mov	r0, r8
 800ec1c:	f006 fc86 	bl	801552c <rcl_node_get_namespace>
 800ec20:	4686      	mov	lr, r0
 800ec22:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800ec26:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 800ec2a:	46ec      	mov	ip, sp
 800ec2c:	f8cd b014 	str.w	fp, [sp, #20]
 800ec30:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ec34:	f8d9 3000 	ldr.w	r3, [r9]
 800ec38:	f8cc 3000 	str.w	r3, [ip]
 800ec3c:	4628      	mov	r0, r5
 800ec3e:	4651      	mov	r1, sl
 800ec40:	4672      	mov	r2, lr
 800ec42:	ab08      	add	r3, sp, #32
 800ec44:	f005 ff30 	bl	8014aa8 <rcl_expand_topic_name>
 800ec48:	4605      	mov	r5, r0
 800ec4a:	a808      	add	r0, sp, #32
 800ec4c:	f000 fe6c 	bl	800f928 <rcutils_string_map_fini>
 800ec50:	b920      	cbnz	r0, 800ec5c <rcl_subscription_init+0xfc>
 800ec52:	b15d      	cbz	r5, 800ec6c <rcl_subscription_init+0x10c>
 800ec54:	2d67      	cmp	r5, #103	; 0x67
 800ec56:	d002      	beq.n	800ec5e <rcl_subscription_init+0xfe>
 800ec58:	2d69      	cmp	r5, #105	; 0x69
 800ec5a:	d05a      	beq.n	800ed12 <rcl_subscription_init+0x1b2>
 800ec5c:	2501      	movs	r5, #1
 800ec5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ec60:	2800      	cmp	r0, #0
 800ec62:	d09e      	beq.n	800eba2 <rcl_subscription_init+0x42>
 800ec64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ec66:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ec68:	4798      	blx	r3
 800ec6a:	e79a      	b.n	800eba2 <rcl_subscription_init+0x42>
 800ec6c:	4640      	mov	r0, r8
 800ec6e:	f006 fc65 	bl	801553c <rcl_node_get_options>
 800ec72:	2800      	cmp	r0, #0
 800ec74:	d0f2      	beq.n	800ec5c <rcl_subscription_init+0xfc>
 800ec76:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ec78:	f7f1 fabc 	bl	80001f4 <strlen>
 800ec7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec7e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ec80:	3001      	adds	r0, #1
 800ec82:	4798      	blx	r3
 800ec84:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ec86:	9107      	str	r1, [sp, #28]
 800ec88:	4681      	mov	r9, r0
 800ec8a:	4608      	mov	r0, r1
 800ec8c:	f7f1 fab2 	bl	80001f4 <strlen>
 800ec90:	9907      	ldr	r1, [sp, #28]
 800ec92:	1c42      	adds	r2, r0, #1
 800ec94:	4648      	mov	r0, r9
 800ec96:	f00b fd3e 	bl	801a716 <memcpy>
 800ec9a:	462a      	mov	r2, r5
 800ec9c:	4648      	mov	r0, r9
 800ec9e:	a90a      	add	r1, sp, #40	; 0x28
 800eca0:	f000 ff20 	bl	800fae4 <rmw_validate_full_topic_name>
 800eca4:	2800      	cmp	r0, #0
 800eca6:	d132      	bne.n	800ed0e <rcl_subscription_init+0x1ae>
 800eca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d133      	bne.n	800ed16 <rcl_subscription_init+0x1b6>
 800ecae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ecb0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ecb2:	20c8      	movs	r0, #200	; 0xc8
 800ecb4:	4798      	blx	r3
 800ecb6:	6020      	str	r0, [r4, #0]
 800ecb8:	b378      	cbz	r0, 800ed1a <rcl_subscription_init+0x1ba>
 800ecba:	4640      	mov	r0, r8
 800ecbc:	f006 fc46 	bl	801554c <rcl_node_get_rmw_handle>
 800ecc0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ecc4:	9300      	str	r3, [sp, #0]
 800ecc6:	4631      	mov	r1, r6
 800ecc8:	463b      	mov	r3, r7
 800ecca:	464a      	mov	r2, r9
 800eccc:	6825      	ldr	r5, [r4, #0]
 800ecce:	f001 f939 	bl	800ff44 <rmw_create_subscription>
 800ecd2:	6821      	ldr	r1, [r4, #0]
 800ecd4:	f8c5 00c0 	str.w	r0, [r5, #192]	; 0xc0
 800ecd8:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
 800ecdc:	b368      	cbz	r0, 800ed3a <rcl_subscription_init+0x1da>
 800ecde:	3170      	adds	r1, #112	; 0x70
 800ece0:	f001 fa10 	bl	8010104 <rmw_subscription_get_actual_qos>
 800ece4:	4605      	mov	r5, r0
 800ece6:	b9d0      	cbnz	r0, 800ed1e <rcl_subscription_init+0x1be>
 800ece8:	6820      	ldr	r0, [r4, #0]
 800ecea:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800ecee:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 800ecf2:	2270      	movs	r2, #112	; 0x70
 800ecf4:	4639      	mov	r1, r7
 800ecf6:	f00b fd0e 	bl	801a716 <memcpy>
 800ecfa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ecfc:	b110      	cbz	r0, 800ed04 <rcl_subscription_init+0x1a4>
 800ecfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed00:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ed02:	4798      	blx	r3
 800ed04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed06:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ed08:	4648      	mov	r0, r9
 800ed0a:	4798      	blx	r3
 800ed0c:	e749      	b.n	800eba2 <rcl_subscription_init+0x42>
 800ed0e:	2501      	movs	r5, #1
 800ed10:	e7f3      	b.n	800ecfa <rcl_subscription_init+0x19a>
 800ed12:	2567      	movs	r5, #103	; 0x67
 800ed14:	e7a3      	b.n	800ec5e <rcl_subscription_init+0xfe>
 800ed16:	2567      	movs	r5, #103	; 0x67
 800ed18:	e7ef      	b.n	800ecfa <rcl_subscription_init+0x19a>
 800ed1a:	250a      	movs	r5, #10
 800ed1c:	e7ed      	b.n	800ecfa <rcl_subscription_init+0x19a>
 800ed1e:	6823      	ldr	r3, [r4, #0]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d0f4      	beq.n	800ed0e <rcl_subscription_init+0x1ae>
 800ed24:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800ed28:	b13b      	cbz	r3, 800ed3a <rcl_subscription_init+0x1da>
 800ed2a:	4640      	mov	r0, r8
 800ed2c:	f006 fc0e 	bl	801554c <rcl_node_get_rmw_handle>
 800ed30:	6823      	ldr	r3, [r4, #0]
 800ed32:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800ed36:	f001 f9e7 	bl	8010108 <rmw_destroy_subscription>
 800ed3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed3c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ed3e:	6820      	ldr	r0, [r4, #0]
 800ed40:	4798      	blx	r3
 800ed42:	2300      	movs	r3, #0
 800ed44:	6023      	str	r3, [r4, #0]
 800ed46:	2501      	movs	r5, #1
 800ed48:	e7d7      	b.n	800ecfa <rcl_subscription_init+0x19a>
 800ed4a:	bf00      	nop

0800ed4c <rcl_subscription_get_default_options>:
 800ed4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed50:	4f12      	ldr	r7, [pc, #72]	; (800ed9c <rcl_subscription_get_default_options+0x50>)
 800ed52:	4913      	ldr	r1, [pc, #76]	; (800eda0 <rcl_subscription_get_default_options+0x54>)
 800ed54:	b088      	sub	sp, #32
 800ed56:	4606      	mov	r6, r0
 800ed58:	2250      	movs	r2, #80	; 0x50
 800ed5a:	4638      	mov	r0, r7
 800ed5c:	f00b fcdb 	bl	801a716 <memcpy>
 800ed60:	ac02      	add	r4, sp, #8
 800ed62:	a802      	add	r0, sp, #8
 800ed64:	f000 fcdc 	bl	800f720 <rcutils_get_default_allocator>
 800ed68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ed6a:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800ed6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ed70:	46e8      	mov	r8, sp
 800ed72:	6823      	ldr	r3, [r4, #0]
 800ed74:	602b      	str	r3, [r5, #0]
 800ed76:	4640      	mov	r0, r8
 800ed78:	f000 fe9e 	bl	800fab8 <rmw_get_default_subscription_options>
 800ed7c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800ed80:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ed84:	e883 0003 	stmia.w	r3, {r0, r1}
 800ed88:	2270      	movs	r2, #112	; 0x70
 800ed8a:	4639      	mov	r1, r7
 800ed8c:	4630      	mov	r0, r6
 800ed8e:	f00b fcc2 	bl	801a716 <memcpy>
 800ed92:	4630      	mov	r0, r6
 800ed94:	b008      	add	sp, #32
 800ed96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed9a:	bf00      	nop
 800ed9c:	20009bd8 	.word	0x20009bd8
 800eda0:	0801b870 	.word	0x0801b870

0800eda4 <rcl_take>:
 800eda4:	2800      	cmp	r0, #0
 800eda6:	d03f      	beq.n	800ee28 <rcl_take+0x84>
 800eda8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800edac:	4617      	mov	r7, r2
 800edae:	6802      	ldr	r2, [r0, #0]
 800edb0:	b09d      	sub	sp, #116	; 0x74
 800edb2:	4606      	mov	r6, r0
 800edb4:	b382      	cbz	r2, 800ee18 <rcl_take+0x74>
 800edb6:	4699      	mov	r9, r3
 800edb8:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 800edbc:	b363      	cbz	r3, 800ee18 <rcl_take+0x74>
 800edbe:	4688      	mov	r8, r1
 800edc0:	b381      	cbz	r1, 800ee24 <rcl_take+0x80>
 800edc2:	2f00      	cmp	r7, #0
 800edc4:	d034      	beq.n	800ee30 <rcl_take+0x8c>
 800edc6:	a802      	add	r0, sp, #8
 800edc8:	ac02      	add	r4, sp, #8
 800edca:	f000 fe79 	bl	800fac0 <rmw_get_zero_initialized_message_info>
 800edce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800edd0:	463d      	mov	r5, r7
 800edd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800edd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800edd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800edd8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800eddc:	6834      	ldr	r4, [r6, #0]
 800edde:	f8d4 60c0 	ldr.w	r6, [r4, #192]	; 0xc0
 800ede2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800ede6:	2400      	movs	r4, #0
 800ede8:	463b      	mov	r3, r7
 800edea:	4630      	mov	r0, r6
 800edec:	f8cd 9000 	str.w	r9, [sp]
 800edf0:	4641      	mov	r1, r8
 800edf2:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 800edf6:	f88d 403f 	strb.w	r4, [sp, #63]	; 0x3f
 800edfa:	f001 f9e3 	bl	80101c4 <rmw_take_with_info>
 800edfe:	4603      	mov	r3, r0
 800ee00:	b9c0      	cbnz	r0, 800ee34 <rcl_take+0x90>
 800ee02:	f89d 103f 	ldrb.w	r1, [sp, #63]	; 0x3f
 800ee06:	f240 1291 	movw	r2, #401	; 0x191
 800ee0a:	2900      	cmp	r1, #0
 800ee0c:	bf08      	it	eq
 800ee0e:	4613      	moveq	r3, r2
 800ee10:	4618      	mov	r0, r3
 800ee12:	b01d      	add	sp, #116	; 0x74
 800ee14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee18:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	b01d      	add	sp, #116	; 0x74
 800ee20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee24:	230b      	movs	r3, #11
 800ee26:	e7f3      	b.n	800ee10 <rcl_take+0x6c>
 800ee28:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	4770      	bx	lr
 800ee30:	af10      	add	r7, sp, #64	; 0x40
 800ee32:	e7c8      	b.n	800edc6 <rcl_take+0x22>
 800ee34:	f005 fdb0 	bl	8014998 <rcl_convert_rmw_ret_to_rcl_ret>
 800ee38:	4603      	mov	r3, r0
 800ee3a:	e7e9      	b.n	800ee10 <rcl_take+0x6c>

0800ee3c <rcl_subscription_get_rmw_handle>:
 800ee3c:	b118      	cbz	r0, 800ee46 <rcl_subscription_get_rmw_handle+0xa>
 800ee3e:	6800      	ldr	r0, [r0, #0]
 800ee40:	b108      	cbz	r0, 800ee46 <rcl_subscription_get_rmw_handle+0xa>
 800ee42:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 800ee46:	4770      	bx	lr

0800ee48 <_rclc_check_for_new_data>:
 800ee48:	b1e0      	cbz	r0, 800ee84 <_rclc_check_for_new_data+0x3c>
 800ee4a:	7803      	ldrb	r3, [r0, #0]
 800ee4c:	2b08      	cmp	r3, #8
 800ee4e:	d81b      	bhi.n	800ee88 <_rclc_check_for_new_data+0x40>
 800ee50:	e8df f003 	tbb	[pc, r3]
 800ee54:	12161010 	.word	0x12161010
 800ee58:	05050512 	.word	0x05050512
 800ee5c:	14          	.byte	0x14
 800ee5d:	00          	.byte	0x00
 800ee5e:	6a0b      	ldr	r3, [r1, #32]
 800ee60:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800ee62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee66:	3b00      	subs	r3, #0
 800ee68:	bf18      	it	ne
 800ee6a:	2301      	movne	r3, #1
 800ee6c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 800ee70:	2000      	movs	r0, #0
 800ee72:	4770      	bx	lr
 800ee74:	680b      	ldr	r3, [r1, #0]
 800ee76:	e7f3      	b.n	800ee60 <_rclc_check_for_new_data+0x18>
 800ee78:	698b      	ldr	r3, [r1, #24]
 800ee7a:	e7f1      	b.n	800ee60 <_rclc_check_for_new_data+0x18>
 800ee7c:	688b      	ldr	r3, [r1, #8]
 800ee7e:	e7ef      	b.n	800ee60 <_rclc_check_for_new_data+0x18>
 800ee80:	690b      	ldr	r3, [r1, #16]
 800ee82:	e7ed      	b.n	800ee60 <_rclc_check_for_new_data+0x18>
 800ee84:	200b      	movs	r0, #11
 800ee86:	4770      	bx	lr
 800ee88:	2300      	movs	r3, #0
 800ee8a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 800ee8e:	2001      	movs	r0, #1
 800ee90:	4770      	bx	lr
 800ee92:	bf00      	nop

0800ee94 <_rclc_take_new_data>:
 800ee94:	2800      	cmp	r0, #0
 800ee96:	d049      	beq.n	800ef2c <_rclc_take_new_data+0x98>
 800ee98:	b510      	push	{r4, lr}
 800ee9a:	7803      	ldrb	r3, [r0, #0]
 800ee9c:	b08e      	sub	sp, #56	; 0x38
 800ee9e:	4604      	mov	r4, r0
 800eea0:	2b08      	cmp	r3, #8
 800eea2:	d84a      	bhi.n	800ef3a <_rclc_take_new_data+0xa6>
 800eea4:	e8df f003 	tbb	[pc, r3]
 800eea8:	2b121515 	.word	0x2b121515
 800eeac:	0505052b 	.word	0x0505052b
 800eeb0:	12          	.byte	0x12
 800eeb1:	00          	.byte	0x00
 800eeb2:	6a0b      	ldr	r3, [r1, #32]
 800eeb4:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800eeb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eeba:	b13b      	cbz	r3, 800eecc <_rclc_take_new_data+0x38>
 800eebc:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800eec0:	f104 0110 	add.w	r1, r4, #16
 800eec4:	f006 fc42 	bl	801574c <rcl_take_request>
 800eec8:	2800      	cmp	r0, #0
 800eeca:	d131      	bne.n	800ef30 <_rclc_take_new_data+0x9c>
 800eecc:	2000      	movs	r0, #0
 800eece:	b00e      	add	sp, #56	; 0x38
 800eed0:	bd10      	pop	{r4, pc}
 800eed2:	680b      	ldr	r3, [r1, #0]
 800eed4:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800eed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d0f6      	beq.n	800eecc <_rclc_take_new_data+0x38>
 800eede:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800eee2:	2300      	movs	r3, #0
 800eee4:	aa02      	add	r2, sp, #8
 800eee6:	f7ff ff5d 	bl	800eda4 <rcl_take>
 800eeea:	2800      	cmp	r0, #0
 800eeec:	d0ef      	beq.n	800eece <_rclc_take_new_data+0x3a>
 800eeee:	f240 1391 	movw	r3, #401	; 0x191
 800eef2:	4298      	cmp	r0, r3
 800eef4:	d115      	bne.n	800ef22 <_rclc_take_new_data+0x8e>
 800eef6:	2300      	movs	r3, #0
 800eef8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800eefc:	e7e7      	b.n	800eece <_rclc_take_new_data+0x3a>
 800eefe:	698b      	ldr	r3, [r1, #24]
 800ef00:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800ef02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d0e0      	beq.n	800eecc <_rclc_take_new_data+0x38>
 800ef0a:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800ef0e:	f104 0110 	add.w	r1, r4, #16
 800ef12:	f005 fd05 	bl	8014920 <rcl_take_response>
 800ef16:	2800      	cmp	r0, #0
 800ef18:	d0d8      	beq.n	800eecc <_rclc_take_new_data+0x38>
 800ef1a:	f240 13f5 	movw	r3, #501	; 0x1f5
 800ef1e:	4298      	cmp	r0, r3
 800ef20:	d0d5      	beq.n	800eece <_rclc_take_new_data+0x3a>
 800ef22:	9001      	str	r0, [sp, #4]
 800ef24:	f000 fc2e 	bl	800f784 <rcutils_reset_error>
 800ef28:	9801      	ldr	r0, [sp, #4]
 800ef2a:	e7d0      	b.n	800eece <_rclc_take_new_data+0x3a>
 800ef2c:	200b      	movs	r0, #11
 800ef2e:	4770      	bx	lr
 800ef30:	f240 2359 	movw	r3, #601	; 0x259
 800ef34:	4298      	cmp	r0, r3
 800ef36:	d0de      	beq.n	800eef6 <_rclc_take_new_data+0x62>
 800ef38:	e7f3      	b.n	800ef22 <_rclc_take_new_data+0x8e>
 800ef3a:	2001      	movs	r0, #1
 800ef3c:	e7c7      	b.n	800eece <_rclc_take_new_data+0x3a>
 800ef3e:	bf00      	nop

0800ef40 <rclc_executor_trigger_any>:
 800ef40:	b170      	cbz	r0, 800ef60 <rclc_executor_trigger_any+0x20>
 800ef42:	b179      	cbz	r1, 800ef64 <rclc_executor_trigger_any+0x24>
 800ef44:	4603      	mov	r3, r0
 800ef46:	2200      	movs	r2, #0
 800ef48:	e005      	b.n	800ef56 <rclc_executor_trigger_any+0x16>
 800ef4a:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 800ef4e:	3340      	adds	r3, #64	; 0x40
 800ef50:	b930      	cbnz	r0, 800ef60 <rclc_executor_trigger_any+0x20>
 800ef52:	4291      	cmp	r1, r2
 800ef54:	d005      	beq.n	800ef62 <rclc_executor_trigger_any+0x22>
 800ef56:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 800ef5a:	3201      	adds	r2, #1
 800ef5c:	2800      	cmp	r0, #0
 800ef5e:	d1f4      	bne.n	800ef4a <rclc_executor_trigger_any+0xa>
 800ef60:	4770      	bx	lr
 800ef62:	4770      	bx	lr
 800ef64:	4608      	mov	r0, r1
 800ef66:	e7fb      	b.n	800ef60 <rclc_executor_trigger_any+0x20>

0800ef68 <_rclc_execute.part.0>:
 800ef68:	b530      	push	{r4, r5, lr}
 800ef6a:	7803      	ldrb	r3, [r0, #0]
 800ef6c:	b083      	sub	sp, #12
 800ef6e:	4604      	mov	r4, r0
 800ef70:	2b08      	cmp	r3, #8
 800ef72:	d85b      	bhi.n	800f02c <_rclc_execute.part.0+0xc4>
 800ef74:	e8df f003 	tbb	[pc, r3]
 800ef78:	3036271f 	.word	0x3036271f
 800ef7c:	0505053f 	.word	0x0505053f
 800ef80:	1a          	.byte	0x1a
 800ef81:	00          	.byte	0x00
 800ef82:	2b06      	cmp	r3, #6
 800ef84:	d049      	beq.n	800f01a <_rclc_execute.part.0+0xb2>
 800ef86:	2b07      	cmp	r3, #7
 800ef88:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800ef8a:	d140      	bne.n	800f00e <_rclc_execute.part.0+0xa6>
 800ef8c:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 800ef90:	6880      	ldr	r0, [r0, #8]
 800ef92:	4798      	blx	r3
 800ef94:	f104 0110 	add.w	r1, r4, #16
 800ef98:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800ef9a:	6860      	ldr	r0, [r4, #4]
 800ef9c:	f006 fc0e 	bl	80157bc <rcl_send_response>
 800efa0:	b138      	cbz	r0, 800efb2 <_rclc_execute.part.0+0x4a>
 800efa2:	9001      	str	r0, [sp, #4]
 800efa4:	f000 fbee 	bl	800f784 <rcutils_reset_error>
 800efa8:	9801      	ldr	r0, [sp, #4]
 800efaa:	e002      	b.n	800efb2 <_rclc_execute.part.0+0x4a>
 800efac:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800efae:	4798      	blx	r3
 800efb0:	2000      	movs	r0, #0
 800efb2:	b003      	add	sp, #12
 800efb4:	bd30      	pop	{r4, r5, pc}
 800efb6:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800efba:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800efbc:	b96d      	cbnz	r5, 800efda <_rclc_execute.part.0+0x72>
 800efbe:	4628      	mov	r0, r5
 800efc0:	4798      	blx	r3
 800efc2:	4628      	mov	r0, r5
 800efc4:	e7f5      	b.n	800efb2 <_rclc_execute.part.0+0x4a>
 800efc6:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800efca:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	; 0x2c
 800efce:	b1d5      	cbz	r5, 800f006 <_rclc_execute.part.0+0x9e>
 800efd0:	6880      	ldr	r0, [r0, #8]
 800efd2:	4798      	blx	r3
 800efd4:	2000      	movs	r0, #0
 800efd6:	e7ec      	b.n	800efb2 <_rclc_execute.part.0+0x4a>
 800efd8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800efda:	68a0      	ldr	r0, [r4, #8]
 800efdc:	4798      	blx	r3
 800efde:	2000      	movs	r0, #0
 800efe0:	b003      	add	sp, #12
 800efe2:	bd30      	pop	{r4, r5, pc}
 800efe4:	6840      	ldr	r0, [r0, #4]
 800efe6:	f006 fca3 	bl	8015930 <rcl_timer_call>
 800efea:	f240 3321 	movw	r3, #801	; 0x321
 800efee:	4298      	cmp	r0, r3
 800eff0:	d1d6      	bne.n	800efa0 <_rclc_execute.part.0+0x38>
 800eff2:	2000      	movs	r0, #0
 800eff4:	e7dd      	b.n	800efb2 <_rclc_execute.part.0+0x4a>
 800eff6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800eff8:	6880      	ldr	r0, [r0, #8]
 800effa:	f104 0110 	add.w	r1, r4, #16
 800effe:	4798      	blx	r3
 800f000:	2000      	movs	r0, #0
 800f002:	b003      	add	sp, #12
 800f004:	bd30      	pop	{r4, r5, pc}
 800f006:	4628      	mov	r0, r5
 800f008:	4798      	blx	r3
 800f00a:	4628      	mov	r0, r5
 800f00c:	e7d1      	b.n	800efb2 <_rclc_execute.part.0+0x4a>
 800f00e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800f010:	6880      	ldr	r0, [r0, #8]
 800f012:	4798      	blx	r3
 800f014:	f104 0110 	add.w	r1, r4, #16
 800f018:	e7be      	b.n	800ef98 <_rclc_execute.part.0+0x30>
 800f01a:	f100 0110 	add.w	r1, r0, #16
 800f01e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800f020:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800f022:	6880      	ldr	r0, [r0, #8]
 800f024:	9101      	str	r1, [sp, #4]
 800f026:	4798      	blx	r3
 800f028:	9901      	ldr	r1, [sp, #4]
 800f02a:	e7b5      	b.n	800ef98 <_rclc_execute.part.0+0x30>
 800f02c:	2001      	movs	r0, #1
 800f02e:	e7c0      	b.n	800efb2 <_rclc_execute.part.0+0x4a>

0800f030 <rclc_executor_init>:
 800f030:	2800      	cmp	r0, #0
 800f032:	d063      	beq.n	800f0fc <rclc_executor_init+0xcc>
 800f034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f038:	460f      	mov	r7, r1
 800f03a:	b0ae      	sub	sp, #184	; 0xb8
 800f03c:	2900      	cmp	r1, #0
 800f03e:	d055      	beq.n	800f0ec <rclc_executor_init+0xbc>
 800f040:	4605      	mov	r5, r0
 800f042:	4618      	mov	r0, r3
 800f044:	4616      	mov	r6, r2
 800f046:	4698      	mov	r8, r3
 800f048:	f000 fb78 	bl	800f73c <rcutils_allocator_is_valid>
 800f04c:	2800      	cmp	r0, #0
 800f04e:	d04d      	beq.n	800f0ec <rclc_executor_init+0xbc>
 800f050:	2e00      	cmp	r6, #0
 800f052:	d04b      	beq.n	800f0ec <rclc_executor_init+0xbc>
 800f054:	492e      	ldr	r1, [pc, #184]	; (800f110 <rclc_executor_init+0xe0>)
 800f056:	2280      	movs	r2, #128	; 0x80
 800f058:	a80e      	add	r0, sp, #56	; 0x38
 800f05a:	f00b fb5c 	bl	801a716 <memcpy>
 800f05e:	2400      	movs	r4, #0
 800f060:	a90e      	add	r1, sp, #56	; 0x38
 800f062:	2280      	movs	r2, #128	; 0x80
 800f064:	4628      	mov	r0, r5
 800f066:	f00b fb56 	bl	801a716 <memcpy>
 800f06a:	602f      	str	r7, [r5, #0]
 800f06c:	4668      	mov	r0, sp
 800f06e:	e9c5 6402 	strd	r6, r4, [r5, #8]
 800f072:	466f      	mov	r7, sp
 800f074:	f006 feb6 	bl	8015de4 <rcl_get_zero_initialized_wait_set>
 800f078:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f07a:	f105 0c14 	add.w	ip, r5, #20
 800f07e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f082:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f084:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f088:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f08a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f08e:	a31e      	add	r3, pc, #120	; (adr r3, 800f108 <rclc_executor_init+0xd8>)
 800f090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f094:	6839      	ldr	r1, [r7, #0]
 800f096:	f8cc 1000 	str.w	r1, [ip]
 800f09a:	f8d8 7000 	ldr.w	r7, [r8]
 800f09e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f0a2:	f8c5 8010 	str.w	r8, [r5, #16]
 800f0a6:	e9c5 2318 	strd	r2, r3, [r5, #96]	; 0x60
 800f0aa:	01b0      	lsls	r0, r6, #6
 800f0ac:	47b8      	blx	r7
 800f0ae:	6068      	str	r0, [r5, #4]
 800f0b0:	b908      	cbnz	r0, 800f0b6 <rclc_executor_init+0x86>
 800f0b2:	e025      	b.n	800f100 <rclc_executor_init+0xd0>
 800f0b4:	6868      	ldr	r0, [r5, #4]
 800f0b6:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800f0ba:	4631      	mov	r1, r6
 800f0bc:	3401      	adds	r4, #1
 800f0be:	f000 fa01 	bl	800f4c4 <rclc_executor_handle_init>
 800f0c2:	42a6      	cmp	r6, r4
 800f0c4:	d1f6      	bne.n	800f0b4 <rclc_executor_init+0x84>
 800f0c6:	f105 0048 	add.w	r0, r5, #72	; 0x48
 800f0ca:	f000 f9ef 	bl	800f4ac <rclc_executor_handle_counters_zero_init>
 800f0ce:	686b      	ldr	r3, [r5, #4]
 800f0d0:	4a10      	ldr	r2, [pc, #64]	; (800f114 <rclc_executor_init+0xe4>)
 800f0d2:	672a      	str	r2, [r5, #112]	; 0x70
 800f0d4:	2000      	movs	r0, #0
 800f0d6:	6768      	str	r0, [r5, #116]	; 0x74
 800f0d8:	b163      	cbz	r3, 800f0f4 <rclc_executor_init+0xc4>
 800f0da:	692b      	ldr	r3, [r5, #16]
 800f0dc:	b153      	cbz	r3, 800f0f4 <rclc_executor_init+0xc4>
 800f0de:	68ab      	ldr	r3, [r5, #8]
 800f0e0:	b143      	cbz	r3, 800f0f4 <rclc_executor_init+0xc4>
 800f0e2:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
 800f0e6:	b02e      	add	sp, #184	; 0xb8
 800f0e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0ec:	200b      	movs	r0, #11
 800f0ee:	b02e      	add	sp, #184	; 0xb8
 800f0f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	b02e      	add	sp, #184	; 0xb8
 800f0f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0fc:	200b      	movs	r0, #11
 800f0fe:	4770      	bx	lr
 800f100:	200a      	movs	r0, #10
 800f102:	e7f4      	b.n	800f0ee <rclc_executor_init+0xbe>
 800f104:	f3af 8000 	nop.w
 800f108:	3b9aca00 	.word	0x3b9aca00
 800f10c:	00000000 	.word	0x00000000
 800f110:	0801b8c0 	.word	0x0801b8c0
 800f114:	0800ef41 	.word	0x0800ef41

0800f118 <rclc_executor_add_subscription>:
 800f118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f11c:	f89d 7018 	ldrb.w	r7, [sp, #24]
 800f120:	b358      	cbz	r0, 800f17a <rclc_executor_add_subscription+0x62>
 800f122:	b351      	cbz	r1, 800f17a <rclc_executor_add_subscription+0x62>
 800f124:	b34a      	cbz	r2, 800f17a <rclc_executor_add_subscription+0x62>
 800f126:	b343      	cbz	r3, 800f17a <rclc_executor_add_subscription+0x62>
 800f128:	4604      	mov	r4, r0
 800f12a:	e9d0 0502 	ldrd	r0, r5, [r0, #8]
 800f12e:	4285      	cmp	r5, r0
 800f130:	d302      	bcc.n	800f138 <rclc_executor_add_subscription+0x20>
 800f132:	2001      	movs	r0, #1
 800f134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f138:	f8d4 e004 	ldr.w	lr, [r4, #4]
 800f13c:	ea4f 1885 	mov.w	r8, r5, lsl #6
 800f140:	eb0e 1685 	add.w	r6, lr, r5, lsl #6
 800f144:	f04f 0c00 	mov.w	ip, #0
 800f148:	f80e c008 	strb.w	ip, [lr, r8]
 800f14c:	2001      	movs	r0, #1
 800f14e:	3501      	adds	r5, #1
 800f150:	f104 0814 	add.w	r8, r4, #20
 800f154:	f886 0038 	strb.w	r0, [r6, #56]	; 0x38
 800f158:	e9c6 1201 	strd	r1, r2, [r6, #4]
 800f15c:	6333      	str	r3, [r6, #48]	; 0x30
 800f15e:	7077      	strb	r7, [r6, #1]
 800f160:	f8c6 c02c 	str.w	ip, [r6, #44]	; 0x2c
 800f164:	4640      	mov	r0, r8
 800f166:	60e5      	str	r5, [r4, #12]
 800f168:	f006 fe4e 	bl	8015e08 <rcl_wait_set_is_valid>
 800f16c:	b940      	cbnz	r0, 800f180 <rclc_executor_add_subscription+0x68>
 800f16e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f170:	3301      	adds	r3, #1
 800f172:	64a3      	str	r3, [r4, #72]	; 0x48
 800f174:	2000      	movs	r0, #0
 800f176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f17a:	200b      	movs	r0, #11
 800f17c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f180:	4640      	mov	r0, r8
 800f182:	f006 fe47 	bl	8015e14 <rcl_wait_set_fini>
 800f186:	2800      	cmp	r0, #0
 800f188:	d0f1      	beq.n	800f16e <rclc_executor_add_subscription+0x56>
 800f18a:	e7d3      	b.n	800f134 <rclc_executor_add_subscription+0x1c>

0800f18c <rclc_executor_prepare>:
 800f18c:	2800      	cmp	r0, #0
 800f18e:	d03d      	beq.n	800f20c <rclc_executor_prepare+0x80>
 800f190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f194:	f100 0814 	add.w	r8, r0, #20
 800f198:	b09a      	sub	sp, #104	; 0x68
 800f19a:	4604      	mov	r4, r0
 800f19c:	4640      	mov	r0, r8
 800f19e:	f006 fe33 	bl	8015e08 <rcl_wait_set_is_valid>
 800f1a2:	b118      	cbz	r0, 800f1ac <rclc_executor_prepare+0x20>
 800f1a4:	2000      	movs	r0, #0
 800f1a6:	b01a      	add	sp, #104	; 0x68
 800f1a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1ac:	4640      	mov	r0, r8
 800f1ae:	f006 fe31 	bl	8015e14 <rcl_wait_set_fini>
 800f1b2:	2800      	cmp	r0, #0
 800f1b4:	d127      	bne.n	800f206 <rclc_executor_prepare+0x7a>
 800f1b6:	a80c      	add	r0, sp, #48	; 0x30
 800f1b8:	ad0c      	add	r5, sp, #48	; 0x30
 800f1ba:	f006 fe13 	bl	8015de4 <rcl_get_zero_initialized_wait_set>
 800f1be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f1c0:	4646      	mov	r6, r8
 800f1c2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f1c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f1c6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f1c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f1ca:	6927      	ldr	r7, [r4, #16]
 800f1cc:	682d      	ldr	r5, [r5, #0]
 800f1ce:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f1d0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f1d2:	6035      	str	r5, [r6, #0]
 800f1d4:	ad04      	add	r5, sp, #16
 800f1d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f1d8:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	; 0x50
 800f1dc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f1de:	6826      	ldr	r6, [r4, #0]
 800f1e0:	6838      	ldr	r0, [r7, #0]
 800f1e2:	6028      	str	r0, [r5, #0]
 800f1e4:	e9cd 1602 	strd	r1, r6, [sp, #8]
 800f1e8:	e9cd 3200 	strd	r3, r2, [sp]
 800f1ec:	4640      	mov	r0, r8
 800f1ee:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800f1f0:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800f1f2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f1f4:	f007 f92c 	bl	8016450 <rcl_wait_set_init>
 800f1f8:	2800      	cmp	r0, #0
 800f1fa:	d0d4      	beq.n	800f1a6 <rclc_executor_prepare+0x1a>
 800f1fc:	900b      	str	r0, [sp, #44]	; 0x2c
 800f1fe:	f000 fac1 	bl	800f784 <rcutils_reset_error>
 800f202:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800f204:	e7cf      	b.n	800f1a6 <rclc_executor_prepare+0x1a>
 800f206:	f000 fabd 	bl	800f784 <rcutils_reset_error>
 800f20a:	e7d4      	b.n	800f1b6 <rclc_executor_prepare+0x2a>
 800f20c:	200b      	movs	r0, #11
 800f20e:	4770      	bx	lr

0800f210 <rclc_executor_spin_some.part.0>:
 800f210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f214:	f100 0814 	add.w	r8, r0, #20
 800f218:	b083      	sub	sp, #12
 800f21a:	4692      	mov	sl, r2
 800f21c:	4699      	mov	r9, r3
 800f21e:	4605      	mov	r5, r0
 800f220:	f7ff ffb4 	bl	800f18c <rclc_executor_prepare>
 800f224:	4640      	mov	r0, r8
 800f226:	f006 fec1 	bl	8015fac <rcl_wait_set_clear>
 800f22a:	4607      	mov	r7, r0
 800f22c:	2800      	cmp	r0, #0
 800f22e:	f040 80be 	bne.w	800f3ae <rclc_executor_spin_some.part.0+0x19e>
 800f232:	68ab      	ldr	r3, [r5, #8]
 800f234:	4604      	mov	r4, r0
 800f236:	b1eb      	cbz	r3, 800f274 <rclc_executor_spin_some.part.0+0x64>
 800f238:	686e      	ldr	r6, [r5, #4]
 800f23a:	eb06 1184 	add.w	r1, r6, r4, lsl #6
 800f23e:	01a2      	lsls	r2, r4, #6
 800f240:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 800f244:	b1b3      	cbz	r3, 800f274 <rclc_executor_spin_some.part.0+0x64>
 800f246:	5cb3      	ldrb	r3, [r6, r2]
 800f248:	2b08      	cmp	r3, #8
 800f24a:	f200 80a9 	bhi.w	800f3a0 <rclc_executor_spin_some.part.0+0x190>
 800f24e:	e8df f003 	tbb	[pc, r3]
 800f252:	8989      	.short	0x8989
 800f254:	057b7b93 	.word	0x057b7b93
 800f258:	0505      	.short	0x0505
 800f25a:	9d          	.byte	0x9d
 800f25b:	00          	.byte	0x00
 800f25c:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800f260:	4640      	mov	r0, r8
 800f262:	6849      	ldr	r1, [r1, #4]
 800f264:	f007 fa0a 	bl	801667c <rcl_wait_set_add_service>
 800f268:	2800      	cmp	r0, #0
 800f26a:	d175      	bne.n	800f358 <rclc_executor_spin_some.part.0+0x148>
 800f26c:	68ab      	ldr	r3, [r5, #8]
 800f26e:	3401      	adds	r4, #1
 800f270:	429c      	cmp	r4, r3
 800f272:	d3e1      	bcc.n	800f238 <rclc_executor_spin_some.part.0+0x28>
 800f274:	464b      	mov	r3, r9
 800f276:	4652      	mov	r2, sl
 800f278:	4640      	mov	r0, r8
 800f27a:	f007 fa2d 	bl	80166d8 <rcl_wait>
 800f27e:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
 800f282:	2b00      	cmp	r3, #0
 800f284:	f000 809b 	beq.w	800f3be <rclc_executor_spin_some.part.0+0x1ae>
 800f288:	2b01      	cmp	r3, #1
 800f28a:	f040 8089 	bne.w	800f3a0 <rclc_executor_spin_some.part.0+0x190>
 800f28e:	68ab      	ldr	r3, [r5, #8]
 800f290:	2b00      	cmp	r3, #0
 800f292:	f000 80ef 	beq.w	800f474 <rclc_executor_spin_some.part.0+0x264>
 800f296:	2400      	movs	r4, #0
 800f298:	4626      	mov	r6, r4
 800f29a:	f240 1991 	movw	r9, #401	; 0x191
 800f29e:	e00a      	b.n	800f2b6 <rclc_executor_spin_some.part.0+0xa6>
 800f2a0:	f7ff fdd2 	bl	800ee48 <_rclc_check_for_new_data>
 800f2a4:	4604      	mov	r4, r0
 800f2a6:	b110      	cbz	r0, 800f2ae <rclc_executor_spin_some.part.0+0x9e>
 800f2a8:	4548      	cmp	r0, r9
 800f2aa:	f040 8086 	bne.w	800f3ba <rclc_executor_spin_some.part.0+0x1aa>
 800f2ae:	68ab      	ldr	r3, [r5, #8]
 800f2b0:	429e      	cmp	r6, r3
 800f2b2:	f080 80db 	bcs.w	800f46c <rclc_executor_spin_some.part.0+0x25c>
 800f2b6:	686a      	ldr	r2, [r5, #4]
 800f2b8:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800f2bc:	4641      	mov	r1, r8
 800f2be:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800f2c2:	3601      	adds	r6, #1
 800f2c4:	f1bc 0f00 	cmp.w	ip, #0
 800f2c8:	d1ea      	bne.n	800f2a0 <rclc_executor_spin_some.part.0+0x90>
 800f2ca:	4619      	mov	r1, r3
 800f2cc:	4610      	mov	r0, r2
 800f2ce:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 800f2d2:	4798      	blx	r3
 800f2d4:	2800      	cmp	r0, #0
 800f2d6:	d070      	beq.n	800f3ba <rclc_executor_spin_some.part.0+0x1aa>
 800f2d8:	68aa      	ldr	r2, [r5, #8]
 800f2da:	2a00      	cmp	r2, #0
 800f2dc:	d06d      	beq.n	800f3ba <rclc_executor_spin_some.part.0+0x1aa>
 800f2de:	2600      	movs	r6, #0
 800f2e0:	f240 1991 	movw	r9, #401	; 0x191
 800f2e4:	e008      	b.n	800f2f8 <rclc_executor_spin_some.part.0+0xe8>
 800f2e6:	f7ff fdd5 	bl	800ee94 <_rclc_take_new_data>
 800f2ea:	4604      	mov	r4, r0
 800f2ec:	b108      	cbz	r0, 800f2f2 <rclc_executor_spin_some.part.0+0xe2>
 800f2ee:	4548      	cmp	r0, r9
 800f2f0:	d163      	bne.n	800f3ba <rclc_executor_spin_some.part.0+0x1aa>
 800f2f2:	68aa      	ldr	r2, [r5, #8]
 800f2f4:	4296      	cmp	r6, r2
 800f2f6:	d208      	bcs.n	800f30a <rclc_executor_spin_some.part.0+0xfa>
 800f2f8:	6868      	ldr	r0, [r5, #4]
 800f2fa:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 800f2fe:	4641      	mov	r1, r8
 800f300:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800f304:	3601      	adds	r6, #1
 800f306:	2b00      	cmp	r3, #0
 800f308:	d1ed      	bne.n	800f2e6 <rclc_executor_spin_some.part.0+0xd6>
 800f30a:	2600      	movs	r6, #0
 800f30c:	b932      	cbnz	r2, 800f31c <rclc_executor_spin_some.part.0+0x10c>
 800f30e:	e054      	b.n	800f3ba <rclc_executor_spin_some.part.0+0x1aa>
 800f310:	2901      	cmp	r1, #1
 800f312:	d012      	beq.n	800f33a <rclc_executor_spin_some.part.0+0x12a>
 800f314:	3601      	adds	r6, #1
 800f316:	4296      	cmp	r6, r2
 800f318:	d245      	bcs.n	800f3a6 <rclc_executor_spin_some.part.0+0x196>
 800f31a:	2400      	movs	r4, #0
 800f31c:	686b      	ldr	r3, [r5, #4]
 800f31e:	eb03 1386 	add.w	r3, r3, r6, lsl #6
 800f322:	4618      	mov	r0, r3
 800f324:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 800f328:	2900      	cmp	r1, #0
 800f32a:	d046      	beq.n	800f3ba <rclc_executor_spin_some.part.0+0x1aa>
 800f32c:	7859      	ldrb	r1, [r3, #1]
 800f32e:	2900      	cmp	r1, #0
 800f330:	d1ee      	bne.n	800f310 <rclc_executor_spin_some.part.0+0x100>
 800f332:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f336:	2b00      	cmp	r3, #0
 800f338:	d0ec      	beq.n	800f314 <rclc_executor_spin_some.part.0+0x104>
 800f33a:	f7ff fe15 	bl	800ef68 <_rclc_execute.part.0>
 800f33e:	2800      	cmp	r0, #0
 800f340:	f040 8096 	bne.w	800f470 <rclc_executor_spin_some.part.0+0x260>
 800f344:	68aa      	ldr	r2, [r5, #8]
 800f346:	e7e5      	b.n	800f314 <rclc_executor_spin_some.part.0+0x104>
 800f348:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800f34c:	4640      	mov	r0, r8
 800f34e:	6849      	ldr	r1, [r1, #4]
 800f350:	f007 f968 	bl	8016624 <rcl_wait_set_add_client>
 800f354:	2800      	cmp	r0, #0
 800f356:	d089      	beq.n	800f26c <rclc_executor_spin_some.part.0+0x5c>
 800f358:	9001      	str	r0, [sp, #4]
 800f35a:	f000 fa13 	bl	800f784 <rcutils_reset_error>
 800f35e:	9801      	ldr	r0, [sp, #4]
 800f360:	4607      	mov	r7, r0
 800f362:	e020      	b.n	800f3a6 <rclc_executor_spin_some.part.0+0x196>
 800f364:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800f368:	4640      	mov	r0, r8
 800f36a:	6849      	ldr	r1, [r1, #4]
 800f36c:	f006 fdf2 	bl	8015f54 <rcl_wait_set_add_subscription>
 800f370:	2800      	cmp	r0, #0
 800f372:	f43f af7b 	beq.w	800f26c <rclc_executor_spin_some.part.0+0x5c>
 800f376:	e7ef      	b.n	800f358 <rclc_executor_spin_some.part.0+0x148>
 800f378:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800f37c:	4640      	mov	r0, r8
 800f37e:	6849      	ldr	r1, [r1, #4]
 800f380:	f007 f920 	bl	80165c4 <rcl_wait_set_add_timer>
 800f384:	2800      	cmp	r0, #0
 800f386:	f43f af71 	beq.w	800f26c <rclc_executor_spin_some.part.0+0x5c>
 800f38a:	e7e5      	b.n	800f358 <rclc_executor_spin_some.part.0+0x148>
 800f38c:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800f390:	4640      	mov	r0, r8
 800f392:	6849      	ldr	r1, [r1, #4]
 800f394:	f007 f8ea 	bl	801656c <rcl_wait_set_add_guard_condition>
 800f398:	2800      	cmp	r0, #0
 800f39a:	f43f af67 	beq.w	800f26c <rclc_executor_spin_some.part.0+0x5c>
 800f39e:	e7db      	b.n	800f358 <rclc_executor_spin_some.part.0+0x148>
 800f3a0:	f000 f9f0 	bl	800f784 <rcutils_reset_error>
 800f3a4:	2701      	movs	r7, #1
 800f3a6:	4638      	mov	r0, r7
 800f3a8:	b003      	add	sp, #12
 800f3aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3ae:	f000 f9e9 	bl	800f784 <rcutils_reset_error>
 800f3b2:	4638      	mov	r0, r7
 800f3b4:	b003      	add	sp, #12
 800f3b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3ba:	4627      	mov	r7, r4
 800f3bc:	e7f3      	b.n	800f3a6 <rclc_executor_spin_some.part.0+0x196>
 800f3be:	68ab      	ldr	r3, [r5, #8]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d05a      	beq.n	800f47a <rclc_executor_spin_some.part.0+0x26a>
 800f3c4:	2400      	movs	r4, #0
 800f3c6:	4626      	mov	r6, r4
 800f3c8:	f240 1991 	movw	r9, #401	; 0x191
 800f3cc:	e008      	b.n	800f3e0 <rclc_executor_spin_some.part.0+0x1d0>
 800f3ce:	f7ff fd3b 	bl	800ee48 <_rclc_check_for_new_data>
 800f3d2:	4604      	mov	r4, r0
 800f3d4:	b108      	cbz	r0, 800f3da <rclc_executor_spin_some.part.0+0x1ca>
 800f3d6:	4548      	cmp	r0, r9
 800f3d8:	d1ef      	bne.n	800f3ba <rclc_executor_spin_some.part.0+0x1aa>
 800f3da:	68ab      	ldr	r3, [r5, #8]
 800f3dc:	429e      	cmp	r6, r3
 800f3de:	d243      	bcs.n	800f468 <rclc_executor_spin_some.part.0+0x258>
 800f3e0:	686a      	ldr	r2, [r5, #4]
 800f3e2:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800f3e6:	4641      	mov	r1, r8
 800f3e8:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800f3ec:	3601      	adds	r6, #1
 800f3ee:	f1bc 0f00 	cmp.w	ip, #0
 800f3f2:	d1ec      	bne.n	800f3ce <rclc_executor_spin_some.part.0+0x1be>
 800f3f4:	4619      	mov	r1, r3
 800f3f6:	4610      	mov	r0, r2
 800f3f8:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 800f3fc:	4798      	blx	r3
 800f3fe:	2800      	cmp	r0, #0
 800f400:	d0db      	beq.n	800f3ba <rclc_executor_spin_some.part.0+0x1aa>
 800f402:	68ab      	ldr	r3, [r5, #8]
 800f404:	2b00      	cmp	r3, #0
 800f406:	d0d8      	beq.n	800f3ba <rclc_executor_spin_some.part.0+0x1aa>
 800f408:	f04f 0a00 	mov.w	sl, #0
 800f40c:	f240 1691 	movw	r6, #401	; 0x191
 800f410:	f240 2959 	movw	r9, #601	; 0x259
 800f414:	e00b      	b.n	800f42e <rclc_executor_spin_some.part.0+0x21e>
 800f416:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800f41a:	b113      	cbz	r3, 800f422 <rclc_executor_spin_some.part.0+0x212>
 800f41c:	f7ff fda4 	bl	800ef68 <_rclc_execute.part.0>
 800f420:	bb30      	cbnz	r0, 800f470 <rclc_executor_spin_some.part.0+0x260>
 800f422:	68ab      	ldr	r3, [r5, #8]
 800f424:	f10a 0a01 	add.w	sl, sl, #1
 800f428:	459a      	cmp	sl, r3
 800f42a:	d2bc      	bcs.n	800f3a6 <rclc_executor_spin_some.part.0+0x196>
 800f42c:	2400      	movs	r4, #0
 800f42e:	6868      	ldr	r0, [r5, #4]
 800f430:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800f434:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800f438:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d0bc      	beq.n	800f3ba <rclc_executor_spin_some.part.0+0x1aa>
 800f440:	4641      	mov	r1, r8
 800f442:	f7ff fd27 	bl	800ee94 <_rclc_take_new_data>
 800f446:	b118      	cbz	r0, 800f450 <rclc_executor_spin_some.part.0+0x240>
 800f448:	42b0      	cmp	r0, r6
 800f44a:	d001      	beq.n	800f450 <rclc_executor_spin_some.part.0+0x240>
 800f44c:	4548      	cmp	r0, r9
 800f44e:	d10f      	bne.n	800f470 <rclc_executor_spin_some.part.0+0x260>
 800f450:	6868      	ldr	r0, [r5, #4]
 800f452:	eb10 000b 	adds.w	r0, r0, fp
 800f456:	d005      	beq.n	800f464 <rclc_executor_spin_some.part.0+0x254>
 800f458:	7843      	ldrb	r3, [r0, #1]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d0db      	beq.n	800f416 <rclc_executor_spin_some.part.0+0x206>
 800f45e:	2b01      	cmp	r3, #1
 800f460:	d1df      	bne.n	800f422 <rclc_executor_spin_some.part.0+0x212>
 800f462:	e7db      	b.n	800f41c <rclc_executor_spin_some.part.0+0x20c>
 800f464:	270b      	movs	r7, #11
 800f466:	e79e      	b.n	800f3a6 <rclc_executor_spin_some.part.0+0x196>
 800f468:	686a      	ldr	r2, [r5, #4]
 800f46a:	e7c3      	b.n	800f3f4 <rclc_executor_spin_some.part.0+0x1e4>
 800f46c:	686a      	ldr	r2, [r5, #4]
 800f46e:	e72c      	b.n	800f2ca <rclc_executor_spin_some.part.0+0xba>
 800f470:	4607      	mov	r7, r0
 800f472:	e798      	b.n	800f3a6 <rclc_executor_spin_some.part.0+0x196>
 800f474:	686a      	ldr	r2, [r5, #4]
 800f476:	461c      	mov	r4, r3
 800f478:	e727      	b.n	800f2ca <rclc_executor_spin_some.part.0+0xba>
 800f47a:	686a      	ldr	r2, [r5, #4]
 800f47c:	461c      	mov	r4, r3
 800f47e:	e7b9      	b.n	800f3f4 <rclc_executor_spin_some.part.0+0x1e4>

0800f480 <rclc_executor_spin_some>:
 800f480:	b190      	cbz	r0, 800f4a8 <rclc_executor_spin_some+0x28>
 800f482:	b570      	push	{r4, r5, r6, lr}
 800f484:	4604      	mov	r4, r0
 800f486:	6800      	ldr	r0, [r0, #0]
 800f488:	4616      	mov	r6, r2
 800f48a:	461d      	mov	r5, r3
 800f48c:	f005 faa2 	bl	80149d4 <rcl_context_is_valid>
 800f490:	b130      	cbz	r0, 800f4a0 <rclc_executor_spin_some+0x20>
 800f492:	4632      	mov	r2, r6
 800f494:	462b      	mov	r3, r5
 800f496:	4620      	mov	r0, r4
 800f498:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f49c:	f7ff beb8 	b.w	800f210 <rclc_executor_spin_some.part.0>
 800f4a0:	f000 f970 	bl	800f784 <rcutils_reset_error>
 800f4a4:	2001      	movs	r0, #1
 800f4a6:	bd70      	pop	{r4, r5, r6, pc}
 800f4a8:	200b      	movs	r0, #11
 800f4aa:	4770      	bx	lr

0800f4ac <rclc_executor_handle_counters_zero_init>:
 800f4ac:	b140      	cbz	r0, 800f4c0 <rclc_executor_handle_counters_zero_init+0x14>
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	6003      	str	r3, [r0, #0]
 800f4b2:	6043      	str	r3, [r0, #4]
 800f4b4:	6083      	str	r3, [r0, #8]
 800f4b6:	60c3      	str	r3, [r0, #12]
 800f4b8:	6103      	str	r3, [r0, #16]
 800f4ba:	6143      	str	r3, [r0, #20]
 800f4bc:	4618      	mov	r0, r3
 800f4be:	4770      	bx	lr
 800f4c0:	200b      	movs	r0, #11
 800f4c2:	4770      	bx	lr

0800f4c4 <rclc_executor_handle_init>:
 800f4c4:	b178      	cbz	r0, 800f4e6 <rclc_executor_handle_init+0x22>
 800f4c6:	b430      	push	{r4, r5}
 800f4c8:	4603      	mov	r3, r0
 800f4ca:	2209      	movs	r2, #9
 800f4cc:	2000      	movs	r0, #0
 800f4ce:	2400      	movs	r4, #0
 800f4d0:	2500      	movs	r5, #0
 800f4d2:	801a      	strh	r2, [r3, #0]
 800f4d4:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 800f4d8:	bc30      	pop	{r4, r5}
 800f4da:	e9c3 0001 	strd	r0, r0, [r3, #4]
 800f4de:	6359      	str	r1, [r3, #52]	; 0x34
 800f4e0:	6318      	str	r0, [r3, #48]	; 0x30
 800f4e2:	8718      	strh	r0, [r3, #56]	; 0x38
 800f4e4:	4770      	bx	lr
 800f4e6:	200b      	movs	r0, #11
 800f4e8:	4770      	bx	lr
 800f4ea:	bf00      	nop

0800f4ec <rclc_support_init>:
 800f4ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4f0:	b086      	sub	sp, #24
 800f4f2:	2800      	cmp	r0, #0
 800f4f4:	d042      	beq.n	800f57c <rclc_support_init+0x90>
 800f4f6:	461c      	mov	r4, r3
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d03f      	beq.n	800f57c <rclc_support_init+0x90>
 800f4fc:	460f      	mov	r7, r1
 800f4fe:	4690      	mov	r8, r2
 800f500:	4606      	mov	r6, r0
 800f502:	f005 fd47 	bl	8014f94 <rcl_get_zero_initialized_init_options>
 800f506:	4603      	mov	r3, r0
 800f508:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 800f50c:	e88d 0003 	stmia.w	sp, {r0, r1}
 800f510:	9305      	str	r3, [sp, #20]
 800f512:	a805      	add	r0, sp, #20
 800f514:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800f518:	f005 fd3e 	bl	8014f98 <rcl_init_options_init>
 800f51c:	4605      	mov	r5, r0
 800f51e:	bb38      	cbnz	r0, 800f570 <rclc_support_init+0x84>
 800f520:	f005 fd38 	bl	8014f94 <rcl_get_zero_initialized_init_options>
 800f524:	4631      	mov	r1, r6
 800f526:	6030      	str	r0, [r6, #0]
 800f528:	a805      	add	r0, sp, #20
 800f52a:	f005 fdab 	bl	8015084 <rcl_init_options_copy>
 800f52e:	4605      	mov	r5, r0
 800f530:	b9c0      	cbnz	r0, 800f564 <rclc_support_init+0x78>
 800f532:	ad02      	add	r5, sp, #8
 800f534:	4628      	mov	r0, r5
 800f536:	f005 fa43 	bl	80149c0 <rcl_get_zero_initialized_context>
 800f53a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f53e:	1d33      	adds	r3, r6, #4
 800f540:	e883 0003 	stmia.w	r3, {r0, r1}
 800f544:	4632      	mov	r2, r6
 800f546:	4641      	mov	r1, r8
 800f548:	4638      	mov	r0, r7
 800f54a:	f005 fc19 	bl	8014d80 <rcl_init>
 800f54e:	4605      	mov	r5, r0
 800f550:	b940      	cbnz	r0, 800f564 <rclc_support_init+0x78>
 800f552:	60f4      	str	r4, [r6, #12]
 800f554:	4622      	mov	r2, r4
 800f556:	f106 0110 	add.w	r1, r6, #16
 800f55a:	2003      	movs	r0, #3
 800f55c:	f006 f95c 	bl	8015818 <rcl_clock_init>
 800f560:	4605      	mov	r5, r0
 800f562:	b108      	cbz	r0, 800f568 <rclc_support_init+0x7c>
 800f564:	f000 f90e 	bl	800f784 <rcutils_reset_error>
 800f568:	a805      	add	r0, sp, #20
 800f56a:	f005 fd67 	bl	801503c <rcl_init_options_fini>
 800f56e:	b108      	cbz	r0, 800f574 <rclc_support_init+0x88>
 800f570:	f000 f908 	bl	800f784 <rcutils_reset_error>
 800f574:	4628      	mov	r0, r5
 800f576:	b006      	add	sp, #24
 800f578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f57c:	250b      	movs	r5, #11
 800f57e:	4628      	mov	r0, r5
 800f580:	b006      	add	sp, #24
 800f582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f586:	bf00      	nop

0800f588 <rclc_node_init_with_options>:
 800f588:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f58c:	b087      	sub	sp, #28
 800f58e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800f590:	b1e0      	cbz	r0, 800f5cc <rclc_node_init_with_options+0x44>
 800f592:	460d      	mov	r5, r1
 800f594:	b1d1      	cbz	r1, 800f5cc <rclc_node_init_with_options+0x44>
 800f596:	4616      	mov	r6, r2
 800f598:	b1c2      	cbz	r2, 800f5cc <rclc_node_init_with_options+0x44>
 800f59a:	4698      	mov	r8, r3
 800f59c:	b1b3      	cbz	r3, 800f5cc <rclc_node_init_with_options+0x44>
 800f59e:	b1af      	cbz	r7, 800f5cc <rclc_node_init_with_options+0x44>
 800f5a0:	f10d 0910 	add.w	r9, sp, #16
 800f5a4:	4604      	mov	r4, r0
 800f5a6:	4648      	mov	r0, r9
 800f5a8:	f005 fe34 	bl	8015214 <rcl_get_zero_initialized_node>
 800f5ac:	e899 0003 	ldmia.w	r9, {r0, r1}
 800f5b0:	f108 0304 	add.w	r3, r8, #4
 800f5b4:	9700      	str	r7, [sp, #0]
 800f5b6:	4632      	mov	r2, r6
 800f5b8:	e884 0003 	stmia.w	r4, {r0, r1}
 800f5bc:	4629      	mov	r1, r5
 800f5be:	4620      	mov	r0, r4
 800f5c0:	f005 fe32 	bl	8015228 <rcl_node_init>
 800f5c4:	b930      	cbnz	r0, 800f5d4 <rclc_node_init_with_options+0x4c>
 800f5c6:	b007      	add	sp, #28
 800f5c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f5cc:	200b      	movs	r0, #11
 800f5ce:	b007      	add	sp, #28
 800f5d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f5d4:	9003      	str	r0, [sp, #12]
 800f5d6:	f000 f8d5 	bl	800f784 <rcutils_reset_error>
 800f5da:	9803      	ldr	r0, [sp, #12]
 800f5dc:	b007      	add	sp, #28
 800f5de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f5e2:	bf00      	nop

0800f5e4 <rclc_publisher_init_default>:
 800f5e4:	b368      	cbz	r0, 800f642 <rclc_publisher_init_default+0x5e>
 800f5e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5ea:	460d      	mov	r5, r1
 800f5ec:	b09e      	sub	sp, #120	; 0x78
 800f5ee:	b321      	cbz	r1, 800f63a <rclc_publisher_init_default+0x56>
 800f5f0:	4616      	mov	r6, r2
 800f5f2:	b312      	cbz	r2, 800f63a <rclc_publisher_init_default+0x56>
 800f5f4:	461f      	mov	r7, r3
 800f5f6:	b303      	cbz	r3, 800f63a <rclc_publisher_init_default+0x56>
 800f5f8:	4604      	mov	r4, r0
 800f5fa:	f7ff f969 	bl	800e8d0 <rcl_get_zero_initialized_publisher>
 800f5fe:	f10d 0810 	add.w	r8, sp, #16
 800f602:	6020      	str	r0, [r4, #0]
 800f604:	4640      	mov	r0, r8
 800f606:	f7ff fa5f 	bl	800eac8 <rcl_publisher_get_default_options>
 800f60a:	490f      	ldr	r1, [pc, #60]	; (800f648 <rclc_publisher_init_default+0x64>)
 800f60c:	2250      	movs	r2, #80	; 0x50
 800f60e:	4640      	mov	r0, r8
 800f610:	f00b f881 	bl	801a716 <memcpy>
 800f614:	f8cd 8000 	str.w	r8, [sp]
 800f618:	463b      	mov	r3, r7
 800f61a:	4632      	mov	r2, r6
 800f61c:	4629      	mov	r1, r5
 800f61e:	4620      	mov	r0, r4
 800f620:	f7ff f95c 	bl	800e8dc <rcl_publisher_init>
 800f624:	b910      	cbnz	r0, 800f62c <rclc_publisher_init_default+0x48>
 800f626:	b01e      	add	sp, #120	; 0x78
 800f628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f62c:	9003      	str	r0, [sp, #12]
 800f62e:	f000 f8a9 	bl	800f784 <rcutils_reset_error>
 800f632:	9803      	ldr	r0, [sp, #12]
 800f634:	b01e      	add	sp, #120	; 0x78
 800f636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f63a:	200b      	movs	r0, #11
 800f63c:	b01e      	add	sp, #120	; 0x78
 800f63e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f642:	200b      	movs	r0, #11
 800f644:	4770      	bx	lr
 800f646:	bf00      	nop
 800f648:	0801b940 	.word	0x0801b940

0800f64c <rclc_subscription_init_default>:
 800f64c:	b368      	cbz	r0, 800f6aa <rclc_subscription_init_default+0x5e>
 800f64e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f652:	460d      	mov	r5, r1
 800f654:	b0a0      	sub	sp, #128	; 0x80
 800f656:	b321      	cbz	r1, 800f6a2 <rclc_subscription_init_default+0x56>
 800f658:	4616      	mov	r6, r2
 800f65a:	b312      	cbz	r2, 800f6a2 <rclc_subscription_init_default+0x56>
 800f65c:	461f      	mov	r7, r3
 800f65e:	b303      	cbz	r3, 800f6a2 <rclc_subscription_init_default+0x56>
 800f660:	4604      	mov	r4, r0
 800f662:	f7ff fa77 	bl	800eb54 <rcl_get_zero_initialized_subscription>
 800f666:	f10d 0810 	add.w	r8, sp, #16
 800f66a:	6020      	str	r0, [r4, #0]
 800f66c:	4640      	mov	r0, r8
 800f66e:	f7ff fb6d 	bl	800ed4c <rcl_subscription_get_default_options>
 800f672:	490f      	ldr	r1, [pc, #60]	; (800f6b0 <rclc_subscription_init_default+0x64>)
 800f674:	2250      	movs	r2, #80	; 0x50
 800f676:	4640      	mov	r0, r8
 800f678:	f00b f84d 	bl	801a716 <memcpy>
 800f67c:	f8cd 8000 	str.w	r8, [sp]
 800f680:	463b      	mov	r3, r7
 800f682:	4632      	mov	r2, r6
 800f684:	4629      	mov	r1, r5
 800f686:	4620      	mov	r0, r4
 800f688:	f7ff fa6a 	bl	800eb60 <rcl_subscription_init>
 800f68c:	b910      	cbnz	r0, 800f694 <rclc_subscription_init_default+0x48>
 800f68e:	b020      	add	sp, #128	; 0x80
 800f690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f694:	9003      	str	r0, [sp, #12]
 800f696:	f000 f875 	bl	800f784 <rcutils_reset_error>
 800f69a:	9803      	ldr	r0, [sp, #12]
 800f69c:	b020      	add	sp, #128	; 0x80
 800f69e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6a2:	200b      	movs	r0, #11
 800f6a4:	b020      	add	sp, #128	; 0x80
 800f6a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6aa:	200b      	movs	r0, #11
 800f6ac:	4770      	bx	lr
 800f6ae:	bf00      	nop
 800f6b0:	0801b990 	.word	0x0801b990

0800f6b4 <__default_zero_allocate>:
 800f6b4:	f00a b9ec 	b.w	8019a90 <calloc>

0800f6b8 <__default_reallocate>:
 800f6b8:	f00a bb78 	b.w	8019dac <realloc>

0800f6bc <__default_deallocate>:
 800f6bc:	f00a ba56 	b.w	8019b6c <free>

0800f6c0 <__default_allocate>:
 800f6c0:	f00a ba4c 	b.w	8019b5c <malloc>

0800f6c4 <rcutils_get_zero_initialized_allocator>:
 800f6c4:	b470      	push	{r4, r5, r6}
 800f6c6:	4d05      	ldr	r5, [pc, #20]	; (800f6dc <rcutils_get_zero_initialized_allocator+0x18>)
 800f6c8:	4606      	mov	r6, r0
 800f6ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f6cc:	4634      	mov	r4, r6
 800f6ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f6d0:	682b      	ldr	r3, [r5, #0]
 800f6d2:	6023      	str	r3, [r4, #0]
 800f6d4:	4630      	mov	r0, r6
 800f6d6:	bc70      	pop	{r4, r5, r6}
 800f6d8:	4770      	bx	lr
 800f6da:	bf00      	nop
 800f6dc:	0801b9e0 	.word	0x0801b9e0

0800f6e0 <rcutils_set_default_allocator>:
 800f6e0:	b1a0      	cbz	r0, 800f70c <rcutils_set_default_allocator+0x2c>
 800f6e2:	6801      	ldr	r1, [r0, #0]
 800f6e4:	b199      	cbz	r1, 800f70e <rcutils_set_default_allocator+0x2e>
 800f6e6:	b430      	push	{r4, r5}
 800f6e8:	6844      	ldr	r4, [r0, #4]
 800f6ea:	b194      	cbz	r4, 800f712 <rcutils_set_default_allocator+0x32>
 800f6ec:	68c5      	ldr	r5, [r0, #12]
 800f6ee:	b15d      	cbz	r5, 800f708 <rcutils_set_default_allocator+0x28>
 800f6f0:	6883      	ldr	r3, [r0, #8]
 800f6f2:	b18b      	cbz	r3, 800f718 <rcutils_set_default_allocator+0x38>
 800f6f4:	4a09      	ldr	r2, [pc, #36]	; (800f71c <rcutils_set_default_allocator+0x3c>)
 800f6f6:	e9c2 1400 	strd	r1, r4, [r2]
 800f6fa:	e9c2 3502 	strd	r3, r5, [r2, #8]
 800f6fe:	2000      	movs	r0, #0
 800f700:	6110      	str	r0, [r2, #16]
 800f702:	2001      	movs	r0, #1
 800f704:	bc30      	pop	{r4, r5}
 800f706:	4770      	bx	lr
 800f708:	4628      	mov	r0, r5
 800f70a:	e7fb      	b.n	800f704 <rcutils_set_default_allocator+0x24>
 800f70c:	4770      	bx	lr
 800f70e:	4608      	mov	r0, r1
 800f710:	4770      	bx	lr
 800f712:	4620      	mov	r0, r4
 800f714:	bc30      	pop	{r4, r5}
 800f716:	4770      	bx	lr
 800f718:	4618      	mov	r0, r3
 800f71a:	e7f3      	b.n	800f704 <rcutils_set_default_allocator+0x24>
 800f71c:	20000054 	.word	0x20000054

0800f720 <rcutils_get_default_allocator>:
 800f720:	b470      	push	{r4, r5, r6}
 800f722:	4d05      	ldr	r5, [pc, #20]	; (800f738 <rcutils_get_default_allocator+0x18>)
 800f724:	4606      	mov	r6, r0
 800f726:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f728:	4634      	mov	r4, r6
 800f72a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f72c:	682b      	ldr	r3, [r5, #0]
 800f72e:	6023      	str	r3, [r4, #0]
 800f730:	4630      	mov	r0, r6
 800f732:	bc70      	pop	{r4, r5, r6}
 800f734:	4770      	bx	lr
 800f736:	bf00      	nop
 800f738:	20000054 	.word	0x20000054

0800f73c <rcutils_allocator_is_valid>:
 800f73c:	b158      	cbz	r0, 800f756 <rcutils_allocator_is_valid+0x1a>
 800f73e:	6803      	ldr	r3, [r0, #0]
 800f740:	b143      	cbz	r3, 800f754 <rcutils_allocator_is_valid+0x18>
 800f742:	6843      	ldr	r3, [r0, #4]
 800f744:	b133      	cbz	r3, 800f754 <rcutils_allocator_is_valid+0x18>
 800f746:	68c3      	ldr	r3, [r0, #12]
 800f748:	b123      	cbz	r3, 800f754 <rcutils_allocator_is_valid+0x18>
 800f74a:	6880      	ldr	r0, [r0, #8]
 800f74c:	3800      	subs	r0, #0
 800f74e:	bf18      	it	ne
 800f750:	2001      	movne	r0, #1
 800f752:	4770      	bx	lr
 800f754:	4618      	mov	r0, r3
 800f756:	4770      	bx	lr

0800f758 <rcutils_get_error_string>:
 800f758:	4b06      	ldr	r3, [pc, #24]	; (800f774 <rcutils_get_error_string+0x1c>)
 800f75a:	781b      	ldrb	r3, [r3, #0]
 800f75c:	b13b      	cbz	r3, 800f76e <rcutils_get_error_string+0x16>
 800f75e:	4b06      	ldr	r3, [pc, #24]	; (800f778 <rcutils_get_error_string+0x20>)
 800f760:	781a      	ldrb	r2, [r3, #0]
 800f762:	b90a      	cbnz	r2, 800f768 <rcutils_get_error_string+0x10>
 800f764:	2201      	movs	r2, #1
 800f766:	701a      	strb	r2, [r3, #0]
 800f768:	4b04      	ldr	r3, [pc, #16]	; (800f77c <rcutils_get_error_string+0x24>)
 800f76a:	7818      	ldrb	r0, [r3, #0]
 800f76c:	4770      	bx	lr
 800f76e:	4b04      	ldr	r3, [pc, #16]	; (800f780 <rcutils_get_error_string+0x28>)
 800f770:	7818      	ldrb	r0, [r3, #0]
 800f772:	4770      	bx	lr
 800f774:	20009c48 	.word	0x20009c48
 800f778:	20009c49 	.word	0x20009c49
 800f77c:	20009eb0 	.word	0x20009eb0
 800f780:	0801b9f4 	.word	0x0801b9f4

0800f784 <rcutils_reset_error>:
 800f784:	b4d0      	push	{r4, r6, r7}
 800f786:	4a07      	ldr	r2, [pc, #28]	; (800f7a4 <rcutils_reset_error+0x20>)
 800f788:	4807      	ldr	r0, [pc, #28]	; (800f7a8 <rcutils_reset_error+0x24>)
 800f78a:	4c08      	ldr	r4, [pc, #32]	; (800f7ac <rcutils_reset_error+0x28>)
 800f78c:	4908      	ldr	r1, [pc, #32]	; (800f7b0 <rcutils_reset_error+0x2c>)
 800f78e:	2300      	movs	r3, #0
 800f790:	2600      	movs	r6, #0
 800f792:	2700      	movs	r7, #0
 800f794:	8013      	strh	r3, [r2, #0]
 800f796:	7003      	strb	r3, [r0, #0]
 800f798:	e9c2 6702 	strd	r6, r7, [r2, #8]
 800f79c:	7023      	strb	r3, [r4, #0]
 800f79e:	700b      	strb	r3, [r1, #0]
 800f7a0:	bcd0      	pop	{r4, r6, r7}
 800f7a2:	4770      	bx	lr
 800f7a4:	20009eb8 	.word	0x20009eb8
 800f7a8:	20009eb0 	.word	0x20009eb0
 800f7ac:	20009c49 	.word	0x20009c49
 800f7b0:	20009c48 	.word	0x20009c48

0800f7b4 <rcutils_get_zero_initialized_string_map>:
 800f7b4:	4b01      	ldr	r3, [pc, #4]	; (800f7bc <rcutils_get_zero_initialized_string_map+0x8>)
 800f7b6:	2000      	movs	r0, #0
 800f7b8:	6018      	str	r0, [r3, #0]
 800f7ba:	4770      	bx	lr
 800f7bc:	20009c4c 	.word	0x20009c4c

0800f7c0 <rcutils_string_map_reserve>:
 800f7c0:	2800      	cmp	r0, #0
 800f7c2:	d061      	beq.n	800f888 <rcutils_string_map_reserve+0xc8>
 800f7c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f7c8:	6805      	ldr	r5, [r0, #0]
 800f7ca:	b083      	sub	sp, #12
 800f7cc:	460c      	mov	r4, r1
 800f7ce:	4606      	mov	r6, r0
 800f7d0:	b12d      	cbz	r5, 800f7de <rcutils_string_map_reserve+0x1e>
 800f7d2:	68eb      	ldr	r3, [r5, #12]
 800f7d4:	42a3      	cmp	r3, r4
 800f7d6:	d906      	bls.n	800f7e6 <rcutils_string_map_reserve+0x26>
 800f7d8:	461c      	mov	r4, r3
 800f7da:	2d00      	cmp	r5, #0
 800f7dc:	d1f9      	bne.n	800f7d2 <rcutils_string_map_reserve+0x12>
 800f7de:	201f      	movs	r0, #31
 800f7e0:	b003      	add	sp, #12
 800f7e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f7e6:	68ab      	ldr	r3, [r5, #8]
 800f7e8:	42a3      	cmp	r3, r4
 800f7ea:	d049      	beq.n	800f880 <rcutils_string_map_reserve+0xc0>
 800f7ec:	6a2f      	ldr	r7, [r5, #32]
 800f7ee:	2c00      	cmp	r4, #0
 800f7f0:	d035      	beq.n	800f85e <rcutils_string_map_reserve+0x9e>
 800f7f2:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800f7f6:	d245      	bcs.n	800f884 <rcutils_string_map_reserve+0xc4>
 800f7f8:	ea4f 0884 	mov.w	r8, r4, lsl #2
 800f7fc:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800f800:	6828      	ldr	r0, [r5, #0]
 800f802:	4641      	mov	r1, r8
 800f804:	463a      	mov	r2, r7
 800f806:	47c8      	blx	r9
 800f808:	2800      	cmp	r0, #0
 800f80a:	d03b      	beq.n	800f884 <rcutils_string_map_reserve+0xc4>
 800f80c:	6833      	ldr	r3, [r6, #0]
 800f80e:	463a      	mov	r2, r7
 800f810:	6018      	str	r0, [r3, #0]
 800f812:	4641      	mov	r1, r8
 800f814:	6858      	ldr	r0, [r3, #4]
 800f816:	47c8      	blx	r9
 800f818:	2800      	cmp	r0, #0
 800f81a:	d033      	beq.n	800f884 <rcutils_string_map_reserve+0xc4>
 800f81c:	6835      	ldr	r5, [r6, #0]
 800f81e:	68ab      	ldr	r3, [r5, #8]
 800f820:	6068      	str	r0, [r5, #4]
 800f822:	42a3      	cmp	r3, r4
 800f824:	d227      	bcs.n	800f876 <rcutils_string_map_reserve+0xb6>
 800f826:	682a      	ldr	r2, [r5, #0]
 800f828:	eb00 0108 	add.w	r1, r0, r8
 800f82c:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 800f830:	428f      	cmp	r7, r1
 800f832:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800f836:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800f83a:	d203      	bcs.n	800f844 <rcutils_string_map_reserve+0x84>
 800f83c:	eb02 0108 	add.w	r1, r2, r8
 800f840:	428e      	cmp	r6, r1
 800f842:	d323      	bcc.n	800f88c <rcutils_string_map_reserve+0xcc>
 800f844:	1ae3      	subs	r3, r4, r3
 800f846:	009a      	lsls	r2, r3, #2
 800f848:	4638      	mov	r0, r7
 800f84a:	2100      	movs	r1, #0
 800f84c:	9201      	str	r2, [sp, #4]
 800f84e:	f00a fe43 	bl	801a4d8 <memset>
 800f852:	9a01      	ldr	r2, [sp, #4]
 800f854:	4630      	mov	r0, r6
 800f856:	2100      	movs	r1, #0
 800f858:	f00a fe3e 	bl	801a4d8 <memset>
 800f85c:	e00b      	b.n	800f876 <rcutils_string_map_reserve+0xb6>
 800f85e:	f8d5 8014 	ldr.w	r8, [r5, #20]
 800f862:	6828      	ldr	r0, [r5, #0]
 800f864:	4639      	mov	r1, r7
 800f866:	47c0      	blx	r8
 800f868:	6833      	ldr	r3, [r6, #0]
 800f86a:	4639      	mov	r1, r7
 800f86c:	6858      	ldr	r0, [r3, #4]
 800f86e:	601c      	str	r4, [r3, #0]
 800f870:	47c0      	blx	r8
 800f872:	6835      	ldr	r5, [r6, #0]
 800f874:	606c      	str	r4, [r5, #4]
 800f876:	2000      	movs	r0, #0
 800f878:	60ac      	str	r4, [r5, #8]
 800f87a:	b003      	add	sp, #12
 800f87c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f880:	2000      	movs	r0, #0
 800f882:	e7ad      	b.n	800f7e0 <rcutils_string_map_reserve+0x20>
 800f884:	200a      	movs	r0, #10
 800f886:	e7ab      	b.n	800f7e0 <rcutils_string_map_reserve+0x20>
 800f888:	200b      	movs	r0, #11
 800f88a:	4770      	bx	lr
 800f88c:	1f13      	subs	r3, r2, #4
 800f88e:	f1ac 0c04 	sub.w	ip, ip, #4
 800f892:	4498      	add	r8, r3
 800f894:	4460      	add	r0, ip
 800f896:	4462      	add	r2, ip
 800f898:	2300      	movs	r3, #0
 800f89a:	f842 3f04 	str.w	r3, [r2, #4]!
 800f89e:	4542      	cmp	r2, r8
 800f8a0:	f840 3f04 	str.w	r3, [r0, #4]!
 800f8a4:	d1f9      	bne.n	800f89a <rcutils_string_map_reserve+0xda>
 800f8a6:	e7e6      	b.n	800f876 <rcutils_string_map_reserve+0xb6>

0800f8a8 <rcutils_string_map_init>:
 800f8a8:	b082      	sub	sp, #8
 800f8aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8ac:	460e      	mov	r6, r1
 800f8ae:	a906      	add	r1, sp, #24
 800f8b0:	e881 000c 	stmia.w	r1, {r2, r3}
 800f8b4:	b380      	cbz	r0, 800f918 <rcutils_string_map_init+0x70>
 800f8b6:	6807      	ldr	r7, [r0, #0]
 800f8b8:	4604      	mov	r4, r0
 800f8ba:	b12f      	cbz	r7, 800f8c8 <rcutils_string_map_init+0x20>
 800f8bc:	251e      	movs	r5, #30
 800f8be:	4628      	mov	r0, r5
 800f8c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f8c4:	b002      	add	sp, #8
 800f8c6:	4770      	bx	lr
 800f8c8:	a806      	add	r0, sp, #24
 800f8ca:	f7ff ff37 	bl	800f73c <rcutils_allocator_is_valid>
 800f8ce:	b318      	cbz	r0, 800f918 <rcutils_string_map_init+0x70>
 800f8d0:	9b06      	ldr	r3, [sp, #24]
 800f8d2:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f8d4:	2024      	movs	r0, #36	; 0x24
 800f8d6:	4798      	blx	r3
 800f8d8:	4605      	mov	r5, r0
 800f8da:	6020      	str	r0, [r4, #0]
 800f8dc:	b310      	cbz	r0, 800f924 <rcutils_string_map_init+0x7c>
 800f8de:	f10d 0e18 	add.w	lr, sp, #24
 800f8e2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f8e6:	f105 0c10 	add.w	ip, r5, #16
 800f8ea:	e9c5 7700 	strd	r7, r7, [r5]
 800f8ee:	e9c5 7702 	strd	r7, r7, [r5, #8]
 800f8f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f8f6:	f8de 3000 	ldr.w	r3, [lr]
 800f8fa:	f8cc 3000 	str.w	r3, [ip]
 800f8fe:	4631      	mov	r1, r6
 800f900:	4620      	mov	r0, r4
 800f902:	f7ff ff5d 	bl	800f7c0 <rcutils_string_map_reserve>
 800f906:	4605      	mov	r5, r0
 800f908:	2800      	cmp	r0, #0
 800f90a:	d0d8      	beq.n	800f8be <rcutils_string_map_init+0x16>
 800f90c:	9b07      	ldr	r3, [sp, #28]
 800f90e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f910:	6820      	ldr	r0, [r4, #0]
 800f912:	4798      	blx	r3
 800f914:	6027      	str	r7, [r4, #0]
 800f916:	e7d2      	b.n	800f8be <rcutils_string_map_init+0x16>
 800f918:	250b      	movs	r5, #11
 800f91a:	4628      	mov	r0, r5
 800f91c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f920:	b002      	add	sp, #8
 800f922:	4770      	bx	lr
 800f924:	250a      	movs	r5, #10
 800f926:	e7ca      	b.n	800f8be <rcutils_string_map_init+0x16>

0800f928 <rcutils_string_map_fini>:
 800f928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f92c:	b082      	sub	sp, #8
 800f92e:	2800      	cmp	r0, #0
 800f930:	d039      	beq.n	800f9a6 <rcutils_string_map_fini+0x7e>
 800f932:	6804      	ldr	r4, [r0, #0]
 800f934:	4606      	mov	r6, r0
 800f936:	2c00      	cmp	r4, #0
 800f938:	d031      	beq.n	800f99e <rcutils_string_map_fini+0x76>
 800f93a:	68a3      	ldr	r3, [r4, #8]
 800f93c:	b323      	cbz	r3, 800f988 <rcutils_string_map_fini+0x60>
 800f93e:	2500      	movs	r5, #0
 800f940:	6822      	ldr	r2, [r4, #0]
 800f942:	46a8      	mov	r8, r5
 800f944:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800f948:	b1d8      	cbz	r0, 800f982 <rcutils_string_map_fini+0x5a>
 800f94a:	6a21      	ldr	r1, [r4, #32]
 800f94c:	6967      	ldr	r7, [r4, #20]
 800f94e:	9101      	str	r1, [sp, #4]
 800f950:	47b8      	blx	r7
 800f952:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f956:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800f95a:	9901      	ldr	r1, [sp, #4]
 800f95c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f960:	47b8      	blx	r7
 800f962:	68e3      	ldr	r3, [r4, #12]
 800f964:	6862      	ldr	r2, [r4, #4]
 800f966:	3b01      	subs	r3, #1
 800f968:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800f96c:	60e3      	str	r3, [r4, #12]
 800f96e:	6834      	ldr	r4, [r6, #0]
 800f970:	68a3      	ldr	r3, [r4, #8]
 800f972:	3501      	adds	r5, #1
 800f974:	429d      	cmp	r5, r3
 800f976:	d207      	bcs.n	800f988 <rcutils_string_map_fini+0x60>
 800f978:	6822      	ldr	r2, [r4, #0]
 800f97a:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800f97e:	2800      	cmp	r0, #0
 800f980:	d1e3      	bne.n	800f94a <rcutils_string_map_fini+0x22>
 800f982:	3501      	adds	r5, #1
 800f984:	429d      	cmp	r5, r3
 800f986:	d3dd      	bcc.n	800f944 <rcutils_string_map_fini+0x1c>
 800f988:	2100      	movs	r1, #0
 800f98a:	4630      	mov	r0, r6
 800f98c:	f7ff ff18 	bl	800f7c0 <rcutils_string_map_reserve>
 800f990:	4604      	mov	r4, r0
 800f992:	b920      	cbnz	r0, 800f99e <rcutils_string_map_fini+0x76>
 800f994:	6830      	ldr	r0, [r6, #0]
 800f996:	6943      	ldr	r3, [r0, #20]
 800f998:	6a01      	ldr	r1, [r0, #32]
 800f99a:	4798      	blx	r3
 800f99c:	6034      	str	r4, [r6, #0]
 800f99e:	4620      	mov	r0, r4
 800f9a0:	b002      	add	sp, #8
 800f9a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9a6:	240b      	movs	r4, #11
 800f9a8:	4620      	mov	r0, r4
 800f9aa:	b002      	add	sp, #8
 800f9ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f9b0 <rcutils_string_map_getn>:
 800f9b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9b4:	b082      	sub	sp, #8
 800f9b6:	b308      	cbz	r0, 800f9fc <rcutils_string_map_getn+0x4c>
 800f9b8:	6804      	ldr	r4, [r0, #0]
 800f9ba:	b304      	cbz	r4, 800f9fe <rcutils_string_map_getn+0x4e>
 800f9bc:	460d      	mov	r5, r1
 800f9be:	b1e9      	cbz	r1, 800f9fc <rcutils_string_map_getn+0x4c>
 800f9c0:	f8d4 9008 	ldr.w	r9, [r4, #8]
 800f9c4:	6827      	ldr	r7, [r4, #0]
 800f9c6:	f1b9 0f00 	cmp.w	r9, #0
 800f9ca:	d017      	beq.n	800f9fc <rcutils_string_map_getn+0x4c>
 800f9cc:	4690      	mov	r8, r2
 800f9ce:	3f04      	subs	r7, #4
 800f9d0:	2600      	movs	r6, #0
 800f9d2:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800f9d6:	9101      	str	r1, [sp, #4]
 800f9d8:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800f9dc:	4608      	mov	r0, r1
 800f9de:	3601      	adds	r6, #1
 800f9e0:	b151      	cbz	r1, 800f9f8 <rcutils_string_map_getn+0x48>
 800f9e2:	f7f0 fc07 	bl	80001f4 <strlen>
 800f9e6:	4540      	cmp	r0, r8
 800f9e8:	4602      	mov	r2, r0
 800f9ea:	9901      	ldr	r1, [sp, #4]
 800f9ec:	bf38      	it	cc
 800f9ee:	4642      	movcc	r2, r8
 800f9f0:	4628      	mov	r0, r5
 800f9f2:	f00a fd86 	bl	801a502 <strncmp>
 800f9f6:	b130      	cbz	r0, 800fa06 <rcutils_string_map_getn+0x56>
 800f9f8:	45b1      	cmp	r9, r6
 800f9fa:	d1ea      	bne.n	800f9d2 <rcutils_string_map_getn+0x22>
 800f9fc:	2400      	movs	r4, #0
 800f9fe:	4620      	mov	r0, r4
 800fa00:	b002      	add	sp, #8
 800fa02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa06:	6863      	ldr	r3, [r4, #4]
 800fa08:	f853 400a 	ldr.w	r4, [r3, sl]
 800fa0c:	4620      	mov	r0, r4
 800fa0e:	b002      	add	sp, #8
 800fa10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800fa14 <rcutils_system_time_now>:
 800fa14:	b310      	cbz	r0, 800fa5c <rcutils_system_time_now+0x48>
 800fa16:	b570      	push	{r4, r5, r6, lr}
 800fa18:	b084      	sub	sp, #16
 800fa1a:	4669      	mov	r1, sp
 800fa1c:	4604      	mov	r4, r0
 800fa1e:	2001      	movs	r0, #1
 800fa20:	f7f3 ff02 	bl	8003828 <clock_gettime>
 800fa24:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa28:	2800      	cmp	r0, #0
 800fa2a:	f171 0300 	sbcs.w	r3, r1, #0
 800fa2e:	db12      	blt.n	800fa56 <rcutils_system_time_now+0x42>
 800fa30:	9d02      	ldr	r5, [sp, #8]
 800fa32:	2d00      	cmp	r5, #0
 800fa34:	db0c      	blt.n	800fa50 <rcutils_system_time_now+0x3c>
 800fa36:	4e0a      	ldr	r6, [pc, #40]	; (800fa60 <rcutils_system_time_now+0x4c>)
 800fa38:	fba0 2306 	umull	r2, r3, r0, r6
 800fa3c:	1952      	adds	r2, r2, r5
 800fa3e:	fb06 3301 	mla	r3, r6, r1, r3
 800fa42:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800fa46:	2000      	movs	r0, #0
 800fa48:	e9c4 2300 	strd	r2, r3, [r4]
 800fa4c:	b004      	add	sp, #16
 800fa4e:	bd70      	pop	{r4, r5, r6, pc}
 800fa50:	ea50 0301 	orrs.w	r3, r0, r1
 800fa54:	d1ef      	bne.n	800fa36 <rcutils_system_time_now+0x22>
 800fa56:	2002      	movs	r0, #2
 800fa58:	b004      	add	sp, #16
 800fa5a:	bd70      	pop	{r4, r5, r6, pc}
 800fa5c:	200b      	movs	r0, #11
 800fa5e:	4770      	bx	lr
 800fa60:	3b9aca00 	.word	0x3b9aca00

0800fa64 <rcutils_steady_time_now>:
 800fa64:	b310      	cbz	r0, 800faac <rcutils_steady_time_now+0x48>
 800fa66:	b570      	push	{r4, r5, r6, lr}
 800fa68:	b084      	sub	sp, #16
 800fa6a:	4669      	mov	r1, sp
 800fa6c:	4604      	mov	r4, r0
 800fa6e:	2000      	movs	r0, #0
 800fa70:	f7f3 feda 	bl	8003828 <clock_gettime>
 800fa74:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa78:	2800      	cmp	r0, #0
 800fa7a:	f171 0300 	sbcs.w	r3, r1, #0
 800fa7e:	db12      	blt.n	800faa6 <rcutils_steady_time_now+0x42>
 800fa80:	9d02      	ldr	r5, [sp, #8]
 800fa82:	2d00      	cmp	r5, #0
 800fa84:	db0c      	blt.n	800faa0 <rcutils_steady_time_now+0x3c>
 800fa86:	4e0a      	ldr	r6, [pc, #40]	; (800fab0 <rcutils_steady_time_now+0x4c>)
 800fa88:	fba0 2306 	umull	r2, r3, r0, r6
 800fa8c:	1952      	adds	r2, r2, r5
 800fa8e:	fb06 3301 	mla	r3, r6, r1, r3
 800fa92:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800fa96:	2000      	movs	r0, #0
 800fa98:	e9c4 2300 	strd	r2, r3, [r4]
 800fa9c:	b004      	add	sp, #16
 800fa9e:	bd70      	pop	{r4, r5, r6, pc}
 800faa0:	ea50 0301 	orrs.w	r3, r0, r1
 800faa4:	d1ef      	bne.n	800fa86 <rcutils_steady_time_now+0x22>
 800faa6:	2002      	movs	r0, #2
 800faa8:	b004      	add	sp, #16
 800faaa:	bd70      	pop	{r4, r5, r6, pc}
 800faac:	200b      	movs	r0, #11
 800faae:	4770      	bx	lr
 800fab0:	3b9aca00 	.word	0x3b9aca00

0800fab4 <rmw_get_default_publisher_options>:
 800fab4:	2000      	movs	r0, #0
 800fab6:	4770      	bx	lr

0800fab8 <rmw_get_default_subscription_options>:
 800fab8:	2200      	movs	r2, #0
 800faba:	6002      	str	r2, [r0, #0]
 800fabc:	7102      	strb	r2, [r0, #4]
 800fabe:	4770      	bx	lr

0800fac0 <rmw_get_zero_initialized_message_info>:
 800fac0:	b470      	push	{r4, r5, r6}
 800fac2:	4d07      	ldr	r5, [pc, #28]	; (800fae0 <rmw_get_zero_initialized_message_info+0x20>)
 800fac4:	4606      	mov	r6, r0
 800fac6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fac8:	4634      	mov	r4, r6
 800faca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800facc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800face:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fad0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800fad4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800fad8:	4630      	mov	r0, r6
 800fada:	bc70      	pop	{r4, r5, r6}
 800fadc:	4770      	bx	lr
 800fade:	bf00      	nop
 800fae0:	0801b7a8 	.word	0x0801b7a8

0800fae4 <rmw_validate_full_topic_name>:
 800fae4:	2800      	cmp	r0, #0
 800fae6:	d062      	beq.n	800fbae <rmw_validate_full_topic_name+0xca>
 800fae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800faec:	460d      	mov	r5, r1
 800faee:	2900      	cmp	r1, #0
 800faf0:	d05f      	beq.n	800fbb2 <rmw_validate_full_topic_name+0xce>
 800faf2:	4616      	mov	r6, r2
 800faf4:	4604      	mov	r4, r0
 800faf6:	f7f0 fb7d 	bl	80001f4 <strlen>
 800fafa:	b148      	cbz	r0, 800fb10 <rmw_validate_full_topic_name+0x2c>
 800fafc:	7823      	ldrb	r3, [r4, #0]
 800fafe:	2b2f      	cmp	r3, #47	; 0x2f
 800fb00:	d00d      	beq.n	800fb1e <rmw_validate_full_topic_name+0x3a>
 800fb02:	2302      	movs	r3, #2
 800fb04:	602b      	str	r3, [r5, #0]
 800fb06:	b13e      	cbz	r6, 800fb18 <rmw_validate_full_topic_name+0x34>
 800fb08:	2000      	movs	r0, #0
 800fb0a:	6030      	str	r0, [r6, #0]
 800fb0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb10:	2301      	movs	r3, #1
 800fb12:	602b      	str	r3, [r5, #0]
 800fb14:	2e00      	cmp	r6, #0
 800fb16:	d1f7      	bne.n	800fb08 <rmw_validate_full_topic_name+0x24>
 800fb18:	2000      	movs	r0, #0
 800fb1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb1e:	1e47      	subs	r7, r0, #1
 800fb20:	5de3      	ldrb	r3, [r4, r7]
 800fb22:	2b2f      	cmp	r3, #47	; 0x2f
 800fb24:	d047      	beq.n	800fbb6 <rmw_validate_full_topic_name+0xd2>
 800fb26:	1e63      	subs	r3, r4, #1
 800fb28:	eb03 0900 	add.w	r9, r3, r0
 800fb2c:	f1c4 0e01 	rsb	lr, r4, #1
 800fb30:	eb0e 0803 	add.w	r8, lr, r3
 800fb34:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800fb38:	f021 0220 	bic.w	r2, r1, #32
 800fb3c:	3a41      	subs	r2, #65	; 0x41
 800fb3e:	2a19      	cmp	r2, #25
 800fb40:	f1a1 0c2f 	sub.w	ip, r1, #47	; 0x2f
 800fb44:	d90c      	bls.n	800fb60 <rmw_validate_full_topic_name+0x7c>
 800fb46:	295f      	cmp	r1, #95	; 0x5f
 800fb48:	d00a      	beq.n	800fb60 <rmw_validate_full_topic_name+0x7c>
 800fb4a:	f1bc 0f0a 	cmp.w	ip, #10
 800fb4e:	d907      	bls.n	800fb60 <rmw_validate_full_topic_name+0x7c>
 800fb50:	2304      	movs	r3, #4
 800fb52:	602b      	str	r3, [r5, #0]
 800fb54:	2e00      	cmp	r6, #0
 800fb56:	d0df      	beq.n	800fb18 <rmw_validate_full_topic_name+0x34>
 800fb58:	f8c6 8000 	str.w	r8, [r6]
 800fb5c:	2000      	movs	r0, #0
 800fb5e:	e7d5      	b.n	800fb0c <rmw_validate_full_topic_name+0x28>
 800fb60:	454b      	cmp	r3, r9
 800fb62:	d1e5      	bne.n	800fb30 <rmw_validate_full_topic_name+0x4c>
 800fb64:	f8df e084 	ldr.w	lr, [pc, #132]	; 800fbec <rmw_validate_full_topic_name+0x108>
 800fb68:	2300      	movs	r3, #0
 800fb6a:	f107 0801 	add.w	r8, r7, #1
 800fb6e:	e005      	b.n	800fb7c <rmw_validate_full_topic_name+0x98>
 800fb70:	4611      	mov	r1, r2
 800fb72:	4288      	cmp	r0, r1
 800fb74:	4613      	mov	r3, r2
 800fb76:	f104 0401 	add.w	r4, r4, #1
 800fb7a:	d925      	bls.n	800fbc8 <rmw_validate_full_topic_name+0xe4>
 800fb7c:	429f      	cmp	r7, r3
 800fb7e:	f103 0201 	add.w	r2, r3, #1
 800fb82:	d01e      	beq.n	800fbc2 <rmw_validate_full_topic_name+0xde>
 800fb84:	7821      	ldrb	r1, [r4, #0]
 800fb86:	292f      	cmp	r1, #47	; 0x2f
 800fb88:	d1f2      	bne.n	800fb70 <rmw_validate_full_topic_name+0x8c>
 800fb8a:	f894 c001 	ldrb.w	ip, [r4, #1]
 800fb8e:	1c5a      	adds	r2, r3, #1
 800fb90:	f1bc 0f2f 	cmp.w	ip, #47	; 0x2f
 800fb94:	4611      	mov	r1, r2
 800fb96:	d024      	beq.n	800fbe2 <rmw_validate_full_topic_name+0xfe>
 800fb98:	f81c 300e 	ldrb.w	r3, [ip, lr]
 800fb9c:	075b      	lsls	r3, r3, #29
 800fb9e:	d5e8      	bpl.n	800fb72 <rmw_validate_full_topic_name+0x8e>
 800fba0:	2306      	movs	r3, #6
 800fba2:	602b      	str	r3, [r5, #0]
 800fba4:	2e00      	cmp	r6, #0
 800fba6:	d0b7      	beq.n	800fb18 <rmw_validate_full_topic_name+0x34>
 800fba8:	6032      	str	r2, [r6, #0]
 800fbaa:	2000      	movs	r0, #0
 800fbac:	e7ae      	b.n	800fb0c <rmw_validate_full_topic_name+0x28>
 800fbae:	200b      	movs	r0, #11
 800fbb0:	4770      	bx	lr
 800fbb2:	200b      	movs	r0, #11
 800fbb4:	e7aa      	b.n	800fb0c <rmw_validate_full_topic_name+0x28>
 800fbb6:	2303      	movs	r3, #3
 800fbb8:	602b      	str	r3, [r5, #0]
 800fbba:	2e00      	cmp	r6, #0
 800fbbc:	d0ac      	beq.n	800fb18 <rmw_validate_full_topic_name+0x34>
 800fbbe:	6037      	str	r7, [r6, #0]
 800fbc0:	e7aa      	b.n	800fb18 <rmw_validate_full_topic_name+0x34>
 800fbc2:	4641      	mov	r1, r8
 800fbc4:	1c7a      	adds	r2, r7, #1
 800fbc6:	e7d4      	b.n	800fb72 <rmw_validate_full_topic_name+0x8e>
 800fbc8:	28f7      	cmp	r0, #247	; 0xf7
 800fbca:	d802      	bhi.n	800fbd2 <rmw_validate_full_topic_name+0xee>
 800fbcc:	2000      	movs	r0, #0
 800fbce:	6028      	str	r0, [r5, #0]
 800fbd0:	e79c      	b.n	800fb0c <rmw_validate_full_topic_name+0x28>
 800fbd2:	2307      	movs	r3, #7
 800fbd4:	602b      	str	r3, [r5, #0]
 800fbd6:	2e00      	cmp	r6, #0
 800fbd8:	d09e      	beq.n	800fb18 <rmw_validate_full_topic_name+0x34>
 800fbda:	23f6      	movs	r3, #246	; 0xf6
 800fbdc:	6033      	str	r3, [r6, #0]
 800fbde:	2000      	movs	r0, #0
 800fbe0:	e794      	b.n	800fb0c <rmw_validate_full_topic_name+0x28>
 800fbe2:	2305      	movs	r3, #5
 800fbe4:	602b      	str	r3, [r5, #0]
 800fbe6:	2e00      	cmp	r6, #0
 800fbe8:	d1de      	bne.n	800fba8 <rmw_validate_full_topic_name+0xc4>
 800fbea:	e795      	b.n	800fb18 <rmw_validate_full_topic_name+0x34>
 800fbec:	0801c1c0 	.word	0x0801c1c0

0800fbf0 <rmw_uros_set_custom_transport>:
 800fbf0:	b470      	push	{r4, r5, r6}
 800fbf2:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800fbf6:	b162      	cbz	r2, 800fc12 <rmw_uros_set_custom_transport+0x22>
 800fbf8:	b15b      	cbz	r3, 800fc12 <rmw_uros_set_custom_transport+0x22>
 800fbfa:	b155      	cbz	r5, 800fc12 <rmw_uros_set_custom_transport+0x22>
 800fbfc:	b14e      	cbz	r6, 800fc12 <rmw_uros_set_custom_transport+0x22>
 800fbfe:	4c06      	ldr	r4, [pc, #24]	; (800fc18 <rmw_uros_set_custom_transport+0x28>)
 800fc00:	7020      	strb	r0, [r4, #0]
 800fc02:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800fc06:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800fc0a:	6166      	str	r6, [r4, #20]
 800fc0c:	2000      	movs	r0, #0
 800fc0e:	bc70      	pop	{r4, r5, r6}
 800fc10:	4770      	bx	lr
 800fc12:	200b      	movs	r0, #11
 800fc14:	bc70      	pop	{r4, r5, r6}
 800fc16:	4770      	bx	lr
 800fc18:	20009ec8 	.word	0x20009ec8

0800fc1c <flush_session>:
 800fc1c:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 800fc1e:	f002 bf03 	b.w	8012a28 <uxr_run_session_until_confirm_delivery>
 800fc22:	bf00      	nop

0800fc24 <rmw_publish>:
 800fc24:	2800      	cmp	r0, #0
 800fc26:	d053      	beq.n	800fcd0 <rmw_publish+0xac>
 800fc28:	b570      	push	{r4, r5, r6, lr}
 800fc2a:	460d      	mov	r5, r1
 800fc2c:	b08e      	sub	sp, #56	; 0x38
 800fc2e:	2900      	cmp	r1, #0
 800fc30:	d04b      	beq.n	800fcca <rmw_publish+0xa6>
 800fc32:	4604      	mov	r4, r0
 800fc34:	6800      	ldr	r0, [r0, #0]
 800fc36:	f000 fe33 	bl	80108a0 <is_uxrce_rmw_identifier_valid>
 800fc3a:	2800      	cmp	r0, #0
 800fc3c:	d045      	beq.n	800fcca <rmw_publish+0xa6>
 800fc3e:	6866      	ldr	r6, [r4, #4]
 800fc40:	2e00      	cmp	r6, #0
 800fc42:	d042      	beq.n	800fcca <rmw_publish+0xa6>
 800fc44:	69b4      	ldr	r4, [r6, #24]
 800fc46:	4628      	mov	r0, r5
 800fc48:	6923      	ldr	r3, [r4, #16]
 800fc4a:	4798      	blx	r3
 800fc4c:	69f3      	ldr	r3, [r6, #28]
 800fc4e:	9005      	str	r0, [sp, #20]
 800fc50:	b113      	cbz	r3, 800fc58 <rmw_publish+0x34>
 800fc52:	a805      	add	r0, sp, #20
 800fc54:	4798      	blx	r3
 800fc56:	9805      	ldr	r0, [sp, #20]
 800fc58:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800fc5c:	691b      	ldr	r3, [r3, #16]
 800fc5e:	9000      	str	r0, [sp, #0]
 800fc60:	6972      	ldr	r2, [r6, #20]
 800fc62:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800fc64:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800fc68:	ab06      	add	r3, sp, #24
 800fc6a:	f003 fce5 	bl	8013638 <uxr_prepare_output_stream>
 800fc6e:	b1d8      	cbz	r0, 800fca8 <rmw_publish+0x84>
 800fc70:	68a3      	ldr	r3, [r4, #8]
 800fc72:	4628      	mov	r0, r5
 800fc74:	a906      	add	r1, sp, #24
 800fc76:	4798      	blx	r3
 800fc78:	6a33      	ldr	r3, [r6, #32]
 800fc7a:	4604      	mov	r4, r0
 800fc7c:	b10b      	cbz	r3, 800fc82 <rmw_publish+0x5e>
 800fc7e:	a806      	add	r0, sp, #24
 800fc80:	4798      	blx	r3
 800fc82:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 800fc86:	2b01      	cmp	r3, #1
 800fc88:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800fc8c:	d022      	beq.n	800fcd4 <rmw_publish+0xb0>
 800fc8e:	6918      	ldr	r0, [r3, #16]
 800fc90:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 800fc92:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800fc96:	f002 fec7 	bl	8012a28 <uxr_run_session_until_confirm_delivery>
 800fc9a:	4020      	ands	r0, r4
 800fc9c:	b2c4      	uxtb	r4, r0
 800fc9e:	f084 0001 	eor.w	r0, r4, #1
 800fca2:	b2c0      	uxtb	r0, r0
 800fca4:	b00e      	add	sp, #56	; 0x38
 800fca6:	bd70      	pop	{r4, r5, r6, pc}
 800fca8:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800fcac:	4a0c      	ldr	r2, [pc, #48]	; (800fce0 <rmw_publish+0xbc>)
 800fcae:	6918      	ldr	r0, [r3, #16]
 800fcb0:	9b05      	ldr	r3, [sp, #20]
 800fcb2:	9300      	str	r3, [sp, #0]
 800fcb4:	e9cd 2601 	strd	r2, r6, [sp, #4]
 800fcb8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800fcbc:	6972      	ldr	r2, [r6, #20]
 800fcbe:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800fcc0:	ab06      	add	r3, sp, #24
 800fcc2:	f003 fce9 	bl	8013698 <uxr_prepare_output_stream_fragmented>
 800fcc6:	2800      	cmp	r0, #0
 800fcc8:	d1d2      	bne.n	800fc70 <rmw_publish+0x4c>
 800fcca:	2001      	movs	r0, #1
 800fccc:	b00e      	add	sp, #56	; 0x38
 800fcce:	bd70      	pop	{r4, r5, r6, pc}
 800fcd0:	2001      	movs	r0, #1
 800fcd2:	4770      	bx	lr
 800fcd4:	6918      	ldr	r0, [r3, #16]
 800fcd6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800fcda:	f002 fae9 	bl	80122b0 <uxr_flash_output_streams>
 800fcde:	e7de      	b.n	800fc9e <rmw_publish+0x7a>
 800fce0:	0800fc1d 	.word	0x0800fc1d

0800fce4 <rmw_create_publisher>:
 800fce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fce8:	b087      	sub	sp, #28
 800fcea:	2800      	cmp	r0, #0
 800fcec:	f000 80cc 	beq.w	800fe88 <rmw_create_publisher+0x1a4>
 800fcf0:	460e      	mov	r6, r1
 800fcf2:	2900      	cmp	r1, #0
 800fcf4:	f000 80c8 	beq.w	800fe88 <rmw_create_publisher+0x1a4>
 800fcf8:	4604      	mov	r4, r0
 800fcfa:	6800      	ldr	r0, [r0, #0]
 800fcfc:	4615      	mov	r5, r2
 800fcfe:	4698      	mov	r8, r3
 800fd00:	f000 fdce 	bl	80108a0 <is_uxrce_rmw_identifier_valid>
 800fd04:	2800      	cmp	r0, #0
 800fd06:	f000 80bf 	beq.w	800fe88 <rmw_create_publisher+0x1a4>
 800fd0a:	2d00      	cmp	r5, #0
 800fd0c:	f000 80bc 	beq.w	800fe88 <rmw_create_publisher+0x1a4>
 800fd10:	782b      	ldrb	r3, [r5, #0]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	f000 80b8 	beq.w	800fe88 <rmw_create_publisher+0x1a4>
 800fd18:	f1b8 0f00 	cmp.w	r8, #0
 800fd1c:	f000 80b4 	beq.w	800fe88 <rmw_create_publisher+0x1a4>
 800fd20:	485c      	ldr	r0, [pc, #368]	; (800fe94 <rmw_create_publisher+0x1b0>)
 800fd22:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800fd26:	f007 f953 	bl	8016fd0 <get_memory>
 800fd2a:	2800      	cmp	r0, #0
 800fd2c:	f000 80ac 	beq.w	800fe88 <rmw_create_publisher+0x1a4>
 800fd30:	68c4      	ldr	r4, [r0, #12]
 800fd32:	2300      	movs	r3, #0
 800fd34:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800fd38:	f007 f9b2 	bl	80170a0 <rmw_get_implementation_identifier>
 800fd3c:	f104 0a98 	add.w	sl, r4, #152	; 0x98
 800fd40:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800fd44:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 800fd48:	4628      	mov	r0, r5
 800fd4a:	f7f0 fa53 	bl	80001f4 <strlen>
 800fd4e:	3001      	adds	r0, #1
 800fd50:	283c      	cmp	r0, #60	; 0x3c
 800fd52:	f104 0784 	add.w	r7, r4, #132	; 0x84
 800fd56:	f200 8094 	bhi.w	800fe82 <rmw_create_publisher+0x19e>
 800fd5a:	4a4f      	ldr	r2, [pc, #316]	; (800fe98 <rmw_create_publisher+0x1b4>)
 800fd5c:	462b      	mov	r3, r5
 800fd5e:	213c      	movs	r1, #60	; 0x3c
 800fd60:	4650      	mov	r0, sl
 800fd62:	f00a fa59 	bl	801a218 <sniprintf>
 800fd66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fd6a:	e9c4 391f 	strd	r3, r9, [r4, #124]	; 0x7c
 800fd6e:	4641      	mov	r1, r8
 800fd70:	2250      	movs	r2, #80	; 0x50
 800fd72:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800fd76:	f00a fcce 	bl	801a716 <memcpy>
 800fd7a:	f898 3008 	ldrb.w	r3, [r8, #8]
 800fd7e:	4947      	ldr	r1, [pc, #284]	; (800fe9c <rmw_create_publisher+0x1b8>)
 800fd80:	2b02      	cmp	r3, #2
 800fd82:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fd86:	bf0c      	ite	eq
 800fd88:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 800fd8c:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 800fd90:	67a3      	str	r3, [r4, #120]	; 0x78
 800fd92:	2300      	movs	r3, #0
 800fd94:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800fd98:	4630      	mov	r0, r6
 800fd9a:	f000 fd8f 	bl	80108bc <get_message_typesupport_handle>
 800fd9e:	2800      	cmp	r0, #0
 800fda0:	d06f      	beq.n	800fe82 <rmw_create_publisher+0x19e>
 800fda2:	6842      	ldr	r2, [r0, #4]
 800fda4:	61a2      	str	r2, [r4, #24]
 800fda6:	2a00      	cmp	r2, #0
 800fda8:	d06b      	beq.n	800fe82 <rmw_create_publisher+0x19e>
 800fdaa:	4629      	mov	r1, r5
 800fdac:	4643      	mov	r3, r8
 800fdae:	4648      	mov	r0, r9
 800fdb0:	f007 fbc0 	bl	8017534 <create_topic>
 800fdb4:	6260      	str	r0, [r4, #36]	; 0x24
 800fdb6:	2800      	cmp	r0, #0
 800fdb8:	d063      	beq.n	800fe82 <rmw_create_publisher+0x19e>
 800fdba:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800fdbe:	f241 5398 	movw	r3, #5528	; 0x1598
 800fdc2:	2103      	movs	r1, #3
 800fdc4:	5ad0      	ldrh	r0, [r2, r3]
 800fdc6:	1c45      	adds	r5, r0, #1
 800fdc8:	52d5      	strh	r5, [r2, r3]
 800fdca:	f001 ffff 	bl	8011dcc <uxr_object_id>
 800fdce:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fdd2:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800fdd6:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800fdda:	6912      	ldr	r2, [r2, #16]
 800fddc:	6120      	str	r0, [r4, #16]
 800fdde:	f04f 0a06 	mov.w	sl, #6
 800fde2:	f8cd a000 	str.w	sl, [sp]
 800fde6:	6819      	ldr	r1, [r3, #0]
 800fde8:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800fdec:	f502 7028 	add.w	r0, r2, #672	; 0x2a0
 800fdf0:	6922      	ldr	r2, [r4, #16]
 800fdf2:	f001 fe9b 	bl	8011b2c <uxr_buffer_create_publisher_bin>
 800fdf6:	4602      	mov	r2, r0
 800fdf8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800fdfc:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800fe00:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800fe04:	f000 fccc 	bl	80107a0 <run_xrce_session>
 800fe08:	b3b8      	cbz	r0, 800fe7a <rmw_create_publisher+0x196>
 800fe0a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800fe0e:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 800fe12:	f241 539a 	movw	r3, #5530	; 0x159a
 800fe16:	2105      	movs	r1, #5
 800fe18:	5ad0      	ldrh	r0, [r2, r3]
 800fe1a:	1c45      	adds	r5, r0, #1
 800fe1c:	52d5      	strh	r5, [r2, r3]
 800fe1e:	f001 ffd5 	bl	8011dcc <uxr_object_id>
 800fe22:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800fe26:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fe2a:	6915      	ldr	r5, [r2, #16]
 800fe2c:	6160      	str	r0, [r4, #20]
 800fe2e:	ae04      	add	r6, sp, #16
 800fe30:	4641      	mov	r1, r8
 800fe32:	4630      	mov	r0, r6
 800fe34:	f8d3 8384 	ldr.w	r8, [r3, #900]	; 0x384
 800fe38:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800fe3c:	f000 fccc 	bl	80107d8 <convert_qos_profile>
 800fe40:	e896 0003 	ldmia.w	r6, {r0, r1}
 800fe44:	f8cd a00c 	str.w	sl, [sp, #12]
 800fe48:	9001      	str	r0, [sp, #4]
 800fe4a:	f8ad 1008 	strh.w	r1, [sp, #8]
 800fe4e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800fe52:	9300      	str	r3, [sp, #0]
 800fe54:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
 800fe58:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800fe5c:	f8d8 1000 	ldr.w	r1, [r8]
 800fe60:	4628      	mov	r0, r5
 800fe62:	f001 fec1 	bl	8011be8 <uxr_buffer_create_datawriter_bin>
 800fe66:	4602      	mov	r2, r0
 800fe68:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800fe6c:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800fe70:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800fe74:	f000 fc94 	bl	80107a0 <run_xrce_session>
 800fe78:	b938      	cbnz	r0, 800fe8a <rmw_create_publisher+0x1a6>
 800fe7a:	4806      	ldr	r0, [pc, #24]	; (800fe94 <rmw_create_publisher+0x1b0>)
 800fe7c:	4621      	mov	r1, r4
 800fe7e:	f007 f8b7 	bl	8016ff0 <put_memory>
 800fe82:	4638      	mov	r0, r7
 800fe84:	f000 fb3a 	bl	80104fc <rmw_uxrce_fini_publisher_memory>
 800fe88:	2700      	movs	r7, #0
 800fe8a:	4638      	mov	r0, r7
 800fe8c:	b007      	add	sp, #28
 800fe8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe92:	bf00      	nop
 800fe94:	20009ef8 	.word	0x20009ef8
 800fe98:	0801ba2c 	.word	0x0801ba2c
 800fe9c:	0801b9f8 	.word	0x0801b9f8

0800fea0 <rmw_publisher_get_actual_qos>:
 800fea0:	2000      	movs	r0, #0
 800fea2:	4770      	bx	lr

0800fea4 <rmw_destroy_publisher>:
 800fea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fea6:	b128      	cbz	r0, 800feb4 <rmw_destroy_publisher+0x10>
 800fea8:	4604      	mov	r4, r0
 800feaa:	6800      	ldr	r0, [r0, #0]
 800feac:	460d      	mov	r5, r1
 800feae:	f000 fcf7 	bl	80108a0 <is_uxrce_rmw_identifier_valid>
 800feb2:	b910      	cbnz	r0, 800feba <rmw_destroy_publisher+0x16>
 800feb4:	2401      	movs	r4, #1
 800feb6:	4620      	mov	r0, r4
 800feb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800feba:	6863      	ldr	r3, [r4, #4]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d0f9      	beq.n	800feb4 <rmw_destroy_publisher+0x10>
 800fec0:	2d00      	cmp	r5, #0
 800fec2:	d0f7      	beq.n	800feb4 <rmw_destroy_publisher+0x10>
 800fec4:	6828      	ldr	r0, [r5, #0]
 800fec6:	f000 fceb 	bl	80108a0 <is_uxrce_rmw_identifier_valid>
 800feca:	2800      	cmp	r0, #0
 800fecc:	d0f2      	beq.n	800feb4 <rmw_destroy_publisher+0x10>
 800fece:	686c      	ldr	r4, [r5, #4]
 800fed0:	2c00      	cmp	r4, #0
 800fed2:	d0ef      	beq.n	800feb4 <rmw_destroy_publisher+0x10>
 800fed4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800fed6:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 800feda:	f007 fb8d 	bl	80175f8 <destroy_topic>
 800fede:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800fee2:	6962      	ldr	r2, [r4, #20]
 800fee4:	6918      	ldr	r0, [r3, #16]
 800fee6:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800feea:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800feee:	6819      	ldr	r1, [r3, #0]
 800fef0:	f001 fd6a 	bl	80119c8 <uxr_buffer_delete_entity>
 800fef4:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800fef8:	6922      	ldr	r2, [r4, #16]
 800fefa:	4603      	mov	r3, r0
 800fefc:	6908      	ldr	r0, [r1, #16]
 800fefe:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800ff02:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ff06:	6809      	ldr	r1, [r1, #0]
 800ff08:	461c      	mov	r4, r3
 800ff0a:	f001 fd5d 	bl	80119c8 <uxr_buffer_delete_entity>
 800ff0e:	4606      	mov	r6, r0
 800ff10:	6938      	ldr	r0, [r7, #16]
 800ff12:	4622      	mov	r2, r4
 800ff14:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800ff18:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800ff1c:	f000 fc40 	bl	80107a0 <run_xrce_session>
 800ff20:	4604      	mov	r4, r0
 800ff22:	6938      	ldr	r0, [r7, #16]
 800ff24:	4632      	mov	r2, r6
 800ff26:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800ff2a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800ff2e:	f000 fc37 	bl	80107a0 <run_xrce_session>
 800ff32:	b12c      	cbz	r4, 800ff40 <rmw_destroy_publisher+0x9c>
 800ff34:	b120      	cbz	r0, 800ff40 <rmw_destroy_publisher+0x9c>
 800ff36:	2400      	movs	r4, #0
 800ff38:	4628      	mov	r0, r5
 800ff3a:	f000 fadf 	bl	80104fc <rmw_uxrce_fini_publisher_memory>
 800ff3e:	e7ba      	b.n	800feb6 <rmw_destroy_publisher+0x12>
 800ff40:	2402      	movs	r4, #2
 800ff42:	e7f9      	b.n	800ff38 <rmw_destroy_publisher+0x94>

0800ff44 <rmw_create_subscription>:
 800ff44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff48:	b08d      	sub	sp, #52	; 0x34
 800ff4a:	2800      	cmp	r0, #0
 800ff4c:	f000 80cf 	beq.w	80100ee <rmw_create_subscription+0x1aa>
 800ff50:	460e      	mov	r6, r1
 800ff52:	2900      	cmp	r1, #0
 800ff54:	f000 80cb 	beq.w	80100ee <rmw_create_subscription+0x1aa>
 800ff58:	4604      	mov	r4, r0
 800ff5a:	6800      	ldr	r0, [r0, #0]
 800ff5c:	4615      	mov	r5, r2
 800ff5e:	4698      	mov	r8, r3
 800ff60:	f000 fc9e 	bl	80108a0 <is_uxrce_rmw_identifier_valid>
 800ff64:	2800      	cmp	r0, #0
 800ff66:	f000 80c2 	beq.w	80100ee <rmw_create_subscription+0x1aa>
 800ff6a:	2d00      	cmp	r5, #0
 800ff6c:	f000 80bf 	beq.w	80100ee <rmw_create_subscription+0x1aa>
 800ff70:	782b      	ldrb	r3, [r5, #0]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	f000 80bb 	beq.w	80100ee <rmw_create_subscription+0x1aa>
 800ff78:	f1b8 0f00 	cmp.w	r8, #0
 800ff7c:	f000 80b7 	beq.w	80100ee <rmw_create_subscription+0x1aa>
 800ff80:	485d      	ldr	r0, [pc, #372]	; (80100f8 <rmw_create_subscription+0x1b4>)
 800ff82:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800ff86:	f007 f823 	bl	8016fd0 <get_memory>
 800ff8a:	4604      	mov	r4, r0
 800ff8c:	2800      	cmp	r0, #0
 800ff8e:	f000 80af 	beq.w	80100f0 <rmw_create_subscription+0x1ac>
 800ff92:	68c7      	ldr	r7, [r0, #12]
 800ff94:	2300      	movs	r3, #0
 800ff96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ff9a:	f007 f881 	bl	80170a0 <rmw_get_implementation_identifier>
 800ff9e:	f107 0a94 	add.w	sl, r7, #148	; 0x94
 800ffa2:	67f8      	str	r0, [r7, #124]	; 0x7c
 800ffa4:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 800ffa8:	4628      	mov	r0, r5
 800ffaa:	f7f0 f923 	bl	80001f4 <strlen>
 800ffae:	3001      	adds	r0, #1
 800ffb0:	283c      	cmp	r0, #60	; 0x3c
 800ffb2:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 800ffb6:	f200 8097 	bhi.w	80100e8 <rmw_create_subscription+0x1a4>
 800ffba:	4a50      	ldr	r2, [pc, #320]	; (80100fc <rmw_create_subscription+0x1b8>)
 800ffbc:	462b      	mov	r3, r5
 800ffbe:	213c      	movs	r1, #60	; 0x3c
 800ffc0:	4650      	mov	r0, sl
 800ffc2:	f00a f929 	bl	801a218 <sniprintf>
 800ffc6:	4641      	mov	r1, r8
 800ffc8:	f8c7 9020 	str.w	r9, [r7, #32]
 800ffcc:	2250      	movs	r2, #80	; 0x50
 800ffce:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800ffd2:	f00a fba0 	bl	801a716 <memcpy>
 800ffd6:	494a      	ldr	r1, [pc, #296]	; (8010100 <rmw_create_subscription+0x1bc>)
 800ffd8:	4630      	mov	r0, r6
 800ffda:	f000 fc6f 	bl	80108bc <get_message_typesupport_handle>
 800ffde:	2800      	cmp	r0, #0
 800ffe0:	f000 8082 	beq.w	80100e8 <rmw_create_subscription+0x1a4>
 800ffe4:	6842      	ldr	r2, [r0, #4]
 800ffe6:	61ba      	str	r2, [r7, #24]
 800ffe8:	2a00      	cmp	r2, #0
 800ffea:	d07d      	beq.n	80100e8 <rmw_create_subscription+0x1a4>
 800ffec:	4629      	mov	r1, r5
 800ffee:	4643      	mov	r3, r8
 800fff0:	4648      	mov	r0, r9
 800fff2:	f007 fa9f 	bl	8017534 <create_topic>
 800fff6:	61f8      	str	r0, [r7, #28]
 800fff8:	2800      	cmp	r0, #0
 800fffa:	d075      	beq.n	80100e8 <rmw_create_subscription+0x1a4>
 800fffc:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8010000:	f241 539c 	movw	r3, #5532	; 0x159c
 8010004:	2104      	movs	r1, #4
 8010006:	5ad0      	ldrh	r0, [r2, r3]
 8010008:	1c45      	adds	r5, r0, #1
 801000a:	52d5      	strh	r5, [r2, r3]
 801000c:	f001 fede 	bl	8011dcc <uxr_object_id>
 8010010:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010014:	6138      	str	r0, [r7, #16]
 8010016:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 801001a:	2606      	movs	r6, #6
 801001c:	9600      	str	r6, [sp, #0]
 801001e:	6811      	ldr	r1, [r2, #0]
 8010020:	693a      	ldr	r2, [r7, #16]
 8010022:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8010026:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801002a:	f001 fdad 	bl	8011b88 <uxr_buffer_create_subscriber_bin>
 801002e:	4602      	mov	r2, r0
 8010030:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010034:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8010038:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801003c:	f000 fbb0 	bl	80107a0 <run_xrce_session>
 8010040:	2800      	cmp	r0, #0
 8010042:	d04d      	beq.n	80100e0 <rmw_create_subscription+0x19c>
 8010044:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8010048:	f241 539e 	movw	r3, #5534	; 0x159e
 801004c:	4631      	mov	r1, r6
 801004e:	5ad0      	ldrh	r0, [r2, r3]
 8010050:	1c45      	adds	r5, r0, #1
 8010052:	52d5      	strh	r5, [r2, r3]
 8010054:	f001 feba 	bl	8011dcc <uxr_object_id>
 8010058:	ad08      	add	r5, sp, #32
 801005a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801005e:	69fb      	ldr	r3, [r7, #28]
 8010060:	6178      	str	r0, [r7, #20]
 8010062:	4641      	mov	r1, r8
 8010064:	4628      	mov	r0, r5
 8010066:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 801006a:	9305      	str	r3, [sp, #20]
 801006c:	f000 fbb4 	bl	80107d8 <convert_qos_profile>
 8010070:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010074:	9b05      	ldr	r3, [sp, #20]
 8010076:	9001      	str	r0, [sp, #4]
 8010078:	9603      	str	r6, [sp, #12]
 801007a:	f8ad 1008 	strh.w	r1, [sp, #8]
 801007e:	691b      	ldr	r3, [r3, #16]
 8010080:	9300      	str	r3, [sp, #0]
 8010082:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 8010086:	f8db 1000 	ldr.w	r1, [fp]
 801008a:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 801008e:	f001 fe23 	bl	8011cd8 <uxr_buffer_create_datareader_bin>
 8010092:	4602      	mov	r2, r0
 8010094:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010098:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801009c:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80100a0:	f000 fb7e 	bl	80107a0 <run_xrce_session>
 80100a4:	b1e0      	cbz	r0, 80100e0 <rmw_create_subscription+0x19c>
 80100a6:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 80100aa:	f898 3008 	ldrb.w	r3, [r8, #8]
 80100ae:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80100b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80100b6:	2200      	movs	r2, #0
 80100b8:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 80100bc:	2b02      	cmp	r3, #2
 80100be:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80100c2:	bf0c      	ite	eq
 80100c4:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 80100c8:	f8d0 3374 	ldrne.w	r3, [r0, #884]	; 0x374
 80100cc:	9307      	str	r3, [sp, #28]
 80100ce:	aa0a      	add	r2, sp, #40	; 0x28
 80100d0:	9200      	str	r2, [sp, #0]
 80100d2:	697a      	ldr	r2, [r7, #20]
 80100d4:	6809      	ldr	r1, [r1, #0]
 80100d6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80100da:	f001 fea5 	bl	8011e28 <uxr_buffer_request_data>
 80100de:	e007      	b.n	80100f0 <rmw_create_subscription+0x1ac>
 80100e0:	4805      	ldr	r0, [pc, #20]	; (80100f8 <rmw_create_subscription+0x1b4>)
 80100e2:	4639      	mov	r1, r7
 80100e4:	f006 ff84 	bl	8016ff0 <put_memory>
 80100e8:	4620      	mov	r0, r4
 80100ea:	f000 fa1d 	bl	8010528 <rmw_uxrce_fini_subscription_memory>
 80100ee:	2400      	movs	r4, #0
 80100f0:	4620      	mov	r0, r4
 80100f2:	b00d      	add	sp, #52	; 0x34
 80100f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100f8:	2000d154 	.word	0x2000d154
 80100fc:	0801ba2c 	.word	0x0801ba2c
 8010100:	0801b9f8 	.word	0x0801b9f8

08010104 <rmw_subscription_get_actual_qos>:
 8010104:	2000      	movs	r0, #0
 8010106:	4770      	bx	lr

08010108 <rmw_destroy_subscription>:
 8010108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801010a:	b128      	cbz	r0, 8010118 <rmw_destroy_subscription+0x10>
 801010c:	4604      	mov	r4, r0
 801010e:	6800      	ldr	r0, [r0, #0]
 8010110:	460d      	mov	r5, r1
 8010112:	f000 fbc5 	bl	80108a0 <is_uxrce_rmw_identifier_valid>
 8010116:	b910      	cbnz	r0, 801011e <rmw_destroy_subscription+0x16>
 8010118:	2401      	movs	r4, #1
 801011a:	4620      	mov	r0, r4
 801011c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801011e:	6863      	ldr	r3, [r4, #4]
 8010120:	2b00      	cmp	r3, #0
 8010122:	d0f9      	beq.n	8010118 <rmw_destroy_subscription+0x10>
 8010124:	2d00      	cmp	r5, #0
 8010126:	d0f7      	beq.n	8010118 <rmw_destroy_subscription+0x10>
 8010128:	6828      	ldr	r0, [r5, #0]
 801012a:	f000 fbb9 	bl	80108a0 <is_uxrce_rmw_identifier_valid>
 801012e:	2800      	cmp	r0, #0
 8010130:	d0f2      	beq.n	8010118 <rmw_destroy_subscription+0x10>
 8010132:	686c      	ldr	r4, [r5, #4]
 8010134:	2c00      	cmp	r4, #0
 8010136:	d0ef      	beq.n	8010118 <rmw_destroy_subscription+0x10>
 8010138:	6a26      	ldr	r6, [r4, #32]
 801013a:	6962      	ldr	r2, [r4, #20]
 801013c:	6930      	ldr	r0, [r6, #16]
 801013e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8010142:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010146:	6819      	ldr	r1, [r3, #0]
 8010148:	f001 fea8 	bl	8011e9c <uxr_buffer_cancel_data>
 801014c:	4602      	mov	r2, r0
 801014e:	6930      	ldr	r0, [r6, #16]
 8010150:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8010154:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8010158:	f000 fb22 	bl	80107a0 <run_xrce_session>
 801015c:	69e0      	ldr	r0, [r4, #28]
 801015e:	f007 fa4b 	bl	80175f8 <destroy_topic>
 8010162:	6a23      	ldr	r3, [r4, #32]
 8010164:	6962      	ldr	r2, [r4, #20]
 8010166:	6918      	ldr	r0, [r3, #16]
 8010168:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801016c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010170:	6819      	ldr	r1, [r3, #0]
 8010172:	f001 fc29 	bl	80119c8 <uxr_buffer_delete_entity>
 8010176:	6a21      	ldr	r1, [r4, #32]
 8010178:	6922      	ldr	r2, [r4, #16]
 801017a:	4603      	mov	r3, r0
 801017c:	6908      	ldr	r0, [r1, #16]
 801017e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8010182:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010186:	6809      	ldr	r1, [r1, #0]
 8010188:	461c      	mov	r4, r3
 801018a:	f001 fc1d 	bl	80119c8 <uxr_buffer_delete_entity>
 801018e:	4607      	mov	r7, r0
 8010190:	6930      	ldr	r0, [r6, #16]
 8010192:	4622      	mov	r2, r4
 8010194:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8010198:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801019c:	f000 fb00 	bl	80107a0 <run_xrce_session>
 80101a0:	4604      	mov	r4, r0
 80101a2:	6930      	ldr	r0, [r6, #16]
 80101a4:	463a      	mov	r2, r7
 80101a6:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80101aa:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80101ae:	f000 faf7 	bl	80107a0 <run_xrce_session>
 80101b2:	b12c      	cbz	r4, 80101c0 <rmw_destroy_subscription+0xb8>
 80101b4:	b120      	cbz	r0, 80101c0 <rmw_destroy_subscription+0xb8>
 80101b6:	2400      	movs	r4, #0
 80101b8:	4628      	mov	r0, r5
 80101ba:	f000 f9b5 	bl	8010528 <rmw_uxrce_fini_subscription_memory>
 80101be:	e7ac      	b.n	801011a <rmw_destroy_subscription+0x12>
 80101c0:	2402      	movs	r4, #2
 80101c2:	e7f9      	b.n	80101b8 <rmw_destroy_subscription+0xb0>

080101c4 <rmw_take_with_info>:
 80101c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80101c6:	4604      	mov	r4, r0
 80101c8:	6800      	ldr	r0, [r0, #0]
 80101ca:	b089      	sub	sp, #36	; 0x24
 80101cc:	460f      	mov	r7, r1
 80101ce:	4615      	mov	r5, r2
 80101d0:	b128      	cbz	r0, 80101de <rmw_take_with_info+0x1a>
 80101d2:	4b24      	ldr	r3, [pc, #144]	; (8010264 <rmw_take_with_info+0xa0>)
 80101d4:	6819      	ldr	r1, [r3, #0]
 80101d6:	f7f0 f803 	bl	80001e0 <strcmp>
 80101da:	2800      	cmp	r0, #0
 80101dc:	d13e      	bne.n	801025c <rmw_take_with_info+0x98>
 80101de:	b305      	cbz	r5, 8010222 <rmw_take_with_info+0x5e>
 80101e0:	6864      	ldr	r4, [r4, #4]
 80101e2:	2300      	movs	r3, #0
 80101e4:	702b      	strb	r3, [r5, #0]
 80101e6:	f000 fa63 	bl	80106b0 <rmw_uxrce_clean_expired_static_input_buffer>
 80101ea:	4620      	mov	r0, r4
 80101ec:	f000 fa36 	bl	801065c <rmw_uxrce_find_static_input_buffer_by_owner>
 80101f0:	4606      	mov	r6, r0
 80101f2:	b1f0      	cbz	r0, 8010232 <rmw_take_with_info+0x6e>
 80101f4:	68c1      	ldr	r1, [r0, #12]
 80101f6:	4668      	mov	r0, sp
 80101f8:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 80101fc:	3110      	adds	r1, #16
 80101fe:	f001 fb73 	bl	80118e8 <ucdr_init_buffer>
 8010202:	69a3      	ldr	r3, [r4, #24]
 8010204:	4639      	mov	r1, r7
 8010206:	68db      	ldr	r3, [r3, #12]
 8010208:	4668      	mov	r0, sp
 801020a:	4798      	blx	r3
 801020c:	4631      	mov	r1, r6
 801020e:	4604      	mov	r4, r0
 8010210:	4815      	ldr	r0, [pc, #84]	; (8010268 <rmw_take_with_info+0xa4>)
 8010212:	f006 feed 	bl	8016ff0 <put_memory>
 8010216:	702c      	strb	r4, [r5, #0]
 8010218:	f084 0001 	eor.w	r0, r4, #1
 801021c:	b2c0      	uxtb	r0, r0
 801021e:	b009      	add	sp, #36	; 0x24
 8010220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010222:	6864      	ldr	r4, [r4, #4]
 8010224:	f000 fa44 	bl	80106b0 <rmw_uxrce_clean_expired_static_input_buffer>
 8010228:	4620      	mov	r0, r4
 801022a:	f000 fa17 	bl	801065c <rmw_uxrce_find_static_input_buffer_by_owner>
 801022e:	4605      	mov	r5, r0
 8010230:	b910      	cbnz	r0, 8010238 <rmw_take_with_info+0x74>
 8010232:	2001      	movs	r0, #1
 8010234:	b009      	add	sp, #36	; 0x24
 8010236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010238:	68e9      	ldr	r1, [r5, #12]
 801023a:	4668      	mov	r0, sp
 801023c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 8010240:	3110      	adds	r1, #16
 8010242:	f001 fb51 	bl	80118e8 <ucdr_init_buffer>
 8010246:	69a3      	ldr	r3, [r4, #24]
 8010248:	4639      	mov	r1, r7
 801024a:	68db      	ldr	r3, [r3, #12]
 801024c:	4668      	mov	r0, sp
 801024e:	4798      	blx	r3
 8010250:	4629      	mov	r1, r5
 8010252:	4604      	mov	r4, r0
 8010254:	4804      	ldr	r0, [pc, #16]	; (8010268 <rmw_take_with_info+0xa4>)
 8010256:	f006 fecb 	bl	8016ff0 <put_memory>
 801025a:	e7dd      	b.n	8010218 <rmw_take_with_info+0x54>
 801025c:	200c      	movs	r0, #12
 801025e:	b009      	add	sp, #36	; 0x24
 8010260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010262:	bf00      	nop
 8010264:	0801bf34 	.word	0x0801bf34
 8010268:	20009ee8 	.word	0x20009ee8

0801026c <rmw_uxrce_init_service_memory>:
 801026c:	b1b2      	cbz	r2, 801029c <rmw_uxrce_init_service_memory+0x30>
 801026e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010270:	7a07      	ldrb	r7, [r0, #8]
 8010272:	4605      	mov	r5, r0
 8010274:	b98f      	cbnz	r7, 801029a <rmw_uxrce_init_service_memory+0x2e>
 8010276:	e9c0 7700 	strd	r7, r7, [r0]
 801027a:	460c      	mov	r4, r1
 801027c:	23c8      	movs	r3, #200	; 0xc8
 801027e:	2101      	movs	r1, #1
 8010280:	fb03 4602 	mla	r6, r3, r2, r4
 8010284:	60c3      	str	r3, [r0, #12]
 8010286:	7201      	strb	r1, [r0, #8]
 8010288:	4621      	mov	r1, r4
 801028a:	4628      	mov	r0, r5
 801028c:	f006 feb0 	bl	8016ff0 <put_memory>
 8010290:	60e4      	str	r4, [r4, #12]
 8010292:	f804 7bc8 	strb.w	r7, [r4], #200
 8010296:	42a6      	cmp	r6, r4
 8010298:	d1f6      	bne.n	8010288 <rmw_uxrce_init_service_memory+0x1c>
 801029a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801029c:	4770      	bx	lr
 801029e:	bf00      	nop

080102a0 <rmw_uxrce_init_client_memory>:
 80102a0:	b1b2      	cbz	r2, 80102d0 <rmw_uxrce_init_client_memory+0x30>
 80102a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102a4:	7a07      	ldrb	r7, [r0, #8]
 80102a6:	4605      	mov	r5, r0
 80102a8:	b98f      	cbnz	r7, 80102ce <rmw_uxrce_init_client_memory+0x2e>
 80102aa:	e9c0 7700 	strd	r7, r7, [r0]
 80102ae:	460c      	mov	r4, r1
 80102b0:	23c8      	movs	r3, #200	; 0xc8
 80102b2:	2101      	movs	r1, #1
 80102b4:	fb03 4602 	mla	r6, r3, r2, r4
 80102b8:	60c3      	str	r3, [r0, #12]
 80102ba:	7201      	strb	r1, [r0, #8]
 80102bc:	4621      	mov	r1, r4
 80102be:	4628      	mov	r0, r5
 80102c0:	f006 fe96 	bl	8016ff0 <put_memory>
 80102c4:	60e4      	str	r4, [r4, #12]
 80102c6:	f804 7bc8 	strb.w	r7, [r4], #200
 80102ca:	42a6      	cmp	r6, r4
 80102cc:	d1f6      	bne.n	80102bc <rmw_uxrce_init_client_memory+0x1c>
 80102ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102d0:	4770      	bx	lr
 80102d2:	bf00      	nop

080102d4 <rmw_uxrce_init_publisher_memory>:
 80102d4:	b1b2      	cbz	r2, 8010304 <rmw_uxrce_init_publisher_memory+0x30>
 80102d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102d8:	7a07      	ldrb	r7, [r0, #8]
 80102da:	4605      	mov	r5, r0
 80102dc:	b98f      	cbnz	r7, 8010302 <rmw_uxrce_init_publisher_memory+0x2e>
 80102de:	e9c0 7700 	strd	r7, r7, [r0]
 80102e2:	460c      	mov	r4, r1
 80102e4:	23d8      	movs	r3, #216	; 0xd8
 80102e6:	2101      	movs	r1, #1
 80102e8:	fb03 4602 	mla	r6, r3, r2, r4
 80102ec:	60c3      	str	r3, [r0, #12]
 80102ee:	7201      	strb	r1, [r0, #8]
 80102f0:	4621      	mov	r1, r4
 80102f2:	4628      	mov	r0, r5
 80102f4:	f006 fe7c 	bl	8016ff0 <put_memory>
 80102f8:	60e4      	str	r4, [r4, #12]
 80102fa:	f804 7bd8 	strb.w	r7, [r4], #216
 80102fe:	42a6      	cmp	r6, r4
 8010300:	d1f6      	bne.n	80102f0 <rmw_uxrce_init_publisher_memory+0x1c>
 8010302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010304:	4770      	bx	lr
 8010306:	bf00      	nop

08010308 <rmw_uxrce_init_subscription_memory>:
 8010308:	b1b2      	cbz	r2, 8010338 <rmw_uxrce_init_subscription_memory+0x30>
 801030a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801030c:	7a07      	ldrb	r7, [r0, #8]
 801030e:	4605      	mov	r5, r0
 8010310:	b98f      	cbnz	r7, 8010336 <rmw_uxrce_init_subscription_memory+0x2e>
 8010312:	e9c0 7700 	strd	r7, r7, [r0]
 8010316:	460c      	mov	r4, r1
 8010318:	23d0      	movs	r3, #208	; 0xd0
 801031a:	2101      	movs	r1, #1
 801031c:	fb03 4602 	mla	r6, r3, r2, r4
 8010320:	60c3      	str	r3, [r0, #12]
 8010322:	7201      	strb	r1, [r0, #8]
 8010324:	4621      	mov	r1, r4
 8010326:	4628      	mov	r0, r5
 8010328:	f006 fe62 	bl	8016ff0 <put_memory>
 801032c:	60e4      	str	r4, [r4, #12]
 801032e:	f804 7bd0 	strb.w	r7, [r4], #208
 8010332:	42a6      	cmp	r6, r4
 8010334:	d1f6      	bne.n	8010324 <rmw_uxrce_init_subscription_memory+0x1c>
 8010336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010338:	4770      	bx	lr
 801033a:	bf00      	nop

0801033c <rmw_uxrce_init_node_memory>:
 801033c:	b1b2      	cbz	r2, 801036c <rmw_uxrce_init_node_memory+0x30>
 801033e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010340:	7a07      	ldrb	r7, [r0, #8]
 8010342:	4605      	mov	r5, r0
 8010344:	b98f      	cbnz	r7, 801036a <rmw_uxrce_init_node_memory+0x2e>
 8010346:	e9c0 7700 	strd	r7, r7, [r0]
 801034a:	460c      	mov	r4, r1
 801034c:	23a4      	movs	r3, #164	; 0xa4
 801034e:	2101      	movs	r1, #1
 8010350:	fb03 4602 	mla	r6, r3, r2, r4
 8010354:	60c3      	str	r3, [r0, #12]
 8010356:	7201      	strb	r1, [r0, #8]
 8010358:	4621      	mov	r1, r4
 801035a:	4628      	mov	r0, r5
 801035c:	f006 fe48 	bl	8016ff0 <put_memory>
 8010360:	60e4      	str	r4, [r4, #12]
 8010362:	f804 7ba4 	strb.w	r7, [r4], #164
 8010366:	42a6      	cmp	r6, r4
 8010368:	d1f6      	bne.n	8010358 <rmw_uxrce_init_node_memory+0x1c>
 801036a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801036c:	4770      	bx	lr
 801036e:	bf00      	nop

08010370 <rmw_uxrce_init_session_memory>:
 8010370:	b1d2      	cbz	r2, 80103a8 <rmw_uxrce_init_session_memory+0x38>
 8010372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010376:	7a07      	ldrb	r7, [r0, #8]
 8010378:	4605      	mov	r5, r0
 801037a:	b99f      	cbnz	r7, 80103a4 <rmw_uxrce_init_session_memory+0x34>
 801037c:	e9c0 7700 	strd	r7, r7, [r0]
 8010380:	f241 53a8 	movw	r3, #5544	; 0x15a8
 8010384:	460c      	mov	r4, r1
 8010386:	2101      	movs	r1, #1
 8010388:	fb03 4602 	mla	r6, r3, r2, r4
 801038c:	60c3      	str	r3, [r0, #12]
 801038e:	4698      	mov	r8, r3
 8010390:	7201      	strb	r1, [r0, #8]
 8010392:	4621      	mov	r1, r4
 8010394:	4628      	mov	r0, r5
 8010396:	f006 fe2b 	bl	8016ff0 <put_memory>
 801039a:	60e4      	str	r4, [r4, #12]
 801039c:	7027      	strb	r7, [r4, #0]
 801039e:	4444      	add	r4, r8
 80103a0:	42a6      	cmp	r6, r4
 80103a2:	d1f6      	bne.n	8010392 <rmw_uxrce_init_session_memory+0x22>
 80103a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103a8:	4770      	bx	lr
 80103aa:	bf00      	nop

080103ac <rmw_uxrce_init_topic_memory>:
 80103ac:	b1c2      	cbz	r2, 80103e0 <rmw_uxrce_init_topic_memory+0x34>
 80103ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103b0:	7a07      	ldrb	r7, [r0, #8]
 80103b2:	4606      	mov	r6, r0
 80103b4:	b99f      	cbnz	r7, 80103de <rmw_uxrce_init_topic_memory+0x32>
 80103b6:	e9c0 7700 	strd	r7, r7, [r0]
 80103ba:	460c      	mov	r4, r1
 80103bc:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80103c0:	2101      	movs	r1, #1
 80103c2:	231c      	movs	r3, #28
 80103c4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80103c8:	7201      	strb	r1, [r0, #8]
 80103ca:	60c3      	str	r3, [r0, #12]
 80103cc:	4621      	mov	r1, r4
 80103ce:	4630      	mov	r0, r6
 80103d0:	f006 fe0e 	bl	8016ff0 <put_memory>
 80103d4:	60e4      	str	r4, [r4, #12]
 80103d6:	f804 7b1c 	strb.w	r7, [r4], #28
 80103da:	42a5      	cmp	r5, r4
 80103dc:	d1f6      	bne.n	80103cc <rmw_uxrce_init_topic_memory+0x20>
 80103de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103e0:	4770      	bx	lr
 80103e2:	bf00      	nop

080103e4 <rmw_uxrce_init_static_input_buffer_memory>:
 80103e4:	b1d2      	cbz	r2, 801041c <rmw_uxrce_init_static_input_buffer_memory+0x38>
 80103e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103e8:	7a07      	ldrb	r7, [r0, #8]
 80103ea:	4606      	mov	r6, r0
 80103ec:	b9af      	cbnz	r7, 801041a <rmw_uxrce_init_static_input_buffer_memory+0x36>
 80103ee:	e9c0 7700 	strd	r7, r7, [r0]
 80103f2:	460c      	mov	r4, r1
 80103f4:	eb02 1242 	add.w	r2, r2, r2, lsl #5
 80103f8:	2101      	movs	r1, #1
 80103fa:	f44f 6304 	mov.w	r3, #2112	; 0x840
 80103fe:	eb04 1582 	add.w	r5, r4, r2, lsl #6
 8010402:	7201      	strb	r1, [r0, #8]
 8010404:	60c3      	str	r3, [r0, #12]
 8010406:	4621      	mov	r1, r4
 8010408:	4630      	mov	r0, r6
 801040a:	f006 fdf1 	bl	8016ff0 <put_memory>
 801040e:	60e4      	str	r4, [r4, #12]
 8010410:	7027      	strb	r7, [r4, #0]
 8010412:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 8010416:	42a5      	cmp	r5, r4
 8010418:	d1f5      	bne.n	8010406 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 801041a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801041c:	4770      	bx	lr
 801041e:	bf00      	nop

08010420 <rmw_uxrce_init_init_options_impl_memory>:
 8010420:	b1b2      	cbz	r2, 8010450 <rmw_uxrce_init_init_options_impl_memory+0x30>
 8010422:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010424:	7a07      	ldrb	r7, [r0, #8]
 8010426:	4605      	mov	r5, r0
 8010428:	b98f      	cbnz	r7, 801044e <rmw_uxrce_init_init_options_impl_memory+0x2e>
 801042a:	e9c0 7700 	strd	r7, r7, [r0]
 801042e:	460c      	mov	r4, r1
 8010430:	232c      	movs	r3, #44	; 0x2c
 8010432:	2101      	movs	r1, #1
 8010434:	fb03 4602 	mla	r6, r3, r2, r4
 8010438:	60c3      	str	r3, [r0, #12]
 801043a:	7201      	strb	r1, [r0, #8]
 801043c:	4621      	mov	r1, r4
 801043e:	4628      	mov	r0, r5
 8010440:	f006 fdd6 	bl	8016ff0 <put_memory>
 8010444:	60e4      	str	r4, [r4, #12]
 8010446:	f804 7b2c 	strb.w	r7, [r4], #44
 801044a:	42a6      	cmp	r6, r4
 801044c:	d1f6      	bne.n	801043c <rmw_uxrce_init_init_options_impl_memory+0x1c>
 801044e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010450:	4770      	bx	lr
 8010452:	bf00      	nop

08010454 <rmw_uxrce_init_wait_set_memory>:
 8010454:	b1c2      	cbz	r2, 8010488 <rmw_uxrce_init_wait_set_memory+0x34>
 8010456:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010458:	7a07      	ldrb	r7, [r0, #8]
 801045a:	4606      	mov	r6, r0
 801045c:	b99f      	cbnz	r7, 8010486 <rmw_uxrce_init_wait_set_memory+0x32>
 801045e:	e9c0 7700 	strd	r7, r7, [r0]
 8010462:	460c      	mov	r4, r1
 8010464:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8010468:	2101      	movs	r1, #1
 801046a:	231c      	movs	r3, #28
 801046c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010470:	7201      	strb	r1, [r0, #8]
 8010472:	60c3      	str	r3, [r0, #12]
 8010474:	4621      	mov	r1, r4
 8010476:	4630      	mov	r0, r6
 8010478:	f006 fdba 	bl	8016ff0 <put_memory>
 801047c:	60e4      	str	r4, [r4, #12]
 801047e:	f804 7b1c 	strb.w	r7, [r4], #28
 8010482:	42a5      	cmp	r5, r4
 8010484:	d1f6      	bne.n	8010474 <rmw_uxrce_init_wait_set_memory+0x20>
 8010486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010488:	4770      	bx	lr
 801048a:	bf00      	nop

0801048c <rmw_uxrce_init_guard_condition_memory>:
 801048c:	b1b2      	cbz	r2, 80104bc <rmw_uxrce_init_guard_condition_memory+0x30>
 801048e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010490:	7a07      	ldrb	r7, [r0, #8]
 8010492:	4605      	mov	r5, r0
 8010494:	b98f      	cbnz	r7, 80104ba <rmw_uxrce_init_guard_condition_memory+0x2e>
 8010496:	e9c0 7700 	strd	r7, r7, [r0]
 801049a:	460c      	mov	r4, r1
 801049c:	2320      	movs	r3, #32
 801049e:	2101      	movs	r1, #1
 80104a0:	eb04 1642 	add.w	r6, r4, r2, lsl #5
 80104a4:	7201      	strb	r1, [r0, #8]
 80104a6:	60c3      	str	r3, [r0, #12]
 80104a8:	4621      	mov	r1, r4
 80104aa:	4628      	mov	r0, r5
 80104ac:	f006 fda0 	bl	8016ff0 <put_memory>
 80104b0:	60e4      	str	r4, [r4, #12]
 80104b2:	f804 7b20 	strb.w	r7, [r4], #32
 80104b6:	42a6      	cmp	r6, r4
 80104b8:	d1f6      	bne.n	80104a8 <rmw_uxrce_init_guard_condition_memory+0x1c>
 80104ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80104bc:	4770      	bx	lr
 80104be:	bf00      	nop

080104c0 <rmw_uxrce_fini_session_memory>:
 80104c0:	4601      	mov	r1, r0
 80104c2:	4801      	ldr	r0, [pc, #4]	; (80104c8 <rmw_uxrce_fini_session_memory+0x8>)
 80104c4:	f006 bd94 	b.w	8016ff0 <put_memory>
 80104c8:	2000d090 	.word	0x2000d090

080104cc <rmw_uxrce_fini_node_memory>:
 80104cc:	b538      	push	{r3, r4, r5, lr}
 80104ce:	4604      	mov	r4, r0
 80104d0:	6800      	ldr	r0, [r0, #0]
 80104d2:	b128      	cbz	r0, 80104e0 <rmw_uxrce_fini_node_memory+0x14>
 80104d4:	4b07      	ldr	r3, [pc, #28]	; (80104f4 <rmw_uxrce_fini_node_memory+0x28>)
 80104d6:	6819      	ldr	r1, [r3, #0]
 80104d8:	f7ef fe82 	bl	80001e0 <strcmp>
 80104dc:	b940      	cbnz	r0, 80104f0 <rmw_uxrce_fini_node_memory+0x24>
 80104de:	6020      	str	r0, [r4, #0]
 80104e0:	6861      	ldr	r1, [r4, #4]
 80104e2:	b129      	cbz	r1, 80104f0 <rmw_uxrce_fini_node_memory+0x24>
 80104e4:	2500      	movs	r5, #0
 80104e6:	4804      	ldr	r0, [pc, #16]	; (80104f8 <rmw_uxrce_fini_node_memory+0x2c>)
 80104e8:	610d      	str	r5, [r1, #16]
 80104ea:	f006 fd81 	bl	8016ff0 <put_memory>
 80104ee:	6065      	str	r5, [r4, #4]
 80104f0:	bd38      	pop	{r3, r4, r5, pc}
 80104f2:	bf00      	nop
 80104f4:	0801bf34 	.word	0x0801bf34
 80104f8:	2000cebc 	.word	0x2000cebc

080104fc <rmw_uxrce_fini_publisher_memory>:
 80104fc:	b510      	push	{r4, lr}
 80104fe:	4604      	mov	r4, r0
 8010500:	6800      	ldr	r0, [r0, #0]
 8010502:	b128      	cbz	r0, 8010510 <rmw_uxrce_fini_publisher_memory+0x14>
 8010504:	4b06      	ldr	r3, [pc, #24]	; (8010520 <rmw_uxrce_fini_publisher_memory+0x24>)
 8010506:	6819      	ldr	r1, [r3, #0]
 8010508:	f7ef fe6a 	bl	80001e0 <strcmp>
 801050c:	b938      	cbnz	r0, 801051e <rmw_uxrce_fini_publisher_memory+0x22>
 801050e:	6020      	str	r0, [r4, #0]
 8010510:	6861      	ldr	r1, [r4, #4]
 8010512:	b121      	cbz	r1, 801051e <rmw_uxrce_fini_publisher_memory+0x22>
 8010514:	4803      	ldr	r0, [pc, #12]	; (8010524 <rmw_uxrce_fini_publisher_memory+0x28>)
 8010516:	f006 fd6b 	bl	8016ff0 <put_memory>
 801051a:	2300      	movs	r3, #0
 801051c:	6063      	str	r3, [r4, #4]
 801051e:	bd10      	pop	{r4, pc}
 8010520:	0801bf34 	.word	0x0801bf34
 8010524:	20009ef8 	.word	0x20009ef8

08010528 <rmw_uxrce_fini_subscription_memory>:
 8010528:	b510      	push	{r4, lr}
 801052a:	4604      	mov	r4, r0
 801052c:	6800      	ldr	r0, [r0, #0]
 801052e:	b128      	cbz	r0, 801053c <rmw_uxrce_fini_subscription_memory+0x14>
 8010530:	4b06      	ldr	r3, [pc, #24]	; (801054c <rmw_uxrce_fini_subscription_memory+0x24>)
 8010532:	6819      	ldr	r1, [r3, #0]
 8010534:	f7ef fe54 	bl	80001e0 <strcmp>
 8010538:	b938      	cbnz	r0, 801054a <rmw_uxrce_fini_subscription_memory+0x22>
 801053a:	6020      	str	r0, [r4, #0]
 801053c:	6861      	ldr	r1, [r4, #4]
 801053e:	b121      	cbz	r1, 801054a <rmw_uxrce_fini_subscription_memory+0x22>
 8010540:	4803      	ldr	r0, [pc, #12]	; (8010550 <rmw_uxrce_fini_subscription_memory+0x28>)
 8010542:	f006 fd55 	bl	8016ff0 <put_memory>
 8010546:	2300      	movs	r3, #0
 8010548:	6063      	str	r3, [r4, #4]
 801054a:	bd10      	pop	{r4, pc}
 801054c:	0801bf34 	.word	0x0801bf34
 8010550:	2000d154 	.word	0x2000d154

08010554 <rmw_uxrce_fini_service_memory>:
 8010554:	b510      	push	{r4, lr}
 8010556:	4604      	mov	r4, r0
 8010558:	6800      	ldr	r0, [r0, #0]
 801055a:	b128      	cbz	r0, 8010568 <rmw_uxrce_fini_service_memory+0x14>
 801055c:	4b06      	ldr	r3, [pc, #24]	; (8010578 <rmw_uxrce_fini_service_memory+0x24>)
 801055e:	6819      	ldr	r1, [r3, #0]
 8010560:	f7ef fe3e 	bl	80001e0 <strcmp>
 8010564:	b938      	cbnz	r0, 8010576 <rmw_uxrce_fini_service_memory+0x22>
 8010566:	6020      	str	r0, [r4, #0]
 8010568:	6861      	ldr	r1, [r4, #4]
 801056a:	b121      	cbz	r1, 8010576 <rmw_uxrce_fini_service_memory+0x22>
 801056c:	4803      	ldr	r0, [pc, #12]	; (801057c <rmw_uxrce_fini_service_memory+0x28>)
 801056e:	f006 fd3f 	bl	8016ff0 <put_memory>
 8010572:	2300      	movs	r3, #0
 8010574:	6063      	str	r3, [r4, #4]
 8010576:	bd10      	pop	{r4, pc}
 8010578:	0801bf34 	.word	0x0801bf34
 801057c:	2000d144 	.word	0x2000d144

08010580 <rmw_uxrce_fini_client_memory>:
 8010580:	b510      	push	{r4, lr}
 8010582:	4604      	mov	r4, r0
 8010584:	6800      	ldr	r0, [r0, #0]
 8010586:	b128      	cbz	r0, 8010594 <rmw_uxrce_fini_client_memory+0x14>
 8010588:	4b06      	ldr	r3, [pc, #24]	; (80105a4 <rmw_uxrce_fini_client_memory+0x24>)
 801058a:	6819      	ldr	r1, [r3, #0]
 801058c:	f7ef fe28 	bl	80001e0 <strcmp>
 8010590:	b938      	cbnz	r0, 80105a2 <rmw_uxrce_fini_client_memory+0x22>
 8010592:	6020      	str	r0, [r4, #0]
 8010594:	6861      	ldr	r1, [r4, #4]
 8010596:	b121      	cbz	r1, 80105a2 <rmw_uxrce_fini_client_memory+0x22>
 8010598:	4803      	ldr	r0, [pc, #12]	; (80105a8 <rmw_uxrce_fini_client_memory+0x28>)
 801059a:	f006 fd29 	bl	8016ff0 <put_memory>
 801059e:	2300      	movs	r3, #0
 80105a0:	6063      	str	r3, [r4, #4]
 80105a2:	bd10      	pop	{r4, pc}
 80105a4:	0801bf34 	.word	0x0801bf34
 80105a8:	2000a778 	.word	0x2000a778

080105ac <rmw_uxrce_fini_topic_memory>:
 80105ac:	b510      	push	{r4, lr}
 80105ae:	4601      	mov	r1, r0
 80105b0:	4604      	mov	r4, r0
 80105b2:	4803      	ldr	r0, [pc, #12]	; (80105c0 <rmw_uxrce_fini_topic_memory+0x14>)
 80105b4:	f006 fd1c 	bl	8016ff0 <put_memory>
 80105b8:	2300      	movs	r3, #0
 80105ba:	61a3      	str	r3, [r4, #24]
 80105bc:	bd10      	pop	{r4, pc}
 80105be:	bf00      	nop
 80105c0:	2000d080 	.word	0x2000d080

080105c4 <rmw_uxrce_get_static_input_buffer_for_entity>:
 80105c4:	b082      	sub	sp, #8
 80105c6:	b4f0      	push	{r4, r5, r6, r7}
 80105c8:	4923      	ldr	r1, [pc, #140]	; (8010658 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 80105ca:	ac04      	add	r4, sp, #16
 80105cc:	e884 000c 	stmia.w	r4, {r2, r3}
 80105d0:	680d      	ldr	r5, [r1, #0]
 80105d2:	9c05      	ldr	r4, [sp, #20]
 80105d4:	2d00      	cmp	r5, #0
 80105d6:	d03d      	beq.n	8010654 <rmw_uxrce_get_static_input_buffer_for_entity+0x90>
 80105d8:	462b      	mov	r3, r5
 80105da:	2100      	movs	r1, #0
 80105dc:	68da      	ldr	r2, [r3, #12]
 80105de:	689b      	ldr	r3, [r3, #8]
 80105e0:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 80105e4:	4290      	cmp	r0, r2
 80105e6:	bf08      	it	eq
 80105e8:	3101      	addeq	r1, #1
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d1f6      	bne.n	80105dc <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 80105ee:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80105f2:	2b02      	cmp	r3, #2
 80105f4:	d026      	beq.n	8010644 <rmw_uxrce_get_static_input_buffer_for_entity+0x80>
 80105f6:	d906      	bls.n	8010606 <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 80105f8:	2b03      	cmp	r3, #3
 80105fa:	d004      	beq.n	8010606 <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 80105fc:	2100      	movs	r1, #0
 80105fe:	bcf0      	pop	{r4, r5, r6, r7}
 8010600:	4608      	mov	r0, r1
 8010602:	b002      	add	sp, #8
 8010604:	4770      	bx	lr
 8010606:	b304      	cbz	r4, 801064a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8010608:	428c      	cmp	r4, r1
 801060a:	d81e      	bhi.n	801064a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 801060c:	2d00      	cmp	r5, #0
 801060e:	d0f5      	beq.n	80105fc <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8010610:	2100      	movs	r1, #0
 8010612:	f04f 36ff 	mov.w	r6, #4294967295
 8010616:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 801061a:	e002      	b.n	8010622 <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 801061c:	68ad      	ldr	r5, [r5, #8]
 801061e:	2d00      	cmp	r5, #0
 8010620:	d0ed      	beq.n	80105fe <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 8010622:	68eb      	ldr	r3, [r5, #12]
 8010624:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 8010628:	4290      	cmp	r0, r2
 801062a:	d1f7      	bne.n	801061c <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 801062c:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8010630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010634:	42b2      	cmp	r2, r6
 8010636:	eb73 0407 	sbcs.w	r4, r3, r7
 801063a:	daef      	bge.n	801061c <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 801063c:	4616      	mov	r6, r2
 801063e:	461f      	mov	r7, r3
 8010640:	4629      	mov	r1, r5
 8010642:	e7eb      	b.n	801061c <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 8010644:	b10c      	cbz	r4, 801064a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8010646:	428c      	cmp	r4, r1
 8010648:	d9d8      	bls.n	80105fc <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 801064a:	bcf0      	pop	{r4, r5, r6, r7}
 801064c:	4802      	ldr	r0, [pc, #8]	; (8010658 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 801064e:	b002      	add	sp, #8
 8010650:	f006 bcbe 	b.w	8016fd0 <get_memory>
 8010654:	4629      	mov	r1, r5
 8010656:	e7ca      	b.n	80105ee <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8010658:	20009ee8 	.word	0x20009ee8

0801065c <rmw_uxrce_find_static_input_buffer_by_owner>:
 801065c:	4b12      	ldr	r3, [pc, #72]	; (80106a8 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	b1fb      	cbz	r3, 80106a2 <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 8010662:	b4f0      	push	{r4, r5, r6, r7}
 8010664:	f04f 0c00 	mov.w	ip, #0
 8010668:	f04f 34ff 	mov.w	r4, #4294967295
 801066c:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8010670:	e001      	b.n	8010676 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 8010672:	689b      	ldr	r3, [r3, #8]
 8010674:	b193      	cbz	r3, 801069c <rmw_uxrce_find_static_input_buffer_by_owner+0x40>
 8010676:	68da      	ldr	r2, [r3, #12]
 8010678:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 801067c:	4288      	cmp	r0, r1
 801067e:	d1f8      	bne.n	8010672 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 8010680:	f602 0218 	addw	r2, r2, #2072	; 0x818
 8010684:	e9d2 6700 	ldrd	r6, r7, [r2]
 8010688:	42a6      	cmp	r6, r4
 801068a:	eb77 0205 	sbcs.w	r2, r7, r5
 801068e:	daf0      	bge.n	8010672 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 8010690:	469c      	mov	ip, r3
 8010692:	689b      	ldr	r3, [r3, #8]
 8010694:	4634      	mov	r4, r6
 8010696:	463d      	mov	r5, r7
 8010698:	2b00      	cmp	r3, #0
 801069a:	d1ec      	bne.n	8010676 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 801069c:	4660      	mov	r0, ip
 801069e:	bcf0      	pop	{r4, r5, r6, r7}
 80106a0:	4770      	bx	lr
 80106a2:	4618      	mov	r0, r3
 80106a4:	4770      	bx	lr
 80106a6:	bf00      	nop
 80106a8:	20009ee8 	.word	0x20009ee8
 80106ac:	00000000 	.word	0x00000000

080106b0 <rmw_uxrce_clean_expired_static_input_buffer>:
 80106b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106b4:	4e38      	ldr	r6, [pc, #224]	; (8010798 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>)
 80106b6:	f8d6 8000 	ldr.w	r8, [r6]
 80106ba:	b083      	sub	sp, #12
 80106bc:	f007 fbd2 	bl	8017e64 <rmw_uros_epoch_nanos>
 80106c0:	f1b8 0f00 	cmp.w	r8, #0
 80106c4:	d05f      	beq.n	8010786 <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 80106c6:	46b1      	mov	r9, r6
 80106c8:	f8d8 600c 	ldr.w	r6, [r8, #12]
 80106cc:	f896 3820 	ldrb.w	r3, [r6, #2080]	; 0x820
 80106d0:	2b04      	cmp	r3, #4
 80106d2:	4682      	mov	sl, r0
 80106d4:	468b      	mov	fp, r1
 80106d6:	d02d      	beq.n	8010734 <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 80106d8:	2b05      	cmp	r3, #5
 80106da:	d041      	beq.n	8010760 <rmw_uxrce_clean_expired_static_input_buffer+0xb0>
 80106dc:	2b03      	cmp	r3, #3
 80106de:	d029      	beq.n	8010734 <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 80106e0:	2200      	movs	r2, #0
 80106e2:	2300      	movs	r3, #0
 80106e4:	e9cd 2300 	strd	r2, r3, [sp]
 80106e8:	2001      	movs	r0, #1
 80106ea:	2100      	movs	r1, #0
 80106ec:	9b00      	ldr	r3, [sp, #0]
 80106ee:	f606 0618 	addw	r6, r6, #2072	; 0x818
 80106f2:	e9d6 6700 	ldrd	r6, r7, [r6]
 80106f6:	18c2      	adds	r2, r0, r3
 80106f8:	9b01      	ldr	r3, [sp, #4]
 80106fa:	eb41 0303 	adc.w	r3, r1, r3
 80106fe:	1994      	adds	r4, r2, r6
 8010700:	eb43 0507 	adc.w	r5, r3, r7
 8010704:	4554      	cmp	r4, sl
 8010706:	eb75 020b 	sbcs.w	r2, r5, fp
 801070a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801070e:	db03      	blt.n	8010718 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8010710:	45b2      	cmp	sl, r6
 8010712:	eb7b 0207 	sbcs.w	r2, fp, r7
 8010716:	da05      	bge.n	8010724 <rmw_uxrce_clean_expired_static_input_buffer+0x74>
 8010718:	4641      	mov	r1, r8
 801071a:	4648      	mov	r0, r9
 801071c:	9300      	str	r3, [sp, #0]
 801071e:	f006 fc67 	bl	8016ff0 <put_memory>
 8010722:	9b00      	ldr	r3, [sp, #0]
 8010724:	b37b      	cbz	r3, 8010786 <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 8010726:	4698      	mov	r8, r3
 8010728:	f8d8 600c 	ldr.w	r6, [r8, #12]
 801072c:	f896 3820 	ldrb.w	r3, [r6, #2080]	; 0x820
 8010730:	2b04      	cmp	r3, #4
 8010732:	d1d1      	bne.n	80106d8 <rmw_uxrce_clean_expired_static_input_buffer+0x28>
 8010734:	f8d6 1814 	ldr.w	r1, [r6, #2068]	; 0x814
 8010738:	e9d1 2310 	ldrd	r2, r3, [r1, #64]	; 0x40
 801073c:	e9cd 2300 	strd	r2, r3, [sp]
 8010740:	4313      	orrs	r3, r2
 8010742:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	; 0x48
 8010746:	d015      	beq.n	8010774 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 8010748:	9a01      	ldr	r2, [sp, #4]
 801074a:	4b14      	ldr	r3, [pc, #80]	; (801079c <rmw_uxrce_clean_expired_static_input_buffer+0xec>)
 801074c:	fb03 f702 	mul.w	r7, r3, r2
 8010750:	9a00      	ldr	r2, [sp, #0]
 8010752:	fba2 2303 	umull	r2, r3, r2, r3
 8010756:	e9cd 2300 	strd	r2, r3, [sp]
 801075a:	443b      	add	r3, r7
 801075c:	9301      	str	r3, [sp, #4]
 801075e:	e7c5      	b.n	80106ec <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 8010760:	f8d6 1814 	ldr.w	r1, [r6, #2068]	; 0x814
 8010764:	e9d1 2312 	ldrd	r2, r3, [r1, #72]	; 0x48
 8010768:	e9cd 2300 	strd	r2, r3, [sp]
 801076c:	4313      	orrs	r3, r2
 801076e:	e9d1 0114 	ldrd	r0, r1, [r1, #80]	; 0x50
 8010772:	d1e9      	bne.n	8010748 <rmw_uxrce_clean_expired_static_input_buffer+0x98>
 8010774:	ea50 0301 	orrs.w	r3, r0, r1
 8010778:	bf02      	ittt	eq
 801077a:	a305      	addeq	r3, pc, #20	; (adr r3, 8010790 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>)
 801077c:	e9d3 2300 	ldrdeq	r2, r3, [r3]
 8010780:	e9cd 2300 	strdeq	r2, r3, [sp]
 8010784:	e7b2      	b.n	80106ec <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 8010786:	b003      	add	sp, #12
 8010788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801078c:	f3af 8000 	nop.w
 8010790:	fc23ac00 	.word	0xfc23ac00
 8010794:	00000006 	.word	0x00000006
 8010798:	20009ee8 	.word	0x20009ee8
 801079c:	3b9aca00 	.word	0x3b9aca00

080107a0 <run_xrce_session>:
 80107a0:	b510      	push	{r4, lr}
 80107a2:	788c      	ldrb	r4, [r1, #2]
 80107a4:	b086      	sub	sp, #24
 80107a6:	2c01      	cmp	r4, #1
 80107a8:	f8ad 200e 	strh.w	r2, [sp, #14]
 80107ac:	d00c      	beq.n	80107c8 <run_xrce_session+0x28>
 80107ae:	4619      	mov	r1, r3
 80107b0:	2301      	movs	r3, #1
 80107b2:	9300      	str	r3, [sp, #0]
 80107b4:	f10d 020e 	add.w	r2, sp, #14
 80107b8:	f10d 0317 	add.w	r3, sp, #23
 80107bc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80107c0:	f002 f958 	bl	8012a74 <uxr_run_session_until_all_status>
 80107c4:	b006      	add	sp, #24
 80107c6:	bd10      	pop	{r4, pc}
 80107c8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80107cc:	f001 fd70 	bl	80122b0 <uxr_flash_output_streams>
 80107d0:	4620      	mov	r0, r4
 80107d2:	b006      	add	sp, #24
 80107d4:	bd10      	pop	{r4, pc}
 80107d6:	bf00      	nop

080107d8 <convert_qos_profile>:
 80107d8:	b430      	push	{r4, r5}
 80107da:	7a0d      	ldrb	r5, [r1, #8]
 80107dc:	780c      	ldrb	r4, [r1, #0]
 80107de:	7a4a      	ldrb	r2, [r1, #9]
 80107e0:	8889      	ldrh	r1, [r1, #4]
 80107e2:	8081      	strh	r1, [r0, #4]
 80107e4:	f1a5 0502 	sub.w	r5, r5, #2
 80107e8:	f1a4 0402 	sub.w	r4, r4, #2
 80107ec:	2a02      	cmp	r2, #2
 80107ee:	fab5 f585 	clz	r5, r5
 80107f2:	fab4 f484 	clz	r4, r4
 80107f6:	ea4f 1555 	mov.w	r5, r5, lsr #5
 80107fa:	ea4f 1454 	mov.w	r4, r4, lsr #5
 80107fe:	bf18      	it	ne
 8010800:	2200      	movne	r2, #0
 8010802:	7045      	strb	r5, [r0, #1]
 8010804:	7084      	strb	r4, [r0, #2]
 8010806:	7002      	strb	r2, [r0, #0]
 8010808:	bc30      	pop	{r4, r5}
 801080a:	4770      	bx	lr

0801080c <generate_type_name>:
 801080c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801080e:	2300      	movs	r3, #0
 8010810:	700b      	strb	r3, [r1, #0]
 8010812:	6803      	ldr	r3, [r0, #0]
 8010814:	b087      	sub	sp, #28
 8010816:	4614      	mov	r4, r2
 8010818:	b1d3      	cbz	r3, 8010850 <generate_type_name+0x44>
 801081a:	4d0f      	ldr	r5, [pc, #60]	; (8010858 <generate_type_name+0x4c>)
 801081c:	462f      	mov	r7, r5
 801081e:	4a0f      	ldr	r2, [pc, #60]	; (801085c <generate_type_name+0x50>)
 8010820:	4e0f      	ldr	r6, [pc, #60]	; (8010860 <generate_type_name+0x54>)
 8010822:	6840      	ldr	r0, [r0, #4]
 8010824:	9004      	str	r0, [sp, #16]
 8010826:	e9cd 6201 	strd	r6, r2, [sp, #4]
 801082a:	4608      	mov	r0, r1
 801082c:	9205      	str	r2, [sp, #20]
 801082e:	9503      	str	r5, [sp, #12]
 8010830:	4a0c      	ldr	r2, [pc, #48]	; (8010864 <generate_type_name+0x58>)
 8010832:	9700      	str	r7, [sp, #0]
 8010834:	4621      	mov	r1, r4
 8010836:	f009 fcef 	bl	801a218 <sniprintf>
 801083a:	2800      	cmp	r0, #0
 801083c:	db05      	blt.n	801084a <generate_type_name+0x3e>
 801083e:	4284      	cmp	r4, r0
 8010840:	bfd4      	ite	le
 8010842:	2000      	movle	r0, #0
 8010844:	2001      	movgt	r0, #1
 8010846:	b007      	add	sp, #28
 8010848:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801084a:	2000      	movs	r0, #0
 801084c:	b007      	add	sp, #28
 801084e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010850:	4b05      	ldr	r3, [pc, #20]	; (8010868 <generate_type_name+0x5c>)
 8010852:	4d01      	ldr	r5, [pc, #4]	; (8010858 <generate_type_name+0x4c>)
 8010854:	461f      	mov	r7, r3
 8010856:	e7e2      	b.n	801081e <generate_type_name+0x12>
 8010858:	0801ba1c 	.word	0x0801ba1c
 801085c:	0801ba30 	.word	0x0801ba30
 8010860:	0801ba34 	.word	0x0801ba34
 8010864:	0801ba20 	.word	0x0801ba20
 8010868:	0801bd0c 	.word	0x0801bd0c

0801086c <generate_topic_name>:
 801086c:	b510      	push	{r4, lr}
 801086e:	b082      	sub	sp, #8
 8010870:	4b09      	ldr	r3, [pc, #36]	; (8010898 <generate_topic_name+0x2c>)
 8010872:	9000      	str	r0, [sp, #0]
 8010874:	4614      	mov	r4, r2
 8010876:	4608      	mov	r0, r1
 8010878:	4611      	mov	r1, r2
 801087a:	4a08      	ldr	r2, [pc, #32]	; (801089c <generate_topic_name+0x30>)
 801087c:	f009 fccc 	bl	801a218 <sniprintf>
 8010880:	2800      	cmp	r0, #0
 8010882:	db05      	blt.n	8010890 <generate_topic_name+0x24>
 8010884:	4284      	cmp	r4, r0
 8010886:	bfd4      	ite	le
 8010888:	2000      	movle	r0, #0
 801088a:	2001      	movgt	r0, #1
 801088c:	b002      	add	sp, #8
 801088e:	bd10      	pop	{r4, pc}
 8010890:	2000      	movs	r0, #0
 8010892:	b002      	add	sp, #8
 8010894:	bd10      	pop	{r4, pc}
 8010896:	bf00      	nop
 8010898:	0801ba40 	.word	0x0801ba40
 801089c:	0801ba38 	.word	0x0801ba38

080108a0 <is_uxrce_rmw_identifier_valid>:
 80108a0:	b510      	push	{r4, lr}
 80108a2:	4604      	mov	r4, r0
 80108a4:	b140      	cbz	r0, 80108b8 <is_uxrce_rmw_identifier_valid+0x18>
 80108a6:	f006 fbfb 	bl	80170a0 <rmw_get_implementation_identifier>
 80108aa:	4601      	mov	r1, r0
 80108ac:	4620      	mov	r0, r4
 80108ae:	f7ef fc97 	bl	80001e0 <strcmp>
 80108b2:	fab0 f080 	clz	r0, r0
 80108b6:	0940      	lsrs	r0, r0, #5
 80108b8:	bd10      	pop	{r4, pc}
 80108ba:	bf00      	nop

080108bc <get_message_typesupport_handle>:
 80108bc:	6883      	ldr	r3, [r0, #8]
 80108be:	4718      	bx	r3

080108c0 <get_message_typesupport_handle_function>:
 80108c0:	b510      	push	{r4, lr}
 80108c2:	4604      	mov	r4, r0
 80108c4:	6800      	ldr	r0, [r0, #0]
 80108c6:	f7ef fc8b 	bl	80001e0 <strcmp>
 80108ca:	2800      	cmp	r0, #0
 80108cc:	bf0c      	ite	eq
 80108ce:	4620      	moveq	r0, r4
 80108d0:	2000      	movne	r0, #0
 80108d2:	bd10      	pop	{r4, pc}

080108d4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 80108d4:	f000 b82a 	b.w	801092c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>

080108d8 <_Int32__max_serialized_size>:
 80108d8:	b508      	push	{r3, lr}
 80108da:	2104      	movs	r1, #4
 80108dc:	2000      	movs	r0, #0
 80108de:	f001 f807 	bl	80118f0 <ucdr_alignment>
 80108e2:	3004      	adds	r0, #4
 80108e4:	bd08      	pop	{r3, pc}
 80108e6:	bf00      	nop

080108e8 <_Int32__cdr_deserialize>:
 80108e8:	b109      	cbz	r1, 80108ee <_Int32__cdr_deserialize+0x6>
 80108ea:	f000 bf1b 	b.w	8011724 <ucdr_deserialize_int32_t>
 80108ee:	4608      	mov	r0, r1
 80108f0:	4770      	bx	lr
 80108f2:	bf00      	nop

080108f4 <get_serialized_size_std_msgs__msg__Int32>:
 80108f4:	b130      	cbz	r0, 8010904 <get_serialized_size_std_msgs__msg__Int32+0x10>
 80108f6:	b508      	push	{r3, lr}
 80108f8:	4608      	mov	r0, r1
 80108fa:	2104      	movs	r1, #4
 80108fc:	f000 fff8 	bl	80118f0 <ucdr_alignment>
 8010900:	3004      	adds	r0, #4
 8010902:	bd08      	pop	{r3, pc}
 8010904:	4770      	bx	lr
 8010906:	bf00      	nop

08010908 <_Int32__cdr_serialize>:
 8010908:	460a      	mov	r2, r1
 801090a:	b118      	cbz	r0, 8010914 <_Int32__cdr_serialize+0xc>
 801090c:	6801      	ldr	r1, [r0, #0]
 801090e:	4610      	mov	r0, r2
 8010910:	f000 be70 	b.w	80115f4 <ucdr_serialize_int32_t>
 8010914:	4770      	bx	lr
 8010916:	bf00      	nop

08010918 <_Int32__get_serialized_size>:
 8010918:	b130      	cbz	r0, 8010928 <_Int32__get_serialized_size+0x10>
 801091a:	b508      	push	{r3, lr}
 801091c:	2104      	movs	r1, #4
 801091e:	2000      	movs	r0, #0
 8010920:	f000 ffe6 	bl	80118f0 <ucdr_alignment>
 8010924:	3004      	adds	r0, #4
 8010926:	bd08      	pop	{r3, pc}
 8010928:	4770      	bx	lr
 801092a:	bf00      	nop

0801092c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 801092c:	4800      	ldr	r0, [pc, #0]	; (8010930 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 801092e:	4770      	bx	lr
 8010930:	20000068 	.word	0x20000068

08010934 <ucdr_serialize_bool>:
 8010934:	b538      	push	{r3, r4, r5, lr}
 8010936:	460d      	mov	r5, r1
 8010938:	2101      	movs	r1, #1
 801093a:	4604      	mov	r4, r0
 801093c:	f000 ff8e 	bl	801185c <ucdr_check_final_buffer_behavior>
 8010940:	b148      	cbz	r0, 8010956 <ucdr_serialize_bool+0x22>
 8010942:	68a3      	ldr	r3, [r4, #8]
 8010944:	701d      	strb	r5, [r3, #0]
 8010946:	68a2      	ldr	r2, [r4, #8]
 8010948:	6923      	ldr	r3, [r4, #16]
 801094a:	3201      	adds	r2, #1
 801094c:	3301      	adds	r3, #1
 801094e:	2101      	movs	r1, #1
 8010950:	60a2      	str	r2, [r4, #8]
 8010952:	6123      	str	r3, [r4, #16]
 8010954:	7561      	strb	r1, [r4, #21]
 8010956:	7da0      	ldrb	r0, [r4, #22]
 8010958:	f080 0001 	eor.w	r0, r0, #1
 801095c:	bd38      	pop	{r3, r4, r5, pc}
 801095e:	bf00      	nop

08010960 <ucdr_deserialize_bool>:
 8010960:	b538      	push	{r3, r4, r5, lr}
 8010962:	460d      	mov	r5, r1
 8010964:	2101      	movs	r1, #1
 8010966:	4604      	mov	r4, r0
 8010968:	f000 ff78 	bl	801185c <ucdr_check_final_buffer_behavior>
 801096c:	b168      	cbz	r0, 801098a <ucdr_deserialize_bool+0x2a>
 801096e:	68a2      	ldr	r2, [r4, #8]
 8010970:	6923      	ldr	r3, [r4, #16]
 8010972:	f812 1b01 	ldrb.w	r1, [r2], #1
 8010976:	3900      	subs	r1, #0
 8010978:	f103 0301 	add.w	r3, r3, #1
 801097c:	bf18      	it	ne
 801097e:	2101      	movne	r1, #1
 8010980:	2001      	movs	r0, #1
 8010982:	7029      	strb	r1, [r5, #0]
 8010984:	60a2      	str	r2, [r4, #8]
 8010986:	6123      	str	r3, [r4, #16]
 8010988:	7560      	strb	r0, [r4, #21]
 801098a:	7da0      	ldrb	r0, [r4, #22]
 801098c:	f080 0001 	eor.w	r0, r0, #1
 8010990:	bd38      	pop	{r3, r4, r5, pc}
 8010992:	bf00      	nop

08010994 <ucdr_serialize_uint8_t>:
 8010994:	b538      	push	{r3, r4, r5, lr}
 8010996:	460d      	mov	r5, r1
 8010998:	2101      	movs	r1, #1
 801099a:	4604      	mov	r4, r0
 801099c:	f000 ff5e 	bl	801185c <ucdr_check_final_buffer_behavior>
 80109a0:	b148      	cbz	r0, 80109b6 <ucdr_serialize_uint8_t+0x22>
 80109a2:	68a3      	ldr	r3, [r4, #8]
 80109a4:	701d      	strb	r5, [r3, #0]
 80109a6:	68a2      	ldr	r2, [r4, #8]
 80109a8:	6923      	ldr	r3, [r4, #16]
 80109aa:	3201      	adds	r2, #1
 80109ac:	3301      	adds	r3, #1
 80109ae:	2101      	movs	r1, #1
 80109b0:	60a2      	str	r2, [r4, #8]
 80109b2:	6123      	str	r3, [r4, #16]
 80109b4:	7561      	strb	r1, [r4, #21]
 80109b6:	7da0      	ldrb	r0, [r4, #22]
 80109b8:	f080 0001 	eor.w	r0, r0, #1
 80109bc:	bd38      	pop	{r3, r4, r5, pc}
 80109be:	bf00      	nop

080109c0 <ucdr_deserialize_uint8_t>:
 80109c0:	b538      	push	{r3, r4, r5, lr}
 80109c2:	460d      	mov	r5, r1
 80109c4:	2101      	movs	r1, #1
 80109c6:	4604      	mov	r4, r0
 80109c8:	f000 ff48 	bl	801185c <ucdr_check_final_buffer_behavior>
 80109cc:	b150      	cbz	r0, 80109e4 <ucdr_deserialize_uint8_t+0x24>
 80109ce:	68a3      	ldr	r3, [r4, #8]
 80109d0:	781b      	ldrb	r3, [r3, #0]
 80109d2:	702b      	strb	r3, [r5, #0]
 80109d4:	68a2      	ldr	r2, [r4, #8]
 80109d6:	6923      	ldr	r3, [r4, #16]
 80109d8:	3201      	adds	r2, #1
 80109da:	3301      	adds	r3, #1
 80109dc:	2101      	movs	r1, #1
 80109de:	60a2      	str	r2, [r4, #8]
 80109e0:	6123      	str	r3, [r4, #16]
 80109e2:	7561      	strb	r1, [r4, #21]
 80109e4:	7da0      	ldrb	r0, [r4, #22]
 80109e6:	f080 0001 	eor.w	r0, r0, #1
 80109ea:	bd38      	pop	{r3, r4, r5, pc}

080109ec <ucdr_serialize_uint16_t>:
 80109ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109f0:	b082      	sub	sp, #8
 80109f2:	460b      	mov	r3, r1
 80109f4:	2102      	movs	r1, #2
 80109f6:	4604      	mov	r4, r0
 80109f8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80109fc:	f000 ff80 	bl	8011900 <ucdr_buffer_alignment>
 8010a00:	4601      	mov	r1, r0
 8010a02:	4620      	mov	r0, r4
 8010a04:	7d67      	ldrb	r7, [r4, #21]
 8010a06:	f000 ffbf 	bl	8011988 <ucdr_advance_buffer>
 8010a0a:	4620      	mov	r0, r4
 8010a0c:	2102      	movs	r1, #2
 8010a0e:	f000 ff19 	bl	8011844 <ucdr_check_buffer_available_for>
 8010a12:	bb78      	cbnz	r0, 8010a74 <ucdr_serialize_uint16_t+0x88>
 8010a14:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 8010a18:	42b5      	cmp	r5, r6
 8010a1a:	d926      	bls.n	8010a6a <ucdr_serialize_uint16_t+0x7e>
 8010a1c:	6922      	ldr	r2, [r4, #16]
 8010a1e:	60a5      	str	r5, [r4, #8]
 8010a20:	1bad      	subs	r5, r5, r6
 8010a22:	442a      	add	r2, r5
 8010a24:	f1c5 0802 	rsb	r8, r5, #2
 8010a28:	6122      	str	r2, [r4, #16]
 8010a2a:	4641      	mov	r1, r8
 8010a2c:	4620      	mov	r0, r4
 8010a2e:	f000 ff15 	bl	801185c <ucdr_check_final_buffer_behavior>
 8010a32:	2800      	cmp	r0, #0
 8010a34:	d03b      	beq.n	8010aae <ucdr_serialize_uint16_t+0xc2>
 8010a36:	7d23      	ldrb	r3, [r4, #20]
 8010a38:	2b01      	cmp	r3, #1
 8010a3a:	d04a      	beq.n	8010ad2 <ucdr_serialize_uint16_t+0xe6>
 8010a3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010a40:	7033      	strb	r3, [r6, #0]
 8010a42:	2d00      	cmp	r5, #0
 8010a44:	d040      	beq.n	8010ac8 <ucdr_serialize_uint16_t+0xdc>
 8010a46:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010a4a:	7073      	strb	r3, [r6, #1]
 8010a4c:	6923      	ldr	r3, [r4, #16]
 8010a4e:	68a2      	ldr	r2, [r4, #8]
 8010a50:	7da0      	ldrb	r0, [r4, #22]
 8010a52:	3302      	adds	r3, #2
 8010a54:	1b5b      	subs	r3, r3, r5
 8010a56:	4442      	add	r2, r8
 8010a58:	2102      	movs	r1, #2
 8010a5a:	f080 0001 	eor.w	r0, r0, #1
 8010a5e:	6123      	str	r3, [r4, #16]
 8010a60:	60a2      	str	r2, [r4, #8]
 8010a62:	7561      	strb	r1, [r4, #21]
 8010a64:	b002      	add	sp, #8
 8010a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a6a:	2102      	movs	r1, #2
 8010a6c:	4620      	mov	r0, r4
 8010a6e:	f000 fef5 	bl	801185c <ucdr_check_final_buffer_behavior>
 8010a72:	b190      	cbz	r0, 8010a9a <ucdr_serialize_uint16_t+0xae>
 8010a74:	7d23      	ldrb	r3, [r4, #20]
 8010a76:	2b01      	cmp	r3, #1
 8010a78:	68a3      	ldr	r3, [r4, #8]
 8010a7a:	d014      	beq.n	8010aa6 <ucdr_serialize_uint16_t+0xba>
 8010a7c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010a80:	701a      	strb	r2, [r3, #0]
 8010a82:	68a3      	ldr	r3, [r4, #8]
 8010a84:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010a88:	705a      	strb	r2, [r3, #1]
 8010a8a:	68a2      	ldr	r2, [r4, #8]
 8010a8c:	6923      	ldr	r3, [r4, #16]
 8010a8e:	3202      	adds	r2, #2
 8010a90:	3302      	adds	r3, #2
 8010a92:	2102      	movs	r1, #2
 8010a94:	60a2      	str	r2, [r4, #8]
 8010a96:	6123      	str	r3, [r4, #16]
 8010a98:	7561      	strb	r1, [r4, #21]
 8010a9a:	7da0      	ldrb	r0, [r4, #22]
 8010a9c:	f080 0001 	eor.w	r0, r0, #1
 8010aa0:	b002      	add	sp, #8
 8010aa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010aa6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010aaa:	801a      	strh	r2, [r3, #0]
 8010aac:	e7ed      	b.n	8010a8a <ucdr_serialize_uint16_t+0x9e>
 8010aae:	68a2      	ldr	r2, [r4, #8]
 8010ab0:	6923      	ldr	r3, [r4, #16]
 8010ab2:	7da0      	ldrb	r0, [r4, #22]
 8010ab4:	7567      	strb	r7, [r4, #21]
 8010ab6:	1b52      	subs	r2, r2, r5
 8010ab8:	1b5b      	subs	r3, r3, r5
 8010aba:	f080 0001 	eor.w	r0, r0, #1
 8010abe:	60a2      	str	r2, [r4, #8]
 8010ac0:	6123      	str	r3, [r4, #16]
 8010ac2:	b002      	add	sp, #8
 8010ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ac8:	68a3      	ldr	r3, [r4, #8]
 8010aca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010ace:	701a      	strb	r2, [r3, #0]
 8010ad0:	e7bc      	b.n	8010a4c <ucdr_serialize_uint16_t+0x60>
 8010ad2:	4630      	mov	r0, r6
 8010ad4:	f10d 0606 	add.w	r6, sp, #6
 8010ad8:	4631      	mov	r1, r6
 8010ada:	462a      	mov	r2, r5
 8010adc:	f009 fe1b 	bl	801a716 <memcpy>
 8010ae0:	68a0      	ldr	r0, [r4, #8]
 8010ae2:	4642      	mov	r2, r8
 8010ae4:	1971      	adds	r1, r6, r5
 8010ae6:	f009 fe16 	bl	801a716 <memcpy>
 8010aea:	e7af      	b.n	8010a4c <ucdr_serialize_uint16_t+0x60>

08010aec <ucdr_serialize_endian_uint16_t>:
 8010aec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010af0:	b083      	sub	sp, #12
 8010af2:	460d      	mov	r5, r1
 8010af4:	2102      	movs	r1, #2
 8010af6:	4604      	mov	r4, r0
 8010af8:	f8ad 2006 	strh.w	r2, [sp, #6]
 8010afc:	f000 ff00 	bl	8011900 <ucdr_buffer_alignment>
 8010b00:	4601      	mov	r1, r0
 8010b02:	4620      	mov	r0, r4
 8010b04:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010b08:	f000 ff3e 	bl	8011988 <ucdr_advance_buffer>
 8010b0c:	4620      	mov	r0, r4
 8010b0e:	2102      	movs	r1, #2
 8010b10:	f000 fe98 	bl	8011844 <ucdr_check_buffer_available_for>
 8010b14:	bb70      	cbnz	r0, 8010b74 <ucdr_serialize_endian_uint16_t+0x88>
 8010b16:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8010b1a:	42be      	cmp	r6, r7
 8010b1c:	d925      	bls.n	8010b6a <ucdr_serialize_endian_uint16_t+0x7e>
 8010b1e:	6922      	ldr	r2, [r4, #16]
 8010b20:	60a6      	str	r6, [r4, #8]
 8010b22:	1bf6      	subs	r6, r6, r7
 8010b24:	4432      	add	r2, r6
 8010b26:	f1c6 0902 	rsb	r9, r6, #2
 8010b2a:	6122      	str	r2, [r4, #16]
 8010b2c:	4649      	mov	r1, r9
 8010b2e:	4620      	mov	r0, r4
 8010b30:	f000 fe94 	bl	801185c <ucdr_check_final_buffer_behavior>
 8010b34:	2800      	cmp	r0, #0
 8010b36:	d039      	beq.n	8010bac <ucdr_serialize_endian_uint16_t+0xc0>
 8010b38:	2d01      	cmp	r5, #1
 8010b3a:	d04a      	beq.n	8010bd2 <ucdr_serialize_endian_uint16_t+0xe6>
 8010b3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010b40:	703b      	strb	r3, [r7, #0]
 8010b42:	2e00      	cmp	r6, #0
 8010b44:	d040      	beq.n	8010bc8 <ucdr_serialize_endian_uint16_t+0xdc>
 8010b46:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010b4a:	707b      	strb	r3, [r7, #1]
 8010b4c:	6923      	ldr	r3, [r4, #16]
 8010b4e:	68a2      	ldr	r2, [r4, #8]
 8010b50:	7da0      	ldrb	r0, [r4, #22]
 8010b52:	3302      	adds	r3, #2
 8010b54:	1b9b      	subs	r3, r3, r6
 8010b56:	444a      	add	r2, r9
 8010b58:	2102      	movs	r1, #2
 8010b5a:	f080 0001 	eor.w	r0, r0, #1
 8010b5e:	6123      	str	r3, [r4, #16]
 8010b60:	60a2      	str	r2, [r4, #8]
 8010b62:	7561      	strb	r1, [r4, #21]
 8010b64:	b003      	add	sp, #12
 8010b66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010b6a:	2102      	movs	r1, #2
 8010b6c:	4620      	mov	r0, r4
 8010b6e:	f000 fe75 	bl	801185c <ucdr_check_final_buffer_behavior>
 8010b72:	b188      	cbz	r0, 8010b98 <ucdr_serialize_endian_uint16_t+0xac>
 8010b74:	2d01      	cmp	r5, #1
 8010b76:	68a3      	ldr	r3, [r4, #8]
 8010b78:	d014      	beq.n	8010ba4 <ucdr_serialize_endian_uint16_t+0xb8>
 8010b7a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010b7e:	701a      	strb	r2, [r3, #0]
 8010b80:	68a3      	ldr	r3, [r4, #8]
 8010b82:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010b86:	705a      	strb	r2, [r3, #1]
 8010b88:	68a2      	ldr	r2, [r4, #8]
 8010b8a:	6923      	ldr	r3, [r4, #16]
 8010b8c:	3202      	adds	r2, #2
 8010b8e:	3302      	adds	r3, #2
 8010b90:	2102      	movs	r1, #2
 8010b92:	60a2      	str	r2, [r4, #8]
 8010b94:	6123      	str	r3, [r4, #16]
 8010b96:	7561      	strb	r1, [r4, #21]
 8010b98:	7da0      	ldrb	r0, [r4, #22]
 8010b9a:	f080 0001 	eor.w	r0, r0, #1
 8010b9e:	b003      	add	sp, #12
 8010ba0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010ba4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010ba8:	801a      	strh	r2, [r3, #0]
 8010baa:	e7ed      	b.n	8010b88 <ucdr_serialize_endian_uint16_t+0x9c>
 8010bac:	68a2      	ldr	r2, [r4, #8]
 8010bae:	6923      	ldr	r3, [r4, #16]
 8010bb0:	7da0      	ldrb	r0, [r4, #22]
 8010bb2:	f884 8015 	strb.w	r8, [r4, #21]
 8010bb6:	1b92      	subs	r2, r2, r6
 8010bb8:	1b9b      	subs	r3, r3, r6
 8010bba:	f080 0001 	eor.w	r0, r0, #1
 8010bbe:	60a2      	str	r2, [r4, #8]
 8010bc0:	6123      	str	r3, [r4, #16]
 8010bc2:	b003      	add	sp, #12
 8010bc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010bc8:	68a3      	ldr	r3, [r4, #8]
 8010bca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010bce:	701a      	strb	r2, [r3, #0]
 8010bd0:	e7bc      	b.n	8010b4c <ucdr_serialize_endian_uint16_t+0x60>
 8010bd2:	f10d 0506 	add.w	r5, sp, #6
 8010bd6:	4629      	mov	r1, r5
 8010bd8:	4632      	mov	r2, r6
 8010bda:	4638      	mov	r0, r7
 8010bdc:	f009 fd9b 	bl	801a716 <memcpy>
 8010be0:	68a0      	ldr	r0, [r4, #8]
 8010be2:	464a      	mov	r2, r9
 8010be4:	19a9      	adds	r1, r5, r6
 8010be6:	f009 fd96 	bl	801a716 <memcpy>
 8010bea:	e7af      	b.n	8010b4c <ucdr_serialize_endian_uint16_t+0x60>

08010bec <ucdr_deserialize_uint16_t>:
 8010bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010bf0:	460d      	mov	r5, r1
 8010bf2:	2102      	movs	r1, #2
 8010bf4:	4604      	mov	r4, r0
 8010bf6:	f000 fe83 	bl	8011900 <ucdr_buffer_alignment>
 8010bfa:	4601      	mov	r1, r0
 8010bfc:	4620      	mov	r0, r4
 8010bfe:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010c02:	f000 fec1 	bl	8011988 <ucdr_advance_buffer>
 8010c06:	4620      	mov	r0, r4
 8010c08:	2102      	movs	r1, #2
 8010c0a:	f000 fe1b 	bl	8011844 <ucdr_check_buffer_available_for>
 8010c0e:	bb60      	cbnz	r0, 8010c6a <ucdr_deserialize_uint16_t+0x7e>
 8010c10:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8010c14:	42be      	cmp	r6, r7
 8010c16:	d923      	bls.n	8010c60 <ucdr_deserialize_uint16_t+0x74>
 8010c18:	6922      	ldr	r2, [r4, #16]
 8010c1a:	60a6      	str	r6, [r4, #8]
 8010c1c:	1bf6      	subs	r6, r6, r7
 8010c1e:	4432      	add	r2, r6
 8010c20:	f1c6 0902 	rsb	r9, r6, #2
 8010c24:	6122      	str	r2, [r4, #16]
 8010c26:	4649      	mov	r1, r9
 8010c28:	4620      	mov	r0, r4
 8010c2a:	f000 fe17 	bl	801185c <ucdr_check_final_buffer_behavior>
 8010c2e:	2800      	cmp	r0, #0
 8010c30:	d034      	beq.n	8010c9c <ucdr_deserialize_uint16_t+0xb0>
 8010c32:	7d23      	ldrb	r3, [r4, #20]
 8010c34:	2b01      	cmp	r3, #1
 8010c36:	d042      	beq.n	8010cbe <ucdr_deserialize_uint16_t+0xd2>
 8010c38:	787b      	ldrb	r3, [r7, #1]
 8010c3a:	702b      	strb	r3, [r5, #0]
 8010c3c:	2e00      	cmp	r6, #0
 8010c3e:	d03a      	beq.n	8010cb6 <ucdr_deserialize_uint16_t+0xca>
 8010c40:	783b      	ldrb	r3, [r7, #0]
 8010c42:	706b      	strb	r3, [r5, #1]
 8010c44:	6923      	ldr	r3, [r4, #16]
 8010c46:	68a2      	ldr	r2, [r4, #8]
 8010c48:	7da0      	ldrb	r0, [r4, #22]
 8010c4a:	2102      	movs	r1, #2
 8010c4c:	3302      	adds	r3, #2
 8010c4e:	1b9b      	subs	r3, r3, r6
 8010c50:	444a      	add	r2, r9
 8010c52:	7561      	strb	r1, [r4, #21]
 8010c54:	6123      	str	r3, [r4, #16]
 8010c56:	60a2      	str	r2, [r4, #8]
 8010c58:	f080 0001 	eor.w	r0, r0, #1
 8010c5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c60:	2102      	movs	r1, #2
 8010c62:	4620      	mov	r0, r4
 8010c64:	f000 fdfa 	bl	801185c <ucdr_check_final_buffer_behavior>
 8010c68:	b180      	cbz	r0, 8010c8c <ucdr_deserialize_uint16_t+0xa0>
 8010c6a:	7d23      	ldrb	r3, [r4, #20]
 8010c6c:	2b01      	cmp	r3, #1
 8010c6e:	68a3      	ldr	r3, [r4, #8]
 8010c70:	d011      	beq.n	8010c96 <ucdr_deserialize_uint16_t+0xaa>
 8010c72:	785b      	ldrb	r3, [r3, #1]
 8010c74:	702b      	strb	r3, [r5, #0]
 8010c76:	68a3      	ldr	r3, [r4, #8]
 8010c78:	781b      	ldrb	r3, [r3, #0]
 8010c7a:	706b      	strb	r3, [r5, #1]
 8010c7c:	68a2      	ldr	r2, [r4, #8]
 8010c7e:	6923      	ldr	r3, [r4, #16]
 8010c80:	3202      	adds	r2, #2
 8010c82:	3302      	adds	r3, #2
 8010c84:	2102      	movs	r1, #2
 8010c86:	60a2      	str	r2, [r4, #8]
 8010c88:	6123      	str	r3, [r4, #16]
 8010c8a:	7561      	strb	r1, [r4, #21]
 8010c8c:	7da0      	ldrb	r0, [r4, #22]
 8010c8e:	f080 0001 	eor.w	r0, r0, #1
 8010c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c96:	881b      	ldrh	r3, [r3, #0]
 8010c98:	802b      	strh	r3, [r5, #0]
 8010c9a:	e7ef      	b.n	8010c7c <ucdr_deserialize_uint16_t+0x90>
 8010c9c:	68a2      	ldr	r2, [r4, #8]
 8010c9e:	6923      	ldr	r3, [r4, #16]
 8010ca0:	7da0      	ldrb	r0, [r4, #22]
 8010ca2:	f884 8015 	strb.w	r8, [r4, #21]
 8010ca6:	1b92      	subs	r2, r2, r6
 8010ca8:	1b9b      	subs	r3, r3, r6
 8010caa:	60a2      	str	r2, [r4, #8]
 8010cac:	6123      	str	r3, [r4, #16]
 8010cae:	f080 0001 	eor.w	r0, r0, #1
 8010cb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010cb6:	68a3      	ldr	r3, [r4, #8]
 8010cb8:	781b      	ldrb	r3, [r3, #0]
 8010cba:	706b      	strb	r3, [r5, #1]
 8010cbc:	e7c2      	b.n	8010c44 <ucdr_deserialize_uint16_t+0x58>
 8010cbe:	4639      	mov	r1, r7
 8010cc0:	4632      	mov	r2, r6
 8010cc2:	4628      	mov	r0, r5
 8010cc4:	f009 fd27 	bl	801a716 <memcpy>
 8010cc8:	68a1      	ldr	r1, [r4, #8]
 8010cca:	464a      	mov	r2, r9
 8010ccc:	19a8      	adds	r0, r5, r6
 8010cce:	f009 fd22 	bl	801a716 <memcpy>
 8010cd2:	e7b7      	b.n	8010c44 <ucdr_deserialize_uint16_t+0x58>

08010cd4 <ucdr_deserialize_endian_uint16_t>:
 8010cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010cd8:	460e      	mov	r6, r1
 8010cda:	2102      	movs	r1, #2
 8010cdc:	4604      	mov	r4, r0
 8010cde:	4615      	mov	r5, r2
 8010ce0:	f000 fe0e 	bl	8011900 <ucdr_buffer_alignment>
 8010ce4:	4601      	mov	r1, r0
 8010ce6:	4620      	mov	r0, r4
 8010ce8:	f894 9015 	ldrb.w	r9, [r4, #21]
 8010cec:	f000 fe4c 	bl	8011988 <ucdr_advance_buffer>
 8010cf0:	4620      	mov	r0, r4
 8010cf2:	2102      	movs	r1, #2
 8010cf4:	f000 fda6 	bl	8011844 <ucdr_check_buffer_available_for>
 8010cf8:	bb70      	cbnz	r0, 8010d58 <ucdr_deserialize_endian_uint16_t+0x84>
 8010cfa:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 8010cfe:	4547      	cmp	r7, r8
 8010d00:	d925      	bls.n	8010d4e <ucdr_deserialize_endian_uint16_t+0x7a>
 8010d02:	6922      	ldr	r2, [r4, #16]
 8010d04:	60a7      	str	r7, [r4, #8]
 8010d06:	eba7 0708 	sub.w	r7, r7, r8
 8010d0a:	443a      	add	r2, r7
 8010d0c:	f1c7 0a02 	rsb	sl, r7, #2
 8010d10:	6122      	str	r2, [r4, #16]
 8010d12:	4651      	mov	r1, sl
 8010d14:	4620      	mov	r0, r4
 8010d16:	f000 fda1 	bl	801185c <ucdr_check_final_buffer_behavior>
 8010d1a:	2800      	cmp	r0, #0
 8010d1c:	d034      	beq.n	8010d88 <ucdr_deserialize_endian_uint16_t+0xb4>
 8010d1e:	2e01      	cmp	r6, #1
 8010d20:	d043      	beq.n	8010daa <ucdr_deserialize_endian_uint16_t+0xd6>
 8010d22:	f898 3001 	ldrb.w	r3, [r8, #1]
 8010d26:	702b      	strb	r3, [r5, #0]
 8010d28:	2f00      	cmp	r7, #0
 8010d2a:	d03a      	beq.n	8010da2 <ucdr_deserialize_endian_uint16_t+0xce>
 8010d2c:	f898 3000 	ldrb.w	r3, [r8]
 8010d30:	706b      	strb	r3, [r5, #1]
 8010d32:	6923      	ldr	r3, [r4, #16]
 8010d34:	68a2      	ldr	r2, [r4, #8]
 8010d36:	7da0      	ldrb	r0, [r4, #22]
 8010d38:	2102      	movs	r1, #2
 8010d3a:	3302      	adds	r3, #2
 8010d3c:	1bdb      	subs	r3, r3, r7
 8010d3e:	4452      	add	r2, sl
 8010d40:	7561      	strb	r1, [r4, #21]
 8010d42:	6123      	str	r3, [r4, #16]
 8010d44:	60a2      	str	r2, [r4, #8]
 8010d46:	f080 0001 	eor.w	r0, r0, #1
 8010d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d4e:	2102      	movs	r1, #2
 8010d50:	4620      	mov	r0, r4
 8010d52:	f000 fd83 	bl	801185c <ucdr_check_final_buffer_behavior>
 8010d56:	b178      	cbz	r0, 8010d78 <ucdr_deserialize_endian_uint16_t+0xa4>
 8010d58:	2e01      	cmp	r6, #1
 8010d5a:	68a3      	ldr	r3, [r4, #8]
 8010d5c:	d011      	beq.n	8010d82 <ucdr_deserialize_endian_uint16_t+0xae>
 8010d5e:	785b      	ldrb	r3, [r3, #1]
 8010d60:	702b      	strb	r3, [r5, #0]
 8010d62:	68a3      	ldr	r3, [r4, #8]
 8010d64:	781b      	ldrb	r3, [r3, #0]
 8010d66:	706b      	strb	r3, [r5, #1]
 8010d68:	68a2      	ldr	r2, [r4, #8]
 8010d6a:	6923      	ldr	r3, [r4, #16]
 8010d6c:	3202      	adds	r2, #2
 8010d6e:	3302      	adds	r3, #2
 8010d70:	2102      	movs	r1, #2
 8010d72:	60a2      	str	r2, [r4, #8]
 8010d74:	6123      	str	r3, [r4, #16]
 8010d76:	7561      	strb	r1, [r4, #21]
 8010d78:	7da0      	ldrb	r0, [r4, #22]
 8010d7a:	f080 0001 	eor.w	r0, r0, #1
 8010d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d82:	881b      	ldrh	r3, [r3, #0]
 8010d84:	802b      	strh	r3, [r5, #0]
 8010d86:	e7ef      	b.n	8010d68 <ucdr_deserialize_endian_uint16_t+0x94>
 8010d88:	68a2      	ldr	r2, [r4, #8]
 8010d8a:	6923      	ldr	r3, [r4, #16]
 8010d8c:	7da0      	ldrb	r0, [r4, #22]
 8010d8e:	f884 9015 	strb.w	r9, [r4, #21]
 8010d92:	1bd2      	subs	r2, r2, r7
 8010d94:	1bdb      	subs	r3, r3, r7
 8010d96:	60a2      	str	r2, [r4, #8]
 8010d98:	6123      	str	r3, [r4, #16]
 8010d9a:	f080 0001 	eor.w	r0, r0, #1
 8010d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010da2:	68a3      	ldr	r3, [r4, #8]
 8010da4:	781b      	ldrb	r3, [r3, #0]
 8010da6:	706b      	strb	r3, [r5, #1]
 8010da8:	e7c3      	b.n	8010d32 <ucdr_deserialize_endian_uint16_t+0x5e>
 8010daa:	4641      	mov	r1, r8
 8010dac:	463a      	mov	r2, r7
 8010dae:	4628      	mov	r0, r5
 8010db0:	f009 fcb1 	bl	801a716 <memcpy>
 8010db4:	68a1      	ldr	r1, [r4, #8]
 8010db6:	4652      	mov	r2, sl
 8010db8:	19e8      	adds	r0, r5, r7
 8010dba:	f009 fcac 	bl	801a716 <memcpy>
 8010dbe:	e7b8      	b.n	8010d32 <ucdr_deserialize_endian_uint16_t+0x5e>

08010dc0 <ucdr_serialize_uint32_t>:
 8010dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010dc4:	b082      	sub	sp, #8
 8010dc6:	4604      	mov	r4, r0
 8010dc8:	9101      	str	r1, [sp, #4]
 8010dca:	2104      	movs	r1, #4
 8010dcc:	f000 fd98 	bl	8011900 <ucdr_buffer_alignment>
 8010dd0:	4601      	mov	r1, r0
 8010dd2:	4620      	mov	r0, r4
 8010dd4:	7d67      	ldrb	r7, [r4, #21]
 8010dd6:	f000 fdd7 	bl	8011988 <ucdr_advance_buffer>
 8010dda:	4620      	mov	r0, r4
 8010ddc:	2104      	movs	r1, #4
 8010dde:	f000 fd31 	bl	8011844 <ucdr_check_buffer_available_for>
 8010de2:	2800      	cmp	r0, #0
 8010de4:	d139      	bne.n	8010e5a <ucdr_serialize_uint32_t+0x9a>
 8010de6:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 8010dea:	42ae      	cmp	r6, r5
 8010dec:	d930      	bls.n	8010e50 <ucdr_serialize_uint32_t+0x90>
 8010dee:	6922      	ldr	r2, [r4, #16]
 8010df0:	60a6      	str	r6, [r4, #8]
 8010df2:	1b76      	subs	r6, r6, r5
 8010df4:	4432      	add	r2, r6
 8010df6:	f1c6 0804 	rsb	r8, r6, #4
 8010dfa:	6122      	str	r2, [r4, #16]
 8010dfc:	4641      	mov	r1, r8
 8010dfe:	4620      	mov	r0, r4
 8010e00:	f000 fd2c 	bl	801185c <ucdr_check_final_buffer_behavior>
 8010e04:	2800      	cmp	r0, #0
 8010e06:	d04c      	beq.n	8010ea2 <ucdr_serialize_uint32_t+0xe2>
 8010e08:	7d23      	ldrb	r3, [r4, #20]
 8010e0a:	2b01      	cmp	r3, #1
 8010e0c:	d063      	beq.n	8010ed6 <ucdr_serialize_uint32_t+0x116>
 8010e0e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010e12:	702b      	strb	r3, [r5, #0]
 8010e14:	2e00      	cmp	r6, #0
 8010e16:	d051      	beq.n	8010ebc <ucdr_serialize_uint32_t+0xfc>
 8010e18:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010e1c:	706b      	strb	r3, [r5, #1]
 8010e1e:	2e01      	cmp	r6, #1
 8010e20:	d050      	beq.n	8010ec4 <ucdr_serialize_uint32_t+0x104>
 8010e22:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010e26:	70ab      	strb	r3, [r5, #2]
 8010e28:	2e02      	cmp	r6, #2
 8010e2a:	d04f      	beq.n	8010ecc <ucdr_serialize_uint32_t+0x10c>
 8010e2c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010e30:	70eb      	strb	r3, [r5, #3]
 8010e32:	6923      	ldr	r3, [r4, #16]
 8010e34:	68a2      	ldr	r2, [r4, #8]
 8010e36:	7da0      	ldrb	r0, [r4, #22]
 8010e38:	3304      	adds	r3, #4
 8010e3a:	1b9b      	subs	r3, r3, r6
 8010e3c:	4442      	add	r2, r8
 8010e3e:	2104      	movs	r1, #4
 8010e40:	f080 0001 	eor.w	r0, r0, #1
 8010e44:	6123      	str	r3, [r4, #16]
 8010e46:	60a2      	str	r2, [r4, #8]
 8010e48:	7561      	strb	r1, [r4, #21]
 8010e4a:	b002      	add	sp, #8
 8010e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e50:	2104      	movs	r1, #4
 8010e52:	4620      	mov	r0, r4
 8010e54:	f000 fd02 	bl	801185c <ucdr_check_final_buffer_behavior>
 8010e58:	b1d0      	cbz	r0, 8010e90 <ucdr_serialize_uint32_t+0xd0>
 8010e5a:	7d23      	ldrb	r3, [r4, #20]
 8010e5c:	2b01      	cmp	r3, #1
 8010e5e:	68a3      	ldr	r3, [r4, #8]
 8010e60:	d01c      	beq.n	8010e9c <ucdr_serialize_uint32_t+0xdc>
 8010e62:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010e66:	701a      	strb	r2, [r3, #0]
 8010e68:	68a3      	ldr	r3, [r4, #8]
 8010e6a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010e6e:	705a      	strb	r2, [r3, #1]
 8010e70:	68a3      	ldr	r3, [r4, #8]
 8010e72:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010e76:	709a      	strb	r2, [r3, #2]
 8010e78:	68a3      	ldr	r3, [r4, #8]
 8010e7a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010e7e:	70da      	strb	r2, [r3, #3]
 8010e80:	68a2      	ldr	r2, [r4, #8]
 8010e82:	6923      	ldr	r3, [r4, #16]
 8010e84:	3204      	adds	r2, #4
 8010e86:	3304      	adds	r3, #4
 8010e88:	2104      	movs	r1, #4
 8010e8a:	60a2      	str	r2, [r4, #8]
 8010e8c:	6123      	str	r3, [r4, #16]
 8010e8e:	7561      	strb	r1, [r4, #21]
 8010e90:	7da0      	ldrb	r0, [r4, #22]
 8010e92:	f080 0001 	eor.w	r0, r0, #1
 8010e96:	b002      	add	sp, #8
 8010e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e9c:	9a01      	ldr	r2, [sp, #4]
 8010e9e:	601a      	str	r2, [r3, #0]
 8010ea0:	e7ee      	b.n	8010e80 <ucdr_serialize_uint32_t+0xc0>
 8010ea2:	68a2      	ldr	r2, [r4, #8]
 8010ea4:	6923      	ldr	r3, [r4, #16]
 8010ea6:	7da0      	ldrb	r0, [r4, #22]
 8010ea8:	7567      	strb	r7, [r4, #21]
 8010eaa:	1b92      	subs	r2, r2, r6
 8010eac:	1b9b      	subs	r3, r3, r6
 8010eae:	f080 0001 	eor.w	r0, r0, #1
 8010eb2:	60a2      	str	r2, [r4, #8]
 8010eb4:	6123      	str	r3, [r4, #16]
 8010eb6:	b002      	add	sp, #8
 8010eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ebc:	68a3      	ldr	r3, [r4, #8]
 8010ebe:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010ec2:	701a      	strb	r2, [r3, #0]
 8010ec4:	68a3      	ldr	r3, [r4, #8]
 8010ec6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010eca:	701a      	strb	r2, [r3, #0]
 8010ecc:	68a3      	ldr	r3, [r4, #8]
 8010ece:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010ed2:	701a      	strb	r2, [r3, #0]
 8010ed4:	e7ad      	b.n	8010e32 <ucdr_serialize_uint32_t+0x72>
 8010ed6:	4628      	mov	r0, r5
 8010ed8:	ad01      	add	r5, sp, #4
 8010eda:	4629      	mov	r1, r5
 8010edc:	4632      	mov	r2, r6
 8010ede:	f009 fc1a 	bl	801a716 <memcpy>
 8010ee2:	68a0      	ldr	r0, [r4, #8]
 8010ee4:	4642      	mov	r2, r8
 8010ee6:	19a9      	adds	r1, r5, r6
 8010ee8:	f009 fc15 	bl	801a716 <memcpy>
 8010eec:	e7a1      	b.n	8010e32 <ucdr_serialize_uint32_t+0x72>
 8010eee:	bf00      	nop

08010ef0 <ucdr_serialize_endian_uint32_t>:
 8010ef0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010ef4:	b083      	sub	sp, #12
 8010ef6:	460d      	mov	r5, r1
 8010ef8:	2104      	movs	r1, #4
 8010efa:	4604      	mov	r4, r0
 8010efc:	9201      	str	r2, [sp, #4]
 8010efe:	f000 fcff 	bl	8011900 <ucdr_buffer_alignment>
 8010f02:	4601      	mov	r1, r0
 8010f04:	4620      	mov	r0, r4
 8010f06:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010f0a:	f000 fd3d 	bl	8011988 <ucdr_advance_buffer>
 8010f0e:	4620      	mov	r0, r4
 8010f10:	2104      	movs	r1, #4
 8010f12:	f000 fc97 	bl	8011844 <ucdr_check_buffer_available_for>
 8010f16:	2800      	cmp	r0, #0
 8010f18:	d138      	bne.n	8010f8c <ucdr_serialize_endian_uint32_t+0x9c>
 8010f1a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8010f1e:	42b7      	cmp	r7, r6
 8010f20:	d92f      	bls.n	8010f82 <ucdr_serialize_endian_uint32_t+0x92>
 8010f22:	6922      	ldr	r2, [r4, #16]
 8010f24:	60a7      	str	r7, [r4, #8]
 8010f26:	1bbf      	subs	r7, r7, r6
 8010f28:	443a      	add	r2, r7
 8010f2a:	f1c7 0904 	rsb	r9, r7, #4
 8010f2e:	6122      	str	r2, [r4, #16]
 8010f30:	4649      	mov	r1, r9
 8010f32:	4620      	mov	r0, r4
 8010f34:	f000 fc92 	bl	801185c <ucdr_check_final_buffer_behavior>
 8010f38:	2800      	cmp	r0, #0
 8010f3a:	d04a      	beq.n	8010fd2 <ucdr_serialize_endian_uint32_t+0xe2>
 8010f3c:	2d01      	cmp	r5, #1
 8010f3e:	d063      	beq.n	8011008 <ucdr_serialize_endian_uint32_t+0x118>
 8010f40:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010f44:	7033      	strb	r3, [r6, #0]
 8010f46:	2f00      	cmp	r7, #0
 8010f48:	d051      	beq.n	8010fee <ucdr_serialize_endian_uint32_t+0xfe>
 8010f4a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010f4e:	7073      	strb	r3, [r6, #1]
 8010f50:	2f01      	cmp	r7, #1
 8010f52:	d050      	beq.n	8010ff6 <ucdr_serialize_endian_uint32_t+0x106>
 8010f54:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010f58:	70b3      	strb	r3, [r6, #2]
 8010f5a:	2f02      	cmp	r7, #2
 8010f5c:	d04f      	beq.n	8010ffe <ucdr_serialize_endian_uint32_t+0x10e>
 8010f5e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010f62:	70f3      	strb	r3, [r6, #3]
 8010f64:	6923      	ldr	r3, [r4, #16]
 8010f66:	68a2      	ldr	r2, [r4, #8]
 8010f68:	7da0      	ldrb	r0, [r4, #22]
 8010f6a:	3304      	adds	r3, #4
 8010f6c:	1bdb      	subs	r3, r3, r7
 8010f6e:	444a      	add	r2, r9
 8010f70:	2104      	movs	r1, #4
 8010f72:	f080 0001 	eor.w	r0, r0, #1
 8010f76:	6123      	str	r3, [r4, #16]
 8010f78:	60a2      	str	r2, [r4, #8]
 8010f7a:	7561      	strb	r1, [r4, #21]
 8010f7c:	b003      	add	sp, #12
 8010f7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f82:	2104      	movs	r1, #4
 8010f84:	4620      	mov	r0, r4
 8010f86:	f000 fc69 	bl	801185c <ucdr_check_final_buffer_behavior>
 8010f8a:	b1c8      	cbz	r0, 8010fc0 <ucdr_serialize_endian_uint32_t+0xd0>
 8010f8c:	2d01      	cmp	r5, #1
 8010f8e:	68a3      	ldr	r3, [r4, #8]
 8010f90:	d01c      	beq.n	8010fcc <ucdr_serialize_endian_uint32_t+0xdc>
 8010f92:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010f96:	701a      	strb	r2, [r3, #0]
 8010f98:	68a3      	ldr	r3, [r4, #8]
 8010f9a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010f9e:	705a      	strb	r2, [r3, #1]
 8010fa0:	68a3      	ldr	r3, [r4, #8]
 8010fa2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010fa6:	709a      	strb	r2, [r3, #2]
 8010fa8:	68a3      	ldr	r3, [r4, #8]
 8010faa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010fae:	70da      	strb	r2, [r3, #3]
 8010fb0:	68a2      	ldr	r2, [r4, #8]
 8010fb2:	6923      	ldr	r3, [r4, #16]
 8010fb4:	3204      	adds	r2, #4
 8010fb6:	3304      	adds	r3, #4
 8010fb8:	2104      	movs	r1, #4
 8010fba:	60a2      	str	r2, [r4, #8]
 8010fbc:	6123      	str	r3, [r4, #16]
 8010fbe:	7561      	strb	r1, [r4, #21]
 8010fc0:	7da0      	ldrb	r0, [r4, #22]
 8010fc2:	f080 0001 	eor.w	r0, r0, #1
 8010fc6:	b003      	add	sp, #12
 8010fc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010fcc:	9a01      	ldr	r2, [sp, #4]
 8010fce:	601a      	str	r2, [r3, #0]
 8010fd0:	e7ee      	b.n	8010fb0 <ucdr_serialize_endian_uint32_t+0xc0>
 8010fd2:	68a2      	ldr	r2, [r4, #8]
 8010fd4:	6923      	ldr	r3, [r4, #16]
 8010fd6:	7da0      	ldrb	r0, [r4, #22]
 8010fd8:	f884 8015 	strb.w	r8, [r4, #21]
 8010fdc:	1bd2      	subs	r2, r2, r7
 8010fde:	1bdb      	subs	r3, r3, r7
 8010fe0:	f080 0001 	eor.w	r0, r0, #1
 8010fe4:	60a2      	str	r2, [r4, #8]
 8010fe6:	6123      	str	r3, [r4, #16]
 8010fe8:	b003      	add	sp, #12
 8010fea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010fee:	68a3      	ldr	r3, [r4, #8]
 8010ff0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010ff4:	701a      	strb	r2, [r3, #0]
 8010ff6:	68a3      	ldr	r3, [r4, #8]
 8010ff8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010ffc:	701a      	strb	r2, [r3, #0]
 8010ffe:	68a3      	ldr	r3, [r4, #8]
 8011000:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011004:	701a      	strb	r2, [r3, #0]
 8011006:	e7ad      	b.n	8010f64 <ucdr_serialize_endian_uint32_t+0x74>
 8011008:	ad01      	add	r5, sp, #4
 801100a:	4629      	mov	r1, r5
 801100c:	463a      	mov	r2, r7
 801100e:	4630      	mov	r0, r6
 8011010:	f009 fb81 	bl	801a716 <memcpy>
 8011014:	68a0      	ldr	r0, [r4, #8]
 8011016:	464a      	mov	r2, r9
 8011018:	19e9      	adds	r1, r5, r7
 801101a:	f009 fb7c 	bl	801a716 <memcpy>
 801101e:	e7a1      	b.n	8010f64 <ucdr_serialize_endian_uint32_t+0x74>

08011020 <ucdr_deserialize_uint32_t>:
 8011020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011024:	460d      	mov	r5, r1
 8011026:	2104      	movs	r1, #4
 8011028:	4604      	mov	r4, r0
 801102a:	f000 fc69 	bl	8011900 <ucdr_buffer_alignment>
 801102e:	4601      	mov	r1, r0
 8011030:	4620      	mov	r0, r4
 8011032:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011036:	f000 fca7 	bl	8011988 <ucdr_advance_buffer>
 801103a:	4620      	mov	r0, r4
 801103c:	2104      	movs	r1, #4
 801103e:	f000 fc01 	bl	8011844 <ucdr_check_buffer_available_for>
 8011042:	2800      	cmp	r0, #0
 8011044:	d138      	bne.n	80110b8 <ucdr_deserialize_uint32_t+0x98>
 8011046:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801104a:	42b7      	cmp	r7, r6
 801104c:	d92f      	bls.n	80110ae <ucdr_deserialize_uint32_t+0x8e>
 801104e:	6922      	ldr	r2, [r4, #16]
 8011050:	60a7      	str	r7, [r4, #8]
 8011052:	1bbf      	subs	r7, r7, r6
 8011054:	443a      	add	r2, r7
 8011056:	f1c7 0904 	rsb	r9, r7, #4
 801105a:	6122      	str	r2, [r4, #16]
 801105c:	4649      	mov	r1, r9
 801105e:	4620      	mov	r0, r4
 8011060:	f000 fbfc 	bl	801185c <ucdr_check_final_buffer_behavior>
 8011064:	2800      	cmp	r0, #0
 8011066:	d046      	beq.n	80110f6 <ucdr_deserialize_uint32_t+0xd6>
 8011068:	7d23      	ldrb	r3, [r4, #20]
 801106a:	2b01      	cmp	r3, #1
 801106c:	d05c      	beq.n	8011128 <ucdr_deserialize_uint32_t+0x108>
 801106e:	78f3      	ldrb	r3, [r6, #3]
 8011070:	702b      	strb	r3, [r5, #0]
 8011072:	2f00      	cmp	r7, #0
 8011074:	d04c      	beq.n	8011110 <ucdr_deserialize_uint32_t+0xf0>
 8011076:	78b3      	ldrb	r3, [r6, #2]
 8011078:	706b      	strb	r3, [r5, #1]
 801107a:	2f01      	cmp	r7, #1
 801107c:	f105 0302 	add.w	r3, r5, #2
 8011080:	d04a      	beq.n	8011118 <ucdr_deserialize_uint32_t+0xf8>
 8011082:	7873      	ldrb	r3, [r6, #1]
 8011084:	70ab      	strb	r3, [r5, #2]
 8011086:	2f02      	cmp	r7, #2
 8011088:	f105 0303 	add.w	r3, r5, #3
 801108c:	d048      	beq.n	8011120 <ucdr_deserialize_uint32_t+0x100>
 801108e:	7833      	ldrb	r3, [r6, #0]
 8011090:	70eb      	strb	r3, [r5, #3]
 8011092:	6923      	ldr	r3, [r4, #16]
 8011094:	68a2      	ldr	r2, [r4, #8]
 8011096:	7da0      	ldrb	r0, [r4, #22]
 8011098:	2104      	movs	r1, #4
 801109a:	3304      	adds	r3, #4
 801109c:	1bdb      	subs	r3, r3, r7
 801109e:	444a      	add	r2, r9
 80110a0:	7561      	strb	r1, [r4, #21]
 80110a2:	6123      	str	r3, [r4, #16]
 80110a4:	60a2      	str	r2, [r4, #8]
 80110a6:	f080 0001 	eor.w	r0, r0, #1
 80110aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80110ae:	2104      	movs	r1, #4
 80110b0:	4620      	mov	r0, r4
 80110b2:	f000 fbd3 	bl	801185c <ucdr_check_final_buffer_behavior>
 80110b6:	b1b0      	cbz	r0, 80110e6 <ucdr_deserialize_uint32_t+0xc6>
 80110b8:	7d23      	ldrb	r3, [r4, #20]
 80110ba:	2b01      	cmp	r3, #1
 80110bc:	68a3      	ldr	r3, [r4, #8]
 80110be:	d017      	beq.n	80110f0 <ucdr_deserialize_uint32_t+0xd0>
 80110c0:	78db      	ldrb	r3, [r3, #3]
 80110c2:	702b      	strb	r3, [r5, #0]
 80110c4:	68a3      	ldr	r3, [r4, #8]
 80110c6:	789b      	ldrb	r3, [r3, #2]
 80110c8:	706b      	strb	r3, [r5, #1]
 80110ca:	68a3      	ldr	r3, [r4, #8]
 80110cc:	785b      	ldrb	r3, [r3, #1]
 80110ce:	70ab      	strb	r3, [r5, #2]
 80110d0:	68a3      	ldr	r3, [r4, #8]
 80110d2:	781b      	ldrb	r3, [r3, #0]
 80110d4:	70eb      	strb	r3, [r5, #3]
 80110d6:	68a2      	ldr	r2, [r4, #8]
 80110d8:	6923      	ldr	r3, [r4, #16]
 80110da:	3204      	adds	r2, #4
 80110dc:	3304      	adds	r3, #4
 80110de:	2104      	movs	r1, #4
 80110e0:	60a2      	str	r2, [r4, #8]
 80110e2:	6123      	str	r3, [r4, #16]
 80110e4:	7561      	strb	r1, [r4, #21]
 80110e6:	7da0      	ldrb	r0, [r4, #22]
 80110e8:	f080 0001 	eor.w	r0, r0, #1
 80110ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	602b      	str	r3, [r5, #0]
 80110f4:	e7ef      	b.n	80110d6 <ucdr_deserialize_uint32_t+0xb6>
 80110f6:	68a2      	ldr	r2, [r4, #8]
 80110f8:	6923      	ldr	r3, [r4, #16]
 80110fa:	7da0      	ldrb	r0, [r4, #22]
 80110fc:	f884 8015 	strb.w	r8, [r4, #21]
 8011100:	1bd2      	subs	r2, r2, r7
 8011102:	1bdb      	subs	r3, r3, r7
 8011104:	60a2      	str	r2, [r4, #8]
 8011106:	6123      	str	r3, [r4, #16]
 8011108:	f080 0001 	eor.w	r0, r0, #1
 801110c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011110:	68a3      	ldr	r3, [r4, #8]
 8011112:	789b      	ldrb	r3, [r3, #2]
 8011114:	706b      	strb	r3, [r5, #1]
 8011116:	1cab      	adds	r3, r5, #2
 8011118:	68a2      	ldr	r2, [r4, #8]
 801111a:	7852      	ldrb	r2, [r2, #1]
 801111c:	f803 2b01 	strb.w	r2, [r3], #1
 8011120:	68a2      	ldr	r2, [r4, #8]
 8011122:	7812      	ldrb	r2, [r2, #0]
 8011124:	701a      	strb	r2, [r3, #0]
 8011126:	e7b4      	b.n	8011092 <ucdr_deserialize_uint32_t+0x72>
 8011128:	4631      	mov	r1, r6
 801112a:	463a      	mov	r2, r7
 801112c:	4628      	mov	r0, r5
 801112e:	f009 faf2 	bl	801a716 <memcpy>
 8011132:	68a1      	ldr	r1, [r4, #8]
 8011134:	464a      	mov	r2, r9
 8011136:	19e8      	adds	r0, r5, r7
 8011138:	f009 faed 	bl	801a716 <memcpy>
 801113c:	e7a9      	b.n	8011092 <ucdr_deserialize_uint32_t+0x72>
 801113e:	bf00      	nop

08011140 <ucdr_deserialize_endian_uint32_t>:
 8011140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011144:	460e      	mov	r6, r1
 8011146:	2104      	movs	r1, #4
 8011148:	4604      	mov	r4, r0
 801114a:	4615      	mov	r5, r2
 801114c:	f000 fbd8 	bl	8011900 <ucdr_buffer_alignment>
 8011150:	4601      	mov	r1, r0
 8011152:	4620      	mov	r0, r4
 8011154:	f894 9015 	ldrb.w	r9, [r4, #21]
 8011158:	f000 fc16 	bl	8011988 <ucdr_advance_buffer>
 801115c:	4620      	mov	r0, r4
 801115e:	2104      	movs	r1, #4
 8011160:	f000 fb70 	bl	8011844 <ucdr_check_buffer_available_for>
 8011164:	2800      	cmp	r0, #0
 8011166:	d13c      	bne.n	80111e2 <ucdr_deserialize_endian_uint32_t+0xa2>
 8011168:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 801116c:	42bb      	cmp	r3, r7
 801116e:	d933      	bls.n	80111d8 <ucdr_deserialize_endian_uint32_t+0x98>
 8011170:	6922      	ldr	r2, [r4, #16]
 8011172:	60a3      	str	r3, [r4, #8]
 8011174:	eba3 0807 	sub.w	r8, r3, r7
 8011178:	4442      	add	r2, r8
 801117a:	f1c8 0a04 	rsb	sl, r8, #4
 801117e:	6122      	str	r2, [r4, #16]
 8011180:	4651      	mov	r1, sl
 8011182:	4620      	mov	r0, r4
 8011184:	f000 fb6a 	bl	801185c <ucdr_check_final_buffer_behavior>
 8011188:	2800      	cmp	r0, #0
 801118a:	d048      	beq.n	801121e <ucdr_deserialize_endian_uint32_t+0xde>
 801118c:	2e01      	cmp	r6, #1
 801118e:	d061      	beq.n	8011254 <ucdr_deserialize_endian_uint32_t+0x114>
 8011190:	78fb      	ldrb	r3, [r7, #3]
 8011192:	702b      	strb	r3, [r5, #0]
 8011194:	f1b8 0f00 	cmp.w	r8, #0
 8011198:	d050      	beq.n	801123c <ucdr_deserialize_endian_uint32_t+0xfc>
 801119a:	78bb      	ldrb	r3, [r7, #2]
 801119c:	706b      	strb	r3, [r5, #1]
 801119e:	f1b8 0f01 	cmp.w	r8, #1
 80111a2:	f105 0302 	add.w	r3, r5, #2
 80111a6:	d04d      	beq.n	8011244 <ucdr_deserialize_endian_uint32_t+0x104>
 80111a8:	787b      	ldrb	r3, [r7, #1]
 80111aa:	70ab      	strb	r3, [r5, #2]
 80111ac:	f1b8 0f02 	cmp.w	r8, #2
 80111b0:	f105 0303 	add.w	r3, r5, #3
 80111b4:	d04a      	beq.n	801124c <ucdr_deserialize_endian_uint32_t+0x10c>
 80111b6:	783b      	ldrb	r3, [r7, #0]
 80111b8:	70eb      	strb	r3, [r5, #3]
 80111ba:	6923      	ldr	r3, [r4, #16]
 80111bc:	68a2      	ldr	r2, [r4, #8]
 80111be:	7da0      	ldrb	r0, [r4, #22]
 80111c0:	2104      	movs	r1, #4
 80111c2:	3304      	adds	r3, #4
 80111c4:	eba3 0308 	sub.w	r3, r3, r8
 80111c8:	4452      	add	r2, sl
 80111ca:	7561      	strb	r1, [r4, #21]
 80111cc:	6123      	str	r3, [r4, #16]
 80111ce:	60a2      	str	r2, [r4, #8]
 80111d0:	f080 0001 	eor.w	r0, r0, #1
 80111d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111d8:	2104      	movs	r1, #4
 80111da:	4620      	mov	r0, r4
 80111dc:	f000 fb3e 	bl	801185c <ucdr_check_final_buffer_behavior>
 80111e0:	b1a8      	cbz	r0, 801120e <ucdr_deserialize_endian_uint32_t+0xce>
 80111e2:	2e01      	cmp	r6, #1
 80111e4:	68a3      	ldr	r3, [r4, #8]
 80111e6:	d017      	beq.n	8011218 <ucdr_deserialize_endian_uint32_t+0xd8>
 80111e8:	78db      	ldrb	r3, [r3, #3]
 80111ea:	702b      	strb	r3, [r5, #0]
 80111ec:	68a3      	ldr	r3, [r4, #8]
 80111ee:	789b      	ldrb	r3, [r3, #2]
 80111f0:	706b      	strb	r3, [r5, #1]
 80111f2:	68a3      	ldr	r3, [r4, #8]
 80111f4:	785b      	ldrb	r3, [r3, #1]
 80111f6:	70ab      	strb	r3, [r5, #2]
 80111f8:	68a3      	ldr	r3, [r4, #8]
 80111fa:	781b      	ldrb	r3, [r3, #0]
 80111fc:	70eb      	strb	r3, [r5, #3]
 80111fe:	68a2      	ldr	r2, [r4, #8]
 8011200:	6923      	ldr	r3, [r4, #16]
 8011202:	3204      	adds	r2, #4
 8011204:	3304      	adds	r3, #4
 8011206:	2104      	movs	r1, #4
 8011208:	60a2      	str	r2, [r4, #8]
 801120a:	6123      	str	r3, [r4, #16]
 801120c:	7561      	strb	r1, [r4, #21]
 801120e:	7da0      	ldrb	r0, [r4, #22]
 8011210:	f080 0001 	eor.w	r0, r0, #1
 8011214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	602b      	str	r3, [r5, #0]
 801121c:	e7ef      	b.n	80111fe <ucdr_deserialize_endian_uint32_t+0xbe>
 801121e:	68a2      	ldr	r2, [r4, #8]
 8011220:	6923      	ldr	r3, [r4, #16]
 8011222:	7da0      	ldrb	r0, [r4, #22]
 8011224:	f884 9015 	strb.w	r9, [r4, #21]
 8011228:	eba2 0208 	sub.w	r2, r2, r8
 801122c:	eba3 0308 	sub.w	r3, r3, r8
 8011230:	60a2      	str	r2, [r4, #8]
 8011232:	6123      	str	r3, [r4, #16]
 8011234:	f080 0001 	eor.w	r0, r0, #1
 8011238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801123c:	68a3      	ldr	r3, [r4, #8]
 801123e:	789b      	ldrb	r3, [r3, #2]
 8011240:	706b      	strb	r3, [r5, #1]
 8011242:	1cab      	adds	r3, r5, #2
 8011244:	68a2      	ldr	r2, [r4, #8]
 8011246:	7852      	ldrb	r2, [r2, #1]
 8011248:	f803 2b01 	strb.w	r2, [r3], #1
 801124c:	68a2      	ldr	r2, [r4, #8]
 801124e:	7812      	ldrb	r2, [r2, #0]
 8011250:	701a      	strb	r2, [r3, #0]
 8011252:	e7b2      	b.n	80111ba <ucdr_deserialize_endian_uint32_t+0x7a>
 8011254:	4639      	mov	r1, r7
 8011256:	4642      	mov	r2, r8
 8011258:	4628      	mov	r0, r5
 801125a:	f009 fa5c 	bl	801a716 <memcpy>
 801125e:	68a1      	ldr	r1, [r4, #8]
 8011260:	4652      	mov	r2, sl
 8011262:	eb05 0008 	add.w	r0, r5, r8
 8011266:	f009 fa56 	bl	801a716 <memcpy>
 801126a:	e7a6      	b.n	80111ba <ucdr_deserialize_endian_uint32_t+0x7a>

0801126c <ucdr_serialize_uint64_t>:
 801126c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011270:	2108      	movs	r1, #8
 8011272:	b082      	sub	sp, #8
 8011274:	4604      	mov	r4, r0
 8011276:	e9cd 2300 	strd	r2, r3, [sp]
 801127a:	f000 fb41 	bl	8011900 <ucdr_buffer_alignment>
 801127e:	4601      	mov	r1, r0
 8011280:	4620      	mov	r0, r4
 8011282:	7d67      	ldrb	r7, [r4, #21]
 8011284:	f000 fb80 	bl	8011988 <ucdr_advance_buffer>
 8011288:	4620      	mov	r0, r4
 801128a:	2108      	movs	r1, #8
 801128c:	f000 fada 	bl	8011844 <ucdr_check_buffer_available_for>
 8011290:	2800      	cmp	r0, #0
 8011292:	d14e      	bne.n	8011332 <ucdr_serialize_uint64_t+0xc6>
 8011294:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 8011298:	42b5      	cmp	r5, r6
 801129a:	d945      	bls.n	8011328 <ucdr_serialize_uint64_t+0xbc>
 801129c:	6923      	ldr	r3, [r4, #16]
 801129e:	60a5      	str	r5, [r4, #8]
 80112a0:	1bad      	subs	r5, r5, r6
 80112a2:	442b      	add	r3, r5
 80112a4:	f1c5 0808 	rsb	r8, r5, #8
 80112a8:	6123      	str	r3, [r4, #16]
 80112aa:	4641      	mov	r1, r8
 80112ac:	4620      	mov	r0, r4
 80112ae:	f000 fad5 	bl	801185c <ucdr_check_final_buffer_behavior>
 80112b2:	2800      	cmp	r0, #0
 80112b4:	d074      	beq.n	80113a0 <ucdr_serialize_uint64_t+0x134>
 80112b6:	7d23      	ldrb	r3, [r4, #20]
 80112b8:	2b01      	cmp	r3, #1
 80112ba:	f000 809b 	beq.w	80113f4 <ucdr_serialize_uint64_t+0x188>
 80112be:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80112c2:	7033      	strb	r3, [r6, #0]
 80112c4:	2d00      	cmp	r5, #0
 80112c6:	d078      	beq.n	80113ba <ucdr_serialize_uint64_t+0x14e>
 80112c8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80112cc:	7073      	strb	r3, [r6, #1]
 80112ce:	2d01      	cmp	r5, #1
 80112d0:	d077      	beq.n	80113c2 <ucdr_serialize_uint64_t+0x156>
 80112d2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80112d6:	70b3      	strb	r3, [r6, #2]
 80112d8:	2d02      	cmp	r5, #2
 80112da:	d076      	beq.n	80113ca <ucdr_serialize_uint64_t+0x15e>
 80112dc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80112e0:	70f3      	strb	r3, [r6, #3]
 80112e2:	2d03      	cmp	r5, #3
 80112e4:	d075      	beq.n	80113d2 <ucdr_serialize_uint64_t+0x166>
 80112e6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80112ea:	7133      	strb	r3, [r6, #4]
 80112ec:	2d04      	cmp	r5, #4
 80112ee:	d074      	beq.n	80113da <ucdr_serialize_uint64_t+0x16e>
 80112f0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80112f4:	7173      	strb	r3, [r6, #5]
 80112f6:	2d05      	cmp	r5, #5
 80112f8:	d073      	beq.n	80113e2 <ucdr_serialize_uint64_t+0x176>
 80112fa:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80112fe:	71b3      	strb	r3, [r6, #6]
 8011300:	2d06      	cmp	r5, #6
 8011302:	d072      	beq.n	80113ea <ucdr_serialize_uint64_t+0x17e>
 8011304:	f89d 3000 	ldrb.w	r3, [sp]
 8011308:	71f3      	strb	r3, [r6, #7]
 801130a:	6923      	ldr	r3, [r4, #16]
 801130c:	68a2      	ldr	r2, [r4, #8]
 801130e:	7da0      	ldrb	r0, [r4, #22]
 8011310:	3308      	adds	r3, #8
 8011312:	1b5d      	subs	r5, r3, r5
 8011314:	4442      	add	r2, r8
 8011316:	2308      	movs	r3, #8
 8011318:	f080 0001 	eor.w	r0, r0, #1
 801131c:	6125      	str	r5, [r4, #16]
 801131e:	60a2      	str	r2, [r4, #8]
 8011320:	7563      	strb	r3, [r4, #21]
 8011322:	b002      	add	sp, #8
 8011324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011328:	2108      	movs	r1, #8
 801132a:	4620      	mov	r0, r4
 801132c:	f000 fa96 	bl	801185c <ucdr_check_final_buffer_behavior>
 8011330:	b350      	cbz	r0, 8011388 <ucdr_serialize_uint64_t+0x11c>
 8011332:	7d23      	ldrb	r3, [r4, #20]
 8011334:	2b01      	cmp	r3, #1
 8011336:	d02d      	beq.n	8011394 <ucdr_serialize_uint64_t+0x128>
 8011338:	68a3      	ldr	r3, [r4, #8]
 801133a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801133e:	701a      	strb	r2, [r3, #0]
 8011340:	68a3      	ldr	r3, [r4, #8]
 8011342:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011346:	705a      	strb	r2, [r3, #1]
 8011348:	68a3      	ldr	r3, [r4, #8]
 801134a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801134e:	709a      	strb	r2, [r3, #2]
 8011350:	68a3      	ldr	r3, [r4, #8]
 8011352:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011356:	70da      	strb	r2, [r3, #3]
 8011358:	68a3      	ldr	r3, [r4, #8]
 801135a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801135e:	711a      	strb	r2, [r3, #4]
 8011360:	68a3      	ldr	r3, [r4, #8]
 8011362:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8011366:	715a      	strb	r2, [r3, #5]
 8011368:	68a3      	ldr	r3, [r4, #8]
 801136a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 801136e:	719a      	strb	r2, [r3, #6]
 8011370:	68a3      	ldr	r3, [r4, #8]
 8011372:	f89d 2000 	ldrb.w	r2, [sp]
 8011376:	71da      	strb	r2, [r3, #7]
 8011378:	68a2      	ldr	r2, [r4, #8]
 801137a:	6923      	ldr	r3, [r4, #16]
 801137c:	3208      	adds	r2, #8
 801137e:	3308      	adds	r3, #8
 8011380:	2108      	movs	r1, #8
 8011382:	60a2      	str	r2, [r4, #8]
 8011384:	6123      	str	r3, [r4, #16]
 8011386:	7561      	strb	r1, [r4, #21]
 8011388:	7da0      	ldrb	r0, [r4, #22]
 801138a:	f080 0001 	eor.w	r0, r0, #1
 801138e:	b002      	add	sp, #8
 8011390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011394:	466b      	mov	r3, sp
 8011396:	cb03      	ldmia	r3!, {r0, r1}
 8011398:	68a3      	ldr	r3, [r4, #8]
 801139a:	6018      	str	r0, [r3, #0]
 801139c:	6059      	str	r1, [r3, #4]
 801139e:	e7eb      	b.n	8011378 <ucdr_serialize_uint64_t+0x10c>
 80113a0:	68a2      	ldr	r2, [r4, #8]
 80113a2:	6923      	ldr	r3, [r4, #16]
 80113a4:	7da0      	ldrb	r0, [r4, #22]
 80113a6:	7567      	strb	r7, [r4, #21]
 80113a8:	1b52      	subs	r2, r2, r5
 80113aa:	f080 0001 	eor.w	r0, r0, #1
 80113ae:	1b5d      	subs	r5, r3, r5
 80113b0:	60a2      	str	r2, [r4, #8]
 80113b2:	6125      	str	r5, [r4, #16]
 80113b4:	b002      	add	sp, #8
 80113b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113ba:	68a3      	ldr	r3, [r4, #8]
 80113bc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80113c0:	701a      	strb	r2, [r3, #0]
 80113c2:	68a3      	ldr	r3, [r4, #8]
 80113c4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80113c8:	701a      	strb	r2, [r3, #0]
 80113ca:	68a3      	ldr	r3, [r4, #8]
 80113cc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80113d0:	701a      	strb	r2, [r3, #0]
 80113d2:	68a3      	ldr	r3, [r4, #8]
 80113d4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80113d8:	701a      	strb	r2, [r3, #0]
 80113da:	68a3      	ldr	r3, [r4, #8]
 80113dc:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80113e0:	701a      	strb	r2, [r3, #0]
 80113e2:	68a3      	ldr	r3, [r4, #8]
 80113e4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80113e8:	701a      	strb	r2, [r3, #0]
 80113ea:	68a3      	ldr	r3, [r4, #8]
 80113ec:	f89d 2000 	ldrb.w	r2, [sp]
 80113f0:	701a      	strb	r2, [r3, #0]
 80113f2:	e78a      	b.n	801130a <ucdr_serialize_uint64_t+0x9e>
 80113f4:	4630      	mov	r0, r6
 80113f6:	466e      	mov	r6, sp
 80113f8:	4631      	mov	r1, r6
 80113fa:	462a      	mov	r2, r5
 80113fc:	f009 f98b 	bl	801a716 <memcpy>
 8011400:	68a0      	ldr	r0, [r4, #8]
 8011402:	4642      	mov	r2, r8
 8011404:	1971      	adds	r1, r6, r5
 8011406:	f009 f986 	bl	801a716 <memcpy>
 801140a:	e77e      	b.n	801130a <ucdr_serialize_uint64_t+0x9e>

0801140c <ucdr_serialize_int16_t>:
 801140c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011410:	b082      	sub	sp, #8
 8011412:	460b      	mov	r3, r1
 8011414:	2102      	movs	r1, #2
 8011416:	4604      	mov	r4, r0
 8011418:	f8ad 3006 	strh.w	r3, [sp, #6]
 801141c:	f000 fa70 	bl	8011900 <ucdr_buffer_alignment>
 8011420:	4601      	mov	r1, r0
 8011422:	4620      	mov	r0, r4
 8011424:	7d67      	ldrb	r7, [r4, #21]
 8011426:	f000 faaf 	bl	8011988 <ucdr_advance_buffer>
 801142a:	4620      	mov	r0, r4
 801142c:	2102      	movs	r1, #2
 801142e:	f000 fa09 	bl	8011844 <ucdr_check_buffer_available_for>
 8011432:	bb78      	cbnz	r0, 8011494 <ucdr_serialize_int16_t+0x88>
 8011434:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 8011438:	42b5      	cmp	r5, r6
 801143a:	d926      	bls.n	801148a <ucdr_serialize_int16_t+0x7e>
 801143c:	6922      	ldr	r2, [r4, #16]
 801143e:	60a5      	str	r5, [r4, #8]
 8011440:	1bad      	subs	r5, r5, r6
 8011442:	442a      	add	r2, r5
 8011444:	f1c5 0802 	rsb	r8, r5, #2
 8011448:	6122      	str	r2, [r4, #16]
 801144a:	4641      	mov	r1, r8
 801144c:	4620      	mov	r0, r4
 801144e:	f000 fa05 	bl	801185c <ucdr_check_final_buffer_behavior>
 8011452:	2800      	cmp	r0, #0
 8011454:	d03b      	beq.n	80114ce <ucdr_serialize_int16_t+0xc2>
 8011456:	7d23      	ldrb	r3, [r4, #20]
 8011458:	2b01      	cmp	r3, #1
 801145a:	d04a      	beq.n	80114f2 <ucdr_serialize_int16_t+0xe6>
 801145c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011460:	7033      	strb	r3, [r6, #0]
 8011462:	2d00      	cmp	r5, #0
 8011464:	d040      	beq.n	80114e8 <ucdr_serialize_int16_t+0xdc>
 8011466:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801146a:	7073      	strb	r3, [r6, #1]
 801146c:	6923      	ldr	r3, [r4, #16]
 801146e:	68a2      	ldr	r2, [r4, #8]
 8011470:	7da0      	ldrb	r0, [r4, #22]
 8011472:	3302      	adds	r3, #2
 8011474:	1b5b      	subs	r3, r3, r5
 8011476:	4442      	add	r2, r8
 8011478:	2102      	movs	r1, #2
 801147a:	f080 0001 	eor.w	r0, r0, #1
 801147e:	6123      	str	r3, [r4, #16]
 8011480:	60a2      	str	r2, [r4, #8]
 8011482:	7561      	strb	r1, [r4, #21]
 8011484:	b002      	add	sp, #8
 8011486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801148a:	2102      	movs	r1, #2
 801148c:	4620      	mov	r0, r4
 801148e:	f000 f9e5 	bl	801185c <ucdr_check_final_buffer_behavior>
 8011492:	b190      	cbz	r0, 80114ba <ucdr_serialize_int16_t+0xae>
 8011494:	7d23      	ldrb	r3, [r4, #20]
 8011496:	2b01      	cmp	r3, #1
 8011498:	68a3      	ldr	r3, [r4, #8]
 801149a:	d014      	beq.n	80114c6 <ucdr_serialize_int16_t+0xba>
 801149c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80114a0:	701a      	strb	r2, [r3, #0]
 80114a2:	68a3      	ldr	r3, [r4, #8]
 80114a4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80114a8:	705a      	strb	r2, [r3, #1]
 80114aa:	68a2      	ldr	r2, [r4, #8]
 80114ac:	6923      	ldr	r3, [r4, #16]
 80114ae:	3202      	adds	r2, #2
 80114b0:	3302      	adds	r3, #2
 80114b2:	2102      	movs	r1, #2
 80114b4:	60a2      	str	r2, [r4, #8]
 80114b6:	6123      	str	r3, [r4, #16]
 80114b8:	7561      	strb	r1, [r4, #21]
 80114ba:	7da0      	ldrb	r0, [r4, #22]
 80114bc:	f080 0001 	eor.w	r0, r0, #1
 80114c0:	b002      	add	sp, #8
 80114c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114c6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80114ca:	801a      	strh	r2, [r3, #0]
 80114cc:	e7ed      	b.n	80114aa <ucdr_serialize_int16_t+0x9e>
 80114ce:	68a2      	ldr	r2, [r4, #8]
 80114d0:	6923      	ldr	r3, [r4, #16]
 80114d2:	7da0      	ldrb	r0, [r4, #22]
 80114d4:	7567      	strb	r7, [r4, #21]
 80114d6:	1b52      	subs	r2, r2, r5
 80114d8:	1b5b      	subs	r3, r3, r5
 80114da:	f080 0001 	eor.w	r0, r0, #1
 80114de:	60a2      	str	r2, [r4, #8]
 80114e0:	6123      	str	r3, [r4, #16]
 80114e2:	b002      	add	sp, #8
 80114e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114e8:	68a3      	ldr	r3, [r4, #8]
 80114ea:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80114ee:	701a      	strb	r2, [r3, #0]
 80114f0:	e7bc      	b.n	801146c <ucdr_serialize_int16_t+0x60>
 80114f2:	4630      	mov	r0, r6
 80114f4:	f10d 0606 	add.w	r6, sp, #6
 80114f8:	4631      	mov	r1, r6
 80114fa:	462a      	mov	r2, r5
 80114fc:	f009 f90b 	bl	801a716 <memcpy>
 8011500:	68a0      	ldr	r0, [r4, #8]
 8011502:	4642      	mov	r2, r8
 8011504:	1971      	adds	r1, r6, r5
 8011506:	f009 f906 	bl	801a716 <memcpy>
 801150a:	e7af      	b.n	801146c <ucdr_serialize_int16_t+0x60>

0801150c <ucdr_deserialize_int16_t>:
 801150c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011510:	460d      	mov	r5, r1
 8011512:	2102      	movs	r1, #2
 8011514:	4604      	mov	r4, r0
 8011516:	f000 f9f3 	bl	8011900 <ucdr_buffer_alignment>
 801151a:	4601      	mov	r1, r0
 801151c:	4620      	mov	r0, r4
 801151e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011522:	f000 fa31 	bl	8011988 <ucdr_advance_buffer>
 8011526:	4620      	mov	r0, r4
 8011528:	2102      	movs	r1, #2
 801152a:	f000 f98b 	bl	8011844 <ucdr_check_buffer_available_for>
 801152e:	bb60      	cbnz	r0, 801158a <ucdr_deserialize_int16_t+0x7e>
 8011530:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8011534:	42be      	cmp	r6, r7
 8011536:	d923      	bls.n	8011580 <ucdr_deserialize_int16_t+0x74>
 8011538:	6922      	ldr	r2, [r4, #16]
 801153a:	60a6      	str	r6, [r4, #8]
 801153c:	1bf6      	subs	r6, r6, r7
 801153e:	4432      	add	r2, r6
 8011540:	f1c6 0902 	rsb	r9, r6, #2
 8011544:	6122      	str	r2, [r4, #16]
 8011546:	4649      	mov	r1, r9
 8011548:	4620      	mov	r0, r4
 801154a:	f000 f987 	bl	801185c <ucdr_check_final_buffer_behavior>
 801154e:	2800      	cmp	r0, #0
 8011550:	d034      	beq.n	80115bc <ucdr_deserialize_int16_t+0xb0>
 8011552:	7d23      	ldrb	r3, [r4, #20]
 8011554:	2b01      	cmp	r3, #1
 8011556:	d042      	beq.n	80115de <ucdr_deserialize_int16_t+0xd2>
 8011558:	787b      	ldrb	r3, [r7, #1]
 801155a:	702b      	strb	r3, [r5, #0]
 801155c:	2e00      	cmp	r6, #0
 801155e:	d03a      	beq.n	80115d6 <ucdr_deserialize_int16_t+0xca>
 8011560:	783b      	ldrb	r3, [r7, #0]
 8011562:	706b      	strb	r3, [r5, #1]
 8011564:	6923      	ldr	r3, [r4, #16]
 8011566:	68a2      	ldr	r2, [r4, #8]
 8011568:	7da0      	ldrb	r0, [r4, #22]
 801156a:	2102      	movs	r1, #2
 801156c:	3302      	adds	r3, #2
 801156e:	1b9b      	subs	r3, r3, r6
 8011570:	444a      	add	r2, r9
 8011572:	7561      	strb	r1, [r4, #21]
 8011574:	6123      	str	r3, [r4, #16]
 8011576:	60a2      	str	r2, [r4, #8]
 8011578:	f080 0001 	eor.w	r0, r0, #1
 801157c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011580:	2102      	movs	r1, #2
 8011582:	4620      	mov	r0, r4
 8011584:	f000 f96a 	bl	801185c <ucdr_check_final_buffer_behavior>
 8011588:	b180      	cbz	r0, 80115ac <ucdr_deserialize_int16_t+0xa0>
 801158a:	7d23      	ldrb	r3, [r4, #20]
 801158c:	2b01      	cmp	r3, #1
 801158e:	68a3      	ldr	r3, [r4, #8]
 8011590:	d011      	beq.n	80115b6 <ucdr_deserialize_int16_t+0xaa>
 8011592:	785b      	ldrb	r3, [r3, #1]
 8011594:	702b      	strb	r3, [r5, #0]
 8011596:	68a3      	ldr	r3, [r4, #8]
 8011598:	781b      	ldrb	r3, [r3, #0]
 801159a:	706b      	strb	r3, [r5, #1]
 801159c:	68a2      	ldr	r2, [r4, #8]
 801159e:	6923      	ldr	r3, [r4, #16]
 80115a0:	3202      	adds	r2, #2
 80115a2:	3302      	adds	r3, #2
 80115a4:	2102      	movs	r1, #2
 80115a6:	60a2      	str	r2, [r4, #8]
 80115a8:	6123      	str	r3, [r4, #16]
 80115aa:	7561      	strb	r1, [r4, #21]
 80115ac:	7da0      	ldrb	r0, [r4, #22]
 80115ae:	f080 0001 	eor.w	r0, r0, #1
 80115b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80115b6:	881b      	ldrh	r3, [r3, #0]
 80115b8:	802b      	strh	r3, [r5, #0]
 80115ba:	e7ef      	b.n	801159c <ucdr_deserialize_int16_t+0x90>
 80115bc:	68a2      	ldr	r2, [r4, #8]
 80115be:	6923      	ldr	r3, [r4, #16]
 80115c0:	7da0      	ldrb	r0, [r4, #22]
 80115c2:	f884 8015 	strb.w	r8, [r4, #21]
 80115c6:	1b92      	subs	r2, r2, r6
 80115c8:	1b9b      	subs	r3, r3, r6
 80115ca:	60a2      	str	r2, [r4, #8]
 80115cc:	6123      	str	r3, [r4, #16]
 80115ce:	f080 0001 	eor.w	r0, r0, #1
 80115d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80115d6:	68a3      	ldr	r3, [r4, #8]
 80115d8:	781b      	ldrb	r3, [r3, #0]
 80115da:	706b      	strb	r3, [r5, #1]
 80115dc:	e7c2      	b.n	8011564 <ucdr_deserialize_int16_t+0x58>
 80115de:	4639      	mov	r1, r7
 80115e0:	4632      	mov	r2, r6
 80115e2:	4628      	mov	r0, r5
 80115e4:	f009 f897 	bl	801a716 <memcpy>
 80115e8:	68a1      	ldr	r1, [r4, #8]
 80115ea:	464a      	mov	r2, r9
 80115ec:	19a8      	adds	r0, r5, r6
 80115ee:	f009 f892 	bl	801a716 <memcpy>
 80115f2:	e7b7      	b.n	8011564 <ucdr_deserialize_int16_t+0x58>

080115f4 <ucdr_serialize_int32_t>:
 80115f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115f8:	b082      	sub	sp, #8
 80115fa:	4604      	mov	r4, r0
 80115fc:	9101      	str	r1, [sp, #4]
 80115fe:	2104      	movs	r1, #4
 8011600:	f000 f97e 	bl	8011900 <ucdr_buffer_alignment>
 8011604:	4601      	mov	r1, r0
 8011606:	4620      	mov	r0, r4
 8011608:	7d67      	ldrb	r7, [r4, #21]
 801160a:	f000 f9bd 	bl	8011988 <ucdr_advance_buffer>
 801160e:	4620      	mov	r0, r4
 8011610:	2104      	movs	r1, #4
 8011612:	f000 f917 	bl	8011844 <ucdr_check_buffer_available_for>
 8011616:	2800      	cmp	r0, #0
 8011618:	d139      	bne.n	801168e <ucdr_serialize_int32_t+0x9a>
 801161a:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 801161e:	42ae      	cmp	r6, r5
 8011620:	d930      	bls.n	8011684 <ucdr_serialize_int32_t+0x90>
 8011622:	6922      	ldr	r2, [r4, #16]
 8011624:	60a6      	str	r6, [r4, #8]
 8011626:	1b76      	subs	r6, r6, r5
 8011628:	4432      	add	r2, r6
 801162a:	f1c6 0804 	rsb	r8, r6, #4
 801162e:	6122      	str	r2, [r4, #16]
 8011630:	4641      	mov	r1, r8
 8011632:	4620      	mov	r0, r4
 8011634:	f000 f912 	bl	801185c <ucdr_check_final_buffer_behavior>
 8011638:	2800      	cmp	r0, #0
 801163a:	d04c      	beq.n	80116d6 <ucdr_serialize_int32_t+0xe2>
 801163c:	7d23      	ldrb	r3, [r4, #20]
 801163e:	2b01      	cmp	r3, #1
 8011640:	d063      	beq.n	801170a <ucdr_serialize_int32_t+0x116>
 8011642:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011646:	702b      	strb	r3, [r5, #0]
 8011648:	2e00      	cmp	r6, #0
 801164a:	d051      	beq.n	80116f0 <ucdr_serialize_int32_t+0xfc>
 801164c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011650:	706b      	strb	r3, [r5, #1]
 8011652:	2e01      	cmp	r6, #1
 8011654:	d050      	beq.n	80116f8 <ucdr_serialize_int32_t+0x104>
 8011656:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801165a:	70ab      	strb	r3, [r5, #2]
 801165c:	2e02      	cmp	r6, #2
 801165e:	d04f      	beq.n	8011700 <ucdr_serialize_int32_t+0x10c>
 8011660:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011664:	70eb      	strb	r3, [r5, #3]
 8011666:	6923      	ldr	r3, [r4, #16]
 8011668:	68a2      	ldr	r2, [r4, #8]
 801166a:	7da0      	ldrb	r0, [r4, #22]
 801166c:	3304      	adds	r3, #4
 801166e:	1b9b      	subs	r3, r3, r6
 8011670:	4442      	add	r2, r8
 8011672:	2104      	movs	r1, #4
 8011674:	f080 0001 	eor.w	r0, r0, #1
 8011678:	6123      	str	r3, [r4, #16]
 801167a:	60a2      	str	r2, [r4, #8]
 801167c:	7561      	strb	r1, [r4, #21]
 801167e:	b002      	add	sp, #8
 8011680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011684:	2104      	movs	r1, #4
 8011686:	4620      	mov	r0, r4
 8011688:	f000 f8e8 	bl	801185c <ucdr_check_final_buffer_behavior>
 801168c:	b1d0      	cbz	r0, 80116c4 <ucdr_serialize_int32_t+0xd0>
 801168e:	7d23      	ldrb	r3, [r4, #20]
 8011690:	2b01      	cmp	r3, #1
 8011692:	68a3      	ldr	r3, [r4, #8]
 8011694:	d01c      	beq.n	80116d0 <ucdr_serialize_int32_t+0xdc>
 8011696:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801169a:	701a      	strb	r2, [r3, #0]
 801169c:	68a3      	ldr	r3, [r4, #8]
 801169e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80116a2:	705a      	strb	r2, [r3, #1]
 80116a4:	68a3      	ldr	r3, [r4, #8]
 80116a6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80116aa:	709a      	strb	r2, [r3, #2]
 80116ac:	68a3      	ldr	r3, [r4, #8]
 80116ae:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80116b2:	70da      	strb	r2, [r3, #3]
 80116b4:	68a2      	ldr	r2, [r4, #8]
 80116b6:	6923      	ldr	r3, [r4, #16]
 80116b8:	3204      	adds	r2, #4
 80116ba:	3304      	adds	r3, #4
 80116bc:	2104      	movs	r1, #4
 80116be:	60a2      	str	r2, [r4, #8]
 80116c0:	6123      	str	r3, [r4, #16]
 80116c2:	7561      	strb	r1, [r4, #21]
 80116c4:	7da0      	ldrb	r0, [r4, #22]
 80116c6:	f080 0001 	eor.w	r0, r0, #1
 80116ca:	b002      	add	sp, #8
 80116cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116d0:	9a01      	ldr	r2, [sp, #4]
 80116d2:	601a      	str	r2, [r3, #0]
 80116d4:	e7ee      	b.n	80116b4 <ucdr_serialize_int32_t+0xc0>
 80116d6:	68a2      	ldr	r2, [r4, #8]
 80116d8:	6923      	ldr	r3, [r4, #16]
 80116da:	7da0      	ldrb	r0, [r4, #22]
 80116dc:	7567      	strb	r7, [r4, #21]
 80116de:	1b92      	subs	r2, r2, r6
 80116e0:	1b9b      	subs	r3, r3, r6
 80116e2:	f080 0001 	eor.w	r0, r0, #1
 80116e6:	60a2      	str	r2, [r4, #8]
 80116e8:	6123      	str	r3, [r4, #16]
 80116ea:	b002      	add	sp, #8
 80116ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116f0:	68a3      	ldr	r3, [r4, #8]
 80116f2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80116f6:	701a      	strb	r2, [r3, #0]
 80116f8:	68a3      	ldr	r3, [r4, #8]
 80116fa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80116fe:	701a      	strb	r2, [r3, #0]
 8011700:	68a3      	ldr	r3, [r4, #8]
 8011702:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011706:	701a      	strb	r2, [r3, #0]
 8011708:	e7ad      	b.n	8011666 <ucdr_serialize_int32_t+0x72>
 801170a:	4628      	mov	r0, r5
 801170c:	ad01      	add	r5, sp, #4
 801170e:	4629      	mov	r1, r5
 8011710:	4632      	mov	r2, r6
 8011712:	f009 f800 	bl	801a716 <memcpy>
 8011716:	68a0      	ldr	r0, [r4, #8]
 8011718:	4642      	mov	r2, r8
 801171a:	19a9      	adds	r1, r5, r6
 801171c:	f008 fffb 	bl	801a716 <memcpy>
 8011720:	e7a1      	b.n	8011666 <ucdr_serialize_int32_t+0x72>
 8011722:	bf00      	nop

08011724 <ucdr_deserialize_int32_t>:
 8011724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011728:	460d      	mov	r5, r1
 801172a:	2104      	movs	r1, #4
 801172c:	4604      	mov	r4, r0
 801172e:	f000 f8e7 	bl	8011900 <ucdr_buffer_alignment>
 8011732:	4601      	mov	r1, r0
 8011734:	4620      	mov	r0, r4
 8011736:	f894 8015 	ldrb.w	r8, [r4, #21]
 801173a:	f000 f925 	bl	8011988 <ucdr_advance_buffer>
 801173e:	4620      	mov	r0, r4
 8011740:	2104      	movs	r1, #4
 8011742:	f000 f87f 	bl	8011844 <ucdr_check_buffer_available_for>
 8011746:	2800      	cmp	r0, #0
 8011748:	d138      	bne.n	80117bc <ucdr_deserialize_int32_t+0x98>
 801174a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801174e:	42b7      	cmp	r7, r6
 8011750:	d92f      	bls.n	80117b2 <ucdr_deserialize_int32_t+0x8e>
 8011752:	6922      	ldr	r2, [r4, #16]
 8011754:	60a7      	str	r7, [r4, #8]
 8011756:	1bbf      	subs	r7, r7, r6
 8011758:	443a      	add	r2, r7
 801175a:	f1c7 0904 	rsb	r9, r7, #4
 801175e:	6122      	str	r2, [r4, #16]
 8011760:	4649      	mov	r1, r9
 8011762:	4620      	mov	r0, r4
 8011764:	f000 f87a 	bl	801185c <ucdr_check_final_buffer_behavior>
 8011768:	2800      	cmp	r0, #0
 801176a:	d046      	beq.n	80117fa <ucdr_deserialize_int32_t+0xd6>
 801176c:	7d23      	ldrb	r3, [r4, #20]
 801176e:	2b01      	cmp	r3, #1
 8011770:	d05c      	beq.n	801182c <ucdr_deserialize_int32_t+0x108>
 8011772:	78f3      	ldrb	r3, [r6, #3]
 8011774:	702b      	strb	r3, [r5, #0]
 8011776:	2f00      	cmp	r7, #0
 8011778:	d04c      	beq.n	8011814 <ucdr_deserialize_int32_t+0xf0>
 801177a:	78b3      	ldrb	r3, [r6, #2]
 801177c:	706b      	strb	r3, [r5, #1]
 801177e:	2f01      	cmp	r7, #1
 8011780:	f105 0302 	add.w	r3, r5, #2
 8011784:	d04a      	beq.n	801181c <ucdr_deserialize_int32_t+0xf8>
 8011786:	7873      	ldrb	r3, [r6, #1]
 8011788:	70ab      	strb	r3, [r5, #2]
 801178a:	2f02      	cmp	r7, #2
 801178c:	f105 0303 	add.w	r3, r5, #3
 8011790:	d048      	beq.n	8011824 <ucdr_deserialize_int32_t+0x100>
 8011792:	7833      	ldrb	r3, [r6, #0]
 8011794:	70eb      	strb	r3, [r5, #3]
 8011796:	6923      	ldr	r3, [r4, #16]
 8011798:	68a2      	ldr	r2, [r4, #8]
 801179a:	7da0      	ldrb	r0, [r4, #22]
 801179c:	2104      	movs	r1, #4
 801179e:	3304      	adds	r3, #4
 80117a0:	1bdb      	subs	r3, r3, r7
 80117a2:	444a      	add	r2, r9
 80117a4:	7561      	strb	r1, [r4, #21]
 80117a6:	6123      	str	r3, [r4, #16]
 80117a8:	60a2      	str	r2, [r4, #8]
 80117aa:	f080 0001 	eor.w	r0, r0, #1
 80117ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80117b2:	2104      	movs	r1, #4
 80117b4:	4620      	mov	r0, r4
 80117b6:	f000 f851 	bl	801185c <ucdr_check_final_buffer_behavior>
 80117ba:	b1b0      	cbz	r0, 80117ea <ucdr_deserialize_int32_t+0xc6>
 80117bc:	7d23      	ldrb	r3, [r4, #20]
 80117be:	2b01      	cmp	r3, #1
 80117c0:	68a3      	ldr	r3, [r4, #8]
 80117c2:	d017      	beq.n	80117f4 <ucdr_deserialize_int32_t+0xd0>
 80117c4:	78db      	ldrb	r3, [r3, #3]
 80117c6:	702b      	strb	r3, [r5, #0]
 80117c8:	68a3      	ldr	r3, [r4, #8]
 80117ca:	789b      	ldrb	r3, [r3, #2]
 80117cc:	706b      	strb	r3, [r5, #1]
 80117ce:	68a3      	ldr	r3, [r4, #8]
 80117d0:	785b      	ldrb	r3, [r3, #1]
 80117d2:	70ab      	strb	r3, [r5, #2]
 80117d4:	68a3      	ldr	r3, [r4, #8]
 80117d6:	781b      	ldrb	r3, [r3, #0]
 80117d8:	70eb      	strb	r3, [r5, #3]
 80117da:	68a2      	ldr	r2, [r4, #8]
 80117dc:	6923      	ldr	r3, [r4, #16]
 80117de:	3204      	adds	r2, #4
 80117e0:	3304      	adds	r3, #4
 80117e2:	2104      	movs	r1, #4
 80117e4:	60a2      	str	r2, [r4, #8]
 80117e6:	6123      	str	r3, [r4, #16]
 80117e8:	7561      	strb	r1, [r4, #21]
 80117ea:	7da0      	ldrb	r0, [r4, #22]
 80117ec:	f080 0001 	eor.w	r0, r0, #1
 80117f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	602b      	str	r3, [r5, #0]
 80117f8:	e7ef      	b.n	80117da <ucdr_deserialize_int32_t+0xb6>
 80117fa:	68a2      	ldr	r2, [r4, #8]
 80117fc:	6923      	ldr	r3, [r4, #16]
 80117fe:	7da0      	ldrb	r0, [r4, #22]
 8011800:	f884 8015 	strb.w	r8, [r4, #21]
 8011804:	1bd2      	subs	r2, r2, r7
 8011806:	1bdb      	subs	r3, r3, r7
 8011808:	60a2      	str	r2, [r4, #8]
 801180a:	6123      	str	r3, [r4, #16]
 801180c:	f080 0001 	eor.w	r0, r0, #1
 8011810:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011814:	68a3      	ldr	r3, [r4, #8]
 8011816:	789b      	ldrb	r3, [r3, #2]
 8011818:	706b      	strb	r3, [r5, #1]
 801181a:	1cab      	adds	r3, r5, #2
 801181c:	68a2      	ldr	r2, [r4, #8]
 801181e:	7852      	ldrb	r2, [r2, #1]
 8011820:	f803 2b01 	strb.w	r2, [r3], #1
 8011824:	68a2      	ldr	r2, [r4, #8]
 8011826:	7812      	ldrb	r2, [r2, #0]
 8011828:	701a      	strb	r2, [r3, #0]
 801182a:	e7b4      	b.n	8011796 <ucdr_deserialize_int32_t+0x72>
 801182c:	4631      	mov	r1, r6
 801182e:	463a      	mov	r2, r7
 8011830:	4628      	mov	r0, r5
 8011832:	f008 ff70 	bl	801a716 <memcpy>
 8011836:	68a1      	ldr	r1, [r4, #8]
 8011838:	464a      	mov	r2, r9
 801183a:	19e8      	adds	r0, r5, r7
 801183c:	f008 ff6b 	bl	801a716 <memcpy>
 8011840:	e7a9      	b.n	8011796 <ucdr_deserialize_int32_t+0x72>
 8011842:	bf00      	nop

08011844 <ucdr_check_buffer_available_for>:
 8011844:	7d83      	ldrb	r3, [r0, #22]
 8011846:	b93b      	cbnz	r3, 8011858 <ucdr_check_buffer_available_for+0x14>
 8011848:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 801184c:	4419      	add	r1, r3
 801184e:	4288      	cmp	r0, r1
 8011850:	bf34      	ite	cc
 8011852:	2000      	movcc	r0, #0
 8011854:	2001      	movcs	r0, #1
 8011856:	4770      	bx	lr
 8011858:	2000      	movs	r0, #0
 801185a:	4770      	bx	lr

0801185c <ucdr_check_final_buffer_behavior>:
 801185c:	7d83      	ldrb	r3, [r0, #22]
 801185e:	b943      	cbnz	r3, 8011872 <ucdr_check_final_buffer_behavior+0x16>
 8011860:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8011864:	4291      	cmp	r1, r2
 8011866:	b510      	push	{r4, lr}
 8011868:	4604      	mov	r4, r0
 801186a:	d205      	bcs.n	8011878 <ucdr_check_final_buffer_behavior+0x1c>
 801186c:	2301      	movs	r3, #1
 801186e:	4618      	mov	r0, r3
 8011870:	bd10      	pop	{r4, pc}
 8011872:	2300      	movs	r3, #0
 8011874:	4618      	mov	r0, r3
 8011876:	4770      	bx	lr
 8011878:	6982      	ldr	r2, [r0, #24]
 801187a:	b13a      	cbz	r2, 801188c <ucdr_check_final_buffer_behavior+0x30>
 801187c:	69c1      	ldr	r1, [r0, #28]
 801187e:	4790      	blx	r2
 8011880:	f080 0301 	eor.w	r3, r0, #1
 8011884:	b2db      	uxtb	r3, r3
 8011886:	75a0      	strb	r0, [r4, #22]
 8011888:	4618      	mov	r0, r3
 801188a:	bd10      	pop	{r4, pc}
 801188c:	2001      	movs	r0, #1
 801188e:	75a0      	strb	r0, [r4, #22]
 8011890:	e7fa      	b.n	8011888 <ucdr_check_final_buffer_behavior+0x2c>
 8011892:	bf00      	nop

08011894 <ucdr_set_on_full_buffer_callback>:
 8011894:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8011898:	4770      	bx	lr
 801189a:	bf00      	nop

0801189c <ucdr_init_buffer_origin_offset_endian>:
 801189c:	b430      	push	{r4, r5}
 801189e:	9c02      	ldr	r4, [sp, #8]
 80118a0:	f89d 500c 	ldrb.w	r5, [sp, #12]
 80118a4:	6001      	str	r1, [r0, #0]
 80118a6:	440a      	add	r2, r1
 80118a8:	60c3      	str	r3, [r0, #12]
 80118aa:	4421      	add	r1, r4
 80118ac:	441c      	add	r4, r3
 80118ae:	2300      	movs	r3, #0
 80118b0:	6104      	str	r4, [r0, #16]
 80118b2:	7505      	strb	r5, [r0, #20]
 80118b4:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80118b8:	bc30      	pop	{r4, r5}
 80118ba:	e9c0 3306 	strd	r3, r3, [r0, #24]
 80118be:	7543      	strb	r3, [r0, #21]
 80118c0:	7583      	strb	r3, [r0, #22]
 80118c2:	4770      	bx	lr

080118c4 <ucdr_init_buffer_origin_offset>:
 80118c4:	b510      	push	{r4, lr}
 80118c6:	b082      	sub	sp, #8
 80118c8:	9c04      	ldr	r4, [sp, #16]
 80118ca:	9400      	str	r4, [sp, #0]
 80118cc:	2401      	movs	r4, #1
 80118ce:	9401      	str	r4, [sp, #4]
 80118d0:	f7ff ffe4 	bl	801189c <ucdr_init_buffer_origin_offset_endian>
 80118d4:	b002      	add	sp, #8
 80118d6:	bd10      	pop	{r4, pc}

080118d8 <ucdr_init_buffer_origin>:
 80118d8:	b510      	push	{r4, lr}
 80118da:	b082      	sub	sp, #8
 80118dc:	2400      	movs	r4, #0
 80118de:	9400      	str	r4, [sp, #0]
 80118e0:	f7ff fff0 	bl	80118c4 <ucdr_init_buffer_origin_offset>
 80118e4:	b002      	add	sp, #8
 80118e6:	bd10      	pop	{r4, pc}

080118e8 <ucdr_init_buffer>:
 80118e8:	2300      	movs	r3, #0
 80118ea:	f7ff bff5 	b.w	80118d8 <ucdr_init_buffer_origin>
 80118ee:	bf00      	nop

080118f0 <ucdr_alignment>:
 80118f0:	fbb0 f3f1 	udiv	r3, r0, r1
 80118f4:	fb03 0011 	mls	r0, r3, r1, r0
 80118f8:	1a08      	subs	r0, r1, r0
 80118fa:	3901      	subs	r1, #1
 80118fc:	4008      	ands	r0, r1
 80118fe:	4770      	bx	lr

08011900 <ucdr_buffer_alignment>:
 8011900:	7d43      	ldrb	r3, [r0, #21]
 8011902:	428b      	cmp	r3, r1
 8011904:	d208      	bcs.n	8011918 <ucdr_buffer_alignment+0x18>
 8011906:	6903      	ldr	r3, [r0, #16]
 8011908:	fbb3 f0f1 	udiv	r0, r3, r1
 801190c:	fb01 3010 	mls	r0, r1, r0, r3
 8011910:	1a08      	subs	r0, r1, r0
 8011912:	3901      	subs	r1, #1
 8011914:	4008      	ands	r0, r1
 8011916:	4770      	bx	lr
 8011918:	2000      	movs	r0, #0
 801191a:	4770      	bx	lr

0801191c <ucdr_align_to>:
 801191c:	b570      	push	{r4, r5, r6, lr}
 801191e:	4604      	mov	r4, r0
 8011920:	460e      	mov	r6, r1
 8011922:	f7ff ffed 	bl	8011900 <ucdr_buffer_alignment>
 8011926:	68a5      	ldr	r5, [r4, #8]
 8011928:	6863      	ldr	r3, [r4, #4]
 801192a:	6922      	ldr	r2, [r4, #16]
 801192c:	7566      	strb	r6, [r4, #21]
 801192e:	4405      	add	r5, r0
 8011930:	42ab      	cmp	r3, r5
 8011932:	4410      	add	r0, r2
 8011934:	bf28      	it	cs
 8011936:	462b      	movcs	r3, r5
 8011938:	6120      	str	r0, [r4, #16]
 801193a:	60a3      	str	r3, [r4, #8]
 801193c:	bd70      	pop	{r4, r5, r6, pc}
 801193e:	bf00      	nop

08011940 <ucdr_buffer_length>:
 8011940:	6882      	ldr	r2, [r0, #8]
 8011942:	6800      	ldr	r0, [r0, #0]
 8011944:	1a10      	subs	r0, r2, r0
 8011946:	4770      	bx	lr

08011948 <ucdr_buffer_remaining>:
 8011948:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 801194c:	1a10      	subs	r0, r2, r0
 801194e:	4770      	bx	lr

08011950 <ucdr_check_final_buffer_behavior_array>:
 8011950:	b538      	push	{r3, r4, r5, lr}
 8011952:	7d83      	ldrb	r3, [r0, #22]
 8011954:	b963      	cbnz	r3, 8011970 <ucdr_check_final_buffer_behavior_array+0x20>
 8011956:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 801195a:	429a      	cmp	r2, r3
 801195c:	4604      	mov	r4, r0
 801195e:	460d      	mov	r5, r1
 8011960:	d308      	bcc.n	8011974 <ucdr_check_final_buffer_behavior_array+0x24>
 8011962:	b139      	cbz	r1, 8011974 <ucdr_check_final_buffer_behavior_array+0x24>
 8011964:	6983      	ldr	r3, [r0, #24]
 8011966:	b163      	cbz	r3, 8011982 <ucdr_check_final_buffer_behavior_array+0x32>
 8011968:	69c1      	ldr	r1, [r0, #28]
 801196a:	4798      	blx	r3
 801196c:	75a0      	strb	r0, [r4, #22]
 801196e:	b108      	cbz	r0, 8011974 <ucdr_check_final_buffer_behavior_array+0x24>
 8011970:	2000      	movs	r0, #0
 8011972:	bd38      	pop	{r3, r4, r5, pc}
 8011974:	4620      	mov	r0, r4
 8011976:	f7ff ffe7 	bl	8011948 <ucdr_buffer_remaining>
 801197a:	42a8      	cmp	r0, r5
 801197c:	bf28      	it	cs
 801197e:	4628      	movcs	r0, r5
 8011980:	bd38      	pop	{r3, r4, r5, pc}
 8011982:	2301      	movs	r3, #1
 8011984:	7583      	strb	r3, [r0, #22]
 8011986:	e7f3      	b.n	8011970 <ucdr_check_final_buffer_behavior_array+0x20>

08011988 <ucdr_advance_buffer>:
 8011988:	b538      	push	{r3, r4, r5, lr}
 801198a:	4604      	mov	r4, r0
 801198c:	460d      	mov	r5, r1
 801198e:	f7ff ff59 	bl	8011844 <ucdr_check_buffer_available_for>
 8011992:	b178      	cbz	r0, 80119b4 <ucdr_advance_buffer+0x2c>
 8011994:	68a3      	ldr	r3, [r4, #8]
 8011996:	6921      	ldr	r1, [r4, #16]
 8011998:	442b      	add	r3, r5
 801199a:	60a3      	str	r3, [r4, #8]
 801199c:	2301      	movs	r3, #1
 801199e:	4429      	add	r1, r5
 80119a0:	7563      	strb	r3, [r4, #21]
 80119a2:	6121      	str	r1, [r4, #16]
 80119a4:	bd38      	pop	{r3, r4, r5, pc}
 80119a6:	68a2      	ldr	r2, [r4, #8]
 80119a8:	6923      	ldr	r3, [r4, #16]
 80119aa:	4402      	add	r2, r0
 80119ac:	4403      	add	r3, r0
 80119ae:	1a2d      	subs	r5, r5, r0
 80119b0:	60a2      	str	r2, [r4, #8]
 80119b2:	6123      	str	r3, [r4, #16]
 80119b4:	2201      	movs	r2, #1
 80119b6:	4629      	mov	r1, r5
 80119b8:	4620      	mov	r0, r4
 80119ba:	f7ff ffc9 	bl	8011950 <ucdr_check_final_buffer_behavior_array>
 80119be:	2800      	cmp	r0, #0
 80119c0:	d1f1      	bne.n	80119a6 <ucdr_advance_buffer+0x1e>
 80119c2:	2301      	movs	r3, #1
 80119c4:	7563      	strb	r3, [r4, #21]
 80119c6:	bd38      	pop	{r3, r4, r5, pc}

080119c8 <uxr_buffer_delete_entity>:
 80119c8:	b530      	push	{r4, r5, lr}
 80119ca:	b08f      	sub	sp, #60	; 0x3c
 80119cc:	2403      	movs	r4, #3
 80119ce:	2500      	movs	r5, #0
 80119d0:	e9cd 4500 	strd	r4, r5, [sp]
 80119d4:	9202      	str	r2, [sp, #8]
 80119d6:	ab06      	add	r3, sp, #24
 80119d8:	2204      	movs	r2, #4
 80119da:	9103      	str	r1, [sp, #12]
 80119dc:	4604      	mov	r4, r0
 80119de:	f001 fa85 	bl	8012eec <uxr_prepare_stream_to_write_submessage>
 80119e2:	b918      	cbnz	r0, 80119ec <uxr_buffer_delete_entity+0x24>
 80119e4:	4604      	mov	r4, r0
 80119e6:	4620      	mov	r0, r4
 80119e8:	b00f      	add	sp, #60	; 0x3c
 80119ea:	bd30      	pop	{r4, r5, pc}
 80119ec:	9902      	ldr	r1, [sp, #8]
 80119ee:	aa05      	add	r2, sp, #20
 80119f0:	4620      	mov	r0, r4
 80119f2:	f001 fbb5 	bl	8013160 <uxr_init_base_object_request>
 80119f6:	a905      	add	r1, sp, #20
 80119f8:	4604      	mov	r4, r0
 80119fa:	a806      	add	r0, sp, #24
 80119fc:	f002 fdf0 	bl	80145e0 <uxr_serialize_DELETE_Payload>
 8011a00:	4620      	mov	r0, r4
 8011a02:	b00f      	add	sp, #60	; 0x3c
 8011a04:	bd30      	pop	{r4, r5, pc}
 8011a06:	bf00      	nop

08011a08 <uxr_common_create_entity>:
 8011a08:	b530      	push	{r4, r5, lr}
 8011a0a:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8011a0e:	b08d      	sub	sp, #52	; 0x34
 8011a10:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8011a14:	2d01      	cmp	r5, #1
 8011a16:	bf0c      	ite	eq
 8011a18:	f003 0201 	andeq.w	r2, r3, #1
 8011a1c:	2200      	movne	r2, #0
 8011a1e:	330e      	adds	r3, #14
 8011a20:	4604      	mov	r4, r0
 8011a22:	441a      	add	r2, r3
 8011a24:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8011a28:	9001      	str	r0, [sp, #4]
 8011a2a:	2101      	movs	r1, #1
 8011a2c:	9100      	str	r1, [sp, #0]
 8011a2e:	b292      	uxth	r2, r2
 8011a30:	9903      	ldr	r1, [sp, #12]
 8011a32:	ab04      	add	r3, sp, #16
 8011a34:	4620      	mov	r0, r4
 8011a36:	f001 fa59 	bl	8012eec <uxr_prepare_stream_to_write_submessage>
 8011a3a:	b918      	cbnz	r0, 8011a44 <uxr_common_create_entity+0x3c>
 8011a3c:	4604      	mov	r4, r0
 8011a3e:	4620      	mov	r0, r4
 8011a40:	b00d      	add	sp, #52	; 0x34
 8011a42:	bd30      	pop	{r4, r5, pc}
 8011a44:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011a46:	9902      	ldr	r1, [sp, #8]
 8011a48:	4620      	mov	r0, r4
 8011a4a:	f001 fb89 	bl	8013160 <uxr_init_base_object_request>
 8011a4e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011a50:	4604      	mov	r4, r0
 8011a52:	a804      	add	r0, sp, #16
 8011a54:	f002 fd18 	bl	8014488 <uxr_serialize_CREATE_Payload>
 8011a58:	4620      	mov	r0, r4
 8011a5a:	b00d      	add	sp, #52	; 0x34
 8011a5c:	bd30      	pop	{r4, r5, pc}
 8011a5e:	bf00      	nop

08011a60 <uxr_buffer_create_participant_bin>:
 8011a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a62:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 8011a66:	ac11      	add	r4, sp, #68	; 0x44
 8011a68:	9103      	str	r1, [sp, #12]
 8011a6a:	9e9c      	ldr	r6, [sp, #624]	; 0x270
 8011a6c:	f8a4 3210 	strh.w	r3, [r4, #528]	; 0x210
 8011a70:	2103      	movs	r1, #3
 8011a72:	7221      	strb	r1, [r4, #8]
 8011a74:	2301      	movs	r3, #1
 8011a76:	2100      	movs	r1, #0
 8011a78:	7123      	strb	r3, [r4, #4]
 8011a7a:	f89d 7274 	ldrb.w	r7, [sp, #628]	; 0x274
 8011a7e:	9202      	str	r2, [sp, #8]
 8011a80:	4605      	mov	r5, r0
 8011a82:	f88d 1014 	strb.w	r1, [sp, #20]
 8011a86:	b1ce      	cbz	r6, 8011abc <uxr_buffer_create_participant_bin+0x5c>
 8011a88:	f88d 301c 	strb.w	r3, [sp, #28]
 8011a8c:	9608      	str	r6, [sp, #32]
 8011a8e:	a809      	add	r0, sp, #36	; 0x24
 8011a90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011a94:	a915      	add	r1, sp, #84	; 0x54
 8011a96:	f7ff ff27 	bl	80118e8 <ucdr_init_buffer>
 8011a9a:	a905      	add	r1, sp, #20
 8011a9c:	a809      	add	r0, sp, #36	; 0x24
 8011a9e:	f002 f8bb 	bl	8013c18 <uxr_serialize_OBJK_DomainParticipant_Binary>
 8011aa2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8011aa4:	9401      	str	r4, [sp, #4]
 8011aa6:	b283      	uxth	r3, r0
 8011aa8:	9700      	str	r7, [sp, #0]
 8011aaa:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8011aae:	60e0      	str	r0, [r4, #12]
 8011ab0:	4628      	mov	r0, r5
 8011ab2:	f7ff ffa9 	bl	8011a08 <uxr_common_create_entity>
 8011ab6:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
 8011aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011abc:	f88d 601c 	strb.w	r6, [sp, #28]
 8011ac0:	e7e5      	b.n	8011a8e <uxr_buffer_create_participant_bin+0x2e>
 8011ac2:	bf00      	nop

08011ac4 <uxr_buffer_create_topic_bin>:
 8011ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ac6:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8011aca:	ac13      	add	r4, sp, #76	; 0x4c
 8011acc:	4605      	mov	r5, r0
 8011ace:	9105      	str	r1, [sp, #20]
 8011ad0:	4618      	mov	r0, r3
 8011ad2:	a997      	add	r1, sp, #604	; 0x25c
 8011ad4:	2602      	movs	r6, #2
 8011ad6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011ada:	f89d 7280 	ldrb.w	r7, [sp, #640]	; 0x280
 8011ade:	f88d 6050 	strb.w	r6, [sp, #80]	; 0x50
 8011ae2:	9e9f      	ldr	r6, [sp, #636]	; 0x27c
 8011ae4:	f000 f994 	bl	8011e10 <uxr_object_id_to_raw>
 8011ae8:	9a9e      	ldr	r2, [sp, #632]	; 0x278
 8011aea:	9206      	str	r2, [sp, #24]
 8011aec:	2303      	movs	r3, #3
 8011aee:	2101      	movs	r1, #1
 8011af0:	7223      	strb	r3, [r4, #8]
 8011af2:	a80b      	add	r0, sp, #44	; 0x2c
 8011af4:	2300      	movs	r3, #0
 8011af6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011afa:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8011afe:	a917      	add	r1, sp, #92	; 0x5c
 8011b00:	f88d 301c 	strb.w	r3, [sp, #28]
 8011b04:	960a      	str	r6, [sp, #40]	; 0x28
 8011b06:	f7ff feef 	bl	80118e8 <ucdr_init_buffer>
 8011b0a:	a906      	add	r1, sp, #24
 8011b0c:	a80b      	add	r0, sp, #44	; 0x2c
 8011b0e:	f002 f8a5 	bl	8013c5c <uxr_serialize_OBJK_Topic_Binary>
 8011b12:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8011b14:	9401      	str	r4, [sp, #4]
 8011b16:	9700      	str	r7, [sp, #0]
 8011b18:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011b1c:	4628      	mov	r0, r5
 8011b1e:	b2b3      	uxth	r3, r6
 8011b20:	60e6      	str	r6, [r4, #12]
 8011b22:	f7ff ff71 	bl	8011a08 <uxr_common_create_entity>
 8011b26:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8011b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011b2c <uxr_buffer_create_publisher_bin>:
 8011b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b2e:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 8011b32:	ac0e      	add	r4, sp, #56	; 0x38
 8011b34:	4605      	mov	r5, r0
 8011b36:	9105      	str	r1, [sp, #20]
 8011b38:	4618      	mov	r0, r3
 8011b3a:	2603      	movs	r6, #3
 8011b3c:	a992      	add	r1, sp, #584	; 0x248
 8011b3e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011b42:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 8011b46:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 8011b4a:	f000 f961 	bl	8011e10 <uxr_object_id_to_raw>
 8011b4e:	2300      	movs	r3, #0
 8011b50:	a806      	add	r0, sp, #24
 8011b52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011b56:	a912      	add	r1, sp, #72	; 0x48
 8011b58:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8011b5c:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8011b60:	7226      	strb	r6, [r4, #8]
 8011b62:	f7ff fec1 	bl	80118e8 <ucdr_init_buffer>
 8011b66:	a993      	add	r1, sp, #588	; 0x24c
 8011b68:	a806      	add	r0, sp, #24
 8011b6a:	f002 f92b 	bl	8013dc4 <uxr_serialize_OBJK_Publisher_Binary>
 8011b6e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8011b70:	9700      	str	r7, [sp, #0]
 8011b72:	9401      	str	r4, [sp, #4]
 8011b74:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011b78:	4628      	mov	r0, r5
 8011b7a:	b2b3      	uxth	r3, r6
 8011b7c:	60e6      	str	r6, [r4, #12]
 8011b7e:	f7ff ff43 	bl	8011a08 <uxr_common_create_entity>
 8011b82:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 8011b86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011b88 <uxr_buffer_create_subscriber_bin>:
 8011b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b8a:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 8011b8e:	ac0e      	add	r4, sp, #56	; 0x38
 8011b90:	4605      	mov	r5, r0
 8011b92:	9105      	str	r1, [sp, #20]
 8011b94:	4618      	mov	r0, r3
 8011b96:	a992      	add	r1, sp, #584	; 0x248
 8011b98:	2604      	movs	r6, #4
 8011b9a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011b9e:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 8011ba2:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 8011ba6:	f000 f933 	bl	8011e10 <uxr_object_id_to_raw>
 8011baa:	2103      	movs	r1, #3
 8011bac:	2300      	movs	r3, #0
 8011bae:	a806      	add	r0, sp, #24
 8011bb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011bb4:	7221      	strb	r1, [r4, #8]
 8011bb6:	a912      	add	r1, sp, #72	; 0x48
 8011bb8:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8011bbc:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8011bc0:	f7ff fe92 	bl	80118e8 <ucdr_init_buffer>
 8011bc4:	a993      	add	r1, sp, #588	; 0x24c
 8011bc6:	a806      	add	r0, sp, #24
 8011bc8:	f002 f9ac 	bl	8013f24 <uxr_serialize_OBJK_Subscriber_Binary>
 8011bcc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8011bce:	9700      	str	r7, [sp, #0]
 8011bd0:	9401      	str	r4, [sp, #4]
 8011bd2:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011bd6:	4628      	mov	r0, r5
 8011bd8:	b2b3      	uxth	r3, r6
 8011bda:	60e6      	str	r6, [r4, #12]
 8011bdc:	f7ff ff14 	bl	8011a08 <uxr_common_create_entity>
 8011be0:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 8011be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011be6:	bf00      	nop

08011be8 <uxr_buffer_create_datawriter_bin>:
 8011be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bec:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8011bf0:	ac1d      	add	r4, sp, #116	; 0x74
 8011bf2:	2505      	movs	r5, #5
 8011bf4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011bf8:	9105      	str	r1, [sp, #20]
 8011bfa:	4606      	mov	r6, r0
 8011bfc:	a9a1      	add	r1, sp, #644	; 0x284
 8011bfe:	4618      	mov	r0, r3
 8011c00:	7125      	strb	r5, [r4, #4]
 8011c02:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 8011c06:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 8011c0a:	2703      	movs	r7, #3
 8011c0c:	f000 f900 	bl	8011e10 <uxr_object_id_to_raw>
 8011c10:	a90e      	add	r1, sp, #56	; 0x38
 8011c12:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 8011c14:	7227      	strb	r7, [r4, #8]
 8011c16:	f000 f8fb 	bl	8011e10 <uxr_object_id_to_raw>
 8011c1a:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8011c1e:	f89d 12a5 	ldrb.w	r1, [sp, #677]	; 0x2a5
 8011c22:	3d00      	subs	r5, #0
 8011c24:	f04f 0300 	mov.w	r3, #0
 8011c28:	bf18      	it	ne
 8011c2a:	2501      	movne	r5, #1
 8011c2c:	2201      	movs	r2, #1
 8011c2e:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 8011c32:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 8011c36:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8011c3a:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8011c3e:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8011c42:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8011c46:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8011c4a:	bb89      	cbnz	r1, 8011cb0 <uxr_buffer_create_datawriter_bin+0xc8>
 8011c4c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8011c50:	f04f 0e23 	mov.w	lr, #35	; 0x23
 8011c54:	f04f 0c13 	mov.w	ip, #19
 8011c58:	250b      	movs	r5, #11
 8011c5a:	2221      	movs	r2, #33	; 0x21
 8011c5c:	2111      	movs	r1, #17
 8011c5e:	2009      	movs	r0, #9
 8011c60:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 8011c64:	b923      	cbnz	r3, 8011c70 <uxr_buffer_create_datawriter_bin+0x88>
 8011c66:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8011c6a:	4672      	mov	r2, lr
 8011c6c:	4661      	mov	r1, ip
 8011c6e:	4628      	mov	r0, r5
 8011c70:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 8011c74:	2b01      	cmp	r3, #1
 8011c76:	d025      	beq.n	8011cc4 <uxr_buffer_create_datawriter_bin+0xdc>
 8011c78:	2b03      	cmp	r3, #3
 8011c7a:	d029      	beq.n	8011cd0 <uxr_buffer_create_datawriter_bin+0xe8>
 8011c7c:	b32b      	cbz	r3, 8011cca <uxr_buffer_create_datawriter_bin+0xe2>
 8011c7e:	a806      	add	r0, sp, #24
 8011c80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011c84:	a921      	add	r1, sp, #132	; 0x84
 8011c86:	f7ff fe2f 	bl	80118e8 <ucdr_init_buffer>
 8011c8a:	a90e      	add	r1, sp, #56	; 0x38
 8011c8c:	a806      	add	r0, sp, #24
 8011c8e:	f002 f9fb 	bl	8014088 <uxr_serialize_OBJK_DataWriter_Binary>
 8011c92:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011c94:	9401      	str	r4, [sp, #4]
 8011c96:	b283      	uxth	r3, r0
 8011c98:	f8cd 8000 	str.w	r8, [sp]
 8011c9c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011ca0:	60e0      	str	r0, [r4, #12]
 8011ca2:	4630      	mov	r0, r6
 8011ca4:	f7ff feb0 	bl	8011a08 <uxr_common_create_entity>
 8011ca8:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8011cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cb0:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8011cb4:	f04f 0c12 	mov.w	ip, #18
 8011cb8:	250a      	movs	r5, #10
 8011cba:	2220      	movs	r2, #32
 8011cbc:	2110      	movs	r1, #16
 8011cbe:	2008      	movs	r0, #8
 8011cc0:	2702      	movs	r7, #2
 8011cc2:	e7cd      	b.n	8011c60 <uxr_buffer_create_datawriter_bin+0x78>
 8011cc4:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8011cc8:	e7d9      	b.n	8011c7e <uxr_buffer_create_datawriter_bin+0x96>
 8011cca:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8011cce:	e7d6      	b.n	8011c7e <uxr_buffer_create_datawriter_bin+0x96>
 8011cd0:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8011cd4:	e7d3      	b.n	8011c7e <uxr_buffer_create_datawriter_bin+0x96>
 8011cd6:	bf00      	nop

08011cd8 <uxr_buffer_create_datareader_bin>:
 8011cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cdc:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 8011ce0:	ac1f      	add	r4, sp, #124	; 0x7c
 8011ce2:	2506      	movs	r5, #6
 8011ce4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011ce8:	9105      	str	r1, [sp, #20]
 8011cea:	4606      	mov	r6, r0
 8011cec:	a9a3      	add	r1, sp, #652	; 0x28c
 8011cee:	4618      	mov	r0, r3
 8011cf0:	7125      	strb	r5, [r4, #4]
 8011cf2:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	; 0x2b0
 8011cf6:	f89d 82b4 	ldrb.w	r8, [sp, #692]	; 0x2b4
 8011cfa:	2703      	movs	r7, #3
 8011cfc:	f000 f888 	bl	8011e10 <uxr_object_id_to_raw>
 8011d00:	a90e      	add	r1, sp, #56	; 0x38
 8011d02:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 8011d04:	7227      	strb	r7, [r4, #8]
 8011d06:	f000 f883 	bl	8011e10 <uxr_object_id_to_raw>
 8011d0a:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8011d0e:	f89d 12ad 	ldrb.w	r1, [sp, #685]	; 0x2ad
 8011d12:	3d00      	subs	r5, #0
 8011d14:	f04f 0300 	mov.w	r3, #0
 8011d18:	bf18      	it	ne
 8011d1a:	2501      	movne	r5, #1
 8011d1c:	2201      	movs	r2, #1
 8011d1e:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 8011d22:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 8011d26:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 8011d2a:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8011d2e:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8011d32:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8011d36:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8011d3a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8011d3e:	bb89      	cbnz	r1, 8011da4 <uxr_buffer_create_datareader_bin+0xcc>
 8011d40:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8011d44:	f04f 0e23 	mov.w	lr, #35	; 0x23
 8011d48:	f04f 0c13 	mov.w	ip, #19
 8011d4c:	250b      	movs	r5, #11
 8011d4e:	2221      	movs	r2, #33	; 0x21
 8011d50:	2111      	movs	r1, #17
 8011d52:	2009      	movs	r0, #9
 8011d54:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 8011d58:	b923      	cbnz	r3, 8011d64 <uxr_buffer_create_datareader_bin+0x8c>
 8011d5a:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8011d5e:	4672      	mov	r2, lr
 8011d60:	4661      	mov	r1, ip
 8011d62:	4628      	mov	r0, r5
 8011d64:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 8011d68:	2b01      	cmp	r3, #1
 8011d6a:	d025      	beq.n	8011db8 <uxr_buffer_create_datareader_bin+0xe0>
 8011d6c:	2b03      	cmp	r3, #3
 8011d6e:	d029      	beq.n	8011dc4 <uxr_buffer_create_datareader_bin+0xec>
 8011d70:	b32b      	cbz	r3, 8011dbe <uxr_buffer_create_datareader_bin+0xe6>
 8011d72:	a806      	add	r0, sp, #24
 8011d74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011d78:	a923      	add	r1, sp, #140	; 0x8c
 8011d7a:	f7ff fdb5 	bl	80118e8 <ucdr_init_buffer>
 8011d7e:	a90e      	add	r1, sp, #56	; 0x38
 8011d80:	a806      	add	r0, sp, #24
 8011d82:	f002 f945 	bl	8014010 <uxr_serialize_OBJK_DataReader_Binary>
 8011d86:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011d88:	9401      	str	r4, [sp, #4]
 8011d8a:	b283      	uxth	r3, r0
 8011d8c:	f8cd 8000 	str.w	r8, [sp]
 8011d90:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011d94:	60e0      	str	r0, [r4, #12]
 8011d96:	4630      	mov	r0, r6
 8011d98:	f7ff fe36 	bl	8011a08 <uxr_common_create_entity>
 8011d9c:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8011da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011da4:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8011da8:	f04f 0c12 	mov.w	ip, #18
 8011dac:	250a      	movs	r5, #10
 8011dae:	2220      	movs	r2, #32
 8011db0:	2110      	movs	r1, #16
 8011db2:	2008      	movs	r0, #8
 8011db4:	2702      	movs	r7, #2
 8011db6:	e7cd      	b.n	8011d54 <uxr_buffer_create_datareader_bin+0x7c>
 8011db8:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8011dbc:	e7d9      	b.n	8011d72 <uxr_buffer_create_datareader_bin+0x9a>
 8011dbe:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8011dc2:	e7d6      	b.n	8011d72 <uxr_buffer_create_datareader_bin+0x9a>
 8011dc4:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8011dc8:	e7d3      	b.n	8011d72 <uxr_buffer_create_datareader_bin+0x9a>
 8011dca:	bf00      	nop

08011dcc <uxr_object_id>:
 8011dcc:	b082      	sub	sp, #8
 8011dce:	2300      	movs	r3, #0
 8011dd0:	f88d 1006 	strb.w	r1, [sp, #6]
 8011dd4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011dd8:	f360 030f 	bfi	r3, r0, #0, #16
 8011ddc:	f362 431f 	bfi	r3, r2, #16, #16
 8011de0:	4618      	mov	r0, r3
 8011de2:	b002      	add	sp, #8
 8011de4:	4770      	bx	lr
 8011de6:	bf00      	nop

08011de8 <uxr_object_id_from_raw>:
 8011de8:	7843      	ldrb	r3, [r0, #1]
 8011dea:	7801      	ldrb	r1, [r0, #0]
 8011dec:	b082      	sub	sp, #8
 8011dee:	f003 000f 	and.w	r0, r3, #15
 8011df2:	f88d 0006 	strb.w	r0, [sp, #6]
 8011df6:	091b      	lsrs	r3, r3, #4
 8011df8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8011dfc:	2200      	movs	r2, #0
 8011dfe:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8011e02:	f363 020f 	bfi	r2, r3, #0, #16
 8011e06:	f361 421f 	bfi	r2, r1, #16, #16
 8011e0a:	4610      	mov	r0, r2
 8011e0c:	b002      	add	sp, #8
 8011e0e:	4770      	bx	lr

08011e10 <uxr_object_id_to_raw>:
 8011e10:	4602      	mov	r2, r0
 8011e12:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8011e16:	b082      	sub	sp, #8
 8011e18:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8011e1c:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8011e20:	700a      	strb	r2, [r1, #0]
 8011e22:	704b      	strb	r3, [r1, #1]
 8011e24:	b002      	add	sp, #8
 8011e26:	4770      	bx	lr

08011e28 <uxr_buffer_request_data>:
 8011e28:	b530      	push	{r4, r5, lr}
 8011e2a:	b095      	sub	sp, #84	; 0x54
 8011e2c:	4604      	mov	r4, r0
 8011e2e:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8011e30:	9105      	str	r1, [sp, #20]
 8011e32:	2d00      	cmp	r5, #0
 8011e34:	bf14      	ite	ne
 8011e36:	2101      	movne	r1, #1
 8011e38:	2100      	moveq	r1, #0
 8011e3a:	9204      	str	r2, [sp, #16]
 8011e3c:	f04f 0200 	mov.w	r2, #0
 8011e40:	9303      	str	r3, [sp, #12]
 8011e42:	f88d 301c 	strb.w	r3, [sp, #28]
 8011e46:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8011e4a:	f88d 201d 	strb.w	r2, [sp, #29]
 8011e4e:	f88d 201e 	strb.w	r2, [sp, #30]
 8011e52:	d021      	beq.n	8011e98 <uxr_buffer_request_data+0x70>
 8011e54:	686a      	ldr	r2, [r5, #4]
 8011e56:	682b      	ldr	r3, [r5, #0]
 8011e58:	f8cd 202a 	str.w	r2, [sp, #42]	; 0x2a
 8011e5c:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 8011e60:	2210      	movs	r2, #16
 8011e62:	2000      	movs	r0, #0
 8011e64:	2108      	movs	r1, #8
 8011e66:	e9cd 1000 	strd	r1, r0, [sp]
 8011e6a:	ab0c      	add	r3, sp, #48	; 0x30
 8011e6c:	9905      	ldr	r1, [sp, #20]
 8011e6e:	4620      	mov	r0, r4
 8011e70:	f001 f83c 	bl	8012eec <uxr_prepare_stream_to_write_submessage>
 8011e74:	b918      	cbnz	r0, 8011e7e <uxr_buffer_request_data+0x56>
 8011e76:	4604      	mov	r4, r0
 8011e78:	4620      	mov	r0, r4
 8011e7a:	b015      	add	sp, #84	; 0x54
 8011e7c:	bd30      	pop	{r4, r5, pc}
 8011e7e:	9904      	ldr	r1, [sp, #16]
 8011e80:	aa06      	add	r2, sp, #24
 8011e82:	4620      	mov	r0, r4
 8011e84:	f001 f96c 	bl	8013160 <uxr_init_base_object_request>
 8011e88:	a906      	add	r1, sp, #24
 8011e8a:	4604      	mov	r4, r0
 8011e8c:	a80c      	add	r0, sp, #48	; 0x30
 8011e8e:	f002 fc51 	bl	8014734 <uxr_serialize_READ_DATA_Payload>
 8011e92:	4620      	mov	r0, r4
 8011e94:	b015      	add	sp, #84	; 0x54
 8011e96:	bd30      	pop	{r4, r5, pc}
 8011e98:	2208      	movs	r2, #8
 8011e9a:	e7e2      	b.n	8011e62 <uxr_buffer_request_data+0x3a>

08011e9c <uxr_buffer_cancel_data>:
 8011e9c:	b530      	push	{r4, r5, lr}
 8011e9e:	b095      	sub	sp, #84	; 0x54
 8011ea0:	2400      	movs	r4, #0
 8011ea2:	2308      	movs	r3, #8
 8011ea4:	e9cd 4201 	strd	r4, r2, [sp, #4]
 8011ea8:	9300      	str	r3, [sp, #0]
 8011eaa:	9205      	str	r2, [sp, #20]
 8011eac:	2501      	movs	r5, #1
 8011eae:	ab0c      	add	r3, sp, #48	; 0x30
 8011eb0:	2210      	movs	r2, #16
 8011eb2:	f8ad 401c 	strh.w	r4, [sp, #28]
 8011eb6:	f88d 401e 	strb.w	r4, [sp, #30]
 8011eba:	f8cd 4026 	str.w	r4, [sp, #38]	; 0x26
 8011ebe:	f8cd 402a 	str.w	r4, [sp, #42]	; 0x2a
 8011ec2:	9103      	str	r1, [sp, #12]
 8011ec4:	4604      	mov	r4, r0
 8011ec6:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8011eca:	f001 f80f 	bl	8012eec <uxr_prepare_stream_to_write_submessage>
 8011ece:	b918      	cbnz	r0, 8011ed8 <uxr_buffer_cancel_data+0x3c>
 8011ed0:	4604      	mov	r4, r0
 8011ed2:	4620      	mov	r0, r4
 8011ed4:	b015      	add	sp, #84	; 0x54
 8011ed6:	bd30      	pop	{r4, r5, pc}
 8011ed8:	9905      	ldr	r1, [sp, #20]
 8011eda:	aa06      	add	r2, sp, #24
 8011edc:	4620      	mov	r0, r4
 8011ede:	f001 f93f 	bl	8013160 <uxr_init_base_object_request>
 8011ee2:	a906      	add	r1, sp, #24
 8011ee4:	4604      	mov	r4, r0
 8011ee6:	a80c      	add	r0, sp, #48	; 0x30
 8011ee8:	f002 fc24 	bl	8014734 <uxr_serialize_READ_DATA_Payload>
 8011eec:	4620      	mov	r0, r4
 8011eee:	b015      	add	sp, #84	; 0x54
 8011ef0:	bd30      	pop	{r4, r5, pc}
 8011ef2:	bf00      	nop

08011ef4 <read_submessage_format>:
 8011ef4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011ef8:	b095      	sub	sp, #84	; 0x54
 8011efa:	f8bd 9078 	ldrh.w	r9, [sp, #120]	; 0x78
 8011efe:	b113      	cbz	r3, 8011f06 <read_submessage_format+0x12>
 8011f00:	b015      	add	sp, #84	; 0x54
 8011f02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011f06:	460c      	mov	r4, r1
 8011f08:	4616      	mov	r6, r2
 8011f0a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8011f0e:	461d      	mov	r5, r3
 8011f10:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8011f12:	9304      	str	r3, [sp, #16]
 8011f14:	1a52      	subs	r2, r2, r1
 8011f16:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011f18:	9305      	str	r3, [sp, #20]
 8011f1a:	4607      	mov	r7, r0
 8011f1c:	a80c      	add	r0, sp, #48	; 0x30
 8011f1e:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 8011f22:	f7ff fce1 	bl	80118e8 <ucdr_init_buffer>
 8011f26:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8011f2a:	a80c      	add	r0, sp, #48	; 0x30
 8011f2c:	f7ff fcb2 	bl	8011894 <ucdr_set_on_full_buffer_callback>
 8011f30:	69e3      	ldr	r3, [r4, #28]
 8011f32:	b193      	cbz	r3, 8011f5a <read_submessage_format+0x66>
 8011f34:	f1b8 0f07 	cmp.w	r8, #7
 8011f38:	751d      	strb	r5, [r3, #20]
 8011f3a:	d03e      	beq.n	8011fba <read_submessage_format+0xc6>
 8011f3c:	f1b8 0f08 	cmp.w	r8, #8
 8011f40:	d02c      	beq.n	8011f9c <read_submessage_format+0xa8>
 8011f42:	f1b8 0f06 	cmp.w	r8, #6
 8011f46:	d011      	beq.n	8011f6c <read_submessage_format+0x78>
 8011f48:	2201      	movs	r2, #1
 8011f4a:	751a      	strb	r2, [r3, #20]
 8011f4c:	4631      	mov	r1, r6
 8011f4e:	4620      	mov	r0, r4
 8011f50:	f7ff fd1a 	bl	8011988 <ucdr_advance_buffer>
 8011f54:	b015      	add	sp, #84	; 0x54
 8011f56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011f5a:	f1b8 0f07 	cmp.w	r8, #7
 8011f5e:	d02c      	beq.n	8011fba <read_submessage_format+0xc6>
 8011f60:	f1b8 0f08 	cmp.w	r8, #8
 8011f64:	d01a      	beq.n	8011f9c <read_submessage_format+0xa8>
 8011f66:	f1b8 0f06 	cmp.w	r8, #6
 8011f6a:	d1ef      	bne.n	8011f4c <read_submessage_format+0x58>
 8011f6c:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 8011f70:	b18d      	cbz	r5, 8011f96 <read_submessage_format+0xa2>
 8011f72:	2306      	movs	r3, #6
 8011f74:	f88d 3016 	strb.w	r3, [sp, #22]
 8011f78:	aa0c      	add	r2, sp, #48	; 0x30
 8011f7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011f7e:	9302      	str	r3, [sp, #8]
 8011f80:	9200      	str	r2, [sp, #0]
 8011f82:	9b04      	ldr	r3, [sp, #16]
 8011f84:	9905      	ldr	r1, [sp, #20]
 8011f86:	9601      	str	r6, [sp, #4]
 8011f88:	464a      	mov	r2, r9
 8011f8a:	4638      	mov	r0, r7
 8011f8c:	47a8      	blx	r5
 8011f8e:	2301      	movs	r3, #1
 8011f90:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8011f94:	69e3      	ldr	r3, [r4, #28]
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d1d6      	bne.n	8011f48 <read_submessage_format+0x54>
 8011f9a:	e7d7      	b.n	8011f4c <read_submessage_format+0x58>
 8011f9c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8011fa0:	2a00      	cmp	r2, #0
 8011fa2:	d0f8      	beq.n	8011f96 <read_submessage_format+0xa2>
 8011fa4:	a906      	add	r1, sp, #24
 8011fa6:	a80c      	add	r0, sp, #48	; 0x30
 8011fa8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8011faa:	f002 fc89 	bl	80148c0 <uxr_deserialize_SampleIdentity>
 8011fae:	2800      	cmp	r0, #0
 8011fb0:	d13c      	bne.n	801202c <read_submessage_format+0x138>
 8011fb2:	69e3      	ldr	r3, [r4, #28]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d1c7      	bne.n	8011f48 <read_submessage_format+0x54>
 8011fb8:	e7c8      	b.n	8011f4c <read_submessage_format+0x58>
 8011fba:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8011fbe:	b132      	cbz	r2, 8011fce <read_submessage_format+0xda>
 8011fc0:	a906      	add	r1, sp, #24
 8011fc2:	a80c      	add	r0, sp, #48	; 0x30
 8011fc4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8011fc6:	f002 f939 	bl	801423c <uxr_deserialize_BaseObjectRequest>
 8011fca:	b930      	cbnz	r0, 8011fda <read_submessage_format+0xe6>
 8011fcc:	69e3      	ldr	r3, [r4, #28]
 8011fce:	68a2      	ldr	r2, [r4, #8]
 8011fd0:	4432      	add	r2, r6
 8011fd2:	60a2      	str	r2, [r4, #8]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d1b7      	bne.n	8011f48 <read_submessage_format+0x54>
 8011fd8:	e7b8      	b.n	8011f4c <read_submessage_format+0x58>
 8011fda:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8011fde:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011fe0:	1a52      	subs	r2, r2, r1
 8011fe2:	a80c      	add	r0, sp, #48	; 0x30
 8011fe4:	1aed      	subs	r5, r5, r3
 8011fe6:	f7ff fc7f 	bl	80118e8 <ucdr_init_buffer>
 8011fea:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8011fee:	a80c      	add	r0, sp, #48	; 0x30
 8011ff0:	f7ff fc50 	bl	8011894 <ucdr_set_on_full_buffer_callback>
 8011ff4:	4435      	add	r5, r6
 8011ff6:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8011ffa:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8011ffe:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8012002:	9002      	str	r0, [sp, #8]
 8012004:	2207      	movs	r2, #7
 8012006:	f88d 2016 	strb.w	r2, [sp, #22]
 801200a:	b2ad      	uxth	r5, r5
 801200c:	aa0c      	add	r2, sp, #48	; 0x30
 801200e:	9200      	str	r2, [sp, #0]
 8012010:	9501      	str	r5, [sp, #4]
 8012012:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8012016:	b29b      	uxth	r3, r3
 8012018:	9905      	ldr	r1, [sp, #20]
 801201a:	f8d7 50ac 	ldr.w	r5, [r7, #172]	; 0xac
 801201e:	464a      	mov	r2, r9
 8012020:	4638      	mov	r0, r7
 8012022:	47a8      	blx	r5
 8012024:	2301      	movs	r3, #1
 8012026:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 801202a:	e7cf      	b.n	8011fcc <read_submessage_format+0xd8>
 801202c:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8012030:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012032:	1a52      	subs	r2, r2, r1
 8012034:	a80c      	add	r0, sp, #48	; 0x30
 8012036:	1aed      	subs	r5, r5, r3
 8012038:	f7ff fc56 	bl	80118e8 <ucdr_init_buffer>
 801203c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8012040:	a80c      	add	r0, sp, #48	; 0x30
 8012042:	f7ff fc27 	bl	8011894 <ucdr_set_on_full_buffer_callback>
 8012046:	4435      	add	r5, r6
 8012048:	2308      	movs	r3, #8
 801204a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 801204e:	f88d 3016 	strb.w	r3, [sp, #22]
 8012052:	b2ad      	uxth	r5, r5
 8012054:	ab0c      	add	r3, sp, #48	; 0x30
 8012056:	9300      	str	r3, [sp, #0]
 8012058:	9002      	str	r0, [sp, #8]
 801205a:	9501      	str	r5, [sp, #4]
 801205c:	ab06      	add	r3, sp, #24
 801205e:	9905      	ldr	r1, [sp, #20]
 8012060:	f8d7 50a4 	ldr.w	r5, [r7, #164]	; 0xa4
 8012064:	464a      	mov	r2, r9
 8012066:	4638      	mov	r0, r7
 8012068:	47a8      	blx	r5
 801206a:	2301      	movs	r3, #1
 801206c:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8012070:	e79f      	b.n	8011fb2 <read_submessage_format+0xbe>
 8012072:	bf00      	nop

08012074 <on_get_fragmentation_info>:
 8012074:	b500      	push	{lr}
 8012076:	b08b      	sub	sp, #44	; 0x2c
 8012078:	4601      	mov	r1, r0
 801207a:	2204      	movs	r2, #4
 801207c:	a802      	add	r0, sp, #8
 801207e:	f7ff fc33 	bl	80118e8 <ucdr_init_buffer>
 8012082:	f10d 0305 	add.w	r3, sp, #5
 8012086:	a802      	add	r0, sp, #8
 8012088:	f10d 0206 	add.w	r2, sp, #6
 801208c:	a901      	add	r1, sp, #4
 801208e:	f001 f9eb 	bl	8013468 <uxr_read_submessage_header>
 8012092:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012096:	2b0d      	cmp	r3, #13
 8012098:	d003      	beq.n	80120a2 <on_get_fragmentation_info+0x2e>
 801209a:	2000      	movs	r0, #0
 801209c:	b00b      	add	sp, #44	; 0x2c
 801209e:	f85d fb04 	ldr.w	pc, [sp], #4
 80120a2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80120a6:	f013 0f02 	tst.w	r3, #2
 80120aa:	bf14      	ite	ne
 80120ac:	2002      	movne	r0, #2
 80120ae:	2001      	moveq	r0, #1
 80120b0:	b00b      	add	sp, #44	; 0x2c
 80120b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80120b6:	bf00      	nop

080120b8 <read_submessage_get_info>:
 80120b8:	b570      	push	{r4, r5, r6, lr}
 80120ba:	2500      	movs	r5, #0
 80120bc:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 80120c0:	4604      	mov	r4, r0
 80120c2:	f44f 7224 	mov.w	r2, #656	; 0x290
 80120c6:	460e      	mov	r6, r1
 80120c8:	a810      	add	r0, sp, #64	; 0x40
 80120ca:	4629      	mov	r1, r5
 80120cc:	e9cd 5503 	strd	r5, r5, [sp, #12]
 80120d0:	f008 fa02 	bl	801a4d8 <memset>
 80120d4:	a903      	add	r1, sp, #12
 80120d6:	4630      	mov	r0, r6
 80120d8:	f002 fa6e 	bl	80145b8 <uxr_deserialize_GET_INFO_Payload>
 80120dc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80120e0:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80120e4:	4620      	mov	r0, r4
 80120e6:	f001 f833 	bl	8013150 <uxr_session_header_offset>
 80120ea:	462b      	mov	r3, r5
 80120ec:	9000      	str	r0, [sp, #0]
 80120ee:	a905      	add	r1, sp, #20
 80120f0:	a808      	add	r0, sp, #32
 80120f2:	220c      	movs	r2, #12
 80120f4:	f7ff fbe6 	bl	80118c4 <ucdr_init_buffer_origin_offset>
 80120f8:	a910      	add	r1, sp, #64	; 0x40
 80120fa:	a808      	add	r0, sp, #32
 80120fc:	f002 face 	bl	801469c <uxr_serialize_INFO_Payload>
 8012100:	9b08      	ldr	r3, [sp, #32]
 8012102:	462a      	mov	r2, r5
 8012104:	4629      	mov	r1, r5
 8012106:	4620      	mov	r0, r4
 8012108:	f000 ffca 	bl	80130a0 <uxr_stamp_session_header>
 801210c:	a808      	add	r0, sp, #32
 801210e:	f7ff fc17 	bl	8011940 <ucdr_buffer_length>
 8012112:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012114:	4602      	mov	r2, r0
 8012116:	a905      	add	r1, sp, #20
 8012118:	e9d3 0400 	ldrd	r0, r4, [r3]
 801211c:	47a0      	blx	r4
 801211e:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 8012122:	bd70      	pop	{r4, r5, r6, pc}

08012124 <write_submessage_acknack.isra.0>:
 8012124:	b570      	push	{r4, r5, r6, lr}
 8012126:	b092      	sub	sp, #72	; 0x48
 8012128:	4605      	mov	r5, r0
 801212a:	460e      	mov	r6, r1
 801212c:	4614      	mov	r4, r2
 801212e:	f001 f80f 	bl	8013150 <uxr_session_header_offset>
 8012132:	a905      	add	r1, sp, #20
 8012134:	9000      	str	r0, [sp, #0]
 8012136:	2300      	movs	r3, #0
 8012138:	a80a      	add	r0, sp, #40	; 0x28
 801213a:	2211      	movs	r2, #17
 801213c:	f7ff fbc2 	bl	80118c4 <ucdr_init_buffer_origin_offset>
 8012140:	2218      	movs	r2, #24
 8012142:	fb02 5404 	mla	r4, r2, r4, r5
 8012146:	2300      	movs	r3, #0
 8012148:	2205      	movs	r2, #5
 801214a:	3450      	adds	r4, #80	; 0x50
 801214c:	a80a      	add	r0, sp, #40	; 0x28
 801214e:	210a      	movs	r1, #10
 8012150:	f001 f970 	bl	8013434 <uxr_buffer_submessage_header>
 8012154:	a903      	add	r1, sp, #12
 8012156:	4620      	mov	r0, r4
 8012158:	f006 fa84 	bl	8018664 <uxr_compute_acknack>
 801215c:	a903      	add	r1, sp, #12
 801215e:	ba43      	rev16	r3, r0
 8012160:	a80a      	add	r0, sp, #40	; 0x28
 8012162:	f8ad 300e 	strh.w	r3, [sp, #14]
 8012166:	f88d 6010 	strb.w	r6, [sp, #16]
 801216a:	f002 fb07 	bl	801477c <uxr_serialize_ACKNACK_Payload>
 801216e:	2200      	movs	r2, #0
 8012170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012172:	4611      	mov	r1, r2
 8012174:	4628      	mov	r0, r5
 8012176:	f000 ff93 	bl	80130a0 <uxr_stamp_session_header>
 801217a:	a80a      	add	r0, sp, #40	; 0x28
 801217c:	f7ff fbe0 	bl	8011940 <ucdr_buffer_length>
 8012180:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8012182:	4602      	mov	r2, r0
 8012184:	a905      	add	r1, sp, #20
 8012186:	e9d3 0400 	ldrd	r0, r4, [r3]
 801218a:	47a0      	blx	r4
 801218c:	b012      	add	sp, #72	; 0x48
 801218e:	bd70      	pop	{r4, r5, r6, pc}

08012190 <uxr_init_session>:
 8012190:	b5d0      	push	{r4, r6, r7, lr}
 8012192:	2300      	movs	r3, #0
 8012194:	2600      	movs	r6, #0
 8012196:	2700      	movs	r7, #0
 8012198:	e9c0 6726 	strd	r6, r7, [r0, #152]	; 0x98
 801219c:	4604      	mov	r4, r0
 801219e:	6701      	str	r1, [r0, #112]	; 0x70
 80121a0:	e9c0 331d 	strd	r3, r3, [r0, #116]	; 0x74
 80121a4:	e9c0 331f 	strd	r3, r3, [r0, #124]	; 0x7c
 80121a8:	e9c0 3321 	strd	r3, r3, [r0, #132]	; 0x84
 80121ac:	e9c0 3323 	strd	r3, r3, [r0, #140]	; 0x8c
 80121b0:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
 80121b4:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 80121b8:	2181      	movs	r1, #129	; 0x81
 80121ba:	f000 fedb 	bl	8012f74 <uxr_init_session_info>
 80121be:	f104 0008 	add.w	r0, r4, #8
 80121c2:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
 80121c6:	f001 b851 	b.w	801326c <uxr_init_stream_storage>
 80121ca:	bf00      	nop

080121cc <uxr_set_status_callback>:
 80121cc:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 80121d0:	4770      	bx	lr
 80121d2:	bf00      	nop

080121d4 <uxr_set_topic_callback>:
 80121d4:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 80121d8:	4770      	bx	lr
 80121da:	bf00      	nop

080121dc <uxr_set_request_callback>:
 80121dc:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 80121e0:	4770      	bx	lr
 80121e2:	bf00      	nop

080121e4 <uxr_set_reply_callback>:
 80121e4:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 80121e8:	4770      	bx	lr
 80121ea:	bf00      	nop

080121ec <uxr_create_output_best_effort_stream>:
 80121ec:	b510      	push	{r4, lr}
 80121ee:	b084      	sub	sp, #16
 80121f0:	e9cd 2100 	strd	r2, r1, [sp]
 80121f4:	4604      	mov	r4, r0
 80121f6:	f000 ffab 	bl	8013150 <uxr_session_header_offset>
 80121fa:	e9dd 2100 	ldrd	r2, r1, [sp]
 80121fe:	4603      	mov	r3, r0
 8012200:	f104 0008 	add.w	r0, r4, #8
 8012204:	b004      	add	sp, #16
 8012206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801220a:	f001 b879 	b.w	8013300 <uxr_add_output_best_effort_buffer>
 801220e:	bf00      	nop

08012210 <uxr_create_output_reliable_stream>:
 8012210:	b530      	push	{r4, r5, lr}
 8012212:	b089      	sub	sp, #36	; 0x24
 8012214:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8012218:	9303      	str	r3, [sp, #12]
 801221a:	4604      	mov	r4, r0
 801221c:	f000 ff98 	bl	8013150 <uxr_session_header_offset>
 8012220:	4605      	mov	r5, r0
 8012222:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8012226:	9905      	ldr	r1, [sp, #20]
 8012228:	9500      	str	r5, [sp, #0]
 801222a:	f104 0008 	add.w	r0, r4, #8
 801222e:	f001 f879 	bl	8013324 <uxr_add_output_reliable_buffer>
 8012232:	2200      	movs	r2, #0
 8012234:	b2c3      	uxtb	r3, r0
 8012236:	f363 0207 	bfi	r2, r3, #0, #8
 801223a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801223e:	f363 220f 	bfi	r2, r3, #8, #8
 8012242:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8012246:	f363 4217 	bfi	r2, r3, #16, #8
 801224a:	0e03      	lsrs	r3, r0, #24
 801224c:	f363 621f 	bfi	r2, r3, #24, #8
 8012250:	4610      	mov	r0, r2
 8012252:	b009      	add	sp, #36	; 0x24
 8012254:	bd30      	pop	{r4, r5, pc}
 8012256:	bf00      	nop

08012258 <uxr_create_input_best_effort_stream>:
 8012258:	b082      	sub	sp, #8
 801225a:	3008      	adds	r0, #8
 801225c:	b002      	add	sp, #8
 801225e:	f001 b87b 	b.w	8013358 <uxr_add_input_best_effort_buffer>
 8012262:	bf00      	nop

08012264 <uxr_create_input_reliable_stream>:
 8012264:	b510      	push	{r4, lr}
 8012266:	b084      	sub	sp, #16
 8012268:	4c0b      	ldr	r4, [pc, #44]	; (8012298 <uxr_create_input_reliable_stream+0x34>)
 801226a:	9400      	str	r4, [sp, #0]
 801226c:	3008      	adds	r0, #8
 801226e:	f001 f889 	bl	8013384 <uxr_add_input_reliable_buffer>
 8012272:	2200      	movs	r2, #0
 8012274:	b2c3      	uxtb	r3, r0
 8012276:	f363 0207 	bfi	r2, r3, #0, #8
 801227a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801227e:	f363 220f 	bfi	r2, r3, #8, #8
 8012282:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8012286:	f363 4217 	bfi	r2, r3, #16, #8
 801228a:	0e03      	lsrs	r3, r0, #24
 801228c:	f363 621f 	bfi	r2, r3, #24, #8
 8012290:	4610      	mov	r0, r2
 8012292:	b004      	add	sp, #16
 8012294:	bd10      	pop	{r4, pc}
 8012296:	bf00      	nop
 8012298:	08012075 	.word	0x08012075

0801229c <uxr_epoch_nanos>:
 801229c:	b510      	push	{r4, lr}
 801229e:	4604      	mov	r4, r0
 80122a0:	f001 f92a 	bl	80134f8 <uxr_nanos>
 80122a4:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 80122a8:	1ac0      	subs	r0, r0, r3
 80122aa:	eb61 0102 	sbc.w	r1, r1, r2
 80122ae:	bd10      	pop	{r4, pc}

080122b0 <uxr_flash_output_streams>:
 80122b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80122b4:	7e03      	ldrb	r3, [r0, #24]
 80122b6:	b084      	sub	sp, #16
 80122b8:	4604      	mov	r4, r0
 80122ba:	b1fb      	cbz	r3, 80122fc <uxr_flash_output_streams+0x4c>
 80122bc:	f04f 0900 	mov.w	r9, #0
 80122c0:	4648      	mov	r0, r9
 80122c2:	f10d 0802 	add.w	r8, sp, #2
 80122c6:	af03      	add	r7, sp, #12
 80122c8:	ae02      	add	r6, sp, #8
 80122ca:	2201      	movs	r2, #1
 80122cc:	4611      	mov	r1, r2
 80122ce:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 80122d2:	f000 ff75 	bl	80131c0 <uxr_stream_id>
 80122d6:	3508      	adds	r5, #8
 80122d8:	4684      	mov	ip, r0
 80122da:	4643      	mov	r3, r8
 80122dc:	4628      	mov	r0, r5
 80122de:	463a      	mov	r2, r7
 80122e0:	4631      	mov	r1, r6
 80122e2:	f8cd c004 	str.w	ip, [sp, #4]
 80122e6:	f006 fa45 	bl	8018774 <uxr_prepare_best_effort_buffer_to_send>
 80122ea:	2800      	cmp	r0, #0
 80122ec:	d13d      	bne.n	801236a <uxr_flash_output_streams+0xba>
 80122ee:	7e23      	ldrb	r3, [r4, #24]
 80122f0:	f109 0901 	add.w	r9, r9, #1
 80122f4:	fa5f f089 	uxtb.w	r0, r9
 80122f8:	4283      	cmp	r3, r0
 80122fa:	d8e6      	bhi.n	80122ca <uxr_flash_output_streams+0x1a>
 80122fc:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8012300:	b383      	cbz	r3, 8012364 <uxr_flash_output_streams+0xb4>
 8012302:	f04f 0900 	mov.w	r9, #0
 8012306:	4648      	mov	r0, r9
 8012308:	f10d 0802 	add.w	r8, sp, #2
 801230c:	af03      	add	r7, sp, #12
 801230e:	ae02      	add	r6, sp, #8
 8012310:	2201      	movs	r2, #1
 8012312:	2102      	movs	r1, #2
 8012314:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8012318:	f000 ff52 	bl	80131c0 <uxr_stream_id>
 801231c:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8012320:	3520      	adds	r5, #32
 8012322:	9001      	str	r0, [sp, #4]
 8012324:	e00c      	b.n	8012340 <uxr_flash_output_streams+0x90>
 8012326:	9b02      	ldr	r3, [sp, #8]
 8012328:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801232c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8012330:	f000 feb6 	bl	80130a0 <uxr_stamp_session_header>
 8012334:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012336:	9a03      	ldr	r2, [sp, #12]
 8012338:	9902      	ldr	r1, [sp, #8]
 801233a:	e9d3 0a00 	ldrd	r0, sl, [r3]
 801233e:	47d0      	blx	sl
 8012340:	4643      	mov	r3, r8
 8012342:	463a      	mov	r2, r7
 8012344:	4631      	mov	r1, r6
 8012346:	4628      	mov	r0, r5
 8012348:	f006 fc1c 	bl	8018b84 <uxr_prepare_next_reliable_buffer_to_send>
 801234c:	4603      	mov	r3, r0
 801234e:	4620      	mov	r0, r4
 8012350:	2b00      	cmp	r3, #0
 8012352:	d1e8      	bne.n	8012326 <uxr_flash_output_streams+0x76>
 8012354:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8012358:	f109 0901 	add.w	r9, r9, #1
 801235c:	fa5f f089 	uxtb.w	r0, r9
 8012360:	4283      	cmp	r3, r0
 8012362:	d8d5      	bhi.n	8012310 <uxr_flash_output_streams+0x60>
 8012364:	b004      	add	sp, #16
 8012366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801236a:	9b02      	ldr	r3, [sp, #8]
 801236c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8012370:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8012374:	4620      	mov	r0, r4
 8012376:	f000 fe93 	bl	80130a0 <uxr_stamp_session_header>
 801237a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801237c:	9a03      	ldr	r2, [sp, #12]
 801237e:	9902      	ldr	r1, [sp, #8]
 8012380:	e9d3 0500 	ldrd	r0, r5, [r3]
 8012384:	47a8      	blx	r5
 8012386:	f109 0901 	add.w	r9, r9, #1
 801238a:	7e23      	ldrb	r3, [r4, #24]
 801238c:	fa5f f089 	uxtb.w	r0, r9
 8012390:	4283      	cmp	r3, r0
 8012392:	d89a      	bhi.n	80122ca <uxr_flash_output_streams+0x1a>
 8012394:	e7b2      	b.n	80122fc <uxr_flash_output_streams+0x4c>
 8012396:	bf00      	nop

08012398 <read_submessage_info>:
 8012398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801239c:	460d      	mov	r5, r1
 801239e:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 80123a2:	4669      	mov	r1, sp
 80123a4:	4607      	mov	r7, r0
 80123a6:	4628      	mov	r0, r5
 80123a8:	f002 f80c 	bl	80143c4 <uxr_deserialize_BaseObjectReply>
 80123ac:	a902      	add	r1, sp, #8
 80123ae:	4604      	mov	r4, r0
 80123b0:	4628      	mov	r0, r5
 80123b2:	f89d 8005 	ldrb.w	r8, [sp, #5]
 80123b6:	f7fe fad3 	bl	8010960 <ucdr_deserialize_bool>
 80123ba:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80123be:	4004      	ands	r4, r0
 80123c0:	b2e4      	uxtb	r4, r4
 80123c2:	b95b      	cbnz	r3, 80123dc <read_submessage_info+0x44>
 80123c4:	a987      	add	r1, sp, #540	; 0x21c
 80123c6:	4628      	mov	r0, r5
 80123c8:	f7fe faca 	bl	8010960 <ucdr_deserialize_bool>
 80123cc:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 80123d0:	4606      	mov	r6, r0
 80123d2:	b94b      	cbnz	r3, 80123e8 <read_submessage_info+0x50>
 80123d4:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 80123d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123dc:	a903      	add	r1, sp, #12
 80123de:	4628      	mov	r0, r5
 80123e0:	f001 fe7e 	bl	80140e0 <uxr_deserialize_ObjectVariant>
 80123e4:	4004      	ands	r4, r0
 80123e6:	e7ed      	b.n	80123c4 <read_submessage_info+0x2c>
 80123e8:	a988      	add	r1, sp, #544	; 0x220
 80123ea:	4628      	mov	r0, r5
 80123ec:	f7fe fae8 	bl	80109c0 <ucdr_deserialize_uint8_t>
 80123f0:	4234      	tst	r4, r6
 80123f2:	d0ef      	beq.n	80123d4 <read_submessage_info+0x3c>
 80123f4:	2800      	cmp	r0, #0
 80123f6:	d0ed      	beq.n	80123d4 <read_submessage_info+0x3c>
 80123f8:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 80123fc:	2b0d      	cmp	r3, #13
 80123fe:	d1e9      	bne.n	80123d4 <read_submessage_info+0x3c>
 8012400:	4628      	mov	r0, r5
 8012402:	a98a      	add	r1, sp, #552	; 0x228
 8012404:	f7ff f882 	bl	801150c <ucdr_deserialize_int16_t>
 8012408:	b140      	cbz	r0, 801241c <read_submessage_info+0x84>
 801240a:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 801240e:	2b00      	cmp	r3, #0
 8012410:	dd07      	ble.n	8012422 <read_submessage_info+0x8a>
 8012412:	f1b8 0f00 	cmp.w	r8, #0
 8012416:	bf14      	ite	ne
 8012418:	2001      	movne	r0, #1
 801241a:	2002      	moveq	r0, #2
 801241c:	f887 00b5 	strb.w	r0, [r7, #181]	; 0xb5
 8012420:	e7d8      	b.n	80123d4 <read_submessage_info+0x3c>
 8012422:	2000      	movs	r0, #0
 8012424:	e7fa      	b.n	801241c <read_submessage_info+0x84>
 8012426:	bf00      	nop

08012428 <read_submessage_list>:
 8012428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801242c:	b098      	sub	sp, #96	; 0x60
 801242e:	f8df 9304 	ldr.w	r9, [pc, #772]	; 8012734 <read_submessage_list+0x30c>
 8012432:	920b      	str	r2, [sp, #44]	; 0x2c
 8012434:	4604      	mov	r4, r0
 8012436:	4688      	mov	r8, r1
 8012438:	f10d 0337 	add.w	r3, sp, #55	; 0x37
 801243c:	aa0e      	add	r2, sp, #56	; 0x38
 801243e:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 8012442:	4640      	mov	r0, r8
 8012444:	f001 f810 	bl	8013468 <uxr_read_submessage_header>
 8012448:	2800      	cmp	r0, #0
 801244a:	f000 813d 	beq.w	80126c8 <read_submessage_list+0x2a0>
 801244e:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8012452:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 8012456:	3b02      	subs	r3, #2
 8012458:	2b0d      	cmp	r3, #13
 801245a:	d8ed      	bhi.n	8012438 <read_submessage_list+0x10>
 801245c:	a101      	add	r1, pc, #4	; (adr r1, 8012464 <read_submessage_list+0x3c>)
 801245e:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012462:	bf00      	nop
 8012464:	080126bf 	.word	0x080126bf
 8012468:	08012439 	.word	0x08012439
 801246c:	080126af 	.word	0x080126af
 8012470:	08012653 	.word	0x08012653
 8012474:	08012649 	.word	0x08012649
 8012478:	08012439 	.word	0x08012439
 801247c:	08012439 	.word	0x08012439
 8012480:	080125ab 	.word	0x080125ab
 8012484:	0801253d 	.word	0x0801253d
 8012488:	080124fb 	.word	0x080124fb
 801248c:	08012439 	.word	0x08012439
 8012490:	08012439 	.word	0x08012439
 8012494:	08012439 	.word	0x08012439
 8012498:	0801249d 	.word	0x0801249d
 801249c:	a912      	add	r1, sp, #72	; 0x48
 801249e:	4640      	mov	r0, r8
 80124a0:	f002 f9bc 	bl	801481c <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 80124a4:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 80124a8:	2d00      	cmp	r5, #0
 80124aa:	f000 8115 	beq.w	80126d8 <read_submessage_list+0x2b0>
 80124ae:	f001 f823 	bl	80134f8 <uxr_nanos>
 80124b2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80124b4:	460b      	mov	r3, r1
 80124b6:	9916      	ldr	r1, [sp, #88]	; 0x58
 80124b8:	2700      	movs	r7, #0
 80124ba:	fbc9 6701 	smlal	r6, r7, r9, r1
 80124be:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80124c2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80124c4:	4602      	mov	r2, r0
 80124c6:	9812      	ldr	r0, [sp, #72]	; 0x48
 80124c8:	460e      	mov	r6, r1
 80124ca:	2700      	movs	r7, #0
 80124cc:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80124d0:	9106      	str	r1, [sp, #24]
 80124d2:	fbc9 6700 	smlal	r6, r7, r9, r0
 80124d6:	9915      	ldr	r1, [sp, #84]	; 0x54
 80124d8:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80124dc:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80124de:	2700      	movs	r7, #0
 80124e0:	4608      	mov	r0, r1
 80124e2:	4639      	mov	r1, r7
 80124e4:	fbc9 0106 	smlal	r0, r1, r9, r6
 80124e8:	e9cd 0100 	strd	r0, r1, [sp]
 80124ec:	4620      	mov	r0, r4
 80124ee:	47a8      	blx	r5
 80124f0:	f04f 0301 	mov.w	r3, #1
 80124f4:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 80124f8:	e79e      	b.n	8012438 <read_submessage_list+0x10>
 80124fa:	a912      	add	r1, sp, #72	; 0x48
 80124fc:	4640      	mov	r0, r8
 80124fe:	f002 f97b 	bl	80147f8 <uxr_deserialize_HEARTBEAT_Payload>
 8012502:	2100      	movs	r1, #0
 8012504:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8012508:	f000 fe84 	bl	8013214 <uxr_stream_id_from_raw>
 801250c:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8012510:	4603      	mov	r3, r0
 8012512:	4629      	mov	r1, r5
 8012514:	f104 0008 	add.w	r0, r4, #8
 8012518:	9311      	str	r3, [sp, #68]	; 0x44
 801251a:	f000 ff69 	bl	80133f0 <uxr_get_input_reliable_stream>
 801251e:	2800      	cmp	r0, #0
 8012520:	d08a      	beq.n	8012438 <read_submessage_list+0x10>
 8012522:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 8012526:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
 801252a:	f006 f88f 	bl	801864c <uxr_process_heartbeat>
 801252e:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 8012532:	462a      	mov	r2, r5
 8012534:	4620      	mov	r0, r4
 8012536:	f7ff fdf5 	bl	8012124 <write_submessage_acknack.isra.0>
 801253a:	e77d      	b.n	8012438 <read_submessage_list+0x10>
 801253c:	a912      	add	r1, sp, #72	; 0x48
 801253e:	4640      	mov	r0, r8
 8012540:	f002 f932 	bl	80147a8 <uxr_deserialize_ACKNACK_Payload>
 8012544:	2100      	movs	r1, #0
 8012546:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 801254a:	f000 fe63 	bl	8013214 <uxr_stream_id_from_raw>
 801254e:	4603      	mov	r3, r0
 8012550:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8012554:	f104 0008 	add.w	r0, r4, #8
 8012558:	930f      	str	r3, [sp, #60]	; 0x3c
 801255a:	f000 ff33 	bl	80133c4 <uxr_get_output_reliable_stream>
 801255e:	4605      	mov	r5, r0
 8012560:	2800      	cmp	r0, #0
 8012562:	f43f af69 	beq.w	8012438 <read_submessage_list+0x10>
 8012566:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 801256a:	f89d 104b 	ldrb.w	r1, [sp, #75]	; 0x4b
 801256e:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8012572:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8012576:	b289      	uxth	r1, r1
 8012578:	f006 fbac 	bl	8018cd4 <uxr_process_acknack>
 801257c:	4628      	mov	r0, r5
 801257e:	f006 fb6f 	bl	8018c60 <uxr_begin_output_nack_buffer_it>
 8012582:	af10      	add	r7, sp, #64	; 0x40
 8012584:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
 8012588:	e005      	b.n	8012596 <read_submessage_list+0x16e>
 801258a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801258c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801258e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8012590:	e9d3 0600 	ldrd	r0, r6, [r3]
 8012594:	47b0      	blx	r6
 8012596:	f10d 033a 	add.w	r3, sp, #58	; 0x3a
 801259a:	aa11      	add	r2, sp, #68	; 0x44
 801259c:	4639      	mov	r1, r7
 801259e:	4628      	mov	r0, r5
 80125a0:	f006 fb60 	bl	8018c64 <uxr_next_reliable_nack_buffer_to_send>
 80125a4:	2800      	cmp	r0, #0
 80125a6:	d1f0      	bne.n	801258a <read_submessage_list+0x162>
 80125a8:	e746      	b.n	8012438 <read_submessage_list+0x10>
 80125aa:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 80125ae:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
 80125b2:	af10      	add	r7, sp, #64	; 0x40
 80125b4:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 80125b8:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
 80125bc:	4639      	mov	r1, r7
 80125be:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80125c2:	f89d 6037 	ldrb.w	r6, [sp, #55]	; 0x37
 80125c6:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 80125ca:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
 80125ce:	4640      	mov	r0, r8
 80125d0:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 80125d4:	f001 fe32 	bl	801423c <uxr_deserialize_BaseObjectRequest>
 80125d8:	4638      	mov	r0, r7
 80125da:	a911      	add	r1, sp, #68	; 0x44
 80125dc:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 80125e0:	f000 fddc 	bl	801319c <uxr_parse_base_object_request>
 80125e4:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 80125e8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80125ea:	f8bd 703a 	ldrh.w	r7, [sp, #58]	; 0x3a
 80125ee:	9112      	str	r1, [sp, #72]	; 0x48
 80125f0:	3d04      	subs	r5, #4
 80125f2:	f006 060e 	and.w	r6, r6, #14
 80125f6:	b2ad      	uxth	r5, r5
 80125f8:	f1ba 0f00 	cmp.w	sl, #0
 80125fc:	d006      	beq.n	801260c <read_submessage_list+0x1e4>
 80125fe:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8012602:	9300      	str	r3, [sp, #0]
 8012604:	463a      	mov	r2, r7
 8012606:	2300      	movs	r3, #0
 8012608:	4620      	mov	r0, r4
 801260a:	47d0      	blx	sl
 801260c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 801260e:	b168      	cbz	r0, 801262c <read_submessage_list+0x204>
 8012610:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8012612:	2300      	movs	r3, #0
 8012614:	3902      	subs	r1, #2
 8012616:	e002      	b.n	801261e <read_submessage_list+0x1f6>
 8012618:	3301      	adds	r3, #1
 801261a:	4283      	cmp	r3, r0
 801261c:	d006      	beq.n	801262c <read_submessage_list+0x204>
 801261e:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 8012622:	42ba      	cmp	r2, r7
 8012624:	d1f8      	bne.n	8012618 <read_submessage_list+0x1f0>
 8012626:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8012628:	2100      	movs	r1, #0
 801262a:	54d1      	strb	r1, [r2, r3]
 801262c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801262e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012630:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8012634:	9302      	str	r3, [sp, #8]
 8012636:	e9cd 1000 	strd	r1, r0, [sp]
 801263a:	4633      	mov	r3, r6
 801263c:	462a      	mov	r2, r5
 801263e:	4641      	mov	r1, r8
 8012640:	4620      	mov	r0, r4
 8012642:	f7ff fc57 	bl	8011ef4 <read_submessage_format>
 8012646:	e6f7      	b.n	8012438 <read_submessage_list+0x10>
 8012648:	4641      	mov	r1, r8
 801264a:	4620      	mov	r0, r4
 801264c:	f7ff fea4 	bl	8012398 <read_submessage_info>
 8012650:	e6f2      	b.n	8012438 <read_submessage_list+0x10>
 8012652:	2a00      	cmp	r2, #0
 8012654:	d03b      	beq.n	80126ce <read_submessage_list+0x2a6>
 8012656:	a912      	add	r1, sp, #72	; 0x48
 8012658:	4640      	mov	r0, r8
 801265a:	f002 f801 	bl	8014660 <uxr_deserialize_STATUS_Payload>
 801265e:	a910      	add	r1, sp, #64	; 0x40
 8012660:	aa0f      	add	r2, sp, #60	; 0x3c
 8012662:	a812      	add	r0, sp, #72	; 0x48
 8012664:	f000 fd9a 	bl	801319c <uxr_parse_base_object_request>
 8012668:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 801266c:	9910      	ldr	r1, [sp, #64]	; 0x40
 801266e:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8012672:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 8012676:	9111      	str	r1, [sp, #68]	; 0x44
 8012678:	b135      	cbz	r5, 8012688 <read_submessage_list+0x260>
 801267a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 801267e:	9300      	str	r3, [sp, #0]
 8012680:	4632      	mov	r2, r6
 8012682:	463b      	mov	r3, r7
 8012684:	4620      	mov	r0, r4
 8012686:	47a8      	blx	r5
 8012688:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 801268a:	2b00      	cmp	r3, #0
 801268c:	f43f aed4 	beq.w	8012438 <read_submessage_list+0x10>
 8012690:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8012692:	2100      	movs	r1, #0
 8012694:	3802      	subs	r0, #2
 8012696:	e003      	b.n	80126a0 <read_submessage_list+0x278>
 8012698:	3101      	adds	r1, #1
 801269a:	4299      	cmp	r1, r3
 801269c:	f43f aecc 	beq.w	8012438 <read_submessage_list+0x10>
 80126a0:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 80126a4:	42b2      	cmp	r2, r6
 80126a6:	d1f7      	bne.n	8012698 <read_submessage_list+0x270>
 80126a8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80126aa:	545f      	strb	r7, [r3, r1]
 80126ac:	e6c4      	b.n	8012438 <read_submessage_list+0x10>
 80126ae:	2a00      	cmp	r2, #0
 80126b0:	f47f aec2 	bne.w	8012438 <read_submessage_list+0x10>
 80126b4:	4641      	mov	r1, r8
 80126b6:	4620      	mov	r0, r4
 80126b8:	f000 fcb4 	bl	8013024 <uxr_read_create_session_status>
 80126bc:	e6bc      	b.n	8012438 <read_submessage_list+0x10>
 80126be:	4641      	mov	r1, r8
 80126c0:	4620      	mov	r0, r4
 80126c2:	f7ff fcf9 	bl	80120b8 <read_submessage_get_info>
 80126c6:	e6b7      	b.n	8012438 <read_submessage_list+0x10>
 80126c8:	b018      	add	sp, #96	; 0x60
 80126ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126ce:	4641      	mov	r1, r8
 80126d0:	4620      	mov	r0, r4
 80126d2:	f000 fcb3 	bl	801303c <uxr_read_delete_session_status>
 80126d6:	e6af      	b.n	8012438 <read_submessage_list+0x10>
 80126d8:	f000 ff0e 	bl	80134f8 <uxr_nanos>
 80126dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80126de:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80126e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80126e2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80126e4:	2700      	movs	r7, #0
 80126e6:	fbc9 6703 	smlal	r6, r7, r9, r3
 80126ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80126ec:	eb16 0c00 	adds.w	ip, r6, r0
 80126f0:	4618      	mov	r0, r3
 80126f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80126f4:	eb47 0e01 	adc.w	lr, r7, r1
 80126f8:	461e      	mov	r6, r3
 80126fa:	2100      	movs	r1, #0
 80126fc:	2700      	movs	r7, #0
 80126fe:	fbc9 0105 	smlal	r0, r1, r9, r5
 8012702:	fbc9 6702 	smlal	r6, r7, r9, r2
 8012706:	1983      	adds	r3, r0, r6
 8012708:	eb41 0207 	adc.w	r2, r1, r7
 801270c:	ebbc 0303 	subs.w	r3, ip, r3
 8012710:	9308      	str	r3, [sp, #32]
 8012712:	eb6e 0302 	sbc.w	r3, lr, r2
 8012716:	9309      	str	r3, [sp, #36]	; 0x24
 8012718:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 801271c:	0fd3      	lsrs	r3, r2, #31
 801271e:	18c9      	adds	r1, r1, r3
 8012720:	f142 0200 	adc.w	r2, r2, #0
 8012724:	084b      	lsrs	r3, r1, #1
 8012726:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 801272a:	1052      	asrs	r2, r2, #1
 801272c:	e9c4 3226 	strd	r3, r2, [r4, #152]	; 0x98
 8012730:	e6de      	b.n	80124f0 <read_submessage_list+0xc8>
 8012732:	bf00      	nop
 8012734:	3b9aca00 	.word	0x3b9aca00

08012738 <listen_message_reliably>:
 8012738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801273c:	1e0b      	subs	r3, r1, #0
 801273e:	b09d      	sub	sp, #116	; 0x74
 8012740:	bfb8      	it	lt
 8012742:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8012746:	9305      	str	r3, [sp, #20]
 8012748:	4607      	mov	r7, r0
 801274a:	f000 feb9 	bl	80134c0 <uxr_millis>
 801274e:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 8012752:	4681      	mov	r9, r0
 8012754:	2a00      	cmp	r2, #0
 8012756:	f000 8095 	beq.w	8012884 <listen_message_reliably+0x14c>
 801275a:	2600      	movs	r6, #0
 801275c:	f04f 33ff 	mov.w	r3, #4294967295
 8012760:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8012764:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8012768:	4630      	mov	r0, r6
 801276a:	4688      	mov	r8, r1
 801276c:	46ca      	mov	sl, r9
 801276e:	e00f      	b.n	8012790 <listen_message_reliably+0x58>
 8012770:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8012774:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8012778:	42a2      	cmp	r2, r4
 801277a:	eb73 0105 	sbcs.w	r1, r3, r5
 801277e:	bfb8      	it	lt
 8012780:	e9cd 2302 	strdlt	r2, r3, [sp, #8]
 8012784:	3601      	adds	r6, #1
 8012786:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 801278a:	b2f0      	uxtb	r0, r6
 801278c:	4283      	cmp	r3, r0
 801278e:	d951      	bls.n	8012834 <listen_message_reliably+0xfc>
 8012790:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8012794:	2201      	movs	r2, #1
 8012796:	2102      	movs	r1, #2
 8012798:	f000 fd12 	bl	80131c0 <uxr_stream_id>
 801279c:	00e4      	lsls	r4, r4, #3
 801279e:	f104 0520 	add.w	r5, r4, #32
 80127a2:	443d      	add	r5, r7
 80127a4:	4601      	mov	r1, r0
 80127a6:	4643      	mov	r3, r8
 80127a8:	4652      	mov	r2, sl
 80127aa:	4628      	mov	r0, r5
 80127ac:	9109      	str	r1, [sp, #36]	; 0x24
 80127ae:	f006 fa2b 	bl	8018c08 <uxr_update_output_stream_heartbeat_timestamp>
 80127b2:	193b      	adds	r3, r7, r4
 80127b4:	2800      	cmp	r0, #0
 80127b6:	d0db      	beq.n	8012770 <listen_message_reliably+0x38>
 80127b8:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 80127bc:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 80127c0:	4638      	mov	r0, r7
 80127c2:	f000 fcc5 	bl	8013150 <uxr_session_header_offset>
 80127c6:	3501      	adds	r5, #1
 80127c8:	f10d 0b50 	add.w	fp, sp, #80	; 0x50
 80127cc:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80127d0:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 80127d4:	9000      	str	r0, [sp, #0]
 80127d6:	2300      	movs	r3, #0
 80127d8:	4658      	mov	r0, fp
 80127da:	2211      	movs	r2, #17
 80127dc:	a90c      	add	r1, sp, #48	; 0x30
 80127de:	f7ff f871 	bl	80118c4 <ucdr_init_buffer_origin_offset>
 80127e2:	2300      	movs	r3, #0
 80127e4:	2205      	movs	r2, #5
 80127e6:	210b      	movs	r1, #11
 80127e8:	4658      	mov	r0, fp
 80127ea:	f000 fe23 	bl	8013434 <uxr_buffer_submessage_header>
 80127ee:	8968      	ldrh	r0, [r5, #10]
 80127f0:	2101      	movs	r1, #1
 80127f2:	f006 fac7 	bl	8018d84 <uxr_seq_num_add>
 80127f6:	892a      	ldrh	r2, [r5, #8]
 80127f8:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 80127fc:	4603      	mov	r3, r0
 80127fe:	a90a      	add	r1, sp, #40	; 0x28
 8012800:	4658      	mov	r0, fp
 8012802:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8012806:	f88d 902c 	strb.w	r9, [sp, #44]	; 0x2c
 801280a:	f001 ffe1 	bl	80147d0 <uxr_serialize_HEARTBEAT_Payload>
 801280e:	2200      	movs	r2, #0
 8012810:	4611      	mov	r1, r2
 8012812:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012814:	4638      	mov	r0, r7
 8012816:	f000 fc43 	bl	80130a0 <uxr_stamp_session_header>
 801281a:	4658      	mov	r0, fp
 801281c:	f7ff f890 	bl	8011940 <ucdr_buffer_length>
 8012820:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012822:	4602      	mov	r2, r0
 8012824:	a90c      	add	r1, sp, #48	; 0x30
 8012826:	e9d3 0500 	ldrd	r0, r5, [r3]
 801282a:	443c      	add	r4, r7
 801282c:	47a8      	blx	r5
 801282e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8012832:	e79f      	b.n	8012774 <listen_message_reliably+0x3c>
 8012834:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 8012838:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 801283c:	f04f 31ff 	mov.w	r1, #4294967295
 8012840:	4294      	cmp	r4, r2
 8012842:	bf08      	it	eq
 8012844:	428b      	cmpeq	r3, r1
 8012846:	d01d      	beq.n	8012884 <listen_message_reliably+0x14c>
 8012848:	eba3 030a 	sub.w	r3, r3, sl
 801284c:	9905      	ldr	r1, [sp, #20]
 801284e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012850:	2b00      	cmp	r3, #0
 8012852:	bf08      	it	eq
 8012854:	2301      	moveq	r3, #1
 8012856:	4299      	cmp	r1, r3
 8012858:	bfa8      	it	ge
 801285a:	4619      	movge	r1, r3
 801285c:	6894      	ldr	r4, [r2, #8]
 801285e:	6810      	ldr	r0, [r2, #0]
 8012860:	4689      	mov	r9, r1
 8012862:	460b      	mov	r3, r1
 8012864:	aa08      	add	r2, sp, #32
 8012866:	a907      	add	r1, sp, #28
 8012868:	47a0      	blx	r4
 801286a:	b968      	cbnz	r0, 8012888 <listen_message_reliably+0x150>
 801286c:	9b05      	ldr	r3, [sp, #20]
 801286e:	eba3 0309 	sub.w	r3, r3, r9
 8012872:	2b00      	cmp	r3, #0
 8012874:	9305      	str	r3, [sp, #20]
 8012876:	f73f af68 	bgt.w	801274a <listen_message_reliably+0x12>
 801287a:	4604      	mov	r4, r0
 801287c:	4620      	mov	r0, r4
 801287e:	b01d      	add	sp, #116	; 0x74
 8012880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012884:	9b05      	ldr	r3, [sp, #20]
 8012886:	e7e1      	b.n	801284c <listen_message_reliably+0x114>
 8012888:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 801288c:	4604      	mov	r4, r0
 801288e:	a80c      	add	r0, sp, #48	; 0x30
 8012890:	f7ff f82a 	bl	80118e8 <ucdr_init_buffer>
 8012894:	2500      	movs	r5, #0
 8012896:	a90c      	add	r1, sp, #48	; 0x30
 8012898:	f10d 031a 	add.w	r3, sp, #26
 801289c:	aa06      	add	r2, sp, #24
 801289e:	4638      	mov	r0, r7
 80128a0:	f88d 5018 	strb.w	r5, [sp, #24]
 80128a4:	f000 fc12 	bl	80130cc <uxr_read_session_header>
 80128a8:	b918      	cbnz	r0, 80128b2 <listen_message_reliably+0x17a>
 80128aa:	4620      	mov	r0, r4
 80128ac:	b01d      	add	sp, #116	; 0x74
 80128ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128b2:	4629      	mov	r1, r5
 80128b4:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80128b8:	f000 fcac 	bl	8013214 <uxr_stream_id_from_raw>
 80128bc:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80128c0:	2e01      	cmp	r6, #1
 80128c2:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 80128c6:	900a      	str	r0, [sp, #40]	; 0x28
 80128c8:	fa5f fa80 	uxtb.w	sl, r0
 80128cc:	f3c0 2507 	ubfx	r5, r0, #8, #8
 80128d0:	d04b      	beq.n	801296a <listen_message_reliably+0x232>
 80128d2:	2e02      	cmp	r6, #2
 80128d4:	d00f      	beq.n	80128f6 <listen_message_reliably+0x1be>
 80128d6:	2e00      	cmp	r6, #0
 80128d8:	d1e7      	bne.n	80128aa <listen_message_reliably+0x172>
 80128da:	4631      	mov	r1, r6
 80128dc:	4630      	mov	r0, r6
 80128de:	f000 fc99 	bl	8013214 <uxr_stream_id_from_raw>
 80128e2:	a90c      	add	r1, sp, #48	; 0x30
 80128e4:	4602      	mov	r2, r0
 80128e6:	4638      	mov	r0, r7
 80128e8:	920a      	str	r2, [sp, #40]	; 0x28
 80128ea:	f7ff fd9d 	bl	8012428 <read_submessage_list>
 80128ee:	4620      	mov	r0, r4
 80128f0:	b01d      	add	sp, #116	; 0x74
 80128f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128f6:	4629      	mov	r1, r5
 80128f8:	f107 0008 	add.w	r0, r7, #8
 80128fc:	f000 fd78 	bl	80133f0 <uxr_get_input_reliable_stream>
 8012900:	4680      	mov	r8, r0
 8012902:	b348      	cbz	r0, 8012958 <listen_message_reliably+0x220>
 8012904:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012906:	9202      	str	r2, [sp, #8]
 8012908:	a80c      	add	r0, sp, #48	; 0x30
 801290a:	f7ff f81d 	bl	8011948 <ucdr_buffer_remaining>
 801290e:	4603      	mov	r3, r0
 8012910:	f10d 0019 	add.w	r0, sp, #25
 8012914:	9000      	str	r0, [sp, #0]
 8012916:	9a02      	ldr	r2, [sp, #8]
 8012918:	4649      	mov	r1, r9
 801291a:	4640      	mov	r0, r8
 801291c:	f005 fd98 	bl	8018450 <uxr_receive_reliable_message>
 8012920:	b1d0      	cbz	r0, 8012958 <listen_message_reliably+0x220>
 8012922:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8012926:	2b00      	cmp	r3, #0
 8012928:	d037      	beq.n	801299a <listen_message_reliably+0x262>
 801292a:	ae14      	add	r6, sp, #80	; 0x50
 801292c:	f04f 0902 	mov.w	r9, #2
 8012930:	e008      	b.n	8012944 <listen_message_reliably+0x20c>
 8012932:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 8012936:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 801293a:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 801293e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012940:	f7ff fd72 	bl	8012428 <read_submessage_list>
 8012944:	4631      	mov	r1, r6
 8012946:	2204      	movs	r2, #4
 8012948:	4640      	mov	r0, r8
 801294a:	f005 fe01 	bl	8018550 <uxr_next_input_reliable_buffer_available>
 801294e:	4603      	mov	r3, r0
 8012950:	4631      	mov	r1, r6
 8012952:	4638      	mov	r0, r7
 8012954:	2b00      	cmp	r3, #0
 8012956:	d1ec      	bne.n	8012932 <listen_message_reliably+0x1fa>
 8012958:	4638      	mov	r0, r7
 801295a:	462a      	mov	r2, r5
 801295c:	4651      	mov	r1, sl
 801295e:	f7ff fbe1 	bl	8012124 <write_submessage_acknack.isra.0>
 8012962:	4620      	mov	r0, r4
 8012964:	b01d      	add	sp, #116	; 0x74
 8012966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801296a:	4629      	mov	r1, r5
 801296c:	f107 0008 	add.w	r0, r7, #8
 8012970:	f000 fd34 	bl	80133dc <uxr_get_input_best_effort_stream>
 8012974:	2800      	cmp	r0, #0
 8012976:	d098      	beq.n	80128aa <listen_message_reliably+0x172>
 8012978:	4649      	mov	r1, r9
 801297a:	f005 fce5 	bl	8018348 <uxr_receive_best_effort_message>
 801297e:	2800      	cmp	r0, #0
 8012980:	d093      	beq.n	80128aa <listen_message_reliably+0x172>
 8012982:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 8012986:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 801298a:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 801298e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012990:	a90c      	add	r1, sp, #48	; 0x30
 8012992:	4638      	mov	r0, r7
 8012994:	f7ff fd48 	bl	8012428 <read_submessage_list>
 8012998:	e787      	b.n	80128aa <listen_message_reliably+0x172>
 801299a:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 801299e:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 80129a2:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 80129a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80129a8:	a90c      	add	r1, sp, #48	; 0x30
 80129aa:	4638      	mov	r0, r7
 80129ac:	f7ff fd3c 	bl	8012428 <read_submessage_list>
 80129b0:	e7bb      	b.n	801292a <listen_message_reliably+0x1f2>
 80129b2:	bf00      	nop

080129b4 <uxr_run_session_timeout>:
 80129b4:	b570      	push	{r4, r5, r6, lr}
 80129b6:	4604      	mov	r4, r0
 80129b8:	460d      	mov	r5, r1
 80129ba:	f000 fd81 	bl	80134c0 <uxr_millis>
 80129be:	4606      	mov	r6, r0
 80129c0:	4620      	mov	r0, r4
 80129c2:	f7ff fc75 	bl	80122b0 <uxr_flash_output_streams>
 80129c6:	4629      	mov	r1, r5
 80129c8:	4620      	mov	r0, r4
 80129ca:	f7ff feb5 	bl	8012738 <listen_message_reliably>
 80129ce:	f000 fd77 	bl	80134c0 <uxr_millis>
 80129d2:	1b83      	subs	r3, r0, r6
 80129d4:	1ae9      	subs	r1, r5, r3
 80129d6:	2900      	cmp	r1, #0
 80129d8:	dcf6      	bgt.n	80129c8 <uxr_run_session_timeout+0x14>
 80129da:	f104 0008 	add.w	r0, r4, #8
 80129de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80129e2:	f000 bd11 	b.w	8013408 <uxr_output_streams_confirmed>
 80129e6:	bf00      	nop

080129e8 <uxr_run_session_until_data>:
 80129e8:	b570      	push	{r4, r5, r6, lr}
 80129ea:	4604      	mov	r4, r0
 80129ec:	460d      	mov	r5, r1
 80129ee:	f000 fd67 	bl	80134c0 <uxr_millis>
 80129f2:	4606      	mov	r6, r0
 80129f4:	4620      	mov	r0, r4
 80129f6:	f7ff fc5b 	bl	80122b0 <uxr_flash_output_streams>
 80129fa:	2300      	movs	r3, #0
 80129fc:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8012a00:	4629      	mov	r1, r5
 8012a02:	e005      	b.n	8012a10 <uxr_run_session_until_data+0x28>
 8012a04:	f000 fd5c 	bl	80134c0 <uxr_millis>
 8012a08:	1b83      	subs	r3, r0, r6
 8012a0a:	1ae9      	subs	r1, r5, r3
 8012a0c:	2900      	cmp	r1, #0
 8012a0e:	dd07      	ble.n	8012a20 <uxr_run_session_until_data+0x38>
 8012a10:	4620      	mov	r0, r4
 8012a12:	f7ff fe91 	bl	8012738 <listen_message_reliably>
 8012a16:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8012a1a:	2800      	cmp	r0, #0
 8012a1c:	d0f2      	beq.n	8012a04 <uxr_run_session_until_data+0x1c>
 8012a1e:	bd70      	pop	{r4, r5, r6, pc}
 8012a20:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8012a24:	bd70      	pop	{r4, r5, r6, pc}
 8012a26:	bf00      	nop

08012a28 <uxr_run_session_until_confirm_delivery>:
 8012a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a2c:	4606      	mov	r6, r0
 8012a2e:	460d      	mov	r5, r1
 8012a30:	f000 fd46 	bl	80134c0 <uxr_millis>
 8012a34:	4607      	mov	r7, r0
 8012a36:	4630      	mov	r0, r6
 8012a38:	f7ff fc3a 	bl	80122b0 <uxr_flash_output_streams>
 8012a3c:	2d00      	cmp	r5, #0
 8012a3e:	f106 0808 	add.w	r8, r6, #8
 8012a42:	bfa8      	it	ge
 8012a44:	462c      	movge	r4, r5
 8012a46:	da07      	bge.n	8012a58 <uxr_run_session_until_confirm_delivery+0x30>
 8012a48:	e00e      	b.n	8012a68 <uxr_run_session_until_confirm_delivery+0x40>
 8012a4a:	f7ff fe75 	bl	8012738 <listen_message_reliably>
 8012a4e:	f000 fd37 	bl	80134c0 <uxr_millis>
 8012a52:	1bc3      	subs	r3, r0, r7
 8012a54:	1aec      	subs	r4, r5, r3
 8012a56:	d407      	bmi.n	8012a68 <uxr_run_session_until_confirm_delivery+0x40>
 8012a58:	4640      	mov	r0, r8
 8012a5a:	f000 fcd5 	bl	8013408 <uxr_output_streams_confirmed>
 8012a5e:	4603      	mov	r3, r0
 8012a60:	4621      	mov	r1, r4
 8012a62:	4630      	mov	r0, r6
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d0f0      	beq.n	8012a4a <uxr_run_session_until_confirm_delivery+0x22>
 8012a68:	4640      	mov	r0, r8
 8012a6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012a6e:	f000 bccb 	b.w	8013408 <uxr_output_streams_confirmed>
 8012a72:	bf00      	nop

08012a74 <uxr_run_session_until_all_status>:
 8012a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a78:	9d08      	ldr	r5, [sp, #32]
 8012a7a:	460f      	mov	r7, r1
 8012a7c:	4692      	mov	sl, r2
 8012a7e:	461c      	mov	r4, r3
 8012a80:	4606      	mov	r6, r0
 8012a82:	f7ff fc15 	bl	80122b0 <uxr_flash_output_streams>
 8012a86:	b125      	cbz	r5, 8012a92 <uxr_run_session_until_all_status+0x1e>
 8012a88:	462a      	mov	r2, r5
 8012a8a:	21ff      	movs	r1, #255	; 0xff
 8012a8c:	4620      	mov	r0, r4
 8012a8e:	f007 fd23 	bl	801a4d8 <memset>
 8012a92:	e9c6 a41d 	strd	sl, r4, [r6, #116]	; 0x74
 8012a96:	67f5      	str	r5, [r6, #124]	; 0x7c
 8012a98:	f000 fd12 	bl	80134c0 <uxr_millis>
 8012a9c:	f104 39ff 	add.w	r9, r4, #4294967295
 8012aa0:	f1aa 0a02 	sub.w	sl, sl, #2
 8012aa4:	4680      	mov	r8, r0
 8012aa6:	4639      	mov	r1, r7
 8012aa8:	4630      	mov	r0, r6
 8012aaa:	f7ff fe45 	bl	8012738 <listen_message_reliably>
 8012aae:	f000 fd07 	bl	80134c0 <uxr_millis>
 8012ab2:	eba0 0008 	sub.w	r0, r0, r8
 8012ab6:	1a39      	subs	r1, r7, r0
 8012ab8:	b33d      	cbz	r5, 8012b0a <uxr_run_session_until_all_status+0x96>
 8012aba:	46cc      	mov	ip, r9
 8012abc:	464a      	mov	r2, r9
 8012abe:	2301      	movs	r3, #1
 8012ac0:	e002      	b.n	8012ac8 <uxr_run_session_until_all_status+0x54>
 8012ac2:	42ab      	cmp	r3, r5
 8012ac4:	d20c      	bcs.n	8012ae0 <uxr_run_session_until_all_status+0x6c>
 8012ac6:	3301      	adds	r3, #1
 8012ac8:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8012acc:	2cff      	cmp	r4, #255	; 0xff
 8012ace:	d1f8      	bne.n	8012ac2 <uxr_run_session_until_all_status+0x4e>
 8012ad0:	42ab      	cmp	r3, r5
 8012ad2:	f83a 0013 	ldrh.w	r0, [sl, r3, lsl #1]
 8012ad6:	d213      	bcs.n	8012b00 <uxr_run_session_until_all_status+0x8c>
 8012ad8:	2800      	cmp	r0, #0
 8012ada:	d0f4      	beq.n	8012ac6 <uxr_run_session_until_all_status+0x52>
 8012adc:	2900      	cmp	r1, #0
 8012ade:	dce3      	bgt.n	8012aa8 <uxr_run_session_until_all_status+0x34>
 8012ae0:	2300      	movs	r3, #0
 8012ae2:	444d      	add	r5, r9
 8012ae4:	67f3      	str	r3, [r6, #124]	; 0x7c
 8012ae6:	e001      	b.n	8012aec <uxr_run_session_until_all_status+0x78>
 8012ae8:	2b01      	cmp	r3, #1
 8012aea:	d812      	bhi.n	8012b12 <uxr_run_session_until_all_status+0x9e>
 8012aec:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8012af0:	4565      	cmp	r5, ip
 8012af2:	d1f9      	bne.n	8012ae8 <uxr_run_session_until_all_status+0x74>
 8012af4:	2b01      	cmp	r3, #1
 8012af6:	bf8c      	ite	hi
 8012af8:	2000      	movhi	r0, #0
 8012afa:	2001      	movls	r0, #1
 8012afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b00:	2900      	cmp	r1, #0
 8012b02:	dded      	ble.n	8012ae0 <uxr_run_session_until_all_status+0x6c>
 8012b04:	2800      	cmp	r0, #0
 8012b06:	d1cf      	bne.n	8012aa8 <uxr_run_session_until_all_status+0x34>
 8012b08:	e7ea      	b.n	8012ae0 <uxr_run_session_until_all_status+0x6c>
 8012b0a:	67f5      	str	r5, [r6, #124]	; 0x7c
 8012b0c:	2001      	movs	r0, #1
 8012b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b12:	2000      	movs	r0, #0
 8012b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012b18 <uxr_create_session>:
 8012b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b1c:	ed2d 8b02 	vpush	{d8}
 8012b20:	f100 0808 	add.w	r8, r0, #8
 8012b24:	b0a9      	sub	sp, #164	; 0xa4
 8012b26:	4604      	mov	r4, r0
 8012b28:	4640      	mov	r0, r8
 8012b2a:	f000 fba9 	bl	8013280 <uxr_reset_stream_storage>
 8012b2e:	4620      	mov	r0, r4
 8012b30:	f000 fb0e 	bl	8013150 <uxr_session_header_offset>
 8012b34:	a909      	add	r1, sp, #36	; 0x24
 8012b36:	9000      	str	r0, [sp, #0]
 8012b38:	2300      	movs	r3, #0
 8012b3a:	a810      	add	r0, sp, #64	; 0x40
 8012b3c:	221c      	movs	r2, #28
 8012b3e:	f7fe fec1 	bl	80118c4 <ucdr_init_buffer_origin_offset>
 8012b42:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012b44:	8a1a      	ldrh	r2, [r3, #16]
 8012b46:	3a04      	subs	r2, #4
 8012b48:	b292      	uxth	r2, r2
 8012b4a:	4620      	mov	r0, r4
 8012b4c:	a910      	add	r1, sp, #64	; 0x40
 8012b4e:	f000 fa23 	bl	8012f98 <uxr_buffer_create_session>
 8012b52:	9910      	ldr	r1, [sp, #64]	; 0x40
 8012b54:	4620      	mov	r0, r4
 8012b56:	f000 fa8f 	bl	8013078 <uxr_stamp_create_session_header>
 8012b5a:	a810      	add	r0, sp, #64	; 0x40
 8012b5c:	f7fe fef0 	bl	8011940 <ucdr_buffer_length>
 8012b60:	23ff      	movs	r3, #255	; 0xff
 8012b62:	ee08 0a10 	vmov	s16, r0
 8012b66:	7163      	strb	r3, [r4, #5]
 8012b68:	f04f 090a 	mov.w	r9, #10
 8012b6c:	46c2      	mov	sl, r8
 8012b6e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012b70:	ee18 2a10 	vmov	r2, s16
 8012b74:	e9d3 0500 	ldrd	r0, r5, [r3]
 8012b78:	a909      	add	r1, sp, #36	; 0x24
 8012b7a:	47a8      	blx	r5
 8012b7c:	f000 fca0 	bl	80134c0 <uxr_millis>
 8012b80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012b84:	9002      	str	r0, [sp, #8]
 8012b86:	e00c      	b.n	8012ba2 <uxr_create_session+0x8a>
 8012b88:	f000 fc9a 	bl	80134c0 <uxr_millis>
 8012b8c:	9b02      	ldr	r3, [sp, #8]
 8012b8e:	7962      	ldrb	r2, [r4, #5]
 8012b90:	1ac0      	subs	r0, r0, r3
 8012b92:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	f340 8094 	ble.w	8012cc4 <uxr_create_session+0x1ac>
 8012b9c:	2aff      	cmp	r2, #255	; 0xff
 8012b9e:	f040 8097 	bne.w	8012cd0 <uxr_create_session+0x1b8>
 8012ba2:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8012ba4:	a905      	add	r1, sp, #20
 8012ba6:	6895      	ldr	r5, [r2, #8]
 8012ba8:	6810      	ldr	r0, [r2, #0]
 8012baa:	aa06      	add	r2, sp, #24
 8012bac:	47a8      	blx	r5
 8012bae:	2800      	cmp	r0, #0
 8012bb0:	d0ea      	beq.n	8012b88 <uxr_create_session+0x70>
 8012bb2:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 8012bb6:	a818      	add	r0, sp, #96	; 0x60
 8012bb8:	f7fe fe96 	bl	80118e8 <ucdr_init_buffer>
 8012bbc:	2500      	movs	r5, #0
 8012bbe:	f10d 0312 	add.w	r3, sp, #18
 8012bc2:	aa04      	add	r2, sp, #16
 8012bc4:	a918      	add	r1, sp, #96	; 0x60
 8012bc6:	4620      	mov	r0, r4
 8012bc8:	f88d 5010 	strb.w	r5, [sp, #16]
 8012bcc:	f000 fa7e 	bl	80130cc <uxr_read_session_header>
 8012bd0:	2800      	cmp	r0, #0
 8012bd2:	d0d9      	beq.n	8012b88 <uxr_create_session+0x70>
 8012bd4:	4629      	mov	r1, r5
 8012bd6:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8012bda:	f000 fb1b 	bl	8013214 <uxr_stream_id_from_raw>
 8012bde:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8012be2:	2f01      	cmp	r7, #1
 8012be4:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8012be8:	f8bd b012 	ldrh.w	fp, [sp, #18]
 8012bec:	fa5f f880 	uxtb.w	r8, r0
 8012bf0:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8012bf4:	d04d      	beq.n	8012c92 <uxr_create_session+0x17a>
 8012bf6:	2f02      	cmp	r7, #2
 8012bf8:	d00c      	beq.n	8012c14 <uxr_create_session+0xfc>
 8012bfa:	2f00      	cmp	r7, #0
 8012bfc:	d1c4      	bne.n	8012b88 <uxr_create_session+0x70>
 8012bfe:	4639      	mov	r1, r7
 8012c00:	4638      	mov	r0, r7
 8012c02:	f000 fb07 	bl	8013214 <uxr_stream_id_from_raw>
 8012c06:	a918      	add	r1, sp, #96	; 0x60
 8012c08:	4602      	mov	r2, r0
 8012c0a:	4620      	mov	r0, r4
 8012c0c:	9208      	str	r2, [sp, #32]
 8012c0e:	f7ff fc0b 	bl	8012428 <read_submessage_list>
 8012c12:	e7b9      	b.n	8012b88 <uxr_create_session+0x70>
 8012c14:	4629      	mov	r1, r5
 8012c16:	4650      	mov	r0, sl
 8012c18:	f000 fbea 	bl	80133f0 <uxr_get_input_reliable_stream>
 8012c1c:	4606      	mov	r6, r0
 8012c1e:	b390      	cbz	r0, 8012c86 <uxr_create_session+0x16e>
 8012c20:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8012c22:	9203      	str	r2, [sp, #12]
 8012c24:	a818      	add	r0, sp, #96	; 0x60
 8012c26:	f7fe fe8f 	bl	8011948 <ucdr_buffer_remaining>
 8012c2a:	4603      	mov	r3, r0
 8012c2c:	f10d 0011 	add.w	r0, sp, #17
 8012c30:	9000      	str	r0, [sp, #0]
 8012c32:	9a03      	ldr	r2, [sp, #12]
 8012c34:	4659      	mov	r1, fp
 8012c36:	4630      	mov	r0, r6
 8012c38:	f005 fc0a 	bl	8018450 <uxr_receive_reliable_message>
 8012c3c:	b318      	cbz	r0, 8012c86 <uxr_create_session+0x16e>
 8012c3e:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8012c42:	b9b3      	cbnz	r3, 8012c72 <uxr_create_session+0x15a>
 8012c44:	f88d 8020 	strb.w	r8, [sp, #32]
 8012c48:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8012c4c:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
 8012c50:	9a08      	ldr	r2, [sp, #32]
 8012c52:	a918      	add	r1, sp, #96	; 0x60
 8012c54:	4620      	mov	r0, r4
 8012c56:	f7ff fbe7 	bl	8012428 <read_submessage_list>
 8012c5a:	e00a      	b.n	8012c72 <uxr_create_session+0x15a>
 8012c5c:	f04f 0302 	mov.w	r3, #2
 8012c60:	f88d 8020 	strb.w	r8, [sp, #32]
 8012c64:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8012c68:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 8012c6c:	9a08      	ldr	r2, [sp, #32]
 8012c6e:	f7ff fbdb 	bl	8012428 <read_submessage_list>
 8012c72:	a920      	add	r1, sp, #128	; 0x80
 8012c74:	2204      	movs	r2, #4
 8012c76:	4630      	mov	r0, r6
 8012c78:	f005 fc6a 	bl	8018550 <uxr_next_input_reliable_buffer_available>
 8012c7c:	4603      	mov	r3, r0
 8012c7e:	a920      	add	r1, sp, #128	; 0x80
 8012c80:	4620      	mov	r0, r4
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d1ea      	bne.n	8012c5c <uxr_create_session+0x144>
 8012c86:	462a      	mov	r2, r5
 8012c88:	4641      	mov	r1, r8
 8012c8a:	4620      	mov	r0, r4
 8012c8c:	f7ff fa4a 	bl	8012124 <write_submessage_acknack.isra.0>
 8012c90:	e77a      	b.n	8012b88 <uxr_create_session+0x70>
 8012c92:	4629      	mov	r1, r5
 8012c94:	4650      	mov	r0, sl
 8012c96:	f000 fba1 	bl	80133dc <uxr_get_input_best_effort_stream>
 8012c9a:	2800      	cmp	r0, #0
 8012c9c:	f43f af74 	beq.w	8012b88 <uxr_create_session+0x70>
 8012ca0:	4659      	mov	r1, fp
 8012ca2:	f005 fb51 	bl	8018348 <uxr_receive_best_effort_message>
 8012ca6:	2800      	cmp	r0, #0
 8012ca8:	f43f af6e 	beq.w	8012b88 <uxr_create_session+0x70>
 8012cac:	f88d 8020 	strb.w	r8, [sp, #32]
 8012cb0:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8012cb4:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
 8012cb8:	9a08      	ldr	r2, [sp, #32]
 8012cba:	a918      	add	r1, sp, #96	; 0x60
 8012cbc:	4620      	mov	r0, r4
 8012cbe:	f7ff fbb3 	bl	8012428 <read_submessage_list>
 8012cc2:	e761      	b.n	8012b88 <uxr_create_session+0x70>
 8012cc4:	f1b9 0901 	subs.w	r9, r9, #1
 8012cc8:	d002      	beq.n	8012cd0 <uxr_create_session+0x1b8>
 8012cca:	2aff      	cmp	r2, #255	; 0xff
 8012ccc:	f43f af4f 	beq.w	8012b6e <uxr_create_session+0x56>
 8012cd0:	b12a      	cbz	r2, 8012cde <uxr_create_session+0x1c6>
 8012cd2:	2000      	movs	r0, #0
 8012cd4:	b029      	add	sp, #164	; 0xa4
 8012cd6:	ecbd 8b02 	vpop	{d8}
 8012cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cde:	4650      	mov	r0, sl
 8012ce0:	f000 face 	bl	8013280 <uxr_reset_stream_storage>
 8012ce4:	2001      	movs	r0, #1
 8012ce6:	b029      	add	sp, #164	; 0xa4
 8012ce8:	ecbd 8b02 	vpop	{d8}
 8012cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012cf0 <wait_session_status>:
 8012cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cf4:	4604      	mov	r4, r0
 8012cf6:	b09d      	sub	sp, #116	; 0x74
 8012cf8:	20ff      	movs	r0, #255	; 0xff
 8012cfa:	7160      	strb	r0, [r4, #5]
 8012cfc:	9304      	str	r3, [sp, #16]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	f000 80b8 	beq.w	8012e74 <wait_session_status+0x184>
 8012d04:	2300      	movs	r3, #0
 8012d06:	468b      	mov	fp, r1
 8012d08:	4692      	mov	sl, r2
 8012d0a:	9303      	str	r3, [sp, #12]
 8012d0c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012d0e:	4652      	mov	r2, sl
 8012d10:	e9d3 0500 	ldrd	r0, r5, [r3]
 8012d14:	4659      	mov	r1, fp
 8012d16:	47a8      	blx	r5
 8012d18:	f000 fbd2 	bl	80134c0 <uxr_millis>
 8012d1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012d20:	4605      	mov	r5, r0
 8012d22:	e009      	b.n	8012d38 <wait_session_status+0x48>
 8012d24:	f000 fbcc 	bl	80134c0 <uxr_millis>
 8012d28:	1b40      	subs	r0, r0, r5
 8012d2a:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	dd42      	ble.n	8012db8 <wait_session_status+0xc8>
 8012d32:	7960      	ldrb	r0, [r4, #5]
 8012d34:	28ff      	cmp	r0, #255	; 0xff
 8012d36:	d148      	bne.n	8012dca <wait_session_status+0xda>
 8012d38:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8012d3a:	a908      	add	r1, sp, #32
 8012d3c:	6896      	ldr	r6, [r2, #8]
 8012d3e:	6810      	ldr	r0, [r2, #0]
 8012d40:	aa09      	add	r2, sp, #36	; 0x24
 8012d42:	47b0      	blx	r6
 8012d44:	2800      	cmp	r0, #0
 8012d46:	d0ed      	beq.n	8012d24 <wait_session_status+0x34>
 8012d48:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8012d4c:	a80c      	add	r0, sp, #48	; 0x30
 8012d4e:	f7fe fdcb 	bl	80118e8 <ucdr_init_buffer>
 8012d52:	2600      	movs	r6, #0
 8012d54:	f10d 031e 	add.w	r3, sp, #30
 8012d58:	aa07      	add	r2, sp, #28
 8012d5a:	a90c      	add	r1, sp, #48	; 0x30
 8012d5c:	4620      	mov	r0, r4
 8012d5e:	f88d 601c 	strb.w	r6, [sp, #28]
 8012d62:	f000 f9b3 	bl	80130cc <uxr_read_session_header>
 8012d66:	2800      	cmp	r0, #0
 8012d68:	d0dc      	beq.n	8012d24 <wait_session_status+0x34>
 8012d6a:	4631      	mov	r1, r6
 8012d6c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8012d70:	f000 fa50 	bl	8013214 <uxr_stream_id_from_raw>
 8012d74:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8012d78:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8012d7c:	9302      	str	r3, [sp, #8]
 8012d7e:	2f01      	cmp	r7, #1
 8012d80:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 8012d84:	fa5f f880 	uxtb.w	r8, r0
 8012d88:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8012d8c:	d058      	beq.n	8012e40 <wait_session_status+0x150>
 8012d8e:	2f02      	cmp	r7, #2
 8012d90:	d021      	beq.n	8012dd6 <wait_session_status+0xe6>
 8012d92:	2f00      	cmp	r7, #0
 8012d94:	d1c6      	bne.n	8012d24 <wait_session_status+0x34>
 8012d96:	4639      	mov	r1, r7
 8012d98:	4638      	mov	r0, r7
 8012d9a:	f000 fa3b 	bl	8013214 <uxr_stream_id_from_raw>
 8012d9e:	a90c      	add	r1, sp, #48	; 0x30
 8012da0:	4602      	mov	r2, r0
 8012da2:	4620      	mov	r0, r4
 8012da4:	920b      	str	r2, [sp, #44]	; 0x2c
 8012da6:	f7ff fb3f 	bl	8012428 <read_submessage_list>
 8012daa:	f000 fb89 	bl	80134c0 <uxr_millis>
 8012dae:	1b40      	subs	r0, r0, r5
 8012db0:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	dcbc      	bgt.n	8012d32 <wait_session_status+0x42>
 8012db8:	9b03      	ldr	r3, [sp, #12]
 8012dba:	9a04      	ldr	r2, [sp, #16]
 8012dbc:	7960      	ldrb	r0, [r4, #5]
 8012dbe:	3301      	adds	r3, #1
 8012dc0:	429a      	cmp	r2, r3
 8012dc2:	9303      	str	r3, [sp, #12]
 8012dc4:	d001      	beq.n	8012dca <wait_session_status+0xda>
 8012dc6:	28ff      	cmp	r0, #255	; 0xff
 8012dc8:	d0a0      	beq.n	8012d0c <wait_session_status+0x1c>
 8012dca:	38ff      	subs	r0, #255	; 0xff
 8012dcc:	bf18      	it	ne
 8012dce:	2001      	movne	r0, #1
 8012dd0:	b01d      	add	sp, #116	; 0x74
 8012dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012dd6:	4631      	mov	r1, r6
 8012dd8:	f104 0008 	add.w	r0, r4, #8
 8012ddc:	f000 fb08 	bl	80133f0 <uxr_get_input_reliable_stream>
 8012de0:	4681      	mov	r9, r0
 8012de2:	b338      	cbz	r0, 8012e34 <wait_session_status+0x144>
 8012de4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012de6:	9205      	str	r2, [sp, #20]
 8012de8:	a80c      	add	r0, sp, #48	; 0x30
 8012dea:	f7fe fdad 	bl	8011948 <ucdr_buffer_remaining>
 8012dee:	4603      	mov	r3, r0
 8012df0:	f10d 001d 	add.w	r0, sp, #29
 8012df4:	9000      	str	r0, [sp, #0]
 8012df6:	9a05      	ldr	r2, [sp, #20]
 8012df8:	9902      	ldr	r1, [sp, #8]
 8012dfa:	4648      	mov	r0, r9
 8012dfc:	f005 fb28 	bl	8018450 <uxr_receive_reliable_message>
 8012e00:	b1c0      	cbz	r0, 8012e34 <wait_session_status+0x144>
 8012e02:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8012e06:	b95b      	cbnz	r3, 8012e20 <wait_session_status+0x130>
 8012e08:	e03c      	b.n	8012e84 <wait_session_status+0x194>
 8012e0a:	f04f 0302 	mov.w	r3, #2
 8012e0e:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 8012e12:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8012e16:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 8012e1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012e1c:	f7ff fb04 	bl	8012428 <read_submessage_list>
 8012e20:	a914      	add	r1, sp, #80	; 0x50
 8012e22:	2204      	movs	r2, #4
 8012e24:	4648      	mov	r0, r9
 8012e26:	f005 fb93 	bl	8018550 <uxr_next_input_reliable_buffer_available>
 8012e2a:	4603      	mov	r3, r0
 8012e2c:	a914      	add	r1, sp, #80	; 0x50
 8012e2e:	4620      	mov	r0, r4
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d1ea      	bne.n	8012e0a <wait_session_status+0x11a>
 8012e34:	4632      	mov	r2, r6
 8012e36:	4641      	mov	r1, r8
 8012e38:	4620      	mov	r0, r4
 8012e3a:	f7ff f973 	bl	8012124 <write_submessage_acknack.isra.0>
 8012e3e:	e771      	b.n	8012d24 <wait_session_status+0x34>
 8012e40:	4631      	mov	r1, r6
 8012e42:	f104 0008 	add.w	r0, r4, #8
 8012e46:	f000 fac9 	bl	80133dc <uxr_get_input_best_effort_stream>
 8012e4a:	2800      	cmp	r0, #0
 8012e4c:	f43f af6a 	beq.w	8012d24 <wait_session_status+0x34>
 8012e50:	9902      	ldr	r1, [sp, #8]
 8012e52:	f005 fa79 	bl	8018348 <uxr_receive_best_effort_message>
 8012e56:	2800      	cmp	r0, #0
 8012e58:	f43f af64 	beq.w	8012d24 <wait_session_status+0x34>
 8012e5c:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 8012e60:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8012e64:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8012e68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012e6a:	a90c      	add	r1, sp, #48	; 0x30
 8012e6c:	4620      	mov	r0, r4
 8012e6e:	f7ff fadb 	bl	8012428 <read_submessage_list>
 8012e72:	e757      	b.n	8012d24 <wait_session_status+0x34>
 8012e74:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012e76:	e9d3 0400 	ldrd	r0, r4, [r3]
 8012e7a:	47a0      	blx	r4
 8012e7c:	2001      	movs	r0, #1
 8012e7e:	b01d      	add	sp, #116	; 0x74
 8012e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e84:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 8012e88:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8012e8c:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8012e90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012e92:	a90c      	add	r1, sp, #48	; 0x30
 8012e94:	4620      	mov	r0, r4
 8012e96:	f7ff fac7 	bl	8012428 <read_submessage_list>
 8012e9a:	e7c1      	b.n	8012e20 <wait_session_status+0x130>

08012e9c <uxr_delete_session_retries>:
 8012e9c:	b530      	push	{r4, r5, lr}
 8012e9e:	b08f      	sub	sp, #60	; 0x3c
 8012ea0:	4604      	mov	r4, r0
 8012ea2:	460d      	mov	r5, r1
 8012ea4:	f000 f954 	bl	8013150 <uxr_session_header_offset>
 8012ea8:	2300      	movs	r3, #0
 8012eaa:	2210      	movs	r2, #16
 8012eac:	9000      	str	r0, [sp, #0]
 8012eae:	a902      	add	r1, sp, #8
 8012eb0:	a806      	add	r0, sp, #24
 8012eb2:	f7fe fd07 	bl	80118c4 <ucdr_init_buffer_origin_offset>
 8012eb6:	a906      	add	r1, sp, #24
 8012eb8:	4620      	mov	r0, r4
 8012eba:	f000 f897 	bl	8012fec <uxr_buffer_delete_session>
 8012ebe:	2200      	movs	r2, #0
 8012ec0:	4611      	mov	r1, r2
 8012ec2:	9b06      	ldr	r3, [sp, #24]
 8012ec4:	4620      	mov	r0, r4
 8012ec6:	f000 f8eb 	bl	80130a0 <uxr_stamp_session_header>
 8012eca:	a806      	add	r0, sp, #24
 8012ecc:	f7fe fd38 	bl	8011940 <ucdr_buffer_length>
 8012ed0:	462b      	mov	r3, r5
 8012ed2:	4602      	mov	r2, r0
 8012ed4:	a902      	add	r1, sp, #8
 8012ed6:	4620      	mov	r0, r4
 8012ed8:	f7ff ff0a 	bl	8012cf0 <wait_session_status>
 8012edc:	b118      	cbz	r0, 8012ee6 <uxr_delete_session_retries+0x4a>
 8012ede:	7960      	ldrb	r0, [r4, #5]
 8012ee0:	fab0 f080 	clz	r0, r0
 8012ee4:	0940      	lsrs	r0, r0, #5
 8012ee6:	b00f      	add	sp, #60	; 0x3c
 8012ee8:	bd30      	pop	{r4, r5, pc}
 8012eea:	bf00      	nop

08012eec <uxr_prepare_stream_to_write_submessage>:
 8012eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ef0:	b082      	sub	sp, #8
 8012ef2:	4682      	mov	sl, r0
 8012ef4:	4610      	mov	r0, r2
 8012ef6:	4615      	mov	r5, r2
 8012ef8:	461e      	mov	r6, r3
 8012efa:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8012efe:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8012f02:	9101      	str	r1, [sp, #4]
 8012f04:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8012f08:	f000 fad4 	bl	80134b4 <uxr_submessage_padding>
 8012f0c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012f10:	f105 0904 	add.w	r9, r5, #4
 8012f14:	2b01      	cmp	r3, #1
 8012f16:	4481      	add	r9, r0
 8012f18:	d01d      	beq.n	8012f56 <uxr_prepare_stream_to_write_submessage+0x6a>
 8012f1a:	2b02      	cmp	r3, #2
 8012f1c:	d116      	bne.n	8012f4c <uxr_prepare_stream_to_write_submessage+0x60>
 8012f1e:	4621      	mov	r1, r4
 8012f20:	f10a 0008 	add.w	r0, sl, #8
 8012f24:	f000 fa4e 	bl	80133c4 <uxr_get_output_reliable_stream>
 8012f28:	4604      	mov	r4, r0
 8012f2a:	b158      	cbz	r0, 8012f44 <uxr_prepare_stream_to_write_submessage+0x58>
 8012f2c:	4649      	mov	r1, r9
 8012f2e:	4632      	mov	r2, r6
 8012f30:	f005 fcc4 	bl	80188bc <uxr_prepare_reliable_buffer_to_write>
 8012f34:	4604      	mov	r4, r0
 8012f36:	b12c      	cbz	r4, 8012f44 <uxr_prepare_stream_to_write_submessage+0x58>
 8012f38:	4643      	mov	r3, r8
 8012f3a:	b2aa      	uxth	r2, r5
 8012f3c:	4639      	mov	r1, r7
 8012f3e:	4630      	mov	r0, r6
 8012f40:	f000 fa78 	bl	8013434 <uxr_buffer_submessage_header>
 8012f44:	4620      	mov	r0, r4
 8012f46:	b002      	add	sp, #8
 8012f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f4c:	2400      	movs	r4, #0
 8012f4e:	4620      	mov	r0, r4
 8012f50:	b002      	add	sp, #8
 8012f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f56:	4621      	mov	r1, r4
 8012f58:	f10a 0008 	add.w	r0, sl, #8
 8012f5c:	f000 fa2a 	bl	80133b4 <uxr_get_output_best_effort_stream>
 8012f60:	4604      	mov	r4, r0
 8012f62:	2800      	cmp	r0, #0
 8012f64:	d0ee      	beq.n	8012f44 <uxr_prepare_stream_to_write_submessage+0x58>
 8012f66:	4649      	mov	r1, r9
 8012f68:	4632      	mov	r2, r6
 8012f6a:	f005 fbe3 	bl	8018734 <uxr_prepare_best_effort_buffer_to_write>
 8012f6e:	4604      	mov	r4, r0
 8012f70:	e7e1      	b.n	8012f36 <uxr_prepare_stream_to_write_submessage+0x4a>
 8012f72:	bf00      	nop

08012f74 <uxr_init_session_info>:
 8012f74:	b470      	push	{r4, r5, r6}
 8012f76:	7102      	strb	r2, [r0, #4]
 8012f78:	0e16      	lsrs	r6, r2, #24
 8012f7a:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8012f7e:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8012f82:	23ff      	movs	r3, #255	; 0xff
 8012f84:	2209      	movs	r2, #9
 8012f86:	7046      	strb	r6, [r0, #1]
 8012f88:	7085      	strb	r5, [r0, #2]
 8012f8a:	70c4      	strb	r4, [r0, #3]
 8012f8c:	7001      	strb	r1, [r0, #0]
 8012f8e:	bc70      	pop	{r4, r5, r6}
 8012f90:	80c2      	strh	r2, [r0, #6]
 8012f92:	7143      	strb	r3, [r0, #5]
 8012f94:	4770      	bx	lr
 8012f96:	bf00      	nop

08012f98 <uxr_buffer_create_session>:
 8012f98:	b570      	push	{r4, r5, r6, lr}
 8012f9a:	b088      	sub	sp, #32
 8012f9c:	2300      	movs	r3, #0
 8012f9e:	4d12      	ldr	r5, [pc, #72]	; (8012fe8 <uxr_buffer_create_session+0x50>)
 8012fa0:	9307      	str	r3, [sp, #28]
 8012fa2:	f8ad 201c 	strh.w	r2, [sp, #28]
 8012fa6:	7802      	ldrb	r2, [r0, #0]
 8012fa8:	9303      	str	r3, [sp, #12]
 8012faa:	460c      	mov	r4, r1
 8012fac:	f88d 200c 	strb.w	r2, [sp, #12]
 8012fb0:	2101      	movs	r1, #1
 8012fb2:	682a      	ldr	r2, [r5, #0]
 8012fb4:	f8d0 6001 	ldr.w	r6, [r0, #1]
 8012fb8:	88ad      	ldrh	r5, [r5, #4]
 8012fba:	80c1      	strh	r1, [r0, #6]
 8012fbc:	f8ad 1004 	strh.w	r1, [sp, #4]
 8012fc0:	9200      	str	r2, [sp, #0]
 8012fc2:	4619      	mov	r1, r3
 8012fc4:	2210      	movs	r2, #16
 8012fc6:	4620      	mov	r0, r4
 8012fc8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8012fcc:	9306      	str	r3, [sp, #24]
 8012fce:	f88d 300d 	strb.w	r3, [sp, #13]
 8012fd2:	9602      	str	r6, [sp, #8]
 8012fd4:	f8ad 5006 	strh.w	r5, [sp, #6]
 8012fd8:	f000 fa2c 	bl	8013434 <uxr_buffer_submessage_header>
 8012fdc:	4620      	mov	r0, r4
 8012fde:	4669      	mov	r1, sp
 8012fe0:	f001 fa50 	bl	8014484 <uxr_serialize_CREATE_CLIENT_Payload>
 8012fe4:	b008      	add	sp, #32
 8012fe6:	bd70      	pop	{r4, r5, r6, pc}
 8012fe8:	0801b7d8 	.word	0x0801b7d8

08012fec <uxr_buffer_delete_session>:
 8012fec:	b530      	push	{r4, r5, lr}
 8012fee:	4b0c      	ldr	r3, [pc, #48]	; (8013020 <uxr_buffer_delete_session+0x34>)
 8012ff0:	b083      	sub	sp, #12
 8012ff2:	891b      	ldrh	r3, [r3, #8]
 8012ff4:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012ff8:	2202      	movs	r2, #2
 8012ffa:	460c      	mov	r4, r1
 8012ffc:	80c2      	strh	r2, [r0, #6]
 8012ffe:	2300      	movs	r3, #0
 8013000:	2204      	movs	r2, #4
 8013002:	4608      	mov	r0, r1
 8013004:	f44f 7500 	mov.w	r5, #512	; 0x200
 8013008:	2103      	movs	r1, #3
 801300a:	f8ad 5004 	strh.w	r5, [sp, #4]
 801300e:	f000 fa11 	bl	8013434 <uxr_buffer_submessage_header>
 8013012:	4620      	mov	r0, r4
 8013014:	a901      	add	r1, sp, #4
 8013016:	f001 fae3 	bl	80145e0 <uxr_serialize_DELETE_Payload>
 801301a:	b003      	add	sp, #12
 801301c:	bd30      	pop	{r4, r5, pc}
 801301e:	bf00      	nop
 8013020:	0801b7d8 	.word	0x0801b7d8

08013024 <uxr_read_create_session_status>:
 8013024:	b510      	push	{r4, lr}
 8013026:	b088      	sub	sp, #32
 8013028:	4604      	mov	r4, r0
 801302a:	4608      	mov	r0, r1
 801302c:	a901      	add	r1, sp, #4
 801302e:	f001 fae7 	bl	8014600 <uxr_deserialize_STATUS_AGENT_Payload>
 8013032:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013036:	7163      	strb	r3, [r4, #5]
 8013038:	b008      	add	sp, #32
 801303a:	bd10      	pop	{r4, pc}

0801303c <uxr_read_delete_session_status>:
 801303c:	b510      	push	{r4, lr}
 801303e:	4604      	mov	r4, r0
 8013040:	b084      	sub	sp, #16
 8013042:	4608      	mov	r0, r1
 8013044:	a902      	add	r1, sp, #8
 8013046:	f001 fb0b 	bl	8014660 <uxr_deserialize_STATUS_Payload>
 801304a:	88e3      	ldrh	r3, [r4, #6]
 801304c:	2b02      	cmp	r3, #2
 801304e:	d001      	beq.n	8013054 <uxr_read_delete_session_status+0x18>
 8013050:	b004      	add	sp, #16
 8013052:	bd10      	pop	{r4, pc}
 8013054:	f10d 000a 	add.w	r0, sp, #10
 8013058:	f7fe fec6 	bl	8011de8 <uxr_object_id_from_raw>
 801305c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8013060:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8013064:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8013068:	b29b      	uxth	r3, r3
 801306a:	2b02      	cmp	r3, #2
 801306c:	bf04      	itt	eq
 801306e:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 8013072:	7163      	strbeq	r3, [r4, #5]
 8013074:	b004      	add	sp, #16
 8013076:	bd10      	pop	{r4, pc}

08013078 <uxr_stamp_create_session_header>:
 8013078:	b510      	push	{r4, lr}
 801307a:	4604      	mov	r4, r0
 801307c:	b08a      	sub	sp, #40	; 0x28
 801307e:	a802      	add	r0, sp, #8
 8013080:	2208      	movs	r2, #8
 8013082:	f7fe fc31 	bl	80118e8 <ucdr_init_buffer>
 8013086:	f814 1b01 	ldrb.w	r1, [r4], #1
 801308a:	9400      	str	r4, [sp, #0]
 801308c:	2300      	movs	r3, #0
 801308e:	a802      	add	r0, sp, #8
 8013090:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8013094:	461a      	mov	r2, r3
 8013096:	f000 fbcb 	bl	8013830 <uxr_serialize_message_header>
 801309a:	b00a      	add	sp, #40	; 0x28
 801309c:	bd10      	pop	{r4, pc}
 801309e:	bf00      	nop

080130a0 <uxr_stamp_session_header>:
 80130a0:	b570      	push	{r4, r5, r6, lr}
 80130a2:	4604      	mov	r4, r0
 80130a4:	b08c      	sub	sp, #48	; 0x30
 80130a6:	460d      	mov	r5, r1
 80130a8:	4616      	mov	r6, r2
 80130aa:	4619      	mov	r1, r3
 80130ac:	a804      	add	r0, sp, #16
 80130ae:	2208      	movs	r2, #8
 80130b0:	9603      	str	r6, [sp, #12]
 80130b2:	f7fe fc19 	bl	80118e8 <ucdr_init_buffer>
 80130b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80130ba:	9b03      	ldr	r3, [sp, #12]
 80130bc:	9400      	str	r4, [sp, #0]
 80130be:	462a      	mov	r2, r5
 80130c0:	a804      	add	r0, sp, #16
 80130c2:	f000 fbb5 	bl	8013830 <uxr_serialize_message_header>
 80130c6:	b00c      	add	sp, #48	; 0x30
 80130c8:	bd70      	pop	{r4, r5, r6, pc}
 80130ca:	bf00      	nop

080130cc <uxr_read_session_header>:
 80130cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130d0:	4607      	mov	r7, r0
 80130d2:	b084      	sub	sp, #16
 80130d4:	4608      	mov	r0, r1
 80130d6:	460c      	mov	r4, r1
 80130d8:	4615      	mov	r5, r2
 80130da:	461e      	mov	r6, r3
 80130dc:	f7fe fc34 	bl	8011948 <ucdr_buffer_remaining>
 80130e0:	2808      	cmp	r0, #8
 80130e2:	d803      	bhi.n	80130ec <uxr_read_session_header+0x20>
 80130e4:	2000      	movs	r0, #0
 80130e6:	b004      	add	sp, #16
 80130e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130ec:	f10d 080c 	add.w	r8, sp, #12
 80130f0:	4633      	mov	r3, r6
 80130f2:	462a      	mov	r2, r5
 80130f4:	4620      	mov	r0, r4
 80130f6:	f8cd 8000 	str.w	r8, [sp]
 80130fa:	f10d 010b 	add.w	r1, sp, #11
 80130fe:	f000 fbb5 	bl	801386c <uxr_deserialize_message_header>
 8013102:	783a      	ldrb	r2, [r7, #0]
 8013104:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8013108:	4293      	cmp	r3, r2
 801310a:	d1eb      	bne.n	80130e4 <uxr_read_session_header+0x18>
 801310c:	061b      	lsls	r3, r3, #24
 801310e:	d41c      	bmi.n	801314a <uxr_read_session_header+0x7e>
 8013110:	f898 2000 	ldrb.w	r2, [r8]
 8013114:	787b      	ldrb	r3, [r7, #1]
 8013116:	429a      	cmp	r2, r3
 8013118:	d003      	beq.n	8013122 <uxr_read_session_header+0x56>
 801311a:	2001      	movs	r0, #1
 801311c:	f080 0001 	eor.w	r0, r0, #1
 8013120:	e7e1      	b.n	80130e6 <uxr_read_session_header+0x1a>
 8013122:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8013126:	78bb      	ldrb	r3, [r7, #2]
 8013128:	429a      	cmp	r2, r3
 801312a:	f107 0102 	add.w	r1, r7, #2
 801312e:	d1f4      	bne.n	801311a <uxr_read_session_header+0x4e>
 8013130:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8013134:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8013138:	429a      	cmp	r2, r3
 801313a:	d1ee      	bne.n	801311a <uxr_read_session_header+0x4e>
 801313c:	784b      	ldrb	r3, [r1, #1]
 801313e:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8013142:	429a      	cmp	r2, r3
 8013144:	d1e9      	bne.n	801311a <uxr_read_session_header+0x4e>
 8013146:	2000      	movs	r0, #0
 8013148:	e7e8      	b.n	801311c <uxr_read_session_header+0x50>
 801314a:	2001      	movs	r0, #1
 801314c:	e7cb      	b.n	80130e6 <uxr_read_session_header+0x1a>
 801314e:	bf00      	nop

08013150 <uxr_session_header_offset>:
 8013150:	f990 3000 	ldrsb.w	r3, [r0]
 8013154:	2b00      	cmp	r3, #0
 8013156:	bfac      	ite	ge
 8013158:	2008      	movge	r0, #8
 801315a:	2004      	movlt	r0, #4
 801315c:	4770      	bx	lr
 801315e:	bf00      	nop

08013160 <uxr_init_base_object_request>:
 8013160:	b530      	push	{r4, r5, lr}
 8013162:	88c3      	ldrh	r3, [r0, #6]
 8013164:	b083      	sub	sp, #12
 8013166:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 801316a:	9101      	str	r1, [sp, #4]
 801316c:	f1a3 010a 	sub.w	r1, r3, #10
 8013170:	b289      	uxth	r1, r1
 8013172:	42a1      	cmp	r1, r4
 8013174:	d80e      	bhi.n	8013194 <uxr_init_base_object_request+0x34>
 8013176:	3301      	adds	r3, #1
 8013178:	b29c      	uxth	r4, r3
 801317a:	f3c3 2507 	ubfx	r5, r3, #8, #8
 801317e:	b2db      	uxtb	r3, r3
 8013180:	80c4      	strh	r4, [r0, #6]
 8013182:	1c91      	adds	r1, r2, #2
 8013184:	9801      	ldr	r0, [sp, #4]
 8013186:	7015      	strb	r5, [r2, #0]
 8013188:	7053      	strb	r3, [r2, #1]
 801318a:	f7fe fe41 	bl	8011e10 <uxr_object_id_to_raw>
 801318e:	4620      	mov	r0, r4
 8013190:	b003      	add	sp, #12
 8013192:	bd30      	pop	{r4, r5, pc}
 8013194:	230a      	movs	r3, #10
 8013196:	461c      	mov	r4, r3
 8013198:	2500      	movs	r5, #0
 801319a:	e7f1      	b.n	8013180 <uxr_init_base_object_request+0x20>

0801319c <uxr_parse_base_object_request>:
 801319c:	b570      	push	{r4, r5, r6, lr}
 801319e:	4604      	mov	r4, r0
 80131a0:	3002      	adds	r0, #2
 80131a2:	460d      	mov	r5, r1
 80131a4:	4616      	mov	r6, r2
 80131a6:	f7fe fe1f 	bl	8011de8 <uxr_object_id_from_raw>
 80131aa:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80131ae:	8028      	strh	r0, [r5, #0]
 80131b0:	806b      	strh	r3, [r5, #2]
 80131b2:	7822      	ldrb	r2, [r4, #0]
 80131b4:	7863      	ldrb	r3, [r4, #1]
 80131b6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80131ba:	8033      	strh	r3, [r6, #0]
 80131bc:	bd70      	pop	{r4, r5, r6, pc}
 80131be:	bf00      	nop

080131c0 <uxr_stream_id>:
 80131c0:	b410      	push	{r4}
 80131c2:	2901      	cmp	r1, #1
 80131c4:	b083      	sub	sp, #12
 80131c6:	d01f      	beq.n	8013208 <uxr_stream_id+0x48>
 80131c8:	2902      	cmp	r1, #2
 80131ca:	f04f 0400 	mov.w	r4, #0
 80131ce:	d01e      	beq.n	801320e <uxr_stream_id+0x4e>
 80131d0:	2300      	movs	r3, #0
 80131d2:	f364 0307 	bfi	r3, r4, #0, #8
 80131d6:	f360 230f 	bfi	r3, r0, #8, #8
 80131da:	f361 4317 	bfi	r3, r1, #16, #8
 80131de:	f362 631f 	bfi	r3, r2, #24, #8
 80131e2:	b2da      	uxtb	r2, r3
 80131e4:	2000      	movs	r0, #0
 80131e6:	f362 0007 	bfi	r0, r2, #0, #8
 80131ea:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80131ee:	f362 200f 	bfi	r0, r2, #8, #8
 80131f2:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80131f6:	f362 4017 	bfi	r0, r2, #16, #8
 80131fa:	0e1b      	lsrs	r3, r3, #24
 80131fc:	f363 601f 	bfi	r0, r3, #24, #8
 8013200:	b003      	add	sp, #12
 8013202:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013206:	4770      	bx	lr
 8013208:	1c44      	adds	r4, r0, #1
 801320a:	b2e4      	uxtb	r4, r4
 801320c:	e7e0      	b.n	80131d0 <uxr_stream_id+0x10>
 801320e:	f080 0480 	eor.w	r4, r0, #128	; 0x80
 8013212:	e7dd      	b.n	80131d0 <uxr_stream_id+0x10>

08013214 <uxr_stream_id_from_raw>:
 8013214:	b410      	push	{r4}
 8013216:	b083      	sub	sp, #12
 8013218:	b128      	cbz	r0, 8013226 <uxr_stream_id_from_raw+0x12>
 801321a:	0603      	lsls	r3, r0, #24
 801321c:	d421      	bmi.n	8013262 <uxr_stream_id_from_raw+0x4e>
 801321e:	1e42      	subs	r2, r0, #1
 8013220:	b2d2      	uxtb	r2, r2
 8013222:	2401      	movs	r4, #1
 8013224:	e001      	b.n	801322a <uxr_stream_id_from_raw+0x16>
 8013226:	4604      	mov	r4, r0
 8013228:	4602      	mov	r2, r0
 801322a:	2300      	movs	r3, #0
 801322c:	f360 0307 	bfi	r3, r0, #0, #8
 8013230:	f362 230f 	bfi	r3, r2, #8, #8
 8013234:	f364 4317 	bfi	r3, r4, #16, #8
 8013238:	f361 631f 	bfi	r3, r1, #24, #8
 801323c:	b2da      	uxtb	r2, r3
 801323e:	2000      	movs	r0, #0
 8013240:	f362 0007 	bfi	r0, r2, #0, #8
 8013244:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8013248:	f362 200f 	bfi	r0, r2, #8, #8
 801324c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8013250:	f362 4017 	bfi	r0, r2, #16, #8
 8013254:	0e1b      	lsrs	r3, r3, #24
 8013256:	f363 601f 	bfi	r0, r3, #24, #8
 801325a:	b003      	add	sp, #12
 801325c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013260:	4770      	bx	lr
 8013262:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 8013266:	2402      	movs	r4, #2
 8013268:	e7df      	b.n	801322a <uxr_stream_id_from_raw+0x16>
 801326a:	bf00      	nop

0801326c <uxr_init_stream_storage>:
 801326c:	2300      	movs	r3, #0
 801326e:	7403      	strb	r3, [r0, #16]
 8013270:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8013274:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8013278:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 801327c:	4770      	bx	lr
 801327e:	bf00      	nop

08013280 <uxr_reset_stream_storage>:
 8013280:	b570      	push	{r4, r5, r6, lr}
 8013282:	7c03      	ldrb	r3, [r0, #16]
 8013284:	4604      	mov	r4, r0
 8013286:	b153      	cbz	r3, 801329e <uxr_reset_stream_storage+0x1e>
 8013288:	4606      	mov	r6, r0
 801328a:	2500      	movs	r5, #0
 801328c:	4630      	mov	r0, r6
 801328e:	f005 fa4b 	bl	8018728 <uxr_reset_output_best_effort_stream>
 8013292:	7c23      	ldrb	r3, [r4, #16]
 8013294:	3501      	adds	r5, #1
 8013296:	42ab      	cmp	r3, r5
 8013298:	f106 0610 	add.w	r6, r6, #16
 801329c:	d8f6      	bhi.n	801328c <uxr_reset_stream_storage+0xc>
 801329e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80132a2:	b163      	cbz	r3, 80132be <uxr_reset_stream_storage+0x3e>
 80132a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80132a8:	2500      	movs	r5, #0
 80132aa:	4630      	mov	r0, r6
 80132ac:	f005 f848 	bl	8018340 <uxr_reset_input_best_effort_stream>
 80132b0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80132b4:	3501      	adds	r5, #1
 80132b6:	42ab      	cmp	r3, r5
 80132b8:	f106 0602 	add.w	r6, r6, #2
 80132bc:	d8f5      	bhi.n	80132aa <uxr_reset_stream_storage+0x2a>
 80132be:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80132c2:	b163      	cbz	r3, 80132de <uxr_reset_stream_storage+0x5e>
 80132c4:	f104 0618 	add.w	r6, r4, #24
 80132c8:	2500      	movs	r5, #0
 80132ca:	4630      	mov	r0, r6
 80132cc:	f005 facc 	bl	8018868 <uxr_reset_output_reliable_stream>
 80132d0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80132d4:	3501      	adds	r5, #1
 80132d6:	42ab      	cmp	r3, r5
 80132d8:	f106 0628 	add.w	r6, r6, #40	; 0x28
 80132dc:	d8f5      	bhi.n	80132ca <uxr_reset_stream_storage+0x4a>
 80132de:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80132e2:	b163      	cbz	r3, 80132fe <uxr_reset_stream_storage+0x7e>
 80132e4:	f104 0648 	add.w	r6, r4, #72	; 0x48
 80132e8:	2500      	movs	r5, #0
 80132ea:	4630      	mov	r0, r6
 80132ec:	f005 f890 	bl	8018410 <uxr_reset_input_reliable_stream>
 80132f0:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80132f4:	3501      	adds	r5, #1
 80132f6:	42ab      	cmp	r3, r5
 80132f8:	f106 0618 	add.w	r6, r6, #24
 80132fc:	d8f5      	bhi.n	80132ea <uxr_reset_stream_storage+0x6a>
 80132fe:	bd70      	pop	{r4, r5, r6, pc}

08013300 <uxr_add_output_best_effort_buffer>:
 8013300:	b530      	push	{r4, r5, lr}
 8013302:	7c04      	ldrb	r4, [r0, #16]
 8013304:	1c65      	adds	r5, r4, #1
 8013306:	b083      	sub	sp, #12
 8013308:	7405      	strb	r5, [r0, #16]
 801330a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 801330e:	f005 f9ff 	bl	8018710 <uxr_init_output_best_effort_stream>
 8013312:	2201      	movs	r2, #1
 8013314:	4620      	mov	r0, r4
 8013316:	4611      	mov	r1, r2
 8013318:	b003      	add	sp, #12
 801331a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801331e:	f7ff bf4f 	b.w	80131c0 <uxr_stream_id>
 8013322:	bf00      	nop

08013324 <uxr_add_output_reliable_buffer>:
 8013324:	b570      	push	{r4, r5, r6, lr}
 8013326:	b084      	sub	sp, #16
 8013328:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 801332c:	f89d 6020 	ldrb.w	r6, [sp, #32]
 8013330:	9600      	str	r6, [sp, #0]
 8013332:	2528      	movs	r5, #40	; 0x28
 8013334:	1c66      	adds	r6, r4, #1
 8013336:	fb05 0504 	mla	r5, r5, r4, r0
 801333a:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
 801333e:	f105 0018 	add.w	r0, r5, #24
 8013342:	f005 fa5f 	bl	8018804 <uxr_init_output_reliable_stream>
 8013346:	4620      	mov	r0, r4
 8013348:	2201      	movs	r2, #1
 801334a:	2102      	movs	r1, #2
 801334c:	b004      	add	sp, #16
 801334e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013352:	f7ff bf35 	b.w	80131c0 <uxr_stream_id>
 8013356:	bf00      	nop

08013358 <uxr_add_input_best_effort_buffer>:
 8013358:	b510      	push	{r4, lr}
 801335a:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 801335e:	1c62      	adds	r2, r4, #1
 8013360:	f104 0321 	add.w	r3, r4, #33	; 0x21
 8013364:	b082      	sub	sp, #8
 8013366:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 801336a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801336e:	f004 ffe3 	bl	8018338 <uxr_init_input_best_effort_stream>
 8013372:	4620      	mov	r0, r4
 8013374:	2200      	movs	r2, #0
 8013376:	2101      	movs	r1, #1
 8013378:	b002      	add	sp, #8
 801337a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801337e:	f7ff bf1f 	b.w	80131c0 <uxr_stream_id>
 8013382:	bf00      	nop

08013384 <uxr_add_input_reliable_buffer>:
 8013384:	b570      	push	{r4, r5, r6, lr}
 8013386:	b084      	sub	sp, #16
 8013388:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 801338c:	9e08      	ldr	r6, [sp, #32]
 801338e:	9600      	str	r6, [sp, #0]
 8013390:	2518      	movs	r5, #24
 8013392:	1c66      	adds	r6, r4, #1
 8013394:	fb05 0504 	mla	r5, r5, r4, r0
 8013398:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
 801339c:	f105 0048 	add.w	r0, r5, #72	; 0x48
 80133a0:	f005 f812 	bl	80183c8 <uxr_init_input_reliable_stream>
 80133a4:	4620      	mov	r0, r4
 80133a6:	2200      	movs	r2, #0
 80133a8:	2102      	movs	r1, #2
 80133aa:	b004      	add	sp, #16
 80133ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80133b0:	f7ff bf06 	b.w	80131c0 <uxr_stream_id>

080133b4 <uxr_get_output_best_effort_stream>:
 80133b4:	7c03      	ldrb	r3, [r0, #16]
 80133b6:	428b      	cmp	r3, r1
 80133b8:	bf8c      	ite	hi
 80133ba:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 80133be:	2000      	movls	r0, #0
 80133c0:	4770      	bx	lr
 80133c2:	bf00      	nop

080133c4 <uxr_get_output_reliable_stream>:
 80133c4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80133c8:	428b      	cmp	r3, r1
 80133ca:	bf83      	ittte	hi
 80133cc:	2328      	movhi	r3, #40	; 0x28
 80133ce:	fb03 0101 	mlahi	r1, r3, r1, r0
 80133d2:	f101 0018 	addhi.w	r0, r1, #24
 80133d6:	2000      	movls	r0, #0
 80133d8:	4770      	bx	lr
 80133da:	bf00      	nop

080133dc <uxr_get_input_best_effort_stream>:
 80133dc:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80133e0:	428b      	cmp	r3, r1
 80133e2:	bf86      	itte	hi
 80133e4:	3121      	addhi	r1, #33	; 0x21
 80133e6:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 80133ea:	2000      	movls	r0, #0
 80133ec:	4770      	bx	lr
 80133ee:	bf00      	nop

080133f0 <uxr_get_input_reliable_stream>:
 80133f0:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 80133f4:	428b      	cmp	r3, r1
 80133f6:	bf83      	ittte	hi
 80133f8:	2318      	movhi	r3, #24
 80133fa:	fb03 0101 	mlahi	r1, r3, r1, r0
 80133fe:	f101 0048 	addhi.w	r0, r1, #72	; 0x48
 8013402:	2000      	movls	r0, #0
 8013404:	4770      	bx	lr
 8013406:	bf00      	nop

08013408 <uxr_output_streams_confirmed>:
 8013408:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 801340c:	b183      	cbz	r3, 8013430 <uxr_output_streams_confirmed+0x28>
 801340e:	b570      	push	{r4, r5, r6, lr}
 8013410:	4606      	mov	r6, r0
 8013412:	f100 0518 	add.w	r5, r0, #24
 8013416:	2400      	movs	r4, #0
 8013418:	e001      	b.n	801341e <uxr_output_streams_confirmed+0x16>
 801341a:	3528      	adds	r5, #40	; 0x28
 801341c:	b138      	cbz	r0, 801342e <uxr_output_streams_confirmed+0x26>
 801341e:	4628      	mov	r0, r5
 8013420:	f005 fc86 	bl	8018d30 <uxr_is_output_up_to_date>
 8013424:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 8013428:	3401      	adds	r4, #1
 801342a:	42a3      	cmp	r3, r4
 801342c:	d8f5      	bhi.n	801341a <uxr_output_streams_confirmed+0x12>
 801342e:	bd70      	pop	{r4, r5, r6, pc}
 8013430:	2001      	movs	r0, #1
 8013432:	4770      	bx	lr

08013434 <uxr_buffer_submessage_header>:
 8013434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013436:	4604      	mov	r4, r0
 8013438:	460e      	mov	r6, r1
 801343a:	2104      	movs	r1, #4
 801343c:	4615      	mov	r5, r2
 801343e:	461f      	mov	r7, r3
 8013440:	f7fe fa6c 	bl	801191c <ucdr_align_to>
 8013444:	2301      	movs	r3, #1
 8013446:	ea47 0203 	orr.w	r2, r7, r3
 801344a:	4631      	mov	r1, r6
 801344c:	7523      	strb	r3, [r4, #20]
 801344e:	4620      	mov	r0, r4
 8013450:	462b      	mov	r3, r5
 8013452:	f000 fa2b 	bl	80138ac <uxr_serialize_submessage_header>
 8013456:	4620      	mov	r0, r4
 8013458:	f7fe fa76 	bl	8011948 <ucdr_buffer_remaining>
 801345c:	42a8      	cmp	r0, r5
 801345e:	bf34      	ite	cc
 8013460:	2000      	movcc	r0, #0
 8013462:	2001      	movcs	r0, #1
 8013464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013466:	bf00      	nop

08013468 <uxr_read_submessage_header>:
 8013468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801346c:	4604      	mov	r4, r0
 801346e:	460d      	mov	r5, r1
 8013470:	2104      	movs	r1, #4
 8013472:	4616      	mov	r6, r2
 8013474:	4698      	mov	r8, r3
 8013476:	f7fe fa51 	bl	801191c <ucdr_align_to>
 801347a:	4620      	mov	r0, r4
 801347c:	f7fe fa64 	bl	8011948 <ucdr_buffer_remaining>
 8013480:	2803      	cmp	r0, #3
 8013482:	bf8c      	ite	hi
 8013484:	2701      	movhi	r7, #1
 8013486:	2700      	movls	r7, #0
 8013488:	d802      	bhi.n	8013490 <uxr_read_submessage_header+0x28>
 801348a:	4638      	mov	r0, r7
 801348c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013490:	4633      	mov	r3, r6
 8013492:	4642      	mov	r2, r8
 8013494:	4620      	mov	r0, r4
 8013496:	4629      	mov	r1, r5
 8013498:	f000 fa1c 	bl	80138d4 <uxr_deserialize_submessage_header>
 801349c:	f898 3000 	ldrb.w	r3, [r8]
 80134a0:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 80134a4:	f003 0301 	and.w	r3, r3, #1
 80134a8:	f888 2000 	strb.w	r2, [r8]
 80134ac:	7523      	strb	r3, [r4, #20]
 80134ae:	4638      	mov	r0, r7
 80134b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080134b4 <uxr_submessage_padding>:
 80134b4:	f010 0003 	ands.w	r0, r0, #3
 80134b8:	bf18      	it	ne
 80134ba:	f1c0 0004 	rsbne	r0, r0, #4
 80134be:	4770      	bx	lr

080134c0 <uxr_millis>:
 80134c0:	b510      	push	{r4, lr}
 80134c2:	b084      	sub	sp, #16
 80134c4:	4669      	mov	r1, sp
 80134c6:	2001      	movs	r0, #1
 80134c8:	f7f0 f9ae 	bl	8003828 <clock_gettime>
 80134cc:	e9dd 2400 	ldrd	r2, r4, [sp]
 80134d0:	4907      	ldr	r1, [pc, #28]	; (80134f0 <uxr_millis+0x30>)
 80134d2:	9802      	ldr	r0, [sp, #8]
 80134d4:	fba2 2301 	umull	r2, r3, r2, r1
 80134d8:	fb01 3304 	mla	r3, r1, r4, r3
 80134dc:	4604      	mov	r4, r0
 80134de:	1810      	adds	r0, r2, r0
 80134e0:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 80134e4:	4a03      	ldr	r2, [pc, #12]	; (80134f4 <uxr_millis+0x34>)
 80134e6:	2300      	movs	r3, #0
 80134e8:	f7ed fb88 	bl	8000bfc <__aeabi_ldivmod>
 80134ec:	b004      	add	sp, #16
 80134ee:	bd10      	pop	{r4, pc}
 80134f0:	3b9aca00 	.word	0x3b9aca00
 80134f4:	000f4240 	.word	0x000f4240

080134f8 <uxr_nanos>:
 80134f8:	b510      	push	{r4, lr}
 80134fa:	b084      	sub	sp, #16
 80134fc:	4669      	mov	r1, sp
 80134fe:	2001      	movs	r0, #1
 8013500:	f7f0 f992 	bl	8003828 <clock_gettime>
 8013504:	e9dd 2400 	ldrd	r2, r4, [sp]
 8013508:	4905      	ldr	r1, [pc, #20]	; (8013520 <uxr_nanos+0x28>)
 801350a:	9802      	ldr	r0, [sp, #8]
 801350c:	fba2 2301 	umull	r2, r3, r2, r1
 8013510:	fb01 3304 	mla	r3, r1, r4, r3
 8013514:	4604      	mov	r4, r0
 8013516:	1810      	adds	r0, r2, r0
 8013518:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 801351c:	b004      	add	sp, #16
 801351e:	bd10      	pop	{r4, pc}
 8013520:	3b9aca00 	.word	0x3b9aca00

08013524 <on_full_output_buffer_fragmented>:
 8013524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013528:	460c      	mov	r4, r1
 801352a:	b08a      	sub	sp, #40	; 0x28
 801352c:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 8013530:	4606      	mov	r6, r0
 8013532:	f104 0008 	add.w	r0, r4, #8
 8013536:	f7ff ff45 	bl	80133c4 <uxr_get_output_reliable_stream>
 801353a:	4605      	mov	r5, r0
 801353c:	f005 fc02 	bl	8018d44 <get_available_free_slots>
 8013540:	b968      	cbnz	r0, 801355e <on_full_output_buffer_fragmented+0x3a>
 8013542:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 8013546:	4620      	mov	r0, r4
 8013548:	4798      	blx	r3
 801354a:	b918      	cbnz	r0, 8013554 <on_full_output_buffer_fragmented+0x30>
 801354c:	2001      	movs	r0, #1
 801354e:	b00a      	add	sp, #40	; 0x28
 8013550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013554:	4628      	mov	r0, r5
 8013556:	f005 fbf5 	bl	8018d44 <get_available_free_slots>
 801355a:	2800      	cmp	r0, #0
 801355c:	d0f6      	beq.n	801354c <on_full_output_buffer_fragmented+0x28>
 801355e:	8928      	ldrh	r0, [r5, #8]
 8013560:	89eb      	ldrh	r3, [r5, #14]
 8013562:	7b2a      	ldrb	r2, [r5, #12]
 8013564:	fbb3 f1f0 	udiv	r1, r3, r0
 8013568:	f5c2 427f 	rsb	r2, r2, #65280	; 0xff00
 801356c:	fb00 3111 	mls	r1, r0, r1, r3
 8013570:	b28b      	uxth	r3, r1
 8013572:	32fc      	adds	r2, #252	; 0xfc
 8013574:	6869      	ldr	r1, [r5, #4]
 8013576:	fbb1 f1f0 	udiv	r1, r1, r0
 801357a:	1f0f      	subs	r7, r1, #4
 801357c:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
 8013580:	fb01 f103 	mul.w	r1, r1, r3
 8013584:	443a      	add	r2, r7
 8013586:	682b      	ldr	r3, [r5, #0]
 8013588:	fa1f f882 	uxth.w	r8, r2
 801358c:	3104      	adds	r1, #4
 801358e:	4419      	add	r1, r3
 8013590:	eba0 0008 	sub.w	r0, r0, r8
 8013594:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 8013598:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801359c:	9300      	str	r3, [sp, #0]
 801359e:	463a      	mov	r2, r7
 80135a0:	2300      	movs	r3, #0
 80135a2:	a802      	add	r0, sp, #8
 80135a4:	f7fe f98e 	bl	80118c4 <ucdr_init_buffer_origin_offset>
 80135a8:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 80135ac:	f102 0308 	add.w	r3, r2, #8
 80135b0:	42bb      	cmp	r3, r7
 80135b2:	d927      	bls.n	8013604 <on_full_output_buffer_fragmented+0xe0>
 80135b4:	4642      	mov	r2, r8
 80135b6:	2300      	movs	r3, #0
 80135b8:	210d      	movs	r1, #13
 80135ba:	a802      	add	r0, sp, #8
 80135bc:	f7ff ff3a 	bl	8013434 <uxr_buffer_submessage_header>
 80135c0:	8928      	ldrh	r0, [r5, #8]
 80135c2:	89eb      	ldrh	r3, [r5, #14]
 80135c4:	fbb3 f1f0 	udiv	r1, r3, r0
 80135c8:	fb00 3111 	mls	r1, r0, r1, r3
 80135cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80135d0:	b289      	uxth	r1, r1
 80135d2:	fbb3 f3f0 	udiv	r3, r3, r0
 80135d6:	fb03 f301 	mul.w	r3, r3, r1
 80135da:	50d7      	str	r7, [r2, r3]
 80135dc:	89e8      	ldrh	r0, [r5, #14]
 80135de:	2101      	movs	r1, #1
 80135e0:	f005 fbd0 	bl	8018d84 <uxr_seq_num_add>
 80135e4:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 80135e8:	81e8      	strh	r0, [r5, #14]
 80135ea:	1a52      	subs	r2, r2, r1
 80135ec:	4630      	mov	r0, r6
 80135ee:	f7fe f97b 	bl	80118e8 <ucdr_init_buffer>
 80135f2:	4630      	mov	r0, r6
 80135f4:	490f      	ldr	r1, [pc, #60]	; (8013634 <on_full_output_buffer_fragmented+0x110>)
 80135f6:	4622      	mov	r2, r4
 80135f8:	f7fe f94c 	bl	8011894 <ucdr_set_on_full_buffer_callback>
 80135fc:	2000      	movs	r0, #0
 80135fe:	b00a      	add	sp, #40	; 0x28
 8013600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013604:	b292      	uxth	r2, r2
 8013606:	2302      	movs	r3, #2
 8013608:	210d      	movs	r1, #13
 801360a:	a802      	add	r0, sp, #8
 801360c:	f7ff ff12 	bl	8013434 <uxr_buffer_submessage_header>
 8013610:	8928      	ldrh	r0, [r5, #8]
 8013612:	89eb      	ldrh	r3, [r5, #14]
 8013614:	fbb3 f2f0 	udiv	r2, r3, r0
 8013618:	fb00 3212 	mls	r2, r0, r2, r3
 801361c:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 8013620:	686b      	ldr	r3, [r5, #4]
 8013622:	fbb3 f3f0 	udiv	r3, r3, r0
 8013626:	b292      	uxth	r2, r2
 8013628:	6828      	ldr	r0, [r5, #0]
 801362a:	fb03 f302 	mul.w	r3, r3, r2
 801362e:	3108      	adds	r1, #8
 8013630:	50c1      	str	r1, [r0, r3]
 8013632:	e7d3      	b.n	80135dc <on_full_output_buffer_fragmented+0xb8>
 8013634:	08013525 	.word	0x08013525

08013638 <uxr_prepare_output_stream>:
 8013638:	b5f0      	push	{r4, r5, r6, r7, lr}
 801363a:	b087      	sub	sp, #28
 801363c:	2407      	movs	r4, #7
 801363e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8013640:	9202      	str	r2, [sp, #8]
 8013642:	2500      	movs	r5, #0
 8013644:	1d32      	adds	r2, r6, #4
 8013646:	e9cd 4500 	strd	r4, r5, [sp]
 801364a:	9103      	str	r1, [sp, #12]
 801364c:	461c      	mov	r4, r3
 801364e:	4606      	mov	r6, r0
 8013650:	f7ff fc4c 	bl	8012eec <uxr_prepare_stream_to_write_submessage>
 8013654:	f080 0201 	eor.w	r2, r0, #1
 8013658:	b2d2      	uxtb	r2, r2
 801365a:	75a2      	strb	r2, [r4, #22]
 801365c:	b112      	cbz	r2, 8013664 <uxr_prepare_output_stream+0x2c>
 801365e:	4628      	mov	r0, r5
 8013660:	b007      	add	sp, #28
 8013662:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013664:	aa05      	add	r2, sp, #20
 8013666:	9902      	ldr	r1, [sp, #8]
 8013668:	4630      	mov	r0, r6
 801366a:	f7ff fd79 	bl	8013160 <uxr_init_base_object_request>
 801366e:	a905      	add	r1, sp, #20
 8013670:	4605      	mov	r5, r0
 8013672:	4620      	mov	r0, r4
 8013674:	f001 f872 	bl	801475c <uxr_serialize_WRITE_DATA_Payload_Data>
 8013678:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 801367c:	e9d4 6706 	ldrd	r6, r7, [r4, #24]
 8013680:	1a52      	subs	r2, r2, r1
 8013682:	4620      	mov	r0, r4
 8013684:	f7fe f930 	bl	80118e8 <ucdr_init_buffer>
 8013688:	4620      	mov	r0, r4
 801368a:	463a      	mov	r2, r7
 801368c:	4631      	mov	r1, r6
 801368e:	f7fe f901 	bl	8011894 <ucdr_set_on_full_buffer_callback>
 8013692:	4628      	mov	r0, r5
 8013694:	b007      	add	sp, #28
 8013696:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013698 <uxr_prepare_output_stream_fragmented>:
 8013698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801369c:	b093      	sub	sp, #76	; 0x4c
 801369e:	4605      	mov	r5, r0
 80136a0:	9107      	str	r1, [sp, #28]
 80136a2:	3008      	adds	r0, #8
 80136a4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80136a8:	9303      	str	r3, [sp, #12]
 80136aa:	9206      	str	r2, [sp, #24]
 80136ac:	f7ff fe8a 	bl	80133c4 <uxr_get_output_reliable_stream>
 80136b0:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80136b4:	2b01      	cmp	r3, #1
 80136b6:	f000 8094 	beq.w	80137e2 <uxr_prepare_output_stream_fragmented+0x14a>
 80136ba:	4604      	mov	r4, r0
 80136bc:	2800      	cmp	r0, #0
 80136be:	f000 8090 	beq.w	80137e2 <uxr_prepare_output_stream_fragmented+0x14a>
 80136c2:	f005 fb3f 	bl	8018d44 <get_available_free_slots>
 80136c6:	2800      	cmp	r0, #0
 80136c8:	f000 8086 	beq.w	80137d8 <uxr_prepare_output_stream_fragmented+0x140>
 80136cc:	8922      	ldrh	r2, [r4, #8]
 80136ce:	89e7      	ldrh	r7, [r4, #14]
 80136d0:	fbb7 f8f2 	udiv	r8, r7, r2
 80136d4:	e9d4 3100 	ldrd	r3, r1, [r4]
 80136d8:	fb02 7818 	mls	r8, r2, r8, r7
 80136dc:	fa1f f888 	uxth.w	r8, r8
 80136e0:	fbb1 f2f2 	udiv	r2, r1, r2
 80136e4:	fb02 f808 	mul.w	r8, r2, r8
 80136e8:	f108 0804 	add.w	r8, r8, #4
 80136ec:	4498      	add	r8, r3
 80136ee:	7b23      	ldrb	r3, [r4, #12]
 80136f0:	f858 ac04 	ldr.w	sl, [r8, #-4]
 80136f4:	9204      	str	r2, [sp, #16]
 80136f6:	4553      	cmp	r3, sl
 80136f8:	f1a2 0b04 	sub.w	fp, r2, #4
 80136fc:	d37d      	bcc.n	80137fa <uxr_prepare_output_stream_fragmented+0x162>
 80136fe:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8013700:	f8cd a000 	str.w	sl, [sp]
 8013704:	f1ab 0904 	sub.w	r9, fp, #4
 8013708:	eba9 0903 	sub.w	r9, r9, r3
 801370c:	3608      	adds	r6, #8
 801370e:	a80a      	add	r0, sp, #40	; 0x28
 8013710:	2300      	movs	r3, #0
 8013712:	465a      	mov	r2, fp
 8013714:	4641      	mov	r1, r8
 8013716:	fa1f f989 	uxth.w	r9, r9
 801371a:	9605      	str	r6, [sp, #20]
 801371c:	f7fe f8d2 	bl	80118c4 <ucdr_init_buffer_origin_offset>
 8013720:	455e      	cmp	r6, fp
 8013722:	bf34      	ite	cc
 8013724:	2302      	movcc	r3, #2
 8013726:	2300      	movcs	r3, #0
 8013728:	464a      	mov	r2, r9
 801372a:	210d      	movs	r1, #13
 801372c:	a80a      	add	r0, sp, #40	; 0x28
 801372e:	f7ff fe81 	bl	8013434 <uxr_buffer_submessage_header>
 8013732:	8920      	ldrh	r0, [r4, #8]
 8013734:	fbb7 f3f0 	udiv	r3, r7, r0
 8013738:	e9d4 2100 	ldrd	r2, r1, [r4]
 801373c:	fb00 7313 	mls	r3, r0, r3, r7
 8013740:	b29b      	uxth	r3, r3
 8013742:	fbb1 f1f0 	udiv	r1, r1, r0
 8013746:	fb03 f301 	mul.w	r3, r3, r1
 801374a:	4638      	mov	r0, r7
 801374c:	f842 b003 	str.w	fp, [r2, r3]
 8013750:	2101      	movs	r1, #1
 8013752:	f005 fb17 	bl	8018d84 <uxr_seq_num_add>
 8013756:	9b04      	ldr	r3, [sp, #16]
 8013758:	9e03      	ldr	r6, [sp, #12]
 801375a:	f1a3 0208 	sub.w	r2, r3, #8
 801375e:	f10a 0104 	add.w	r1, sl, #4
 8013762:	4607      	mov	r7, r0
 8013764:	eba2 020a 	sub.w	r2, r2, sl
 8013768:	4441      	add	r1, r8
 801376a:	4630      	mov	r0, r6
 801376c:	f7fe f8bc 	bl	80118e8 <ucdr_init_buffer>
 8013770:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8013772:	81e7      	strh	r7, [r4, #14]
 8013774:	1d1a      	adds	r2, r3, #4
 8013776:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 801377a:	bf28      	it	cs
 801377c:	2200      	movcs	r2, #0
 801377e:	b292      	uxth	r2, r2
 8013780:	2300      	movs	r3, #0
 8013782:	2107      	movs	r1, #7
 8013784:	4630      	mov	r0, r6
 8013786:	f7ff fe55 	bl	8013434 <uxr_buffer_submessage_header>
 801378a:	9906      	ldr	r1, [sp, #24]
 801378c:	aa09      	add	r2, sp, #36	; 0x24
 801378e:	4628      	mov	r0, r5
 8013790:	f7ff fce6 	bl	8013160 <uxr_init_base_object_request>
 8013794:	4604      	mov	r4, r0
 8013796:	b328      	cbz	r0, 80137e4 <uxr_prepare_output_stream_fragmented+0x14c>
 8013798:	9e03      	ldr	r6, [sp, #12]
 801379a:	a909      	add	r1, sp, #36	; 0x24
 801379c:	4630      	mov	r0, r6
 801379e:	f000 ffdd 	bl	801475c <uxr_serialize_WRITE_DATA_Payload_Data>
 80137a2:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 80137a6:	4630      	mov	r0, r6
 80137a8:	1a52      	subs	r2, r2, r1
 80137aa:	f7fe f89d 	bl	80118e8 <ucdr_init_buffer>
 80137ae:	9a05      	ldr	r2, [sp, #20]
 80137b0:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 80137b4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80137b6:	9b07      	ldr	r3, [sp, #28]
 80137b8:	f8c5 20b8 	str.w	r2, [r5, #184]	; 0xb8
 80137bc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80137be:	f8c5 20bc 	str.w	r2, [r5, #188]	; 0xbc
 80137c2:	4630      	mov	r0, r6
 80137c4:	4919      	ldr	r1, [pc, #100]	; (801382c <uxr_prepare_output_stream_fragmented+0x194>)
 80137c6:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 80137ca:	462a      	mov	r2, r5
 80137cc:	f7fe f862 	bl	8011894 <ucdr_set_on_full_buffer_callback>
 80137d0:	4620      	mov	r0, r4
 80137d2:	b013      	add	sp, #76	; 0x4c
 80137d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137d8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80137da:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80137dc:	4628      	mov	r0, r5
 80137de:	4798      	blx	r3
 80137e0:	b920      	cbnz	r0, 80137ec <uxr_prepare_output_stream_fragmented+0x154>
 80137e2:	2400      	movs	r4, #0
 80137e4:	4620      	mov	r0, r4
 80137e6:	b013      	add	sp, #76	; 0x4c
 80137e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137ec:	4620      	mov	r0, r4
 80137ee:	f005 faa9 	bl	8018d44 <get_available_free_slots>
 80137f2:	2800      	cmp	r0, #0
 80137f4:	f47f af6a 	bne.w	80136cc <uxr_prepare_output_stream_fragmented+0x34>
 80137f8:	e7f3      	b.n	80137e2 <uxr_prepare_output_stream_fragmented+0x14a>
 80137fa:	4638      	mov	r0, r7
 80137fc:	2101      	movs	r1, #1
 80137fe:	f005 fac1 	bl	8018d84 <uxr_seq_num_add>
 8013802:	8922      	ldrh	r2, [r4, #8]
 8013804:	fbb0 f8f2 	udiv	r8, r0, r2
 8013808:	fb02 0818 	mls	r8, r2, r8, r0
 801380c:	fa1f f888 	uxth.w	r8, r8
 8013810:	6863      	ldr	r3, [r4, #4]
 8013812:	fbb3 f3f2 	udiv	r3, r3, r2
 8013816:	6822      	ldr	r2, [r4, #0]
 8013818:	fb08 f803 	mul.w	r8, r8, r3
 801381c:	f108 0804 	add.w	r8, r8, #4
 8013820:	4490      	add	r8, r2
 8013822:	7b23      	ldrb	r3, [r4, #12]
 8013824:	f858 ac04 	ldr.w	sl, [r8, #-4]
 8013828:	4607      	mov	r7, r0
 801382a:	e768      	b.n	80136fe <uxr_prepare_output_stream_fragmented+0x66>
 801382c:	08013525 	.word	0x08013525

08013830 <uxr_serialize_message_header>:
 8013830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013832:	b083      	sub	sp, #12
 8013834:	4616      	mov	r6, r2
 8013836:	4604      	mov	r4, r0
 8013838:	9301      	str	r3, [sp, #4]
 801383a:	460d      	mov	r5, r1
 801383c:	9f08      	ldr	r7, [sp, #32]
 801383e:	f7fd f8a9 	bl	8010994 <ucdr_serialize_uint8_t>
 8013842:	4631      	mov	r1, r6
 8013844:	4620      	mov	r0, r4
 8013846:	f7fd f8a5 	bl	8010994 <ucdr_serialize_uint8_t>
 801384a:	9a01      	ldr	r2, [sp, #4]
 801384c:	4620      	mov	r0, r4
 801384e:	2101      	movs	r1, #1
 8013850:	f7fd f94c 	bl	8010aec <ucdr_serialize_endian_uint16_t>
 8013854:	062b      	lsls	r3, r5, #24
 8013856:	d501      	bpl.n	801385c <uxr_serialize_message_header+0x2c>
 8013858:	b003      	add	sp, #12
 801385a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801385c:	4639      	mov	r1, r7
 801385e:	4620      	mov	r0, r4
 8013860:	2204      	movs	r2, #4
 8013862:	b003      	add	sp, #12
 8013864:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013868:	f004 bb6e 	b.w	8017f48 <ucdr_serialize_array_uint8_t>

0801386c <uxr_deserialize_message_header>:
 801386c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801386e:	b083      	sub	sp, #12
 8013870:	4616      	mov	r6, r2
 8013872:	4604      	mov	r4, r0
 8013874:	9301      	str	r3, [sp, #4]
 8013876:	460d      	mov	r5, r1
 8013878:	9f08      	ldr	r7, [sp, #32]
 801387a:	f7fd f8a1 	bl	80109c0 <ucdr_deserialize_uint8_t>
 801387e:	4631      	mov	r1, r6
 8013880:	4620      	mov	r0, r4
 8013882:	f7fd f89d 	bl	80109c0 <ucdr_deserialize_uint8_t>
 8013886:	9a01      	ldr	r2, [sp, #4]
 8013888:	4620      	mov	r0, r4
 801388a:	2101      	movs	r1, #1
 801388c:	f7fd fa22 	bl	8010cd4 <ucdr_deserialize_endian_uint16_t>
 8013890:	f995 3000 	ldrsb.w	r3, [r5]
 8013894:	2b00      	cmp	r3, #0
 8013896:	da01      	bge.n	801389c <uxr_deserialize_message_header+0x30>
 8013898:	b003      	add	sp, #12
 801389a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801389c:	4639      	mov	r1, r7
 801389e:	4620      	mov	r0, r4
 80138a0:	2204      	movs	r2, #4
 80138a2:	b003      	add	sp, #12
 80138a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80138a8:	f004 bbb2 	b.w	8018010 <ucdr_deserialize_array_uint8_t>

080138ac <uxr_serialize_submessage_header>:
 80138ac:	b530      	push	{r4, r5, lr}
 80138ae:	b083      	sub	sp, #12
 80138b0:	4615      	mov	r5, r2
 80138b2:	4604      	mov	r4, r0
 80138b4:	9301      	str	r3, [sp, #4]
 80138b6:	f7fd f86d 	bl	8010994 <ucdr_serialize_uint8_t>
 80138ba:	4629      	mov	r1, r5
 80138bc:	4620      	mov	r0, r4
 80138be:	f7fd f869 	bl	8010994 <ucdr_serialize_uint8_t>
 80138c2:	9a01      	ldr	r2, [sp, #4]
 80138c4:	4620      	mov	r0, r4
 80138c6:	2101      	movs	r1, #1
 80138c8:	b003      	add	sp, #12
 80138ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80138ce:	f7fd b90d 	b.w	8010aec <ucdr_serialize_endian_uint16_t>
 80138d2:	bf00      	nop

080138d4 <uxr_deserialize_submessage_header>:
 80138d4:	b530      	push	{r4, r5, lr}
 80138d6:	b083      	sub	sp, #12
 80138d8:	4615      	mov	r5, r2
 80138da:	4604      	mov	r4, r0
 80138dc:	9301      	str	r3, [sp, #4]
 80138de:	f7fd f86f 	bl	80109c0 <ucdr_deserialize_uint8_t>
 80138e2:	4629      	mov	r1, r5
 80138e4:	4620      	mov	r0, r4
 80138e6:	f7fd f86b 	bl	80109c0 <ucdr_deserialize_uint8_t>
 80138ea:	9a01      	ldr	r2, [sp, #4]
 80138ec:	4620      	mov	r0, r4
 80138ee:	2101      	movs	r1, #1
 80138f0:	b003      	add	sp, #12
 80138f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80138f6:	f7fd b9ed 	b.w	8010cd4 <ucdr_deserialize_endian_uint16_t>
 80138fa:	bf00      	nop

080138fc <uxr_serialize_CLIENT_Representation>:
 80138fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013900:	2204      	movs	r2, #4
 8013902:	460c      	mov	r4, r1
 8013904:	4605      	mov	r5, r0
 8013906:	f004 fb1f 	bl	8017f48 <ucdr_serialize_array_uint8_t>
 801390a:	1d21      	adds	r1, r4, #4
 801390c:	4607      	mov	r7, r0
 801390e:	2202      	movs	r2, #2
 8013910:	4628      	mov	r0, r5
 8013912:	f004 fb19 	bl	8017f48 <ucdr_serialize_array_uint8_t>
 8013916:	1da1      	adds	r1, r4, #6
 8013918:	4007      	ands	r7, r0
 801391a:	2202      	movs	r2, #2
 801391c:	4628      	mov	r0, r5
 801391e:	f004 fb13 	bl	8017f48 <ucdr_serialize_array_uint8_t>
 8013922:	fa5f f887 	uxtb.w	r8, r7
 8013926:	2204      	movs	r2, #4
 8013928:	4607      	mov	r7, r0
 801392a:	f104 0108 	add.w	r1, r4, #8
 801392e:	4628      	mov	r0, r5
 8013930:	f004 fb0a 	bl	8017f48 <ucdr_serialize_array_uint8_t>
 8013934:	ea08 0707 	and.w	r7, r8, r7
 8013938:	7b21      	ldrb	r1, [r4, #12]
 801393a:	4680      	mov	r8, r0
 801393c:	4628      	mov	r0, r5
 801393e:	f7fd f829 	bl	8010994 <ucdr_serialize_uint8_t>
 8013942:	ea08 0807 	and.w	r8, r8, r7
 8013946:	7b61      	ldrb	r1, [r4, #13]
 8013948:	4607      	mov	r7, r0
 801394a:	4628      	mov	r0, r5
 801394c:	f7fc fff2 	bl	8010934 <ucdr_serialize_bool>
 8013950:	7b63      	ldrb	r3, [r4, #13]
 8013952:	ea08 0707 	and.w	r7, r8, r7
 8013956:	ea07 0600 	and.w	r6, r7, r0
 801395a:	b933      	cbnz	r3, 801396a <uxr_serialize_CLIENT_Representation+0x6e>
 801395c:	8ba1      	ldrh	r1, [r4, #28]
 801395e:	4628      	mov	r0, r5
 8013960:	f7fd f844 	bl	80109ec <ucdr_serialize_uint16_t>
 8013964:	4030      	ands	r0, r6
 8013966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801396a:	6921      	ldr	r1, [r4, #16]
 801396c:	4628      	mov	r0, r5
 801396e:	f7fd fa27 	bl	8010dc0 <ucdr_serialize_uint32_t>
 8013972:	6923      	ldr	r3, [r4, #16]
 8013974:	b1cb      	cbz	r3, 80139aa <uxr_serialize_CLIENT_Representation+0xae>
 8013976:	b1d0      	cbz	r0, 80139ae <uxr_serialize_CLIENT_Representation+0xb2>
 8013978:	46a0      	mov	r8, r4
 801397a:	f04f 0900 	mov.w	r9, #0
 801397e:	e002      	b.n	8013986 <uxr_serialize_CLIENT_Representation+0x8a>
 8013980:	f108 0808 	add.w	r8, r8, #8
 8013984:	b198      	cbz	r0, 80139ae <uxr_serialize_CLIENT_Representation+0xb2>
 8013986:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801398a:	4628      	mov	r0, r5
 801398c:	f004 fbfc 	bl	8018188 <ucdr_serialize_string>
 8013990:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8013994:	4607      	mov	r7, r0
 8013996:	4628      	mov	r0, r5
 8013998:	f004 fbf6 	bl	8018188 <ucdr_serialize_string>
 801399c:	6923      	ldr	r3, [r4, #16]
 801399e:	f109 0901 	add.w	r9, r9, #1
 80139a2:	4038      	ands	r0, r7
 80139a4:	4599      	cmp	r9, r3
 80139a6:	b2c0      	uxtb	r0, r0
 80139a8:	d3ea      	bcc.n	8013980 <uxr_serialize_CLIENT_Representation+0x84>
 80139aa:	4006      	ands	r6, r0
 80139ac:	e7d6      	b.n	801395c <uxr_serialize_CLIENT_Representation+0x60>
 80139ae:	2600      	movs	r6, #0
 80139b0:	e7d4      	b.n	801395c <uxr_serialize_CLIENT_Representation+0x60>
 80139b2:	bf00      	nop

080139b4 <uxr_deserialize_CLIENT_Representation>:
 80139b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80139b8:	2204      	movs	r2, #4
 80139ba:	460c      	mov	r4, r1
 80139bc:	4605      	mov	r5, r0
 80139be:	f004 fb27 	bl	8018010 <ucdr_deserialize_array_uint8_t>
 80139c2:	1d21      	adds	r1, r4, #4
 80139c4:	4607      	mov	r7, r0
 80139c6:	2202      	movs	r2, #2
 80139c8:	4628      	mov	r0, r5
 80139ca:	f004 fb21 	bl	8018010 <ucdr_deserialize_array_uint8_t>
 80139ce:	1da1      	adds	r1, r4, #6
 80139d0:	4007      	ands	r7, r0
 80139d2:	2202      	movs	r2, #2
 80139d4:	4628      	mov	r0, r5
 80139d6:	f004 fb1b 	bl	8018010 <ucdr_deserialize_array_uint8_t>
 80139da:	fa5f f887 	uxtb.w	r8, r7
 80139de:	2204      	movs	r2, #4
 80139e0:	4607      	mov	r7, r0
 80139e2:	f104 0108 	add.w	r1, r4, #8
 80139e6:	4628      	mov	r0, r5
 80139e8:	f004 fb12 	bl	8018010 <ucdr_deserialize_array_uint8_t>
 80139ec:	ea08 0707 	and.w	r7, r8, r7
 80139f0:	f104 010c 	add.w	r1, r4, #12
 80139f4:	4680      	mov	r8, r0
 80139f6:	4628      	mov	r0, r5
 80139f8:	f7fc ffe2 	bl	80109c0 <ucdr_deserialize_uint8_t>
 80139fc:	ea08 0807 	and.w	r8, r8, r7
 8013a00:	f104 010d 	add.w	r1, r4, #13
 8013a04:	4607      	mov	r7, r0
 8013a06:	4628      	mov	r0, r5
 8013a08:	f7fc ffaa 	bl	8010960 <ucdr_deserialize_bool>
 8013a0c:	7b63      	ldrb	r3, [r4, #13]
 8013a0e:	ea08 0707 	and.w	r7, r8, r7
 8013a12:	ea07 0600 	and.w	r6, r7, r0
 8013a16:	b93b      	cbnz	r3, 8013a28 <uxr_deserialize_CLIENT_Representation+0x74>
 8013a18:	f104 011c 	add.w	r1, r4, #28
 8013a1c:	4628      	mov	r0, r5
 8013a1e:	f7fd f8e5 	bl	8010bec <ucdr_deserialize_uint16_t>
 8013a22:	4030      	ands	r0, r6
 8013a24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a28:	f104 0110 	add.w	r1, r4, #16
 8013a2c:	4628      	mov	r0, r5
 8013a2e:	f7fd faf7 	bl	8011020 <ucdr_deserialize_uint32_t>
 8013a32:	6923      	ldr	r3, [r4, #16]
 8013a34:	2b01      	cmp	r3, #1
 8013a36:	d903      	bls.n	8013a40 <uxr_deserialize_CLIENT_Representation+0x8c>
 8013a38:	2301      	movs	r3, #1
 8013a3a:	75ab      	strb	r3, [r5, #22]
 8013a3c:	2600      	movs	r6, #0
 8013a3e:	e7eb      	b.n	8013a18 <uxr_deserialize_CLIENT_Representation+0x64>
 8013a40:	b1fb      	cbz	r3, 8013a82 <uxr_deserialize_CLIENT_Representation+0xce>
 8013a42:	2800      	cmp	r0, #0
 8013a44:	d0fa      	beq.n	8013a3c <uxr_deserialize_CLIENT_Representation+0x88>
 8013a46:	46a0      	mov	r8, r4
 8013a48:	f04f 0900 	mov.w	r9, #0
 8013a4c:	e003      	b.n	8013a56 <uxr_deserialize_CLIENT_Representation+0xa2>
 8013a4e:	f108 0808 	add.w	r8, r8, #8
 8013a52:	2800      	cmp	r0, #0
 8013a54:	d0f2      	beq.n	8013a3c <uxr_deserialize_CLIENT_Representation+0x88>
 8013a56:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013a5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013a5e:	4628      	mov	r0, r5
 8013a60:	f004 fba2 	bl	80181a8 <ucdr_deserialize_string>
 8013a64:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8013a68:	4607      	mov	r7, r0
 8013a6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013a6e:	4628      	mov	r0, r5
 8013a70:	f004 fb9a 	bl	80181a8 <ucdr_deserialize_string>
 8013a74:	6923      	ldr	r3, [r4, #16]
 8013a76:	f109 0901 	add.w	r9, r9, #1
 8013a7a:	4038      	ands	r0, r7
 8013a7c:	4599      	cmp	r9, r3
 8013a7e:	b2c0      	uxtb	r0, r0
 8013a80:	d3e5      	bcc.n	8013a4e <uxr_deserialize_CLIENT_Representation+0x9a>
 8013a82:	4006      	ands	r6, r0
 8013a84:	e7c8      	b.n	8013a18 <uxr_deserialize_CLIENT_Representation+0x64>
 8013a86:	bf00      	nop

08013a88 <uxr_serialize_AGENT_Representation>:
 8013a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a8c:	2204      	movs	r2, #4
 8013a8e:	460c      	mov	r4, r1
 8013a90:	4605      	mov	r5, r0
 8013a92:	f004 fa59 	bl	8017f48 <ucdr_serialize_array_uint8_t>
 8013a96:	1d21      	adds	r1, r4, #4
 8013a98:	4606      	mov	r6, r0
 8013a9a:	2202      	movs	r2, #2
 8013a9c:	4628      	mov	r0, r5
 8013a9e:	f004 fa53 	bl	8017f48 <ucdr_serialize_array_uint8_t>
 8013aa2:	1da1      	adds	r1, r4, #6
 8013aa4:	4006      	ands	r6, r0
 8013aa6:	2202      	movs	r2, #2
 8013aa8:	4628      	mov	r0, r5
 8013aaa:	f004 fa4d 	bl	8017f48 <ucdr_serialize_array_uint8_t>
 8013aae:	b2f6      	uxtb	r6, r6
 8013ab0:	4603      	mov	r3, r0
 8013ab2:	7a21      	ldrb	r1, [r4, #8]
 8013ab4:	4628      	mov	r0, r5
 8013ab6:	401e      	ands	r6, r3
 8013ab8:	f7fc ff3c 	bl	8010934 <ucdr_serialize_bool>
 8013abc:	7a23      	ldrb	r3, [r4, #8]
 8013abe:	ea00 0706 	and.w	r7, r0, r6
 8013ac2:	b913      	cbnz	r3, 8013aca <uxr_serialize_AGENT_Representation+0x42>
 8013ac4:	4638      	mov	r0, r7
 8013ac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013aca:	68e1      	ldr	r1, [r4, #12]
 8013acc:	4628      	mov	r0, r5
 8013ace:	f7fd f977 	bl	8010dc0 <ucdr_serialize_uint32_t>
 8013ad2:	68e3      	ldr	r3, [r4, #12]
 8013ad4:	b313      	cbz	r3, 8013b1c <uxr_serialize_AGENT_Representation+0x94>
 8013ad6:	b1e8      	cbz	r0, 8013b14 <uxr_serialize_AGENT_Representation+0x8c>
 8013ad8:	46a0      	mov	r8, r4
 8013ada:	f04f 0900 	mov.w	r9, #0
 8013ade:	e002      	b.n	8013ae6 <uxr_serialize_AGENT_Representation+0x5e>
 8013ae0:	f108 0808 	add.w	r8, r8, #8
 8013ae4:	b1b3      	cbz	r3, 8013b14 <uxr_serialize_AGENT_Representation+0x8c>
 8013ae6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013aea:	4628      	mov	r0, r5
 8013aec:	f004 fb4c 	bl	8018188 <ucdr_serialize_string>
 8013af0:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013af4:	4606      	mov	r6, r0
 8013af6:	4628      	mov	r0, r5
 8013af8:	f004 fb46 	bl	8018188 <ucdr_serialize_string>
 8013afc:	68e2      	ldr	r2, [r4, #12]
 8013afe:	f109 0901 	add.w	r9, r9, #1
 8013b02:	ea06 0300 	and.w	r3, r6, r0
 8013b06:	4591      	cmp	r9, r2
 8013b08:	b2db      	uxtb	r3, r3
 8013b0a:	d3e9      	bcc.n	8013ae0 <uxr_serialize_AGENT_Representation+0x58>
 8013b0c:	401f      	ands	r7, r3
 8013b0e:	4638      	mov	r0, r7
 8013b10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b14:	2700      	movs	r7, #0
 8013b16:	4638      	mov	r0, r7
 8013b18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b1c:	4007      	ands	r7, r0
 8013b1e:	e7d1      	b.n	8013ac4 <uxr_serialize_AGENT_Representation+0x3c>

08013b20 <uxr_serialize_ObjectVariant.part.0>:
 8013b20:	b570      	push	{r4, r5, r6, lr}
 8013b22:	780b      	ldrb	r3, [r1, #0]
 8013b24:	3b01      	subs	r3, #1
 8013b26:	460c      	mov	r4, r1
 8013b28:	4605      	mov	r5, r0
 8013b2a:	2b0d      	cmp	r3, #13
 8013b2c:	d869      	bhi.n	8013c02 <uxr_serialize_ObjectVariant.part.0+0xe2>
 8013b2e:	e8df f003 	tbb	[pc, r3]
 8013b32:	074a      	.short	0x074a
 8013b34:	07073030 	.word	0x07073030
 8013b38:	21680707 	.word	0x21680707
 8013b3c:	45632121 	.word	0x45632121
 8013b40:	7909      	ldrb	r1, [r1, #4]
 8013b42:	f7fc ff27 	bl	8010994 <ucdr_serialize_uint8_t>
 8013b46:	4606      	mov	r6, r0
 8013b48:	b158      	cbz	r0, 8013b62 <uxr_serialize_ObjectVariant.part.0+0x42>
 8013b4a:	7923      	ldrb	r3, [r4, #4]
 8013b4c:	2b02      	cmp	r3, #2
 8013b4e:	d003      	beq.n	8013b58 <uxr_serialize_ObjectVariant.part.0+0x38>
 8013b50:	2b03      	cmp	r3, #3
 8013b52:	d029      	beq.n	8013ba8 <uxr_serialize_ObjectVariant.part.0+0x88>
 8013b54:	2b01      	cmp	r3, #1
 8013b56:	d104      	bne.n	8013b62 <uxr_serialize_ObjectVariant.part.0+0x42>
 8013b58:	68a1      	ldr	r1, [r4, #8]
 8013b5a:	4628      	mov	r0, r5
 8013b5c:	f004 fb14 	bl	8018188 <ucdr_serialize_string>
 8013b60:	4606      	mov	r6, r0
 8013b62:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8013b66:	4628      	mov	r0, r5
 8013b68:	2202      	movs	r2, #2
 8013b6a:	f004 f9ed 	bl	8017f48 <ucdr_serialize_array_uint8_t>
 8013b6e:	4030      	ands	r0, r6
 8013b70:	b2c0      	uxtb	r0, r0
 8013b72:	bd70      	pop	{r4, r5, r6, pc}
 8013b74:	7909      	ldrb	r1, [r1, #4]
 8013b76:	f7fc ff0d 	bl	8010994 <ucdr_serialize_uint8_t>
 8013b7a:	b1e8      	cbz	r0, 8013bb8 <uxr_serialize_ObjectVariant.part.0+0x98>
 8013b7c:	7923      	ldrb	r3, [r4, #4]
 8013b7e:	2b01      	cmp	r3, #1
 8013b80:	d001      	beq.n	8013b86 <uxr_serialize_ObjectVariant.part.0+0x66>
 8013b82:	2b02      	cmp	r3, #2
 8013b84:	d13d      	bne.n	8013c02 <uxr_serialize_ObjectVariant.part.0+0xe2>
 8013b86:	68a1      	ldr	r1, [r4, #8]
 8013b88:	4628      	mov	r0, r5
 8013b8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013b8e:	f004 bafb 	b.w	8018188 <ucdr_serialize_string>
 8013b92:	7909      	ldrb	r1, [r1, #4]
 8013b94:	f7fc fefe 	bl	8010994 <ucdr_serialize_uint8_t>
 8013b98:	4606      	mov	r6, r0
 8013b9a:	2800      	cmp	r0, #0
 8013b9c:	d0e1      	beq.n	8013b62 <uxr_serialize_ObjectVariant.part.0+0x42>
 8013b9e:	7923      	ldrb	r3, [r4, #4]
 8013ba0:	2b02      	cmp	r3, #2
 8013ba2:	d0d9      	beq.n	8013b58 <uxr_serialize_ObjectVariant.part.0+0x38>
 8013ba4:	2b03      	cmp	r3, #3
 8013ba6:	d1dc      	bne.n	8013b62 <uxr_serialize_ObjectVariant.part.0+0x42>
 8013ba8:	68a2      	ldr	r2, [r4, #8]
 8013baa:	f104 010c 	add.w	r1, r4, #12
 8013bae:	4628      	mov	r0, r5
 8013bb0:	f004 fabe 	bl	8018130 <ucdr_serialize_sequence_uint8_t>
 8013bb4:	4606      	mov	r6, r0
 8013bb6:	e7d4      	b.n	8013b62 <uxr_serialize_ObjectVariant.part.0+0x42>
 8013bb8:	2000      	movs	r0, #0
 8013bba:	bd70      	pop	{r4, r5, r6, pc}
 8013bbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013bc0:	3104      	adds	r1, #4
 8013bc2:	f7ff be9b 	b.w	80138fc <uxr_serialize_CLIENT_Representation>
 8013bc6:	7909      	ldrb	r1, [r1, #4]
 8013bc8:	f7fc fee4 	bl	8010994 <ucdr_serialize_uint8_t>
 8013bcc:	4606      	mov	r6, r0
 8013bce:	b158      	cbz	r0, 8013be8 <uxr_serialize_ObjectVariant.part.0+0xc8>
 8013bd0:	7923      	ldrb	r3, [r4, #4]
 8013bd2:	2b02      	cmp	r3, #2
 8013bd4:	d003      	beq.n	8013bde <uxr_serialize_ObjectVariant.part.0+0xbe>
 8013bd6:	2b03      	cmp	r3, #3
 8013bd8:	d015      	beq.n	8013c06 <uxr_serialize_ObjectVariant.part.0+0xe6>
 8013bda:	2b01      	cmp	r3, #1
 8013bdc:	d104      	bne.n	8013be8 <uxr_serialize_ObjectVariant.part.0+0xc8>
 8013bde:	68a1      	ldr	r1, [r4, #8]
 8013be0:	4628      	mov	r0, r5
 8013be2:	f004 fad1 	bl	8018188 <ucdr_serialize_string>
 8013be6:	4606      	mov	r6, r0
 8013be8:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 8013bec:	4628      	mov	r0, r5
 8013bee:	f7fd fc0d 	bl	801140c <ucdr_serialize_int16_t>
 8013bf2:	4030      	ands	r0, r6
 8013bf4:	b2c0      	uxtb	r0, r0
 8013bf6:	bd70      	pop	{r4, r5, r6, pc}
 8013bf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013bfc:	3104      	adds	r1, #4
 8013bfe:	f7ff bf43 	b.w	8013a88 <uxr_serialize_AGENT_Representation>
 8013c02:	2001      	movs	r0, #1
 8013c04:	bd70      	pop	{r4, r5, r6, pc}
 8013c06:	68a2      	ldr	r2, [r4, #8]
 8013c08:	f104 010c 	add.w	r1, r4, #12
 8013c0c:	4628      	mov	r0, r5
 8013c0e:	f004 fa8f 	bl	8018130 <ucdr_serialize_sequence_uint8_t>
 8013c12:	4606      	mov	r6, r0
 8013c14:	e7e8      	b.n	8013be8 <uxr_serialize_ObjectVariant.part.0+0xc8>
 8013c16:	bf00      	nop

08013c18 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8013c18:	b570      	push	{r4, r5, r6, lr}
 8013c1a:	460d      	mov	r5, r1
 8013c1c:	7809      	ldrb	r1, [r1, #0]
 8013c1e:	4606      	mov	r6, r0
 8013c20:	f7fc fe88 	bl	8010934 <ucdr_serialize_bool>
 8013c24:	782b      	ldrb	r3, [r5, #0]
 8013c26:	4604      	mov	r4, r0
 8013c28:	b94b      	cbnz	r3, 8013c3e <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8013c2a:	7a29      	ldrb	r1, [r5, #8]
 8013c2c:	4630      	mov	r0, r6
 8013c2e:	f7fc fe81 	bl	8010934 <ucdr_serialize_bool>
 8013c32:	7a2b      	ldrb	r3, [r5, #8]
 8013c34:	4004      	ands	r4, r0
 8013c36:	b2e4      	uxtb	r4, r4
 8013c38:	b943      	cbnz	r3, 8013c4c <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8013c3a:	4620      	mov	r0, r4
 8013c3c:	bd70      	pop	{r4, r5, r6, pc}
 8013c3e:	6869      	ldr	r1, [r5, #4]
 8013c40:	4630      	mov	r0, r6
 8013c42:	f004 faa1 	bl	8018188 <ucdr_serialize_string>
 8013c46:	4004      	ands	r4, r0
 8013c48:	b2e4      	uxtb	r4, r4
 8013c4a:	e7ee      	b.n	8013c2a <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8013c4c:	68e9      	ldr	r1, [r5, #12]
 8013c4e:	4630      	mov	r0, r6
 8013c50:	f004 fa9a 	bl	8018188 <ucdr_serialize_string>
 8013c54:	4004      	ands	r4, r0
 8013c56:	4620      	mov	r0, r4
 8013c58:	bd70      	pop	{r4, r5, r6, pc}
 8013c5a:	bf00      	nop

08013c5c <uxr_serialize_OBJK_Topic_Binary>:
 8013c5c:	b570      	push	{r4, r5, r6, lr}
 8013c5e:	460d      	mov	r5, r1
 8013c60:	6809      	ldr	r1, [r1, #0]
 8013c62:	4606      	mov	r6, r0
 8013c64:	f004 fa90 	bl	8018188 <ucdr_serialize_string>
 8013c68:	7929      	ldrb	r1, [r5, #4]
 8013c6a:	4604      	mov	r4, r0
 8013c6c:	4630      	mov	r0, r6
 8013c6e:	f7fc fe61 	bl	8010934 <ucdr_serialize_bool>
 8013c72:	792b      	ldrb	r3, [r5, #4]
 8013c74:	4004      	ands	r4, r0
 8013c76:	b2e4      	uxtb	r4, r4
 8013c78:	b943      	cbnz	r3, 8013c8c <uxr_serialize_OBJK_Topic_Binary+0x30>
 8013c7a:	7b29      	ldrb	r1, [r5, #12]
 8013c7c:	4630      	mov	r0, r6
 8013c7e:	f7fc fe59 	bl	8010934 <ucdr_serialize_bool>
 8013c82:	7b2b      	ldrb	r3, [r5, #12]
 8013c84:	4004      	ands	r4, r0
 8013c86:	b93b      	cbnz	r3, 8013c98 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8013c88:	4620      	mov	r0, r4
 8013c8a:	bd70      	pop	{r4, r5, r6, pc}
 8013c8c:	68a9      	ldr	r1, [r5, #8]
 8013c8e:	4630      	mov	r0, r6
 8013c90:	f004 fa7a 	bl	8018188 <ucdr_serialize_string>
 8013c94:	4004      	ands	r4, r0
 8013c96:	e7f0      	b.n	8013c7a <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8013c98:	6929      	ldr	r1, [r5, #16]
 8013c9a:	4630      	mov	r0, r6
 8013c9c:	f004 fa74 	bl	8018188 <ucdr_serialize_string>
 8013ca0:	4004      	ands	r4, r0
 8013ca2:	b2e4      	uxtb	r4, r4
 8013ca4:	4620      	mov	r0, r4
 8013ca6:	bd70      	pop	{r4, r5, r6, pc}

08013ca8 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8013ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cac:	460c      	mov	r4, r1
 8013cae:	7809      	ldrb	r1, [r1, #0]
 8013cb0:	4606      	mov	r6, r0
 8013cb2:	f7fc fe3f 	bl	8010934 <ucdr_serialize_bool>
 8013cb6:	7823      	ldrb	r3, [r4, #0]
 8013cb8:	4605      	mov	r5, r0
 8013cba:	b96b      	cbnz	r3, 8013cd8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8013cbc:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8013cc0:	4630      	mov	r0, r6
 8013cc2:	f7fc fe37 	bl	8010934 <ucdr_serialize_bool>
 8013cc6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8013cca:	4005      	ands	r5, r0
 8013ccc:	b2ed      	uxtb	r5, r5
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d169      	bne.n	8013da6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8013cd2:	4628      	mov	r0, r5
 8013cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cd8:	6861      	ldr	r1, [r4, #4]
 8013cda:	4630      	mov	r0, r6
 8013cdc:	f7fd f870 	bl	8010dc0 <ucdr_serialize_uint32_t>
 8013ce0:	6863      	ldr	r3, [r4, #4]
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d06b      	beq.n	8013dbe <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8013ce6:	2800      	cmp	r0, #0
 8013ce8:	d067      	beq.n	8013dba <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013cea:	68a1      	ldr	r1, [r4, #8]
 8013cec:	4630      	mov	r0, r6
 8013cee:	f004 fa4b 	bl	8018188 <ucdr_serialize_string>
 8013cf2:	6863      	ldr	r3, [r4, #4]
 8013cf4:	2b01      	cmp	r3, #1
 8013cf6:	d953      	bls.n	8013da0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013cf8:	2800      	cmp	r0, #0
 8013cfa:	d05e      	beq.n	8013dba <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013cfc:	68e1      	ldr	r1, [r4, #12]
 8013cfe:	4630      	mov	r0, r6
 8013d00:	f004 fa42 	bl	8018188 <ucdr_serialize_string>
 8013d04:	6863      	ldr	r3, [r4, #4]
 8013d06:	2b02      	cmp	r3, #2
 8013d08:	d94a      	bls.n	8013da0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013d0a:	2800      	cmp	r0, #0
 8013d0c:	d055      	beq.n	8013dba <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013d0e:	6921      	ldr	r1, [r4, #16]
 8013d10:	4630      	mov	r0, r6
 8013d12:	f004 fa39 	bl	8018188 <ucdr_serialize_string>
 8013d16:	6863      	ldr	r3, [r4, #4]
 8013d18:	2b03      	cmp	r3, #3
 8013d1a:	d941      	bls.n	8013da0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013d1c:	2800      	cmp	r0, #0
 8013d1e:	d04c      	beq.n	8013dba <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013d20:	6961      	ldr	r1, [r4, #20]
 8013d22:	4630      	mov	r0, r6
 8013d24:	f004 fa30 	bl	8018188 <ucdr_serialize_string>
 8013d28:	6863      	ldr	r3, [r4, #4]
 8013d2a:	2b04      	cmp	r3, #4
 8013d2c:	d938      	bls.n	8013da0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013d2e:	2800      	cmp	r0, #0
 8013d30:	d043      	beq.n	8013dba <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013d32:	69a1      	ldr	r1, [r4, #24]
 8013d34:	4630      	mov	r0, r6
 8013d36:	f004 fa27 	bl	8018188 <ucdr_serialize_string>
 8013d3a:	6863      	ldr	r3, [r4, #4]
 8013d3c:	2b05      	cmp	r3, #5
 8013d3e:	d92f      	bls.n	8013da0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013d40:	2800      	cmp	r0, #0
 8013d42:	d03a      	beq.n	8013dba <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013d44:	69e1      	ldr	r1, [r4, #28]
 8013d46:	4630      	mov	r0, r6
 8013d48:	f004 fa1e 	bl	8018188 <ucdr_serialize_string>
 8013d4c:	6863      	ldr	r3, [r4, #4]
 8013d4e:	2b06      	cmp	r3, #6
 8013d50:	d926      	bls.n	8013da0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013d52:	b390      	cbz	r0, 8013dba <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013d54:	6a21      	ldr	r1, [r4, #32]
 8013d56:	4630      	mov	r0, r6
 8013d58:	f004 fa16 	bl	8018188 <ucdr_serialize_string>
 8013d5c:	6863      	ldr	r3, [r4, #4]
 8013d5e:	2b07      	cmp	r3, #7
 8013d60:	d91e      	bls.n	8013da0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013d62:	b350      	cbz	r0, 8013dba <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013d64:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013d66:	4630      	mov	r0, r6
 8013d68:	f004 fa0e 	bl	8018188 <ucdr_serialize_string>
 8013d6c:	6863      	ldr	r3, [r4, #4]
 8013d6e:	2b08      	cmp	r3, #8
 8013d70:	d916      	bls.n	8013da0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013d72:	b310      	cbz	r0, 8013dba <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013d74:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8013d76:	4630      	mov	r0, r6
 8013d78:	f004 fa06 	bl	8018188 <ucdr_serialize_string>
 8013d7c:	6863      	ldr	r3, [r4, #4]
 8013d7e:	2b09      	cmp	r3, #9
 8013d80:	d90e      	bls.n	8013da0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013d82:	b1d0      	cbz	r0, 8013dba <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013d84:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8013d88:	2709      	movs	r7, #9
 8013d8a:	e000      	b.n	8013d8e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8013d8c:	b1a8      	cbz	r0, 8013dba <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013d8e:	f858 1b04 	ldr.w	r1, [r8], #4
 8013d92:	4630      	mov	r0, r6
 8013d94:	f004 f9f8 	bl	8018188 <ucdr_serialize_string>
 8013d98:	6862      	ldr	r2, [r4, #4]
 8013d9a:	3701      	adds	r7, #1
 8013d9c:	4297      	cmp	r7, r2
 8013d9e:	d3f5      	bcc.n	8013d8c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8013da0:	4005      	ands	r5, r0
 8013da2:	b2ed      	uxtb	r5, r5
 8013da4:	e78a      	b.n	8013cbc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8013da6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8013da8:	4630      	mov	r0, r6
 8013daa:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8013dae:	f004 f9bf 	bl	8018130 <ucdr_serialize_sequence_uint8_t>
 8013db2:	4005      	ands	r5, r0
 8013db4:	4628      	mov	r0, r5
 8013db6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013dba:	2500      	movs	r5, #0
 8013dbc:	e77e      	b.n	8013cbc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8013dbe:	4028      	ands	r0, r5
 8013dc0:	b2c5      	uxtb	r5, r0
 8013dc2:	e77b      	b.n	8013cbc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08013dc4 <uxr_serialize_OBJK_Publisher_Binary>:
 8013dc4:	b570      	push	{r4, r5, r6, lr}
 8013dc6:	460d      	mov	r5, r1
 8013dc8:	7809      	ldrb	r1, [r1, #0]
 8013dca:	4606      	mov	r6, r0
 8013dcc:	f7fc fdb2 	bl	8010934 <ucdr_serialize_bool>
 8013dd0:	782b      	ldrb	r3, [r5, #0]
 8013dd2:	4604      	mov	r4, r0
 8013dd4:	b94b      	cbnz	r3, 8013dea <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8013dd6:	7a29      	ldrb	r1, [r5, #8]
 8013dd8:	4630      	mov	r0, r6
 8013dda:	f7fc fdab 	bl	8010934 <ucdr_serialize_bool>
 8013dde:	7a2b      	ldrb	r3, [r5, #8]
 8013de0:	4004      	ands	r4, r0
 8013de2:	b2e4      	uxtb	r4, r4
 8013de4:	b943      	cbnz	r3, 8013df8 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8013de6:	4620      	mov	r0, r4
 8013de8:	bd70      	pop	{r4, r5, r6, pc}
 8013dea:	6869      	ldr	r1, [r5, #4]
 8013dec:	4630      	mov	r0, r6
 8013dee:	f004 f9cb 	bl	8018188 <ucdr_serialize_string>
 8013df2:	4004      	ands	r4, r0
 8013df4:	b2e4      	uxtb	r4, r4
 8013df6:	e7ee      	b.n	8013dd6 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8013df8:	f105 010c 	add.w	r1, r5, #12
 8013dfc:	4630      	mov	r0, r6
 8013dfe:	f7ff ff53 	bl	8013ca8 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8013e02:	4004      	ands	r4, r0
 8013e04:	4620      	mov	r0, r4
 8013e06:	bd70      	pop	{r4, r5, r6, pc}

08013e08 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8013e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e0c:	460c      	mov	r4, r1
 8013e0e:	7809      	ldrb	r1, [r1, #0]
 8013e10:	4606      	mov	r6, r0
 8013e12:	f7fc fd8f 	bl	8010934 <ucdr_serialize_bool>
 8013e16:	7823      	ldrb	r3, [r4, #0]
 8013e18:	4605      	mov	r5, r0
 8013e1a:	b96b      	cbnz	r3, 8013e38 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8013e1c:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8013e20:	4630      	mov	r0, r6
 8013e22:	f7fc fd87 	bl	8010934 <ucdr_serialize_bool>
 8013e26:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8013e2a:	4005      	ands	r5, r0
 8013e2c:	b2ed      	uxtb	r5, r5
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d169      	bne.n	8013f06 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8013e32:	4628      	mov	r0, r5
 8013e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e38:	6861      	ldr	r1, [r4, #4]
 8013e3a:	4630      	mov	r0, r6
 8013e3c:	f7fc ffc0 	bl	8010dc0 <ucdr_serialize_uint32_t>
 8013e40:	6863      	ldr	r3, [r4, #4]
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d06b      	beq.n	8013f1e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8013e46:	2800      	cmp	r0, #0
 8013e48:	d067      	beq.n	8013f1a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013e4a:	68a1      	ldr	r1, [r4, #8]
 8013e4c:	4630      	mov	r0, r6
 8013e4e:	f004 f99b 	bl	8018188 <ucdr_serialize_string>
 8013e52:	6863      	ldr	r3, [r4, #4]
 8013e54:	2b01      	cmp	r3, #1
 8013e56:	d953      	bls.n	8013f00 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013e58:	2800      	cmp	r0, #0
 8013e5a:	d05e      	beq.n	8013f1a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013e5c:	68e1      	ldr	r1, [r4, #12]
 8013e5e:	4630      	mov	r0, r6
 8013e60:	f004 f992 	bl	8018188 <ucdr_serialize_string>
 8013e64:	6863      	ldr	r3, [r4, #4]
 8013e66:	2b02      	cmp	r3, #2
 8013e68:	d94a      	bls.n	8013f00 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013e6a:	2800      	cmp	r0, #0
 8013e6c:	d055      	beq.n	8013f1a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013e6e:	6921      	ldr	r1, [r4, #16]
 8013e70:	4630      	mov	r0, r6
 8013e72:	f004 f989 	bl	8018188 <ucdr_serialize_string>
 8013e76:	6863      	ldr	r3, [r4, #4]
 8013e78:	2b03      	cmp	r3, #3
 8013e7a:	d941      	bls.n	8013f00 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013e7c:	2800      	cmp	r0, #0
 8013e7e:	d04c      	beq.n	8013f1a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013e80:	6961      	ldr	r1, [r4, #20]
 8013e82:	4630      	mov	r0, r6
 8013e84:	f004 f980 	bl	8018188 <ucdr_serialize_string>
 8013e88:	6863      	ldr	r3, [r4, #4]
 8013e8a:	2b04      	cmp	r3, #4
 8013e8c:	d938      	bls.n	8013f00 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013e8e:	2800      	cmp	r0, #0
 8013e90:	d043      	beq.n	8013f1a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013e92:	69a1      	ldr	r1, [r4, #24]
 8013e94:	4630      	mov	r0, r6
 8013e96:	f004 f977 	bl	8018188 <ucdr_serialize_string>
 8013e9a:	6863      	ldr	r3, [r4, #4]
 8013e9c:	2b05      	cmp	r3, #5
 8013e9e:	d92f      	bls.n	8013f00 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013ea0:	2800      	cmp	r0, #0
 8013ea2:	d03a      	beq.n	8013f1a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013ea4:	69e1      	ldr	r1, [r4, #28]
 8013ea6:	4630      	mov	r0, r6
 8013ea8:	f004 f96e 	bl	8018188 <ucdr_serialize_string>
 8013eac:	6863      	ldr	r3, [r4, #4]
 8013eae:	2b06      	cmp	r3, #6
 8013eb0:	d926      	bls.n	8013f00 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013eb2:	b390      	cbz	r0, 8013f1a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013eb4:	6a21      	ldr	r1, [r4, #32]
 8013eb6:	4630      	mov	r0, r6
 8013eb8:	f004 f966 	bl	8018188 <ucdr_serialize_string>
 8013ebc:	6863      	ldr	r3, [r4, #4]
 8013ebe:	2b07      	cmp	r3, #7
 8013ec0:	d91e      	bls.n	8013f00 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013ec2:	b350      	cbz	r0, 8013f1a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013ec4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013ec6:	4630      	mov	r0, r6
 8013ec8:	f004 f95e 	bl	8018188 <ucdr_serialize_string>
 8013ecc:	6863      	ldr	r3, [r4, #4]
 8013ece:	2b08      	cmp	r3, #8
 8013ed0:	d916      	bls.n	8013f00 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013ed2:	b310      	cbz	r0, 8013f1a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013ed4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8013ed6:	4630      	mov	r0, r6
 8013ed8:	f004 f956 	bl	8018188 <ucdr_serialize_string>
 8013edc:	6863      	ldr	r3, [r4, #4]
 8013ede:	2b09      	cmp	r3, #9
 8013ee0:	d90e      	bls.n	8013f00 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013ee2:	b1d0      	cbz	r0, 8013f1a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013ee4:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8013ee8:	2709      	movs	r7, #9
 8013eea:	e000      	b.n	8013eee <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8013eec:	b1a8      	cbz	r0, 8013f1a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013eee:	f858 1b04 	ldr.w	r1, [r8], #4
 8013ef2:	4630      	mov	r0, r6
 8013ef4:	f004 f948 	bl	8018188 <ucdr_serialize_string>
 8013ef8:	6862      	ldr	r2, [r4, #4]
 8013efa:	3701      	adds	r7, #1
 8013efc:	4297      	cmp	r7, r2
 8013efe:	d3f5      	bcc.n	8013eec <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8013f00:	4005      	ands	r5, r0
 8013f02:	b2ed      	uxtb	r5, r5
 8013f04:	e78a      	b.n	8013e1c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8013f06:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8013f08:	4630      	mov	r0, r6
 8013f0a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8013f0e:	f004 f90f 	bl	8018130 <ucdr_serialize_sequence_uint8_t>
 8013f12:	4005      	ands	r5, r0
 8013f14:	4628      	mov	r0, r5
 8013f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f1a:	2500      	movs	r5, #0
 8013f1c:	e77e      	b.n	8013e1c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8013f1e:	4028      	ands	r0, r5
 8013f20:	b2c5      	uxtb	r5, r0
 8013f22:	e77b      	b.n	8013e1c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08013f24 <uxr_serialize_OBJK_Subscriber_Binary>:
 8013f24:	b570      	push	{r4, r5, r6, lr}
 8013f26:	460d      	mov	r5, r1
 8013f28:	7809      	ldrb	r1, [r1, #0]
 8013f2a:	4606      	mov	r6, r0
 8013f2c:	f7fc fd02 	bl	8010934 <ucdr_serialize_bool>
 8013f30:	782b      	ldrb	r3, [r5, #0]
 8013f32:	4604      	mov	r4, r0
 8013f34:	b94b      	cbnz	r3, 8013f4a <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8013f36:	7a29      	ldrb	r1, [r5, #8]
 8013f38:	4630      	mov	r0, r6
 8013f3a:	f7fc fcfb 	bl	8010934 <ucdr_serialize_bool>
 8013f3e:	7a2b      	ldrb	r3, [r5, #8]
 8013f40:	4004      	ands	r4, r0
 8013f42:	b2e4      	uxtb	r4, r4
 8013f44:	b943      	cbnz	r3, 8013f58 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8013f46:	4620      	mov	r0, r4
 8013f48:	bd70      	pop	{r4, r5, r6, pc}
 8013f4a:	6869      	ldr	r1, [r5, #4]
 8013f4c:	4630      	mov	r0, r6
 8013f4e:	f004 f91b 	bl	8018188 <ucdr_serialize_string>
 8013f52:	4004      	ands	r4, r0
 8013f54:	b2e4      	uxtb	r4, r4
 8013f56:	e7ee      	b.n	8013f36 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8013f58:	f105 010c 	add.w	r1, r5, #12
 8013f5c:	4630      	mov	r0, r6
 8013f5e:	f7ff ff53 	bl	8013e08 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8013f62:	4004      	ands	r4, r0
 8013f64:	4620      	mov	r0, r4
 8013f66:	bd70      	pop	{r4, r5, r6, pc}

08013f68 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8013f68:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8013f6c:	4688      	mov	r8, r1
 8013f6e:	8809      	ldrh	r1, [r1, #0]
 8013f70:	4681      	mov	r9, r0
 8013f72:	f7fc fd3b 	bl	80109ec <ucdr_serialize_uint16_t>
 8013f76:	f898 1002 	ldrb.w	r1, [r8, #2]
 8013f7a:	4606      	mov	r6, r0
 8013f7c:	4648      	mov	r0, r9
 8013f7e:	f7fc fcd9 	bl	8010934 <ucdr_serialize_bool>
 8013f82:	f898 3002 	ldrb.w	r3, [r8, #2]
 8013f86:	4030      	ands	r0, r6
 8013f88:	b2c5      	uxtb	r5, r0
 8013f8a:	b9eb      	cbnz	r3, 8013fc8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8013f8c:	f898 1006 	ldrb.w	r1, [r8, #6]
 8013f90:	4648      	mov	r0, r9
 8013f92:	f7fc fccf 	bl	8010934 <ucdr_serialize_bool>
 8013f96:	f898 3006 	ldrb.w	r3, [r8, #6]
 8013f9a:	4005      	ands	r5, r0
 8013f9c:	bb7b      	cbnz	r3, 8013ffe <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8013f9e:	f898 100c 	ldrb.w	r1, [r8, #12]
 8013fa2:	4648      	mov	r0, r9
 8013fa4:	f7fc fcc6 	bl	8010934 <ucdr_serialize_bool>
 8013fa8:	f898 300c 	ldrb.w	r3, [r8, #12]
 8013fac:	4005      	ands	r5, r0
 8013fae:	b9f3      	cbnz	r3, 8013fee <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8013fb0:	f898 1014 	ldrb.w	r1, [r8, #20]
 8013fb4:	4648      	mov	r0, r9
 8013fb6:	f7fc fcbd 	bl	8010934 <ucdr_serialize_bool>
 8013fba:	f898 3014 	ldrb.w	r3, [r8, #20]
 8013fbe:	4005      	ands	r5, r0
 8013fc0:	b94b      	cbnz	r3, 8013fd6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8013fc2:	4628      	mov	r0, r5
 8013fc4:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8013fc8:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8013fcc:	4648      	mov	r0, r9
 8013fce:	f7fc fd0d 	bl	80109ec <ucdr_serialize_uint16_t>
 8013fd2:	4005      	ands	r5, r0
 8013fd4:	e7da      	b.n	8013f8c <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8013fd6:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8013fda:	4648      	mov	r0, r9
 8013fdc:	f108 011c 	add.w	r1, r8, #28
 8013fe0:	f004 f8a6 	bl	8018130 <ucdr_serialize_sequence_uint8_t>
 8013fe4:	4028      	ands	r0, r5
 8013fe6:	b2c5      	uxtb	r5, r0
 8013fe8:	4628      	mov	r0, r5
 8013fea:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8013fee:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013ff2:	4648      	mov	r0, r9
 8013ff4:	f7fc fee4 	bl	8010dc0 <ucdr_serialize_uint32_t>
 8013ff8:	4028      	ands	r0, r5
 8013ffa:	b2c5      	uxtb	r5, r0
 8013ffc:	e7d8      	b.n	8013fb0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8013ffe:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8014002:	4648      	mov	r0, r9
 8014004:	f7fc fedc 	bl	8010dc0 <ucdr_serialize_uint32_t>
 8014008:	4028      	ands	r0, r5
 801400a:	b2c5      	uxtb	r5, r0
 801400c:	e7c7      	b.n	8013f9e <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 801400e:	bf00      	nop

08014010 <uxr_serialize_OBJK_DataReader_Binary>:
 8014010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014012:	2202      	movs	r2, #2
 8014014:	460c      	mov	r4, r1
 8014016:	4606      	mov	r6, r0
 8014018:	f003 ff96 	bl	8017f48 <ucdr_serialize_array_uint8_t>
 801401c:	78a1      	ldrb	r1, [r4, #2]
 801401e:	4605      	mov	r5, r0
 8014020:	4630      	mov	r0, r6
 8014022:	f7fc fc87 	bl	8010934 <ucdr_serialize_bool>
 8014026:	78a3      	ldrb	r3, [r4, #2]
 8014028:	4005      	ands	r5, r0
 801402a:	b2ed      	uxtb	r5, r5
 801402c:	b90b      	cbnz	r3, 8014032 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 801402e:	4628      	mov	r0, r5
 8014030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014032:	f104 0108 	add.w	r1, r4, #8
 8014036:	4630      	mov	r0, r6
 8014038:	f7ff ff96 	bl	8013f68 <uxr_serialize_OBJK_Endpoint_QosBinary>
 801403c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8014040:	4607      	mov	r7, r0
 8014042:	4630      	mov	r0, r6
 8014044:	f7fc fc76 	bl	8010934 <ucdr_serialize_bool>
 8014048:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801404c:	4038      	ands	r0, r7
 801404e:	b2c7      	uxtb	r7, r0
 8014050:	b95b      	cbnz	r3, 801406a <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8014052:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 8014056:	4630      	mov	r0, r6
 8014058:	f7fc fc6c 	bl	8010934 <ucdr_serialize_bool>
 801405c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8014060:	4007      	ands	r7, r0
 8014062:	b94b      	cbnz	r3, 8014078 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8014064:	403d      	ands	r5, r7
 8014066:	4628      	mov	r0, r5
 8014068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801406a:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 801406e:	4630      	mov	r0, r6
 8014070:	f7fd f8fc 	bl	801126c <ucdr_serialize_uint64_t>
 8014074:	4007      	ands	r7, r0
 8014076:	e7ec      	b.n	8014052 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8014078:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801407a:	4630      	mov	r0, r6
 801407c:	f004 f884 	bl	8018188 <ucdr_serialize_string>
 8014080:	4007      	ands	r7, r0
 8014082:	b2ff      	uxtb	r7, r7
 8014084:	e7ee      	b.n	8014064 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8014086:	bf00      	nop

08014088 <uxr_serialize_OBJK_DataWriter_Binary>:
 8014088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801408a:	2202      	movs	r2, #2
 801408c:	460d      	mov	r5, r1
 801408e:	4606      	mov	r6, r0
 8014090:	f003 ff5a 	bl	8017f48 <ucdr_serialize_array_uint8_t>
 8014094:	78a9      	ldrb	r1, [r5, #2]
 8014096:	4604      	mov	r4, r0
 8014098:	4630      	mov	r0, r6
 801409a:	f7fc fc4b 	bl	8010934 <ucdr_serialize_bool>
 801409e:	78ab      	ldrb	r3, [r5, #2]
 80140a0:	4004      	ands	r4, r0
 80140a2:	b2e4      	uxtb	r4, r4
 80140a4:	b90b      	cbnz	r3, 80140aa <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 80140a6:	4620      	mov	r0, r4
 80140a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140aa:	f105 0108 	add.w	r1, r5, #8
 80140ae:	4630      	mov	r0, r6
 80140b0:	f7ff ff5a 	bl	8013f68 <uxr_serialize_OBJK_Endpoint_QosBinary>
 80140b4:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 80140b8:	4607      	mov	r7, r0
 80140ba:	4630      	mov	r0, r6
 80140bc:	f7fc fc3a 	bl	8010934 <ucdr_serialize_bool>
 80140c0:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 80140c4:	4007      	ands	r7, r0
 80140c6:	b2ff      	uxtb	r7, r7
 80140c8:	b913      	cbnz	r3, 80140d0 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 80140ca:	403c      	ands	r4, r7
 80140cc:	4620      	mov	r0, r4
 80140ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140d0:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 80140d4:	4630      	mov	r0, r6
 80140d6:	f7fd f8c9 	bl	801126c <ucdr_serialize_uint64_t>
 80140da:	4007      	ands	r7, r0
 80140dc:	e7f5      	b.n	80140ca <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 80140de:	bf00      	nop

080140e0 <uxr_deserialize_ObjectVariant>:
 80140e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140e2:	4605      	mov	r5, r0
 80140e4:	460e      	mov	r6, r1
 80140e6:	f7fc fc6b 	bl	80109c0 <ucdr_deserialize_uint8_t>
 80140ea:	b320      	cbz	r0, 8014136 <uxr_deserialize_ObjectVariant+0x56>
 80140ec:	7833      	ldrb	r3, [r6, #0]
 80140ee:	3b01      	subs	r3, #1
 80140f0:	4604      	mov	r4, r0
 80140f2:	2b0d      	cmp	r3, #13
 80140f4:	d81d      	bhi.n	8014132 <uxr_deserialize_ObjectVariant+0x52>
 80140f6:	e8df f003 	tbb	[pc, r3]
 80140fa:	2107      	.short	0x2107
 80140fc:	21214b4b 	.word	0x21214b4b
 8014100:	381c2121 	.word	0x381c2121
 8014104:	876a3838 	.word	0x876a3838
 8014108:	1d31      	adds	r1, r6, #4
 801410a:	4628      	mov	r0, r5
 801410c:	f7fc fc58 	bl	80109c0 <ucdr_deserialize_uint8_t>
 8014110:	4607      	mov	r7, r0
 8014112:	b138      	cbz	r0, 8014124 <uxr_deserialize_ObjectVariant+0x44>
 8014114:	7933      	ldrb	r3, [r6, #4]
 8014116:	2b02      	cmp	r3, #2
 8014118:	d07c      	beq.n	8014214 <uxr_deserialize_ObjectVariant+0x134>
 801411a:	2b03      	cmp	r3, #3
 801411c:	f000 8082 	beq.w	8014224 <uxr_deserialize_ObjectVariant+0x144>
 8014120:	2b01      	cmp	r3, #1
 8014122:	d077      	beq.n	8014214 <uxr_deserialize_ObjectVariant+0x134>
 8014124:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 8014128:	4628      	mov	r0, r5
 801412a:	f7fd f9ef 	bl	801150c <ucdr_deserialize_int16_t>
 801412e:	4038      	ands	r0, r7
 8014130:	b2c4      	uxtb	r4, r0
 8014132:	4620      	mov	r0, r4
 8014134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014136:	2400      	movs	r4, #0
 8014138:	4620      	mov	r0, r4
 801413a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801413c:	1d31      	adds	r1, r6, #4
 801413e:	4628      	mov	r0, r5
 8014140:	f7fc fc3e 	bl	80109c0 <ucdr_deserialize_uint8_t>
 8014144:	4607      	mov	r7, r0
 8014146:	b130      	cbz	r0, 8014156 <uxr_deserialize_ObjectVariant+0x76>
 8014148:	7933      	ldrb	r3, [r6, #4]
 801414a:	2b02      	cmp	r3, #2
 801414c:	d037      	beq.n	80141be <uxr_deserialize_ObjectVariant+0xde>
 801414e:	2b03      	cmp	r3, #3
 8014150:	d02a      	beq.n	80141a8 <uxr_deserialize_ObjectVariant+0xc8>
 8014152:	2b01      	cmp	r3, #1
 8014154:	d033      	beq.n	80141be <uxr_deserialize_ObjectVariant+0xde>
 8014156:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 801415a:	4628      	mov	r0, r5
 801415c:	2202      	movs	r2, #2
 801415e:	f003 ff57 	bl	8018010 <ucdr_deserialize_array_uint8_t>
 8014162:	4038      	ands	r0, r7
 8014164:	b2c4      	uxtb	r4, r0
 8014166:	4620      	mov	r0, r4
 8014168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801416a:	1d31      	adds	r1, r6, #4
 801416c:	4628      	mov	r0, r5
 801416e:	f7fc fc27 	bl	80109c0 <ucdr_deserialize_uint8_t>
 8014172:	2800      	cmp	r0, #0
 8014174:	d0df      	beq.n	8014136 <uxr_deserialize_ObjectVariant+0x56>
 8014176:	7933      	ldrb	r3, [r6, #4]
 8014178:	2b01      	cmp	r3, #1
 801417a:	d001      	beq.n	8014180 <uxr_deserialize_ObjectVariant+0xa0>
 801417c:	2b02      	cmp	r3, #2
 801417e:	d1d8      	bne.n	8014132 <uxr_deserialize_ObjectVariant+0x52>
 8014180:	68b1      	ldr	r1, [r6, #8]
 8014182:	4628      	mov	r0, r5
 8014184:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014188:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801418c:	f004 b80c 	b.w	80181a8 <ucdr_deserialize_string>
 8014190:	1d31      	adds	r1, r6, #4
 8014192:	4628      	mov	r0, r5
 8014194:	f7fc fc14 	bl	80109c0 <ucdr_deserialize_uint8_t>
 8014198:	4607      	mov	r7, r0
 801419a:	2800      	cmp	r0, #0
 801419c:	d0db      	beq.n	8014156 <uxr_deserialize_ObjectVariant+0x76>
 801419e:	7933      	ldrb	r3, [r6, #4]
 80141a0:	2b02      	cmp	r3, #2
 80141a2:	d00c      	beq.n	80141be <uxr_deserialize_ObjectVariant+0xde>
 80141a4:	2b03      	cmp	r3, #3
 80141a6:	d1d6      	bne.n	8014156 <uxr_deserialize_ObjectVariant+0x76>
 80141a8:	f106 0308 	add.w	r3, r6, #8
 80141ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80141b0:	f106 010c 	add.w	r1, r6, #12
 80141b4:	4628      	mov	r0, r5
 80141b6:	f003 ffcd 	bl	8018154 <ucdr_deserialize_sequence_uint8_t>
 80141ba:	4607      	mov	r7, r0
 80141bc:	e7cb      	b.n	8014156 <uxr_deserialize_ObjectVariant+0x76>
 80141be:	68b1      	ldr	r1, [r6, #8]
 80141c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80141c4:	4628      	mov	r0, r5
 80141c6:	f003 ffef 	bl	80181a8 <ucdr_deserialize_string>
 80141ca:	4607      	mov	r7, r0
 80141cc:	e7c3      	b.n	8014156 <uxr_deserialize_ObjectVariant+0x76>
 80141ce:	2204      	movs	r2, #4
 80141d0:	18b1      	adds	r1, r6, r2
 80141d2:	4628      	mov	r0, r5
 80141d4:	f003 ff1c 	bl	8018010 <ucdr_deserialize_array_uint8_t>
 80141d8:	2202      	movs	r2, #2
 80141da:	4604      	mov	r4, r0
 80141dc:	f106 0108 	add.w	r1, r6, #8
 80141e0:	4628      	mov	r0, r5
 80141e2:	f003 ff15 	bl	8018010 <ucdr_deserialize_array_uint8_t>
 80141e6:	2202      	movs	r2, #2
 80141e8:	4004      	ands	r4, r0
 80141ea:	f106 010a 	add.w	r1, r6, #10
 80141ee:	4628      	mov	r0, r5
 80141f0:	f003 ff0e 	bl	8018010 <ucdr_deserialize_array_uint8_t>
 80141f4:	b2e4      	uxtb	r4, r4
 80141f6:	4603      	mov	r3, r0
 80141f8:	f106 010c 	add.w	r1, r6, #12
 80141fc:	4628      	mov	r0, r5
 80141fe:	401c      	ands	r4, r3
 8014200:	f7fc fbae 	bl	8010960 <ucdr_deserialize_bool>
 8014204:	4004      	ands	r4, r0
 8014206:	e794      	b.n	8014132 <uxr_deserialize_ObjectVariant+0x52>
 8014208:	1d31      	adds	r1, r6, #4
 801420a:	4628      	mov	r0, r5
 801420c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014210:	f7ff bbd0 	b.w	80139b4 <uxr_deserialize_CLIENT_Representation>
 8014214:	68b1      	ldr	r1, [r6, #8]
 8014216:	f44f 7200 	mov.w	r2, #512	; 0x200
 801421a:	4628      	mov	r0, r5
 801421c:	f003 ffc4 	bl	80181a8 <ucdr_deserialize_string>
 8014220:	4607      	mov	r7, r0
 8014222:	e77f      	b.n	8014124 <uxr_deserialize_ObjectVariant+0x44>
 8014224:	f106 0308 	add.w	r3, r6, #8
 8014228:	f44f 7200 	mov.w	r2, #512	; 0x200
 801422c:	f106 010c 	add.w	r1, r6, #12
 8014230:	4628      	mov	r0, r5
 8014232:	f003 ff8f 	bl	8018154 <ucdr_deserialize_sequence_uint8_t>
 8014236:	4607      	mov	r7, r0
 8014238:	e774      	b.n	8014124 <uxr_deserialize_ObjectVariant+0x44>
 801423a:	bf00      	nop

0801423c <uxr_deserialize_BaseObjectRequest>:
 801423c:	b570      	push	{r4, r5, r6, lr}
 801423e:	2202      	movs	r2, #2
 8014240:	4605      	mov	r5, r0
 8014242:	460e      	mov	r6, r1
 8014244:	f003 fee4 	bl	8018010 <ucdr_deserialize_array_uint8_t>
 8014248:	1cb1      	adds	r1, r6, #2
 801424a:	4604      	mov	r4, r0
 801424c:	2202      	movs	r2, #2
 801424e:	4628      	mov	r0, r5
 8014250:	f003 fede 	bl	8018010 <ucdr_deserialize_array_uint8_t>
 8014254:	4020      	ands	r0, r4
 8014256:	b2c0      	uxtb	r0, r0
 8014258:	bd70      	pop	{r4, r5, r6, pc}
 801425a:	bf00      	nop

0801425c <uxr_serialize_AGENT_ActivityInfo>:
 801425c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014260:	460e      	mov	r6, r1
 8014262:	f9b1 1000 	ldrsh.w	r1, [r1]
 8014266:	4607      	mov	r7, r0
 8014268:	f7fd f8d0 	bl	801140c <ucdr_serialize_int16_t>
 801426c:	6871      	ldr	r1, [r6, #4]
 801426e:	4680      	mov	r8, r0
 8014270:	4638      	mov	r0, r7
 8014272:	f7fc fda5 	bl	8010dc0 <ucdr_serialize_uint32_t>
 8014276:	6873      	ldr	r3, [r6, #4]
 8014278:	2b00      	cmp	r3, #0
 801427a:	d06a      	beq.n	8014352 <uxr_serialize_AGENT_ActivityInfo+0xf6>
 801427c:	b318      	cbz	r0, 80142c6 <uxr_serialize_AGENT_ActivityInfo+0x6a>
 801427e:	f106 0904 	add.w	r9, r6, #4
 8014282:	2500      	movs	r5, #0
 8014284:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 8014288:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 801428c:	7a21      	ldrb	r1, [r4, #8]
 801428e:	4638      	mov	r0, r7
 8014290:	f7fc fb80 	bl	8010994 <ucdr_serialize_uint8_t>
 8014294:	2800      	cmp	r0, #0
 8014296:	d051      	beq.n	801433c <uxr_serialize_AGENT_ActivityInfo+0xe0>
 8014298:	7a23      	ldrb	r3, [r4, #8]
 801429a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801429e:	00c9      	lsls	r1, r1, #3
 80142a0:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 80142a4:	2b03      	cmp	r3, #3
 80142a6:	d859      	bhi.n	801435c <uxr_serialize_AGENT_ActivityInfo+0x100>
 80142a8:	e8df f003 	tbb	[pc, r3]
 80142ac:	02122436 	.word	0x02122436
 80142b0:	4449      	add	r1, r9
 80142b2:	4638      	mov	r0, r7
 80142b4:	6889      	ldr	r1, [r1, #8]
 80142b6:	f003 ff67 	bl	8018188 <ucdr_serialize_string>
 80142ba:	6873      	ldr	r3, [r6, #4]
 80142bc:	3501      	adds	r5, #1
 80142be:	429d      	cmp	r5, r3
 80142c0:	d240      	bcs.n	8014344 <uxr_serialize_AGENT_ActivityInfo+0xe8>
 80142c2:	2800      	cmp	r0, #0
 80142c4:	d1de      	bne.n	8014284 <uxr_serialize_AGENT_ActivityInfo+0x28>
 80142c6:	f04f 0800 	mov.w	r8, #0
 80142ca:	4640      	mov	r0, r8
 80142cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142d0:	3108      	adds	r1, #8
 80142d2:	4449      	add	r1, r9
 80142d4:	2210      	movs	r2, #16
 80142d6:	4638      	mov	r0, r7
 80142d8:	f003 fe36 	bl	8017f48 <ucdr_serialize_array_uint8_t>
 80142dc:	44aa      	add	sl, r5
 80142de:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 80142e2:	4604      	mov	r4, r0
 80142e4:	f8da 101c 	ldr.w	r1, [sl, #28]
 80142e8:	4638      	mov	r0, r7
 80142ea:	f7fc fd69 	bl	8010dc0 <ucdr_serialize_uint32_t>
 80142ee:	4020      	ands	r0, r4
 80142f0:	b2c0      	uxtb	r0, r0
 80142f2:	e7e2      	b.n	80142ba <uxr_serialize_AGENT_ActivityInfo+0x5e>
 80142f4:	3108      	adds	r1, #8
 80142f6:	4449      	add	r1, r9
 80142f8:	2204      	movs	r2, #4
 80142fa:	4638      	mov	r0, r7
 80142fc:	f003 fe24 	bl	8017f48 <ucdr_serialize_array_uint8_t>
 8014300:	44aa      	add	sl, r5
 8014302:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8014306:	4604      	mov	r4, r0
 8014308:	f8ba 1010 	ldrh.w	r1, [sl, #16]
 801430c:	4638      	mov	r0, r7
 801430e:	f7fc fb6d 	bl	80109ec <ucdr_serialize_uint16_t>
 8014312:	4020      	ands	r0, r4
 8014314:	b2c0      	uxtb	r0, r0
 8014316:	e7d0      	b.n	80142ba <uxr_serialize_AGENT_ActivityInfo+0x5e>
 8014318:	3108      	adds	r1, #8
 801431a:	4449      	add	r1, r9
 801431c:	2202      	movs	r2, #2
 801431e:	4638      	mov	r0, r7
 8014320:	f003 fe12 	bl	8017f48 <ucdr_serialize_array_uint8_t>
 8014324:	44aa      	add	sl, r5
 8014326:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801432a:	4604      	mov	r4, r0
 801432c:	f89a 100e 	ldrb.w	r1, [sl, #14]
 8014330:	4638      	mov	r0, r7
 8014332:	f7fc fb2f 	bl	8010994 <ucdr_serialize_uint8_t>
 8014336:	4020      	ands	r0, r4
 8014338:	b2c0      	uxtb	r0, r0
 801433a:	e7be      	b.n	80142ba <uxr_serialize_AGENT_ActivityInfo+0x5e>
 801433c:	6873      	ldr	r3, [r6, #4]
 801433e:	3501      	adds	r5, #1
 8014340:	429d      	cmp	r5, r3
 8014342:	d3c0      	bcc.n	80142c6 <uxr_serialize_AGENT_ActivityInfo+0x6a>
 8014344:	ea08 0000 	and.w	r0, r8, r0
 8014348:	fa5f f880 	uxtb.w	r8, r0
 801434c:	4640      	mov	r0, r8
 801434e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014352:	ea08 0800 	and.w	r8, r8, r0
 8014356:	fa5f f888 	uxtb.w	r8, r8
 801435a:	e7b6      	b.n	80142ca <uxr_serialize_AGENT_ActivityInfo+0x6e>
 801435c:	6873      	ldr	r3, [r6, #4]
 801435e:	3501      	adds	r5, #1
 8014360:	42ab      	cmp	r3, r5
 8014362:	f104 0418 	add.w	r4, r4, #24
 8014366:	d891      	bhi.n	801428c <uxr_serialize_AGENT_ActivityInfo+0x30>
 8014368:	e7af      	b.n	80142ca <uxr_serialize_AGENT_ActivityInfo+0x6e>
 801436a:	bf00      	nop

0801436c <uxr_serialize_ActivityInfoVariant>:
 801436c:	b570      	push	{r4, r5, r6, lr}
 801436e:	460d      	mov	r5, r1
 8014370:	7809      	ldrb	r1, [r1, #0]
 8014372:	4606      	mov	r6, r0
 8014374:	f7fc fb0e 	bl	8010994 <ucdr_serialize_uint8_t>
 8014378:	b130      	cbz	r0, 8014388 <uxr_serialize_ActivityInfoVariant+0x1c>
 801437a:	782b      	ldrb	r3, [r5, #0]
 801437c:	2b06      	cmp	r3, #6
 801437e:	d019      	beq.n	80143b4 <uxr_serialize_ActivityInfoVariant+0x48>
 8014380:	2b0d      	cmp	r3, #13
 8014382:	d010      	beq.n	80143a6 <uxr_serialize_ActivityInfoVariant+0x3a>
 8014384:	2b05      	cmp	r3, #5
 8014386:	d000      	beq.n	801438a <uxr_serialize_ActivityInfoVariant+0x1e>
 8014388:	bd70      	pop	{r4, r5, r6, pc}
 801438a:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801438e:	4630      	mov	r0, r6
 8014390:	f7fd f83c 	bl	801140c <ucdr_serialize_int16_t>
 8014394:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8014398:	4604      	mov	r4, r0
 801439a:	4630      	mov	r0, r6
 801439c:	f7fc ff66 	bl	801126c <ucdr_serialize_uint64_t>
 80143a0:	4020      	ands	r0, r4
 80143a2:	b2c0      	uxtb	r0, r0
 80143a4:	bd70      	pop	{r4, r5, r6, pc}
 80143a6:	f105 0108 	add.w	r1, r5, #8
 80143aa:	4630      	mov	r0, r6
 80143ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80143b0:	f7ff bf54 	b.w	801425c <uxr_serialize_AGENT_ActivityInfo>
 80143b4:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80143b8:	4630      	mov	r0, r6
 80143ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80143be:	f7fd b825 	b.w	801140c <ucdr_serialize_int16_t>
 80143c2:	bf00      	nop

080143c4 <uxr_deserialize_BaseObjectReply>:
 80143c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143c8:	2202      	movs	r2, #2
 80143ca:	4606      	mov	r6, r0
 80143cc:	460f      	mov	r7, r1
 80143ce:	f003 fe1f 	bl	8018010 <ucdr_deserialize_array_uint8_t>
 80143d2:	2202      	movs	r2, #2
 80143d4:	1cb9      	adds	r1, r7, #2
 80143d6:	4605      	mov	r5, r0
 80143d8:	4630      	mov	r0, r6
 80143da:	f003 fe19 	bl	8018010 <ucdr_deserialize_array_uint8_t>
 80143de:	1d39      	adds	r1, r7, #4
 80143e0:	4680      	mov	r8, r0
 80143e2:	4630      	mov	r0, r6
 80143e4:	f7fc faec 	bl	80109c0 <ucdr_deserialize_uint8_t>
 80143e8:	1d79      	adds	r1, r7, #5
 80143ea:	4604      	mov	r4, r0
 80143ec:	4630      	mov	r0, r6
 80143ee:	f7fc fae7 	bl	80109c0 <ucdr_deserialize_uint8_t>
 80143f2:	ea05 0508 	and.w	r5, r5, r8
 80143f6:	402c      	ands	r4, r5
 80143f8:	4020      	ands	r0, r4
 80143fa:	b2c0      	uxtb	r0, r0
 80143fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014400 <uxr_serialize_ReadSpecification>:
 8014400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014404:	460e      	mov	r6, r1
 8014406:	7809      	ldrb	r1, [r1, #0]
 8014408:	4607      	mov	r7, r0
 801440a:	f7fc fac3 	bl	8010994 <ucdr_serialize_uint8_t>
 801440e:	7871      	ldrb	r1, [r6, #1]
 8014410:	4604      	mov	r4, r0
 8014412:	4638      	mov	r0, r7
 8014414:	f7fc fabe 	bl	8010994 <ucdr_serialize_uint8_t>
 8014418:	78b1      	ldrb	r1, [r6, #2]
 801441a:	4004      	ands	r4, r0
 801441c:	4638      	mov	r0, r7
 801441e:	f7fc fa89 	bl	8010934 <ucdr_serialize_bool>
 8014422:	78b3      	ldrb	r3, [r6, #2]
 8014424:	b2e4      	uxtb	r4, r4
 8014426:	4004      	ands	r4, r0
 8014428:	b94b      	cbnz	r3, 801443e <uxr_serialize_ReadSpecification+0x3e>
 801442a:	7a31      	ldrb	r1, [r6, #8]
 801442c:	4638      	mov	r0, r7
 801442e:	f7fc fa81 	bl	8010934 <ucdr_serialize_bool>
 8014432:	7a33      	ldrb	r3, [r6, #8]
 8014434:	4004      	ands	r4, r0
 8014436:	b943      	cbnz	r3, 801444a <uxr_serialize_ReadSpecification+0x4a>
 8014438:	4620      	mov	r0, r4
 801443a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801443e:	6871      	ldr	r1, [r6, #4]
 8014440:	4638      	mov	r0, r7
 8014442:	f003 fea1 	bl	8018188 <ucdr_serialize_string>
 8014446:	4004      	ands	r4, r0
 8014448:	e7ef      	b.n	801442a <uxr_serialize_ReadSpecification+0x2a>
 801444a:	8971      	ldrh	r1, [r6, #10]
 801444c:	4638      	mov	r0, r7
 801444e:	f7fc facd 	bl	80109ec <ucdr_serialize_uint16_t>
 8014452:	89b1      	ldrh	r1, [r6, #12]
 8014454:	4605      	mov	r5, r0
 8014456:	4638      	mov	r0, r7
 8014458:	f7fc fac8 	bl	80109ec <ucdr_serialize_uint16_t>
 801445c:	89f1      	ldrh	r1, [r6, #14]
 801445e:	4005      	ands	r5, r0
 8014460:	4638      	mov	r0, r7
 8014462:	f7fc fac3 	bl	80109ec <ucdr_serialize_uint16_t>
 8014466:	8a31      	ldrh	r1, [r6, #16]
 8014468:	4680      	mov	r8, r0
 801446a:	4638      	mov	r0, r7
 801446c:	f7fc fabe 	bl	80109ec <ucdr_serialize_uint16_t>
 8014470:	b2ed      	uxtb	r5, r5
 8014472:	4025      	ands	r5, r4
 8014474:	ea08 0505 	and.w	r5, r8, r5
 8014478:	ea00 0405 	and.w	r4, r0, r5
 801447c:	4620      	mov	r0, r4
 801447e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014482:	bf00      	nop

08014484 <uxr_serialize_CREATE_CLIENT_Payload>:
 8014484:	f7ff ba3a 	b.w	80138fc <uxr_serialize_CLIENT_Representation>

08014488 <uxr_serialize_CREATE_Payload>:
 8014488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801448a:	2202      	movs	r2, #2
 801448c:	4606      	mov	r6, r0
 801448e:	460d      	mov	r5, r1
 8014490:	f003 fd5a 	bl	8017f48 <ucdr_serialize_array_uint8_t>
 8014494:	1ca9      	adds	r1, r5, #2
 8014496:	4604      	mov	r4, r0
 8014498:	2202      	movs	r2, #2
 801449a:	4630      	mov	r0, r6
 801449c:	f003 fd54 	bl	8017f48 <ucdr_serialize_array_uint8_t>
 80144a0:	7929      	ldrb	r1, [r5, #4]
 80144a2:	4607      	mov	r7, r0
 80144a4:	4630      	mov	r0, r6
 80144a6:	f7fc fa75 	bl	8010994 <ucdr_serialize_uint8_t>
 80144aa:	b328      	cbz	r0, 80144f8 <uxr_serialize_CREATE_Payload+0x70>
 80144ac:	792b      	ldrb	r3, [r5, #4]
 80144ae:	403c      	ands	r4, r7
 80144b0:	3b01      	subs	r3, #1
 80144b2:	b2e4      	uxtb	r4, r4
 80144b4:	2b0d      	cmp	r3, #13
 80144b6:	d81d      	bhi.n	80144f4 <uxr_serialize_CREATE_Payload+0x6c>
 80144b8:	e8df f003 	tbb	[pc, r3]
 80144bc:	32320753 	.word	0x32320753
 80144c0:	07070707 	.word	0x07070707
 80144c4:	2121211c 	.word	0x2121211c
 80144c8:	684c      	.short	0x684c
 80144ca:	7a29      	ldrb	r1, [r5, #8]
 80144cc:	4630      	mov	r0, r6
 80144ce:	f7fc fa61 	bl	8010994 <ucdr_serialize_uint8_t>
 80144d2:	4607      	mov	r7, r0
 80144d4:	b130      	cbz	r0, 80144e4 <uxr_serialize_CREATE_Payload+0x5c>
 80144d6:	7a2b      	ldrb	r3, [r5, #8]
 80144d8:	2b02      	cmp	r3, #2
 80144da:	d035      	beq.n	8014548 <uxr_serialize_CREATE_Payload+0xc0>
 80144dc:	2b03      	cmp	r3, #3
 80144de:	d02b      	beq.n	8014538 <uxr_serialize_CREATE_Payload+0xb0>
 80144e0:	2b01      	cmp	r3, #1
 80144e2:	d031      	beq.n	8014548 <uxr_serialize_CREATE_Payload+0xc0>
 80144e4:	f505 7104 	add.w	r1, r5, #528	; 0x210
 80144e8:	4630      	mov	r0, r6
 80144ea:	2202      	movs	r2, #2
 80144ec:	f003 fd2c 	bl	8017f48 <ucdr_serialize_array_uint8_t>
 80144f0:	4038      	ands	r0, r7
 80144f2:	4004      	ands	r4, r0
 80144f4:	4620      	mov	r0, r4
 80144f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80144f8:	2400      	movs	r4, #0
 80144fa:	4620      	mov	r0, r4
 80144fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80144fe:	7a29      	ldrb	r1, [r5, #8]
 8014500:	4630      	mov	r0, r6
 8014502:	f7fc fa47 	bl	8010994 <ucdr_serialize_uint8_t>
 8014506:	2800      	cmp	r0, #0
 8014508:	d0f6      	beq.n	80144f8 <uxr_serialize_CREATE_Payload+0x70>
 801450a:	7a2b      	ldrb	r3, [r5, #8]
 801450c:	2b01      	cmp	r3, #1
 801450e:	d001      	beq.n	8014514 <uxr_serialize_CREATE_Payload+0x8c>
 8014510:	2b02      	cmp	r3, #2
 8014512:	d1ef      	bne.n	80144f4 <uxr_serialize_CREATE_Payload+0x6c>
 8014514:	68e9      	ldr	r1, [r5, #12]
 8014516:	4630      	mov	r0, r6
 8014518:	f003 fe36 	bl	8018188 <ucdr_serialize_string>
 801451c:	4004      	ands	r4, r0
 801451e:	e7e9      	b.n	80144f4 <uxr_serialize_CREATE_Payload+0x6c>
 8014520:	7a29      	ldrb	r1, [r5, #8]
 8014522:	4630      	mov	r0, r6
 8014524:	f7fc fa36 	bl	8010994 <ucdr_serialize_uint8_t>
 8014528:	4607      	mov	r7, r0
 801452a:	2800      	cmp	r0, #0
 801452c:	d0da      	beq.n	80144e4 <uxr_serialize_CREATE_Payload+0x5c>
 801452e:	7a2b      	ldrb	r3, [r5, #8]
 8014530:	2b02      	cmp	r3, #2
 8014532:	d009      	beq.n	8014548 <uxr_serialize_CREATE_Payload+0xc0>
 8014534:	2b03      	cmp	r3, #3
 8014536:	d1d5      	bne.n	80144e4 <uxr_serialize_CREATE_Payload+0x5c>
 8014538:	68ea      	ldr	r2, [r5, #12]
 801453a:	f105 0110 	add.w	r1, r5, #16
 801453e:	4630      	mov	r0, r6
 8014540:	f003 fdf6 	bl	8018130 <ucdr_serialize_sequence_uint8_t>
 8014544:	4607      	mov	r7, r0
 8014546:	e7cd      	b.n	80144e4 <uxr_serialize_CREATE_Payload+0x5c>
 8014548:	68e9      	ldr	r1, [r5, #12]
 801454a:	4630      	mov	r0, r6
 801454c:	f003 fe1c 	bl	8018188 <ucdr_serialize_string>
 8014550:	4607      	mov	r7, r0
 8014552:	e7c7      	b.n	80144e4 <uxr_serialize_CREATE_Payload+0x5c>
 8014554:	f105 0108 	add.w	r1, r5, #8
 8014558:	4630      	mov	r0, r6
 801455a:	f7ff fa95 	bl	8013a88 <uxr_serialize_AGENT_Representation>
 801455e:	4004      	ands	r4, r0
 8014560:	e7c8      	b.n	80144f4 <uxr_serialize_CREATE_Payload+0x6c>
 8014562:	7a29      	ldrb	r1, [r5, #8]
 8014564:	4630      	mov	r0, r6
 8014566:	f7fc fa15 	bl	8010994 <ucdr_serialize_uint8_t>
 801456a:	4607      	mov	r7, r0
 801456c:	b130      	cbz	r0, 801457c <uxr_serialize_CREATE_Payload+0xf4>
 801456e:	7a2b      	ldrb	r3, [r5, #8]
 8014570:	2b02      	cmp	r3, #2
 8014572:	d012      	beq.n	801459a <uxr_serialize_CREATE_Payload+0x112>
 8014574:	2b03      	cmp	r3, #3
 8014576:	d016      	beq.n	80145a6 <uxr_serialize_CREATE_Payload+0x11e>
 8014578:	2b01      	cmp	r3, #1
 801457a:	d00e      	beq.n	801459a <uxr_serialize_CREATE_Payload+0x112>
 801457c:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	; 0x210
 8014580:	4630      	mov	r0, r6
 8014582:	f7fc ff43 	bl	801140c <ucdr_serialize_int16_t>
 8014586:	4038      	ands	r0, r7
 8014588:	4004      	ands	r4, r0
 801458a:	e7b3      	b.n	80144f4 <uxr_serialize_CREATE_Payload+0x6c>
 801458c:	f105 0108 	add.w	r1, r5, #8
 8014590:	4630      	mov	r0, r6
 8014592:	f7ff f9b3 	bl	80138fc <uxr_serialize_CLIENT_Representation>
 8014596:	4004      	ands	r4, r0
 8014598:	e7ac      	b.n	80144f4 <uxr_serialize_CREATE_Payload+0x6c>
 801459a:	68e9      	ldr	r1, [r5, #12]
 801459c:	4630      	mov	r0, r6
 801459e:	f003 fdf3 	bl	8018188 <ucdr_serialize_string>
 80145a2:	4607      	mov	r7, r0
 80145a4:	e7ea      	b.n	801457c <uxr_serialize_CREATE_Payload+0xf4>
 80145a6:	68ea      	ldr	r2, [r5, #12]
 80145a8:	f105 0110 	add.w	r1, r5, #16
 80145ac:	4630      	mov	r0, r6
 80145ae:	f003 fdbf 	bl	8018130 <ucdr_serialize_sequence_uint8_t>
 80145b2:	4607      	mov	r7, r0
 80145b4:	e7e2      	b.n	801457c <uxr_serialize_CREATE_Payload+0xf4>
 80145b6:	bf00      	nop

080145b8 <uxr_deserialize_GET_INFO_Payload>:
 80145b8:	b570      	push	{r4, r5, r6, lr}
 80145ba:	2202      	movs	r2, #2
 80145bc:	4605      	mov	r5, r0
 80145be:	460e      	mov	r6, r1
 80145c0:	f003 fd26 	bl	8018010 <ucdr_deserialize_array_uint8_t>
 80145c4:	1cb1      	adds	r1, r6, #2
 80145c6:	2202      	movs	r2, #2
 80145c8:	4604      	mov	r4, r0
 80145ca:	4628      	mov	r0, r5
 80145cc:	f003 fd20 	bl	8018010 <ucdr_deserialize_array_uint8_t>
 80145d0:	1d31      	adds	r1, r6, #4
 80145d2:	4004      	ands	r4, r0
 80145d4:	4628      	mov	r0, r5
 80145d6:	f7fc fd23 	bl	8011020 <ucdr_deserialize_uint32_t>
 80145da:	b2e4      	uxtb	r4, r4
 80145dc:	4020      	ands	r0, r4
 80145de:	bd70      	pop	{r4, r5, r6, pc}

080145e0 <uxr_serialize_DELETE_Payload>:
 80145e0:	b570      	push	{r4, r5, r6, lr}
 80145e2:	2202      	movs	r2, #2
 80145e4:	4605      	mov	r5, r0
 80145e6:	460e      	mov	r6, r1
 80145e8:	f003 fcae 	bl	8017f48 <ucdr_serialize_array_uint8_t>
 80145ec:	1cb1      	adds	r1, r6, #2
 80145ee:	4604      	mov	r4, r0
 80145f0:	2202      	movs	r2, #2
 80145f2:	4628      	mov	r0, r5
 80145f4:	f003 fca8 	bl	8017f48 <ucdr_serialize_array_uint8_t>
 80145f8:	4020      	ands	r0, r4
 80145fa:	b2c0      	uxtb	r0, r0
 80145fc:	bd70      	pop	{r4, r5, r6, pc}
 80145fe:	bf00      	nop

08014600 <uxr_deserialize_STATUS_AGENT_Payload>:
 8014600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014604:	4606      	mov	r6, r0
 8014606:	460f      	mov	r7, r1
 8014608:	f7fc f9da 	bl	80109c0 <ucdr_deserialize_uint8_t>
 801460c:	1c79      	adds	r1, r7, #1
 801460e:	4605      	mov	r5, r0
 8014610:	4630      	mov	r0, r6
 8014612:	f7fc f9d5 	bl	80109c0 <ucdr_deserialize_uint8_t>
 8014616:	1d39      	adds	r1, r7, #4
 8014618:	4681      	mov	r9, r0
 801461a:	2204      	movs	r2, #4
 801461c:	4630      	mov	r0, r6
 801461e:	f003 fcf7 	bl	8018010 <ucdr_deserialize_array_uint8_t>
 8014622:	f107 0108 	add.w	r1, r7, #8
 8014626:	4604      	mov	r4, r0
 8014628:	2202      	movs	r2, #2
 801462a:	4630      	mov	r0, r6
 801462c:	f003 fcf0 	bl	8018010 <ucdr_deserialize_array_uint8_t>
 8014630:	f107 010a 	add.w	r1, r7, #10
 8014634:	4680      	mov	r8, r0
 8014636:	2202      	movs	r2, #2
 8014638:	4630      	mov	r0, r6
 801463a:	f003 fce9 	bl	8018010 <ucdr_deserialize_array_uint8_t>
 801463e:	ea05 0509 	and.w	r5, r5, r9
 8014642:	b2ed      	uxtb	r5, r5
 8014644:	402c      	ands	r4, r5
 8014646:	f107 010c 	add.w	r1, r7, #12
 801464a:	4605      	mov	r5, r0
 801464c:	4630      	mov	r0, r6
 801464e:	f7fc f987 	bl	8010960 <ucdr_deserialize_bool>
 8014652:	ea08 0404 	and.w	r4, r8, r4
 8014656:	4025      	ands	r5, r4
 8014658:	4028      	ands	r0, r5
 801465a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801465e:	bf00      	nop

08014660 <uxr_deserialize_STATUS_Payload>:
 8014660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014664:	2202      	movs	r2, #2
 8014666:	4606      	mov	r6, r0
 8014668:	460f      	mov	r7, r1
 801466a:	f003 fcd1 	bl	8018010 <ucdr_deserialize_array_uint8_t>
 801466e:	2202      	movs	r2, #2
 8014670:	1cb9      	adds	r1, r7, #2
 8014672:	4605      	mov	r5, r0
 8014674:	4630      	mov	r0, r6
 8014676:	f003 fccb 	bl	8018010 <ucdr_deserialize_array_uint8_t>
 801467a:	1d39      	adds	r1, r7, #4
 801467c:	4680      	mov	r8, r0
 801467e:	4630      	mov	r0, r6
 8014680:	f7fc f99e 	bl	80109c0 <ucdr_deserialize_uint8_t>
 8014684:	1d79      	adds	r1, r7, #5
 8014686:	4604      	mov	r4, r0
 8014688:	4630      	mov	r0, r6
 801468a:	f7fc f999 	bl	80109c0 <ucdr_deserialize_uint8_t>
 801468e:	ea05 0508 	and.w	r5, r5, r8
 8014692:	402c      	ands	r4, r5
 8014694:	4020      	ands	r0, r4
 8014696:	b2c0      	uxtb	r0, r0
 8014698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801469c <uxr_serialize_INFO_Payload>:
 801469c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146a0:	2202      	movs	r2, #2
 80146a2:	460c      	mov	r4, r1
 80146a4:	4605      	mov	r5, r0
 80146a6:	f003 fc4f 	bl	8017f48 <ucdr_serialize_array_uint8_t>
 80146aa:	2202      	movs	r2, #2
 80146ac:	4680      	mov	r8, r0
 80146ae:	1ca1      	adds	r1, r4, #2
 80146b0:	4628      	mov	r0, r5
 80146b2:	f003 fc49 	bl	8017f48 <ucdr_serialize_array_uint8_t>
 80146b6:	7921      	ldrb	r1, [r4, #4]
 80146b8:	4607      	mov	r7, r0
 80146ba:	4628      	mov	r0, r5
 80146bc:	f7fc f96a 	bl	8010994 <ucdr_serialize_uint8_t>
 80146c0:	7961      	ldrb	r1, [r4, #5]
 80146c2:	4606      	mov	r6, r0
 80146c4:	4628      	mov	r0, r5
 80146c6:	f7fc f965 	bl	8010994 <ucdr_serialize_uint8_t>
 80146ca:	ea08 0807 	and.w	r8, r8, r7
 80146ce:	ea06 0608 	and.w	r6, r6, r8
 80146d2:	4006      	ands	r6, r0
 80146d4:	7a21      	ldrb	r1, [r4, #8]
 80146d6:	4628      	mov	r0, r5
 80146d8:	f7fc f92c 	bl	8010934 <ucdr_serialize_bool>
 80146dc:	7a23      	ldrb	r3, [r4, #8]
 80146de:	b2f7      	uxtb	r7, r6
 80146e0:	4606      	mov	r6, r0
 80146e2:	b96b      	cbnz	r3, 8014700 <uxr_serialize_INFO_Payload+0x64>
 80146e4:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 80146e8:	4628      	mov	r0, r5
 80146ea:	f7fc f923 	bl	8010934 <ucdr_serialize_bool>
 80146ee:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 80146f2:	4030      	ands	r0, r6
 80146f4:	b2c6      	uxtb	r6, r0
 80146f6:	b983      	cbnz	r3, 801471a <uxr_serialize_INFO_Payload+0x7e>
 80146f8:	ea06 0007 	and.w	r0, r6, r7
 80146fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014700:	7b21      	ldrb	r1, [r4, #12]
 8014702:	4628      	mov	r0, r5
 8014704:	f7fc f946 	bl	8010994 <ucdr_serialize_uint8_t>
 8014708:	b188      	cbz	r0, 801472e <uxr_serialize_INFO_Payload+0x92>
 801470a:	f104 010c 	add.w	r1, r4, #12
 801470e:	4628      	mov	r0, r5
 8014710:	f7ff fa06 	bl	8013b20 <uxr_serialize_ObjectVariant.part.0>
 8014714:	4030      	ands	r0, r6
 8014716:	b2c6      	uxtb	r6, r0
 8014718:	e7e4      	b.n	80146e4 <uxr_serialize_INFO_Payload+0x48>
 801471a:	f504 7108 	add.w	r1, r4, #544	; 0x220
 801471e:	4628      	mov	r0, r5
 8014720:	f7ff fe24 	bl	801436c <uxr_serialize_ActivityInfoVariant>
 8014724:	4006      	ands	r6, r0
 8014726:	ea06 0007 	and.w	r0, r6, r7
 801472a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801472e:	4606      	mov	r6, r0
 8014730:	e7d8      	b.n	80146e4 <uxr_serialize_INFO_Payload+0x48>
 8014732:	bf00      	nop

08014734 <uxr_serialize_READ_DATA_Payload>:
 8014734:	b570      	push	{r4, r5, r6, lr}
 8014736:	2202      	movs	r2, #2
 8014738:	4605      	mov	r5, r0
 801473a:	460e      	mov	r6, r1
 801473c:	f003 fc04 	bl	8017f48 <ucdr_serialize_array_uint8_t>
 8014740:	1cb1      	adds	r1, r6, #2
 8014742:	2202      	movs	r2, #2
 8014744:	4604      	mov	r4, r0
 8014746:	4628      	mov	r0, r5
 8014748:	f003 fbfe 	bl	8017f48 <ucdr_serialize_array_uint8_t>
 801474c:	1d31      	adds	r1, r6, #4
 801474e:	4004      	ands	r4, r0
 8014750:	4628      	mov	r0, r5
 8014752:	f7ff fe55 	bl	8014400 <uxr_serialize_ReadSpecification>
 8014756:	b2e4      	uxtb	r4, r4
 8014758:	4020      	ands	r0, r4
 801475a:	bd70      	pop	{r4, r5, r6, pc}

0801475c <uxr_serialize_WRITE_DATA_Payload_Data>:
 801475c:	b570      	push	{r4, r5, r6, lr}
 801475e:	2202      	movs	r2, #2
 8014760:	4605      	mov	r5, r0
 8014762:	460e      	mov	r6, r1
 8014764:	f003 fbf0 	bl	8017f48 <ucdr_serialize_array_uint8_t>
 8014768:	1cb1      	adds	r1, r6, #2
 801476a:	4604      	mov	r4, r0
 801476c:	2202      	movs	r2, #2
 801476e:	4628      	mov	r0, r5
 8014770:	f003 fbea 	bl	8017f48 <ucdr_serialize_array_uint8_t>
 8014774:	4020      	ands	r0, r4
 8014776:	b2c0      	uxtb	r0, r0
 8014778:	bd70      	pop	{r4, r5, r6, pc}
 801477a:	bf00      	nop

0801477c <uxr_serialize_ACKNACK_Payload>:
 801477c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801477e:	460f      	mov	r7, r1
 8014780:	460e      	mov	r6, r1
 8014782:	f837 1b02 	ldrh.w	r1, [r7], #2
 8014786:	4605      	mov	r5, r0
 8014788:	f7fc f930 	bl	80109ec <ucdr_serialize_uint16_t>
 801478c:	4639      	mov	r1, r7
 801478e:	2202      	movs	r2, #2
 8014790:	4604      	mov	r4, r0
 8014792:	4628      	mov	r0, r5
 8014794:	f003 fbd8 	bl	8017f48 <ucdr_serialize_array_uint8_t>
 8014798:	7931      	ldrb	r1, [r6, #4]
 801479a:	4004      	ands	r4, r0
 801479c:	4628      	mov	r0, r5
 801479e:	f7fc f8f9 	bl	8010994 <ucdr_serialize_uint8_t>
 80147a2:	b2e4      	uxtb	r4, r4
 80147a4:	4020      	ands	r0, r4
 80147a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080147a8 <uxr_deserialize_ACKNACK_Payload>:
 80147a8:	b570      	push	{r4, r5, r6, lr}
 80147aa:	4605      	mov	r5, r0
 80147ac:	460e      	mov	r6, r1
 80147ae:	f7fc fa1d 	bl	8010bec <ucdr_deserialize_uint16_t>
 80147b2:	1cb1      	adds	r1, r6, #2
 80147b4:	2202      	movs	r2, #2
 80147b6:	4604      	mov	r4, r0
 80147b8:	4628      	mov	r0, r5
 80147ba:	f003 fc29 	bl	8018010 <ucdr_deserialize_array_uint8_t>
 80147be:	1d31      	adds	r1, r6, #4
 80147c0:	4004      	ands	r4, r0
 80147c2:	4628      	mov	r0, r5
 80147c4:	f7fc f8fc 	bl	80109c0 <ucdr_deserialize_uint8_t>
 80147c8:	b2e4      	uxtb	r4, r4
 80147ca:	4020      	ands	r0, r4
 80147cc:	bd70      	pop	{r4, r5, r6, pc}
 80147ce:	bf00      	nop

080147d0 <uxr_serialize_HEARTBEAT_Payload>:
 80147d0:	b570      	push	{r4, r5, r6, lr}
 80147d2:	460d      	mov	r5, r1
 80147d4:	8809      	ldrh	r1, [r1, #0]
 80147d6:	4606      	mov	r6, r0
 80147d8:	f7fc f908 	bl	80109ec <ucdr_serialize_uint16_t>
 80147dc:	8869      	ldrh	r1, [r5, #2]
 80147de:	4604      	mov	r4, r0
 80147e0:	4630      	mov	r0, r6
 80147e2:	f7fc f903 	bl	80109ec <ucdr_serialize_uint16_t>
 80147e6:	7929      	ldrb	r1, [r5, #4]
 80147e8:	4004      	ands	r4, r0
 80147ea:	4630      	mov	r0, r6
 80147ec:	f7fc f8d2 	bl	8010994 <ucdr_serialize_uint8_t>
 80147f0:	b2e4      	uxtb	r4, r4
 80147f2:	4020      	ands	r0, r4
 80147f4:	bd70      	pop	{r4, r5, r6, pc}
 80147f6:	bf00      	nop

080147f8 <uxr_deserialize_HEARTBEAT_Payload>:
 80147f8:	b570      	push	{r4, r5, r6, lr}
 80147fa:	4605      	mov	r5, r0
 80147fc:	460e      	mov	r6, r1
 80147fe:	f7fc f9f5 	bl	8010bec <ucdr_deserialize_uint16_t>
 8014802:	1cb1      	adds	r1, r6, #2
 8014804:	4604      	mov	r4, r0
 8014806:	4628      	mov	r0, r5
 8014808:	f7fc f9f0 	bl	8010bec <ucdr_deserialize_uint16_t>
 801480c:	1d31      	adds	r1, r6, #4
 801480e:	4004      	ands	r4, r0
 8014810:	4628      	mov	r0, r5
 8014812:	f7fc f8d5 	bl	80109c0 <ucdr_deserialize_uint8_t>
 8014816:	b2e4      	uxtb	r4, r4
 8014818:	4020      	ands	r0, r4
 801481a:	bd70      	pop	{r4, r5, r6, pc}

0801481c <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 801481c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014820:	4605      	mov	r5, r0
 8014822:	460e      	mov	r6, r1
 8014824:	f7fc ff7e 	bl	8011724 <ucdr_deserialize_int32_t>
 8014828:	1d31      	adds	r1, r6, #4
 801482a:	4607      	mov	r7, r0
 801482c:	4628      	mov	r0, r5
 801482e:	f7fc fbf7 	bl	8011020 <ucdr_deserialize_uint32_t>
 8014832:	f106 0108 	add.w	r1, r6, #8
 8014836:	4680      	mov	r8, r0
 8014838:	4628      	mov	r0, r5
 801483a:	f7fc ff73 	bl	8011724 <ucdr_deserialize_int32_t>
 801483e:	f106 010c 	add.w	r1, r6, #12
 8014842:	4604      	mov	r4, r0
 8014844:	4628      	mov	r0, r5
 8014846:	f7fc fbeb 	bl	8011020 <ucdr_deserialize_uint32_t>
 801484a:	ea07 0708 	and.w	r7, r7, r8
 801484e:	403c      	ands	r4, r7
 8014850:	f106 0110 	add.w	r1, r6, #16
 8014854:	4004      	ands	r4, r0
 8014856:	4628      	mov	r0, r5
 8014858:	f7fc ff64 	bl	8011724 <ucdr_deserialize_int32_t>
 801485c:	f106 0114 	add.w	r1, r6, #20
 8014860:	4603      	mov	r3, r0
 8014862:	4628      	mov	r0, r5
 8014864:	461d      	mov	r5, r3
 8014866:	f7fc fbdb 	bl	8011020 <ucdr_deserialize_uint32_t>
 801486a:	b2e4      	uxtb	r4, r4
 801486c:	402c      	ands	r4, r5
 801486e:	4020      	ands	r0, r4
 8014870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014874 <uxr_serialize_SampleIdentity>:
 8014874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014878:	220c      	movs	r2, #12
 801487a:	4604      	mov	r4, r0
 801487c:	460d      	mov	r5, r1
 801487e:	f003 fb63 	bl	8017f48 <ucdr_serialize_array_uint8_t>
 8014882:	2203      	movs	r2, #3
 8014884:	f105 010c 	add.w	r1, r5, #12
 8014888:	4607      	mov	r7, r0
 801488a:	4620      	mov	r0, r4
 801488c:	f003 fb5c 	bl	8017f48 <ucdr_serialize_array_uint8_t>
 8014890:	7be9      	ldrb	r1, [r5, #15]
 8014892:	4680      	mov	r8, r0
 8014894:	4620      	mov	r0, r4
 8014896:	f7fc f87d 	bl	8010994 <ucdr_serialize_uint8_t>
 801489a:	6929      	ldr	r1, [r5, #16]
 801489c:	4606      	mov	r6, r0
 801489e:	4620      	mov	r0, r4
 80148a0:	f7fc fea8 	bl	80115f4 <ucdr_serialize_int32_t>
 80148a4:	6969      	ldr	r1, [r5, #20]
 80148a6:	4603      	mov	r3, r0
 80148a8:	4620      	mov	r0, r4
 80148aa:	ea07 0708 	and.w	r7, r7, r8
 80148ae:	461c      	mov	r4, r3
 80148b0:	f7fc fa86 	bl	8010dc0 <ucdr_serialize_uint32_t>
 80148b4:	403e      	ands	r6, r7
 80148b6:	4034      	ands	r4, r6
 80148b8:	4020      	ands	r0, r4
 80148ba:	b2c0      	uxtb	r0, r0
 80148bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080148c0 <uxr_deserialize_SampleIdentity>:
 80148c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148c4:	220c      	movs	r2, #12
 80148c6:	4604      	mov	r4, r0
 80148c8:	460d      	mov	r5, r1
 80148ca:	f003 fba1 	bl	8018010 <ucdr_deserialize_array_uint8_t>
 80148ce:	2203      	movs	r2, #3
 80148d0:	f105 010c 	add.w	r1, r5, #12
 80148d4:	4607      	mov	r7, r0
 80148d6:	4620      	mov	r0, r4
 80148d8:	f003 fb9a 	bl	8018010 <ucdr_deserialize_array_uint8_t>
 80148dc:	f105 010f 	add.w	r1, r5, #15
 80148e0:	4680      	mov	r8, r0
 80148e2:	4620      	mov	r0, r4
 80148e4:	f7fc f86c 	bl	80109c0 <ucdr_deserialize_uint8_t>
 80148e8:	f105 0110 	add.w	r1, r5, #16
 80148ec:	4606      	mov	r6, r0
 80148ee:	4620      	mov	r0, r4
 80148f0:	f7fc ff18 	bl	8011724 <ucdr_deserialize_int32_t>
 80148f4:	f105 0114 	add.w	r1, r5, #20
 80148f8:	4603      	mov	r3, r0
 80148fa:	4620      	mov	r0, r4
 80148fc:	ea07 0708 	and.w	r7, r7, r8
 8014900:	461c      	mov	r4, r3
 8014902:	f7fc fb8d 	bl	8011020 <ucdr_deserialize_uint32_t>
 8014906:	403e      	ands	r6, r7
 8014908:	4034      	ands	r4, r6
 801490a:	4020      	ands	r0, r4
 801490c:	b2c0      	uxtb	r0, r0
 801490e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014912:	bf00      	nop

08014914 <rcl_client_get_rmw_handle>:
 8014914:	b110      	cbz	r0, 801491c <rcl_client_get_rmw_handle+0x8>
 8014916:	6800      	ldr	r0, [r0, #0]
 8014918:	b100      	cbz	r0, 801491c <rcl_client_get_rmw_handle+0x8>
 801491a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801491c:	4770      	bx	lr
 801491e:	bf00      	nop

08014920 <rcl_take_response>:
 8014920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014922:	460e      	mov	r6, r1
 8014924:	460c      	mov	r4, r1
 8014926:	4607      	mov	r7, r0
 8014928:	4694      	mov	ip, r2
 801492a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801492c:	b08d      	sub	sp, #52	; 0x34
 801492e:	ad06      	add	r5, sp, #24
 8014930:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014932:	e896 0003 	ldmia.w	r6, {r0, r1}
 8014936:	e885 0003 	stmia.w	r5, {r0, r1}
 801493a:	b337      	cbz	r7, 801498a <rcl_take_response+0x6a>
 801493c:	683b      	ldr	r3, [r7, #0]
 801493e:	b323      	cbz	r3, 801498a <rcl_take_response+0x6a>
 8014940:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8014942:	b310      	cbz	r0, 801498a <rcl_take_response+0x6a>
 8014944:	4662      	mov	r2, ip
 8014946:	b31a      	cbz	r2, 8014990 <rcl_take_response+0x70>
 8014948:	2300      	movs	r3, #0
 801494a:	2600      	movs	r6, #0
 801494c:	2700      	movs	r7, #0
 801494e:	f88d 3007 	strb.w	r3, [sp, #7]
 8014952:	a902      	add	r1, sp, #8
 8014954:	f10d 0307 	add.w	r3, sp, #7
 8014958:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801495c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014960:	f003 f83a 	bl	80179d8 <rmw_take_response>
 8014964:	4606      	mov	r6, r0
 8014966:	b9a8      	cbnz	r0, 8014994 <rcl_take_response+0x74>
 8014968:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801496c:	f240 13f5 	movw	r3, #501	; 0x1f5
 8014970:	2a00      	cmp	r2, #0
 8014972:	bf08      	it	eq
 8014974:	461e      	moveq	r6, r3
 8014976:	ad06      	add	r5, sp, #24
 8014978:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801497a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801497c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014980:	e884 0003 	stmia.w	r4, {r0, r1}
 8014984:	4630      	mov	r0, r6
 8014986:	b00d      	add	sp, #52	; 0x34
 8014988:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801498a:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 801498e:	e7f2      	b.n	8014976 <rcl_take_response+0x56>
 8014990:	260b      	movs	r6, #11
 8014992:	e7f0      	b.n	8014976 <rcl_take_response+0x56>
 8014994:	2601      	movs	r6, #1
 8014996:	e7ee      	b.n	8014976 <rcl_take_response+0x56>

08014998 <rcl_convert_rmw_ret_to_rcl_ret>:
 8014998:	280b      	cmp	r0, #11
 801499a:	dc0d      	bgt.n	80149b8 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 801499c:	2800      	cmp	r0, #0
 801499e:	db09      	blt.n	80149b4 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80149a0:	280b      	cmp	r0, #11
 80149a2:	d807      	bhi.n	80149b4 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80149a4:	e8df f000 	tbb	[pc, r0]
 80149a8:	07060607 	.word	0x07060607
 80149ac:	06060606 	.word	0x06060606
 80149b0:	07070606 	.word	0x07070606
 80149b4:	2001      	movs	r0, #1
 80149b6:	4770      	bx	lr
 80149b8:	28cb      	cmp	r0, #203	; 0xcb
 80149ba:	bf18      	it	ne
 80149bc:	2001      	movne	r0, #1
 80149be:	4770      	bx	lr

080149c0 <rcl_get_zero_initialized_context>:
 80149c0:	4a03      	ldr	r2, [pc, #12]	; (80149d0 <rcl_get_zero_initialized_context+0x10>)
 80149c2:	4603      	mov	r3, r0
 80149c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80149c8:	e883 0003 	stmia.w	r3, {r0, r1}
 80149cc:	4618      	mov	r0, r3
 80149ce:	4770      	bx	lr
 80149d0:	0801ba5c 	.word	0x0801ba5c

080149d4 <rcl_context_is_valid>:
 80149d4:	b118      	cbz	r0, 80149de <rcl_context_is_valid+0xa>
 80149d6:	6840      	ldr	r0, [r0, #4]
 80149d8:	3800      	subs	r0, #0
 80149da:	bf18      	it	ne
 80149dc:	2001      	movne	r0, #1
 80149de:	4770      	bx	lr

080149e0 <__cleanup_context>:
 80149e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80149e4:	4606      	mov	r6, r0
 80149e6:	6800      	ldr	r0, [r0, #0]
 80149e8:	2300      	movs	r3, #0
 80149ea:	6073      	str	r3, [r6, #4]
 80149ec:	2800      	cmp	r0, #0
 80149ee:	d04d      	beq.n	8014a8c <__cleanup_context+0xac>
 80149f0:	6947      	ldr	r7, [r0, #20]
 80149f2:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80149f6:	f8d0 9010 	ldr.w	r9, [r0, #16]
 80149fa:	b137      	cbz	r7, 8014a0a <__cleanup_context+0x2a>
 80149fc:	3014      	adds	r0, #20
 80149fe:	f000 fb1d 	bl	801503c <rcl_init_options_fini>
 8014a02:	4607      	mov	r7, r0
 8014a04:	2800      	cmp	r0, #0
 8014a06:	d148      	bne.n	8014a9a <__cleanup_context+0xba>
 8014a08:	6830      	ldr	r0, [r6, #0]
 8014a0a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8014a0c:	b143      	cbz	r3, 8014a20 <__cleanup_context+0x40>
 8014a0e:	3028      	adds	r0, #40	; 0x28
 8014a10:	f002 fd5e 	bl	80174d0 <rmw_context_fini>
 8014a14:	b118      	cbz	r0, 8014a1e <__cleanup_context+0x3e>
 8014a16:	2f00      	cmp	r7, #0
 8014a18:	d042      	beq.n	8014aa0 <__cleanup_context+0xc0>
 8014a1a:	f7fa feb3 	bl	800f784 <rcutils_reset_error>
 8014a1e:	6830      	ldr	r0, [r6, #0]
 8014a20:	f8d0 c020 	ldr.w	ip, [r0, #32]
 8014a24:	f1bc 0f00 	cmp.w	ip, #0
 8014a28:	d01c      	beq.n	8014a64 <__cleanup_context+0x84>
 8014a2a:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8014a2e:	2a01      	cmp	r2, #1
 8014a30:	f173 0100 	sbcs.w	r1, r3, #0
 8014a34:	db12      	blt.n	8014a5c <__cleanup_context+0x7c>
 8014a36:	2400      	movs	r4, #0
 8014a38:	2500      	movs	r5, #0
 8014a3a:	f85c 0024 	ldr.w	r0, [ip, r4, lsl #2]
 8014a3e:	4649      	mov	r1, r9
 8014a40:	b1c0      	cbz	r0, 8014a74 <__cleanup_context+0x94>
 8014a42:	47c0      	blx	r8
 8014a44:	6831      	ldr	r1, [r6, #0]
 8014a46:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 8014a4a:	3401      	adds	r4, #1
 8014a4c:	f145 0500 	adc.w	r5, r5, #0
 8014a50:	4294      	cmp	r4, r2
 8014a52:	f8d1 c020 	ldr.w	ip, [r1, #32]
 8014a56:	eb75 0103 	sbcs.w	r1, r5, r3
 8014a5a:	dbee      	blt.n	8014a3a <__cleanup_context+0x5a>
 8014a5c:	4660      	mov	r0, ip
 8014a5e:	4649      	mov	r1, r9
 8014a60:	47c0      	blx	r8
 8014a62:	6830      	ldr	r0, [r6, #0]
 8014a64:	4649      	mov	r1, r9
 8014a66:	47c0      	blx	r8
 8014a68:	2300      	movs	r3, #0
 8014a6a:	e9c6 3300 	strd	r3, r3, [r6]
 8014a6e:	4638      	mov	r0, r7
 8014a70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a74:	3401      	adds	r4, #1
 8014a76:	f145 0500 	adc.w	r5, r5, #0
 8014a7a:	4294      	cmp	r4, r2
 8014a7c:	eb75 0103 	sbcs.w	r1, r5, r3
 8014a80:	dbdb      	blt.n	8014a3a <__cleanup_context+0x5a>
 8014a82:	4660      	mov	r0, ip
 8014a84:	4649      	mov	r1, r9
 8014a86:	47c0      	blx	r8
 8014a88:	6830      	ldr	r0, [r6, #0]
 8014a8a:	e7eb      	b.n	8014a64 <__cleanup_context+0x84>
 8014a8c:	4607      	mov	r7, r0
 8014a8e:	2300      	movs	r3, #0
 8014a90:	e9c6 3300 	strd	r3, r3, [r6]
 8014a94:	4638      	mov	r0, r7
 8014a96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a9a:	f7fa fe73 	bl	800f784 <rcutils_reset_error>
 8014a9e:	e7b3      	b.n	8014a08 <__cleanup_context+0x28>
 8014aa0:	f7ff ff7a 	bl	8014998 <rcl_convert_rmw_ret_to_rcl_ret>
 8014aa4:	4607      	mov	r7, r0
 8014aa6:	e7b8      	b.n	8014a1a <__cleanup_context+0x3a>

08014aa8 <rcl_expand_topic_name>:
 8014aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014aac:	b08b      	sub	sp, #44	; 0x2c
 8014aae:	9306      	str	r3, [sp, #24]
 8014ab0:	2800      	cmp	r0, #0
 8014ab2:	f000 80d2 	beq.w	8014c5a <rcl_expand_topic_name+0x1b2>
 8014ab6:	460e      	mov	r6, r1
 8014ab8:	2900      	cmp	r1, #0
 8014aba:	f000 80ce 	beq.w	8014c5a <rcl_expand_topic_name+0x1b2>
 8014abe:	4617      	mov	r7, r2
 8014ac0:	2a00      	cmp	r2, #0
 8014ac2:	f000 80ca 	beq.w	8014c5a <rcl_expand_topic_name+0x1b2>
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	f000 80c7 	beq.w	8014c5a <rcl_expand_topic_name+0x1b2>
 8014acc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	f000 80c3 	beq.w	8014c5a <rcl_expand_topic_name+0x1b2>
 8014ad4:	a909      	add	r1, sp, #36	; 0x24
 8014ad6:	2200      	movs	r2, #0
 8014ad8:	4680      	mov	r8, r0
 8014ada:	f001 f899 	bl	8015c10 <rcl_validate_topic_name>
 8014ade:	4604      	mov	r4, r0
 8014ae0:	2800      	cmp	r0, #0
 8014ae2:	f040 80b6 	bne.w	8014c52 <rcl_expand_topic_name+0x1aa>
 8014ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	f040 80bf 	bne.w	8014c6c <rcl_expand_topic_name+0x1c4>
 8014aee:	4602      	mov	r2, r0
 8014af0:	a909      	add	r1, sp, #36	; 0x24
 8014af2:	4630      	mov	r0, r6
 8014af4:	f002 fa0e 	bl	8016f14 <rmw_validate_node_name>
 8014af8:	2800      	cmp	r0, #0
 8014afa:	f040 80b3 	bne.w	8014c64 <rcl_expand_topic_name+0x1bc>
 8014afe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014b00:	2a00      	cmp	r2, #0
 8014b02:	f040 80b8 	bne.w	8014c76 <rcl_expand_topic_name+0x1ce>
 8014b06:	a909      	add	r1, sp, #36	; 0x24
 8014b08:	4638      	mov	r0, r7
 8014b0a:	f002 f9e5 	bl	8016ed8 <rmw_validate_namespace>
 8014b0e:	2800      	cmp	r0, #0
 8014b10:	f040 80a8 	bne.w	8014c64 <rcl_expand_topic_name+0x1bc>
 8014b14:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8014b16:	2c00      	cmp	r4, #0
 8014b18:	f040 80f6 	bne.w	8014d08 <rcl_expand_topic_name+0x260>
 8014b1c:	217b      	movs	r1, #123	; 0x7b
 8014b1e:	4640      	mov	r0, r8
 8014b20:	f005 fce2 	bl	801a4e8 <strchr>
 8014b24:	f898 3000 	ldrb.w	r3, [r8]
 8014b28:	2b2f      	cmp	r3, #47	; 0x2f
 8014b2a:	4605      	mov	r5, r0
 8014b2c:	f000 80c4 	beq.w	8014cb8 <rcl_expand_topic_name+0x210>
 8014b30:	2b7e      	cmp	r3, #126	; 0x7e
 8014b32:	d16f      	bne.n	8014c14 <rcl_expand_topic_name+0x16c>
 8014b34:	4638      	mov	r0, r7
 8014b36:	f7eb fb5d 	bl	80001f4 <strlen>
 8014b3a:	4b87      	ldr	r3, [pc, #540]	; (8014d58 <rcl_expand_topic_name+0x2b0>)
 8014b3c:	4987      	ldr	r1, [pc, #540]	; (8014d5c <rcl_expand_topic_name+0x2b4>)
 8014b3e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014b40:	9604      	str	r6, [sp, #16]
 8014b42:	2801      	cmp	r0, #1
 8014b44:	bf0c      	ite	eq
 8014b46:	4618      	moveq	r0, r3
 8014b48:	4608      	movne	r0, r1
 8014b4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014b4e:	e9cd 2300 	strd	r2, r3, [sp]
 8014b52:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8014b56:	f108 0101 	add.w	r1, r8, #1
 8014b5a:	9105      	str	r1, [sp, #20]
 8014b5c:	ab14      	add	r3, sp, #80	; 0x50
 8014b5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014b60:	f001 ffe8 	bl	8016b34 <rcutils_format_string_limit>
 8014b64:	4682      	mov	sl, r0
 8014b66:	2800      	cmp	r0, #0
 8014b68:	f000 80d0 	beq.w	8014d0c <rcl_expand_topic_name+0x264>
 8014b6c:	2d00      	cmp	r5, #0
 8014b6e:	f000 80aa 	beq.w	8014cc6 <rcl_expand_topic_name+0x21e>
 8014b72:	217b      	movs	r1, #123	; 0x7b
 8014b74:	f005 fcb8 	bl	801a4e8 <strchr>
 8014b78:	46d1      	mov	r9, sl
 8014b7a:	4605      	mov	r5, r0
 8014b7c:	9407      	str	r4, [sp, #28]
 8014b7e:	46d3      	mov	fp, sl
 8014b80:	464c      	mov	r4, r9
 8014b82:	2d00      	cmp	r5, #0
 8014b84:	f000 80c7 	beq.w	8014d16 <rcl_expand_topic_name+0x26e>
 8014b88:	217d      	movs	r1, #125	; 0x7d
 8014b8a:	4620      	mov	r0, r4
 8014b8c:	f005 fcac 	bl	801a4e8 <strchr>
 8014b90:	eba0 0905 	sub.w	r9, r0, r5
 8014b94:	f109 0a01 	add.w	sl, r9, #1
 8014b98:	4871      	ldr	r0, [pc, #452]	; (8014d60 <rcl_expand_topic_name+0x2b8>)
 8014b9a:	4652      	mov	r2, sl
 8014b9c:	4629      	mov	r1, r5
 8014b9e:	f005 fcb0 	bl	801a502 <strncmp>
 8014ba2:	2800      	cmp	r0, #0
 8014ba4:	f000 808d 	beq.w	8014cc2 <rcl_expand_topic_name+0x21a>
 8014ba8:	486e      	ldr	r0, [pc, #440]	; (8014d64 <rcl_expand_topic_name+0x2bc>)
 8014baa:	4652      	mov	r2, sl
 8014bac:	4629      	mov	r1, r5
 8014bae:	f005 fca8 	bl	801a502 <strncmp>
 8014bb2:	b130      	cbz	r0, 8014bc2 <rcl_expand_topic_name+0x11a>
 8014bb4:	486c      	ldr	r0, [pc, #432]	; (8014d68 <rcl_expand_topic_name+0x2c0>)
 8014bb6:	4652      	mov	r2, sl
 8014bb8:	4629      	mov	r1, r5
 8014bba:	f005 fca2 	bl	801a502 <strncmp>
 8014bbe:	2800      	cmp	r0, #0
 8014bc0:	d15b      	bne.n	8014c7a <rcl_expand_topic_name+0x1d2>
 8014bc2:	46b9      	mov	r9, r7
 8014bc4:	ab16      	add	r3, sp, #88	; 0x58
 8014bc6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014bca:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014bce:	ab14      	add	r3, sp, #80	; 0x50
 8014bd0:	4628      	mov	r0, r5
 8014bd2:	cb0c      	ldmia	r3, {r2, r3}
 8014bd4:	4651      	mov	r1, sl
 8014bd6:	f002 f8f9 	bl	8016dcc <rcutils_strndup>
 8014bda:	4605      	mov	r5, r0
 8014bdc:	2800      	cmp	r0, #0
 8014bde:	f000 80a4 	beq.w	8014d2a <rcl_expand_topic_name+0x282>
 8014be2:	464a      	mov	r2, r9
 8014be4:	4620      	mov	r0, r4
 8014be6:	ab14      	add	r3, sp, #80	; 0x50
 8014be8:	4629      	mov	r1, r5
 8014bea:	f001 fff5 	bl	8016bd8 <rcutils_repl_str>
 8014bee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014bf0:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014bf2:	4604      	mov	r4, r0
 8014bf4:	4628      	mov	r0, r5
 8014bf6:	4798      	blx	r3
 8014bf8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014bfa:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014bfc:	4658      	mov	r0, fp
 8014bfe:	4798      	blx	r3
 8014c00:	2c00      	cmp	r4, #0
 8014c02:	f000 8083 	beq.w	8014d0c <rcl_expand_topic_name+0x264>
 8014c06:	217b      	movs	r1, #123	; 0x7b
 8014c08:	4620      	mov	r0, r4
 8014c0a:	f005 fc6d 	bl	801a4e8 <strchr>
 8014c0e:	46a3      	mov	fp, r4
 8014c10:	4605      	mov	r5, r0
 8014c12:	e7b6      	b.n	8014b82 <rcl_expand_topic_name+0xda>
 8014c14:	2800      	cmp	r0, #0
 8014c16:	d151      	bne.n	8014cbc <rcl_expand_topic_name+0x214>
 8014c18:	4638      	mov	r0, r7
 8014c1a:	f7eb faeb 	bl	80001f4 <strlen>
 8014c1e:	4b53      	ldr	r3, [pc, #332]	; (8014d6c <rcl_expand_topic_name+0x2c4>)
 8014c20:	4a53      	ldr	r2, [pc, #332]	; (8014d70 <rcl_expand_topic_name+0x2c8>)
 8014c22:	f8cd 8010 	str.w	r8, [sp, #16]
 8014c26:	2801      	cmp	r0, #1
 8014c28:	bf0c      	ite	eq
 8014c2a:	4618      	moveq	r0, r3
 8014c2c:	4610      	movne	r0, r2
 8014c2e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014c30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014c34:	e9cd 3200 	strd	r3, r2, [sp]
 8014c38:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8014c3c:	ab14      	add	r3, sp, #80	; 0x50
 8014c3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014c40:	f001 ff78 	bl	8016b34 <rcutils_format_string_limit>
 8014c44:	4682      	mov	sl, r0
 8014c46:	4653      	mov	r3, sl
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d05f      	beq.n	8014d0c <rcl_expand_topic_name+0x264>
 8014c4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014c4e:	f8c3 a000 	str.w	sl, [r3]
 8014c52:	4620      	mov	r0, r4
 8014c54:	b00b      	add	sp, #44	; 0x2c
 8014c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c5a:	240b      	movs	r4, #11
 8014c5c:	4620      	mov	r0, r4
 8014c5e:	b00b      	add	sp, #44	; 0x2c
 8014c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c64:	f7ff fe98 	bl	8014998 <rcl_convert_rmw_ret_to_rcl_ret>
 8014c68:	4604      	mov	r4, r0
 8014c6a:	e7f2      	b.n	8014c52 <rcl_expand_topic_name+0x1aa>
 8014c6c:	2467      	movs	r4, #103	; 0x67
 8014c6e:	4620      	mov	r0, r4
 8014c70:	b00b      	add	sp, #44	; 0x2c
 8014c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c76:	24c9      	movs	r4, #201	; 0xc9
 8014c78:	e7eb      	b.n	8014c52 <rcl_expand_topic_name+0x1aa>
 8014c7a:	f109 32ff 	add.w	r2, r9, #4294967295
 8014c7e:	9806      	ldr	r0, [sp, #24]
 8014c80:	1c69      	adds	r1, r5, #1
 8014c82:	f7fa fe95 	bl	800f9b0 <rcutils_string_map_getn>
 8014c86:	4681      	mov	r9, r0
 8014c88:	2800      	cmp	r0, #0
 8014c8a:	d19b      	bne.n	8014bc4 <rcl_expand_topic_name+0x11c>
 8014c8c:	aa16      	add	r2, sp, #88	; 0x58
 8014c8e:	ca07      	ldmia	r2, {r0, r1, r2}
 8014c90:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014c92:	f8c3 9000 	str.w	r9, [r3]
 8014c96:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014c9a:	ab14      	add	r3, sp, #80	; 0x50
 8014c9c:	cb0c      	ldmia	r3, {r2, r3}
 8014c9e:	4651      	mov	r1, sl
 8014ca0:	4628      	mov	r0, r5
 8014ca2:	f002 f893 	bl	8016dcc <rcutils_strndup>
 8014ca6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014ca8:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014caa:	4798      	blx	r3
 8014cac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014cae:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014cb0:	4658      	mov	r0, fp
 8014cb2:	4798      	blx	r3
 8014cb4:	2469      	movs	r4, #105	; 0x69
 8014cb6:	e7cc      	b.n	8014c52 <rcl_expand_topic_name+0x1aa>
 8014cb8:	2800      	cmp	r0, #0
 8014cba:	d03e      	beq.n	8014d3a <rcl_expand_topic_name+0x292>
 8014cbc:	46c1      	mov	r9, r8
 8014cbe:	46a2      	mov	sl, r4
 8014cc0:	e75c      	b.n	8014b7c <rcl_expand_topic_name+0xd4>
 8014cc2:	46b1      	mov	r9, r6
 8014cc4:	e77e      	b.n	8014bc4 <rcl_expand_topic_name+0x11c>
 8014cc6:	f89a 3000 	ldrb.w	r3, [sl]
 8014cca:	2b2f      	cmp	r3, #47	; 0x2f
 8014ccc:	d0be      	beq.n	8014c4c <rcl_expand_topic_name+0x1a4>
 8014cce:	4638      	mov	r0, r7
 8014cd0:	f7eb fa90 	bl	80001f4 <strlen>
 8014cd4:	4b25      	ldr	r3, [pc, #148]	; (8014d6c <rcl_expand_topic_name+0x2c4>)
 8014cd6:	4926      	ldr	r1, [pc, #152]	; (8014d70 <rcl_expand_topic_name+0x2c8>)
 8014cd8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014cda:	f8cd a010 	str.w	sl, [sp, #16]
 8014cde:	2801      	cmp	r0, #1
 8014ce0:	bf0c      	ite	eq
 8014ce2:	4618      	moveq	r0, r3
 8014ce4:	4608      	movne	r0, r1
 8014ce6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014cea:	e9cd 2300 	strd	r2, r3, [sp]
 8014cee:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8014cf2:	ab14      	add	r3, sp, #80	; 0x50
 8014cf4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014cf6:	f001 ff1d 	bl	8016b34 <rcutils_format_string_limit>
 8014cfa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014cfc:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014cfe:	4603      	mov	r3, r0
 8014d00:	4650      	mov	r0, sl
 8014d02:	469a      	mov	sl, r3
 8014d04:	4790      	blx	r2
 8014d06:	e79e      	b.n	8014c46 <rcl_expand_topic_name+0x19e>
 8014d08:	24ca      	movs	r4, #202	; 0xca
 8014d0a:	e7a2      	b.n	8014c52 <rcl_expand_topic_name+0x1aa>
 8014d0c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014d0e:	2300      	movs	r3, #0
 8014d10:	6013      	str	r3, [r2, #0]
 8014d12:	240a      	movs	r4, #10
 8014d14:	e79d      	b.n	8014c52 <rcl_expand_topic_name+0x1aa>
 8014d16:	465b      	mov	r3, fp
 8014d18:	9c07      	ldr	r4, [sp, #28]
 8014d1a:	46da      	mov	sl, fp
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d1d2      	bne.n	8014cc6 <rcl_expand_topic_name+0x21e>
 8014d20:	f898 3000 	ldrb.w	r3, [r8]
 8014d24:	2b2f      	cmp	r3, #47	; 0x2f
 8014d26:	d091      	beq.n	8014c4c <rcl_expand_topic_name+0x1a4>
 8014d28:	e776      	b.n	8014c18 <rcl_expand_topic_name+0x170>
 8014d2a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014d2c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014d2e:	601d      	str	r5, [r3, #0]
 8014d30:	4658      	mov	r0, fp
 8014d32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014d34:	4798      	blx	r3
 8014d36:	240a      	movs	r4, #10
 8014d38:	e78b      	b.n	8014c52 <rcl_expand_topic_name+0x1aa>
 8014d3a:	e9dd 0117 	ldrd	r0, r1, [sp, #92]	; 0x5c
 8014d3e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014d42:	ab14      	add	r3, sp, #80	; 0x50
 8014d44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8014d46:	4640      	mov	r0, r8
 8014d48:	f002 f81e 	bl	8016d88 <rcutils_strdup>
 8014d4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014d4e:	2800      	cmp	r0, #0
 8014d50:	bf08      	it	eq
 8014d52:	240a      	moveq	r4, #10
 8014d54:	6018      	str	r0, [r3, #0]
 8014d56:	e77c      	b.n	8014c52 <rcl_expand_topic_name+0x1aa>
 8014d58:	0801ba28 	.word	0x0801ba28
 8014d5c:	0801ba64 	.word	0x0801ba64
 8014d60:	0801ba74 	.word	0x0801ba74
 8014d64:	0801ba7c 	.word	0x0801ba7c
 8014d68:	0801ba84 	.word	0x0801ba84
 8014d6c:	0801ba38 	.word	0x0801ba38
 8014d70:	0801ba6c 	.word	0x0801ba6c

08014d74 <rcl_get_default_topic_name_substitutions>:
 8014d74:	2800      	cmp	r0, #0
 8014d76:	bf0c      	ite	eq
 8014d78:	200b      	moveq	r0, #11
 8014d7a:	2000      	movne	r0, #0
 8014d7c:	4770      	bx	lr
 8014d7e:	bf00      	nop

08014d80 <rcl_init>:
 8014d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d84:	1e07      	subs	r7, r0, #0
 8014d86:	b09f      	sub	sp, #124	; 0x7c
 8014d88:	4688      	mov	r8, r1
 8014d8a:	4692      	mov	sl, r2
 8014d8c:	4699      	mov	r9, r3
 8014d8e:	f340 8097 	ble.w	8014ec0 <rcl_init+0x140>
 8014d92:	2900      	cmp	r1, #0
 8014d94:	f000 8097 	beq.w	8014ec6 <rcl_init+0x146>
 8014d98:	1f0d      	subs	r5, r1, #4
 8014d9a:	2400      	movs	r4, #0
 8014d9c:	f855 6f04 	ldr.w	r6, [r5, #4]!
 8014da0:	3401      	adds	r4, #1
 8014da2:	2e00      	cmp	r6, #0
 8014da4:	f000 808f 	beq.w	8014ec6 <rcl_init+0x146>
 8014da8:	42a7      	cmp	r7, r4
 8014daa:	d1f7      	bne.n	8014d9c <rcl_init+0x1c>
 8014dac:	f1ba 0f00 	cmp.w	sl, #0
 8014db0:	f000 8089 	beq.w	8014ec6 <rcl_init+0x146>
 8014db4:	f8da 4000 	ldr.w	r4, [sl]
 8014db8:	2c00      	cmp	r4, #0
 8014dba:	f000 8084 	beq.w	8014ec6 <rcl_init+0x146>
 8014dbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014dc0:	ad19      	add	r5, sp, #100	; 0x64
 8014dc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014dc4:	6823      	ldr	r3, [r4, #0]
 8014dc6:	602b      	str	r3, [r5, #0]
 8014dc8:	a819      	add	r0, sp, #100	; 0x64
 8014dca:	f7fa fcb7 	bl	800f73c <rcutils_allocator_is_valid>
 8014dce:	2800      	cmp	r0, #0
 8014dd0:	d079      	beq.n	8014ec6 <rcl_init+0x146>
 8014dd2:	f1b9 0f00 	cmp.w	r9, #0
 8014dd6:	d076      	beq.n	8014ec6 <rcl_init+0x146>
 8014dd8:	f8d9 3000 	ldr.w	r3, [r9]
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d177      	bne.n	8014ed0 <rcl_init+0x150>
 8014de0:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 8014de4:	2178      	movs	r1, #120	; 0x78
 8014de6:	2001      	movs	r0, #1
 8014de8:	4798      	blx	r3
 8014dea:	4604      	mov	r4, r0
 8014dec:	f8c9 0000 	str.w	r0, [r9]
 8014df0:	2800      	cmp	r0, #0
 8014df2:	f000 80ba 	beq.w	8014f6a <rcl_init+0x1ea>
 8014df6:	a802      	add	r0, sp, #8
 8014df8:	f002 f804 	bl	8016e04 <rmw_get_zero_initialized_context>
 8014dfc:	a902      	add	r1, sp, #8
 8014dfe:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8014e02:	2250      	movs	r2, #80	; 0x50
 8014e04:	ac19      	add	r4, sp, #100	; 0x64
 8014e06:	f005 fc86 	bl	801a716 <memcpy>
 8014e0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014e0c:	f8d9 5000 	ldr.w	r5, [r9]
 8014e10:	6826      	ldr	r6, [r4, #0]
 8014e12:	462c      	mov	r4, r5
 8014e14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014e16:	f105 0114 	add.w	r1, r5, #20
 8014e1a:	6026      	str	r6, [r4, #0]
 8014e1c:	4650      	mov	r0, sl
 8014e1e:	f000 f931 	bl	8015084 <rcl_init_options_copy>
 8014e22:	4606      	mov	r6, r0
 8014e24:	2800      	cmp	r0, #0
 8014e26:	d144      	bne.n	8014eb2 <rcl_init+0x132>
 8014e28:	f8d9 a000 	ldr.w	sl, [r9]
 8014e2c:	463c      	mov	r4, r7
 8014e2e:	17fd      	asrs	r5, r7, #31
 8014e30:	e9ca 4506 	strd	r4, r5, [sl, #24]
 8014e34:	f8ca 0020 	str.w	r0, [sl, #32]
 8014e38:	2f00      	cmp	r7, #0
 8014e3a:	d050      	beq.n	8014ede <rcl_init+0x15e>
 8014e3c:	f1b8 0f00 	cmp.w	r8, #0
 8014e40:	d04d      	beq.n	8014ede <rcl_init+0x15e>
 8014e42:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 8014e46:	4638      	mov	r0, r7
 8014e48:	2104      	movs	r1, #4
 8014e4a:	4798      	blx	r3
 8014e4c:	f8ca 0020 	str.w	r0, [sl, #32]
 8014e50:	f8d9 a000 	ldr.w	sl, [r9]
 8014e54:	f8da 3020 	ldr.w	r3, [sl, #32]
 8014e58:	46d3      	mov	fp, sl
 8014e5a:	b34b      	cbz	r3, 8014eb0 <rcl_init+0x130>
 8014e5c:	2f01      	cmp	r7, #1
 8014e5e:	f175 0300 	sbcs.w	r3, r5, #0
 8014e62:	db3c      	blt.n	8014ede <rcl_init+0x15e>
 8014e64:	f1a8 0804 	sub.w	r8, r8, #4
 8014e68:	2600      	movs	r6, #0
 8014e6a:	2700      	movs	r7, #0
 8014e6c:	e00c      	b.n	8014e88 <rcl_init+0x108>
 8014e6e:	f8d8 1000 	ldr.w	r1, [r8]
 8014e72:	f005 fc50 	bl	801a716 <memcpy>
 8014e76:	3601      	adds	r6, #1
 8014e78:	f147 0700 	adc.w	r7, r7, #0
 8014e7c:	42bd      	cmp	r5, r7
 8014e7e:	bf08      	it	eq
 8014e80:	42b4      	cmpeq	r4, r6
 8014e82:	d02a      	beq.n	8014eda <rcl_init+0x15a>
 8014e84:	f8d9 b000 	ldr.w	fp, [r9]
 8014e88:	f858 0f04 	ldr.w	r0, [r8, #4]!
 8014e8c:	f7eb f9b2 	bl	80001f4 <strlen>
 8014e90:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014e92:	991d      	ldr	r1, [sp, #116]	; 0x74
 8014e94:	f8db a020 	ldr.w	sl, [fp, #32]
 8014e98:	9001      	str	r0, [sp, #4]
 8014e9a:	4798      	blx	r3
 8014e9c:	f8d9 1000 	ldr.w	r1, [r9]
 8014ea0:	9a01      	ldr	r2, [sp, #4]
 8014ea2:	6a09      	ldr	r1, [r1, #32]
 8014ea4:	00b3      	lsls	r3, r6, #2
 8014ea6:	f84a 0003 	str.w	r0, [sl, r3]
 8014eaa:	58c8      	ldr	r0, [r1, r3]
 8014eac:	2800      	cmp	r0, #0
 8014eae:	d1de      	bne.n	8014e6e <rcl_init+0xee>
 8014eb0:	260a      	movs	r6, #10
 8014eb2:	4648      	mov	r0, r9
 8014eb4:	f7ff fd94 	bl	80149e0 <__cleanup_context>
 8014eb8:	4630      	mov	r0, r6
 8014eba:	b01f      	add	sp, #124	; 0x7c
 8014ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ec0:	2900      	cmp	r1, #0
 8014ec2:	f43f af73 	beq.w	8014dac <rcl_init+0x2c>
 8014ec6:	260b      	movs	r6, #11
 8014ec8:	4630      	mov	r0, r6
 8014eca:	b01f      	add	sp, #124	; 0x7c
 8014ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ed0:	2664      	movs	r6, #100	; 0x64
 8014ed2:	4630      	mov	r0, r6
 8014ed4:	b01f      	add	sp, #124	; 0x7c
 8014ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014eda:	f8d9 a000 	ldr.w	sl, [r9]
 8014ede:	4a2c      	ldr	r2, [pc, #176]	; (8014f90 <rcl_init+0x210>)
 8014ee0:	6813      	ldr	r3, [r2, #0]
 8014ee2:	3301      	adds	r3, #1
 8014ee4:	d03b      	beq.n	8014f5e <rcl_init+0x1de>
 8014ee6:	6013      	str	r3, [r2, #0]
 8014ee8:	4619      	mov	r1, r3
 8014eea:	2000      	movs	r0, #0
 8014eec:	f8da 4014 	ldr.w	r4, [sl, #20]
 8014ef0:	f8c9 3004 	str.w	r3, [r9, #4]
 8014ef4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014ef6:	3301      	adds	r3, #1
 8014ef8:	e9c4 1006 	strd	r1, r0, [r4, #24]
 8014efc:	d039      	beq.n	8014f72 <rcl_init+0x1f2>
 8014efe:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8014f02:	b94b      	cbnz	r3, 8014f18 <rcl_init+0x198>
 8014f04:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8014f08:	f000 f962 	bl	80151d0 <rcl_get_localhost_only>
 8014f0c:	4606      	mov	r6, r0
 8014f0e:	2800      	cmp	r0, #0
 8014f10:	d1cf      	bne.n	8014eb2 <rcl_init+0x132>
 8014f12:	f8d9 3000 	ldr.w	r3, [r9]
 8014f16:	695c      	ldr	r4, [r3, #20]
 8014f18:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8014f1a:	aa18      	add	r2, sp, #96	; 0x60
 8014f1c:	a917      	add	r1, sp, #92	; 0x5c
 8014f1e:	f000 fe65 	bl	8015bec <rcl_validate_enclave_name>
 8014f22:	4606      	mov	r6, r0
 8014f24:	2800      	cmp	r0, #0
 8014f26:	d1c4      	bne.n	8014eb2 <rcl_init+0x132>
 8014f28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014f2a:	bb03      	cbnz	r3, 8014f6e <rcl_init+0x1ee>
 8014f2c:	f8d9 1000 	ldr.w	r1, [r9]
 8014f30:	694b      	ldr	r3, [r1, #20]
 8014f32:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8014f34:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8014f38:	f000 fbb8 	bl	80156ac <rcl_get_security_options_from_environment>
 8014f3c:	4606      	mov	r6, r0
 8014f3e:	2800      	cmp	r0, #0
 8014f40:	d1b7      	bne.n	8014eb2 <rcl_init+0x132>
 8014f42:	f8d9 1000 	ldr.w	r1, [r9]
 8014f46:	6948      	ldr	r0, [r1, #20]
 8014f48:	3128      	adds	r1, #40	; 0x28
 8014f4a:	3018      	adds	r0, #24
 8014f4c:	f002 f988 	bl	8017260 <rmw_init>
 8014f50:	4606      	mov	r6, r0
 8014f52:	2800      	cmp	r0, #0
 8014f54:	d0b8      	beq.n	8014ec8 <rcl_init+0x148>
 8014f56:	f7ff fd1f 	bl	8014998 <rcl_convert_rmw_ret_to_rcl_ret>
 8014f5a:	4606      	mov	r6, r0
 8014f5c:	e7a9      	b.n	8014eb2 <rcl_init+0x132>
 8014f5e:	2401      	movs	r4, #1
 8014f60:	4618      	mov	r0, r3
 8014f62:	4621      	mov	r1, r4
 8014f64:	6014      	str	r4, [r2, #0]
 8014f66:	4623      	mov	r3, r4
 8014f68:	e7c0      	b.n	8014eec <rcl_init+0x16c>
 8014f6a:	260a      	movs	r6, #10
 8014f6c:	e7ac      	b.n	8014ec8 <rcl_init+0x148>
 8014f6e:	2601      	movs	r6, #1
 8014f70:	e79f      	b.n	8014eb2 <rcl_init+0x132>
 8014f72:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8014f76:	f004 fba3 	bl	80196c0 <rcl_get_default_domain_id>
 8014f7a:	4606      	mov	r6, r0
 8014f7c:	2800      	cmp	r0, #0
 8014f7e:	d198      	bne.n	8014eb2 <rcl_init+0x132>
 8014f80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014f82:	3301      	adds	r3, #1
 8014f84:	f8d9 3000 	ldr.w	r3, [r9]
 8014f88:	bf08      	it	eq
 8014f8a:	6260      	streq	r0, [r4, #36]	; 0x24
 8014f8c:	695c      	ldr	r4, [r3, #20]
 8014f8e:	e7b6      	b.n	8014efe <rcl_init+0x17e>
 8014f90:	20009c50 	.word	0x20009c50

08014f94 <rcl_get_zero_initialized_init_options>:
 8014f94:	2000      	movs	r0, #0
 8014f96:	4770      	bx	lr

08014f98 <rcl_init_options_init>:
 8014f98:	b084      	sub	sp, #16
 8014f9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f9c:	b091      	sub	sp, #68	; 0x44
 8014f9e:	af17      	add	r7, sp, #92	; 0x5c
 8014fa0:	e887 000e 	stmia.w	r7, {r1, r2, r3}
 8014fa4:	2800      	cmp	r0, #0
 8014fa6:	d044      	beq.n	8015032 <rcl_init_options_init+0x9a>
 8014fa8:	6803      	ldr	r3, [r0, #0]
 8014faa:	4606      	mov	r6, r0
 8014fac:	b133      	cbz	r3, 8014fbc <rcl_init_options_init+0x24>
 8014fae:	2464      	movs	r4, #100	; 0x64
 8014fb0:	4620      	mov	r0, r4
 8014fb2:	b011      	add	sp, #68	; 0x44
 8014fb4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014fb8:	b004      	add	sp, #16
 8014fba:	4770      	bx	lr
 8014fbc:	4638      	mov	r0, r7
 8014fbe:	f7fa fbbd 	bl	800f73c <rcutils_allocator_is_valid>
 8014fc2:	2800      	cmp	r0, #0
 8014fc4:	d035      	beq.n	8015032 <rcl_init_options_init+0x9a>
 8014fc6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014fc8:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8014fca:	2050      	movs	r0, #80	; 0x50
 8014fcc:	4798      	blx	r3
 8014fce:	4604      	mov	r4, r0
 8014fd0:	6030      	str	r0, [r6, #0]
 8014fd2:	2800      	cmp	r0, #0
 8014fd4:	d02f      	beq.n	8015036 <rcl_init_options_init+0x9e>
 8014fd6:	46bc      	mov	ip, r7
 8014fd8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014fdc:	4625      	mov	r5, r4
 8014fde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014fe0:	f8dc 3000 	ldr.w	r3, [ip]
 8014fe4:	602b      	str	r3, [r5, #0]
 8014fe6:	a802      	add	r0, sp, #8
 8014fe8:	ad02      	add	r5, sp, #8
 8014fea:	f001 ff13 	bl	8016e14 <rmw_get_zero_initialized_init_options>
 8014fee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014ff0:	3418      	adds	r4, #24
 8014ff2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014ff4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014ff6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014ff8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014ffa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014ffc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015000:	6833      	ldr	r3, [r6, #0]
 8015002:	e884 0003 	stmia.w	r4, {r0, r1}
 8015006:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 801500a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801500e:	f103 0018 	add.w	r0, r3, #24
 8015012:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8015016:	f002 f849 	bl	80170ac <rmw_init_options_init>
 801501a:	4604      	mov	r4, r0
 801501c:	2800      	cmp	r0, #0
 801501e:	d0c7      	beq.n	8014fb0 <rcl_init_options_init+0x18>
 8015020:	6830      	ldr	r0, [r6, #0]
 8015022:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015024:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8015026:	4798      	blx	r3
 8015028:	4620      	mov	r0, r4
 801502a:	f7ff fcb5 	bl	8014998 <rcl_convert_rmw_ret_to_rcl_ret>
 801502e:	4604      	mov	r4, r0
 8015030:	e7be      	b.n	8014fb0 <rcl_init_options_init+0x18>
 8015032:	240b      	movs	r4, #11
 8015034:	e7bc      	b.n	8014fb0 <rcl_init_options_init+0x18>
 8015036:	240a      	movs	r4, #10
 8015038:	e7ba      	b.n	8014fb0 <rcl_init_options_init+0x18>
 801503a:	bf00      	nop

0801503c <rcl_init_options_fini>:
 801503c:	b570      	push	{r4, r5, r6, lr}
 801503e:	b086      	sub	sp, #24
 8015040:	b1c0      	cbz	r0, 8015074 <rcl_init_options_fini+0x38>
 8015042:	6804      	ldr	r4, [r0, #0]
 8015044:	4606      	mov	r6, r0
 8015046:	b1ac      	cbz	r4, 8015074 <rcl_init_options_fini+0x38>
 8015048:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801504a:	ad01      	add	r5, sp, #4
 801504c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801504e:	6823      	ldr	r3, [r4, #0]
 8015050:	602b      	str	r3, [r5, #0]
 8015052:	a801      	add	r0, sp, #4
 8015054:	f7fa fb72 	bl	800f73c <rcutils_allocator_is_valid>
 8015058:	b160      	cbz	r0, 8015074 <rcl_init_options_fini+0x38>
 801505a:	6830      	ldr	r0, [r6, #0]
 801505c:	3018      	adds	r0, #24
 801505e:	f002 f8bf 	bl	80171e0 <rmw_init_options_fini>
 8015062:	4604      	mov	r4, r0
 8015064:	b950      	cbnz	r0, 801507c <rcl_init_options_fini+0x40>
 8015066:	6830      	ldr	r0, [r6, #0]
 8015068:	9b02      	ldr	r3, [sp, #8]
 801506a:	9905      	ldr	r1, [sp, #20]
 801506c:	4798      	blx	r3
 801506e:	4620      	mov	r0, r4
 8015070:	b006      	add	sp, #24
 8015072:	bd70      	pop	{r4, r5, r6, pc}
 8015074:	240b      	movs	r4, #11
 8015076:	4620      	mov	r0, r4
 8015078:	b006      	add	sp, #24
 801507a:	bd70      	pop	{r4, r5, r6, pc}
 801507c:	f7ff fc8c 	bl	8014998 <rcl_convert_rmw_ret_to_rcl_ret>
 8015080:	4604      	mov	r4, r0
 8015082:	e7f8      	b.n	8015076 <rcl_init_options_fini+0x3a>

08015084 <rcl_init_options_copy>:
 8015084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015088:	b096      	sub	sp, #88	; 0x58
 801508a:	2800      	cmp	r0, #0
 801508c:	d063      	beq.n	8015156 <rcl_init_options_copy+0xd2>
 801508e:	6806      	ldr	r6, [r0, #0]
 8015090:	4605      	mov	r5, r0
 8015092:	2e00      	cmp	r6, #0
 8015094:	d05f      	beq.n	8015156 <rcl_init_options_copy+0xd2>
 8015096:	460c      	mov	r4, r1
 8015098:	2900      	cmp	r1, #0
 801509a:	d05c      	beq.n	8015156 <rcl_init_options_copy+0xd2>
 801509c:	680b      	ldr	r3, [r1, #0]
 801509e:	b123      	cbz	r3, 80150aa <rcl_init_options_copy+0x26>
 80150a0:	2664      	movs	r6, #100	; 0x64
 80150a2:	4630      	mov	r0, r6
 80150a4:	b016      	add	sp, #88	; 0x58
 80150a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150aa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80150ac:	af11      	add	r7, sp, #68	; 0x44
 80150ae:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80150b0:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 80150b4:	6833      	ldr	r3, [r6, #0]
 80150b6:	603b      	str	r3, [r7, #0]
 80150b8:	4640      	mov	r0, r8
 80150ba:	f7fa fb3f 	bl	800f73c <rcutils_allocator_is_valid>
 80150be:	2800      	cmp	r0, #0
 80150c0:	d049      	beq.n	8015156 <rcl_init_options_copy+0xd2>
 80150c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80150c4:	9915      	ldr	r1, [sp, #84]	; 0x54
 80150c6:	2050      	movs	r0, #80	; 0x50
 80150c8:	4798      	blx	r3
 80150ca:	4606      	mov	r6, r0
 80150cc:	6020      	str	r0, [r4, #0]
 80150ce:	2800      	cmp	r0, #0
 80150d0:	d077      	beq.n	80151c2 <rcl_init_options_copy+0x13e>
 80150d2:	46c4      	mov	ip, r8
 80150d4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80150d8:	4637      	mov	r7, r6
 80150da:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80150dc:	f8dc 3000 	ldr.w	r3, [ip]
 80150e0:	603b      	str	r3, [r7, #0]
 80150e2:	a802      	add	r0, sp, #8
 80150e4:	af02      	add	r7, sp, #8
 80150e6:	f001 fe95 	bl	8016e14 <rmw_get_zero_initialized_init_options>
 80150ea:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80150ec:	3618      	adds	r6, #24
 80150ee:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80150f0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80150f2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80150f4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80150f6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80150f8:	e897 0003 	ldmia.w	r7, {r0, r1}
 80150fc:	ab16      	add	r3, sp, #88	; 0x58
 80150fe:	e886 0003 	stmia.w	r6, {r0, r1}
 8015102:	e913 0003 	ldmdb	r3, {r0, r1}
 8015106:	6823      	ldr	r3, [r4, #0]
 8015108:	e88d 0003 	stmia.w	sp, {r0, r1}
 801510c:	f103 0018 	add.w	r0, r3, #24
 8015110:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8015114:	f001 ffca 	bl	80170ac <rmw_init_options_init>
 8015118:	4606      	mov	r6, r0
 801511a:	bb08      	cbnz	r0, 8015160 <rcl_init_options_copy+0xdc>
 801511c:	682f      	ldr	r7, [r5, #0]
 801511e:	f8d4 c000 	ldr.w	ip, [r4]
 8015122:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8015124:	4666      	mov	r6, ip
 8015126:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8015128:	683b      	ldr	r3, [r7, #0]
 801512a:	6033      	str	r3, [r6, #0]
 801512c:	f10c 0018 	add.w	r0, ip, #24
 8015130:	f002 f856 	bl	80171e0 <rmw_init_options_fini>
 8015134:	4607      	mov	r7, r0
 8015136:	b1f0      	cbz	r0, 8015176 <rcl_init_options_copy+0xf2>
 8015138:	f7fa fb0e 	bl	800f758 <rcutils_get_error_string>
 801513c:	f7fa fb22 	bl	800f784 <rcutils_reset_error>
 8015140:	4620      	mov	r0, r4
 8015142:	f7ff ff7b 	bl	801503c <rcl_init_options_fini>
 8015146:	4606      	mov	r6, r0
 8015148:	2800      	cmp	r0, #0
 801514a:	d1aa      	bne.n	80150a2 <rcl_init_options_copy+0x1e>
 801514c:	4638      	mov	r0, r7
 801514e:	f7ff fc23 	bl	8014998 <rcl_convert_rmw_ret_to_rcl_ret>
 8015152:	4606      	mov	r6, r0
 8015154:	e7a5      	b.n	80150a2 <rcl_init_options_copy+0x1e>
 8015156:	260b      	movs	r6, #11
 8015158:	4630      	mov	r0, r6
 801515a:	b016      	add	sp, #88	; 0x58
 801515c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015160:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015162:	9915      	ldr	r1, [sp, #84]	; 0x54
 8015164:	6820      	ldr	r0, [r4, #0]
 8015166:	4798      	blx	r3
 8015168:	4630      	mov	r0, r6
 801516a:	f7ff fc15 	bl	8014998 <rcl_convert_rmw_ret_to_rcl_ret>
 801516e:	4606      	mov	r6, r0
 8015170:	2800      	cmp	r0, #0
 8015172:	d0d3      	beq.n	801511c <rcl_init_options_copy+0x98>
 8015174:	e795      	b.n	80150a2 <rcl_init_options_copy+0x1e>
 8015176:	a802      	add	r0, sp, #8
 8015178:	ae02      	add	r6, sp, #8
 801517a:	6827      	ldr	r7, [r4, #0]
 801517c:	f001 fe4a 	bl	8016e14 <rmw_get_zero_initialized_init_options>
 8015180:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8015182:	3718      	adds	r7, #24
 8015184:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8015186:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8015188:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801518a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801518c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801518e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8015192:	682a      	ldr	r2, [r5, #0]
 8015194:	6823      	ldr	r3, [r4, #0]
 8015196:	e887 0003 	stmia.w	r7, {r0, r1}
 801519a:	f102 0018 	add.w	r0, r2, #24
 801519e:	f103 0118 	add.w	r1, r3, #24
 80151a2:	f001 ffdb 	bl	801715c <rmw_init_options_copy>
 80151a6:	4606      	mov	r6, r0
 80151a8:	2800      	cmp	r0, #0
 80151aa:	f43f af7a 	beq.w	80150a2 <rcl_init_options_copy+0x1e>
 80151ae:	f7fa fad3 	bl	800f758 <rcutils_get_error_string>
 80151b2:	f7fa fae7 	bl	800f784 <rcutils_reset_error>
 80151b6:	4620      	mov	r0, r4
 80151b8:	f7ff ff40 	bl	801503c <rcl_init_options_fini>
 80151bc:	b118      	cbz	r0, 80151c6 <rcl_init_options_copy+0x142>
 80151be:	4606      	mov	r6, r0
 80151c0:	e76f      	b.n	80150a2 <rcl_init_options_copy+0x1e>
 80151c2:	260a      	movs	r6, #10
 80151c4:	e76d      	b.n	80150a2 <rcl_init_options_copy+0x1e>
 80151c6:	4630      	mov	r0, r6
 80151c8:	f7ff fbe6 	bl	8014998 <rcl_convert_rmw_ret_to_rcl_ret>
 80151cc:	4606      	mov	r6, r0
 80151ce:	e768      	b.n	80150a2 <rcl_init_options_copy+0x1e>

080151d0 <rcl_get_localhost_only>:
 80151d0:	b510      	push	{r4, lr}
 80151d2:	b082      	sub	sp, #8
 80151d4:	2300      	movs	r3, #0
 80151d6:	9301      	str	r3, [sp, #4]
 80151d8:	b1b8      	cbz	r0, 801520a <rcl_get_localhost_only+0x3a>
 80151da:	4604      	mov	r4, r0
 80151dc:	a901      	add	r1, sp, #4
 80151de:	480c      	ldr	r0, [pc, #48]	; (8015210 <rcl_get_localhost_only+0x40>)
 80151e0:	f001 fce2 	bl	8016ba8 <rcutils_get_env>
 80151e4:	b110      	cbz	r0, 80151ec <rcl_get_localhost_only+0x1c>
 80151e6:	2001      	movs	r0, #1
 80151e8:	b002      	add	sp, #8
 80151ea:	bd10      	pop	{r4, pc}
 80151ec:	9b01      	ldr	r3, [sp, #4]
 80151ee:	b113      	cbz	r3, 80151f6 <rcl_get_localhost_only+0x26>
 80151f0:	781a      	ldrb	r2, [r3, #0]
 80151f2:	2a31      	cmp	r2, #49	; 0x31
 80151f4:	d004      	beq.n	8015200 <rcl_get_localhost_only+0x30>
 80151f6:	2302      	movs	r3, #2
 80151f8:	2000      	movs	r0, #0
 80151fa:	7023      	strb	r3, [r4, #0]
 80151fc:	b002      	add	sp, #8
 80151fe:	bd10      	pop	{r4, pc}
 8015200:	785b      	ldrb	r3, [r3, #1]
 8015202:	2b00      	cmp	r3, #0
 8015204:	d1f7      	bne.n	80151f6 <rcl_get_localhost_only+0x26>
 8015206:	2301      	movs	r3, #1
 8015208:	e7f6      	b.n	80151f8 <rcl_get_localhost_only+0x28>
 801520a:	200b      	movs	r0, #11
 801520c:	b002      	add	sp, #8
 801520e:	bd10      	pop	{r4, pc}
 8015210:	0801ba90 	.word	0x0801ba90

08015214 <rcl_get_zero_initialized_node>:
 8015214:	4a03      	ldr	r2, [pc, #12]	; (8015224 <rcl_get_zero_initialized_node+0x10>)
 8015216:	4603      	mov	r3, r0
 8015218:	e892 0003 	ldmia.w	r2, {r0, r1}
 801521c:	e883 0003 	stmia.w	r3, {r0, r1}
 8015220:	4618      	mov	r0, r3
 8015222:	4770      	bx	lr
 8015224:	0801bab0 	.word	0x0801bab0

08015228 <rcl_node_init>:
 8015228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801522c:	b09b      	sub	sp, #108	; 0x6c
 801522e:	4604      	mov	r4, r0
 8015230:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
 8015234:	f04f 0c00 	mov.w	ip, #0
 8015238:	a815      	add	r0, sp, #84	; 0x54
 801523a:	460e      	mov	r6, r1
 801523c:	4615      	mov	r5, r2
 801523e:	461f      	mov	r7, r3
 8015240:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
 8015244:	f004 faf8 	bl	8019838 <rcl_guard_condition_get_default_options>
 8015248:	f1b8 0f00 	cmp.w	r8, #0
 801524c:	f000 80fd 	beq.w	801544a <rcl_node_init+0x222>
 8015250:	f108 0b04 	add.w	fp, r8, #4
 8015254:	4658      	mov	r0, fp
 8015256:	f7fa fa71 	bl	800f73c <rcutils_allocator_is_valid>
 801525a:	2800      	cmp	r0, #0
 801525c:	f000 80f5 	beq.w	801544a <rcl_node_init+0x222>
 8015260:	2e00      	cmp	r6, #0
 8015262:	f000 80f2 	beq.w	801544a <rcl_node_init+0x222>
 8015266:	2d00      	cmp	r5, #0
 8015268:	f000 80ef 	beq.w	801544a <rcl_node_init+0x222>
 801526c:	2c00      	cmp	r4, #0
 801526e:	f000 80ec 	beq.w	801544a <rcl_node_init+0x222>
 8015272:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8015276:	f1b9 0f00 	cmp.w	r9, #0
 801527a:	f040 8112 	bne.w	80154a2 <rcl_node_init+0x27a>
 801527e:	2f00      	cmp	r7, #0
 8015280:	f000 80e3 	beq.w	801544a <rcl_node_init+0x222>
 8015284:	4638      	mov	r0, r7
 8015286:	f7ff fba5 	bl	80149d4 <rcl_context_is_valid>
 801528a:	4682      	mov	sl, r0
 801528c:	2800      	cmp	r0, #0
 801528e:	f000 80e2 	beq.w	8015456 <rcl_node_init+0x22e>
 8015292:	464a      	mov	r2, r9
 8015294:	a914      	add	r1, sp, #80	; 0x50
 8015296:	4630      	mov	r0, r6
 8015298:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 801529c:	f001 fe3a 	bl	8016f14 <rmw_validate_node_name>
 80152a0:	4681      	mov	r9, r0
 80152a2:	2800      	cmp	r0, #0
 80152a4:	f040 80d3 	bne.w	801544e <rcl_node_init+0x226>
 80152a8:	9814      	ldr	r0, [sp, #80]	; 0x50
 80152aa:	2800      	cmp	r0, #0
 80152ac:	f040 8105 	bne.w	80154ba <rcl_node_init+0x292>
 80152b0:	4628      	mov	r0, r5
 80152b2:	f7ea ff9f 	bl	80001f4 <strlen>
 80152b6:	2800      	cmp	r0, #0
 80152b8:	f040 80d0 	bne.w	801545c <rcl_node_init+0x234>
 80152bc:	4d8e      	ldr	r5, [pc, #568]	; (80154f8 <rcl_node_init+0x2d0>)
 80152be:	a914      	add	r1, sp, #80	; 0x50
 80152c0:	2200      	movs	r2, #0
 80152c2:	4628      	mov	r0, r5
 80152c4:	f001 fe08 	bl	8016ed8 <rmw_validate_namespace>
 80152c8:	4681      	mov	r9, r0
 80152ca:	2800      	cmp	r0, #0
 80152cc:	f040 80bf 	bne.w	801544e <rcl_node_init+0x226>
 80152d0:	4682      	mov	sl, r0
 80152d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	f040 80f5 	bne.w	80154c4 <rcl_node_init+0x29c>
 80152da:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80152de:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80152e2:	9307      	str	r3, [sp, #28]
 80152e4:	2030      	movs	r0, #48	; 0x30
 80152e6:	4790      	blx	r2
 80152e8:	4681      	mov	r9, r0
 80152ea:	6060      	str	r0, [r4, #4]
 80152ec:	2800      	cmp	r0, #0
 80152ee:	f000 80de 	beq.w	80154ae <rcl_node_init+0x286>
 80152f2:	9b07      	ldr	r3, [sp, #28]
 80152f4:	e9c0 3308 	strd	r3, r3, [r0, #32]
 80152f8:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 80152fc:	a80a      	add	r0, sp, #40	; 0x28
 80152fe:	f7f9 faad 	bl	800e85c <rcl_node_get_default_options>
 8015302:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8015306:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801530a:	46cc      	mov	ip, r9
 801530c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015310:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8015314:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8015318:	6861      	ldr	r1, [r4, #4]
 801531a:	6027      	str	r7, [r4, #0]
 801531c:	4640      	mov	r0, r8
 801531e:	f7f9 fab9 	bl	800e894 <rcl_node_options_copy>
 8015322:	2800      	cmp	r0, #0
 8015324:	d167      	bne.n	80153f6 <rcl_node_init+0x1ce>
 8015326:	4628      	mov	r0, r5
 8015328:	f7ea ff64 	bl	80001f4 <strlen>
 801532c:	4428      	add	r0, r5
 801532e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015332:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8015336:	2b2f      	cmp	r3, #47	; 0x2f
 8015338:	bf08      	it	eq
 801533a:	4970      	ldreq	r1, [pc, #448]	; (80154fc <rcl_node_init+0x2d4>)
 801533c:	f8db 3010 	ldr.w	r3, [fp, #16]
 8015340:	bf18      	it	ne
 8015342:	496f      	ldrne	r1, [pc, #444]	; (8015500 <rcl_node_init+0x2d8>)
 8015344:	9604      	str	r6, [sp, #16]
 8015346:	e9cd 1502 	strd	r1, r5, [sp, #8]
 801534a:	e9cd 3200 	strd	r3, r2, [sp]
 801534e:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8015352:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8015356:	f001 fbed 	bl	8016b34 <rcutils_format_string_limit>
 801535a:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
 801535e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8015362:	f8d9 3000 	ldr.w	r3, [r9]
 8015366:	9313      	str	r3, [sp, #76]	; 0x4c
 8015368:	1c59      	adds	r1, r3, #1
 801536a:	f000 80b7 	beq.w	80154dc <rcl_node_init+0x2b4>
 801536e:	683a      	ldr	r2, [r7, #0]
 8015370:	f8c9 301c 	str.w	r3, [r9, #28]
 8015374:	6952      	ldr	r2, [r2, #20]
 8015376:	6821      	ldr	r1, [r4, #0]
 8015378:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 801537c:	6808      	ldr	r0, [r1, #0]
 801537e:	f1a2 0201 	sub.w	r2, r2, #1
 8015382:	fab2 f282 	clz	r2, r2
 8015386:	0952      	lsrs	r2, r2, #5
 8015388:	9200      	str	r2, [sp, #0]
 801538a:	4631      	mov	r1, r6
 801538c:	3028      	adds	r0, #40	; 0x28
 801538e:	462a      	mov	r2, r5
 8015390:	f002 f9ce 	bl	8017730 <rmw_create_node>
 8015394:	6863      	ldr	r3, [r4, #4]
 8015396:	f8c9 0020 	str.w	r0, [r9, #32]
 801539a:	6a18      	ldr	r0, [r3, #32]
 801539c:	b368      	cbz	r0, 80153fa <rcl_node_init+0x1d2>
 801539e:	f002 fa59 	bl	8017854 <rmw_node_get_graph_guard_condition>
 80153a2:	4681      	mov	r9, r0
 80153a4:	b338      	cbz	r0, 80153f6 <rcl_node_init+0x1ce>
 80153a6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80153aa:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80153ae:	6866      	ldr	r6, [r4, #4]
 80153b0:	2008      	movs	r0, #8
 80153b2:	4798      	blx	r3
 80153b4:	6863      	ldr	r3, [r4, #4]
 80153b6:	6270      	str	r0, [r6, #36]	; 0x24
 80153b8:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 80153ba:	b1f6      	cbz	r6, 80153fa <rcl_node_init+0x1d2>
 80153bc:	a808      	add	r0, sp, #32
 80153be:	f004 f9b3 	bl	8019728 <rcl_get_zero_initialized_guard_condition>
 80153c2:	a808      	add	r0, sp, #32
 80153c4:	c803      	ldmia	r0, {r0, r1}
 80153c6:	e886 0003 	stmia.w	r6, {r0, r1}
 80153ca:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 80153ce:	ae15      	add	r6, sp, #84	; 0x54
 80153d0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80153d2:	f8db 3000 	ldr.w	r3, [fp]
 80153d6:	6033      	str	r3, [r6, #0]
 80153d8:	ab1a      	add	r3, sp, #104	; 0x68
 80153da:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 80153de:	6866      	ldr	r6, [r4, #4]
 80153e0:	6a76      	ldr	r6, [r6, #36]	; 0x24
 80153e2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80153e6:	4649      	mov	r1, r9
 80153e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80153ea:	4630      	mov	r0, r6
 80153ec:	463a      	mov	r2, r7
 80153ee:	f004 f9a5 	bl	801973c <rcl_guard_condition_init_from_rmw>
 80153f2:	4681      	mov	r9, r0
 80153f4:	b328      	cbz	r0, 8015442 <rcl_node_init+0x21a>
 80153f6:	6863      	ldr	r3, [r4, #4]
 80153f8:	b1f3      	cbz	r3, 8015438 <rcl_node_init+0x210>
 80153fa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80153fc:	b128      	cbz	r0, 801540a <rcl_node_init+0x1e2>
 80153fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015402:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8015406:	4798      	blx	r3
 8015408:	6863      	ldr	r3, [r4, #4]
 801540a:	6a18      	ldr	r0, [r3, #32]
 801540c:	b110      	cbz	r0, 8015414 <rcl_node_init+0x1ec>
 801540e:	f002 f9a7 	bl	8017760 <rmw_destroy_node>
 8015412:	6863      	ldr	r3, [r4, #4]
 8015414:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8015416:	b148      	cbz	r0, 801542c <rcl_node_init+0x204>
 8015418:	f004 f9e8 	bl	80197ec <rcl_guard_condition_fini>
 801541c:	6862      	ldr	r2, [r4, #4]
 801541e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015422:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8015424:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8015428:	4798      	blx	r3
 801542a:	6863      	ldr	r3, [r4, #4]
 801542c:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8015430:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8015434:	4618      	mov	r0, r3
 8015436:	4790      	blx	r2
 8015438:	2300      	movs	r3, #0
 801543a:	e9c4 3300 	strd	r3, r3, [r4]
 801543e:	f04f 0901 	mov.w	r9, #1
 8015442:	f1ba 0f00 	cmp.w	sl, #0
 8015446:	d125      	bne.n	8015494 <rcl_node_init+0x26c>
 8015448:	e001      	b.n	801544e <rcl_node_init+0x226>
 801544a:	f04f 090b 	mov.w	r9, #11
 801544e:	4648      	mov	r0, r9
 8015450:	b01b      	add	sp, #108	; 0x6c
 8015452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015456:	f04f 0965 	mov.w	r9, #101	; 0x65
 801545a:	e7f8      	b.n	801544e <rcl_node_init+0x226>
 801545c:	782b      	ldrb	r3, [r5, #0]
 801545e:	2b2f      	cmp	r3, #47	; 0x2f
 8015460:	f43f af2d 	beq.w	80152be <rcl_node_init+0x96>
 8015464:	4927      	ldr	r1, [pc, #156]	; (8015504 <rcl_node_init+0x2dc>)
 8015466:	f8db 3010 	ldr.w	r3, [fp, #16]
 801546a:	9300      	str	r3, [sp, #0]
 801546c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015470:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8015474:	9503      	str	r5, [sp, #12]
 8015476:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 801547a:	f001 fb5b 	bl	8016b34 <rcutils_format_string_limit>
 801547e:	4605      	mov	r5, r0
 8015480:	b348      	cbz	r0, 80154d6 <rcl_node_init+0x2ae>
 8015482:	2200      	movs	r2, #0
 8015484:	a914      	add	r1, sp, #80	; 0x50
 8015486:	9214      	str	r2, [sp, #80]	; 0x50
 8015488:	f001 fd26 	bl	8016ed8 <rmw_validate_namespace>
 801548c:	4681      	mov	r9, r0
 801548e:	2800      	cmp	r0, #0
 8015490:	f43f af1f 	beq.w	80152d2 <rcl_node_init+0xaa>
 8015494:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015498:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801549c:	4628      	mov	r0, r5
 801549e:	4798      	blx	r3
 80154a0:	e7d5      	b.n	801544e <rcl_node_init+0x226>
 80154a2:	f04f 0964 	mov.w	r9, #100	; 0x64
 80154a6:	4648      	mov	r0, r9
 80154a8:	b01b      	add	sp, #108	; 0x6c
 80154aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154ae:	f04f 090a 	mov.w	r9, #10
 80154b2:	f1ba 0f00 	cmp.w	sl, #0
 80154b6:	d1ed      	bne.n	8015494 <rcl_node_init+0x26c>
 80154b8:	e7c9      	b.n	801544e <rcl_node_init+0x226>
 80154ba:	f001 fd7d 	bl	8016fb8 <rmw_node_name_validation_result_string>
 80154be:	f04f 09c9 	mov.w	r9, #201	; 0xc9
 80154c2:	e7c4      	b.n	801544e <rcl_node_init+0x226>
 80154c4:	4618      	mov	r0, r3
 80154c6:	f001 fd19 	bl	8016efc <rmw_namespace_validation_result_string>
 80154ca:	f04f 09ca 	mov.w	r9, #202	; 0xca
 80154ce:	f1ba 0f00 	cmp.w	sl, #0
 80154d2:	d1df      	bne.n	8015494 <rcl_node_init+0x26c>
 80154d4:	e7bb      	b.n	801544e <rcl_node_init+0x226>
 80154d6:	f04f 090a 	mov.w	r9, #10
 80154da:	e7b8      	b.n	801544e <rcl_node_init+0x226>
 80154dc:	a813      	add	r0, sp, #76	; 0x4c
 80154de:	f004 f8ef 	bl	80196c0 <rcl_get_default_domain_id>
 80154e2:	2800      	cmp	r0, #0
 80154e4:	d187      	bne.n	80153f6 <rcl_node_init+0x1ce>
 80154e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80154e8:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80154ec:	1c5a      	adds	r2, r3, #1
 80154ee:	bf04      	itt	eq
 80154f0:	9013      	streq	r0, [sp, #76]	; 0x4c
 80154f2:	4603      	moveq	r3, r0
 80154f4:	e73b      	b.n	801536e <rcl_node_init+0x146>
 80154f6:	bf00      	nop
 80154f8:	0801baa8 	.word	0x0801baa8
 80154fc:	0801ba38 	.word	0x0801ba38
 8015500:	0801ba6c 	.word	0x0801ba6c
 8015504:	0801baac 	.word	0x0801baac

08015508 <rcl_node_is_valid>:
 8015508:	b130      	cbz	r0, 8015518 <rcl_node_is_valid+0x10>
 801550a:	6843      	ldr	r3, [r0, #4]
 801550c:	b123      	cbz	r3, 8015518 <rcl_node_is_valid+0x10>
 801550e:	6a1b      	ldr	r3, [r3, #32]
 8015510:	b113      	cbz	r3, 8015518 <rcl_node_is_valid+0x10>
 8015512:	6800      	ldr	r0, [r0, #0]
 8015514:	f7ff ba5e 	b.w	80149d4 <rcl_context_is_valid>
 8015518:	2000      	movs	r0, #0
 801551a:	4770      	bx	lr

0801551c <rcl_node_get_name>:
 801551c:	b120      	cbz	r0, 8015528 <rcl_node_get_name+0xc>
 801551e:	6840      	ldr	r0, [r0, #4]
 8015520:	b110      	cbz	r0, 8015528 <rcl_node_get_name+0xc>
 8015522:	6a00      	ldr	r0, [r0, #32]
 8015524:	b100      	cbz	r0, 8015528 <rcl_node_get_name+0xc>
 8015526:	6880      	ldr	r0, [r0, #8]
 8015528:	4770      	bx	lr
 801552a:	bf00      	nop

0801552c <rcl_node_get_namespace>:
 801552c:	b120      	cbz	r0, 8015538 <rcl_node_get_namespace+0xc>
 801552e:	6840      	ldr	r0, [r0, #4]
 8015530:	b110      	cbz	r0, 8015538 <rcl_node_get_namespace+0xc>
 8015532:	6a00      	ldr	r0, [r0, #32]
 8015534:	b100      	cbz	r0, 8015538 <rcl_node_get_namespace+0xc>
 8015536:	68c0      	ldr	r0, [r0, #12]
 8015538:	4770      	bx	lr
 801553a:	bf00      	nop

0801553c <rcl_node_get_options>:
 801553c:	b128      	cbz	r0, 801554a <rcl_node_get_options+0xe>
 801553e:	6840      	ldr	r0, [r0, #4]
 8015540:	b118      	cbz	r0, 801554a <rcl_node_get_options+0xe>
 8015542:	6a03      	ldr	r3, [r0, #32]
 8015544:	2b00      	cmp	r3, #0
 8015546:	bf08      	it	eq
 8015548:	2000      	moveq	r0, #0
 801554a:	4770      	bx	lr

0801554c <rcl_node_get_rmw_handle>:
 801554c:	b110      	cbz	r0, 8015554 <rcl_node_get_rmw_handle+0x8>
 801554e:	6840      	ldr	r0, [r0, #4]
 8015550:	b100      	cbz	r0, 8015554 <rcl_node_get_rmw_handle+0x8>
 8015552:	6a00      	ldr	r0, [r0, #32]
 8015554:	4770      	bx	lr
 8015556:	bf00      	nop

08015558 <exact_match_lookup>:
 8015558:	b5f0      	push	{r4, r5, r6, r7, lr}
 801555a:	f102 0708 	add.w	r7, r2, #8
 801555e:	460b      	mov	r3, r1
 8015560:	4614      	mov	r4, r2
 8015562:	4606      	mov	r6, r0
 8015564:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8015568:	b085      	sub	sp, #20
 801556a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801556e:	4618      	mov	r0, r3
 8015570:	4918      	ldr	r1, [pc, #96]	; (80155d4 <exact_match_lookup+0x7c>)
 8015572:	e894 000c 	ldmia.w	r4, {r2, r3}
 8015576:	f001 facf 	bl	8016b18 <rcutils_join_path>
 801557a:	7833      	ldrb	r3, [r6, #0]
 801557c:	2b2f      	cmp	r3, #47	; 0x2f
 801557e:	4605      	mov	r5, r0
 8015580:	d021      	beq.n	80155c6 <exact_match_lookup+0x6e>
 8015582:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 8015586:	e88d 0003 	stmia.w	sp, {r0, r1}
 801558a:	1c70      	adds	r0, r6, #1
 801558c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8015590:	f001 fac8 	bl	8016b24 <rcutils_to_native_path>
 8015594:	4606      	mov	r6, r0
 8015596:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801559a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801559e:	4631      	mov	r1, r6
 80155a0:	e894 000c 	ldmia.w	r4, {r2, r3}
 80155a4:	4628      	mov	r0, r5
 80155a6:	f001 fab7 	bl	8016b18 <rcutils_join_path>
 80155aa:	6862      	ldr	r2, [r4, #4]
 80155ac:	6921      	ldr	r1, [r4, #16]
 80155ae:	4603      	mov	r3, r0
 80155b0:	4630      	mov	r0, r6
 80155b2:	461e      	mov	r6, r3
 80155b4:	4790      	blx	r2
 80155b6:	4628      	mov	r0, r5
 80155b8:	6863      	ldr	r3, [r4, #4]
 80155ba:	6921      	ldr	r1, [r4, #16]
 80155bc:	4798      	blx	r3
 80155be:	4635      	mov	r5, r6
 80155c0:	4628      	mov	r0, r5
 80155c2:	b005      	add	sp, #20
 80155c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80155c6:	7873      	ldrb	r3, [r6, #1]
 80155c8:	2b00      	cmp	r3, #0
 80155ca:	d1da      	bne.n	8015582 <exact_match_lookup+0x2a>
 80155cc:	4628      	mov	r0, r5
 80155ce:	b005      	add	sp, #20
 80155d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80155d2:	bf00      	nop
 80155d4:	0801baf4 	.word	0x0801baf4

080155d8 <rcl_get_secure_root>:
 80155d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80155dc:	b085      	sub	sp, #20
 80155de:	b168      	cbz	r0, 80155fc <rcl_get_secure_root+0x24>
 80155e0:	4607      	mov	r7, r0
 80155e2:	4608      	mov	r0, r1
 80155e4:	460c      	mov	r4, r1
 80155e6:	f7fa f8a9 	bl	800f73c <rcutils_allocator_is_valid>
 80155ea:	b138      	cbz	r0, 80155fc <rcl_get_secure_root+0x24>
 80155ec:	2300      	movs	r3, #0
 80155ee:	482d      	ldr	r0, [pc, #180]	; (80156a4 <rcl_get_secure_root+0xcc>)
 80155f0:	9303      	str	r3, [sp, #12]
 80155f2:	a903      	add	r1, sp, #12
 80155f4:	f001 fad8 	bl	8016ba8 <rcutils_get_env>
 80155f8:	4605      	mov	r5, r0
 80155fa:	b120      	cbz	r0, 8015606 <rcl_get_secure_root+0x2e>
 80155fc:	2500      	movs	r5, #0
 80155fe:	4628      	mov	r0, r5
 8015600:	b005      	add	sp, #20
 8015602:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015606:	9b03      	ldr	r3, [sp, #12]
 8015608:	781a      	ldrb	r2, [r3, #0]
 801560a:	2a00      	cmp	r2, #0
 801560c:	d0f6      	beq.n	80155fc <rcl_get_secure_root+0x24>
 801560e:	f104 090c 	add.w	r9, r4, #12
 8015612:	e899 0003 	ldmia.w	r9, {r0, r1}
 8015616:	e88d 0003 	stmia.w	sp, {r0, r1}
 801561a:	4618      	mov	r0, r3
 801561c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8015620:	f001 fbb2 	bl	8016d88 <rcutils_strdup>
 8015624:	4680      	mov	r8, r0
 8015626:	2800      	cmp	r0, #0
 8015628:	d0e8      	beq.n	80155fc <rcl_get_secure_root+0x24>
 801562a:	481f      	ldr	r0, [pc, #124]	; (80156a8 <rcl_get_secure_root+0xd0>)
 801562c:	9503      	str	r5, [sp, #12]
 801562e:	a903      	add	r1, sp, #12
 8015630:	f001 faba 	bl	8016ba8 <rcutils_get_env>
 8015634:	b160      	cbz	r0, 8015650 <rcl_get_secure_root+0x78>
 8015636:	2600      	movs	r6, #0
 8015638:	6863      	ldr	r3, [r4, #4]
 801563a:	6921      	ldr	r1, [r4, #16]
 801563c:	4630      	mov	r0, r6
 801563e:	4798      	blx	r3
 8015640:	4640      	mov	r0, r8
 8015642:	6863      	ldr	r3, [r4, #4]
 8015644:	6921      	ldr	r1, [r4, #16]
 8015646:	4798      	blx	r3
 8015648:	4628      	mov	r0, r5
 801564a:	b005      	add	sp, #20
 801564c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015650:	9b03      	ldr	r3, [sp, #12]
 8015652:	781e      	ldrb	r6, [r3, #0]
 8015654:	b1f6      	cbz	r6, 8015694 <rcl_get_secure_root+0xbc>
 8015656:	e899 0003 	ldmia.w	r9, {r0, r1}
 801565a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801565e:	4618      	mov	r0, r3
 8015660:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8015664:	f001 fb90 	bl	8016d88 <rcutils_strdup>
 8015668:	4606      	mov	r6, r0
 801566a:	2800      	cmp	r0, #0
 801566c:	d0e3      	beq.n	8015636 <rcl_get_secure_root+0x5e>
 801566e:	4622      	mov	r2, r4
 8015670:	4641      	mov	r1, r8
 8015672:	f7ff ff71 	bl	8015558 <exact_match_lookup>
 8015676:	4605      	mov	r5, r0
 8015678:	2d00      	cmp	r5, #0
 801567a:	d0dd      	beq.n	8015638 <rcl_get_secure_root+0x60>
 801567c:	4628      	mov	r0, r5
 801567e:	f001 fa49 	bl	8016b14 <rcutils_is_directory>
 8015682:	4607      	mov	r7, r0
 8015684:	2800      	cmp	r0, #0
 8015686:	d1d7      	bne.n	8015638 <rcl_get_secure_root+0x60>
 8015688:	4628      	mov	r0, r5
 801568a:	6863      	ldr	r3, [r4, #4]
 801568c:	6921      	ldr	r1, [r4, #16]
 801568e:	4798      	blx	r3
 8015690:	463d      	mov	r5, r7
 8015692:	e7d1      	b.n	8015638 <rcl_get_secure_root+0x60>
 8015694:	4638      	mov	r0, r7
 8015696:	4622      	mov	r2, r4
 8015698:	4641      	mov	r1, r8
 801569a:	f7ff ff5d 	bl	8015558 <exact_match_lookup>
 801569e:	4605      	mov	r5, r0
 80156a0:	e7ea      	b.n	8015678 <rcl_get_secure_root+0xa0>
 80156a2:	bf00      	nop
 80156a4:	0801bb00 	.word	0x0801bb00
 80156a8:	0801bb18 	.word	0x0801bb18

080156ac <rcl_get_security_options_from_environment>:
 80156ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156b0:	b082      	sub	sp, #8
 80156b2:	4607      	mov	r7, r0
 80156b4:	4688      	mov	r8, r1
 80156b6:	2400      	movs	r4, #0
 80156b8:	481d      	ldr	r0, [pc, #116]	; (8015730 <rcl_get_security_options_from_environment+0x84>)
 80156ba:	9401      	str	r4, [sp, #4]
 80156bc:	a901      	add	r1, sp, #4
 80156be:	4616      	mov	r6, r2
 80156c0:	f001 fa72 	bl	8016ba8 <rcutils_get_env>
 80156c4:	b120      	cbz	r0, 80156d0 <rcl_get_security_options_from_environment+0x24>
 80156c6:	2501      	movs	r5, #1
 80156c8:	4628      	mov	r0, r5
 80156ca:	b002      	add	sp, #8
 80156cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156d0:	4918      	ldr	r1, [pc, #96]	; (8015734 <rcl_get_security_options_from_environment+0x88>)
 80156d2:	4604      	mov	r4, r0
 80156d4:	9801      	ldr	r0, [sp, #4]
 80156d6:	f7ea fd83 	bl	80001e0 <strcmp>
 80156da:	4605      	mov	r5, r0
 80156dc:	b9c8      	cbnz	r0, 8015712 <rcl_get_security_options_from_environment+0x66>
 80156de:	9001      	str	r0, [sp, #4]
 80156e0:	b1ee      	cbz	r6, 801571e <rcl_get_security_options_from_environment+0x72>
 80156e2:	4815      	ldr	r0, [pc, #84]	; (8015738 <rcl_get_security_options_from_environment+0x8c>)
 80156e4:	a901      	add	r1, sp, #4
 80156e6:	f001 fa5f 	bl	8016ba8 <rcutils_get_env>
 80156ea:	2800      	cmp	r0, #0
 80156ec:	d1eb      	bne.n	80156c6 <rcl_get_security_options_from_environment+0x1a>
 80156ee:	4913      	ldr	r1, [pc, #76]	; (801573c <rcl_get_security_options_from_environment+0x90>)
 80156f0:	9801      	ldr	r0, [sp, #4]
 80156f2:	f7ea fd75 	bl	80001e0 <strcmp>
 80156f6:	fab0 f080 	clz	r0, r0
 80156fa:	0940      	lsrs	r0, r0, #5
 80156fc:	7030      	strb	r0, [r6, #0]
 80156fe:	4641      	mov	r1, r8
 8015700:	4638      	mov	r0, r7
 8015702:	f7ff ff69 	bl	80155d8 <rcl_get_secure_root>
 8015706:	b160      	cbz	r0, 8015722 <rcl_get_security_options_from_environment+0x76>
 8015708:	6070      	str	r0, [r6, #4]
 801570a:	4628      	mov	r0, r5
 801570c:	b002      	add	sp, #8
 801570e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015712:	4625      	mov	r5, r4
 8015714:	4628      	mov	r0, r5
 8015716:	7034      	strb	r4, [r6, #0]
 8015718:	b002      	add	sp, #8
 801571a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801571e:	250b      	movs	r5, #11
 8015720:	e7d2      	b.n	80156c8 <rcl_get_security_options_from_environment+0x1c>
 8015722:	7835      	ldrb	r5, [r6, #0]
 8015724:	f1a5 0501 	sub.w	r5, r5, #1
 8015728:	fab5 f585 	clz	r5, r5
 801572c:	096d      	lsrs	r5, r5, #5
 801572e:	e7cb      	b.n	80156c8 <rcl_get_security_options_from_environment+0x1c>
 8015730:	0801bab8 	.word	0x0801bab8
 8015734:	0801bacc 	.word	0x0801bacc
 8015738:	0801bad4 	.word	0x0801bad4
 801573c:	0801baec 	.word	0x0801baec

08015740 <rcl_service_get_rmw_handle>:
 8015740:	b110      	cbz	r0, 8015748 <rcl_service_get_rmw_handle+0x8>
 8015742:	6800      	ldr	r0, [r0, #0]
 8015744:	b100      	cbz	r0, 8015748 <rcl_service_get_rmw_handle+0x8>
 8015746:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8015748:	4770      	bx	lr
 801574a:	bf00      	nop

0801574c <rcl_take_request>:
 801574c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801574e:	460e      	mov	r6, r1
 8015750:	460c      	mov	r4, r1
 8015752:	4607      	mov	r7, r0
 8015754:	4694      	mov	ip, r2
 8015756:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8015758:	b08d      	sub	sp, #52	; 0x34
 801575a:	ad06      	add	r5, sp, #24
 801575c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801575e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8015762:	e885 0003 	stmia.w	r5, {r0, r1}
 8015766:	b1e7      	cbz	r7, 80157a2 <rcl_take_request+0x56>
 8015768:	683b      	ldr	r3, [r7, #0]
 801576a:	b1d3      	cbz	r3, 80157a2 <rcl_take_request+0x56>
 801576c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 801576e:	b1c0      	cbz	r0, 80157a2 <rcl_take_request+0x56>
 8015770:	4662      	mov	r2, ip
 8015772:	b30a      	cbz	r2, 80157b8 <rcl_take_request+0x6c>
 8015774:	2500      	movs	r5, #0
 8015776:	f10d 0307 	add.w	r3, sp, #7
 801577a:	a902      	add	r1, sp, #8
 801577c:	f88d 5007 	strb.w	r5, [sp, #7]
 8015780:	f002 f86e 	bl	8017860 <rmw_take_request>
 8015784:	4606      	mov	r6, r0
 8015786:	b178      	cbz	r0, 80157a8 <rcl_take_request+0x5c>
 8015788:	280a      	cmp	r0, #10
 801578a:	bf18      	it	ne
 801578c:	2601      	movne	r6, #1
 801578e:	ad06      	add	r5, sp, #24
 8015790:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015792:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015794:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015798:	e884 0003 	stmia.w	r4, {r0, r1}
 801579c:	4630      	mov	r0, r6
 801579e:	b00d      	add	sp, #52	; 0x34
 80157a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80157a2:	f44f 7616 	mov.w	r6, #600	; 0x258
 80157a6:	e7f2      	b.n	801578e <rcl_take_request+0x42>
 80157a8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80157ac:	f240 2359 	movw	r3, #601	; 0x259
 80157b0:	2a00      	cmp	r2, #0
 80157b2:	bf08      	it	eq
 80157b4:	461e      	moveq	r6, r3
 80157b6:	e7ea      	b.n	801578e <rcl_take_request+0x42>
 80157b8:	260b      	movs	r6, #11
 80157ba:	e7e8      	b.n	801578e <rcl_take_request+0x42>

080157bc <rcl_send_response>:
 80157bc:	b160      	cbz	r0, 80157d8 <rcl_send_response+0x1c>
 80157be:	6800      	ldr	r0, [r0, #0]
 80157c0:	b150      	cbz	r0, 80157d8 <rcl_send_response+0x1c>
 80157c2:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80157c4:	b140      	cbz	r0, 80157d8 <rcl_send_response+0x1c>
 80157c6:	b151      	cbz	r1, 80157de <rcl_send_response+0x22>
 80157c8:	b510      	push	{r4, lr}
 80157ca:	b152      	cbz	r2, 80157e2 <rcl_send_response+0x26>
 80157cc:	f002 f8a6 	bl	801791c <rmw_send_response>
 80157d0:	3800      	subs	r0, #0
 80157d2:	bf18      	it	ne
 80157d4:	2001      	movne	r0, #1
 80157d6:	bd10      	pop	{r4, pc}
 80157d8:	f44f 7016 	mov.w	r0, #600	; 0x258
 80157dc:	4770      	bx	lr
 80157de:	200b      	movs	r0, #11
 80157e0:	4770      	bx	lr
 80157e2:	200b      	movs	r0, #11
 80157e4:	bd10      	pop	{r4, pc}
 80157e6:	bf00      	nop

080157e8 <rcl_get_system_time>:
 80157e8:	4608      	mov	r0, r1
 80157ea:	f7fa b913 	b.w	800fa14 <rcutils_system_time_now>
 80157ee:	bf00      	nop

080157f0 <rcl_get_steady_time>:
 80157f0:	4608      	mov	r0, r1
 80157f2:	f7fa b937 	b.w	800fa64 <rcutils_steady_time_now>
 80157f6:	bf00      	nop

080157f8 <rcl_get_ros_time>:
 80157f8:	7a03      	ldrb	r3, [r0, #8]
 80157fa:	b510      	push	{r4, lr}
 80157fc:	460c      	mov	r4, r1
 80157fe:	b133      	cbz	r3, 801580e <rcl_get_ros_time+0x16>
 8015800:	2105      	movs	r1, #5
 8015802:	f001 f8e5 	bl	80169d0 <__atomic_load_8>
 8015806:	e9c4 0100 	strd	r0, r1, [r4]
 801580a:	2000      	movs	r0, #0
 801580c:	bd10      	pop	{r4, pc}
 801580e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015812:	4608      	mov	r0, r1
 8015814:	f7fa b8fe 	b.w	800fa14 <rcutils_system_time_now>

08015818 <rcl_clock_init>:
 8015818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801581c:	4606      	mov	r6, r0
 801581e:	4610      	mov	r0, r2
 8015820:	4614      	mov	r4, r2
 8015822:	460d      	mov	r5, r1
 8015824:	f7f9 ff8a 	bl	800f73c <rcutils_allocator_is_valid>
 8015828:	b128      	cbz	r0, 8015836 <rcl_clock_init+0x1e>
 801582a:	2e03      	cmp	r6, #3
 801582c:	d803      	bhi.n	8015836 <rcl_clock_init+0x1e>
 801582e:	e8df f006 	tbb	[pc, r6]
 8015832:	2c1b      	.short	0x2c1b
 8015834:	0554      	.short	0x0554
 8015836:	200b      	movs	r0, #11
 8015838:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801583c:	2d00      	cmp	r5, #0
 801583e:	d0fa      	beq.n	8015836 <rcl_clock_init+0x1e>
 8015840:	2c00      	cmp	r4, #0
 8015842:	d0f8      	beq.n	8015836 <rcl_clock_init+0x1e>
 8015844:	2600      	movs	r6, #0
 8015846:	702e      	strb	r6, [r5, #0]
 8015848:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801584a:	f105 0714 	add.w	r7, r5, #20
 801584e:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8015852:	612e      	str	r6, [r5, #16]
 8015854:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8015856:	6823      	ldr	r3, [r4, #0]
 8015858:	603b      	str	r3, [r7, #0]
 801585a:	2303      	movs	r3, #3
 801585c:	4a2b      	ldr	r2, [pc, #172]	; (801590c <rcl_clock_init+0xf4>)
 801585e:	702b      	strb	r3, [r5, #0]
 8015860:	4630      	mov	r0, r6
 8015862:	60ea      	str	r2, [r5, #12]
 8015864:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015868:	2d00      	cmp	r5, #0
 801586a:	d0e4      	beq.n	8015836 <rcl_clock_init+0x1e>
 801586c:	2600      	movs	r6, #0
 801586e:	702e      	strb	r6, [r5, #0]
 8015870:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015872:	f105 0714 	add.w	r7, r5, #20
 8015876:	e9c5 6601 	strd	r6, r6, [r5, #4]
 801587a:	e9c5 6603 	strd	r6, r6, [r5, #12]
 801587e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8015880:	6823      	ldr	r3, [r4, #0]
 8015882:	603b      	str	r3, [r7, #0]
 8015884:	4630      	mov	r0, r6
 8015886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801588a:	2d00      	cmp	r5, #0
 801588c:	d0d3      	beq.n	8015836 <rcl_clock_init+0x1e>
 801588e:	2c00      	cmp	r4, #0
 8015890:	d0d1      	beq.n	8015836 <rcl_clock_init+0x1e>
 8015892:	2600      	movs	r6, #0
 8015894:	702e      	strb	r6, [r5, #0]
 8015896:	46a4      	mov	ip, r4
 8015898:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801589c:	f105 0714 	add.w	r7, r5, #20
 80158a0:	e9c5 6601 	strd	r6, r6, [r5, #4]
 80158a4:	e9c5 6603 	strd	r6, r6, [r5, #12]
 80158a8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80158aa:	f8dc 3000 	ldr.w	r3, [ip]
 80158ae:	603b      	str	r3, [r7, #0]
 80158b0:	6921      	ldr	r1, [r4, #16]
 80158b2:	6823      	ldr	r3, [r4, #0]
 80158b4:	2010      	movs	r0, #16
 80158b6:	4798      	blx	r3
 80158b8:	4603      	mov	r3, r0
 80158ba:	6128      	str	r0, [r5, #16]
 80158bc:	b318      	cbz	r0, 8015906 <rcl_clock_init+0xee>
 80158be:	f04f 0800 	mov.w	r8, #0
 80158c2:	f04f 0900 	mov.w	r9, #0
 80158c6:	7206      	strb	r6, [r0, #8]
 80158c8:	e9c3 8900 	strd	r8, r9, [r3]
 80158cc:	2301      	movs	r3, #1
 80158ce:	4a10      	ldr	r2, [pc, #64]	; (8015910 <rcl_clock_init+0xf8>)
 80158d0:	702b      	strb	r3, [r5, #0]
 80158d2:	4630      	mov	r0, r6
 80158d4:	60ea      	str	r2, [r5, #12]
 80158d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80158da:	2d00      	cmp	r5, #0
 80158dc:	d0ab      	beq.n	8015836 <rcl_clock_init+0x1e>
 80158de:	2c00      	cmp	r4, #0
 80158e0:	d0a9      	beq.n	8015836 <rcl_clock_init+0x1e>
 80158e2:	2600      	movs	r6, #0
 80158e4:	702e      	strb	r6, [r5, #0]
 80158e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80158e8:	f105 0714 	add.w	r7, r5, #20
 80158ec:	e9c5 6601 	strd	r6, r6, [r5, #4]
 80158f0:	612e      	str	r6, [r5, #16]
 80158f2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80158f4:	6823      	ldr	r3, [r4, #0]
 80158f6:	603b      	str	r3, [r7, #0]
 80158f8:	2302      	movs	r3, #2
 80158fa:	4a06      	ldr	r2, [pc, #24]	; (8015914 <rcl_clock_init+0xfc>)
 80158fc:	702b      	strb	r3, [r5, #0]
 80158fe:	4630      	mov	r0, r6
 8015900:	60ea      	str	r2, [r5, #12]
 8015902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015906:	200a      	movs	r0, #10
 8015908:	e796      	b.n	8015838 <rcl_clock_init+0x20>
 801590a:	bf00      	nop
 801590c:	080157f1 	.word	0x080157f1
 8015910:	080157f9 	.word	0x080157f9
 8015914:	080157e9 	.word	0x080157e9

08015918 <rcl_clock_get_now>:
 8015918:	b140      	cbz	r0, 801592c <rcl_clock_get_now+0x14>
 801591a:	b139      	cbz	r1, 801592c <rcl_clock_get_now+0x14>
 801591c:	7803      	ldrb	r3, [r0, #0]
 801591e:	b11b      	cbz	r3, 8015928 <rcl_clock_get_now+0x10>
 8015920:	68c3      	ldr	r3, [r0, #12]
 8015922:	b10b      	cbz	r3, 8015928 <rcl_clock_get_now+0x10>
 8015924:	6900      	ldr	r0, [r0, #16]
 8015926:	4718      	bx	r3
 8015928:	2001      	movs	r0, #1
 801592a:	4770      	bx	lr
 801592c:	200b      	movs	r0, #11
 801592e:	4770      	bx	lr

08015930 <rcl_timer_call>:
 8015930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015934:	b08b      	sub	sp, #44	; 0x2c
 8015936:	2800      	cmp	r0, #0
 8015938:	d06e      	beq.n	8015a18 <rcl_timer_call+0xe8>
 801593a:	6803      	ldr	r3, [r0, #0]
 801593c:	f3bf 8f5b 	dmb	ish
 8015940:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015944:	f3bf 8f5b 	dmb	ish
 8015948:	4604      	mov	r4, r0
 801594a:	2b00      	cmp	r3, #0
 801594c:	d159      	bne.n	8015a02 <rcl_timer_call+0xd2>
 801594e:	6803      	ldr	r3, [r0, #0]
 8015950:	a908      	add	r1, sp, #32
 8015952:	6818      	ldr	r0, [r3, #0]
 8015954:	f7ff ffe0 	bl	8015918 <rcl_clock_get_now>
 8015958:	4605      	mov	r5, r0
 801595a:	2800      	cmp	r0, #0
 801595c:	d14d      	bne.n	80159fa <rcl_timer_call+0xca>
 801595e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015962:	2a00      	cmp	r2, #0
 8015964:	f173 0100 	sbcs.w	r1, r3, #0
 8015968:	db51      	blt.n	8015a0e <rcl_timer_call+0xde>
 801596a:	6820      	ldr	r0, [r4, #0]
 801596c:	2605      	movs	r6, #5
 801596e:	9600      	str	r6, [sp, #0]
 8015970:	3020      	adds	r0, #32
 8015972:	f001 f895 	bl	8016aa0 <__atomic_exchange_8>
 8015976:	6822      	ldr	r2, [r4, #0]
 8015978:	f3bf 8f5b 	dmb	ish
 801597c:	4682      	mov	sl, r0
 801597e:	f8d2 b010 	ldr.w	fp, [r2, #16]
 8015982:	f3bf 8f5b 	dmb	ish
 8015986:	6820      	ldr	r0, [r4, #0]
 8015988:	460b      	mov	r3, r1
 801598a:	3028      	adds	r0, #40	; 0x28
 801598c:	4631      	mov	r1, r6
 801598e:	9305      	str	r3, [sp, #20]
 8015990:	f001 f81e 	bl	80169d0 <__atomic_load_8>
 8015994:	4603      	mov	r3, r0
 8015996:	6820      	ldr	r0, [r4, #0]
 8015998:	460a      	mov	r2, r1
 801599a:	3018      	adds	r0, #24
 801599c:	4631      	mov	r1, r6
 801599e:	e9cd 2303 	strd	r2, r3, [sp, #12]
 80159a2:	f001 f815 	bl	80169d0 <__atomic_load_8>
 80159a6:	9b04      	ldr	r3, [sp, #16]
 80159a8:	9a03      	ldr	r2, [sp, #12]
 80159aa:	4606      	mov	r6, r0
 80159ac:	460f      	mov	r7, r1
 80159ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80159b2:	eb13 0806 	adds.w	r8, r3, r6
 80159b6:	eb42 0907 	adc.w	r9, r2, r7
 80159ba:	4580      	cmp	r8, r0
 80159bc:	eb79 0301 	sbcs.w	r3, r9, r1
 80159c0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80159c4:	460a      	mov	r2, r1
 80159c6:	da04      	bge.n	80159d2 <rcl_timer_call+0xa2>
 80159c8:	ea56 0307 	orrs.w	r3, r6, r7
 80159cc:	d129      	bne.n	8015a22 <rcl_timer_call+0xf2>
 80159ce:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80159d2:	6820      	ldr	r0, [r4, #0]
 80159d4:	2105      	movs	r1, #5
 80159d6:	4642      	mov	r2, r8
 80159d8:	464b      	mov	r3, r9
 80159da:	3028      	adds	r0, #40	; 0x28
 80159dc:	9100      	str	r1, [sp, #0]
 80159de:	f001 f82b 	bl	8016a38 <__atomic_store_8>
 80159e2:	f1bb 0f00 	cmp.w	fp, #0
 80159e6:	d008      	beq.n	80159fa <rcl_timer_call+0xca>
 80159e8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80159ec:	9905      	ldr	r1, [sp, #20]
 80159ee:	ebb2 020a 	subs.w	r2, r2, sl
 80159f2:	4620      	mov	r0, r4
 80159f4:	eb63 0301 	sbc.w	r3, r3, r1
 80159f8:	47d8      	blx	fp
 80159fa:	4628      	mov	r0, r5
 80159fc:	b00b      	add	sp, #44	; 0x2c
 80159fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a02:	f240 3521 	movw	r5, #801	; 0x321
 8015a06:	4628      	mov	r0, r5
 8015a08:	b00b      	add	sp, #44	; 0x2c
 8015a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a0e:	2501      	movs	r5, #1
 8015a10:	4628      	mov	r0, r5
 8015a12:	b00b      	add	sp, #44	; 0x2c
 8015a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a18:	250b      	movs	r5, #11
 8015a1a:	4628      	mov	r0, r5
 8015a1c:	b00b      	add	sp, #44	; 0x2c
 8015a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a22:	ebb0 0008 	subs.w	r0, r0, r8
 8015a26:	eb62 0109 	sbc.w	r1, r2, r9
 8015a2a:	f110 30ff 	adds.w	r0, r0, #4294967295
 8015a2e:	463b      	mov	r3, r7
 8015a30:	f141 31ff 	adc.w	r1, r1, #4294967295
 8015a34:	4632      	mov	r2, r6
 8015a36:	f7eb f8e1 	bl	8000bfc <__aeabi_ldivmod>
 8015a3a:	1c43      	adds	r3, r0, #1
 8015a3c:	f141 0100 	adc.w	r1, r1, #0
 8015a40:	fb00 7007 	mla	r0, r0, r7, r7
 8015a44:	fb06 0001 	mla	r0, r6, r1, r0
 8015a48:	fba3 6706 	umull	r6, r7, r3, r6
 8015a4c:	4407      	add	r7, r0
 8015a4e:	eb18 0806 	adds.w	r8, r8, r6
 8015a52:	eb49 0907 	adc.w	r9, r9, r7
 8015a56:	e7bc      	b.n	80159d2 <rcl_timer_call+0xa2>

08015a58 <rcl_timer_is_ready>:
 8015a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a5c:	b082      	sub	sp, #8
 8015a5e:	b310      	cbz	r0, 8015aa6 <rcl_timer_is_ready+0x4e>
 8015a60:	4688      	mov	r8, r1
 8015a62:	b301      	cbz	r1, 8015aa6 <rcl_timer_is_ready+0x4e>
 8015a64:	6803      	ldr	r3, [r0, #0]
 8015a66:	4604      	mov	r4, r0
 8015a68:	4669      	mov	r1, sp
 8015a6a:	6818      	ldr	r0, [r3, #0]
 8015a6c:	f7ff ff54 	bl	8015918 <rcl_clock_get_now>
 8015a70:	4605      	mov	r5, r0
 8015a72:	b118      	cbz	r0, 8015a7c <rcl_timer_is_ready+0x24>
 8015a74:	4628      	mov	r0, r5
 8015a76:	b002      	add	sp, #8
 8015a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a7c:	6820      	ldr	r0, [r4, #0]
 8015a7e:	2105      	movs	r1, #5
 8015a80:	3028      	adds	r0, #40	; 0x28
 8015a82:	f000 ffa5 	bl	80169d0 <__atomic_load_8>
 8015a86:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015a8a:	1ac6      	subs	r6, r0, r3
 8015a8c:	eb61 0702 	sbc.w	r7, r1, r2
 8015a90:	2e01      	cmp	r6, #1
 8015a92:	f177 0300 	sbcs.w	r3, r7, #0
 8015a96:	db0b      	blt.n	8015ab0 <rcl_timer_is_ready+0x58>
 8015a98:	462b      	mov	r3, r5
 8015a9a:	4628      	mov	r0, r5
 8015a9c:	f888 3000 	strb.w	r3, [r8]
 8015aa0:	b002      	add	sp, #8
 8015aa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015aa6:	250b      	movs	r5, #11
 8015aa8:	4628      	mov	r0, r5
 8015aaa:	b002      	add	sp, #8
 8015aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ab0:	6823      	ldr	r3, [r4, #0]
 8015ab2:	f3bf 8f5b 	dmb	ish
 8015ab6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015aba:	f3bf 8f5b 	dmb	ish
 8015abe:	fab3 f383 	clz	r3, r3
 8015ac2:	095b      	lsrs	r3, r3, #5
 8015ac4:	e7e9      	b.n	8015a9a <rcl_timer_is_ready+0x42>
 8015ac6:	bf00      	nop

08015ac8 <rcl_timer_get_time_until_next_call>:
 8015ac8:	b570      	push	{r4, r5, r6, lr}
 8015aca:	b082      	sub	sp, #8
 8015acc:	b1d8      	cbz	r0, 8015b06 <rcl_timer_get_time_until_next_call+0x3e>
 8015ace:	460d      	mov	r5, r1
 8015ad0:	b1c9      	cbz	r1, 8015b06 <rcl_timer_get_time_until_next_call+0x3e>
 8015ad2:	6803      	ldr	r3, [r0, #0]
 8015ad4:	4604      	mov	r4, r0
 8015ad6:	4669      	mov	r1, sp
 8015ad8:	6818      	ldr	r0, [r3, #0]
 8015ada:	f7ff ff1d 	bl	8015918 <rcl_clock_get_now>
 8015ade:	4606      	mov	r6, r0
 8015ae0:	b110      	cbz	r0, 8015ae8 <rcl_timer_get_time_until_next_call+0x20>
 8015ae2:	4630      	mov	r0, r6
 8015ae4:	b002      	add	sp, #8
 8015ae6:	bd70      	pop	{r4, r5, r6, pc}
 8015ae8:	6820      	ldr	r0, [r4, #0]
 8015aea:	2105      	movs	r1, #5
 8015aec:	3028      	adds	r0, #40	; 0x28
 8015aee:	f000 ff6f 	bl	80169d0 <__atomic_load_8>
 8015af2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015af6:	1ac0      	subs	r0, r0, r3
 8015af8:	eb61 0102 	sbc.w	r1, r1, r2
 8015afc:	e9c5 0100 	strd	r0, r1, [r5]
 8015b00:	4630      	mov	r0, r6
 8015b02:	b002      	add	sp, #8
 8015b04:	bd70      	pop	{r4, r5, r6, pc}
 8015b06:	260b      	movs	r6, #11
 8015b08:	4630      	mov	r0, r6
 8015b0a:	b002      	add	sp, #8
 8015b0c:	bd70      	pop	{r4, r5, r6, pc}
 8015b0e:	bf00      	nop

08015b10 <rcl_timer_is_canceled>:
 8015b10:	b168      	cbz	r0, 8015b2e <rcl_timer_is_canceled+0x1e>
 8015b12:	b161      	cbz	r1, 8015b2e <rcl_timer_is_canceled+0x1e>
 8015b14:	6803      	ldr	r3, [r0, #0]
 8015b16:	f3bf 8f5b 	dmb	ish
 8015b1a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015b1e:	f3bf 8f5b 	dmb	ish
 8015b22:	3b00      	subs	r3, #0
 8015b24:	bf18      	it	ne
 8015b26:	2301      	movne	r3, #1
 8015b28:	700b      	strb	r3, [r1, #0]
 8015b2a:	2000      	movs	r0, #0
 8015b2c:	4770      	bx	lr
 8015b2e:	200b      	movs	r0, #11
 8015b30:	4770      	bx	lr
 8015b32:	bf00      	nop

08015b34 <rcl_timer_get_guard_condition>:
 8015b34:	b130      	cbz	r0, 8015b44 <rcl_timer_get_guard_condition+0x10>
 8015b36:	6800      	ldr	r0, [r0, #0]
 8015b38:	b120      	cbz	r0, 8015b44 <rcl_timer_get_guard_condition+0x10>
 8015b3a:	68c3      	ldr	r3, [r0, #12]
 8015b3c:	b10b      	cbz	r3, 8015b42 <rcl_timer_get_guard_condition+0xe>
 8015b3e:	3008      	adds	r0, #8
 8015b40:	4770      	bx	lr
 8015b42:	4618      	mov	r0, r3
 8015b44:	4770      	bx	lr
 8015b46:	bf00      	nop

08015b48 <rcl_validate_enclave_name_with_size>:
 8015b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015b4a:	b0c3      	sub	sp, #268	; 0x10c
 8015b4c:	b1d0      	cbz	r0, 8015b84 <rcl_validate_enclave_name_with_size+0x3c>
 8015b4e:	4615      	mov	r5, r2
 8015b50:	b1c2      	cbz	r2, 8015b84 <rcl_validate_enclave_name_with_size+0x3c>
 8015b52:	461f      	mov	r7, r3
 8015b54:	466a      	mov	r2, sp
 8015b56:	ab01      	add	r3, sp, #4
 8015b58:	460e      	mov	r6, r1
 8015b5a:	f001 f96f 	bl	8016e3c <rmw_validate_namespace_with_size>
 8015b5e:	4604      	mov	r4, r0
 8015b60:	b9e0      	cbnz	r0, 8015b9c <rcl_validate_enclave_name_with_size+0x54>
 8015b62:	9b00      	ldr	r3, [sp, #0]
 8015b64:	b923      	cbnz	r3, 8015b70 <rcl_validate_enclave_name_with_size+0x28>
 8015b66:	2300      	movs	r3, #0
 8015b68:	602b      	str	r3, [r5, #0]
 8015b6a:	4620      	mov	r0, r4
 8015b6c:	b043      	add	sp, #268	; 0x10c
 8015b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b70:	2b07      	cmp	r3, #7
 8015b72:	d00b      	beq.n	8015b8c <rcl_validate_enclave_name_with_size+0x44>
 8015b74:	1e5a      	subs	r2, r3, #1
 8015b76:	2a05      	cmp	r2, #5
 8015b78:	d82e      	bhi.n	8015bd8 <rcl_validate_enclave_name_with_size+0x90>
 8015b7a:	e8df f002 	tbb	[pc, r2]
 8015b7e:	211e      	.short	0x211e
 8015b80:	152a2724 	.word	0x152a2724
 8015b84:	240b      	movs	r4, #11
 8015b86:	4620      	mov	r0, r4
 8015b88:	b043      	add	sp, #268	; 0x10c
 8015b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b8c:	2eff      	cmp	r6, #255	; 0xff
 8015b8e:	d9ea      	bls.n	8015b66 <rcl_validate_enclave_name_with_size+0x1e>
 8015b90:	602b      	str	r3, [r5, #0]
 8015b92:	2f00      	cmp	r7, #0
 8015b94:	d0e9      	beq.n	8015b6a <rcl_validate_enclave_name_with_size+0x22>
 8015b96:	23fe      	movs	r3, #254	; 0xfe
 8015b98:	603b      	str	r3, [r7, #0]
 8015b9a:	e7e6      	b.n	8015b6a <rcl_validate_enclave_name_with_size+0x22>
 8015b9c:	f7fe fefc 	bl	8014998 <rcl_convert_rmw_ret_to_rcl_ret>
 8015ba0:	4604      	mov	r4, r0
 8015ba2:	4620      	mov	r0, r4
 8015ba4:	b043      	add	sp, #268	; 0x10c
 8015ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ba8:	2306      	movs	r3, #6
 8015baa:	602b      	str	r3, [r5, #0]
 8015bac:	2f00      	cmp	r7, #0
 8015bae:	d0dc      	beq.n	8015b6a <rcl_validate_enclave_name_with_size+0x22>
 8015bb0:	9b01      	ldr	r3, [sp, #4]
 8015bb2:	603b      	str	r3, [r7, #0]
 8015bb4:	4620      	mov	r0, r4
 8015bb6:	b043      	add	sp, #268	; 0x10c
 8015bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015bba:	2301      	movs	r3, #1
 8015bbc:	602b      	str	r3, [r5, #0]
 8015bbe:	e7f5      	b.n	8015bac <rcl_validate_enclave_name_with_size+0x64>
 8015bc0:	2302      	movs	r3, #2
 8015bc2:	602b      	str	r3, [r5, #0]
 8015bc4:	e7f2      	b.n	8015bac <rcl_validate_enclave_name_with_size+0x64>
 8015bc6:	2303      	movs	r3, #3
 8015bc8:	602b      	str	r3, [r5, #0]
 8015bca:	e7ef      	b.n	8015bac <rcl_validate_enclave_name_with_size+0x64>
 8015bcc:	2304      	movs	r3, #4
 8015bce:	602b      	str	r3, [r5, #0]
 8015bd0:	e7ec      	b.n	8015bac <rcl_validate_enclave_name_with_size+0x64>
 8015bd2:	2305      	movs	r3, #5
 8015bd4:	602b      	str	r3, [r5, #0]
 8015bd6:	e7e9      	b.n	8015bac <rcl_validate_enclave_name_with_size+0x64>
 8015bd8:	4a03      	ldr	r2, [pc, #12]	; (8015be8 <rcl_validate_enclave_name_with_size+0xa0>)
 8015bda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8015bde:	a802      	add	r0, sp, #8
 8015be0:	f001 f8a6 	bl	8016d30 <rcutils_snprintf>
 8015be4:	2401      	movs	r4, #1
 8015be6:	e7c0      	b.n	8015b6a <rcl_validate_enclave_name_with_size+0x22>
 8015be8:	0801bb38 	.word	0x0801bb38

08015bec <rcl_validate_enclave_name>:
 8015bec:	b168      	cbz	r0, 8015c0a <rcl_validate_enclave_name+0x1e>
 8015bee:	b570      	push	{r4, r5, r6, lr}
 8015bf0:	460d      	mov	r5, r1
 8015bf2:	4616      	mov	r6, r2
 8015bf4:	4604      	mov	r4, r0
 8015bf6:	f7ea fafd 	bl	80001f4 <strlen>
 8015bfa:	4633      	mov	r3, r6
 8015bfc:	4601      	mov	r1, r0
 8015bfe:	462a      	mov	r2, r5
 8015c00:	4620      	mov	r0, r4
 8015c02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015c06:	f7ff bf9f 	b.w	8015b48 <rcl_validate_enclave_name_with_size>
 8015c0a:	200b      	movs	r0, #11
 8015c0c:	4770      	bx	lr
 8015c0e:	bf00      	nop

08015c10 <rcl_validate_topic_name>:
 8015c10:	2800      	cmp	r0, #0
 8015c12:	f000 808b 	beq.w	8015d2c <rcl_validate_topic_name+0x11c>
 8015c16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015c1a:	460e      	mov	r6, r1
 8015c1c:	2900      	cmp	r1, #0
 8015c1e:	f000 808c 	beq.w	8015d3a <rcl_validate_topic_name+0x12a>
 8015c22:	4617      	mov	r7, r2
 8015c24:	4605      	mov	r5, r0
 8015c26:	f7ea fae5 	bl	80001f4 <strlen>
 8015c2a:	b1b0      	cbz	r0, 8015c5a <rcl_validate_topic_name+0x4a>
 8015c2c:	f895 9000 	ldrb.w	r9, [r5]
 8015c30:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 8015de0 <rcl_validate_topic_name+0x1d0>
 8015c34:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8015c38:	f013 0304 	ands.w	r3, r3, #4
 8015c3c:	d178      	bne.n	8015d30 <rcl_validate_topic_name+0x120>
 8015c3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8015c42:	f815 2008 	ldrb.w	r2, [r5, r8]
 8015c46:	2a2f      	cmp	r2, #47	; 0x2f
 8015c48:	d10e      	bne.n	8015c68 <rcl_validate_topic_name+0x58>
 8015c4a:	2202      	movs	r2, #2
 8015c4c:	6032      	str	r2, [r6, #0]
 8015c4e:	b36f      	cbz	r7, 8015cac <rcl_validate_topic_name+0x9c>
 8015c50:	f8c7 8000 	str.w	r8, [r7]
 8015c54:	4618      	mov	r0, r3
 8015c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015c5a:	2301      	movs	r3, #1
 8015c5c:	6033      	str	r3, [r6, #0]
 8015c5e:	b32f      	cbz	r7, 8015cac <rcl_validate_topic_name+0x9c>
 8015c60:	2000      	movs	r0, #0
 8015c62:	6038      	str	r0, [r7, #0]
 8015c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015c68:	461c      	mov	r4, r3
 8015c6a:	4619      	mov	r1, r3
 8015c6c:	f105 3aff 	add.w	sl, r5, #4294967295
 8015c70:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8015c74:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8015c78:	f1be 0f09 	cmp.w	lr, #9
 8015c7c:	d946      	bls.n	8015d0c <rcl_validate_topic_name+0xfc>
 8015c7e:	f022 0e20 	bic.w	lr, r2, #32
 8015c82:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 8015c86:	f1be 0f19 	cmp.w	lr, #25
 8015c8a:	d93f      	bls.n	8015d0c <rcl_validate_topic_name+0xfc>
 8015c8c:	2a5f      	cmp	r2, #95	; 0x5f
 8015c8e:	d014      	beq.n	8015cba <rcl_validate_topic_name+0xaa>
 8015c90:	2a2f      	cmp	r2, #47	; 0x2f
 8015c92:	d05b      	beq.n	8015d4c <rcl_validate_topic_name+0x13c>
 8015c94:	2a7e      	cmp	r2, #126	; 0x7e
 8015c96:	d052      	beq.n	8015d3e <rcl_validate_topic_name+0x12e>
 8015c98:	2a7b      	cmp	r2, #123	; 0x7b
 8015c9a:	d00a      	beq.n	8015cb2 <rcl_validate_topic_name+0xa2>
 8015c9c:	2a7d      	cmp	r2, #125	; 0x7d
 8015c9e:	d16f      	bne.n	8015d80 <rcl_validate_topic_name+0x170>
 8015ca0:	2c00      	cmp	r4, #0
 8015ca2:	d15e      	bne.n	8015d62 <rcl_validate_topic_name+0x152>
 8015ca4:	2305      	movs	r3, #5
 8015ca6:	6033      	str	r3, [r6, #0]
 8015ca8:	b107      	cbz	r7, 8015cac <rcl_validate_topic_name+0x9c>
 8015caa:	6039      	str	r1, [r7, #0]
 8015cac:	2000      	movs	r0, #0
 8015cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015cb2:	2c00      	cmp	r4, #0
 8015cb4:	d14c      	bne.n	8015d50 <rcl_validate_topic_name+0x140>
 8015cb6:	460b      	mov	r3, r1
 8015cb8:	2401      	movs	r4, #1
 8015cba:	3101      	adds	r1, #1
 8015cbc:	4288      	cmp	r0, r1
 8015cbe:	d1d7      	bne.n	8015c70 <rcl_validate_topic_name+0x60>
 8015cc0:	2c00      	cmp	r4, #0
 8015cc2:	d156      	bne.n	8015d72 <rcl_validate_topic_name+0x162>
 8015cc4:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 8015cc8:	4620      	mov	r0, r4
 8015cca:	d061      	beq.n	8015d90 <rcl_validate_topic_name+0x180>
 8015ccc:	f108 0e01 	add.w	lr, r8, #1
 8015cd0:	e007      	b.n	8015ce2 <rcl_validate_topic_name+0xd2>
 8015cd2:	2801      	cmp	r0, #1
 8015cd4:	d047      	beq.n	8015d66 <rcl_validate_topic_name+0x156>
 8015cd6:	461a      	mov	r2, r3
 8015cd8:	4291      	cmp	r1, r2
 8015cda:	4618      	mov	r0, r3
 8015cdc:	f105 0501 	add.w	r5, r5, #1
 8015ce0:	d944      	bls.n	8015d6c <rcl_validate_topic_name+0x15c>
 8015ce2:	4580      	cmp	r8, r0
 8015ce4:	f100 0301 	add.w	r3, r0, #1
 8015ce8:	d037      	beq.n	8015d5a <rcl_validate_topic_name+0x14a>
 8015cea:	782a      	ldrb	r2, [r5, #0]
 8015cec:	2a2f      	cmp	r2, #47	; 0x2f
 8015cee:	d1f0      	bne.n	8015cd2 <rcl_validate_topic_name+0xc2>
 8015cf0:	786b      	ldrb	r3, [r5, #1]
 8015cf2:	f81c 4003 	ldrb.w	r4, [ip, r3]
 8015cf6:	1c43      	adds	r3, r0, #1
 8015cf8:	0760      	lsls	r0, r4, #29
 8015cfa:	461a      	mov	r2, r3
 8015cfc:	d5ec      	bpl.n	8015cd8 <rcl_validate_topic_name+0xc8>
 8015cfe:	2304      	movs	r3, #4
 8015d00:	6033      	str	r3, [r6, #0]
 8015d02:	2f00      	cmp	r7, #0
 8015d04:	d0d2      	beq.n	8015cac <rcl_validate_topic_name+0x9c>
 8015d06:	603a      	str	r2, [r7, #0]
 8015d08:	2000      	movs	r0, #0
 8015d0a:	e7ab      	b.n	8015c64 <rcl_validate_topic_name+0x54>
 8015d0c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8015d10:	0752      	lsls	r2, r2, #29
 8015d12:	d5d2      	bpl.n	8015cba <rcl_validate_topic_name+0xaa>
 8015d14:	2c00      	cmp	r4, #0
 8015d16:	d0d0      	beq.n	8015cba <rcl_validate_topic_name+0xaa>
 8015d18:	2900      	cmp	r1, #0
 8015d1a:	d0ce      	beq.n	8015cba <rcl_validate_topic_name+0xaa>
 8015d1c:	1e4a      	subs	r2, r1, #1
 8015d1e:	429a      	cmp	r2, r3
 8015d20:	d1cb      	bne.n	8015cba <rcl_validate_topic_name+0xaa>
 8015d22:	2309      	movs	r3, #9
 8015d24:	6033      	str	r3, [r6, #0]
 8015d26:	2f00      	cmp	r7, #0
 8015d28:	d1bf      	bne.n	8015caa <rcl_validate_topic_name+0x9a>
 8015d2a:	e7bf      	b.n	8015cac <rcl_validate_topic_name+0x9c>
 8015d2c:	200b      	movs	r0, #11
 8015d2e:	4770      	bx	lr
 8015d30:	2304      	movs	r3, #4
 8015d32:	6033      	str	r3, [r6, #0]
 8015d34:	2f00      	cmp	r7, #0
 8015d36:	d193      	bne.n	8015c60 <rcl_validate_topic_name+0x50>
 8015d38:	e7b8      	b.n	8015cac <rcl_validate_topic_name+0x9c>
 8015d3a:	200b      	movs	r0, #11
 8015d3c:	e792      	b.n	8015c64 <rcl_validate_topic_name+0x54>
 8015d3e:	2900      	cmp	r1, #0
 8015d40:	d0bb      	beq.n	8015cba <rcl_validate_topic_name+0xaa>
 8015d42:	2306      	movs	r3, #6
 8015d44:	6033      	str	r3, [r6, #0]
 8015d46:	2f00      	cmp	r7, #0
 8015d48:	d1af      	bne.n	8015caa <rcl_validate_topic_name+0x9a>
 8015d4a:	e7af      	b.n	8015cac <rcl_validate_topic_name+0x9c>
 8015d4c:	2c00      	cmp	r4, #0
 8015d4e:	d0b4      	beq.n	8015cba <rcl_validate_topic_name+0xaa>
 8015d50:	2308      	movs	r3, #8
 8015d52:	6033      	str	r3, [r6, #0]
 8015d54:	2f00      	cmp	r7, #0
 8015d56:	d1a8      	bne.n	8015caa <rcl_validate_topic_name+0x9a>
 8015d58:	e7a8      	b.n	8015cac <rcl_validate_topic_name+0x9c>
 8015d5a:	4672      	mov	r2, lr
 8015d5c:	f108 0301 	add.w	r3, r8, #1
 8015d60:	e7ba      	b.n	8015cd8 <rcl_validate_topic_name+0xc8>
 8015d62:	2400      	movs	r4, #0
 8015d64:	e7a9      	b.n	8015cba <rcl_validate_topic_name+0xaa>
 8015d66:	2202      	movs	r2, #2
 8015d68:	4613      	mov	r3, r2
 8015d6a:	e7b5      	b.n	8015cd8 <rcl_validate_topic_name+0xc8>
 8015d6c:	2000      	movs	r0, #0
 8015d6e:	6030      	str	r0, [r6, #0]
 8015d70:	e778      	b.n	8015c64 <rcl_validate_topic_name+0x54>
 8015d72:	2205      	movs	r2, #5
 8015d74:	6032      	str	r2, [r6, #0]
 8015d76:	2f00      	cmp	r7, #0
 8015d78:	d098      	beq.n	8015cac <rcl_validate_topic_name+0x9c>
 8015d7a:	603b      	str	r3, [r7, #0]
 8015d7c:	2000      	movs	r0, #0
 8015d7e:	e771      	b.n	8015c64 <rcl_validate_topic_name+0x54>
 8015d80:	2c00      	cmp	r4, #0
 8015d82:	bf14      	ite	ne
 8015d84:	2308      	movne	r3, #8
 8015d86:	2303      	moveq	r3, #3
 8015d88:	6033      	str	r3, [r6, #0]
 8015d8a:	2f00      	cmp	r7, #0
 8015d8c:	d18d      	bne.n	8015caa <rcl_validate_topic_name+0x9a>
 8015d8e:	e78d      	b.n	8015cac <rcl_validate_topic_name+0x9c>
 8015d90:	f108 0401 	add.w	r4, r8, #1
 8015d94:	e007      	b.n	8015da6 <rcl_validate_topic_name+0x196>
 8015d96:	2801      	cmp	r0, #1
 8015d98:	d019      	beq.n	8015dce <rcl_validate_topic_name+0x1be>
 8015d9a:	461a      	mov	r2, r3
 8015d9c:	4291      	cmp	r1, r2
 8015d9e:	4618      	mov	r0, r3
 8015da0:	f105 0501 	add.w	r5, r5, #1
 8015da4:	d9e2      	bls.n	8015d6c <rcl_validate_topic_name+0x15c>
 8015da6:	4580      	cmp	r8, r0
 8015da8:	f100 0301 	add.w	r3, r0, #1
 8015dac:	d00b      	beq.n	8015dc6 <rcl_validate_topic_name+0x1b6>
 8015dae:	782a      	ldrb	r2, [r5, #0]
 8015db0:	2a2f      	cmp	r2, #47	; 0x2f
 8015db2:	d1f0      	bne.n	8015d96 <rcl_validate_topic_name+0x186>
 8015db4:	786b      	ldrb	r3, [r5, #1]
 8015db6:	f81c e003 	ldrb.w	lr, [ip, r3]
 8015dba:	1c43      	adds	r3, r0, #1
 8015dbc:	f01e 0f04 	tst.w	lr, #4
 8015dc0:	461a      	mov	r2, r3
 8015dc2:	d0eb      	beq.n	8015d9c <rcl_validate_topic_name+0x18c>
 8015dc4:	e79b      	b.n	8015cfe <rcl_validate_topic_name+0xee>
 8015dc6:	4622      	mov	r2, r4
 8015dc8:	f108 0301 	add.w	r3, r8, #1
 8015dcc:	e7e6      	b.n	8015d9c <rcl_validate_topic_name+0x18c>
 8015dce:	2307      	movs	r3, #7
 8015dd0:	6033      	str	r3, [r6, #0]
 8015dd2:	2f00      	cmp	r7, #0
 8015dd4:	f43f af6a 	beq.w	8015cac <rcl_validate_topic_name+0x9c>
 8015dd8:	6038      	str	r0, [r7, #0]
 8015dda:	2000      	movs	r0, #0
 8015ddc:	e742      	b.n	8015c64 <rcl_validate_topic_name+0x54>
 8015dde:	bf00      	nop
 8015de0:	0801c1c0 	.word	0x0801c1c0

08015de4 <rcl_get_zero_initialized_wait_set>:
 8015de4:	b470      	push	{r4, r5, r6}
 8015de6:	4d07      	ldr	r5, [pc, #28]	; (8015e04 <rcl_get_zero_initialized_wait_set+0x20>)
 8015de8:	4606      	mov	r6, r0
 8015dea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015dec:	4634      	mov	r4, r6
 8015dee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015df0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015df2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015df4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015df6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015df8:	682b      	ldr	r3, [r5, #0]
 8015dfa:	6023      	str	r3, [r4, #0]
 8015dfc:	4630      	mov	r0, r6
 8015dfe:	bc70      	pop	{r4, r5, r6}
 8015e00:	4770      	bx	lr
 8015e02:	bf00      	nop
 8015e04:	0801bb98 	.word	0x0801bb98

08015e08 <rcl_wait_set_is_valid>:
 8015e08:	b118      	cbz	r0, 8015e12 <rcl_wait_set_is_valid+0xa>
 8015e0a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8015e0c:	3800      	subs	r0, #0
 8015e0e:	bf18      	it	ne
 8015e10:	2001      	movne	r0, #1
 8015e12:	4770      	bx	lr

08015e14 <rcl_wait_set_fini>:
 8015e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e18:	b082      	sub	sp, #8
 8015e1a:	2800      	cmp	r0, #0
 8015e1c:	f000 8095 	beq.w	8015f4a <rcl_wait_set_fini+0x136>
 8015e20:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8015e22:	4604      	mov	r4, r0
 8015e24:	2e00      	cmp	r6, #0
 8015e26:	f000 808c 	beq.w	8015f42 <rcl_wait_set_fini+0x12e>
 8015e2a:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8015e2c:	f002 f806 	bl	8017e3c <rmw_destroy_wait_set>
 8015e30:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015e32:	1e06      	subs	r6, r0, #0
 8015e34:	bf18      	it	ne
 8015e36:	f44f 7661 	movne.w	r6, #900	; 0x384
 8015e3a:	2d00      	cmp	r5, #0
 8015e3c:	f000 8081 	beq.w	8015f42 <rcl_wait_set_fini+0x12e>
 8015e40:	6820      	ldr	r0, [r4, #0]
 8015e42:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8015e46:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8015e48:	2700      	movs	r7, #0
 8015e4a:	6067      	str	r7, [r4, #4]
 8015e4c:	602f      	str	r7, [r5, #0]
 8015e4e:	b120      	cbz	r0, 8015e5a <rcl_wait_set_fini+0x46>
 8015e50:	9101      	str	r1, [sp, #4]
 8015e52:	47c0      	blx	r8
 8015e54:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015e56:	9901      	ldr	r1, [sp, #4]
 8015e58:	6027      	str	r7, [r4, #0]
 8015e5a:	68a8      	ldr	r0, [r5, #8]
 8015e5c:	b120      	cbz	r0, 8015e68 <rcl_wait_set_fini+0x54>
 8015e5e:	47c0      	blx	r8
 8015e60:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015e62:	2300      	movs	r3, #0
 8015e64:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8015e68:	68a0      	ldr	r0, [r4, #8]
 8015e6a:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8015e6c:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8015e6e:	f04f 0800 	mov.w	r8, #0
 8015e72:	f8c4 800c 	str.w	r8, [r4, #12]
 8015e76:	f8c5 800c 	str.w	r8, [r5, #12]
 8015e7a:	b128      	cbz	r0, 8015e88 <rcl_wait_set_fini+0x74>
 8015e7c:	47b8      	blx	r7
 8015e7e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015e80:	f8c4 8008 	str.w	r8, [r4, #8]
 8015e84:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8015e86:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8015e88:	6968      	ldr	r0, [r5, #20]
 8015e8a:	f04f 0800 	mov.w	r8, #0
 8015e8e:	f8c5 8010 	str.w	r8, [r5, #16]
 8015e92:	b128      	cbz	r0, 8015ea0 <rcl_wait_set_fini+0x8c>
 8015e94:	47b8      	blx	r7
 8015e96:	f8c5 8014 	str.w	r8, [r5, #20]
 8015e9a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015e9c:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8015e9e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8015ea0:	6920      	ldr	r0, [r4, #16]
 8015ea2:	f04f 0800 	mov.w	r8, #0
 8015ea6:	f8c4 8014 	str.w	r8, [r4, #20]
 8015eaa:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 8015eae:	b128      	cbz	r0, 8015ebc <rcl_wait_set_fini+0xa8>
 8015eb0:	47b8      	blx	r7
 8015eb2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015eb4:	f8c4 8010 	str.w	r8, [r4, #16]
 8015eb8:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8015eba:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8015ebc:	69a0      	ldr	r0, [r4, #24]
 8015ebe:	f04f 0800 	mov.w	r8, #0
 8015ec2:	f8c4 801c 	str.w	r8, [r4, #28]
 8015ec6:	f8c5 8018 	str.w	r8, [r5, #24]
 8015eca:	b128      	cbz	r0, 8015ed8 <rcl_wait_set_fini+0xc4>
 8015ecc:	9101      	str	r1, [sp, #4]
 8015ece:	47b8      	blx	r7
 8015ed0:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015ed2:	9901      	ldr	r1, [sp, #4]
 8015ed4:	f8c4 8018 	str.w	r8, [r4, #24]
 8015ed8:	6a28      	ldr	r0, [r5, #32]
 8015eda:	b120      	cbz	r0, 8015ee6 <rcl_wait_set_fini+0xd2>
 8015edc:	47b8      	blx	r7
 8015ede:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015ee0:	2300      	movs	r3, #0
 8015ee2:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8015ee6:	6a20      	ldr	r0, [r4, #32]
 8015ee8:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8015eec:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8015eee:	2700      	movs	r7, #0
 8015ef0:	6267      	str	r7, [r4, #36]	; 0x24
 8015ef2:	626f      	str	r7, [r5, #36]	; 0x24
 8015ef4:	b120      	cbz	r0, 8015f00 <rcl_wait_set_fini+0xec>
 8015ef6:	9101      	str	r1, [sp, #4]
 8015ef8:	47c0      	blx	r8
 8015efa:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015efc:	9901      	ldr	r1, [sp, #4]
 8015efe:	6227      	str	r7, [r4, #32]
 8015f00:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8015f02:	b120      	cbz	r0, 8015f0e <rcl_wait_set_fini+0xfa>
 8015f04:	47c0      	blx	r8
 8015f06:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015f08:	2300      	movs	r3, #0
 8015f0a:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 8015f0e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8015f10:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8015f14:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8015f16:	2700      	movs	r7, #0
 8015f18:	62e7      	str	r7, [r4, #44]	; 0x2c
 8015f1a:	632f      	str	r7, [r5, #48]	; 0x30
 8015f1c:	b120      	cbz	r0, 8015f28 <rcl_wait_set_fini+0x114>
 8015f1e:	9101      	str	r1, [sp, #4]
 8015f20:	47c0      	blx	r8
 8015f22:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015f24:	9901      	ldr	r1, [sp, #4]
 8015f26:	62a7      	str	r7, [r4, #40]	; 0x28
 8015f28:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8015f2a:	b120      	cbz	r0, 8015f36 <rcl_wait_set_fini+0x122>
 8015f2c:	47c0      	blx	r8
 8015f2e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015f30:	2300      	movs	r3, #0
 8015f32:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 8015f36:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8015f38:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8015f3a:	4628      	mov	r0, r5
 8015f3c:	4798      	blx	r3
 8015f3e:	2300      	movs	r3, #0
 8015f40:	6323      	str	r3, [r4, #48]	; 0x30
 8015f42:	4630      	mov	r0, r6
 8015f44:	b002      	add	sp, #8
 8015f46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f4a:	260b      	movs	r6, #11
 8015f4c:	4630      	mov	r0, r6
 8015f4e:	b002      	add	sp, #8
 8015f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015f54 <rcl_wait_set_add_subscription>:
 8015f54:	b320      	cbz	r0, 8015fa0 <rcl_wait_set_add_subscription+0x4c>
 8015f56:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8015f58:	b570      	push	{r4, r5, r6, lr}
 8015f5a:	4604      	mov	r4, r0
 8015f5c:	b1d3      	cbz	r3, 8015f94 <rcl_wait_set_add_subscription+0x40>
 8015f5e:	b319      	cbz	r1, 8015fa8 <rcl_wait_set_add_subscription+0x54>
 8015f60:	681d      	ldr	r5, [r3, #0]
 8015f62:	6860      	ldr	r0, [r4, #4]
 8015f64:	4285      	cmp	r5, r0
 8015f66:	d218      	bcs.n	8015f9a <rcl_wait_set_add_subscription+0x46>
 8015f68:	6820      	ldr	r0, [r4, #0]
 8015f6a:	1c6e      	adds	r6, r5, #1
 8015f6c:	601e      	str	r6, [r3, #0]
 8015f6e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015f72:	b102      	cbz	r2, 8015f76 <rcl_wait_set_add_subscription+0x22>
 8015f74:	6015      	str	r5, [r2, #0]
 8015f76:	4608      	mov	r0, r1
 8015f78:	f7f8 ff60 	bl	800ee3c <rcl_subscription_get_rmw_handle>
 8015f7c:	b190      	cbz	r0, 8015fa4 <rcl_wait_set_add_subscription+0x50>
 8015f7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015f80:	6842      	ldr	r2, [r0, #4]
 8015f82:	689b      	ldr	r3, [r3, #8]
 8015f84:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015f88:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8015f8a:	6853      	ldr	r3, [r2, #4]
 8015f8c:	3301      	adds	r3, #1
 8015f8e:	6053      	str	r3, [r2, #4]
 8015f90:	2000      	movs	r0, #0
 8015f92:	bd70      	pop	{r4, r5, r6, pc}
 8015f94:	f44f 7061 	mov.w	r0, #900	; 0x384
 8015f98:	bd70      	pop	{r4, r5, r6, pc}
 8015f9a:	f240 3086 	movw	r0, #902	; 0x386
 8015f9e:	bd70      	pop	{r4, r5, r6, pc}
 8015fa0:	200b      	movs	r0, #11
 8015fa2:	4770      	bx	lr
 8015fa4:	2001      	movs	r0, #1
 8015fa6:	bd70      	pop	{r4, r5, r6, pc}
 8015fa8:	200b      	movs	r0, #11
 8015faa:	bd70      	pop	{r4, r5, r6, pc}

08015fac <rcl_wait_set_clear>:
 8015fac:	2800      	cmp	r0, #0
 8015fae:	d073      	beq.n	8016098 <rcl_wait_set_clear+0xec>
 8015fb0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8015fb2:	b510      	push	{r4, lr}
 8015fb4:	4604      	mov	r4, r0
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d070      	beq.n	801609c <rcl_wait_set_clear+0xf0>
 8015fba:	6800      	ldr	r0, [r0, #0]
 8015fbc:	b138      	cbz	r0, 8015fce <rcl_wait_set_clear+0x22>
 8015fbe:	6862      	ldr	r2, [r4, #4]
 8015fc0:	2100      	movs	r1, #0
 8015fc2:	0092      	lsls	r2, r2, #2
 8015fc4:	f004 fa88 	bl	801a4d8 <memset>
 8015fc8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015fca:	2200      	movs	r2, #0
 8015fcc:	601a      	str	r2, [r3, #0]
 8015fce:	68a0      	ldr	r0, [r4, #8]
 8015fd0:	b138      	cbz	r0, 8015fe2 <rcl_wait_set_clear+0x36>
 8015fd2:	68e2      	ldr	r2, [r4, #12]
 8015fd4:	2100      	movs	r1, #0
 8015fd6:	0092      	lsls	r2, r2, #2
 8015fd8:	f004 fa7e 	bl	801a4d8 <memset>
 8015fdc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015fde:	2200      	movs	r2, #0
 8015fe0:	60da      	str	r2, [r3, #12]
 8015fe2:	69a0      	ldr	r0, [r4, #24]
 8015fe4:	b138      	cbz	r0, 8015ff6 <rcl_wait_set_clear+0x4a>
 8015fe6:	69e2      	ldr	r2, [r4, #28]
 8015fe8:	2100      	movs	r1, #0
 8015fea:	0092      	lsls	r2, r2, #2
 8015fec:	f004 fa74 	bl	801a4d8 <memset>
 8015ff0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015ff2:	2200      	movs	r2, #0
 8015ff4:	619a      	str	r2, [r3, #24]
 8015ff6:	6a20      	ldr	r0, [r4, #32]
 8015ff8:	b138      	cbz	r0, 801600a <rcl_wait_set_clear+0x5e>
 8015ffa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8015ffc:	2100      	movs	r1, #0
 8015ffe:	0092      	lsls	r2, r2, #2
 8016000:	f004 fa6a 	bl	801a4d8 <memset>
 8016004:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016006:	2200      	movs	r2, #0
 8016008:	625a      	str	r2, [r3, #36]	; 0x24
 801600a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801600c:	b138      	cbz	r0, 801601e <rcl_wait_set_clear+0x72>
 801600e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8016010:	2100      	movs	r1, #0
 8016012:	0092      	lsls	r2, r2, #2
 8016014:	f004 fa60 	bl	801a4d8 <memset>
 8016018:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801601a:	2200      	movs	r2, #0
 801601c:	631a      	str	r2, [r3, #48]	; 0x30
 801601e:	6920      	ldr	r0, [r4, #16]
 8016020:	b138      	cbz	r0, 8016032 <rcl_wait_set_clear+0x86>
 8016022:	6962      	ldr	r2, [r4, #20]
 8016024:	2100      	movs	r1, #0
 8016026:	0092      	lsls	r2, r2, #2
 8016028:	f004 fa56 	bl	801a4d8 <memset>
 801602c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801602e:	2200      	movs	r2, #0
 8016030:	641a      	str	r2, [r3, #64]	; 0x40
 8016032:	6898      	ldr	r0, [r3, #8]
 8016034:	b138      	cbz	r0, 8016046 <rcl_wait_set_clear+0x9a>
 8016036:	685a      	ldr	r2, [r3, #4]
 8016038:	2100      	movs	r1, #0
 801603a:	0092      	lsls	r2, r2, #2
 801603c:	f004 fa4c 	bl	801a4d8 <memset>
 8016040:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016042:	2200      	movs	r2, #0
 8016044:	605a      	str	r2, [r3, #4]
 8016046:	6958      	ldr	r0, [r3, #20]
 8016048:	b138      	cbz	r0, 801605a <rcl_wait_set_clear+0xae>
 801604a:	691a      	ldr	r2, [r3, #16]
 801604c:	2100      	movs	r1, #0
 801604e:	0092      	lsls	r2, r2, #2
 8016050:	f004 fa42 	bl	801a4d8 <memset>
 8016054:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016056:	2200      	movs	r2, #0
 8016058:	611a      	str	r2, [r3, #16]
 801605a:	6a18      	ldr	r0, [r3, #32]
 801605c:	b138      	cbz	r0, 801606e <rcl_wait_set_clear+0xc2>
 801605e:	69da      	ldr	r2, [r3, #28]
 8016060:	2100      	movs	r1, #0
 8016062:	0092      	lsls	r2, r2, #2
 8016064:	f004 fa38 	bl	801a4d8 <memset>
 8016068:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801606a:	2200      	movs	r2, #0
 801606c:	61da      	str	r2, [r3, #28]
 801606e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8016070:	b138      	cbz	r0, 8016082 <rcl_wait_set_clear+0xd6>
 8016072:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016074:	2100      	movs	r1, #0
 8016076:	0092      	lsls	r2, r2, #2
 8016078:	f004 fa2e 	bl	801a4d8 <memset>
 801607c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801607e:	2200      	movs	r2, #0
 8016080:	629a      	str	r2, [r3, #40]	; 0x28
 8016082:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8016084:	b138      	cbz	r0, 8016096 <rcl_wait_set_clear+0xea>
 8016086:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016088:	2100      	movs	r1, #0
 801608a:	0092      	lsls	r2, r2, #2
 801608c:	f004 fa24 	bl	801a4d8 <memset>
 8016090:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016092:	2000      	movs	r0, #0
 8016094:	6358      	str	r0, [r3, #52]	; 0x34
 8016096:	bd10      	pop	{r4, pc}
 8016098:	200b      	movs	r0, #11
 801609a:	4770      	bx	lr
 801609c:	f44f 7061 	mov.w	r0, #900	; 0x384
 80160a0:	bd10      	pop	{r4, pc}
 80160a2:	bf00      	nop

080160a4 <rcl_wait_set_resize>:
 80160a4:	2800      	cmp	r0, #0
 80160a6:	f000 81a6 	beq.w	80163f6 <rcl_wait_set_resize+0x352>
 80160aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160ae:	f8d0 a030 	ldr.w	sl, [r0, #48]	; 0x30
 80160b2:	b083      	sub	sp, #12
 80160b4:	4604      	mov	r4, r0
 80160b6:	f1ba 0f00 	cmp.w	sl, #0
 80160ba:	f000 819e 	beq.w	80163fa <rcl_wait_set_resize+0x356>
 80160be:	461e      	mov	r6, r3
 80160c0:	e9da b313 	ldrd	fp, r3, [sl, #76]	; 0x4c
 80160c4:	f04f 0800 	mov.w	r8, #0
 80160c8:	f8da 9058 	ldr.w	r9, [sl, #88]	; 0x58
 80160cc:	9300      	str	r3, [sp, #0]
 80160ce:	f8c0 8004 	str.w	r8, [r0, #4]
 80160d2:	460f      	mov	r7, r1
 80160d4:	4615      	mov	r5, r2
 80160d6:	f8ca 8000 	str.w	r8, [sl]
 80160da:	2900      	cmp	r1, #0
 80160dc:	f000 80c9 	beq.w	8016272 <rcl_wait_set_resize+0x1ce>
 80160e0:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 80160e4:	6800      	ldr	r0, [r0, #0]
 80160e6:	4651      	mov	r1, sl
 80160e8:	464a      	mov	r2, r9
 80160ea:	4798      	blx	r3
 80160ec:	6020      	str	r0, [r4, #0]
 80160ee:	2800      	cmp	r0, #0
 80160f0:	f000 80d8 	beq.w	80162a4 <rcl_wait_set_resize+0x200>
 80160f4:	4652      	mov	r2, sl
 80160f6:	4641      	mov	r1, r8
 80160f8:	f004 f9ee 	bl	801a4d8 <memset>
 80160fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80160fe:	6067      	str	r7, [r4, #4]
 8016100:	6898      	ldr	r0, [r3, #8]
 8016102:	f8c3 8004 	str.w	r8, [r3, #4]
 8016106:	9301      	str	r3, [sp, #4]
 8016108:	464a      	mov	r2, r9
 801610a:	9b00      	ldr	r3, [sp, #0]
 801610c:	4651      	mov	r1, sl
 801610e:	4798      	blx	r3
 8016110:	9b01      	ldr	r3, [sp, #4]
 8016112:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8016114:	6098      	str	r0, [r3, #8]
 8016116:	6897      	ldr	r7, [r2, #8]
 8016118:	2f00      	cmp	r7, #0
 801611a:	f000 80be 	beq.w	801629a <rcl_wait_set_resize+0x1f6>
 801611e:	4652      	mov	r2, sl
 8016120:	4641      	mov	r1, r8
 8016122:	4638      	mov	r0, r7
 8016124:	f004 f9d8 	bl	801a4d8 <memset>
 8016128:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801612c:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8016130:	2700      	movs	r7, #0
 8016132:	e9da 2313 	ldrd	r2, r3, [sl, #76]	; 0x4c
 8016136:	60e7      	str	r7, [r4, #12]
 8016138:	f8ca 700c 	str.w	r7, [sl, #12]
 801613c:	2d00      	cmp	r5, #0
 801613e:	f040 80b5 	bne.w	80162ac <rcl_wait_set_resize+0x208>
 8016142:	68a0      	ldr	r0, [r4, #8]
 8016144:	b130      	cbz	r0, 8016154 <rcl_wait_set_resize+0xb0>
 8016146:	4641      	mov	r1, r8
 8016148:	4790      	blx	r2
 801614a:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801614e:	60a5      	str	r5, [r4, #8]
 8016150:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8016154:	2700      	movs	r7, #0
 8016156:	19ad      	adds	r5, r5, r6
 8016158:	f8ca 7010 	str.w	r7, [sl, #16]
 801615c:	f040 80be 	bne.w	80162dc <rcl_wait_set_resize+0x238>
 8016160:	f8da 0014 	ldr.w	r0, [sl, #20]
 8016164:	b148      	cbz	r0, 801617a <rcl_wait_set_resize+0xd6>
 8016166:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 801616a:	4641      	mov	r1, r8
 801616c:	4798      	blx	r3
 801616e:	f8ca 5014 	str.w	r5, [sl, #20]
 8016172:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016176:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 801617a:	2500      	movs	r5, #0
 801617c:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 8016180:	6165      	str	r5, [r4, #20]
 8016182:	f8ca 5040 	str.w	r5, [sl, #64]	; 0x40
 8016186:	2e00      	cmp	r6, #0
 8016188:	f040 80bf 	bne.w	801630a <rcl_wait_set_resize+0x266>
 801618c:	6920      	ldr	r0, [r4, #16]
 801618e:	b140      	cbz	r0, 80161a2 <rcl_wait_set_resize+0xfe>
 8016190:	4641      	mov	r1, r8
 8016192:	47c8      	blx	r9
 8016194:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016198:	6126      	str	r6, [r4, #16]
 801619a:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 801619e:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 80161a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80161a4:	2500      	movs	r5, #0
 80161a6:	61e5      	str	r5, [r4, #28]
 80161a8:	f8ca 5018 	str.w	r5, [sl, #24]
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	f040 80c1 	bne.w	8016334 <rcl_wait_set_resize+0x290>
 80161b2:	69a0      	ldr	r0, [r4, #24]
 80161b4:	b128      	cbz	r0, 80161c2 <rcl_wait_set_resize+0x11e>
 80161b6:	4641      	mov	r1, r8
 80161b8:	47c8      	blx	r9
 80161ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80161bc:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80161c0:	61a3      	str	r3, [r4, #24]
 80161c2:	f8da 0020 	ldr.w	r0, [sl, #32]
 80161c6:	b130      	cbz	r0, 80161d6 <rcl_wait_set_resize+0x132>
 80161c8:	4641      	mov	r1, r8
 80161ca:	47c8      	blx	r9
 80161cc:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80161d0:	2300      	movs	r3, #0
 80161d2:	e9ca 3307 	strd	r3, r3, [sl, #28]
 80161d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80161d8:	f8da 7058 	ldr.w	r7, [sl, #88]	; 0x58
 80161dc:	2600      	movs	r6, #0
 80161de:	e9da 8913 	ldrd	r8, r9, [sl, #76]	; 0x4c
 80161e2:	6266      	str	r6, [r4, #36]	; 0x24
 80161e4:	f8ca 6024 	str.w	r6, [sl, #36]	; 0x24
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	f000 80c8 	beq.w	801637e <rcl_wait_set_resize+0x2da>
 80161ee:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 80161f2:	6a20      	ldr	r0, [r4, #32]
 80161f4:	4651      	mov	r1, sl
 80161f6:	463a      	mov	r2, r7
 80161f8:	47c8      	blx	r9
 80161fa:	6220      	str	r0, [r4, #32]
 80161fc:	2800      	cmp	r0, #0
 80161fe:	d051      	beq.n	80162a4 <rcl_wait_set_resize+0x200>
 8016200:	4652      	mov	r2, sl
 8016202:	4631      	mov	r1, r6
 8016204:	f004 f968 	bl	801a4d8 <memset>
 8016208:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801620a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801620c:	6263      	str	r3, [r4, #36]	; 0x24
 801620e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8016210:	62ae      	str	r6, [r5, #40]	; 0x28
 8016212:	463a      	mov	r2, r7
 8016214:	4651      	mov	r1, sl
 8016216:	47c8      	blx	r9
 8016218:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801621a:	62e8      	str	r0, [r5, #44]	; 0x2c
 801621c:	6add      	ldr	r5, [r3, #44]	; 0x2c
 801621e:	2d00      	cmp	r5, #0
 8016220:	f000 8105 	beq.w	801642e <rcl_wait_set_resize+0x38a>
 8016224:	4652      	mov	r2, sl
 8016226:	4631      	mov	r1, r6
 8016228:	4628      	mov	r0, r5
 801622a:	f004 f955 	bl	801a4d8 <memset>
 801622e:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016232:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016234:	f8da 6058 	ldr.w	r6, [sl, #88]	; 0x58
 8016238:	2500      	movs	r5, #0
 801623a:	e9da 7913 	ldrd	r7, r9, [sl, #76]	; 0x4c
 801623e:	62e5      	str	r5, [r4, #44]	; 0x2c
 8016240:	f8ca 5030 	str.w	r5, [sl, #48]	; 0x30
 8016244:	2b00      	cmp	r3, #0
 8016246:	f040 80af 	bne.w	80163a8 <rcl_wait_set_resize+0x304>
 801624a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801624c:	b128      	cbz	r0, 801625a <rcl_wait_set_resize+0x1b6>
 801624e:	4631      	mov	r1, r6
 8016250:	47b8      	blx	r7
 8016252:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016254:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016258:	62a3      	str	r3, [r4, #40]	; 0x28
 801625a:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 801625e:	b310      	cbz	r0, 80162a6 <rcl_wait_set_resize+0x202>
 8016260:	4631      	mov	r1, r6
 8016262:	47b8      	blx	r7
 8016264:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016266:	2000      	movs	r0, #0
 8016268:	e9c3 000d 	strd	r0, r0, [r3, #52]	; 0x34
 801626c:	b003      	add	sp, #12
 801626e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016272:	6800      	ldr	r0, [r0, #0]
 8016274:	b120      	cbz	r0, 8016280 <rcl_wait_set_resize+0x1dc>
 8016276:	4649      	mov	r1, r9
 8016278:	47d8      	blx	fp
 801627a:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801627e:	6027      	str	r7, [r4, #0]
 8016280:	f8da 0008 	ldr.w	r0, [sl, #8]
 8016284:	2800      	cmp	r0, #0
 8016286:	f43f af51 	beq.w	801612c <rcl_wait_set_resize+0x88>
 801628a:	4649      	mov	r1, r9
 801628c:	47d8      	blx	fp
 801628e:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016292:	2300      	movs	r3, #0
 8016294:	e9ca 3301 	strd	r3, r3, [sl, #4]
 8016298:	e748      	b.n	801612c <rcl_wait_set_resize+0x88>
 801629a:	6820      	ldr	r0, [r4, #0]
 801629c:	4649      	mov	r1, r9
 801629e:	47d8      	blx	fp
 80162a0:	e9c4 7700 	strd	r7, r7, [r4]
 80162a4:	200a      	movs	r0, #10
 80162a6:	b003      	add	sp, #12
 80162a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162ac:	ea4f 0985 	mov.w	r9, r5, lsl #2
 80162b0:	68a0      	ldr	r0, [r4, #8]
 80162b2:	4642      	mov	r2, r8
 80162b4:	4649      	mov	r1, r9
 80162b6:	4798      	blx	r3
 80162b8:	60a0      	str	r0, [r4, #8]
 80162ba:	2800      	cmp	r0, #0
 80162bc:	d0f2      	beq.n	80162a4 <rcl_wait_set_resize+0x200>
 80162be:	4639      	mov	r1, r7
 80162c0:	464a      	mov	r2, r9
 80162c2:	f004 f909 	bl	801a4d8 <memset>
 80162c6:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80162ca:	60e5      	str	r5, [r4, #12]
 80162cc:	2700      	movs	r7, #0
 80162ce:	19ad      	adds	r5, r5, r6
 80162d0:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 80162d4:	f8ca 7010 	str.w	r7, [sl, #16]
 80162d8:	f43f af42 	beq.w	8016160 <rcl_wait_set_resize+0xbc>
 80162dc:	00ad      	lsls	r5, r5, #2
 80162de:	4642      	mov	r2, r8
 80162e0:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
 80162e4:	f8da 0014 	ldr.w	r0, [sl, #20]
 80162e8:	4629      	mov	r1, r5
 80162ea:	4798      	blx	r3
 80162ec:	4680      	mov	r8, r0
 80162ee:	f8ca 0014 	str.w	r0, [sl, #20]
 80162f2:	2800      	cmp	r0, #0
 80162f4:	f000 8084 	beq.w	8016400 <rcl_wait_set_resize+0x35c>
 80162f8:	462a      	mov	r2, r5
 80162fa:	4639      	mov	r1, r7
 80162fc:	f004 f8ec 	bl	801a4d8 <memset>
 8016300:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016304:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8016308:	e737      	b.n	801617a <rcl_wait_set_resize+0xd6>
 801630a:	ea4f 0986 	mov.w	r9, r6, lsl #2
 801630e:	6920      	ldr	r0, [r4, #16]
 8016310:	4642      	mov	r2, r8
 8016312:	4649      	mov	r1, r9
 8016314:	47b8      	blx	r7
 8016316:	6120      	str	r0, [r4, #16]
 8016318:	2800      	cmp	r0, #0
 801631a:	d0c3      	beq.n	80162a4 <rcl_wait_set_resize+0x200>
 801631c:	464a      	mov	r2, r9
 801631e:	4629      	mov	r1, r5
 8016320:	f004 f8da 	bl	801a4d8 <memset>
 8016324:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016328:	6166      	str	r6, [r4, #20]
 801632a:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 801632e:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8016332:	e736      	b.n	80161a2 <rcl_wait_set_resize+0xfe>
 8016334:	009e      	lsls	r6, r3, #2
 8016336:	69a0      	ldr	r0, [r4, #24]
 8016338:	4631      	mov	r1, r6
 801633a:	4642      	mov	r2, r8
 801633c:	47b8      	blx	r7
 801633e:	61a0      	str	r0, [r4, #24]
 8016340:	2800      	cmp	r0, #0
 8016342:	d0af      	beq.n	80162a4 <rcl_wait_set_resize+0x200>
 8016344:	4632      	mov	r2, r6
 8016346:	4629      	mov	r1, r5
 8016348:	f004 f8c6 	bl	801a4d8 <memset>
 801634c:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8016350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016352:	61e3      	str	r3, [r4, #28]
 8016354:	f8da 0020 	ldr.w	r0, [sl, #32]
 8016358:	f8ca 501c 	str.w	r5, [sl, #28]
 801635c:	4642      	mov	r2, r8
 801635e:	4631      	mov	r1, r6
 8016360:	47b8      	blx	r7
 8016362:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016364:	f8ca 0020 	str.w	r0, [sl, #32]
 8016368:	6a1f      	ldr	r7, [r3, #32]
 801636a:	2f00      	cmp	r7, #0
 801636c:	d058      	beq.n	8016420 <rcl_wait_set_resize+0x37c>
 801636e:	4632      	mov	r2, r6
 8016370:	4629      	mov	r1, r5
 8016372:	4638      	mov	r0, r7
 8016374:	f004 f8b0 	bl	801a4d8 <memset>
 8016378:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801637c:	e72b      	b.n	80161d6 <rcl_wait_set_resize+0x132>
 801637e:	6a20      	ldr	r0, [r4, #32]
 8016380:	b128      	cbz	r0, 801638e <rcl_wait_set_resize+0x2ea>
 8016382:	4639      	mov	r1, r7
 8016384:	47c0      	blx	r8
 8016386:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016388:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801638c:	6223      	str	r3, [r4, #32]
 801638e:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
 8016392:	2800      	cmp	r0, #0
 8016394:	f43f af4d 	beq.w	8016232 <rcl_wait_set_resize+0x18e>
 8016398:	4639      	mov	r1, r7
 801639a:	47c0      	blx	r8
 801639c:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80163a0:	2300      	movs	r3, #0
 80163a2:	e9ca 330a 	strd	r3, r3, [sl, #40]	; 0x28
 80163a6:	e744      	b.n	8016232 <rcl_wait_set_resize+0x18e>
 80163a8:	ea4f 0883 	mov.w	r8, r3, lsl #2
 80163ac:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80163ae:	4641      	mov	r1, r8
 80163b0:	4632      	mov	r2, r6
 80163b2:	47c8      	blx	r9
 80163b4:	62a0      	str	r0, [r4, #40]	; 0x28
 80163b6:	2800      	cmp	r0, #0
 80163b8:	f43f af74 	beq.w	80162a4 <rcl_wait_set_resize+0x200>
 80163bc:	4642      	mov	r2, r8
 80163be:	4629      	mov	r1, r5
 80163c0:	f004 f88a 	bl	801a4d8 <memset>
 80163c4:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80163c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80163ca:	62e3      	str	r3, [r4, #44]	; 0x2c
 80163cc:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 80163d0:	f8ca 5034 	str.w	r5, [sl, #52]	; 0x34
 80163d4:	4632      	mov	r2, r6
 80163d6:	4641      	mov	r1, r8
 80163d8:	47c8      	blx	r9
 80163da:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80163dc:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 80163e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80163e2:	b35b      	cbz	r3, 801643c <rcl_wait_set_resize+0x398>
 80163e4:	4642      	mov	r2, r8
 80163e6:	4618      	mov	r0, r3
 80163e8:	4629      	mov	r1, r5
 80163ea:	f004 f875 	bl	801a4d8 <memset>
 80163ee:	4628      	mov	r0, r5
 80163f0:	b003      	add	sp, #12
 80163f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163f6:	200b      	movs	r0, #11
 80163f8:	4770      	bx	lr
 80163fa:	f44f 7061 	mov.w	r0, #900	; 0x384
 80163fe:	e752      	b.n	80162a6 <rcl_wait_set_resize+0x202>
 8016400:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016402:	68a0      	ldr	r0, [r4, #8]
 8016404:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016406:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8016408:	4790      	blx	r2
 801640a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801640c:	6920      	ldr	r0, [r4, #16]
 801640e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016410:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8016412:	e9c4 8802 	strd	r8, r8, [r4, #8]
 8016416:	4790      	blx	r2
 8016418:	e9c4 8804 	strd	r8, r8, [r4, #16]
 801641c:	200a      	movs	r0, #10
 801641e:	e742      	b.n	80162a6 <rcl_wait_set_resize+0x202>
 8016420:	69a0      	ldr	r0, [r4, #24]
 8016422:	4641      	mov	r1, r8
 8016424:	47c8      	blx	r9
 8016426:	e9c4 7706 	strd	r7, r7, [r4, #24]
 801642a:	200a      	movs	r0, #10
 801642c:	e73b      	b.n	80162a6 <rcl_wait_set_resize+0x202>
 801642e:	6a20      	ldr	r0, [r4, #32]
 8016430:	4639      	mov	r1, r7
 8016432:	47c0      	blx	r8
 8016434:	e9c4 5508 	strd	r5, r5, [r4, #32]
 8016438:	200a      	movs	r0, #10
 801643a:	e734      	b.n	80162a6 <rcl_wait_set_resize+0x202>
 801643c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801643e:	9300      	str	r3, [sp, #0]
 8016440:	4631      	mov	r1, r6
 8016442:	47b8      	blx	r7
 8016444:	9b00      	ldr	r3, [sp, #0]
 8016446:	200a      	movs	r0, #10
 8016448:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 801644c:	e72b      	b.n	80162a6 <rcl_wait_set_resize+0x202>
 801644e:	bf00      	nop

08016450 <rcl_wait_set_init>:
 8016450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016454:	b084      	sub	sp, #16
 8016456:	4604      	mov	r4, r0
 8016458:	a810      	add	r0, sp, #64	; 0x40
 801645a:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 801645e:	460f      	mov	r7, r1
 8016460:	4690      	mov	r8, r2
 8016462:	4699      	mov	r9, r3
 8016464:	f7f9 f96a 	bl	800f73c <rcutils_allocator_is_valid>
 8016468:	2800      	cmp	r0, #0
 801646a:	d06b      	beq.n	8016544 <rcl_wait_set_init+0xf4>
 801646c:	2c00      	cmp	r4, #0
 801646e:	d069      	beq.n	8016544 <rcl_wait_set_init+0xf4>
 8016470:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016472:	b125      	cbz	r5, 801647e <rcl_wait_set_init+0x2e>
 8016474:	2564      	movs	r5, #100	; 0x64
 8016476:	4628      	mov	r0, r5
 8016478:	b004      	add	sp, #16
 801647a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801647e:	f1ba 0f00 	cmp.w	sl, #0
 8016482:	d05f      	beq.n	8016544 <rcl_wait_set_init+0xf4>
 8016484:	4650      	mov	r0, sl
 8016486:	f7fe faa5 	bl	80149d4 <rcl_context_is_valid>
 801648a:	2800      	cmp	r0, #0
 801648c:	d067      	beq.n	801655e <rcl_wait_set_init+0x10e>
 801648e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016490:	9914      	ldr	r1, [sp, #80]	; 0x50
 8016492:	205c      	movs	r0, #92	; 0x5c
 8016494:	4798      	blx	r3
 8016496:	6320      	str	r0, [r4, #48]	; 0x30
 8016498:	2800      	cmp	r0, #0
 801649a:	d062      	beq.n	8016562 <rcl_wait_set_init+0x112>
 801649c:	225c      	movs	r2, #92	; 0x5c
 801649e:	4629      	mov	r1, r5
 80164a0:	f004 f81a 	bl	801a4d8 <memset>
 80164a4:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 80164a8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80164ac:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80164ae:	f8dc e000 	ldr.w	lr, [ip]
 80164b2:	f8c6 a044 	str.w	sl, [r6, #68]	; 0x44
 80164b6:	f106 0c48 	add.w	ip, r6, #72	; 0x48
 80164ba:	e9c6 5504 	strd	r5, r5, [r6, #16]
 80164be:	e9c6 5507 	strd	r5, r5, [r6, #28]
 80164c2:	e9c6 550a 	strd	r5, r5, [r6, #40]	; 0x28
 80164c6:	e9c6 550d 	strd	r5, r5, [r6, #52]	; 0x34
 80164ca:	60b5      	str	r5, [r6, #8]
 80164cc:	6075      	str	r5, [r6, #4]
 80164ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80164d2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80164d6:	1899      	adds	r1, r3, r2
 80164d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80164da:	f8da 0000 	ldr.w	r0, [sl]
 80164de:	f8cc e000 	str.w	lr, [ip]
 80164e2:	4419      	add	r1, r3
 80164e4:	4441      	add	r1, r8
 80164e6:	3028      	adds	r0, #40	; 0x28
 80164e8:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 80164ec:	f001 fc9c 	bl	8017e28 <rmw_create_wait_set>
 80164f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80164f2:	63f0      	str	r0, [r6, #60]	; 0x3c
 80164f4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80164f6:	b350      	cbz	r0, 801654e <rcl_wait_set_init+0xfe>
 80164f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80164fa:	9302      	str	r3, [sp, #8]
 80164fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80164fe:	9301      	str	r3, [sp, #4]
 8016500:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016502:	9300      	str	r3, [sp, #0]
 8016504:	4642      	mov	r2, r8
 8016506:	464b      	mov	r3, r9
 8016508:	4639      	mov	r1, r7
 801650a:	4620      	mov	r0, r4
 801650c:	f7ff fdca 	bl	80160a4 <rcl_wait_set_resize>
 8016510:	4605      	mov	r5, r0
 8016512:	2800      	cmp	r0, #0
 8016514:	d0af      	beq.n	8016476 <rcl_wait_set_init+0x26>
 8016516:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016518:	bb2b      	cbnz	r3, 8016566 <rcl_wait_set_init+0x116>
 801651a:	2600      	movs	r6, #0
 801651c:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8016520:	9600      	str	r6, [sp, #0]
 8016522:	4633      	mov	r3, r6
 8016524:	4632      	mov	r2, r6
 8016526:	4631      	mov	r1, r6
 8016528:	4620      	mov	r0, r4
 801652a:	f7ff fdbb 	bl	80160a4 <rcl_wait_set_resize>
 801652e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8016530:	2800      	cmp	r0, #0
 8016532:	d0a0      	beq.n	8016476 <rcl_wait_set_init+0x26>
 8016534:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8016536:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8016538:	4798      	blx	r3
 801653a:	4628      	mov	r0, r5
 801653c:	6326      	str	r6, [r4, #48]	; 0x30
 801653e:	b004      	add	sp, #16
 8016540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016544:	250b      	movs	r5, #11
 8016546:	4628      	mov	r0, r5
 8016548:	b004      	add	sp, #16
 801654a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801654e:	2501      	movs	r5, #1
 8016550:	f001 fc74 	bl	8017e3c <rmw_destroy_wait_set>
 8016554:	2800      	cmp	r0, #0
 8016556:	bf18      	it	ne
 8016558:	f44f 7561 	movne.w	r5, #900	; 0x384
 801655c:	e7dd      	b.n	801651a <rcl_wait_set_init+0xca>
 801655e:	2565      	movs	r5, #101	; 0x65
 8016560:	e789      	b.n	8016476 <rcl_wait_set_init+0x26>
 8016562:	250a      	movs	r5, #10
 8016564:	e787      	b.n	8016476 <rcl_wait_set_init+0x26>
 8016566:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8016568:	e7f2      	b.n	8016550 <rcl_wait_set_init+0x100>
 801656a:	bf00      	nop

0801656c <rcl_wait_set_add_guard_condition>:
 801656c:	b320      	cbz	r0, 80165b8 <rcl_wait_set_add_guard_condition+0x4c>
 801656e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8016570:	b570      	push	{r4, r5, r6, lr}
 8016572:	4604      	mov	r4, r0
 8016574:	b1d3      	cbz	r3, 80165ac <rcl_wait_set_add_guard_condition+0x40>
 8016576:	b319      	cbz	r1, 80165c0 <rcl_wait_set_add_guard_condition+0x54>
 8016578:	68dd      	ldr	r5, [r3, #12]
 801657a:	68e0      	ldr	r0, [r4, #12]
 801657c:	4285      	cmp	r5, r0
 801657e:	d218      	bcs.n	80165b2 <rcl_wait_set_add_guard_condition+0x46>
 8016580:	68a0      	ldr	r0, [r4, #8]
 8016582:	1c6e      	adds	r6, r5, #1
 8016584:	60de      	str	r6, [r3, #12]
 8016586:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801658a:	b102      	cbz	r2, 801658e <rcl_wait_set_add_guard_condition+0x22>
 801658c:	6015      	str	r5, [r2, #0]
 801658e:	4608      	mov	r0, r1
 8016590:	f003 f96c 	bl	801986c <rcl_guard_condition_get_rmw_handle>
 8016594:	b190      	cbz	r0, 80165bc <rcl_wait_set_add_guard_condition+0x50>
 8016596:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016598:	6842      	ldr	r2, [r0, #4]
 801659a:	695b      	ldr	r3, [r3, #20]
 801659c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80165a0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80165a2:	6913      	ldr	r3, [r2, #16]
 80165a4:	3301      	adds	r3, #1
 80165a6:	6113      	str	r3, [r2, #16]
 80165a8:	2000      	movs	r0, #0
 80165aa:	bd70      	pop	{r4, r5, r6, pc}
 80165ac:	f44f 7061 	mov.w	r0, #900	; 0x384
 80165b0:	bd70      	pop	{r4, r5, r6, pc}
 80165b2:	f240 3086 	movw	r0, #902	; 0x386
 80165b6:	bd70      	pop	{r4, r5, r6, pc}
 80165b8:	200b      	movs	r0, #11
 80165ba:	4770      	bx	lr
 80165bc:	2001      	movs	r0, #1
 80165be:	bd70      	pop	{r4, r5, r6, pc}
 80165c0:	200b      	movs	r0, #11
 80165c2:	bd70      	pop	{r4, r5, r6, pc}

080165c4 <rcl_wait_set_add_timer>:
 80165c4:	b340      	cbz	r0, 8016618 <rcl_wait_set_add_timer+0x54>
 80165c6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80165c8:	b570      	push	{r4, r5, r6, lr}
 80165ca:	4604      	mov	r4, r0
 80165cc:	b1f3      	cbz	r3, 801660c <rcl_wait_set_add_timer+0x48>
 80165ce:	b329      	cbz	r1, 801661c <rcl_wait_set_add_timer+0x58>
 80165d0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80165d2:	6965      	ldr	r5, [r4, #20]
 80165d4:	42a8      	cmp	r0, r5
 80165d6:	d21c      	bcs.n	8016612 <rcl_wait_set_add_timer+0x4e>
 80165d8:	6925      	ldr	r5, [r4, #16]
 80165da:	1c46      	adds	r6, r0, #1
 80165dc:	641e      	str	r6, [r3, #64]	; 0x40
 80165de:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 80165e2:	b102      	cbz	r2, 80165e6 <rcl_wait_set_add_timer+0x22>
 80165e4:	6010      	str	r0, [r2, #0]
 80165e6:	4608      	mov	r0, r1
 80165e8:	f7ff faa4 	bl	8015b34 <rcl_timer_get_guard_condition>
 80165ec:	b168      	cbz	r0, 801660a <rcl_wait_set_add_timer+0x46>
 80165ee:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80165f0:	68e3      	ldr	r3, [r4, #12]
 80165f2:	6c15      	ldr	r5, [r2, #64]	; 0x40
 80165f4:	3b01      	subs	r3, #1
 80165f6:	441d      	add	r5, r3
 80165f8:	f003 f938 	bl	801986c <rcl_guard_condition_get_rmw_handle>
 80165fc:	b180      	cbz	r0, 8016620 <rcl_wait_set_add_timer+0x5c>
 80165fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016600:	6842      	ldr	r2, [r0, #4]
 8016602:	695b      	ldr	r3, [r3, #20]
 8016604:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016608:	2000      	movs	r0, #0
 801660a:	bd70      	pop	{r4, r5, r6, pc}
 801660c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8016610:	bd70      	pop	{r4, r5, r6, pc}
 8016612:	f240 3086 	movw	r0, #902	; 0x386
 8016616:	bd70      	pop	{r4, r5, r6, pc}
 8016618:	200b      	movs	r0, #11
 801661a:	4770      	bx	lr
 801661c:	200b      	movs	r0, #11
 801661e:	bd70      	pop	{r4, r5, r6, pc}
 8016620:	2001      	movs	r0, #1
 8016622:	bd70      	pop	{r4, r5, r6, pc}

08016624 <rcl_wait_set_add_client>:
 8016624:	b320      	cbz	r0, 8016670 <rcl_wait_set_add_client+0x4c>
 8016626:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8016628:	b570      	push	{r4, r5, r6, lr}
 801662a:	4604      	mov	r4, r0
 801662c:	b1d3      	cbz	r3, 8016664 <rcl_wait_set_add_client+0x40>
 801662e:	b319      	cbz	r1, 8016678 <rcl_wait_set_add_client+0x54>
 8016630:	699d      	ldr	r5, [r3, #24]
 8016632:	69e0      	ldr	r0, [r4, #28]
 8016634:	4285      	cmp	r5, r0
 8016636:	d218      	bcs.n	801666a <rcl_wait_set_add_client+0x46>
 8016638:	69a0      	ldr	r0, [r4, #24]
 801663a:	1c6e      	adds	r6, r5, #1
 801663c:	619e      	str	r6, [r3, #24]
 801663e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8016642:	b102      	cbz	r2, 8016646 <rcl_wait_set_add_client+0x22>
 8016644:	6015      	str	r5, [r2, #0]
 8016646:	4608      	mov	r0, r1
 8016648:	f7fe f964 	bl	8014914 <rcl_client_get_rmw_handle>
 801664c:	b190      	cbz	r0, 8016674 <rcl_wait_set_add_client+0x50>
 801664e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016650:	6842      	ldr	r2, [r0, #4]
 8016652:	6a1b      	ldr	r3, [r3, #32]
 8016654:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016658:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801665a:	69d3      	ldr	r3, [r2, #28]
 801665c:	3301      	adds	r3, #1
 801665e:	61d3      	str	r3, [r2, #28]
 8016660:	2000      	movs	r0, #0
 8016662:	bd70      	pop	{r4, r5, r6, pc}
 8016664:	f44f 7061 	mov.w	r0, #900	; 0x384
 8016668:	bd70      	pop	{r4, r5, r6, pc}
 801666a:	f240 3086 	movw	r0, #902	; 0x386
 801666e:	bd70      	pop	{r4, r5, r6, pc}
 8016670:	200b      	movs	r0, #11
 8016672:	4770      	bx	lr
 8016674:	2001      	movs	r0, #1
 8016676:	bd70      	pop	{r4, r5, r6, pc}
 8016678:	200b      	movs	r0, #11
 801667a:	bd70      	pop	{r4, r5, r6, pc}

0801667c <rcl_wait_set_add_service>:
 801667c:	b320      	cbz	r0, 80166c8 <rcl_wait_set_add_service+0x4c>
 801667e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8016680:	b570      	push	{r4, r5, r6, lr}
 8016682:	4604      	mov	r4, r0
 8016684:	b1d3      	cbz	r3, 80166bc <rcl_wait_set_add_service+0x40>
 8016686:	b319      	cbz	r1, 80166d0 <rcl_wait_set_add_service+0x54>
 8016688:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801668a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801668c:	4285      	cmp	r5, r0
 801668e:	d218      	bcs.n	80166c2 <rcl_wait_set_add_service+0x46>
 8016690:	6a20      	ldr	r0, [r4, #32]
 8016692:	1c6e      	adds	r6, r5, #1
 8016694:	625e      	str	r6, [r3, #36]	; 0x24
 8016696:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801669a:	b102      	cbz	r2, 801669e <rcl_wait_set_add_service+0x22>
 801669c:	6015      	str	r5, [r2, #0]
 801669e:	4608      	mov	r0, r1
 80166a0:	f7ff f84e 	bl	8015740 <rcl_service_get_rmw_handle>
 80166a4:	b190      	cbz	r0, 80166cc <rcl_wait_set_add_service+0x50>
 80166a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80166a8:	6842      	ldr	r2, [r0, #4]
 80166aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80166ac:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80166b0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80166b2:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80166b4:	3301      	adds	r3, #1
 80166b6:	6293      	str	r3, [r2, #40]	; 0x28
 80166b8:	2000      	movs	r0, #0
 80166ba:	bd70      	pop	{r4, r5, r6, pc}
 80166bc:	f44f 7061 	mov.w	r0, #900	; 0x384
 80166c0:	bd70      	pop	{r4, r5, r6, pc}
 80166c2:	f240 3086 	movw	r0, #902	; 0x386
 80166c6:	bd70      	pop	{r4, r5, r6, pc}
 80166c8:	200b      	movs	r0, #11
 80166ca:	4770      	bx	lr
 80166cc:	2001      	movs	r0, #1
 80166ce:	bd70      	pop	{r4, r5, r6, pc}
 80166d0:	200b      	movs	r0, #11
 80166d2:	bd70      	pop	{r4, r5, r6, pc}
 80166d4:	0000      	movs	r0, r0
	...

080166d8 <rcl_wait>:
 80166d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166dc:	b08f      	sub	sp, #60	; 0x3c
 80166de:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80166e2:	2800      	cmp	r0, #0
 80166e4:	f000 814c 	beq.w	8016980 <rcl_wait+0x2a8>
 80166e8:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80166ea:	4604      	mov	r4, r0
 80166ec:	2d00      	cmp	r5, #0
 80166ee:	f000 80bc 	beq.w	801686a <rcl_wait+0x192>
 80166f2:	6843      	ldr	r3, [r0, #4]
 80166f4:	b973      	cbnz	r3, 8016714 <rcl_wait+0x3c>
 80166f6:	68e3      	ldr	r3, [r4, #12]
 80166f8:	b963      	cbnz	r3, 8016714 <rcl_wait+0x3c>
 80166fa:	6963      	ldr	r3, [r4, #20]
 80166fc:	b953      	cbnz	r3, 8016714 <rcl_wait+0x3c>
 80166fe:	69e3      	ldr	r3, [r4, #28]
 8016700:	b943      	cbnz	r3, 8016714 <rcl_wait+0x3c>
 8016702:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016704:	b933      	cbnz	r3, 8016714 <rcl_wait+0x3c>
 8016706:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8016708:	b923      	cbnz	r3, 8016714 <rcl_wait+0x3c>
 801670a:	f240 3085 	movw	r0, #901	; 0x385
 801670e:	b00f      	add	sp, #60	; 0x3c
 8016710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016714:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016718:	2a01      	cmp	r2, #1
 801671a:	f173 0300 	sbcs.w	r3, r3, #0
 801671e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8016720:	db56      	blt.n	80167d0 <rcl_wait+0xf8>
 8016722:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8016726:	2900      	cmp	r1, #0
 8016728:	f000 8149 	beq.w	80169be <rcl_wait+0x2e6>
 801672c:	2300      	movs	r3, #0
 801672e:	9307      	str	r3, [sp, #28]
 8016730:	469b      	mov	fp, r3
 8016732:	f04f 0800 	mov.w	r8, #0
 8016736:	f04f 0900 	mov.w	r9, #0
 801673a:	e00d      	b.n	8016758 <rcl_wait+0x80>
 801673c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801673e:	6922      	ldr	r2, [r4, #16]
 8016740:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8016742:	f842 000a 	str.w	r0, [r2, sl]
 8016746:	f118 0801 	adds.w	r8, r8, #1
 801674a:	f149 0900 	adc.w	r9, r9, #0
 801674e:	2300      	movs	r3, #0
 8016750:	4599      	cmp	r9, r3
 8016752:	bf08      	it	eq
 8016754:	4588      	cmpeq	r8, r1
 8016756:	d243      	bcs.n	80167e0 <rcl_wait+0x108>
 8016758:	6922      	ldr	r2, [r4, #16]
 801675a:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 801675e:	f852 000a 	ldr.w	r0, [r2, sl]
 8016762:	2800      	cmp	r0, #0
 8016764:	d0ef      	beq.n	8016746 <rcl_wait+0x6e>
 8016766:	68e2      	ldr	r2, [r4, #12]
 8016768:	6969      	ldr	r1, [r5, #20]
 801676a:	4442      	add	r2, r8
 801676c:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 8016770:	b13b      	cbz	r3, 8016782 <rcl_wait+0xaa>
 8016772:	692a      	ldr	r2, [r5, #16]
 8016774:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8016778:	6921      	ldr	r1, [r4, #16]
 801677a:	3201      	adds	r2, #1
 801677c:	f851 000a 	ldr.w	r0, [r1, sl]
 8016780:	612a      	str	r2, [r5, #16]
 8016782:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 8016786:	f88d b027 	strb.w	fp, [sp, #39]	; 0x27
 801678a:	f7ff f9c1 	bl	8015b10 <rcl_timer_is_canceled>
 801678e:	2800      	cmp	r0, #0
 8016790:	d1bd      	bne.n	801670e <rcl_wait+0x36>
 8016792:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 8016796:	2a00      	cmp	r2, #0
 8016798:	d1d0      	bne.n	801673c <rcl_wait+0x64>
 801679a:	6922      	ldr	r2, [r4, #16]
 801679c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80167a0:	f852 000a 	ldr.w	r0, [r2, sl]
 80167a4:	a90a      	add	r1, sp, #40	; 0x28
 80167a6:	f04f 32ff 	mov.w	r2, #4294967295
 80167aa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80167ae:	f7ff f98b 	bl	8015ac8 <rcl_timer_get_time_until_next_call>
 80167b2:	2800      	cmp	r0, #0
 80167b4:	d1ab      	bne.n	801670e <rcl_wait+0x36>
 80167b6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80167ba:	42b2      	cmp	r2, r6
 80167bc:	eb73 0107 	sbcs.w	r1, r3, r7
 80167c0:	da03      	bge.n	80167ca <rcl_wait+0xf2>
 80167c2:	461f      	mov	r7, r3
 80167c4:	2301      	movs	r3, #1
 80167c6:	4616      	mov	r6, r2
 80167c8:	9307      	str	r3, [sp, #28]
 80167ca:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80167cc:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80167ce:	e7ba      	b.n	8016746 <rcl_wait+0x6e>
 80167d0:	2900      	cmp	r1, #0
 80167d2:	f000 80de 	beq.w	8016992 <rcl_wait+0x2ba>
 80167d6:	f04f 36ff 	mov.w	r6, #4294967295
 80167da:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 80167de:	e7a5      	b.n	801672c <rcl_wait+0x54>
 80167e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80167e4:	4313      	orrs	r3, r2
 80167e6:	d145      	bne.n	8016874 <rcl_wait+0x19c>
 80167e8:	2300      	movs	r3, #0
 80167ea:	2200      	movs	r2, #0
 80167ec:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80167f0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80167f4:	ab0a      	add	r3, sp, #40	; 0x28
 80167f6:	9302      	str	r3, [sp, #8]
 80167f8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80167fa:	9301      	str	r3, [sp, #4]
 80167fc:	f105 0334 	add.w	r3, r5, #52	; 0x34
 8016800:	9300      	str	r3, [sp, #0]
 8016802:	f105 0228 	add.w	r2, r5, #40	; 0x28
 8016806:	f105 031c 	add.w	r3, r5, #28
 801680a:	f105 0110 	add.w	r1, r5, #16
 801680e:	1d28      	adds	r0, r5, #4
 8016810:	f001 f98a 	bl	8017b28 <rmw_wait>
 8016814:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016816:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8016818:	4680      	mov	r8, r0
 801681a:	b30a      	cbz	r2, 8016860 <rcl_wait+0x188>
 801681c:	2500      	movs	r5, #0
 801681e:	462f      	mov	r7, r5
 8016820:	e004      	b.n	801682c <rcl_wait+0x154>
 8016822:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016824:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8016826:	3501      	adds	r5, #1
 8016828:	42aa      	cmp	r2, r5
 801682a:	d919      	bls.n	8016860 <rcl_wait+0x188>
 801682c:	6922      	ldr	r2, [r4, #16]
 801682e:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8016832:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 8016836:	00ae      	lsls	r6, r5, #2
 8016838:	2800      	cmp	r0, #0
 801683a:	d0f3      	beq.n	8016824 <rcl_wait+0x14c>
 801683c:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
 8016840:	f7ff f90a 	bl	8015a58 <rcl_timer_is_ready>
 8016844:	2800      	cmp	r0, #0
 8016846:	f47f af62 	bne.w	801670e <rcl_wait+0x36>
 801684a:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 801684e:	2a00      	cmp	r2, #0
 8016850:	d1e7      	bne.n	8016822 <rcl_wait+0x14a>
 8016852:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016854:	6921      	ldr	r1, [r4, #16]
 8016856:	518a      	str	r2, [r1, r6]
 8016858:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801685a:	3501      	adds	r5, #1
 801685c:	42aa      	cmp	r2, r5
 801685e:	d8e5      	bhi.n	801682c <rcl_wait+0x154>
 8016860:	f038 0002 	bics.w	r0, r8, #2
 8016864:	d029      	beq.n	80168ba <rcl_wait+0x1e2>
 8016866:	2001      	movs	r0, #1
 8016868:	e751      	b.n	801670e <rcl_wait+0x36>
 801686a:	f44f 7061 	mov.w	r0, #900	; 0x384
 801686e:	b00f      	add	sp, #60	; 0x3c
 8016870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016874:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016878:	2a01      	cmp	r2, #1
 801687a:	f173 0300 	sbcs.w	r3, r3, #0
 801687e:	f2c0 8083 	blt.w	8016988 <rcl_wait+0x2b0>
 8016882:	2e00      	cmp	r6, #0
 8016884:	f177 0300 	sbcs.w	r3, r7, #0
 8016888:	bfbc      	itt	lt
 801688a:	2600      	movlt	r6, #0
 801688c:	2700      	movlt	r7, #0
 801688e:	a34e      	add	r3, pc, #312	; (adr r3, 80169c8 <rcl_wait+0x2f0>)
 8016890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016894:	4630      	mov	r0, r6
 8016896:	4639      	mov	r1, r7
 8016898:	f7ea f9b0 	bl	8000bfc <__aeabi_ldivmod>
 801689c:	a34a      	add	r3, pc, #296	; (adr r3, 80169c8 <rcl_wait+0x2f0>)
 801689e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168a2:	4680      	mov	r8, r0
 80168a4:	4689      	mov	r9, r1
 80168a6:	4630      	mov	r0, r6
 80168a8:	4639      	mov	r1, r7
 80168aa:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80168ae:	f7ea f9a5 	bl	8000bfc <__aeabi_ldivmod>
 80168b2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80168b6:	ab0a      	add	r3, sp, #40	; 0x28
 80168b8:	e79d      	b.n	80167f6 <rcl_wait+0x11e>
 80168ba:	6866      	ldr	r6, [r4, #4]
 80168bc:	4602      	mov	r2, r0
 80168be:	b91e      	cbnz	r6, 80168c8 <rcl_wait+0x1f0>
 80168c0:	e00d      	b.n	80168de <rcl_wait+0x206>
 80168c2:	3201      	adds	r2, #1
 80168c4:	42b2      	cmp	r2, r6
 80168c6:	d00a      	beq.n	80168de <rcl_wait+0x206>
 80168c8:	6899      	ldr	r1, [r3, #8]
 80168ca:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80168ce:	2900      	cmp	r1, #0
 80168d0:	d1f7      	bne.n	80168c2 <rcl_wait+0x1ea>
 80168d2:	6825      	ldr	r5, [r4, #0]
 80168d4:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80168d8:	3201      	adds	r2, #1
 80168da:	42b2      	cmp	r2, r6
 80168dc:	d1f4      	bne.n	80168c8 <rcl_wait+0x1f0>
 80168de:	68e6      	ldr	r6, [r4, #12]
 80168e0:	2200      	movs	r2, #0
 80168e2:	b91e      	cbnz	r6, 80168ec <rcl_wait+0x214>
 80168e4:	e00d      	b.n	8016902 <rcl_wait+0x22a>
 80168e6:	3201      	adds	r2, #1
 80168e8:	42b2      	cmp	r2, r6
 80168ea:	d00a      	beq.n	8016902 <rcl_wait+0x22a>
 80168ec:	6959      	ldr	r1, [r3, #20]
 80168ee:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80168f2:	2900      	cmp	r1, #0
 80168f4:	d1f7      	bne.n	80168e6 <rcl_wait+0x20e>
 80168f6:	68a5      	ldr	r5, [r4, #8]
 80168f8:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80168fc:	3201      	adds	r2, #1
 80168fe:	42b2      	cmp	r2, r6
 8016900:	d1f4      	bne.n	80168ec <rcl_wait+0x214>
 8016902:	69e6      	ldr	r6, [r4, #28]
 8016904:	2200      	movs	r2, #0
 8016906:	b91e      	cbnz	r6, 8016910 <rcl_wait+0x238>
 8016908:	e00d      	b.n	8016926 <rcl_wait+0x24e>
 801690a:	3201      	adds	r2, #1
 801690c:	42b2      	cmp	r2, r6
 801690e:	d00a      	beq.n	8016926 <rcl_wait+0x24e>
 8016910:	6a19      	ldr	r1, [r3, #32]
 8016912:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016916:	2900      	cmp	r1, #0
 8016918:	d1f7      	bne.n	801690a <rcl_wait+0x232>
 801691a:	69a5      	ldr	r5, [r4, #24]
 801691c:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8016920:	3201      	adds	r2, #1
 8016922:	42b2      	cmp	r2, r6
 8016924:	d1f4      	bne.n	8016910 <rcl_wait+0x238>
 8016926:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016928:	2200      	movs	r2, #0
 801692a:	b91e      	cbnz	r6, 8016934 <rcl_wait+0x25c>
 801692c:	e00d      	b.n	801694a <rcl_wait+0x272>
 801692e:	3201      	adds	r2, #1
 8016930:	4296      	cmp	r6, r2
 8016932:	d00a      	beq.n	801694a <rcl_wait+0x272>
 8016934:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8016936:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801693a:	2900      	cmp	r1, #0
 801693c:	d1f7      	bne.n	801692e <rcl_wait+0x256>
 801693e:	6a25      	ldr	r5, [r4, #32]
 8016940:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8016944:	3201      	adds	r2, #1
 8016946:	4296      	cmp	r6, r2
 8016948:	d1f4      	bne.n	8016934 <rcl_wait+0x25c>
 801694a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801694c:	2200      	movs	r2, #0
 801694e:	b91e      	cbnz	r6, 8016958 <rcl_wait+0x280>
 8016950:	e00d      	b.n	801696e <rcl_wait+0x296>
 8016952:	3201      	adds	r2, #1
 8016954:	42b2      	cmp	r2, r6
 8016956:	d00a      	beq.n	801696e <rcl_wait+0x296>
 8016958:	6b99      	ldr	r1, [r3, #56]	; 0x38
 801695a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801695e:	2900      	cmp	r1, #0
 8016960:	d1f7      	bne.n	8016952 <rcl_wait+0x27a>
 8016962:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8016964:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8016968:	3201      	adds	r2, #1
 801696a:	42b2      	cmp	r2, r6
 801696c:	d1f4      	bne.n	8016958 <rcl_wait+0x280>
 801696e:	f1b8 0f02 	cmp.w	r8, #2
 8016972:	f47f aecc 	bne.w	801670e <rcl_wait+0x36>
 8016976:	9b07      	ldr	r3, [sp, #28]
 8016978:	2b00      	cmp	r3, #0
 801697a:	bf08      	it	eq
 801697c:	2002      	moveq	r0, #2
 801697e:	e6c6      	b.n	801670e <rcl_wait+0x36>
 8016980:	200b      	movs	r0, #11
 8016982:	b00f      	add	sp, #60	; 0x3c
 8016984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016988:	9b07      	ldr	r3, [sp, #28]
 801698a:	2b00      	cmp	r3, #0
 801698c:	f47f af79 	bne.w	8016882 <rcl_wait+0x1aa>
 8016990:	e731      	b.n	80167f6 <rcl_wait+0x11e>
 8016992:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016996:	4313      	orrs	r3, r2
 8016998:	bf08      	it	eq
 801699a:	9107      	streq	r1, [sp, #28]
 801699c:	f43f af24 	beq.w	80167e8 <rcl_wait+0x110>
 80169a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80169a4:	f04f 36ff 	mov.w	r6, #4294967295
 80169a8:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 80169ac:	2a01      	cmp	r2, #1
 80169ae:	f173 0300 	sbcs.w	r3, r3, #0
 80169b2:	f04f 0300 	mov.w	r3, #0
 80169b6:	9307      	str	r3, [sp, #28]
 80169b8:	f6bf af63 	bge.w	8016882 <rcl_wait+0x1aa>
 80169bc:	e71b      	b.n	80167f6 <rcl_wait+0x11e>
 80169be:	4632      	mov	r2, r6
 80169c0:	463b      	mov	r3, r7
 80169c2:	e7f3      	b.n	80169ac <rcl_wait+0x2d4>
 80169c4:	f3af 8000 	nop.w
 80169c8:	3b9aca00 	.word	0x3b9aca00
 80169cc:	00000000 	.word	0x00000000

080169d0 <__atomic_load_8>:
 80169d0:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80169d4:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 80169d8:	4b14      	ldr	r3, [pc, #80]	; (8016a2c <__atomic_load_8+0x5c>)
 80169da:	4a15      	ldr	r2, [pc, #84]	; (8016a30 <__atomic_load_8+0x60>)
 80169dc:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80169e0:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80169e4:	fb03 f301 	mul.w	r3, r3, r1
 80169e8:	ea83 33d3 	eor.w	r3, r3, r3, lsr #15
 80169ec:	fba2 1203 	umull	r1, r2, r2, r3
 80169f0:	0912      	lsrs	r2, r2, #4
 80169f2:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 80169f6:	b430      	push	{r4, r5}
 80169f8:	ebc2 02c1 	rsb	r2, r2, r1, lsl #3
 80169fc:	4c0d      	ldr	r4, [pc, #52]	; (8016a34 <__atomic_load_8+0x64>)
 80169fe:	1a9b      	subs	r3, r3, r2
 8016a00:	18e1      	adds	r1, r4, r3
 8016a02:	f04f 0501 	mov.w	r5, #1
 8016a06:	e8d1 2f4f 	ldrexb	r2, [r1]
 8016a0a:	e8c1 5f4c 	strexb	ip, r5, [r1]
 8016a0e:	f1bc 0f00 	cmp.w	ip, #0
 8016a12:	d1f8      	bne.n	8016a06 <__atomic_load_8+0x36>
 8016a14:	f3bf 8f5b 	dmb	ish
 8016a18:	b2d2      	uxtb	r2, r2
 8016a1a:	2a00      	cmp	r2, #0
 8016a1c:	d1f3      	bne.n	8016a06 <__atomic_load_8+0x36>
 8016a1e:	e9d0 0100 	ldrd	r0, r1, [r0]
 8016a22:	f3bf 8f5b 	dmb	ish
 8016a26:	54e2      	strb	r2, [r4, r3]
 8016a28:	bc30      	pop	{r4, r5}
 8016a2a:	4770      	bx	lr
 8016a2c:	27d4eb2d 	.word	0x27d4eb2d
 8016a30:	b21642c9 	.word	0xb21642c9
 8016a34:	20009c54 	.word	0x20009c54

08016a38 <__atomic_store_8>:
 8016a38:	b4f0      	push	{r4, r5, r6, r7}
 8016a3a:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 8016a3e:	f085 053d 	eor.w	r5, r5, #61	; 0x3d
 8016a42:	4914      	ldr	r1, [pc, #80]	; (8016a94 <__atomic_store_8+0x5c>)
 8016a44:	4c14      	ldr	r4, [pc, #80]	; (8016a98 <__atomic_store_8+0x60>)
 8016a46:	4e15      	ldr	r6, [pc, #84]	; (8016a9c <__atomic_store_8+0x64>)
 8016a48:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 8016a4c:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 8016a50:	fb01 f105 	mul.w	r1, r1, r5
 8016a54:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8016a58:	fba4 5401 	umull	r5, r4, r4, r1
 8016a5c:	0924      	lsrs	r4, r4, #4
 8016a5e:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8016a62:	ebc4 04c5 	rsb	r4, r4, r5, lsl #3
 8016a66:	1b09      	subs	r1, r1, r4
 8016a68:	1875      	adds	r5, r6, r1
 8016a6a:	f04f 0701 	mov.w	r7, #1
 8016a6e:	e8d5 4f4f 	ldrexb	r4, [r5]
 8016a72:	e8c5 7f4c 	strexb	ip, r7, [r5]
 8016a76:	f1bc 0f00 	cmp.w	ip, #0
 8016a7a:	d1f8      	bne.n	8016a6e <__atomic_store_8+0x36>
 8016a7c:	f3bf 8f5b 	dmb	ish
 8016a80:	b2e4      	uxtb	r4, r4
 8016a82:	2c00      	cmp	r4, #0
 8016a84:	d1f3      	bne.n	8016a6e <__atomic_store_8+0x36>
 8016a86:	e9c0 2300 	strd	r2, r3, [r0]
 8016a8a:	f3bf 8f5b 	dmb	ish
 8016a8e:	5474      	strb	r4, [r6, r1]
 8016a90:	bcf0      	pop	{r4, r5, r6, r7}
 8016a92:	4770      	bx	lr
 8016a94:	27d4eb2d 	.word	0x27d4eb2d
 8016a98:	b21642c9 	.word	0xb21642c9
 8016a9c:	20009c54 	.word	0x20009c54

08016aa0 <__atomic_exchange_8>:
 8016aa0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8016aa4:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 8016aa8:	f085 053d 	eor.w	r5, r5, #61	; 0x3d
 8016aac:	4c16      	ldr	r4, [pc, #88]	; (8016b08 <__atomic_exchange_8+0x68>)
 8016aae:	4917      	ldr	r1, [pc, #92]	; (8016b0c <__atomic_exchange_8+0x6c>)
 8016ab0:	4e17      	ldr	r6, [pc, #92]	; (8016b10 <__atomic_exchange_8+0x70>)
 8016ab2:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 8016ab6:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 8016aba:	fb04 f505 	mul.w	r5, r4, r5
 8016abe:	ea85 35d5 	eor.w	r5, r5, r5, lsr #15
 8016ac2:	fba1 4105 	umull	r4, r1, r1, r5
 8016ac6:	0909      	lsrs	r1, r1, #4
 8016ac8:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8016acc:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8016ad0:	1a6c      	subs	r4, r5, r1
 8016ad2:	1931      	adds	r1, r6, r4
 8016ad4:	f04f 0701 	mov.w	r7, #1
 8016ad8:	e8d1 5f4f 	ldrexb	r5, [r1]
 8016adc:	e8c1 7f4c 	strexb	ip, r7, [r1]
 8016ae0:	f1bc 0f00 	cmp.w	ip, #0
 8016ae4:	d1f8      	bne.n	8016ad8 <__atomic_exchange_8+0x38>
 8016ae6:	f3bf 8f5b 	dmb	ish
 8016aea:	b2ed      	uxtb	r5, r5
 8016aec:	2d00      	cmp	r5, #0
 8016aee:	d1f3      	bne.n	8016ad8 <__atomic_exchange_8+0x38>
 8016af0:	e9d0 8900 	ldrd	r8, r9, [r0]
 8016af4:	e9c0 2300 	strd	r2, r3, [r0]
 8016af8:	f3bf 8f5b 	dmb	ish
 8016afc:	5535      	strb	r5, [r6, r4]
 8016afe:	4640      	mov	r0, r8
 8016b00:	4649      	mov	r1, r9
 8016b02:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8016b06:	4770      	bx	lr
 8016b08:	27d4eb2d 	.word	0x27d4eb2d
 8016b0c:	b21642c9 	.word	0xb21642c9
 8016b10:	20009c54 	.word	0x20009c54

08016b14 <rcutils_is_directory>:
 8016b14:	2000      	movs	r0, #0
 8016b16:	4770      	bx	lr

08016b18 <rcutils_join_path>:
 8016b18:	b082      	sub	sp, #8
 8016b1a:	e88d 000c 	stmia.w	sp, {r2, r3}
 8016b1e:	2000      	movs	r0, #0
 8016b20:	b002      	add	sp, #8
 8016b22:	4770      	bx	lr

08016b24 <rcutils_to_native_path>:
 8016b24:	b084      	sub	sp, #16
 8016b26:	a801      	add	r0, sp, #4
 8016b28:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8016b2c:	b004      	add	sp, #16
 8016b2e:	2000      	movs	r0, #0
 8016b30:	4770      	bx	lr
 8016b32:	bf00      	nop

08016b34 <rcutils_format_string_limit>:
 8016b34:	b40f      	push	{r0, r1, r2, r3}
 8016b36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b38:	b083      	sub	sp, #12
 8016b3a:	ac08      	add	r4, sp, #32
 8016b3c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8016b3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8016b42:	b34e      	cbz	r6, 8016b98 <rcutils_format_string_limit+0x64>
 8016b44:	a808      	add	r0, sp, #32
 8016b46:	f7f8 fdf9 	bl	800f73c <rcutils_allocator_is_valid>
 8016b4a:	b328      	cbz	r0, 8016b98 <rcutils_format_string_limit+0x64>
 8016b4c:	2100      	movs	r1, #0
 8016b4e:	ab0f      	add	r3, sp, #60	; 0x3c
 8016b50:	4608      	mov	r0, r1
 8016b52:	4632      	mov	r2, r6
 8016b54:	e9cd 3300 	strd	r3, r3, [sp]
 8016b58:	f000 f904 	bl	8016d64 <rcutils_vsnprintf>
 8016b5c:	1c43      	adds	r3, r0, #1
 8016b5e:	4605      	mov	r5, r0
 8016b60:	d01a      	beq.n	8016b98 <rcutils_format_string_limit+0x64>
 8016b62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016b64:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016b66:	1c47      	adds	r7, r0, #1
 8016b68:	429f      	cmp	r7, r3
 8016b6a:	bf84      	itt	hi
 8016b6c:	461f      	movhi	r7, r3
 8016b6e:	f103 35ff 	addhi.w	r5, r3, #4294967295
 8016b72:	4638      	mov	r0, r7
 8016b74:	9b08      	ldr	r3, [sp, #32]
 8016b76:	4798      	blx	r3
 8016b78:	4604      	mov	r4, r0
 8016b7a:	b168      	cbz	r0, 8016b98 <rcutils_format_string_limit+0x64>
 8016b7c:	9b01      	ldr	r3, [sp, #4]
 8016b7e:	4632      	mov	r2, r6
 8016b80:	4639      	mov	r1, r7
 8016b82:	f000 f8ef 	bl	8016d64 <rcutils_vsnprintf>
 8016b86:	2800      	cmp	r0, #0
 8016b88:	db02      	blt.n	8016b90 <rcutils_format_string_limit+0x5c>
 8016b8a:	2300      	movs	r3, #0
 8016b8c:	5563      	strb	r3, [r4, r5]
 8016b8e:	e004      	b.n	8016b9a <rcutils_format_string_limit+0x66>
 8016b90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b92:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016b94:	4620      	mov	r0, r4
 8016b96:	4798      	blx	r3
 8016b98:	2400      	movs	r4, #0
 8016b9a:	4620      	mov	r0, r4
 8016b9c:	b003      	add	sp, #12
 8016b9e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016ba2:	b004      	add	sp, #16
 8016ba4:	4770      	bx	lr
 8016ba6:	bf00      	nop

08016ba8 <rcutils_get_env>:
 8016ba8:	b168      	cbz	r0, 8016bc6 <rcutils_get_env+0x1e>
 8016baa:	b510      	push	{r4, lr}
 8016bac:	460c      	mov	r4, r1
 8016bae:	b129      	cbz	r1, 8016bbc <rcutils_get_env+0x14>
 8016bb0:	f002 ff8c 	bl	8019acc <getenv>
 8016bb4:	b120      	cbz	r0, 8016bc0 <rcutils_get_env+0x18>
 8016bb6:	6020      	str	r0, [r4, #0]
 8016bb8:	2000      	movs	r0, #0
 8016bba:	bd10      	pop	{r4, pc}
 8016bbc:	4803      	ldr	r0, [pc, #12]	; (8016bcc <rcutils_get_env+0x24>)
 8016bbe:	bd10      	pop	{r4, pc}
 8016bc0:	4b03      	ldr	r3, [pc, #12]	; (8016bd0 <rcutils_get_env+0x28>)
 8016bc2:	6023      	str	r3, [r4, #0]
 8016bc4:	bd10      	pop	{r4, pc}
 8016bc6:	4803      	ldr	r0, [pc, #12]	; (8016bd4 <rcutils_get_env+0x2c>)
 8016bc8:	4770      	bx	lr
 8016bca:	bf00      	nop
 8016bcc:	0801bbe8 	.word	0x0801bbe8
 8016bd0:	0801bd0c 	.word	0x0801bd0c
 8016bd4:	0801bbcc 	.word	0x0801bbcc

08016bd8 <rcutils_repl_str>:
 8016bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bdc:	ed2d 8b02 	vpush	{d8}
 8016be0:	b087      	sub	sp, #28
 8016be2:	4680      	mov	r8, r0
 8016be4:	4608      	mov	r0, r1
 8016be6:	f8cd 8000 	str.w	r8, [sp]
 8016bea:	ee08 2a10 	vmov	s16, r2
 8016bee:	468a      	mov	sl, r1
 8016bf0:	4699      	mov	r9, r3
 8016bf2:	f7e9 faff 	bl	80001f4 <strlen>
 8016bf6:	2600      	movs	r6, #0
 8016bf8:	4647      	mov	r7, r8
 8016bfa:	9001      	str	r0, [sp, #4]
 8016bfc:	46b3      	mov	fp, r6
 8016bfe:	2510      	movs	r5, #16
 8016c00:	46b0      	mov	r8, r6
 8016c02:	e01d      	b.n	8016c40 <rcutils_repl_str+0x68>
 8016c04:	f10b 0b01 	add.w	fp, fp, #1
 8016c08:	455e      	cmp	r6, fp
 8016c0a:	d211      	bcs.n	8016c30 <rcutils_repl_str+0x58>
 8016c0c:	442e      	add	r6, r5
 8016c0e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8016c12:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8016c16:	00b1      	lsls	r1, r6, #2
 8016c18:	4798      	blx	r3
 8016c1a:	2800      	cmp	r0, #0
 8016c1c:	f000 8084 	beq.w	8016d28 <rcutils_repl_str+0x150>
 8016c20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016c24:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8016c28:	bf28      	it	cs
 8016c2a:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 8016c2e:	4680      	mov	r8, r0
 8016c30:	9a00      	ldr	r2, [sp, #0]
 8016c32:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8016c36:	1aa2      	subs	r2, r4, r2
 8016c38:	f843 2c04 	str.w	r2, [r3, #-4]
 8016c3c:	9b01      	ldr	r3, [sp, #4]
 8016c3e:	18e7      	adds	r7, r4, r3
 8016c40:	4651      	mov	r1, sl
 8016c42:	4638      	mov	r0, r7
 8016c44:	f003 fc6f 	bl	801a526 <strstr>
 8016c48:	4604      	mov	r4, r0
 8016c4a:	4640      	mov	r0, r8
 8016c4c:	2c00      	cmp	r4, #0
 8016c4e:	d1d9      	bne.n	8016c04 <rcutils_repl_str+0x2c>
 8016c50:	46b8      	mov	r8, r7
 8016c52:	4607      	mov	r7, r0
 8016c54:	4640      	mov	r0, r8
 8016c56:	f7e9 facd 	bl	80001f4 <strlen>
 8016c5a:	9b00      	ldr	r3, [sp, #0]
 8016c5c:	eba8 0303 	sub.w	r3, r8, r3
 8016c60:	181d      	adds	r5, r3, r0
 8016c62:	9504      	str	r5, [sp, #16]
 8016c64:	f1bb 0f00 	cmp.w	fp, #0
 8016c68:	d03d      	beq.n	8016ce6 <rcutils_repl_str+0x10e>
 8016c6a:	ee18 0a10 	vmov	r0, s16
 8016c6e:	f7e9 fac1 	bl	80001f4 <strlen>
 8016c72:	9b01      	ldr	r3, [sp, #4]
 8016c74:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016c78:	1ac3      	subs	r3, r0, r3
 8016c7a:	fb0b 5303 	mla	r3, fp, r3, r5
 8016c7e:	9305      	str	r3, [sp, #20]
 8016c80:	4606      	mov	r6, r0
 8016c82:	1c58      	adds	r0, r3, #1
 8016c84:	f8d9 3000 	ldr.w	r3, [r9]
 8016c88:	4798      	blx	r3
 8016c8a:	9003      	str	r0, [sp, #12]
 8016c8c:	2800      	cmp	r0, #0
 8016c8e:	d04c      	beq.n	8016d2a <rcutils_repl_str+0x152>
 8016c90:	683a      	ldr	r2, [r7, #0]
 8016c92:	9900      	ldr	r1, [sp, #0]
 8016c94:	f003 fd3f 	bl	801a716 <memcpy>
 8016c98:	9b03      	ldr	r3, [sp, #12]
 8016c9a:	683d      	ldr	r5, [r7, #0]
 8016c9c:	ee18 8a10 	vmov	r8, s16
 8016ca0:	441d      	add	r5, r3
 8016ca2:	f10b 33ff 	add.w	r3, fp, #4294967295
 8016ca6:	9302      	str	r3, [sp, #8]
 8016ca8:	46ba      	mov	sl, r7
 8016caa:	4632      	mov	r2, r6
 8016cac:	4641      	mov	r1, r8
 8016cae:	4628      	mov	r0, r5
 8016cb0:	f003 fd31 	bl	801a716 <memcpy>
 8016cb4:	9b01      	ldr	r3, [sp, #4]
 8016cb6:	f85a 2b04 	ldr.w	r2, [sl], #4
 8016cba:	441a      	add	r2, r3
 8016cbc:	9b00      	ldr	r3, [sp, #0]
 8016cbe:	1899      	adds	r1, r3, r2
 8016cc0:	9b02      	ldr	r3, [sp, #8]
 8016cc2:	4435      	add	r5, r6
 8016cc4:	429c      	cmp	r4, r3
 8016cc6:	4628      	mov	r0, r5
 8016cc8:	d025      	beq.n	8016d16 <rcutils_repl_str+0x13e>
 8016cca:	f8da 3000 	ldr.w	r3, [sl]
 8016cce:	3401      	adds	r4, #1
 8016cd0:	1a9a      	subs	r2, r3, r2
 8016cd2:	4415      	add	r5, r2
 8016cd4:	f003 fd1f 	bl	801a716 <memcpy>
 8016cd8:	455c      	cmp	r4, fp
 8016cda:	d3e6      	bcc.n	8016caa <rcutils_repl_str+0xd2>
 8016cdc:	9a03      	ldr	r2, [sp, #12]
 8016cde:	9905      	ldr	r1, [sp, #20]
 8016ce0:	2300      	movs	r3, #0
 8016ce2:	5453      	strb	r3, [r2, r1]
 8016ce4:	e00b      	b.n	8016cfe <rcutils_repl_str+0x126>
 8016ce6:	4628      	mov	r0, r5
 8016ce8:	f8d9 3000 	ldr.w	r3, [r9]
 8016cec:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016cf0:	3001      	adds	r0, #1
 8016cf2:	4798      	blx	r3
 8016cf4:	9003      	str	r0, [sp, #12]
 8016cf6:	b110      	cbz	r0, 8016cfe <rcutils_repl_str+0x126>
 8016cf8:	9900      	ldr	r1, [sp, #0]
 8016cfa:	f003 fd04 	bl	801a706 <strcpy>
 8016cfe:	4638      	mov	r0, r7
 8016d00:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8016d04:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016d08:	4798      	blx	r3
 8016d0a:	9803      	ldr	r0, [sp, #12]
 8016d0c:	b007      	add	sp, #28
 8016d0e:	ecbd 8b02 	vpop	{d8}
 8016d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d16:	9b04      	ldr	r3, [sp, #16]
 8016d18:	3401      	adds	r4, #1
 8016d1a:	1a9a      	subs	r2, r3, r2
 8016d1c:	4415      	add	r5, r2
 8016d1e:	f003 fcfa 	bl	801a716 <memcpy>
 8016d22:	455c      	cmp	r4, fp
 8016d24:	d3c1      	bcc.n	8016caa <rcutils_repl_str+0xd2>
 8016d26:	e7d9      	b.n	8016cdc <rcutils_repl_str+0x104>
 8016d28:	4647      	mov	r7, r8
 8016d2a:	2300      	movs	r3, #0
 8016d2c:	9303      	str	r3, [sp, #12]
 8016d2e:	e7e6      	b.n	8016cfe <rcutils_repl_str+0x126>

08016d30 <rcutils_snprintf>:
 8016d30:	b40c      	push	{r2, r3}
 8016d32:	b530      	push	{r4, r5, lr}
 8016d34:	b083      	sub	sp, #12
 8016d36:	ab06      	add	r3, sp, #24
 8016d38:	f853 2b04 	ldr.w	r2, [r3], #4
 8016d3c:	9301      	str	r3, [sp, #4]
 8016d3e:	b152      	cbz	r2, 8016d56 <rcutils_snprintf+0x26>
 8016d40:	b138      	cbz	r0, 8016d52 <rcutils_snprintf+0x22>
 8016d42:	b141      	cbz	r1, 8016d56 <rcutils_snprintf+0x26>
 8016d44:	f003 fb0a 	bl	801a35c <vsniprintf>
 8016d48:	b003      	add	sp, #12
 8016d4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016d4e:	b002      	add	sp, #8
 8016d50:	4770      	bx	lr
 8016d52:	2900      	cmp	r1, #0
 8016d54:	d0f6      	beq.n	8016d44 <rcutils_snprintf+0x14>
 8016d56:	f003 fca9 	bl	801a6ac <__errno>
 8016d5a:	2316      	movs	r3, #22
 8016d5c:	6003      	str	r3, [r0, #0]
 8016d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8016d62:	e7f1      	b.n	8016d48 <rcutils_snprintf+0x18>

08016d64 <rcutils_vsnprintf>:
 8016d64:	b570      	push	{r4, r5, r6, lr}
 8016d66:	b13a      	cbz	r2, 8016d78 <rcutils_vsnprintf+0x14>
 8016d68:	b120      	cbz	r0, 8016d74 <rcutils_vsnprintf+0x10>
 8016d6a:	b129      	cbz	r1, 8016d78 <rcutils_vsnprintf+0x14>
 8016d6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016d70:	f003 baf4 	b.w	801a35c <vsniprintf>
 8016d74:	2900      	cmp	r1, #0
 8016d76:	d0f9      	beq.n	8016d6c <rcutils_vsnprintf+0x8>
 8016d78:	f003 fc98 	bl	801a6ac <__errno>
 8016d7c:	2316      	movs	r3, #22
 8016d7e:	6003      	str	r3, [r0, #0]
 8016d80:	f04f 30ff 	mov.w	r0, #4294967295
 8016d84:	bd70      	pop	{r4, r5, r6, pc}
 8016d86:	bf00      	nop

08016d88 <rcutils_strdup>:
 8016d88:	b084      	sub	sp, #16
 8016d8a:	b570      	push	{r4, r5, r6, lr}
 8016d8c:	b082      	sub	sp, #8
 8016d8e:	ac07      	add	r4, sp, #28
 8016d90:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8016d94:	4605      	mov	r5, r0
 8016d96:	b1b0      	cbz	r0, 8016dc6 <rcutils_strdup+0x3e>
 8016d98:	f7e9 fa2c 	bl	80001f4 <strlen>
 8016d9c:	1c42      	adds	r2, r0, #1
 8016d9e:	9b07      	ldr	r3, [sp, #28]
 8016da0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016da2:	9201      	str	r2, [sp, #4]
 8016da4:	4606      	mov	r6, r0
 8016da6:	4610      	mov	r0, r2
 8016da8:	4798      	blx	r3
 8016daa:	4604      	mov	r4, r0
 8016dac:	b128      	cbz	r0, 8016dba <rcutils_strdup+0x32>
 8016dae:	9a01      	ldr	r2, [sp, #4]
 8016db0:	4629      	mov	r1, r5
 8016db2:	f003 fcb0 	bl	801a716 <memcpy>
 8016db6:	2300      	movs	r3, #0
 8016db8:	55a3      	strb	r3, [r4, r6]
 8016dba:	4620      	mov	r0, r4
 8016dbc:	b002      	add	sp, #8
 8016dbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016dc2:	b004      	add	sp, #16
 8016dc4:	4770      	bx	lr
 8016dc6:	4604      	mov	r4, r0
 8016dc8:	e7f7      	b.n	8016dba <rcutils_strdup+0x32>
 8016dca:	bf00      	nop

08016dcc <rcutils_strndup>:
 8016dcc:	b082      	sub	sp, #8
 8016dce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016dd0:	460e      	mov	r6, r1
 8016dd2:	a906      	add	r1, sp, #24
 8016dd4:	e881 000c 	stmia.w	r1, {r2, r3}
 8016dd8:	4605      	mov	r5, r0
 8016dda:	b180      	cbz	r0, 8016dfe <rcutils_strndup+0x32>
 8016ddc:	1c77      	adds	r7, r6, #1
 8016dde:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016de0:	4638      	mov	r0, r7
 8016de2:	4790      	blx	r2
 8016de4:	4604      	mov	r4, r0
 8016de6:	b128      	cbz	r0, 8016df4 <rcutils_strndup+0x28>
 8016de8:	463a      	mov	r2, r7
 8016dea:	4629      	mov	r1, r5
 8016dec:	f003 fc93 	bl	801a716 <memcpy>
 8016df0:	2300      	movs	r3, #0
 8016df2:	55a3      	strb	r3, [r4, r6]
 8016df4:	4620      	mov	r0, r4
 8016df6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016dfa:	b002      	add	sp, #8
 8016dfc:	4770      	bx	lr
 8016dfe:	4604      	mov	r4, r0
 8016e00:	e7f8      	b.n	8016df4 <rcutils_strndup+0x28>
 8016e02:	bf00      	nop

08016e04 <rmw_get_zero_initialized_context>:
 8016e04:	b510      	push	{r4, lr}
 8016e06:	2250      	movs	r2, #80	; 0x50
 8016e08:	4604      	mov	r4, r0
 8016e0a:	2100      	movs	r1, #0
 8016e0c:	f003 fb64 	bl	801a4d8 <memset>
 8016e10:	4620      	mov	r0, r4
 8016e12:	bd10      	pop	{r4, pc}

08016e14 <rmw_get_zero_initialized_init_options>:
 8016e14:	b510      	push	{r4, lr}
 8016e16:	2238      	movs	r2, #56	; 0x38
 8016e18:	4604      	mov	r4, r0
 8016e1a:	2100      	movs	r1, #0
 8016e1c:	f003 fb5c 	bl	801a4d8 <memset>
 8016e20:	f104 0010 	add.w	r0, r4, #16
 8016e24:	f000 f806 	bl	8016e34 <rmw_get_default_security_options>
 8016e28:	f04f 33ff 	mov.w	r3, #4294967295
 8016e2c:	60e3      	str	r3, [r4, #12]
 8016e2e:	4620      	mov	r0, r4
 8016e30:	bd10      	pop	{r4, pc}
 8016e32:	bf00      	nop

08016e34 <rmw_get_default_security_options>:
 8016e34:	2200      	movs	r2, #0
 8016e36:	7002      	strb	r2, [r0, #0]
 8016e38:	6042      	str	r2, [r0, #4]
 8016e3a:	4770      	bx	lr

08016e3c <rmw_validate_namespace_with_size>:
 8016e3c:	b340      	cbz	r0, 8016e90 <rmw_validate_namespace_with_size+0x54>
 8016e3e:	b5d0      	push	{r4, r6, r7, lr}
 8016e40:	4614      	mov	r4, r2
 8016e42:	b0c2      	sub	sp, #264	; 0x108
 8016e44:	b332      	cbz	r2, 8016e94 <rmw_validate_namespace_with_size+0x58>
 8016e46:	2901      	cmp	r1, #1
 8016e48:	460f      	mov	r7, r1
 8016e4a:	461e      	mov	r6, r3
 8016e4c:	d102      	bne.n	8016e54 <rmw_validate_namespace_with_size+0x18>
 8016e4e:	7803      	ldrb	r3, [r0, #0]
 8016e50:	2b2f      	cmp	r3, #47	; 0x2f
 8016e52:	d019      	beq.n	8016e88 <rmw_validate_namespace_with_size+0x4c>
 8016e54:	aa01      	add	r2, sp, #4
 8016e56:	4669      	mov	r1, sp
 8016e58:	f7f8 fe44 	bl	800fae4 <rmw_validate_full_topic_name>
 8016e5c:	b990      	cbnz	r0, 8016e84 <rmw_validate_namespace_with_size+0x48>
 8016e5e:	9b00      	ldr	r3, [sp, #0]
 8016e60:	b14b      	cbz	r3, 8016e76 <rmw_validate_namespace_with_size+0x3a>
 8016e62:	2b07      	cmp	r3, #7
 8016e64:	d007      	beq.n	8016e76 <rmw_validate_namespace_with_size+0x3a>
 8016e66:	1e5a      	subs	r2, r3, #1
 8016e68:	2a05      	cmp	r2, #5
 8016e6a:	d82b      	bhi.n	8016ec4 <rmw_validate_namespace_with_size+0x88>
 8016e6c:	e8df f002 	tbb	[pc, r2]
 8016e70:	24211e1b 	.word	0x24211e1b
 8016e74:	1427      	.short	0x1427
 8016e76:	2ff5      	cmp	r7, #245	; 0xf5
 8016e78:	d906      	bls.n	8016e88 <rmw_validate_namespace_with_size+0x4c>
 8016e7a:	2307      	movs	r3, #7
 8016e7c:	6023      	str	r3, [r4, #0]
 8016e7e:	b10e      	cbz	r6, 8016e84 <rmw_validate_namespace_with_size+0x48>
 8016e80:	23f4      	movs	r3, #244	; 0xf4
 8016e82:	6033      	str	r3, [r6, #0]
 8016e84:	b042      	add	sp, #264	; 0x108
 8016e86:	bdd0      	pop	{r4, r6, r7, pc}
 8016e88:	2000      	movs	r0, #0
 8016e8a:	6020      	str	r0, [r4, #0]
 8016e8c:	b042      	add	sp, #264	; 0x108
 8016e8e:	bdd0      	pop	{r4, r6, r7, pc}
 8016e90:	200b      	movs	r0, #11
 8016e92:	4770      	bx	lr
 8016e94:	200b      	movs	r0, #11
 8016e96:	e7f5      	b.n	8016e84 <rmw_validate_namespace_with_size+0x48>
 8016e98:	2306      	movs	r3, #6
 8016e9a:	6023      	str	r3, [r4, #0]
 8016e9c:	2e00      	cmp	r6, #0
 8016e9e:	d0f1      	beq.n	8016e84 <rmw_validate_namespace_with_size+0x48>
 8016ea0:	9b01      	ldr	r3, [sp, #4]
 8016ea2:	6033      	str	r3, [r6, #0]
 8016ea4:	e7ee      	b.n	8016e84 <rmw_validate_namespace_with_size+0x48>
 8016ea6:	2301      	movs	r3, #1
 8016ea8:	6023      	str	r3, [r4, #0]
 8016eaa:	e7f7      	b.n	8016e9c <rmw_validate_namespace_with_size+0x60>
 8016eac:	2302      	movs	r3, #2
 8016eae:	6023      	str	r3, [r4, #0]
 8016eb0:	e7f4      	b.n	8016e9c <rmw_validate_namespace_with_size+0x60>
 8016eb2:	2303      	movs	r3, #3
 8016eb4:	6023      	str	r3, [r4, #0]
 8016eb6:	e7f1      	b.n	8016e9c <rmw_validate_namespace_with_size+0x60>
 8016eb8:	2304      	movs	r3, #4
 8016eba:	6023      	str	r3, [r4, #0]
 8016ebc:	e7ee      	b.n	8016e9c <rmw_validate_namespace_with_size+0x60>
 8016ebe:	2305      	movs	r3, #5
 8016ec0:	6023      	str	r3, [r4, #0]
 8016ec2:	e7eb      	b.n	8016e9c <rmw_validate_namespace_with_size+0x60>
 8016ec4:	4a03      	ldr	r2, [pc, #12]	; (8016ed4 <rmw_validate_namespace_with_size+0x98>)
 8016ec6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8016eca:	a802      	add	r0, sp, #8
 8016ecc:	f7ff ff30 	bl	8016d30 <rcutils_snprintf>
 8016ed0:	2001      	movs	r0, #1
 8016ed2:	e7d7      	b.n	8016e84 <rmw_validate_namespace_with_size+0x48>
 8016ed4:	0801bc04 	.word	0x0801bc04

08016ed8 <rmw_validate_namespace>:
 8016ed8:	b168      	cbz	r0, 8016ef6 <rmw_validate_namespace+0x1e>
 8016eda:	b570      	push	{r4, r5, r6, lr}
 8016edc:	460d      	mov	r5, r1
 8016ede:	4616      	mov	r6, r2
 8016ee0:	4604      	mov	r4, r0
 8016ee2:	f7e9 f987 	bl	80001f4 <strlen>
 8016ee6:	4633      	mov	r3, r6
 8016ee8:	4601      	mov	r1, r0
 8016eea:	462a      	mov	r2, r5
 8016eec:	4620      	mov	r0, r4
 8016eee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016ef2:	f7ff bfa3 	b.w	8016e3c <rmw_validate_namespace_with_size>
 8016ef6:	200b      	movs	r0, #11
 8016ef8:	4770      	bx	lr
 8016efa:	bf00      	nop

08016efc <rmw_namespace_validation_result_string>:
 8016efc:	2807      	cmp	r0, #7
 8016efe:	bf9a      	itte	ls
 8016f00:	4b02      	ldrls	r3, [pc, #8]	; (8016f0c <rmw_namespace_validation_result_string+0x10>)
 8016f02:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8016f06:	4802      	ldrhi	r0, [pc, #8]	; (8016f10 <rmw_namespace_validation_result_string+0x14>)
 8016f08:	4770      	bx	lr
 8016f0a:	bf00      	nop
 8016f0c:	0801bdfc 	.word	0x0801bdfc
 8016f10:	0801bc54 	.word	0x0801bc54

08016f14 <rmw_validate_node_name>:
 8016f14:	2800      	cmp	r0, #0
 8016f16:	d03b      	beq.n	8016f90 <rmw_validate_node_name+0x7c>
 8016f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f1c:	460f      	mov	r7, r1
 8016f1e:	2900      	cmp	r1, #0
 8016f20:	d038      	beq.n	8016f94 <rmw_validate_node_name+0x80>
 8016f22:	4615      	mov	r5, r2
 8016f24:	4604      	mov	r4, r0
 8016f26:	f7e9 f965 	bl	80001f4 <strlen>
 8016f2a:	b1e0      	cbz	r0, 8016f66 <rmw_validate_node_name+0x52>
 8016f2c:	1e63      	subs	r3, r4, #1
 8016f2e:	eb03 0e00 	add.w	lr, r3, r0
 8016f32:	f1c4 0c01 	rsb	ip, r4, #1
 8016f36:	eb0c 0803 	add.w	r8, ip, r3
 8016f3a:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 8016f3e:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
 8016f42:	f026 0220 	bic.w	r2, r6, #32
 8016f46:	2909      	cmp	r1, #9
 8016f48:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
 8016f4c:	d913      	bls.n	8016f76 <rmw_validate_node_name+0x62>
 8016f4e:	2a19      	cmp	r2, #25
 8016f50:	d911      	bls.n	8016f76 <rmw_validate_node_name+0x62>
 8016f52:	2e5f      	cmp	r6, #95	; 0x5f
 8016f54:	d00f      	beq.n	8016f76 <rmw_validate_node_name+0x62>
 8016f56:	2302      	movs	r3, #2
 8016f58:	603b      	str	r3, [r7, #0]
 8016f5a:	b10d      	cbz	r5, 8016f60 <rmw_validate_node_name+0x4c>
 8016f5c:	f8c5 8000 	str.w	r8, [r5]
 8016f60:	2000      	movs	r0, #0
 8016f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f66:	2301      	movs	r3, #1
 8016f68:	603b      	str	r3, [r7, #0]
 8016f6a:	2d00      	cmp	r5, #0
 8016f6c:	d0f8      	beq.n	8016f60 <rmw_validate_node_name+0x4c>
 8016f6e:	2000      	movs	r0, #0
 8016f70:	6028      	str	r0, [r5, #0]
 8016f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f76:	4573      	cmp	r3, lr
 8016f78:	d1dd      	bne.n	8016f36 <rmw_validate_node_name+0x22>
 8016f7a:	7822      	ldrb	r2, [r4, #0]
 8016f7c:	4b0d      	ldr	r3, [pc, #52]	; (8016fb4 <rmw_validate_node_name+0xa0>)
 8016f7e:	5cd3      	ldrb	r3, [r2, r3]
 8016f80:	f013 0304 	ands.w	r3, r3, #4
 8016f84:	d110      	bne.n	8016fa8 <rmw_validate_node_name+0x94>
 8016f86:	28ff      	cmp	r0, #255	; 0xff
 8016f88:	d806      	bhi.n	8016f98 <rmw_validate_node_name+0x84>
 8016f8a:	603b      	str	r3, [r7, #0]
 8016f8c:	4618      	mov	r0, r3
 8016f8e:	e7e8      	b.n	8016f62 <rmw_validate_node_name+0x4e>
 8016f90:	200b      	movs	r0, #11
 8016f92:	4770      	bx	lr
 8016f94:	200b      	movs	r0, #11
 8016f96:	e7e4      	b.n	8016f62 <rmw_validate_node_name+0x4e>
 8016f98:	2204      	movs	r2, #4
 8016f9a:	603a      	str	r2, [r7, #0]
 8016f9c:	2d00      	cmp	r5, #0
 8016f9e:	d0df      	beq.n	8016f60 <rmw_validate_node_name+0x4c>
 8016fa0:	22fe      	movs	r2, #254	; 0xfe
 8016fa2:	4618      	mov	r0, r3
 8016fa4:	602a      	str	r2, [r5, #0]
 8016fa6:	e7dc      	b.n	8016f62 <rmw_validate_node_name+0x4e>
 8016fa8:	2303      	movs	r3, #3
 8016faa:	603b      	str	r3, [r7, #0]
 8016fac:	2d00      	cmp	r5, #0
 8016fae:	d1de      	bne.n	8016f6e <rmw_validate_node_name+0x5a>
 8016fb0:	e7d6      	b.n	8016f60 <rmw_validate_node_name+0x4c>
 8016fb2:	bf00      	nop
 8016fb4:	0801c1c0 	.word	0x0801c1c0

08016fb8 <rmw_node_name_validation_result_string>:
 8016fb8:	2804      	cmp	r0, #4
 8016fba:	bf9a      	itte	ls
 8016fbc:	4b02      	ldrls	r3, [pc, #8]	; (8016fc8 <rmw_node_name_validation_result_string+0x10>)
 8016fbe:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8016fc2:	4802      	ldrhi	r0, [pc, #8]	; (8016fcc <rmw_node_name_validation_result_string+0x14>)
 8016fc4:	4770      	bx	lr
 8016fc6:	bf00      	nop
 8016fc8:	0801bf08 	.word	0x0801bf08
 8016fcc:	0801be1c 	.word	0x0801be1c

08016fd0 <get_memory>:
 8016fd0:	4603      	mov	r3, r0
 8016fd2:	6840      	ldr	r0, [r0, #4]
 8016fd4:	b158      	cbz	r0, 8016fee <get_memory+0x1e>
 8016fd6:	6882      	ldr	r2, [r0, #8]
 8016fd8:	605a      	str	r2, [r3, #4]
 8016fda:	b10a      	cbz	r2, 8016fe0 <get_memory+0x10>
 8016fdc:	2100      	movs	r1, #0
 8016fde:	6051      	str	r1, [r2, #4]
 8016fe0:	681a      	ldr	r2, [r3, #0]
 8016fe2:	6082      	str	r2, [r0, #8]
 8016fe4:	b102      	cbz	r2, 8016fe8 <get_memory+0x18>
 8016fe6:	6050      	str	r0, [r2, #4]
 8016fe8:	2200      	movs	r2, #0
 8016fea:	6042      	str	r2, [r0, #4]
 8016fec:	6018      	str	r0, [r3, #0]
 8016fee:	4770      	bx	lr

08016ff0 <put_memory>:
 8016ff0:	684b      	ldr	r3, [r1, #4]
 8016ff2:	b10b      	cbz	r3, 8016ff8 <put_memory+0x8>
 8016ff4:	688a      	ldr	r2, [r1, #8]
 8016ff6:	609a      	str	r2, [r3, #8]
 8016ff8:	688a      	ldr	r2, [r1, #8]
 8016ffa:	b102      	cbz	r2, 8016ffe <put_memory+0xe>
 8016ffc:	6053      	str	r3, [r2, #4]
 8016ffe:	6803      	ldr	r3, [r0, #0]
 8017000:	428b      	cmp	r3, r1
 8017002:	6843      	ldr	r3, [r0, #4]
 8017004:	bf08      	it	eq
 8017006:	6002      	streq	r2, [r0, #0]
 8017008:	608b      	str	r3, [r1, #8]
 801700a:	b103      	cbz	r3, 801700e <put_memory+0x1e>
 801700c:	6059      	str	r1, [r3, #4]
 801700e:	2300      	movs	r3, #0
 8017010:	604b      	str	r3, [r1, #4]
 8017012:	6041      	str	r1, [r0, #4]
 8017014:	4770      	bx	lr
 8017016:	bf00      	nop

08017018 <rmw_destroy_client>:
 8017018:	b570      	push	{r4, r5, r6, lr}
 801701a:	b128      	cbz	r0, 8017028 <rmw_destroy_client+0x10>
 801701c:	4604      	mov	r4, r0
 801701e:	6800      	ldr	r0, [r0, #0]
 8017020:	460d      	mov	r5, r1
 8017022:	f7f9 fc3d 	bl	80108a0 <is_uxrce_rmw_identifier_valid>
 8017026:	b910      	cbnz	r0, 801702e <rmw_destroy_client+0x16>
 8017028:	2401      	movs	r4, #1
 801702a:	4620      	mov	r0, r4
 801702c:	bd70      	pop	{r4, r5, r6, pc}
 801702e:	6863      	ldr	r3, [r4, #4]
 8017030:	2b00      	cmp	r3, #0
 8017032:	d0f9      	beq.n	8017028 <rmw_destroy_client+0x10>
 8017034:	2d00      	cmp	r5, #0
 8017036:	d0f7      	beq.n	8017028 <rmw_destroy_client+0x10>
 8017038:	6828      	ldr	r0, [r5, #0]
 801703a:	f7f9 fc31 	bl	80108a0 <is_uxrce_rmw_identifier_valid>
 801703e:	2800      	cmp	r0, #0
 8017040:	d0f2      	beq.n	8017028 <rmw_destroy_client+0x10>
 8017042:	686e      	ldr	r6, [r5, #4]
 8017044:	2e00      	cmp	r6, #0
 8017046:	d0ef      	beq.n	8017028 <rmw_destroy_client+0x10>
 8017048:	6864      	ldr	r4, [r4, #4]
 801704a:	6932      	ldr	r2, [r6, #16]
 801704c:	6920      	ldr	r0, [r4, #16]
 801704e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8017052:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017056:	6819      	ldr	r1, [r3, #0]
 8017058:	f7fa ff20 	bl	8011e9c <uxr_buffer_cancel_data>
 801705c:	4602      	mov	r2, r0
 801705e:	6920      	ldr	r0, [r4, #16]
 8017060:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8017064:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8017068:	f7f9 fb9a 	bl	80107a0 <run_xrce_session>
 801706c:	6920      	ldr	r0, [r4, #16]
 801706e:	6932      	ldr	r2, [r6, #16]
 8017070:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8017074:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017078:	6819      	ldr	r1, [r3, #0]
 801707a:	f7fa fca5 	bl	80119c8 <uxr_buffer_delete_entity>
 801707e:	4602      	mov	r2, r0
 8017080:	6920      	ldr	r0, [r4, #16]
 8017082:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8017086:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801708a:	f7f9 fb89 	bl	80107a0 <run_xrce_session>
 801708e:	2800      	cmp	r0, #0
 8017090:	4628      	mov	r0, r5
 8017092:	bf14      	ite	ne
 8017094:	2400      	movne	r4, #0
 8017096:	2402      	moveq	r4, #2
 8017098:	f7f9 fa72 	bl	8010580 <rmw_uxrce_fini_client_memory>
 801709c:	e7c5      	b.n	801702a <rmw_destroy_client+0x12>
 801709e:	bf00      	nop

080170a0 <rmw_get_implementation_identifier>:
 80170a0:	4b01      	ldr	r3, [pc, #4]	; (80170a8 <rmw_get_implementation_identifier+0x8>)
 80170a2:	6818      	ldr	r0, [r3, #0]
 80170a4:	4770      	bx	lr
 80170a6:	bf00      	nop
 80170a8:	0801bf34 	.word	0x0801bf34

080170ac <rmw_init_options_init>:
 80170ac:	b084      	sub	sp, #16
 80170ae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80170b2:	ad09      	add	r5, sp, #36	; 0x24
 80170b4:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 80170b8:	b130      	cbz	r0, 80170c8 <rmw_init_options_init+0x1c>
 80170ba:	4604      	mov	r4, r0
 80170bc:	4628      	mov	r0, r5
 80170be:	f7f8 fb3d 	bl	800f73c <rcutils_allocator_is_valid>
 80170c2:	b108      	cbz	r0, 80170c8 <rmw_init_options_init+0x1c>
 80170c4:	68a3      	ldr	r3, [r4, #8]
 80170c6:	b123      	cbz	r3, 80170d2 <rmw_init_options_init+0x26>
 80170c8:	200b      	movs	r0, #11
 80170ca:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80170ce:	b004      	add	sp, #16
 80170d0:	4770      	bx	lr
 80170d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80170d4:	4f1c      	ldr	r7, [pc, #112]	; (8017148 <rmw_init_options_init+0x9c>)
 80170d6:	682e      	ldr	r6, [r5, #0]
 80170d8:	683d      	ldr	r5, [r7, #0]
 80170da:	60a5      	str	r5, [r4, #8]
 80170dc:	f04f 0800 	mov.w	r8, #0
 80170e0:	f04f 0900 	mov.w	r9, #0
 80170e4:	f104 0520 	add.w	r5, r4, #32
 80170e8:	e9c4 8900 	strd	r8, r9, [r4]
 80170ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80170ee:	4b17      	ldr	r3, [pc, #92]	; (801714c <rmw_init_options_init+0xa0>)
 80170f0:	4817      	ldr	r0, [pc, #92]	; (8017150 <rmw_init_options_init+0xa4>)
 80170f2:	602e      	str	r6, [r5, #0]
 80170f4:	4917      	ldr	r1, [pc, #92]	; (8017154 <rmw_init_options_init+0xa8>)
 80170f6:	61e3      	str	r3, [r4, #28]
 80170f8:	2203      	movs	r2, #3
 80170fa:	f7f9 f991 	bl	8010420 <rmw_uxrce_init_init_options_impl_memory>
 80170fe:	4814      	ldr	r0, [pc, #80]	; (8017150 <rmw_init_options_init+0xa4>)
 8017100:	f7ff ff66 	bl	8016fd0 <get_memory>
 8017104:	b1e8      	cbz	r0, 8017142 <rmw_init_options_init+0x96>
 8017106:	4a14      	ldr	r2, [pc, #80]	; (8017158 <rmw_init_options_init+0xac>)
 8017108:	68c3      	ldr	r3, [r0, #12]
 801710a:	6851      	ldr	r1, [r2, #4]
 801710c:	7810      	ldrb	r0, [r2, #0]
 801710e:	6363      	str	r3, [r4, #52]	; 0x34
 8017110:	7418      	strb	r0, [r3, #16]
 8017112:	6159      	str	r1, [r3, #20]
 8017114:	e9d2 5002 	ldrd	r5, r0, [r2, #8]
 8017118:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 801711c:	e9c3 5006 	strd	r5, r0, [r3, #24]
 8017120:	e9c3 1208 	strd	r1, r2, [r3, #32]
 8017124:	f7fc f9e8 	bl	80134f8 <uxr_nanos>
 8017128:	f002 fdd4 	bl	8019cd4 <srand>
 801712c:	f002 fe00 	bl	8019d30 <rand>
 8017130:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017132:	6298      	str	r0, [r3, #40]	; 0x28
 8017134:	2800      	cmp	r0, #0
 8017136:	d0f9      	beq.n	801712c <rmw_init_options_init+0x80>
 8017138:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801713c:	2000      	movs	r0, #0
 801713e:	b004      	add	sp, #16
 8017140:	4770      	bx	lr
 8017142:	2001      	movs	r0, #1
 8017144:	e7c1      	b.n	80170ca <rmw_init_options_init+0x1e>
 8017146:	bf00      	nop
 8017148:	0801bf34 	.word	0x0801bf34
 801714c:	0801baa8 	.word	0x0801baa8
 8017150:	2000d1e4 	.word	0x2000d1e4
 8017154:	2000ce38 	.word	0x2000ce38
 8017158:	20009ec8 	.word	0x20009ec8

0801715c <rmw_init_options_copy>:
 801715c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801715e:	b158      	cbz	r0, 8017178 <rmw_init_options_copy+0x1c>
 8017160:	460e      	mov	r6, r1
 8017162:	b149      	cbz	r1, 8017178 <rmw_init_options_copy+0x1c>
 8017164:	4604      	mov	r4, r0
 8017166:	6880      	ldr	r0, [r0, #8]
 8017168:	b120      	cbz	r0, 8017174 <rmw_init_options_copy+0x18>
 801716a:	4b1b      	ldr	r3, [pc, #108]	; (80171d8 <rmw_init_options_copy+0x7c>)
 801716c:	6819      	ldr	r1, [r3, #0]
 801716e:	f7e9 f837 	bl	80001e0 <strcmp>
 8017172:	bb60      	cbnz	r0, 80171ce <rmw_init_options_copy+0x72>
 8017174:	68b3      	ldr	r3, [r6, #8]
 8017176:	b113      	cbz	r3, 801717e <rmw_init_options_copy+0x22>
 8017178:	230b      	movs	r3, #11
 801717a:	4618      	mov	r0, r3
 801717c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801717e:	4623      	mov	r3, r4
 8017180:	4632      	mov	r2, r6
 8017182:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8017186:	681d      	ldr	r5, [r3, #0]
 8017188:	6858      	ldr	r0, [r3, #4]
 801718a:	6899      	ldr	r1, [r3, #8]
 801718c:	68df      	ldr	r7, [r3, #12]
 801718e:	60d7      	str	r7, [r2, #12]
 8017190:	3310      	adds	r3, #16
 8017192:	4563      	cmp	r3, ip
 8017194:	6015      	str	r5, [r2, #0]
 8017196:	6050      	str	r0, [r2, #4]
 8017198:	6091      	str	r1, [r2, #8]
 801719a:	f102 0210 	add.w	r2, r2, #16
 801719e:	d1f2      	bne.n	8017186 <rmw_init_options_copy+0x2a>
 80171a0:	6819      	ldr	r1, [r3, #0]
 80171a2:	685b      	ldr	r3, [r3, #4]
 80171a4:	480d      	ldr	r0, [pc, #52]	; (80171dc <rmw_init_options_copy+0x80>)
 80171a6:	6053      	str	r3, [r2, #4]
 80171a8:	6011      	str	r1, [r2, #0]
 80171aa:	f7ff ff11 	bl	8016fd0 <get_memory>
 80171ae:	b188      	cbz	r0, 80171d4 <rmw_init_options_copy+0x78>
 80171b0:	68c5      	ldr	r5, [r0, #12]
 80171b2:	6375      	str	r5, [r6, #52]	; 0x34
 80171b4:	6b66      	ldr	r6, [r4, #52]	; 0x34
 80171b6:	3610      	adds	r6, #16
 80171b8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80171ba:	f105 0410 	add.w	r4, r5, #16
 80171be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80171c0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80171c4:	2300      	movs	r3, #0
 80171c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80171ca:	4618      	mov	r0, r3
 80171cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80171ce:	230c      	movs	r3, #12
 80171d0:	4618      	mov	r0, r3
 80171d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80171d4:	2301      	movs	r3, #1
 80171d6:	e7d0      	b.n	801717a <rmw_init_options_copy+0x1e>
 80171d8:	0801bf34 	.word	0x0801bf34
 80171dc:	2000d1e4 	.word	0x2000d1e4

080171e0 <rmw_init_options_fini>:
 80171e0:	2800      	cmp	r0, #0
 80171e2:	d036      	beq.n	8017252 <rmw_init_options_fini+0x72>
 80171e4:	b530      	push	{r4, r5, lr}
 80171e6:	4604      	mov	r4, r0
 80171e8:	b08f      	sub	sp, #60	; 0x3c
 80171ea:	3020      	adds	r0, #32
 80171ec:	f7f8 faa6 	bl	800f73c <rcutils_allocator_is_valid>
 80171f0:	b328      	cbz	r0, 801723e <rmw_init_options_fini+0x5e>
 80171f2:	68a0      	ldr	r0, [r4, #8]
 80171f4:	b120      	cbz	r0, 8017200 <rmw_init_options_fini+0x20>
 80171f6:	4b18      	ldr	r3, [pc, #96]	; (8017258 <rmw_init_options_fini+0x78>)
 80171f8:	6819      	ldr	r1, [r3, #0]
 80171fa:	f7e8 fff1 	bl	80001e0 <strcmp>
 80171fe:	bb30      	cbnz	r0, 801724e <rmw_init_options_fini+0x6e>
 8017200:	4b16      	ldr	r3, [pc, #88]	; (801725c <rmw_init_options_fini+0x7c>)
 8017202:	6819      	ldr	r1, [r3, #0]
 8017204:	b1f9      	cbz	r1, 8017246 <rmw_init_options_fini+0x66>
 8017206:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8017208:	e001      	b.n	801720e <rmw_init_options_fini+0x2e>
 801720a:	6889      	ldr	r1, [r1, #8]
 801720c:	b1d9      	cbz	r1, 8017246 <rmw_init_options_fini+0x66>
 801720e:	68cb      	ldr	r3, [r1, #12]
 8017210:	429a      	cmp	r2, r3
 8017212:	d1fa      	bne.n	801720a <rmw_init_options_fini+0x2a>
 8017214:	4811      	ldr	r0, [pc, #68]	; (801725c <rmw_init_options_fini+0x7c>)
 8017216:	f7ff feeb 	bl	8016ff0 <put_memory>
 801721a:	466d      	mov	r5, sp
 801721c:	4668      	mov	r0, sp
 801721e:	f7ff fdf9 	bl	8016e14 <rmw_get_zero_initialized_init_options>
 8017222:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017224:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017226:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017228:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801722a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801722c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801722e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8017232:	e884 0003 	stmia.w	r4, {r0, r1}
 8017236:	2300      	movs	r3, #0
 8017238:	4618      	mov	r0, r3
 801723a:	b00f      	add	sp, #60	; 0x3c
 801723c:	bd30      	pop	{r4, r5, pc}
 801723e:	230b      	movs	r3, #11
 8017240:	4618      	mov	r0, r3
 8017242:	b00f      	add	sp, #60	; 0x3c
 8017244:	bd30      	pop	{r4, r5, pc}
 8017246:	2301      	movs	r3, #1
 8017248:	4618      	mov	r0, r3
 801724a:	b00f      	add	sp, #60	; 0x3c
 801724c:	bd30      	pop	{r4, r5, pc}
 801724e:	230c      	movs	r3, #12
 8017250:	e7f2      	b.n	8017238 <rmw_init_options_fini+0x58>
 8017252:	230b      	movs	r3, #11
 8017254:	4618      	mov	r0, r3
 8017256:	4770      	bx	lr
 8017258:	0801bf34 	.word	0x0801bf34
 801725c:	2000d1e4 	.word	0x2000d1e4

08017260 <rmw_init>:
 8017260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017264:	b082      	sub	sp, #8
 8017266:	2800      	cmp	r0, #0
 8017268:	f000 80d6 	beq.w	8017418 <rmw_init+0x1b8>
 801726c:	460e      	mov	r6, r1
 801726e:	2900      	cmp	r1, #0
 8017270:	f000 80d2 	beq.w	8017418 <rmw_init+0x1b8>
 8017274:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8017276:	4605      	mov	r5, r0
 8017278:	2b00      	cmp	r3, #0
 801727a:	f000 80cd 	beq.w	8017418 <rmw_init+0x1b8>
 801727e:	4b79      	ldr	r3, [pc, #484]	; (8017464 <rmw_init+0x204>)
 8017280:	6880      	ldr	r0, [r0, #8]
 8017282:	f8d3 9000 	ldr.w	r9, [r3]
 8017286:	b128      	cbz	r0, 8017294 <rmw_init+0x34>
 8017288:	4649      	mov	r1, r9
 801728a:	f7e8 ffa9 	bl	80001e0 <strcmp>
 801728e:	2800      	cmp	r0, #0
 8017290:	f040 80cc 	bne.w	801742c <rmw_init+0x1cc>
 8017294:	e9d5 0100 	ldrd	r0, r1, [r5]
 8017298:	68eb      	ldr	r3, [r5, #12]
 801729a:	61f3      	str	r3, [r6, #28]
 801729c:	e9c6 0100 	strd	r0, r1, [r6]
 80172a0:	2201      	movs	r2, #1
 80172a2:	4971      	ldr	r1, [pc, #452]	; (8017468 <rmw_init+0x208>)
 80172a4:	4871      	ldr	r0, [pc, #452]	; (801746c <rmw_init+0x20c>)
 80172a6:	f8c6 9008 	str.w	r9, [r6, #8]
 80172aa:	f7f9 f861 	bl	8010370 <rmw_uxrce_init_session_memory>
 80172ae:	4870      	ldr	r0, [pc, #448]	; (8017470 <rmw_init+0x210>)
 80172b0:	4970      	ldr	r1, [pc, #448]	; (8017474 <rmw_init+0x214>)
 80172b2:	2204      	movs	r2, #4
 80172b4:	f7f9 f896 	bl	80103e4 <rmw_uxrce_init_static_input_buffer_memory>
 80172b8:	486c      	ldr	r0, [pc, #432]	; (801746c <rmw_init+0x20c>)
 80172ba:	f7ff fe89 	bl	8016fd0 <get_memory>
 80172be:	2800      	cmp	r0, #0
 80172c0:	f000 80af 	beq.w	8017422 <rmw_init+0x1c2>
 80172c4:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 80172c6:	68c4      	ldr	r4, [r0, #12]
 80172c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80172ca:	7c39      	ldrb	r1, [r7, #16]
 80172cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80172d0:	9001      	str	r0, [sp, #4]
 80172d2:	6a38      	ldr	r0, [r7, #32]
 80172d4:	9000      	str	r0, [sp, #0]
 80172d6:	f104 0a10 	add.w	sl, r4, #16
 80172da:	4650      	mov	r0, sl
 80172dc:	f000 ffe8 	bl	80182b0 <uxr_set_custom_transport_callbacks>
 80172e0:	f241 5294 	movw	r2, #5524	; 0x1594
 80172e4:	f241 5398 	movw	r3, #5528	; 0x1598
 80172e8:	f04f 0800 	mov.w	r8, #0
 80172ec:	f241 509c 	movw	r0, #5532	; 0x159c
 80172f0:	f504 51ad 	add.w	r1, r4, #5536	; 0x15a0
 80172f4:	f844 8002 	str.w	r8, [r4, r2]
 80172f8:	f844 8003 	str.w	r8, [r4, r3]
 80172fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017300:	f504 735e 	add.w	r3, r4, #888	; 0x378
 8017304:	f844 8000 	str.w	r8, [r4, r0]
 8017308:	e9c4 33e1 	strd	r3, r3, [r4, #900]	; 0x384
 801730c:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 8017310:	4859      	ldr	r0, [pc, #356]	; (8017478 <rmw_init+0x218>)
 8017312:	f8c1 8000 	str.w	r8, [r1]
 8017316:	2201      	movs	r2, #1
 8017318:	e9c4 98da 	strd	r9, r8, [r4, #872]	; 0x368
 801731c:	4957      	ldr	r1, [pc, #348]	; (801747c <rmw_init+0x21c>)
 801731e:	64b4      	str	r4, [r6, #72]	; 0x48
 8017320:	f7f9 f80c 	bl	801033c <rmw_uxrce_init_node_memory>
 8017324:	4956      	ldr	r1, [pc, #344]	; (8017480 <rmw_init+0x220>)
 8017326:	4857      	ldr	r0, [pc, #348]	; (8017484 <rmw_init+0x224>)
 8017328:	2205      	movs	r2, #5
 801732a:	f7f8 ffed 	bl	8010308 <rmw_uxrce_init_subscription_memory>
 801732e:	4956      	ldr	r1, [pc, #344]	; (8017488 <rmw_init+0x228>)
 8017330:	4856      	ldr	r0, [pc, #344]	; (801748c <rmw_init+0x22c>)
 8017332:	220a      	movs	r2, #10
 8017334:	f7f8 ffce 	bl	80102d4 <rmw_uxrce_init_publisher_memory>
 8017338:	4955      	ldr	r1, [pc, #340]	; (8017490 <rmw_init+0x230>)
 801733a:	4856      	ldr	r0, [pc, #344]	; (8017494 <rmw_init+0x234>)
 801733c:	2201      	movs	r2, #1
 801733e:	f7f8 ff95 	bl	801026c <rmw_uxrce_init_service_memory>
 8017342:	4955      	ldr	r1, [pc, #340]	; (8017498 <rmw_init+0x238>)
 8017344:	4855      	ldr	r0, [pc, #340]	; (801749c <rmw_init+0x23c>)
 8017346:	2201      	movs	r2, #1
 8017348:	f7f8 ffaa 	bl	80102a0 <rmw_uxrce_init_client_memory>
 801734c:	4954      	ldr	r1, [pc, #336]	; (80174a0 <rmw_init+0x240>)
 801734e:	4855      	ldr	r0, [pc, #340]	; (80174a4 <rmw_init+0x244>)
 8017350:	220f      	movs	r2, #15
 8017352:	f7f9 f82b 	bl	80103ac <rmw_uxrce_init_topic_memory>
 8017356:	4954      	ldr	r1, [pc, #336]	; (80174a8 <rmw_init+0x248>)
 8017358:	4854      	ldr	r0, [pc, #336]	; (80174ac <rmw_init+0x24c>)
 801735a:	2203      	movs	r2, #3
 801735c:	f7f9 f860 	bl	8010420 <rmw_uxrce_init_init_options_impl_memory>
 8017360:	4953      	ldr	r1, [pc, #332]	; (80174b0 <rmw_init+0x250>)
 8017362:	4854      	ldr	r0, [pc, #336]	; (80174b4 <rmw_init+0x254>)
 8017364:	2204      	movs	r2, #4
 8017366:	f7f9 f875 	bl	8010454 <rmw_uxrce_init_wait_set_memory>
 801736a:	4953      	ldr	r1, [pc, #332]	; (80174b8 <rmw_init+0x258>)
 801736c:	4853      	ldr	r0, [pc, #332]	; (80174bc <rmw_init+0x25c>)
 801736e:	2204      	movs	r2, #4
 8017370:	f7f9 f88c 	bl	801048c <rmw_uxrce_init_guard_condition_memory>
 8017374:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8017376:	6cb0      	ldr	r0, [r6, #72]	; 0x48
 8017378:	4642      	mov	r2, r8
 801737a:	f000 fbbd 	bl	8017af8 <rmw_uxrce_transport_init>
 801737e:	4607      	mov	r7, r0
 8017380:	2800      	cmp	r0, #0
 8017382:	d158      	bne.n	8017436 <rmw_init+0x1d6>
 8017384:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8017386:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 801738a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801738c:	4628      	mov	r0, r5
 801738e:	f504 7122 	add.w	r1, r4, #648	; 0x288
 8017392:	f7fa fefd 	bl	8012190 <uxr_init_session>
 8017396:	494a      	ldr	r1, [pc, #296]	; (80174c0 <rmw_init+0x260>)
 8017398:	4622      	mov	r2, r4
 801739a:	4628      	mov	r0, r5
 801739c:	f7fa ff1a 	bl	80121d4 <uxr_set_topic_callback>
 80173a0:	4948      	ldr	r1, [pc, #288]	; (80174c4 <rmw_init+0x264>)
 80173a2:	463a      	mov	r2, r7
 80173a4:	4628      	mov	r0, r5
 80173a6:	f7fa ff11 	bl	80121cc <uxr_set_status_callback>
 80173aa:	4947      	ldr	r1, [pc, #284]	; (80174c8 <rmw_init+0x268>)
 80173ac:	463a      	mov	r2, r7
 80173ae:	4628      	mov	r0, r5
 80173b0:	f7fa ff14 	bl	80121dc <uxr_set_request_callback>
 80173b4:	4945      	ldr	r1, [pc, #276]	; (80174cc <rmw_init+0x26c>)
 80173b6:	463a      	mov	r2, r7
 80173b8:	4628      	mov	r0, r5
 80173ba:	f7fa ff13 	bl	80121e4 <uxr_set_reply_callback>
 80173be:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 80173c2:	2304      	movs	r3, #4
 80173c4:	0092      	lsls	r2, r2, #2
 80173c6:	f504 7165 	add.w	r1, r4, #916	; 0x394
 80173ca:	4628      	mov	r0, r5
 80173cc:	f7fa ff4a 	bl	8012264 <uxr_create_input_reliable_stream>
 80173d0:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 80173d4:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 80173d8:	0092      	lsls	r2, r2, #2
 80173da:	2304      	movs	r3, #4
 80173dc:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 80173e0:	4628      	mov	r0, r5
 80173e2:	f7fa ff15 	bl	8012210 <uxr_create_output_reliable_stream>
 80173e6:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 80173ea:	4628      	mov	r0, r5
 80173ec:	f7fa ff34 	bl	8012258 <uxr_create_input_best_effort_stream>
 80173f0:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 80173f4:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 80173f8:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 80173fc:	4628      	mov	r0, r5
 80173fe:	3114      	adds	r1, #20
 8017400:	f7fa fef4 	bl	80121ec <uxr_create_output_best_effort_stream>
 8017404:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 8017408:	4628      	mov	r0, r5
 801740a:	f7fb fb85 	bl	8012b18 <uxr_create_session>
 801740e:	b1f8      	cbz	r0, 8017450 <rmw_init+0x1f0>
 8017410:	4638      	mov	r0, r7
 8017412:	b002      	add	sp, #8
 8017414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017418:	270b      	movs	r7, #11
 801741a:	4638      	mov	r0, r7
 801741c:	b002      	add	sp, #8
 801741e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017422:	2701      	movs	r7, #1
 8017424:	4638      	mov	r0, r7
 8017426:	b002      	add	sp, #8
 8017428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801742c:	270c      	movs	r7, #12
 801742e:	4638      	mov	r0, r7
 8017430:	b002      	add	sp, #8
 8017432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017436:	4650      	mov	r0, sl
 8017438:	f000 ff7a 	bl	8018330 <uxr_close_custom_transport>
 801743c:	480b      	ldr	r0, [pc, #44]	; (801746c <rmw_init+0x20c>)
 801743e:	4621      	mov	r1, r4
 8017440:	f7ff fdd6 	bl	8016ff0 <put_memory>
 8017444:	4638      	mov	r0, r7
 8017446:	f8c6 8048 	str.w	r8, [r6, #72]	; 0x48
 801744a:	b002      	add	sp, #8
 801744c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017450:	4650      	mov	r0, sl
 8017452:	f000 ff6d 	bl	8018330 <uxr_close_custom_transport>
 8017456:	4805      	ldr	r0, [pc, #20]	; (801746c <rmw_init+0x20c>)
 8017458:	4621      	mov	r1, r4
 801745a:	f7ff fdc9 	bl	8016ff0 <put_memory>
 801745e:	64b7      	str	r7, [r6, #72]	; 0x48
 8017460:	2701      	movs	r7, #1
 8017462:	e7d5      	b.n	8017410 <rmw_init+0x1b0>
 8017464:	0801bf34 	.word	0x0801bf34
 8017468:	2000d2c0 	.word	0x2000d2c0
 801746c:	2000d090 	.word	0x2000d090
 8017470:	20009ee8 	.word	0x20009ee8
 8017474:	2000acc8 	.word	0x2000acc8
 8017478:	2000cebc 	.word	0x2000cebc
 801747c:	2000d0a0 	.word	0x2000d0a0
 8017480:	2000a7f0 	.word	0x2000a7f0
 8017484:	2000d154 	.word	0x2000d154
 8017488:	20009f08 	.word	0x20009f08
 801748c:	20009ef8 	.word	0x20009ef8
 8017490:	2000d1f8 	.word	0x2000d1f8
 8017494:	2000d144 	.word	0x2000d144
 8017498:	2000ac00 	.word	0x2000ac00
 801749c:	2000a778 	.word	0x2000a778
 80174a0:	2000cecc 	.word	0x2000cecc
 80174a4:	2000d080 	.word	0x2000d080
 80174a8:	2000ce38 	.word	0x2000ce38
 80174ac:	2000d1e4 	.word	0x2000d1e4
 80174b0:	2000cdc8 	.word	0x2000cdc8
 80174b4:	2000e868 	.word	0x2000e868
 80174b8:	2000d164 	.word	0x2000d164
 80174bc:	2000d070 	.word	0x2000d070
 80174c0:	08019881 	.word	0x08019881
 80174c4:	08019879 	.word	0x08019879
 80174c8:	08019915 	.word	0x08019915
 80174cc:	080199ad 	.word	0x080199ad

080174d0 <rmw_context_fini>:
 80174d0:	4b17      	ldr	r3, [pc, #92]	; (8017530 <rmw_context_fini+0x60>)
 80174d2:	b570      	push	{r4, r5, r6, lr}
 80174d4:	681c      	ldr	r4, [r3, #0]
 80174d6:	4605      	mov	r5, r0
 80174d8:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80174da:	b33c      	cbz	r4, 801752c <rmw_context_fini+0x5c>
 80174dc:	2600      	movs	r6, #0
 80174de:	e9d4 4302 	ldrd	r4, r3, [r4, #8]
 80174e2:	691a      	ldr	r2, [r3, #16]
 80174e4:	4282      	cmp	r2, r0
 80174e6:	d018      	beq.n	801751a <rmw_context_fini+0x4a>
 80174e8:	2c00      	cmp	r4, #0
 80174ea:	d1f8      	bne.n	80174de <rmw_context_fini+0xe>
 80174ec:	b188      	cbz	r0, 8017512 <rmw_context_fini+0x42>
 80174ee:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80174f2:	789b      	ldrb	r3, [r3, #2]
 80174f4:	2b01      	cmp	r3, #1
 80174f6:	bf14      	ite	ne
 80174f8:	210a      	movne	r1, #10
 80174fa:	2100      	moveq	r1, #0
 80174fc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017500:	f7fb fccc 	bl	8012e9c <uxr_delete_session_retries>
 8017504:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8017506:	f7f8 ffdb 	bl	80104c0 <rmw_uxrce_fini_session_memory>
 801750a:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 801750c:	3010      	adds	r0, #16
 801750e:	f000 ff0f 	bl	8018330 <uxr_close_custom_transport>
 8017512:	2300      	movs	r3, #0
 8017514:	4630      	mov	r0, r6
 8017516:	64ab      	str	r3, [r5, #72]	; 0x48
 8017518:	bd70      	pop	{r4, r5, r6, pc}
 801751a:	f103 0018 	add.w	r0, r3, #24
 801751e:	f000 f91f 	bl	8017760 <rmw_destroy_node>
 8017522:	4606      	mov	r6, r0
 8017524:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 8017526:	2c00      	cmp	r4, #0
 8017528:	d1d9      	bne.n	80174de <rmw_context_fini+0xe>
 801752a:	e7df      	b.n	80174ec <rmw_context_fini+0x1c>
 801752c:	4626      	mov	r6, r4
 801752e:	e7dd      	b.n	80174ec <rmw_context_fini+0x1c>
 8017530:	2000cebc 	.word	0x2000cebc

08017534 <create_topic>:
 8017534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017538:	4605      	mov	r5, r0
 801753a:	b084      	sub	sp, #16
 801753c:	482b      	ldr	r0, [pc, #172]	; (80175ec <create_topic+0xb8>)
 801753e:	460f      	mov	r7, r1
 8017540:	4616      	mov	r6, r2
 8017542:	f7ff fd45 	bl	8016fd0 <get_memory>
 8017546:	4604      	mov	r4, r0
 8017548:	2800      	cmp	r0, #0
 801754a:	d036      	beq.n	80175ba <create_topic+0x86>
 801754c:	692a      	ldr	r2, [r5, #16]
 801754e:	68c4      	ldr	r4, [r0, #12]
 8017550:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80175f4 <create_topic+0xc0>
 8017554:	61a5      	str	r5, [r4, #24]
 8017556:	f241 5396 	movw	r3, #5526	; 0x1596
 801755a:	6166      	str	r6, [r4, #20]
 801755c:	5ad0      	ldrh	r0, [r2, r3]
 801755e:	1c41      	adds	r1, r0, #1
 8017560:	52d1      	strh	r1, [r2, r3]
 8017562:	2102      	movs	r1, #2
 8017564:	f7fa fc32 	bl	8011dcc <uxr_object_id>
 8017568:	4641      	mov	r1, r8
 801756a:	6120      	str	r0, [r4, #16]
 801756c:	223c      	movs	r2, #60	; 0x3c
 801756e:	4638      	mov	r0, r7
 8017570:	f7f9 f97c 	bl	801086c <generate_topic_name>
 8017574:	4607      	mov	r7, r0
 8017576:	b320      	cbz	r0, 80175c2 <create_topic+0x8e>
 8017578:	4f1d      	ldr	r7, [pc, #116]	; (80175f0 <create_topic+0xbc>)
 801757a:	4630      	mov	r0, r6
 801757c:	4639      	mov	r1, r7
 801757e:	2264      	movs	r2, #100	; 0x64
 8017580:	f7f9 f944 	bl	801080c <generate_type_name>
 8017584:	4606      	mov	r6, r0
 8017586:	b320      	cbz	r0, 80175d2 <create_topic+0x9e>
 8017588:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
 801758c:	2106      	movs	r1, #6
 801758e:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8017592:	9701      	str	r7, [sp, #4]
 8017594:	f8cd 8000 	str.w	r8, [sp]
 8017598:	9102      	str	r1, [sp, #8]
 801759a:	6811      	ldr	r1, [r2, #0]
 801759c:	6922      	ldr	r2, [r4, #16]
 801759e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80175a2:	f7fa fa8f 	bl	8011ac4 <uxr_buffer_create_topic_bin>
 80175a6:	4602      	mov	r2, r0
 80175a8:	6928      	ldr	r0, [r5, #16]
 80175aa:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80175ae:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80175b2:	f7f9 f8f5 	bl	80107a0 <run_xrce_session>
 80175b6:	4605      	mov	r5, r0
 80175b8:	b198      	cbz	r0, 80175e2 <create_topic+0xae>
 80175ba:	4620      	mov	r0, r4
 80175bc:	b004      	add	sp, #16
 80175be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175c2:	4620      	mov	r0, r4
 80175c4:	f7f8 fff2 	bl	80105ac <rmw_uxrce_fini_topic_memory>
 80175c8:	463c      	mov	r4, r7
 80175ca:	4620      	mov	r0, r4
 80175cc:	b004      	add	sp, #16
 80175ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175d2:	4620      	mov	r0, r4
 80175d4:	f7f8 ffea 	bl	80105ac <rmw_uxrce_fini_topic_memory>
 80175d8:	4634      	mov	r4, r6
 80175da:	4620      	mov	r0, r4
 80175dc:	b004      	add	sp, #16
 80175de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175e2:	4620      	mov	r0, r4
 80175e4:	f7f8 ffe2 	bl	80105ac <rmw_uxrce_fini_topic_memory>
 80175e8:	462c      	mov	r4, r5
 80175ea:	e7e6      	b.n	80175ba <create_topic+0x86>
 80175ec:	2000d080 	.word	0x2000d080
 80175f0:	20009ca8 	.word	0x20009ca8
 80175f4:	20009c6c 	.word	0x20009c6c

080175f8 <destroy_topic>:
 80175f8:	b538      	push	{r3, r4, r5, lr}
 80175fa:	6985      	ldr	r5, [r0, #24]
 80175fc:	b1d5      	cbz	r5, 8017634 <destroy_topic+0x3c>
 80175fe:	4604      	mov	r4, r0
 8017600:	6928      	ldr	r0, [r5, #16]
 8017602:	6922      	ldr	r2, [r4, #16]
 8017604:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8017608:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801760c:	6819      	ldr	r1, [r3, #0]
 801760e:	f7fa f9db 	bl	80119c8 <uxr_buffer_delete_entity>
 8017612:	4602      	mov	r2, r0
 8017614:	6928      	ldr	r0, [r5, #16]
 8017616:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801761a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801761e:	f7f9 f8bf 	bl	80107a0 <run_xrce_session>
 8017622:	2800      	cmp	r0, #0
 8017624:	4620      	mov	r0, r4
 8017626:	bf14      	ite	ne
 8017628:	2400      	movne	r4, #0
 801762a:	2402      	moveq	r4, #2
 801762c:	f7f8 ffbe 	bl	80105ac <rmw_uxrce_fini_topic_memory>
 8017630:	4620      	mov	r0, r4
 8017632:	bd38      	pop	{r3, r4, r5, pc}
 8017634:	2401      	movs	r4, #1
 8017636:	4620      	mov	r0, r4
 8017638:	bd38      	pop	{r3, r4, r5, pc}
 801763a:	bf00      	nop

0801763c <create_node>:
 801763c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017640:	b083      	sub	sp, #12
 8017642:	2b00      	cmp	r3, #0
 8017644:	d05f      	beq.n	8017706 <create_node+0xca>
 8017646:	4606      	mov	r6, r0
 8017648:	4835      	ldr	r0, [pc, #212]	; (8017720 <create_node+0xe4>)
 801764a:	460f      	mov	r7, r1
 801764c:	4690      	mov	r8, r2
 801764e:	461d      	mov	r5, r3
 8017650:	f7ff fcbe 	bl	8016fd0 <get_memory>
 8017654:	2800      	cmp	r0, #0
 8017656:	d056      	beq.n	8017706 <create_node+0xca>
 8017658:	68c4      	ldr	r4, [r0, #12]
 801765a:	6cab      	ldr	r3, [r5, #72]	; 0x48
 801765c:	6123      	str	r3, [r4, #16]
 801765e:	f7ff fd1f 	bl	80170a0 <rmw_get_implementation_identifier>
 8017662:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 8017666:	e9c4 0406 	strd	r0, r4, [r4, #24]
 801766a:	f8c4 9020 	str.w	r9, [r4, #32]
 801766e:	4630      	mov	r0, r6
 8017670:	f7e8 fdc0 	bl	80001f4 <strlen>
 8017674:	1c42      	adds	r2, r0, #1
 8017676:	2a3c      	cmp	r2, #60	; 0x3c
 8017678:	f104 0518 	add.w	r5, r4, #24
 801767c:	d840      	bhi.n	8017700 <create_node+0xc4>
 801767e:	4648      	mov	r0, r9
 8017680:	4631      	mov	r1, r6
 8017682:	f104 0968 	add.w	r9, r4, #104	; 0x68
 8017686:	f003 f846 	bl	801a716 <memcpy>
 801768a:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 801768e:	4638      	mov	r0, r7
 8017690:	f7e8 fdb0 	bl	80001f4 <strlen>
 8017694:	1c42      	adds	r2, r0, #1
 8017696:	2a3c      	cmp	r2, #60	; 0x3c
 8017698:	d832      	bhi.n	8017700 <create_node+0xc4>
 801769a:	4639      	mov	r1, r7
 801769c:	4648      	mov	r0, r9
 801769e:	f003 f83a 	bl	801a716 <memcpy>
 80176a2:	f241 5394 	movw	r3, #5524	; 0x1594
 80176a6:	6922      	ldr	r2, [r4, #16]
 80176a8:	5ad0      	ldrh	r0, [r2, r3]
 80176aa:	2101      	movs	r1, #1
 80176ac:	eb00 0c01 	add.w	ip, r0, r1
 80176b0:	f822 c003 	strh.w	ip, [r2, r3]
 80176b4:	f7fa fb8a 	bl	8011dcc <uxr_object_id>
 80176b8:	6160      	str	r0, [r4, #20]
 80176ba:	783b      	ldrb	r3, [r7, #0]
 80176bc:	2b2f      	cmp	r3, #47	; 0x2f
 80176be:	d127      	bne.n	8017710 <create_node+0xd4>
 80176c0:	787b      	ldrb	r3, [r7, #1]
 80176c2:	bb2b      	cbnz	r3, 8017710 <create_node+0xd4>
 80176c4:	4a17      	ldr	r2, [pc, #92]	; (8017724 <create_node+0xe8>)
 80176c6:	4818      	ldr	r0, [pc, #96]	; (8017728 <create_node+0xec>)
 80176c8:	4633      	mov	r3, r6
 80176ca:	213c      	movs	r1, #60	; 0x3c
 80176cc:	f002 fda4 	bl	801a218 <sniprintf>
 80176d0:	6920      	ldr	r0, [r4, #16]
 80176d2:	4b15      	ldr	r3, [pc, #84]	; (8017728 <create_node+0xec>)
 80176d4:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 80176d8:	9300      	str	r3, [sp, #0]
 80176da:	2306      	movs	r3, #6
 80176dc:	9301      	str	r3, [sp, #4]
 80176de:	6811      	ldr	r1, [r2, #0]
 80176e0:	6962      	ldr	r2, [r4, #20]
 80176e2:	fa1f f388 	uxth.w	r3, r8
 80176e6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80176ea:	f7fa f9b9 	bl	8011a60 <uxr_buffer_create_participant_bin>
 80176ee:	4602      	mov	r2, r0
 80176f0:	6920      	ldr	r0, [r4, #16]
 80176f2:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80176f6:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80176fa:	f7f9 f851 	bl	80107a0 <run_xrce_session>
 80176fe:	b918      	cbnz	r0, 8017708 <create_node+0xcc>
 8017700:	4628      	mov	r0, r5
 8017702:	f7f8 fee3 	bl	80104cc <rmw_uxrce_fini_node_memory>
 8017706:	2500      	movs	r5, #0
 8017708:	4628      	mov	r0, r5
 801770a:	b003      	add	sp, #12
 801770c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017710:	4a06      	ldr	r2, [pc, #24]	; (801772c <create_node+0xf0>)
 8017712:	9600      	str	r6, [sp, #0]
 8017714:	463b      	mov	r3, r7
 8017716:	213c      	movs	r1, #60	; 0x3c
 8017718:	4803      	ldr	r0, [pc, #12]	; (8017728 <create_node+0xec>)
 801771a:	f002 fd7d 	bl	801a218 <sniprintf>
 801771e:	e7d7      	b.n	80176d0 <create_node+0x94>
 8017720:	2000cebc 	.word	0x2000cebc
 8017724:	0801ba2c 	.word	0x0801ba2c
 8017728:	20009d0c 	.word	0x20009d0c
 801772c:	0801ba6c 	.word	0x0801ba6c

08017730 <rmw_create_node>:
 8017730:	b199      	cbz	r1, 801775a <rmw_create_node+0x2a>
 8017732:	b430      	push	{r4, r5}
 8017734:	4615      	mov	r5, r2
 8017736:	461a      	mov	r2, r3
 8017738:	780b      	ldrb	r3, [r1, #0]
 801773a:	460c      	mov	r4, r1
 801773c:	b153      	cbz	r3, 8017754 <rmw_create_node+0x24>
 801773e:	b14d      	cbz	r5, 8017754 <rmw_create_node+0x24>
 8017740:	782b      	ldrb	r3, [r5, #0]
 8017742:	b13b      	cbz	r3, 8017754 <rmw_create_node+0x24>
 8017744:	b902      	cbnz	r2, 8017748 <rmw_create_node+0x18>
 8017746:	69c2      	ldr	r2, [r0, #28]
 8017748:	4603      	mov	r3, r0
 801774a:	4629      	mov	r1, r5
 801774c:	4620      	mov	r0, r4
 801774e:	bc30      	pop	{r4, r5}
 8017750:	f7ff bf74 	b.w	801763c <create_node>
 8017754:	2000      	movs	r0, #0
 8017756:	bc30      	pop	{r4, r5}
 8017758:	4770      	bx	lr
 801775a:	2000      	movs	r0, #0
 801775c:	4770      	bx	lr
 801775e:	bf00      	nop

08017760 <rmw_destroy_node>:
 8017760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017762:	2800      	cmp	r0, #0
 8017764:	d066      	beq.n	8017834 <rmw_destroy_node+0xd4>
 8017766:	4607      	mov	r7, r0
 8017768:	6800      	ldr	r0, [r0, #0]
 801776a:	b128      	cbz	r0, 8017778 <rmw_destroy_node+0x18>
 801776c:	4b34      	ldr	r3, [pc, #208]	; (8017840 <rmw_destroy_node+0xe0>)
 801776e:	6819      	ldr	r1, [r3, #0]
 8017770:	f7e8 fd36 	bl	80001e0 <strcmp>
 8017774:	2800      	cmp	r0, #0
 8017776:	d15d      	bne.n	8017834 <rmw_destroy_node+0xd4>
 8017778:	687c      	ldr	r4, [r7, #4]
 801777a:	2c00      	cmp	r4, #0
 801777c:	d05a      	beq.n	8017834 <rmw_destroy_node+0xd4>
 801777e:	4b31      	ldr	r3, [pc, #196]	; (8017844 <rmw_destroy_node+0xe4>)
 8017780:	681d      	ldr	r5, [r3, #0]
 8017782:	2d00      	cmp	r5, #0
 8017784:	d059      	beq.n	801783a <rmw_destroy_node+0xda>
 8017786:	2600      	movs	r6, #0
 8017788:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 801778c:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 8017790:	429c      	cmp	r4, r3
 8017792:	d047      	beq.n	8017824 <rmw_destroy_node+0xc4>
 8017794:	2d00      	cmp	r5, #0
 8017796:	d1f7      	bne.n	8017788 <rmw_destroy_node+0x28>
 8017798:	4b2b      	ldr	r3, [pc, #172]	; (8017848 <rmw_destroy_node+0xe8>)
 801779a:	681d      	ldr	r5, [r3, #0]
 801779c:	b15d      	cbz	r5, 80177b6 <rmw_destroy_node+0x56>
 801779e:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 80177a2:	6a0b      	ldr	r3, [r1, #32]
 80177a4:	429c      	cmp	r4, r3
 80177a6:	d1f9      	bne.n	801779c <rmw_destroy_node+0x3c>
 80177a8:	317c      	adds	r1, #124	; 0x7c
 80177aa:	4638      	mov	r0, r7
 80177ac:	f7f8 fcac 	bl	8010108 <rmw_destroy_subscription>
 80177b0:	4606      	mov	r6, r0
 80177b2:	2d00      	cmp	r5, #0
 80177b4:	d1f3      	bne.n	801779e <rmw_destroy_node+0x3e>
 80177b6:	4b25      	ldr	r3, [pc, #148]	; (801784c <rmw_destroy_node+0xec>)
 80177b8:	681d      	ldr	r5, [r3, #0]
 80177ba:	b15d      	cbz	r5, 80177d4 <rmw_destroy_node+0x74>
 80177bc:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 80177c0:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 80177c2:	429c      	cmp	r4, r3
 80177c4:	d1f9      	bne.n	80177ba <rmw_destroy_node+0x5a>
 80177c6:	317c      	adds	r1, #124	; 0x7c
 80177c8:	4638      	mov	r0, r7
 80177ca:	f000 f951 	bl	8017a70 <rmw_destroy_service>
 80177ce:	4606      	mov	r6, r0
 80177d0:	2d00      	cmp	r5, #0
 80177d2:	d1f3      	bne.n	80177bc <rmw_destroy_node+0x5c>
 80177d4:	4b1e      	ldr	r3, [pc, #120]	; (8017850 <rmw_destroy_node+0xf0>)
 80177d6:	681d      	ldr	r5, [r3, #0]
 80177d8:	b15d      	cbz	r5, 80177f2 <rmw_destroy_node+0x92>
 80177da:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 80177de:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 80177e0:	429c      	cmp	r4, r3
 80177e2:	d1f9      	bne.n	80177d8 <rmw_destroy_node+0x78>
 80177e4:	317c      	adds	r1, #124	; 0x7c
 80177e6:	4638      	mov	r0, r7
 80177e8:	f7ff fc16 	bl	8017018 <rmw_destroy_client>
 80177ec:	4606      	mov	r6, r0
 80177ee:	2d00      	cmp	r5, #0
 80177f0:	d1f3      	bne.n	80177da <rmw_destroy_node+0x7a>
 80177f2:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 80177f6:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80177fa:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80177fe:	6819      	ldr	r1, [r3, #0]
 8017800:	f7fa f8e2 	bl	80119c8 <uxr_buffer_delete_entity>
 8017804:	4602      	mov	r2, r0
 8017806:	6920      	ldr	r0, [r4, #16]
 8017808:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801780c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8017810:	f7f8 ffc6 	bl	80107a0 <run_xrce_session>
 8017814:	2800      	cmp	r0, #0
 8017816:	bf08      	it	eq
 8017818:	2602      	moveq	r6, #2
 801781a:	4638      	mov	r0, r7
 801781c:	f7f8 fe56 	bl	80104cc <rmw_uxrce_fini_node_memory>
 8017820:	4630      	mov	r0, r6
 8017822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017824:	3184      	adds	r1, #132	; 0x84
 8017826:	4638      	mov	r0, r7
 8017828:	f7f8 fb3c 	bl	800fea4 <rmw_destroy_publisher>
 801782c:	4606      	mov	r6, r0
 801782e:	2d00      	cmp	r5, #0
 8017830:	d1aa      	bne.n	8017788 <rmw_destroy_node+0x28>
 8017832:	e7b1      	b.n	8017798 <rmw_destroy_node+0x38>
 8017834:	2601      	movs	r6, #1
 8017836:	4630      	mov	r0, r6
 8017838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801783a:	462e      	mov	r6, r5
 801783c:	e7ac      	b.n	8017798 <rmw_destroy_node+0x38>
 801783e:	bf00      	nop
 8017840:	0801bf34 	.word	0x0801bf34
 8017844:	20009ef8 	.word	0x20009ef8
 8017848:	2000d154 	.word	0x2000d154
 801784c:	2000d144 	.word	0x2000d144
 8017850:	2000a778 	.word	0x2000a778

08017854 <rmw_node_get_graph_guard_condition>:
 8017854:	6843      	ldr	r3, [r0, #4]
 8017856:	6918      	ldr	r0, [r3, #16]
 8017858:	f500 705a 	add.w	r0, r0, #872	; 0x368
 801785c:	4770      	bx	lr
 801785e:	bf00      	nop

08017860 <rmw_take_request>:
 8017860:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017864:	4605      	mov	r5, r0
 8017866:	6800      	ldr	r0, [r0, #0]
 8017868:	b089      	sub	sp, #36	; 0x24
 801786a:	460c      	mov	r4, r1
 801786c:	4690      	mov	r8, r2
 801786e:	461e      	mov	r6, r3
 8017870:	b128      	cbz	r0, 801787e <rmw_take_request+0x1e>
 8017872:	4b28      	ldr	r3, [pc, #160]	; (8017914 <rmw_take_request+0xb4>)
 8017874:	6819      	ldr	r1, [r3, #0]
 8017876:	f7e8 fcb3 	bl	80001e0 <strcmp>
 801787a:	2800      	cmp	r0, #0
 801787c:	d146      	bne.n	801790c <rmw_take_request+0xac>
 801787e:	b10e      	cbz	r6, 8017884 <rmw_take_request+0x24>
 8017880:	2300      	movs	r3, #0
 8017882:	7033      	strb	r3, [r6, #0]
 8017884:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8017888:	f7f8 ff12 	bl	80106b0 <rmw_uxrce_clean_expired_static_input_buffer>
 801788c:	4648      	mov	r0, r9
 801788e:	f7f8 fee5 	bl	801065c <rmw_uxrce_find_static_input_buffer_by_owner>
 8017892:	4607      	mov	r7, r0
 8017894:	b3b0      	cbz	r0, 8017904 <rmw_take_request+0xa4>
 8017896:	68c5      	ldr	r5, [r0, #12]
 8017898:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 801789c:	f8d5 183c 	ldr.w	r1, [r5, #2108]	; 0x83c
 80178a0:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 80178a4:	7423      	strb	r3, [r4, #16]
 80178a6:	e9c4 1208 	strd	r1, r2, [r4, #32]
 80178aa:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	; 0x834
 80178ae:	f895 2836 	ldrb.w	r2, [r5, #2102]	; 0x836
 80178b2:	74e2      	strb	r2, [r4, #19]
 80178b4:	f8a4 3011 	strh.w	r3, [r4, #17]
 80178b8:	f8d5 2828 	ldr.w	r2, [r5, #2088]	; 0x828
 80178bc:	f8d5 382c 	ldr.w	r3, [r5, #2092]	; 0x82c
 80178c0:	f8d5 1830 	ldr.w	r1, [r5, #2096]	; 0x830
 80178c4:	61e1      	str	r1, [r4, #28]
 80178c6:	6162      	str	r2, [r4, #20]
 80178c8:	61a3      	str	r3, [r4, #24]
 80178ca:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80178ce:	689b      	ldr	r3, [r3, #8]
 80178d0:	4798      	blx	r3
 80178d2:	6844      	ldr	r4, [r0, #4]
 80178d4:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 80178d8:	f105 0110 	add.w	r1, r5, #16
 80178dc:	4668      	mov	r0, sp
 80178de:	f7fa f803 	bl	80118e8 <ucdr_init_buffer>
 80178e2:	68e3      	ldr	r3, [r4, #12]
 80178e4:	4641      	mov	r1, r8
 80178e6:	4668      	mov	r0, sp
 80178e8:	4798      	blx	r3
 80178ea:	4639      	mov	r1, r7
 80178ec:	4604      	mov	r4, r0
 80178ee:	480a      	ldr	r0, [pc, #40]	; (8017918 <rmw_take_request+0xb8>)
 80178f0:	f7ff fb7e 	bl	8016ff0 <put_memory>
 80178f4:	b106      	cbz	r6, 80178f8 <rmw_take_request+0x98>
 80178f6:	7034      	strb	r4, [r6, #0]
 80178f8:	f084 0001 	eor.w	r0, r4, #1
 80178fc:	b2c0      	uxtb	r0, r0
 80178fe:	b009      	add	sp, #36	; 0x24
 8017900:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017904:	2001      	movs	r0, #1
 8017906:	b009      	add	sp, #36	; 0x24
 8017908:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801790c:	200c      	movs	r0, #12
 801790e:	b009      	add	sp, #36	; 0x24
 8017910:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017914:	0801bf34 	.word	0x0801bf34
 8017918:	20009ee8 	.word	0x20009ee8

0801791c <rmw_send_response>:
 801791c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801791e:	4605      	mov	r5, r0
 8017920:	6800      	ldr	r0, [r0, #0]
 8017922:	b091      	sub	sp, #68	; 0x44
 8017924:	460c      	mov	r4, r1
 8017926:	4617      	mov	r7, r2
 8017928:	b128      	cbz	r0, 8017936 <rmw_send_response+0x1a>
 801792a:	4b2a      	ldr	r3, [pc, #168]	; (80179d4 <rmw_send_response+0xb8>)
 801792c:	6819      	ldr	r1, [r3, #0]
 801792e:	f7e8 fc57 	bl	80001e0 <strcmp>
 8017932:	2800      	cmp	r0, #0
 8017934:	d143      	bne.n	80179be <rmw_send_response+0xa2>
 8017936:	4623      	mov	r3, r4
 8017938:	4626      	mov	r6, r4
 801793a:	f853 0f04 	ldr.w	r0, [r3, #4]!
 801793e:	f836 ef01 	ldrh.w	lr, [r6, #1]!
 8017942:	6859      	ldr	r1, [r3, #4]
 8017944:	686d      	ldr	r5, [r5, #4]
 8017946:	689a      	ldr	r2, [r3, #8]
 8017948:	78b3      	ldrb	r3, [r6, #2]
 801794a:	f894 c000 	ldrb.w	ip, [r4]
 801794e:	6966      	ldr	r6, [r4, #20]
 8017950:	f88d 3016 	strb.w	r3, [sp, #22]
 8017954:	ab02      	add	r3, sp, #8
 8017956:	f8ad e014 	strh.w	lr, [sp, #20]
 801795a:	f88d c017 	strb.w	ip, [sp, #23]
 801795e:	9606      	str	r6, [sp, #24]
 8017960:	c307      	stmia	r3!, {r0, r1, r2}
 8017962:	696b      	ldr	r3, [r5, #20]
 8017964:	6922      	ldr	r2, [r4, #16]
 8017966:	9207      	str	r2, [sp, #28]
 8017968:	68db      	ldr	r3, [r3, #12]
 801796a:	6fae      	ldr	r6, [r5, #120]	; 0x78
 801796c:	4798      	blx	r3
 801796e:	4603      	mov	r3, r0
 8017970:	4638      	mov	r0, r7
 8017972:	685c      	ldr	r4, [r3, #4]
 8017974:	6923      	ldr	r3, [r4, #16]
 8017976:	4798      	blx	r3
 8017978:	6933      	ldr	r3, [r6, #16]
 801797a:	3018      	adds	r0, #24
 801797c:	9000      	str	r0, [sp, #0]
 801797e:	692a      	ldr	r2, [r5, #16]
 8017980:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8017982:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8017986:	ab08      	add	r3, sp, #32
 8017988:	f7fb fe56 	bl	8013638 <uxr_prepare_output_stream>
 801798c:	b910      	cbnz	r0, 8017994 <rmw_send_response+0x78>
 801798e:	2001      	movs	r0, #1
 8017990:	b011      	add	sp, #68	; 0x44
 8017992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017994:	a902      	add	r1, sp, #8
 8017996:	a808      	add	r0, sp, #32
 8017998:	f7fc ff6c 	bl	8014874 <uxr_serialize_SampleIdentity>
 801799c:	68a3      	ldr	r3, [r4, #8]
 801799e:	a908      	add	r1, sp, #32
 80179a0:	4638      	mov	r0, r7
 80179a2:	4798      	blx	r3
 80179a4:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 80179a8:	6930      	ldr	r0, [r6, #16]
 80179aa:	2b01      	cmp	r3, #1
 80179ac:	d00a      	beq.n	80179c4 <rmw_send_response+0xa8>
 80179ae:	6f69      	ldr	r1, [r5, #116]	; 0x74
 80179b0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80179b4:	f7fb f838 	bl	8012a28 <uxr_run_session_until_confirm_delivery>
 80179b8:	2000      	movs	r0, #0
 80179ba:	b011      	add	sp, #68	; 0x44
 80179bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80179be:	200c      	movs	r0, #12
 80179c0:	b011      	add	sp, #68	; 0x44
 80179c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80179c4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80179c8:	f7fa fc72 	bl	80122b0 <uxr_flash_output_streams>
 80179cc:	2000      	movs	r0, #0
 80179ce:	b011      	add	sp, #68	; 0x44
 80179d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80179d2:	bf00      	nop
 80179d4:	0801bf34 	.word	0x0801bf34

080179d8 <rmw_take_response>:
 80179d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80179dc:	4604      	mov	r4, r0
 80179de:	6800      	ldr	r0, [r0, #0]
 80179e0:	b089      	sub	sp, #36	; 0x24
 80179e2:	4688      	mov	r8, r1
 80179e4:	4617      	mov	r7, r2
 80179e6:	461d      	mov	r5, r3
 80179e8:	b120      	cbz	r0, 80179f4 <rmw_take_response+0x1c>
 80179ea:	4b1f      	ldr	r3, [pc, #124]	; (8017a68 <rmw_take_response+0x90>)
 80179ec:	6819      	ldr	r1, [r3, #0]
 80179ee:	f7e8 fbf7 	bl	80001e0 <strcmp>
 80179f2:	bb88      	cbnz	r0, 8017a58 <rmw_take_response+0x80>
 80179f4:	b10d      	cbz	r5, 80179fa <rmw_take_response+0x22>
 80179f6:	2300      	movs	r3, #0
 80179f8:	702b      	strb	r3, [r5, #0]
 80179fa:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80179fe:	f7f8 fe57 	bl	80106b0 <rmw_uxrce_clean_expired_static_input_buffer>
 8017a02:	4648      	mov	r0, r9
 8017a04:	f7f8 fe2a 	bl	801065c <rmw_uxrce_find_static_input_buffer_by_owner>
 8017a08:	4606      	mov	r6, r0
 8017a0a:	b348      	cbz	r0, 8017a60 <rmw_take_response+0x88>
 8017a0c:	68c4      	ldr	r4, [r0, #12]
 8017a0e:	f8d9 1014 	ldr.w	r1, [r9, #20]
 8017a12:	f604 0328 	addw	r3, r4, #2088	; 0x828
 8017a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a1a:	68c9      	ldr	r1, [r1, #12]
 8017a1c:	e9c8 2308 	strd	r2, r3, [r8, #32]
 8017a20:	4788      	blx	r1
 8017a22:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8017a26:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 8017a2a:	f104 0110 	add.w	r1, r4, #16
 8017a2e:	4668      	mov	r0, sp
 8017a30:	f7f9 ff5a 	bl	80118e8 <ucdr_init_buffer>
 8017a34:	4639      	mov	r1, r7
 8017a36:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017a3a:	4668      	mov	r0, sp
 8017a3c:	4798      	blx	r3
 8017a3e:	4631      	mov	r1, r6
 8017a40:	4604      	mov	r4, r0
 8017a42:	480a      	ldr	r0, [pc, #40]	; (8017a6c <rmw_take_response+0x94>)
 8017a44:	f7ff fad4 	bl	8016ff0 <put_memory>
 8017a48:	b105      	cbz	r5, 8017a4c <rmw_take_response+0x74>
 8017a4a:	702c      	strb	r4, [r5, #0]
 8017a4c:	f084 0001 	eor.w	r0, r4, #1
 8017a50:	b2c0      	uxtb	r0, r0
 8017a52:	b009      	add	sp, #36	; 0x24
 8017a54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017a58:	200c      	movs	r0, #12
 8017a5a:	b009      	add	sp, #36	; 0x24
 8017a5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017a60:	2001      	movs	r0, #1
 8017a62:	b009      	add	sp, #36	; 0x24
 8017a64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017a68:	0801bf34 	.word	0x0801bf34
 8017a6c:	20009ee8 	.word	0x20009ee8

08017a70 <rmw_destroy_service>:
 8017a70:	b570      	push	{r4, r5, r6, lr}
 8017a72:	b128      	cbz	r0, 8017a80 <rmw_destroy_service+0x10>
 8017a74:	4604      	mov	r4, r0
 8017a76:	6800      	ldr	r0, [r0, #0]
 8017a78:	460d      	mov	r5, r1
 8017a7a:	f7f8 ff11 	bl	80108a0 <is_uxrce_rmw_identifier_valid>
 8017a7e:	b910      	cbnz	r0, 8017a86 <rmw_destroy_service+0x16>
 8017a80:	2401      	movs	r4, #1
 8017a82:	4620      	mov	r0, r4
 8017a84:	bd70      	pop	{r4, r5, r6, pc}
 8017a86:	6863      	ldr	r3, [r4, #4]
 8017a88:	2b00      	cmp	r3, #0
 8017a8a:	d0f9      	beq.n	8017a80 <rmw_destroy_service+0x10>
 8017a8c:	2d00      	cmp	r5, #0
 8017a8e:	d0f7      	beq.n	8017a80 <rmw_destroy_service+0x10>
 8017a90:	6828      	ldr	r0, [r5, #0]
 8017a92:	f7f8 ff05 	bl	80108a0 <is_uxrce_rmw_identifier_valid>
 8017a96:	2800      	cmp	r0, #0
 8017a98:	d0f2      	beq.n	8017a80 <rmw_destroy_service+0x10>
 8017a9a:	686e      	ldr	r6, [r5, #4]
 8017a9c:	2e00      	cmp	r6, #0
 8017a9e:	d0ef      	beq.n	8017a80 <rmw_destroy_service+0x10>
 8017aa0:	6864      	ldr	r4, [r4, #4]
 8017aa2:	6932      	ldr	r2, [r6, #16]
 8017aa4:	6920      	ldr	r0, [r4, #16]
 8017aa6:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8017aaa:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017aae:	6819      	ldr	r1, [r3, #0]
 8017ab0:	f7fa f9f4 	bl	8011e9c <uxr_buffer_cancel_data>
 8017ab4:	4602      	mov	r2, r0
 8017ab6:	6920      	ldr	r0, [r4, #16]
 8017ab8:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8017abc:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8017ac0:	f7f8 fe6e 	bl	80107a0 <run_xrce_session>
 8017ac4:	6920      	ldr	r0, [r4, #16]
 8017ac6:	6932      	ldr	r2, [r6, #16]
 8017ac8:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8017acc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017ad0:	6819      	ldr	r1, [r3, #0]
 8017ad2:	f7f9 ff79 	bl	80119c8 <uxr_buffer_delete_entity>
 8017ad6:	4602      	mov	r2, r0
 8017ad8:	6920      	ldr	r0, [r4, #16]
 8017ada:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8017ade:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8017ae2:	f7f8 fe5d 	bl	80107a0 <run_xrce_session>
 8017ae6:	2800      	cmp	r0, #0
 8017ae8:	4628      	mov	r0, r5
 8017aea:	bf14      	ite	ne
 8017aec:	2400      	movne	r4, #0
 8017aee:	2402      	moveq	r4, #2
 8017af0:	f7f8 fd30 	bl	8010554 <rmw_uxrce_fini_service_memory>
 8017af4:	e7c5      	b.n	8017a82 <rmw_destroy_service+0x12>
 8017af6:	bf00      	nop

08017af8 <rmw_uxrce_transport_init>:
 8017af8:	b508      	push	{r3, lr}
 8017afa:	b108      	cbz	r0, 8017b00 <rmw_uxrce_transport_init+0x8>
 8017afc:	f100 0210 	add.w	r2, r0, #16
 8017b00:	b139      	cbz	r1, 8017b12 <rmw_uxrce_transport_init+0x1a>
 8017b02:	6949      	ldr	r1, [r1, #20]
 8017b04:	4610      	mov	r0, r2
 8017b06:	f000 fbdf 	bl	80182c8 <uxr_init_custom_transport>
 8017b0a:	f080 0001 	eor.w	r0, r0, #1
 8017b0e:	b2c0      	uxtb	r0, r0
 8017b10:	bd08      	pop	{r3, pc}
 8017b12:	4b04      	ldr	r3, [pc, #16]	; (8017b24 <rmw_uxrce_transport_init+0x2c>)
 8017b14:	4610      	mov	r0, r2
 8017b16:	6859      	ldr	r1, [r3, #4]
 8017b18:	f000 fbd6 	bl	80182c8 <uxr_init_custom_transport>
 8017b1c:	f080 0001 	eor.w	r0, r0, #1
 8017b20:	b2c0      	uxtb	r0, r0
 8017b22:	bd08      	pop	{r3, pc}
 8017b24:	20009ec8 	.word	0x20009ec8

08017b28 <rmw_wait>:
 8017b28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b2c:	460f      	mov	r7, r1
 8017b2e:	4606      	mov	r6, r0
 8017b30:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017b32:	469a      	mov	sl, r3
 8017b34:	4615      	mov	r5, r2
 8017b36:	2a00      	cmp	r2, #0
 8017b38:	f000 8122 	beq.w	8017d80 <rmw_wait+0x258>
 8017b3c:	2900      	cmp	r1, #0
 8017b3e:	f000 812a 	beq.w	8017d96 <rmw_wait+0x26e>
 8017b42:	e9d1 2300 	ldrd	r2, r3, [r1]
 8017b46:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8017b4a:	015c      	lsls	r4, r3, #5
 8017b4c:	ebbb 0b02 	subs.w	fp, fp, r2
 8017b50:	ea44 64d2 	orr.w	r4, r4, r2, lsr #27
 8017b54:	eb64 0403 	sbc.w	r4, r4, r3
 8017b58:	ea4f 008b 	mov.w	r0, fp, lsl #2
 8017b5c:	00a4      	lsls	r4, r4, #2
 8017b5e:	ea44 749b 	orr.w	r4, r4, fp, lsr #30
 8017b62:	eb10 0b02 	adds.w	fp, r0, r2
 8017b66:	eb43 0404 	adc.w	r4, r3, r4
 8017b6a:	4aad      	ldr	r2, [pc, #692]	; (8017e20 <rmw_wait+0x2f8>)
 8017b6c:	2300      	movs	r3, #0
 8017b6e:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 8017b72:	f7e9 f893 	bl	8000c9c <__aeabi_uldivmod>
 8017b76:	00e4      	lsls	r4, r4, #3
 8017b78:	ea44 745b 	orr.w	r4, r4, fp, lsr #29
 8017b7c:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8017b80:	eb1b 0800 	adds.w	r8, fp, r0
 8017b84:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8017b88:	eb44 0901 	adc.w	r9, r4, r1
 8017b8c:	2300      	movs	r3, #0
 8017b8e:	4542      	cmp	r2, r8
 8017b90:	eb73 0109 	sbcs.w	r1, r3, r9
 8017b94:	f2c0 80f2 	blt.w	8017d7c <rmw_wait+0x254>
 8017b98:	f7f8 fd8a 	bl	80106b0 <rmw_uxrce_clean_expired_static_input_buffer>
 8017b9c:	4ba1      	ldr	r3, [pc, #644]	; (8017e24 <rmw_wait+0x2fc>)
 8017b9e:	681c      	ldr	r4, [r3, #0]
 8017ba0:	b144      	cbz	r4, 8017bb4 <rmw_wait+0x8c>
 8017ba2:	4623      	mov	r3, r4
 8017ba4:	f241 50a4 	movw	r0, #5540	; 0x15a4
 8017ba8:	2100      	movs	r1, #0
 8017baa:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8017bae:	5411      	strb	r1, [r2, r0]
 8017bb0:	2b00      	cmp	r3, #0
 8017bb2:	d1fa      	bne.n	8017baa <rmw_wait+0x82>
 8017bb4:	b185      	cbz	r5, 8017bd8 <rmw_wait+0xb0>
 8017bb6:	6829      	ldr	r1, [r5, #0]
 8017bb8:	b171      	cbz	r1, 8017bd8 <rmw_wait+0xb0>
 8017bba:	f8d5 e004 	ldr.w	lr, [r5, #4]
 8017bbe:	2300      	movs	r3, #0
 8017bc0:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 8017bc4:	2001      	movs	r0, #1
 8017bc6:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 8017bca:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8017bcc:	3301      	adds	r3, #1
 8017bce:	6912      	ldr	r2, [r2, #16]
 8017bd0:	4299      	cmp	r1, r3
 8017bd2:	f802 000c 	strb.w	r0, [r2, ip]
 8017bd6:	d1f6      	bne.n	8017bc6 <rmw_wait+0x9e>
 8017bd8:	f1ba 0f00 	cmp.w	sl, #0
 8017bdc:	d011      	beq.n	8017c02 <rmw_wait+0xda>
 8017bde:	f8da 1000 	ldr.w	r1, [sl]
 8017be2:	b171      	cbz	r1, 8017c02 <rmw_wait+0xda>
 8017be4:	f8da e004 	ldr.w	lr, [sl, #4]
 8017be8:	2300      	movs	r3, #0
 8017bea:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 8017bee:	2001      	movs	r0, #1
 8017bf0:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 8017bf4:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8017bf6:	3301      	adds	r3, #1
 8017bf8:	6912      	ldr	r2, [r2, #16]
 8017bfa:	4299      	cmp	r1, r3
 8017bfc:	f802 000c 	strb.w	r0, [r2, ip]
 8017c00:	d1f6      	bne.n	8017bf0 <rmw_wait+0xc8>
 8017c02:	b186      	cbz	r6, 8017c26 <rmw_wait+0xfe>
 8017c04:	6831      	ldr	r1, [r6, #0]
 8017c06:	b171      	cbz	r1, 8017c26 <rmw_wait+0xfe>
 8017c08:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8017c0c:	2300      	movs	r3, #0
 8017c0e:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 8017c12:	2001      	movs	r0, #1
 8017c14:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 8017c18:	6a12      	ldr	r2, [r2, #32]
 8017c1a:	3301      	adds	r3, #1
 8017c1c:	6912      	ldr	r2, [r2, #16]
 8017c1e:	4299      	cmp	r1, r3
 8017c20:	f802 000c 	strb.w	r0, [r2, ip]
 8017c24:	d1f6      	bne.n	8017c14 <rmw_wait+0xec>
 8017c26:	b34c      	cbz	r4, 8017c7c <rmw_wait+0x154>
 8017c28:	4622      	mov	r2, r4
 8017c2a:	2300      	movs	r3, #0
 8017c2c:	f241 50a4 	movw	r0, #5540	; 0x15a4
 8017c30:	e9d2 2102 	ldrd	r2, r1, [r2, #8]
 8017c34:	5c09      	ldrb	r1, [r1, r0]
 8017c36:	440b      	add	r3, r1
 8017c38:	b2db      	uxtb	r3, r3
 8017c3a:	2a00      	cmp	r2, #0
 8017c3c:	d1f8      	bne.n	8017c30 <rmw_wait+0x108>
 8017c3e:	2b00      	cmp	r3, #0
 8017c40:	f000 8082 	beq.w	8017d48 <rmw_wait+0x220>
 8017c44:	f1b8 3fff 	cmp.w	r8, #4294967295
 8017c48:	d00d      	beq.n	8017c66 <rmw_wait+0x13e>
 8017c4a:	ee07 8a90 	vmov	s15, r8
 8017c4e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8017c52:	ee07 3a90 	vmov	s15, r3
 8017c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017c5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8017c5e:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8017c62:	ee17 8a90 	vmov	r8, s15
 8017c66:	f241 59a4 	movw	r9, #5540	; 0x15a4
 8017c6a:	68e0      	ldr	r0, [r4, #12]
 8017c6c:	f810 3009 	ldrb.w	r3, [r0, r9]
 8017c70:	2b00      	cmp	r3, #0
 8017c72:	f040 8093 	bne.w	8017d9c <rmw_wait+0x274>
 8017c76:	68a4      	ldr	r4, [r4, #8]
 8017c78:	2c00      	cmp	r4, #0
 8017c7a:	d1f6      	bne.n	8017c6a <rmw_wait+0x142>
 8017c7c:	2d00      	cmp	r5, #0
 8017c7e:	f000 80ac 	beq.w	8017dda <rmw_wait+0x2b2>
 8017c82:	682b      	ldr	r3, [r5, #0]
 8017c84:	2b00      	cmp	r3, #0
 8017c86:	f000 8093 	beq.w	8017db0 <rmw_wait+0x288>
 8017c8a:	2400      	movs	r4, #0
 8017c8c:	46a0      	mov	r8, r4
 8017c8e:	686b      	ldr	r3, [r5, #4]
 8017c90:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017c94:	f7f8 fce2 	bl	801065c <rmw_uxrce_find_static_input_buffer_by_owner>
 8017c98:	2800      	cmp	r0, #0
 8017c9a:	d05f      	beq.n	8017d5c <rmw_wait+0x234>
 8017c9c:	682b      	ldr	r3, [r5, #0]
 8017c9e:	3401      	adds	r4, #1
 8017ca0:	42a3      	cmp	r3, r4
 8017ca2:	f04f 0801 	mov.w	r8, #1
 8017ca6:	d8f2      	bhi.n	8017c8e <rmw_wait+0x166>
 8017ca8:	f1ba 0f00 	cmp.w	sl, #0
 8017cac:	d012      	beq.n	8017cd4 <rmw_wait+0x1ac>
 8017cae:	f8da 3000 	ldr.w	r3, [sl]
 8017cb2:	b17b      	cbz	r3, 8017cd4 <rmw_wait+0x1ac>
 8017cb4:	2400      	movs	r4, #0
 8017cb6:	f8da 3004 	ldr.w	r3, [sl, #4]
 8017cba:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017cbe:	f7f8 fccd 	bl	801065c <rmw_uxrce_find_static_input_buffer_by_owner>
 8017cc2:	2800      	cmp	r0, #0
 8017cc4:	d052      	beq.n	8017d6c <rmw_wait+0x244>
 8017cc6:	f8da 3000 	ldr.w	r3, [sl]
 8017cca:	3401      	adds	r4, #1
 8017ccc:	42a3      	cmp	r3, r4
 8017cce:	f04f 0801 	mov.w	r8, #1
 8017cd2:	d8f0      	bhi.n	8017cb6 <rmw_wait+0x18e>
 8017cd4:	b1e6      	cbz	r6, 8017d10 <rmw_wait+0x1e8>
 8017cd6:	6833      	ldr	r3, [r6, #0]
 8017cd8:	b1d3      	cbz	r3, 8017d10 <rmw_wait+0x1e8>
 8017cda:	2400      	movs	r4, #0
 8017cdc:	6873      	ldr	r3, [r6, #4]
 8017cde:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017ce2:	f7f8 fcbb 	bl	801065c <rmw_uxrce_find_static_input_buffer_by_owner>
 8017ce6:	b160      	cbz	r0, 8017d02 <rmw_wait+0x1da>
 8017ce8:	6833      	ldr	r3, [r6, #0]
 8017cea:	3401      	adds	r4, #1
 8017cec:	42a3      	cmp	r3, r4
 8017cee:	d96c      	bls.n	8017dca <rmw_wait+0x2a2>
 8017cf0:	6873      	ldr	r3, [r6, #4]
 8017cf2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017cf6:	f04f 0801 	mov.w	r8, #1
 8017cfa:	f7f8 fcaf 	bl	801065c <rmw_uxrce_find_static_input_buffer_by_owner>
 8017cfe:	2800      	cmp	r0, #0
 8017d00:	d1f2      	bne.n	8017ce8 <rmw_wait+0x1c0>
 8017d02:	e9d6 3200 	ldrd	r3, r2, [r6]
 8017d06:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8017d0a:	3401      	adds	r4, #1
 8017d0c:	42a3      	cmp	r3, r4
 8017d0e:	d8e5      	bhi.n	8017cdc <rmw_wait+0x1b4>
 8017d10:	b1a7      	cbz	r7, 8017d3c <rmw_wait+0x214>
 8017d12:	683c      	ldr	r4, [r7, #0]
 8017d14:	b194      	cbz	r4, 8017d3c <rmw_wait+0x214>
 8017d16:	2300      	movs	r3, #0
 8017d18:	461d      	mov	r5, r3
 8017d1a:	e004      	b.n	8017d26 <rmw_wait+0x1fe>
 8017d1c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8017d20:	3301      	adds	r3, #1
 8017d22:	42a3      	cmp	r3, r4
 8017d24:	d00a      	beq.n	8017d3c <rmw_wait+0x214>
 8017d26:	6878      	ldr	r0, [r7, #4]
 8017d28:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8017d2c:	7c0a      	ldrb	r2, [r1, #16]
 8017d2e:	2a00      	cmp	r2, #0
 8017d30:	d0f4      	beq.n	8017d1c <rmw_wait+0x1f4>
 8017d32:	3301      	adds	r3, #1
 8017d34:	42a3      	cmp	r3, r4
 8017d36:	740d      	strb	r5, [r1, #16]
 8017d38:	4690      	mov	r8, r2
 8017d3a:	d1f4      	bne.n	8017d26 <rmw_wait+0x1fe>
 8017d3c:	f1b8 0f00 	cmp.w	r8, #0
 8017d40:	d040      	beq.n	8017dc4 <rmw_wait+0x29c>
 8017d42:	2000      	movs	r0, #0
 8017d44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d48:	68e0      	ldr	r0, [r4, #12]
 8017d4a:	2100      	movs	r1, #0
 8017d4c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017d50:	f7fa fe30 	bl	80129b4 <uxr_run_session_timeout>
 8017d54:	68a4      	ldr	r4, [r4, #8]
 8017d56:	2c00      	cmp	r4, #0
 8017d58:	d1f6      	bne.n	8017d48 <rmw_wait+0x220>
 8017d5a:	e78f      	b.n	8017c7c <rmw_wait+0x154>
 8017d5c:	e9d5 3200 	ldrd	r3, r2, [r5]
 8017d60:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8017d64:	3401      	adds	r4, #1
 8017d66:	42a3      	cmp	r3, r4
 8017d68:	d891      	bhi.n	8017c8e <rmw_wait+0x166>
 8017d6a:	e79d      	b.n	8017ca8 <rmw_wait+0x180>
 8017d6c:	e9da 3200 	ldrd	r3, r2, [sl]
 8017d70:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8017d74:	3401      	adds	r4, #1
 8017d76:	429c      	cmp	r4, r3
 8017d78:	d39d      	bcc.n	8017cb6 <rmw_wait+0x18e>
 8017d7a:	e7ab      	b.n	8017cd4 <rmw_wait+0x1ac>
 8017d7c:	4690      	mov	r8, r2
 8017d7e:	e70b      	b.n	8017b98 <rmw_wait+0x70>
 8017d80:	2b00      	cmp	r3, #0
 8017d82:	f47f aedb 	bne.w	8017b3c <rmw_wait+0x14>
 8017d86:	2800      	cmp	r0, #0
 8017d88:	f47f aed8 	bne.w	8017b3c <rmw_wait+0x14>
 8017d8c:	2f00      	cmp	r7, #0
 8017d8e:	d0d8      	beq.n	8017d42 <rmw_wait+0x21a>
 8017d90:	2900      	cmp	r1, #0
 8017d92:	f47f aed6 	bne.w	8017b42 <rmw_wait+0x1a>
 8017d96:	f04f 38ff 	mov.w	r8, #4294967295
 8017d9a:	e6fd      	b.n	8017b98 <rmw_wait+0x70>
 8017d9c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017da0:	4641      	mov	r1, r8
 8017da2:	f7fa fe21 	bl	80129e8 <uxr_run_session_until_data>
 8017da6:	68a4      	ldr	r4, [r4, #8]
 8017da8:	2c00      	cmp	r4, #0
 8017daa:	f47f af5e 	bne.w	8017c6a <rmw_wait+0x142>
 8017dae:	e765      	b.n	8017c7c <rmw_wait+0x154>
 8017db0:	f1ba 0f00 	cmp.w	sl, #0
 8017db4:	d11e      	bne.n	8017df4 <rmw_wait+0x2cc>
 8017db6:	b35e      	cbz	r6, 8017e10 <rmw_wait+0x2e8>
 8017db8:	6833      	ldr	r3, [r6, #0]
 8017dba:	46d0      	mov	r8, sl
 8017dbc:	2b00      	cmp	r3, #0
 8017dbe:	d18c      	bne.n	8017cda <rmw_wait+0x1b2>
 8017dc0:	2f00      	cmp	r7, #0
 8017dc2:	d1a6      	bne.n	8017d12 <rmw_wait+0x1ea>
 8017dc4:	2002      	movs	r0, #2
 8017dc6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017dca:	2f00      	cmp	r7, #0
 8017dcc:	d0b9      	beq.n	8017d42 <rmw_wait+0x21a>
 8017dce:	683c      	ldr	r4, [r7, #0]
 8017dd0:	f04f 0801 	mov.w	r8, #1
 8017dd4:	2c00      	cmp	r4, #0
 8017dd6:	d19e      	bne.n	8017d16 <rmw_wait+0x1ee>
 8017dd8:	e7b3      	b.n	8017d42 <rmw_wait+0x21a>
 8017dda:	f1ba 0f00 	cmp.w	sl, #0
 8017dde:	d0ea      	beq.n	8017db6 <rmw_wait+0x28e>
 8017de0:	f8da 3000 	ldr.w	r3, [sl]
 8017de4:	46a8      	mov	r8, r5
 8017de6:	2b00      	cmp	r3, #0
 8017de8:	f47f af64 	bne.w	8017cb4 <rmw_wait+0x18c>
 8017dec:	2e00      	cmp	r6, #0
 8017dee:	f47f af72 	bne.w	8017cd6 <rmw_wait+0x1ae>
 8017df2:	e009      	b.n	8017e08 <rmw_wait+0x2e0>
 8017df4:	f8da 2000 	ldr.w	r2, [sl]
 8017df8:	4698      	mov	r8, r3
 8017dfa:	2a00      	cmp	r2, #0
 8017dfc:	f47f af5a 	bne.w	8017cb4 <rmw_wait+0x18c>
 8017e00:	4690      	mov	r8, r2
 8017e02:	2e00      	cmp	r6, #0
 8017e04:	f47f af67 	bne.w	8017cd6 <rmw_wait+0x1ae>
 8017e08:	46b0      	mov	r8, r6
 8017e0a:	2f00      	cmp	r7, #0
 8017e0c:	d181      	bne.n	8017d12 <rmw_wait+0x1ea>
 8017e0e:	e7d9      	b.n	8017dc4 <rmw_wait+0x29c>
 8017e10:	2f00      	cmp	r7, #0
 8017e12:	d0d7      	beq.n	8017dc4 <rmw_wait+0x29c>
 8017e14:	683c      	ldr	r4, [r7, #0]
 8017e16:	46b0      	mov	r8, r6
 8017e18:	2c00      	cmp	r4, #0
 8017e1a:	f47f af7c 	bne.w	8017d16 <rmw_wait+0x1ee>
 8017e1e:	e7d1      	b.n	8017dc4 <rmw_wait+0x29c>
 8017e20:	000f4240 	.word	0x000f4240
 8017e24:	2000d090 	.word	0x2000d090

08017e28 <rmw_create_wait_set>:
 8017e28:	b508      	push	{r3, lr}
 8017e2a:	4803      	ldr	r0, [pc, #12]	; (8017e38 <rmw_create_wait_set+0x10>)
 8017e2c:	f7ff f8d0 	bl	8016fd0 <get_memory>
 8017e30:	b108      	cbz	r0, 8017e36 <rmw_create_wait_set+0xe>
 8017e32:	68c0      	ldr	r0, [r0, #12]
 8017e34:	3010      	adds	r0, #16
 8017e36:	bd08      	pop	{r3, pc}
 8017e38:	2000e868 	.word	0x2000e868

08017e3c <rmw_destroy_wait_set>:
 8017e3c:	b508      	push	{r3, lr}
 8017e3e:	4b08      	ldr	r3, [pc, #32]	; (8017e60 <rmw_destroy_wait_set+0x24>)
 8017e40:	6819      	ldr	r1, [r3, #0]
 8017e42:	b911      	cbnz	r1, 8017e4a <rmw_destroy_wait_set+0xe>
 8017e44:	e00a      	b.n	8017e5c <rmw_destroy_wait_set+0x20>
 8017e46:	6889      	ldr	r1, [r1, #8]
 8017e48:	b141      	cbz	r1, 8017e5c <rmw_destroy_wait_set+0x20>
 8017e4a:	68cb      	ldr	r3, [r1, #12]
 8017e4c:	3310      	adds	r3, #16
 8017e4e:	4298      	cmp	r0, r3
 8017e50:	d1f9      	bne.n	8017e46 <rmw_destroy_wait_set+0xa>
 8017e52:	4803      	ldr	r0, [pc, #12]	; (8017e60 <rmw_destroy_wait_set+0x24>)
 8017e54:	f7ff f8cc 	bl	8016ff0 <put_memory>
 8017e58:	2000      	movs	r0, #0
 8017e5a:	bd08      	pop	{r3, pc}
 8017e5c:	2001      	movs	r0, #1
 8017e5e:	bd08      	pop	{r3, pc}
 8017e60:	2000e868 	.word	0x2000e868

08017e64 <rmw_uros_epoch_nanos>:
 8017e64:	4b05      	ldr	r3, [pc, #20]	; (8017e7c <rmw_uros_epoch_nanos+0x18>)
 8017e66:	681b      	ldr	r3, [r3, #0]
 8017e68:	b123      	cbz	r3, 8017e74 <rmw_uros_epoch_nanos+0x10>
 8017e6a:	68d8      	ldr	r0, [r3, #12]
 8017e6c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017e70:	f7fa ba14 	b.w	801229c <uxr_epoch_nanos>
 8017e74:	2000      	movs	r0, #0
 8017e76:	2100      	movs	r1, #0
 8017e78:	4770      	bx	lr
 8017e7a:	bf00      	nop
 8017e7c:	2000d090 	.word	0x2000d090

08017e80 <ucdr_serialize_endian_array_char>:
 8017e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e84:	4619      	mov	r1, r3
 8017e86:	461e      	mov	r6, r3
 8017e88:	4690      	mov	r8, r2
 8017e8a:	4604      	mov	r4, r0
 8017e8c:	f7f9 fcda 	bl	8011844 <ucdr_check_buffer_available_for>
 8017e90:	b9e0      	cbnz	r0, 8017ecc <ucdr_serialize_endian_array_char+0x4c>
 8017e92:	4637      	mov	r7, r6
 8017e94:	e009      	b.n	8017eaa <ucdr_serialize_endian_array_char+0x2a>
 8017e96:	68a0      	ldr	r0, [r4, #8]
 8017e98:	f002 fc3d 	bl	801a716 <memcpy>
 8017e9c:	68a2      	ldr	r2, [r4, #8]
 8017e9e:	6923      	ldr	r3, [r4, #16]
 8017ea0:	442a      	add	r2, r5
 8017ea2:	442b      	add	r3, r5
 8017ea4:	1b7f      	subs	r7, r7, r5
 8017ea6:	60a2      	str	r2, [r4, #8]
 8017ea8:	6123      	str	r3, [r4, #16]
 8017eaa:	2201      	movs	r2, #1
 8017eac:	4639      	mov	r1, r7
 8017eae:	4620      	mov	r0, r4
 8017eb0:	f7f9 fd4e 	bl	8011950 <ucdr_check_final_buffer_behavior_array>
 8017eb4:	1bf1      	subs	r1, r6, r7
 8017eb6:	4441      	add	r1, r8
 8017eb8:	4605      	mov	r5, r0
 8017eba:	4602      	mov	r2, r0
 8017ebc:	2800      	cmp	r0, #0
 8017ebe:	d1ea      	bne.n	8017e96 <ucdr_serialize_endian_array_char+0x16>
 8017ec0:	2301      	movs	r3, #1
 8017ec2:	7da0      	ldrb	r0, [r4, #22]
 8017ec4:	7563      	strb	r3, [r4, #21]
 8017ec6:	4058      	eors	r0, r3
 8017ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ecc:	4632      	mov	r2, r6
 8017ece:	68a0      	ldr	r0, [r4, #8]
 8017ed0:	4641      	mov	r1, r8
 8017ed2:	f002 fc20 	bl	801a716 <memcpy>
 8017ed6:	68a2      	ldr	r2, [r4, #8]
 8017ed8:	6923      	ldr	r3, [r4, #16]
 8017eda:	4432      	add	r2, r6
 8017edc:	4433      	add	r3, r6
 8017ede:	60a2      	str	r2, [r4, #8]
 8017ee0:	6123      	str	r3, [r4, #16]
 8017ee2:	e7ed      	b.n	8017ec0 <ucdr_serialize_endian_array_char+0x40>

08017ee4 <ucdr_deserialize_endian_array_char>:
 8017ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ee8:	4619      	mov	r1, r3
 8017eea:	461e      	mov	r6, r3
 8017eec:	4690      	mov	r8, r2
 8017eee:	4604      	mov	r4, r0
 8017ef0:	f7f9 fca8 	bl	8011844 <ucdr_check_buffer_available_for>
 8017ef4:	b9e0      	cbnz	r0, 8017f30 <ucdr_deserialize_endian_array_char+0x4c>
 8017ef6:	4637      	mov	r7, r6
 8017ef8:	e009      	b.n	8017f0e <ucdr_deserialize_endian_array_char+0x2a>
 8017efa:	68a1      	ldr	r1, [r4, #8]
 8017efc:	f002 fc0b 	bl	801a716 <memcpy>
 8017f00:	68a2      	ldr	r2, [r4, #8]
 8017f02:	6923      	ldr	r3, [r4, #16]
 8017f04:	442a      	add	r2, r5
 8017f06:	442b      	add	r3, r5
 8017f08:	1b7f      	subs	r7, r7, r5
 8017f0a:	60a2      	str	r2, [r4, #8]
 8017f0c:	6123      	str	r3, [r4, #16]
 8017f0e:	2201      	movs	r2, #1
 8017f10:	4639      	mov	r1, r7
 8017f12:	4620      	mov	r0, r4
 8017f14:	f7f9 fd1c 	bl	8011950 <ucdr_check_final_buffer_behavior_array>
 8017f18:	4605      	mov	r5, r0
 8017f1a:	1bf0      	subs	r0, r6, r7
 8017f1c:	4440      	add	r0, r8
 8017f1e:	462a      	mov	r2, r5
 8017f20:	2d00      	cmp	r5, #0
 8017f22:	d1ea      	bne.n	8017efa <ucdr_deserialize_endian_array_char+0x16>
 8017f24:	2301      	movs	r3, #1
 8017f26:	7da0      	ldrb	r0, [r4, #22]
 8017f28:	7563      	strb	r3, [r4, #21]
 8017f2a:	4058      	eors	r0, r3
 8017f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f30:	4632      	mov	r2, r6
 8017f32:	68a1      	ldr	r1, [r4, #8]
 8017f34:	4640      	mov	r0, r8
 8017f36:	f002 fbee 	bl	801a716 <memcpy>
 8017f3a:	68a2      	ldr	r2, [r4, #8]
 8017f3c:	6923      	ldr	r3, [r4, #16]
 8017f3e:	4432      	add	r2, r6
 8017f40:	4433      	add	r3, r6
 8017f42:	60a2      	str	r2, [r4, #8]
 8017f44:	6123      	str	r3, [r4, #16]
 8017f46:	e7ed      	b.n	8017f24 <ucdr_deserialize_endian_array_char+0x40>

08017f48 <ucdr_serialize_array_uint8_t>:
 8017f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f4c:	4688      	mov	r8, r1
 8017f4e:	4611      	mov	r1, r2
 8017f50:	4616      	mov	r6, r2
 8017f52:	4604      	mov	r4, r0
 8017f54:	f7f9 fc76 	bl	8011844 <ucdr_check_buffer_available_for>
 8017f58:	b9e0      	cbnz	r0, 8017f94 <ucdr_serialize_array_uint8_t+0x4c>
 8017f5a:	4637      	mov	r7, r6
 8017f5c:	e009      	b.n	8017f72 <ucdr_serialize_array_uint8_t+0x2a>
 8017f5e:	68a0      	ldr	r0, [r4, #8]
 8017f60:	f002 fbd9 	bl	801a716 <memcpy>
 8017f64:	68a2      	ldr	r2, [r4, #8]
 8017f66:	6923      	ldr	r3, [r4, #16]
 8017f68:	442a      	add	r2, r5
 8017f6a:	442b      	add	r3, r5
 8017f6c:	1b7f      	subs	r7, r7, r5
 8017f6e:	60a2      	str	r2, [r4, #8]
 8017f70:	6123      	str	r3, [r4, #16]
 8017f72:	2201      	movs	r2, #1
 8017f74:	4639      	mov	r1, r7
 8017f76:	4620      	mov	r0, r4
 8017f78:	f7f9 fcea 	bl	8011950 <ucdr_check_final_buffer_behavior_array>
 8017f7c:	1bf1      	subs	r1, r6, r7
 8017f7e:	4441      	add	r1, r8
 8017f80:	4605      	mov	r5, r0
 8017f82:	4602      	mov	r2, r0
 8017f84:	2800      	cmp	r0, #0
 8017f86:	d1ea      	bne.n	8017f5e <ucdr_serialize_array_uint8_t+0x16>
 8017f88:	2301      	movs	r3, #1
 8017f8a:	7da0      	ldrb	r0, [r4, #22]
 8017f8c:	7563      	strb	r3, [r4, #21]
 8017f8e:	4058      	eors	r0, r3
 8017f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f94:	4632      	mov	r2, r6
 8017f96:	68a0      	ldr	r0, [r4, #8]
 8017f98:	4641      	mov	r1, r8
 8017f9a:	f002 fbbc 	bl	801a716 <memcpy>
 8017f9e:	68a3      	ldr	r3, [r4, #8]
 8017fa0:	6922      	ldr	r2, [r4, #16]
 8017fa2:	4433      	add	r3, r6
 8017fa4:	4432      	add	r2, r6
 8017fa6:	60a3      	str	r3, [r4, #8]
 8017fa8:	6122      	str	r2, [r4, #16]
 8017faa:	e7ed      	b.n	8017f88 <ucdr_serialize_array_uint8_t+0x40>

08017fac <ucdr_serialize_endian_array_uint8_t>:
 8017fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017fb0:	4619      	mov	r1, r3
 8017fb2:	461e      	mov	r6, r3
 8017fb4:	4690      	mov	r8, r2
 8017fb6:	4604      	mov	r4, r0
 8017fb8:	f7f9 fc44 	bl	8011844 <ucdr_check_buffer_available_for>
 8017fbc:	b9e0      	cbnz	r0, 8017ff8 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8017fbe:	4637      	mov	r7, r6
 8017fc0:	e009      	b.n	8017fd6 <ucdr_serialize_endian_array_uint8_t+0x2a>
 8017fc2:	68a0      	ldr	r0, [r4, #8]
 8017fc4:	f002 fba7 	bl	801a716 <memcpy>
 8017fc8:	68a2      	ldr	r2, [r4, #8]
 8017fca:	6923      	ldr	r3, [r4, #16]
 8017fcc:	442a      	add	r2, r5
 8017fce:	442b      	add	r3, r5
 8017fd0:	1b7f      	subs	r7, r7, r5
 8017fd2:	60a2      	str	r2, [r4, #8]
 8017fd4:	6123      	str	r3, [r4, #16]
 8017fd6:	2201      	movs	r2, #1
 8017fd8:	4639      	mov	r1, r7
 8017fda:	4620      	mov	r0, r4
 8017fdc:	f7f9 fcb8 	bl	8011950 <ucdr_check_final_buffer_behavior_array>
 8017fe0:	1bf1      	subs	r1, r6, r7
 8017fe2:	4441      	add	r1, r8
 8017fe4:	4605      	mov	r5, r0
 8017fe6:	4602      	mov	r2, r0
 8017fe8:	2800      	cmp	r0, #0
 8017fea:	d1ea      	bne.n	8017fc2 <ucdr_serialize_endian_array_uint8_t+0x16>
 8017fec:	2301      	movs	r3, #1
 8017fee:	7da0      	ldrb	r0, [r4, #22]
 8017ff0:	7563      	strb	r3, [r4, #21]
 8017ff2:	4058      	eors	r0, r3
 8017ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ff8:	4632      	mov	r2, r6
 8017ffa:	68a0      	ldr	r0, [r4, #8]
 8017ffc:	4641      	mov	r1, r8
 8017ffe:	f002 fb8a 	bl	801a716 <memcpy>
 8018002:	68a2      	ldr	r2, [r4, #8]
 8018004:	6923      	ldr	r3, [r4, #16]
 8018006:	4432      	add	r2, r6
 8018008:	4433      	add	r3, r6
 801800a:	60a2      	str	r2, [r4, #8]
 801800c:	6123      	str	r3, [r4, #16]
 801800e:	e7ed      	b.n	8017fec <ucdr_serialize_endian_array_uint8_t+0x40>

08018010 <ucdr_deserialize_array_uint8_t>:
 8018010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018014:	4688      	mov	r8, r1
 8018016:	4611      	mov	r1, r2
 8018018:	4616      	mov	r6, r2
 801801a:	4604      	mov	r4, r0
 801801c:	f7f9 fc12 	bl	8011844 <ucdr_check_buffer_available_for>
 8018020:	b9e0      	cbnz	r0, 801805c <ucdr_deserialize_array_uint8_t+0x4c>
 8018022:	4637      	mov	r7, r6
 8018024:	e009      	b.n	801803a <ucdr_deserialize_array_uint8_t+0x2a>
 8018026:	68a1      	ldr	r1, [r4, #8]
 8018028:	f002 fb75 	bl	801a716 <memcpy>
 801802c:	68a2      	ldr	r2, [r4, #8]
 801802e:	6923      	ldr	r3, [r4, #16]
 8018030:	442a      	add	r2, r5
 8018032:	442b      	add	r3, r5
 8018034:	1b7f      	subs	r7, r7, r5
 8018036:	60a2      	str	r2, [r4, #8]
 8018038:	6123      	str	r3, [r4, #16]
 801803a:	2201      	movs	r2, #1
 801803c:	4639      	mov	r1, r7
 801803e:	4620      	mov	r0, r4
 8018040:	f7f9 fc86 	bl	8011950 <ucdr_check_final_buffer_behavior_array>
 8018044:	4605      	mov	r5, r0
 8018046:	1bf0      	subs	r0, r6, r7
 8018048:	4440      	add	r0, r8
 801804a:	462a      	mov	r2, r5
 801804c:	2d00      	cmp	r5, #0
 801804e:	d1ea      	bne.n	8018026 <ucdr_deserialize_array_uint8_t+0x16>
 8018050:	2301      	movs	r3, #1
 8018052:	7da0      	ldrb	r0, [r4, #22]
 8018054:	7563      	strb	r3, [r4, #21]
 8018056:	4058      	eors	r0, r3
 8018058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801805c:	4632      	mov	r2, r6
 801805e:	68a1      	ldr	r1, [r4, #8]
 8018060:	4640      	mov	r0, r8
 8018062:	f002 fb58 	bl	801a716 <memcpy>
 8018066:	68a3      	ldr	r3, [r4, #8]
 8018068:	6922      	ldr	r2, [r4, #16]
 801806a:	4433      	add	r3, r6
 801806c:	4432      	add	r2, r6
 801806e:	60a3      	str	r3, [r4, #8]
 8018070:	6122      	str	r2, [r4, #16]
 8018072:	e7ed      	b.n	8018050 <ucdr_deserialize_array_uint8_t+0x40>

08018074 <ucdr_deserialize_endian_array_uint8_t>:
 8018074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018078:	4619      	mov	r1, r3
 801807a:	461e      	mov	r6, r3
 801807c:	4690      	mov	r8, r2
 801807e:	4604      	mov	r4, r0
 8018080:	f7f9 fbe0 	bl	8011844 <ucdr_check_buffer_available_for>
 8018084:	b9e0      	cbnz	r0, 80180c0 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8018086:	4637      	mov	r7, r6
 8018088:	e009      	b.n	801809e <ucdr_deserialize_endian_array_uint8_t+0x2a>
 801808a:	68a1      	ldr	r1, [r4, #8]
 801808c:	f002 fb43 	bl	801a716 <memcpy>
 8018090:	68a2      	ldr	r2, [r4, #8]
 8018092:	6923      	ldr	r3, [r4, #16]
 8018094:	442a      	add	r2, r5
 8018096:	442b      	add	r3, r5
 8018098:	1b7f      	subs	r7, r7, r5
 801809a:	60a2      	str	r2, [r4, #8]
 801809c:	6123      	str	r3, [r4, #16]
 801809e:	2201      	movs	r2, #1
 80180a0:	4639      	mov	r1, r7
 80180a2:	4620      	mov	r0, r4
 80180a4:	f7f9 fc54 	bl	8011950 <ucdr_check_final_buffer_behavior_array>
 80180a8:	4605      	mov	r5, r0
 80180aa:	1bf0      	subs	r0, r6, r7
 80180ac:	4440      	add	r0, r8
 80180ae:	462a      	mov	r2, r5
 80180b0:	2d00      	cmp	r5, #0
 80180b2:	d1ea      	bne.n	801808a <ucdr_deserialize_endian_array_uint8_t+0x16>
 80180b4:	2301      	movs	r3, #1
 80180b6:	7da0      	ldrb	r0, [r4, #22]
 80180b8:	7563      	strb	r3, [r4, #21]
 80180ba:	4058      	eors	r0, r3
 80180bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80180c0:	4632      	mov	r2, r6
 80180c2:	68a1      	ldr	r1, [r4, #8]
 80180c4:	4640      	mov	r0, r8
 80180c6:	f002 fb26 	bl	801a716 <memcpy>
 80180ca:	68a2      	ldr	r2, [r4, #8]
 80180cc:	6923      	ldr	r3, [r4, #16]
 80180ce:	4432      	add	r2, r6
 80180d0:	4433      	add	r3, r6
 80180d2:	60a2      	str	r2, [r4, #8]
 80180d4:	6123      	str	r3, [r4, #16]
 80180d6:	e7ed      	b.n	80180b4 <ucdr_deserialize_endian_array_uint8_t+0x40>

080180d8 <ucdr_serialize_sequence_char>:
 80180d8:	b570      	push	{r4, r5, r6, lr}
 80180da:	460e      	mov	r6, r1
 80180dc:	4615      	mov	r5, r2
 80180de:	7d01      	ldrb	r1, [r0, #20]
 80180e0:	4604      	mov	r4, r0
 80180e2:	f7f8 ff05 	bl	8010ef0 <ucdr_serialize_endian_uint32_t>
 80180e6:	b90d      	cbnz	r5, 80180ec <ucdr_serialize_sequence_char+0x14>
 80180e8:	2001      	movs	r0, #1
 80180ea:	bd70      	pop	{r4, r5, r6, pc}
 80180ec:	7d21      	ldrb	r1, [r4, #20]
 80180ee:	462b      	mov	r3, r5
 80180f0:	4632      	mov	r2, r6
 80180f2:	4620      	mov	r0, r4
 80180f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80180f8:	f7ff bec2 	b.w	8017e80 <ucdr_serialize_endian_array_char>

080180fc <ucdr_deserialize_sequence_char>:
 80180fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018100:	461d      	mov	r5, r3
 8018102:	4616      	mov	r6, r2
 8018104:	460f      	mov	r7, r1
 8018106:	461a      	mov	r2, r3
 8018108:	7d01      	ldrb	r1, [r0, #20]
 801810a:	4604      	mov	r4, r0
 801810c:	f7f9 f818 	bl	8011140 <ucdr_deserialize_endian_uint32_t>
 8018110:	682b      	ldr	r3, [r5, #0]
 8018112:	429e      	cmp	r6, r3
 8018114:	bf3c      	itt	cc
 8018116:	2201      	movcc	r2, #1
 8018118:	75a2      	strbcc	r2, [r4, #22]
 801811a:	b913      	cbnz	r3, 8018122 <ucdr_deserialize_sequence_char+0x26>
 801811c:	2001      	movs	r0, #1
 801811e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018122:	7d21      	ldrb	r1, [r4, #20]
 8018124:	463a      	mov	r2, r7
 8018126:	4620      	mov	r0, r4
 8018128:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801812c:	f7ff beda 	b.w	8017ee4 <ucdr_deserialize_endian_array_char>

08018130 <ucdr_serialize_sequence_uint8_t>:
 8018130:	b570      	push	{r4, r5, r6, lr}
 8018132:	460e      	mov	r6, r1
 8018134:	4615      	mov	r5, r2
 8018136:	7d01      	ldrb	r1, [r0, #20]
 8018138:	4604      	mov	r4, r0
 801813a:	f7f8 fed9 	bl	8010ef0 <ucdr_serialize_endian_uint32_t>
 801813e:	b90d      	cbnz	r5, 8018144 <ucdr_serialize_sequence_uint8_t+0x14>
 8018140:	2001      	movs	r0, #1
 8018142:	bd70      	pop	{r4, r5, r6, pc}
 8018144:	7d21      	ldrb	r1, [r4, #20]
 8018146:	462b      	mov	r3, r5
 8018148:	4632      	mov	r2, r6
 801814a:	4620      	mov	r0, r4
 801814c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018150:	f7ff bf2c 	b.w	8017fac <ucdr_serialize_endian_array_uint8_t>

08018154 <ucdr_deserialize_sequence_uint8_t>:
 8018154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018158:	461d      	mov	r5, r3
 801815a:	4616      	mov	r6, r2
 801815c:	460f      	mov	r7, r1
 801815e:	461a      	mov	r2, r3
 8018160:	7d01      	ldrb	r1, [r0, #20]
 8018162:	4604      	mov	r4, r0
 8018164:	f7f8 ffec 	bl	8011140 <ucdr_deserialize_endian_uint32_t>
 8018168:	682b      	ldr	r3, [r5, #0]
 801816a:	429e      	cmp	r6, r3
 801816c:	bf3c      	itt	cc
 801816e:	2201      	movcc	r2, #1
 8018170:	75a2      	strbcc	r2, [r4, #22]
 8018172:	b913      	cbnz	r3, 801817a <ucdr_deserialize_sequence_uint8_t+0x26>
 8018174:	2001      	movs	r0, #1
 8018176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801817a:	7d21      	ldrb	r1, [r4, #20]
 801817c:	463a      	mov	r2, r7
 801817e:	4620      	mov	r0, r4
 8018180:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018184:	f7ff bf76 	b.w	8018074 <ucdr_deserialize_endian_array_uint8_t>

08018188 <ucdr_serialize_string>:
 8018188:	b510      	push	{r4, lr}
 801818a:	b082      	sub	sp, #8
 801818c:	4604      	mov	r4, r0
 801818e:	4608      	mov	r0, r1
 8018190:	9101      	str	r1, [sp, #4]
 8018192:	f7e8 f82f 	bl	80001f4 <strlen>
 8018196:	9901      	ldr	r1, [sp, #4]
 8018198:	4602      	mov	r2, r0
 801819a:	3201      	adds	r2, #1
 801819c:	4620      	mov	r0, r4
 801819e:	b002      	add	sp, #8
 80181a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80181a4:	f7ff bf98 	b.w	80180d8 <ucdr_serialize_sequence_char>

080181a8 <ucdr_deserialize_string>:
 80181a8:	b500      	push	{lr}
 80181aa:	b083      	sub	sp, #12
 80181ac:	ab01      	add	r3, sp, #4
 80181ae:	f7ff ffa5 	bl	80180fc <ucdr_deserialize_sequence_char>
 80181b2:	b003      	add	sp, #12
 80181b4:	f85d fb04 	ldr.w	pc, [sp], #4

080181b8 <get_custom_error>:
 80181b8:	4b01      	ldr	r3, [pc, #4]	; (80181c0 <get_custom_error+0x8>)
 80181ba:	7818      	ldrb	r0, [r3, #0]
 80181bc:	4770      	bx	lr
 80181be:	bf00      	nop
 80181c0:	20009d48 	.word	0x20009d48

080181c4 <recv_custom_msg>:
 80181c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181c8:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 80181cc:	b089      	sub	sp, #36	; 0x24
 80181ce:	2600      	movs	r6, #0
 80181d0:	4604      	mov	r4, r0
 80181d2:	9305      	str	r3, [sp, #20]
 80181d4:	468a      	mov	sl, r1
 80181d6:	4693      	mov	fp, r2
 80181d8:	f88d 601e 	strb.w	r6, [sp, #30]
 80181dc:	b325      	cbz	r5, 8018228 <recv_custom_msg+0x64>
 80181de:	f200 2902 	addw	r9, r0, #514	; 0x202
 80181e2:	f10d 081f 	add.w	r8, sp, #31
 80181e6:	af05      	add	r7, sp, #20
 80181e8:	f10d 061e 	add.w	r6, sp, #30
 80181ec:	f44f 7500 	mov.w	r5, #512	; 0x200
 80181f0:	e002      	b.n	80181f8 <recv_custom_msg+0x34>
 80181f2:	9b05      	ldr	r3, [sp, #20]
 80181f4:	2b00      	cmp	r3, #0
 80181f6:	dd0f      	ble.n	8018218 <recv_custom_msg+0x54>
 80181f8:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80181fc:	e9cd 5600 	strd	r5, r6, [sp]
 8018200:	4623      	mov	r3, r4
 8018202:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 8018206:	4622      	mov	r2, r4
 8018208:	4648      	mov	r0, r9
 801820a:	f000 ffc9 	bl	80191a0 <uxr_read_framed_msg>
 801820e:	2800      	cmp	r0, #0
 8018210:	d0ef      	beq.n	80181f2 <recv_custom_msg+0x2e>
 8018212:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8018216:	b1b3      	cbz	r3, 8018246 <recv_custom_msg+0x82>
 8018218:	4b0f      	ldr	r3, [pc, #60]	; (8018258 <recv_custom_msg+0x94>)
 801821a:	f89d 201f 	ldrb.w	r2, [sp, #31]
 801821e:	701a      	strb	r2, [r3, #0]
 8018220:	2000      	movs	r0, #0
 8018222:	b009      	add	sp, #36	; 0x24
 8018224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018228:	f10d 021f 	add.w	r2, sp, #31
 801822c:	9200      	str	r2, [sp, #0]
 801822e:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 8018232:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018236:	4601      	mov	r1, r0
 8018238:	47a8      	blx	r5
 801823a:	2800      	cmp	r0, #0
 801823c:	d0ec      	beq.n	8018218 <recv_custom_msg+0x54>
 801823e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8018242:	2b00      	cmp	r3, #0
 8018244:	d1e8      	bne.n	8018218 <recv_custom_msg+0x54>
 8018246:	f8cb 0000 	str.w	r0, [fp]
 801824a:	2001      	movs	r0, #1
 801824c:	f8ca 4000 	str.w	r4, [sl]
 8018250:	b009      	add	sp, #36	; 0x24
 8018252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018256:	bf00      	nop
 8018258:	20009d48 	.word	0x20009d48

0801825c <send_custom_msg>:
 801825c:	b570      	push	{r4, r5, r6, lr}
 801825e:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 8018262:	b086      	sub	sp, #24
 8018264:	4616      	mov	r6, r2
 8018266:	b975      	cbnz	r5, 8018286 <send_custom_msg+0x2a>
 8018268:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 801826c:	f10d 0317 	add.w	r3, sp, #23
 8018270:	47a0      	blx	r4
 8018272:	b108      	cbz	r0, 8018278 <send_custom_msg+0x1c>
 8018274:	42b0      	cmp	r0, r6
 8018276:	d015      	beq.n	80182a4 <send_custom_msg+0x48>
 8018278:	4b0c      	ldr	r3, [pc, #48]	; (80182ac <send_custom_msg+0x50>)
 801827a:	f89d 2017 	ldrb.w	r2, [sp, #23]
 801827e:	701a      	strb	r2, [r3, #0]
 8018280:	2000      	movs	r0, #0
 8018282:	b006      	add	sp, #24
 8018284:	bd70      	pop	{r4, r5, r6, pc}
 8018286:	460b      	mov	r3, r1
 8018288:	2200      	movs	r2, #0
 801828a:	f10d 0117 	add.w	r1, sp, #23
 801828e:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8018292:	9600      	str	r6, [sp, #0]
 8018294:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 8018298:	4602      	mov	r2, r0
 801829a:	f200 2002 	addw	r0, r0, #514	; 0x202
 801829e:	f000 fd97 	bl	8018dd0 <uxr_write_framed_msg>
 80182a2:	e7e6      	b.n	8018272 <send_custom_msg+0x16>
 80182a4:	2001      	movs	r0, #1
 80182a6:	b006      	add	sp, #24
 80182a8:	bd70      	pop	{r4, r5, r6, pc}
 80182aa:	bf00      	nop
 80182ac:	20009d48 	.word	0x20009d48

080182b0 <uxr_set_custom_transport_callbacks>:
 80182b0:	b430      	push	{r4, r5}
 80182b2:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 80182b6:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 80182ba:	e9c0 549c 	strd	r5, r4, [r0, #624]	; 0x270
 80182be:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 80182c2:	bc30      	pop	{r4, r5}
 80182c4:	4770      	bx	lr
 80182c6:	bf00      	nop

080182c8 <uxr_init_custom_transport>:
 80182c8:	b538      	push	{r3, r4, r5, lr}
 80182ca:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 80182ce:	b303      	cbz	r3, 8018312 <uxr_init_custom_transport+0x4a>
 80182d0:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 80182d4:	4604      	mov	r4, r0
 80182d6:	b1e2      	cbz	r2, 8018312 <uxr_init_custom_transport+0x4a>
 80182d8:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 80182dc:	b1ca      	cbz	r2, 8018312 <uxr_init_custom_transport+0x4a>
 80182de:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 80182e2:	b1b2      	cbz	r2, 8018312 <uxr_init_custom_transport+0x4a>
 80182e4:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 80182e8:	4798      	blx	r3
 80182ea:	4605      	mov	r5, r0
 80182ec:	b188      	cbz	r0, 8018312 <uxr_init_custom_transport+0x4a>
 80182ee:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80182f2:	b98b      	cbnz	r3, 8018318 <uxr_init_custom_transport+0x50>
 80182f4:	480b      	ldr	r0, [pc, #44]	; (8018324 <uxr_init_custom_transport+0x5c>)
 80182f6:	490c      	ldr	r1, [pc, #48]	; (8018328 <uxr_init_custom_transport+0x60>)
 80182f8:	4a0c      	ldr	r2, [pc, #48]	; (801832c <uxr_init_custom_transport+0x64>)
 80182fa:	f8c4 4278 	str.w	r4, [r4, #632]	; 0x278
 80182fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8018302:	e9c4 019f 	strd	r0, r1, [r4, #636]	; 0x27c
 8018306:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 801830a:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 801830e:	4628      	mov	r0, r5
 8018310:	bd38      	pop	{r3, r4, r5, pc}
 8018312:	2500      	movs	r5, #0
 8018314:	4628      	mov	r0, r5
 8018316:	bd38      	pop	{r3, r4, r5, pc}
 8018318:	2100      	movs	r1, #0
 801831a:	f204 2002 	addw	r0, r4, #514	; 0x202
 801831e:	f000 fd51 	bl	8018dc4 <uxr_init_framing_io>
 8018322:	e7e7      	b.n	80182f4 <uxr_init_custom_transport+0x2c>
 8018324:	0801825d 	.word	0x0801825d
 8018328:	080181c5 	.word	0x080181c5
 801832c:	080181b9 	.word	0x080181b9

08018330 <uxr_close_custom_transport>:
 8018330:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8018334:	4718      	bx	r3
 8018336:	bf00      	nop

08018338 <uxr_init_input_best_effort_stream>:
 8018338:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801833c:	8003      	strh	r3, [r0, #0]
 801833e:	4770      	bx	lr

08018340 <uxr_reset_input_best_effort_stream>:
 8018340:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018344:	8003      	strh	r3, [r0, #0]
 8018346:	4770      	bx	lr

08018348 <uxr_receive_best_effort_message>:
 8018348:	b538      	push	{r3, r4, r5, lr}
 801834a:	4604      	mov	r4, r0
 801834c:	8800      	ldrh	r0, [r0, #0]
 801834e:	460d      	mov	r5, r1
 8018350:	f000 fd20 	bl	8018d94 <uxr_seq_num_cmp>
 8018354:	4603      	mov	r3, r0
 8018356:	2b00      	cmp	r3, #0
 8018358:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 801835c:	bfb8      	it	lt
 801835e:	8025      	strhlt	r5, [r4, #0]
 8018360:	bd38      	pop	{r3, r4, r5, pc}
 8018362:	bf00      	nop

08018364 <on_full_input_buffer>:
 8018364:	b570      	push	{r4, r5, r6, lr}
 8018366:	6802      	ldr	r2, [r0, #0]
 8018368:	460d      	mov	r5, r1
 801836a:	6809      	ldr	r1, [r1, #0]
 801836c:	686c      	ldr	r4, [r5, #4]
 801836e:	1a53      	subs	r3, r2, r1
 8018370:	4606      	mov	r6, r0
 8018372:	8928      	ldrh	r0, [r5, #8]
 8018374:	fbb4 f4f0 	udiv	r4, r4, r0
 8018378:	fbb3 f3f4 	udiv	r3, r3, r4
 801837c:	3301      	adds	r3, #1
 801837e:	b29b      	uxth	r3, r3
 8018380:	fbb3 f2f0 	udiv	r2, r3, r0
 8018384:	fb00 3312 	mls	r3, r0, r2, r3
 8018388:	b29b      	uxth	r3, r3
 801838a:	fb04 f403 	mul.w	r4, r4, r3
 801838e:	1d23      	adds	r3, r4, #4
 8018390:	440b      	add	r3, r1
 8018392:	7d28      	ldrb	r0, [r5, #20]
 8018394:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8018398:	b110      	cbz	r0, 80183a0 <on_full_input_buffer+0x3c>
 801839a:	2000      	movs	r0, #0
 801839c:	f843 0c04 	str.w	r0, [r3, #-4]
 80183a0:	2a03      	cmp	r2, #3
 80183a2:	d801      	bhi.n	80183a8 <on_full_input_buffer+0x44>
 80183a4:	2001      	movs	r0, #1
 80183a6:	bd70      	pop	{r4, r5, r6, pc}
 80183a8:	3408      	adds	r4, #8
 80183aa:	6933      	ldr	r3, [r6, #16]
 80183ac:	4421      	add	r1, r4
 80183ae:	4630      	mov	r0, r6
 80183b0:	3a04      	subs	r2, #4
 80183b2:	f7f9 fa91 	bl	80118d8 <ucdr_init_buffer_origin>
 80183b6:	4630      	mov	r0, r6
 80183b8:	4902      	ldr	r1, [pc, #8]	; (80183c4 <on_full_input_buffer+0x60>)
 80183ba:	462a      	mov	r2, r5
 80183bc:	f7f9 fa6a 	bl	8011894 <ucdr_set_on_full_buffer_callback>
 80183c0:	2000      	movs	r0, #0
 80183c2:	bd70      	pop	{r4, r5, r6, pc}
 80183c4:	08018365 	.word	0x08018365

080183c8 <uxr_init_input_reliable_stream>:
 80183c8:	b470      	push	{r4, r5, r6}
 80183ca:	9c03      	ldr	r4, [sp, #12]
 80183cc:	6001      	str	r1, [r0, #0]
 80183ce:	2600      	movs	r6, #0
 80183d0:	8103      	strh	r3, [r0, #8]
 80183d2:	6042      	str	r2, [r0, #4]
 80183d4:	6104      	str	r4, [r0, #16]
 80183d6:	7506      	strb	r6, [r0, #20]
 80183d8:	b1ab      	cbz	r3, 8018406 <uxr_init_input_reliable_stream+0x3e>
 80183da:	600e      	str	r6, [r1, #0]
 80183dc:	8901      	ldrh	r1, [r0, #8]
 80183de:	2901      	cmp	r1, #1
 80183e0:	d911      	bls.n	8018406 <uxr_init_input_reliable_stream+0x3e>
 80183e2:	2201      	movs	r2, #1
 80183e4:	e9d0 5400 	ldrd	r5, r4, [r0]
 80183e8:	fbb2 f3f1 	udiv	r3, r2, r1
 80183ec:	fb01 2313 	mls	r3, r1, r3, r2
 80183f0:	b29b      	uxth	r3, r3
 80183f2:	fbb4 f1f1 	udiv	r1, r4, r1
 80183f6:	fb03 f301 	mul.w	r3, r3, r1
 80183fa:	3201      	adds	r2, #1
 80183fc:	50ee      	str	r6, [r5, r3]
 80183fe:	8901      	ldrh	r1, [r0, #8]
 8018400:	b292      	uxth	r2, r2
 8018402:	4291      	cmp	r1, r2
 8018404:	d8ee      	bhi.n	80183e4 <uxr_init_input_reliable_stream+0x1c>
 8018406:	f04f 33ff 	mov.w	r3, #4294967295
 801840a:	bc70      	pop	{r4, r5, r6}
 801840c:	60c3      	str	r3, [r0, #12]
 801840e:	4770      	bx	lr

08018410 <uxr_reset_input_reliable_stream>:
 8018410:	8902      	ldrh	r2, [r0, #8]
 8018412:	b1ca      	cbz	r2, 8018448 <uxr_reset_input_reliable_stream+0x38>
 8018414:	b470      	push	{r4, r5, r6}
 8018416:	2400      	movs	r4, #0
 8018418:	4621      	mov	r1, r4
 801841a:	4626      	mov	r6, r4
 801841c:	fbb1 f3f2 	udiv	r3, r1, r2
 8018420:	fb02 1313 	mls	r3, r2, r3, r1
 8018424:	e9d0 5100 	ldrd	r5, r1, [r0]
 8018428:	b29b      	uxth	r3, r3
 801842a:	fbb1 f2f2 	udiv	r2, r1, r2
 801842e:	fb03 f302 	mul.w	r3, r3, r2
 8018432:	3401      	adds	r4, #1
 8018434:	50ee      	str	r6, [r5, r3]
 8018436:	8902      	ldrh	r2, [r0, #8]
 8018438:	b2a1      	uxth	r1, r4
 801843a:	428a      	cmp	r2, r1
 801843c:	d8ee      	bhi.n	801841c <uxr_reset_input_reliable_stream+0xc>
 801843e:	f04f 33ff 	mov.w	r3, #4294967295
 8018442:	bc70      	pop	{r4, r5, r6}
 8018444:	60c3      	str	r3, [r0, #12]
 8018446:	4770      	bx	lr
 8018448:	f04f 33ff 	mov.w	r3, #4294967295
 801844c:	60c3      	str	r3, [r0, #12]
 801844e:	4770      	bx	lr

08018450 <uxr_receive_reliable_message>:
 8018450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018454:	4604      	mov	r4, r0
 8018456:	460d      	mov	r5, r1
 8018458:	8901      	ldrh	r1, [r0, #8]
 801845a:	8980      	ldrh	r0, [r0, #12]
 801845c:	4690      	mov	r8, r2
 801845e:	461f      	mov	r7, r3
 8018460:	f000 fc90 	bl	8018d84 <uxr_seq_num_add>
 8018464:	4629      	mov	r1, r5
 8018466:	4606      	mov	r6, r0
 8018468:	89a0      	ldrh	r0, [r4, #12]
 801846a:	f000 fc93 	bl	8018d94 <uxr_seq_num_cmp>
 801846e:	2800      	cmp	r0, #0
 8018470:	db0a      	blt.n	8018488 <uxr_receive_reliable_message+0x38>
 8018472:	2600      	movs	r6, #0
 8018474:	89e0      	ldrh	r0, [r4, #14]
 8018476:	4629      	mov	r1, r5
 8018478:	f000 fc8c 	bl	8018d94 <uxr_seq_num_cmp>
 801847c:	2800      	cmp	r0, #0
 801847e:	bfb8      	it	lt
 8018480:	81e5      	strhlt	r5, [r4, #14]
 8018482:	4630      	mov	r0, r6
 8018484:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018488:	4630      	mov	r0, r6
 801848a:	4629      	mov	r1, r5
 801848c:	f000 fc82 	bl	8018d94 <uxr_seq_num_cmp>
 8018490:	2800      	cmp	r0, #0
 8018492:	dbee      	blt.n	8018472 <uxr_receive_reliable_message+0x22>
 8018494:	6923      	ldr	r3, [r4, #16]
 8018496:	4640      	mov	r0, r8
 8018498:	4798      	blx	r3
 801849a:	2101      	movs	r1, #1
 801849c:	4681      	mov	r9, r0
 801849e:	89a0      	ldrh	r0, [r4, #12]
 80184a0:	f000 fc70 	bl	8018d84 <uxr_seq_num_add>
 80184a4:	f1b9 0f00 	cmp.w	r9, #0
 80184a8:	d101      	bne.n	80184ae <uxr_receive_reliable_message+0x5e>
 80184aa:	4285      	cmp	r5, r0
 80184ac:	d049      	beq.n	8018542 <uxr_receive_reliable_message+0xf2>
 80184ae:	8921      	ldrh	r1, [r4, #8]
 80184b0:	fbb5 f3f1 	udiv	r3, r5, r1
 80184b4:	fb01 5313 	mls	r3, r1, r3, r5
 80184b8:	b29b      	uxth	r3, r3
 80184ba:	6862      	ldr	r2, [r4, #4]
 80184bc:	6820      	ldr	r0, [r4, #0]
 80184be:	fbb2 f2f1 	udiv	r2, r2, r1
 80184c2:	fb03 f302 	mul.w	r3, r3, r2
 80184c6:	3304      	adds	r3, #4
 80184c8:	4418      	add	r0, r3
 80184ca:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80184ce:	2b00      	cmp	r3, #0
 80184d0:	d1cf      	bne.n	8018472 <uxr_receive_reliable_message+0x22>
 80184d2:	4641      	mov	r1, r8
 80184d4:	463a      	mov	r2, r7
 80184d6:	f002 f91e 	bl	801a716 <memcpy>
 80184da:	8921      	ldrh	r1, [r4, #8]
 80184dc:	fbb5 f3f1 	udiv	r3, r5, r1
 80184e0:	fb01 5313 	mls	r3, r1, r3, r5
 80184e4:	b29b      	uxth	r3, r3
 80184e6:	6862      	ldr	r2, [r4, #4]
 80184e8:	fbb2 f2f1 	udiv	r2, r2, r1
 80184ec:	6821      	ldr	r1, [r4, #0]
 80184ee:	fb03 f302 	mul.w	r3, r3, r2
 80184f2:	2201      	movs	r2, #1
 80184f4:	50cf      	str	r7, [r1, r3]
 80184f6:	9b08      	ldr	r3, [sp, #32]
 80184f8:	701a      	strb	r2, [r3, #0]
 80184fa:	f1b9 0f00 	cmp.w	r9, #0
 80184fe:	d0b8      	beq.n	8018472 <uxr_receive_reliable_message+0x22>
 8018500:	89a6      	ldrh	r6, [r4, #12]
 8018502:	e001      	b.n	8018508 <uxr_receive_reliable_message+0xb8>
 8018504:	2801      	cmp	r0, #1
 8018506:	d1b4      	bne.n	8018472 <uxr_receive_reliable_message+0x22>
 8018508:	4630      	mov	r0, r6
 801850a:	2101      	movs	r1, #1
 801850c:	f000 fc3a 	bl	8018d84 <uxr_seq_num_add>
 8018510:	8921      	ldrh	r1, [r4, #8]
 8018512:	fbb0 f3f1 	udiv	r3, r0, r1
 8018516:	fb01 0313 	mls	r3, r1, r3, r0
 801851a:	b29b      	uxth	r3, r3
 801851c:	6862      	ldr	r2, [r4, #4]
 801851e:	fbb2 f2f1 	udiv	r2, r2, r1
 8018522:	4606      	mov	r6, r0
 8018524:	fb03 f302 	mul.w	r3, r3, r2
 8018528:	6820      	ldr	r0, [r4, #0]
 801852a:	3304      	adds	r3, #4
 801852c:	4418      	add	r0, r3
 801852e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018532:	2b00      	cmp	r3, #0
 8018534:	d09d      	beq.n	8018472 <uxr_receive_reliable_message+0x22>
 8018536:	6923      	ldr	r3, [r4, #16]
 8018538:	4798      	blx	r3
 801853a:	2802      	cmp	r0, #2
 801853c:	d1e2      	bne.n	8018504 <uxr_receive_reliable_message+0xb4>
 801853e:	2601      	movs	r6, #1
 8018540:	e798      	b.n	8018474 <uxr_receive_reliable_message+0x24>
 8018542:	9b08      	ldr	r3, [sp, #32]
 8018544:	81a5      	strh	r5, [r4, #12]
 8018546:	2601      	movs	r6, #1
 8018548:	f883 9000 	strb.w	r9, [r3]
 801854c:	e792      	b.n	8018474 <uxr_receive_reliable_message+0x24>
 801854e:	bf00      	nop

08018550 <uxr_next_input_reliable_buffer_available>:
 8018550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018554:	4604      	mov	r4, r0
 8018556:	460e      	mov	r6, r1
 8018558:	8980      	ldrh	r0, [r0, #12]
 801855a:	2101      	movs	r1, #1
 801855c:	4617      	mov	r7, r2
 801855e:	f000 fc11 	bl	8018d84 <uxr_seq_num_add>
 8018562:	8921      	ldrh	r1, [r4, #8]
 8018564:	fbb0 f3f1 	udiv	r3, r0, r1
 8018568:	fb01 0313 	mls	r3, r1, r3, r0
 801856c:	b29b      	uxth	r3, r3
 801856e:	6862      	ldr	r2, [r4, #4]
 8018570:	fbb2 f2f1 	udiv	r2, r2, r1
 8018574:	fb03 f302 	mul.w	r3, r3, r2
 8018578:	6822      	ldr	r2, [r4, #0]
 801857a:	3304      	adds	r3, #4
 801857c:	eb02 0803 	add.w	r8, r2, r3
 8018580:	f858 9c04 	ldr.w	r9, [r8, #-4]
 8018584:	f1b9 0f00 	cmp.w	r9, #0
 8018588:	d025      	beq.n	80185d6 <uxr_next_input_reliable_buffer_available+0x86>
 801858a:	6923      	ldr	r3, [r4, #16]
 801858c:	4605      	mov	r5, r0
 801858e:	4640      	mov	r0, r8
 8018590:	4798      	blx	r3
 8018592:	4682      	mov	sl, r0
 8018594:	b310      	cbz	r0, 80185dc <uxr_next_input_reliable_buffer_available+0x8c>
 8018596:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801859a:	e005      	b.n	80185a8 <uxr_next_input_reliable_buffer_available+0x58>
 801859c:	6923      	ldr	r3, [r4, #16]
 801859e:	4798      	blx	r3
 80185a0:	2802      	cmp	r0, #2
 80185a2:	d032      	beq.n	801860a <uxr_next_input_reliable_buffer_available+0xba>
 80185a4:	2801      	cmp	r0, #1
 80185a6:	d116      	bne.n	80185d6 <uxr_next_input_reliable_buffer_available+0x86>
 80185a8:	4650      	mov	r0, sl
 80185aa:	2101      	movs	r1, #1
 80185ac:	f000 fbea 	bl	8018d84 <uxr_seq_num_add>
 80185b0:	8921      	ldrh	r1, [r4, #8]
 80185b2:	fbb0 f3f1 	udiv	r3, r0, r1
 80185b6:	fb01 0313 	mls	r3, r1, r3, r0
 80185ba:	b29b      	uxth	r3, r3
 80185bc:	6862      	ldr	r2, [r4, #4]
 80185be:	fbb2 f2f1 	udiv	r2, r2, r1
 80185c2:	4682      	mov	sl, r0
 80185c4:	fb03 f302 	mul.w	r3, r3, r2
 80185c8:	6820      	ldr	r0, [r4, #0]
 80185ca:	3304      	adds	r3, #4
 80185cc:	4418      	add	r0, r3
 80185ce:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80185d2:	2b00      	cmp	r3, #0
 80185d4:	d1e2      	bne.n	801859c <uxr_next_input_reliable_buffer_available+0x4c>
 80185d6:	2000      	movs	r0, #0
 80185d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80185dc:	464a      	mov	r2, r9
 80185de:	4641      	mov	r1, r8
 80185e0:	4630      	mov	r0, r6
 80185e2:	f7f9 f981 	bl	80118e8 <ucdr_init_buffer>
 80185e6:	8921      	ldrh	r1, [r4, #8]
 80185e8:	fbb5 f3f1 	udiv	r3, r5, r1
 80185ec:	fb01 5313 	mls	r3, r1, r3, r5
 80185f0:	b29b      	uxth	r3, r3
 80185f2:	6862      	ldr	r2, [r4, #4]
 80185f4:	fbb2 f2f1 	udiv	r2, r2, r1
 80185f8:	6821      	ldr	r1, [r4, #0]
 80185fa:	fb03 f302 	mul.w	r3, r3, r2
 80185fe:	2001      	movs	r0, #1
 8018600:	f841 a003 	str.w	sl, [r1, r3]
 8018604:	81a5      	strh	r5, [r4, #12]
 8018606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801860a:	8922      	ldrh	r2, [r4, #8]
 801860c:	fbb5 f0f2 	udiv	r0, r5, r2
 8018610:	fb02 5510 	mls	r5, r2, r0, r5
 8018614:	b2ad      	uxth	r5, r5
 8018616:	6863      	ldr	r3, [r4, #4]
 8018618:	fbb3 f3f2 	udiv	r3, r3, r2
 801861c:	fb05 f503 	mul.w	r5, r5, r3
 8018620:	6823      	ldr	r3, [r4, #0]
 8018622:	2000      	movs	r0, #0
 8018624:	5158      	str	r0, [r3, r5]
 8018626:	eba9 0207 	sub.w	r2, r9, r7
 801862a:	eb08 0107 	add.w	r1, r8, r7
 801862e:	4630      	mov	r0, r6
 8018630:	f7f9 f95a 	bl	80118e8 <ucdr_init_buffer>
 8018634:	4630      	mov	r0, r6
 8018636:	4904      	ldr	r1, [pc, #16]	; (8018648 <uxr_next_input_reliable_buffer_available+0xf8>)
 8018638:	4622      	mov	r2, r4
 801863a:	f7f9 f92b 	bl	8011894 <ucdr_set_on_full_buffer_callback>
 801863e:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8018642:	2001      	movs	r0, #1
 8018644:	e7c8      	b.n	80185d8 <uxr_next_input_reliable_buffer_available+0x88>
 8018646:	bf00      	nop
 8018648:	08018365 	.word	0x08018365

0801864c <uxr_process_heartbeat>:
 801864c:	b538      	push	{r3, r4, r5, lr}
 801864e:	4611      	mov	r1, r2
 8018650:	4604      	mov	r4, r0
 8018652:	89c0      	ldrh	r0, [r0, #14]
 8018654:	4615      	mov	r5, r2
 8018656:	f000 fb9d 	bl	8018d94 <uxr_seq_num_cmp>
 801865a:	2800      	cmp	r0, #0
 801865c:	bfb8      	it	lt
 801865e:	81e5      	strhlt	r5, [r4, #14]
 8018660:	bd38      	pop	{r3, r4, r5, pc}
 8018662:	bf00      	nop

08018664 <uxr_compute_acknack>:
 8018664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018668:	8903      	ldrh	r3, [r0, #8]
 801866a:	8986      	ldrh	r6, [r0, #12]
 801866c:	4604      	mov	r4, r0
 801866e:	460d      	mov	r5, r1
 8018670:	b1d3      	cbz	r3, 80186a8 <uxr_compute_acknack+0x44>
 8018672:	4630      	mov	r0, r6
 8018674:	2701      	movs	r7, #1
 8018676:	e003      	b.n	8018680 <uxr_compute_acknack+0x1c>
 8018678:	4567      	cmp	r7, ip
 801867a:	d215      	bcs.n	80186a8 <uxr_compute_acknack+0x44>
 801867c:	89a0      	ldrh	r0, [r4, #12]
 801867e:	3701      	adds	r7, #1
 8018680:	b2b9      	uxth	r1, r7
 8018682:	f000 fb7f 	bl	8018d84 <uxr_seq_num_add>
 8018686:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801868a:	fbb0 f2fc 	udiv	r2, r0, ip
 801868e:	e9d4 1300 	ldrd	r1, r3, [r4]
 8018692:	fb0c 0212 	mls	r2, ip, r2, r0
 8018696:	b292      	uxth	r2, r2
 8018698:	fbb3 f3fc 	udiv	r3, r3, ip
 801869c:	fb02 1303 	mla	r3, r2, r3, r1
 80186a0:	681b      	ldr	r3, [r3, #0]
 80186a2:	2b00      	cmp	r3, #0
 80186a4:	d1e8      	bne.n	8018678 <uxr_compute_acknack+0x14>
 80186a6:	4606      	mov	r6, r0
 80186a8:	802e      	strh	r6, [r5, #0]
 80186aa:	4630      	mov	r0, r6
 80186ac:	2101      	movs	r1, #1
 80186ae:	89e6      	ldrh	r6, [r4, #14]
 80186b0:	f000 fb6c 	bl	8018d8c <uxr_seq_num_sub>
 80186b4:	4601      	mov	r1, r0
 80186b6:	4630      	mov	r0, r6
 80186b8:	f000 fb68 	bl	8018d8c <uxr_seq_num_sub>
 80186bc:	4606      	mov	r6, r0
 80186be:	b318      	cbz	r0, 8018708 <uxr_compute_acknack+0xa4>
 80186c0:	f04f 0900 	mov.w	r9, #0
 80186c4:	464f      	mov	r7, r9
 80186c6:	f04f 0801 	mov.w	r8, #1
 80186ca:	fa1f f189 	uxth.w	r1, r9
 80186ce:	8828      	ldrh	r0, [r5, #0]
 80186d0:	f000 fb58 	bl	8018d84 <uxr_seq_num_add>
 80186d4:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80186d8:	6822      	ldr	r2, [r4, #0]
 80186da:	fbb0 f1fc 	udiv	r1, r0, ip
 80186de:	fb01 011c 	mls	r1, r1, ip, r0
 80186e2:	b289      	uxth	r1, r1
 80186e4:	6863      	ldr	r3, [r4, #4]
 80186e6:	fbb3 f3fc 	udiv	r3, r3, ip
 80186ea:	fb01 2303 	mla	r3, r1, r3, r2
 80186ee:	fa08 f209 	lsl.w	r2, r8, r9
 80186f2:	681b      	ldr	r3, [r3, #0]
 80186f4:	f109 0901 	add.w	r9, r9, #1
 80186f8:	b90b      	cbnz	r3, 80186fe <uxr_compute_acknack+0x9a>
 80186fa:	4317      	orrs	r7, r2
 80186fc:	b2bf      	uxth	r7, r7
 80186fe:	454e      	cmp	r6, r9
 8018700:	d1e3      	bne.n	80186ca <uxr_compute_acknack+0x66>
 8018702:	4638      	mov	r0, r7
 8018704:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018708:	4607      	mov	r7, r0
 801870a:	4638      	mov	r0, r7
 801870c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08018710 <uxr_init_output_best_effort_stream>:
 8018710:	b410      	push	{r4}
 8018712:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8018716:	81c4      	strh	r4, [r0, #14]
 8018718:	e9c0 1300 	strd	r1, r3, [r0]
 801871c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018720:	7303      	strb	r3, [r0, #12]
 8018722:	6082      	str	r2, [r0, #8]
 8018724:	4770      	bx	lr
 8018726:	bf00      	nop

08018728 <uxr_reset_output_best_effort_stream>:
 8018728:	7b02      	ldrb	r2, [r0, #12]
 801872a:	6042      	str	r2, [r0, #4]
 801872c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018730:	81c3      	strh	r3, [r0, #14]
 8018732:	4770      	bx	lr

08018734 <uxr_prepare_best_effort_buffer_to_write>:
 8018734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018736:	4604      	mov	r4, r0
 8018738:	b083      	sub	sp, #12
 801873a:	6840      	ldr	r0, [r0, #4]
 801873c:	460d      	mov	r5, r1
 801873e:	4616      	mov	r6, r2
 8018740:	f7fa feb8 	bl	80134b4 <uxr_submessage_padding>
 8018744:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8018748:	4410      	add	r0, r2
 801874a:	1942      	adds	r2, r0, r5
 801874c:	4293      	cmp	r3, r2
 801874e:	bf2c      	ite	cs
 8018750:	2701      	movcs	r7, #1
 8018752:	2700      	movcc	r7, #0
 8018754:	d202      	bcs.n	801875c <uxr_prepare_best_effort_buffer_to_write+0x28>
 8018756:	4638      	mov	r0, r7
 8018758:	b003      	add	sp, #12
 801875a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801875c:	9000      	str	r0, [sp, #0]
 801875e:	6821      	ldr	r1, [r4, #0]
 8018760:	4630      	mov	r0, r6
 8018762:	2300      	movs	r3, #0
 8018764:	f7f9 f8ae 	bl	80118c4 <ucdr_init_buffer_origin_offset>
 8018768:	6861      	ldr	r1, [r4, #4]
 801876a:	4638      	mov	r0, r7
 801876c:	4429      	add	r1, r5
 801876e:	6061      	str	r1, [r4, #4]
 8018770:	b003      	add	sp, #12
 8018772:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018774 <uxr_prepare_best_effort_buffer_to_send>:
 8018774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018778:	6845      	ldr	r5, [r0, #4]
 801877a:	4604      	mov	r4, r0
 801877c:	7b00      	ldrb	r0, [r0, #12]
 801877e:	4285      	cmp	r5, r0
 8018780:	bf8c      	ite	hi
 8018782:	2701      	movhi	r7, #1
 8018784:	2700      	movls	r7, #0
 8018786:	d802      	bhi.n	801878e <uxr_prepare_best_effort_buffer_to_send+0x1a>
 8018788:	4638      	mov	r0, r7
 801878a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801878e:	4688      	mov	r8, r1
 8018790:	89e0      	ldrh	r0, [r4, #14]
 8018792:	2101      	movs	r1, #1
 8018794:	4615      	mov	r5, r2
 8018796:	461e      	mov	r6, r3
 8018798:	f000 faf4 	bl	8018d84 <uxr_seq_num_add>
 801879c:	e9d4 2300 	ldrd	r2, r3, [r4]
 80187a0:	81e0      	strh	r0, [r4, #14]
 80187a2:	8030      	strh	r0, [r6, #0]
 80187a4:	f8c8 2000 	str.w	r2, [r8]
 80187a8:	602b      	str	r3, [r5, #0]
 80187aa:	7b23      	ldrb	r3, [r4, #12]
 80187ac:	6063      	str	r3, [r4, #4]
 80187ae:	4638      	mov	r0, r7
 80187b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080187b4 <on_full_output_buffer>:
 80187b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187b6:	6802      	ldr	r2, [r0, #0]
 80187b8:	460d      	mov	r5, r1
 80187ba:	6809      	ldr	r1, [r1, #0]
 80187bc:	892f      	ldrh	r7, [r5, #8]
 80187be:	686c      	ldr	r4, [r5, #4]
 80187c0:	fbb4 f4f7 	udiv	r4, r4, r7
 80187c4:	1a53      	subs	r3, r2, r1
 80187c6:	fbb3 f3f4 	udiv	r3, r3, r4
 80187ca:	3301      	adds	r3, #1
 80187cc:	b29b      	uxth	r3, r3
 80187ce:	fbb3 f2f7 	udiv	r2, r3, r7
 80187d2:	fb07 3312 	mls	r3, r7, r2, r3
 80187d6:	b29b      	uxth	r3, r3
 80187d8:	fb04 f403 	mul.w	r4, r4, r3
 80187dc:	7b2f      	ldrb	r7, [r5, #12]
 80187de:	590a      	ldr	r2, [r1, r4]
 80187e0:	6903      	ldr	r3, [r0, #16]
 80187e2:	443c      	add	r4, r7
 80187e4:	3408      	adds	r4, #8
 80187e6:	1bd2      	subs	r2, r2, r7
 80187e8:	4606      	mov	r6, r0
 80187ea:	4421      	add	r1, r4
 80187ec:	3a04      	subs	r2, #4
 80187ee:	f7f9 f873 	bl	80118d8 <ucdr_init_buffer_origin>
 80187f2:	4630      	mov	r0, r6
 80187f4:	4902      	ldr	r1, [pc, #8]	; (8018800 <on_full_output_buffer+0x4c>)
 80187f6:	462a      	mov	r2, r5
 80187f8:	f7f9 f84c 	bl	8011894 <ucdr_set_on_full_buffer_callback>
 80187fc:	2000      	movs	r0, #0
 80187fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018800:	080187b5 	.word	0x080187b5

08018804 <uxr_init_output_reliable_stream>:
 8018804:	b430      	push	{r4, r5}
 8018806:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801880a:	6001      	str	r1, [r0, #0]
 801880c:	8103      	strh	r3, [r0, #8]
 801880e:	6042      	str	r2, [r0, #4]
 8018810:	7304      	strb	r4, [r0, #12]
 8018812:	b1b3      	cbz	r3, 8018842 <uxr_init_output_reliable_stream+0x3e>
 8018814:	600c      	str	r4, [r1, #0]
 8018816:	8901      	ldrh	r1, [r0, #8]
 8018818:	2901      	cmp	r1, #1
 801881a:	d912      	bls.n	8018842 <uxr_init_output_reliable_stream+0x3e>
 801881c:	2201      	movs	r2, #1
 801881e:	e9d0 5400 	ldrd	r5, r4, [r0]
 8018822:	fbb2 f3f1 	udiv	r3, r2, r1
 8018826:	fb01 2313 	mls	r3, r1, r3, r2
 801882a:	b29b      	uxth	r3, r3
 801882c:	fbb4 f1f1 	udiv	r1, r4, r1
 8018830:	fb03 f301 	mul.w	r3, r3, r1
 8018834:	7b01      	ldrb	r1, [r0, #12]
 8018836:	50e9      	str	r1, [r5, r3]
 8018838:	3201      	adds	r2, #1
 801883a:	8901      	ldrh	r1, [r0, #8]
 801883c:	b292      	uxth	r2, r2
 801883e:	4291      	cmp	r1, r2
 8018840:	d8ed      	bhi.n	801881e <uxr_init_output_reliable_stream+0x1a>
 8018842:	f04f 32ff 	mov.w	r2, #4294967295
 8018846:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801884a:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801884e:	4b05      	ldr	r3, [pc, #20]	; (8018864 <uxr_init_output_reliable_stream+0x60>)
 8018850:	f8c0 300e 	str.w	r3, [r0, #14]
 8018854:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018858:	2300      	movs	r3, #0
 801885a:	bc30      	pop	{r4, r5}
 801885c:	8242      	strh	r2, [r0, #18]
 801885e:	8403      	strh	r3, [r0, #32]
 8018860:	4770      	bx	lr
 8018862:	bf00      	nop
 8018864:	ffff0000 	.word	0xffff0000

08018868 <uxr_reset_output_reliable_stream>:
 8018868:	8902      	ldrh	r2, [r0, #8]
 801886a:	b430      	push	{r4, r5}
 801886c:	b19a      	cbz	r2, 8018896 <uxr_reset_output_reliable_stream+0x2e>
 801886e:	2400      	movs	r4, #0
 8018870:	4621      	mov	r1, r4
 8018872:	fbb1 f3f2 	udiv	r3, r1, r2
 8018876:	fb02 1313 	mls	r3, r2, r3, r1
 801887a:	e9d0 5100 	ldrd	r5, r1, [r0]
 801887e:	b29b      	uxth	r3, r3
 8018880:	fbb1 f2f2 	udiv	r2, r1, r2
 8018884:	fb03 f302 	mul.w	r3, r3, r2
 8018888:	7b02      	ldrb	r2, [r0, #12]
 801888a:	50ea      	str	r2, [r5, r3]
 801888c:	3401      	adds	r4, #1
 801888e:	8902      	ldrh	r2, [r0, #8]
 8018890:	b2a1      	uxth	r1, r4
 8018892:	428a      	cmp	r2, r1
 8018894:	d8ed      	bhi.n	8018872 <uxr_reset_output_reliable_stream+0xa>
 8018896:	f04f 32ff 	mov.w	r2, #4294967295
 801889a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801889e:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80188a2:	4b05      	ldr	r3, [pc, #20]	; (80188b8 <uxr_reset_output_reliable_stream+0x50>)
 80188a4:	f8c0 300e 	str.w	r3, [r0, #14]
 80188a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80188ac:	2300      	movs	r3, #0
 80188ae:	bc30      	pop	{r4, r5}
 80188b0:	8242      	strh	r2, [r0, #18]
 80188b2:	8403      	strh	r3, [r0, #32]
 80188b4:	4770      	bx	lr
 80188b6:	bf00      	nop
 80188b8:	ffff0000 	.word	0xffff0000

080188bc <uxr_prepare_reliable_buffer_to_write>:
 80188bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188c0:	89c5      	ldrh	r5, [r0, #14]
 80188c2:	4604      	mov	r4, r0
 80188c4:	8900      	ldrh	r0, [r0, #8]
 80188c6:	fbb5 f3f0 	udiv	r3, r5, r0
 80188ca:	4688      	mov	r8, r1
 80188cc:	e9d4 1600 	ldrd	r1, r6, [r4]
 80188d0:	fb00 5313 	mls	r3, r0, r3, r5
 80188d4:	b29b      	uxth	r3, r3
 80188d6:	fbb6 f0f0 	udiv	r0, r6, r0
 80188da:	fb00 f303 	mul.w	r3, r0, r3
 80188de:	3304      	adds	r3, #4
 80188e0:	18cb      	adds	r3, r1, r3
 80188e2:	b091      	sub	sp, #68	; 0x44
 80188e4:	f853 6c04 	ldr.w	r6, [r3, #-4]
 80188e8:	9004      	str	r0, [sp, #16]
 80188ea:	2104      	movs	r1, #4
 80188ec:	4630      	mov	r0, r6
 80188ee:	9305      	str	r3, [sp, #20]
 80188f0:	9206      	str	r2, [sp, #24]
 80188f2:	f7f8 fffd 	bl	80118f0 <ucdr_alignment>
 80188f6:	1833      	adds	r3, r6, r0
 80188f8:	9804      	ldr	r0, [sp, #16]
 80188fa:	9303      	str	r3, [sp, #12]
 80188fc:	eb03 0708 	add.w	r7, r3, r8
 8018900:	1f06      	subs	r6, r0, #4
 8018902:	42b7      	cmp	r7, r6
 8018904:	f240 80dc 	bls.w	8018ac0 <uxr_prepare_reliable_buffer_to_write+0x204>
 8018908:	f894 e00c 	ldrb.w	lr, [r4, #12]
 801890c:	eb0e 0308 	add.w	r3, lr, r8
 8018910:	42b3      	cmp	r3, r6
 8018912:	f240 80c2 	bls.w	8018a9a <uxr_prepare_reliable_buffer_to_write+0x1de>
 8018916:	9b03      	ldr	r3, [sp, #12]
 8018918:	3304      	adds	r3, #4
 801891a:	42b3      	cmp	r3, r6
 801891c:	f080 8112 	bcs.w	8018b44 <uxr_prepare_reliable_buffer_to_write+0x288>
 8018920:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018924:	f1bc 0f00 	cmp.w	ip, #0
 8018928:	f000 8127 	beq.w	8018b7a <uxr_prepare_reliable_buffer_to_write+0x2be>
 801892c:	e9d4 7300 	ldrd	r7, r3, [r4]
 8018930:	2100      	movs	r1, #0
 8018932:	4608      	mov	r0, r1
 8018934:	460a      	mov	r2, r1
 8018936:	fbb3 f9fc 	udiv	r9, r3, ip
 801893a:	fbb2 f3fc 	udiv	r3, r2, ip
 801893e:	fb0c 2313 	mls	r3, ip, r3, r2
 8018942:	b29b      	uxth	r3, r3
 8018944:	fb09 7303 	mla	r3, r9, r3, r7
 8018948:	3101      	adds	r1, #1
 801894a:	681b      	ldr	r3, [r3, #0]
 801894c:	459e      	cmp	lr, r3
 801894e:	bf08      	it	eq
 8018950:	3001      	addeq	r0, #1
 8018952:	b28a      	uxth	r2, r1
 8018954:	bf08      	it	eq
 8018956:	b280      	uxtheq	r0, r0
 8018958:	4562      	cmp	r2, ip
 801895a:	d3ee      	bcc.n	801893a <uxr_prepare_reliable_buffer_to_write+0x7e>
 801895c:	9b03      	ldr	r3, [sp, #12]
 801895e:	1f37      	subs	r7, r6, #4
 8018960:	b2bf      	uxth	r7, r7
 8018962:	eba7 0903 	sub.w	r9, r7, r3
 8018966:	fa1f f989 	uxth.w	r9, r9
 801896a:	eba7 070e 	sub.w	r7, r7, lr
 801896e:	b2bf      	uxth	r7, r7
 8018970:	eba8 0809 	sub.w	r8, r8, r9
 8018974:	fbb8 faf7 	udiv	sl, r8, r7
 8018978:	fb07 831a 	mls	r3, r7, sl, r8
 801897c:	9707      	str	r7, [sp, #28]
 801897e:	2b00      	cmp	r3, #0
 8018980:	f040 80bf 	bne.w	8018b02 <uxr_prepare_reliable_buffer_to_write+0x246>
 8018984:	fa1f fa8a 	uxth.w	sl, sl
 8018988:	4582      	cmp	sl, r0
 801898a:	f200 8095 	bhi.w	8018ab8 <uxr_prepare_reliable_buffer_to_write+0x1fc>
 801898e:	f10d 0b20 	add.w	fp, sp, #32
 8018992:	f1ba 0f00 	cmp.w	sl, #0
 8018996:	d03a      	beq.n	8018a0e <uxr_prepare_reliable_buffer_to_write+0x152>
 8018998:	f04f 0800 	mov.w	r8, #0
 801899c:	f10d 0b20 	add.w	fp, sp, #32
 80189a0:	e000      	b.n	80189a4 <uxr_prepare_reliable_buffer_to_write+0xe8>
 80189a2:	46b9      	mov	r9, r7
 80189a4:	e9d4 3200 	ldrd	r3, r2, [r4]
 80189a8:	fbb5 f1fc 	udiv	r1, r5, ip
 80189ac:	fb0c 5111 	mls	r1, ip, r1, r5
 80189b0:	b289      	uxth	r1, r1
 80189b2:	fbb2 f2fc 	udiv	r2, r2, ip
 80189b6:	fb01 f102 	mul.w	r1, r1, r2
 80189ba:	3104      	adds	r1, #4
 80189bc:	4419      	add	r1, r3
 80189be:	4632      	mov	r2, r6
 80189c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80189c4:	9300      	str	r3, [sp, #0]
 80189c6:	4658      	mov	r0, fp
 80189c8:	2300      	movs	r3, #0
 80189ca:	f7f8 ff7b 	bl	80118c4 <ucdr_init_buffer_origin_offset>
 80189ce:	464a      	mov	r2, r9
 80189d0:	2300      	movs	r3, #0
 80189d2:	210d      	movs	r1, #13
 80189d4:	4658      	mov	r0, fp
 80189d6:	f7fa fd2d 	bl	8013434 <uxr_buffer_submessage_header>
 80189da:	8920      	ldrh	r0, [r4, #8]
 80189dc:	fbb5 f3f0 	udiv	r3, r5, r0
 80189e0:	e9d4 2100 	ldrd	r2, r1, [r4]
 80189e4:	fb00 5313 	mls	r3, r0, r3, r5
 80189e8:	b29b      	uxth	r3, r3
 80189ea:	fbb1 f1f0 	udiv	r1, r1, r0
 80189ee:	fb03 f301 	mul.w	r3, r3, r1
 80189f2:	4628      	mov	r0, r5
 80189f4:	50d6      	str	r6, [r2, r3]
 80189f6:	2101      	movs	r1, #1
 80189f8:	f000 f9c4 	bl	8018d84 <uxr_seq_num_add>
 80189fc:	f108 0801 	add.w	r8, r8, #1
 8018a00:	fa1f f388 	uxth.w	r3, r8
 8018a04:	459a      	cmp	sl, r3
 8018a06:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018a0a:	4605      	mov	r5, r0
 8018a0c:	d8c9      	bhi.n	80189a2 <uxr_prepare_reliable_buffer_to_write+0xe6>
 8018a0e:	fbb5 f1fc 	udiv	r1, r5, ip
 8018a12:	fb0c 5111 	mls	r1, ip, r1, r5
 8018a16:	b289      	uxth	r1, r1
 8018a18:	6863      	ldr	r3, [r4, #4]
 8018a1a:	fbb3 fcfc 	udiv	ip, r3, ip
 8018a1e:	6823      	ldr	r3, [r4, #0]
 8018a20:	fb01 f10c 	mul.w	r1, r1, ip
 8018a24:	3104      	adds	r1, #4
 8018a26:	4419      	add	r1, r3
 8018a28:	4632      	mov	r2, r6
 8018a2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018a2e:	9300      	str	r3, [sp, #0]
 8018a30:	4658      	mov	r0, fp
 8018a32:	2300      	movs	r3, #0
 8018a34:	f7f8 ff46 	bl	80118c4 <ucdr_init_buffer_origin_offset>
 8018a38:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8018a3c:	4658      	mov	r0, fp
 8018a3e:	fa1f f288 	uxth.w	r2, r8
 8018a42:	2302      	movs	r3, #2
 8018a44:	210d      	movs	r1, #13
 8018a46:	f7fa fcf5 	bl	8013434 <uxr_buffer_submessage_header>
 8018a4a:	e9d4 3200 	ldrd	r3, r2, [r4]
 8018a4e:	8921      	ldrh	r1, [r4, #8]
 8018a50:	9f03      	ldr	r7, [sp, #12]
 8018a52:	9307      	str	r3, [sp, #28]
 8018a54:	9b05      	ldr	r3, [sp, #20]
 8018a56:	7b26      	ldrb	r6, [r4, #12]
 8018a58:	fbb5 f0f1 	udiv	r0, r5, r1
 8018a5c:	fbb2 f2f1 	udiv	r2, r2, r1
 8018a60:	fb01 5010 	mls	r0, r1, r0, r5
 8018a64:	1d39      	adds	r1, r7, #4
 8018a66:	440b      	add	r3, r1
 8018a68:	b280      	uxth	r0, r0
 8018a6a:	fb00 f002 	mul.w	r0, r0, r2
 8018a6e:	4619      	mov	r1, r3
 8018a70:	3604      	adds	r6, #4
 8018a72:	9b07      	ldr	r3, [sp, #28]
 8018a74:	9a04      	ldr	r2, [sp, #16]
 8018a76:	4446      	add	r6, r8
 8018a78:	501e      	str	r6, [r3, r0]
 8018a7a:	9e06      	ldr	r6, [sp, #24]
 8018a7c:	3a08      	subs	r2, #8
 8018a7e:	1bd2      	subs	r2, r2, r7
 8018a80:	4630      	mov	r0, r6
 8018a82:	f7f8 ff31 	bl	80118e8 <ucdr_init_buffer>
 8018a86:	4630      	mov	r0, r6
 8018a88:	493d      	ldr	r1, [pc, #244]	; (8018b80 <uxr_prepare_reliable_buffer_to_write+0x2c4>)
 8018a8a:	4622      	mov	r2, r4
 8018a8c:	f7f8 ff02 	bl	8011894 <ucdr_set_on_full_buffer_callback>
 8018a90:	2001      	movs	r0, #1
 8018a92:	81e5      	strh	r5, [r4, #14]
 8018a94:	b011      	add	sp, #68	; 0x44
 8018a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a9a:	2101      	movs	r1, #1
 8018a9c:	89e0      	ldrh	r0, [r4, #14]
 8018a9e:	f000 f971 	bl	8018d84 <uxr_seq_num_add>
 8018aa2:	8921      	ldrh	r1, [r4, #8]
 8018aa4:	4605      	mov	r5, r0
 8018aa6:	8a60      	ldrh	r0, [r4, #18]
 8018aa8:	f000 f96c 	bl	8018d84 <uxr_seq_num_add>
 8018aac:	4601      	mov	r1, r0
 8018aae:	4628      	mov	r0, r5
 8018ab0:	f000 f970 	bl	8018d94 <uxr_seq_num_cmp>
 8018ab4:	2800      	cmp	r0, #0
 8018ab6:	dd2a      	ble.n	8018b0e <uxr_prepare_reliable_buffer_to_write+0x252>
 8018ab8:	2000      	movs	r0, #0
 8018aba:	b011      	add	sp, #68	; 0x44
 8018abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ac0:	8921      	ldrh	r1, [r4, #8]
 8018ac2:	8a60      	ldrh	r0, [r4, #18]
 8018ac4:	f000 f95e 	bl	8018d84 <uxr_seq_num_add>
 8018ac8:	4601      	mov	r1, r0
 8018aca:	4628      	mov	r0, r5
 8018acc:	f000 f962 	bl	8018d94 <uxr_seq_num_cmp>
 8018ad0:	2800      	cmp	r0, #0
 8018ad2:	dcf1      	bgt.n	8018ab8 <uxr_prepare_reliable_buffer_to_write+0x1fc>
 8018ad4:	8921      	ldrh	r1, [r4, #8]
 8018ad6:	fbb5 f3f1 	udiv	r3, r5, r1
 8018ada:	e9d4 4200 	ldrd	r4, r2, [r4]
 8018ade:	fb01 5313 	mls	r3, r1, r3, r5
 8018ae2:	b29b      	uxth	r3, r3
 8018ae4:	fbb2 f2f1 	udiv	r2, r2, r1
 8018ae8:	fb03 f302 	mul.w	r3, r3, r2
 8018aec:	e9dd 1005 	ldrd	r1, r0, [sp, #20]
 8018af0:	50e7      	str	r7, [r4, r3]
 8018af2:	9b03      	ldr	r3, [sp, #12]
 8018af4:	9300      	str	r3, [sp, #0]
 8018af6:	463a      	mov	r2, r7
 8018af8:	2300      	movs	r3, #0
 8018afa:	f7f8 fee3 	bl	80118c4 <ucdr_init_buffer_origin_offset>
 8018afe:	2001      	movs	r0, #1
 8018b00:	e7db      	b.n	8018aba <uxr_prepare_reliable_buffer_to_write+0x1fe>
 8018b02:	f10a 0a01 	add.w	sl, sl, #1
 8018b06:	fa1f fa8a 	uxth.w	sl, sl
 8018b0a:	9307      	str	r3, [sp, #28]
 8018b0c:	e73c      	b.n	8018988 <uxr_prepare_reliable_buffer_to_write+0xcc>
 8018b0e:	8920      	ldrh	r0, [r4, #8]
 8018b10:	fbb5 f3f0 	udiv	r3, r5, r0
 8018b14:	fb00 5313 	mls	r3, r0, r3, r5
 8018b18:	b29b      	uxth	r3, r3
 8018b1a:	6862      	ldr	r2, [r4, #4]
 8018b1c:	6821      	ldr	r1, [r4, #0]
 8018b1e:	fbb2 f0f0 	udiv	r0, r2, r0
 8018b22:	fb03 f300 	mul.w	r3, r3, r0
 8018b26:	7b22      	ldrb	r2, [r4, #12]
 8018b28:	9806      	ldr	r0, [sp, #24]
 8018b2a:	3304      	adds	r3, #4
 8018b2c:	4419      	add	r1, r3
 8018b2e:	4442      	add	r2, r8
 8018b30:	f841 2c04 	str.w	r2, [r1, #-4]
 8018b34:	7b23      	ldrb	r3, [r4, #12]
 8018b36:	9300      	str	r3, [sp, #0]
 8018b38:	2300      	movs	r3, #0
 8018b3a:	f7f8 fec3 	bl	80118c4 <ucdr_init_buffer_origin_offset>
 8018b3e:	81e5      	strh	r5, [r4, #14]
 8018b40:	2001      	movs	r0, #1
 8018b42:	e7ba      	b.n	8018aba <uxr_prepare_reliable_buffer_to_write+0x1fe>
 8018b44:	4628      	mov	r0, r5
 8018b46:	2101      	movs	r1, #1
 8018b48:	f000 f91c 	bl	8018d84 <uxr_seq_num_add>
 8018b4c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018b50:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018b54:	fbb3 f1fc 	udiv	r1, r3, ip
 8018b58:	fbb0 f3fc 	udiv	r3, r0, ip
 8018b5c:	fb0c 0313 	mls	r3, ip, r3, r0
 8018b60:	b29b      	uxth	r3, r3
 8018b62:	fb03 f301 	mul.w	r3, r3, r1
 8018b66:	3304      	adds	r3, #4
 8018b68:	18d3      	adds	r3, r2, r3
 8018b6a:	9305      	str	r3, [sp, #20]
 8018b6c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8018b70:	f894 e00c 	ldrb.w	lr, [r4, #12]
 8018b74:	9303      	str	r3, [sp, #12]
 8018b76:	4605      	mov	r5, r0
 8018b78:	e6d4      	b.n	8018924 <uxr_prepare_reliable_buffer_to_write+0x68>
 8018b7a:	4660      	mov	r0, ip
 8018b7c:	e6ee      	b.n	801895c <uxr_prepare_reliable_buffer_to_write+0xa0>
 8018b7e:	bf00      	nop
 8018b80:	080187b5 	.word	0x080187b5

08018b84 <uxr_prepare_next_reliable_buffer_to_send>:
 8018b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b88:	4605      	mov	r5, r0
 8018b8a:	4688      	mov	r8, r1
 8018b8c:	8a00      	ldrh	r0, [r0, #16]
 8018b8e:	2101      	movs	r1, #1
 8018b90:	4617      	mov	r7, r2
 8018b92:	461e      	mov	r6, r3
 8018b94:	f000 f8f6 	bl	8018d84 <uxr_seq_num_add>
 8018b98:	8030      	strh	r0, [r6, #0]
 8018b9a:	892a      	ldrh	r2, [r5, #8]
 8018b9c:	fbb0 f3f2 	udiv	r3, r0, r2
 8018ba0:	fb02 0413 	mls	r4, r2, r3, r0
 8018ba4:	b2a4      	uxth	r4, r4
 8018ba6:	686b      	ldr	r3, [r5, #4]
 8018ba8:	fbb3 f2f2 	udiv	r2, r3, r2
 8018bac:	682b      	ldr	r3, [r5, #0]
 8018bae:	89e9      	ldrh	r1, [r5, #14]
 8018bb0:	fb04 f402 	mul.w	r4, r4, r2
 8018bb4:	3404      	adds	r4, #4
 8018bb6:	4423      	add	r3, r4
 8018bb8:	f8c8 3000 	str.w	r3, [r8]
 8018bbc:	682b      	ldr	r3, [r5, #0]
 8018bbe:	441c      	add	r4, r3
 8018bc0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018bc4:	603b      	str	r3, [r7, #0]
 8018bc6:	f000 f8e5 	bl	8018d94 <uxr_seq_num_cmp>
 8018bca:	2800      	cmp	r0, #0
 8018bcc:	dd02      	ble.n	8018bd4 <uxr_prepare_next_reliable_buffer_to_send+0x50>
 8018bce:	2000      	movs	r0, #0
 8018bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018bd4:	683a      	ldr	r2, [r7, #0]
 8018bd6:	7b2b      	ldrb	r3, [r5, #12]
 8018bd8:	429a      	cmp	r2, r3
 8018bda:	d9f8      	bls.n	8018bce <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8018bdc:	8a69      	ldrh	r1, [r5, #18]
 8018bde:	8a28      	ldrh	r0, [r5, #16]
 8018be0:	f000 f8d4 	bl	8018d8c <uxr_seq_num_sub>
 8018be4:	892b      	ldrh	r3, [r5, #8]
 8018be6:	4283      	cmp	r3, r0
 8018be8:	d0f1      	beq.n	8018bce <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8018bea:	8830      	ldrh	r0, [r6, #0]
 8018bec:	89eb      	ldrh	r3, [r5, #14]
 8018bee:	8228      	strh	r0, [r5, #16]
 8018bf0:	4298      	cmp	r0, r3
 8018bf2:	d002      	beq.n	8018bfa <uxr_prepare_next_reliable_buffer_to_send+0x76>
 8018bf4:	2001      	movs	r0, #1
 8018bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018bfa:	2101      	movs	r1, #1
 8018bfc:	f000 f8c2 	bl	8018d84 <uxr_seq_num_add>
 8018c00:	81e8      	strh	r0, [r5, #14]
 8018c02:	2001      	movs	r0, #1
 8018c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018c08 <uxr_update_output_stream_heartbeat_timestamp>:
 8018c08:	b5d0      	push	{r4, r6, r7, lr}
 8018c0a:	8a01      	ldrh	r1, [r0, #16]
 8018c0c:	4604      	mov	r4, r0
 8018c0e:	8a40      	ldrh	r0, [r0, #18]
 8018c10:	4616      	mov	r6, r2
 8018c12:	461f      	mov	r7, r3
 8018c14:	f000 f8be 	bl	8018d94 <uxr_seq_num_cmp>
 8018c18:	2800      	cmp	r0, #0
 8018c1a:	db07      	blt.n	8018c2c <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8018c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8018c20:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018c24:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8018c28:	2000      	movs	r0, #0
 8018c2a:	bdd0      	pop	{r4, r6, r7, pc}
 8018c2c:	f894 0020 	ldrb.w	r0, [r4, #32]
 8018c30:	b948      	cbnz	r0, 8018c46 <uxr_update_output_stream_heartbeat_timestamp+0x3e>
 8018c32:	2301      	movs	r3, #1
 8018c34:	f884 3020 	strb.w	r3, [r4, #32]
 8018c38:	f116 0364 	adds.w	r3, r6, #100	; 0x64
 8018c3c:	f147 0200 	adc.w	r2, r7, #0
 8018c40:	e9c4 3206 	strd	r3, r2, [r4, #24]
 8018c44:	bdd0      	pop	{r4, r6, r7, pc}
 8018c46:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8018c4a:	4296      	cmp	r6, r2
 8018c4c:	eb77 0303 	sbcs.w	r3, r7, r3
 8018c50:	bfa5      	ittet	ge
 8018c52:	3001      	addge	r0, #1
 8018c54:	f884 0020 	strbge.w	r0, [r4, #32]
 8018c58:	2000      	movlt	r0, #0
 8018c5a:	2001      	movge	r0, #1
 8018c5c:	e7ec      	b.n	8018c38 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8018c5e:	bf00      	nop

08018c60 <uxr_begin_output_nack_buffer_it>:
 8018c60:	8a40      	ldrh	r0, [r0, #18]
 8018c62:	4770      	bx	lr

08018c64 <uxr_next_reliable_nack_buffer_to_send>:
 8018c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018c68:	f890 9021 	ldrb.w	r9, [r0, #33]	; 0x21
 8018c6c:	f1b9 0f00 	cmp.w	r9, #0
 8018c70:	d011      	beq.n	8018c96 <uxr_next_reliable_nack_buffer_to_send+0x32>
 8018c72:	4605      	mov	r5, r0
 8018c74:	8818      	ldrh	r0, [r3, #0]
 8018c76:	460f      	mov	r7, r1
 8018c78:	4690      	mov	r8, r2
 8018c7a:	461e      	mov	r6, r3
 8018c7c:	2101      	movs	r1, #1
 8018c7e:	f000 f881 	bl	8018d84 <uxr_seq_num_add>
 8018c82:	8030      	strh	r0, [r6, #0]
 8018c84:	8a29      	ldrh	r1, [r5, #16]
 8018c86:	f000 f885 	bl	8018d94 <uxr_seq_num_cmp>
 8018c8a:	2800      	cmp	r0, #0
 8018c8c:	dd06      	ble.n	8018c9c <uxr_next_reliable_nack_buffer_to_send+0x38>
 8018c8e:	f04f 0900 	mov.w	r9, #0
 8018c92:	f885 9021 	strb.w	r9, [r5, #33]	; 0x21
 8018c96:	4648      	mov	r0, r9
 8018c98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018c9c:	892a      	ldrh	r2, [r5, #8]
 8018c9e:	8830      	ldrh	r0, [r6, #0]
 8018ca0:	fbb0 f4f2 	udiv	r4, r0, r2
 8018ca4:	fb02 0414 	mls	r4, r2, r4, r0
 8018ca8:	b2a4      	uxth	r4, r4
 8018caa:	686b      	ldr	r3, [r5, #4]
 8018cac:	fbb3 f2f2 	udiv	r2, r3, r2
 8018cb0:	682b      	ldr	r3, [r5, #0]
 8018cb2:	fb04 f402 	mul.w	r4, r4, r2
 8018cb6:	3404      	adds	r4, #4
 8018cb8:	4423      	add	r3, r4
 8018cba:	603b      	str	r3, [r7, #0]
 8018cbc:	682b      	ldr	r3, [r5, #0]
 8018cbe:	441c      	add	r4, r3
 8018cc0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018cc4:	f8c8 3000 	str.w	r3, [r8]
 8018cc8:	7b2a      	ldrb	r2, [r5, #12]
 8018cca:	429a      	cmp	r2, r3
 8018ccc:	d0d6      	beq.n	8018c7c <uxr_next_reliable_nack_buffer_to_send+0x18>
 8018cce:	4648      	mov	r0, r9
 8018cd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08018cd4 <uxr_process_acknack>:
 8018cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018cd6:	4604      	mov	r4, r0
 8018cd8:	460e      	mov	r6, r1
 8018cda:	4610      	mov	r0, r2
 8018cdc:	2101      	movs	r1, #1
 8018cde:	f000 f855 	bl	8018d8c <uxr_seq_num_sub>
 8018ce2:	8a61      	ldrh	r1, [r4, #18]
 8018ce4:	f000 f852 	bl	8018d8c <uxr_seq_num_sub>
 8018ce8:	b1c0      	cbz	r0, 8018d1c <uxr_process_acknack+0x48>
 8018cea:	4605      	mov	r5, r0
 8018cec:	2700      	movs	r7, #0
 8018cee:	2101      	movs	r1, #1
 8018cf0:	8a60      	ldrh	r0, [r4, #18]
 8018cf2:	f000 f847 	bl	8018d84 <uxr_seq_num_add>
 8018cf6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018cfa:	fbb0 f3fc 	udiv	r3, r0, ip
 8018cfe:	e9d4 2100 	ldrd	r2, r1, [r4]
 8018d02:	fb0c 0313 	mls	r3, ip, r3, r0
 8018d06:	b29b      	uxth	r3, r3
 8018d08:	fbb1 f1fc 	udiv	r1, r1, ip
 8018d0c:	3701      	adds	r7, #1
 8018d0e:	fb03 f301 	mul.w	r3, r3, r1
 8018d12:	42bd      	cmp	r5, r7
 8018d14:	7b21      	ldrb	r1, [r4, #12]
 8018d16:	8260      	strh	r0, [r4, #18]
 8018d18:	50d1      	str	r1, [r2, r3]
 8018d1a:	d1e8      	bne.n	8018cee <uxr_process_acknack+0x1a>
 8018d1c:	3e00      	subs	r6, #0
 8018d1e:	f04f 0300 	mov.w	r3, #0
 8018d22:	bf18      	it	ne
 8018d24:	2601      	movne	r6, #1
 8018d26:	f884 3020 	strb.w	r3, [r4, #32]
 8018d2a:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 8018d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018d30 <uxr_is_output_up_to_date>:
 8018d30:	8a01      	ldrh	r1, [r0, #16]
 8018d32:	8a40      	ldrh	r0, [r0, #18]
 8018d34:	b508      	push	{r3, lr}
 8018d36:	f000 f82d 	bl	8018d94 <uxr_seq_num_cmp>
 8018d3a:	fab0 f080 	clz	r0, r0
 8018d3e:	0940      	lsrs	r0, r0, #5
 8018d40:	bd08      	pop	{r3, pc}
 8018d42:	bf00      	nop

08018d44 <get_available_free_slots>:
 8018d44:	8901      	ldrh	r1, [r0, #8]
 8018d46:	b1d9      	cbz	r1, 8018d80 <get_available_free_slots+0x3c>
 8018d48:	b4f0      	push	{r4, r5, r6, r7}
 8018d4a:	2400      	movs	r4, #0
 8018d4c:	6845      	ldr	r5, [r0, #4]
 8018d4e:	6807      	ldr	r7, [r0, #0]
 8018d50:	7b06      	ldrb	r6, [r0, #12]
 8018d52:	fbb5 f5f1 	udiv	r5, r5, r1
 8018d56:	4620      	mov	r0, r4
 8018d58:	4622      	mov	r2, r4
 8018d5a:	fbb2 f3f1 	udiv	r3, r2, r1
 8018d5e:	fb01 2313 	mls	r3, r1, r3, r2
 8018d62:	b29b      	uxth	r3, r3
 8018d64:	fb05 7303 	mla	r3, r5, r3, r7
 8018d68:	3401      	adds	r4, #1
 8018d6a:	681b      	ldr	r3, [r3, #0]
 8018d6c:	429e      	cmp	r6, r3
 8018d6e:	bf08      	it	eq
 8018d70:	3001      	addeq	r0, #1
 8018d72:	b2a2      	uxth	r2, r4
 8018d74:	bf08      	it	eq
 8018d76:	b280      	uxtheq	r0, r0
 8018d78:	428a      	cmp	r2, r1
 8018d7a:	d3ee      	bcc.n	8018d5a <get_available_free_slots+0x16>
 8018d7c:	bcf0      	pop	{r4, r5, r6, r7}
 8018d7e:	4770      	bx	lr
 8018d80:	4608      	mov	r0, r1
 8018d82:	4770      	bx	lr

08018d84 <uxr_seq_num_add>:
 8018d84:	4408      	add	r0, r1
 8018d86:	b280      	uxth	r0, r0
 8018d88:	4770      	bx	lr
 8018d8a:	bf00      	nop

08018d8c <uxr_seq_num_sub>:
 8018d8c:	1a40      	subs	r0, r0, r1
 8018d8e:	b280      	uxth	r0, r0
 8018d90:	4770      	bx	lr
 8018d92:	bf00      	nop

08018d94 <uxr_seq_num_cmp>:
 8018d94:	4288      	cmp	r0, r1
 8018d96:	d011      	beq.n	8018dbc <uxr_seq_num_cmp+0x28>
 8018d98:	d309      	bcc.n	8018dae <uxr_seq_num_cmp+0x1a>
 8018d9a:	4288      	cmp	r0, r1
 8018d9c:	d910      	bls.n	8018dc0 <uxr_seq_num_cmp+0x2c>
 8018d9e:	1a40      	subs	r0, r0, r1
 8018da0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8018da4:	bfd4      	ite	le
 8018da6:	2001      	movle	r0, #1
 8018da8:	f04f 30ff 	movgt.w	r0, #4294967295
 8018dac:	4770      	bx	lr
 8018dae:	1a0b      	subs	r3, r1, r0
 8018db0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8018db4:	daf1      	bge.n	8018d9a <uxr_seq_num_cmp+0x6>
 8018db6:	f04f 30ff 	mov.w	r0, #4294967295
 8018dba:	4770      	bx	lr
 8018dbc:	2000      	movs	r0, #0
 8018dbe:	4770      	bx	lr
 8018dc0:	2001      	movs	r0, #1
 8018dc2:	4770      	bx	lr

08018dc4 <uxr_init_framing_io>:
 8018dc4:	2300      	movs	r3, #0
 8018dc6:	7041      	strb	r1, [r0, #1]
 8018dc8:	7003      	strb	r3, [r0, #0]
 8018dca:	8583      	strh	r3, [r0, #44]	; 0x2c
 8018dcc:	4770      	bx	lr
 8018dce:	bf00      	nop

08018dd0 <uxr_write_framed_msg>:
 8018dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018dd4:	7845      	ldrb	r5, [r0, #1]
 8018dd6:	b085      	sub	sp, #20
 8018dd8:	4604      	mov	r4, r0
 8018dda:	f1a5 0c7d 	sub.w	ip, r5, #125	; 0x7d
 8018dde:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
 8018de2:	f1bc 0f01 	cmp.w	ip, #1
 8018de6:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8018dea:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8018dee:	f884 e038 	strb.w	lr, [r4, #56]	; 0x38
 8018df2:	460e      	mov	r6, r1
 8018df4:	4617      	mov	r7, r2
 8018df6:	469b      	mov	fp, r3
 8018df8:	f240 8116 	bls.w	8019028 <uxr_write_framed_msg+0x258>
 8018dfc:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8018e00:	2302      	movs	r3, #2
 8018e02:	2a01      	cmp	r2, #1
 8018e04:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 8018e08:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8018e0c:	f240 8091 	bls.w	8018f32 <uxr_write_framed_msg+0x162>
 8018e10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018e12:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 8018e16:	b2d9      	uxtb	r1, r3
 8018e18:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8018e1c:	2203      	movs	r2, #3
 8018e1e:	2b01      	cmp	r3, #1
 8018e20:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8018e24:	f240 809a 	bls.w	8018f5c <uxr_write_framed_msg+0x18c>
 8018e28:	18a3      	adds	r3, r4, r2
 8018e2a:	3201      	adds	r2, #1
 8018e2c:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 8018e30:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8018e34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018e36:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8018e3a:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8018e3e:	2901      	cmp	r1, #1
 8018e40:	eb04 0102 	add.w	r1, r4, r2
 8018e44:	f240 8101 	bls.w	801904a <uxr_write_framed_msg+0x27a>
 8018e48:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8018e4c:	3201      	adds	r2, #1
 8018e4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018e50:	b2d2      	uxtb	r2, r2
 8018e52:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8018e56:	2b00      	cmp	r3, #0
 8018e58:	f000 8106 	beq.w	8019068 <uxr_write_framed_msg+0x298>
 8018e5c:	f04f 0a00 	mov.w	sl, #0
 8018e60:	46d1      	mov	r9, sl
 8018e62:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8018e66:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8018e6a:	2901      	cmp	r1, #1
 8018e6c:	f240 80a3 	bls.w	8018fb6 <uxr_write_framed_msg+0x1e6>
 8018e70:	2a29      	cmp	r2, #41	; 0x29
 8018e72:	d87f      	bhi.n	8018f74 <uxr_write_framed_msg+0x1a4>
 8018e74:	18a1      	adds	r1, r4, r2
 8018e76:	3201      	adds	r2, #1
 8018e78:	b2d2      	uxtb	r2, r2
 8018e7a:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8018e7e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8018e82:	ea8a 0303 	eor.w	r3, sl, r3
 8018e86:	4984      	ldr	r1, [pc, #528]	; (8019098 <uxr_write_framed_msg+0x2c8>)
 8018e88:	b2db      	uxtb	r3, r3
 8018e8a:	f109 0901 	add.w	r9, r9, #1
 8018e8e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8018e92:	ea83 2a1a 	eor.w	sl, r3, sl, lsr #8
 8018e96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018e98:	454b      	cmp	r3, r9
 8018e9a:	d8e2      	bhi.n	8018e62 <uxr_write_framed_msg+0x92>
 8018e9c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8018ea0:	fa5f f98a 	uxtb.w	r9, sl
 8018ea4:	9301      	str	r3, [sp, #4]
 8018ea6:	f04f 0b00 	mov.w	fp, #0
 8018eaa:	f88d 900c 	strb.w	r9, [sp, #12]
 8018eae:	f88d 300d 	strb.w	r3, [sp, #13]
 8018eb2:	f1a9 0a7d 	sub.w	sl, r9, #125	; 0x7d
 8018eb6:	fa5f f18a 	uxtb.w	r1, sl
 8018eba:	2901      	cmp	r1, #1
 8018ebc:	d920      	bls.n	8018f00 <uxr_write_framed_msg+0x130>
 8018ebe:	2a29      	cmp	r2, #41	; 0x29
 8018ec0:	f240 808b 	bls.w	8018fda <uxr_write_framed_msg+0x20a>
 8018ec4:	2500      	movs	r5, #0
 8018ec6:	e000      	b.n	8018eca <uxr_write_framed_msg+0xfa>
 8018ec8:	b160      	cbz	r0, 8018ee4 <uxr_write_framed_msg+0x114>
 8018eca:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8018ece:	1b52      	subs	r2, r2, r5
 8018ed0:	4421      	add	r1, r4
 8018ed2:	4643      	mov	r3, r8
 8018ed4:	4638      	mov	r0, r7
 8018ed6:	47b0      	blx	r6
 8018ed8:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8018edc:	4405      	add	r5, r0
 8018ede:	4295      	cmp	r5, r2
 8018ee0:	d3f2      	bcc.n	8018ec8 <uxr_write_framed_msg+0xf8>
 8018ee2:	d003      	beq.n	8018eec <uxr_write_framed_msg+0x11c>
 8018ee4:	2000      	movs	r0, #0
 8018ee6:	b005      	add	sp, #20
 8018ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018eec:	fa5f f18a 	uxtb.w	r1, sl
 8018ef0:	f04f 0300 	mov.w	r3, #0
 8018ef4:	2901      	cmp	r1, #1
 8018ef6:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8018efa:	f04f 0200 	mov.w	r2, #0
 8018efe:	d86c      	bhi.n	8018fda <uxr_write_framed_msg+0x20a>
 8018f00:	1c51      	adds	r1, r2, #1
 8018f02:	b2c9      	uxtb	r1, r1
 8018f04:	2929      	cmp	r1, #41	; 0x29
 8018f06:	d8dd      	bhi.n	8018ec4 <uxr_write_framed_msg+0xf4>
 8018f08:	18a0      	adds	r0, r4, r2
 8018f0a:	3202      	adds	r2, #2
 8018f0c:	f089 0920 	eor.w	r9, r9, #32
 8018f10:	b2d2      	uxtb	r2, r2
 8018f12:	4659      	mov	r1, fp
 8018f14:	f04f 037d 	mov.w	r3, #125	; 0x7d
 8018f18:	f880 9039 	strb.w	r9, [r0, #57]	; 0x39
 8018f1c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8018f20:	f04f 0b01 	mov.w	fp, #1
 8018f24:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8018f28:	2900      	cmp	r1, #0
 8018f2a:	d162      	bne.n	8018ff2 <uxr_write_framed_msg+0x222>
 8018f2c:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8018f30:	e7bf      	b.n	8018eb2 <uxr_write_framed_msg+0xe2>
 8018f32:	2204      	movs	r2, #4
 8018f34:	2503      	movs	r5, #3
 8018f36:	990e      	ldr	r1, [sp, #56]	; 0x38
 8018f38:	4423      	add	r3, r4
 8018f3a:	b2c9      	uxtb	r1, r1
 8018f3c:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8018f40:	f883 c038 	strb.w	ip, [r3, #56]	; 0x38
 8018f44:	4425      	add	r5, r4
 8018f46:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8018f4a:	f080 0020 	eor.w	r0, r0, #32
 8018f4e:	2b01      	cmp	r3, #1
 8018f50:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 8018f54:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8018f58:	f63f af66 	bhi.w	8018e28 <uxr_write_framed_msg+0x58>
 8018f5c:	18a3      	adds	r3, r4, r2
 8018f5e:	f081 0120 	eor.w	r1, r1, #32
 8018f62:	3202      	adds	r2, #2
 8018f64:	207d      	movs	r0, #125	; 0x7d
 8018f66:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 8018f6a:	f883 0038 	strb.w	r0, [r3, #56]	; 0x38
 8018f6e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8018f72:	e75f      	b.n	8018e34 <uxr_write_framed_msg+0x64>
 8018f74:	2500      	movs	r5, #0
 8018f76:	e001      	b.n	8018f7c <uxr_write_framed_msg+0x1ac>
 8018f78:	2800      	cmp	r0, #0
 8018f7a:	d0b3      	beq.n	8018ee4 <uxr_write_framed_msg+0x114>
 8018f7c:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8018f80:	1b52      	subs	r2, r2, r5
 8018f82:	4421      	add	r1, r4
 8018f84:	4643      	mov	r3, r8
 8018f86:	4638      	mov	r0, r7
 8018f88:	47b0      	blx	r6
 8018f8a:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8018f8e:	4405      	add	r5, r0
 8018f90:	4295      	cmp	r5, r2
 8018f92:	d3f1      	bcc.n	8018f78 <uxr_write_framed_msg+0x1a8>
 8018f94:	d1a6      	bne.n	8018ee4 <uxr_write_framed_msg+0x114>
 8018f96:	f04f 0300 	mov.w	r3, #0
 8018f9a:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8018f9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018fa0:	454b      	cmp	r3, r9
 8018fa2:	d971      	bls.n	8019088 <uxr_write_framed_msg+0x2b8>
 8018fa4:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8018fa8:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8018fac:	2901      	cmp	r1, #1
 8018fae:	f04f 0200 	mov.w	r2, #0
 8018fb2:	f63f af5d 	bhi.w	8018e70 <uxr_write_framed_msg+0xa0>
 8018fb6:	1c51      	adds	r1, r2, #1
 8018fb8:	b2c9      	uxtb	r1, r1
 8018fba:	2929      	cmp	r1, #41	; 0x29
 8018fbc:	d8da      	bhi.n	8018f74 <uxr_write_framed_msg+0x1a4>
 8018fbe:	18a0      	adds	r0, r4, r2
 8018fc0:	3202      	adds	r2, #2
 8018fc2:	b2d2      	uxtb	r2, r2
 8018fc4:	f083 0120 	eor.w	r1, r3, #32
 8018fc8:	f04f 057d 	mov.w	r5, #125	; 0x7d
 8018fcc:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 8018fd0:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
 8018fd4:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8018fd8:	e753      	b.n	8018e82 <uxr_write_framed_msg+0xb2>
 8018fda:	18a0      	adds	r0, r4, r2
 8018fdc:	3201      	adds	r2, #1
 8018fde:	b2d2      	uxtb	r2, r2
 8018fe0:	4659      	mov	r1, fp
 8018fe2:	f880 9038 	strb.w	r9, [r0, #56]	; 0x38
 8018fe6:	f04f 0b01 	mov.w	fp, #1
 8018fea:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8018fee:	2900      	cmp	r1, #0
 8018ff0:	d09c      	beq.n	8018f2c <uxr_write_framed_msg+0x15c>
 8018ff2:	2500      	movs	r5, #0
 8018ff4:	e002      	b.n	8018ffc <uxr_write_framed_msg+0x22c>
 8018ff6:	2800      	cmp	r0, #0
 8018ff8:	f43f af74 	beq.w	8018ee4 <uxr_write_framed_msg+0x114>
 8018ffc:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8019000:	1b52      	subs	r2, r2, r5
 8019002:	4421      	add	r1, r4
 8019004:	4643      	mov	r3, r8
 8019006:	4638      	mov	r0, r7
 8019008:	47b0      	blx	r6
 801900a:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801900e:	4405      	add	r5, r0
 8019010:	4295      	cmp	r5, r2
 8019012:	d3f0      	bcc.n	8018ff6 <uxr_write_framed_msg+0x226>
 8019014:	f47f af66 	bne.w	8018ee4 <uxr_write_framed_msg+0x114>
 8019018:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801901a:	2300      	movs	r3, #0
 801901c:	b290      	uxth	r0, r2
 801901e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8019022:	b005      	add	sp, #20
 8019024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019028:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 801902c:	f085 0520 	eor.w	r5, r5, #32
 8019030:	2303      	movs	r3, #3
 8019032:	217d      	movs	r1, #125	; 0x7d
 8019034:	2a01      	cmp	r2, #1
 8019036:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
 801903a:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801903e:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 8019042:	d814      	bhi.n	801906e <uxr_write_framed_msg+0x29e>
 8019044:	2205      	movs	r2, #5
 8019046:	2504      	movs	r5, #4
 8019048:	e775      	b.n	8018f36 <uxr_write_framed_msg+0x166>
 801904a:	f083 0320 	eor.w	r3, r3, #32
 801904e:	f881 3039 	strb.w	r3, [r1, #57]	; 0x39
 8019052:	3202      	adds	r2, #2
 8019054:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019056:	b2d2      	uxtb	r2, r2
 8019058:	207d      	movs	r0, #125	; 0x7d
 801905a:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 801905e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019062:	2b00      	cmp	r3, #0
 8019064:	f47f aefa 	bne.w	8018e5c <uxr_write_framed_msg+0x8c>
 8019068:	9301      	str	r3, [sp, #4]
 801906a:	4699      	mov	r9, r3
 801906c:	e71b      	b.n	8018ea6 <uxr_write_framed_msg+0xd6>
 801906e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019070:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 8019074:	b2d9      	uxtb	r1, r3
 8019076:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 801907a:	2204      	movs	r2, #4
 801907c:	2b01      	cmp	r3, #1
 801907e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019082:	f63f aed1 	bhi.w	8018e28 <uxr_write_framed_msg+0x58>
 8019086:	e769      	b.n	8018f5c <uxr_write_framed_msg+0x18c>
 8019088:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801908c:	fa5f f98a 	uxtb.w	r9, sl
 8019090:	9301      	str	r3, [sp, #4]
 8019092:	2200      	movs	r2, #0
 8019094:	e707      	b.n	8018ea6 <uxr_write_framed_msg+0xd6>
 8019096:	bf00      	nop
 8019098:	0801bf38 	.word	0x0801bf38

0801909c <uxr_framing_read_transport>:
 801909c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190a0:	4604      	mov	r4, r0
 80190a2:	b083      	sub	sp, #12
 80190a4:	461f      	mov	r7, r3
 80190a6:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 80190aa:	4689      	mov	r9, r1
 80190ac:	4692      	mov	sl, r2
 80190ae:	f7fa fa07 	bl	80134c0 <uxr_millis>
 80190b2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80190b6:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 80190ba:	42b3      	cmp	r3, r6
 80190bc:	4680      	mov	r8, r0
 80190be:	d05f      	beq.n	8019180 <uxr_framing_read_transport+0xe4>
 80190c0:	d81b      	bhi.n	80190fa <uxr_framing_read_transport+0x5e>
 80190c2:	1e75      	subs	r5, r6, #1
 80190c4:	1aed      	subs	r5, r5, r3
 80190c6:	b2ed      	uxtb	r5, r5
 80190c8:	2600      	movs	r6, #0
 80190ca:	455d      	cmp	r5, fp
 80190cc:	d81e      	bhi.n	801910c <uxr_framing_read_transport+0x70>
 80190ce:	19ab      	adds	r3, r5, r6
 80190d0:	455b      	cmp	r3, fp
 80190d2:	bf84      	itt	hi
 80190d4:	ebab 0605 	subhi.w	r6, fp, r5
 80190d8:	b2f6      	uxtbhi	r6, r6
 80190da:	b9e5      	cbnz	r5, 8019116 <uxr_framing_read_transport+0x7a>
 80190dc:	f04f 0b00 	mov.w	fp, #0
 80190e0:	f7fa f9ee 	bl	80134c0 <uxr_millis>
 80190e4:	683b      	ldr	r3, [r7, #0]
 80190e6:	eba0 0008 	sub.w	r0, r0, r8
 80190ea:	1a1b      	subs	r3, r3, r0
 80190ec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80190f0:	4658      	mov	r0, fp
 80190f2:	603b      	str	r3, [r7, #0]
 80190f4:	b003      	add	sp, #12
 80190f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190fa:	2e00      	cmp	r6, #0
 80190fc:	d048      	beq.n	8019190 <uxr_framing_read_transport+0xf4>
 80190fe:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 8019102:	b2ed      	uxtb	r5, r5
 8019104:	3e01      	subs	r6, #1
 8019106:	455d      	cmp	r5, fp
 8019108:	b2f6      	uxtb	r6, r6
 801910a:	d9e0      	bls.n	80190ce <uxr_framing_read_transport+0x32>
 801910c:	fa5f f58b 	uxtb.w	r5, fp
 8019110:	2600      	movs	r6, #0
 8019112:	2d00      	cmp	r5, #0
 8019114:	d0e2      	beq.n	80190dc <uxr_framing_read_transport+0x40>
 8019116:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801911a:	3102      	adds	r1, #2
 801911c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801911e:	9300      	str	r3, [sp, #0]
 8019120:	683b      	ldr	r3, [r7, #0]
 8019122:	4421      	add	r1, r4
 8019124:	462a      	mov	r2, r5
 8019126:	4650      	mov	r0, sl
 8019128:	47c8      	blx	r9
 801912a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801912e:	4a1b      	ldr	r2, [pc, #108]	; (801919c <uxr_framing_read_transport+0x100>)
 8019130:	4403      	add	r3, r0
 8019132:	0859      	lsrs	r1, r3, #1
 8019134:	fba2 2101 	umull	r2, r1, r2, r1
 8019138:	0889      	lsrs	r1, r1, #2
 801913a:	222a      	movs	r2, #42	; 0x2a
 801913c:	fb02 3111 	mls	r1, r2, r1, r3
 8019140:	4683      	mov	fp, r0
 8019142:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 8019146:	2800      	cmp	r0, #0
 8019148:	d0c8      	beq.n	80190dc <uxr_framing_read_transport+0x40>
 801914a:	42a8      	cmp	r0, r5
 801914c:	d1c8      	bne.n	80190e0 <uxr_framing_read_transport+0x44>
 801914e:	b31e      	cbz	r6, 8019198 <uxr_framing_read_transport+0xfc>
 8019150:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019152:	9300      	str	r3, [sp, #0]
 8019154:	3102      	adds	r1, #2
 8019156:	4421      	add	r1, r4
 8019158:	4632      	mov	r2, r6
 801915a:	2300      	movs	r3, #0
 801915c:	4650      	mov	r0, sl
 801915e:	47c8      	blx	r9
 8019160:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8019164:	490d      	ldr	r1, [pc, #52]	; (801919c <uxr_framing_read_transport+0x100>)
 8019166:	181a      	adds	r2, r3, r0
 8019168:	0853      	lsrs	r3, r2, #1
 801916a:	fba1 1303 	umull	r1, r3, r1, r3
 801916e:	089b      	lsrs	r3, r3, #2
 8019170:	212a      	movs	r1, #42	; 0x2a
 8019172:	fb01 2313 	mls	r3, r1, r3, r2
 8019176:	eb00 0b05 	add.w	fp, r0, r5
 801917a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 801917e:	e7af      	b.n	80190e0 <uxr_framing_read_transport+0x44>
 8019180:	2600      	movs	r6, #0
 8019182:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 8019186:	85a6      	strh	r6, [r4, #44]	; 0x2c
 8019188:	d9c0      	bls.n	801910c <uxr_framing_read_transport+0x70>
 801918a:	2102      	movs	r1, #2
 801918c:	2529      	movs	r5, #41	; 0x29
 801918e:	e7c5      	b.n	801911c <uxr_framing_read_transport+0x80>
 8019190:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 8019194:	b2ed      	uxtb	r5, r5
 8019196:	e798      	b.n	80190ca <uxr_framing_read_transport+0x2e>
 8019198:	46ab      	mov	fp, r5
 801919a:	e7a1      	b.n	80190e0 <uxr_framing_read_transport+0x44>
 801919c:	30c30c31 	.word	0x30c30c31

080191a0 <uxr_read_framed_msg>:
 80191a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191a4:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
 80191a8:	f890 502d 	ldrb.w	r5, [r0, #45]	; 0x2d
 80191ac:	42ae      	cmp	r6, r5
 80191ae:	b083      	sub	sp, #12
 80191b0:	4604      	mov	r4, r0
 80191b2:	461f      	mov	r7, r3
 80191b4:	4689      	mov	r9, r1
 80191b6:	4692      	mov	sl, r2
 80191b8:	f000 817d 	beq.w	80194b6 <uxr_read_framed_msg+0x316>
 80191bc:	7823      	ldrb	r3, [r4, #0]
 80191be:	4ecc      	ldr	r6, [pc, #816]	; (80194f0 <uxr_read_framed_msg+0x350>)
 80191c0:	f8df 8330 	ldr.w	r8, [pc, #816]	; 80194f4 <uxr_read_framed_msg+0x354>
 80191c4:	2b07      	cmp	r3, #7
 80191c6:	d8fd      	bhi.n	80191c4 <uxr_read_framed_msg+0x24>
 80191c8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80191cc:	00f40113 	.word	0x00f40113
 80191d0:	00b700d4 	.word	0x00b700d4
 80191d4:	004d008e 	.word	0x004d008e
 80191d8:	00080030 	.word	0x00080030
 80191dc:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80191e0:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80191e4:	4298      	cmp	r0, r3
 80191e6:	f000 8141 	beq.w	801946c <uxr_read_framed_msg+0x2cc>
 80191ea:	18e2      	adds	r2, r4, r3
 80191ec:	7891      	ldrb	r1, [r2, #2]
 80191ee:	297d      	cmp	r1, #125	; 0x7d
 80191f0:	f000 81a2 	beq.w	8019538 <uxr_read_framed_msg+0x398>
 80191f4:	3301      	adds	r3, #1
 80191f6:	085a      	lsrs	r2, r3, #1
 80191f8:	fba6 0202 	umull	r0, r2, r6, r2
 80191fc:	0892      	lsrs	r2, r2, #2
 80191fe:	202a      	movs	r0, #42	; 0x2a
 8019200:	fb00 3312 	mls	r3, r0, r2, r3
 8019204:	297e      	cmp	r1, #126	; 0x7e
 8019206:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801920a:	f000 8251 	beq.w	80196b0 <uxr_read_framed_msg+0x510>
 801920e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8019210:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8019212:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8019216:	b29b      	uxth	r3, r3
 8019218:	2100      	movs	r1, #0
 801921a:	429a      	cmp	r2, r3
 801921c:	86a3      	strh	r3, [r4, #52]	; 0x34
 801921e:	7021      	strb	r1, [r4, #0]
 8019220:	f000 8182 	beq.w	8019528 <uxr_read_framed_msg+0x388>
 8019224:	2000      	movs	r0, #0
 8019226:	b003      	add	sp, #12
 8019228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801922c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8019230:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8019234:	4298      	cmp	r0, r3
 8019236:	f000 8128 	beq.w	801948a <uxr_read_framed_msg+0x2ea>
 801923a:	18e2      	adds	r2, r4, r3
 801923c:	7891      	ldrb	r1, [r2, #2]
 801923e:	297d      	cmp	r1, #125	; 0x7d
 8019240:	f000 8196 	beq.w	8019570 <uxr_read_framed_msg+0x3d0>
 8019244:	3301      	adds	r3, #1
 8019246:	085a      	lsrs	r2, r3, #1
 8019248:	fba6 0202 	umull	r0, r2, r6, r2
 801924c:	0892      	lsrs	r2, r2, #2
 801924e:	202a      	movs	r0, #42	; 0x2a
 8019250:	fb00 3312 	mls	r3, r0, r2, r3
 8019254:	297e      	cmp	r1, #126	; 0x7e
 8019256:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801925a:	f000 8219 	beq.w	8019690 <uxr_read_framed_msg+0x4f0>
 801925e:	2307      	movs	r3, #7
 8019260:	86a1      	strh	r1, [r4, #52]	; 0x34
 8019262:	7023      	strb	r3, [r4, #0]
 8019264:	e7ae      	b.n	80191c4 <uxr_read_framed_msg+0x24>
 8019266:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8019268:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 801926a:	429d      	cmp	r5, r3
 801926c:	d937      	bls.n	80192de <uxr_read_framed_msg+0x13e>
 801926e:	ee07 9a90 	vmov	s15, r9
 8019272:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8019276:	e01e      	b.n	80192b6 <uxr_read_framed_msg+0x116>
 8019278:	f89e e002 	ldrb.w	lr, [lr, #2]
 801927c:	f1be 0f7d 	cmp.w	lr, #125	; 0x7d
 8019280:	f000 80d2 	beq.w	8019428 <uxr_read_framed_msg+0x288>
 8019284:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 8019288:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801928c:	f000 8214 	beq.w	80196b8 <uxr_read_framed_msg+0x518>
 8019290:	f807 e003 	strb.w	lr, [r7, r3]
 8019294:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8019296:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8019298:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 801929a:	ea80 010e 	eor.w	r1, r0, lr
 801929e:	b2c9      	uxtb	r1, r1
 80192a0:	3301      	adds	r3, #1
 80192a2:	f838 2011 	ldrh.w	r2, [r8, r1, lsl #1]
 80192a6:	b29b      	uxth	r3, r3
 80192a8:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 80192ac:	42ab      	cmp	r3, r5
 80192ae:	86e2      	strh	r2, [r4, #54]	; 0x36
 80192b0:	8663      	strh	r3, [r4, #50]	; 0x32
 80192b2:	f080 8121 	bcs.w	80194f8 <uxr_read_framed_msg+0x358>
 80192b6:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
 80192ba:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80192be:	f101 0b01 	add.w	fp, r1, #1
 80192c2:	ea4f 025b 	mov.w	r2, fp, lsr #1
 80192c6:	fba6 9202 	umull	r9, r2, r6, r2
 80192ca:	0892      	lsrs	r2, r2, #2
 80192cc:	4288      	cmp	r0, r1
 80192ce:	eb04 0e01 	add.w	lr, r4, r1
 80192d2:	fb0c b212 	mls	r2, ip, r2, fp
 80192d6:	d1cf      	bne.n	8019278 <uxr_read_framed_msg+0xd8>
 80192d8:	ee17 9a90 	vmov	r9, s15
 80192dc:	429d      	cmp	r5, r3
 80192de:	f040 8112 	bne.w	8019506 <uxr_read_framed_msg+0x366>
 80192e2:	2306      	movs	r3, #6
 80192e4:	7023      	strb	r3, [r4, #0]
 80192e6:	e76d      	b.n	80191c4 <uxr_read_framed_msg+0x24>
 80192e8:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80192ec:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80192f0:	4298      	cmp	r0, r3
 80192f2:	f000 80bb 	beq.w	801946c <uxr_read_framed_msg+0x2cc>
 80192f6:	18e2      	adds	r2, r4, r3
 80192f8:	7891      	ldrb	r1, [r2, #2]
 80192fa:	297d      	cmp	r1, #125	; 0x7d
 80192fc:	f000 8153 	beq.w	80195a6 <uxr_read_framed_msg+0x406>
 8019300:	3301      	adds	r3, #1
 8019302:	085a      	lsrs	r2, r3, #1
 8019304:	fba6 0202 	umull	r0, r2, r6, r2
 8019308:	0892      	lsrs	r2, r2, #2
 801930a:	202a      	movs	r0, #42	; 0x2a
 801930c:	fb00 3212 	mls	r2, r0, r2, r3
 8019310:	297e      	cmp	r1, #126	; 0x7e
 8019312:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8019316:	f000 81cb 	beq.w	80196b0 <uxr_read_framed_msg+0x510>
 801931a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801931c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8019320:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019322:	b29b      	uxth	r3, r3
 8019324:	2000      	movs	r0, #0
 8019326:	428b      	cmp	r3, r1
 8019328:	8623      	strh	r3, [r4, #48]	; 0x30
 801932a:	8660      	strh	r0, [r4, #50]	; 0x32
 801932c:	86e0      	strh	r0, [r4, #54]	; 0x36
 801932e:	f240 80db 	bls.w	80194e8 <uxr_read_framed_msg+0x348>
 8019332:	7020      	strb	r0, [r4, #0]
 8019334:	b003      	add	sp, #12
 8019336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801933a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801933e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8019342:	4298      	cmp	r0, r3
 8019344:	f000 80a1 	beq.w	801948a <uxr_read_framed_msg+0x2ea>
 8019348:	18e2      	adds	r2, r4, r3
 801934a:	7891      	ldrb	r1, [r2, #2]
 801934c:	297d      	cmp	r1, #125	; 0x7d
 801934e:	f000 8167 	beq.w	8019620 <uxr_read_framed_msg+0x480>
 8019352:	3301      	adds	r3, #1
 8019354:	085a      	lsrs	r2, r3, #1
 8019356:	fba6 0202 	umull	r0, r2, r6, r2
 801935a:	0892      	lsrs	r2, r2, #2
 801935c:	202a      	movs	r0, #42	; 0x2a
 801935e:	fb00 3312 	mls	r3, r0, r2, r3
 8019362:	297e      	cmp	r1, #126	; 0x7e
 8019364:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019368:	f000 8192 	beq.w	8019690 <uxr_read_framed_msg+0x4f0>
 801936c:	2304      	movs	r3, #4
 801936e:	8621      	strh	r1, [r4, #48]	; 0x30
 8019370:	7023      	strb	r3, [r4, #0]
 8019372:	e727      	b.n	80191c4 <uxr_read_framed_msg+0x24>
 8019374:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8019378:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801937c:	4290      	cmp	r0, r2
 801937e:	f000 80b1 	beq.w	80194e4 <uxr_read_framed_msg+0x344>
 8019382:	18a3      	adds	r3, r4, r2
 8019384:	7899      	ldrb	r1, [r3, #2]
 8019386:	297d      	cmp	r1, #125	; 0x7d
 8019388:	f000 8166 	beq.w	8019658 <uxr_read_framed_msg+0x4b8>
 801938c:	3201      	adds	r2, #1
 801938e:	0850      	lsrs	r0, r2, #1
 8019390:	fba6 3000 	umull	r3, r0, r6, r0
 8019394:	0880      	lsrs	r0, r0, #2
 8019396:	232a      	movs	r3, #42	; 0x2a
 8019398:	fb03 2210 	mls	r2, r3, r0, r2
 801939c:	297e      	cmp	r1, #126	; 0x7e
 801939e:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80193a2:	f000 8187 	beq.w	80196b4 <uxr_read_framed_msg+0x514>
 80193a6:	7863      	ldrb	r3, [r4, #1]
 80193a8:	428b      	cmp	r3, r1
 80193aa:	bf0c      	ite	eq
 80193ac:	2303      	moveq	r3, #3
 80193ae:	2300      	movne	r3, #0
 80193b0:	7023      	strb	r3, [r4, #0]
 80193b2:	e707      	b.n	80191c4 <uxr_read_framed_msg+0x24>
 80193b4:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80193b8:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80193bc:	2200      	movs	r2, #0
 80193be:	4299      	cmp	r1, r3
 80193c0:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 80193c4:	d063      	beq.n	801948e <uxr_read_framed_msg+0x2ee>
 80193c6:	18e2      	adds	r2, r4, r3
 80193c8:	7892      	ldrb	r2, [r2, #2]
 80193ca:	2a7d      	cmp	r2, #125	; 0x7d
 80193cc:	f000 8107 	beq.w	80195de <uxr_read_framed_msg+0x43e>
 80193d0:	1c59      	adds	r1, r3, #1
 80193d2:	084b      	lsrs	r3, r1, #1
 80193d4:	fba6 0303 	umull	r0, r3, r6, r3
 80193d8:	089b      	lsrs	r3, r3, #2
 80193da:	202a      	movs	r0, #42	; 0x2a
 80193dc:	fb00 1313 	mls	r3, r0, r3, r1
 80193e0:	2a7e      	cmp	r2, #126	; 0x7e
 80193e2:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 80193e6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80193ea:	d050      	beq.n	801948e <uxr_read_framed_msg+0x2ee>
 80193ec:	2302      	movs	r3, #2
 80193ee:	7023      	strb	r3, [r4, #0]
 80193f0:	e6e8      	b.n	80191c4 <uxr_read_framed_msg+0x24>
 80193f2:	f894 e02c 	ldrb.w	lr, [r4, #44]	; 0x2c
 80193f6:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80193fa:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80193fe:	1c51      	adds	r1, r2, #1
 8019400:	084b      	lsrs	r3, r1, #1
 8019402:	fba6 5303 	umull	r5, r3, r6, r3
 8019406:	089b      	lsrs	r3, r3, #2
 8019408:	fb0c 1313 	mls	r3, ip, r3, r1
 801940c:	4596      	cmp	lr, r2
 801940e:	eb04 0002 	add.w	r0, r4, r2
 8019412:	b2da      	uxtb	r2, r3
 8019414:	f43f af06 	beq.w	8019224 <uxr_read_framed_msg+0x84>
 8019418:	7883      	ldrb	r3, [r0, #2]
 801941a:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801941e:	2b7e      	cmp	r3, #126	; 0x7e
 8019420:	d1ed      	bne.n	80193fe <uxr_read_framed_msg+0x25e>
 8019422:	2301      	movs	r3, #1
 8019424:	7023      	strb	r3, [r4, #0]
 8019426:	e6cd      	b.n	80191c4 <uxr_read_framed_msg+0x24>
 8019428:	f101 0b01 	add.w	fp, r1, #1
 801942c:	ea4f 025b 	mov.w	r2, fp, lsr #1
 8019430:	fba6 e202 	umull	lr, r2, r6, r2
 8019434:	3102      	adds	r1, #2
 8019436:	0892      	lsrs	r2, r2, #2
 8019438:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 801943c:	fb0c b212 	mls	r2, ip, r2, fp
 8019440:	fba6 9e0e 	umull	r9, lr, r6, lr
 8019444:	eb04 0b02 	add.w	fp, r4, r2
 8019448:	b2d2      	uxtb	r2, r2
 801944a:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 801944e:	4290      	cmp	r0, r2
 8019450:	fb0c 111e 	mls	r1, ip, lr, r1
 8019454:	f43f af40 	beq.w	80192d8 <uxr_read_framed_msg+0x138>
 8019458:	f89b e002 	ldrb.w	lr, [fp, #2]
 801945c:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 8019460:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 8019464:	d036      	beq.n	80194d4 <uxr_read_framed_msg+0x334>
 8019466:	f08e 0e20 	eor.w	lr, lr, #32
 801946a:	e711      	b.n	8019290 <uxr_read_framed_msg+0xf0>
 801946c:	2301      	movs	r3, #1
 801946e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019470:	4649      	mov	r1, r9
 8019472:	e9cd 2300 	strd	r2, r3, [sp]
 8019476:	4620      	mov	r0, r4
 8019478:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801947a:	4652      	mov	r2, sl
 801947c:	f7ff fe0e 	bl	801909c <uxr_framing_read_transport>
 8019480:	2800      	cmp	r0, #0
 8019482:	f43f aecf 	beq.w	8019224 <uxr_read_framed_msg+0x84>
 8019486:	7823      	ldrb	r3, [r4, #0]
 8019488:	e69c      	b.n	80191c4 <uxr_read_framed_msg+0x24>
 801948a:	2302      	movs	r3, #2
 801948c:	e7ef      	b.n	801946e <uxr_read_framed_msg+0x2ce>
 801948e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019490:	2304      	movs	r3, #4
 8019492:	e9cd 2300 	strd	r2, r3, [sp]
 8019496:	4649      	mov	r1, r9
 8019498:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801949a:	4652      	mov	r2, sl
 801949c:	4620      	mov	r0, r4
 801949e:	f7ff fdfd 	bl	801909c <uxr_framing_read_transport>
 80194a2:	2800      	cmp	r0, #0
 80194a4:	d1ef      	bne.n	8019486 <uxr_read_framed_msg+0x2e6>
 80194a6:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 80194aa:	387e      	subs	r0, #126	; 0x7e
 80194ac:	bf18      	it	ne
 80194ae:	2001      	movne	r0, #1
 80194b0:	2800      	cmp	r0, #0
 80194b2:	d0e8      	beq.n	8019486 <uxr_read_framed_msg+0x2e6>
 80194b4:	e6b6      	b.n	8019224 <uxr_read_framed_msg+0x84>
 80194b6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80194b8:	2305      	movs	r3, #5
 80194ba:	e9cd 5300 	strd	r5, r3, [sp]
 80194be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80194c0:	f7ff fdec 	bl	801909c <uxr_framing_read_transport>
 80194c4:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80194c8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80194cc:	429a      	cmp	r2, r3
 80194ce:	f43f aea9 	beq.w	8019224 <uxr_read_framed_msg+0x84>
 80194d2:	e673      	b.n	80191bc <uxr_read_framed_msg+0x1c>
 80194d4:	429d      	cmp	r5, r3
 80194d6:	ee17 9a90 	vmov	r9, s15
 80194da:	f43f af02 	beq.w	80192e2 <uxr_read_framed_msg+0x142>
 80194de:	2301      	movs	r3, #1
 80194e0:	7023      	strb	r3, [r4, #0]
 80194e2:	e66f      	b.n	80191c4 <uxr_read_framed_msg+0x24>
 80194e4:	2303      	movs	r3, #3
 80194e6:	e7c2      	b.n	801946e <uxr_read_framed_msg+0x2ce>
 80194e8:	2305      	movs	r3, #5
 80194ea:	7023      	strb	r3, [r4, #0]
 80194ec:	e66a      	b.n	80191c4 <uxr_read_framed_msg+0x24>
 80194ee:	bf00      	nop
 80194f0:	30c30c31 	.word	0x30c30c31
 80194f4:	0801bf38 	.word	0x0801bf38
 80194f8:	ee17 9a90 	vmov	r9, s15
 80194fc:	f43f aef1 	beq.w	80192e2 <uxr_read_framed_msg+0x142>
 8019500:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 8019504:	d08d      	beq.n	8019422 <uxr_read_framed_msg+0x282>
 8019506:	1aeb      	subs	r3, r5, r3
 8019508:	3302      	adds	r3, #2
 801950a:	9301      	str	r3, [sp, #4]
 801950c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801950e:	9300      	str	r3, [sp, #0]
 8019510:	4652      	mov	r2, sl
 8019512:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019514:	4649      	mov	r1, r9
 8019516:	4620      	mov	r0, r4
 8019518:	f7ff fdc0 	bl	801909c <uxr_framing_read_transport>
 801951c:	fab0 f080 	clz	r0, r0
 8019520:	0940      	lsrs	r0, r0, #5
 8019522:	2800      	cmp	r0, #0
 8019524:	d0af      	beq.n	8019486 <uxr_read_framed_msg+0x2e6>
 8019526:	e67d      	b.n	8019224 <uxr_read_framed_msg+0x84>
 8019528:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801952a:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 801952e:	7013      	strb	r3, [r2, #0]
 8019530:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8019532:	b003      	add	sp, #12
 8019534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019538:	1c59      	adds	r1, r3, #1
 801953a:	084a      	lsrs	r2, r1, #1
 801953c:	fba6 5202 	umull	r5, r2, r6, r2
 8019540:	0892      	lsrs	r2, r2, #2
 8019542:	252a      	movs	r5, #42	; 0x2a
 8019544:	fb05 1212 	mls	r2, r5, r2, r1
 8019548:	b2d1      	uxtb	r1, r2
 801954a:	4288      	cmp	r0, r1
 801954c:	d08e      	beq.n	801946c <uxr_read_framed_msg+0x2cc>
 801954e:	3302      	adds	r3, #2
 8019550:	4422      	add	r2, r4
 8019552:	0858      	lsrs	r0, r3, #1
 8019554:	fba6 1000 	umull	r1, r0, r6, r0
 8019558:	7891      	ldrb	r1, [r2, #2]
 801955a:	0882      	lsrs	r2, r0, #2
 801955c:	fb05 3312 	mls	r3, r5, r2, r3
 8019560:	297e      	cmp	r1, #126	; 0x7e
 8019562:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019566:	f000 80a3 	beq.w	80196b0 <uxr_read_framed_msg+0x510>
 801956a:	f081 0120 	eor.w	r1, r1, #32
 801956e:	e64e      	b.n	801920e <uxr_read_framed_msg+0x6e>
 8019570:	1c59      	adds	r1, r3, #1
 8019572:	084a      	lsrs	r2, r1, #1
 8019574:	fba6 5202 	umull	r5, r2, r6, r2
 8019578:	0892      	lsrs	r2, r2, #2
 801957a:	252a      	movs	r5, #42	; 0x2a
 801957c:	fb05 1212 	mls	r2, r5, r2, r1
 8019580:	b2d1      	uxtb	r1, r2
 8019582:	4288      	cmp	r0, r1
 8019584:	d081      	beq.n	801948a <uxr_read_framed_msg+0x2ea>
 8019586:	3302      	adds	r3, #2
 8019588:	4422      	add	r2, r4
 801958a:	0858      	lsrs	r0, r3, #1
 801958c:	fba6 1000 	umull	r1, r0, r6, r0
 8019590:	7891      	ldrb	r1, [r2, #2]
 8019592:	0882      	lsrs	r2, r0, #2
 8019594:	fb05 3312 	mls	r3, r5, r2, r3
 8019598:	297e      	cmp	r1, #126	; 0x7e
 801959a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801959e:	d077      	beq.n	8019690 <uxr_read_framed_msg+0x4f0>
 80195a0:	f081 0120 	eor.w	r1, r1, #32
 80195a4:	e65b      	b.n	801925e <uxr_read_framed_msg+0xbe>
 80195a6:	1c59      	adds	r1, r3, #1
 80195a8:	084a      	lsrs	r2, r1, #1
 80195aa:	fba6 5202 	umull	r5, r2, r6, r2
 80195ae:	0892      	lsrs	r2, r2, #2
 80195b0:	252a      	movs	r5, #42	; 0x2a
 80195b2:	fb05 1212 	mls	r2, r5, r2, r1
 80195b6:	b2d1      	uxtb	r1, r2
 80195b8:	4288      	cmp	r0, r1
 80195ba:	f43f af57 	beq.w	801946c <uxr_read_framed_msg+0x2cc>
 80195be:	3302      	adds	r3, #2
 80195c0:	4422      	add	r2, r4
 80195c2:	0858      	lsrs	r0, r3, #1
 80195c4:	fba6 1000 	umull	r1, r0, r6, r0
 80195c8:	7891      	ldrb	r1, [r2, #2]
 80195ca:	0882      	lsrs	r2, r0, #2
 80195cc:	fb05 3312 	mls	r3, r5, r2, r3
 80195d0:	297e      	cmp	r1, #126	; 0x7e
 80195d2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80195d6:	d06b      	beq.n	80196b0 <uxr_read_framed_msg+0x510>
 80195d8:	f081 0120 	eor.w	r1, r1, #32
 80195dc:	e69d      	b.n	801931a <uxr_read_framed_msg+0x17a>
 80195de:	1c5d      	adds	r5, r3, #1
 80195e0:	086a      	lsrs	r2, r5, #1
 80195e2:	fba6 0202 	umull	r0, r2, r6, r2
 80195e6:	0892      	lsrs	r2, r2, #2
 80195e8:	202a      	movs	r0, #42	; 0x2a
 80195ea:	fb00 5212 	mls	r2, r0, r2, r5
 80195ee:	b2d5      	uxtb	r5, r2
 80195f0:	42a9      	cmp	r1, r5
 80195f2:	f43f af4c 	beq.w	801948e <uxr_read_framed_msg+0x2ee>
 80195f6:	3302      	adds	r3, #2
 80195f8:	4422      	add	r2, r4
 80195fa:	0859      	lsrs	r1, r3, #1
 80195fc:	fba6 5101 	umull	r5, r1, r6, r1
 8019600:	7895      	ldrb	r5, [r2, #2]
 8019602:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
 8019606:	088a      	lsrs	r2, r1, #2
 8019608:	fb00 3312 	mls	r3, r0, r2, r3
 801960c:	2d7e      	cmp	r5, #126	; 0x7e
 801960e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019612:	f43f af3c 	beq.w	801948e <uxr_read_framed_msg+0x2ee>
 8019616:	f085 0520 	eor.w	r5, r5, #32
 801961a:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
 801961e:	e6e5      	b.n	80193ec <uxr_read_framed_msg+0x24c>
 8019620:	1c59      	adds	r1, r3, #1
 8019622:	084a      	lsrs	r2, r1, #1
 8019624:	fba6 5202 	umull	r5, r2, r6, r2
 8019628:	0892      	lsrs	r2, r2, #2
 801962a:	252a      	movs	r5, #42	; 0x2a
 801962c:	fb05 1212 	mls	r2, r5, r2, r1
 8019630:	b2d1      	uxtb	r1, r2
 8019632:	4288      	cmp	r0, r1
 8019634:	f43f af29 	beq.w	801948a <uxr_read_framed_msg+0x2ea>
 8019638:	3302      	adds	r3, #2
 801963a:	4422      	add	r2, r4
 801963c:	0858      	lsrs	r0, r3, #1
 801963e:	fba6 1000 	umull	r1, r0, r6, r0
 8019642:	7891      	ldrb	r1, [r2, #2]
 8019644:	0882      	lsrs	r2, r0, #2
 8019646:	fb05 3312 	mls	r3, r5, r2, r3
 801964a:	297e      	cmp	r1, #126	; 0x7e
 801964c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019650:	d01e      	beq.n	8019690 <uxr_read_framed_msg+0x4f0>
 8019652:	f081 0120 	eor.w	r1, r1, #32
 8019656:	e689      	b.n	801936c <uxr_read_framed_msg+0x1cc>
 8019658:	1c51      	adds	r1, r2, #1
 801965a:	084b      	lsrs	r3, r1, #1
 801965c:	fba6 5303 	umull	r5, r3, r6, r3
 8019660:	089b      	lsrs	r3, r3, #2
 8019662:	252a      	movs	r5, #42	; 0x2a
 8019664:	fb05 1313 	mls	r3, r5, r3, r1
 8019668:	b2d9      	uxtb	r1, r3
 801966a:	4288      	cmp	r0, r1
 801966c:	f43f af3a 	beq.w	80194e4 <uxr_read_framed_msg+0x344>
 8019670:	3202      	adds	r2, #2
 8019672:	4423      	add	r3, r4
 8019674:	0850      	lsrs	r0, r2, #1
 8019676:	789b      	ldrb	r3, [r3, #2]
 8019678:	fba6 1000 	umull	r1, r0, r6, r0
 801967c:	0880      	lsrs	r0, r0, #2
 801967e:	fb05 2210 	mls	r2, r5, r0, r2
 8019682:	2b7e      	cmp	r3, #126	; 0x7e
 8019684:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8019688:	d014      	beq.n	80196b4 <uxr_read_framed_msg+0x514>
 801968a:	f083 0120 	eor.w	r1, r3, #32
 801968e:	e68a      	b.n	80193a6 <uxr_read_framed_msg+0x206>
 8019690:	2302      	movs	r3, #2
 8019692:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019694:	4649      	mov	r1, r9
 8019696:	e9cd 2300 	strd	r2, r3, [sp]
 801969a:	4620      	mov	r0, r4
 801969c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801969e:	4652      	mov	r2, sl
 80196a0:	f7ff fcfc 	bl	801909c <uxr_framing_read_transport>
 80196a4:	2800      	cmp	r0, #0
 80196a6:	f47f aeee 	bne.w	8019486 <uxr_read_framed_msg+0x2e6>
 80196aa:	2301      	movs	r3, #1
 80196ac:	7023      	strb	r3, [r4, #0]
 80196ae:	e589      	b.n	80191c4 <uxr_read_framed_msg+0x24>
 80196b0:	2301      	movs	r3, #1
 80196b2:	e7ee      	b.n	8019692 <uxr_read_framed_msg+0x4f2>
 80196b4:	2303      	movs	r3, #3
 80196b6:	e7ec      	b.n	8019692 <uxr_read_framed_msg+0x4f2>
 80196b8:	ee17 9a90 	vmov	r9, s15
 80196bc:	e6b1      	b.n	8019422 <uxr_read_framed_msg+0x282>
 80196be:	bf00      	nop

080196c0 <rcl_get_default_domain_id>:
 80196c0:	b530      	push	{r4, r5, lr}
 80196c2:	b083      	sub	sp, #12
 80196c4:	2300      	movs	r3, #0
 80196c6:	9300      	str	r3, [sp, #0]
 80196c8:	b1d0      	cbz	r0, 8019700 <rcl_get_default_domain_id+0x40>
 80196ca:	4604      	mov	r4, r0
 80196cc:	4669      	mov	r1, sp
 80196ce:	4815      	ldr	r0, [pc, #84]	; (8019724 <rcl_get_default_domain_id+0x64>)
 80196d0:	f7fd fa6a 	bl	8016ba8 <rcutils_get_env>
 80196d4:	4602      	mov	r2, r0
 80196d6:	b110      	cbz	r0, 80196de <rcl_get_default_domain_id+0x1e>
 80196d8:	2001      	movs	r0, #1
 80196da:	b003      	add	sp, #12
 80196dc:	bd30      	pop	{r4, r5, pc}
 80196de:	9b00      	ldr	r3, [sp, #0]
 80196e0:	b18b      	cbz	r3, 8019706 <rcl_get_default_domain_id+0x46>
 80196e2:	7818      	ldrb	r0, [r3, #0]
 80196e4:	2800      	cmp	r0, #0
 80196e6:	d0f8      	beq.n	80196da <rcl_get_default_domain_id+0x1a>
 80196e8:	4618      	mov	r0, r3
 80196ea:	a901      	add	r1, sp, #4
 80196ec:	9201      	str	r2, [sp, #4]
 80196ee:	f000 fc07 	bl	8019f00 <strtoul>
 80196f2:	4605      	mov	r5, r0
 80196f4:	b150      	cbz	r0, 801970c <rcl_get_default_domain_id+0x4c>
 80196f6:	1c43      	adds	r3, r0, #1
 80196f8:	d00d      	beq.n	8019716 <rcl_get_default_domain_id+0x56>
 80196fa:	6025      	str	r5, [r4, #0]
 80196fc:	2000      	movs	r0, #0
 80196fe:	e7ec      	b.n	80196da <rcl_get_default_domain_id+0x1a>
 8019700:	200b      	movs	r0, #11
 8019702:	b003      	add	sp, #12
 8019704:	bd30      	pop	{r4, r5, pc}
 8019706:	4618      	mov	r0, r3
 8019708:	b003      	add	sp, #12
 801970a:	bd30      	pop	{r4, r5, pc}
 801970c:	9b01      	ldr	r3, [sp, #4]
 801970e:	781b      	ldrb	r3, [r3, #0]
 8019710:	2b00      	cmp	r3, #0
 8019712:	d0f2      	beq.n	80196fa <rcl_get_default_domain_id+0x3a>
 8019714:	e7e0      	b.n	80196d8 <rcl_get_default_domain_id+0x18>
 8019716:	f000 ffc9 	bl	801a6ac <__errno>
 801971a:	6803      	ldr	r3, [r0, #0]
 801971c:	2b22      	cmp	r3, #34	; 0x22
 801971e:	d1ec      	bne.n	80196fa <rcl_get_default_domain_id+0x3a>
 8019720:	e7da      	b.n	80196d8 <rcl_get_default_domain_id+0x18>
 8019722:	bf00      	nop
 8019724:	0801c138 	.word	0x0801c138

08019728 <rcl_get_zero_initialized_guard_condition>:
 8019728:	4a03      	ldr	r2, [pc, #12]	; (8019738 <rcl_get_zero_initialized_guard_condition+0x10>)
 801972a:	4603      	mov	r3, r0
 801972c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019730:	e883 0003 	stmia.w	r3, {r0, r1}
 8019734:	4618      	mov	r0, r3
 8019736:	4770      	bx	lr
 8019738:	0801c148 	.word	0x0801c148

0801973c <rcl_guard_condition_init_from_rmw>:
 801973c:	b082      	sub	sp, #8
 801973e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019742:	b086      	sub	sp, #24
 8019744:	ac0c      	add	r4, sp, #48	; 0x30
 8019746:	4684      	mov	ip, r0
 8019748:	f844 3f04 	str.w	r3, [r4, #4]!
 801974c:	460f      	mov	r7, r1
 801974e:	4690      	mov	r8, r2
 8019750:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019752:	ad01      	add	r5, sp, #4
 8019754:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019756:	6823      	ldr	r3, [r4, #0]
 8019758:	602b      	str	r3, [r5, #0]
 801975a:	a801      	add	r0, sp, #4
 801975c:	4664      	mov	r4, ip
 801975e:	f7f5 ffed 	bl	800f73c <rcutils_allocator_is_valid>
 8019762:	b328      	cbz	r0, 80197b0 <rcl_guard_condition_init_from_rmw+0x74>
 8019764:	b324      	cbz	r4, 80197b0 <rcl_guard_condition_init_from_rmw+0x74>
 8019766:	6866      	ldr	r6, [r4, #4]
 8019768:	b9e6      	cbnz	r6, 80197a4 <rcl_guard_condition_init_from_rmw+0x68>
 801976a:	f1b8 0f00 	cmp.w	r8, #0
 801976e:	d01f      	beq.n	80197b0 <rcl_guard_condition_init_from_rmw+0x74>
 8019770:	4640      	mov	r0, r8
 8019772:	f7fb f92f 	bl	80149d4 <rcl_context_is_valid>
 8019776:	b308      	cbz	r0, 80197bc <rcl_guard_condition_init_from_rmw+0x80>
 8019778:	9b01      	ldr	r3, [sp, #4]
 801977a:	9905      	ldr	r1, [sp, #20]
 801977c:	201c      	movs	r0, #28
 801977e:	4798      	blx	r3
 8019780:	4605      	mov	r5, r0
 8019782:	6060      	str	r0, [r4, #4]
 8019784:	b340      	cbz	r0, 80197d8 <rcl_guard_condition_init_from_rmw+0x9c>
 8019786:	b1df      	cbz	r7, 80197c0 <rcl_guard_condition_init_from_rmw+0x84>
 8019788:	6007      	str	r7, [r0, #0]
 801978a:	7106      	strb	r6, [r0, #4]
 801978c:	ac01      	add	r4, sp, #4
 801978e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019790:	3508      	adds	r5, #8
 8019792:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019794:	6823      	ldr	r3, [r4, #0]
 8019796:	602b      	str	r3, [r5, #0]
 8019798:	2000      	movs	r0, #0
 801979a:	b006      	add	sp, #24
 801979c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80197a0:	b002      	add	sp, #8
 80197a2:	4770      	bx	lr
 80197a4:	2064      	movs	r0, #100	; 0x64
 80197a6:	b006      	add	sp, #24
 80197a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80197ac:	b002      	add	sp, #8
 80197ae:	4770      	bx	lr
 80197b0:	200b      	movs	r0, #11
 80197b2:	b006      	add	sp, #24
 80197b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80197b8:	b002      	add	sp, #8
 80197ba:	4770      	bx	lr
 80197bc:	2065      	movs	r0, #101	; 0x65
 80197be:	e7f2      	b.n	80197a6 <rcl_guard_condition_init_from_rmw+0x6a>
 80197c0:	f8d8 0000 	ldr.w	r0, [r8]
 80197c4:	3028      	adds	r0, #40	; 0x28
 80197c6:	f000 f93b 	bl	8019a40 <rmw_create_guard_condition>
 80197ca:	6028      	str	r0, [r5, #0]
 80197cc:	6865      	ldr	r5, [r4, #4]
 80197ce:	682e      	ldr	r6, [r5, #0]
 80197d0:	b126      	cbz	r6, 80197dc <rcl_guard_condition_init_from_rmw+0xa0>
 80197d2:	2301      	movs	r3, #1
 80197d4:	712b      	strb	r3, [r5, #4]
 80197d6:	e7d9      	b.n	801978c <rcl_guard_condition_init_from_rmw+0x50>
 80197d8:	200a      	movs	r0, #10
 80197da:	e7e4      	b.n	80197a6 <rcl_guard_condition_init_from_rmw+0x6a>
 80197dc:	4628      	mov	r0, r5
 80197de:	9b02      	ldr	r3, [sp, #8]
 80197e0:	9905      	ldr	r1, [sp, #20]
 80197e2:	4798      	blx	r3
 80197e4:	6066      	str	r6, [r4, #4]
 80197e6:	2001      	movs	r0, #1
 80197e8:	e7dd      	b.n	80197a6 <rcl_guard_condition_init_from_rmw+0x6a>
 80197ea:	bf00      	nop

080197ec <rcl_guard_condition_fini>:
 80197ec:	b570      	push	{r4, r5, r6, lr}
 80197ee:	b082      	sub	sp, #8
 80197f0:	b1f0      	cbz	r0, 8019830 <rcl_guard_condition_fini+0x44>
 80197f2:	4604      	mov	r4, r0
 80197f4:	6840      	ldr	r0, [r0, #4]
 80197f6:	b158      	cbz	r0, 8019810 <rcl_guard_condition_fini+0x24>
 80197f8:	6803      	ldr	r3, [r0, #0]
 80197fa:	68c6      	ldr	r6, [r0, #12]
 80197fc:	6981      	ldr	r1, [r0, #24]
 80197fe:	b15b      	cbz	r3, 8019818 <rcl_guard_condition_fini+0x2c>
 8019800:	7905      	ldrb	r5, [r0, #4]
 8019802:	b95d      	cbnz	r5, 801981c <rcl_guard_condition_fini+0x30>
 8019804:	47b0      	blx	r6
 8019806:	2300      	movs	r3, #0
 8019808:	4628      	mov	r0, r5
 801980a:	6063      	str	r3, [r4, #4]
 801980c:	b002      	add	sp, #8
 801980e:	bd70      	pop	{r4, r5, r6, pc}
 8019810:	4605      	mov	r5, r0
 8019812:	4628      	mov	r0, r5
 8019814:	b002      	add	sp, #8
 8019816:	bd70      	pop	{r4, r5, r6, pc}
 8019818:	461d      	mov	r5, r3
 801981a:	e7f3      	b.n	8019804 <rcl_guard_condition_fini+0x18>
 801981c:	4618      	mov	r0, r3
 801981e:	9101      	str	r1, [sp, #4]
 8019820:	f000 f922 	bl	8019a68 <rmw_destroy_guard_condition>
 8019824:	1e05      	subs	r5, r0, #0
 8019826:	9901      	ldr	r1, [sp, #4]
 8019828:	6860      	ldr	r0, [r4, #4]
 801982a:	bf18      	it	ne
 801982c:	2501      	movne	r5, #1
 801982e:	e7e9      	b.n	8019804 <rcl_guard_condition_fini+0x18>
 8019830:	250b      	movs	r5, #11
 8019832:	4628      	mov	r0, r5
 8019834:	b002      	add	sp, #8
 8019836:	bd70      	pop	{r4, r5, r6, pc}

08019838 <rcl_guard_condition_get_default_options>:
 8019838:	b5f0      	push	{r4, r5, r6, r7, lr}
 801983a:	b087      	sub	sp, #28
 801983c:	4607      	mov	r7, r0
 801983e:	466c      	mov	r4, sp
 8019840:	4668      	mov	r0, sp
 8019842:	f7f5 ff6d 	bl	800f720 <rcutils_get_default_allocator>
 8019846:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019848:	4d07      	ldr	r5, [pc, #28]	; (8019868 <rcl_guard_condition_get_default_options+0x30>)
 801984a:	f8d4 c000 	ldr.w	ip, [r4]
 801984e:	462e      	mov	r6, r5
 8019850:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8019852:	462c      	mov	r4, r5
 8019854:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019856:	463c      	mov	r4, r7
 8019858:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801985a:	4638      	mov	r0, r7
 801985c:	f8c6 c000 	str.w	ip, [r6]
 8019860:	f8c4 c000 	str.w	ip, [r4]
 8019864:	b007      	add	sp, #28
 8019866:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019868:	20009d4c 	.word	0x20009d4c

0801986c <rcl_guard_condition_get_rmw_handle>:
 801986c:	b110      	cbz	r0, 8019874 <rcl_guard_condition_get_rmw_handle+0x8>
 801986e:	6840      	ldr	r0, [r0, #4]
 8019870:	b100      	cbz	r0, 8019874 <rcl_guard_condition_get_rmw_handle+0x8>
 8019872:	6800      	ldr	r0, [r0, #0]
 8019874:	4770      	bx	lr
 8019876:	bf00      	nop

08019878 <on_status>:
 8019878:	b082      	sub	sp, #8
 801987a:	b002      	add	sp, #8
 801987c:	4770      	bx	lr
 801987e:	bf00      	nop

08019880 <on_topic>:
 8019880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019884:	4a21      	ldr	r2, [pc, #132]	; (801990c <on_topic+0x8c>)
 8019886:	b094      	sub	sp, #80	; 0x50
 8019888:	6812      	ldr	r2, [r2, #0]
 801988a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801988c:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 8019890:	9113      	str	r1, [sp, #76]	; 0x4c
 8019892:	9312      	str	r3, [sp, #72]	; 0x48
 8019894:	b3ba      	cbz	r2, 8019906 <on_topic+0x86>
 8019896:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 801989a:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 801989e:	e001      	b.n	80198a4 <on_topic+0x24>
 80198a0:	6892      	ldr	r2, [r2, #8]
 80198a2:	b382      	cbz	r2, 8019906 <on_topic+0x86>
 80198a4:	68d4      	ldr	r4, [r2, #12]
 80198a6:	8aa3      	ldrh	r3, [r4, #20]
 80198a8:	428b      	cmp	r3, r1
 80198aa:	d1f9      	bne.n	80198a0 <on_topic+0x20>
 80198ac:	7da3      	ldrb	r3, [r4, #22]
 80198ae:	4283      	cmp	r3, r0
 80198b0:	d1f6      	bne.n	80198a0 <on_topic+0x20>
 80198b2:	2248      	movs	r2, #72	; 0x48
 80198b4:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80198b8:	4668      	mov	r0, sp
 80198ba:	f000 ff2c 	bl	801a716 <memcpy>
 80198be:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 80198c2:	4620      	mov	r0, r4
 80198c4:	f7f6 fe7e 	bl	80105c4 <rmw_uxrce_get_static_input_buffer_for_entity>
 80198c8:	4607      	mov	r7, r0
 80198ca:	b1e0      	cbz	r0, 8019906 <on_topic+0x86>
 80198cc:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80198d0:	462a      	mov	r2, r5
 80198d2:	4630      	mov	r0, r6
 80198d4:	f108 0110 	add.w	r1, r8, #16
 80198d8:	f7fe fb9a 	bl	8018010 <ucdr_deserialize_array_uint8_t>
 80198dc:	b930      	cbnz	r0, 80198ec <on_topic+0x6c>
 80198de:	480c      	ldr	r0, [pc, #48]	; (8019910 <on_topic+0x90>)
 80198e0:	4639      	mov	r1, r7
 80198e2:	b014      	add	sp, #80	; 0x50
 80198e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80198e8:	f7fd bb82 	b.w	8016ff0 <put_memory>
 80198ec:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 80198f0:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 80198f4:	f7fe fab6 	bl	8017e64 <rmw_uros_epoch_nanos>
 80198f8:	f608 0218 	addw	r2, r8, #2072	; 0x818
 80198fc:	2305      	movs	r3, #5
 80198fe:	e9c2 0100 	strd	r0, r1, [r2]
 8019902:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 8019906:	b014      	add	sp, #80	; 0x50
 8019908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801990c:	2000d154 	.word	0x2000d154
 8019910:	20009ee8 	.word	0x20009ee8

08019914 <on_request>:
 8019914:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019918:	4822      	ldr	r0, [pc, #136]	; (80199a4 <on_request+0x90>)
 801991a:	b095      	sub	sp, #84	; 0x54
 801991c:	9113      	str	r1, [sp, #76]	; 0x4c
 801991e:	6801      	ldr	r1, [r0, #0]
 8019920:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8019922:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 8019926:	2900      	cmp	r1, #0
 8019928:	d039      	beq.n	801999e <on_request+0x8a>
 801992a:	461d      	mov	r5, r3
 801992c:	e001      	b.n	8019932 <on_request+0x1e>
 801992e:	6889      	ldr	r1, [r1, #8]
 8019930:	b3a9      	cbz	r1, 801999e <on_request+0x8a>
 8019932:	68cc      	ldr	r4, [r1, #12]
 8019934:	8b20      	ldrh	r0, [r4, #24]
 8019936:	4290      	cmp	r0, r2
 8019938:	d1f9      	bne.n	801992e <on_request+0x1a>
 801993a:	2248      	movs	r2, #72	; 0x48
 801993c:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8019940:	4668      	mov	r0, sp
 8019942:	f000 fee8 	bl	801a716 <memcpy>
 8019946:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 801994a:	4620      	mov	r0, r4
 801994c:	f7f6 fe3a 	bl	80105c4 <rmw_uxrce_get_static_input_buffer_for_entity>
 8019950:	4680      	mov	r8, r0
 8019952:	b320      	cbz	r0, 801999e <on_request+0x8a>
 8019954:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8019958:	4632      	mov	r2, r6
 801995a:	4638      	mov	r0, r7
 801995c:	f109 0110 	add.w	r1, r9, #16
 8019960:	f7fe fb56 	bl	8018010 <ucdr_deserialize_array_uint8_t>
 8019964:	b930      	cbnz	r0, 8019974 <on_request+0x60>
 8019966:	4810      	ldr	r0, [pc, #64]	; (80199a8 <on_request+0x94>)
 8019968:	4641      	mov	r1, r8
 801996a:	b015      	add	sp, #84	; 0x54
 801996c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019970:	f7fd bb3e 	b.w	8016ff0 <put_memory>
 8019974:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019976:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 801997a:	f609 0428 	addw	r4, r9, #2088	; 0x828
 801997e:	f8c9 6810 	str.w	r6, [r9, #2064]	; 0x810
 8019982:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019984:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019988:	e884 0003 	stmia.w	r4, {r0, r1}
 801998c:	f7fe fa6a 	bl	8017e64 <rmw_uros_epoch_nanos>
 8019990:	f609 0218 	addw	r2, r9, #2072	; 0x818
 8019994:	2303      	movs	r3, #3
 8019996:	e9c2 0100 	strd	r0, r1, [r2]
 801999a:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 801999e:	b015      	add	sp, #84	; 0x54
 80199a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80199a4:	2000d144 	.word	0x2000d144
 80199a8:	20009ee8 	.word	0x20009ee8

080199ac <on_reply>:
 80199ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80199b0:	4821      	ldr	r0, [pc, #132]	; (8019a38 <on_reply+0x8c>)
 80199b2:	b095      	sub	sp, #84	; 0x54
 80199b4:	9113      	str	r1, [sp, #76]	; 0x4c
 80199b6:	6801      	ldr	r1, [r0, #0]
 80199b8:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80199ba:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 80199be:	b3b9      	cbz	r1, 8019a30 <on_reply+0x84>
 80199c0:	461d      	mov	r5, r3
 80199c2:	e001      	b.n	80199c8 <on_reply+0x1c>
 80199c4:	6889      	ldr	r1, [r1, #8]
 80199c6:	b399      	cbz	r1, 8019a30 <on_reply+0x84>
 80199c8:	68cc      	ldr	r4, [r1, #12]
 80199ca:	8b20      	ldrh	r0, [r4, #24]
 80199cc:	4290      	cmp	r0, r2
 80199ce:	d1f9      	bne.n	80199c4 <on_reply+0x18>
 80199d0:	2248      	movs	r2, #72	; 0x48
 80199d2:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80199d6:	4668      	mov	r0, sp
 80199d8:	f000 fe9d 	bl	801a716 <memcpy>
 80199dc:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 80199e0:	4620      	mov	r0, r4
 80199e2:	f7f6 fdef 	bl	80105c4 <rmw_uxrce_get_static_input_buffer_for_entity>
 80199e6:	4680      	mov	r8, r0
 80199e8:	b310      	cbz	r0, 8019a30 <on_reply+0x84>
 80199ea:	f8d0 900c 	ldr.w	r9, [r0, #12]
 80199ee:	4632      	mov	r2, r6
 80199f0:	4638      	mov	r0, r7
 80199f2:	f109 0110 	add.w	r1, r9, #16
 80199f6:	f7fe fb0b 	bl	8018010 <ucdr_deserialize_array_uint8_t>
 80199fa:	b930      	cbnz	r0, 8019a0a <on_reply+0x5e>
 80199fc:	480f      	ldr	r0, [pc, #60]	; (8019a3c <on_reply+0x90>)
 80199fe:	4641      	mov	r1, r8
 8019a00:	b015      	add	sp, #84	; 0x54
 8019a02:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019a06:	f7fd baf3 	b.w	8016ff0 <put_memory>
 8019a0a:	b2aa      	uxth	r2, r5
 8019a0c:	2300      	movs	r3, #0
 8019a0e:	f609 0128 	addw	r1, r9, #2088	; 0x828
 8019a12:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 8019a16:	f8c9 6810 	str.w	r6, [r9, #2064]	; 0x810
 8019a1a:	e9c1 2300 	strd	r2, r3, [r1]
 8019a1e:	f7fe fa21 	bl	8017e64 <rmw_uros_epoch_nanos>
 8019a22:	f609 0218 	addw	r2, r9, #2072	; 0x818
 8019a26:	2304      	movs	r3, #4
 8019a28:	e9c2 0100 	strd	r0, r1, [r2]
 8019a2c:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 8019a30:	b015      	add	sp, #84	; 0x54
 8019a32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019a36:	bf00      	nop
 8019a38:	2000a778 	.word	0x2000a778
 8019a3c:	20009ee8 	.word	0x20009ee8

08019a40 <rmw_create_guard_condition>:
 8019a40:	b538      	push	{r3, r4, r5, lr}
 8019a42:	4605      	mov	r5, r0
 8019a44:	4807      	ldr	r0, [pc, #28]	; (8019a64 <rmw_create_guard_condition+0x24>)
 8019a46:	f7fd fac3 	bl	8016fd0 <get_memory>
 8019a4a:	b148      	cbz	r0, 8019a60 <rmw_create_guard_condition+0x20>
 8019a4c:	68c4      	ldr	r4, [r0, #12]
 8019a4e:	2300      	movs	r3, #0
 8019a50:	61e5      	str	r5, [r4, #28]
 8019a52:	7423      	strb	r3, [r4, #16]
 8019a54:	f7fd fb24 	bl	80170a0 <rmw_get_implementation_identifier>
 8019a58:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8019a5c:	f104 0014 	add.w	r0, r4, #20
 8019a60:	bd38      	pop	{r3, r4, r5, pc}
 8019a62:	bf00      	nop
 8019a64:	2000d070 	.word	0x2000d070

08019a68 <rmw_destroy_guard_condition>:
 8019a68:	b508      	push	{r3, lr}
 8019a6a:	4b08      	ldr	r3, [pc, #32]	; (8019a8c <rmw_destroy_guard_condition+0x24>)
 8019a6c:	6819      	ldr	r1, [r3, #0]
 8019a6e:	b911      	cbnz	r1, 8019a76 <rmw_destroy_guard_condition+0xe>
 8019a70:	e00a      	b.n	8019a88 <rmw_destroy_guard_condition+0x20>
 8019a72:	6889      	ldr	r1, [r1, #8]
 8019a74:	b141      	cbz	r1, 8019a88 <rmw_destroy_guard_condition+0x20>
 8019a76:	68cb      	ldr	r3, [r1, #12]
 8019a78:	3314      	adds	r3, #20
 8019a7a:	4298      	cmp	r0, r3
 8019a7c:	d1f9      	bne.n	8019a72 <rmw_destroy_guard_condition+0xa>
 8019a7e:	4803      	ldr	r0, [pc, #12]	; (8019a8c <rmw_destroy_guard_condition+0x24>)
 8019a80:	f7fd fab6 	bl	8016ff0 <put_memory>
 8019a84:	2000      	movs	r0, #0
 8019a86:	bd08      	pop	{r3, pc}
 8019a88:	2001      	movs	r0, #1
 8019a8a:	bd08      	pop	{r3, pc}
 8019a8c:	2000d070 	.word	0x2000d070

08019a90 <calloc>:
 8019a90:	4b02      	ldr	r3, [pc, #8]	; (8019a9c <calloc+0xc>)
 8019a92:	460a      	mov	r2, r1
 8019a94:	4601      	mov	r1, r0
 8019a96:	6818      	ldr	r0, [r3, #0]
 8019a98:	f000 b802 	b.w	8019aa0 <_calloc_r>
 8019a9c:	200000e8 	.word	0x200000e8

08019aa0 <_calloc_r>:
 8019aa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019aa2:	fba1 2402 	umull	r2, r4, r1, r2
 8019aa6:	b94c      	cbnz	r4, 8019abc <_calloc_r+0x1c>
 8019aa8:	4611      	mov	r1, r2
 8019aaa:	9201      	str	r2, [sp, #4]
 8019aac:	f000 f886 	bl	8019bbc <_malloc_r>
 8019ab0:	9a01      	ldr	r2, [sp, #4]
 8019ab2:	4605      	mov	r5, r0
 8019ab4:	b930      	cbnz	r0, 8019ac4 <_calloc_r+0x24>
 8019ab6:	4628      	mov	r0, r5
 8019ab8:	b003      	add	sp, #12
 8019aba:	bd30      	pop	{r4, r5, pc}
 8019abc:	220c      	movs	r2, #12
 8019abe:	6002      	str	r2, [r0, #0]
 8019ac0:	2500      	movs	r5, #0
 8019ac2:	e7f8      	b.n	8019ab6 <_calloc_r+0x16>
 8019ac4:	4621      	mov	r1, r4
 8019ac6:	f000 fd07 	bl	801a4d8 <memset>
 8019aca:	e7f4      	b.n	8019ab6 <_calloc_r+0x16>

08019acc <getenv>:
 8019acc:	b507      	push	{r0, r1, r2, lr}
 8019ace:	4b04      	ldr	r3, [pc, #16]	; (8019ae0 <getenv+0x14>)
 8019ad0:	4601      	mov	r1, r0
 8019ad2:	aa01      	add	r2, sp, #4
 8019ad4:	6818      	ldr	r0, [r3, #0]
 8019ad6:	f000 f805 	bl	8019ae4 <_findenv_r>
 8019ada:	b003      	add	sp, #12
 8019adc:	f85d fb04 	ldr.w	pc, [sp], #4
 8019ae0:	200000e8 	.word	0x200000e8

08019ae4 <_findenv_r>:
 8019ae4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ae8:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8019b58 <_findenv_r+0x74>
 8019aec:	4607      	mov	r7, r0
 8019aee:	4689      	mov	r9, r1
 8019af0:	4616      	mov	r6, r2
 8019af2:	f000 fe3d 	bl	801a770 <__env_lock>
 8019af6:	f8da 4000 	ldr.w	r4, [sl]
 8019afa:	b134      	cbz	r4, 8019b0a <_findenv_r+0x26>
 8019afc:	464b      	mov	r3, r9
 8019afe:	4698      	mov	r8, r3
 8019b00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019b04:	b13a      	cbz	r2, 8019b16 <_findenv_r+0x32>
 8019b06:	2a3d      	cmp	r2, #61	; 0x3d
 8019b08:	d1f9      	bne.n	8019afe <_findenv_r+0x1a>
 8019b0a:	4638      	mov	r0, r7
 8019b0c:	f000 fe36 	bl	801a77c <__env_unlock>
 8019b10:	2000      	movs	r0, #0
 8019b12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b16:	eba8 0809 	sub.w	r8, r8, r9
 8019b1a:	46a3      	mov	fp, r4
 8019b1c:	f854 0b04 	ldr.w	r0, [r4], #4
 8019b20:	2800      	cmp	r0, #0
 8019b22:	d0f2      	beq.n	8019b0a <_findenv_r+0x26>
 8019b24:	4642      	mov	r2, r8
 8019b26:	4649      	mov	r1, r9
 8019b28:	f000 fceb 	bl	801a502 <strncmp>
 8019b2c:	2800      	cmp	r0, #0
 8019b2e:	d1f4      	bne.n	8019b1a <_findenv_r+0x36>
 8019b30:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8019b34:	eb03 0508 	add.w	r5, r3, r8
 8019b38:	f813 3008 	ldrb.w	r3, [r3, r8]
 8019b3c:	2b3d      	cmp	r3, #61	; 0x3d
 8019b3e:	d1ec      	bne.n	8019b1a <_findenv_r+0x36>
 8019b40:	f8da 3000 	ldr.w	r3, [sl]
 8019b44:	ebab 0303 	sub.w	r3, fp, r3
 8019b48:	109b      	asrs	r3, r3, #2
 8019b4a:	4638      	mov	r0, r7
 8019b4c:	6033      	str	r3, [r6, #0]
 8019b4e:	f000 fe15 	bl	801a77c <__env_unlock>
 8019b52:	1c68      	adds	r0, r5, #1
 8019b54:	e7dd      	b.n	8019b12 <_findenv_r+0x2e>
 8019b56:	bf00      	nop
 8019b58:	200000ec 	.word	0x200000ec

08019b5c <malloc>:
 8019b5c:	4b02      	ldr	r3, [pc, #8]	; (8019b68 <malloc+0xc>)
 8019b5e:	4601      	mov	r1, r0
 8019b60:	6818      	ldr	r0, [r3, #0]
 8019b62:	f000 b82b 	b.w	8019bbc <_malloc_r>
 8019b66:	bf00      	nop
 8019b68:	200000e8 	.word	0x200000e8

08019b6c <free>:
 8019b6c:	4b02      	ldr	r3, [pc, #8]	; (8019b78 <free+0xc>)
 8019b6e:	4601      	mov	r1, r0
 8019b70:	6818      	ldr	r0, [r3, #0]
 8019b72:	f000 be09 	b.w	801a788 <_free_r>
 8019b76:	bf00      	nop
 8019b78:	200000e8 	.word	0x200000e8

08019b7c <sbrk_aligned>:
 8019b7c:	b570      	push	{r4, r5, r6, lr}
 8019b7e:	4e0e      	ldr	r6, [pc, #56]	; (8019bb8 <sbrk_aligned+0x3c>)
 8019b80:	460c      	mov	r4, r1
 8019b82:	6831      	ldr	r1, [r6, #0]
 8019b84:	4605      	mov	r5, r0
 8019b86:	b911      	cbnz	r1, 8019b8e <sbrk_aligned+0x12>
 8019b88:	f000 fd6e 	bl	801a668 <_sbrk_r>
 8019b8c:	6030      	str	r0, [r6, #0]
 8019b8e:	4621      	mov	r1, r4
 8019b90:	4628      	mov	r0, r5
 8019b92:	f000 fd69 	bl	801a668 <_sbrk_r>
 8019b96:	1c43      	adds	r3, r0, #1
 8019b98:	d00a      	beq.n	8019bb0 <sbrk_aligned+0x34>
 8019b9a:	1cc4      	adds	r4, r0, #3
 8019b9c:	f024 0403 	bic.w	r4, r4, #3
 8019ba0:	42a0      	cmp	r0, r4
 8019ba2:	d007      	beq.n	8019bb4 <sbrk_aligned+0x38>
 8019ba4:	1a21      	subs	r1, r4, r0
 8019ba6:	4628      	mov	r0, r5
 8019ba8:	f000 fd5e 	bl	801a668 <_sbrk_r>
 8019bac:	3001      	adds	r0, #1
 8019bae:	d101      	bne.n	8019bb4 <sbrk_aligned+0x38>
 8019bb0:	f04f 34ff 	mov.w	r4, #4294967295
 8019bb4:	4620      	mov	r0, r4
 8019bb6:	bd70      	pop	{r4, r5, r6, pc}
 8019bb8:	20009d64 	.word	0x20009d64

08019bbc <_malloc_r>:
 8019bbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019bc0:	1ccd      	adds	r5, r1, #3
 8019bc2:	f025 0503 	bic.w	r5, r5, #3
 8019bc6:	3508      	adds	r5, #8
 8019bc8:	2d0c      	cmp	r5, #12
 8019bca:	bf38      	it	cc
 8019bcc:	250c      	movcc	r5, #12
 8019bce:	2d00      	cmp	r5, #0
 8019bd0:	4607      	mov	r7, r0
 8019bd2:	db01      	blt.n	8019bd8 <_malloc_r+0x1c>
 8019bd4:	42a9      	cmp	r1, r5
 8019bd6:	d905      	bls.n	8019be4 <_malloc_r+0x28>
 8019bd8:	230c      	movs	r3, #12
 8019bda:	603b      	str	r3, [r7, #0]
 8019bdc:	2600      	movs	r6, #0
 8019bde:	4630      	mov	r0, r6
 8019be0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019be4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8019cb8 <_malloc_r+0xfc>
 8019be8:	f000 f868 	bl	8019cbc <__malloc_lock>
 8019bec:	f8d8 3000 	ldr.w	r3, [r8]
 8019bf0:	461c      	mov	r4, r3
 8019bf2:	bb5c      	cbnz	r4, 8019c4c <_malloc_r+0x90>
 8019bf4:	4629      	mov	r1, r5
 8019bf6:	4638      	mov	r0, r7
 8019bf8:	f7ff ffc0 	bl	8019b7c <sbrk_aligned>
 8019bfc:	1c43      	adds	r3, r0, #1
 8019bfe:	4604      	mov	r4, r0
 8019c00:	d155      	bne.n	8019cae <_malloc_r+0xf2>
 8019c02:	f8d8 4000 	ldr.w	r4, [r8]
 8019c06:	4626      	mov	r6, r4
 8019c08:	2e00      	cmp	r6, #0
 8019c0a:	d145      	bne.n	8019c98 <_malloc_r+0xdc>
 8019c0c:	2c00      	cmp	r4, #0
 8019c0e:	d048      	beq.n	8019ca2 <_malloc_r+0xe6>
 8019c10:	6823      	ldr	r3, [r4, #0]
 8019c12:	4631      	mov	r1, r6
 8019c14:	4638      	mov	r0, r7
 8019c16:	eb04 0903 	add.w	r9, r4, r3
 8019c1a:	f000 fd25 	bl	801a668 <_sbrk_r>
 8019c1e:	4581      	cmp	r9, r0
 8019c20:	d13f      	bne.n	8019ca2 <_malloc_r+0xe6>
 8019c22:	6821      	ldr	r1, [r4, #0]
 8019c24:	1a6d      	subs	r5, r5, r1
 8019c26:	4629      	mov	r1, r5
 8019c28:	4638      	mov	r0, r7
 8019c2a:	f7ff ffa7 	bl	8019b7c <sbrk_aligned>
 8019c2e:	3001      	adds	r0, #1
 8019c30:	d037      	beq.n	8019ca2 <_malloc_r+0xe6>
 8019c32:	6823      	ldr	r3, [r4, #0]
 8019c34:	442b      	add	r3, r5
 8019c36:	6023      	str	r3, [r4, #0]
 8019c38:	f8d8 3000 	ldr.w	r3, [r8]
 8019c3c:	2b00      	cmp	r3, #0
 8019c3e:	d038      	beq.n	8019cb2 <_malloc_r+0xf6>
 8019c40:	685a      	ldr	r2, [r3, #4]
 8019c42:	42a2      	cmp	r2, r4
 8019c44:	d12b      	bne.n	8019c9e <_malloc_r+0xe2>
 8019c46:	2200      	movs	r2, #0
 8019c48:	605a      	str	r2, [r3, #4]
 8019c4a:	e00f      	b.n	8019c6c <_malloc_r+0xb0>
 8019c4c:	6822      	ldr	r2, [r4, #0]
 8019c4e:	1b52      	subs	r2, r2, r5
 8019c50:	d41f      	bmi.n	8019c92 <_malloc_r+0xd6>
 8019c52:	2a0b      	cmp	r2, #11
 8019c54:	d917      	bls.n	8019c86 <_malloc_r+0xca>
 8019c56:	1961      	adds	r1, r4, r5
 8019c58:	42a3      	cmp	r3, r4
 8019c5a:	6025      	str	r5, [r4, #0]
 8019c5c:	bf18      	it	ne
 8019c5e:	6059      	strne	r1, [r3, #4]
 8019c60:	6863      	ldr	r3, [r4, #4]
 8019c62:	bf08      	it	eq
 8019c64:	f8c8 1000 	streq.w	r1, [r8]
 8019c68:	5162      	str	r2, [r4, r5]
 8019c6a:	604b      	str	r3, [r1, #4]
 8019c6c:	4638      	mov	r0, r7
 8019c6e:	f104 060b 	add.w	r6, r4, #11
 8019c72:	f000 f829 	bl	8019cc8 <__malloc_unlock>
 8019c76:	f026 0607 	bic.w	r6, r6, #7
 8019c7a:	1d23      	adds	r3, r4, #4
 8019c7c:	1af2      	subs	r2, r6, r3
 8019c7e:	d0ae      	beq.n	8019bde <_malloc_r+0x22>
 8019c80:	1b9b      	subs	r3, r3, r6
 8019c82:	50a3      	str	r3, [r4, r2]
 8019c84:	e7ab      	b.n	8019bde <_malloc_r+0x22>
 8019c86:	42a3      	cmp	r3, r4
 8019c88:	6862      	ldr	r2, [r4, #4]
 8019c8a:	d1dd      	bne.n	8019c48 <_malloc_r+0x8c>
 8019c8c:	f8c8 2000 	str.w	r2, [r8]
 8019c90:	e7ec      	b.n	8019c6c <_malloc_r+0xb0>
 8019c92:	4623      	mov	r3, r4
 8019c94:	6864      	ldr	r4, [r4, #4]
 8019c96:	e7ac      	b.n	8019bf2 <_malloc_r+0x36>
 8019c98:	4634      	mov	r4, r6
 8019c9a:	6876      	ldr	r6, [r6, #4]
 8019c9c:	e7b4      	b.n	8019c08 <_malloc_r+0x4c>
 8019c9e:	4613      	mov	r3, r2
 8019ca0:	e7cc      	b.n	8019c3c <_malloc_r+0x80>
 8019ca2:	230c      	movs	r3, #12
 8019ca4:	603b      	str	r3, [r7, #0]
 8019ca6:	4638      	mov	r0, r7
 8019ca8:	f000 f80e 	bl	8019cc8 <__malloc_unlock>
 8019cac:	e797      	b.n	8019bde <_malloc_r+0x22>
 8019cae:	6025      	str	r5, [r4, #0]
 8019cb0:	e7dc      	b.n	8019c6c <_malloc_r+0xb0>
 8019cb2:	605b      	str	r3, [r3, #4]
 8019cb4:	deff      	udf	#255	; 0xff
 8019cb6:	bf00      	nop
 8019cb8:	20009d60 	.word	0x20009d60

08019cbc <__malloc_lock>:
 8019cbc:	4801      	ldr	r0, [pc, #4]	; (8019cc4 <__malloc_lock+0x8>)
 8019cbe:	f000 bd20 	b.w	801a702 <__retarget_lock_acquire_recursive>
 8019cc2:	bf00      	nop
 8019cc4:	20009ea9 	.word	0x20009ea9

08019cc8 <__malloc_unlock>:
 8019cc8:	4801      	ldr	r0, [pc, #4]	; (8019cd0 <__malloc_unlock+0x8>)
 8019cca:	f000 bd1b 	b.w	801a704 <__retarget_lock_release_recursive>
 8019cce:	bf00      	nop
 8019cd0:	20009ea9 	.word	0x20009ea9

08019cd4 <srand>:
 8019cd4:	b538      	push	{r3, r4, r5, lr}
 8019cd6:	4b10      	ldr	r3, [pc, #64]	; (8019d18 <srand+0x44>)
 8019cd8:	681d      	ldr	r5, [r3, #0]
 8019cda:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8019cdc:	4604      	mov	r4, r0
 8019cde:	b9b3      	cbnz	r3, 8019d0e <srand+0x3a>
 8019ce0:	2018      	movs	r0, #24
 8019ce2:	f7ff ff3b 	bl	8019b5c <malloc>
 8019ce6:	4602      	mov	r2, r0
 8019ce8:	6328      	str	r0, [r5, #48]	; 0x30
 8019cea:	b920      	cbnz	r0, 8019cf6 <srand+0x22>
 8019cec:	4b0b      	ldr	r3, [pc, #44]	; (8019d1c <srand+0x48>)
 8019cee:	480c      	ldr	r0, [pc, #48]	; (8019d20 <srand+0x4c>)
 8019cf0:	2146      	movs	r1, #70	; 0x46
 8019cf2:	f000 fd1f 	bl	801a734 <__assert_func>
 8019cf6:	490b      	ldr	r1, [pc, #44]	; (8019d24 <srand+0x50>)
 8019cf8:	4b0b      	ldr	r3, [pc, #44]	; (8019d28 <srand+0x54>)
 8019cfa:	e9c0 1300 	strd	r1, r3, [r0]
 8019cfe:	4b0b      	ldr	r3, [pc, #44]	; (8019d2c <srand+0x58>)
 8019d00:	6083      	str	r3, [r0, #8]
 8019d02:	230b      	movs	r3, #11
 8019d04:	8183      	strh	r3, [r0, #12]
 8019d06:	2100      	movs	r1, #0
 8019d08:	2001      	movs	r0, #1
 8019d0a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019d0e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8019d10:	2200      	movs	r2, #0
 8019d12:	611c      	str	r4, [r3, #16]
 8019d14:	615a      	str	r2, [r3, #20]
 8019d16:	bd38      	pop	{r3, r4, r5, pc}
 8019d18:	200000e8 	.word	0x200000e8
 8019d1c:	0801c150 	.word	0x0801c150
 8019d20:	0801c167 	.word	0x0801c167
 8019d24:	abcd330e 	.word	0xabcd330e
 8019d28:	e66d1234 	.word	0xe66d1234
 8019d2c:	0005deec 	.word	0x0005deec

08019d30 <rand>:
 8019d30:	4b16      	ldr	r3, [pc, #88]	; (8019d8c <rand+0x5c>)
 8019d32:	b510      	push	{r4, lr}
 8019d34:	681c      	ldr	r4, [r3, #0]
 8019d36:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8019d38:	b9b3      	cbnz	r3, 8019d68 <rand+0x38>
 8019d3a:	2018      	movs	r0, #24
 8019d3c:	f7ff ff0e 	bl	8019b5c <malloc>
 8019d40:	4602      	mov	r2, r0
 8019d42:	6320      	str	r0, [r4, #48]	; 0x30
 8019d44:	b920      	cbnz	r0, 8019d50 <rand+0x20>
 8019d46:	4b12      	ldr	r3, [pc, #72]	; (8019d90 <rand+0x60>)
 8019d48:	4812      	ldr	r0, [pc, #72]	; (8019d94 <rand+0x64>)
 8019d4a:	2152      	movs	r1, #82	; 0x52
 8019d4c:	f000 fcf2 	bl	801a734 <__assert_func>
 8019d50:	4911      	ldr	r1, [pc, #68]	; (8019d98 <rand+0x68>)
 8019d52:	4b12      	ldr	r3, [pc, #72]	; (8019d9c <rand+0x6c>)
 8019d54:	e9c0 1300 	strd	r1, r3, [r0]
 8019d58:	4b11      	ldr	r3, [pc, #68]	; (8019da0 <rand+0x70>)
 8019d5a:	6083      	str	r3, [r0, #8]
 8019d5c:	230b      	movs	r3, #11
 8019d5e:	8183      	strh	r3, [r0, #12]
 8019d60:	2100      	movs	r1, #0
 8019d62:	2001      	movs	r0, #1
 8019d64:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019d68:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8019d6a:	480e      	ldr	r0, [pc, #56]	; (8019da4 <rand+0x74>)
 8019d6c:	690b      	ldr	r3, [r1, #16]
 8019d6e:	694c      	ldr	r4, [r1, #20]
 8019d70:	4a0d      	ldr	r2, [pc, #52]	; (8019da8 <rand+0x78>)
 8019d72:	4358      	muls	r0, r3
 8019d74:	fb02 0004 	mla	r0, r2, r4, r0
 8019d78:	fba3 3202 	umull	r3, r2, r3, r2
 8019d7c:	3301      	adds	r3, #1
 8019d7e:	eb40 0002 	adc.w	r0, r0, r2
 8019d82:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8019d86:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8019d8a:	bd10      	pop	{r4, pc}
 8019d8c:	200000e8 	.word	0x200000e8
 8019d90:	0801c150 	.word	0x0801c150
 8019d94:	0801c167 	.word	0x0801c167
 8019d98:	abcd330e 	.word	0xabcd330e
 8019d9c:	e66d1234 	.word	0xe66d1234
 8019da0:	0005deec 	.word	0x0005deec
 8019da4:	5851f42d 	.word	0x5851f42d
 8019da8:	4c957f2d 	.word	0x4c957f2d

08019dac <realloc>:
 8019dac:	4b02      	ldr	r3, [pc, #8]	; (8019db8 <realloc+0xc>)
 8019dae:	460a      	mov	r2, r1
 8019db0:	4601      	mov	r1, r0
 8019db2:	6818      	ldr	r0, [r3, #0]
 8019db4:	f000 b802 	b.w	8019dbc <_realloc_r>
 8019db8:	200000e8 	.word	0x200000e8

08019dbc <_realloc_r>:
 8019dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019dc0:	4680      	mov	r8, r0
 8019dc2:	4614      	mov	r4, r2
 8019dc4:	460e      	mov	r6, r1
 8019dc6:	b921      	cbnz	r1, 8019dd2 <_realloc_r+0x16>
 8019dc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019dcc:	4611      	mov	r1, r2
 8019dce:	f7ff bef5 	b.w	8019bbc <_malloc_r>
 8019dd2:	b92a      	cbnz	r2, 8019de0 <_realloc_r+0x24>
 8019dd4:	f000 fcd8 	bl	801a788 <_free_r>
 8019dd8:	4625      	mov	r5, r4
 8019dda:	4628      	mov	r0, r5
 8019ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019de0:	f000 fd1e 	bl	801a820 <_malloc_usable_size_r>
 8019de4:	4284      	cmp	r4, r0
 8019de6:	4607      	mov	r7, r0
 8019de8:	d802      	bhi.n	8019df0 <_realloc_r+0x34>
 8019dea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8019dee:	d812      	bhi.n	8019e16 <_realloc_r+0x5a>
 8019df0:	4621      	mov	r1, r4
 8019df2:	4640      	mov	r0, r8
 8019df4:	f7ff fee2 	bl	8019bbc <_malloc_r>
 8019df8:	4605      	mov	r5, r0
 8019dfa:	2800      	cmp	r0, #0
 8019dfc:	d0ed      	beq.n	8019dda <_realloc_r+0x1e>
 8019dfe:	42bc      	cmp	r4, r7
 8019e00:	4622      	mov	r2, r4
 8019e02:	4631      	mov	r1, r6
 8019e04:	bf28      	it	cs
 8019e06:	463a      	movcs	r2, r7
 8019e08:	f000 fc85 	bl	801a716 <memcpy>
 8019e0c:	4631      	mov	r1, r6
 8019e0e:	4640      	mov	r0, r8
 8019e10:	f000 fcba 	bl	801a788 <_free_r>
 8019e14:	e7e1      	b.n	8019dda <_realloc_r+0x1e>
 8019e16:	4635      	mov	r5, r6
 8019e18:	e7df      	b.n	8019dda <_realloc_r+0x1e>
	...

08019e1c <_strtoul_l.constprop.0>:
 8019e1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019e20:	4f36      	ldr	r7, [pc, #216]	; (8019efc <_strtoul_l.constprop.0+0xe0>)
 8019e22:	4686      	mov	lr, r0
 8019e24:	460d      	mov	r5, r1
 8019e26:	4628      	mov	r0, r5
 8019e28:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019e2c:	5d3e      	ldrb	r6, [r7, r4]
 8019e2e:	f016 0608 	ands.w	r6, r6, #8
 8019e32:	d1f8      	bne.n	8019e26 <_strtoul_l.constprop.0+0xa>
 8019e34:	2c2d      	cmp	r4, #45	; 0x2d
 8019e36:	d130      	bne.n	8019e9a <_strtoul_l.constprop.0+0x7e>
 8019e38:	782c      	ldrb	r4, [r5, #0]
 8019e3a:	2601      	movs	r6, #1
 8019e3c:	1c85      	adds	r5, r0, #2
 8019e3e:	2b00      	cmp	r3, #0
 8019e40:	d057      	beq.n	8019ef2 <_strtoul_l.constprop.0+0xd6>
 8019e42:	2b10      	cmp	r3, #16
 8019e44:	d109      	bne.n	8019e5a <_strtoul_l.constprop.0+0x3e>
 8019e46:	2c30      	cmp	r4, #48	; 0x30
 8019e48:	d107      	bne.n	8019e5a <_strtoul_l.constprop.0+0x3e>
 8019e4a:	7828      	ldrb	r0, [r5, #0]
 8019e4c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8019e50:	2858      	cmp	r0, #88	; 0x58
 8019e52:	d149      	bne.n	8019ee8 <_strtoul_l.constprop.0+0xcc>
 8019e54:	786c      	ldrb	r4, [r5, #1]
 8019e56:	2310      	movs	r3, #16
 8019e58:	3502      	adds	r5, #2
 8019e5a:	f04f 38ff 	mov.w	r8, #4294967295
 8019e5e:	2700      	movs	r7, #0
 8019e60:	fbb8 f8f3 	udiv	r8, r8, r3
 8019e64:	fb03 f908 	mul.w	r9, r3, r8
 8019e68:	ea6f 0909 	mvn.w	r9, r9
 8019e6c:	4638      	mov	r0, r7
 8019e6e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8019e72:	f1bc 0f09 	cmp.w	ip, #9
 8019e76:	d815      	bhi.n	8019ea4 <_strtoul_l.constprop.0+0x88>
 8019e78:	4664      	mov	r4, ip
 8019e7a:	42a3      	cmp	r3, r4
 8019e7c:	dd23      	ble.n	8019ec6 <_strtoul_l.constprop.0+0xaa>
 8019e7e:	f1b7 3fff 	cmp.w	r7, #4294967295
 8019e82:	d007      	beq.n	8019e94 <_strtoul_l.constprop.0+0x78>
 8019e84:	4580      	cmp	r8, r0
 8019e86:	d31b      	bcc.n	8019ec0 <_strtoul_l.constprop.0+0xa4>
 8019e88:	d101      	bne.n	8019e8e <_strtoul_l.constprop.0+0x72>
 8019e8a:	45a1      	cmp	r9, r4
 8019e8c:	db18      	blt.n	8019ec0 <_strtoul_l.constprop.0+0xa4>
 8019e8e:	fb00 4003 	mla	r0, r0, r3, r4
 8019e92:	2701      	movs	r7, #1
 8019e94:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019e98:	e7e9      	b.n	8019e6e <_strtoul_l.constprop.0+0x52>
 8019e9a:	2c2b      	cmp	r4, #43	; 0x2b
 8019e9c:	bf04      	itt	eq
 8019e9e:	782c      	ldrbeq	r4, [r5, #0]
 8019ea0:	1c85      	addeq	r5, r0, #2
 8019ea2:	e7cc      	b.n	8019e3e <_strtoul_l.constprop.0+0x22>
 8019ea4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8019ea8:	f1bc 0f19 	cmp.w	ip, #25
 8019eac:	d801      	bhi.n	8019eb2 <_strtoul_l.constprop.0+0x96>
 8019eae:	3c37      	subs	r4, #55	; 0x37
 8019eb0:	e7e3      	b.n	8019e7a <_strtoul_l.constprop.0+0x5e>
 8019eb2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8019eb6:	f1bc 0f19 	cmp.w	ip, #25
 8019eba:	d804      	bhi.n	8019ec6 <_strtoul_l.constprop.0+0xaa>
 8019ebc:	3c57      	subs	r4, #87	; 0x57
 8019ebe:	e7dc      	b.n	8019e7a <_strtoul_l.constprop.0+0x5e>
 8019ec0:	f04f 37ff 	mov.w	r7, #4294967295
 8019ec4:	e7e6      	b.n	8019e94 <_strtoul_l.constprop.0+0x78>
 8019ec6:	1c7b      	adds	r3, r7, #1
 8019ec8:	d106      	bne.n	8019ed8 <_strtoul_l.constprop.0+0xbc>
 8019eca:	2322      	movs	r3, #34	; 0x22
 8019ecc:	f8ce 3000 	str.w	r3, [lr]
 8019ed0:	4638      	mov	r0, r7
 8019ed2:	b932      	cbnz	r2, 8019ee2 <_strtoul_l.constprop.0+0xc6>
 8019ed4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019ed8:	b106      	cbz	r6, 8019edc <_strtoul_l.constprop.0+0xc0>
 8019eda:	4240      	negs	r0, r0
 8019edc:	2a00      	cmp	r2, #0
 8019ede:	d0f9      	beq.n	8019ed4 <_strtoul_l.constprop.0+0xb8>
 8019ee0:	b107      	cbz	r7, 8019ee4 <_strtoul_l.constprop.0+0xc8>
 8019ee2:	1e69      	subs	r1, r5, #1
 8019ee4:	6011      	str	r1, [r2, #0]
 8019ee6:	e7f5      	b.n	8019ed4 <_strtoul_l.constprop.0+0xb8>
 8019ee8:	2430      	movs	r4, #48	; 0x30
 8019eea:	2b00      	cmp	r3, #0
 8019eec:	d1b5      	bne.n	8019e5a <_strtoul_l.constprop.0+0x3e>
 8019eee:	2308      	movs	r3, #8
 8019ef0:	e7b3      	b.n	8019e5a <_strtoul_l.constprop.0+0x3e>
 8019ef2:	2c30      	cmp	r4, #48	; 0x30
 8019ef4:	d0a9      	beq.n	8019e4a <_strtoul_l.constprop.0+0x2e>
 8019ef6:	230a      	movs	r3, #10
 8019ef8:	e7af      	b.n	8019e5a <_strtoul_l.constprop.0+0x3e>
 8019efa:	bf00      	nop
 8019efc:	0801c1c0 	.word	0x0801c1c0

08019f00 <strtoul>:
 8019f00:	4613      	mov	r3, r2
 8019f02:	460a      	mov	r2, r1
 8019f04:	4601      	mov	r1, r0
 8019f06:	4802      	ldr	r0, [pc, #8]	; (8019f10 <strtoul+0x10>)
 8019f08:	6800      	ldr	r0, [r0, #0]
 8019f0a:	f7ff bf87 	b.w	8019e1c <_strtoul_l.constprop.0>
 8019f0e:	bf00      	nop
 8019f10:	200000e8 	.word	0x200000e8

08019f14 <std>:
 8019f14:	2300      	movs	r3, #0
 8019f16:	b510      	push	{r4, lr}
 8019f18:	4604      	mov	r4, r0
 8019f1a:	e9c0 3300 	strd	r3, r3, [r0]
 8019f1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019f22:	6083      	str	r3, [r0, #8]
 8019f24:	8181      	strh	r1, [r0, #12]
 8019f26:	6643      	str	r3, [r0, #100]	; 0x64
 8019f28:	81c2      	strh	r2, [r0, #14]
 8019f2a:	6183      	str	r3, [r0, #24]
 8019f2c:	4619      	mov	r1, r3
 8019f2e:	2208      	movs	r2, #8
 8019f30:	305c      	adds	r0, #92	; 0x5c
 8019f32:	f000 fad1 	bl	801a4d8 <memset>
 8019f36:	4b0d      	ldr	r3, [pc, #52]	; (8019f6c <std+0x58>)
 8019f38:	6263      	str	r3, [r4, #36]	; 0x24
 8019f3a:	4b0d      	ldr	r3, [pc, #52]	; (8019f70 <std+0x5c>)
 8019f3c:	62a3      	str	r3, [r4, #40]	; 0x28
 8019f3e:	4b0d      	ldr	r3, [pc, #52]	; (8019f74 <std+0x60>)
 8019f40:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019f42:	4b0d      	ldr	r3, [pc, #52]	; (8019f78 <std+0x64>)
 8019f44:	6323      	str	r3, [r4, #48]	; 0x30
 8019f46:	4b0d      	ldr	r3, [pc, #52]	; (8019f7c <std+0x68>)
 8019f48:	6224      	str	r4, [r4, #32]
 8019f4a:	429c      	cmp	r4, r3
 8019f4c:	d006      	beq.n	8019f5c <std+0x48>
 8019f4e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8019f52:	4294      	cmp	r4, r2
 8019f54:	d002      	beq.n	8019f5c <std+0x48>
 8019f56:	33d0      	adds	r3, #208	; 0xd0
 8019f58:	429c      	cmp	r4, r3
 8019f5a:	d105      	bne.n	8019f68 <std+0x54>
 8019f5c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019f64:	f000 bbcc 	b.w	801a700 <__retarget_lock_init_recursive>
 8019f68:	bd10      	pop	{r4, pc}
 8019f6a:	bf00      	nop
 8019f6c:	0801a281 	.word	0x0801a281
 8019f70:	0801a2a3 	.word	0x0801a2a3
 8019f74:	0801a2db 	.word	0x0801a2db
 8019f78:	0801a2ff 	.word	0x0801a2ff
 8019f7c:	20009d68 	.word	0x20009d68

08019f80 <stdio_exit_handler>:
 8019f80:	4a02      	ldr	r2, [pc, #8]	; (8019f8c <stdio_exit_handler+0xc>)
 8019f82:	4903      	ldr	r1, [pc, #12]	; (8019f90 <stdio_exit_handler+0x10>)
 8019f84:	4803      	ldr	r0, [pc, #12]	; (8019f94 <stdio_exit_handler+0x14>)
 8019f86:	f000 b869 	b.w	801a05c <_fwalk_sglue>
 8019f8a:	bf00      	nop
 8019f8c:	20000090 	.word	0x20000090
 8019f90:	0801b195 	.word	0x0801b195
 8019f94:	2000009c 	.word	0x2000009c

08019f98 <cleanup_stdio>:
 8019f98:	6841      	ldr	r1, [r0, #4]
 8019f9a:	4b0c      	ldr	r3, [pc, #48]	; (8019fcc <cleanup_stdio+0x34>)
 8019f9c:	4299      	cmp	r1, r3
 8019f9e:	b510      	push	{r4, lr}
 8019fa0:	4604      	mov	r4, r0
 8019fa2:	d001      	beq.n	8019fa8 <cleanup_stdio+0x10>
 8019fa4:	f001 f8f6 	bl	801b194 <_fflush_r>
 8019fa8:	68a1      	ldr	r1, [r4, #8]
 8019faa:	4b09      	ldr	r3, [pc, #36]	; (8019fd0 <cleanup_stdio+0x38>)
 8019fac:	4299      	cmp	r1, r3
 8019fae:	d002      	beq.n	8019fb6 <cleanup_stdio+0x1e>
 8019fb0:	4620      	mov	r0, r4
 8019fb2:	f001 f8ef 	bl	801b194 <_fflush_r>
 8019fb6:	68e1      	ldr	r1, [r4, #12]
 8019fb8:	4b06      	ldr	r3, [pc, #24]	; (8019fd4 <cleanup_stdio+0x3c>)
 8019fba:	4299      	cmp	r1, r3
 8019fbc:	d004      	beq.n	8019fc8 <cleanup_stdio+0x30>
 8019fbe:	4620      	mov	r0, r4
 8019fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019fc4:	f001 b8e6 	b.w	801b194 <_fflush_r>
 8019fc8:	bd10      	pop	{r4, pc}
 8019fca:	bf00      	nop
 8019fcc:	20009d68 	.word	0x20009d68
 8019fd0:	20009dd0 	.word	0x20009dd0
 8019fd4:	20009e38 	.word	0x20009e38

08019fd8 <global_stdio_init.part.0>:
 8019fd8:	b510      	push	{r4, lr}
 8019fda:	4b0b      	ldr	r3, [pc, #44]	; (801a008 <global_stdio_init.part.0+0x30>)
 8019fdc:	4c0b      	ldr	r4, [pc, #44]	; (801a00c <global_stdio_init.part.0+0x34>)
 8019fde:	4a0c      	ldr	r2, [pc, #48]	; (801a010 <global_stdio_init.part.0+0x38>)
 8019fe0:	601a      	str	r2, [r3, #0]
 8019fe2:	4620      	mov	r0, r4
 8019fe4:	2200      	movs	r2, #0
 8019fe6:	2104      	movs	r1, #4
 8019fe8:	f7ff ff94 	bl	8019f14 <std>
 8019fec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8019ff0:	2201      	movs	r2, #1
 8019ff2:	2109      	movs	r1, #9
 8019ff4:	f7ff ff8e 	bl	8019f14 <std>
 8019ff8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8019ffc:	2202      	movs	r2, #2
 8019ffe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a002:	2112      	movs	r1, #18
 801a004:	f7ff bf86 	b.w	8019f14 <std>
 801a008:	20009ea0 	.word	0x20009ea0
 801a00c:	20009d68 	.word	0x20009d68
 801a010:	08019f81 	.word	0x08019f81

0801a014 <__sfp_lock_acquire>:
 801a014:	4801      	ldr	r0, [pc, #4]	; (801a01c <__sfp_lock_acquire+0x8>)
 801a016:	f000 bb74 	b.w	801a702 <__retarget_lock_acquire_recursive>
 801a01a:	bf00      	nop
 801a01c:	20009eaa 	.word	0x20009eaa

0801a020 <__sfp_lock_release>:
 801a020:	4801      	ldr	r0, [pc, #4]	; (801a028 <__sfp_lock_release+0x8>)
 801a022:	f000 bb6f 	b.w	801a704 <__retarget_lock_release_recursive>
 801a026:	bf00      	nop
 801a028:	20009eaa 	.word	0x20009eaa

0801a02c <__sinit>:
 801a02c:	b510      	push	{r4, lr}
 801a02e:	4604      	mov	r4, r0
 801a030:	f7ff fff0 	bl	801a014 <__sfp_lock_acquire>
 801a034:	6a23      	ldr	r3, [r4, #32]
 801a036:	b11b      	cbz	r3, 801a040 <__sinit+0x14>
 801a038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a03c:	f7ff bff0 	b.w	801a020 <__sfp_lock_release>
 801a040:	4b04      	ldr	r3, [pc, #16]	; (801a054 <__sinit+0x28>)
 801a042:	6223      	str	r3, [r4, #32]
 801a044:	4b04      	ldr	r3, [pc, #16]	; (801a058 <__sinit+0x2c>)
 801a046:	681b      	ldr	r3, [r3, #0]
 801a048:	2b00      	cmp	r3, #0
 801a04a:	d1f5      	bne.n	801a038 <__sinit+0xc>
 801a04c:	f7ff ffc4 	bl	8019fd8 <global_stdio_init.part.0>
 801a050:	e7f2      	b.n	801a038 <__sinit+0xc>
 801a052:	bf00      	nop
 801a054:	08019f99 	.word	0x08019f99
 801a058:	20009ea0 	.word	0x20009ea0

0801a05c <_fwalk_sglue>:
 801a05c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a060:	4607      	mov	r7, r0
 801a062:	4688      	mov	r8, r1
 801a064:	4614      	mov	r4, r2
 801a066:	2600      	movs	r6, #0
 801a068:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a06c:	f1b9 0901 	subs.w	r9, r9, #1
 801a070:	d505      	bpl.n	801a07e <_fwalk_sglue+0x22>
 801a072:	6824      	ldr	r4, [r4, #0]
 801a074:	2c00      	cmp	r4, #0
 801a076:	d1f7      	bne.n	801a068 <_fwalk_sglue+0xc>
 801a078:	4630      	mov	r0, r6
 801a07a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a07e:	89ab      	ldrh	r3, [r5, #12]
 801a080:	2b01      	cmp	r3, #1
 801a082:	d907      	bls.n	801a094 <_fwalk_sglue+0x38>
 801a084:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a088:	3301      	adds	r3, #1
 801a08a:	d003      	beq.n	801a094 <_fwalk_sglue+0x38>
 801a08c:	4629      	mov	r1, r5
 801a08e:	4638      	mov	r0, r7
 801a090:	47c0      	blx	r8
 801a092:	4306      	orrs	r6, r0
 801a094:	3568      	adds	r5, #104	; 0x68
 801a096:	e7e9      	b.n	801a06c <_fwalk_sglue+0x10>

0801a098 <iprintf>:
 801a098:	b40f      	push	{r0, r1, r2, r3}
 801a09a:	b507      	push	{r0, r1, r2, lr}
 801a09c:	4906      	ldr	r1, [pc, #24]	; (801a0b8 <iprintf+0x20>)
 801a09e:	ab04      	add	r3, sp, #16
 801a0a0:	6808      	ldr	r0, [r1, #0]
 801a0a2:	f853 2b04 	ldr.w	r2, [r3], #4
 801a0a6:	6881      	ldr	r1, [r0, #8]
 801a0a8:	9301      	str	r3, [sp, #4]
 801a0aa:	f000 fd43 	bl	801ab34 <_vfiprintf_r>
 801a0ae:	b003      	add	sp, #12
 801a0b0:	f85d eb04 	ldr.w	lr, [sp], #4
 801a0b4:	b004      	add	sp, #16
 801a0b6:	4770      	bx	lr
 801a0b8:	200000e8 	.word	0x200000e8

0801a0bc <setvbuf>:
 801a0bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a0c0:	461d      	mov	r5, r3
 801a0c2:	4b54      	ldr	r3, [pc, #336]	; (801a214 <setvbuf+0x158>)
 801a0c4:	681f      	ldr	r7, [r3, #0]
 801a0c6:	4604      	mov	r4, r0
 801a0c8:	460e      	mov	r6, r1
 801a0ca:	4690      	mov	r8, r2
 801a0cc:	b127      	cbz	r7, 801a0d8 <setvbuf+0x1c>
 801a0ce:	6a3b      	ldr	r3, [r7, #32]
 801a0d0:	b913      	cbnz	r3, 801a0d8 <setvbuf+0x1c>
 801a0d2:	4638      	mov	r0, r7
 801a0d4:	f7ff ffaa 	bl	801a02c <__sinit>
 801a0d8:	f1b8 0f02 	cmp.w	r8, #2
 801a0dc:	d006      	beq.n	801a0ec <setvbuf+0x30>
 801a0de:	f1b8 0f01 	cmp.w	r8, #1
 801a0e2:	f200 8094 	bhi.w	801a20e <setvbuf+0x152>
 801a0e6:	2d00      	cmp	r5, #0
 801a0e8:	f2c0 8091 	blt.w	801a20e <setvbuf+0x152>
 801a0ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a0ee:	07da      	lsls	r2, r3, #31
 801a0f0:	d405      	bmi.n	801a0fe <setvbuf+0x42>
 801a0f2:	89a3      	ldrh	r3, [r4, #12]
 801a0f4:	059b      	lsls	r3, r3, #22
 801a0f6:	d402      	bmi.n	801a0fe <setvbuf+0x42>
 801a0f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a0fa:	f000 fb02 	bl	801a702 <__retarget_lock_acquire_recursive>
 801a0fe:	4621      	mov	r1, r4
 801a100:	4638      	mov	r0, r7
 801a102:	f001 f847 	bl	801b194 <_fflush_r>
 801a106:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a108:	b141      	cbz	r1, 801a11c <setvbuf+0x60>
 801a10a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a10e:	4299      	cmp	r1, r3
 801a110:	d002      	beq.n	801a118 <setvbuf+0x5c>
 801a112:	4638      	mov	r0, r7
 801a114:	f000 fb38 	bl	801a788 <_free_r>
 801a118:	2300      	movs	r3, #0
 801a11a:	6363      	str	r3, [r4, #52]	; 0x34
 801a11c:	2300      	movs	r3, #0
 801a11e:	61a3      	str	r3, [r4, #24]
 801a120:	6063      	str	r3, [r4, #4]
 801a122:	89a3      	ldrh	r3, [r4, #12]
 801a124:	0618      	lsls	r0, r3, #24
 801a126:	d503      	bpl.n	801a130 <setvbuf+0x74>
 801a128:	6921      	ldr	r1, [r4, #16]
 801a12a:	4638      	mov	r0, r7
 801a12c:	f000 fb2c 	bl	801a788 <_free_r>
 801a130:	89a3      	ldrh	r3, [r4, #12]
 801a132:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 801a136:	f023 0303 	bic.w	r3, r3, #3
 801a13a:	f1b8 0f02 	cmp.w	r8, #2
 801a13e:	81a3      	strh	r3, [r4, #12]
 801a140:	d05f      	beq.n	801a202 <setvbuf+0x146>
 801a142:	ab01      	add	r3, sp, #4
 801a144:	466a      	mov	r2, sp
 801a146:	4621      	mov	r1, r4
 801a148:	4638      	mov	r0, r7
 801a14a:	f001 f85d 	bl	801b208 <__swhatbuf_r>
 801a14e:	89a3      	ldrh	r3, [r4, #12]
 801a150:	4318      	orrs	r0, r3
 801a152:	81a0      	strh	r0, [r4, #12]
 801a154:	bb2d      	cbnz	r5, 801a1a2 <setvbuf+0xe6>
 801a156:	9d00      	ldr	r5, [sp, #0]
 801a158:	4628      	mov	r0, r5
 801a15a:	f7ff fcff 	bl	8019b5c <malloc>
 801a15e:	4606      	mov	r6, r0
 801a160:	2800      	cmp	r0, #0
 801a162:	d150      	bne.n	801a206 <setvbuf+0x14a>
 801a164:	f8dd 9000 	ldr.w	r9, [sp]
 801a168:	45a9      	cmp	r9, r5
 801a16a:	d13e      	bne.n	801a1ea <setvbuf+0x12e>
 801a16c:	f04f 35ff 	mov.w	r5, #4294967295
 801a170:	2200      	movs	r2, #0
 801a172:	60a2      	str	r2, [r4, #8]
 801a174:	f104 0247 	add.w	r2, r4, #71	; 0x47
 801a178:	6022      	str	r2, [r4, #0]
 801a17a:	6122      	str	r2, [r4, #16]
 801a17c:	2201      	movs	r2, #1
 801a17e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a182:	6162      	str	r2, [r4, #20]
 801a184:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a186:	f043 0302 	orr.w	r3, r3, #2
 801a18a:	07d1      	lsls	r1, r2, #31
 801a18c:	81a3      	strh	r3, [r4, #12]
 801a18e:	d404      	bmi.n	801a19a <setvbuf+0xde>
 801a190:	059b      	lsls	r3, r3, #22
 801a192:	d402      	bmi.n	801a19a <setvbuf+0xde>
 801a194:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a196:	f000 fab5 	bl	801a704 <__retarget_lock_release_recursive>
 801a19a:	4628      	mov	r0, r5
 801a19c:	b003      	add	sp, #12
 801a19e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a1a2:	2e00      	cmp	r6, #0
 801a1a4:	d0d8      	beq.n	801a158 <setvbuf+0x9c>
 801a1a6:	6a3b      	ldr	r3, [r7, #32]
 801a1a8:	b913      	cbnz	r3, 801a1b0 <setvbuf+0xf4>
 801a1aa:	4638      	mov	r0, r7
 801a1ac:	f7ff ff3e 	bl	801a02c <__sinit>
 801a1b0:	f1b8 0f01 	cmp.w	r8, #1
 801a1b4:	bf08      	it	eq
 801a1b6:	89a3      	ldrheq	r3, [r4, #12]
 801a1b8:	6026      	str	r6, [r4, #0]
 801a1ba:	bf04      	itt	eq
 801a1bc:	f043 0301 	orreq.w	r3, r3, #1
 801a1c0:	81a3      	strheq	r3, [r4, #12]
 801a1c2:	89a3      	ldrh	r3, [r4, #12]
 801a1c4:	f013 0208 	ands.w	r2, r3, #8
 801a1c8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 801a1cc:	d01d      	beq.n	801a20a <setvbuf+0x14e>
 801a1ce:	07da      	lsls	r2, r3, #31
 801a1d0:	bf41      	itttt	mi
 801a1d2:	2200      	movmi	r2, #0
 801a1d4:	426d      	negmi	r5, r5
 801a1d6:	60a2      	strmi	r2, [r4, #8]
 801a1d8:	61a5      	strmi	r5, [r4, #24]
 801a1da:	bf58      	it	pl
 801a1dc:	60a5      	strpl	r5, [r4, #8]
 801a1de:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801a1e0:	f015 0501 	ands.w	r5, r5, #1
 801a1e4:	d0d4      	beq.n	801a190 <setvbuf+0xd4>
 801a1e6:	2500      	movs	r5, #0
 801a1e8:	e7d7      	b.n	801a19a <setvbuf+0xde>
 801a1ea:	4648      	mov	r0, r9
 801a1ec:	f7ff fcb6 	bl	8019b5c <malloc>
 801a1f0:	4606      	mov	r6, r0
 801a1f2:	2800      	cmp	r0, #0
 801a1f4:	d0ba      	beq.n	801a16c <setvbuf+0xb0>
 801a1f6:	89a3      	ldrh	r3, [r4, #12]
 801a1f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a1fc:	81a3      	strh	r3, [r4, #12]
 801a1fe:	464d      	mov	r5, r9
 801a200:	e7d1      	b.n	801a1a6 <setvbuf+0xea>
 801a202:	2500      	movs	r5, #0
 801a204:	e7b4      	b.n	801a170 <setvbuf+0xb4>
 801a206:	46a9      	mov	r9, r5
 801a208:	e7f5      	b.n	801a1f6 <setvbuf+0x13a>
 801a20a:	60a2      	str	r2, [r4, #8]
 801a20c:	e7e7      	b.n	801a1de <setvbuf+0x122>
 801a20e:	f04f 35ff 	mov.w	r5, #4294967295
 801a212:	e7c2      	b.n	801a19a <setvbuf+0xde>
 801a214:	200000e8 	.word	0x200000e8

0801a218 <sniprintf>:
 801a218:	b40c      	push	{r2, r3}
 801a21a:	b530      	push	{r4, r5, lr}
 801a21c:	4b17      	ldr	r3, [pc, #92]	; (801a27c <sniprintf+0x64>)
 801a21e:	1e0c      	subs	r4, r1, #0
 801a220:	681d      	ldr	r5, [r3, #0]
 801a222:	b09d      	sub	sp, #116	; 0x74
 801a224:	da08      	bge.n	801a238 <sniprintf+0x20>
 801a226:	238b      	movs	r3, #139	; 0x8b
 801a228:	602b      	str	r3, [r5, #0]
 801a22a:	f04f 30ff 	mov.w	r0, #4294967295
 801a22e:	b01d      	add	sp, #116	; 0x74
 801a230:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a234:	b002      	add	sp, #8
 801a236:	4770      	bx	lr
 801a238:	f44f 7302 	mov.w	r3, #520	; 0x208
 801a23c:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a240:	bf14      	ite	ne
 801a242:	f104 33ff 	addne.w	r3, r4, #4294967295
 801a246:	4623      	moveq	r3, r4
 801a248:	9304      	str	r3, [sp, #16]
 801a24a:	9307      	str	r3, [sp, #28]
 801a24c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a250:	9002      	str	r0, [sp, #8]
 801a252:	9006      	str	r0, [sp, #24]
 801a254:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a258:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a25a:	ab21      	add	r3, sp, #132	; 0x84
 801a25c:	a902      	add	r1, sp, #8
 801a25e:	4628      	mov	r0, r5
 801a260:	9301      	str	r3, [sp, #4]
 801a262:	f000 fb3f 	bl	801a8e4 <_svfiprintf_r>
 801a266:	1c43      	adds	r3, r0, #1
 801a268:	bfbc      	itt	lt
 801a26a:	238b      	movlt	r3, #139	; 0x8b
 801a26c:	602b      	strlt	r3, [r5, #0]
 801a26e:	2c00      	cmp	r4, #0
 801a270:	d0dd      	beq.n	801a22e <sniprintf+0x16>
 801a272:	9b02      	ldr	r3, [sp, #8]
 801a274:	2200      	movs	r2, #0
 801a276:	701a      	strb	r2, [r3, #0]
 801a278:	e7d9      	b.n	801a22e <sniprintf+0x16>
 801a27a:	bf00      	nop
 801a27c:	200000e8 	.word	0x200000e8

0801a280 <__sread>:
 801a280:	b510      	push	{r4, lr}
 801a282:	460c      	mov	r4, r1
 801a284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a288:	f000 f9dc 	bl	801a644 <_read_r>
 801a28c:	2800      	cmp	r0, #0
 801a28e:	bfab      	itete	ge
 801a290:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a292:	89a3      	ldrhlt	r3, [r4, #12]
 801a294:	181b      	addge	r3, r3, r0
 801a296:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a29a:	bfac      	ite	ge
 801a29c:	6563      	strge	r3, [r4, #84]	; 0x54
 801a29e:	81a3      	strhlt	r3, [r4, #12]
 801a2a0:	bd10      	pop	{r4, pc}

0801a2a2 <__swrite>:
 801a2a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a2a6:	461f      	mov	r7, r3
 801a2a8:	898b      	ldrh	r3, [r1, #12]
 801a2aa:	05db      	lsls	r3, r3, #23
 801a2ac:	4605      	mov	r5, r0
 801a2ae:	460c      	mov	r4, r1
 801a2b0:	4616      	mov	r6, r2
 801a2b2:	d505      	bpl.n	801a2c0 <__swrite+0x1e>
 801a2b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a2b8:	2302      	movs	r3, #2
 801a2ba:	2200      	movs	r2, #0
 801a2bc:	f000 f9b0 	bl	801a620 <_lseek_r>
 801a2c0:	89a3      	ldrh	r3, [r4, #12]
 801a2c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a2c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a2ca:	81a3      	strh	r3, [r4, #12]
 801a2cc:	4632      	mov	r2, r6
 801a2ce:	463b      	mov	r3, r7
 801a2d0:	4628      	mov	r0, r5
 801a2d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a2d6:	f000 b9d7 	b.w	801a688 <_write_r>

0801a2da <__sseek>:
 801a2da:	b510      	push	{r4, lr}
 801a2dc:	460c      	mov	r4, r1
 801a2de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a2e2:	f000 f99d 	bl	801a620 <_lseek_r>
 801a2e6:	1c43      	adds	r3, r0, #1
 801a2e8:	89a3      	ldrh	r3, [r4, #12]
 801a2ea:	bf15      	itete	ne
 801a2ec:	6560      	strne	r0, [r4, #84]	; 0x54
 801a2ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a2f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a2f6:	81a3      	strheq	r3, [r4, #12]
 801a2f8:	bf18      	it	ne
 801a2fa:	81a3      	strhne	r3, [r4, #12]
 801a2fc:	bd10      	pop	{r4, pc}

0801a2fe <__sclose>:
 801a2fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a302:	f000 b927 	b.w	801a554 <_close_r>

0801a306 <_vsniprintf_r>:
 801a306:	b530      	push	{r4, r5, lr}
 801a308:	4614      	mov	r4, r2
 801a30a:	2c00      	cmp	r4, #0
 801a30c:	b09b      	sub	sp, #108	; 0x6c
 801a30e:	4605      	mov	r5, r0
 801a310:	461a      	mov	r2, r3
 801a312:	da05      	bge.n	801a320 <_vsniprintf_r+0x1a>
 801a314:	238b      	movs	r3, #139	; 0x8b
 801a316:	6003      	str	r3, [r0, #0]
 801a318:	f04f 30ff 	mov.w	r0, #4294967295
 801a31c:	b01b      	add	sp, #108	; 0x6c
 801a31e:	bd30      	pop	{r4, r5, pc}
 801a320:	f44f 7302 	mov.w	r3, #520	; 0x208
 801a324:	f8ad 300c 	strh.w	r3, [sp, #12]
 801a328:	bf14      	ite	ne
 801a32a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801a32e:	4623      	moveq	r3, r4
 801a330:	9302      	str	r3, [sp, #8]
 801a332:	9305      	str	r3, [sp, #20]
 801a334:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a338:	9100      	str	r1, [sp, #0]
 801a33a:	9104      	str	r1, [sp, #16]
 801a33c:	f8ad 300e 	strh.w	r3, [sp, #14]
 801a340:	4669      	mov	r1, sp
 801a342:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801a344:	f000 face 	bl	801a8e4 <_svfiprintf_r>
 801a348:	1c43      	adds	r3, r0, #1
 801a34a:	bfbc      	itt	lt
 801a34c:	238b      	movlt	r3, #139	; 0x8b
 801a34e:	602b      	strlt	r3, [r5, #0]
 801a350:	2c00      	cmp	r4, #0
 801a352:	d0e3      	beq.n	801a31c <_vsniprintf_r+0x16>
 801a354:	9b00      	ldr	r3, [sp, #0]
 801a356:	2200      	movs	r2, #0
 801a358:	701a      	strb	r2, [r3, #0]
 801a35a:	e7df      	b.n	801a31c <_vsniprintf_r+0x16>

0801a35c <vsniprintf>:
 801a35c:	b507      	push	{r0, r1, r2, lr}
 801a35e:	9300      	str	r3, [sp, #0]
 801a360:	4613      	mov	r3, r2
 801a362:	460a      	mov	r2, r1
 801a364:	4601      	mov	r1, r0
 801a366:	4803      	ldr	r0, [pc, #12]	; (801a374 <vsniprintf+0x18>)
 801a368:	6800      	ldr	r0, [r0, #0]
 801a36a:	f7ff ffcc 	bl	801a306 <_vsniprintf_r>
 801a36e:	b003      	add	sp, #12
 801a370:	f85d fb04 	ldr.w	pc, [sp], #4
 801a374:	200000e8 	.word	0x200000e8

0801a378 <__swbuf_r>:
 801a378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a37a:	460e      	mov	r6, r1
 801a37c:	4614      	mov	r4, r2
 801a37e:	4605      	mov	r5, r0
 801a380:	b118      	cbz	r0, 801a38a <__swbuf_r+0x12>
 801a382:	6a03      	ldr	r3, [r0, #32]
 801a384:	b90b      	cbnz	r3, 801a38a <__swbuf_r+0x12>
 801a386:	f7ff fe51 	bl	801a02c <__sinit>
 801a38a:	69a3      	ldr	r3, [r4, #24]
 801a38c:	60a3      	str	r3, [r4, #8]
 801a38e:	89a3      	ldrh	r3, [r4, #12]
 801a390:	071a      	lsls	r2, r3, #28
 801a392:	d525      	bpl.n	801a3e0 <__swbuf_r+0x68>
 801a394:	6923      	ldr	r3, [r4, #16]
 801a396:	b31b      	cbz	r3, 801a3e0 <__swbuf_r+0x68>
 801a398:	6823      	ldr	r3, [r4, #0]
 801a39a:	6922      	ldr	r2, [r4, #16]
 801a39c:	1a98      	subs	r0, r3, r2
 801a39e:	6963      	ldr	r3, [r4, #20]
 801a3a0:	b2f6      	uxtb	r6, r6
 801a3a2:	4283      	cmp	r3, r0
 801a3a4:	4637      	mov	r7, r6
 801a3a6:	dc04      	bgt.n	801a3b2 <__swbuf_r+0x3a>
 801a3a8:	4621      	mov	r1, r4
 801a3aa:	4628      	mov	r0, r5
 801a3ac:	f000 fef2 	bl	801b194 <_fflush_r>
 801a3b0:	b9e0      	cbnz	r0, 801a3ec <__swbuf_r+0x74>
 801a3b2:	68a3      	ldr	r3, [r4, #8]
 801a3b4:	3b01      	subs	r3, #1
 801a3b6:	60a3      	str	r3, [r4, #8]
 801a3b8:	6823      	ldr	r3, [r4, #0]
 801a3ba:	1c5a      	adds	r2, r3, #1
 801a3bc:	6022      	str	r2, [r4, #0]
 801a3be:	701e      	strb	r6, [r3, #0]
 801a3c0:	6962      	ldr	r2, [r4, #20]
 801a3c2:	1c43      	adds	r3, r0, #1
 801a3c4:	429a      	cmp	r2, r3
 801a3c6:	d004      	beq.n	801a3d2 <__swbuf_r+0x5a>
 801a3c8:	89a3      	ldrh	r3, [r4, #12]
 801a3ca:	07db      	lsls	r3, r3, #31
 801a3cc:	d506      	bpl.n	801a3dc <__swbuf_r+0x64>
 801a3ce:	2e0a      	cmp	r6, #10
 801a3d0:	d104      	bne.n	801a3dc <__swbuf_r+0x64>
 801a3d2:	4621      	mov	r1, r4
 801a3d4:	4628      	mov	r0, r5
 801a3d6:	f000 fedd 	bl	801b194 <_fflush_r>
 801a3da:	b938      	cbnz	r0, 801a3ec <__swbuf_r+0x74>
 801a3dc:	4638      	mov	r0, r7
 801a3de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a3e0:	4621      	mov	r1, r4
 801a3e2:	4628      	mov	r0, r5
 801a3e4:	f000 f806 	bl	801a3f4 <__swsetup_r>
 801a3e8:	2800      	cmp	r0, #0
 801a3ea:	d0d5      	beq.n	801a398 <__swbuf_r+0x20>
 801a3ec:	f04f 37ff 	mov.w	r7, #4294967295
 801a3f0:	e7f4      	b.n	801a3dc <__swbuf_r+0x64>
	...

0801a3f4 <__swsetup_r>:
 801a3f4:	b538      	push	{r3, r4, r5, lr}
 801a3f6:	4b2a      	ldr	r3, [pc, #168]	; (801a4a0 <__swsetup_r+0xac>)
 801a3f8:	4605      	mov	r5, r0
 801a3fa:	6818      	ldr	r0, [r3, #0]
 801a3fc:	460c      	mov	r4, r1
 801a3fe:	b118      	cbz	r0, 801a408 <__swsetup_r+0x14>
 801a400:	6a03      	ldr	r3, [r0, #32]
 801a402:	b90b      	cbnz	r3, 801a408 <__swsetup_r+0x14>
 801a404:	f7ff fe12 	bl	801a02c <__sinit>
 801a408:	89a3      	ldrh	r3, [r4, #12]
 801a40a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a40e:	0718      	lsls	r0, r3, #28
 801a410:	d422      	bmi.n	801a458 <__swsetup_r+0x64>
 801a412:	06d9      	lsls	r1, r3, #27
 801a414:	d407      	bmi.n	801a426 <__swsetup_r+0x32>
 801a416:	2309      	movs	r3, #9
 801a418:	602b      	str	r3, [r5, #0]
 801a41a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a41e:	81a3      	strh	r3, [r4, #12]
 801a420:	f04f 30ff 	mov.w	r0, #4294967295
 801a424:	e034      	b.n	801a490 <__swsetup_r+0x9c>
 801a426:	0758      	lsls	r0, r3, #29
 801a428:	d512      	bpl.n	801a450 <__swsetup_r+0x5c>
 801a42a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a42c:	b141      	cbz	r1, 801a440 <__swsetup_r+0x4c>
 801a42e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a432:	4299      	cmp	r1, r3
 801a434:	d002      	beq.n	801a43c <__swsetup_r+0x48>
 801a436:	4628      	mov	r0, r5
 801a438:	f000 f9a6 	bl	801a788 <_free_r>
 801a43c:	2300      	movs	r3, #0
 801a43e:	6363      	str	r3, [r4, #52]	; 0x34
 801a440:	89a3      	ldrh	r3, [r4, #12]
 801a442:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a446:	81a3      	strh	r3, [r4, #12]
 801a448:	2300      	movs	r3, #0
 801a44a:	6063      	str	r3, [r4, #4]
 801a44c:	6923      	ldr	r3, [r4, #16]
 801a44e:	6023      	str	r3, [r4, #0]
 801a450:	89a3      	ldrh	r3, [r4, #12]
 801a452:	f043 0308 	orr.w	r3, r3, #8
 801a456:	81a3      	strh	r3, [r4, #12]
 801a458:	6923      	ldr	r3, [r4, #16]
 801a45a:	b94b      	cbnz	r3, 801a470 <__swsetup_r+0x7c>
 801a45c:	89a3      	ldrh	r3, [r4, #12]
 801a45e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a462:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a466:	d003      	beq.n	801a470 <__swsetup_r+0x7c>
 801a468:	4621      	mov	r1, r4
 801a46a:	4628      	mov	r0, r5
 801a46c:	f000 fef2 	bl	801b254 <__smakebuf_r>
 801a470:	89a0      	ldrh	r0, [r4, #12]
 801a472:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a476:	f010 0301 	ands.w	r3, r0, #1
 801a47a:	d00a      	beq.n	801a492 <__swsetup_r+0x9e>
 801a47c:	2300      	movs	r3, #0
 801a47e:	60a3      	str	r3, [r4, #8]
 801a480:	6963      	ldr	r3, [r4, #20]
 801a482:	425b      	negs	r3, r3
 801a484:	61a3      	str	r3, [r4, #24]
 801a486:	6923      	ldr	r3, [r4, #16]
 801a488:	b943      	cbnz	r3, 801a49c <__swsetup_r+0xa8>
 801a48a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a48e:	d1c4      	bne.n	801a41a <__swsetup_r+0x26>
 801a490:	bd38      	pop	{r3, r4, r5, pc}
 801a492:	0781      	lsls	r1, r0, #30
 801a494:	bf58      	it	pl
 801a496:	6963      	ldrpl	r3, [r4, #20]
 801a498:	60a3      	str	r3, [r4, #8]
 801a49a:	e7f4      	b.n	801a486 <__swsetup_r+0x92>
 801a49c:	2000      	movs	r0, #0
 801a49e:	e7f7      	b.n	801a490 <__swsetup_r+0x9c>
 801a4a0:	200000e8 	.word	0x200000e8

0801a4a4 <memmove>:
 801a4a4:	4288      	cmp	r0, r1
 801a4a6:	b510      	push	{r4, lr}
 801a4a8:	eb01 0402 	add.w	r4, r1, r2
 801a4ac:	d902      	bls.n	801a4b4 <memmove+0x10>
 801a4ae:	4284      	cmp	r4, r0
 801a4b0:	4623      	mov	r3, r4
 801a4b2:	d807      	bhi.n	801a4c4 <memmove+0x20>
 801a4b4:	1e43      	subs	r3, r0, #1
 801a4b6:	42a1      	cmp	r1, r4
 801a4b8:	d008      	beq.n	801a4cc <memmove+0x28>
 801a4ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a4be:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a4c2:	e7f8      	b.n	801a4b6 <memmove+0x12>
 801a4c4:	4402      	add	r2, r0
 801a4c6:	4601      	mov	r1, r0
 801a4c8:	428a      	cmp	r2, r1
 801a4ca:	d100      	bne.n	801a4ce <memmove+0x2a>
 801a4cc:	bd10      	pop	{r4, pc}
 801a4ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a4d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a4d6:	e7f7      	b.n	801a4c8 <memmove+0x24>

0801a4d8 <memset>:
 801a4d8:	4402      	add	r2, r0
 801a4da:	4603      	mov	r3, r0
 801a4dc:	4293      	cmp	r3, r2
 801a4de:	d100      	bne.n	801a4e2 <memset+0xa>
 801a4e0:	4770      	bx	lr
 801a4e2:	f803 1b01 	strb.w	r1, [r3], #1
 801a4e6:	e7f9      	b.n	801a4dc <memset+0x4>

0801a4e8 <strchr>:
 801a4e8:	b2c9      	uxtb	r1, r1
 801a4ea:	4603      	mov	r3, r0
 801a4ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a4f0:	b11a      	cbz	r2, 801a4fa <strchr+0x12>
 801a4f2:	428a      	cmp	r2, r1
 801a4f4:	d1f9      	bne.n	801a4ea <strchr+0x2>
 801a4f6:	4618      	mov	r0, r3
 801a4f8:	4770      	bx	lr
 801a4fa:	2900      	cmp	r1, #0
 801a4fc:	bf18      	it	ne
 801a4fe:	2300      	movne	r3, #0
 801a500:	e7f9      	b.n	801a4f6 <strchr+0xe>

0801a502 <strncmp>:
 801a502:	b510      	push	{r4, lr}
 801a504:	b16a      	cbz	r2, 801a522 <strncmp+0x20>
 801a506:	3901      	subs	r1, #1
 801a508:	1884      	adds	r4, r0, r2
 801a50a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a50e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801a512:	429a      	cmp	r2, r3
 801a514:	d103      	bne.n	801a51e <strncmp+0x1c>
 801a516:	42a0      	cmp	r0, r4
 801a518:	d001      	beq.n	801a51e <strncmp+0x1c>
 801a51a:	2a00      	cmp	r2, #0
 801a51c:	d1f5      	bne.n	801a50a <strncmp+0x8>
 801a51e:	1ad0      	subs	r0, r2, r3
 801a520:	bd10      	pop	{r4, pc}
 801a522:	4610      	mov	r0, r2
 801a524:	e7fc      	b.n	801a520 <strncmp+0x1e>

0801a526 <strstr>:
 801a526:	780a      	ldrb	r2, [r1, #0]
 801a528:	b570      	push	{r4, r5, r6, lr}
 801a52a:	b96a      	cbnz	r2, 801a548 <strstr+0x22>
 801a52c:	bd70      	pop	{r4, r5, r6, pc}
 801a52e:	429a      	cmp	r2, r3
 801a530:	d109      	bne.n	801a546 <strstr+0x20>
 801a532:	460c      	mov	r4, r1
 801a534:	4605      	mov	r5, r0
 801a536:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801a53a:	2b00      	cmp	r3, #0
 801a53c:	d0f6      	beq.n	801a52c <strstr+0x6>
 801a53e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801a542:	429e      	cmp	r6, r3
 801a544:	d0f7      	beq.n	801a536 <strstr+0x10>
 801a546:	3001      	adds	r0, #1
 801a548:	7803      	ldrb	r3, [r0, #0]
 801a54a:	2b00      	cmp	r3, #0
 801a54c:	d1ef      	bne.n	801a52e <strstr+0x8>
 801a54e:	4618      	mov	r0, r3
 801a550:	e7ec      	b.n	801a52c <strstr+0x6>
	...

0801a554 <_close_r>:
 801a554:	b538      	push	{r3, r4, r5, lr}
 801a556:	4d06      	ldr	r5, [pc, #24]	; (801a570 <_close_r+0x1c>)
 801a558:	2300      	movs	r3, #0
 801a55a:	4604      	mov	r4, r0
 801a55c:	4608      	mov	r0, r1
 801a55e:	602b      	str	r3, [r5, #0]
 801a560:	f7e9 fc5a 	bl	8003e18 <_close>
 801a564:	1c43      	adds	r3, r0, #1
 801a566:	d102      	bne.n	801a56e <_close_r+0x1a>
 801a568:	682b      	ldr	r3, [r5, #0]
 801a56a:	b103      	cbz	r3, 801a56e <_close_r+0x1a>
 801a56c:	6023      	str	r3, [r4, #0]
 801a56e:	bd38      	pop	{r3, r4, r5, pc}
 801a570:	20009ea4 	.word	0x20009ea4

0801a574 <_reclaim_reent>:
 801a574:	4b29      	ldr	r3, [pc, #164]	; (801a61c <_reclaim_reent+0xa8>)
 801a576:	681b      	ldr	r3, [r3, #0]
 801a578:	4283      	cmp	r3, r0
 801a57a:	b570      	push	{r4, r5, r6, lr}
 801a57c:	4604      	mov	r4, r0
 801a57e:	d04b      	beq.n	801a618 <_reclaim_reent+0xa4>
 801a580:	69c3      	ldr	r3, [r0, #28]
 801a582:	b143      	cbz	r3, 801a596 <_reclaim_reent+0x22>
 801a584:	68db      	ldr	r3, [r3, #12]
 801a586:	2b00      	cmp	r3, #0
 801a588:	d144      	bne.n	801a614 <_reclaim_reent+0xa0>
 801a58a:	69e3      	ldr	r3, [r4, #28]
 801a58c:	6819      	ldr	r1, [r3, #0]
 801a58e:	b111      	cbz	r1, 801a596 <_reclaim_reent+0x22>
 801a590:	4620      	mov	r0, r4
 801a592:	f000 f8f9 	bl	801a788 <_free_r>
 801a596:	6961      	ldr	r1, [r4, #20]
 801a598:	b111      	cbz	r1, 801a5a0 <_reclaim_reent+0x2c>
 801a59a:	4620      	mov	r0, r4
 801a59c:	f000 f8f4 	bl	801a788 <_free_r>
 801a5a0:	69e1      	ldr	r1, [r4, #28]
 801a5a2:	b111      	cbz	r1, 801a5aa <_reclaim_reent+0x36>
 801a5a4:	4620      	mov	r0, r4
 801a5a6:	f000 f8ef 	bl	801a788 <_free_r>
 801a5aa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801a5ac:	b111      	cbz	r1, 801a5b4 <_reclaim_reent+0x40>
 801a5ae:	4620      	mov	r0, r4
 801a5b0:	f000 f8ea 	bl	801a788 <_free_r>
 801a5b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a5b6:	b111      	cbz	r1, 801a5be <_reclaim_reent+0x4a>
 801a5b8:	4620      	mov	r0, r4
 801a5ba:	f000 f8e5 	bl	801a788 <_free_r>
 801a5be:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801a5c0:	b111      	cbz	r1, 801a5c8 <_reclaim_reent+0x54>
 801a5c2:	4620      	mov	r0, r4
 801a5c4:	f000 f8e0 	bl	801a788 <_free_r>
 801a5c8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801a5ca:	b111      	cbz	r1, 801a5d2 <_reclaim_reent+0x5e>
 801a5cc:	4620      	mov	r0, r4
 801a5ce:	f000 f8db 	bl	801a788 <_free_r>
 801a5d2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801a5d4:	b111      	cbz	r1, 801a5dc <_reclaim_reent+0x68>
 801a5d6:	4620      	mov	r0, r4
 801a5d8:	f000 f8d6 	bl	801a788 <_free_r>
 801a5dc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801a5de:	b111      	cbz	r1, 801a5e6 <_reclaim_reent+0x72>
 801a5e0:	4620      	mov	r0, r4
 801a5e2:	f000 f8d1 	bl	801a788 <_free_r>
 801a5e6:	6a23      	ldr	r3, [r4, #32]
 801a5e8:	b1b3      	cbz	r3, 801a618 <_reclaim_reent+0xa4>
 801a5ea:	4620      	mov	r0, r4
 801a5ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a5f0:	4718      	bx	r3
 801a5f2:	5949      	ldr	r1, [r1, r5]
 801a5f4:	b941      	cbnz	r1, 801a608 <_reclaim_reent+0x94>
 801a5f6:	3504      	adds	r5, #4
 801a5f8:	69e3      	ldr	r3, [r4, #28]
 801a5fa:	2d80      	cmp	r5, #128	; 0x80
 801a5fc:	68d9      	ldr	r1, [r3, #12]
 801a5fe:	d1f8      	bne.n	801a5f2 <_reclaim_reent+0x7e>
 801a600:	4620      	mov	r0, r4
 801a602:	f000 f8c1 	bl	801a788 <_free_r>
 801a606:	e7c0      	b.n	801a58a <_reclaim_reent+0x16>
 801a608:	680e      	ldr	r6, [r1, #0]
 801a60a:	4620      	mov	r0, r4
 801a60c:	f000 f8bc 	bl	801a788 <_free_r>
 801a610:	4631      	mov	r1, r6
 801a612:	e7ef      	b.n	801a5f4 <_reclaim_reent+0x80>
 801a614:	2500      	movs	r5, #0
 801a616:	e7ef      	b.n	801a5f8 <_reclaim_reent+0x84>
 801a618:	bd70      	pop	{r4, r5, r6, pc}
 801a61a:	bf00      	nop
 801a61c:	200000e8 	.word	0x200000e8

0801a620 <_lseek_r>:
 801a620:	b538      	push	{r3, r4, r5, lr}
 801a622:	4d07      	ldr	r5, [pc, #28]	; (801a640 <_lseek_r+0x20>)
 801a624:	4604      	mov	r4, r0
 801a626:	4608      	mov	r0, r1
 801a628:	4611      	mov	r1, r2
 801a62a:	2200      	movs	r2, #0
 801a62c:	602a      	str	r2, [r5, #0]
 801a62e:	461a      	mov	r2, r3
 801a630:	f7e9 fc09 	bl	8003e46 <_lseek>
 801a634:	1c43      	adds	r3, r0, #1
 801a636:	d102      	bne.n	801a63e <_lseek_r+0x1e>
 801a638:	682b      	ldr	r3, [r5, #0]
 801a63a:	b103      	cbz	r3, 801a63e <_lseek_r+0x1e>
 801a63c:	6023      	str	r3, [r4, #0]
 801a63e:	bd38      	pop	{r3, r4, r5, pc}
 801a640:	20009ea4 	.word	0x20009ea4

0801a644 <_read_r>:
 801a644:	b538      	push	{r3, r4, r5, lr}
 801a646:	4d07      	ldr	r5, [pc, #28]	; (801a664 <_read_r+0x20>)
 801a648:	4604      	mov	r4, r0
 801a64a:	4608      	mov	r0, r1
 801a64c:	4611      	mov	r1, r2
 801a64e:	2200      	movs	r2, #0
 801a650:	602a      	str	r2, [r5, #0]
 801a652:	461a      	mov	r2, r3
 801a654:	f7e9 fc08 	bl	8003e68 <_read>
 801a658:	1c43      	adds	r3, r0, #1
 801a65a:	d102      	bne.n	801a662 <_read_r+0x1e>
 801a65c:	682b      	ldr	r3, [r5, #0]
 801a65e:	b103      	cbz	r3, 801a662 <_read_r+0x1e>
 801a660:	6023      	str	r3, [r4, #0]
 801a662:	bd38      	pop	{r3, r4, r5, pc}
 801a664:	20009ea4 	.word	0x20009ea4

0801a668 <_sbrk_r>:
 801a668:	b538      	push	{r3, r4, r5, lr}
 801a66a:	4d06      	ldr	r5, [pc, #24]	; (801a684 <_sbrk_r+0x1c>)
 801a66c:	2300      	movs	r3, #0
 801a66e:	4604      	mov	r4, r0
 801a670:	4608      	mov	r0, r1
 801a672:	602b      	str	r3, [r5, #0]
 801a674:	f7ea f888 	bl	8004788 <_sbrk>
 801a678:	1c43      	adds	r3, r0, #1
 801a67a:	d102      	bne.n	801a682 <_sbrk_r+0x1a>
 801a67c:	682b      	ldr	r3, [r5, #0]
 801a67e:	b103      	cbz	r3, 801a682 <_sbrk_r+0x1a>
 801a680:	6023      	str	r3, [r4, #0]
 801a682:	bd38      	pop	{r3, r4, r5, pc}
 801a684:	20009ea4 	.word	0x20009ea4

0801a688 <_write_r>:
 801a688:	b538      	push	{r3, r4, r5, lr}
 801a68a:	4d07      	ldr	r5, [pc, #28]	; (801a6a8 <_write_r+0x20>)
 801a68c:	4604      	mov	r4, r0
 801a68e:	4608      	mov	r0, r1
 801a690:	4611      	mov	r1, r2
 801a692:	2200      	movs	r2, #0
 801a694:	602a      	str	r2, [r5, #0]
 801a696:	461a      	mov	r2, r3
 801a698:	f7e9 fb92 	bl	8003dc0 <_write>
 801a69c:	1c43      	adds	r3, r0, #1
 801a69e:	d102      	bne.n	801a6a6 <_write_r+0x1e>
 801a6a0:	682b      	ldr	r3, [r5, #0]
 801a6a2:	b103      	cbz	r3, 801a6a6 <_write_r+0x1e>
 801a6a4:	6023      	str	r3, [r4, #0]
 801a6a6:	bd38      	pop	{r3, r4, r5, pc}
 801a6a8:	20009ea4 	.word	0x20009ea4

0801a6ac <__errno>:
 801a6ac:	4b01      	ldr	r3, [pc, #4]	; (801a6b4 <__errno+0x8>)
 801a6ae:	6818      	ldr	r0, [r3, #0]
 801a6b0:	4770      	bx	lr
 801a6b2:	bf00      	nop
 801a6b4:	200000e8 	.word	0x200000e8

0801a6b8 <__libc_init_array>:
 801a6b8:	b570      	push	{r4, r5, r6, lr}
 801a6ba:	4d0d      	ldr	r5, [pc, #52]	; (801a6f0 <__libc_init_array+0x38>)
 801a6bc:	4c0d      	ldr	r4, [pc, #52]	; (801a6f4 <__libc_init_array+0x3c>)
 801a6be:	1b64      	subs	r4, r4, r5
 801a6c0:	10a4      	asrs	r4, r4, #2
 801a6c2:	2600      	movs	r6, #0
 801a6c4:	42a6      	cmp	r6, r4
 801a6c6:	d109      	bne.n	801a6dc <__libc_init_array+0x24>
 801a6c8:	4d0b      	ldr	r5, [pc, #44]	; (801a6f8 <__libc_init_array+0x40>)
 801a6ca:	4c0c      	ldr	r4, [pc, #48]	; (801a6fc <__libc_init_array+0x44>)
 801a6cc:	f000 fe6e 	bl	801b3ac <_init>
 801a6d0:	1b64      	subs	r4, r4, r5
 801a6d2:	10a4      	asrs	r4, r4, #2
 801a6d4:	2600      	movs	r6, #0
 801a6d6:	42a6      	cmp	r6, r4
 801a6d8:	d105      	bne.n	801a6e6 <__libc_init_array+0x2e>
 801a6da:	bd70      	pop	{r4, r5, r6, pc}
 801a6dc:	f855 3b04 	ldr.w	r3, [r5], #4
 801a6e0:	4798      	blx	r3
 801a6e2:	3601      	adds	r6, #1
 801a6e4:	e7ee      	b.n	801a6c4 <__libc_init_array+0xc>
 801a6e6:	f855 3b04 	ldr.w	r3, [r5], #4
 801a6ea:	4798      	blx	r3
 801a6ec:	3601      	adds	r6, #1
 801a6ee:	e7f2      	b.n	801a6d6 <__libc_init_array+0x1e>
 801a6f0:	0801c338 	.word	0x0801c338
 801a6f4:	0801c338 	.word	0x0801c338
 801a6f8:	0801c338 	.word	0x0801c338
 801a6fc:	0801c33c 	.word	0x0801c33c

0801a700 <__retarget_lock_init_recursive>:
 801a700:	4770      	bx	lr

0801a702 <__retarget_lock_acquire_recursive>:
 801a702:	4770      	bx	lr

0801a704 <__retarget_lock_release_recursive>:
 801a704:	4770      	bx	lr

0801a706 <strcpy>:
 801a706:	4603      	mov	r3, r0
 801a708:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a70c:	f803 2b01 	strb.w	r2, [r3], #1
 801a710:	2a00      	cmp	r2, #0
 801a712:	d1f9      	bne.n	801a708 <strcpy+0x2>
 801a714:	4770      	bx	lr

0801a716 <memcpy>:
 801a716:	440a      	add	r2, r1
 801a718:	4291      	cmp	r1, r2
 801a71a:	f100 33ff 	add.w	r3, r0, #4294967295
 801a71e:	d100      	bne.n	801a722 <memcpy+0xc>
 801a720:	4770      	bx	lr
 801a722:	b510      	push	{r4, lr}
 801a724:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a728:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a72c:	4291      	cmp	r1, r2
 801a72e:	d1f9      	bne.n	801a724 <memcpy+0xe>
 801a730:	bd10      	pop	{r4, pc}
	...

0801a734 <__assert_func>:
 801a734:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a736:	4614      	mov	r4, r2
 801a738:	461a      	mov	r2, r3
 801a73a:	4b09      	ldr	r3, [pc, #36]	; (801a760 <__assert_func+0x2c>)
 801a73c:	681b      	ldr	r3, [r3, #0]
 801a73e:	4605      	mov	r5, r0
 801a740:	68d8      	ldr	r0, [r3, #12]
 801a742:	b14c      	cbz	r4, 801a758 <__assert_func+0x24>
 801a744:	4b07      	ldr	r3, [pc, #28]	; (801a764 <__assert_func+0x30>)
 801a746:	9100      	str	r1, [sp, #0]
 801a748:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a74c:	4906      	ldr	r1, [pc, #24]	; (801a768 <__assert_func+0x34>)
 801a74e:	462b      	mov	r3, r5
 801a750:	f000 fd48 	bl	801b1e4 <fiprintf>
 801a754:	f000 fddc 	bl	801b310 <abort>
 801a758:	4b04      	ldr	r3, [pc, #16]	; (801a76c <__assert_func+0x38>)
 801a75a:	461c      	mov	r4, r3
 801a75c:	e7f3      	b.n	801a746 <__assert_func+0x12>
 801a75e:	bf00      	nop
 801a760:	200000e8 	.word	0x200000e8
 801a764:	0801c2c0 	.word	0x0801c2c0
 801a768:	0801c2cd 	.word	0x0801c2cd
 801a76c:	0801c2fb 	.word	0x0801c2fb

0801a770 <__env_lock>:
 801a770:	4801      	ldr	r0, [pc, #4]	; (801a778 <__env_lock+0x8>)
 801a772:	f7ff bfc6 	b.w	801a702 <__retarget_lock_acquire_recursive>
 801a776:	bf00      	nop
 801a778:	20009ea8 	.word	0x20009ea8

0801a77c <__env_unlock>:
 801a77c:	4801      	ldr	r0, [pc, #4]	; (801a784 <__env_unlock+0x8>)
 801a77e:	f7ff bfc1 	b.w	801a704 <__retarget_lock_release_recursive>
 801a782:	bf00      	nop
 801a784:	20009ea8 	.word	0x20009ea8

0801a788 <_free_r>:
 801a788:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a78a:	2900      	cmp	r1, #0
 801a78c:	d044      	beq.n	801a818 <_free_r+0x90>
 801a78e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a792:	9001      	str	r0, [sp, #4]
 801a794:	2b00      	cmp	r3, #0
 801a796:	f1a1 0404 	sub.w	r4, r1, #4
 801a79a:	bfb8      	it	lt
 801a79c:	18e4      	addlt	r4, r4, r3
 801a79e:	f7ff fa8d 	bl	8019cbc <__malloc_lock>
 801a7a2:	4a1e      	ldr	r2, [pc, #120]	; (801a81c <_free_r+0x94>)
 801a7a4:	9801      	ldr	r0, [sp, #4]
 801a7a6:	6813      	ldr	r3, [r2, #0]
 801a7a8:	b933      	cbnz	r3, 801a7b8 <_free_r+0x30>
 801a7aa:	6063      	str	r3, [r4, #4]
 801a7ac:	6014      	str	r4, [r2, #0]
 801a7ae:	b003      	add	sp, #12
 801a7b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a7b4:	f7ff ba88 	b.w	8019cc8 <__malloc_unlock>
 801a7b8:	42a3      	cmp	r3, r4
 801a7ba:	d908      	bls.n	801a7ce <_free_r+0x46>
 801a7bc:	6825      	ldr	r5, [r4, #0]
 801a7be:	1961      	adds	r1, r4, r5
 801a7c0:	428b      	cmp	r3, r1
 801a7c2:	bf01      	itttt	eq
 801a7c4:	6819      	ldreq	r1, [r3, #0]
 801a7c6:	685b      	ldreq	r3, [r3, #4]
 801a7c8:	1949      	addeq	r1, r1, r5
 801a7ca:	6021      	streq	r1, [r4, #0]
 801a7cc:	e7ed      	b.n	801a7aa <_free_r+0x22>
 801a7ce:	461a      	mov	r2, r3
 801a7d0:	685b      	ldr	r3, [r3, #4]
 801a7d2:	b10b      	cbz	r3, 801a7d8 <_free_r+0x50>
 801a7d4:	42a3      	cmp	r3, r4
 801a7d6:	d9fa      	bls.n	801a7ce <_free_r+0x46>
 801a7d8:	6811      	ldr	r1, [r2, #0]
 801a7da:	1855      	adds	r5, r2, r1
 801a7dc:	42a5      	cmp	r5, r4
 801a7de:	d10b      	bne.n	801a7f8 <_free_r+0x70>
 801a7e0:	6824      	ldr	r4, [r4, #0]
 801a7e2:	4421      	add	r1, r4
 801a7e4:	1854      	adds	r4, r2, r1
 801a7e6:	42a3      	cmp	r3, r4
 801a7e8:	6011      	str	r1, [r2, #0]
 801a7ea:	d1e0      	bne.n	801a7ae <_free_r+0x26>
 801a7ec:	681c      	ldr	r4, [r3, #0]
 801a7ee:	685b      	ldr	r3, [r3, #4]
 801a7f0:	6053      	str	r3, [r2, #4]
 801a7f2:	440c      	add	r4, r1
 801a7f4:	6014      	str	r4, [r2, #0]
 801a7f6:	e7da      	b.n	801a7ae <_free_r+0x26>
 801a7f8:	d902      	bls.n	801a800 <_free_r+0x78>
 801a7fa:	230c      	movs	r3, #12
 801a7fc:	6003      	str	r3, [r0, #0]
 801a7fe:	e7d6      	b.n	801a7ae <_free_r+0x26>
 801a800:	6825      	ldr	r5, [r4, #0]
 801a802:	1961      	adds	r1, r4, r5
 801a804:	428b      	cmp	r3, r1
 801a806:	bf04      	itt	eq
 801a808:	6819      	ldreq	r1, [r3, #0]
 801a80a:	685b      	ldreq	r3, [r3, #4]
 801a80c:	6063      	str	r3, [r4, #4]
 801a80e:	bf04      	itt	eq
 801a810:	1949      	addeq	r1, r1, r5
 801a812:	6021      	streq	r1, [r4, #0]
 801a814:	6054      	str	r4, [r2, #4]
 801a816:	e7ca      	b.n	801a7ae <_free_r+0x26>
 801a818:	b003      	add	sp, #12
 801a81a:	bd30      	pop	{r4, r5, pc}
 801a81c:	20009d60 	.word	0x20009d60

0801a820 <_malloc_usable_size_r>:
 801a820:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a824:	1f18      	subs	r0, r3, #4
 801a826:	2b00      	cmp	r3, #0
 801a828:	bfbc      	itt	lt
 801a82a:	580b      	ldrlt	r3, [r1, r0]
 801a82c:	18c0      	addlt	r0, r0, r3
 801a82e:	4770      	bx	lr

0801a830 <__ssputs_r>:
 801a830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a834:	688e      	ldr	r6, [r1, #8]
 801a836:	461f      	mov	r7, r3
 801a838:	42be      	cmp	r6, r7
 801a83a:	680b      	ldr	r3, [r1, #0]
 801a83c:	4682      	mov	sl, r0
 801a83e:	460c      	mov	r4, r1
 801a840:	4690      	mov	r8, r2
 801a842:	d82c      	bhi.n	801a89e <__ssputs_r+0x6e>
 801a844:	898a      	ldrh	r2, [r1, #12]
 801a846:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a84a:	d026      	beq.n	801a89a <__ssputs_r+0x6a>
 801a84c:	6965      	ldr	r5, [r4, #20]
 801a84e:	6909      	ldr	r1, [r1, #16]
 801a850:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a854:	eba3 0901 	sub.w	r9, r3, r1
 801a858:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a85c:	1c7b      	adds	r3, r7, #1
 801a85e:	444b      	add	r3, r9
 801a860:	106d      	asrs	r5, r5, #1
 801a862:	429d      	cmp	r5, r3
 801a864:	bf38      	it	cc
 801a866:	461d      	movcc	r5, r3
 801a868:	0553      	lsls	r3, r2, #21
 801a86a:	d527      	bpl.n	801a8bc <__ssputs_r+0x8c>
 801a86c:	4629      	mov	r1, r5
 801a86e:	f7ff f9a5 	bl	8019bbc <_malloc_r>
 801a872:	4606      	mov	r6, r0
 801a874:	b360      	cbz	r0, 801a8d0 <__ssputs_r+0xa0>
 801a876:	6921      	ldr	r1, [r4, #16]
 801a878:	464a      	mov	r2, r9
 801a87a:	f7ff ff4c 	bl	801a716 <memcpy>
 801a87e:	89a3      	ldrh	r3, [r4, #12]
 801a880:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a888:	81a3      	strh	r3, [r4, #12]
 801a88a:	6126      	str	r6, [r4, #16]
 801a88c:	6165      	str	r5, [r4, #20]
 801a88e:	444e      	add	r6, r9
 801a890:	eba5 0509 	sub.w	r5, r5, r9
 801a894:	6026      	str	r6, [r4, #0]
 801a896:	60a5      	str	r5, [r4, #8]
 801a898:	463e      	mov	r6, r7
 801a89a:	42be      	cmp	r6, r7
 801a89c:	d900      	bls.n	801a8a0 <__ssputs_r+0x70>
 801a89e:	463e      	mov	r6, r7
 801a8a0:	6820      	ldr	r0, [r4, #0]
 801a8a2:	4632      	mov	r2, r6
 801a8a4:	4641      	mov	r1, r8
 801a8a6:	f7ff fdfd 	bl	801a4a4 <memmove>
 801a8aa:	68a3      	ldr	r3, [r4, #8]
 801a8ac:	1b9b      	subs	r3, r3, r6
 801a8ae:	60a3      	str	r3, [r4, #8]
 801a8b0:	6823      	ldr	r3, [r4, #0]
 801a8b2:	4433      	add	r3, r6
 801a8b4:	6023      	str	r3, [r4, #0]
 801a8b6:	2000      	movs	r0, #0
 801a8b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a8bc:	462a      	mov	r2, r5
 801a8be:	f7ff fa7d 	bl	8019dbc <_realloc_r>
 801a8c2:	4606      	mov	r6, r0
 801a8c4:	2800      	cmp	r0, #0
 801a8c6:	d1e0      	bne.n	801a88a <__ssputs_r+0x5a>
 801a8c8:	6921      	ldr	r1, [r4, #16]
 801a8ca:	4650      	mov	r0, sl
 801a8cc:	f7ff ff5c 	bl	801a788 <_free_r>
 801a8d0:	230c      	movs	r3, #12
 801a8d2:	f8ca 3000 	str.w	r3, [sl]
 801a8d6:	89a3      	ldrh	r3, [r4, #12]
 801a8d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a8dc:	81a3      	strh	r3, [r4, #12]
 801a8de:	f04f 30ff 	mov.w	r0, #4294967295
 801a8e2:	e7e9      	b.n	801a8b8 <__ssputs_r+0x88>

0801a8e4 <_svfiprintf_r>:
 801a8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8e8:	4698      	mov	r8, r3
 801a8ea:	898b      	ldrh	r3, [r1, #12]
 801a8ec:	061b      	lsls	r3, r3, #24
 801a8ee:	b09d      	sub	sp, #116	; 0x74
 801a8f0:	4607      	mov	r7, r0
 801a8f2:	460d      	mov	r5, r1
 801a8f4:	4614      	mov	r4, r2
 801a8f6:	d50e      	bpl.n	801a916 <_svfiprintf_r+0x32>
 801a8f8:	690b      	ldr	r3, [r1, #16]
 801a8fa:	b963      	cbnz	r3, 801a916 <_svfiprintf_r+0x32>
 801a8fc:	2140      	movs	r1, #64	; 0x40
 801a8fe:	f7ff f95d 	bl	8019bbc <_malloc_r>
 801a902:	6028      	str	r0, [r5, #0]
 801a904:	6128      	str	r0, [r5, #16]
 801a906:	b920      	cbnz	r0, 801a912 <_svfiprintf_r+0x2e>
 801a908:	230c      	movs	r3, #12
 801a90a:	603b      	str	r3, [r7, #0]
 801a90c:	f04f 30ff 	mov.w	r0, #4294967295
 801a910:	e0d0      	b.n	801aab4 <_svfiprintf_r+0x1d0>
 801a912:	2340      	movs	r3, #64	; 0x40
 801a914:	616b      	str	r3, [r5, #20]
 801a916:	2300      	movs	r3, #0
 801a918:	9309      	str	r3, [sp, #36]	; 0x24
 801a91a:	2320      	movs	r3, #32
 801a91c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a920:	f8cd 800c 	str.w	r8, [sp, #12]
 801a924:	2330      	movs	r3, #48	; 0x30
 801a926:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801aacc <_svfiprintf_r+0x1e8>
 801a92a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a92e:	f04f 0901 	mov.w	r9, #1
 801a932:	4623      	mov	r3, r4
 801a934:	469a      	mov	sl, r3
 801a936:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a93a:	b10a      	cbz	r2, 801a940 <_svfiprintf_r+0x5c>
 801a93c:	2a25      	cmp	r2, #37	; 0x25
 801a93e:	d1f9      	bne.n	801a934 <_svfiprintf_r+0x50>
 801a940:	ebba 0b04 	subs.w	fp, sl, r4
 801a944:	d00b      	beq.n	801a95e <_svfiprintf_r+0x7a>
 801a946:	465b      	mov	r3, fp
 801a948:	4622      	mov	r2, r4
 801a94a:	4629      	mov	r1, r5
 801a94c:	4638      	mov	r0, r7
 801a94e:	f7ff ff6f 	bl	801a830 <__ssputs_r>
 801a952:	3001      	adds	r0, #1
 801a954:	f000 80a9 	beq.w	801aaaa <_svfiprintf_r+0x1c6>
 801a958:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a95a:	445a      	add	r2, fp
 801a95c:	9209      	str	r2, [sp, #36]	; 0x24
 801a95e:	f89a 3000 	ldrb.w	r3, [sl]
 801a962:	2b00      	cmp	r3, #0
 801a964:	f000 80a1 	beq.w	801aaaa <_svfiprintf_r+0x1c6>
 801a968:	2300      	movs	r3, #0
 801a96a:	f04f 32ff 	mov.w	r2, #4294967295
 801a96e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a972:	f10a 0a01 	add.w	sl, sl, #1
 801a976:	9304      	str	r3, [sp, #16]
 801a978:	9307      	str	r3, [sp, #28]
 801a97a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a97e:	931a      	str	r3, [sp, #104]	; 0x68
 801a980:	4654      	mov	r4, sl
 801a982:	2205      	movs	r2, #5
 801a984:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a988:	4850      	ldr	r0, [pc, #320]	; (801aacc <_svfiprintf_r+0x1e8>)
 801a98a:	f7e5 fc41 	bl	8000210 <memchr>
 801a98e:	9a04      	ldr	r2, [sp, #16]
 801a990:	b9d8      	cbnz	r0, 801a9ca <_svfiprintf_r+0xe6>
 801a992:	06d0      	lsls	r0, r2, #27
 801a994:	bf44      	itt	mi
 801a996:	2320      	movmi	r3, #32
 801a998:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a99c:	0711      	lsls	r1, r2, #28
 801a99e:	bf44      	itt	mi
 801a9a0:	232b      	movmi	r3, #43	; 0x2b
 801a9a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a9a6:	f89a 3000 	ldrb.w	r3, [sl]
 801a9aa:	2b2a      	cmp	r3, #42	; 0x2a
 801a9ac:	d015      	beq.n	801a9da <_svfiprintf_r+0xf6>
 801a9ae:	9a07      	ldr	r2, [sp, #28]
 801a9b0:	4654      	mov	r4, sl
 801a9b2:	2000      	movs	r0, #0
 801a9b4:	f04f 0c0a 	mov.w	ip, #10
 801a9b8:	4621      	mov	r1, r4
 801a9ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a9be:	3b30      	subs	r3, #48	; 0x30
 801a9c0:	2b09      	cmp	r3, #9
 801a9c2:	d94d      	bls.n	801aa60 <_svfiprintf_r+0x17c>
 801a9c4:	b1b0      	cbz	r0, 801a9f4 <_svfiprintf_r+0x110>
 801a9c6:	9207      	str	r2, [sp, #28]
 801a9c8:	e014      	b.n	801a9f4 <_svfiprintf_r+0x110>
 801a9ca:	eba0 0308 	sub.w	r3, r0, r8
 801a9ce:	fa09 f303 	lsl.w	r3, r9, r3
 801a9d2:	4313      	orrs	r3, r2
 801a9d4:	9304      	str	r3, [sp, #16]
 801a9d6:	46a2      	mov	sl, r4
 801a9d8:	e7d2      	b.n	801a980 <_svfiprintf_r+0x9c>
 801a9da:	9b03      	ldr	r3, [sp, #12]
 801a9dc:	1d19      	adds	r1, r3, #4
 801a9de:	681b      	ldr	r3, [r3, #0]
 801a9e0:	9103      	str	r1, [sp, #12]
 801a9e2:	2b00      	cmp	r3, #0
 801a9e4:	bfbb      	ittet	lt
 801a9e6:	425b      	neglt	r3, r3
 801a9e8:	f042 0202 	orrlt.w	r2, r2, #2
 801a9ec:	9307      	strge	r3, [sp, #28]
 801a9ee:	9307      	strlt	r3, [sp, #28]
 801a9f0:	bfb8      	it	lt
 801a9f2:	9204      	strlt	r2, [sp, #16]
 801a9f4:	7823      	ldrb	r3, [r4, #0]
 801a9f6:	2b2e      	cmp	r3, #46	; 0x2e
 801a9f8:	d10c      	bne.n	801aa14 <_svfiprintf_r+0x130>
 801a9fa:	7863      	ldrb	r3, [r4, #1]
 801a9fc:	2b2a      	cmp	r3, #42	; 0x2a
 801a9fe:	d134      	bne.n	801aa6a <_svfiprintf_r+0x186>
 801aa00:	9b03      	ldr	r3, [sp, #12]
 801aa02:	1d1a      	adds	r2, r3, #4
 801aa04:	681b      	ldr	r3, [r3, #0]
 801aa06:	9203      	str	r2, [sp, #12]
 801aa08:	2b00      	cmp	r3, #0
 801aa0a:	bfb8      	it	lt
 801aa0c:	f04f 33ff 	movlt.w	r3, #4294967295
 801aa10:	3402      	adds	r4, #2
 801aa12:	9305      	str	r3, [sp, #20]
 801aa14:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801aadc <_svfiprintf_r+0x1f8>
 801aa18:	7821      	ldrb	r1, [r4, #0]
 801aa1a:	2203      	movs	r2, #3
 801aa1c:	4650      	mov	r0, sl
 801aa1e:	f7e5 fbf7 	bl	8000210 <memchr>
 801aa22:	b138      	cbz	r0, 801aa34 <_svfiprintf_r+0x150>
 801aa24:	9b04      	ldr	r3, [sp, #16]
 801aa26:	eba0 000a 	sub.w	r0, r0, sl
 801aa2a:	2240      	movs	r2, #64	; 0x40
 801aa2c:	4082      	lsls	r2, r0
 801aa2e:	4313      	orrs	r3, r2
 801aa30:	3401      	adds	r4, #1
 801aa32:	9304      	str	r3, [sp, #16]
 801aa34:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aa38:	4825      	ldr	r0, [pc, #148]	; (801aad0 <_svfiprintf_r+0x1ec>)
 801aa3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801aa3e:	2206      	movs	r2, #6
 801aa40:	f7e5 fbe6 	bl	8000210 <memchr>
 801aa44:	2800      	cmp	r0, #0
 801aa46:	d038      	beq.n	801aaba <_svfiprintf_r+0x1d6>
 801aa48:	4b22      	ldr	r3, [pc, #136]	; (801aad4 <_svfiprintf_r+0x1f0>)
 801aa4a:	bb1b      	cbnz	r3, 801aa94 <_svfiprintf_r+0x1b0>
 801aa4c:	9b03      	ldr	r3, [sp, #12]
 801aa4e:	3307      	adds	r3, #7
 801aa50:	f023 0307 	bic.w	r3, r3, #7
 801aa54:	3308      	adds	r3, #8
 801aa56:	9303      	str	r3, [sp, #12]
 801aa58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aa5a:	4433      	add	r3, r6
 801aa5c:	9309      	str	r3, [sp, #36]	; 0x24
 801aa5e:	e768      	b.n	801a932 <_svfiprintf_r+0x4e>
 801aa60:	fb0c 3202 	mla	r2, ip, r2, r3
 801aa64:	460c      	mov	r4, r1
 801aa66:	2001      	movs	r0, #1
 801aa68:	e7a6      	b.n	801a9b8 <_svfiprintf_r+0xd4>
 801aa6a:	2300      	movs	r3, #0
 801aa6c:	3401      	adds	r4, #1
 801aa6e:	9305      	str	r3, [sp, #20]
 801aa70:	4619      	mov	r1, r3
 801aa72:	f04f 0c0a 	mov.w	ip, #10
 801aa76:	4620      	mov	r0, r4
 801aa78:	f810 2b01 	ldrb.w	r2, [r0], #1
 801aa7c:	3a30      	subs	r2, #48	; 0x30
 801aa7e:	2a09      	cmp	r2, #9
 801aa80:	d903      	bls.n	801aa8a <_svfiprintf_r+0x1a6>
 801aa82:	2b00      	cmp	r3, #0
 801aa84:	d0c6      	beq.n	801aa14 <_svfiprintf_r+0x130>
 801aa86:	9105      	str	r1, [sp, #20]
 801aa88:	e7c4      	b.n	801aa14 <_svfiprintf_r+0x130>
 801aa8a:	fb0c 2101 	mla	r1, ip, r1, r2
 801aa8e:	4604      	mov	r4, r0
 801aa90:	2301      	movs	r3, #1
 801aa92:	e7f0      	b.n	801aa76 <_svfiprintf_r+0x192>
 801aa94:	ab03      	add	r3, sp, #12
 801aa96:	9300      	str	r3, [sp, #0]
 801aa98:	462a      	mov	r2, r5
 801aa9a:	4b0f      	ldr	r3, [pc, #60]	; (801aad8 <_svfiprintf_r+0x1f4>)
 801aa9c:	a904      	add	r1, sp, #16
 801aa9e:	4638      	mov	r0, r7
 801aaa0:	f3af 8000 	nop.w
 801aaa4:	1c42      	adds	r2, r0, #1
 801aaa6:	4606      	mov	r6, r0
 801aaa8:	d1d6      	bne.n	801aa58 <_svfiprintf_r+0x174>
 801aaaa:	89ab      	ldrh	r3, [r5, #12]
 801aaac:	065b      	lsls	r3, r3, #25
 801aaae:	f53f af2d 	bmi.w	801a90c <_svfiprintf_r+0x28>
 801aab2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801aab4:	b01d      	add	sp, #116	; 0x74
 801aab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aaba:	ab03      	add	r3, sp, #12
 801aabc:	9300      	str	r3, [sp, #0]
 801aabe:	462a      	mov	r2, r5
 801aac0:	4b05      	ldr	r3, [pc, #20]	; (801aad8 <_svfiprintf_r+0x1f4>)
 801aac2:	a904      	add	r1, sp, #16
 801aac4:	4638      	mov	r0, r7
 801aac6:	f000 f9bd 	bl	801ae44 <_printf_i>
 801aaca:	e7eb      	b.n	801aaa4 <_svfiprintf_r+0x1c0>
 801aacc:	0801c2fc 	.word	0x0801c2fc
 801aad0:	0801c306 	.word	0x0801c306
 801aad4:	00000000 	.word	0x00000000
 801aad8:	0801a831 	.word	0x0801a831
 801aadc:	0801c302 	.word	0x0801c302

0801aae0 <__sfputc_r>:
 801aae0:	6893      	ldr	r3, [r2, #8]
 801aae2:	3b01      	subs	r3, #1
 801aae4:	2b00      	cmp	r3, #0
 801aae6:	b410      	push	{r4}
 801aae8:	6093      	str	r3, [r2, #8]
 801aaea:	da08      	bge.n	801aafe <__sfputc_r+0x1e>
 801aaec:	6994      	ldr	r4, [r2, #24]
 801aaee:	42a3      	cmp	r3, r4
 801aaf0:	db01      	blt.n	801aaf6 <__sfputc_r+0x16>
 801aaf2:	290a      	cmp	r1, #10
 801aaf4:	d103      	bne.n	801aafe <__sfputc_r+0x1e>
 801aaf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aafa:	f7ff bc3d 	b.w	801a378 <__swbuf_r>
 801aafe:	6813      	ldr	r3, [r2, #0]
 801ab00:	1c58      	adds	r0, r3, #1
 801ab02:	6010      	str	r0, [r2, #0]
 801ab04:	7019      	strb	r1, [r3, #0]
 801ab06:	4608      	mov	r0, r1
 801ab08:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ab0c:	4770      	bx	lr

0801ab0e <__sfputs_r>:
 801ab0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab10:	4606      	mov	r6, r0
 801ab12:	460f      	mov	r7, r1
 801ab14:	4614      	mov	r4, r2
 801ab16:	18d5      	adds	r5, r2, r3
 801ab18:	42ac      	cmp	r4, r5
 801ab1a:	d101      	bne.n	801ab20 <__sfputs_r+0x12>
 801ab1c:	2000      	movs	r0, #0
 801ab1e:	e007      	b.n	801ab30 <__sfputs_r+0x22>
 801ab20:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ab24:	463a      	mov	r2, r7
 801ab26:	4630      	mov	r0, r6
 801ab28:	f7ff ffda 	bl	801aae0 <__sfputc_r>
 801ab2c:	1c43      	adds	r3, r0, #1
 801ab2e:	d1f3      	bne.n	801ab18 <__sfputs_r+0xa>
 801ab30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ab34 <_vfiprintf_r>:
 801ab34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab38:	460d      	mov	r5, r1
 801ab3a:	b09d      	sub	sp, #116	; 0x74
 801ab3c:	4614      	mov	r4, r2
 801ab3e:	4698      	mov	r8, r3
 801ab40:	4606      	mov	r6, r0
 801ab42:	b118      	cbz	r0, 801ab4c <_vfiprintf_r+0x18>
 801ab44:	6a03      	ldr	r3, [r0, #32]
 801ab46:	b90b      	cbnz	r3, 801ab4c <_vfiprintf_r+0x18>
 801ab48:	f7ff fa70 	bl	801a02c <__sinit>
 801ab4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ab4e:	07d9      	lsls	r1, r3, #31
 801ab50:	d405      	bmi.n	801ab5e <_vfiprintf_r+0x2a>
 801ab52:	89ab      	ldrh	r3, [r5, #12]
 801ab54:	059a      	lsls	r2, r3, #22
 801ab56:	d402      	bmi.n	801ab5e <_vfiprintf_r+0x2a>
 801ab58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ab5a:	f7ff fdd2 	bl	801a702 <__retarget_lock_acquire_recursive>
 801ab5e:	89ab      	ldrh	r3, [r5, #12]
 801ab60:	071b      	lsls	r3, r3, #28
 801ab62:	d501      	bpl.n	801ab68 <_vfiprintf_r+0x34>
 801ab64:	692b      	ldr	r3, [r5, #16]
 801ab66:	b99b      	cbnz	r3, 801ab90 <_vfiprintf_r+0x5c>
 801ab68:	4629      	mov	r1, r5
 801ab6a:	4630      	mov	r0, r6
 801ab6c:	f7ff fc42 	bl	801a3f4 <__swsetup_r>
 801ab70:	b170      	cbz	r0, 801ab90 <_vfiprintf_r+0x5c>
 801ab72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ab74:	07dc      	lsls	r4, r3, #31
 801ab76:	d504      	bpl.n	801ab82 <_vfiprintf_r+0x4e>
 801ab78:	f04f 30ff 	mov.w	r0, #4294967295
 801ab7c:	b01d      	add	sp, #116	; 0x74
 801ab7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab82:	89ab      	ldrh	r3, [r5, #12]
 801ab84:	0598      	lsls	r0, r3, #22
 801ab86:	d4f7      	bmi.n	801ab78 <_vfiprintf_r+0x44>
 801ab88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ab8a:	f7ff fdbb 	bl	801a704 <__retarget_lock_release_recursive>
 801ab8e:	e7f3      	b.n	801ab78 <_vfiprintf_r+0x44>
 801ab90:	2300      	movs	r3, #0
 801ab92:	9309      	str	r3, [sp, #36]	; 0x24
 801ab94:	2320      	movs	r3, #32
 801ab96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ab9a:	f8cd 800c 	str.w	r8, [sp, #12]
 801ab9e:	2330      	movs	r3, #48	; 0x30
 801aba0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801ad54 <_vfiprintf_r+0x220>
 801aba4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801aba8:	f04f 0901 	mov.w	r9, #1
 801abac:	4623      	mov	r3, r4
 801abae:	469a      	mov	sl, r3
 801abb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801abb4:	b10a      	cbz	r2, 801abba <_vfiprintf_r+0x86>
 801abb6:	2a25      	cmp	r2, #37	; 0x25
 801abb8:	d1f9      	bne.n	801abae <_vfiprintf_r+0x7a>
 801abba:	ebba 0b04 	subs.w	fp, sl, r4
 801abbe:	d00b      	beq.n	801abd8 <_vfiprintf_r+0xa4>
 801abc0:	465b      	mov	r3, fp
 801abc2:	4622      	mov	r2, r4
 801abc4:	4629      	mov	r1, r5
 801abc6:	4630      	mov	r0, r6
 801abc8:	f7ff ffa1 	bl	801ab0e <__sfputs_r>
 801abcc:	3001      	adds	r0, #1
 801abce:	f000 80a9 	beq.w	801ad24 <_vfiprintf_r+0x1f0>
 801abd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801abd4:	445a      	add	r2, fp
 801abd6:	9209      	str	r2, [sp, #36]	; 0x24
 801abd8:	f89a 3000 	ldrb.w	r3, [sl]
 801abdc:	2b00      	cmp	r3, #0
 801abde:	f000 80a1 	beq.w	801ad24 <_vfiprintf_r+0x1f0>
 801abe2:	2300      	movs	r3, #0
 801abe4:	f04f 32ff 	mov.w	r2, #4294967295
 801abe8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801abec:	f10a 0a01 	add.w	sl, sl, #1
 801abf0:	9304      	str	r3, [sp, #16]
 801abf2:	9307      	str	r3, [sp, #28]
 801abf4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801abf8:	931a      	str	r3, [sp, #104]	; 0x68
 801abfa:	4654      	mov	r4, sl
 801abfc:	2205      	movs	r2, #5
 801abfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ac02:	4854      	ldr	r0, [pc, #336]	; (801ad54 <_vfiprintf_r+0x220>)
 801ac04:	f7e5 fb04 	bl	8000210 <memchr>
 801ac08:	9a04      	ldr	r2, [sp, #16]
 801ac0a:	b9d8      	cbnz	r0, 801ac44 <_vfiprintf_r+0x110>
 801ac0c:	06d1      	lsls	r1, r2, #27
 801ac0e:	bf44      	itt	mi
 801ac10:	2320      	movmi	r3, #32
 801ac12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ac16:	0713      	lsls	r3, r2, #28
 801ac18:	bf44      	itt	mi
 801ac1a:	232b      	movmi	r3, #43	; 0x2b
 801ac1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ac20:	f89a 3000 	ldrb.w	r3, [sl]
 801ac24:	2b2a      	cmp	r3, #42	; 0x2a
 801ac26:	d015      	beq.n	801ac54 <_vfiprintf_r+0x120>
 801ac28:	9a07      	ldr	r2, [sp, #28]
 801ac2a:	4654      	mov	r4, sl
 801ac2c:	2000      	movs	r0, #0
 801ac2e:	f04f 0c0a 	mov.w	ip, #10
 801ac32:	4621      	mov	r1, r4
 801ac34:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ac38:	3b30      	subs	r3, #48	; 0x30
 801ac3a:	2b09      	cmp	r3, #9
 801ac3c:	d94d      	bls.n	801acda <_vfiprintf_r+0x1a6>
 801ac3e:	b1b0      	cbz	r0, 801ac6e <_vfiprintf_r+0x13a>
 801ac40:	9207      	str	r2, [sp, #28]
 801ac42:	e014      	b.n	801ac6e <_vfiprintf_r+0x13a>
 801ac44:	eba0 0308 	sub.w	r3, r0, r8
 801ac48:	fa09 f303 	lsl.w	r3, r9, r3
 801ac4c:	4313      	orrs	r3, r2
 801ac4e:	9304      	str	r3, [sp, #16]
 801ac50:	46a2      	mov	sl, r4
 801ac52:	e7d2      	b.n	801abfa <_vfiprintf_r+0xc6>
 801ac54:	9b03      	ldr	r3, [sp, #12]
 801ac56:	1d19      	adds	r1, r3, #4
 801ac58:	681b      	ldr	r3, [r3, #0]
 801ac5a:	9103      	str	r1, [sp, #12]
 801ac5c:	2b00      	cmp	r3, #0
 801ac5e:	bfbb      	ittet	lt
 801ac60:	425b      	neglt	r3, r3
 801ac62:	f042 0202 	orrlt.w	r2, r2, #2
 801ac66:	9307      	strge	r3, [sp, #28]
 801ac68:	9307      	strlt	r3, [sp, #28]
 801ac6a:	bfb8      	it	lt
 801ac6c:	9204      	strlt	r2, [sp, #16]
 801ac6e:	7823      	ldrb	r3, [r4, #0]
 801ac70:	2b2e      	cmp	r3, #46	; 0x2e
 801ac72:	d10c      	bne.n	801ac8e <_vfiprintf_r+0x15a>
 801ac74:	7863      	ldrb	r3, [r4, #1]
 801ac76:	2b2a      	cmp	r3, #42	; 0x2a
 801ac78:	d134      	bne.n	801ace4 <_vfiprintf_r+0x1b0>
 801ac7a:	9b03      	ldr	r3, [sp, #12]
 801ac7c:	1d1a      	adds	r2, r3, #4
 801ac7e:	681b      	ldr	r3, [r3, #0]
 801ac80:	9203      	str	r2, [sp, #12]
 801ac82:	2b00      	cmp	r3, #0
 801ac84:	bfb8      	it	lt
 801ac86:	f04f 33ff 	movlt.w	r3, #4294967295
 801ac8a:	3402      	adds	r4, #2
 801ac8c:	9305      	str	r3, [sp, #20]
 801ac8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801ad64 <_vfiprintf_r+0x230>
 801ac92:	7821      	ldrb	r1, [r4, #0]
 801ac94:	2203      	movs	r2, #3
 801ac96:	4650      	mov	r0, sl
 801ac98:	f7e5 faba 	bl	8000210 <memchr>
 801ac9c:	b138      	cbz	r0, 801acae <_vfiprintf_r+0x17a>
 801ac9e:	9b04      	ldr	r3, [sp, #16]
 801aca0:	eba0 000a 	sub.w	r0, r0, sl
 801aca4:	2240      	movs	r2, #64	; 0x40
 801aca6:	4082      	lsls	r2, r0
 801aca8:	4313      	orrs	r3, r2
 801acaa:	3401      	adds	r4, #1
 801acac:	9304      	str	r3, [sp, #16]
 801acae:	f814 1b01 	ldrb.w	r1, [r4], #1
 801acb2:	4829      	ldr	r0, [pc, #164]	; (801ad58 <_vfiprintf_r+0x224>)
 801acb4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801acb8:	2206      	movs	r2, #6
 801acba:	f7e5 faa9 	bl	8000210 <memchr>
 801acbe:	2800      	cmp	r0, #0
 801acc0:	d03f      	beq.n	801ad42 <_vfiprintf_r+0x20e>
 801acc2:	4b26      	ldr	r3, [pc, #152]	; (801ad5c <_vfiprintf_r+0x228>)
 801acc4:	bb1b      	cbnz	r3, 801ad0e <_vfiprintf_r+0x1da>
 801acc6:	9b03      	ldr	r3, [sp, #12]
 801acc8:	3307      	adds	r3, #7
 801acca:	f023 0307 	bic.w	r3, r3, #7
 801acce:	3308      	adds	r3, #8
 801acd0:	9303      	str	r3, [sp, #12]
 801acd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801acd4:	443b      	add	r3, r7
 801acd6:	9309      	str	r3, [sp, #36]	; 0x24
 801acd8:	e768      	b.n	801abac <_vfiprintf_r+0x78>
 801acda:	fb0c 3202 	mla	r2, ip, r2, r3
 801acde:	460c      	mov	r4, r1
 801ace0:	2001      	movs	r0, #1
 801ace2:	e7a6      	b.n	801ac32 <_vfiprintf_r+0xfe>
 801ace4:	2300      	movs	r3, #0
 801ace6:	3401      	adds	r4, #1
 801ace8:	9305      	str	r3, [sp, #20]
 801acea:	4619      	mov	r1, r3
 801acec:	f04f 0c0a 	mov.w	ip, #10
 801acf0:	4620      	mov	r0, r4
 801acf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801acf6:	3a30      	subs	r2, #48	; 0x30
 801acf8:	2a09      	cmp	r2, #9
 801acfa:	d903      	bls.n	801ad04 <_vfiprintf_r+0x1d0>
 801acfc:	2b00      	cmp	r3, #0
 801acfe:	d0c6      	beq.n	801ac8e <_vfiprintf_r+0x15a>
 801ad00:	9105      	str	r1, [sp, #20]
 801ad02:	e7c4      	b.n	801ac8e <_vfiprintf_r+0x15a>
 801ad04:	fb0c 2101 	mla	r1, ip, r1, r2
 801ad08:	4604      	mov	r4, r0
 801ad0a:	2301      	movs	r3, #1
 801ad0c:	e7f0      	b.n	801acf0 <_vfiprintf_r+0x1bc>
 801ad0e:	ab03      	add	r3, sp, #12
 801ad10:	9300      	str	r3, [sp, #0]
 801ad12:	462a      	mov	r2, r5
 801ad14:	4b12      	ldr	r3, [pc, #72]	; (801ad60 <_vfiprintf_r+0x22c>)
 801ad16:	a904      	add	r1, sp, #16
 801ad18:	4630      	mov	r0, r6
 801ad1a:	f3af 8000 	nop.w
 801ad1e:	4607      	mov	r7, r0
 801ad20:	1c78      	adds	r0, r7, #1
 801ad22:	d1d6      	bne.n	801acd2 <_vfiprintf_r+0x19e>
 801ad24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ad26:	07d9      	lsls	r1, r3, #31
 801ad28:	d405      	bmi.n	801ad36 <_vfiprintf_r+0x202>
 801ad2a:	89ab      	ldrh	r3, [r5, #12]
 801ad2c:	059a      	lsls	r2, r3, #22
 801ad2e:	d402      	bmi.n	801ad36 <_vfiprintf_r+0x202>
 801ad30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ad32:	f7ff fce7 	bl	801a704 <__retarget_lock_release_recursive>
 801ad36:	89ab      	ldrh	r3, [r5, #12]
 801ad38:	065b      	lsls	r3, r3, #25
 801ad3a:	f53f af1d 	bmi.w	801ab78 <_vfiprintf_r+0x44>
 801ad3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ad40:	e71c      	b.n	801ab7c <_vfiprintf_r+0x48>
 801ad42:	ab03      	add	r3, sp, #12
 801ad44:	9300      	str	r3, [sp, #0]
 801ad46:	462a      	mov	r2, r5
 801ad48:	4b05      	ldr	r3, [pc, #20]	; (801ad60 <_vfiprintf_r+0x22c>)
 801ad4a:	a904      	add	r1, sp, #16
 801ad4c:	4630      	mov	r0, r6
 801ad4e:	f000 f879 	bl	801ae44 <_printf_i>
 801ad52:	e7e4      	b.n	801ad1e <_vfiprintf_r+0x1ea>
 801ad54:	0801c2fc 	.word	0x0801c2fc
 801ad58:	0801c306 	.word	0x0801c306
 801ad5c:	00000000 	.word	0x00000000
 801ad60:	0801ab0f 	.word	0x0801ab0f
 801ad64:	0801c302 	.word	0x0801c302

0801ad68 <_printf_common>:
 801ad68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ad6c:	4616      	mov	r6, r2
 801ad6e:	4699      	mov	r9, r3
 801ad70:	688a      	ldr	r2, [r1, #8]
 801ad72:	690b      	ldr	r3, [r1, #16]
 801ad74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801ad78:	4293      	cmp	r3, r2
 801ad7a:	bfb8      	it	lt
 801ad7c:	4613      	movlt	r3, r2
 801ad7e:	6033      	str	r3, [r6, #0]
 801ad80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801ad84:	4607      	mov	r7, r0
 801ad86:	460c      	mov	r4, r1
 801ad88:	b10a      	cbz	r2, 801ad8e <_printf_common+0x26>
 801ad8a:	3301      	adds	r3, #1
 801ad8c:	6033      	str	r3, [r6, #0]
 801ad8e:	6823      	ldr	r3, [r4, #0]
 801ad90:	0699      	lsls	r1, r3, #26
 801ad92:	bf42      	ittt	mi
 801ad94:	6833      	ldrmi	r3, [r6, #0]
 801ad96:	3302      	addmi	r3, #2
 801ad98:	6033      	strmi	r3, [r6, #0]
 801ad9a:	6825      	ldr	r5, [r4, #0]
 801ad9c:	f015 0506 	ands.w	r5, r5, #6
 801ada0:	d106      	bne.n	801adb0 <_printf_common+0x48>
 801ada2:	f104 0a19 	add.w	sl, r4, #25
 801ada6:	68e3      	ldr	r3, [r4, #12]
 801ada8:	6832      	ldr	r2, [r6, #0]
 801adaa:	1a9b      	subs	r3, r3, r2
 801adac:	42ab      	cmp	r3, r5
 801adae:	dc26      	bgt.n	801adfe <_printf_common+0x96>
 801adb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801adb4:	1e13      	subs	r3, r2, #0
 801adb6:	6822      	ldr	r2, [r4, #0]
 801adb8:	bf18      	it	ne
 801adba:	2301      	movne	r3, #1
 801adbc:	0692      	lsls	r2, r2, #26
 801adbe:	d42b      	bmi.n	801ae18 <_printf_common+0xb0>
 801adc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801adc4:	4649      	mov	r1, r9
 801adc6:	4638      	mov	r0, r7
 801adc8:	47c0      	blx	r8
 801adca:	3001      	adds	r0, #1
 801adcc:	d01e      	beq.n	801ae0c <_printf_common+0xa4>
 801adce:	6823      	ldr	r3, [r4, #0]
 801add0:	6922      	ldr	r2, [r4, #16]
 801add2:	f003 0306 	and.w	r3, r3, #6
 801add6:	2b04      	cmp	r3, #4
 801add8:	bf02      	ittt	eq
 801adda:	68e5      	ldreq	r5, [r4, #12]
 801addc:	6833      	ldreq	r3, [r6, #0]
 801adde:	1aed      	subeq	r5, r5, r3
 801ade0:	68a3      	ldr	r3, [r4, #8]
 801ade2:	bf0c      	ite	eq
 801ade4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ade8:	2500      	movne	r5, #0
 801adea:	4293      	cmp	r3, r2
 801adec:	bfc4      	itt	gt
 801adee:	1a9b      	subgt	r3, r3, r2
 801adf0:	18ed      	addgt	r5, r5, r3
 801adf2:	2600      	movs	r6, #0
 801adf4:	341a      	adds	r4, #26
 801adf6:	42b5      	cmp	r5, r6
 801adf8:	d11a      	bne.n	801ae30 <_printf_common+0xc8>
 801adfa:	2000      	movs	r0, #0
 801adfc:	e008      	b.n	801ae10 <_printf_common+0xa8>
 801adfe:	2301      	movs	r3, #1
 801ae00:	4652      	mov	r2, sl
 801ae02:	4649      	mov	r1, r9
 801ae04:	4638      	mov	r0, r7
 801ae06:	47c0      	blx	r8
 801ae08:	3001      	adds	r0, #1
 801ae0a:	d103      	bne.n	801ae14 <_printf_common+0xac>
 801ae0c:	f04f 30ff 	mov.w	r0, #4294967295
 801ae10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ae14:	3501      	adds	r5, #1
 801ae16:	e7c6      	b.n	801ada6 <_printf_common+0x3e>
 801ae18:	18e1      	adds	r1, r4, r3
 801ae1a:	1c5a      	adds	r2, r3, #1
 801ae1c:	2030      	movs	r0, #48	; 0x30
 801ae1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801ae22:	4422      	add	r2, r4
 801ae24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801ae28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801ae2c:	3302      	adds	r3, #2
 801ae2e:	e7c7      	b.n	801adc0 <_printf_common+0x58>
 801ae30:	2301      	movs	r3, #1
 801ae32:	4622      	mov	r2, r4
 801ae34:	4649      	mov	r1, r9
 801ae36:	4638      	mov	r0, r7
 801ae38:	47c0      	blx	r8
 801ae3a:	3001      	adds	r0, #1
 801ae3c:	d0e6      	beq.n	801ae0c <_printf_common+0xa4>
 801ae3e:	3601      	adds	r6, #1
 801ae40:	e7d9      	b.n	801adf6 <_printf_common+0x8e>
	...

0801ae44 <_printf_i>:
 801ae44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ae48:	7e0f      	ldrb	r7, [r1, #24]
 801ae4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ae4c:	2f78      	cmp	r7, #120	; 0x78
 801ae4e:	4691      	mov	r9, r2
 801ae50:	4680      	mov	r8, r0
 801ae52:	460c      	mov	r4, r1
 801ae54:	469a      	mov	sl, r3
 801ae56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801ae5a:	d807      	bhi.n	801ae6c <_printf_i+0x28>
 801ae5c:	2f62      	cmp	r7, #98	; 0x62
 801ae5e:	d80a      	bhi.n	801ae76 <_printf_i+0x32>
 801ae60:	2f00      	cmp	r7, #0
 801ae62:	f000 80d4 	beq.w	801b00e <_printf_i+0x1ca>
 801ae66:	2f58      	cmp	r7, #88	; 0x58
 801ae68:	f000 80c0 	beq.w	801afec <_printf_i+0x1a8>
 801ae6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ae70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801ae74:	e03a      	b.n	801aeec <_printf_i+0xa8>
 801ae76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801ae7a:	2b15      	cmp	r3, #21
 801ae7c:	d8f6      	bhi.n	801ae6c <_printf_i+0x28>
 801ae7e:	a101      	add	r1, pc, #4	; (adr r1, 801ae84 <_printf_i+0x40>)
 801ae80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ae84:	0801aedd 	.word	0x0801aedd
 801ae88:	0801aef1 	.word	0x0801aef1
 801ae8c:	0801ae6d 	.word	0x0801ae6d
 801ae90:	0801ae6d 	.word	0x0801ae6d
 801ae94:	0801ae6d 	.word	0x0801ae6d
 801ae98:	0801ae6d 	.word	0x0801ae6d
 801ae9c:	0801aef1 	.word	0x0801aef1
 801aea0:	0801ae6d 	.word	0x0801ae6d
 801aea4:	0801ae6d 	.word	0x0801ae6d
 801aea8:	0801ae6d 	.word	0x0801ae6d
 801aeac:	0801ae6d 	.word	0x0801ae6d
 801aeb0:	0801aff5 	.word	0x0801aff5
 801aeb4:	0801af1d 	.word	0x0801af1d
 801aeb8:	0801afaf 	.word	0x0801afaf
 801aebc:	0801ae6d 	.word	0x0801ae6d
 801aec0:	0801ae6d 	.word	0x0801ae6d
 801aec4:	0801b017 	.word	0x0801b017
 801aec8:	0801ae6d 	.word	0x0801ae6d
 801aecc:	0801af1d 	.word	0x0801af1d
 801aed0:	0801ae6d 	.word	0x0801ae6d
 801aed4:	0801ae6d 	.word	0x0801ae6d
 801aed8:	0801afb7 	.word	0x0801afb7
 801aedc:	682b      	ldr	r3, [r5, #0]
 801aede:	1d1a      	adds	r2, r3, #4
 801aee0:	681b      	ldr	r3, [r3, #0]
 801aee2:	602a      	str	r2, [r5, #0]
 801aee4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801aee8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801aeec:	2301      	movs	r3, #1
 801aeee:	e09f      	b.n	801b030 <_printf_i+0x1ec>
 801aef0:	6820      	ldr	r0, [r4, #0]
 801aef2:	682b      	ldr	r3, [r5, #0]
 801aef4:	0607      	lsls	r7, r0, #24
 801aef6:	f103 0104 	add.w	r1, r3, #4
 801aefa:	6029      	str	r1, [r5, #0]
 801aefc:	d501      	bpl.n	801af02 <_printf_i+0xbe>
 801aefe:	681e      	ldr	r6, [r3, #0]
 801af00:	e003      	b.n	801af0a <_printf_i+0xc6>
 801af02:	0646      	lsls	r6, r0, #25
 801af04:	d5fb      	bpl.n	801aefe <_printf_i+0xba>
 801af06:	f9b3 6000 	ldrsh.w	r6, [r3]
 801af0a:	2e00      	cmp	r6, #0
 801af0c:	da03      	bge.n	801af16 <_printf_i+0xd2>
 801af0e:	232d      	movs	r3, #45	; 0x2d
 801af10:	4276      	negs	r6, r6
 801af12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801af16:	485a      	ldr	r0, [pc, #360]	; (801b080 <_printf_i+0x23c>)
 801af18:	230a      	movs	r3, #10
 801af1a:	e012      	b.n	801af42 <_printf_i+0xfe>
 801af1c:	682b      	ldr	r3, [r5, #0]
 801af1e:	6820      	ldr	r0, [r4, #0]
 801af20:	1d19      	adds	r1, r3, #4
 801af22:	6029      	str	r1, [r5, #0]
 801af24:	0605      	lsls	r5, r0, #24
 801af26:	d501      	bpl.n	801af2c <_printf_i+0xe8>
 801af28:	681e      	ldr	r6, [r3, #0]
 801af2a:	e002      	b.n	801af32 <_printf_i+0xee>
 801af2c:	0641      	lsls	r1, r0, #25
 801af2e:	d5fb      	bpl.n	801af28 <_printf_i+0xe4>
 801af30:	881e      	ldrh	r6, [r3, #0]
 801af32:	4853      	ldr	r0, [pc, #332]	; (801b080 <_printf_i+0x23c>)
 801af34:	2f6f      	cmp	r7, #111	; 0x6f
 801af36:	bf0c      	ite	eq
 801af38:	2308      	moveq	r3, #8
 801af3a:	230a      	movne	r3, #10
 801af3c:	2100      	movs	r1, #0
 801af3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801af42:	6865      	ldr	r5, [r4, #4]
 801af44:	60a5      	str	r5, [r4, #8]
 801af46:	2d00      	cmp	r5, #0
 801af48:	bfa2      	ittt	ge
 801af4a:	6821      	ldrge	r1, [r4, #0]
 801af4c:	f021 0104 	bicge.w	r1, r1, #4
 801af50:	6021      	strge	r1, [r4, #0]
 801af52:	b90e      	cbnz	r6, 801af58 <_printf_i+0x114>
 801af54:	2d00      	cmp	r5, #0
 801af56:	d04b      	beq.n	801aff0 <_printf_i+0x1ac>
 801af58:	4615      	mov	r5, r2
 801af5a:	fbb6 f1f3 	udiv	r1, r6, r3
 801af5e:	fb03 6711 	mls	r7, r3, r1, r6
 801af62:	5dc7      	ldrb	r7, [r0, r7]
 801af64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801af68:	4637      	mov	r7, r6
 801af6a:	42bb      	cmp	r3, r7
 801af6c:	460e      	mov	r6, r1
 801af6e:	d9f4      	bls.n	801af5a <_printf_i+0x116>
 801af70:	2b08      	cmp	r3, #8
 801af72:	d10b      	bne.n	801af8c <_printf_i+0x148>
 801af74:	6823      	ldr	r3, [r4, #0]
 801af76:	07de      	lsls	r6, r3, #31
 801af78:	d508      	bpl.n	801af8c <_printf_i+0x148>
 801af7a:	6923      	ldr	r3, [r4, #16]
 801af7c:	6861      	ldr	r1, [r4, #4]
 801af7e:	4299      	cmp	r1, r3
 801af80:	bfde      	ittt	le
 801af82:	2330      	movle	r3, #48	; 0x30
 801af84:	f805 3c01 	strble.w	r3, [r5, #-1]
 801af88:	f105 35ff 	addle.w	r5, r5, #4294967295
 801af8c:	1b52      	subs	r2, r2, r5
 801af8e:	6122      	str	r2, [r4, #16]
 801af90:	f8cd a000 	str.w	sl, [sp]
 801af94:	464b      	mov	r3, r9
 801af96:	aa03      	add	r2, sp, #12
 801af98:	4621      	mov	r1, r4
 801af9a:	4640      	mov	r0, r8
 801af9c:	f7ff fee4 	bl	801ad68 <_printf_common>
 801afa0:	3001      	adds	r0, #1
 801afa2:	d14a      	bne.n	801b03a <_printf_i+0x1f6>
 801afa4:	f04f 30ff 	mov.w	r0, #4294967295
 801afa8:	b004      	add	sp, #16
 801afaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801afae:	6823      	ldr	r3, [r4, #0]
 801afb0:	f043 0320 	orr.w	r3, r3, #32
 801afb4:	6023      	str	r3, [r4, #0]
 801afb6:	4833      	ldr	r0, [pc, #204]	; (801b084 <_printf_i+0x240>)
 801afb8:	2778      	movs	r7, #120	; 0x78
 801afba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801afbe:	6823      	ldr	r3, [r4, #0]
 801afc0:	6829      	ldr	r1, [r5, #0]
 801afc2:	061f      	lsls	r7, r3, #24
 801afc4:	f851 6b04 	ldr.w	r6, [r1], #4
 801afc8:	d402      	bmi.n	801afd0 <_printf_i+0x18c>
 801afca:	065f      	lsls	r7, r3, #25
 801afcc:	bf48      	it	mi
 801afce:	b2b6      	uxthmi	r6, r6
 801afd0:	07df      	lsls	r7, r3, #31
 801afd2:	bf48      	it	mi
 801afd4:	f043 0320 	orrmi.w	r3, r3, #32
 801afd8:	6029      	str	r1, [r5, #0]
 801afda:	bf48      	it	mi
 801afdc:	6023      	strmi	r3, [r4, #0]
 801afde:	b91e      	cbnz	r6, 801afe8 <_printf_i+0x1a4>
 801afe0:	6823      	ldr	r3, [r4, #0]
 801afe2:	f023 0320 	bic.w	r3, r3, #32
 801afe6:	6023      	str	r3, [r4, #0]
 801afe8:	2310      	movs	r3, #16
 801afea:	e7a7      	b.n	801af3c <_printf_i+0xf8>
 801afec:	4824      	ldr	r0, [pc, #144]	; (801b080 <_printf_i+0x23c>)
 801afee:	e7e4      	b.n	801afba <_printf_i+0x176>
 801aff0:	4615      	mov	r5, r2
 801aff2:	e7bd      	b.n	801af70 <_printf_i+0x12c>
 801aff4:	682b      	ldr	r3, [r5, #0]
 801aff6:	6826      	ldr	r6, [r4, #0]
 801aff8:	6961      	ldr	r1, [r4, #20]
 801affa:	1d18      	adds	r0, r3, #4
 801affc:	6028      	str	r0, [r5, #0]
 801affe:	0635      	lsls	r5, r6, #24
 801b000:	681b      	ldr	r3, [r3, #0]
 801b002:	d501      	bpl.n	801b008 <_printf_i+0x1c4>
 801b004:	6019      	str	r1, [r3, #0]
 801b006:	e002      	b.n	801b00e <_printf_i+0x1ca>
 801b008:	0670      	lsls	r0, r6, #25
 801b00a:	d5fb      	bpl.n	801b004 <_printf_i+0x1c0>
 801b00c:	8019      	strh	r1, [r3, #0]
 801b00e:	2300      	movs	r3, #0
 801b010:	6123      	str	r3, [r4, #16]
 801b012:	4615      	mov	r5, r2
 801b014:	e7bc      	b.n	801af90 <_printf_i+0x14c>
 801b016:	682b      	ldr	r3, [r5, #0]
 801b018:	1d1a      	adds	r2, r3, #4
 801b01a:	602a      	str	r2, [r5, #0]
 801b01c:	681d      	ldr	r5, [r3, #0]
 801b01e:	6862      	ldr	r2, [r4, #4]
 801b020:	2100      	movs	r1, #0
 801b022:	4628      	mov	r0, r5
 801b024:	f7e5 f8f4 	bl	8000210 <memchr>
 801b028:	b108      	cbz	r0, 801b02e <_printf_i+0x1ea>
 801b02a:	1b40      	subs	r0, r0, r5
 801b02c:	6060      	str	r0, [r4, #4]
 801b02e:	6863      	ldr	r3, [r4, #4]
 801b030:	6123      	str	r3, [r4, #16]
 801b032:	2300      	movs	r3, #0
 801b034:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b038:	e7aa      	b.n	801af90 <_printf_i+0x14c>
 801b03a:	6923      	ldr	r3, [r4, #16]
 801b03c:	462a      	mov	r2, r5
 801b03e:	4649      	mov	r1, r9
 801b040:	4640      	mov	r0, r8
 801b042:	47d0      	blx	sl
 801b044:	3001      	adds	r0, #1
 801b046:	d0ad      	beq.n	801afa4 <_printf_i+0x160>
 801b048:	6823      	ldr	r3, [r4, #0]
 801b04a:	079b      	lsls	r3, r3, #30
 801b04c:	d413      	bmi.n	801b076 <_printf_i+0x232>
 801b04e:	68e0      	ldr	r0, [r4, #12]
 801b050:	9b03      	ldr	r3, [sp, #12]
 801b052:	4298      	cmp	r0, r3
 801b054:	bfb8      	it	lt
 801b056:	4618      	movlt	r0, r3
 801b058:	e7a6      	b.n	801afa8 <_printf_i+0x164>
 801b05a:	2301      	movs	r3, #1
 801b05c:	4632      	mov	r2, r6
 801b05e:	4649      	mov	r1, r9
 801b060:	4640      	mov	r0, r8
 801b062:	47d0      	blx	sl
 801b064:	3001      	adds	r0, #1
 801b066:	d09d      	beq.n	801afa4 <_printf_i+0x160>
 801b068:	3501      	adds	r5, #1
 801b06a:	68e3      	ldr	r3, [r4, #12]
 801b06c:	9903      	ldr	r1, [sp, #12]
 801b06e:	1a5b      	subs	r3, r3, r1
 801b070:	42ab      	cmp	r3, r5
 801b072:	dcf2      	bgt.n	801b05a <_printf_i+0x216>
 801b074:	e7eb      	b.n	801b04e <_printf_i+0x20a>
 801b076:	2500      	movs	r5, #0
 801b078:	f104 0619 	add.w	r6, r4, #25
 801b07c:	e7f5      	b.n	801b06a <_printf_i+0x226>
 801b07e:	bf00      	nop
 801b080:	0801c30d 	.word	0x0801c30d
 801b084:	0801c31e 	.word	0x0801c31e

0801b088 <__sflush_r>:
 801b088:	898a      	ldrh	r2, [r1, #12]
 801b08a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b08e:	4605      	mov	r5, r0
 801b090:	0710      	lsls	r0, r2, #28
 801b092:	460c      	mov	r4, r1
 801b094:	d458      	bmi.n	801b148 <__sflush_r+0xc0>
 801b096:	684b      	ldr	r3, [r1, #4]
 801b098:	2b00      	cmp	r3, #0
 801b09a:	dc05      	bgt.n	801b0a8 <__sflush_r+0x20>
 801b09c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b09e:	2b00      	cmp	r3, #0
 801b0a0:	dc02      	bgt.n	801b0a8 <__sflush_r+0x20>
 801b0a2:	2000      	movs	r0, #0
 801b0a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b0a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b0aa:	2e00      	cmp	r6, #0
 801b0ac:	d0f9      	beq.n	801b0a2 <__sflush_r+0x1a>
 801b0ae:	2300      	movs	r3, #0
 801b0b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b0b4:	682f      	ldr	r7, [r5, #0]
 801b0b6:	6a21      	ldr	r1, [r4, #32]
 801b0b8:	602b      	str	r3, [r5, #0]
 801b0ba:	d032      	beq.n	801b122 <__sflush_r+0x9a>
 801b0bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b0be:	89a3      	ldrh	r3, [r4, #12]
 801b0c0:	075a      	lsls	r2, r3, #29
 801b0c2:	d505      	bpl.n	801b0d0 <__sflush_r+0x48>
 801b0c4:	6863      	ldr	r3, [r4, #4]
 801b0c6:	1ac0      	subs	r0, r0, r3
 801b0c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b0ca:	b10b      	cbz	r3, 801b0d0 <__sflush_r+0x48>
 801b0cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b0ce:	1ac0      	subs	r0, r0, r3
 801b0d0:	2300      	movs	r3, #0
 801b0d2:	4602      	mov	r2, r0
 801b0d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b0d6:	6a21      	ldr	r1, [r4, #32]
 801b0d8:	4628      	mov	r0, r5
 801b0da:	47b0      	blx	r6
 801b0dc:	1c43      	adds	r3, r0, #1
 801b0de:	89a3      	ldrh	r3, [r4, #12]
 801b0e0:	d106      	bne.n	801b0f0 <__sflush_r+0x68>
 801b0e2:	6829      	ldr	r1, [r5, #0]
 801b0e4:	291d      	cmp	r1, #29
 801b0e6:	d82b      	bhi.n	801b140 <__sflush_r+0xb8>
 801b0e8:	4a29      	ldr	r2, [pc, #164]	; (801b190 <__sflush_r+0x108>)
 801b0ea:	410a      	asrs	r2, r1
 801b0ec:	07d6      	lsls	r6, r2, #31
 801b0ee:	d427      	bmi.n	801b140 <__sflush_r+0xb8>
 801b0f0:	2200      	movs	r2, #0
 801b0f2:	6062      	str	r2, [r4, #4]
 801b0f4:	04d9      	lsls	r1, r3, #19
 801b0f6:	6922      	ldr	r2, [r4, #16]
 801b0f8:	6022      	str	r2, [r4, #0]
 801b0fa:	d504      	bpl.n	801b106 <__sflush_r+0x7e>
 801b0fc:	1c42      	adds	r2, r0, #1
 801b0fe:	d101      	bne.n	801b104 <__sflush_r+0x7c>
 801b100:	682b      	ldr	r3, [r5, #0]
 801b102:	b903      	cbnz	r3, 801b106 <__sflush_r+0x7e>
 801b104:	6560      	str	r0, [r4, #84]	; 0x54
 801b106:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b108:	602f      	str	r7, [r5, #0]
 801b10a:	2900      	cmp	r1, #0
 801b10c:	d0c9      	beq.n	801b0a2 <__sflush_r+0x1a>
 801b10e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b112:	4299      	cmp	r1, r3
 801b114:	d002      	beq.n	801b11c <__sflush_r+0x94>
 801b116:	4628      	mov	r0, r5
 801b118:	f7ff fb36 	bl	801a788 <_free_r>
 801b11c:	2000      	movs	r0, #0
 801b11e:	6360      	str	r0, [r4, #52]	; 0x34
 801b120:	e7c0      	b.n	801b0a4 <__sflush_r+0x1c>
 801b122:	2301      	movs	r3, #1
 801b124:	4628      	mov	r0, r5
 801b126:	47b0      	blx	r6
 801b128:	1c41      	adds	r1, r0, #1
 801b12a:	d1c8      	bne.n	801b0be <__sflush_r+0x36>
 801b12c:	682b      	ldr	r3, [r5, #0]
 801b12e:	2b00      	cmp	r3, #0
 801b130:	d0c5      	beq.n	801b0be <__sflush_r+0x36>
 801b132:	2b1d      	cmp	r3, #29
 801b134:	d001      	beq.n	801b13a <__sflush_r+0xb2>
 801b136:	2b16      	cmp	r3, #22
 801b138:	d101      	bne.n	801b13e <__sflush_r+0xb6>
 801b13a:	602f      	str	r7, [r5, #0]
 801b13c:	e7b1      	b.n	801b0a2 <__sflush_r+0x1a>
 801b13e:	89a3      	ldrh	r3, [r4, #12]
 801b140:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b144:	81a3      	strh	r3, [r4, #12]
 801b146:	e7ad      	b.n	801b0a4 <__sflush_r+0x1c>
 801b148:	690f      	ldr	r7, [r1, #16]
 801b14a:	2f00      	cmp	r7, #0
 801b14c:	d0a9      	beq.n	801b0a2 <__sflush_r+0x1a>
 801b14e:	0793      	lsls	r3, r2, #30
 801b150:	680e      	ldr	r6, [r1, #0]
 801b152:	bf08      	it	eq
 801b154:	694b      	ldreq	r3, [r1, #20]
 801b156:	600f      	str	r7, [r1, #0]
 801b158:	bf18      	it	ne
 801b15a:	2300      	movne	r3, #0
 801b15c:	eba6 0807 	sub.w	r8, r6, r7
 801b160:	608b      	str	r3, [r1, #8]
 801b162:	f1b8 0f00 	cmp.w	r8, #0
 801b166:	dd9c      	ble.n	801b0a2 <__sflush_r+0x1a>
 801b168:	6a21      	ldr	r1, [r4, #32]
 801b16a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b16c:	4643      	mov	r3, r8
 801b16e:	463a      	mov	r2, r7
 801b170:	4628      	mov	r0, r5
 801b172:	47b0      	blx	r6
 801b174:	2800      	cmp	r0, #0
 801b176:	dc06      	bgt.n	801b186 <__sflush_r+0xfe>
 801b178:	89a3      	ldrh	r3, [r4, #12]
 801b17a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b17e:	81a3      	strh	r3, [r4, #12]
 801b180:	f04f 30ff 	mov.w	r0, #4294967295
 801b184:	e78e      	b.n	801b0a4 <__sflush_r+0x1c>
 801b186:	4407      	add	r7, r0
 801b188:	eba8 0800 	sub.w	r8, r8, r0
 801b18c:	e7e9      	b.n	801b162 <__sflush_r+0xda>
 801b18e:	bf00      	nop
 801b190:	dfbffffe 	.word	0xdfbffffe

0801b194 <_fflush_r>:
 801b194:	b538      	push	{r3, r4, r5, lr}
 801b196:	690b      	ldr	r3, [r1, #16]
 801b198:	4605      	mov	r5, r0
 801b19a:	460c      	mov	r4, r1
 801b19c:	b913      	cbnz	r3, 801b1a4 <_fflush_r+0x10>
 801b19e:	2500      	movs	r5, #0
 801b1a0:	4628      	mov	r0, r5
 801b1a2:	bd38      	pop	{r3, r4, r5, pc}
 801b1a4:	b118      	cbz	r0, 801b1ae <_fflush_r+0x1a>
 801b1a6:	6a03      	ldr	r3, [r0, #32]
 801b1a8:	b90b      	cbnz	r3, 801b1ae <_fflush_r+0x1a>
 801b1aa:	f7fe ff3f 	bl	801a02c <__sinit>
 801b1ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b1b2:	2b00      	cmp	r3, #0
 801b1b4:	d0f3      	beq.n	801b19e <_fflush_r+0xa>
 801b1b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b1b8:	07d0      	lsls	r0, r2, #31
 801b1ba:	d404      	bmi.n	801b1c6 <_fflush_r+0x32>
 801b1bc:	0599      	lsls	r1, r3, #22
 801b1be:	d402      	bmi.n	801b1c6 <_fflush_r+0x32>
 801b1c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b1c2:	f7ff fa9e 	bl	801a702 <__retarget_lock_acquire_recursive>
 801b1c6:	4628      	mov	r0, r5
 801b1c8:	4621      	mov	r1, r4
 801b1ca:	f7ff ff5d 	bl	801b088 <__sflush_r>
 801b1ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b1d0:	07da      	lsls	r2, r3, #31
 801b1d2:	4605      	mov	r5, r0
 801b1d4:	d4e4      	bmi.n	801b1a0 <_fflush_r+0xc>
 801b1d6:	89a3      	ldrh	r3, [r4, #12]
 801b1d8:	059b      	lsls	r3, r3, #22
 801b1da:	d4e1      	bmi.n	801b1a0 <_fflush_r+0xc>
 801b1dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b1de:	f7ff fa91 	bl	801a704 <__retarget_lock_release_recursive>
 801b1e2:	e7dd      	b.n	801b1a0 <_fflush_r+0xc>

0801b1e4 <fiprintf>:
 801b1e4:	b40e      	push	{r1, r2, r3}
 801b1e6:	b503      	push	{r0, r1, lr}
 801b1e8:	4601      	mov	r1, r0
 801b1ea:	ab03      	add	r3, sp, #12
 801b1ec:	4805      	ldr	r0, [pc, #20]	; (801b204 <fiprintf+0x20>)
 801b1ee:	f853 2b04 	ldr.w	r2, [r3], #4
 801b1f2:	6800      	ldr	r0, [r0, #0]
 801b1f4:	9301      	str	r3, [sp, #4]
 801b1f6:	f7ff fc9d 	bl	801ab34 <_vfiprintf_r>
 801b1fa:	b002      	add	sp, #8
 801b1fc:	f85d eb04 	ldr.w	lr, [sp], #4
 801b200:	b003      	add	sp, #12
 801b202:	4770      	bx	lr
 801b204:	200000e8 	.word	0x200000e8

0801b208 <__swhatbuf_r>:
 801b208:	b570      	push	{r4, r5, r6, lr}
 801b20a:	460c      	mov	r4, r1
 801b20c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b210:	2900      	cmp	r1, #0
 801b212:	b096      	sub	sp, #88	; 0x58
 801b214:	4615      	mov	r5, r2
 801b216:	461e      	mov	r6, r3
 801b218:	da0d      	bge.n	801b236 <__swhatbuf_r+0x2e>
 801b21a:	89a3      	ldrh	r3, [r4, #12]
 801b21c:	f013 0f80 	tst.w	r3, #128	; 0x80
 801b220:	f04f 0100 	mov.w	r1, #0
 801b224:	bf0c      	ite	eq
 801b226:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801b22a:	2340      	movne	r3, #64	; 0x40
 801b22c:	2000      	movs	r0, #0
 801b22e:	6031      	str	r1, [r6, #0]
 801b230:	602b      	str	r3, [r5, #0]
 801b232:	b016      	add	sp, #88	; 0x58
 801b234:	bd70      	pop	{r4, r5, r6, pc}
 801b236:	466a      	mov	r2, sp
 801b238:	f000 f848 	bl	801b2cc <_fstat_r>
 801b23c:	2800      	cmp	r0, #0
 801b23e:	dbec      	blt.n	801b21a <__swhatbuf_r+0x12>
 801b240:	9901      	ldr	r1, [sp, #4]
 801b242:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801b246:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801b24a:	4259      	negs	r1, r3
 801b24c:	4159      	adcs	r1, r3
 801b24e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b252:	e7eb      	b.n	801b22c <__swhatbuf_r+0x24>

0801b254 <__smakebuf_r>:
 801b254:	898b      	ldrh	r3, [r1, #12]
 801b256:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b258:	079d      	lsls	r5, r3, #30
 801b25a:	4606      	mov	r6, r0
 801b25c:	460c      	mov	r4, r1
 801b25e:	d507      	bpl.n	801b270 <__smakebuf_r+0x1c>
 801b260:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b264:	6023      	str	r3, [r4, #0]
 801b266:	6123      	str	r3, [r4, #16]
 801b268:	2301      	movs	r3, #1
 801b26a:	6163      	str	r3, [r4, #20]
 801b26c:	b002      	add	sp, #8
 801b26e:	bd70      	pop	{r4, r5, r6, pc}
 801b270:	ab01      	add	r3, sp, #4
 801b272:	466a      	mov	r2, sp
 801b274:	f7ff ffc8 	bl	801b208 <__swhatbuf_r>
 801b278:	9900      	ldr	r1, [sp, #0]
 801b27a:	4605      	mov	r5, r0
 801b27c:	4630      	mov	r0, r6
 801b27e:	f7fe fc9d 	bl	8019bbc <_malloc_r>
 801b282:	b948      	cbnz	r0, 801b298 <__smakebuf_r+0x44>
 801b284:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b288:	059a      	lsls	r2, r3, #22
 801b28a:	d4ef      	bmi.n	801b26c <__smakebuf_r+0x18>
 801b28c:	f023 0303 	bic.w	r3, r3, #3
 801b290:	f043 0302 	orr.w	r3, r3, #2
 801b294:	81a3      	strh	r3, [r4, #12]
 801b296:	e7e3      	b.n	801b260 <__smakebuf_r+0xc>
 801b298:	89a3      	ldrh	r3, [r4, #12]
 801b29a:	6020      	str	r0, [r4, #0]
 801b29c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b2a0:	81a3      	strh	r3, [r4, #12]
 801b2a2:	9b00      	ldr	r3, [sp, #0]
 801b2a4:	6163      	str	r3, [r4, #20]
 801b2a6:	9b01      	ldr	r3, [sp, #4]
 801b2a8:	6120      	str	r0, [r4, #16]
 801b2aa:	b15b      	cbz	r3, 801b2c4 <__smakebuf_r+0x70>
 801b2ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b2b0:	4630      	mov	r0, r6
 801b2b2:	f000 f81d 	bl	801b2f0 <_isatty_r>
 801b2b6:	b128      	cbz	r0, 801b2c4 <__smakebuf_r+0x70>
 801b2b8:	89a3      	ldrh	r3, [r4, #12]
 801b2ba:	f023 0303 	bic.w	r3, r3, #3
 801b2be:	f043 0301 	orr.w	r3, r3, #1
 801b2c2:	81a3      	strh	r3, [r4, #12]
 801b2c4:	89a3      	ldrh	r3, [r4, #12]
 801b2c6:	431d      	orrs	r5, r3
 801b2c8:	81a5      	strh	r5, [r4, #12]
 801b2ca:	e7cf      	b.n	801b26c <__smakebuf_r+0x18>

0801b2cc <_fstat_r>:
 801b2cc:	b538      	push	{r3, r4, r5, lr}
 801b2ce:	4d07      	ldr	r5, [pc, #28]	; (801b2ec <_fstat_r+0x20>)
 801b2d0:	2300      	movs	r3, #0
 801b2d2:	4604      	mov	r4, r0
 801b2d4:	4608      	mov	r0, r1
 801b2d6:	4611      	mov	r1, r2
 801b2d8:	602b      	str	r3, [r5, #0]
 801b2da:	f7e8 fded 	bl	8003eb8 <_fstat>
 801b2de:	1c43      	adds	r3, r0, #1
 801b2e0:	d102      	bne.n	801b2e8 <_fstat_r+0x1c>
 801b2e2:	682b      	ldr	r3, [r5, #0]
 801b2e4:	b103      	cbz	r3, 801b2e8 <_fstat_r+0x1c>
 801b2e6:	6023      	str	r3, [r4, #0]
 801b2e8:	bd38      	pop	{r3, r4, r5, pc}
 801b2ea:	bf00      	nop
 801b2ec:	20009ea4 	.word	0x20009ea4

0801b2f0 <_isatty_r>:
 801b2f0:	b538      	push	{r3, r4, r5, lr}
 801b2f2:	4d06      	ldr	r5, [pc, #24]	; (801b30c <_isatty_r+0x1c>)
 801b2f4:	2300      	movs	r3, #0
 801b2f6:	4604      	mov	r4, r0
 801b2f8:	4608      	mov	r0, r1
 801b2fa:	602b      	str	r3, [r5, #0]
 801b2fc:	f7e8 fd4a 	bl	8003d94 <_isatty>
 801b300:	1c43      	adds	r3, r0, #1
 801b302:	d102      	bne.n	801b30a <_isatty_r+0x1a>
 801b304:	682b      	ldr	r3, [r5, #0]
 801b306:	b103      	cbz	r3, 801b30a <_isatty_r+0x1a>
 801b308:	6023      	str	r3, [r4, #0]
 801b30a:	bd38      	pop	{r3, r4, r5, pc}
 801b30c:	20009ea4 	.word	0x20009ea4

0801b310 <abort>:
 801b310:	b508      	push	{r3, lr}
 801b312:	2006      	movs	r0, #6
 801b314:	f000 f82c 	bl	801b370 <raise>
 801b318:	2001      	movs	r0, #1
 801b31a:	f000 f845 	bl	801b3a8 <_exit>

0801b31e <_raise_r>:
 801b31e:	291f      	cmp	r1, #31
 801b320:	b538      	push	{r3, r4, r5, lr}
 801b322:	4604      	mov	r4, r0
 801b324:	460d      	mov	r5, r1
 801b326:	d904      	bls.n	801b332 <_raise_r+0x14>
 801b328:	2316      	movs	r3, #22
 801b32a:	6003      	str	r3, [r0, #0]
 801b32c:	f04f 30ff 	mov.w	r0, #4294967295
 801b330:	bd38      	pop	{r3, r4, r5, pc}
 801b332:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801b334:	b112      	cbz	r2, 801b33c <_raise_r+0x1e>
 801b336:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b33a:	b94b      	cbnz	r3, 801b350 <_raise_r+0x32>
 801b33c:	4620      	mov	r0, r4
 801b33e:	f000 f831 	bl	801b3a4 <_getpid_r>
 801b342:	462a      	mov	r2, r5
 801b344:	4601      	mov	r1, r0
 801b346:	4620      	mov	r0, r4
 801b348:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b34c:	f000 b818 	b.w	801b380 <_kill_r>
 801b350:	2b01      	cmp	r3, #1
 801b352:	d00a      	beq.n	801b36a <_raise_r+0x4c>
 801b354:	1c59      	adds	r1, r3, #1
 801b356:	d103      	bne.n	801b360 <_raise_r+0x42>
 801b358:	2316      	movs	r3, #22
 801b35a:	6003      	str	r3, [r0, #0]
 801b35c:	2001      	movs	r0, #1
 801b35e:	e7e7      	b.n	801b330 <_raise_r+0x12>
 801b360:	2400      	movs	r4, #0
 801b362:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b366:	4628      	mov	r0, r5
 801b368:	4798      	blx	r3
 801b36a:	2000      	movs	r0, #0
 801b36c:	e7e0      	b.n	801b330 <_raise_r+0x12>
	...

0801b370 <raise>:
 801b370:	4b02      	ldr	r3, [pc, #8]	; (801b37c <raise+0xc>)
 801b372:	4601      	mov	r1, r0
 801b374:	6818      	ldr	r0, [r3, #0]
 801b376:	f7ff bfd2 	b.w	801b31e <_raise_r>
 801b37a:	bf00      	nop
 801b37c:	200000e8 	.word	0x200000e8

0801b380 <_kill_r>:
 801b380:	b538      	push	{r3, r4, r5, lr}
 801b382:	4d07      	ldr	r5, [pc, #28]	; (801b3a0 <_kill_r+0x20>)
 801b384:	2300      	movs	r3, #0
 801b386:	4604      	mov	r4, r0
 801b388:	4608      	mov	r0, r1
 801b38a:	4611      	mov	r1, r2
 801b38c:	602b      	str	r3, [r5, #0]
 801b38e:	f7e8 fdb6 	bl	8003efe <_kill>
 801b392:	1c43      	adds	r3, r0, #1
 801b394:	d102      	bne.n	801b39c <_kill_r+0x1c>
 801b396:	682b      	ldr	r3, [r5, #0]
 801b398:	b103      	cbz	r3, 801b39c <_kill_r+0x1c>
 801b39a:	6023      	str	r3, [r4, #0]
 801b39c:	bd38      	pop	{r3, r4, r5, pc}
 801b39e:	bf00      	nop
 801b3a0:	20009ea4 	.word	0x20009ea4

0801b3a4 <_getpid_r>:
 801b3a4:	f7e8 bda3 	b.w	8003eee <_getpid>

0801b3a8 <_exit>:
 801b3a8:	e7fe      	b.n	801b3a8 <_exit>
	...

0801b3ac <_init>:
 801b3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b3ae:	bf00      	nop
 801b3b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b3b2:	bc08      	pop	{r3}
 801b3b4:	469e      	mov	lr, r3
 801b3b6:	4770      	bx	lr

0801b3b8 <_fini>:
 801b3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b3ba:	bf00      	nop
 801b3bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b3be:	bc08      	pop	{r3}
 801b3c0:	469e      	mov	lr, r3
 801b3c2:	4770      	bx	lr
